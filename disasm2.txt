
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0d 7b 00 00       	call   c0007b2d <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 e4 40 02 c0       	mov    eax,0xc00240e4
c0000025:	3d e4 40 02 c0       	cmp    eax,0xc00240e4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 e4 40 02 c0       	push   0xc00240e4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 e4 40 02 c0       	mov    eax,0xc00240e4
c0000051:	2d e4 40 02 c0       	sub    eax,0xc00240e4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 e4 40 02 c0       	push   0xc00240e4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 5c 03 02 c0       	mov    ebx,0xc002035c
c0000097:	81 eb 58 03 02 c0    	sub    ebx,0xc0020358
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 58 03 02 c0       	mov    esi,0xc0020358
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 e4 40 02 c0       	push   0xc00240e4
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 e4 40 02 c0       	push   0xc00240e4
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 5b 55 01 00       	call   c0015808 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 fc a3 00 00       	call   c000a6c1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 39 55 01 00       	call   c0015808 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 46 5a 01 00       	call   c0015d34 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 e1 60 01 00       	call   c00163d8 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 6e 02 c0 	lgdtd  ds:0xc0026ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 73 11 01 00       	jmp    c00114f2 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 60 03 02 c0 02 	test   BYTE PTR [edx-0x3ffdfca0],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 60 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfca0],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 60 03 02 c0 08 	test   BYTE PTR [edx-0x3ffdfca0],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 60 03 02 c0 08 	test   BYTE PTR [edx-0x3ffdfca0],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 60 03 02 c0 04 	test   BYTE PTR [ecx-0x3ffdfca0],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 60 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfca0],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 61 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9efc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000e2a:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 a3 6a 00 00       	call   c00079a8 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 fe 69 00 00       	call   c00079a8 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e8 69 00 00       	call   c00079a8 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 e6 68 00 00       	call   c00079a8 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c00011af:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001206:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c000124f:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c000126a:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c0001324:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c000132a:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c0001331:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c00013f7:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c00013fd:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c0001404:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001552:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 64 04 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfb9c]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 ca 7b 01 00       	jmp    c00199a4 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 f4 7b 01 00       	jmp    c00199e4 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 15 7c 01 00       	jmp    c0019a24 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 c0 05 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdfa40]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 c0 05 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfa40]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba 04 2d 02 c0       	mov    edx,0xc0022d04
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba 7c 04 02 c0       	mov    edx,0xc002047c
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 82 04 02 c0       	mov    eax,0xc0020482
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf 40 05 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdfac0]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 8b 04 02 c0       	mov    eax,0xc002048b
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 c0 05 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdfa40]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 10 05 02 c0       	mov    eax,0xc0020510
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb 00 05 02 c0       	mov    ebx,0xc0020500
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 e0 04 02 c0       	mov    eax,0xc00204e0
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 f0 04 02 c0       	mov    eax,0xc00204f0
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba 92 04 02 c0       	mov    edx,0xc0020492
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba 9e 04 02 c0       	mov    edx,0xc002049e
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba b2 04 02 c0       	mov    edx,0xc00204b2
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 70 1e 00 00       	call   c0007ad3 <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 68 1e 00 00       	call   c0007ae3 <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c e0 08 02 c0 	mov    DWORD PTR [esp+0xc],0xc00208e0
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 e0 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc00208e0
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 e0 06 02 c0       	mov    eax,0xc00206e0
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 20 06 02 c0       	mov    eax,0xc0020620
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 e0 05 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfa20]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 e0 09 02 c0       	push   0xc00209e0
c0006147:	e8 fc 41 01 00       	call   c001a348 <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 ee 09 02 c0       	push   0xc00209ee
c000617f:	e8 c4 41 01 00       	call   c001a348 <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 2d 41 01 00       	call   c001a2ec <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 60 02 c0       	mov    eax,0xc0026020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 fd 09 02 c0       	push   0xc00209fd
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000657b:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c0006585:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c000659d:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c0006616:	8b 9d 4c 65 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd9ab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c00066ad:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c000670f:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000674c:	05 40 65 02 c0       	add    eax,0xc0026540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c000680c:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 00 0a 02 c0       	push   0xc0020a00
c000682f:	e8 14 3b 01 00       	call   c001a348 <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 22 3b 01 00       	call   c001a364 <iso_kprintfd>
c0006842:	c7 04 24 05 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a05
c0006849:	e8 fa 3a 01 00       	call   c001a348 <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006855:	e8 0a 3b 01 00       	call   c001a364 <iso_kprintfd>
c000685a:	c7 04 24 0b 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a0b
c0006861:	e8 e2 3a 01 00       	call   c001a348 <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c000686d:	e8 f2 3a 01 00       	call   c001a364 <iso_kprintfd>
c0006872:	c7 04 24 11 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a11
c0006879:	e8 ca 3a 01 00       	call   c001a348 <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006885:	e8 da 3a 01 00       	call   c001a364 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c00068eb:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 65 02 c0    	lea    ebp,[edi-0x3ffd9aa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 65 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd9aa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 fd 09 02 c0       	push   0xc00209fd
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006a2a:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006a30:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 65 02 c0    	lea    eax,[edi-0x3ffd9ab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 1a 0a 02 c0       	push   0xc0020a1a
c0006a52:	e8 f1 38 01 00       	call   c001a348 <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006a87:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 25 0a 02 c0       	push   0xc0020a25
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 2c 0a 02 c0       	push   0xc0020a2c
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006b25:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006b48:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 33 0a 02 c0       	push   0xc0020a33
c0006b69:	e8 da 37 01 00       	call   c001a348 <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 3e 0a 02 c0       	push   0xc0020a3e
c0006b84:	e8 bf 37 01 00       	call   c001a348 <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 65 02 c0       	push   0xc0026540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 20 0f 00 00       	call   c0007ad3 <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006bbf:	e8 0f 0f 00 00       	call   c0007ad3 <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 fa 0e 00 00       	call   c0007ad3 <malloc>
c0006bd9:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 e1 0e 00 00       	call   c0007ad3 <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006c1f:	e8 bf 0e 00 00       	call   c0007ae3 <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 b1 0e 00 00       	call   c0007ae3 <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 97 0e 00 00       	call   c0007ae3 <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 82 0e 00 00       	call   c0007ae3 <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c8f:	e8 96 a0 00 00       	call   c0010d2a <KeExecuteAtexit()>
c0006c94:	83 ec 0c             	sub    esp,0xc
c0006c97:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c9d:	50                   	push   eax
c0006c9e:	e8 bb 5d 00 00       	call   c000ca5e <Device::closeAll()>
c0006ca3:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca9:	83 c4 10             	add    esp,0x10
c0006cac:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cb2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cc2:	5b                   	pop    ebx
c0006cc3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc6:	5e                   	pop    esi
c0006cc7:	5f                   	pop    edi
c0006cc8:	ff e0                	jmp    eax

c0006cca <Krnl::firstTask()>:
c0006cca:	53                   	push   ebx
c0006ccb:	83 ec 14             	sub    esp,0x14
c0006cce:	fb                   	sti    
c0006ccf:	68 4f 0a 02 c0       	push   0xc0020a4f
c0006cd4:	e8 30 a1 00 00       	call   c0010e09 <KeSetBootMessage(char const*)>
c0006cd9:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006ce0:	e8 ee 0d 00 00       	call   c0007ad3 <malloc>
c0006ce5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cec:	89 c3                	mov    ebx,eax
c0006cee:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0006cf3:	50                   	push   eax
c0006cf4:	68 68 0a 02 c0       	push   0xc0020a68
c0006cf9:	6a 01                	push   0x1
c0006cfb:	53                   	push   ebx
c0006cfc:	e8 5f ee 00 00       	call   c0015b60 <Process::Process(bool, char const*, Process*, char**)>
c0006d01:	83 c4 20             	add    esp,0x20
c0006d04:	68 ff 00 00 00       	push   0xff
c0006d09:	6a 00                	push   0x0
c0006d0b:	68 1d 75 00 c0       	push   0xc000751d
c0006d10:	53                   	push   ebx
c0006d11:	e8 6e f0 00 00       	call   c0015d84 <Process::createThread(void (*)(void*), void*, int)>
c0006d16:	8b 15 f0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6f0
c0006d1c:	6a 7a                	push   0x7a
c0006d1e:	6a 00                	push   0x0
c0006d20:	68 48 68 01 c0       	push   0xc0016848
c0006d25:	52                   	push   edx
c0006d26:	e8 59 f0 00 00       	call   c0015d84 <Process::createThread(void (*)(void*), void*, int)>
c0006d2b:	83 c4 14             	add    esp,0x14
c0006d2e:	68 64 0b 02 c0       	push   0xc0020b64
c0006d33:	a3 a8 c6 02 c0       	mov    ds:0xc002c6a8,eax
c0006d38:	e8 cc a0 00 00       	call   c0010e09 <KeSetBootMessage(char const*)>
c0006d3d:	c6 05 bd 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ebd,0x1
c0006d44:	e8 75 a9 00 00       	call   c00116be <KeInitRand()>
c0006d49:	e8 1d ff 00 00       	call   c0016c6b <Vm::initialise8086()>
c0006d4e:	e8 47 4a 00 00       	call   c000b79a <Fs::initVFS()>
c0006d53:	c7 04 24 75 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a75
c0006d5a:	e8 aa a0 00 00       	call   c0010e09 <KeSetBootMessage(char const*)>
c0006d5f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d64:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	6a 00                	push   0x0
c0006d72:	50                   	push   eax
c0006d73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d76:	83 c4 14             	add    esp,0x14
c0006d79:	68 64 0b 02 c0       	push   0xc0020b64
c0006d7e:	e8 86 a0 00 00       	call   c0010e09 <KeSetBootMessage(char const*)>
c0006d83:	e8 35 46 00 00       	call   c000b3bd <KeInitialiseSymlinks()>
c0006d88:	e8 dd a5 00 00       	call   c001136a <KeLoadSystemEnv()>
c0006d8d:	e8 3a a8 00 00       	call   c00115cc <KeSetupPowerManager()>
c0006d92:	83 c4 0c             	add    esp,0xc
c0006d95:	6a 3a                	push   0x3a
c0006d97:	68 8f 0a 02 c0       	push   0xc0020a8f
c0006d9c:	68 98 0a 02 c0       	push   0xc0020a98
c0006da1:	e8 bc cf 00 00       	call   c0013d62 <Reg::readIntWithDefault(char*, char*, int)>
c0006da6:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da9:	e8 0a 56 00 00       	call   c000c3b8 <User::loadClockSettings(int)>
c0006dae:	c7 04 24 88 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b88
c0006db5:	e8 4f a0 00 00       	call   c0010e09 <KeSetBootMessage(char const*)>
c0006dba:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006dbf:	59                   	pop    ecx
c0006dc0:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dc6:	53                   	push   ebx
c0006dc7:	e8 90 5c 00 00       	call   c000ca5c <Device::loadDriversForAll()>
c0006dcc:	c7 04 24 a0 0a 02 c0 	mov    DWORD PTR [esp],0xc0020aa0
c0006dd3:	e8 31 a0 00 00       	call   c0010e09 <KeSetBootMessage(char const*)>
c0006dd8:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0006dde:	58                   	pop    eax
c0006ddf:	5a                   	pop    edx
c0006de0:	6a 01                	push   0x1
c0006de2:	68 b1 0a 02 c0       	push   0xc0020ab1
c0006de7:	e8 79 e7 00 00       	call   c0015565 <Thr::loadDLL(char const*, bool)>
c0006dec:	59                   	pop    ecx
c0006ded:	5a                   	pop    edx
c0006dee:	53                   	push   ebx
c0006def:	50                   	push   eax
c0006df0:	e8 b0 e9 00 00       	call   c00157a5 <Thr::executeDLL(unsigned long, void*)>
c0006df5:	83 c4 10             	add    esp,0x10
c0006df8:	83 ec 0c             	sub    esp,0xc
c0006dfb:	6a 02                	push   0x2
c0006dfd:	e8 ce f3 00 00       	call   c00161d0 <blockTask(TaskState)>
c0006e02:	83 c4 10             	add    esp,0x10
c0006e05:	eb f1                	jmp    c0006df8 <Krnl::firstTask()+0x12e>
c0006e07:	90                   	nop

c0006e08 <Computer::Computer()>:
c0006e08:	83 ec 0c             	sub    esp,0xc
c0006e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0f:	83 ec 08             	sub    esp,0x8
c0006e12:	68 cd 0a 02 c0       	push   0xc0020acd
c0006e17:	50                   	push   eax
c0006e18:	e8 bb 5c 00 00       	call   c000cad8 <Device::Device(char const*)>
c0006e1d:	83 c4 10             	add    esp,0x10
c0006e20:	ba d4 0b 02 c0       	mov    edx,0xc0020bd4
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	89 10                	mov    DWORD PTR [eax],edx
c0006e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e2f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e51:	83 ca 04             	or     edx,0x4
c0006e54:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e64:	0f b6 d0             	movzx  edx,al
c0006e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e76:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e7c:	0f b6 d0             	movzx  edx,al
c0006e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e83:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e8c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e92:	8d 50 01             	lea    edx,[eax+0x1]
c0006e95:	88 d1                	mov    cl,dl
c0006e97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e9b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006ea1:	0f b6 d0             	movzx  edx,al
c0006ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006eac:	83 e1 3f             	and    ecx,0x3f
c0006eaf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eb3:	90                   	nop
c0006eb4:	83 c4 0c             	add    esp,0xc
c0006eb7:	c3                   	ret    

c0006eb8 <Computer::setBootMessage(char const*)>:
c0006eb8:	c3                   	ret    
c0006eb9:	90                   	nop

c0006eba <Computer::detectFeatures()>:
c0006eba:	55                   	push   ebp
c0006ebb:	57                   	push   edi
c0006ebc:	56                   	push   esi
c0006ebd:	53                   	push   ebx
c0006ebe:	83 ec 1c             	sub    esp,0x1c
c0006ec1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ec5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ecb:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ed1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ed7:	e8 1d 93 ff ff       	call   c00001f9 <detectCPUID>
c0006edc:	31 d2                	xor    edx,edx
c0006ede:	85 c0                	test   eax,eax
c0006ee0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee6:	0f 95 c2             	setne  dl
c0006ee9:	d1 e2                	shl    edx,1
c0006eeb:	83 e0 fd             	and    eax,0xfffffffd
c0006eee:	09 d0                	or     eax,edx
c0006ef0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef6:	a8 02                	test   al,0x2
c0006ef8:	75 51                	jne    c0006f4b <Computer::detectFeatures()+0x91>
c0006efa:	f6 05 d1 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed1,0x4
c0006f01:	74 0f                	je     c0006f12 <Computer::detectFeatures()+0x58>
c0006f03:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f09:	83 e0 fb             	and    eax,0xfffffffb
c0006f0c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f12:	e8 3f 84 01 00       	call   c001f356 <x87Detect>
c0006f17:	83 e0 01             	and    eax,0x1
c0006f1a:	c1 e0 04             	shl    eax,0x4
c0006f1d:	89 c2                	mov    edx,eax
c0006f1f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f25:	83 e0 ef             	and    eax,0xffffffef
c0006f28:	09 d0                	or     eax,edx
c0006f2a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f30:	a8 10                	test   al,0x10
c0006f32:	88 c2                	mov    dl,al
c0006f34:	0f 85 33 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1b3>
c0006f3a:	80 e2 80             	and    dl,0x80
c0006f3d:	0f 85 4c 01 00 00    	jne    c000708f <Computer::detectFeatures()+0x1d5>
c0006f43:	83 c4 1c             	add    esp,0x1c
c0006f46:	5b                   	pop    ebx
c0006f47:	5e                   	pop    esi
c0006f48:	5f                   	pop    edi
c0006f49:	5d                   	pop    ebp
c0006f4a:	c3                   	ret    
c0006f4b:	83 ec 0c             	sub    esp,0xc
c0006f4e:	6a 20                	push   0x20
c0006f50:	e8 ed 92 00 00       	call   c0010242 <CPU::cpuidCheckEDX(unsigned int)>
c0006f55:	83 e0 01             	and    eax,0x1
c0006f58:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f5f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f65:	83 e0 f7             	and    eax,0xfffffff7
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f70:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f77:	e8 c6 92 00 00       	call   c0010242 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	83 e2 01             	and    edx,0x1
c0006f87:	83 e0 fe             	and    eax,0xfffffffe
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f99:	e8 a4 92 00 00       	call   c0010242 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	89 c2                	mov    edx,eax
c0006fa0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fa6:	c1 e2 07             	shl    edx,0x7
c0006fa9:	83 e0 7f             	and    eax,0x7f
c0006fac:	09 d0                	or     eax,edx
c0006fae:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fb4:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fbb:	e8 82 92 00 00       	call   c0010242 <CPU::cpuidCheckEDX(unsigned int)>
c0006fc0:	83 c4 10             	add    esp,0x10
c0006fc3:	83 e0 01             	and    eax,0x1
c0006fc6:	c1 e0 05             	shl    eax,0x5
c0006fc9:	89 c2                	mov    edx,eax
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	83 e0 df             	and    eax,0xffffffdf
c0006fd4:	09 d0                	or     eax,edx
c0006fd6:	f7 05 d0 6e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026ed0,0x401
c0006fe0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe6:	0f 84 c9 00 00 00    	je     c00070b5 <Computer::detectFeatures()+0x1fb>
c0006fec:	83 e0 fe             	and    eax,0xfffffffe
c0006fef:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ff5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ffb:	89 c2                	mov    edx,eax
c0006ffd:	83 e2 09             	and    edx,0x9
c0007000:	83 fa 01             	cmp    edx,0x1
c0007003:	75 09                	jne    c000700e <Computer::detectFeatures()+0x154>
c0007005:	83 e0 fe             	and    eax,0xfffffffe
c0007008:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000700e:	83 ec 0c             	sub    esp,0xc
c0007011:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007015:	50                   	push   eax
c0007016:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000701a:	55                   	push   ebp
c000701b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000701f:	57                   	push   edi
c0007020:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007024:	56                   	push   esi
c0007025:	68 00 00 00 80       	push   0x80000000
c000702a:	e8 8f 91 00 00       	call   c00101be <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702f:	83 c4 20             	add    esp,0x20
c0007032:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007039:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000703d:	0f 86 b7 fe ff ff    	jbe    c0006efa <Computer::detectFeatures()+0x40>
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	50                   	push   eax
c0007047:	55                   	push   ebp
c0007048:	57                   	push   edi
c0007049:	56                   	push   esi
c000704a:	68 01 00 00 80       	push   0x80000001
c000704f:	e8 6a 91 00 00       	call   c00101be <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007054:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000705a:	83 c4 20             	add    esp,0x20
c000705d:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007062:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007068:	e9 8d fe ff ff       	jmp    c0006efa <Computer::detectFeatures()+0x40>
c000706d:	e8 9e 82 01 00       	call   c001f310 <absolutelyNoChanceInHell>
c0007072:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007078:	83 e2 7f             	and    edx,0x7f
c000707b:	c1 e0 07             	shl    eax,0x7
c000707e:	09 c2                	or     edx,eax
c0007080:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007086:	80 e2 80             	and    dl,0x80
c0007089:	0f 84 b4 fe ff ff    	je     c0006f43 <Computer::detectFeatures()+0x89>
c000708f:	e8 ec 7e 01 00       	call   c001ef80 <avxDetect>
c0007094:	83 e0 01             	and    eax,0x1
c0007097:	c1 e0 05             	shl    eax,0x5
c000709a:	89 c2                	mov    edx,eax
c000709c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00070a2:	83 e0 df             	and    eax,0xffffffdf
c00070a5:	09 d0                	or     eax,edx
c00070a7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070ad:	83 c4 1c             	add    esp,0x1c
c00070b0:	5b                   	pop    ebx
c00070b1:	5e                   	pop    esi
c00070b2:	5f                   	pop    edi
c00070b3:	5d                   	pop    ebp
c00070b4:	c3                   	ret    
c00070b5:	83 ec 0c             	sub    esp,0xc
c00070b8:	68 00 02 00 00       	push   0x200
c00070bd:	e8 80 91 00 00       	call   c0010242 <CPU::cpuidCheckEDX(unsigned int)>
c00070c2:	83 c4 10             	add    esp,0x10
c00070c5:	89 c2                	mov    edx,eax
c00070c7:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070cd:	83 e2 01             	and    edx,0x1
c00070d0:	83 e0 fe             	and    eax,0xfffffffe
c00070d3:	09 d0                	or     eax,edx
c00070d5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070db:	e9 15 ff ff ff       	jmp    c0006ff5 <Computer::detectFeatures()+0x13b>

c00070e0 <Computer::displayFeatures()>:
c00070e0:	c3                   	ret    
c00070e1:	90                   	nop

c00070e2 <Computer::rdmsr(unsigned int)>:
c00070e2:	83 ec 0c             	sub    esp,0xc
c00070e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070f0:	74 0a                	je     c00070fc <Computer::rdmsr(unsigned int)+0x1a>
c00070f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070f6:	0f 32                	rdmsr  
c00070f8:	83 c4 0c             	add    esp,0xc
c00070fb:	c3                   	ret    
c00070fc:	83 ec 0c             	sub    esp,0xc
c00070ff:	68 d6 0a 02 c0       	push   0xc0020ad6
c0007104:	e8 fe a3 00 00       	call   c0011507 <KePanic(char const*)>
c0007109:	83 c4 10             	add    esp,0x10
c000710c:	eb e4                	jmp    c00070f2 <Computer::rdmsr(unsigned int)+0x10>

c000710e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000710e:	57                   	push   edi
c000710f:	56                   	push   esi
c0007110:	83 ec 04             	sub    esp,0x4
c0007113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007117:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000711b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000711f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007126:	74 10                	je     c0007138 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007128:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000712c:	89 f0                	mov    eax,esi
c000712e:	89 fa                	mov    edx,edi
c0007130:	0f 30                	wrmsr  
c0007132:	83 c4 04             	add    esp,0x4
c0007135:	5e                   	pop    esi
c0007136:	5f                   	pop    edi
c0007137:	c3                   	ret    
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	68 dc 0a 02 c0       	push   0xc0020adc
c0007140:	e8 c2 a3 00 00       	call   c0011507 <KePanic(char const*)>
c0007145:	83 c4 10             	add    esp,0x10
c0007148:	eb de                	jmp    c0007128 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000714a <Computer::shutdown()>:
c000714a:	83 ec 0c             	sub    esp,0xc
c000714d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007151:	8b 10                	mov    edx,DWORD PTR [eax]
c0007153:	6a 00                	push   0x0
c0007155:	6a 00                	push   0x0
c0007157:	6a 00                	push   0x0
c0007159:	50                   	push   eax
c000715a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000715d:	83 c4 1c             	add    esp,0x1c
c0007160:	c3                   	ret    
c0007161:	90                   	nop

c0007162 <Computer::restart()>:
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007169:	8b 10                	mov    edx,DWORD PTR [eax]
c000716b:	6a 00                	push   0x0
c000716d:	6a 00                	push   0x0
c000716f:	6a 01                	push   0x1
c0007171:	50                   	push   eax
c0007172:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007175:	83 c4 1c             	add    esp,0x1c
c0007178:	c3                   	ret    
c0007179:	90                   	nop

c000717a <Computer::sleep()>:
c000717a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000717e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007184:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007188:	e9 87 8b 00 00       	jmp    c000fd14 <ACPI::sleep()>
c000718d:	90                   	nop

c000718e <Computer::nmiEnabled()>:
c000718e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007192:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007198:	c3                   	ret    
c0007199:	90                   	nop

c000719a <Computer::readCMOS(unsigned char)>:
c000719a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000719e:	31 d2                	xor    edx,edx
c00071a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071a4:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071ab:	75 02                	jne    c00071af <Computer::readCMOS(unsigned char)+0x15>
c00071ad:	b2 80                	mov    dl,0x80
c00071af:	09 d0                	or     eax,edx
c00071b1:	e6 70                	out    0x70,al
c00071b3:	e4 71                	in     al,0x71
c00071b5:	c3                   	ret    

c00071b6 <Computer::enableNMI(bool)>:
c00071b6:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071be:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071c4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071cc:	eb cc                	jmp    c000719a <Computer::readCMOS(unsigned char)>

c00071ce <Computer::open(int, int, void*)>:
c00071ce:	56                   	push   esi
c00071cf:	53                   	push   ebx
c00071d0:	83 ec 10             	sub    esp,0x10
c00071d3:	f6 05 d0 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed0,0x4
c00071da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071de:	68 e2 0a 02 c0       	push   0xc0020ae2
c00071e3:	0f 94 05 40 35 02 c0 	sete   BYTE PTR ds:0xc0023540
c00071ea:	e8 1a 9c 00 00       	call   c0010e09 <KeSetBootMessage(char const*)>
c00071ef:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071f6:	e8 d8 08 00 00       	call   c0007ad3 <malloc>
c00071fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00071fe:	89 c6                	mov    esi,eax
c0007200:	e8 83 86 00 00       	call   c000f888 <ACPI::ACPI()>
c0007205:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000720b:	58                   	pop    eax
c000720c:	5a                   	pop    edx
c000720d:	56                   	push   esi
c000720e:	53                   	push   ebx
c000720f:	e8 2c 57 00 00       	call   c000c940 <Device::addChild(Device*)>
c0007214:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007217:	e8 9e fc ff ff       	call   c0006eba <Computer::detectFeatures()>
c000721c:	59                   	pop    ecx
c000721d:	5e                   	pop    esi
c000721e:	6a 01                	push   0x1
c0007220:	53                   	push   ebx
c0007221:	e8 90 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c0007226:	c7 04 24 fa 0a 02 c0 	mov    DWORD PTR [esp],0xc0020afa
c000722d:	e8 d7 9b 00 00       	call   c0010e09 <KeSetBootMessage(char const*)>
c0007232:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007239:	e8 95 08 00 00       	call   c0007ad3 <malloc>
c000723e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007241:	89 c6                	mov    esi,eax
c0007243:	e8 b2 90 00 00       	call   c00102fa <CPU::CPU()>
c0007248:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000724e:	58                   	pop    eax
c000724f:	5a                   	pop    edx
c0007250:	56                   	push   esi
c0007251:	53                   	push   ebx
c0007252:	e8 e9 56 00 00       	call   c000c940 <Device::addChild(Device*)>
c0007257:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000725d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007261:	8b 10                	mov    edx,DWORD PTR [eax]
c0007263:	51                   	push   ecx
c0007264:	6a 00                	push   0x0
c0007266:	6a 00                	push   0x0
c0007268:	50                   	push   eax
c0007269:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000726c:	83 c4 14             	add    esp,0x14
c000726f:	68 a8 0b 02 c0       	push   0xc0020ba8
c0007274:	e8 90 9b 00 00       	call   c0010e09 <KeSetBootMessage(char const*)>
c0007279:	e8 34 0c 01 00       	call   c0017eb2 <HalInitialiseCoprocessor()>
c000727e:	c7 04 24 14 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b14
c0007285:	e8 7f 9b 00 00       	call   c0010e09 <KeSetBootMessage(char const*)>
c000728a:	c7 04 24 ca 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cca
c0007291:	e8 16 ec 00 00       	call   c0015eac <setupMultitasking(void (*)())>
c0007296:	83 c4 14             	add    esp,0x14
c0007299:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000729e:	5b                   	pop    ebx
c000729f:	5e                   	pop    esi
c00072a0:	c3                   	ret    
c00072a1:	90                   	nop

c00072a2 <Computer::disableNMI()>:
c00072a2:	6a 00                	push   0x0
c00072a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a8:	50                   	push   eax
c00072a9:	e8 08 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c00072ae:	5a                   	pop    edx
c00072af:	59                   	pop    ecx
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop

c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072b2:	53                   	push   ebx
c00072b3:	b2 80                	mov    dl,0x80
c00072b5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072c1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072c8:	74 02                	je     c00072cc <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072ca:	31 d2                	xor    edx,edx
c00072cc:	09 d0                	or     eax,edx
c00072ce:	e6 70                	out    0x70,al
c00072d0:	88 c8                	mov    al,cl
c00072d2:	e6 71                	out    0x71,al
c00072d4:	5b                   	pop    ebx
c00072d5:	c3                   	ret    

c00072d6 <Computer::handleNMI()>:
c00072d6:	56                   	push   esi
c00072d7:	53                   	push   ebx
c00072d8:	83 ec 10             	sub    esp,0x10
c00072db:	e4 92                	in     al,0x92
c00072dd:	89 c6                	mov    esi,eax
c00072df:	e4 61                	in     al,0x61
c00072e1:	68 2f 0b 02 c0       	push   0xc0020b2f
c00072e6:	88 c3                	mov    bl,al
c00072e8:	e8 1d 36 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00072ed:	83 c4 10             	add    esp,0x10
c00072f0:	83 e6 10             	and    esi,0x10
c00072f3:	75 10                	jne    c0007305 <Computer::handleNMI()+0x2f>
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	75 20                	jne    c000731a <Computer::handleNMI()+0x44>
c00072fa:	80 e3 80             	and    bl,0x80
c00072fd:	75 30                	jne    c000732f <Computer::handleNMI()+0x59>
c00072ff:	83 c4 04             	add    esp,0x4
c0007302:	5b                   	pop    ebx
c0007303:	5e                   	pop    esi
c0007304:	c3                   	ret    
c0007305:	83 ec 0c             	sub    esp,0xc
c0007308:	68 40 0b 02 c0       	push   0xc0020b40
c000730d:	e8 f5 a1 00 00       	call   c0011507 <KePanic(char const*)>
c0007312:	83 c4 10             	add    esp,0x10
c0007315:	f6 c3 40             	test   bl,0x40
c0007318:	74 e0                	je     c00072fa <Computer::handleNMI()+0x24>
c000731a:	83 ec 0c             	sub    esp,0xc
c000731d:	68 4d 0b 02 c0       	push   0xc0020b4d
c0007322:	e8 e0 a1 00 00       	call   c0011507 <KePanic(char const*)>
c0007327:	83 c4 10             	add    esp,0x10
c000732a:	80 e3 80             	and    bl,0x80
c000732d:	74 d0                	je     c00072ff <Computer::handleNMI()+0x29>
c000732f:	c7 44 24 10 57 0b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020b57
c0007337:	83 c4 04             	add    esp,0x4
c000733a:	5b                   	pop    ebx
c000733b:	5e                   	pop    esi
c000733c:	e9 c6 a1 00 00       	jmp    c0011507 <KePanic(char const*)>
c0007341:	90                   	nop

c0007342 <GDTEntry::setBase(unsigned int)>:
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000734a:	89 c1                	mov    ecx,eax
c000734c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007350:	c1 e9 10             	shr    ecx,0x10
c0007353:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007356:	c1 e8 18             	shr    eax,0x18
c0007359:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000735c:	c3                   	ret    
c000735d:	90                   	nop

c000735e <GDTEntry::setLimit(unsigned int)>:
c000735e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007362:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007366:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007369:	66 89 01             	mov    WORD PTR [ecx],ax
c000736c:	c1 e8 10             	shr    eax,0x10
c000736f:	83 e0 0f             	and    eax,0xf
c0007372:	83 e2 f0             	and    edx,0xfffffff0
c0007375:	09 d0                	or     eax,edx
c0007377:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000737a:	c3                   	ret    
c000737b:	90                   	nop

c000737c <GDT::GDT()>:
c000737c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007380:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000738a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007390:	90                   	nop
c0007391:	c3                   	ret    

c0007392 <GDT::addEntry(GDTEntry)>:
c0007392:	53                   	push   ebx
c0007393:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007397:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000739f:	8b 02                	mov    eax,DWORD PTR [edx]
c00073a1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073a5:	8d 48 01             	lea    ecx,[eax+0x1]
c00073a8:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073ac:	c1 e0 03             	shl    eax,0x3
c00073af:	89 0a                	mov    DWORD PTR [edx],ecx
c00073b1:	5b                   	pop    ebx
c00073b2:	c3                   	ret    
c00073b3:	90                   	nop

c00073b4 <GDT::getNumberOfEntries()>:
c00073b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00073ba:	c3                   	ret    
c00073bb:	90                   	nop

c00073bc <GDT::flush()>:
c00073bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073c2:	83 c0 04             	add    eax,0x4
c00073c5:	a3 c2 6e 02 c0       	mov    ds:0xc0026ec2,eax
c00073ca:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073d1:	66 89 15 c0 6e 02 c0 	mov    WORD PTR ds:0xc0026ec0,dx
c00073d8:	e9 7d 8f ff ff       	jmp    c000035a <loadGDT>
c00073dd:	90                   	nop

c00073de <GDT::setup()>:
c00073de:	57                   	push   edi
c00073df:	56                   	push   esi
c00073e0:	53                   	push   ebx
c00073e1:	83 ec 30             	sub    esp,0x30
c00073e4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073e8:	6a 00                	push   0x0
c00073ea:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ee:	56                   	push   esi
c00073ef:	e8 4e ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c00073f4:	6a 00                	push   0x0
c00073f6:	56                   	push   esi
c00073f7:	e8 62 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c00073fc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007404:	6a 00                	push   0x0
c0007406:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000740a:	56                   	push   esi
c000740b:	e8 32 ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007410:	68 ff ff ff 00       	push   0xffffff
c0007415:	56                   	push   esi
c0007416:	e8 43 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c000741b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000741f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007423:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007428:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000742c:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007431:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007435:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007439:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000743d:	89 f8                	mov    eax,edi
c000743f:	89 fa                	mov    edx,edi
c0007441:	80 e4 f7             	and    ah,0xf7
c0007444:	80 ce 60             	or     dh,0x60
c0007447:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000744b:	89 c7                	mov    edi,eax
c000744d:	80 cc 60             	or     ah,0x60
c0007450:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007454:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007458:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000745c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007460:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007464:	83 c4 20             	add    esp,0x20
c0007467:	6a 00                	push   0x0
c0007469:	8d 44 24 24          	lea    eax,[esp+0x24]
c000746d:	50                   	push   eax
c000746e:	e8 cf fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007473:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007477:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000747b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000747f:	83 e0 3f             	and    eax,0x3f
c0007482:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007486:	6a 00                	push   0x0
c0007488:	8d 44 24 34          	lea    eax,[esp+0x34]
c000748c:	50                   	push   eax
c000748d:	e8 b0 fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007492:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007496:	83 e0 3f             	and    eax,0x3f
c0007499:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000749d:	83 c4 0c             	add    esp,0xc
c00074a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a8:	53                   	push   ebx
c00074a9:	e8 e4 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ae:	83 c4 0c             	add    esp,0xc
c00074b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b9:	53                   	push   ebx
c00074ba:	e8 d3 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074bf:	83 c4 0c             	add    esp,0xc
c00074c2:	57                   	push   edi
c00074c3:	56                   	push   esi
c00074c4:	53                   	push   ebx
c00074c5:	e8 c8 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ca:	83 c4 0c             	add    esp,0xc
c00074cd:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d5:	53                   	push   ebx
c00074d6:	e8 b7 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074db:	83 c4 0c             	add    esp,0xc
c00074de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e6:	53                   	push   ebx
c00074e7:	e8 a6 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ec:	83 c4 0c             	add    esp,0xc
c00074ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f7:	53                   	push   ebx
c00074f8:	e8 95 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074fd:	83 c4 0c             	add    esp,0xc
c0007500:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007504:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007508:	53                   	push   ebx
c0007509:	e8 84 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c000750e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007511:	e8 a6 fe ff ff       	call   c00073bc <GDT::flush()>
c0007516:	83 c4 40             	add    esp,0x40
c0007519:	5b                   	pop    ebx
c000751a:	5e                   	pop    esi
c000751b:	5f                   	pop    edi
c000751c:	c3                   	ret    

c000751d <idleFunction(void*)>:
c000751d:	83 ec 0c             	sub    esp,0xc
c0007520:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007525:	48                   	dec    eax
c0007526:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000752b:	75 01                	jne    c000752e <idleFunction(void*)+0x11>
c000752d:	fb                   	sti    
c000752e:	e8 4b 06 01 00       	call   c0017b7e <HalSystemIdle()>
c0007533:	e8 da 83 01 00       	call   c001f912 <idleCommon()>
c0007538:	eb f4                	jmp    c000752e <idleFunction(void*)+0x11>
c000753a:	66 90                	xchg   ax,ax

c000753c <IDTEntry::IDTEntry(bool)>:
c000753c:	53                   	push   ebx
c000753d:	83 ec 04             	sub    esp,0x4
c0007540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007544:	88 04 24             	mov    BYTE PTR [esp],al
c0007547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007559:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000755d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007560:	83 e2 f0             	and    edx,0xfffffff0
c0007563:	83 ca 0e             	or     edx,0xe
c0007566:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007570:	83 e2 ef             	and    edx,0xffffffef
c0007573:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007576:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000757a:	85 c0                	test   eax,eax
c000757c:	74 06                	je     c0007584 <IDTEntry::IDTEntry(bool)+0x48>
c000757e:	b2 03                	mov    dl,0x3
c0007580:	eb 06                	jmp    c0007588 <IDTEntry::IDTEntry(bool)+0x4c>
c0007582:	66 90                	xchg   ax,ax
c0007584:	b2 00                	mov    dl,0x0
c0007586:	66 90                	xchg   ax,ax
c0007588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000758c:	83 e2 03             	and    edx,0x3
c000758f:	89 d3                	mov    ebx,edx
c0007591:	c1 e3 05             	shl    ebx,0x5
c0007594:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007597:	83 e2 9f             	and    edx,0xffffff9f
c000759a:	88 d1                	mov    cl,dl
c000759c:	88 da                	mov    dl,bl
c000759e:	09 ca                	or     edx,ecx
c00075a0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075a7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075aa:	83 ca 80             	or     edx,0xffffff80
c00075ad:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b0:	90                   	nop
c00075b1:	83 c4 04             	add    esp,0x4
c00075b4:	5b                   	pop    ebx
c00075b5:	c3                   	ret    

c00075b6 <IDTEntry::setOffset(unsigned int)>:
c00075b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075be:	66 89 02             	mov    WORD PTR [edx],ax
c00075c1:	c1 e8 10             	shr    eax,0x10
c00075c4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c8:	c3                   	ret    
c00075c9:	90                   	nop
c00075ca:	66 90                	xchg   ax,ax

c00075cc <IDT::IDT()>:
c00075cc:	90                   	nop
c00075cd:	c3                   	ret    

c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075d2:	83 c0 30             	add    eax,0x30
c00075d5:	c3                   	ret    

c00075d6 <IDT::addEntry(IDTEntry, int)>:
c00075d6:	53                   	push   ebx
c00075d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075e7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ea:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ee:	5b                   	pop    ebx
c00075ef:	c3                   	ret    

c00075f0 <IDT::addEntry(int, void (*)(), bool)>:
c00075f0:	53                   	push   ebx
c00075f1:	83 ec 10             	sub    esp,0x10
c00075f4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f9:	50                   	push   eax
c00075fa:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075fe:	53                   	push   ebx
c00075ff:	e8 38 ff ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c0007604:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007608:	53                   	push   ebx
c0007609:	e8 a8 ff ff ff       	call   c00075b6 <IDTEntry::setOffset(unsigned int)>
c000760e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007612:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007616:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000761a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000761e:	e8 b3 ff ff ff       	call   c00075d6 <IDT::addEntry(IDTEntry, int)>
c0007623:	83 c4 30             	add    esp,0x30
c0007626:	5b                   	pop    ebx
c0007627:	c3                   	ret    

c0007628 <IDT::flush()>:
c0007628:	66 c7 05 c8 6e 02 c0 ff 07 	mov    WORD PTR ds:0xc0026ec8,0x7ff
c0007631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007635:	a3 ca 6e 02 c0       	mov    ds:0xc0026eca,eax
c000763a:	0f 01 1d c8 6e 02 c0 	lidtd  ds:0xc0026ec8
c0007641:	c3                   	ret    

c0007642 <IDT::setup()>:
c0007642:	57                   	push   edi
c0007643:	56                   	push   esi
c0007644:	53                   	push   ebx
c0007645:	83 ec 10             	sub    esp,0x10
c0007648:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000764c:	6a 00                	push   0x0
c000764e:	68 10 f0 01 c0       	push   0xc001f010
c0007653:	6a 00                	push   0x0
c0007655:	53                   	push   ebx
c0007656:	e8 95 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000765b:	6a 00                	push   0x0
c000765d:	68 20 f0 01 c0       	push   0xc001f020
c0007662:	6a 01                	push   0x1
c0007664:	53                   	push   ebx
c0007665:	e8 86 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000766a:	83 c4 20             	add    esp,0x20
c000766d:	6a 00                	push   0x0
c000766f:	68 2a f0 01 c0       	push   0xc001f02a
c0007674:	6a 02                	push   0x2
c0007676:	53                   	push   ebx
c0007677:	e8 74 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000767c:	6a 00                	push   0x0
c000767e:	68 34 f0 01 c0       	push   0xc001f034
c0007683:	6a 03                	push   0x3
c0007685:	53                   	push   ebx
c0007686:	e8 65 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000768b:	83 c4 20             	add    esp,0x20
c000768e:	6a 00                	push   0x0
c0007690:	68 3e f0 01 c0       	push   0xc001f03e
c0007695:	6a 04                	push   0x4
c0007697:	53                   	push   ebx
c0007698:	e8 53 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000769d:	6a 00                	push   0x0
c000769f:	68 48 f0 01 c0       	push   0xc001f048
c00076a4:	6a 05                	push   0x5
c00076a6:	53                   	push   ebx
c00076a7:	e8 44 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ac:	83 c4 20             	add    esp,0x20
c00076af:	6a 00                	push   0x0
c00076b1:	68 52 f0 01 c0       	push   0xc001f052
c00076b6:	6a 06                	push   0x6
c00076b8:	53                   	push   ebx
c00076b9:	e8 32 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076be:	6a 00                	push   0x0
c00076c0:	68 5c f0 01 c0       	push   0xc001f05c
c00076c5:	6a 07                	push   0x7
c00076c7:	53                   	push   ebx
c00076c8:	e8 23 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076cd:	83 c4 20             	add    esp,0x20
c00076d0:	6a 00                	push   0x0
c00076d2:	68 66 f0 01 c0       	push   0xc001f066
c00076d7:	6a 08                	push   0x8
c00076d9:	53                   	push   ebx
c00076da:	e8 11 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076df:	6a 00                	push   0x0
c00076e1:	68 6e f0 01 c0       	push   0xc001f06e
c00076e6:	6a 09                	push   0x9
c00076e8:	53                   	push   ebx
c00076e9:	e8 02 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ee:	83 c4 20             	add    esp,0x20
c00076f1:	6a 00                	push   0x0
c00076f3:	68 78 f0 01 c0       	push   0xc001f078
c00076f8:	6a 0a                	push   0xa
c00076fa:	53                   	push   ebx
c00076fb:	e8 f0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007700:	6a 00                	push   0x0
c0007702:	68 80 f0 01 c0       	push   0xc001f080
c0007707:	6a 0b                	push   0xb
c0007709:	53                   	push   ebx
c000770a:	e8 e1 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000770f:	83 c4 20             	add    esp,0x20
c0007712:	6a 00                	push   0x0
c0007714:	68 88 f0 01 c0       	push   0xc001f088
c0007719:	6a 0c                	push   0xc
c000771b:	53                   	push   ebx
c000771c:	e8 cf fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007721:	6a 00                	push   0x0
c0007723:	68 90 f0 01 c0       	push   0xc001f090
c0007728:	6a 0d                	push   0xd
c000772a:	53                   	push   ebx
c000772b:	e8 c0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007730:	83 c4 20             	add    esp,0x20
c0007733:	6a 00                	push   0x0
c0007735:	68 aa f0 01 c0       	push   0xc001f0aa
c000773a:	6a 0e                	push   0xe
c000773c:	53                   	push   ebx
c000773d:	e8 ae fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007742:	6a 00                	push   0x0
c0007744:	68 b2 f0 01 c0       	push   0xc001f0b2
c0007749:	6a 0f                	push   0xf
c000774b:	53                   	push   ebx
c000774c:	e8 9f fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007751:	83 c4 20             	add    esp,0x20
c0007754:	6a 00                	push   0x0
c0007756:	68 bc f0 01 c0       	push   0xc001f0bc
c000775b:	6a 10                	push   0x10
c000775d:	53                   	push   ebx
c000775e:	e8 8d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007763:	6a 00                	push   0x0
c0007765:	68 c6 f0 01 c0       	push   0xc001f0c6
c000776a:	6a 11                	push   0x11
c000776c:	53                   	push   ebx
c000776d:	e8 7e fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007772:	83 c4 20             	add    esp,0x20
c0007775:	6a 00                	push   0x0
c0007777:	68 d0 f0 01 c0       	push   0xc001f0d0
c000777c:	6a 12                	push   0x12
c000777e:	53                   	push   ebx
c000777f:	e8 6c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007784:	6a 01                	push   0x1
c0007786:	68 6a f1 01 c0       	push   0xc001f16a
c000778b:	6a 60                	push   0x60
c000778d:	53                   	push   ebx
c000778e:	e8 5d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007793:	83 c4 20             	add    esp,0x20
c0007796:	6a 00                	push   0x0
c0007798:	68 71 f1 01 c0       	push   0xc001f171
c000779d:	6a 20                	push   0x20
c000779f:	53                   	push   ebx
c00077a0:	e8 4b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077a5:	6a 00                	push   0x0
c00077a7:	68 5c f1 01 c0       	push   0xc001f15c
c00077ac:	6a 21                	push   0x21
c00077ae:	53                   	push   ebx
c00077af:	e8 3c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077b4:	83 c4 20             	add    esp,0x20
c00077b7:	6a 00                	push   0x0
c00077b9:	68 63 f1 01 c0       	push   0xc001f163
c00077be:	6a 22                	push   0x22
c00077c0:	53                   	push   ebx
c00077c1:	e8 2a fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077c6:	6a 00                	push   0x0
c00077c8:	68 da f0 01 c0       	push   0xc001f0da
c00077cd:	6a 23                	push   0x23
c00077cf:	53                   	push   ebx
c00077d0:	e8 1b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	6a 00                	push   0x0
c00077da:	68 e4 f0 01 c0       	push   0xc001f0e4
c00077df:	6a 24                	push   0x24
c00077e1:	53                   	push   ebx
c00077e2:	e8 09 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077e7:	6a 00                	push   0x0
c00077e9:	68 ee f0 01 c0       	push   0xc001f0ee
c00077ee:	6a 25                	push   0x25
c00077f0:	53                   	push   ebx
c00077f1:	e8 fa fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077f6:	83 c4 20             	add    esp,0x20
c00077f9:	6a 00                	push   0x0
c00077fb:	68 f8 f0 01 c0       	push   0xc001f0f8
c0007800:	6a 26                	push   0x26
c0007802:	53                   	push   ebx
c0007803:	e8 e8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007808:	6a 00                	push   0x0
c000780a:	68 02 f1 01 c0       	push   0xc001f102
c000780f:	6a 27                	push   0x27
c0007811:	53                   	push   ebx
c0007812:	e8 d9 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007817:	83 c4 20             	add    esp,0x20
c000781a:	6a 00                	push   0x0
c000781c:	68 0c f1 01 c0       	push   0xc001f10c
c0007821:	6a 28                	push   0x28
c0007823:	53                   	push   ebx
c0007824:	e8 c7 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007829:	6a 00                	push   0x0
c000782b:	68 16 f1 01 c0       	push   0xc001f116
c0007830:	6a 29                	push   0x29
c0007832:	53                   	push   ebx
c0007833:	e8 b8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007838:	83 c4 20             	add    esp,0x20
c000783b:	6a 00                	push   0x0
c000783d:	68 20 f1 01 c0       	push   0xc001f120
c0007842:	6a 2a                	push   0x2a
c0007844:	53                   	push   ebx
c0007845:	e8 a6 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000784a:	6a 00                	push   0x0
c000784c:	68 2a f1 01 c0       	push   0xc001f12a
c0007851:	6a 2b                	push   0x2b
c0007853:	53                   	push   ebx
c0007854:	e8 97 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007859:	83 c4 20             	add    esp,0x20
c000785c:	6a 00                	push   0x0
c000785e:	68 34 f1 01 c0       	push   0xc001f134
c0007863:	6a 2c                	push   0x2c
c0007865:	53                   	push   ebx
c0007866:	e8 85 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000786b:	6a 00                	push   0x0
c000786d:	68 3e f1 01 c0       	push   0xc001f13e
c0007872:	6a 2d                	push   0x2d
c0007874:	53                   	push   ebx
c0007875:	e8 76 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000787a:	83 c4 20             	add    esp,0x20
c000787d:	6a 00                	push   0x0
c000787f:	68 48 f1 01 c0       	push   0xc001f148
c0007884:	6a 2e                	push   0x2e
c0007886:	53                   	push   ebx
c0007887:	e8 64 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000788c:	6a 00                	push   0x0
c000788e:	68 52 f1 01 c0       	push   0xc001f152
c0007893:	6a 2f                	push   0x2f
c0007895:	53                   	push   ebx
c0007896:	e8 55 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000789b:	83 c4 20             	add    esp,0x20
c000789e:	6a 00                	push   0x0
c00078a0:	68 ac f2 01 c0       	push   0xc001f2ac
c00078a5:	6a 30                	push   0x30
c00078a7:	53                   	push   ebx
c00078a8:	e8 43 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ad:	6a 00                	push   0x0
c00078af:	68 b6 f2 01 c0       	push   0xc001f2b6
c00078b4:	6a 31                	push   0x31
c00078b6:	53                   	push   ebx
c00078b7:	e8 34 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078bc:	83 c4 20             	add    esp,0x20
c00078bf:	6a 00                	push   0x0
c00078c1:	68 c0 f2 01 c0       	push   0xc001f2c0
c00078c6:	6a 32                	push   0x32
c00078c8:	53                   	push   ebx
c00078c9:	e8 22 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ce:	6a 00                	push   0x0
c00078d0:	68 ca f2 01 c0       	push   0xc001f2ca
c00078d5:	6a 33                	push   0x33
c00078d7:	53                   	push   ebx
c00078d8:	e8 13 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078dd:	83 c4 20             	add    esp,0x20
c00078e0:	6a 00                	push   0x0
c00078e2:	68 d4 f2 01 c0       	push   0xc001f2d4
c00078e7:	6a 34                	push   0x34
c00078e9:	53                   	push   ebx
c00078ea:	e8 01 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ef:	6a 00                	push   0x0
c00078f1:	68 de f2 01 c0       	push   0xc001f2de
c00078f6:	6a 35                	push   0x35
c00078f8:	53                   	push   ebx
c00078f9:	e8 f2 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078fe:	83 c4 20             	add    esp,0x20
c0007901:	6a 00                	push   0x0
c0007903:	68 e8 f2 01 c0       	push   0xc001f2e8
c0007908:	6a 36                	push   0x36
c000790a:	53                   	push   ebx
c000790b:	e8 e0 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007910:	6a 00                	push   0x0
c0007912:	68 f2 f2 01 c0       	push   0xc001f2f2
c0007917:	6a 37                	push   0x37
c0007919:	53                   	push   ebx
c000791a:	e8 d1 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000791f:	83 c4 1c             	add    esp,0x1c
c0007922:	6a 03                	push   0x3
c0007924:	6a 02                	push   0x2
c0007926:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c000792c:	e8 d5 24 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007931:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007938:	89 c6                	mov    esi,eax
c000793a:	e8 94 01 00 00       	call   c0007ad3 <malloc>
c000793f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007945:	89 04 24             	mov    DWORD PTR [esp],eax
c0007948:	89 c7                	mov    edi,eax
c000794a:	e8 dd 15 00 00       	call   c0008f2c <TSS::TSS()>
c000794f:	83 c4 0c             	add    esp,0xc
c0007952:	68 66 f0 01 c0       	push   0xc001f066
c0007957:	56                   	push   esi
c0007958:	57                   	push   edi
c0007959:	e8 12 16 00 00       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c000795e:	89 c6                	mov    esi,eax
c0007960:	58                   	pop    eax
c0007961:	5a                   	pop    edx
c0007962:	6a 00                	push   0x0
c0007964:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007968:	50                   	push   eax
c0007969:	e8 ce fb ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c000796e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007972:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007977:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000797e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007982:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007988:	80 ce 05             	or     dh,0x5
c000798b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000798f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007992:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007996:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007999:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000799c:	e8 87 fc ff ff       	call   c0007628 <IDT::flush()>
c00079a1:	83 c4 20             	add    esp,0x20
c00079a4:	5b                   	pop    ebx
c00079a5:	5e                   	pop    esi
c00079a6:	5f                   	pop    edi
c00079a7:	c3                   	ret    

c00079a8 <sbrk>:
c00079a8:	55                   	push   ebp
c00079a9:	57                   	push   edi
c00079aa:	56                   	push   esi
c00079ab:	53                   	push   ebx
c00079ac:	83 ec 1c             	sub    esp,0x1c
c00079af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079b3:	85 c0                	test   eax,eax
c00079b5:	74 66                	je     c0007a1d <sbrk+0x75>
c00079b7:	78 6b                	js     c0007a24 <sbrk+0x7c>
c00079b9:	8b 15 34 35 02 c0    	mov    edx,DWORD PTR ds:0xc0023534
c00079bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079c3:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c9:	05 ff 0f 00 00       	add    eax,0xfff
c00079ce:	0f 49 e8             	cmovns ebp,eax
c00079d1:	c1 fd 0c             	sar    ebp,0xc
c00079d4:	bb 00 00 00 00       	mov    ebx,0x0
c00079d9:	8b 35 b0 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fb0
c00079df:	8b 3d 34 35 02 c0    	mov    edi,DWORD PTR ds:0xc0023534
c00079e5:	e8 f8 03 00 00       	call   c0007de2 <Phys::allocatePage()>
c00079ea:	68 01 04 00 00       	push   0x401
c00079ef:	57                   	push   edi
c00079f0:	50                   	push   eax
c00079f1:	56                   	push   esi
c00079f2:	e8 07 23 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00079f7:	81 05 34 35 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023534,0x1000
c0007a01:	83 c3 01             	add    ebx,0x1
c0007a04:	83 c4 10             	add    esp,0x10
c0007a07:	39 dd                	cmp    ebp,ebx
c0007a09:	75 ce                	jne    c00079d9 <sbrk+0x31>
c0007a0b:	0f 20 d8             	mov    eax,cr3
c0007a0e:	0f 22 d8             	mov    cr3,eax
c0007a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a15:	83 c4 1c             	add    esp,0x1c
c0007a18:	5b                   	pop    ebx
c0007a19:	5e                   	pop    esi
c0007a1a:	5f                   	pop    edi
c0007a1b:	5d                   	pop    ebp
c0007a1c:	c3                   	ret    
c0007a1d:	a1 34 35 02 c0       	mov    eax,ds:0xc0023534
c0007a22:	eb f1                	jmp    c0007a15 <sbrk+0x6d>
c0007a24:	83 ec 08             	sub    esp,0x8
c0007a27:	50                   	push   eax
c0007a28:	68 f8 0b 02 c0       	push   0xc0020bf8
c0007a2d:	e8 d8 2e 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007a32:	83 c4 10             	add    esp,0x10
c0007a35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a3a:	eb d9                	jmp    c0007a15 <sbrk+0x6d>

c0007a3c <mmap>:
c0007a3c:	83 ec 18             	sub    esp,0x18
c0007a3f:	68 28 0c 02 c0       	push   0xc0020c28
c0007a44:	e8 be 9a 00 00       	call   c0011507 <KePanic(char const*)>
c0007a49:	b8 00 00 00 00       	mov    eax,0x0
c0007a4e:	83 c4 1c             	add    esp,0x1c
c0007a51:	c3                   	ret    

c0007a52 <munmap>:
c0007a52:	83 ec 18             	sub    esp,0x18
c0007a55:	68 2d 0c 02 c0       	push   0xc0020c2d
c0007a5a:	e8 a8 9a 00 00       	call   c0011507 <KePanic(char const*)>
c0007a5f:	b8 00 00 00 00       	mov    eax,0x0
c0007a64:	83 c4 1c             	add    esp,0x1c
c0007a67:	c3                   	ret    

c0007a68 <liballoc_lock()>:
c0007a68:	fa                   	cli    
c0007a69:	83 05 c8 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6c8,0x1
c0007a70:	b8 00 00 00 00       	mov    eax,0x0
c0007a75:	c3                   	ret    

c0007a76 <liballoc_unlock()>:
c0007a76:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007a7b:	83 e8 01             	sub    eax,0x1
c0007a7e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007a83:	75 01                	jne    c0007a86 <liballoc_unlock()+0x10>
c0007a85:	fb                   	sti    
c0007a86:	b8 00 00 00 00       	mov    eax,0x0
c0007a8b:	c3                   	ret    

c0007a8c <liballoc_alloc(int)>:
c0007a8c:	83 ec 10             	sub    esp,0x10
c0007a8f:	6a 01                	push   0x1
c0007a91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a95:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a9b:	e8 66 23 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007aa0:	83 c4 1c             	add    esp,0x1c
c0007aa3:	c3                   	ret    

c0007aa4 <liballoc_free(void*, int)>:
c0007aa4:	83 ec 14             	sub    esp,0x14
c0007aa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aab:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007ab1:	e8 90 1f 00 00       	call   c0009a46 <VAS::freeAllocatedPages(unsigned long)>
c0007ab6:	b8 00 00 00 00       	mov    eax,0x0
c0007abb:	83 c4 1c             	add    esp,0x1c
c0007abe:	c3                   	ret    

c0007abf <realloc>:
c0007abf:	83 ec 14             	sub    esp,0x14
c0007ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aca:	e8 52 9b ff ff       	call   c0001621 <dlrealloc>
c0007acf:	83 c4 1c             	add    esp,0x1c
c0007ad2:	c3                   	ret    

c0007ad3 <malloc>:
c0007ad3:	83 ec 18             	sub    esp,0x18
c0007ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ada:	e8 05 96 ff ff       	call   c00010e4 <dlmalloc>
c0007adf:	83 c4 1c             	add    esp,0x1c
c0007ae2:	c3                   	ret    

c0007ae3 <free>:
c0007ae3:	83 ec 18             	sub    esp,0x18
c0007ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aea:	e8 97 92 ff ff       	call   c0000d86 <dlfree>
c0007aef:	83 c4 1c             	add    esp,0x1c
c0007af2:	c3                   	ret    

c0007af3 <rfree>:
c0007af3:	83 ec 18             	sub    esp,0x18
c0007af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007afa:	e8 87 92 ff ff       	call   c0000d86 <dlfree>
c0007aff:	83 c4 1c             	add    esp,0x1c
c0007b02:	c3                   	ret    

c0007b03 <calloc>:
c0007b03:	56                   	push   esi
c0007b04:	53                   	push   ebx
c0007b05:	83 ec 10             	sub    esp,0x10
c0007b08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b0c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b11:	53                   	push   ebx
c0007b12:	e8 bc ff ff ff       	call   c0007ad3 <malloc>
c0007b17:	89 c6                	mov    esi,eax
c0007b19:	83 c4 0c             	add    esp,0xc
c0007b1c:	53                   	push   ebx
c0007b1d:	6a 00                	push   0x0
c0007b1f:	50                   	push   eax
c0007b20:	e8 cb 89 ff ff       	call   c00004f0 <memset>
c0007b25:	89 f0                	mov    eax,esi
c0007b27:	83 c4 14             	add    esp,0x14
c0007b2a:	5b                   	pop    ebx
c0007b2b:	5e                   	pop    esi
c0007b2c:	c3                   	ret    

c0007b2d <KeEntryPoint>:
c0007b2d:	57                   	push   edi
c0007b2e:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b33:	56                   	push   esi
c0007b34:	31 f6                	xor    esi,esi
c0007b36:	53                   	push   ebx
c0007b37:	89 fa                	mov    edx,edi
c0007b39:	83 ec 2c             	sub    esp,0x2c
c0007b3c:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b41:	a3 d0 6e 02 c0       	mov    ds:0xc0026ed0,eax
c0007b46:	89 f0                	mov    eax,esi
c0007b48:	ee                   	out    dx,al
c0007b49:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b4e:	b0 80                	mov    al,0x80
c0007b50:	89 da                	mov    edx,ebx
c0007b52:	ee                   	out    dx,al
c0007b53:	b1 03                	mov    cl,0x3
c0007b55:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	ee                   	out    dx,al
c0007b5d:	89 f0                	mov    eax,esi
c0007b5f:	89 fa                	mov    edx,edi
c0007b61:	ee                   	out    dx,al
c0007b62:	88 c8                	mov    al,cl
c0007b64:	89 da                	mov    edx,ebx
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 c7                	mov    al,0xc7
c0007b69:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b6e:	ee                   	out    dx,al
c0007b6f:	b0 0b                	mov    al,0xb
c0007b71:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b76:	ee                   	out    dx,al
c0007b77:	68 34 0c 02 c0       	push   0xc0020c34
c0007b7c:	e8 89 2d 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007b81:	e8 07 92 00 00       	call   c0010d8d <KeDisplaySplashScreen()>
c0007b86:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b8b:	05 ff 0f 00 00       	add    eax,0xfff
c0007b90:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b95:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b98:	e8 b3 03 00 00       	call   c0007f50 <Phys::physicalMemorySetup(unsigned int)>
c0007b9d:	e8 27 1c 00 00       	call   c00097c9 <Virt::virtualMemorySetup()>
c0007ba2:	e8 30 91 00 00       	call   c0010cd7 <KeInitialiseAtexit()>
c0007ba7:	58                   	pop    eax
c0007ba8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007bac:	53                   	push   ebx
c0007bad:	e8 14 1f 00 00       	call   c0009ac6 <VAS::VAS()>
c0007bb2:	89 1d b0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fb0,ebx
c0007bb8:	e8 ed 7c 01 00       	call   c001f8aa <_init>
c0007bbd:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bc4:	e8 0a ff ff ff       	call   c0007ad3 <malloc>
c0007bc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bcc:	89 c6                	mov    esi,eax
c0007bce:	e8 35 f2 ff ff       	call   c0006e08 <Computer::Computer()>
c0007bd3:	53                   	push   ebx
c0007bd4:	6a 00                	push   0x0
c0007bd6:	6a 00                	push   0x0
c0007bd8:	56                   	push   esi
c0007bd9:	89 35 b8 6e 02 c0    	mov    DWORD PTR ds:0xc0026eb8,esi
c0007bdf:	e8 ea f5 ff ff       	call   c00071ce <Computer::open(int, int, void*)>
c0007be4:	83 c4 14             	add    esp,0x14
c0007be7:	53                   	push   ebx
c0007be8:	e8 a3 1f 00 00       	call   c0009b90 <VAS::~VAS()>
c0007bed:	83 c4 30             	add    esp,0x30
c0007bf0:	5b                   	pop    ebx
c0007bf1:	5e                   	pop    esi
c0007bf2:	5f                   	pop    edi
c0007bf3:	c3                   	ret    

c0007bf4 <Phys::allocateDMA(unsigned long)>:
c0007bf4:	55                   	push   ebp
c0007bf5:	31 ed                	xor    ebp,ebp
c0007bf7:	57                   	push   edi
c0007bf8:	56                   	push   esi
c0007bf9:	31 f6                	xor    esi,esi
c0007bfb:	53                   	push   ebx
c0007bfc:	31 db                	xor    ebx,ebx
c0007bfe:	83 ec 1c             	sub    esp,0x1c
c0007c01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c05:	05 ff 0f 00 00       	add    eax,0xfff
c0007c0a:	c1 e8 0c             	shr    eax,0xc
c0007c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c11:	31 c0                	xor    eax,eax
c0007c13:	eb 1b                	jmp    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c15:	8d 78 01             	lea    edi,[eax+0x1]
c0007c18:	85 c0                	test   eax,eax
c0007c1a:	0f 44 eb             	cmove  ebp,ebx
c0007c1d:	0f 44 f3             	cmove  esi,ebx
c0007c20:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c24:	74 37                	je     c0007c5d <Phys::allocateDMA(unsigned long)+0x69>
c0007c26:	89 f8                	mov    eax,edi
c0007c28:	83 c3 01             	add    ebx,0x1
c0007c2b:	83 fb 0f             	cmp    ebx,0xf
c0007c2e:	7f 13                	jg     c0007c43 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c30:	80 bb ec 6e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9114],0x0
c0007c37:	74 dc                	je     c0007c15 <Phys::allocateDMA(unsigned long)+0x21>
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c3 01             	add    ebx,0x1
c0007c3e:	83 fb 0f             	cmp    ebx,0xf
c0007c41:	7e ed                	jle    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c43:	83 ec 0c             	sub    esp,0xc
c0007c46:	68 4c 0c 02 c0       	push   0xc0020c4c
c0007c4b:	e8 b7 98 00 00       	call   c0011507 <KePanic(char const*)>
c0007c50:	83 c4 10             	add    esp,0x10
c0007c53:	31 c0                	xor    eax,eax
c0007c55:	83 c4 1c             	add    esp,0x1c
c0007c58:	5b                   	pop    ebx
c0007c59:	5e                   	pop    esi
c0007c5a:	5f                   	pop    edi
c0007c5b:	5d                   	pop    ebp
c0007c5c:	c3                   	ret    
c0007c5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c61:	89 f2                	mov    edx,esi
c0007c63:	c1 fa 04             	sar    edx,0x4
c0007c66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c6a:	01 f1                	add    ecx,esi
c0007c6c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c6f:	83 e9 01             	sub    ecx,0x1
c0007c72:	0f 48 ca             	cmovs  ecx,edx
c0007c75:	c1 f9 04             	sar    ecx,0x4
c0007c78:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c7c:	74 06                	je     c0007c84 <Phys::allocateDMA(unsigned long)+0x90>
c0007c7e:	89 eb                	mov    ebx,ebp
c0007c80:	31 c0                	xor    eax,eax
c0007c82:	eb b7                	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x47>
c0007c84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c88:	85 d2                	test   edx,edx
c0007c8a:	74 17                	je     c0007ca3 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c8c:	8d 96 ec 6e 02 c0    	lea    edx,[esi-0x3ffd9114]
c0007c92:	8d 84 06 ed 6e 02 c0 	lea    eax,[esi+eax*1-0x3ffd9113]
c0007c99:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c9c:	83 c2 01             	add    edx,0x1
c0007c9f:	39 d0                	cmp    eax,edx
c0007ca1:	75 f6                	jne    c0007c99 <Phys::allocateDMA(unsigned long)+0xa5>
c0007ca3:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007ca9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007cb1:	01 c2                	add    edx,eax
c0007cb3:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007cb9:	85 c9                	test   ecx,ecx
c0007cbb:	74 17                	je     c0007cd4 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cbd:	83 ec 0c             	sub    esp,0xc
c0007cc0:	68 4c 0c 02 c0       	push   0xc0020c4c
c0007cc5:	e8 3d 98 00 00       	call   c0011507 <KePanic(char const*)>
c0007cca:	83 c4 10             	add    esp,0x10
c0007ccd:	89 f8                	mov    eax,edi
c0007ccf:	e9 54 ff ff ff       	jmp    c0007c28 <Phys::allocateDMA(unsigned long)+0x34>
c0007cd4:	c1 e6 0c             	shl    esi,0xc
c0007cd7:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cdd:	e9 73 ff ff ff       	jmp    c0007c55 <Phys::allocateDMA(unsigned long)+0x61>

c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007ce2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ce6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cec:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007cf1:	c1 ea 0c             	shr    edx,0xc
c0007cf4:	29 d0                	sub    eax,edx
c0007cf6:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cff:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d04:	c1 e8 0c             	shr    eax,0xc
c0007d07:	85 d2                	test   edx,edx
c0007d09:	74 11                	je     c0007d1c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d0b:	05 ec 6e 02 c0       	add    eax,0xc0026eec
c0007d10:	01 c2                	add    edx,eax
c0007d12:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d15:	83 c0 01             	add    eax,0x1
c0007d18:	39 d0                	cmp    eax,edx
c0007d1a:	75 f6                	jne    c0007d12 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d1c:	c3                   	ret    

c0007d1d <Phys::setPageState(unsigned long, bool)>:
c0007d1d:	57                   	push   edi
c0007d1e:	56                   	push   esi
c0007d1f:	8b 35 38 35 02 c0    	mov    esi,DWORD PTR ds:0xc0023538
c0007d25:	53                   	push   ebx
c0007d26:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d33:	89 ca                	mov    edx,ecx
c0007d35:	83 e1 07             	and    ecx,0x7
c0007d38:	c1 ea 03             	shr    edx,0x3
c0007d3b:	0f b6 c0             	movzx  eax,al
c0007d3e:	d3 c3                	rol    ebx,cl
c0007d40:	01 d6                	add    esi,edx
c0007d42:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d45:	d3 e0                	shl    eax,cl
c0007d47:	21 fb                	and    ebx,edi
c0007d49:	88 1e                	mov    BYTE PTR [esi],bl
c0007d4b:	8b 1d 38 35 02 c0    	mov    ebx,DWORD PTR ds:0xc0023538
c0007d51:	01 da                	add    edx,ebx
c0007d53:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d55:	09 c8                	or     eax,ecx
c0007d57:	88 02                	mov    BYTE PTR [edx],al
c0007d59:	5b                   	pop    ebx
c0007d5a:	5e                   	pop    esi
c0007d5b:	5f                   	pop    edi
c0007d5c:	c3                   	ret    

c0007d5d <Phys::getPageState(unsigned long)>:
c0007d5d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d61:	8b 15 38 35 02 c0    	mov    edx,DWORD PTR ds:0xc0023538
c0007d67:	89 c8                	mov    eax,ecx
c0007d69:	83 e1 07             	and    ecx,0x7
c0007d6c:	c1 e8 03             	shr    eax,0x3
c0007d6f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d73:	d3 f8                	sar    eax,cl
c0007d75:	83 e0 01             	and    eax,0x1
c0007d78:	c3                   	ret    

c0007d79 <Phys::freePage(unsigned long)>:
c0007d79:	53                   	push   ebx
c0007d7a:	83 ec 08             	sub    esp,0x8
c0007d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d81:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d87:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d8d:	76 41                	jbe    c0007dd0 <Phys::freePage(unsigned long)+0x57>
c0007d8f:	c1 e8 0c             	shr    eax,0xc
c0007d92:	50                   	push   eax
c0007d93:	89 c3                	mov    ebx,eax
c0007d95:	e8 c3 ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007d9a:	5a                   	pop    edx
c0007d9b:	84 c0                	test   al,al
c0007d9d:	74 20                	je     c0007dbf <Phys::freePage(unsigned long)+0x46>
c0007d9f:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007da4:	83 ec 08             	sub    esp,0x8
c0007da7:	6a 00                	push   0x0
c0007da9:	53                   	push   ebx
c0007daa:	83 e8 01             	sub    eax,0x1
c0007dad:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007db2:	e8 66 ff ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007db7:	83 c4 10             	add    esp,0x10
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    
c0007dbf:	c7 44 24 10 f1 0c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020cf1
c0007dc7:	83 c4 08             	add    esp,0x8
c0007dca:	5b                   	pop    ebx
c0007dcb:	e9 37 97 00 00       	jmp    c0011507 <KePanic(char const*)>
c0007dd0:	68 00 10 00 00       	push   0x1000
c0007dd5:	50                   	push   eax
c0007dd6:	e8 07 ff ff ff       	call   c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>
c0007ddb:	59                   	pop    ecx
c0007ddc:	5b                   	pop    ebx
c0007ddd:	83 c4 08             	add    esp,0x8
c0007de0:	5b                   	pop    ebx
c0007de1:	c3                   	ret    

c0007de2 <Phys::allocatePage()>:
c0007de2:	56                   	push   esi
c0007de3:	53                   	push   ebx
c0007de4:	83 ec 14             	sub    esp,0x14
c0007de7:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c0007ded:	89 f3                	mov    ebx,esi
c0007def:	eb 0a                	jmp    c0007dfb <Phys::allocatePage()+0x19>
c0007df1:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0007df7:	39 de                	cmp    esi,ebx
c0007df9:	74 26                	je     c0007e21 <Phys::allocatePage()+0x3f>
c0007dfb:	53                   	push   ebx
c0007dfc:	e8 5c ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e01:	5a                   	pop    edx
c0007e02:	84 c0                	test   al,al
c0007e04:	74 67                	je     c0007e6d <Phys::allocatePage()+0x8b>
c0007e06:	83 c3 01             	add    ebx,0x1
c0007e09:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e0f:	75 e0                	jne    c0007df1 <Phys::allocatePage()+0xf>
c0007e11:	c7 05 d8 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ed8,0x0
c0007e1b:	31 db                	xor    ebx,ebx
c0007e1d:	39 de                	cmp    esi,ebx
c0007e1f:	75 da                	jne    c0007dfb <Phys::allocatePage()+0x19>
c0007e21:	a0 fc 6e 02 c0       	mov    al,ds:0xc0026efc
c0007e26:	83 ec 0c             	sub    esp,0xc
c0007e29:	83 f0 01             	xor    eax,0x1
c0007e2c:	a2 fc 6e 02 c0       	mov    ds:0xc0026efc,al
c0007e31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e39:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e3f:	50                   	push   eax
c0007e40:	e8 79 27 00 00       	call   c000a5be <VAS::scanForEviction()>
c0007e45:	83 c4 10             	add    esp,0x10
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	75 48                	jne    c0007e94 <Phys::allocatePage()+0xb2>
c0007e4c:	83 ec 0c             	sub    esp,0xc
c0007e4f:	68 74 0c 02 c0       	push   0xc0020c74
c0007e54:	e8 ae 96 00 00       	call   c0011507 <KePanic(char const*)>
c0007e59:	8b 1d d8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ed8
c0007e5f:	83 c4 10             	add    esp,0x10
c0007e62:	53                   	push   ebx
c0007e63:	e8 f5 fe ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e68:	5a                   	pop    edx
c0007e69:	84 c0                	test   al,al
c0007e6b:	75 99                	jne    c0007e06 <Phys::allocatePage()+0x24>
c0007e6d:	6a 01                	push   0x1
c0007e6f:	53                   	push   ebx
c0007e70:	e8 a8 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007e75:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007e7b:	59                   	pop    ecx
c0007e7c:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0007e81:	5b                   	pop    ebx
c0007e82:	83 c2 01             	add    edx,0x1
c0007e85:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007e8b:	c1 e0 0c             	shl    eax,0xc
c0007e8e:	83 c4 14             	add    esp,0x14
c0007e91:	5b                   	pop    ebx
c0007e92:	5e                   	pop    esi
c0007e93:	c3                   	ret    
c0007e94:	83 ec 08             	sub    esp,0x8
c0007e97:	89 c2                	mov    edx,eax
c0007e99:	6a 01                	push   0x1
c0007e9b:	c1 ea 0c             	shr    edx,0xc
c0007e9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ea2:	52                   	push   edx
c0007ea3:	e8 75 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007ea8:	83 c4 10             	add    esp,0x10
c0007eab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007eaf:	eb dd                	jmp    c0007e8e <Phys::allocatePage()+0xac>

c0007eb1 <Phys::allocateContiguousPages(int)>:
c0007eb1:	57                   	push   edi
c0007eb2:	56                   	push   esi
c0007eb3:	53                   	push   ebx
c0007eb4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eb8:	fa                   	cli    
c0007eb9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007ebe:	31 db                	xor    ebx,ebx
c0007ec0:	83 c0 01             	add    eax,0x1
c0007ec3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ec8:	85 db                	test   ebx,ebx
c0007eca:	75 11                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ecc:	e8 11 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	89 c7                	mov    edi,eax
c0007ed6:	74 21                	je     c0007ef9 <Phys::allocateContiguousPages(int)+0x48>
c0007ed8:	bb 01 00 00 00       	mov    ebx,0x1
c0007edd:	e8 00 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ee2:	89 da                	mov    edx,ebx
c0007ee4:	c1 e2 0c             	shl    edx,0xc
c0007ee7:	01 fa                	add    edx,edi
c0007ee9:	39 c2                	cmp    edx,eax
c0007eeb:	74 22                	je     c0007f0f <Phys::allocateContiguousPages(int)+0x5e>
c0007eed:	83 fe 01             	cmp    esi,0x1
c0007ef0:	bb 01 00 00 00       	mov    ebx,0x1
c0007ef5:	89 c7                	mov    edi,eax
c0007ef7:	75 e4                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ef9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007efe:	83 e8 01             	sub    eax,0x1
c0007f01:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007f06:	75 01                	jne    c0007f09 <Phys::allocateContiguousPages(int)+0x58>
c0007f08:	fb                   	sti    
c0007f09:	5b                   	pop    ebx
c0007f0a:	89 f8                	mov    eax,edi
c0007f0c:	5e                   	pop    esi
c0007f0d:	5f                   	pop    edi
c0007f0e:	c3                   	ret    
c0007f0f:	83 c3 01             	add    ebx,0x1
c0007f12:	39 f3                	cmp    ebx,esi
c0007f14:	75 b2                	jne    c0007ec8 <Phys::allocateContiguousPages(int)+0x17>
c0007f16:	eb e1                	jmp    c0007ef9 <Phys::allocateContiguousPages(int)+0x48>

c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f18:	56                   	push   esi
c0007f19:	53                   	push   ebx
c0007f1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f1e:	39 1d dc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026edc,ebx
c0007f24:	73 06                	jae    c0007f2c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f26:	89 1d dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,ebx
c0007f2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f30:	c1 eb 0c             	shr    ebx,0xc
c0007f33:	c1 e8 0c             	shr    eax,0xc
c0007f36:	39 d8                	cmp    eax,ebx
c0007f38:	73 13                	jae    c0007f4d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f3a:	6a 00                	push   0x0
c0007f3c:	50                   	push   eax
c0007f3d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f40:	e8 d8 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f45:	39 f3                	cmp    ebx,esi
c0007f47:	89 f0                	mov    eax,esi
c0007f49:	5a                   	pop    edx
c0007f4a:	59                   	pop    ecx
c0007f4b:	75 ed                	jne    c0007f3a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f4d:	5b                   	pop    ebx
c0007f4e:	5e                   	pop    esi
c0007f4f:	c3                   	ret    

c0007f50 <Phys::physicalMemorySetup(unsigned int)>:
c0007f50:	55                   	push   ebp
c0007f51:	57                   	push   edi
c0007f52:	56                   	push   esi
c0007f53:	53                   	push   ebx
c0007f54:	31 db                	xor    ebx,ebx
c0007f56:	83 ec 40             	sub    esp,0x40
c0007f59:	6a 10                	push   0x10
c0007f5b:	6a 00                	push   0x0
c0007f5d:	68 ec 6e 02 c0       	push   0xc0026eec
c0007f62:	e8 89 85 ff ff       	call   c00004f0 <memset>
c0007f67:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f70:	05 00 10 00 00       	add    eax,0x1000
c0007f75:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f79:	5a                   	pop    edx
c0007f7a:	59                   	pop    ecx
c0007f7b:	50                   	push   eax
c0007f7c:	68 07 0d 02 c0       	push   0xc0020d07
c0007f81:	e8 84 29 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007f86:	83 c4 10             	add    esp,0x10
c0007f89:	83 ec 08             	sub    esp,0x8
c0007f8c:	6a 01                	push   0x1
c0007f8e:	53                   	push   ebx
c0007f8f:	83 c3 01             	add    ebx,0x1
c0007f92:	e8 86 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f97:	83 c4 10             	add    esp,0x10
c0007f9a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fa0:	75 e7                	jne    c0007f89 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007fa2:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007fa9:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fb0:	c1 e0 08             	shl    eax,0x8
c0007fb3:	09 c2                	or     edx,eax
c0007fb5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007fb9:	0f 84 43 01 00 00    	je     c0008102 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0007fbf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fc7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fcc:	e9 82 00 00 00       	jmp    c0008053 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0007fd1:	ba 00 00 08 00       	mov    edx,0x80000
c0007fd6:	89 c1                	mov    ecx,eax
c0007fd8:	39 f2                	cmp    edx,esi
c0007fda:	19 f9                	sbb    ecx,edi
c0007fdc:	0f 82 c0 00 00 00    	jb     c00080a2 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0007fe2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fe6:	89 c5                	mov    ebp,eax
c0007fe8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007ff0:	19 cd                	sbb    ebp,ecx
c0007ff2:	0f 83 af 00 00 00    	jae    c00080a7 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0007ff8:	89 d6                	mov    esi,edx
c0007ffa:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fff:	39 f2                	cmp    edx,esi
c0008001:	89 cf                	mov    edi,ecx
c0008003:	19 c8                	sbb    eax,ecx
c0008005:	73 07                	jae    c000800e <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0008007:	be 00 00 0a 00       	mov    esi,0xa0000
c000800c:	31 ff                	xor    edi,edi
c000800e:	89 f2                	mov    edx,esi
c0008010:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0008015:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000801b:	89 f9                	mov    ecx,edi
c000801d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008021:	83 d1 ff             	adc    ecx,0xffffffff
c0008024:	39 d0                	cmp    eax,edx
c0008026:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000802a:	b8 00 00 00 00       	mov    eax,0x0
c000802f:	19 c8                	sbb    eax,ecx
c0008031:	0f 82 9d 01 00 00    	jb     c00081d4 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0008037:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000803b:	83 c3 18             	add    ebx,0x18
c000803e:	83 c6 01             	add    esi,0x1
c0008041:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008045:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008049:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000804d:	0f 84 bf 00 00 00    	je     c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008053:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000805b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000805e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008062:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008065:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008069:	01 f0                	add    eax,esi
c000806b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000806f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008073:	55                   	push   ebp
c0008074:	11 fa                	adc    edx,edi
c0008076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000807a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000807e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008082:	50                   	push   eax
c0008083:	56                   	push   esi
c0008084:	68 a4 0c 02 c0       	push   0xc0020ca4
c0008089:	e8 7c 28 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000808e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008092:	83 c4 10             	add    esp,0x10
c0008095:	09 f8                	or     eax,edi
c0008097:	75 79                	jne    c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008099:	83 fd 01             	cmp    ebp,0x1
c000809c:	0f 84 2f ff ff ff    	je     c0007fd1 <Phys::physicalMemorySetup(unsigned int)+0x81>
c00080a2:	83 fd 01             	cmp    ebp,0x1
c00080a5:	75 90                	jne    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080a7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00080ab:	31 d2                	xor    edx,edx
c00080ad:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00080b1:	89 c8                	mov    eax,ecx
c00080b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080b7:	19 d1                	sbb    ecx,edx
c00080b9:	0f 82 78 ff ff ff    	jb     c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080bf:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080c4:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080c8:	b9 00 00 00 00       	mov    ecx,0x0
c00080cd:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080d1:	0f 83 60 ff ff ff    	jae    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080d7:	39 c6                	cmp    esi,eax
c00080d9:	19 d7                	sbb    edi,edx
c00080db:	0f 83 ff 00 00 00    	jae    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00080e1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080e5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080e9:	29 c7                	sub    edi,eax
c00080eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080ef:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080f3:	19 d5                	sbb    ebp,edx
c00080f5:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080fd:	e9 de 00 00 00       	jmp    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008102:	83 ec 0c             	sub    esp,0xc
c0008105:	68 1f 0d 02 c0       	push   0xc0020d1f
c000810a:	e8 f8 93 00 00       	call   c0011507 <KePanic(char const*)>
c000810f:	83 c4 10             	add    esp,0x10
c0008112:	83 ec 08             	sub    esp,0x8
c0008115:	bb 60 00 00 00       	mov    ebx,0x60
c000811a:	6a 00                	push   0x0
c000811c:	6a 06                	push   0x6
c000811e:	e8 fa fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0008123:	58                   	pop    eax
c0008124:	5a                   	pop    edx
c0008125:	6a 00                	push   0x0
c0008127:	6a 07                	push   0x7
c0008129:	e8 ef fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000812e:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0008134:	83 c4 10             	add    esp,0x10
c0008137:	83 c1 02             	add    ecx,0x2
c000813a:	89 0d e8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee8,ecx
c0008140:	83 ec 08             	sub    esp,0x8
c0008143:	6a 00                	push   0x0
c0008145:	53                   	push   ebx
c0008146:	83 c3 01             	add    ebx,0x1
c0008149:	e8 cf fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000814e:	83 c4 10             	add    esp,0x10
c0008151:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008157:	75 e7                	jne    c0008140 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0008159:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000815e:	bb 40 01 00 00       	mov    ebx,0x140
c0008163:	83 c0 20             	add    eax,0x20
c0008166:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000816b:	eb 26                	jmp    c0008193 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000816d:	83 ec 08             	sub    esp,0x8
c0008170:	6a 00                	push   0x0
c0008172:	53                   	push   ebx
c0008173:	83 c3 01             	add    ebx,0x1
c0008176:	e8 a2 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000817b:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	83 c0 01             	add    eax,0x1
c0008186:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000818c:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c0008191:	74 07                	je     c000819a <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0008193:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008198:	7e d3                	jle    c000816d <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000819a:	bb d0 01 00 00       	mov    ebx,0x1d0
c000819f:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081a4:	7f 26                	jg     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x27c>
c00081a6:	83 ec 08             	sub    esp,0x8
c00081a9:	6a 00                	push   0x0
c00081ab:	53                   	push   ebx
c00081ac:	83 c3 01             	add    ebx,0x1
c00081af:	e8 69 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c00081b4:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081b9:	83 c4 10             	add    esp,0x10
c00081bc:	83 c0 01             	add    eax,0x1
c00081bf:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081c5:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081ca:	75 d3                	jne    c000819f <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00081cc:	83 c4 3c             	add    esp,0x3c
c00081cf:	5b                   	pop    ebx
c00081d0:	5e                   	pop    esi
c00081d1:	5f                   	pop    edi
c00081d2:	5d                   	pop    ebp
c00081d3:	c3                   	ret    
c00081d4:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081d8:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081e0:	83 ec 04             	sub    esp,0x4
c00081e3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081e7:	56                   	push   esi
c00081e8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081ec:	57                   	push   edi
c00081ed:	68 c8 0c 02 c0       	push   0xc0020cc8
c00081f2:	e8 13 27 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00081f7:	5d                   	pop    ebp
c00081f8:	58                   	pop    eax
c00081f9:	56                   	push   esi
c00081fa:	57                   	push   edi
c00081fb:	e8 18 fd ff ff       	call   c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008200:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008204:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008208:	83 c4 0c             	add    esp,0xc
c000820b:	8b 35 e8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ee8
c0008211:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008215:	01 f0                	add    eax,esi
c0008217:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000821c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008223:	52                   	push   edx
c0008224:	50                   	push   eax
c0008225:	68 2d 0d 02 c0       	push   0xc0020d2d
c000822a:	e8 db 26 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000822f:	83 c4 10             	add    esp,0x10
c0008232:	e9 00 fe ff ff       	jmp    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0008237:	90                   	nop

c0008238 <Pipe::isAtty()>:
c0008238:	31 c0                	xor    eax,eax
c000823a:	c3                   	ret    
c000823b:	90                   	nop

c000823c <Pipe::~Pipe()>:
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	ba 8c 0d 02 c0       	mov    edx,0xc0020d8c
c0008244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008248:	89 10                	mov    DWORD PTR [eax],edx
c000824a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000824e:	83 ec 0c             	sub    esp,0xc
c0008251:	50                   	push   eax
c0008252:	e8 35 11 00 00       	call   c000938c <UnixFile::~UnixFile()>
c0008257:	83 c4 10             	add    esp,0x10
c000825a:	90                   	nop
c000825b:	83 c4 0c             	add    esp,0xc
c000825e:	c3                   	ret    
c000825f:	90                   	nop

c0008260 <Pipe::~Pipe()>:
c0008260:	83 ec 0c             	sub    esp,0xc
c0008263:	83 ec 0c             	sub    esp,0xc
c0008266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000826a:	e8 cd ff ff ff       	call   c000823c <Pipe::~Pipe()>
c000826f:	83 c4 10             	add    esp,0x10
c0008272:	83 ec 08             	sub    esp,0x8
c0008275:	6a 20                	push   0x20
c0008277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827b:	e8 8c 25 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0008280:	83 c4 10             	add    esp,0x10
c0008283:	83 c4 0c             	add    esp,0xc
c0008286:	c3                   	ret    
c0008287:	90                   	nop

c0008288 <Pipe::write(unsigned long long, void*, int*)>:
c0008288:	55                   	push   ebp
c0008289:	57                   	push   edi
c000828a:	56                   	push   esi
c000828b:	53                   	push   ebx
c000828c:	83 ec 1c             	sub    esp,0x1c
c000828f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008293:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008297:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000829b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000829e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082a2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00082a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082ac:	89 d8                	mov    eax,ebx
c00082ae:	89 d6                	mov    esi,edx
c00082b0:	89 d7                	mov    edi,edx
c00082b2:	c1 ff 1f             	sar    edi,0x1f
c00082b5:	03 34 24             	add    esi,DWORD PTR [esp]
c00082b8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082bc:	c1 f8 1f             	sar    eax,0x1f
c00082bf:	39 f3                	cmp    ebx,esi
c00082c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c9:	19 f8                	sbb    eax,edi
c00082cb:	b8 01 00 00 00       	mov    eax,0x1
c00082d0:	72 72                	jb     c0008344 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082d5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082d9:	01 d0                	add    eax,edx
c00082db:	99                   	cdq    
c00082dc:	f7 fb                	idiv   ebx
c00082de:	89 d8                	mov    eax,ebx
c00082e0:	29 d0                	sub    eax,edx
c00082e2:	89 d6                	mov    esi,edx
c00082e4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082e7:	89 c3                	mov    ebx,eax
c00082e9:	c1 fb 1f             	sar    ebx,0x1f
c00082ec:	39 c2                	cmp    edx,eax
c00082ee:	19 df                	sbb    edi,ebx
c00082f0:	bb 00 00 00 00       	mov    ebx,0x0
c00082f5:	72 04                	jb     c00082fb <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082f7:	89 d3                	mov    ebx,edx
c00082f9:	29 c3                	sub    ebx,eax
c00082fb:	89 d0                	mov    eax,edx
c00082fd:	29 d8                	sub    eax,ebx
c00082ff:	74 0d                	je     c000830e <Pipe::write(unsigned long long, void*, int*)+0x86>
c0008301:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008304:	89 c1                	mov    ecx,eax
c0008306:	01 f7                	add    edi,esi
c0008308:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000830c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000830e:	85 db                	test   ebx,ebx
c0008310:	74 0d                	je     c000831f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008312:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008316:	89 d9                	mov    ecx,ebx
c0008318:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000831b:	89 c6                	mov    esi,eax
c000831d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000831f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008322:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008327:	75 10                	jne    c0008339 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	68 49 0d 02 c0       	push   0xc0020d49
c0008331:	e8 d1 91 00 00       	call   c0011507 <KePanic(char const*)>
c0008336:	83 c4 10             	add    esp,0x10
c0008339:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000833d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008340:	89 08                	mov    DWORD PTR [eax],ecx
c0008342:	31 c0                	xor    eax,eax
c0008344:	83 c4 1c             	add    esp,0x1c
c0008347:	5b                   	pop    ebx
c0008348:	5e                   	pop    esi
c0008349:	5f                   	pop    edi
c000834a:	5d                   	pop    ebp
c000834b:	c3                   	ret    

c000834c <Pipe::read(unsigned long long, void*, int*)>:
c000834c:	55                   	push   ebp
c000834d:	57                   	push   edi
c000834e:	56                   	push   esi
c000834f:	53                   	push   ebx
c0008350:	83 ec 1c             	sub    esp,0x1c
c0008353:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008357:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000835b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000835f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008362:	89 c8                	mov    eax,ecx
c0008364:	99                   	cdq    
c0008365:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008369:	74 24                	je     c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000836b:	39 f9                	cmp    ecx,edi
c000836d:	89 d1                	mov    ecx,edx
c000836f:	19 f1                	sbb    ecx,esi
c0008371:	73 1c                	jae    c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008373:	fa                   	cli    
c0008374:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000837a:	e8 51 dc 00 00       	call   c0015fd0 <schedule()>
c000837f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0008384:	48                   	dec    eax
c0008385:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000838a:	75 d3                	jne    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838c:	fb                   	sti    
c000838d:	eb d0                	jmp    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008393:	39 f8                	cmp    eax,edi
c0008395:	89 d1                	mov    ecx,edx
c0008397:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000839b:	19 f1                	sbb    ecx,esi
c000839d:	73 08                	jae    c00083a7 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c000839f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083a7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083aa:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083ad:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083b1:	29 f7                	sub    edi,esi
c00083b3:	89 f8                	mov    eax,edi
c00083b5:	99                   	cdq    
c00083b6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083ba:	89 d0                	mov    eax,edx
c00083bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083c0:	19 c2                	sbb    edx,eax
c00083c2:	89 f8                	mov    eax,edi
c00083c4:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083c9:	89 ea                	mov    edx,ebp
c00083cb:	29 c2                	sub    edx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	74 0b                	je     c00083dc <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083d1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083d4:	89 c1                	mov    ecx,eax
c00083d6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083dc:	85 d2                	test   edx,edx
c00083de:	74 0d                	je     c00083ed <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083e0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083e4:	89 d1                	mov    ecx,edx
c00083e6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083e9:	89 c7                	mov    edi,eax
c00083eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083f0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083f3:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083f6:	99                   	cdq    
c00083f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083fb:	89 f7                	mov    edi,esi
c00083fd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008401:	c1 ff 1f             	sar    edi,0x1f
c0008404:	57                   	push   edi
c0008405:	56                   	push   esi
c0008406:	52                   	push   edx
c0008407:	50                   	push   eax
c0008408:	e8 83 73 01 00       	call   c001f790 <__umoddi3>
c000840d:	83 c4 10             	add    esp,0x10
c0008410:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008415:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008418:	75 10                	jne    c000842a <Pipe::read(unsigned long long, void*, int*)+0xde>
c000841a:	83 ec 0c             	sub    esp,0xc
c000841d:	68 66 0d 02 c0       	push   0xc0020d66
c0008422:	e8 e0 90 00 00       	call   c0011507 <KePanic(char const*)>
c0008427:	83 c4 10             	add    esp,0x10
c000842a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000842e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008432:	89 10                	mov    DWORD PTR [eax],edx
c0008434:	83 c4 1c             	add    esp,0x1c
c0008437:	31 c0                	xor    eax,eax
c0008439:	5b                   	pop    ebx
c000843a:	5e                   	pop    esi
c000843b:	5f                   	pop    edi
c000843c:	5d                   	pop    ebp
c000843d:	c3                   	ret    

c000843e <Pipe::Pipe(int)>:
c000843e:	83 ec 0c             	sub    esp,0xc
c0008441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008445:	83 ec 08             	sub    esp,0x8
c0008448:	6a 00                	push   0x0
c000844a:	50                   	push   eax
c000844b:	e8 56 0d 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008450:	83 c4 10             	add    esp,0x10
c0008453:	ba 8c 0d 02 c0       	mov    edx,0xc0020d8c
c0008458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845c:	89 10                	mov    DWORD PTR [eax],edx
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008466:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000846d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008478:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000847f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008483:	83 ec 0c             	sub    esp,0xc
c0008486:	50                   	push   eax
c0008487:	e8 47 f6 ff ff       	call   c0007ad3 <malloc>
c000848c:	83 c4 10             	add    esp,0x10
c000848f:	89 c2                	mov    edx,eax
c0008491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008495:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000849c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084a0:	90                   	nop
c00084a1:	83 c4 0c             	add    esp,0xc
c00084a4:	c3                   	ret    
c00084a5:	90                   	nop

c00084a6 <VgaText::isAtty()>:
c00084a6:	b0 01                	mov    al,0x1
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <VgaText::~VgaText()>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	ba d4 0d 02 c0       	mov    edx,0xc0020dd4
c00084b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084b6:	89 10                	mov    DWORD PTR [eax],edx
c00084b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084bc:	83 ec 0c             	sub    esp,0xc
c00084bf:	50                   	push   eax
c00084c0:	e8 c7 0e 00 00       	call   c000938c <UnixFile::~UnixFile()>
c00084c5:	83 c4 10             	add    esp,0x10
c00084c8:	90                   	nop
c00084c9:	83 c4 0c             	add    esp,0xc
c00084cc:	c3                   	ret    
c00084cd:	90                   	nop

c00084ce <VgaText::~VgaText()>:
c00084ce:	83 ec 0c             	sub    esp,0xc
c00084d1:	83 ec 0c             	sub    esp,0xc
c00084d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d8:	e8 cd ff ff ff       	call   c00084aa <VgaText::~VgaText()>
c00084dd:	83 c4 10             	add    esp,0x10
c00084e0:	83 ec 08             	sub    esp,0x8
c00084e3:	68 84 01 00 00       	push   0x184
c00084e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ec:	e8 1b 23 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c00084f1:	83 c4 10             	add    esp,0x10
c00084f4:	83 c4 0c             	add    esp,0xc
c00084f7:	c3                   	ret    

c00084f8 <VgaText::read(unsigned long long, void*, int*)>:
c00084f8:	83 ec 10             	sub    esp,0x10
c00084fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008507:	e8 16 53 00 00       	call   c000d822 <readKeyboard(VgaText*, char*, unsigned long)>
c000850c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008510:	89 02                	mov    DWORD PTR [edx],eax
c0008512:	31 c0                	xor    eax,eax
c0008514:	83 c4 1c             	add    esp,0x1c
c0008517:	c3                   	ret    

c0008518 <setTerminalScrollLock(bool)>:
c0008518:	c3                   	ret    

c0008519 <doTerminalCycle()>:
c0008519:	c3                   	ret    

c000851a <addToTerminalCycle(VgaText*)>:
c000851a:	c3                   	ret    

c000851b <scrollTerminalScrollLock(int)>:
c000851b:	c3                   	ret    

c000851c <VgaText::updateTitle()>:
c000851c:	c3                   	ret    
c000851d:	90                   	nop

c000851e <VgaText::load()>:
c000851e:	c3                   	ret    
c000851f:	90                   	nop

c0008520 <VgaText::updateCursor()>:
c0008520:	83 ec 14             	sub    esp,0x14
c0008523:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008527:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000852a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000852d:	e8 3e 08 01 00       	call   c0018d70 <HalConsoleCursorUpdate(int, int)>
c0008532:	83 c4 1c             	add    esp,0x1c
c0008535:	c3                   	ret    

c0008536 <VgaText::doANSI_SGR(int)>:
c0008536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000853a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000853e:	85 d2                	test   edx,edx
c0008540:	75 0b                	jne    c000854d <VgaText::doANSI_SGR(int)+0x17>
c0008542:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008545:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008548:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000854b:	eb 59                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000854d:	83 fa 07             	cmp    edx,0x7
c0008550:	75 0b                	jne    c000855d <VgaText::doANSI_SGR(int)+0x27>
c0008552:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008555:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008558:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000855b:	eb 49                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000855d:	83 fa 1b             	cmp    edx,0x1b
c0008560:	74 e0                	je     c0008542 <VgaText::doANSI_SGR(int)+0xc>
c0008562:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008565:	83 f9 07             	cmp    ecx,0x7
c0008568:	77 09                	ja     c0008573 <VgaText::doANSI_SGR(int)+0x3d>
c000856a:	8b 14 8d 60 35 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdcaa0]
c0008571:	eb 20                	jmp    c0008593 <VgaText::doANSI_SGR(int)+0x5d>
c0008573:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008576:	83 f9 07             	cmp    ecx,0x7
c0008579:	77 09                	ja     c0008584 <VgaText::doANSI_SGR(int)+0x4e>
c000857b:	8b 14 8d 60 35 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdcaa0]
c0008582:	eb 22                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c0008584:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008587:	83 f9 07             	cmp    ecx,0x7
c000858a:	77 0b                	ja     c0008597 <VgaText::doANSI_SGR(int)+0x61>
c000858c:	8b 14 95 18 34 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcbe8]
c0008593:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008596:	c3                   	ret    
c0008597:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000859a:	83 f9 07             	cmp    ecx,0x7
c000859d:	77 0a                	ja     c00085a9 <VgaText::doANSI_SGR(int)+0x73>
c000859f:	8b 14 95 f0 33 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcc10]
c00085a6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a9:	c3                   	ret    

c00085aa <VgaText::setDefaultBgColour(VgaColour)>:
c00085aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085b5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085b8:	c3                   	ret    
c00085b9:	90                   	nop

c00085ba <VgaText::setDefaultFgColour(VgaColour)>:
c00085ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085c8:	c3                   	ret    
c00085c9:	90                   	nop

c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085ca:	53                   	push   ebx
c00085cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085d7:	51                   	push   ecx
c00085d8:	e8 cd ff ff ff       	call   c00085aa <VgaText::setDefaultBgColour(VgaColour)>
c00085dd:	58                   	pop    eax
c00085de:	5a                   	pop    edx
c00085df:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085e7:	5b                   	pop    ebx
c00085e8:	eb d0                	jmp    c00085ba <VgaText::setDefaultFgColour(VgaColour)>

c00085ea <VgaText::setTitleTextColour(VgaColour)>:
c00085ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085f5:	c3                   	ret    

c00085f6 <VgaText::setTitleColour(VgaColour)>:
c00085f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008601:	c3                   	ret    

c0008602 <VgaText::setTitle(char*)>:
c0008602:	c3                   	ret    
c0008603:	90                   	nop

c0008604 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008608:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000860d:	83 e0 0f             	and    eax,0xf
c0008610:	c1 e2 04             	shl    edx,0x4
c0008613:	09 d0                	or     eax,edx
c0008615:	c3                   	ret    

c0008616 <VgaText::scrollScreen()>:
c0008616:	55                   	push   ebp
c0008617:	57                   	push   edi
c0008618:	56                   	push   esi
c0008619:	be 01 00 00 00       	mov    esi,0x1
c000861e:	53                   	push   ebx
c000861f:	83 ec 0c             	sub    esp,0xc
c0008622:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008626:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008629:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000862f:	31 ff                	xor    edi,edi
c0008631:	01 e9                	add    ecx,ebp
c0008633:	8a 01                	mov    al,BYTE PTR [ecx]
c0008635:	83 fe 18             	cmp    esi,0x18
c0008638:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000863e:	75 20                	jne    c0008660 <VgaText::scrollScreen()+0x4a>
c0008640:	f7 c7 01 00 00 00    	test   edi,0x1
c0008646:	74 15                	je     c000865d <VgaText::scrollScreen()+0x47>
c0008648:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000864c:	50                   	push   eax
c000864d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008651:	50                   	push   eax
c0008652:	e8 ad ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008657:	5a                   	pop    edx
c0008658:	5a                   	pop    edx
c0008659:	88 01                	mov    BYTE PTR [ecx],al
c000865b:	eb 03                	jmp    c0008660 <VgaText::scrollScreen()+0x4a>
c000865d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008660:	47                   	inc    edi
c0008661:	41                   	inc    ecx
c0008662:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008668:	75 c9                	jne    c0008633 <VgaText::scrollScreen()+0x1d>
c000866a:	46                   	inc    esi
c000866b:	83 fe 19             	cmp    esi,0x19
c000866e:	75 b9                	jne    c0008629 <VgaText::scrollScreen()+0x13>
c0008670:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008676:	75 1f                	jne    c0008697 <VgaText::scrollScreen()+0x81>
c0008678:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000867c:	74 05                	je     c0008683 <VgaText::scrollScreen()+0x6d>
c000867e:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008681:	eb 14                	jmp    c0008697 <VgaText::scrollScreen()+0x81>
c0008683:	50                   	push   eax
c0008684:	50                   	push   eax
c0008685:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008689:	50                   	push   eax
c000868a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000868e:	50                   	push   eax
c000868f:	e8 70 05 01 00       	call   c0018c04 <HalConsoleScroll(int, int)>
c0008694:	83 c4 10             	add    esp,0x10
c0008697:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000869b:	83 c4 0c             	add    esp,0xc
c000869e:	5b                   	pop    ebx
c000869f:	5e                   	pop    esi
c00086a0:	5f                   	pop    edi
c00086a1:	5d                   	pop    ebp
c00086a2:	e9 79 fe ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00086a7:	90                   	nop

c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086ad:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086b2:	c1 e0 08             	shl    eax,0x8
c00086b5:	09 d0                	or     eax,edx
c00086b7:	c3                   	ret    

c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086b8:	55                   	push   ebp
c00086b9:	57                   	push   edi
c00086ba:	56                   	push   esi
c00086bb:	53                   	push   ebx
c00086bc:	83 ec 1c             	sub    esp,0x1c
c00086bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086cb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086d7:	0f b6 c3             	movzx  eax,bl
c00086da:	50                   	push   eax
c00086db:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086e0:	50                   	push   eax
c00086e1:	e8 1e ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c00086e6:	5a                   	pop    edx
c00086e7:	59                   	pop    ecx
c00086e8:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086ed:	0f b6 c0             	movzx  eax,al
c00086f0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086f4:	50                   	push   eax
c00086f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086f9:	e8 aa ff ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c00086fe:	5a                   	pop    edx
c00086ff:	6b d7 50             	imul   edx,edi,0x50
c0008702:	59                   	pop    ecx
c0008703:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008706:	01 f2                	add    edx,esi
c0008708:	0f b7 d2             	movzx  edx,dx
c000870b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000870f:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c0008715:	75 28                	jne    c000873f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008717:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000871b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000871f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008723:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008727:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000872b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000872f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008733:	83 c4 1c             	add    esp,0x1c
c0008736:	5b                   	pop    ebx
c0008737:	5e                   	pop    esi
c0008738:	5f                   	pop    edi
c0008739:	5d                   	pop    ebp
c000873a:	e9 cd 05 01 00       	jmp    c0018d0c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000873f:	83 c4 1c             	add    esp,0x1c
c0008742:	5b                   	pop    ebx
c0008743:	5e                   	pop    esi
c0008744:	5f                   	pop    edi
c0008745:	5d                   	pop    ebp
c0008746:	c3                   	ret    
c0008747:	90                   	nop

c0008748 <VgaText::getCursorX()>:
c0008748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000874c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000874f:	c3                   	ret    

c0008750 <VgaText::getCursorY()>:
c0008750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008754:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008757:	c3                   	ret    

c0008758 <VgaText::setCursor(int, int)>:
c0008758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000875c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008760:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008763:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008767:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000876a:	e9 b1 fd ff ff       	jmp    c0008520 <VgaText::updateCursor()>

c000876f <setActiveTerminal(VgaText*)>:
c000876f:	53                   	push   ebx
c0008770:	83 ec 08             	sub    esp,0x8
c0008773:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008777:	85 db                	test   ebx,ebx
c0008779:	75 11                	jne    c000878c <setActiveTerminal(VgaText*)+0x1d>
c000877b:	c7 44 24 10 a0 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020da0
c0008783:	83 c4 08             	add    esp,0x8
c0008786:	5b                   	pop    ebx
c0008787:	e9 7b 8d 00 00       	jmp    c0011507 <KePanic(char const*)>
c000878c:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c0008791:	85 c0                	test   eax,eax
c0008793:	74 0c                	je     c00087a1 <setActiveTerminal(VgaText*)+0x32>
c0008795:	83 ec 0c             	sub    esp,0xc
c0008798:	50                   	push   eax
c0008799:	e8 82 fd ff ff       	call   c0008520 <VgaText::updateCursor()>
c000879e:	83 c4 10             	add    esp,0x10
c00087a1:	50                   	push   eax
c00087a2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087a5:	89 1d 04 6f 02 c0    	mov    DWORD PTR ds:0xc0026f04,ebx
c00087ab:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087ae:	53                   	push   ebx
c00087af:	e8 a4 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087b4:	83 c4 18             	add    esp,0x18
c00087b7:	5b                   	pop    ebx
c00087b8:	c3                   	ret    
c00087b9:	90                   	nop

c00087ba <VgaText::clearScreen()>:
c00087ba:	57                   	push   edi
c00087bb:	56                   	push   esi
c00087bc:	31 f6                	xor    esi,esi
c00087be:	53                   	push   ebx
c00087bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087c3:	52                   	push   edx
c00087c4:	6a 00                	push   0x0
c00087c6:	6a 00                	push   0x0
c00087c8:	53                   	push   ebx
c00087c9:	e8 8a ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087ce:	83 c4 10             	add    esp,0x10
c00087d1:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087d8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087db:	7e 20                	jle    c00087fd <VgaText::clearScreen()+0x43>
c00087dd:	31 ff                	xor    edi,edi
c00087df:	50                   	push   eax
c00087e0:	50                   	push   eax
c00087e1:	56                   	push   esi
c00087e2:	57                   	push   edi
c00087e3:	47                   	inc    edi
c00087e4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087e7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087ea:	6a 20                	push   0x20
c00087ec:	53                   	push   ebx
c00087ed:	e8 c6 fe ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087f2:	83 c4 20             	add    esp,0x20
c00087f5:	83 ff 50             	cmp    edi,0x50
c00087f8:	75 e5                	jne    c00087df <VgaText::clearScreen()+0x25>
c00087fa:	46                   	inc    esi
c00087fb:	eb db                	jmp    c00087d8 <VgaText::clearScreen()+0x1e>
c00087fd:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008804:	5b                   	pop    ebx
c0008805:	5e                   	pop    esi
c0008806:	5f                   	pop    edi
c0008807:	c3                   	ret    

c0008808 <VgaText::setCursorX(int)>:
c0008808:	83 ec 10             	sub    esp,0x10
c000880b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000880f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008816:	50                   	push   eax
c0008817:	e8 3c ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c000881c:	83 c4 1c             	add    esp,0x1c
c000881f:	c3                   	ret    

c0008820 <VgaText::setCursorY(int)>:
c0008820:	83 ec 10             	sub    esp,0x10
c0008823:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008827:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000882b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000882e:	50                   	push   eax
c000882f:	e8 24 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008834:	83 c4 1c             	add    esp,0x1c
c0008837:	c3                   	ret    

c0008838 <VgaText::incrementCursor(bool)>:
c0008838:	56                   	push   esi
c0008839:	53                   	push   ebx
c000883a:	51                   	push   ecx
c000883b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000883f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008843:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008846:	40                   	inc    eax
c0008847:	83 f8 50             	cmp    eax,0x50
c000884a:	74 05                	je     c0008851 <VgaText::incrementCursor(bool)+0x19>
c000884c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000884f:	eb 24                	jmp    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008851:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008858:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000885b:	8d 50 01             	lea    edx,[eax+0x1]
c000885e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008861:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008864:	75 0f                	jne    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008866:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008869:	83 ec 0c             	sub    esp,0xc
c000886c:	53                   	push   ebx
c000886d:	e8 a4 fd ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008872:	83 c4 10             	add    esp,0x10
c0008875:	89 f0                	mov    eax,esi
c0008877:	84 c0                	test   al,al
c0008879:	74 0c                	je     c0008887 <VgaText::incrementCursor(bool)+0x4f>
c000887b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000887f:	5a                   	pop    edx
c0008880:	5b                   	pop    ebx
c0008881:	5e                   	pop    esi
c0008882:	e9 99 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c0008887:	58                   	pop    eax
c0008888:	5b                   	pop    ebx
c0008889:	5e                   	pop    esi
c000888a:	c3                   	ret    
c000888b:	90                   	nop

c000888c <VgaText::decrementCursor(bool)>:
c000888c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008890:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008894:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008897:	85 c0                	test   eax,eax
c0008899:	74 04                	je     c000889f <VgaText::decrementCursor(bool)+0x13>
c000889b:	48                   	dec    eax
c000889c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000889f:	84 c9                	test   cl,cl
c00088a1:	74 09                	je     c00088ac <VgaText::decrementCursor(bool)+0x20>
c00088a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088a7:	e9 74 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00088ac:	c3                   	ret    
c00088ad:	90                   	nop

c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088ae:	53                   	push   ebx
c00088af:	83 ec 08             	sub    esp,0x8
c00088b2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088c3:	83 f8 07             	cmp    eax,0x7
c00088c6:	75 21                	jne    c00088e9 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088c8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088d0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088d8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088e0:	83 c4 08             	add    esp,0x8
c00088e3:	5b                   	pop    ebx
c00088e4:	e9 76 3a 00 00       	jmp    c000c35f <Krnl::beep(int, int, bool)>
c00088e9:	83 f8 0d             	cmp    eax,0xd
c00088ec:	75 09                	jne    c00088f7 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f5:	eb 2d                	jmp    c0008924 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088f7:	83 f8 0a             	cmp    eax,0xa
c00088fa:	75 31                	jne    c000892d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088fc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008903:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008906:	8d 50 01             	lea    edx,[eax+0x1]
c0008909:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000890c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000890f:	75 0f                	jne    c0008920 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008911:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008914:	83 ec 0c             	sub    esp,0xc
c0008917:	53                   	push   ebx
c0008918:	e8 f9 fc ff ff       	call   c0008616 <VgaText::scrollScreen()>
c000891d:	83 c4 10             	add    esp,0x10
c0008920:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008924:	83 c4 08             	add    esp,0x8
c0008927:	5b                   	pop    ebx
c0008928:	e9 f3 fb ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c000892d:	83 f8 08             	cmp    eax,0x8
c0008930:	75 25                	jne    c0008957 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008932:	50                   	push   eax
c0008933:	50                   	push   eax
c0008934:	6a 01                	push   0x1
c0008936:	53                   	push   ebx
c0008937:	e8 50 ff ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c000893c:	5a                   	pop    edx
c000893d:	59                   	pop    ecx
c000893e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008941:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008944:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008947:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000894a:	6a 20                	push   0x20
c000894c:	53                   	push   ebx
c000894d:	e8 66 fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008952:	83 c4 28             	add    esp,0x28
c0008955:	5b                   	pop    ebx
c0008956:	c3                   	ret    
c0008957:	83 ec 08             	sub    esp,0x8
c000895a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000895d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008960:	51                   	push   ecx
c0008961:	52                   	push   edx
c0008962:	50                   	push   eax
c0008963:	53                   	push   ebx
c0008964:	e8 4f fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008969:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000896d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008975:	83 c4 28             	add    esp,0x28
c0008978:	5b                   	pop    ebx
c0008979:	e9 ba fe ff ff       	jmp    c0008838 <VgaText::incrementCursor(bool)>

c000897e <VgaText::putchar(char)>:
c000897e:	57                   	push   edi
c000897f:	56                   	push   esi
c0008980:	53                   	push   ebx
c0008981:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008985:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008989:	0f be c2             	movsx  eax,dl
c000898c:	83 f8 5b             	cmp    eax,0x5b
c000898f:	75 18                	jne    c00089a9 <VgaText::putchar(char)+0x2b>
c0008991:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008995:	74 20                	je     c00089b7 <VgaText::putchar(char)+0x39>
c0008997:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000899d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089a4:	e9 b8 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089a9:	83 f8 1b             	cmp    eax,0x1b
c00089ac:	75 09                	jne    c00089b7 <VgaText::putchar(char)+0x39>
c00089ae:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089b2:	e9 aa 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089b7:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089bb:	89 f9                	mov    ecx,edi
c00089bd:	84 c9                	test   cl,cl
c00089bf:	0f 84 8c 00 00 00    	je     c0008a51 <VgaText::putchar(char)+0xd3>
c00089c5:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089c8:	80 f9 3e             	cmp    cl,0x3e
c00089cb:	77 70                	ja     c0008a3d <VgaText::putchar(char)+0xbf>
c00089cd:	83 f8 6d             	cmp    eax,0x6d
c00089d0:	75 3f                	jne    c0008a11 <VgaText::putchar(char)+0x93>
c00089d2:	31 f6                	xor    esi,esi
c00089d4:	31 d2                	xor    edx,edx
c00089d6:	31 c0                	xor    eax,eax
c00089d8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089db:	7e 25                	jle    c0008a02 <VgaText::putchar(char)+0x84>
c00089dd:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089e2:	83 fa 3b             	cmp    edx,0x3b
c00089e5:	75 0f                	jne    c00089f6 <VgaText::putchar(char)+0x78>
c00089e7:	50                   	push   eax
c00089e8:	53                   	push   ebx
c00089e9:	e8 48 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c00089ee:	31 d2                	xor    edx,edx
c00089f0:	59                   	pop    ecx
c00089f1:	58                   	pop    eax
c00089f2:	31 c0                	xor    eax,eax
c00089f4:	eb 09                	jmp    c00089ff <VgaText::putchar(char)+0x81>
c00089f6:	6b c0 0a             	imul   eax,eax,0xa
c00089f9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089fd:	89 fa                	mov    edx,edi
c00089ff:	46                   	inc    esi
c0008a00:	eb d6                	jmp    c00089d8 <VgaText::putchar(char)+0x5a>
c0008a02:	84 d2                	test   dl,dl
c0008a04:	74 2f                	je     c0008a35 <VgaText::putchar(char)+0xb7>
c0008a06:	50                   	push   eax
c0008a07:	53                   	push   ebx
c0008a08:	e8 29 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c0008a0d:	58                   	pop    eax
c0008a0e:	5a                   	pop    edx
c0008a0f:	eb 24                	jmp    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a11:	83 f8 4a             	cmp    eax,0x4a
c0008a14:	75 1f                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a16:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a1a:	75 19                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	53                   	push   ebx
c0008a20:	e8 95 fd ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008a25:	83 c4 0c             	add    esp,0xc
c0008a28:	6a 00                	push   0x0
c0008a2a:	6a 00                	push   0x0
c0008a2c:	53                   	push   ebx
c0008a2d:	e8 26 fd ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a3b:	eb 24                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a3d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a40:	83 f8 0e             	cmp    eax,0xe
c0008a43:	7f 1c                	jg     c0008a61 <VgaText::putchar(char)+0xe3>
c0008a45:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a48:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a4b:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a4f:	eb 10                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a51:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a54:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a57:	50                   	push   eax
c0008a58:	53                   	push   ebx
c0008a59:	e8 50 fe ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a5e:	83 c4 10             	add    esp,0x10
c0008a61:	5b                   	pop    ebx
c0008a62:	5e                   	pop    esi
c0008a63:	5f                   	pop    edi
c0008a64:	c3                   	ret    
c0008a65:	90                   	nop

c0008a66 <VgaText::putx(unsigned int)>:
c0008a66:	57                   	push   edi
c0008a67:	b9 11 00 00 00       	mov    ecx,0x11
c0008a6c:	56                   	push   esi
c0008a6d:	be ae 0d 02 c0       	mov    esi,0xc0020dae
c0008a72:	53                   	push   ebx
c0008a73:	83 ec 20             	sub    esp,0x20
c0008a76:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a7a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a7e:	fc                   	cld    
c0008a7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a81:	be 08 00 00 00       	mov    esi,0x8
c0008a86:	50                   	push   eax
c0008a87:	50                   	push   eax
c0008a88:	89 d8                	mov    eax,ebx
c0008a8a:	c1 e8 1c             	shr    eax,0x1c
c0008a8d:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a92:	c1 e3 04             	shl    ebx,0x4
c0008a95:	50                   	push   eax
c0008a96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a9a:	e8 df fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008a9f:	83 c4 10             	add    esp,0x10
c0008aa2:	4e                   	dec    esi
c0008aa3:	75 e1                	jne    c0008a86 <VgaText::putx(unsigned int)+0x20>
c0008aa5:	83 c4 20             	add    esp,0x20
c0008aa8:	5b                   	pop    ebx
c0008aa9:	5e                   	pop    esi
c0008aaa:	5f                   	pop    edi
c0008aab:	c3                   	ret    

c0008aac <VgaText::puts(char const*)>:
c0008aac:	53                   	push   ebx
c0008aad:	83 ec 08             	sub    esp,0x8
c0008ab0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ab4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab7:	85 c0                	test   eax,eax
c0008ab9:	74 12                	je     c0008acd <VgaText::puts(char const*)+0x21>
c0008abb:	51                   	push   ecx
c0008abc:	43                   	inc    ebx
c0008abd:	51                   	push   ecx
c0008abe:	50                   	push   eax
c0008abf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ac3:	e8 b6 fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ac8:	83 c4 10             	add    esp,0x10
c0008acb:	eb e7                	jmp    c0008ab4 <VgaText::puts(char const*)+0x8>
c0008acd:	83 c4 08             	add    esp,0x8
c0008ad0:	5b                   	pop    ebx
c0008ad1:	c3                   	ret    

c0008ad2 <VgaText::write(unsigned long long, void*, int*)>:
c0008ad2:	55                   	push   ebp
c0008ad3:	57                   	push   edi
c0008ad4:	56                   	push   esi
c0008ad5:	53                   	push   ebx
c0008ad6:	83 ec 0c             	sub    esp,0xc
c0008ad9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008add:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ae1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ae5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008aec:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008aef:	39 eb                	cmp    ebx,ebp
c0008af1:	74 13                	je     c0008b06 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008af3:	50                   	push   eax
c0008af4:	43                   	inc    ebx
c0008af5:	50                   	push   eax
c0008af6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008afa:	50                   	push   eax
c0008afb:	56                   	push   esi
c0008afc:	e8 7d fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008b01:	83 c4 10             	add    esp,0x10
c0008b04:	eb e9                	jmp    c0008aef <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b06:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b11:	89 38                	mov    DWORD PTR [eax],edi
c0008b13:	83 c4 0c             	add    esp,0xc
c0008b16:	31 c0                	xor    eax,eax
c0008b18:	5b                   	pop    ebx
c0008b19:	5e                   	pop    esi
c0008b1a:	5f                   	pop    edi
c0008b1b:	5d                   	pop    ebp
c0008b1c:	c3                   	ret    
c0008b1d:	90                   	nop

c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b1e:	55                   	push   ebp
c0008b1f:	57                   	push   edi
c0008b20:	56                   	push   esi
c0008b21:	53                   	push   ebx
c0008b22:	83 ec 0c             	sub    esp,0xc
c0008b25:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b2e:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b35:	50                   	push   eax
c0008b36:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b3b:	50                   	push   eax
c0008b3c:	e8 c3 fa ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b45:	5a                   	pop    edx
c0008b46:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b49:	59                   	pop    ecx
c0008b4a:	0f b6 f8             	movzx  edi,al
c0008b4d:	0f b7 db             	movzx  ebx,bx
c0008b50:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b54:	01 db                	add    ebx,ebx
c0008b56:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b59:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b5c:	85 c0                	test   eax,eax
c0008b5e:	0f 84 ef 00 00 00    	je     c0008c53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b64:	83 f8 0d             	cmp    eax,0xd
c0008b67:	75 0c                	jne    c0008b75 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b69:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b70:	e9 d8 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b75:	83 f8 0a             	cmp    eax,0xa
c0008b78:	75 44                	jne    c0008bbe <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b7a:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b81:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b84:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b87:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b8a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b8d:	75 0f                	jne    c0008b9e <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b8f:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b92:	83 ec 0c             	sub    esp,0xc
c0008b95:	55                   	push   ebp
c0008b96:	e8 7b fa ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008b9b:	83 c4 10             	add    esp,0x10
c0008b9e:	83 ec 0c             	sub    esp,0xc
c0008ba1:	55                   	push   ebp
c0008ba2:	e8 79 f9 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008ba7:	83 c4 10             	add    esp,0x10
c0008baa:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bae:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bb1:	0f b7 db             	movzx  ebx,bx
c0008bb4:	01 db                	add    ebx,ebx
c0008bb6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bb9:	e9 8f 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bbe:	83 f8 08             	cmp    eax,0x8
c0008bc1:	75 34                	jne    c0008bf7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bc3:	51                   	push   ecx
c0008bc4:	51                   	push   ecx
c0008bc5:	6a 01                	push   0x1
c0008bc7:	55                   	push   ebp
c0008bc8:	e8 bf fc ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c0008bcd:	5b                   	pop    ebx
c0008bce:	58                   	pop    eax
c0008bcf:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bd2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bd5:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bd8:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bdb:	6a 20                	push   0x20
c0008bdd:	55                   	push   ebp
c0008bde:	e8 d5 fa ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008be3:	83 c4 20             	add    esp,0x20
c0008be6:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bea:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bed:	0f b7 db             	movzx  ebx,bx
c0008bf0:	01 db                	add    ebx,ebx
c0008bf2:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bf5:	eb 56                	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf7:	52                   	push   edx
c0008bf8:	52                   	push   edx
c0008bf9:	57                   	push   edi
c0008bfa:	50                   	push   eax
c0008bfb:	e8 a8 fa ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c00:	83 c4 10             	add    esp,0x10
c0008c03:	66 89 03             	mov    WORD PTR [ebx],ax
c0008c06:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c0008c0c:	75 1d                	jne    c0008c2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c0e:	83 ec 0c             	sub    esp,0xc
c0008c11:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c14:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c22:	50                   	push   eax
c0008c23:	e8 e4 00 01 00       	call   c0018d0c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c28:	83 c4 20             	add    esp,0x20
c0008c2b:	50                   	push   eax
c0008c2c:	83 c3 02             	add    ebx,0x2
c0008c2f:	50                   	push   eax
c0008c30:	6a 00                	push   0x0
c0008c32:	55                   	push   ebp
c0008c33:	e8 00 fc ff ff       	call   c0008838 <VgaText::incrementCursor(bool)>
c0008c38:	83 c4 10             	add    esp,0x10
c0008c3b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c3f:	75 0c                	jne    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c45:	0f b7 db             	movzx  ebx,bx
c0008c48:	01 db                	add    ebx,ebx
c0008c4a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c4d:	46                   	inc    esi
c0008c4e:	e9 06 ff ff ff       	jmp    c0008b59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c53:	83 ec 0c             	sub    esp,0xc
c0008c56:	55                   	push   ebp
c0008c57:	e8 c4 f8 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008c5c:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c63:	83 c4 1c             	add    esp,0x1c
c0008c66:	5b                   	pop    ebx
c0008c67:	5e                   	pop    esi
c0008c68:	5f                   	pop    edi
c0008c69:	5d                   	pop    ebp
c0008c6a:	c3                   	ret    
c0008c6b:	90                   	nop

c0008c6c <VgaText::VgaText(char const*)>:
c0008c6c:	56                   	push   esi
c0008c6d:	53                   	push   ebx
c0008c6e:	83 ec 04             	sub    esp,0x4
c0008c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c75:	83 ec 08             	sub    esp,0x8
c0008c78:	6a 00                	push   0x0
c0008c7a:	50                   	push   eax
c0008c7b:	e8 26 05 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008c80:	83 c4 10             	add    esp,0x10
c0008c83:	ba d4 0d 02 c0       	mov    edx,0xc0020dd4
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	89 10                	mov    DWORD PTR [eax],edx
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cce:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce4:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ceb:	83 ec 0c             	sub    esp,0xc
c0008cee:	6a 01                	push   0x1
c0008cf0:	e8 00 09 00 00       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0008cf5:	83 c4 10             	add    esp,0x10
c0008cf8:	89 c2                	mov    edx,eax
c0008cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d01:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c0008d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d0e:	89 c6                	mov    esi,eax
c0008d10:	e8 cd f0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0008d15:	68 05 0c 00 00       	push   0xc05
c0008d1a:	56                   	push   esi
c0008d1b:	50                   	push   eax
c0008d1c:	53                   	push   ebx
c0008d1d:	e8 dc 0f 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d29:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d2c:	83 ec 04             	sub    esp,0x4
c0008d2f:	68 a0 0f 00 00       	push   0xfa0
c0008d34:	6a 00                	push   0x0
c0008d36:	50                   	push   eax
c0008d37:	e8 b4 77 ff ff       	call   c00004f0 <memset>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	83 ec 04             	sub    esp,0x4
c0008d42:	6a 00                	push   0x0
c0008d44:	6a 07                	push   0x7
c0008d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d4a:	e8 7b f8 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d4f:	83 c4 10             	add    esp,0x10
c0008d52:	83 ec 04             	sub    esp,0x4
c0008d55:	6a 00                	push   0x0
c0008d57:	6a 00                	push   0x0
c0008d59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d5d:	e8 f6 f9 ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008d62:	83 c4 10             	add    esp,0x10
c0008d65:	83 ec 0c             	sub    esp,0xc
c0008d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d6c:	e8 49 fa ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008d71:	83 c4 10             	add    esp,0x10
c0008d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d78:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d80:	05 82 00 00 00       	add    eax,0x82
c0008d85:	83 ec 04             	sub    esp,0x4
c0008d88:	68 80 00 00 00       	push   0x80
c0008d8d:	6a 00                	push   0x0
c0008d8f:	50                   	push   eax
c0008d90:	e8 5b 77 ff ff       	call   c00004f0 <memset>
c0008d95:	83 c4 10             	add    esp,0x10
c0008d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d9c:	05 02 01 00 00       	add    eax,0x102
c0008da1:	83 ec 04             	sub    esp,0x4
c0008da4:	68 80 00 00 00       	push   0x80
c0008da9:	6a 00                	push   0x0
c0008dab:	50                   	push   eax
c0008dac:	e8 3f 77 ff ff       	call   c00004f0 <memset>
c0008db1:	83 c4 10             	add    esp,0x10
c0008db4:	90                   	nop
c0008db5:	83 c4 04             	add    esp,0x4
c0008db8:	5b                   	pop    ebx
c0008db9:	5e                   	pop    esi
c0008dba:	c3                   	ret    
c0008dbb:	90                   	nop

c0008dbc <VgaText::receiveKey(unsigned char)>:
c0008dbc:	55                   	push   ebp
c0008dbd:	57                   	push   edi
c0008dbe:	56                   	push   esi
c0008dbf:	53                   	push   ebx
c0008dc0:	83 ec 2c             	sub    esp,0x2c
c0008dc3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008dc7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dcb:	89 fd                	mov    ebp,edi
c0008dcd:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dd3:	0f 84 48 01 00 00    	je     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008dd9:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008ddf:	83 fd 08             	cmp    ebp,0x8
c0008de2:	75 6a                	jne    c0008e4e <VgaText::receiveKey(unsigned char)+0x92>
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	56                   	push   esi
c0008de8:	e8 93 77 ff ff       	call   c0000580 <strlen>
c0008ded:	83 c4 10             	add    esp,0x10
c0008df0:	85 c0                	test   eax,eax
c0008df2:	0f 84 ef 00 00 00    	je     c0008ee7 <VgaText::receiveKey(unsigned char)+0x12b>
c0008df8:	50                   	push   eax
c0008df9:	50                   	push   eax
c0008dfa:	6a 08                	push   0x8
c0008dfc:	53                   	push   ebx
c0008dfd:	e8 7c fb ff ff       	call   c000897e <VgaText::putchar(char)>
c0008e02:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e05:	e8 76 77 ff ff       	call   c0000580 <strlen>
c0008e0a:	83 c4 10             	add    esp,0x10
c0008e0d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e15:	83 fa 1f             	cmp    edx,0x1f
c0008e18:	89 d0                	mov    eax,edx
c0008e1a:	7f 1c                	jg     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e1c:	83 e8 08             	sub    eax,0x8
c0008e1f:	3c 02                	cmp    al,0x2
c0008e21:	76 15                	jbe    c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e23:	83 fa 0d             	cmp    edx,0xd
c0008e26:	74 10                	je     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e28:	57                   	push   edi
c0008e29:	57                   	push   edi
c0008e2a:	68 bf 0d 02 c0       	push   0xc0020dbf
c0008e2f:	53                   	push   ebx
c0008e30:	e8 77 fc ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0008e35:	83 c4 10             	add    esp,0x10
c0008e38:	83 ec 0c             	sub    esp,0xc
c0008e3b:	56                   	push   esi
c0008e3c:	e8 3f 77 ff ff       	call   c0000580 <strlen>
c0008e41:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e49:	e9 96 00 00 00       	jmp    c0008ee4 <VgaText::receiveKey(unsigned char)+0x128>
c0008e4e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	50                   	push   eax
c0008e58:	e8 23 77 ff ff       	call   c0000580 <strlen>
c0008e5d:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e64:	e8 17 77 ff ff       	call   c0000580 <strlen>
c0008e69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e6d:	83 c4 10             	add    esp,0x10
c0008e70:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e74:	3d 80 00 00 00       	cmp    eax,0x80
c0008e79:	0f 87 a2 00 00 00    	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008e7f:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e82:	3c 1e                	cmp    al,0x1e
c0008e84:	77 35                	ja     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e86:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e89:	3c 01                	cmp    al,0x1
c0008e8b:	76 2e                	jbe    c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e8d:	83 fd 0d             	cmp    ebp,0xd
c0008e90:	74 29                	je     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e92:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e95:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e98:	68 c5 0d 02 c0       	push   0xc0020dc5
c0008e9d:	53                   	push   ebx
c0008e9e:	e8 7b fc ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ea3:	8d 47 40             	lea    eax,[edi+0x40]
c0008ea6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea9:	0f b6 c0             	movzx  eax,al
c0008eac:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eaf:	50                   	push   eax
c0008eb0:	53                   	push   ebx
c0008eb1:	e8 f8 f9 ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008eb6:	83 c4 20             	add    esp,0x20
c0008eb9:	eb 11                	jmp    c0008ecc <VgaText::receiveKey(unsigned char)+0x110>
c0008ebb:	51                   	push   ecx
c0008ebc:	89 f8                	mov    eax,edi
c0008ebe:	51                   	push   ecx
c0008ebf:	0f be c0             	movsx  eax,al
c0008ec2:	50                   	push   eax
c0008ec3:	53                   	push   ebx
c0008ec4:	e8 b5 fa ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ec9:	83 c4 10             	add    esp,0x10
c0008ecc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ed1:	89 f8                	mov    eax,edi
c0008ed3:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ed7:	52                   	push   edx
c0008ed8:	52                   	push   edx
c0008ed9:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008edd:	50                   	push   eax
c0008ede:	56                   	push   esi
c0008edf:	e8 8c 79 ff ff       	call   c0000870 <strcat>
c0008ee4:	83 c4 10             	add    esp,0x10
c0008ee7:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008eee:	75 0f                	jne    c0008eff <VgaText::receiveKey(unsigned char)+0x143>
c0008ef0:	83 fd 1c             	cmp    ebp,0x1c
c0008ef3:	77 2c                	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008ef5:	b8 08 04 00 10       	mov    eax,0x10000408
c0008efa:	0f a3 e8             	bt     eax,ebp
c0008efd:	73 22                	jae    c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008eff:	50                   	push   eax
c0008f00:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f06:	50                   	push   eax
c0008f07:	56                   	push   esi
c0008f08:	53                   	push   ebx
c0008f09:	e8 62 79 ff ff       	call   c0000870 <strcat>
c0008f0e:	83 c4 0c             	add    esp,0xc
c0008f11:	68 80 00 00 00       	push   0x80
c0008f16:	6a 00                	push   0x0
c0008f18:	56                   	push   esi
c0008f19:	e8 d2 75 ff ff       	call   c00004f0 <memset>
c0008f1e:	83 c4 10             	add    esp,0x10
c0008f21:	83 c4 2c             	add    esp,0x2c
c0008f24:	5b                   	pop    ebx
c0008f25:	5e                   	pop    esi
c0008f26:	5f                   	pop    edi
c0008f27:	5d                   	pop    ebp
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <VgaText::doUpdate()>:
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <TSS::TSS()>:
c0008f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f37:	90                   	nop
c0008f38:	c3                   	ret    
c0008f39:	90                   	nop
c0008f3a:	66 90                	xchg   ax,ax

c0008f3c <TSS::setESP(unsigned long)>:
c0008f3c:	55                   	push   ebp
c0008f3d:	89 e5                	mov    ebp,esp
c0008f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f45:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f4b:	90                   	nop
c0008f4c:	5d                   	pop    ebp
c0008f4d:	c3                   	ret    
c0008f4e:	66 90                	xchg   ax,ax

c0008f50 <TSS::flush()>:
c0008f50:	55                   	push   ebp
c0008f51:	89 e5                	mov    ebp,esp
c0008f53:	83 ec 10             	sub    esp,0x10
c0008f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f59:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f5b:	83 c8 03             	or     eax,0x3
c0008f5e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f62:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f66:	66 89 d0             	mov    ax,dx
c0008f69:	0f 00 d8             	ltr    ax
c0008f6c:	90                   	nop
c0008f6d:	c9                   	leave  
c0008f6e:	c3                   	ret    
c0008f6f:	90                   	nop

c0008f70 <TSS::setup(unsigned long, unsigned long)>:
c0008f70:	55                   	push   ebp
c0008f71:	89 e5                	mov    ebp,esp
c0008f73:	83 ec 18             	sub    esp,0x18
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	6a 68                	push   0x68
c0008f7b:	e8 53 eb ff ff       	call   c0007ad3 <malloc>
c0008f80:	83 c4 10             	add    esp,0x10
c0008f83:	89 c2                	mov    edx,eax
c0008f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f91:	83 ec 04             	sub    esp,0x4
c0008f94:	6a 68                	push   0x68
c0008f96:	6a 00                	push   0x0
c0008f98:	50                   	push   eax
c0008f99:	e8 52 75 ff ff       	call   c00004f0 <memset>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fc2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009016:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009022:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009035:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009038:	0f 20 da             	mov    edx,cr3
c000903b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000903e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009041:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009047:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904a:	83 ec 08             	sub    esp,0x8
c000904d:	50                   	push   eax
c000904e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009051:	50                   	push   eax
c0009052:	e8 eb e2 ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0009057:	83 c4 10             	add    esp,0x10
c000905a:	83 ec 08             	sub    esp,0x8
c000905d:	6a 68                	push   0x68
c000905f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009062:	50                   	push   eax
c0009063:	e8 f6 e2 ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c0009068:	83 c4 10             	add    esp,0x10
c000906b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000906f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009072:	83 e0 0f             	and    eax,0xf
c0009075:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009078:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000907b:	83 c8 40             	or     eax,0x40
c000907e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009081:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009086:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000908c:	05 78 01 00 00       	add    eax,0x178
c0009091:	83 ec 04             	sub    esp,0x4
c0009094:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009097:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000909a:	50                   	push   eax
c000909b:	e8 f2 e2 ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	89 c2                	mov    edx,eax
c00090a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090a8:	89 10                	mov    DWORD PTR [eax],edx
c00090aa:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090b5:	05 78 01 00 00       	add    eax,0x178
c00090ba:	83 ec 0c             	sub    esp,0xc
c00090bd:	50                   	push   eax
c00090be:	e8 f9 e2 ff ff       	call   c00073bc <GDT::flush()>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090cb:	c9                   	leave  
c00090cc:	c3                   	ret    
c00090cd:	90                   	nop

c00090ce <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090d9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090de:	75 08                	jne    c00090e8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090e0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090e6:	eb 38                	jmp    c0009120 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090e8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090ed:	75 17                	jne    c0009106 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00090ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009103:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009106:	89 c1                	mov    ecx,eax
c0009108:	83 e1 fd             	and    ecx,0xfffffffd
c000910b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009111:	74 cd                	je     c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009113:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009118:	83 e0 ef             	and    eax,0xffffffef
c000911b:	83 f8 08             	cmp    eax,0x8
c000911e:	76 c0                	jbe    c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009120:	31 c0                	xor    eax,eax
c0009122:	c3                   	ret    
c0009123:	90                   	nop

c0009124 <ReservedFilename::isAtty()>:
c0009124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009128:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000912b:	31 c0                	xor    eax,eax
c000912d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009133:	74 09                	je     c000913e <ReservedFilename::isAtty()+0x1a>
c0009135:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000913b:	0f 94 c0             	sete   al
c000913e:	c3                   	ret    
c000913f:	90                   	nop

c0009140 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009144:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009148:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000914c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000914f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009154:	75 08                	jne    c000915e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009156:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000915c:	eb 3d                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000915e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009163:	75 17                	jne    c000917c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009165:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000916a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000916d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009173:	8b 10                	mov    edx,DWORD PTR [eax]
c0009175:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009179:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000917c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009181:	75 04                	jne    c0009187 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009183:	89 0a                	mov    DWORD PTR [edx],ecx
c0009185:	eb 14                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009187:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000918c:	74 c8                	je     c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000918e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009193:	83 e0 ef             	and    eax,0xffffffef
c0009196:	83 f8 08             	cmp    eax,0x8
c0009199:	76 bb                	jbe    c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919b:	31 c0                	xor    eax,eax
c000919d:	c3                   	ret    

c000919e <UnixFile::getFileDescriptor()>:
c000919e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091a5:	c3                   	ret    

c00091a6 <UnixFile::UnixFile(int)>:
c00091a6:	53                   	push   ebx
c00091a7:	83 ec 28             	sub    esp,0x28
c00091aa:	ba 9c 0e 02 c0       	mov    edx,0xc0020e9c
c00091af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091b3:	89 10                	mov    DWORD PTR [eax],edx
c00091b5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091bd:	0f 8f 90 01 00 00    	jg     c0009353 <UnixFile::UnixFile(int)+0x1ad>
c00091c3:	a1 a0 35 02 c0       	mov    eax,ds:0xc00235a0
c00091c8:	8d 50 01             	lea    edx,[eax+0x1]
c00091cb:	89 15 a0 35 02 c0    	mov    DWORD PTR ds:0xc00235a0,edx
c00091d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091d8:	83 ec 08             	sub    esp,0x8
c00091db:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091df:	68 98 6f 02 c0       	push   0xc0026f98
c00091e4:	e8 8f 67 01 00       	call   c001f978 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091e9:	83 c4 10             	add    esp,0x10
c00091ec:	a0 94 6f 02 c0       	mov    al,ds:0xc0026f94
c00091f1:	83 f0 01             	xor    eax,0x1
c00091f4:	0f b6 c0             	movzx  eax,al
c00091f7:	85 c0                	test   eax,eax
c00091f9:	0f 84 55 01 00 00    	je     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00091ff:	c6 05 94 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f94,0x1
c0009206:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000920e:	83 ec 0c             	sub    esp,0xc
c0009211:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009215:	e8 b9 e8 ff ff       	call   c0007ad3 <malloc>
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	89 c3                	mov    ebx,eax
c000921f:	83 ec 08             	sub    esp,0x8
c0009222:	68 03 ff ff 0f       	push   0xfffff03
c0009227:	53                   	push   ebx
c0009228:	e8 2d 01 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000922d:	83 c4 10             	add    esp,0x10
c0009230:	89 1d 8c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f8c,ebx
c0009236:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000923e:	83 ec 0c             	sub    esp,0xc
c0009241:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009245:	e8 89 e8 ff ff       	call   c0007ad3 <malloc>
c000924a:	83 c4 10             	add    esp,0x10
c000924d:	89 c3                	mov    ebx,eax
c000924f:	83 ec 08             	sub    esp,0x8
c0009252:	68 01 ff ff 0f       	push   0xfffff01
c0009257:	53                   	push   ebx
c0009258:	e8 fd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000925d:	83 c4 10             	add    esp,0x10
c0009260:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c0009266:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000926e:	83 ec 0c             	sub    esp,0xc
c0009271:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009275:	e8 59 e8 ff ff       	call   c0007ad3 <malloc>
c000927a:	83 c4 10             	add    esp,0x10
c000927d:	89 c3                	mov    ebx,eax
c000927f:	83 ec 08             	sub    esp,0x8
c0009282:	68 00 ff ff 0f       	push   0xfffff00
c0009287:	53                   	push   ebx
c0009288:	e8 cd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 1d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebx
c0009296:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000929e:	83 ec 0c             	sub    esp,0xc
c00092a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092a5:	e8 29 e8 ff ff       	call   c0007ad3 <malloc>
c00092aa:	83 c4 10             	add    esp,0x10
c00092ad:	89 c3                	mov    ebx,eax
c00092af:	83 ec 08             	sub    esp,0x8
c00092b2:	68 02 ff ff 0f       	push   0xfffff02
c00092b7:	53                   	push   ebx
c00092b8:	e8 9d 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	89 1d 88 6f 02 c0    	mov    DWORD PTR ds:0xc0026f88,ebx
c00092c6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092ce:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092d3:	7f 7f                	jg     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00092d5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092dd:	83 ec 0c             	sub    esp,0xc
c00092e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092e4:	e8 ea e7 ff ff       	call   c0007ad3 <malloc>
c00092e9:	83 c4 10             	add    esp,0x10
c00092ec:	89 c3                	mov    ebx,eax
c00092ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092f2:	05 10 ff ff 0f       	add    eax,0xfffff10
c00092f7:	83 ec 08             	sub    esp,0x8
c00092fa:	50                   	push   eax
c00092fb:	53                   	push   ebx
c00092fc:	e8 59 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009308:	89 1c 85 60 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90a0],ebx
c000930f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009317:	83 ec 0c             	sub    esp,0xc
c000931a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000931e:	e8 b0 e7 ff ff       	call   c0007ad3 <malloc>
c0009323:	83 c4 10             	add    esp,0x10
c0009326:	89 c3                	mov    ebx,eax
c0009328:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000932c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009331:	83 ec 08             	sub    esp,0x8
c0009334:	50                   	push   eax
c0009335:	53                   	push   ebx
c0009336:	e8 1f 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009342:	89 1c 85 20 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90e0],ebx
c0009349:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000934e:	e9 7b ff ff ff       	jmp    c00092ce <UnixFile::UnixFile(int)+0x128>
c0009353:	90                   	nop
c0009354:	83 c4 28             	add    esp,0x28
c0009357:	5b                   	pop    ebx
c0009358:	c3                   	ret    
c0009359:	90                   	nop

c000935a <ReservedFilename::ReservedFilename(int)>:
c000935a:	83 ec 0c             	sub    esp,0xc
c000935d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009361:	83 ec 08             	sub    esp,0x8
c0009364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009368:	50                   	push   eax
c0009369:	e8 38 fe ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000936e:	83 c4 10             	add    esp,0x10
c0009371:	ba b8 0e 02 c0       	mov    edx,0xc0020eb8
c0009376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000937a:	89 10                	mov    DWORD PTR [eax],edx
c000937c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009380:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009384:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009387:	90                   	nop
c0009388:	83 c4 0c             	add    esp,0xc
c000938b:	c3                   	ret    

c000938c <UnixFile::~UnixFile()>:
c000938c:	83 ec 1c             	sub    esp,0x1c
c000938f:	ba 9c 0e 02 c0       	mov    edx,0xc0020e9c
c0009394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009398:	89 10                	mov    DWORD PTR [eax],edx
c000939a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000939e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093a1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093a6:	7f 76                	jg     c000941e <UnixFile::~UnixFile()+0x92>
c00093a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093b0:	83 ec 0c             	sub    esp,0xc
c00093b3:	68 98 6f 02 c0       	push   0xc0026f98
c00093b8:	e8 8f 66 01 00       	call   c001fa4c <LinkedList<UnixFile>::getFirstElement()>
c00093bd:	83 c4 10             	add    esp,0x10
c00093c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093c4:	83 ec 0c             	sub    esp,0xc
c00093c7:	68 98 6f 02 c0       	push   0xc0026f98
c00093cc:	e8 83 66 01 00       	call   c001fa54 <LinkedList<UnixFile>::removeFirst()>
c00093d1:	83 c4 10             	add    esp,0x10
c00093d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093d8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093dc:	74 43                	je     c0009421 <UnixFile::~UnixFile()+0x95>
c00093de:	83 ec 08             	sub    esp,0x8
c00093e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093e5:	68 98 6f 02 c0       	push   0xc0026f98
c00093ea:	e8 89 65 01 00       	call   c001f978 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093ef:	83 c4 10             	add    esp,0x10
c00093f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093f6:	8d 50 01             	lea    edx,[eax+0x1]
c00093f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093fd:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009402:	0f 94 c0             	sete   al
c0009405:	0f b6 c0             	movzx  eax,al
c0009408:	85 c0                	test   eax,eax
c000940a:	74 a4                	je     c00093b0 <UnixFile::~UnixFile()+0x24>
c000940c:	83 ec 0c             	sub    esp,0xc
c000940f:	68 74 0e 02 c0       	push   0xc0020e74
c0009414:	e8 ee 80 00 00       	call   c0011507 <KePanic(char const*)>
c0009419:	83 c4 10             	add    esp,0x10
c000941c:	eb 92                	jmp    c00093b0 <UnixFile::~UnixFile()+0x24>
c000941e:	90                   	nop
c000941f:	eb 01                	jmp    c0009422 <UnixFile::~UnixFile()+0x96>
c0009421:	90                   	nop
c0009422:	90                   	nop
c0009423:	83 c4 1c             	add    esp,0x1c
c0009426:	c3                   	ret    
c0009427:	90                   	nop

c0009428 <UnixFile::~UnixFile()>:
c0009428:	83 ec 0c             	sub    esp,0xc
c000942b:	83 ec 0c             	sub    esp,0xc
c000942e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009432:	e8 55 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c0009437:	83 c4 10             	add    esp,0x10
c000943a:	83 ec 08             	sub    esp,0x8
c000943d:	6a 0c                	push   0xc
c000943f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009443:	e8 c4 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009448:	83 c4 10             	add    esp,0x10
c000944b:	83 c4 0c             	add    esp,0xc
c000944e:	c3                   	ret    
c000944f:	90                   	nop

c0009450 <ReservedFilename::~ReservedFilename()>:
c0009450:	83 ec 0c             	sub    esp,0xc
c0009453:	ba b8 0e 02 c0       	mov    edx,0xc0020eb8
c0009458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000945c:	89 10                	mov    DWORD PTR [eax],edx
c000945e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009462:	83 ec 0c             	sub    esp,0xc
c0009465:	50                   	push   eax
c0009466:	e8 21 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000946b:	83 c4 10             	add    esp,0x10
c000946e:	90                   	nop
c000946f:	83 c4 0c             	add    esp,0xc
c0009472:	c3                   	ret    
c0009473:	90                   	nop

c0009474 <ReservedFilename::~ReservedFilename()>:
c0009474:	83 ec 0c             	sub    esp,0xc
c0009477:	83 ec 0c             	sub    esp,0xc
c000947a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947e:	e8 cd ff ff ff       	call   c0009450 <ReservedFilename::~ReservedFilename()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	83 ec 08             	sub    esp,0x8
c0009489:	6a 0c                	push   0xc
c000948b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948f:	e8 78 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	83 c4 0c             	add    esp,0xc
c000949a:	c3                   	ret    

c000949b <KeGetFileFromDescriptor(int)>:
c000949b:	53                   	push   ebx
c000949c:	83 ec 08             	sub    esp,0x8
c000949f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094a3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094a9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094af:	7f 2c                	jg     c00094dd <KeGetFileFromDescriptor(int)+0x42>
c00094b1:	83 ec 0c             	sub    esp,0xc
c00094b4:	68 98 6f 02 c0       	push   0xc0026f98
c00094b9:	e8 8e 65 01 00       	call   c001fa4c <LinkedList<UnixFile>::getFirstElement()>
c00094be:	83 c4 10             	add    esp,0x10
c00094c1:	85 c0                	test   eax,eax
c00094c3:	75 04                	jne    c00094c9 <KeGetFileFromDescriptor(int)+0x2e>
c00094c5:	31 c0                	xor    eax,eax
c00094c7:	eb 6e                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094c9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094cc:	74 69                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ce:	52                   	push   edx
c00094cf:	52                   	push   edx
c00094d0:	50                   	push   eax
c00094d1:	68 98 6f 02 c0       	push   0xc0026f98
c00094d6:	e8 1b 66 01 00       	call   c001faf6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094db:	eb e1                	jmp    c00094be <KeGetFileFromDescriptor(int)+0x23>
c00094dd:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094e3:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c00094e8:	74 4d                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ea:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00094f0:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c00094f5:	74 40                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094f7:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00094fd:	a1 88 6f 02 c0       	mov    eax,ds:0xc0026f88
c0009502:	74 33                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009504:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000950a:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c000950f:	74 26                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009511:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009517:	83 f8 08             	cmp    eax,0x8
c000951a:	77 09                	ja     c0009525 <KeGetFileFromDescriptor(int)+0x8a>
c000951c:	8b 04 85 60 6f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd90a0]
c0009523:	eb 12                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009525:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000952b:	83 fb 08             	cmp    ebx,0x8
c000952e:	77 95                	ja     c00094c5 <KeGetFileFromDescriptor(int)+0x2a>
c0009530:	8b 04 9d 20 6f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd90e0]
c0009537:	83 c4 08             	add    esp,0x8
c000953a:	5b                   	pop    ebx
c000953b:	c3                   	ret    

c000953c <__static_initialization_and_destruction_0(int, int)>:
c000953c:	83 ec 0c             	sub    esp,0xc
c000953f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009544:	75 34                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009546:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000954e:	75 2a                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009550:	83 ec 0c             	sub    esp,0xc
c0009553:	68 98 6f 02 c0       	push   0xc0026f98
c0009558:	e8 d9 63 01 00       	call   c001f936 <LinkedList<UnixFile>::LinkedList()>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	83 ec 04             	sub    esp,0x4
c0009563:	68 30 35 02 c0       	push   0xc0023530
c0009568:	68 98 6f 02 c0       	push   0xc0026f98
c000956d:	68 34 f9 01 c0       	push   0xc001f934
c0009572:	e8 45 12 00 00       	call   c000a7bc <__cxa_atexit>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	90                   	nop
c000957b:	83 c4 0c             	add    esp,0xc
c000957e:	c3                   	ret    

c000957f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000957f:	83 ec 0c             	sub    esp,0xc
c0009582:	83 ec 08             	sub    esp,0x8
c0009585:	68 ff ff 00 00       	push   0xffff
c000958a:	6a 01                	push   0x1
c000958c:	e8 ab ff ff ff       	call   c000953c <__static_initialization_and_destruction_0(int, int)>
c0009591:	83 c4 10             	add    esp,0x10
c0009594:	83 c4 0c             	add    esp,0xc
c0009597:	c3                   	ret    

c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009598:	53                   	push   ebx
c0009599:	8b 15 a8 35 02 c0    	mov    edx,DWORD PTR ds:0xc00235a8
c000959f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095a7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095ad:	89 d8                	mov    eax,ebx
c00095af:	d1 e8                	shr    eax,1
c00095b1:	01 d0                	add    eax,edx
c00095b3:	80 e3 01             	and    bl,0x1
c00095b6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095b8:	75 09                	jne    c00095c3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ba:	83 e2 f0             	and    edx,0xfffffff0
c00095bd:	09 ca                	or     edx,ecx
c00095bf:	88 10                	mov    BYTE PTR [eax],dl
c00095c1:	5b                   	pop    ebx
c00095c2:	c3                   	ret    
c00095c3:	0f b6 c9             	movzx  ecx,cl
c00095c6:	83 e2 0f             	and    edx,0xf
c00095c9:	c1 e1 04             	shl    ecx,0x4
c00095cc:	09 ca                	or     edx,ecx
c00095ce:	88 10                	mov    BYTE PTR [eax],dl
c00095d0:	5b                   	pop    ebx
c00095d1:	c3                   	ret    

c00095d2 <Virt::getPageState(unsigned long)>:
c00095d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095d6:	8b 0d a8 35 02 c0    	mov    ecx,DWORD PTR ds:0xc00235a8
c00095dc:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095e2:	89 d0                	mov    eax,edx
c00095e4:	d1 e8                	shr    eax,1
c00095e6:	80 e2 01             	and    dl,0x1
c00095e9:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095ec:	74 03                	je     c00095f1 <Virt::getPageState(unsigned long)+0x1f>
c00095ee:	c1 e8 04             	shr    eax,0x4
c00095f1:	83 e0 0f             	and    eax,0xf
c00095f4:	c3                   	ret    

c00095f5 <Virt::allocateKernelVirtualPages(int)>:
c00095f5:	55                   	push   ebp
c00095f6:	57                   	push   edi
c00095f7:	56                   	push   esi
c00095f8:	31 f6                	xor    esi,esi
c00095fa:	53                   	push   ebx
c00095fb:	31 db                	xor    ebx,ebx
c00095fd:	83 ec 1c             	sub    esp,0x1c
c0009600:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009605:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009609:	8b 2d a4 35 02 c0    	mov    ebp,DWORD PTR ds:0xc00235a4
c000960f:	55                   	push   ebp
c0009610:	e8 bd ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009615:	5a                   	pop    edx
c0009616:	84 c0                	test   al,al
c0009618:	75 3d                	jne    c0009657 <Virt::allocateKernelVirtualPages(int)+0x62>
c000961a:	85 db                	test   ebx,ebx
c000961c:	0f 44 f5             	cmove  esi,ebp
c000961f:	83 c3 01             	add    ebx,0x1
c0009622:	39 fb                	cmp    ebx,edi
c0009624:	74 5e                	je     c0009684 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009626:	83 c5 01             	add    ebp,0x1
c0009629:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000962f:	76 33                	jbe    c0009664 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009631:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009636:	c7 05 a4 35 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00235a4,0xc8000
c0009640:	75 2a                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009642:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009647:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000964c:	55                   	push   ebp
c000964d:	e8 80 ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009652:	5a                   	pop    edx
c0009653:	84 c0                	test   al,al
c0009655:	74 c3                	je     c000961a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009657:	83 c5 01             	add    ebp,0x1
c000965a:	31 db                	xor    ebx,ebx
c000965c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009662:	77 cd                	ja     c0009631 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009664:	89 2d a4 35 02 c0    	mov    DWORD PTR ds:0xc00235a4,ebp
c000966a:	eb a3                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000966c:	83 ec 0c             	sub    esp,0xc
c000966f:	68 cc 0e 02 c0       	push   0xc0020ecc
c0009674:	e8 8e 7e 00 00       	call   c0011507 <KePanic(char const*)>
c0009679:	8b 2d a4 35 02 c0    	mov    ebp,DWORD PTR ds:0xc00235a4
c000967f:	83 c4 10             	add    esp,0x10
c0009682:	eb 8b                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009684:	89 35 a4 35 02 c0    	mov    DWORD PTR ds:0xc00235a4,esi
c000968a:	83 fb 01             	cmp    ebx,0x1
c000968d:	74 63                	je     c00096f2 <Virt::allocateKernelVirtualPages(int)+0xfd>
c000968f:	85 ff                	test   edi,edi
c0009691:	74 41                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0009693:	89 f0                	mov    eax,esi
c0009695:	31 db                	xor    ebx,ebx
c0009697:	8d 6f ff             	lea    ebp,[edi-0x1]
c000969a:	eb 16                	jmp    c00096b2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c000969c:	6a 01                	push   0x1
c000969e:	83 c3 01             	add    ebx,0x1
c00096a1:	50                   	push   eax
c00096a2:	e8 f1 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a7:	39 fb                	cmp    ebx,edi
c00096a9:	58                   	pop    eax
c00096aa:	5a                   	pop    edx
c00096ab:	74 27                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096ad:	a1 a4 35 02 c0       	mov    eax,ds:0xc00235a4
c00096b2:	8d 50 01             	lea    edx,[eax+0x1]
c00096b5:	85 db                	test   ebx,ebx
c00096b7:	89 15 a4 35 02 c0    	mov    DWORD PTR ds:0xc00235a4,edx
c00096bd:	74 22                	je     c00096e1 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096bf:	39 dd                	cmp    ebp,ebx
c00096c1:	75 d9                	jne    c000969c <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096c3:	6a 03                	push   0x3
c00096c5:	83 c3 01             	add    ebx,0x1
c00096c8:	50                   	push   eax
c00096c9:	e8 ca fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ce:	39 fb                	cmp    ebx,edi
c00096d0:	59                   	pop    ecx
c00096d1:	58                   	pop    eax
c00096d2:	75 d9                	jne    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096d4:	83 c4 1c             	add    esp,0x1c
c00096d7:	89 f0                	mov    eax,esi
c00096d9:	5b                   	pop    ebx
c00096da:	c1 e0 0c             	shl    eax,0xc
c00096dd:	5e                   	pop    esi
c00096de:	5f                   	pop    edi
c00096df:	5d                   	pop    ebp
c00096e0:	c3                   	ret    
c00096e1:	6a 02                	push   0x2
c00096e3:	bb 01 00 00 00       	mov    ebx,0x1
c00096e8:	50                   	push   eax
c00096e9:	e8 aa fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ee:	58                   	pop    eax
c00096ef:	5a                   	pop    edx
c00096f0:	eb bb                	jmp    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096f2:	6a 04                	push   0x4
c00096f4:	56                   	push   esi
c00096f5:	8d 46 01             	lea    eax,[esi+0x1]
c00096f8:	a3 a4 35 02 c0       	mov    ds:0xc00235a4,eax
c00096fd:	e8 96 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009702:	89 f0                	mov    eax,esi
c0009704:	59                   	pop    ecx
c0009705:	c1 e0 0c             	shl    eax,0xc
c0009708:	5b                   	pop    ebx
c0009709:	83 c4 1c             	add    esp,0x1c
c000970c:	5b                   	pop    ebx
c000970d:	5e                   	pop    esi
c000970e:	5f                   	pop    edi
c000970f:	5d                   	pop    ebp
c0009710:	c3                   	ret    

c0009711 <Virt::freeSwapfilePage(unsigned long)>:
c0009711:	53                   	push   ebx
c0009712:	8b 15 ac 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fac
c0009718:	b8 01 00 00 00       	mov    eax,0x1
c000971d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009721:	d3 e0                	shl    eax,cl
c0009723:	89 cb                	mov    ebx,ecx
c0009725:	c1 eb 05             	shr    ebx,0x5
c0009728:	f7 d0                	not    eax
c000972a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000972d:	21 c1                	and    ecx,eax
c000972f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009732:	5b                   	pop    ebx
c0009733:	c3                   	ret    

c0009734 <Virt::swapIDToSector(unsigned long)>:
c0009734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009738:	8b 15 ac 35 02 c0    	mov    edx,DWORD PTR ds:0xc00235ac
c000973e:	8b 0d b4 35 02 c0    	mov    ecx,DWORD PTR ds:0xc00235b4
c0009744:	0f af c2             	imul   eax,edx
c0009747:	01 c8                	add    eax,ecx
c0009749:	c3                   	ret    

c000974a <Virt::allocateSwapfilePage()>:
c000974a:	55                   	push   ebp
c000974b:	31 d2                	xor    edx,edx
c000974d:	57                   	push   edi
c000974e:	56                   	push   esi
c000974f:	53                   	push   ebx
c0009750:	83 ec 0c             	sub    esp,0xc
c0009753:	8b 1d b0 35 02 c0    	mov    ebx,DWORD PTR ds:0xc00235b0
c0009759:	8b 0d ac 35 02 c0    	mov    ecx,DWORD PTR ds:0xc00235ac
c000975f:	89 d8                	mov    eax,ebx
c0009761:	f7 f1                	div    ecx
c0009763:	39 cb                	cmp    ebx,ecx
c0009765:	72 2f                	jb     c0009796 <Virt::allocateSwapfilePage()+0x4c>
c0009767:	8b 35 ac 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fac
c000976d:	8b 16                	mov    edx,DWORD PTR [esi]
c000976f:	f6 c2 01             	test   dl,0x1
c0009772:	74 3e                	je     c00097b2 <Virt::allocateSwapfilePage()+0x68>
c0009774:	31 c9                	xor    ecx,ecx
c0009776:	bf 01 00 00 00       	mov    edi,0x1
c000977b:	eb 12                	jmp    c000978f <Virt::allocateSwapfilePage()+0x45>
c000977d:	89 ca                	mov    edx,ecx
c000977f:	89 fd                	mov    ebp,edi
c0009781:	c1 ea 05             	shr    edx,0x5
c0009784:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009787:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009789:	d3 e5                	shl    ebp,cl
c000978b:	85 ea                	test   edx,ebp
c000978d:	74 2c                	je     c00097bb <Virt::allocateSwapfilePage()+0x71>
c000978f:	83 c1 01             	add    ecx,0x1
c0009792:	39 c8                	cmp    eax,ecx
c0009794:	77 e7                	ja     c000977d <Virt::allocateSwapfilePage()+0x33>
c0009796:	83 ec 0c             	sub    esp,0xc
c0009799:	68 60 11 02 c0       	push   0xc0021160
c000979e:	e8 64 7d 00 00       	call   c0011507 <KePanic(char const*)>
c00097a3:	83 c4 10             	add    esp,0x10
c00097a6:	31 c9                	xor    ecx,ecx
c00097a8:	83 c4 0c             	add    esp,0xc
c00097ab:	89 c8                	mov    eax,ecx
c00097ad:	5b                   	pop    ebx
c00097ae:	5e                   	pop    esi
c00097af:	5f                   	pop    edi
c00097b0:	5d                   	pop    ebp
c00097b1:	c3                   	ret    
c00097b2:	89 f3                	mov    ebx,esi
c00097b4:	bd 01 00 00 00       	mov    ebp,0x1
c00097b9:	31 c9                	xor    ecx,ecx
c00097bb:	09 ea                	or     edx,ebp
c00097bd:	89 c8                	mov    eax,ecx
c00097bf:	89 13                	mov    DWORD PTR [ebx],edx
c00097c1:	83 c4 0c             	add    esp,0xc
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <Virt::virtualMemorySetup()>:
c00097c9:	53                   	push   ebx
c00097ca:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097cf:	6a 0f                	push   0xf
c00097d1:	53                   	push   ebx
c00097d2:	83 c3 01             	add    ebx,0x1
c00097d5:	e8 be fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097da:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097e0:	58                   	pop    eax
c00097e1:	5a                   	pop    edx
c00097e2:	75 eb                	jne    c00097cf <Virt::virtualMemorySetup()+0x6>
c00097e4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097e9:	6a 00                	push   0x0
c00097eb:	53                   	push   ebx
c00097ec:	83 c3 01             	add    ebx,0x1
c00097ef:	e8 a4 fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097f4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097fa:	59                   	pop    ecx
c00097fb:	58                   	pop    eax
c00097fc:	75 eb                	jne    c00097e9 <Virt::virtualMemorySetup()+0x20>
c00097fe:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009803:	6a 0f                	push   0xf
c0009805:	53                   	push   ebx
c0009806:	83 c3 01             	add    ebx,0x1
c0009809:	e8 8a fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009814:	58                   	pop    eax
c0009815:	5a                   	pop    edx
c0009816:	75 eb                	jne    c0009803 <Virt::virtualMemorySetup()+0x3a>
c0009818:	5b                   	pop    ebx
c0009819:	c3                   	ret    

c000981a <Virt::setupPageSwapping(int)>:
c000981a:	53                   	push   ebx
c000981b:	83 ec 0c             	sub    esp,0xc
c000981e:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c0009823:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009827:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000982d:	8b 10                	mov    edx,DWORD PTR [eax]
c000982f:	53                   	push   ebx
c0009830:	68 77 11 02 c0       	push   0xc0021177
c0009835:	50                   	push   eax
c0009836:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0009839:	c1 e3 0b             	shl    ebx,0xb
c000983c:	89 1d b0 35 02 c0    	mov    DWORD PTR ds:0xc00235b0,ebx
c0009842:	c1 eb 08             	shr    ebx,0x8
c0009845:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009848:	c6 05 b8 35 02 c0 43 	mov    BYTE PTR ds:0xc00235b8,0x43
c000984f:	c7 05 ac 35 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00235ac,0x8
c0009859:	a3 b4 35 02 c0       	mov    ds:0xc00235b4,eax
c000985e:	e8 70 e2 ff ff       	call   c0007ad3 <malloc>
c0009863:	31 d2                	xor    edx,edx
c0009865:	83 c4 0c             	add    esp,0xc
c0009868:	a3 ac 6f 02 c0       	mov    ds:0xc0026fac,eax
c000986d:	89 c1                	mov    ecx,eax
c000986f:	a1 b0 35 02 c0       	mov    eax,ds:0xc00235b0
c0009874:	f7 35 ac 35 02 c0    	div    DWORD PTR ds:0xc00235ac
c000987a:	c1 e8 05             	shr    eax,0x5
c000987d:	50                   	push   eax
c000987e:	6a 00                	push   0x0
c0009880:	51                   	push   ecx
c0009881:	e8 6a 6c ff ff       	call   c00004f0 <memset>
c0009886:	83 c4 18             	add    esp,0x18
c0009889:	5b                   	pop    ebx
c000988a:	c3                   	ret    
c000988b:	90                   	nop

c000988c <VAS::setCPUSpecific(unsigned long)>:
c000988c:	c3                   	ret    
c000988d:	90                   	nop

c000988e <VAS::VAS(VAS*)>:
c000988e:	83 ec 0c             	sub    esp,0xc
c0009891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009895:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000989c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098a7:	83 ec 0c             	sub    esp,0xc
c00098aa:	68 ec 0e 02 c0       	push   0xc0020eec
c00098af:	e8 53 7c 00 00       	call   c0011507 <KePanic(char const*)>
c00098b4:	83 c4 10             	add    esp,0x10
c00098b7:	90                   	nop
c00098b8:	83 c4 0c             	add    esp,0xc
c00098bb:	c3                   	ret    

c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098c0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098c5:	89 c2                	mov    edx,eax
c00098c7:	c1 ea 16             	shr    edx,0x16
c00098ca:	c1 e8 0a             	shr    eax,0xa
c00098cd:	83 f9 01             	cmp    ecx,0x1
c00098d0:	19 c9                	sbb    ecx,ecx
c00098d2:	25 fc 0f 00 00       	and    eax,0xffc
c00098d7:	c1 e2 0c             	shl    edx,0xc
c00098da:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098e0:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098e7:	01 d0                	add    eax,edx
c00098e9:	c3                   	ret    

c00098ea <VAS::getPageTableEntry(unsigned long)>:
c00098ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098ee:	89 ca                	mov    edx,ecx
c00098f0:	c1 ea 16             	shr    edx,0x16
c00098f3:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00098f9:	c1 e9 0a             	shr    ecx,0xa
c00098fc:	c1 e0 0c             	shl    eax,0xc
c00098ff:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009905:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009908:	c3                   	ret    

c0009909 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009909:	55                   	push   ebp
c000990a:	57                   	push   edi
c000990b:	bf 01 00 00 00       	mov    edi,0x1
c0009910:	56                   	push   esi
c0009911:	53                   	push   ebx
c0009912:	83 ec 1c             	sub    esp,0x1c
c0009915:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009919:	c1 ee 0c             	shr    esi,0xc
c000991c:	eb 48                	jmp    c0009966 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c000991e:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0009923:	83 ec 08             	sub    esp,0x8
c0009926:	55                   	push   ebp
c0009927:	50                   	push   eax
c0009928:	e8 bd ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000992d:	83 c4 10             	add    esp,0x10
c0009930:	8b 10                	mov    edx,DWORD PTR [eax]
c0009932:	f6 c6 04             	test   dh,0x4
c0009935:	75 70                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009937:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000993d:	83 fb 04             	cmp    ebx,0x4
c0009940:	0f 84 8a 00 00 00    	je     c00099d0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009946:	83 fb 02             	cmp    ebx,0x2
c0009949:	0f 84 9a 00 00 00    	je     c00099e9 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c000994f:	83 fb 03             	cmp    ebx,0x3
c0009952:	0f 84 be 00 00 00    	je     c0009a16 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0009958:	83 fb 01             	cmp    ebx,0x1
c000995b:	0f 84 a2 00 00 00    	je     c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009961:	83 c6 01             	add    esi,0x1
c0009964:	31 ff                	xor    edi,edi
c0009966:	56                   	push   esi
c0009967:	89 f5                	mov    ebp,esi
c0009969:	e8 64 fc ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c000996e:	c1 e5 0c             	shl    ebp,0xc
c0009971:	5a                   	pop    edx
c0009972:	0f b6 d8             	movzx  ebx,al
c0009975:	85 db                	test   ebx,ebx
c0009977:	75 a5                	jne    c000991e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009979:	83 ec 0c             	sub    esp,0xc
c000997c:	68 8e 11 02 c0       	push   0xc002118e
c0009981:	e8 81 7b 00 00       	call   c0011507 <KePanic(char const*)>
c0009986:	5a                   	pop    edx
c0009987:	59                   	pop    ecx
c0009988:	55                   	push   ebp
c0009989:	8b 2d b0 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026fb0
c000998f:	55                   	push   ebp
c0009990:	e8 55 ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	8b 10                	mov    edx,DWORD PTR [eax]
c000999a:	f6 c6 04             	test   dh,0x4
c000999d:	75 08                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000999f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099a5:	eb ba                	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099ab:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099b1:	83 ec 0c             	sub    esp,0xc
c00099b4:	52                   	push   edx
c00099b5:	e8 bf e3 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c00099ba:	83 c4 10             	add    esp,0x10
c00099bd:	83 fb 04             	cmp    ebx,0x4
c00099c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ca:	0f 85 76 ff ff ff    	jne    c0009946 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099d0:	83 e7 01             	and    edi,0x1
c00099d3:	75 46                	jne    c0009a1b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099d5:	c7 44 24 30 10 0f 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020f10
c00099dd:	83 c4 1c             	add    esp,0x1c
c00099e0:	5b                   	pop    ebx
c00099e1:	5e                   	pop    esi
c00099e2:	5f                   	pop    edi
c00099e3:	5d                   	pop    ebp
c00099e4:	e9 1e 7b 00 00       	jmp    c0011507 <KePanic(char const*)>
c00099e9:	83 e7 01             	and    edi,0x1
c00099ec:	75 15                	jne    c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099ee:	83 ec 0c             	sub    esp,0xc
c00099f1:	68 aa 11 02 c0       	push   0xc00211aa
c00099f6:	e8 0c 7b 00 00       	call   c0011507 <KePanic(char const*)>
c00099fb:	83 c4 10             	add    esp,0x10
c00099fe:	e9 5e ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a03:	83 ec 08             	sub    esp,0x8
c0009a06:	6a 00                	push   0x0
c0009a08:	56                   	push   esi
c0009a09:	e8 8a fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a0e:	83 c4 10             	add    esp,0x10
c0009a11:	e9 4b ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a16:	83 e7 01             	and    edi,0x1
c0009a19:	75 16                	jne    c0009a31 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a1b:	83 ec 08             	sub    esp,0x8
c0009a1e:	6a 00                	push   0x0
c0009a20:	56                   	push   esi
c0009a21:	e8 72 fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a26:	83 c4 10             	add    esp,0x10
c0009a29:	83 c4 1c             	add    esp,0x1c
c0009a2c:	5b                   	pop    ebx
c0009a2d:	5e                   	pop    esi
c0009a2e:	5f                   	pop    edi
c0009a2f:	5d                   	pop    ebp
c0009a30:	c3                   	ret    
c0009a31:	c7 44 24 30 c6 11 02 c0 	mov    DWORD PTR [esp+0x30],0xc00211c6
c0009a39:	83 c4 1c             	add    esp,0x1c
c0009a3c:	5b                   	pop    ebx
c0009a3d:	5e                   	pop    esi
c0009a3e:	5f                   	pop    edi
c0009a3f:	5d                   	pop    ebp
c0009a40:	e9 c2 7a 00 00       	jmp    c0011507 <KePanic(char const*)>
c0009a45:	90                   	nop

c0009a46 <VAS::freeAllocatedPages(unsigned long)>:
c0009a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a4e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a52:	74 09                	je     c0009a5d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a58:	e9 ac fe ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a5d:	c7 44 24 04 34 0f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020f34
c0009a65:	e9 a0 0e 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c0009a6a <VAS::virtualToPhysical(unsigned long)>:
c0009a6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a6e:	50                   	push   eax
c0009a6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a73:	52                   	push   edx
c0009a74:	e8 71 fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009a79:	59                   	pop    ecx
c0009a7a:	5a                   	pop    edx
c0009a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a7d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a82:	c3                   	ret    
c0009a83:	90                   	nop

c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009a84:	55                   	push   ebp
c0009a85:	57                   	push   edi
c0009a86:	56                   	push   esi
c0009a87:	53                   	push   ebx
c0009a88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a8c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a90:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a94:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a98:	85 db                	test   ebx,ebx
c0009a9a:	7e 24                	jle    c0009ac0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009a9c:	c1 e3 0c             	shl    ebx,0xc
c0009a9f:	01 f3                	add    ebx,esi
c0009aa1:	56                   	push   esi
c0009aa2:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aa8:	55                   	push   ebp
c0009aa9:	e8 3c fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009aae:	5a                   	pop    edx
c0009aaf:	59                   	pop    ecx
c0009ab0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ab2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ab6:	21 f9                	and    ecx,edi
c0009ab8:	09 d1                	or     ecx,edx
c0009aba:	39 f3                	cmp    ebx,esi
c0009abc:	89 08                	mov    DWORD PTR [eax],ecx
c0009abe:	75 e1                	jne    c0009aa1 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ac0:	5b                   	pop    ebx
c0009ac1:	5e                   	pop    esi
c0009ac2:	5f                   	pop    edi
c0009ac3:	5d                   	pop    ebp
c0009ac4:	c3                   	ret    
c0009ac5:	90                   	nop

c0009ac6 <VAS::VAS()>:
c0009ac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ad1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae0:	a3 b0 6f 02 c0       	mov    ds:0xc0026fb0,eax
c0009ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae9:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009aed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af1:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009af4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af8:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009aff:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0009b04:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b09:	29 c2                	sub    edx,eax
c0009b0b:	89 d0                	mov    eax,edx
c0009b0d:	05 ff 0f 00 00       	add    eax,0xfff
c0009b12:	c1 e8 0c             	shr    eax,0xc
c0009b15:	89 c2                	mov    edx,eax
c0009b17:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b1c:	6a 04                	push   0x4
c0009b1e:	6a ff                	push   0xffffffff
c0009b20:	52                   	push   edx
c0009b21:	50                   	push   eax
c0009b22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b26:	e8 59 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b2b:	83 c4 14             	add    esp,0x14
c0009b2e:	90                   	nop
c0009b2f:	c3                   	ret    

c0009b30 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b30:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009b35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b3b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b42:	75 01                	jne    c0009b45 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b44:	c3                   	ret    
c0009b45:	68 80 00 00 00       	push   0x80
c0009b4a:	6a ff                	push   0xffffffff
c0009b4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b50:	50                   	push   eax
c0009b51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b55:	52                   	push   edx
c0009b56:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b5a:	51                   	push   ecx
c0009b5b:	e8 24 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b60:	83 c4 14             	add    esp,0x14
c0009b63:	c3                   	ret    

c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b68:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b6f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b72:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b77:	83 f8 01             	cmp    eax,0x1
c0009b7a:	19 c0                	sbb    eax,eax
c0009b7c:	83 ca 03             	or     edx,0x3
c0009b7f:	83 e0 fc             	and    eax,0xfffffffc
c0009b82:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b89:	0f 20 d8             	mov    eax,cr3
c0009b8c:	0f 22 d8             	mov    cr3,eax
c0009b8f:	c3                   	ret    

c0009b90 <VAS::~VAS()>:
c0009b90:	83 ec 2c             	sub    esp,0x2c
c0009b93:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b9b:	fa                   	cli    
c0009b9c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009ba1:	83 c0 01             	add    eax,0x1
c0009ba4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009ba9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bb0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bb3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bb9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bbd:	6a 01                	push   0x1
c0009bbf:	50                   	push   eax
c0009bc0:	e8 9f ff ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0009bc5:	83 c4 0c             	add    esp,0xc
c0009bc8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bd0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bd8:	0f 8f d8 00 00 00    	jg     c0009cb6 <VAS::~VAS()+0x126>
c0009bde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009be2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009be5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009be9:	c1 e2 02             	shl    edx,0x2
c0009bec:	01 d0                	add    eax,edx
c0009bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bf8:	83 e0 01             	and    eax,0x1
c0009bfb:	0f 84 ab 00 00 00    	je     c0009cac <VAS::~VAS()+0x11c>
c0009c01:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c09:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c11:	7f 74                	jg     c0009c87 <VAS::~VAS()+0xf7>
c0009c13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c17:	c1 e0 0a             	shl    eax,0xa
c0009c1a:	89 c2                	mov    edx,eax
c0009c1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c20:	01 d0                	add    eax,edx
c0009c22:	c1 e0 0c             	shl    eax,0xc
c0009c25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c29:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c33:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c3d:	6a 01                	push   0x1
c0009c3f:	50                   	push   eax
c0009c40:	e8 77 fc ff ff       	call   c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c45:	83 c4 0c             	add    esp,0xc
c0009c48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5a:	25 01 04 00 00       	and    eax,0x401
c0009c5f:	3d 01 04 00 00       	cmp    eax,0x401
c0009c64:	75 1a                	jne    c0009c80 <VAS::~VAS()+0xf0>
c0009c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c6f:	83 ec 0c             	sub    esp,0xc
c0009c72:	50                   	push   eax
c0009c73:	e8 01 e1 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009c78:	83 c4 10             	add    esp,0x10
c0009c7b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c80:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c85:	eb 82                	jmp    c0009c09 <VAS::~VAS()+0x79>
c0009c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c8b:	25 00 04 00 00       	and    eax,0x400
c0009c90:	74 1a                	je     c0009cac <VAS::~VAS()+0x11c>
c0009c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c96:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c9b:	83 ec 0c             	sub    esp,0xc
c0009c9e:	50                   	push   eax
c0009c9f:	e8 d5 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009ca4:	83 c4 10             	add    esp,0x10
c0009ca7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cac:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cb1:	e9 1a ff ff ff       	jmp    c0009bd0 <VAS::~VAS()+0x40>
c0009cb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 43 fc ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ccd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd0:	83 ec 0c             	sub    esp,0xc
c0009cd3:	50                   	push   eax
c0009cd4:	e8 a0 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009cd9:	83 c4 10             	add    esp,0x10
c0009cdc:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ce1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009ce6:	83 e8 01             	sub    eax,0x1
c0009ce9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009cee:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009cf3:	85 c0                	test   eax,eax
c0009cf5:	75 01                	jne    c0009cf8 <VAS::~VAS()+0x168>
c0009cf7:	fb                   	sti    
c0009cf8:	90                   	nop
c0009cf9:	83 c4 2c             	add    esp,0x2c
c0009cfc:	c3                   	ret    
c0009cfd:	90                   	nop

c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009cfe:	55                   	push   ebp
c0009cff:	57                   	push   edi
c0009d00:	56                   	push   esi
c0009d01:	53                   	push   ebx
c0009d02:	83 ec 1c             	sub    esp,0x1c
c0009d05:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009d0d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009d11:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d17:	77 08                	ja     c0009d21 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0009d19:	0f 20 d8             	mov    eax,cr3
c0009d1c:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d1f:	75 43                	jne    c0009d64 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0009d21:	89 d8                	mov    eax,ebx
c0009d23:	09 f8                	or     eax,edi
c0009d25:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d2a:	75 53                	jne    c0009d7f <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d2f:	89 de                	mov    esi,ebx
c0009d31:	c1 ee 16             	shr    esi,0x16
c0009d34:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d3b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d3f:	74 50                	je     c0009d91 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0009d41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d45:	c1 eb 0a             	shr    ebx,0xa
c0009d48:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d4e:	c1 e6 0c             	shl    esi,0xc
c0009d51:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d57:	09 c7                	or     edi,eax
c0009d59:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d5c:	83 c4 1c             	add    esp,0x1c
c0009d5f:	5b                   	pop    ebx
c0009d60:	5e                   	pop    esi
c0009d61:	5f                   	pop    edi
c0009d62:	5d                   	pop    ebp
c0009d63:	c3                   	ret    
c0009d64:	83 ec 0c             	sub    esp,0xc
c0009d67:	68 58 0f 02 c0       	push   0xc0020f58
c0009d6c:	e8 99 0b 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0009d71:	89 d8                	mov    eax,ebx
c0009d73:	83 c4 10             	add    esp,0x10
c0009d76:	09 f8                	or     eax,edi
c0009d78:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d7d:	74 ad                	je     c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d7f:	83 ec 0c             	sub    esp,0xc
c0009d82:	68 c0 0f 02 c0       	push   0xc0020fc0
c0009d87:	e8 7b 77 00 00       	call   c0011507 <KePanic(char const*)>
c0009d8c:	83 c4 10             	add    esp,0x10
c0009d8f:	eb 9b                	jmp    c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d95:	e8 48 e0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009d9a:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009da0:	83 ec 0c             	sub    esp,0xc
c0009da3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009dab:	6a 01                	push   0x1
c0009dad:	e8 43 f8 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009db2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009db9:	6a 01                	push   0x1
c0009dbb:	50                   	push   eax
c0009dbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dc0:	52                   	push   edx
c0009dc1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dc5:	51                   	push   ecx
c0009dc6:	e8 3d 01 00 00       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dcb:	83 c4 1c             	add    esp,0x1c
c0009dce:	68 00 10 00 00       	push   0x1000
c0009dd3:	6a 00                	push   0x0
c0009dd5:	50                   	push   eax
c0009dd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dda:	e8 11 67 ff ff       	call   c00004f0 <memset>
c0009ddf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009de3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009de6:	e8 1e fb ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009deb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009def:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009df3:	83 c4 10             	add    esp,0x10
c0009df6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009df9:	0d 07 04 00 00       	or     eax,0x407
c0009dfe:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e01:	e9 3b ff ff ff       	jmp    c0009d41 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0009e06 <VAS::allocatePages(int, int)>:
c0009e06:	55                   	push   ebp
c0009e07:	57                   	push   edi
c0009e08:	56                   	push   esi
c0009e09:	53                   	push   ebx
c0009e0a:	83 ec 1c             	sub    esp,0x1c
c0009e0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e11:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e15:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e19:	75 75                	jne    c0009e90 <VAS::allocatePages(int, int)+0x8a>
c0009e1b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e22:	85 c0                	test   eax,eax
c0009e24:	74 49                	je     c0009e6f <VAS::allocatePages(int, int)+0x69>
c0009e26:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e2a:	89 d5                	mov    ebp,edx
c0009e2c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e30:	c1 e5 0c             	shl    ebp,0xc
c0009e33:	01 dd                	add    ebp,ebx
c0009e35:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e38:	81 cf 00 04 00 00    	or     edi,0x400
c0009e3e:	85 d2                	test   edx,edx
c0009e40:	7e 1b                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009e42:	e8 9b df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009e47:	57                   	push   edi
c0009e48:	53                   	push   ebx
c0009e49:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e4f:	50                   	push   eax
c0009e50:	56                   	push   esi
c0009e51:	e8 a8 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e56:	83 c4 10             	add    esp,0x10
c0009e59:	39 dd                	cmp    ebp,ebx
c0009e5b:	75 e5                	jne    c0009e42 <VAS::allocatePages(int, int)+0x3c>
c0009e5d:	0f 20 d8             	mov    eax,cr3
c0009e60:	0f 22 d8             	mov    cr3,eax
c0009e63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e67:	83 c4 1c             	add    esp,0x1c
c0009e6a:	5b                   	pop    ebx
c0009e6b:	5e                   	pop    esi
c0009e6c:	5f                   	pop    edi
c0009e6d:	5d                   	pop    ebp
c0009e6e:	c3                   	ret    
c0009e6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e73:	83 ec 0c             	sub    esp,0xc
c0009e76:	68 e4 0f 02 c0       	push   0xc0020fe4
c0009e7b:	e8 87 76 00 00       	call   c0011507 <KePanic(char const*)>
c0009e80:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e87:	83 c4 10             	add    esp,0x10
c0009e8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e8e:	eb 96                	jmp    c0009e26 <VAS::allocatePages(int, int)+0x20>
c0009e90:	83 ec 0c             	sub    esp,0xc
c0009e93:	52                   	push   edx
c0009e94:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009e98:	e8 58 f7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009e9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea1:	83 c4 10             	add    esp,0x10
c0009ea4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ea9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ead:	77 38                	ja     c0009ee7 <VAS::allocatePages(int, int)+0xe1>
c0009eaf:	85 d2                	test   edx,edx
c0009eb1:	7e aa                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009eb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009eb7:	c1 e2 0c             	shl    edx,0xc
c0009eba:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ebe:	81 cf 00 04 00 00    	or     edi,0x400
c0009ec4:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0009ec7:	e8 16 df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009ecc:	57                   	push   edi
c0009ecd:	53                   	push   ebx
c0009ece:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ed4:	50                   	push   eax
c0009ed5:	56                   	push   esi
c0009ed6:	e8 23 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009edb:	83 c4 10             	add    esp,0x10
c0009ede:	39 dd                	cmp    ebp,ebx
c0009ee0:	75 e5                	jne    c0009ec7 <VAS::allocatePages(int, int)+0xc1>
c0009ee2:	e9 76 ff ff ff       	jmp    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009ee7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009eec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ef2:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009ef9:	74 b4                	je     c0009eaf <VAS::allocatePages(int, int)+0xa9>
c0009efb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eff:	80 cc 01             	or     ah,0x1
c0009f02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f06:	eb a7                	jmp    c0009eaf <VAS::allocatePages(int, int)+0xa9>

c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f08:	55                   	push   ebp
c0009f09:	57                   	push   edi
c0009f0a:	56                   	push   esi
c0009f0b:	53                   	push   ebx
c0009f0c:	83 ec 1c             	sub    esp,0x1c
c0009f0f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f13:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009f1b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009f1f:	85 db                	test   ebx,ebx
c0009f21:	7e 2c                	jle    c0009f4f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0009f23:	c1 e3 0c             	shl    ebx,0xc
c0009f26:	8d 04 33             	lea    eax,[ebx+esi*1]
c0009f29:	89 f3                	mov    ebx,esi
c0009f2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f2f:	55                   	push   ebp
c0009f30:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0009f34:	29 f2                	sub    edx,esi
c0009f36:	01 da                	add    edx,ebx
c0009f38:	52                   	push   edx
c0009f39:	53                   	push   ebx
c0009f3a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f40:	57                   	push   edi
c0009f41:	e8 b8 fd ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f46:	83 c4 10             	add    esp,0x10
c0009f49:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0009f4d:	75 e0                	jne    c0009f2f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0009f4f:	0f 20 d8             	mov    eax,cr3
c0009f52:	0f 22 d8             	mov    cr3,eax
c0009f55:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f59:	83 c4 1c             	add    esp,0x1c
c0009f5c:	5b                   	pop    ebx
c0009f5d:	5e                   	pop    esi
c0009f5e:	5f                   	pop    edi
c0009f5f:	5d                   	pop    ebp
c0009f60:	c3                   	ret    
c0009f61:	90                   	nop

c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f62:	55                   	push   ebp
c0009f63:	57                   	push   edi
c0009f64:	56                   	push   esi
c0009f65:	53                   	push   ebx
c0009f66:	83 ec 1c             	sub    esp,0x1c
c0009f69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f71:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009f7d:	09 d8                	or     eax,ebx
c0009f7f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f84:	75 4b                	jne    c0009fd1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f86:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f89:	89 de                	mov    esi,ebx
c0009f8b:	c1 ee 16             	shr    esi,0x16
c0009f8e:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0009f95:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0009f99:	74 48                	je     c0009fe3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0009f9b:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0009fa0:	c1 eb 0a             	shr    ebx,0xa
c0009fa3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009fa7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009fab:	83 ff 01             	cmp    edi,0x1
c0009fae:	19 c0                	sbb    eax,eax
c0009fb0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009fb6:	c1 e6 0c             	shl    esi,0xc
c0009fb9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0009fbe:	01 f3                	add    ebx,esi
c0009fc0:	09 ca                	or     edx,ecx
c0009fc2:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0009fc9:	83 c4 1c             	add    esp,0x1c
c0009fcc:	5b                   	pop    ebx
c0009fcd:	5e                   	pop    esi
c0009fce:	5f                   	pop    edi
c0009fcf:	5d                   	pop    ebp
c0009fd0:	c3                   	ret    
c0009fd1:	83 ec 0c             	sub    esp,0xc
c0009fd4:	68 10 10 02 c0       	push   0xc0021010
c0009fd9:	e8 29 75 00 00       	call   c0011507 <KePanic(char const*)>
c0009fde:	83 c4 10             	add    esp,0x10
c0009fe1:	eb a3                	jmp    c0009f86 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0009fe3:	e8 fa dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009fe8:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009fee:	83 ec 0c             	sub    esp,0xc
c0009ff1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009ff5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009ff9:	6a 01                	push   0x1
c0009ffb:	e8 f5 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a000:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a007:	6a 01                	push   0x1
c000a009:	50                   	push   eax
c000a00a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a00e:	50                   	push   eax
c000a00f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a013:	51                   	push   ecx
c000a014:	e8 ef fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a019:	83 c4 1c             	add    esp,0x1c
c000a01c:	68 00 10 00 00       	push   0x1000
c000a021:	6a 00                	push   0x0
c000a023:	50                   	push   eax
c000a024:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a028:	e8 c3 64 ff ff       	call   c00004f0 <memset>
c000a02d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a031:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a034:	e8 d0 f8 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a039:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a03d:	83 c4 10             	add    esp,0x10
c000a040:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a043:	81 ca 07 04 00 00    	or     edx,0x407
c000a049:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a04c:	e9 4a ff ff ff       	jmp    c0009f9b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a051:	90                   	nop

c000a052 <VAS::VAS(bool)>:
c000a052:	53                   	push   ebx
c000a053:	83 ec 28             	sub    esp,0x28
c000a056:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a05a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a05e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a062:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a07c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a07f:	e8 5e dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a084:	89 c2                	mov    edx,eax
c000a086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a08d:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000a093:	83 ec 0c             	sub    esp,0xc
c000a096:	6a 01                	push   0x1
c000a098:	e8 58 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	89 c2                	mov    edx,eax
c000a0a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 03                	push   0x3
c000a0ae:	6a 01                	push   0x1
c000a0b0:	52                   	push   edx
c000a0b1:	50                   	push   eax
c000a0b2:	53                   	push   ebx
c000a0b3:	e8 50 fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0b8:	83 c4 20             	add    esp,0x20
c000a0bb:	89 c2                	mov    edx,eax
c000a0bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0c4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0cc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0d4:	7f 1d                	jg     c000a0f3 <VAS::VAS(bool)+0xa1>
c000a0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0e1:	c1 e2 02             	shl    edx,0x2
c000a0e4:	01 d0                	add    eax,edx
c000a0e6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0ec:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a0f1:	eb d9                	jmp    c000a0cc <VAS::VAS(bool)+0x7a>
c000a0f3:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a0fb:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a103:	7f 7e                	jg     c000a183 <VAS::VAS(bool)+0x131>
c000a105:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a109:	2d 00 02 00 00       	sub    eax,0x200
c000a10e:	c1 e0 0c             	shl    eax,0xc
c000a111:	83 c8 05             	or     eax,0x5
c000a114:	89 c2                	mov    edx,eax
c000a116:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a11b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a121:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a127:	83 e0 10             	and    eax,0x10
c000a12a:	0f b6 c0             	movzx  eax,al
c000a12d:	85 c0                	test   eax,eax
c000a12f:	74 07                	je     c000a138 <VAS::VAS(bool)+0xe6>
c000a131:	b8 00 01 00 00       	mov    eax,0x100
c000a136:	eb 05                	jmp    c000a13d <VAS::VAS(bool)+0xeb>
c000a138:	b8 00 00 00 00       	mov    eax,0x0
c000a13d:	09 d0                	or     eax,edx
c000a13f:	89 c1                	mov    ecx,eax
c000a141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a145:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a148:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a14c:	c1 e2 02             	shl    edx,0x2
c000a14f:	01 d0                	add    eax,edx
c000a151:	89 ca                	mov    edx,ecx
c000a153:	89 10                	mov    DWORD PTR [eax],edx
c000a155:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a159:	2d 40 03 00 00       	sub    eax,0x340
c000a15e:	83 f8 7f             	cmp    eax,0x7f
c000a161:	77 16                	ja     c000a179 <VAS::VAS(bool)+0x127>
c000a163:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a167:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a16a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a16e:	c1 e2 02             	shl    edx,0x2
c000a171:	01 d0                	add    eax,edx
c000a173:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a179:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a17e:	e9 78 ff ff ff       	jmp    c000a0fb <VAS::VAS(bool)+0xa9>
c000a183:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a188:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a18e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a194:	83 e0 10             	and    eax,0x10
c000a197:	0f b6 c0             	movzx  eax,al
c000a19a:	85 c0                	test   eax,eax
c000a19c:	74 07                	je     c000a1a5 <VAS::VAS(bool)+0x153>
c000a19e:	b8 03 41 00 00       	mov    eax,0x4103
c000a1a3:	eb 05                	jmp    c000a1aa <VAS::VAS(bool)+0x158>
c000a1a5:	b8 03 40 00 00       	mov    eax,0x4003
c000a1aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1ae:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1b1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1b7:	89 02                	mov    DWORD PTR [edx],eax
c000a1b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1bd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1c0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1cb:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1d1:	83 e0 10             	and    eax,0x10
c000a1d4:	0f b6 c0             	movzx  eax,al
c000a1d7:	85 c0                	test   eax,eax
c000a1d9:	74 07                	je     c000a1e2 <VAS::VAS(bool)+0x190>
c000a1db:	b8 00 01 00 00       	mov    eax,0x100
c000a1e0:	eb 05                	jmp    c000a1e7 <VAS::VAS(bool)+0x195>
c000a1e2:	b8 00 00 00 00       	mov    eax,0x0
c000a1e7:	09 c2                	or     edx,eax
c000a1e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1f0:	05 fc 0f 00 00       	add    eax,0xffc
c000a1f5:	83 ca 03             	or     edx,0x3
c000a1f8:	89 10                	mov    DWORD PTR [eax],edx
c000a1fa:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a205:	83 ec 0c             	sub    esp,0xc
c000a208:	50                   	push   eax
c000a209:	e8 c6 29 00 00       	call   c000cbd4 <Device::getName()>
c000a20e:	83 c4 10             	add    esp,0x10
c000a211:	83 ec 08             	sub    esp,0x8
c000a214:	68 e0 11 02 c0       	push   0xc00211e0
c000a219:	50                   	push   eax
c000a21a:	e8 61 65 ff ff       	call   c0000780 <strcmp>
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	85 c0                	test   eax,eax
c000a224:	0f 94 c0             	sete   al
c000a227:	0f b6 c0             	movzx  eax,al
c000a22a:	85 c0                	test   eax,eax
c000a22c:	74 68                	je     c000a296 <VAS::VAS(bool)+0x244>
c000a22e:	fa                   	cli    
c000a22f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a234:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a23a:	05 7c 09 00 00       	add    eax,0x97c
c000a23f:	83 ec 0c             	sub    esp,0xc
c000a242:	50                   	push   eax
c000a243:	e8 86 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a248:	83 c4 10             	add    esp,0x10
c000a24b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a250:	89 c3                	mov    ebx,eax
c000a252:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a257:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a25d:	05 7c 09 00 00       	add    eax,0x97c
c000a262:	83 ec 0c             	sub    esp,0xc
c000a265:	50                   	push   eax
c000a266:	e8 63 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a26b:	83 c4 10             	add    esp,0x10
c000a26e:	83 ec 08             	sub    esp,0x8
c000a271:	50                   	push   eax
c000a272:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a276:	e8 6f f6 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a280:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a285:	6a 11                	push   0x11
c000a287:	53                   	push   ebx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28d:	e8 6c fa ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a292:	83 c4 10             	add    esp,0x10
c000a295:	fb                   	sti    
c000a296:	90                   	nop
c000a297:	83 c4 28             	add    esp,0x28
c000a29a:	5b                   	pop    ebx
c000a29b:	c3                   	ret    

c000a29c <VAS::evict(unsigned long)>:
c000a29c:	55                   	push   ebp
c000a29d:	57                   	push   edi
c000a29e:	56                   	push   esi
c000a29f:	53                   	push   ebx
c000a2a0:	83 ec 1c             	sub    esp,0x1c
c000a2a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2af:	e8 96 f4 ff ff       	call   c000974a <Virt::allocateSwapfilePage()>
c000a2b4:	89 c7                	mov    edi,eax
c000a2b6:	a1 ac 35 02 c0       	mov    eax,ds:0xc00235ac
c000a2bb:	85 c0                	test   eax,eax
c000a2bd:	7e 40                	jle    c000a2ff <VAS::evict(unsigned long)+0x63>
c000a2bf:	89 ee                	mov    esi,ebp
c000a2c1:	31 db                	xor    ebx,ebx
c000a2c3:	83 ec 0c             	sub    esp,0xc
c000a2c6:	57                   	push   edi
c000a2c7:	e8 68 f4 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a2cc:	31 d2                	xor    edx,edx
c000a2ce:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2d1:	81 c6 00 02 00 00    	add    esi,0x200
c000a2d7:	6a 01                	push   0x1
c000a2d9:	52                   	push   edx
c000a2da:	01 d8                	add    eax,ebx
c000a2dc:	83 c3 01             	add    ebx,0x1
c000a2df:	50                   	push   eax
c000a2e0:	0f be 05 b8 35 02 c0 	movsx  eax,BYTE PTR ds:0xc00235b8
c000a2e7:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a2ee:	50                   	push   eax
c000a2ef:	e8 a2 3a 00 00       	call   c000dd96 <LogicalDisk::write(unsigned long long, int, void*)>
c000a2f4:	83 c4 20             	add    esp,0x20
c000a2f7:	39 1d ac 35 02 c0    	cmp    DWORD PTR ds:0xc00235ac,ebx
c000a2fd:	7f c4                	jg     c000a2c3 <VAS::evict(unsigned long)+0x27>
c000a2ff:	c1 e7 0c             	shl    edi,0xc
c000a302:	83 ec 08             	sub    esp,0x8
c000a305:	55                   	push   ebp
c000a306:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a30a:	50                   	push   eax
c000a30b:	e8 da f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a310:	8b 10                	mov    edx,DWORD PTR [eax]
c000a312:	89 d3                	mov    ebx,edx
c000a314:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a31a:	09 d7                	or     edi,edx
c000a31c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a322:	89 38                	mov    DWORD PTR [eax],edi
c000a324:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a327:	8b 15 a8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fa8
c000a32d:	83 c2 01             	add    edx,0x1
c000a330:	89 15 a8 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa8,edx
c000a336:	e8 3e da ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c000a33b:	0f 20 d8             	mov    eax,cr3
c000a33e:	0f 22 d8             	mov    cr3,eax
c000a341:	8b 0d a8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fa8
c000a347:	51                   	push   ecx
c000a348:	55                   	push   ebp
c000a349:	53                   	push   ebx
c000a34a:	68 34 10 02 c0       	push   0xc0021034
c000a34f:	e8 b6 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a354:	a1 a4 6f 02 c0       	mov    eax,ds:0xc0026fa4
c000a359:	c7 44 24 50 ee 11 02 c0 	mov    DWORD PTR [esp+0x50],0xc00211ee
c000a361:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a365:	8d 50 01             	lea    edx,[eax+0x1]
c000a368:	89 15 a4 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa4,edx
c000a36e:	83 c4 3c             	add    esp,0x3c
c000a371:	5b                   	pop    ebx
c000a372:	5e                   	pop    esi
c000a373:	5f                   	pop    edi
c000a374:	5d                   	pop    ebp
c000a375:	e9 90 05 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a37a:	55                   	push   ebp
c000a37b:	57                   	push   edi
c000a37c:	56                   	push   esi
c000a37d:	53                   	push   ebx
c000a37e:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a384:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c000a38b:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a391:	77 78                	ja     c000a40b <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c000a393:	83 ec 08             	sub    esp,0x8
c000a396:	53                   	push   ebx
c000a397:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a39d:	68 11 12 02 c0       	push   0xc0021211
c000a3a2:	e8 63 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a3a7:	58                   	pop    eax
c000a3a8:	5a                   	pop    edx
c000a3a9:	53                   	push   ebx
c000a3aa:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3b1:	51                   	push   ecx
c000a3b2:	e8 33 f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a3b7:	83 c4 10             	add    esp,0x10
c000a3ba:	85 c0                	test   eax,eax
c000a3bc:	89 c5                	mov    ebp,eax
c000a3be:	0f 95 c0             	setne  al
c000a3c1:	85 db                	test   ebx,ebx
c000a3c3:	0f 95 c2             	setne  dl
c000a3c6:	21 d0                	and    eax,edx
c000a3c8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a3cc:	a8 01                	test   al,0x1
c000a3ce:	75 0f                	jne    c000a3df <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c000a3d0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a3d4:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3da:	5b                   	pop    ebx
c000a3db:	5e                   	pop    esi
c000a3dc:	5f                   	pop    edi
c000a3dd:	5d                   	pop    ebp
c000a3de:	c3                   	ret    
c000a3df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3e2:	f6 c4 02             	test   ah,0x2
c000a3e5:	75 39                	jne    c000a420 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a3e7:	89 c2                	mov    edx,eax
c000a3e9:	81 e2 01 04 00 00    	and    edx,0x401
c000a3ef:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a3f5:	74 73                	je     c000a46a <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a3f7:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c000a3fc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a400:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a406:	5b                   	pop    ebx
c000a407:	5e                   	pop    esi
c000a408:	5f                   	pop    edi
c000a409:	5d                   	pop    ebp
c000a40a:	c3                   	ret    
c000a40b:	83 ec 0c             	sub    esp,0xc
c000a40e:	68 ff 11 02 c0       	push   0xc00211ff
c000a413:	e8 ef 70 00 00       	call   c0011507 <KePanic(char const*)>
c000a418:	83 c4 10             	add    esp,0x10
c000a41b:	e9 73 ff ff ff       	jmp    c000a393 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c000a420:	83 ec 0c             	sub    esp,0xc
c000a423:	89 de                	mov    esi,ebx
c000a425:	68 64 10 02 c0       	push   0xc0021064
c000a42a:	e8 db 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a42f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a433:	e8 aa d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a438:	ba 00 10 00 00       	mov    edx,0x1000
c000a43d:	89 d1                	mov    ecx,edx
c000a43f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a441:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000a444:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a44a:	09 c8                	or     eax,ecx
c000a44c:	83 c8 02             	or     eax,0x2
c000a44f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000a452:	0f 20 d8             	mov    eax,cr3
c000a455:	0f 22 d8             	mov    cr3,eax
c000a458:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a45c:	89 df                	mov    edi,ebx
c000a45e:	89 d1                	mov    ecx,edx
c000a460:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	e9 66 ff ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c000a46a:	c1 e8 0c             	shr    eax,0xc
c000a46d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a471:	e8 6c d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a476:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000a479:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a47f:	09 c2                	or     edx,eax
c000a481:	81 ca 01 08 00 00    	or     edx,0x801
c000a487:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c000a48a:	a1 ac 35 02 c0       	mov    eax,ds:0xc00235ac
c000a48f:	85 c0                	test   eax,eax
c000a491:	7e 44                	jle    c000a4d7 <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c000a493:	89 df                	mov    edi,ebx
c000a495:	31 f6                	xor    esi,esi
c000a497:	83 ec 0c             	sub    esp,0xc
c000a49a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a49e:	51                   	push   ecx
c000a49f:	e8 90 f2 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a4a4:	31 d2                	xor    edx,edx
c000a4a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a4a9:	81 c7 00 02 00 00    	add    edi,0x200
c000a4af:	6a 01                	push   0x1
c000a4b1:	52                   	push   edx
c000a4b2:	01 f0                	add    eax,esi
c000a4b4:	83 c6 01             	add    esi,0x1
c000a4b7:	50                   	push   eax
c000a4b8:	0f be 05 b8 35 02 c0 	movsx  eax,BYTE PTR ds:0xc00235b8
c000a4bf:	8b 2c 85 7c b7 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd4884]
c000a4c6:	55                   	push   ebp
c000a4c7:	e8 5e 38 00 00       	call   c000dd2a <LogicalDisk::read(unsigned long long, int, void*)>
c000a4cc:	83 c4 20             	add    esp,0x20
c000a4cf:	39 35 ac 35 02 c0    	cmp    DWORD PTR ds:0xc00235ac,esi
c000a4d5:	7f c0                	jg     c000a497 <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c000a4d7:	a1 a8 6f 02 c0       	mov    eax,ds:0xc0026fa8
c000a4dc:	83 ec 04             	sub    esp,0x4
c000a4df:	83 e8 01             	sub    eax,0x1
c000a4e2:	50                   	push   eax
c000a4e3:	53                   	push   ebx
c000a4e4:	68 24 12 02 c0       	push   0xc0021224
c000a4e9:	a3 a8 6f 02 c0       	mov    ds:0xc0026fa8,eax
c000a4ee:	e8 17 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a4f3:	58                   	pop    eax
c000a4f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a4f8:	52                   	push   edx
c000a4f9:	e8 13 f2 ff ff       	call   c0009711 <Virt::freeSwapfilePage(unsigned long)>
c000a4fe:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000a503:	83 c4 10             	add    esp,0x10
c000a506:	83 e8 01             	sub    eax,0x1
c000a509:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000a50e:	85 c0                	test   eax,eax
c000a510:	75 01                	jne    c000a513 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c000a512:	fb                   	sti    
c000a513:	0f 20 d8             	mov    eax,cr3
c000a516:	0f 22 d8             	mov    cr3,eax
c000a519:	e9 b2 fe ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c000a51e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a51e:	55                   	push   ebp
c000a51f:	57                   	push   edi
c000a520:	56                   	push   esi
c000a521:	53                   	push   ebx
c000a522:	83 ec 28             	sub    esp,0x28
c000a525:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a529:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a52d:	50                   	push   eax
c000a52e:	e8 c2 f0 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a533:	83 c4 0c             	add    esp,0xc
c000a536:	6a 07                	push   0x7
c000a538:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a53c:	52                   	push   edx
c000a53d:	89 c5                	mov    ebp,eax
c000a53f:	53                   	push   ebx
c000a540:	e8 c1 f8 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c000a545:	83 c4 10             	add    esp,0x10
c000a548:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a54c:	89 c7                	mov    edi,eax
c000a54e:	85 c9                	test   ecx,ecx
c000a550:	74 2f                	je     c000a581 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a552:	31 f6                	xor    esi,esi
c000a554:	e8 89 d8 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a559:	83 c6 01             	add    esi,0x1
c000a55c:	6a 03                	push   0x3
c000a55e:	55                   	push   ebp
c000a55f:	50                   	push   eax
c000a560:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a564:	53                   	push   ebx
c000a565:	e8 94 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a56a:	6a 07                	push   0x7
c000a56c:	57                   	push   edi
c000a56d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a571:	50                   	push   eax
c000a572:	53                   	push   ebx
c000a573:	e8 86 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a578:	83 c4 20             	add    esp,0x20
c000a57b:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c000a57f:	75 d3                	jne    c000a554 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a581:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a585:	89 28                	mov    DWORD PTR [eax],ebp
c000a587:	83 c4 1c             	add    esp,0x1c
c000a58a:	89 f8                	mov    eax,edi
c000a58c:	5b                   	pop    ebx
c000a58d:	5e                   	pop    esi
c000a58e:	5f                   	pop    edi
c000a58f:	5d                   	pop    ebp
c000a590:	c3                   	ret    
c000a591:	90                   	nop

c000a592 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a592:	53                   	push   ebx
c000a593:	83 ec 14             	sub    esp,0x14
c000a596:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a59a:	68 84 10 02 c0       	push   0xc0021084
c000a59f:	e8 66 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5a4:	c7 04 24 e4 10 02 c0 	mov    DWORD PTR [esp],0xc00210e4
c000a5ab:	e8 5a 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5b4:	83 c4 18             	add    esp,0x18
c000a5b7:	5b                   	pop    ebx
c000a5b8:	e9 4c f3 ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a5bd:	90                   	nop

c000a5be <VAS::scanForEviction()>:
c000a5be:	57                   	push   edi
c000a5bf:	56                   	push   esi
c000a5c0:	31 f6                	xor    esi,esi
c000a5c2:	53                   	push   ebx
c000a5c3:	83 ec 10             	sub    esp,0x10
c000a5c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5ca:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5cd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5d3:	75 0e                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a5d5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5d8:	89 da                	mov    edx,ebx
c000a5da:	c1 ea 16             	shr    edx,0x16
c000a5dd:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5e1:	74 57                	je     c000a63a <VAS::scanForEviction()+0x7c>
c000a5e3:	53                   	push   ebx
c000a5e4:	57                   	push   edi
c000a5e5:	e8 00 f3 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a5ea:	5a                   	pop    edx
c000a5eb:	59                   	pop    ecx
c000a5ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5ee:	89 d1                	mov    ecx,edx
c000a5f0:	c1 e9 0c             	shr    ecx,0xc
c000a5f3:	74 10                	je     c000a605 <VAS::scanForEviction()+0x47>
c000a5f5:	89 d1                	mov    ecx,edx
c000a5f7:	81 e1 01 08 00 00    	and    ecx,0x801
c000a5fd:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a603:	74 40                	je     c000a645 <VAS::scanForEviction()+0x87>
c000a605:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a60b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a611:	76 2d                	jbe    c000a640 <VAS::scanForEviction()+0x82>
c000a613:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a61a:	83 c6 01             	add    esi,0x1
c000a61d:	83 fe 03             	cmp    esi,0x3
c000a620:	74 32                	je     c000a654 <VAS::scanForEviction()+0x96>
c000a622:	31 db                	xor    ebx,ebx
c000a624:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a62a:	75 b7                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a62c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a62f:	89 da                	mov    edx,ebx
c000a631:	c1 ea 16             	shr    edx,0x16
c000a634:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a638:	75 a9                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a63a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a640:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a643:	eb 88                	jmp    c000a5cd <VAS::scanForEviction()+0xf>
c000a645:	f6 c2 20             	test   dl,0x20
c000a648:	74 13                	je     c000a65d <VAS::scanForEviction()+0x9f>
c000a64a:	83 e2 df             	and    edx,0xffffffdf
c000a64d:	89 10                	mov    DWORD PTR [eax],edx
c000a64f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a652:	eb b1                	jmp    c000a605 <VAS::scanForEviction()+0x47>
c000a654:	83 c4 10             	add    esp,0x10
c000a657:	31 c0                	xor    eax,eax
c000a659:	5b                   	pop    ebx
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	c3                   	ret    
c000a65d:	89 d0                	mov    eax,edx
c000a65f:	83 ec 08             	sub    esp,0x8
c000a662:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a667:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a66b:	53                   	push   ebx
c000a66c:	68 39 12 02 c0       	push   0xc0021239
c000a671:	e8 94 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a676:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a679:	58                   	pop    eax
c000a67a:	5a                   	pop    edx
c000a67b:	51                   	push   ecx
c000a67c:	57                   	push   edi
c000a67d:	e8 1a fc ff ff       	call   c000a29c <VAS::evict(unsigned long)>
c000a682:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a685:	5b                   	pop    ebx
c000a686:	5e                   	pop    esi
c000a687:	50                   	push   eax
c000a688:	68 4d 12 02 c0       	push   0xc002124d
c000a68d:	e8 78 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a692:	58                   	pop    eax
c000a693:	5a                   	pop    edx
c000a694:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a698:	50                   	push   eax
c000a699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a69d:	68 60 12 02 c0       	push   0xc0021260
c000a6a2:	e8 63 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a6a7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6aa:	83 c4 10             	add    esp,0x10
c000a6ad:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6b3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6ba:	83 c4 10             	add    esp,0x10
c000a6bd:	5b                   	pop    ebx
c000a6be:	5e                   	pop    esi
c000a6bf:	5f                   	pop    edi
c000a6c0:	c3                   	ret    

c000a6c1 <mapVASFirstTime>:
c000a6c1:	55                   	push   ebp
c000a6c2:	57                   	push   edi
c000a6c3:	56                   	push   esi
c000a6c4:	53                   	push   ebx
c000a6c5:	83 ec 0c             	sub    esp,0xc
c000a6c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6cd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6d0:	83 fa 01             	cmp    edx,0x1
c000a6d3:	0f 84 cb 00 00 00    	je     c000a7a4 <mapVASFirstTime+0xe3>
c000a6d9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6dc:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6e1:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6e6:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6e9:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6ef:	c1 e5 15             	shl    ebp,0x15
c000a6f2:	29 eb                	sub    ebx,ebp
c000a6f4:	29 ef                	sub    edi,ebp
c000a6f6:	e8 e7 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	68 03 04 00 00       	push   0x403
c000a703:	6a 01                	push   0x1
c000a705:	53                   	push   ebx
c000a706:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a70c:	50                   	push   eax
c000a70d:	56                   	push   esi
c000a70e:	e8 f5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a713:	83 c4 20             	add    esp,0x20
c000a716:	39 fb                	cmp    ebx,edi
c000a718:	75 dc                	jne    c000a6f6 <mapVASFirstTime+0x35>
c000a71a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a71f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a724:	29 eb                	sub    ebx,ebp
c000a726:	29 ef                	sub    edi,ebp
c000a728:	e8 b5 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a72d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a731:	83 fa 01             	cmp    edx,0x1
c000a734:	19 d2                	sbb    edx,edx
c000a736:	83 ec 0c             	sub    esp,0xc
c000a739:	83 e2 04             	and    edx,0x4
c000a73c:	81 c2 03 04 00 00    	add    edx,0x403
c000a742:	52                   	push   edx
c000a743:	6a 01                	push   0x1
c000a745:	53                   	push   ebx
c000a746:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a74c:	50                   	push   eax
c000a74d:	56                   	push   esi
c000a74e:	e8 b5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a753:	83 c4 20             	add    esp,0x20
c000a756:	39 df                	cmp    edi,ebx
c000a758:	75 ce                	jne    c000a728 <mapVASFirstTime+0x67>
c000a75a:	83 ec 0c             	sub    esp,0xc
c000a75d:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c000a762:	6a 04                	push   0x4
c000a764:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c000a76a:	6a ff                	push   0xffffffff
c000a76c:	c1 eb 0c             	shr    ebx,0xc
c000a76f:	53                   	push   ebx
c000a770:	68 00 50 02 c0       	push   0xc0025000
c000a775:	56                   	push   esi
c000a776:	e8 09 f3 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a77b:	83 c4 14             	add    esp,0x14
c000a77e:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c000a783:	6a 04                	push   0x4
c000a785:	6a ff                	push   0xffffffff
c000a787:	53                   	push   ebx
c000a788:	68 00 50 02 c0       	push   0xc0025000
c000a78d:	50                   	push   eax
c000a78e:	e8 f1 f2 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a793:	0f 20 d8             	mov    eax,cr3
c000a796:	0f 22 d8             	mov    cr3,eax
c000a799:	83 c4 20             	add    esp,0x20
c000a79c:	83 c4 0c             	add    esp,0xc
c000a79f:	5b                   	pop    ebx
c000a7a0:	5e                   	pop    esi
c000a7a1:	5f                   	pop    edi
c000a7a2:	5d                   	pop    ebp
c000a7a3:	c3                   	ret    
c000a7a4:	83 ec 0c             	sub    esp,0xc
c000a7a7:	68 6d 12 02 c0       	push   0xc002126d
c000a7ac:	e8 59 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7b1:	83 c4 10             	add    esp,0x10
c000a7b4:	83 c4 0c             	add    esp,0xc
c000a7b7:	5b                   	pop    ebx
c000a7b8:	5e                   	pop    esi
c000a7b9:	5f                   	pop    edi
c000a7ba:	5d                   	pop    ebp
c000a7bb:	c3                   	ret    

c000a7bc <__cxa_atexit>:
c000a7bc:	31 c0                	xor    eax,eax
c000a7be:	c3                   	ret    

c000a7bf <__cxa_finalize>:
c000a7bf:	c3                   	ret    

c000a7c0 <__stack_chk_fail>:
c000a7c0:	55                   	push   ebp
c000a7c1:	89 e5                	mov    ebp,esp
c000a7c3:	83 ec 10             	sub    esp,0x10
c000a7c6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7c9:	68 86 12 02 c0       	push   0xc0021286
c000a7ce:	e8 37 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7d3:	58                   	pop    eax
c000a7d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7d7:	5a                   	pop    edx
c000a7d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7db:	68 86 12 02 c0       	push   0xc0021286
c000a7e0:	e8 25 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7e5:	c7 04 24 8e 12 02 c0 	mov    DWORD PTR [esp],0xc002128e
c000a7ec:	e8 16 6d 00 00       	call   c0011507 <KePanic(char const*)>
c000a7f1:	83 c4 10             	add    esp,0x10
c000a7f4:	c9                   	leave  
c000a7f5:	c3                   	ret    

c000a7f6 <__cxa_pure_virtual>:
c000a7f6:	83 ec 18             	sub    esp,0x18
c000a7f9:	68 a6 12 02 c0       	push   0xc00212a6
c000a7fe:	e8 04 6d 00 00       	call   c0011507 <KePanic(char const*)>
c000a803:	83 c4 1c             	add    esp,0x1c
c000a806:	c3                   	ret    

c000a807 <operator new[](unsigned long)>:
c000a807:	e9 c7 d2 ff ff       	jmp    c0007ad3 <malloc>

c000a80c <operator delete(void*, unsigned long)>:
c000a80c:	e9 e2 d2 ff ff       	jmp    c0007af3 <rfree>

c000a811 <operator delete[](void*)>:
c000a811:	e9 dd d2 ff ff       	jmp    c0007af3 <rfree>

c000a816 <operator delete[](void*, unsigned long)>:
c000a816:	e9 d8 d2 ff ff       	jmp    c0007af3 <rfree>

c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a81b:	55                   	push   ebp
c000a81c:	57                   	push   edi
c000a81d:	56                   	push   esi
c000a81e:	53                   	push   ebx
c000a81f:	83 ec 20             	sub    esp,0x20
c000a822:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a826:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a82e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a832:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a83a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a83e:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a846:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a84e:	89 f7                	mov    edi,esi
c000a850:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a855:	89 eb                	mov    ebx,ebp
c000a857:	eb 02                	jmp    c000a85b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a859:	89 c7                	mov    edi,eax
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	89 f8                	mov    eax,edi
c000a85f:	f7 f1                	div    ecx
c000a861:	83 c3 01             	add    ebx,0x1
c000a864:	39 cf                	cmp    edi,ecx
c000a866:	73 f1                	jae    c000a859 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a868:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a86b:	eb 02                	jmp    c000a86f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a86d:	89 c6                	mov    esi,eax
c000a86f:	31 d2                	xor    edx,edx
c000a871:	89 f0                	mov    eax,esi
c000a873:	f7 f1                	div    ecx
c000a875:	83 eb 01             	sub    ebx,0x1
c000a878:	39 ce                	cmp    esi,ecx
c000a87a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a87e:	88 13                	mov    BYTE PTR [ebx],dl
c000a880:	73 eb                	jae    c000a86d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a882:	83 c4 20             	add    esp,0x20
c000a885:	89 e8                	mov    eax,ebp
c000a887:	5b                   	pop    ebx
c000a888:	5e                   	pop    esi
c000a889:	5f                   	pop    edi
c000a88a:	5d                   	pop    ebp
c000a88b:	c3                   	ret    

c000a88c <Dbg::logc(char)>:
c000a88c:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a893:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a897:	75 12                	jne    c000a8ab <Dbg::logc(char)+0x1f>
c000a899:	ba fd 03 00 00       	mov    edx,0x3fd
c000a89e:	ec                   	in     al,dx
c000a89f:	a8 20                	test   al,0x20
c000a8a1:	74 fb                	je     c000a89e <Dbg::logc(char)+0x12>
c000a8a3:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8a8:	88 c8                	mov    al,cl
c000a8aa:	ee                   	out    dx,al
c000a8ab:	c3                   	ret    

c000a8ac <Dbg::logs(char*)>:
c000a8ac:	53                   	push   ebx
c000a8ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8b1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8b4:	85 c0                	test   eax,eax
c000a8b6:	74 11                	je     c000a8c9 <Dbg::logs(char*)+0x1d>
c000a8b8:	50                   	push   eax
c000a8b9:	83 c3 01             	add    ebx,0x1
c000a8bc:	e8 cb ff ff ff       	call   c000a88c <Dbg::logc(char)>
c000a8c1:	58                   	pop    eax
c000a8c2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8c5:	85 c0                	test   eax,eax
c000a8c7:	75 ef                	jne    c000a8b8 <Dbg::logs(char*)+0xc>
c000a8c9:	5b                   	pop    ebx
c000a8ca:	c3                   	ret    

c000a8cb <Dbg::logWriteInt(unsigned int)>:
c000a8cb:	83 ec 10             	sub    esp,0x10
c000a8ce:	6a 0a                	push   0xa
c000a8d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8d4:	50                   	push   eax
c000a8d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d9:	50                   	push   eax
c000a8da:	e8 3c ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a8df:	50                   	push   eax
c000a8e0:	e8 c7 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a8e5:	83 c4 20             	add    esp,0x20
c000a8e8:	c3                   	ret    

c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a8e9:	83 ec 10             	sub    esp,0x10
c000a8ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a8f0:	50                   	push   eax
c000a8f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8f5:	50                   	push   eax
c000a8f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a8fa:	52                   	push   edx
c000a8fb:	e8 1b ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a900:	50                   	push   eax
c000a901:	e8 a6 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a906:	83 c4 20             	add    esp,0x20
c000a909:	c3                   	ret    

c000a90a <Dbg::kprintf(char const*, ...)>:
c000a90a:	55                   	push   ebp
c000a90b:	57                   	push   edi
c000a90c:	56                   	push   esi
c000a90d:	53                   	push   ebx
c000a90e:	83 ec 0c             	sub    esp,0xc
c000a911:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a918:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a91c:	74 08                	je     c000a926 <Dbg::kprintf(char const*, ...)+0x1c>
c000a91e:	83 c4 0c             	add    esp,0xc
c000a921:	5b                   	pop    ebx
c000a922:	5e                   	pop    esi
c000a923:	5f                   	pop    edi
c000a924:	5d                   	pop    ebp
c000a925:	c3                   	ret    
c000a926:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a92a:	31 ff                	xor    edi,edi
c000a92c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a930:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a933:	85 c0                	test   eax,eax
c000a935:	74 e7                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a937:	8d 77 01             	lea    esi,[edi+0x1]
c000a93a:	83 f8 25             	cmp    eax,0x25
c000a93d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a940:	75 47                	jne    c000a989 <Dbg::kprintf(char const*, ...)+0x7f>
c000a942:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a945:	83 c7 02             	add    edi,0x2
c000a948:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a94b:	83 e8 25             	sub    eax,0x25
c000a94e:	0f b6 c0             	movzx  eax,al
c000a951:	83 f8 53             	cmp    eax,0x53
c000a954:	0f 87 ce 00 00 00    	ja     c000aa28 <Dbg::kprintf(char const*, ...)+0x11e>
c000a95a:	ff 24 85 bc 12 02 c0 	jmp    DWORD PTR [eax*4-0x3ffded44]
c000a961:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a965:	89 c8                	mov    eax,ecx
c000a967:	83 c1 04             	add    ecx,0x4
c000a96a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a96e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a970:	55                   	push   ebp
c000a971:	e8 55 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a976:	58                   	pop    eax
c000a977:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a97a:	85 c0                	test   eax,eax
c000a97c:	74 a0                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a97e:	8d 77 01             	lea    esi,[edi+0x1]
c000a981:	83 f8 25             	cmp    eax,0x25
c000a984:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a987:	74 b9                	je     c000a942 <Dbg::kprintf(char const*, ...)+0x38>
c000a989:	50                   	push   eax
c000a98a:	89 f7                	mov    edi,esi
c000a98c:	e8 fb fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a991:	89 ee                	mov    esi,ebp
c000a993:	58                   	pop    eax
c000a994:	eb e1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a996:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a99a:	89 c8                	mov    eax,ecx
c000a99c:	83 c1 04             	add    ecx,0x4
c000a99f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9a5:	50                   	push   eax
c000a9a6:	e8 01 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a9ab:	58                   	pop    eax
c000a9ac:	eb c9                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9b2:	89 d0                	mov    eax,edx
c000a9b4:	83 c2 04             	add    edx,0x4
c000a9b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9bd:	50                   	push   eax
c000a9be:	e8 08 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a9c3:	58                   	pop    eax
c000a9c4:	eb b1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ca:	89 d0                	mov    eax,edx
c000a9cc:	83 c2 04             	add    edx,0x4
c000a9cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9d3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a9d6:	50                   	push   eax
c000a9d7:	e8 b0 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a9dc:	58                   	pop    eax
c000a9dd:	eb 98                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9e3:	89 c8                	mov    eax,ecx
c000a9e5:	83 c1 04             	add    ecx,0x4
c000a9e8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9ec:	6a 10                	push   0x10
c000a9ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a9f0:	51                   	push   ecx
c000a9f1:	e8 f3 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000a9f6:	5d                   	pop    ebp
c000a9f7:	58                   	pop    eax
c000a9f8:	e9 7a ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa01:	89 d0                	mov    eax,edx
c000aa03:	83 c2 08             	add    edx,0x8
c000aa06:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa0a:	6a 10                	push   0x10
c000aa0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa0e:	50                   	push   eax
c000aa0f:	e8 d5 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa14:	58                   	pop    eax
c000aa15:	5a                   	pop    edx
c000aa16:	e9 5c ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1b:	6a 25                	push   0x25
c000aa1d:	e8 6a fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa22:	5a                   	pop    edx
c000aa23:	e9 4f ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa28:	6a 25                	push   0x25
c000aa2a:	e8 5d fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa2f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa33:	50                   	push   eax
c000aa34:	e8 53 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa39:	5a                   	pop    edx
c000aa3a:	59                   	pop    ecx
c000aa3b:	e9 37 ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>

c000aa40 <KiUbsanPrintDetails(char const*, void*)>:
c000aa40:	83 ec 1c             	sub    esp,0x1c
c000aa43:	83 ec 08             	sub    esp,0x8
c000aa46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa4a:	68 0c 14 02 c0       	push   0xc002140c
c000aa4f:	e8 b6 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa54:	83 c4 10             	add    esp,0x10
c000aa57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa63:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa65:	83 ec 08             	sub    esp,0x8
c000aa68:	50                   	push   eax
c000aa69:	68 20 14 02 c0       	push   0xc0021420
c000aa6e:	e8 97 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa73:	83 c4 10             	add    esp,0x10
c000aa76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aa7d:	83 ec 08             	sub    esp,0x8
c000aa80:	50                   	push   eax
c000aa81:	68 2a 14 02 c0       	push   0xc002142a
c000aa86:	e8 7f fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa8b:	83 c4 10             	add    esp,0x10
c000aa8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aa95:	83 ec 08             	sub    esp,0x8
c000aa98:	50                   	push   eax
c000aa99:	68 34 14 02 c0       	push   0xc0021434
c000aa9e:	e8 67 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	90                   	nop
c000aaa7:	83 c4 1c             	add    esp,0x1c
c000aaaa:	c3                   	ret    
c000aaab:	90                   	nop

c000aaac <__ubsan_handle_type_mismatch_v1>:
c000aaac:	83 ec 0c             	sub    esp,0xc
c000aaaf:	83 ec 08             	sub    esp,0x8
c000aab2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aab6:	68 78 15 02 c0       	push   0xc0021578
c000aabb:	e8 80 ff ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aac0:	83 c4 10             	add    esp,0x10
c000aac3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aac8:	75 16                	jne    c000aae0 <__ubsan_handle_type_mismatch_v1+0x34>
c000aaca:	83 ec 0c             	sub    esp,0xc
c000aacd:	68 3e 14 02 c0       	push   0xc002143e
c000aad2:	e8 33 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	e9 91 00 00 00       	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000aadf:	90                   	nop
c000aae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aae7:	85 c0                	test   eax,eax
c000aae9:	74 29                	je     c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aaeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aaf2:	83 e8 01             	sub    eax,0x1
c000aaf5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000aaf9:	75 19                	jne    c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aafb:	83 ec 08             	sub    esp,0x8
c000aafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab02:	68 98 15 02 c0       	push   0xc0021598
c000ab07:	e8 fe fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab0c:	83 c4 10             	add    esp,0x10
c000ab0f:	eb 5f                	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab11:	8d 76 00             	lea    esi,[esi+0x0]
c000ab14:	83 ec 0c             	sub    esp,0xc
c000ab17:	68 53 14 02 c0       	push   0xc0021453
c000ab1c:	e8 e9 fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab21:	83 c4 10             	add    esp,0x10
c000ab24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab28:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab2b:	0f b6 c0             	movzx  eax,al
c000ab2e:	83 ec 08             	sub    esp,0x8
c000ab31:	50                   	push   eax
c000ab32:	68 6d 14 02 c0       	push   0xc002146d
c000ab37:	e8 ce fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab46:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab51:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab54:	0f b6 c0             	movzx  eax,al
c000ab57:	8b 04 85 c0 35 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdca40]
c000ab5e:	51                   	push   ecx
c000ab5f:	52                   	push   edx
c000ab60:	50                   	push   eax
c000ab61:	68 c0 15 02 c0       	push   0xc00215c0
c000ab66:	e8 9f fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab6b:	83 c4 10             	add    esp,0x10
c000ab6e:	66 90                	xchg   ax,ax
c000ab70:	83 ec 0c             	sub    esp,0xc
c000ab73:	68 78 15 02 c0       	push   0xc0021578
c000ab78:	e8 8a 69 00 00       	call   c0011507 <KePanic(char const*)>
c000ab7d:	83 c4 10             	add    esp,0x10
c000ab80:	90                   	nop
c000ab81:	83 c4 0c             	add    esp,0xc
c000ab84:	c3                   	ret    
c000ab85:	8d 76 00             	lea    esi,[esi+0x0]

c000ab88 <__ubsan_handle_pointer_overflow>:
c000ab88:	83 ec 0c             	sub    esp,0xc
c000ab8b:	83 ec 08             	sub    esp,0x8
c000ab8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab92:	68 08 16 02 c0       	push   0xc0021608
c000ab97:	e8 a4 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	83 ec 0c             	sub    esp,0xc
c000aba2:	68 08 16 02 c0       	push   0xc0021608
c000aba7:	e8 5b 69 00 00       	call   c0011507 <KePanic(char const*)>
c000abac:	83 c4 10             	add    esp,0x10
c000abaf:	90                   	nop
c000abb0:	83 c4 0c             	add    esp,0xc
c000abb3:	c3                   	ret    

c000abb4 <__ubsan_handle_out_of_bounds>:
c000abb4:	83 ec 0c             	sub    esp,0xc
c000abb7:	83 ec 08             	sub    esp,0x8
c000abba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abbe:	68 78 14 02 c0       	push   0xc0021478
c000abc3:	e8 78 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abc8:	83 c4 10             	add    esp,0x10
c000abcb:	83 ec 0c             	sub    esp,0xc
c000abce:	68 78 14 02 c0       	push   0xc0021478
c000abd3:	e8 2f 69 00 00       	call   c0011507 <KePanic(char const*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	90                   	nop
c000abdc:	83 c4 0c             	add    esp,0xc
c000abdf:	c3                   	ret    

c000abe0 <__ubsan_handle_add_overflow>:
c000abe0:	83 ec 0c             	sub    esp,0xc
c000abe3:	83 ec 08             	sub    esp,0x8
c000abe6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abea:	68 95 14 02 c0       	push   0xc0021495
c000abef:	e8 4c fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	83 ec 0c             	sub    esp,0xc
c000abfa:	68 95 14 02 c0       	push   0xc0021495
c000abff:	e8 03 69 00 00       	call   c0011507 <KePanic(char const*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	90                   	nop
c000ac08:	83 c4 0c             	add    esp,0xc
c000ac0b:	c3                   	ret    

c000ac0c <__ubsan_handle_load_invalid_value>:
c000ac0c:	83 ec 0c             	sub    esp,0xc
c000ac0f:	83 ec 08             	sub    esp,0x8
c000ac12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac16:	68 28 16 02 c0       	push   0xc0021628
c000ac1b:	e8 20 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac20:	83 c4 10             	add    esp,0x10
c000ac23:	83 ec 0c             	sub    esp,0xc
c000ac26:	68 28 16 02 c0       	push   0xc0021628
c000ac2b:	e8 d7 68 00 00       	call   c0011507 <KePanic(char const*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	90                   	nop
c000ac34:	83 c4 0c             	add    esp,0xc
c000ac37:	c3                   	ret    

c000ac38 <__ubsan_handle_divrem_overflow>:
c000ac38:	83 ec 0c             	sub    esp,0xc
c000ac3b:	83 ec 08             	sub    esp,0x8
c000ac3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac42:	68 4c 16 02 c0       	push   0xc002164c
c000ac47:	e8 f4 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	83 ec 0c             	sub    esp,0xc
c000ac52:	68 4c 16 02 c0       	push   0xc002164c
c000ac57:	e8 ab 68 00 00       	call   c0011507 <KePanic(char const*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	90                   	nop
c000ac60:	83 c4 0c             	add    esp,0xc
c000ac63:	c3                   	ret    

c000ac64 <__ubsan_handle_mul_overflow>:
c000ac64:	83 ec 0c             	sub    esp,0xc
c000ac67:	83 ec 08             	sub    esp,0x8
c000ac6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac6e:	68 b1 14 02 c0       	push   0xc00214b1
c000ac73:	e8 c8 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac78:	83 c4 10             	add    esp,0x10
c000ac7b:	83 ec 0c             	sub    esp,0xc
c000ac7e:	68 b1 14 02 c0       	push   0xc00214b1
c000ac83:	e8 7f 68 00 00       	call   c0011507 <KePanic(char const*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	90                   	nop
c000ac8c:	83 c4 0c             	add    esp,0xc
c000ac8f:	c3                   	ret    

c000ac90 <__ubsan_handle_sub_overflow>:
c000ac90:	83 ec 0c             	sub    esp,0xc
c000ac93:	83 ec 08             	sub    esp,0x8
c000ac96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac9a:	68 cd 14 02 c0       	push   0xc00214cd
c000ac9f:	e8 9c fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aca4:	83 c4 10             	add    esp,0x10
c000aca7:	83 ec 0c             	sub    esp,0xc
c000acaa:	68 cd 14 02 c0       	push   0xc00214cd
c000acaf:	e8 53 68 00 00       	call   c0011507 <KePanic(char const*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	90                   	nop
c000acb8:	83 c4 0c             	add    esp,0xc
c000acbb:	c3                   	ret    

c000acbc <__ubsan_handle_shift_out_of_bounds>:
c000acbc:	83 ec 0c             	sub    esp,0xc
c000acbf:	83 ec 08             	sub    esp,0x8
c000acc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acc6:	68 6c 16 02 c0       	push   0xc002166c
c000accb:	e8 70 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acd0:	83 c4 10             	add    esp,0x10
c000acd3:	83 ec 0c             	sub    esp,0xc
c000acd6:	68 6c 16 02 c0       	push   0xc002166c
c000acdb:	e8 27 68 00 00       	call   c0011507 <KePanic(char const*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	90                   	nop
c000ace4:	83 c4 0c             	add    esp,0xc
c000ace7:	c3                   	ret    

c000ace8 <__ubsan_handle_negate_overflow>:
c000ace8:	83 ec 0c             	sub    esp,0xc
c000aceb:	83 ec 08             	sub    esp,0x8
c000acee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acf2:	68 90 16 02 c0       	push   0xc0021690
c000acf7:	e8 44 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	68 90 16 02 c0       	push   0xc0021690
c000ad07:	e8 fb 67 00 00       	call   c0011507 <KePanic(char const*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	90                   	nop
c000ad10:	83 c4 0c             	add    esp,0xc
c000ad13:	c3                   	ret    

c000ad14 <KiIsHashInTable(unsigned short)>:
c000ad14:	0f b7 d0             	movzx  edx,ax
c000ad17:	83 e0 07             	and    eax,0x7
c000ad1a:	c1 fa 03             	sar    edx,0x3
c000ad1d:	88 c1                	mov    cl,al
c000ad1f:	0f b6 92 00 74 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8c00]
c000ad26:	d3 fa                	sar    edx,cl
c000ad28:	89 d0                	mov    eax,edx
c000ad2a:	83 e0 01             	and    eax,0x1
c000ad2d:	c3                   	ret    

c000ad2e <KiSetHashInTable(unsigned short, bool)>:
c000ad2e:	56                   	push   esi
c000ad2f:	53                   	push   ebx
c000ad30:	0f b7 d8             	movzx  ebx,ax
c000ad33:	c1 fb 03             	sar    ebx,0x3
c000ad36:	83 e0 07             	and    eax,0x7
c000ad39:	89 c1                	mov    ecx,eax
c000ad3b:	b8 01 00 00 00       	mov    eax,0x1
c000ad40:	0f b6 b3 00 74 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8c00]
c000ad47:	d3 e0                	shl    eax,cl
c000ad49:	84 d2                	test   dl,dl
c000ad4b:	74 04                	je     c000ad51 <KiSetHashInTable(unsigned short, bool)+0x23>
c000ad4d:	09 f0                	or     eax,esi
c000ad4f:	eb 04                	jmp    c000ad55 <KiSetHashInTable(unsigned short, bool)+0x27>
c000ad51:	f7 d0                	not    eax
c000ad53:	21 f0                	and    eax,esi
c000ad55:	88 83 00 74 02 c0    	mov    BYTE PTR [ebx-0x3ffd8c00],al
c000ad5b:	5b                   	pop    ebx
c000ad5c:	5e                   	pop    esi
c000ad5d:	c3                   	ret    

c000ad5e <KiFlushSymlinkChanges()>:
c000ad5e:	57                   	push   edi
c000ad5f:	56                   	push   esi
c000ad60:	53                   	push   ebx
c000ad61:	83 ec 1c             	sub    esp,0x1c
c000ad64:	68 14 01 00 00       	push   0x114
c000ad69:	e8 65 cd ff ff       	call   c0007ad3 <malloc>
c000ad6e:	83 c4 0c             	add    esp,0xc
c000ad71:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000ad77:	68 af 16 02 c0       	push   0xc00216af
c000ad7c:	50                   	push   eax
c000ad7d:	89 c3                	mov    ebx,eax
c000ad7f:	e8 3c 0d 00 00       	call   c000bac0 <File::File(char const*, Process*)>
c000ad84:	83 c4 10             	add    esp,0x10
c000ad87:	85 db                	test   ebx,ebx
c000ad89:	75 10                	jne    c000ad9b <KiFlushSymlinkChanges()+0x3d>
c000ad8b:	83 ec 0c             	sub    esp,0xc
c000ad8e:	68 cd 16 02 c0       	push   0xc00216cd
c000ad93:	e8 6f 67 00 00       	call   c0011507 <KePanic(char const*)>
c000ad98:	83 c4 10             	add    esp,0x10
c000ad9b:	50                   	push   eax
c000ad9c:	50                   	push   eax
c000ad9d:	6a 06                	push   0x6
c000ad9f:	53                   	push   ebx
c000ada0:	e8 39 0d 00 00       	call   c000bade <File::open(FileOpenMode)>
c000ada5:	83 c4 10             	add    esp,0x10
c000ada8:	85 c0                	test   eax,eax
c000adaa:	74 10                	je     c000adbc <KiFlushSymlinkChanges()+0x5e>
c000adac:	83 ec 0c             	sub    esp,0xc
c000adaf:	68 e7 16 02 c0       	push   0xc00216e7
c000adb4:	e8 4e 67 00 00       	call   c0011507 <KePanic(char const*)>
c000adb9:	83 c4 10             	add    esp,0x10
c000adbc:	31 f6                	xor    esi,esi
c000adbe:	39 35 c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,esi
c000adc4:	7e 70                	jle    c000ae36 <KiFlushSymlinkChanges()+0xd8>
c000adc6:	83 ec 0c             	sub    esp,0xc
c000adc9:	89 f0                	mov    eax,esi
c000adcb:	8b 13                	mov    edx,DWORD PTR [ebx]
c000adcd:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000add1:	c1 e0 08             	shl    eax,0x8
c000add4:	57                   	push   edi
c000add5:	05 00 70 02 c0       	add    eax,0xc0027000
c000adda:	50                   	push   eax
c000addb:	6a 00                	push   0x0
c000addd:	68 00 01 00 00       	push   0x100
c000ade2:	53                   	push   ebx
c000ade3:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ade6:	83 c4 20             	add    esp,0x20
c000ade9:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000adf1:	74 10                	je     c000ae03 <KiFlushSymlinkChanges()+0xa5>
c000adf3:	83 ec 0c             	sub    esp,0xc
c000adf6:	68 01 17 02 c0       	push   0xc0021701
c000adfb:	e8 07 67 00 00       	call   c0011507 <KePanic(char const*)>
c000ae00:	83 c4 10             	add    esp,0x10
c000ae03:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae05:	8d 14 f5 e0 6f 02 c0 	lea    edx,[esi*8-0x3ffd9020]
c000ae0c:	83 ec 0c             	sub    esp,0xc
c000ae0f:	57                   	push   edi
c000ae10:	52                   	push   edx
c000ae11:	6a 00                	push   0x0
c000ae13:	6a 08                	push   0x8
c000ae15:	53                   	push   ebx
c000ae16:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ae19:	83 c4 20             	add    esp,0x20
c000ae1c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000ae21:	74 10                	je     c000ae33 <KiFlushSymlinkChanges()+0xd5>
c000ae23:	83 ec 0c             	sub    esp,0xc
c000ae26:	68 1b 17 02 c0       	push   0xc002171b
c000ae2b:	e8 d7 66 00 00       	call   c0011507 <KePanic(char const*)>
c000ae30:	83 c4 10             	add    esp,0x10
c000ae33:	46                   	inc    esi
c000ae34:	eb 88                	jmp    c000adbe <KiFlushSymlinkChanges()+0x60>
c000ae36:	83 ec 0c             	sub    esp,0xc
c000ae39:	53                   	push   ebx
c000ae3a:	e8 fd 0c 00 00       	call   c000bb3c <File::close()>
c000ae3f:	83 c4 10             	add    esp,0x10
c000ae42:	85 db                	test   ebx,ebx
c000ae44:	74 0c                	je     c000ae52 <KiFlushSymlinkChanges()+0xf4>
c000ae46:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae48:	83 ec 0c             	sub    esp,0xc
c000ae4b:	53                   	push   ebx
c000ae4c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae4f:	83 c4 10             	add    esp,0x10
c000ae52:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000ae5c:	83 c4 10             	add    esp,0x10
c000ae5f:	5b                   	pop    ebx
c000ae60:	5e                   	pop    esi
c000ae61:	5f                   	pop    edi
c000ae62:	c3                   	ret    

c000ae63 <KiDeinitialiseSymlinks(void*)>:
c000ae63:	e9 f6 fe ff ff       	jmp    c000ad5e <KiFlushSymlinkChanges()>

c000ae68 <KiGetSymlinkHash(char const*)>:
c000ae68:	53                   	push   ebx
c000ae69:	89 c3                	mov    ebx,eax
c000ae6b:	83 ec 14             	sub    esp,0x14
c000ae6e:	50                   	push   eax
c000ae6f:	e8 0c 57 ff ff       	call   c0000580 <strlen>
c000ae74:	5a                   	pop    edx
c000ae75:	59                   	pop    ecx
c000ae76:	50                   	push   eax
c000ae77:	53                   	push   ebx
c000ae78:	e8 0c 60 00 00       	call   c0010e89 <KeCalculateCRC32(unsigned char*, int)>
c000ae7d:	83 c4 18             	add    esp,0x18
c000ae80:	5b                   	pop    ebx
c000ae81:	89 c2                	mov    edx,eax
c000ae83:	c1 ea 10             	shr    edx,0x10
c000ae86:	31 d0                	xor    eax,edx
c000ae88:	c3                   	ret    

c000ae89 <KiCreateSymlinkID()>:
c000ae89:	55                   	push   ebp
c000ae8a:	57                   	push   edi
c000ae8b:	56                   	push   esi
c000ae8c:	53                   	push   ebx
c000ae8d:	31 db                	xor    ebx,ebx
c000ae8f:	83 ec 1c             	sub    esp,0x1c
c000ae92:	e8 be 67 00 00       	call   c0011655 <KeRand()>
c000ae97:	8b 2d 00 94 02 c0    	mov    ebp,DWORD PTR ds:0xc0029400
c000ae9d:	31 d2                	xor    edx,edx
c000ae9f:	43                   	inc    ebx
c000aea0:	31 ff                	xor    edi,edi
c000aea2:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000aea5:	89 ee                	mov    esi,ebp
c000aea7:	89 0d 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,ecx
c000aead:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000aeb1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aeb5:	c1 e0 1b             	shl    eax,0x1b
c000aeb8:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000aebe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aec2:	75 10                	jne    c000aed4 <KiCreateSymlinkID()+0x4b>
c000aec4:	83 ec 0c             	sub    esp,0xc
c000aec7:	68 35 17 02 c0       	push   0xc0021735
c000aecc:	e8 36 66 00 00       	call   c0011507 <KePanic(char const*)>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000aed8:	75 06                	jne    c000aee0 <KiCreateSymlinkID()+0x57>
c000aeda:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000aede:	74 b2                	je     c000ae92 <KiCreateSymlinkID()+0x9>
c000aee0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000aee4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aee8:	83 c4 1c             	add    esp,0x1c
c000aeeb:	5b                   	pop    ebx
c000aeec:	31 f0                	xor    eax,esi
c000aeee:	5e                   	pop    esi
c000aeef:	31 fa                	xor    edx,edi
c000aef1:	5f                   	pop    edi
c000aef2:	5d                   	pop    ebp
c000aef3:	c3                   	ret    

c000aef4 <KeRegisterSymlink(char const*, unsigned long long)>:
c000aef4:	53                   	push   ebx
c000aef5:	83 ec 0c             	sub    esp,0xc
c000aef8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000aefc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af00:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af05:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000af09:	68 00 01 00 00       	push   0x100
c000af0e:	6a 00                	push   0x0
c000af10:	89 0c c5 e4 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd901c],ecx
c000af17:	89 14 c5 e0 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9020],edx
c000af1e:	c1 e0 08             	shl    eax,0x8
c000af21:	05 00 70 02 c0       	add    eax,0xc0027000
c000af26:	50                   	push   eax
c000af27:	e8 c4 55 ff ff       	call   c00004f0 <memset>
c000af2c:	58                   	pop    eax
c000af2d:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af32:	5a                   	pop    edx
c000af33:	c1 e0 08             	shl    eax,0x8
c000af36:	53                   	push   ebx
c000af37:	05 00 70 02 c0       	add    eax,0xc0027000
c000af3c:	50                   	push   eax
c000af3d:	e8 0e 57 ff ff       	call   c0000650 <strcpy>
c000af42:	89 d8                	mov    eax,ebx
c000af44:	e8 1f ff ff ff       	call   c000ae68 <KiGetSymlinkHash(char const*)>
c000af49:	ba 01 00 00 00       	mov    edx,0x1
c000af4e:	0f b7 c0             	movzx  eax,ax
c000af51:	e8 d8 fd ff ff       	call   c000ad2e <KiSetHashInTable(unsigned short, bool)>
c000af56:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af5b:	83 c4 10             	add    esp,0x10
c000af5e:	40                   	inc    eax
c000af5f:	a3 c0 6f 02 c0       	mov    ds:0xc0026fc0,eax
c000af64:	83 f8 03             	cmp    eax,0x3
c000af67:	7e 09                	jle    c000af72 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c000af69:	83 c4 08             	add    esp,0x8
c000af6c:	5b                   	pop    ebx
c000af6d:	e9 ec fd ff ff       	jmp    c000ad5e <KiFlushSymlinkChanges()>
c000af72:	83 c4 08             	add    esp,0x8
c000af75:	5b                   	pop    ebx
c000af76:	c3                   	ret    

c000af77 <KiIsSymlinkRegistered(char const*)>:
c000af77:	55                   	push   ebp
c000af78:	57                   	push   edi
c000af79:	56                   	push   esi
c000af7a:	53                   	push   ebx
c000af7b:	81 ec 1c 01 00 00    	sub    esp,0x11c
c000af81:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000af88:	89 f0                	mov    eax,esi
c000af8a:	e8 d9 fe ff ff       	call   c000ae68 <KiGetSymlinkHash(char const*)>
c000af8f:	0f b7 c0             	movzx  eax,ax
c000af92:	e8 7d fd ff ff       	call   c000ad14 <KiIsHashInTable(unsigned short)>
c000af97:	31 d2                	xor    edx,edx
c000af99:	88 c1                	mov    cl,al
c000af9b:	31 c0                	xor    eax,eax
c000af9d:	84 c9                	test   cl,cl
c000af9f:	0f 84 3d 01 00 00    	je     c000b0e2 <KiIsSymlinkRegistered(char const*)+0x16b>
c000afa5:	31 db                	xor    ebx,ebx
c000afa7:	39 1d c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,ebx
c000afad:	7e 30                	jle    c000afdf <KiIsSymlinkRegistered(char const*)+0x68>
c000afaf:	89 d8                	mov    eax,ebx
c000afb1:	c1 e0 08             	shl    eax,0x8
c000afb4:	57                   	push   edi
c000afb5:	05 00 70 02 c0       	add    eax,0xc0027000
c000afba:	57                   	push   edi
c000afbb:	50                   	push   eax
c000afbc:	56                   	push   esi
c000afbd:	e8 be 57 ff ff       	call   c0000780 <strcmp>
c000afc2:	83 c4 10             	add    esp,0x10
c000afc5:	85 c0                	test   eax,eax
c000afc7:	75 13                	jne    c000afdc <KiIsSymlinkRegistered(char const*)+0x65>
c000afc9:	8b 04 dd e0 6f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9020]
c000afd0:	8b 14 dd e4 6f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd901c]
c000afd7:	e9 06 01 00 00       	jmp    c000b0e2 <KiIsSymlinkRegistered(char const*)+0x16b>
c000afdc:	43                   	inc    ebx
c000afdd:	eb c8                	jmp    c000afa7 <KiIsSymlinkRegistered(char const*)+0x30>
c000afdf:	83 ec 0c             	sub    esp,0xc
c000afe2:	68 14 01 00 00       	push   0x114
c000afe7:	e8 e7 ca ff ff       	call   c0007ad3 <malloc>
c000afec:	83 c4 0c             	add    esp,0xc
c000afef:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000aff5:	68 af 16 02 c0       	push   0xc00216af
c000affa:	50                   	push   eax
c000affb:	89 c3                	mov    ebx,eax
c000affd:	e8 be 0a 00 00       	call   c000bac0 <File::File(char const*, Process*)>
c000b002:	83 c4 10             	add    esp,0x10
c000b005:	85 db                	test   ebx,ebx
c000b007:	75 12                	jne    c000b01b <KiIsSymlinkRegistered(char const*)+0xa4>
c000b009:	83 ec 0c             	sub    esp,0xc
c000b00c:	68 3e 17 02 c0       	push   0xc002173e
c000b011:	e8 f1 64 00 00       	call   c0011507 <KePanic(char const*)>
c000b016:	83 c4 10             	add    esp,0x10
c000b019:	eb 10                	jmp    c000b02b <KiIsSymlinkRegistered(char const*)+0xb4>
c000b01b:	83 ec 0c             	sub    esp,0xc
c000b01e:	53                   	push   ebx
c000b01f:	e8 7e 0d 00 00       	call   c000bda2 <File::exists()>
c000b024:	83 c4 10             	add    esp,0x10
c000b027:	84 c0                	test   al,al
c000b029:	74 de                	je     c000b009 <KiIsSymlinkRegistered(char const*)+0x92>
c000b02b:	51                   	push   ecx
c000b02c:	51                   	push   ecx
c000b02d:	6a 01                	push   0x1
c000b02f:	53                   	push   ebx
c000b030:	e8 a9 0a 00 00       	call   c000bade <File::open(FileOpenMode)>
c000b035:	83 c4 10             	add    esp,0x10
c000b038:	85 c0                	test   eax,eax
c000b03a:	74 10                	je     c000b04c <KiIsSymlinkRegistered(char const*)+0xd5>
c000b03c:	83 ec 0c             	sub    esp,0xc
c000b03f:	68 59 17 02 c0       	push   0xc0021759
c000b044:	e8 be 64 00 00       	call   c0011507 <KePanic(char const*)>
c000b049:	83 c4 10             	add    esp,0x10
c000b04c:	83 ec 0c             	sub    esp,0xc
c000b04f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b051:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000b055:	55                   	push   ebp
c000b056:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000b05a:	57                   	push   edi
c000b05b:	6a 00                	push   0x0
c000b05d:	68 00 01 00 00       	push   0x100
c000b062:	53                   	push   ebx
c000b063:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b066:	83 c4 20             	add    esp,0x20
c000b069:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b071:	75 57                	jne    c000b0ca <KiIsSymlinkRegistered(char const*)+0x153>
c000b073:	83 ec 0c             	sub    esp,0xc
c000b076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b078:	55                   	push   ebp
c000b079:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b07d:	52                   	push   edx
c000b07e:	6a 00                	push   0x0
c000b080:	6a 08                	push   0x8
c000b082:	53                   	push   ebx
c000b083:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b086:	83 c4 20             	add    esp,0x20
c000b089:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b08e:	75 3a                	jne    c000b0ca <KiIsSymlinkRegistered(char const*)+0x153>
c000b090:	52                   	push   edx
c000b091:	52                   	push   edx
c000b092:	57                   	push   edi
c000b093:	56                   	push   esi
c000b094:	e8 e7 56 ff ff       	call   c0000780 <strcmp>
c000b099:	83 c4 10             	add    esp,0x10
c000b09c:	85 c0                	test   eax,eax
c000b09e:	75 ac                	jne    c000b04c <KiIsSymlinkRegistered(char const*)+0xd5>
c000b0a0:	50                   	push   eax
c000b0a1:	50                   	push   eax
c000b0a2:	57                   	push   edi
c000b0a3:	68 74 17 02 c0       	push   0xc0021774
c000b0a8:	e8 5d f8 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b0ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0b0:	e8 87 0a 00 00       	call   c000bb3c <File::close()>
c000b0b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b0c1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b0c5:	83 c4 10             	add    esp,0x10
c000b0c8:	eb 18                	jmp    c000b0e2 <KiIsSymlinkRegistered(char const*)+0x16b>
c000b0ca:	83 ec 0c             	sub    esp,0xc
c000b0cd:	53                   	push   ebx
c000b0ce:	e8 69 0a 00 00       	call   c000bb3c <File::close()>
c000b0d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0db:	83 c4 10             	add    esp,0x10
c000b0de:	31 c0                	xor    eax,eax
c000b0e0:	31 d2                	xor    edx,edx
c000b0e2:	81 c4 1c 01 00 00    	add    esp,0x11c
c000b0e8:	5b                   	pop    ebx
c000b0e9:	5e                   	pop    esi
c000b0ea:	5f                   	pop    edi
c000b0eb:	5d                   	pop    ebp
c000b0ec:	c3                   	ret    

c000b0ed <KeDereferenceSymlink(char const*, char*)>:
c000b0ed:	55                   	push   ebp
c000b0ee:	57                   	push   edi
c000b0ef:	56                   	push   esi
c000b0f0:	53                   	push   ebx
c000b0f1:	83 ec 48             	sub    esp,0x48
c000b0f4:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c000b0f8:	56                   	push   esi
c000b0f9:	e8 79 fe ff ff       	call   c000af77 <KiIsSymlinkRegistered(char const*)>
c000b0fe:	83 c4 10             	add    esp,0x10
c000b101:	89 c7                	mov    edi,eax
c000b103:	89 d0                	mov    eax,edx
c000b105:	09 f8                	or     eax,edi
c000b107:	75 07                	jne    c000b110 <KeDereferenceSymlink(char const*, char*)+0x23>
c000b109:	31 c0                	xor    eax,eax
c000b10b:	e9 69 01 00 00       	jmp    c000b279 <KeDereferenceSymlink(char const*, char*)+0x18c>
c000b110:	83 ec 0c             	sub    esp,0xc
c000b113:	89 d5                	mov    ebp,edx
c000b115:	68 14 01 00 00       	push   0x114
c000b11a:	e8 b4 c9 ff ff       	call   c0007ad3 <malloc>
c000b11f:	83 c4 0c             	add    esp,0xc
c000b122:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b128:	56                   	push   esi
c000b129:	50                   	push   eax
c000b12a:	89 c3                	mov    ebx,eax
c000b12c:	e8 8f 09 00 00       	call   c000bac0 <File::File(char const*, Process*)>
c000b131:	83 c4 10             	add    esp,0x10
c000b134:	85 db                	test   ebx,ebx
c000b136:	0f 84 1f 01 00 00    	je     c000b25b <KeDereferenceSymlink(char const*, char*)+0x16e>
c000b13c:	52                   	push   edx
c000b13d:	52                   	push   edx
c000b13e:	6a 01                	push   0x1
c000b140:	53                   	push   ebx
c000b141:	e8 98 09 00 00       	call   c000bade <File::open(FileOpenMode)>
c000b146:	83 c4 10             	add    esp,0x10
c000b149:	85 c0                	test   eax,eax
c000b14b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b14d:	74 09                	je     c000b158 <KeDereferenceSymlink(char const*, char*)+0x6b>
c000b14f:	83 ec 0c             	sub    esp,0xc
c000b152:	53                   	push   ebx
c000b153:	e9 fd 00 00 00       	jmp    c000b255 <KeDereferenceSymlink(char const*, char*)+0x168>
c000b158:	83 ec 0c             	sub    esp,0xc
c000b15b:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b15f:	56                   	push   esi
c000b160:	8d 54 24 37          	lea    edx,[esp+0x37]
c000b164:	52                   	push   edx
c000b165:	6a 00                	push   0x0
c000b167:	6a 08                	push   0x8
c000b169:	53                   	push   ebx
c000b16a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b16d:	83 c4 20             	add    esp,0x20
c000b170:	85 c0                	test   eax,eax
c000b172:	0f 85 cf 00 00 00    	jne    c000b247 <KeDereferenceSymlink(char const*, char*)+0x15a>
c000b178:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b17d:	0f 85 c4 00 00 00    	jne    c000b247 <KeDereferenceSymlink(char const*, char*)+0x15a>
c000b183:	83 ec 0c             	sub    esp,0xc
c000b186:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b188:	56                   	push   esi
c000b189:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b18d:	52                   	push   edx
c000b18e:	6a 00                	push   0x0
c000b190:	6a 08                	push   0x8
c000b192:	53                   	push   ebx
c000b193:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b196:	83 c4 20             	add    esp,0x20
c000b199:	85 c0                	test   eax,eax
c000b19b:	0f 85 a6 00 00 00    	jne    c000b247 <KeDereferenceSymlink(char const*, char*)+0x15a>
c000b1a1:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b1a6:	0f 85 9b 00 00 00    	jne    c000b247 <KeDereferenceSymlink(char const*, char*)+0x15a>
c000b1ac:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b1b0:	0f 85 53 ff ff ff    	jne    c000b109 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b1b6:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b1ba:	0f 85 49 ff ff ff    	jne    c000b109 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b1c0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b1c8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b1d0:	50                   	push   eax
c000b1d1:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b1d5:	50                   	push   eax
c000b1d6:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b1da:	50                   	push   eax
c000b1db:	53                   	push   ebx
c000b1dc:	e8 ff 0b 00 00       	call   c000bde0 <File::stat(unsigned long long*, bool*)>
c000b1e1:	83 c4 10             	add    esp,0x10
c000b1e4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b1e9:	75 5c                	jne    c000b247 <KeDereferenceSymlink(char const*, char*)+0x15a>
c000b1eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b1ef:	31 c9                	xor    ecx,ecx
c000b1f1:	bf 0f 00 00 00       	mov    edi,0xf
c000b1f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b1fa:	39 c7                	cmp    edi,eax
c000b1fc:	89 cf                	mov    edi,ecx
c000b1fe:	19 d7                	sbb    edi,edx
c000b200:	73 45                	jae    c000b247 <KeDereferenceSymlink(char const*, char*)+0x15a>
c000b202:	83 c0 f0             	add    eax,0xfffffff0
c000b205:	bf ff 00 00 00       	mov    edi,0xff
c000b20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b20e:	83 d2 ff             	adc    edx,0xffffffff
c000b211:	39 c7                	cmp    edi,eax
c000b213:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b217:	19 d1                	sbb    ecx,edx
c000b219:	72 40                	jb     c000b25b <KeDereferenceSymlink(char const*, char*)+0x16e>
c000b21b:	83 ec 0c             	sub    esp,0xc
c000b21e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b220:	56                   	push   esi
c000b221:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b225:	52                   	push   edx
c000b226:	50                   	push   eax
c000b227:	53                   	push   ebx
c000b228:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b22b:	83 c4 20             	add    esp,0x20
c000b22e:	85 c0                	test   eax,eax
c000b230:	75 15                	jne    c000b247 <KeDereferenceSymlink(char const*, char*)+0x15a>
c000b232:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b236:	89 c7                	mov    edi,eax
c000b238:	c1 ff 1f             	sar    edi,0x1f
c000b23b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b23f:	75 06                	jne    c000b247 <KeDereferenceSymlink(char const*, char*)+0x15a>
c000b241:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b245:	74 19                	je     c000b260 <KeDereferenceSymlink(char const*, char*)+0x173>
c000b247:	83 ec 0c             	sub    esp,0xc
c000b24a:	53                   	push   ebx
c000b24b:	e8 ec 08 00 00       	call   c000bb3c <File::close()>
c000b250:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b252:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b255:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b258:	83 c4 10             	add    esp,0x10
c000b25b:	83 c8 ff             	or     eax,0xffffffff
c000b25e:	eb 19                	jmp    c000b279 <KeDereferenceSymlink(char const*, char*)+0x18c>
c000b260:	83 ec 0c             	sub    esp,0xc
c000b263:	53                   	push   ebx
c000b264:	e8 d3 08 00 00       	call   c000bb3c <File::close()>
c000b269:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b26b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b26e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b271:	83 c4 10             	add    esp,0x10
c000b274:	b8 01 00 00 00       	mov    eax,0x1
c000b279:	83 c4 3c             	add    esp,0x3c
c000b27c:	5b                   	pop    ebx
c000b27d:	5e                   	pop    esi
c000b27e:	5f                   	pop    edi
c000b27f:	5d                   	pop    ebp
c000b280:	c3                   	ret    

c000b281 <KeCreateSymlink(char const*, char const*)>:
c000b281:	55                   	push   ebp
c000b282:	57                   	push   edi
c000b283:	56                   	push   esi
c000b284:	53                   	push   ebx
c000b285:	83 ec 38             	sub    esp,0x38
c000b288:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b28c:	68 14 01 00 00       	push   0x114
c000b291:	e8 3d c8 ff ff       	call   c0007ad3 <malloc>
c000b296:	6a 00                	push   0x0
c000b298:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b29e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b2a2:	89 c3                	mov    ebx,eax
c000b2a4:	50                   	push   eax
c000b2a5:	e8 38 07 00 00       	call   c000b9e2 <File::File(char const*, Process*, bool)>
c000b2aa:	83 c4 20             	add    esp,0x20
c000b2ad:	85 db                	test   ebx,ebx
c000b2af:	b8 01 00 00 00       	mov    eax,0x1
c000b2b4:	0f 84 fb 00 00 00    	je     c000b3b5 <KeCreateSymlink(char const*, char const*)+0x134>
c000b2ba:	52                   	push   edx
c000b2bb:	52                   	push   edx
c000b2bc:	6a 12                	push   0x12
c000b2be:	53                   	push   ebx
c000b2bf:	e8 1a 08 00 00       	call   c000bade <File::open(FileOpenMode)>
c000b2c4:	83 c4 10             	add    esp,0x10
c000b2c7:	85 c0                	test   eax,eax
c000b2c9:	74 0b                	je     c000b2d6 <KeCreateSymlink(char const*, char const*)+0x55>
c000b2cb:	83 ec 0c             	sub    esp,0xc
c000b2ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2d0:	53                   	push   ebx
c000b2d1:	e9 d4 00 00 00       	jmp    c000b3aa <KeCreateSymlink(char const*, char const*)+0x129>
c000b2d6:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b2da:	be 8b 17 02 c0       	mov    esi,0xc002178b
c000b2df:	b9 09 00 00 00       	mov    ecx,0x9
c000b2e4:	fc                   	cld    
c000b2e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b2e7:	83 ec 0c             	sub    esp,0xc
c000b2ea:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b2ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2f0:	56                   	push   esi
c000b2f1:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b2f5:	52                   	push   edx
c000b2f6:	6a 00                	push   0x0
c000b2f8:	6a 08                	push   0x8
c000b2fa:	53                   	push   ebx
c000b2fb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b2fe:	83 c4 20             	add    esp,0x20
c000b301:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b306:	0f 85 90 00 00 00    	jne    c000b39c <KeCreateSymlink(char const*, char const*)+0x11b>
c000b30c:	85 c0                	test   eax,eax
c000b30e:	0f 85 88 00 00 00    	jne    c000b39c <KeCreateSymlink(char const*, char const*)+0x11b>
c000b314:	e8 70 fb ff ff       	call   c000ae89 <KiCreateSymlinkID()>
c000b319:	83 ec 0c             	sub    esp,0xc
c000b31c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b320:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b324:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b326:	56                   	push   esi
c000b327:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b32b:	52                   	push   edx
c000b32c:	6a 00                	push   0x0
c000b32e:	6a 08                	push   0x8
c000b330:	53                   	push   ebx
c000b331:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b334:	83 c4 20             	add    esp,0x20
c000b337:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b33c:	75 5e                	jne    c000b39c <KeCreateSymlink(char const*, char const*)+0x11b>
c000b33e:	85 c0                	test   eax,eax
c000b340:	75 5a                	jne    c000b39c <KeCreateSymlink(char const*, char const*)+0x11b>
c000b342:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b344:	83 ec 0c             	sub    esp,0xc
c000b347:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b34a:	55                   	push   ebp
c000b34b:	e8 30 52 ff ff       	call   c0000580 <strlen>
c000b350:	31 d2                	xor    edx,edx
c000b352:	89 34 24             	mov    DWORD PTR [esp],esi
c000b355:	55                   	push   ebp
c000b356:	52                   	push   edx
c000b357:	50                   	push   eax
c000b358:	53                   	push   ebx
c000b359:	ff d7                	call   edi
c000b35b:	83 c4 14             	add    esp,0x14
c000b35e:	55                   	push   ebp
c000b35f:	89 c6                	mov    esi,eax
c000b361:	e8 1a 52 ff ff       	call   c0000580 <strlen>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b36d:	75 2d                	jne    c000b39c <KeCreateSymlink(char const*, char const*)+0x11b>
c000b36f:	85 f6                	test   esi,esi
c000b371:	75 29                	jne    c000b39c <KeCreateSymlink(char const*, char const*)+0x11b>
c000b373:	50                   	push   eax
c000b374:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b378:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b37c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b380:	e8 6f fb ff ff       	call   c000aef4 <KeRegisterSymlink(char const*, unsigned long long)>
c000b385:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b388:	e8 af 07 00 00       	call   c000bb3c <File::close()>
c000b38d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b38f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b392:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b395:	83 c4 10             	add    esp,0x10
c000b398:	31 c0                	xor    eax,eax
c000b39a:	eb 19                	jmp    c000b3b5 <KeCreateSymlink(char const*, char const*)+0x134>
c000b39c:	83 ec 0c             	sub    esp,0xc
c000b39f:	53                   	push   ebx
c000b3a0:	e8 97 07 00 00       	call   c000bb3c <File::close()>
c000b3a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3aa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b3ad:	83 c4 10             	add    esp,0x10
c000b3b0:	b8 01 00 00 00       	mov    eax,0x1
c000b3b5:	83 c4 2c             	add    esp,0x2c
c000b3b8:	5b                   	pop    ebx
c000b3b9:	5e                   	pop    esi
c000b3ba:	5f                   	pop    edi
c000b3bb:	5d                   	pop    ebp
c000b3bc:	c3                   	ret    

c000b3bd <KeInitialiseSymlinks()>:
c000b3bd:	57                   	push   edi
c000b3be:	56                   	push   esi
c000b3bf:	53                   	push   ebx
c000b3c0:	81 ec 14 01 00 00    	sub    esp,0x114
c000b3c6:	68 00 20 00 00       	push   0x2000
c000b3cb:	6a 00                	push   0x0
c000b3cd:	68 00 74 02 c0       	push   0xc0027400
c000b3d2:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000b3dc:	e8 0f 51 ff ff       	call   c00004f0 <memset>
c000b3e1:	5f                   	pop    edi
c000b3e2:	58                   	pop    eax
c000b3e3:	6a 00                	push   0x0
c000b3e5:	68 63 ae 00 c0       	push   0xc000ae63
c000b3ea:	e8 07 59 00 00       	call   c0010cf6 <KeRegisterAtexit(void (*)(void*), void*)>
c000b3ef:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b3f6:	e8 d8 c6 ff ff       	call   c0007ad3 <malloc>
c000b3fb:	83 c4 0c             	add    esp,0xc
c000b3fe:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b404:	68 af 16 02 c0       	push   0xc00216af
c000b409:	50                   	push   eax
c000b40a:	89 c3                	mov    ebx,eax
c000b40c:	e8 af 06 00 00       	call   c000bac0 <File::File(char const*, Process*)>
c000b411:	83 c4 10             	add    esp,0x10
c000b414:	85 db                	test   ebx,ebx
c000b416:	75 10                	jne    c000b428 <KeInitialiseSymlinks()+0x6b>
c000b418:	83 ec 0c             	sub    esp,0xc
c000b41b:	68 94 17 02 c0       	push   0xc0021794
c000b420:	e8 e2 60 00 00       	call   c0011507 <KePanic(char const*)>
c000b425:	83 c4 10             	add    esp,0x10
c000b428:	83 ec 0c             	sub    esp,0xc
c000b42b:	53                   	push   ebx
c000b42c:	e8 71 09 00 00       	call   c000bda2 <File::exists()>
c000b431:	83 c4 10             	add    esp,0x10
c000b434:	84 c0                	test   al,al
c000b436:	75 3a                	jne    c000b472 <KeInitialiseSymlinks()+0xb5>
c000b438:	56                   	push   esi
c000b439:	56                   	push   esi
c000b43a:	6a 12                	push   0x12
c000b43c:	53                   	push   ebx
c000b43d:	e8 9c 06 00 00       	call   c000bade <File::open(FileOpenMode)>
c000b442:	83 c4 10             	add    esp,0x10
c000b445:	85 c0                	test   eax,eax
c000b447:	74 10                	je     c000b459 <KeInitialiseSymlinks()+0x9c>
c000b449:	83 ec 0c             	sub    esp,0xc
c000b44c:	68 b1 17 02 c0       	push   0xc00217b1
c000b451:	e8 b1 60 00 00       	call   c0011507 <KePanic(char const*)>
c000b456:	83 c4 10             	add    esp,0x10
c000b459:	83 ec 0c             	sub    esp,0xc
c000b45c:	53                   	push   ebx
c000b45d:	e8 da 06 00 00       	call   c000bb3c <File::close()>
c000b462:	83 c4 10             	add    esp,0x10
c000b465:	85 db                	test   ebx,ebx
c000b467:	0f 84 a5 00 00 00    	je     c000b512 <KeInitialiseSymlinks()+0x155>
c000b46d:	e9 94 00 00 00       	jmp    c000b506 <KeInitialiseSymlinks()+0x149>
c000b472:	51                   	push   ecx
c000b473:	51                   	push   ecx
c000b474:	6a 01                	push   0x1
c000b476:	53                   	push   ebx
c000b477:	e8 62 06 00 00       	call   c000bade <File::open(FileOpenMode)>
c000b47c:	83 c4 10             	add    esp,0x10
c000b47f:	85 c0                	test   eax,eax
c000b481:	74 10                	je     c000b493 <KeInitialiseSymlinks()+0xd6>
c000b483:	83 ec 0c             	sub    esp,0xc
c000b486:	68 ce 17 02 c0       	push   0xc00217ce
c000b48b:	e8 77 60 00 00       	call   c0011507 <KePanic(char const*)>
c000b490:	83 c4 10             	add    esp,0x10
c000b493:	83 ec 0c             	sub    esp,0xc
c000b496:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b498:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000b49c:	57                   	push   edi
c000b49d:	8d 74 24 20          	lea    esi,[esp+0x20]
c000b4a1:	56                   	push   esi
c000b4a2:	6a 00                	push   0x0
c000b4a4:	68 00 01 00 00       	push   0x100
c000b4a9:	53                   	push   ebx
c000b4aa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b4ad:	83 c4 20             	add    esp,0x20
c000b4b0:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b4b8:	75 40                	jne    c000b4fa <KeInitialiseSymlinks()+0x13d>
c000b4ba:	83 ec 0c             	sub    esp,0xc
c000b4bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4bf:	57                   	push   edi
c000b4c0:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b4c4:	52                   	push   edx
c000b4c5:	6a 00                	push   0x0
c000b4c7:	6a 08                	push   0x8
c000b4c9:	53                   	push   ebx
c000b4ca:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b4cd:	83 c4 20             	add    esp,0x20
c000b4d0:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b4d5:	75 23                	jne    c000b4fa <KeInitialiseSymlinks()+0x13d>
c000b4d7:	52                   	push   edx
c000b4d8:	52                   	push   edx
c000b4d9:	56                   	push   esi
c000b4da:	68 e9 17 02 c0       	push   0xc00217e9
c000b4df:	e8 26 f4 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b4e4:	89 f0                	mov    eax,esi
c000b4e6:	e8 7d f9 ff ff       	call   c000ae68 <KiGetSymlinkHash(char const*)>
c000b4eb:	ba 01 00 00 00       	mov    edx,0x1
c000b4f0:	0f b7 c0             	movzx  eax,ax
c000b4f3:	e8 36 f8 ff ff       	call   c000ad2e <KiSetHashInTable(unsigned short, bool)>
c000b4f8:	eb 96                	jmp    c000b490 <KeInitialiseSymlinks()+0xd3>
c000b4fa:	83 ec 0c             	sub    esp,0xc
c000b4fd:	53                   	push   ebx
c000b4fe:	e8 39 06 00 00       	call   c000bb3c <File::close()>
c000b503:	83 c4 10             	add    esp,0x10
c000b506:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b508:	83 ec 0c             	sub    esp,0xc
c000b50b:	53                   	push   ebx
c000b50c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b50f:	83 c4 10             	add    esp,0x10
c000b512:	50                   	push   eax
c000b513:	50                   	push   eax
c000b514:	68 21 18 02 c0       	push   0xc0021821
c000b519:	68 2f 18 02 c0       	push   0xc002182f
c000b51e:	e8 5e fd ff ff       	call   c000b281 <KeCreateSymlink(char const*, char const*)>
c000b523:	81 c4 20 01 00 00    	add    esp,0x120
c000b529:	5b                   	pop    ebx
c000b52a:	5e                   	pop    esi
c000b52b:	5f                   	pop    edi
c000b52c:	c3                   	ret    
c000b52d:	90                   	nop

c000b52e <File::read(unsigned long long, void*, int*)>:
c000b52e:	53                   	push   ebx
c000b52f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b533:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b537:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b53e:	83 f8 19             	cmp    eax,0x19
c000b541:	77 35                	ja     c000b578 <File::read(unsigned long long, void*, int*)+0x4a>
c000b543:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b54a:	85 c0                	test   eax,eax
c000b54c:	74 2a                	je     c000b578 <File::read(unsigned long long, void*, int*)+0x4a>
c000b54e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b554:	85 c0                	test   eax,eax
c000b556:	74 20                	je     c000b578 <File::read(unsigned long long, void*, int*)+0x4a>
c000b558:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b55c:	74 21                	je     c000b57f <File::read(unsigned long long, void*, int*)+0x51>
c000b55e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b560:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b564:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b56a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b56e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b572:	5b                   	pop    ebx
c000b573:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b576:	ff e0                	jmp    eax
c000b578:	b8 0b 00 00 00       	mov    eax,0xb
c000b57d:	eb 05                	jmp    c000b584 <File::read(unsigned long long, void*, int*)+0x56>
c000b57f:	b8 05 00 00 00       	mov    eax,0x5
c000b584:	5b                   	pop    ebx
c000b585:	c3                   	ret    

c000b586 <File::write(unsigned long long, void*, int*)>:
c000b586:	53                   	push   ebx
c000b587:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b58b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b58f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b596:	83 f8 19             	cmp    eax,0x19
c000b599:	77 35                	ja     c000b5d0 <File::write(unsigned long long, void*, int*)+0x4a>
c000b59b:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b5a2:	85 c0                	test   eax,eax
c000b5a4:	74 2a                	je     c000b5d0 <File::write(unsigned long long, void*, int*)+0x4a>
c000b5a6:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b5ac:	85 c0                	test   eax,eax
c000b5ae:	74 20                	je     c000b5d0 <File::write(unsigned long long, void*, int*)+0x4a>
c000b5b0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5b4:	74 21                	je     c000b5d7 <File::write(unsigned long long, void*, int*)+0x51>
c000b5b6:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b5b8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b5bc:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b5c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5ca:	5b                   	pop    ebx
c000b5cb:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b5ce:	ff e0                	jmp    eax
c000b5d0:	b8 0b 00 00 00       	mov    eax,0xb
c000b5d5:	eb 05                	jmp    c000b5dc <File::write(unsigned long long, void*, int*)+0x56>
c000b5d7:	b8 05 00 00 00       	mov    eax,0x5
c000b5dc:	5b                   	pop    ebx
c000b5dd:	c3                   	ret    

c000b5de <Directory::read(unsigned long long, void*, int*)>:
c000b5de:	53                   	push   ebx
c000b5df:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b5e3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b5e7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b5ee:	83 f8 19             	cmp    eax,0x19
c000b5f1:	77 35                	ja     c000b628 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b5f3:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b5fa:	85 c0                	test   eax,eax
c000b5fc:	74 2a                	je     c000b628 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b5fe:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b604:	85 c0                	test   eax,eax
c000b606:	74 20                	je     c000b628 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b608:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b60c:	74 21                	je     c000b62f <Directory::read(unsigned long long, void*, int*)+0x51>
c000b60e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b610:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b614:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b61a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b622:	5b                   	pop    ebx
c000b623:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b626:	ff e0                	jmp    eax
c000b628:	b8 0b 00 00 00       	mov    eax,0xb
c000b62d:	eb 05                	jmp    c000b634 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b62f:	b8 05 00 00 00       	mov    eax,0x5
c000b634:	5b                   	pop    ebx
c000b635:	c3                   	ret    

c000b636 <Directory::write(unsigned long long, void*, int*)>:
c000b636:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b63a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b641:	b8 0b 00 00 00       	mov    eax,0xb
c000b646:	83 fa 19             	cmp    edx,0x19
c000b649:	77 18                	ja     c000b663 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b64b:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000b652:	85 d2                	test   edx,edx
c000b654:	74 0d                	je     c000b663 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b656:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b65d:	19 c0                	sbb    eax,eax
c000b65f:	83 e0 0a             	and    eax,0xa
c000b662:	40                   	inc    eax
c000b663:	c3                   	ret    

c000b664 <File::isAtty()>:
c000b664:	31 c0                	xor    eax,eax
c000b666:	c3                   	ret    
c000b667:	90                   	nop

c000b668 <Directory::isAtty()>:
c000b668:	31 c0                	xor    eax,eax
c000b66a:	c3                   	ret    
c000b66b:	90                   	nop

c000b66c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b66c:	b8 0a 00 00 00       	mov    eax,0xa
c000b671:	c3                   	ret    

c000b672 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b672:	b8 0a 00 00 00       	mov    eax,0xa
c000b677:	c3                   	ret    

c000b678 <Filesystem::allocateSwapfile(char const*, int)>:
c000b678:	31 c0                	xor    eax,eax
c000b67a:	31 d2                	xor    edx,edx
c000b67c:	c3                   	ret    
c000b67d:	90                   	nop

c000b67e <File::~File()>:
c000b67e:	83 ec 0c             	sub    esp,0xc
c000b681:	ba e8 18 02 c0       	mov    edx,0xc00218e8
c000b686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b68a:	89 10                	mov    DWORD PTR [eax],edx
c000b68c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b690:	83 ec 0c             	sub    esp,0xc
c000b693:	50                   	push   eax
c000b694:	e8 f3 dc ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b699:	83 c4 10             	add    esp,0x10
c000b69c:	90                   	nop
c000b69d:	83 c4 0c             	add    esp,0xc
c000b6a0:	c3                   	ret    
c000b6a1:	90                   	nop

c000b6a2 <File::~File()>:
c000b6a2:	83 ec 0c             	sub    esp,0xc
c000b6a5:	83 ec 0c             	sub    esp,0xc
c000b6a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6ac:	e8 cd ff ff ff       	call   c000b67e <File::~File()>
c000b6b1:	83 c4 10             	add    esp,0x10
c000b6b4:	83 ec 08             	sub    esp,0x8
c000b6b7:	68 14 01 00 00       	push   0x114
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	e8 47 f1 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b6c5:	83 c4 10             	add    esp,0x10
c000b6c8:	83 c4 0c             	add    esp,0xc
c000b6cb:	c3                   	ret    

c000b6cc <Directory::~Directory()>:
c000b6cc:	83 ec 0c             	sub    esp,0xc
c000b6cf:	ba 04 19 02 c0       	mov    edx,0xc0021904
c000b6d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6d8:	89 10                	mov    DWORD PTR [eax],edx
c000b6da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6de:	83 ec 0c             	sub    esp,0xc
c000b6e1:	50                   	push   eax
c000b6e2:	e8 a5 dc ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b6e7:	83 c4 10             	add    esp,0x10
c000b6ea:	90                   	nop
c000b6eb:	83 c4 0c             	add    esp,0xc
c000b6ee:	c3                   	ret    
c000b6ef:	90                   	nop

c000b6f0 <Directory::~Directory()>:
c000b6f0:	83 ec 0c             	sub    esp,0xc
c000b6f3:	83 ec 0c             	sub    esp,0xc
c000b6f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6fa:	e8 cd ff ff ff       	call   c000b6cc <Directory::~Directory()>
c000b6ff:	83 c4 10             	add    esp,0x10
c000b702:	83 ec 08             	sub    esp,0x8
c000b705:	68 14 01 00 00       	push   0x114
c000b70a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b70e:	e8 f9 f0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b713:	83 c4 10             	add    esp,0x10
c000b716:	83 c4 0c             	add    esp,0xc
c000b719:	c3                   	ret    

c000b71a <Filesystem::Filesystem()>:
c000b71a:	ba 7c 18 02 c0       	mov    edx,0xc002187c
c000b71f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b723:	89 10                	mov    DWORD PTR [eax],edx
c000b725:	8b 15 04 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029404
c000b72b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b72f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b736:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000b73b:	90                   	nop
c000b73c:	c3                   	ret    
c000b73d:	90                   	nop

c000b73e <Filesystem::~Filesystem()>:
c000b73e:	ba 7c 18 02 c0       	mov    edx,0xc002187c
c000b743:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b747:	89 10                	mov    DWORD PTR [eax],edx
c000b749:	90                   	nop
c000b74a:	c3                   	ret    
c000b74b:	90                   	nop

c000b74c <Filesystem::~Filesystem()>:
c000b74c:	83 ec 0c             	sub    esp,0xc
c000b74f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b753:	e8 e6 ff ff ff       	call   c000b73e <Filesystem::~Filesystem()>
c000b758:	83 c4 04             	add    esp,0x4
c000b75b:	83 ec 08             	sub    esp,0x8
c000b75e:	6a 08                	push   0x8
c000b760:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b764:	e8 a3 f0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b769:	83 c4 10             	add    esp,0x10
c000b76c:	83 c4 0c             	add    esp,0xc
c000b76f:	c3                   	ret    

c000b770 <Fs::getcwd(Process*, char*, int)>:
c000b770:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b774:	31 c0                	xor    eax,eax
c000b776:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b77a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b77d:	7d 15                	jge    c000b794 <Fs::getcwd(Process*, char*, int)+0x24>
c000b77f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b783:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b78a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b78d:	84 c9                	test   cl,cl
c000b78f:	74 06                	je     c000b797 <Fs::getcwd(Process*, char*, int)+0x27>
c000b791:	40                   	inc    eax
c000b792:	eb e2                	jmp    c000b776 <Fs::getcwd(Process*, char*, int)+0x6>
c000b794:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b797:	31 c0                	xor    eax,eax
c000b799:	c3                   	ret    

c000b79a <Fs::initVFS()>:
c000b79a:	83 ec 18             	sub    esp,0x18
c000b79d:	6a 08                	push   0x8
c000b79f:	e8 2f c3 ff ff       	call   c0007ad3 <malloc>
c000b7a4:	89 04 24             	mov    DWORD PTR [esp],eax
c000b7a7:	e8 98 e3 00 00       	call   c0019b44 <FAT::FAT()>
c000b7ac:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b7b3:	e8 1b c3 ff ff       	call   c0007ad3 <malloc>
c000b7b8:	89 04 24             	mov    DWORD PTR [esp],eax
c000b7bb:	e8 b2 f2 00 00       	call   c001aa72 <ISO9660::ISO9660()>
c000b7c0:	83 c4 1c             	add    esp,0x1c
c000b7c3:	c3                   	ret    

c000b7c4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b7c4:	55                   	push   ebp
c000b7c5:	57                   	push   edi
c000b7c6:	56                   	push   esi
c000b7c7:	53                   	push   ebx
c000b7c8:	81 ec 20 04 00 00    	sub    esp,0x420
c000b7ce:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c000b7d5:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c000b7dc:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000b7e3:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000b7ea:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b7ee:	68 00 04 00 00       	push   0x400
c000b7f3:	6a 00                	push   0x0
c000b7f5:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000b7f9:	57                   	push   edi
c000b7fa:	e8 f1 4c ff ff       	call   c00004f0 <memset>
c000b7ff:	83 c4 10             	add    esp,0x10
c000b802:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c000b806:	75 0b                	jne    c000b813 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c000b808:	50                   	push   eax
c000b809:	50                   	push   eax
c000b80a:	56                   	push   esi
c000b80b:	57                   	push   edi
c000b80c:	e8 3f 4e ff ff       	call   c0000650 <strcpy>
c000b811:	eb 45                	jmp    c000b858 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c000b813:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000b816:	83 f8 2f             	cmp    eax,0x2f
c000b819:	74 05                	je     c000b820 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c000b81b:	83 f8 5c             	cmp    eax,0x5c
c000b81e:	75 19                	jne    c000b839 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c000b820:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b823:	3c 60                	cmp    al,0x60
c000b825:	7e 03                	jle    c000b82a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c000b827:	83 e8 20             	sub    eax,0x20
c000b82a:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b82e:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b835:	50                   	push   eax
c000b836:	50                   	push   eax
c000b837:	eb 18                	jmp    c000b851 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c000b839:	50                   	push   eax
c000b83a:	50                   	push   eax
c000b83b:	55                   	push   ebp
c000b83c:	57                   	push   edi
c000b83d:	e8 0e 4e ff ff       	call   c0000650 <strcpy>
c000b842:	58                   	pop    eax
c000b843:	5a                   	pop    edx
c000b844:	68 23 28 02 c0       	push   0xc0022823
c000b849:	57                   	push   edi
c000b84a:	e8 21 50 ff ff       	call   c0000870 <strcat>
c000b84f:	59                   	pop    ecx
c000b850:	5d                   	pop    ebp
c000b851:	56                   	push   esi
c000b852:	57                   	push   edi
c000b853:	e8 18 50 ff ff       	call   c0000870 <strcat>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000b85f:	3c 60                	cmp    al,0x60
c000b861:	7e 03                	jle    c000b866 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c000b863:	83 e8 20             	sub    eax,0x20
c000b866:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b86a:	be 03 00 00 00       	mov    esi,0x3
c000b86f:	88 03                	mov    BYTE PTR [ebx],al
c000b871:	b8 03 00 00 00       	mov    eax,0x3
c000b876:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b87d:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b883:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b887:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c000b88c:	89 fa                	mov    edx,edi
c000b88e:	0f be ea             	movsx  ebp,dl
c000b891:	85 ed                	test   ebp,ebp
c000b893:	0f 84 a1 00 00 00    	je     c000b93a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c000b899:	8d 56 01             	lea    edx,[esi+0x1]
c000b89c:	83 fd 2f             	cmp    ebp,0x2f
c000b89f:	74 05                	je     c000b8a6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c000b8a1:	83 fd 5c             	cmp    ebp,0x5c
c000b8a4:	75 12                	jne    c000b8b8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b8a6:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b8ab:	89 c5                	mov    ebp,eax
c000b8ad:	74 09                	je     c000b8b8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b8af:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b8b3:	40                   	inc    eax
c000b8b4:	89 d6                	mov    esi,edx
c000b8b6:	eb cf                	jmp    c000b887 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b8b8:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c000b8bd:	89 f9                	mov    ecx,edi
c000b8bf:	0f be e9             	movsx  ebp,cl
c000b8c2:	75 61                	jne    c000b925 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b8c4:	83 fd 2e             	cmp    ebp,0x2e
c000b8c7:	75 5c                	jne    c000b925 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b8c9:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000b8ce:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c000b8d3:	74 19                	je     c000b8ee <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c000b8d5:	83 fd 2e             	cmp    ebp,0x2e
c000b8d8:	74 55                	je     c000b92f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b8da:	89 f2                	mov    edx,esi
c000b8dc:	42                   	inc    edx
c000b8dd:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b8e2:	83 f9 2f             	cmp    ecx,0x2f
c000b8e5:	74 f5                	je     c000b8dc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b8e7:	83 f9 5c             	cmp    ecx,0x5c
c000b8ea:	74 f0                	je     c000b8dc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b8ec:	eb c6                	jmp    c000b8b4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b8ee:	83 fd 2e             	cmp    ebp,0x2e
c000b8f1:	74 3c                	je     c000b92f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b8f3:	83 f8 03             	cmp    eax,0x3
c000b8f6:	74 bc                	je     c000b8b4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b8f8:	42                   	inc    edx
c000b8f9:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b8fe:	83 f9 2f             	cmp    ecx,0x2f
c000b901:	74 f5                	je     c000b8f8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b903:	83 f9 5c             	cmp    ecx,0x5c
c000b906:	74 f0                	je     c000b8f8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b908:	48                   	dec    eax
c000b909:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b90d:	75 06                	jne    c000b915 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b90f:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b913:	eb f3                	jmp    c000b908 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c000b915:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b919:	74 07                	je     c000b922 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c000b91b:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b91f:	48                   	dec    eax
c000b920:	eb f3                	jmp    c000b915 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b922:	40                   	inc    eax
c000b923:	eb 8f                	jmp    c000b8b4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b925:	83 fd 2f             	cmp    ebp,0x2f
c000b928:	74 8a                	je     c000b8b4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b92a:	83 fd 5c             	cmp    ebp,0x5c
c000b92d:	74 85                	je     c000b8b4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b92f:	89 f9                	mov    ecx,edi
c000b931:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000b934:	40                   	inc    eax
c000b935:	e9 7a ff ff ff       	jmp    c000b8b4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b93a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b93e:	83 ec 0c             	sub    esp,0xc
c000b941:	53                   	push   ebx
c000b942:	e8 39 4c ff ff       	call   c0000580 <strlen>
c000b947:	83 c4 10             	add    esp,0x10
c000b94a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b94f:	74 1c                	je     c000b96d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000b951:	83 ec 0c             	sub    esp,0xc
c000b954:	53                   	push   ebx
c000b955:	e8 26 4c ff ff       	call   c0000580 <strlen>
c000b95a:	83 c4 10             	add    esp,0x10
c000b95d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b962:	74 09                	je     c000b96d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000b964:	31 ff                	xor    edi,edi
c000b966:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c000b96b:	eb 4c                	jmp    c000b9b9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f5>
c000b96d:	83 ec 0c             	sub    esp,0xc
c000b970:	53                   	push   ebx
c000b971:	e8 0a 4c ff ff       	call   c0000580 <strlen>
c000b976:	83 c4 10             	add    esp,0x10
c000b979:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b97e:	74 e4                	je     c000b964 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c000b980:	83 ec 0c             	sub    esp,0xc
c000b983:	53                   	push   ebx
c000b984:	e8 f7 4b ff ff       	call   c0000580 <strlen>
c000b989:	83 c4 10             	add    esp,0x10
c000b98c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b991:	eb ab                	jmp    c000b93e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c000b993:	50                   	push   eax
c000b994:	50                   	push   eax
c000b995:	53                   	push   ebx
c000b996:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000b99a:	55                   	push   ebp
c000b99b:	e8 b0 4c ff ff       	call   c0000650 <strcpy>
c000b9a0:	5a                   	pop    edx
c000b9a1:	59                   	pop    ecx
c000b9a2:	53                   	push   ebx
c000b9a3:	55                   	push   ebp
c000b9a4:	e8 44 f7 ff ff       	call   c000b0ed <KeDereferenceSymlink(char const*, char*)>
c000b9a9:	83 c4 10             	add    esp,0x10
c000b9ac:	48                   	dec    eax
c000b9ad:	75 27                	jne    c000b9d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x212>
c000b9af:	8d 47 01             	lea    eax,[edi+0x1]
c000b9b2:	83 ff 14             	cmp    edi,0x14
c000b9b5:	74 08                	je     c000b9bf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1fb>
c000b9b7:	89 c7                	mov    edi,eax
c000b9b9:	85 f6                	test   esi,esi
c000b9bb:	75 d6                	jne    c000b993 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c000b9bd:	eb 17                	jmp    c000b9d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x212>
c000b9bf:	83 ec 0c             	sub    esp,0xc
c000b9c2:	bf 15 00 00 00       	mov    edi,0x15
c000b9c7:	68 4d 18 02 c0       	push   0xc002184d
c000b9cc:	e8 36 5b 00 00       	call   c0011507 <KePanic(char const*)>
c000b9d1:	83 c4 10             	add    esp,0x10
c000b9d4:	eb e3                	jmp    c000b9b9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f5>
c000b9d6:	81 c4 1c 04 00 00    	add    esp,0x41c
c000b9dc:	5b                   	pop    ebx
c000b9dd:	5e                   	pop    esi
c000b9de:	5f                   	pop    edi
c000b9df:	5d                   	pop    ebp
c000b9e0:	c3                   	ret    
c000b9e1:	90                   	nop

c000b9e2 <File::File(char const*, Process*, bool)>:
c000b9e2:	83 ec 1c             	sub    esp,0x1c
c000b9e5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9e9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b9ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9f1:	83 ec 08             	sub    esp,0x8
c000b9f4:	6a 00                	push   0x0
c000b9f6:	50                   	push   eax
c000b9f7:	e8 aa d7 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000b9fc:	83 c4 10             	add    esp,0x10
c000b9ff:	ba e8 18 02 c0       	mov    edx,0xc00218e8
c000ba04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba08:	89 10                	mov    DWORD PTR [eax],edx
c000ba0a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ba0f:	85 c0                	test   eax,eax
c000ba11:	74 0f                	je     c000ba22 <File::File(char const*, Process*, bool)+0x40>
c000ba13:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000ba18:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000ba1c:	74 04                	je     c000ba22 <File::File(char const*, Process*, bool)+0x40>
c000ba1e:	b0 01                	mov    al,0x1
c000ba20:	eb 02                	jmp    c000ba24 <File::File(char const*, Process*, bool)+0x42>
c000ba22:	b0 00                	mov    al,0x0
c000ba24:	0f b6 c0             	movzx  eax,al
c000ba27:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ba2b:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000ba31:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ba35:	83 c2 0d             	add    edx,0xd
c000ba38:	50                   	push   eax
c000ba39:	51                   	push   ecx
c000ba3a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ba3e:	52                   	push   edx
c000ba3f:	e8 80 fd ff ff       	call   c000b7c4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000ba44:	83 c4 10             	add    esp,0x10
c000ba47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba4b:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000ba4e:	83 e8 41             	sub    eax,0x41
c000ba51:	88 c2                	mov    dl,al
c000ba53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba57:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000ba5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba61:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000ba65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba69:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ba6f:	0f b6 c0             	movzx  eax,al
c000ba72:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000ba79:	85 c0                	test   eax,eax
c000ba7b:	74 3e                	je     c000babb <File::File(char const*, Process*, bool)+0xd9>
c000ba7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba81:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ba87:	0f b6 c0             	movzx  eax,al
c000ba8a:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000ba91:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ba97:	85 c0                	test   eax,eax
c000ba99:	75 20                	jne    c000babb <File::File(char const*, Process*, bool)+0xd9>
c000ba9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba9f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000baa5:	0f b6 c0             	movzx  eax,al
c000baa8:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000baaf:	83 ec 0c             	sub    esp,0xc
c000bab2:	50                   	push   eax
c000bab3:	e8 b0 21 00 00       	call   c000dc68 <LogicalDisk::mount()>
c000bab8:	83 c4 10             	add    esp,0x10
c000babb:	90                   	nop
c000babc:	83 c4 1c             	add    esp,0x1c
c000babf:	c3                   	ret    

c000bac0 <File::File(char const*, Process*)>:
c000bac0:	83 ec 0c             	sub    esp,0xc
c000bac3:	6a 01                	push   0x1
c000bac5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bacd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad1:	e8 0c ff ff ff       	call   c000b9e2 <File::File(char const*, Process*, bool)>
c000bad6:	83 c4 10             	add    esp,0x10
c000bad9:	90                   	nop
c000bada:	83 c4 0c             	add    esp,0xc
c000badd:	c3                   	ret    

c000bade <File::open(FileOpenMode)>:
c000bade:	53                   	push   ebx
c000badf:	b8 0b 00 00 00       	mov    eax,0xb
c000bae4:	83 ec 08             	sub    esp,0x8
c000bae7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000baeb:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000baf2:	83 fa 19             	cmp    edx,0x19
c000baf5:	77 40                	ja     c000bb37 <File::open(FileOpenMode)+0x59>
c000baf7:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bafe:	85 d2                	test   edx,edx
c000bb00:	74 35                	je     c000bb37 <File::open(FileOpenMode)+0x59>
c000bb02:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bb08:	85 d2                	test   edx,edx
c000bb0a:	74 2b                	je     c000bb37 <File::open(FileOpenMode)+0x59>
c000bb0c:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bb10:	b8 06 00 00 00       	mov    eax,0x6
c000bb15:	75 20                	jne    c000bb37 <File::open(FileOpenMode)+0x59>
c000bb17:	8b 02                	mov    eax,DWORD PTR [edx]
c000bb19:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bb1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb23:	51                   	push   ecx
c000bb24:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bb27:	51                   	push   ecx
c000bb28:	52                   	push   edx
c000bb29:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bb2c:	83 c4 10             	add    esp,0x10
c000bb2f:	85 c0                	test   eax,eax
c000bb31:	75 04                	jne    c000bb37 <File::open(FileOpenMode)+0x59>
c000bb33:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bb37:	83 c4 08             	add    esp,0x8
c000bb3a:	5b                   	pop    ebx
c000bb3b:	c3                   	ret    

c000bb3c <File::close()>:
c000bb3c:	53                   	push   ebx
c000bb3d:	b8 0b 00 00 00       	mov    eax,0xb
c000bb42:	83 ec 08             	sub    esp,0x8
c000bb45:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb49:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb50:	83 f9 19             	cmp    ecx,0x19
c000bb53:	77 41                	ja     c000bb96 <File::close()+0x5a>
c000bb55:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000bb5c:	85 db                	test   ebx,ebx
c000bb5e:	74 36                	je     c000bb96 <File::close()+0x5a>
c000bb60:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bb67:	74 2d                	je     c000bb96 <File::close()+0x5a>
c000bb69:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb6d:	b8 05 00 00 00       	mov    eax,0x5
c000bb72:	74 22                	je     c000bb96 <File::close()+0x5a>
c000bb74:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bb78:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000bb7f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bb85:	53                   	push   ebx
c000bb86:	53                   	push   ebx
c000bb87:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bb89:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bb8f:	50                   	push   eax
c000bb90:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000bb93:	83 c4 10             	add    esp,0x10
c000bb96:	83 c4 08             	add    esp,0x8
c000bb99:	5b                   	pop    ebx
c000bb9a:	c3                   	ret    
c000bb9b:	90                   	nop

c000bb9c <File::seek(unsigned long long)>:
c000bb9c:	56                   	push   esi
c000bb9d:	b8 0b 00 00 00       	mov    eax,0xb
c000bba2:	53                   	push   ebx
c000bba3:	51                   	push   ecx
c000bba4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bba8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bbac:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bbb0:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bbb7:	83 fa 19             	cmp    edx,0x19
c000bbba:	77 31                	ja     c000bbed <File::seek(unsigned long long)+0x51>
c000bbbc:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bbc3:	85 d2                	test   edx,edx
c000bbc5:	74 26                	je     c000bbed <File::seek(unsigned long long)+0x51>
c000bbc7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bbcd:	85 d2                	test   edx,edx
c000bbcf:	74 1c                	je     c000bbed <File::seek(unsigned long long)+0x51>
c000bbd1:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bbd5:	b8 05 00 00 00       	mov    eax,0x5
c000bbda:	74 11                	je     c000bbed <File::seek(unsigned long long)+0x51>
c000bbdc:	8b 02                	mov    eax,DWORD PTR [edx]
c000bbde:	53                   	push   ebx
c000bbdf:	51                   	push   ecx
c000bbe0:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bbe6:	52                   	push   edx
c000bbe7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bbea:	83 c4 10             	add    esp,0x10
c000bbed:	5a                   	pop    edx
c000bbee:	5b                   	pop    ebx
c000bbef:	5e                   	pop    esi
c000bbf0:	c3                   	ret    
c000bbf1:	90                   	nop

c000bbf2 <File::truncate(unsigned long long)>:
c000bbf2:	56                   	push   esi
c000bbf3:	b8 0b 00 00 00       	mov    eax,0xb
c000bbf8:	53                   	push   ebx
c000bbf9:	51                   	push   ecx
c000bbfa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bbfe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc02:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc06:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc0d:	83 fa 19             	cmp    edx,0x19
c000bc10:	77 31                	ja     c000bc43 <File::truncate(unsigned long long)+0x51>
c000bc12:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc19:	85 d2                	test   edx,edx
c000bc1b:	74 26                	je     c000bc43 <File::truncate(unsigned long long)+0x51>
c000bc1d:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc23:	85 d2                	test   edx,edx
c000bc25:	74 1c                	je     c000bc43 <File::truncate(unsigned long long)+0x51>
c000bc27:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bc2b:	b8 05 00 00 00       	mov    eax,0x5
c000bc30:	74 11                	je     c000bc43 <File::truncate(unsigned long long)+0x51>
c000bc32:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc34:	53                   	push   ebx
c000bc35:	51                   	push   ecx
c000bc36:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bc3c:	52                   	push   edx
c000bc3d:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000bc40:	83 c4 10             	add    esp,0x10
c000bc43:	5a                   	pop    edx
c000bc44:	5b                   	pop    ebx
c000bc45:	5e                   	pop    esi
c000bc46:	c3                   	ret    
c000bc47:	90                   	nop

c000bc48 <File::tell(unsigned long long*)>:
c000bc48:	83 ec 0c             	sub    esp,0xc
c000bc4b:	b8 0b 00 00 00       	mov    eax,0xb
c000bc50:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bc54:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bc5b:	83 fa 19             	cmp    edx,0x19
c000bc5e:	77 34                	ja     c000bc94 <File::tell(unsigned long long*)+0x4c>
c000bc60:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc67:	85 d2                	test   edx,edx
c000bc69:	74 29                	je     c000bc94 <File::tell(unsigned long long*)+0x4c>
c000bc6b:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc71:	85 d2                	test   edx,edx
c000bc73:	74 1f                	je     c000bc94 <File::tell(unsigned long long*)+0x4c>
c000bc75:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bc79:	b8 05 00 00 00       	mov    eax,0x5
c000bc7e:	74 14                	je     c000bc94 <File::tell(unsigned long long*)+0x4c>
c000bc80:	50                   	push   eax
c000bc81:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc83:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc87:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bc8d:	52                   	push   edx
c000bc8e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bc91:	83 c4 10             	add    esp,0x10
c000bc94:	83 c4 0c             	add    esp,0xc
c000bc97:	c3                   	ret    

c000bc98 <File::rewind()>:
c000bc98:	83 ec 10             	sub    esp,0x10
c000bc9b:	6a 00                	push   0x0
c000bc9d:	6a 00                	push   0x0
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	e8 f4 fe ff ff       	call   c000bb9c <File::seek(unsigned long long)>
c000bca8:	83 c4 1c             	add    esp,0x1c
c000bcab:	c3                   	ret    

c000bcac <File::unlink()>:
c000bcac:	83 ec 0c             	sub    esp,0xc
c000bcaf:	b8 0b 00 00 00       	mov    eax,0xb
c000bcb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bcb8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bcbf:	83 f9 19             	cmp    ecx,0x19
c000bcc2:	77 2f                	ja     c000bcf3 <File::unlink()+0x47>
c000bcc4:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bccb:	85 c9                	test   ecx,ecx
c000bccd:	74 24                	je     c000bcf3 <File::unlink()+0x47>
c000bccf:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bcd5:	85 c9                	test   ecx,ecx
c000bcd7:	74 1a                	je     c000bcf3 <File::unlink()+0x47>
c000bcd9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bcdd:	b8 06 00 00 00       	mov    eax,0x6
c000bce2:	75 0f                	jne    c000bcf3 <File::unlink()+0x47>
c000bce4:	50                   	push   eax
c000bce5:	83 c2 0d             	add    edx,0xd
c000bce8:	50                   	push   eax
c000bce9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bceb:	52                   	push   edx
c000bcec:	51                   	push   ecx
c000bced:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bcf0:	83 c4 10             	add    esp,0x10
c000bcf3:	83 c4 0c             	add    esp,0xc
c000bcf6:	c3                   	ret    
c000bcf7:	90                   	nop

c000bcf8 <File::rename(char const*)>:
c000bcf8:	83 ec 0c             	sub    esp,0xc
c000bcfb:	b8 0b 00 00 00       	mov    eax,0xb
c000bd00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd04:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd0b:	83 f9 19             	cmp    ecx,0x19
c000bd0e:	77 32                	ja     c000bd42 <File::rename(char const*)+0x4a>
c000bd10:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd17:	85 c9                	test   ecx,ecx
c000bd19:	74 27                	je     c000bd42 <File::rename(char const*)+0x4a>
c000bd1b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bd21:	85 c9                	test   ecx,ecx
c000bd23:	74 1d                	je     c000bd42 <File::rename(char const*)+0x4a>
c000bd25:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bd29:	b8 06 00 00 00       	mov    eax,0x6
c000bd2e:	75 12                	jne    c000bd42 <File::rename(char const*)+0x4a>
c000bd30:	50                   	push   eax
c000bd31:	83 c2 0d             	add    edx,0xd
c000bd34:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bd36:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd3a:	52                   	push   edx
c000bd3b:	51                   	push   ecx
c000bd3c:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bd3f:	83 c4 10             	add    esp,0x10
c000bd42:	83 c4 0c             	add    esp,0xc
c000bd45:	c3                   	ret    

c000bd46 <File::chfatattr(unsigned char, unsigned char)>:
c000bd46:	57                   	push   edi
c000bd47:	b8 0b 00 00 00       	mov    eax,0xb
c000bd4c:	56                   	push   esi
c000bd4d:	53                   	push   ebx
c000bd4e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd52:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bd56:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bd5a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd61:	83 f9 19             	cmp    ecx,0x19
c000bd64:	77 37                	ja     c000bd9d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bd66:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd6d:	85 c9                	test   ecx,ecx
c000bd6f:	74 2c                	je     c000bd9d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bd71:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bd77:	85 c9                	test   ecx,ecx
c000bd79:	74 22                	je     c000bd9d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bd7b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bd7f:	b8 06 00 00 00       	mov    eax,0x6
c000bd84:	75 17                	jne    c000bd9d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bd86:	89 f0                	mov    eax,esi
c000bd88:	8b 39                	mov    edi,DWORD PTR [ecx]
c000bd8a:	0f b6 db             	movzx  ebx,bl
c000bd8d:	0f b6 f0             	movzx  esi,al
c000bd90:	83 c2 0d             	add    edx,0xd
c000bd93:	56                   	push   esi
c000bd94:	53                   	push   ebx
c000bd95:	52                   	push   edx
c000bd96:	51                   	push   ecx
c000bd97:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000bd9a:	83 c4 10             	add    esp,0x10
c000bd9d:	5b                   	pop    ebx
c000bd9e:	5e                   	pop    esi
c000bd9f:	5f                   	pop    edi
c000bda0:	c3                   	ret    
c000bda1:	90                   	nop

c000bda2 <File::exists()>:
c000bda2:	83 ec 0c             	sub    esp,0xc
c000bda5:	31 c0                	xor    eax,eax
c000bda7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdab:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdb2:	83 f9 19             	cmp    ecx,0x19
c000bdb5:	77 24                	ja     c000bddb <File::exists()+0x39>
c000bdb7:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bdbe:	85 c9                	test   ecx,ecx
c000bdc0:	74 19                	je     c000bddb <File::exists()+0x39>
c000bdc2:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bdc8:	85 c9                	test   ecx,ecx
c000bdca:	74 0f                	je     c000bddb <File::exists()+0x39>
c000bdcc:	50                   	push   eax
c000bdcd:	83 c2 0d             	add    edx,0xd
c000bdd0:	50                   	push   eax
c000bdd1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bdd3:	52                   	push   edx
c000bdd4:	51                   	push   ecx
c000bdd5:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bdd8:	83 c4 10             	add    esp,0x10
c000bddb:	83 c4 0c             	add    esp,0xc
c000bdde:	c3                   	ret    
c000bddf:	90                   	nop

c000bde0 <File::stat(unsigned long long*, bool*)>:
c000bde0:	56                   	push   esi
c000bde1:	53                   	push   ebx
c000bde2:	50                   	push   eax
c000bde3:	b8 0b 00 00 00       	mov    eax,0xb
c000bde8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdec:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bdf0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bdf4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdfb:	83 f9 19             	cmp    ecx,0x19
c000bdfe:	77 3d                	ja     c000be3d <File::stat(unsigned long long*, bool*)+0x5d>
c000be00:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be07:	85 c9                	test   ecx,ecx
c000be09:	74 32                	je     c000be3d <File::stat(unsigned long long*, bool*)+0x5d>
c000be0b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be11:	85 c9                	test   ecx,ecx
c000be13:	74 28                	je     c000be3d <File::stat(unsigned long long*, bool*)+0x5d>
c000be15:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be19:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be1b:	74 13                	je     c000be30 <File::stat(unsigned long long*, bool*)+0x50>
c000be1d:	83 ec 04             	sub    esp,0x4
c000be20:	56                   	push   esi
c000be21:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000be27:	51                   	push   ecx
c000be28:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000be2b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000be2e:	eb 0a                	jmp    c000be3a <File::stat(unsigned long long*, bool*)+0x5a>
c000be30:	53                   	push   ebx
c000be31:	83 c2 0d             	add    edx,0xd
c000be34:	56                   	push   esi
c000be35:	52                   	push   edx
c000be36:	51                   	push   ecx
c000be37:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000be3a:	83 c4 10             	add    esp,0x10
c000be3d:	5a                   	pop    edx
c000be3e:	5b                   	pop    ebx
c000be3f:	5e                   	pop    esi
c000be40:	c3                   	ret    

c000be41 <Fs::setcwd(Process*, char*)>:
c000be41:	55                   	push   ebp
c000be42:	57                   	push   edi
c000be43:	56                   	push   esi
c000be44:	53                   	push   ebx
c000be45:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000be4b:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000be52:	6a 00                	push   0x0
c000be54:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000be5a:	57                   	push   edi
c000be5b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000be62:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000be66:	56                   	push   esi
c000be67:	e8 58 f9 ff ff       	call   c000b7c4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000be6c:	89 34 24             	mov    DWORD PTR [esp],esi
c000be6f:	e8 0c 47 ff ff       	call   c0000580 <strlen>
c000be74:	83 c4 10             	add    esp,0x10
c000be77:	83 f8 02             	cmp    eax,0x2
c000be7a:	77 15                	ja     c000be91 <Fs::setcwd(Process*, char*)+0x50>
c000be7c:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000be81:	83 eb 41             	sub    ebx,0x41
c000be84:	8b 04 9d 80 b8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4780]
c000be8b:	85 c0                	test   eax,eax
c000be8d:	75 1c                	jne    c000beab <Fs::setcwd(Process*, char*)+0x6a>
c000be8f:	eb 2f                	jmp    c000bec0 <Fs::setcwd(Process*, char*)+0x7f>
c000be91:	83 ec 0c             	sub    esp,0xc
c000be94:	56                   	push   esi
c000be95:	e8 e6 46 ff ff       	call   c0000580 <strlen>
c000be9a:	83 c4 10             	add    esp,0x10
c000be9d:	83 f8 03             	cmp    eax,0x3
c000bea0:	75 57                	jne    c000bef9 <Fs::setcwd(Process*, char*)+0xb8>
c000bea2:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bea7:	75 50                	jne    c000bef9 <Fs::setcwd(Process*, char*)+0xb8>
c000bea9:	eb d1                	jmp    c000be7c <Fs::setcwd(Process*, char*)+0x3b>
c000beab:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000beb2:	75 0c                	jne    c000bec0 <Fs::setcwd(Process*, char*)+0x7f>
c000beb4:	83 ec 0c             	sub    esp,0xc
c000beb7:	50                   	push   eax
c000beb8:	e8 ab 1d 00 00       	call   c000dc68 <LogicalDisk::mount()>
c000bebd:	83 c4 10             	add    esp,0x10
c000bec0:	83 fb 19             	cmp    ebx,0x19
c000bec3:	b8 03 00 00 00       	mov    eax,0x3
c000bec8:	0f 87 c6 00 00 00    	ja     c000bf94 <Fs::setcwd(Process*, char*)+0x153>
c000bece:	8b 14 9d 80 b8 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4780]
c000bed5:	b8 05 00 00 00       	mov    eax,0x5
c000beda:	85 d2                	test   edx,edx
c000bedc:	0f 84 b2 00 00 00    	je     c000bf94 <Fs::setcwd(Process*, char*)+0x153>
c000bee2:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bee9:	b8 06 00 00 00       	mov    eax,0x6
c000beee:	0f 85 92 00 00 00    	jne    c000bf86 <Fs::setcwd(Process*, char*)+0x145>
c000bef4:	e9 9b 00 00 00       	jmp    c000bf94 <Fs::setcwd(Process*, char*)+0x153>
c000bef9:	83 ec 0c             	sub    esp,0xc
c000befc:	68 14 01 00 00       	push   0x114
c000bf01:	e8 cd bb ff ff       	call   c0007ad3 <malloc>
c000bf06:	83 c4 0c             	add    esp,0xc
c000bf09:	55                   	push   ebp
c000bf0a:	56                   	push   esi
c000bf0b:	50                   	push   eax
c000bf0c:	89 c3                	mov    ebx,eax
c000bf0e:	e8 ad fb ff ff       	call   c000bac0 <File::File(char const*, Process*)>
c000bf13:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bf18:	83 c4 0c             	add    esp,0xc
c000bf1b:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bf1f:	50                   	push   eax
c000bf20:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bf24:	50                   	push   eax
c000bf25:	53                   	push   ebx
c000bf26:	e8 b5 fe ff ff       	call   c000bde0 <File::stat(unsigned long long*, bool*)>
c000bf2b:	83 c4 10             	add    esp,0x10
c000bf2e:	83 f8 02             	cmp    eax,0x2
c000bf31:	74 27                	je     c000bf5a <Fs::setcwd(Process*, char*)+0x119>
c000bf33:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bf38:	75 1c                	jne    c000bf56 <Fs::setcwd(Process*, char*)+0x115>
c000bf3a:	85 db                	test   ebx,ebx
c000bf3c:	b8 02 00 00 00       	mov    eax,0x2
c000bf41:	74 51                	je     c000bf94 <Fs::setcwd(Process*, char*)+0x153>
c000bf43:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf45:	83 ec 0c             	sub    esp,0xc
c000bf48:	53                   	push   ebx
c000bf49:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bf4c:	83 c4 10             	add    esp,0x10
c000bf4f:	b8 02 00 00 00       	mov    eax,0x2
c000bf54:	eb 3e                	jmp    c000bf94 <Fs::setcwd(Process*, char*)+0x153>
c000bf56:	85 c0                	test   eax,eax
c000bf58:	74 1c                	je     c000bf76 <Fs::setcwd(Process*, char*)+0x135>
c000bf5a:	85 db                	test   ebx,ebx
c000bf5c:	b8 01 00 00 00       	mov    eax,0x1
c000bf61:	74 31                	je     c000bf94 <Fs::setcwd(Process*, char*)+0x153>
c000bf63:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf65:	83 ec 0c             	sub    esp,0xc
c000bf68:	53                   	push   ebx
c000bf69:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bf6c:	83 c4 10             	add    esp,0x10
c000bf6f:	b8 01 00 00 00       	mov    eax,0x1
c000bf74:	eb 1e                	jmp    c000bf94 <Fs::setcwd(Process*, char*)+0x153>
c000bf76:	85 db                	test   ebx,ebx
c000bf78:	74 0c                	je     c000bf86 <Fs::setcwd(Process*, char*)+0x145>
c000bf7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf7c:	83 ec 0c             	sub    esp,0xc
c000bf7f:	53                   	push   ebx
c000bf80:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bf83:	83 c4 10             	add    esp,0x10
c000bf86:	50                   	push   eax
c000bf87:	50                   	push   eax
c000bf88:	56                   	push   esi
c000bf89:	57                   	push   edi
c000bf8a:	e8 c1 46 ff ff       	call   c0000650 <strcpy>
c000bf8f:	83 c4 10             	add    esp,0x10
c000bf92:	31 c0                	xor    eax,eax
c000bf94:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bf9a:	5b                   	pop    ebx
c000bf9b:	5e                   	pop    esi
c000bf9c:	5f                   	pop    edi
c000bf9d:	5d                   	pop    ebp
c000bf9e:	c3                   	ret    
c000bf9f:	90                   	nop

c000bfa0 <Directory::Directory(char const*, Process*)>:
c000bfa0:	83 ec 0c             	sub    esp,0xc
c000bfa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfa7:	83 ec 08             	sub    esp,0x8
c000bfaa:	6a 00                	push   0x0
c000bfac:	50                   	push   eax
c000bfad:	e8 f4 d1 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000bfb2:	83 c4 10             	add    esp,0x10
c000bfb5:	ba 04 19 02 c0       	mov    edx,0xc0021904
c000bfba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfbe:	89 10                	mov    DWORD PTR [eax],edx
c000bfc0:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000bfc5:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000bfc9:	0f 95 c0             	setne  al
c000bfcc:	0f b6 c0             	movzx  eax,al
c000bfcf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bfd3:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000bfd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfdd:	83 c2 0d             	add    edx,0xd
c000bfe0:	50                   	push   eax
c000bfe1:	51                   	push   ecx
c000bfe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfe6:	52                   	push   edx
c000bfe7:	e8 d8 f7 ff ff       	call   c000b7c4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bfec:	83 c4 10             	add    esp,0x10
c000bfef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bff3:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bff6:	83 e8 41             	sub    eax,0x41
c000bff9:	88 c2                	mov    dl,al
c000bffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfff:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000c005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c009:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000c00d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c011:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c017:	0f b6 c0             	movzx  eax,al
c000c01a:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c021:	85 c0                	test   eax,eax
c000c023:	74 3e                	je     c000c063 <Directory::Directory(char const*, Process*)+0xc3>
c000c025:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c029:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c02f:	0f b6 c0             	movzx  eax,al
c000c032:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c039:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c03f:	85 c0                	test   eax,eax
c000c041:	75 20                	jne    c000c063 <Directory::Directory(char const*, Process*)+0xc3>
c000c043:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c047:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c04d:	0f b6 c0             	movzx  eax,al
c000c050:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c057:	83 ec 0c             	sub    esp,0xc
c000c05a:	50                   	push   eax
c000c05b:	e8 08 1c 00 00       	call   c000dc68 <LogicalDisk::mount()>
c000c060:	83 c4 10             	add    esp,0x10
c000c063:	90                   	nop
c000c064:	83 c4 0c             	add    esp,0xc
c000c067:	c3                   	ret    

c000c068 <Directory::open()>:
c000c068:	53                   	push   ebx
c000c069:	b8 0b 00 00 00       	mov    eax,0xb
c000c06e:	83 ec 08             	sub    esp,0x8
c000c071:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c075:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000c07c:	83 fa 19             	cmp    edx,0x19
c000c07f:	77 3d                	ja     c000c0be <Directory::open()+0x56>
c000c081:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000c088:	85 d2                	test   edx,edx
c000c08a:	74 32                	je     c000c0be <Directory::open()+0x56>
c000c08c:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000c092:	85 d2                	test   edx,edx
c000c094:	74 28                	je     c000c0be <Directory::open()+0x56>
c000c096:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000c09a:	b8 06 00 00 00       	mov    eax,0x6
c000c09f:	75 1d                	jne    c000c0be <Directory::open()+0x56>
c000c0a1:	50                   	push   eax
c000c0a2:	8b 02                	mov    eax,DWORD PTR [edx]
c000c0a4:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000c0aa:	51                   	push   ecx
c000c0ab:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000c0ae:	51                   	push   ecx
c000c0af:	52                   	push   edx
c000c0b0:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000c0b3:	83 c4 10             	add    esp,0x10
c000c0b6:	85 c0                	test   eax,eax
c000c0b8:	75 04                	jne    c000c0be <Directory::open()+0x56>
c000c0ba:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000c0be:	83 c4 08             	add    esp,0x8
c000c0c1:	5b                   	pop    ebx
c000c0c2:	c3                   	ret    
c000c0c3:	90                   	nop

c000c0c4 <Directory::close()>:
c000c0c4:	53                   	push   ebx
c000c0c5:	b8 0b 00 00 00       	mov    eax,0xb
c000c0ca:	83 ec 08             	sub    esp,0x8
c000c0cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c0d1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c0d8:	83 f9 19             	cmp    ecx,0x19
c000c0db:	77 41                	ja     c000c11e <Directory::close()+0x5a>
c000c0dd:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000c0e4:	85 db                	test   ebx,ebx
c000c0e6:	74 36                	je     c000c11e <Directory::close()+0x5a>
c000c0e8:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000c0ef:	74 2d                	je     c000c11e <Directory::close()+0x5a>
c000c0f1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c0f5:	b8 05 00 00 00       	mov    eax,0x5
c000c0fa:	74 22                	je     c000c11e <Directory::close()+0x5a>
c000c0fc:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000c100:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000c107:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c10d:	53                   	push   ebx
c000c10e:	53                   	push   ebx
c000c10f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c111:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000c117:	50                   	push   eax
c000c118:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000c11b:	83 c4 10             	add    esp,0x10
c000c11e:	83 c4 08             	add    esp,0x8
c000c121:	5b                   	pop    ebx
c000c122:	c3                   	ret    
c000c123:	90                   	nop

c000c124 <Directory::unlink()>:
c000c124:	83 ec 0c             	sub    esp,0xc
c000c127:	b8 0b 00 00 00       	mov    eax,0xb
c000c12c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c130:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c137:	83 f9 19             	cmp    ecx,0x19
c000c13a:	77 2f                	ja     c000c16b <Directory::unlink()+0x47>
c000c13c:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c143:	85 c9                	test   ecx,ecx
c000c145:	74 24                	je     c000c16b <Directory::unlink()+0x47>
c000c147:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c14d:	85 c9                	test   ecx,ecx
c000c14f:	74 1a                	je     c000c16b <Directory::unlink()+0x47>
c000c151:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c155:	b8 06 00 00 00       	mov    eax,0x6
c000c15a:	75 0f                	jne    c000c16b <Directory::unlink()+0x47>
c000c15c:	50                   	push   eax
c000c15d:	83 c2 0d             	add    edx,0xd
c000c160:	50                   	push   eax
c000c161:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c163:	52                   	push   edx
c000c164:	51                   	push   ecx
c000c165:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000c168:	83 c4 10             	add    esp,0x10
c000c16b:	83 c4 0c             	add    esp,0xc
c000c16e:	c3                   	ret    
c000c16f:	90                   	nop

c000c170 <Directory::rename(char const*)>:
c000c170:	83 ec 0c             	sub    esp,0xc
c000c173:	b8 0b 00 00 00       	mov    eax,0xb
c000c178:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c17c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c183:	83 f9 19             	cmp    ecx,0x19
c000c186:	77 32                	ja     c000c1ba <Directory::rename(char const*)+0x4a>
c000c188:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c18f:	85 c9                	test   ecx,ecx
c000c191:	74 27                	je     c000c1ba <Directory::rename(char const*)+0x4a>
c000c193:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c199:	85 c9                	test   ecx,ecx
c000c19b:	74 1d                	je     c000c1ba <Directory::rename(char const*)+0x4a>
c000c19d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c1a1:	b8 06 00 00 00       	mov    eax,0x6
c000c1a6:	75 12                	jne    c000c1ba <Directory::rename(char const*)+0x4a>
c000c1a8:	50                   	push   eax
c000c1a9:	83 c2 0d             	add    edx,0xd
c000c1ac:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c1ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c1b2:	52                   	push   edx
c000c1b3:	51                   	push   ecx
c000c1b4:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c1b7:	83 c4 10             	add    esp,0x10
c000c1ba:	83 c4 0c             	add    esp,0xc
c000c1bd:	c3                   	ret    

c000c1be <Directory::exists()>:
c000c1be:	83 ec 0c             	sub    esp,0xc
c000c1c1:	31 c0                	xor    eax,eax
c000c1c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1c7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1ce:	83 f9 19             	cmp    ecx,0x19
c000c1d1:	77 24                	ja     c000c1f7 <Directory::exists()+0x39>
c000c1d3:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1da:	85 c9                	test   ecx,ecx
c000c1dc:	74 19                	je     c000c1f7 <Directory::exists()+0x39>
c000c1de:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c1e4:	85 c9                	test   ecx,ecx
c000c1e6:	74 0f                	je     c000c1f7 <Directory::exists()+0x39>
c000c1e8:	50                   	push   eax
c000c1e9:	83 c2 0d             	add    edx,0xd
c000c1ec:	50                   	push   eax
c000c1ed:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c1ef:	52                   	push   edx
c000c1f0:	51                   	push   ecx
c000c1f1:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c1f4:	83 c4 10             	add    esp,0x10
c000c1f7:	83 c4 0c             	add    esp,0xc
c000c1fa:	c3                   	ret    
c000c1fb:	90                   	nop

c000c1fc <Directory::read(dirent*)>:
c000c1fc:	83 ec 1c             	sub    esp,0x1c
c000c1ff:	b8 0b 00 00 00       	mov    eax,0xb
c000c204:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c208:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c20f:	83 f9 19             	cmp    ecx,0x19
c000c212:	77 30                	ja     c000c244 <Directory::read(dirent*)+0x48>
c000c214:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c21b:	85 c9                	test   ecx,ecx
c000c21d:	74 25                	je     c000c244 <Directory::read(dirent*)+0x48>
c000c21f:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c226:	74 1c                	je     c000c244 <Directory::read(dirent*)+0x48>
c000c228:	83 ec 0c             	sub    esp,0xc
c000c22b:	8b 02                	mov    eax,DWORD PTR [edx]
c000c22d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c231:	51                   	push   ecx
c000c232:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c236:	6a 00                	push   0x0
c000c238:	68 10 01 00 00       	push   0x110
c000c23d:	52                   	push   edx
c000c23e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c241:	83 c4 20             	add    esp,0x20
c000c244:	83 c4 1c             	add    esp,0x1c
c000c247:	c3                   	ret    

c000c248 <Directory::create()>:
c000c248:	83 ec 0c             	sub    esp,0xc
c000c24b:	b8 0b 00 00 00       	mov    eax,0xb
c000c250:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c254:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c25b:	83 f9 19             	cmp    ecx,0x19
c000c25e:	77 2f                	ja     c000c28f <Directory::create()+0x47>
c000c260:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c267:	85 c9                	test   ecx,ecx
c000c269:	74 24                	je     c000c28f <Directory::create()+0x47>
c000c26b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c271:	85 c9                	test   ecx,ecx
c000c273:	74 1a                	je     c000c28f <Directory::create()+0x47>
c000c275:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c279:	b8 06 00 00 00       	mov    eax,0x6
c000c27e:	75 0f                	jne    c000c28f <Directory::create()+0x47>
c000c280:	50                   	push   eax
c000c281:	83 c2 0d             	add    edx,0xd
c000c284:	50                   	push   eax
c000c285:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c287:	52                   	push   edx
c000c288:	51                   	push   ecx
c000c289:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c28c:	83 c4 10             	add    esp,0x10
c000c28f:	83 c4 0c             	add    esp,0xc
c000c292:	c3                   	ret    
c000c293:	90                   	nop

c000c294 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c294:	b8 0a 00 00 00       	mov    eax,0xa
c000c299:	c3                   	ret    
c000c29a:	66 90                	xchg   ax,ax

c000c29c <Bus::Bus(char const*)>:
c000c29c:	83 ec 0c             	sub    esp,0xc
c000c29f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2a3:	83 ec 08             	sub    esp,0x8
c000c2a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2aa:	50                   	push   eax
c000c2ab:	e8 28 08 00 00       	call   c000cad8 <Device::Device(char const*)>
c000c2b0:	83 c4 10             	add    esp,0x10
c000c2b3:	ba 20 19 02 c0       	mov    edx,0xc0021920
c000c2b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2bc:	89 10                	mov    DWORD PTR [eax],edx
c000c2be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2c2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c2cc:	90                   	nop
c000c2cd:	83 c4 0c             	add    esp,0xc
c000c2d0:	c3                   	ret    
c000c2d1:	90                   	nop
c000c2d2:	66 90                	xchg   ax,ax

c000c2d4 <Bus::~Bus()>:
c000c2d4:	83 ec 0c             	sub    esp,0xc
c000c2d7:	ba 20 19 02 c0       	mov    edx,0xc0021920
c000c2dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2e0:	89 10                	mov    DWORD PTR [eax],edx
c000c2e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2e6:	83 ec 0c             	sub    esp,0xc
c000c2e9:	50                   	push   eax
c000c2ea:	e8 53 05 00 00       	call   c000c842 <Device::~Device()>
c000c2ef:	83 c4 10             	add    esp,0x10
c000c2f2:	90                   	nop
c000c2f3:	83 c4 0c             	add    esp,0xc
c000c2f6:	c3                   	ret    
c000c2f7:	90                   	nop

c000c2f8 <Bus::~Bus()>:
c000c2f8:	83 ec 0c             	sub    esp,0xc
c000c2fb:	83 ec 0c             	sub    esp,0xc
c000c2fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c302:	e8 cd ff ff ff       	call   c000c2d4 <Bus::~Bus()>
c000c307:	83 c4 10             	add    esp,0x10
c000c30a:	83 ec 08             	sub    esp,0x8
c000c30d:	68 58 01 00 00       	push   0x158
c000c312:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c316:	e8 f1 e4 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c31b:	83 c4 10             	add    esp,0x10
c000c31e:	83 c4 0c             	add    esp,0xc
c000c321:	c3                   	ret    

c000c322 <beepThread(void*)>:
c000c322:	83 ec 0c             	sub    esp,0xc
c000c325:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000c32a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c32e:	48                   	dec    eax
c000c32f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000c334:	75 01                	jne    c000c337 <beepThread(void*)+0x15>
c000c336:	fb                   	sti    
c000c337:	6b c2 0a             	imul   eax,edx,0xa
c000c33a:	83 ec 0c             	sub    esp,0xc
c000c33d:	50                   	push   eax
c000c33e:	e8 a9 9f 00 00       	call   c00162ec <milliTenthSleep(unsigned int)>
c000c343:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c34a:	e8 f6 be 00 00       	call   c0018245 <HalMakeBeep(int)>
c000c34f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c357:	83 c4 1c             	add    esp,0x1c
c000c35a:	e9 71 9e 00 00       	jmp    c00161d0 <blockTask(TaskState)>

c000c35f <Krnl::beep(int, int, bool)>:
c000c35f:	56                   	push   esi
c000c360:	53                   	push   ebx
c000c361:	83 ec 10             	sub    esp,0x10
c000c364:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c368:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c36c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c370:	e8 d0 be 00 00       	call   c0018245 <HalMakeBeep(int)>
c000c375:	89 f0                	mov    eax,esi
c000c377:	83 c4 10             	add    esp,0x10
c000c37a:	84 c0                	test   al,al
c000c37c:	74 1e                	je     c000c39c <Krnl::beep(int, int, bool)+0x3d>
c000c37e:	6b db 0a             	imul   ebx,ebx,0xa
c000c381:	83 ec 0c             	sub    esp,0xc
c000c384:	53                   	push   ebx
c000c385:	e8 62 9f 00 00       	call   c00162ec <milliTenthSleep(unsigned int)>
c000c38a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c392:	83 c4 14             	add    esp,0x14
c000c395:	5b                   	pop    ebx
c000c396:	5e                   	pop    esi
c000c397:	e9 a9 be 00 00       	jmp    c0018245 <HalMakeBeep(int)>
c000c39c:	68 e6 00 00 00       	push   0xe6
c000c3a1:	53                   	push   ebx
c000c3a2:	68 22 c3 00 c0       	push   0xc000c322
c000c3a7:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c3ad:	e8 d2 99 00 00       	call   c0015d84 <Process::createThread(void (*)(void*), void*, int)>
c000c3b2:	83 c4 14             	add    esp,0x14
c000c3b5:	5b                   	pop    ebx
c000c3b6:	5e                   	pop    esi
c000c3b7:	c3                   	ret    

c000c3b8 <User::loadClockSettings(int)>:
c000c3b8:	53                   	push   ebx
c000c3b9:	83 ec 14             	sub    esp,0x14
c000c3bc:	68 14 01 00 00       	push   0x114
c000c3c1:	e8 0d b7 ff ff       	call   c0007ad3 <malloc>
c000c3c6:	83 c4 0c             	add    esp,0xc
c000c3c9:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c3cf:	68 44 19 02 c0       	push   0xc0021944
c000c3d4:	50                   	push   eax
c000c3d5:	89 c3                	mov    ebx,eax
c000c3d7:	e8 e4 f6 ff ff       	call   c000bac0 <File::File(char const*, Process*)>
c000c3dc:	58                   	pop    eax
c000c3dd:	5a                   	pop    edx
c000c3de:	6a 01                	push   0x1
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 f8 f6 ff ff       	call   c000bade <File::open(FileOpenMode)>
c000c3e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c3e9:	e8 4e f7 ff ff       	call   c000bb3c <File::close()>
c000c3ee:	83 c4 10             	add    esp,0x10
c000c3f1:	85 db                	test   ebx,ebx
c000c3f3:	74 0f                	je     c000c404 <User::loadClockSettings(int)+0x4c>
c000c3f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c3f7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c3fb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c3fe:	83 c4 08             	add    esp,0x8
c000c401:	5b                   	pop    ebx
c000c402:	ff e0                	jmp    eax
c000c404:	83 c4 08             	add    esp,0x8
c000c407:	5b                   	pop    ebx
c000c408:	c3                   	ret    
c000c409:	90                   	nop

c000c40a <Clock::Clock(char const*)>:
c000c40a:	83 ec 0c             	sub    esp,0xc
c000c40d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c411:	83 ec 08             	sub    esp,0x8
c000c414:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c418:	50                   	push   eax
c000c419:	e8 ba 06 00 00       	call   c000cad8 <Device::Device(char const*)>
c000c41e:	83 c4 10             	add    esp,0x10
c000c421:	ba 6c 19 02 c0       	mov    edx,0xc002196c
c000c426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c42a:	89 10                	mov    DWORD PTR [eax],edx
c000c42c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c430:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c43a:	90                   	nop
c000c43b:	83 c4 0c             	add    esp,0xc
c000c43e:	c3                   	ret    
c000c43f:	90                   	nop

c000c440 <Clock::~Clock()>:
c000c440:	83 ec 0c             	sub    esp,0xc
c000c443:	ba 6c 19 02 c0       	mov    edx,0xc002196c
c000c448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c44c:	89 10                	mov    DWORD PTR [eax],edx
c000c44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c452:	83 ec 0c             	sub    esp,0xc
c000c455:	50                   	push   eax
c000c456:	e8 e7 03 00 00       	call   c000c842 <Device::~Device()>
c000c45b:	83 c4 10             	add    esp,0x10
c000c45e:	90                   	nop
c000c45f:	83 c4 0c             	add    esp,0xc
c000c462:	c3                   	ret    
c000c463:	90                   	nop

c000c464 <Clock::~Clock()>:
c000c464:	83 ec 0c             	sub    esp,0xc
c000c467:	83 ec 0c             	sub    esp,0xc
c000c46a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c46e:	e8 cd ff ff ff       	call   c000c440 <Clock::~Clock()>
c000c473:	83 c4 10             	add    esp,0x10
c000c476:	83 ec 08             	sub    esp,0x8
c000c479:	68 58 01 00 00       	push   0x158
c000c47e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c482:	e8 85 e3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c487:	83 c4 10             	add    esp,0x10
c000c48a:	83 c4 0c             	add    esp,0xc
c000c48d:	c3                   	ret    

c000c48e <Clock::timeInSecondsLocal()>:
c000c48e:	53                   	push   ebx
c000c48f:	83 ec 14             	sub    esp,0x14
c000c492:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c496:	8b 10                	mov    edx,DWORD PTR [eax]
c000c498:	50                   	push   eax
c000c499:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c49c:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c4a3:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c4a9:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c4af:	89 cb                	mov    ebx,ecx
c000c4b1:	c1 fb 1f             	sar    ebx,0x1f
c000c4b4:	01 c8                	add    eax,ecx
c000c4b6:	11 da                	adc    edx,ebx
c000c4b8:	83 c4 10             	add    esp,0x10
c000c4bb:	31 c9                	xor    ecx,ecx
c000c4bd:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c4c4:	74 05                	je     c000c4cb <Clock::timeInSecondsLocal()+0x3d>
c000c4c6:	b9 08 07 00 00       	mov    ecx,0x708
c000c4cb:	31 db                	xor    ebx,ebx
c000c4cd:	01 c8                	add    eax,ecx
c000c4cf:	11 da                	adc    edx,ebx
c000c4d1:	83 c4 08             	add    esp,0x8
c000c4d4:	5b                   	pop    ebx
c000c4d5:	c3                   	ret    

c000c4d6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c4d6:	57                   	push   edi
c000c4d7:	56                   	push   esi
c000c4d8:	53                   	push   ebx
c000c4d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c4dd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c4e1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c4e5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c4e7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c4ea:	0f b6 05 08 94 02 c0 	movzx  eax,BYTE PTR ds:0xc0029408
c000c4f1:	03 05 0c 94 02 c0    	add    eax,DWORD PTR ds:0xc002940c
c000c4f7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c4fd:	99                   	cdq    
c000c4fe:	29 c6                	sub    esi,eax
c000c500:	19 d7                	sbb    edi,edx
c000c502:	89 f0                	mov    eax,esi
c000c504:	31 f6                	xor    esi,esi
c000c506:	89 fa                	mov    edx,edi
c000c508:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c50f:	74 05                	je     c000c516 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c511:	be 08 07 00 00       	mov    esi,0x708
c000c516:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c51a:	31 ff                	xor    edi,edi
c000c51c:	29 f0                	sub    eax,esi
c000c51e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c522:	19 fa                	sbb    edx,edi
c000c524:	89 d8                	mov    eax,ebx
c000c526:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c52a:	5b                   	pop    ebx
c000c52b:	5e                   	pop    esi
c000c52c:	5f                   	pop    edi
c000c52d:	ff e0                	jmp    eax

c000c52f <datetimeToSeconds(datetime_t)>:
c000c52f:	55                   	push   ebp
c000c530:	57                   	push   edi
c000c531:	56                   	push   esi
c000c532:	53                   	push   ebx
c000c533:	83 ec 0c             	sub    esp,0xc
c000c536:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c53a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c53e:	89 f7                	mov    edi,esi
c000c540:	89 f0                	mov    eax,esi
c000c542:	0f b6 cf             	movzx  ecx,bh
c000c545:	0f b6 c4             	movzx  eax,ah
c000c548:	c1 ef 10             	shr    edi,0x10
c000c54b:	89 da                	mov    edx,ebx
c000c54d:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000c550:	89 f9                	mov    ecx,edi
c000c552:	0f b6 f9             	movzx  edi,cl
c000c555:	89 f1                	mov    ecx,esi
c000c557:	6b c0 3c             	imul   eax,eax,0x3c
c000c55a:	0f b6 f1             	movzx  esi,cl
c000c55d:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000c563:	0f b6 db             	movzx  ebx,bl
c000c566:	c1 ea 10             	shr    edx,0x10
c000c569:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000c56f:	01 f8                	add    eax,edi
c000c571:	01 f0                	add    eax,esi
c000c573:	89 04 24             	mov    DWORD PTR [esp],eax
c000c576:	c1 f8 1f             	sar    eax,0x1f
c000c579:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c57d:	89 e8                	mov    eax,ebp
c000c57f:	0f b6 c0             	movzx  eax,al
c000c582:	8b 0c 85 a0 19 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde660]
c000c589:	83 f8 01             	cmp    eax,0x1
c000c58c:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000c590:	0f b7 da             	movzx  ebx,dx
c000c593:	76 27                	jbe    c000c5bc <datetimeToSeconds(datetime_t)+0x8d>
c000c595:	80 e2 03             	and    dl,0x3
c000c598:	75 22                	jne    c000c5bc <datetimeToSeconds(datetime_t)+0x8d>
c000c59a:	31 d2                	xor    edx,edx
c000c59c:	be 64 00 00 00       	mov    esi,0x64
c000c5a1:	89 d8                	mov    eax,ebx
c000c5a3:	f7 f6                	div    esi
c000c5a5:	85 d2                	test   edx,edx
c000c5a7:	75 12                	jne    c000c5bb <datetimeToSeconds(datetime_t)+0x8c>
c000c5a9:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c5af:	be 90 01 00 00       	mov    esi,0x190
c000c5b4:	99                   	cdq    
c000c5b5:	f7 fe                	idiv   esi
c000c5b7:	85 d2                	test   edx,edx
c000c5b9:	75 01                	jne    c000c5bc <datetimeToSeconds(datetime_t)+0x8d>
c000c5bb:	41                   	inc    ecx
c000c5bc:	83 fb 46             	cmp    ebx,0x46
c000c5bf:	76 48                	jbe    c000c609 <datetimeToSeconds(datetime_t)+0xda>
c000c5c1:	be 46 00 00 00       	mov    esi,0x46
c000c5c6:	bf 64 00 00 00       	mov    edi,0x64
c000c5cb:	bd 90 01 00 00       	mov    ebp,0x190
c000c5d0:	f7 c6 03 00 00 00    	test   esi,0x3
c000c5d6:	b8 6d 01 00 00       	mov    eax,0x16d
c000c5db:	75 23                	jne    c000c600 <datetimeToSeconds(datetime_t)+0xd1>
c000c5dd:	89 f0                	mov    eax,esi
c000c5df:	99                   	cdq    
c000c5e0:	f7 ff                	idiv   edi
c000c5e2:	b8 6e 01 00 00       	mov    eax,0x16e
c000c5e7:	85 d2                	test   edx,edx
c000c5e9:	75 15                	jne    c000c600 <datetimeToSeconds(datetime_t)+0xd1>
c000c5eb:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c5f1:	99                   	cdq    
c000c5f2:	f7 fd                	idiv   ebp
c000c5f4:	83 fa 01             	cmp    edx,0x1
c000c5f7:	19 c0                	sbb    eax,eax
c000c5f9:	f7 d0                	not    eax
c000c5fb:	05 6e 01 00 00       	add    eax,0x16e
c000c600:	46                   	inc    esi
c000c601:	01 c1                	add    ecx,eax
c000c603:	39 de                	cmp    esi,ebx
c000c605:	7c c9                	jl     c000c5d0 <datetimeToSeconds(datetime_t)+0xa1>
c000c607:	eb 34                	jmp    c000c63d <datetimeToSeconds(datetime_t)+0x10e>
c000c609:	74 32                	je     c000c63d <datetimeToSeconds(datetime_t)+0x10e>
c000c60b:	b8 45 00 00 00       	mov    eax,0x45
c000c610:	89 c2                	mov    edx,eax
c000c612:	83 e2 03             	and    edx,0x3
c000c615:	39 d8                	cmp    eax,ebx
c000c617:	7e 0f                	jle    c000c628 <datetimeToSeconds(datetime_t)+0xf9>
c000c619:	83 fa 01             	cmp    edx,0x1
c000c61c:	19 d2                	sbb    edx,edx
c000c61e:	48                   	dec    eax
c000c61f:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c626:	eb e8                	jmp    c000c610 <datetimeToSeconds(datetime_t)+0xe1>
c000c628:	85 d2                	test   edx,edx
c000c62a:	b8 6d 01 00 00       	mov    eax,0x16d
c000c62f:	75 0a                	jne    c000c63b <datetimeToSeconds(datetime_t)+0x10c>
c000c631:	83 fb 01             	cmp    ebx,0x1
c000c634:	19 c0                	sbb    eax,eax
c000c636:	05 6e 01 00 00       	add    eax,0x16e
c000c63b:	29 c1                	sub    ecx,eax
c000c63d:	b8 80 51 01 00       	mov    eax,0x15180
c000c642:	f7 e9                	imul   ecx
c000c644:	03 04 24             	add    eax,DWORD PTR [esp]
c000c647:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c64b:	83 c4 0c             	add    esp,0xc
c000c64e:	5b                   	pop    ebx
c000c64f:	5e                   	pop    esi
c000c650:	5f                   	pop    edi
c000c651:	5d                   	pop    ebp
c000c652:	c3                   	ret    
c000c653:	90                   	nop

c000c654 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c654:	57                   	push   edi
c000c655:	56                   	push   esi
c000c656:	53                   	push   ebx
c000c657:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c65b:	8b 06                	mov    eax,DWORD PTR [esi]
c000c65d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c660:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c664:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c668:	e8 c2 fe ff ff       	call   c000c52f <datetimeToSeconds(datetime_t)>
c000c66d:	59                   	pop    ecx
c000c66e:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c675:	5b                   	pop    ebx
c000c676:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c67c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c682:	89 cb                	mov    ebx,ecx
c000c684:	c1 fb 1f             	sar    ebx,0x1f
c000c687:	29 c8                	sub    eax,ecx
c000c689:	19 da                	sbb    edx,ebx
c000c68b:	31 c9                	xor    ecx,ecx
c000c68d:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c694:	74 05                	je     c000c69b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c696:	b9 08 07 00 00       	mov    ecx,0x708
c000c69b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c69f:	31 db                	xor    ebx,ebx
c000c6a1:	29 c8                	sub    eax,ecx
c000c6a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c6a7:	19 da                	sbb    edx,ebx
c000c6a9:	89 f8                	mov    eax,edi
c000c6ab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c6af:	5b                   	pop    ebx
c000c6b0:	5e                   	pop    esi
c000c6b1:	5f                   	pop    edi
c000c6b2:	ff e0                	jmp    eax

c000c6b4 <secondsToDatetime(unsigned long long)>:
c000c6b4:	55                   	push   ebp
c000c6b5:	57                   	push   edi
c000c6b6:	56                   	push   esi
c000c6b7:	53                   	push   ebx
c000c6b8:	83 ec 1c             	sub    esp,0x1c
c000c6bb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c6bf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c6c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c6c7:	6a 00                	push   0x0
c000c6c9:	68 80 51 01 00       	push   0x15180
c000c6ce:	55                   	push   ebp
c000c6cf:	57                   	push   edi
c000c6d0:	e8 bb 2f 01 00       	call   c001f690 <__udivdi3>
c000c6d5:	83 c4 10             	add    esp,0x10
c000c6d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6dc:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c6e2:	6a 00                	push   0x0
c000c6e4:	68 80 51 01 00       	push   0x15180
c000c6e9:	55                   	push   ebp
c000c6ea:	57                   	push   edi
c000c6eb:	bf 10 0e 00 00       	mov    edi,0xe10
c000c6f0:	e8 9b 30 01 00       	call   c001f790 <__umoddi3>
c000c6f5:	83 c4 10             	add    esp,0x10
c000c6f8:	99                   	cdq    
c000c6f9:	f7 ff                	idiv   edi
c000c6fb:	bf 3c 00 00 00       	mov    edi,0x3c
c000c700:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c703:	89 d0                	mov    eax,edx
c000c705:	99                   	cdq    
c000c706:	f7 ff                	idiv   edi
c000c708:	85 db                	test   ebx,ebx
c000c70a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c70d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c710:	79 11                	jns    c000c723 <secondsToDatetime(unsigned long long)+0x6f>
c000c712:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c716:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c71c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c721:	eb 07                	jmp    c000c72a <secondsToDatetime(unsigned long long)+0x76>
c000c723:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c728:	89 d8                	mov    eax,ebx
c000c72a:	99                   	cdq    
c000c72b:	bf b4 05 00 00       	mov    edi,0x5b4
c000c730:	f7 f9                	idiv   ecx
c000c732:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c737:	31 d2                	xor    edx,edx
c000c739:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c73e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c742:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c74a:	01 c3                	add    ebx,eax
c000c74c:	89 d8                	mov    eax,ebx
c000c74e:	f7 f1                	div    ecx
c000c750:	31 d2                	xor    edx,edx
c000c752:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c755:	89 d8                	mov    eax,ebx
c000c757:	f7 f7                	div    edi
c000c759:	31 d2                	xor    edx,edx
c000c75b:	29 c1                	sub    ecx,eax
c000c75d:	89 d8                	mov    eax,ebx
c000c75f:	f7 f5                	div    ebp
c000c761:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c766:	31 d2                	xor    edx,edx
c000c768:	29 c1                	sub    ecx,eax
c000c76a:	89 c8                	mov    eax,ecx
c000c76c:	f7 f5                	div    ebp
c000c76e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c773:	31 d2                	xor    edx,edx
c000c775:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c779:	89 c8                	mov    eax,ecx
c000c77b:	f7 f5                	div    ebp
c000c77d:	31 d2                	xor    edx,edx
c000c77f:	01 c3                	add    ebx,eax
c000c781:	89 c8                	mov    eax,ecx
c000c783:	f7 f7                	div    edi
c000c785:	bf 99 00 00 00       	mov    edi,0x99
c000c78a:	31 d2                	xor    edx,edx
c000c78c:	29 c3                	sub    ebx,eax
c000c78e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c796:	29 c3                	sub    ebx,eax
c000c798:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c79b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c79e:	83 c1 02             	add    ecx,0x2
c000c7a1:	89 c8                	mov    eax,ecx
c000c7a3:	bb 05 00 00 00       	mov    ebx,0x5
c000c7a8:	f7 f7                	div    edi
c000c7aa:	31 d2                	xor    edx,edx
c000c7ac:	89 c7                	mov    edi,eax
c000c7ae:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c7b4:	83 c0 02             	add    eax,0x2
c000c7b7:	f7 f3                	div    ebx
c000c7b9:	89 eb                	mov    ebx,ebp
c000c7bb:	29 c3                	sub    ebx,eax
c000c7bd:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c7c3:	88 1e                	mov    BYTE PTR [esi],bl
c000c7c5:	19 c0                	sbb    eax,eax
c000c7c7:	31 d2                	xor    edx,edx
c000c7c9:	83 e0 0c             	and    eax,0xc
c000c7cc:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c7d0:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c7d8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c7dc:	83 f9 01             	cmp    ecx,0x1
c000c7df:	0f 96 c2             	setbe  dl
c000c7e2:	41                   	inc    ecx
c000c7e3:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c7e6:	01 d0                	add    eax,edx
c000c7e8:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c7ec:	83 c4 1c             	add    esp,0x1c
c000c7ef:	89 f0                	mov    eax,esi
c000c7f1:	5b                   	pop    ebx
c000c7f2:	5e                   	pop    esi
c000c7f3:	5f                   	pop    edi
c000c7f4:	5d                   	pop    ebp
c000c7f5:	c2 04 00             	ret    0x4

c000c7f8 <Clock::timeInDatetimeLocal()>:
c000c7f8:	53                   	push   ebx
c000c7f9:	83 ec 14             	sub    esp,0x14
c000c7fc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c800:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c804:	e8 85 fc ff ff       	call   c000c48e <Clock::timeInSecondsLocal()>
c000c809:	83 c4 0c             	add    esp,0xc
c000c80c:	52                   	push   edx
c000c80d:	50                   	push   eax
c000c80e:	53                   	push   ebx
c000c80f:	e8 a0 fe ff ff       	call   c000c6b4 <secondsToDatetime(unsigned long long)>
c000c814:	89 d8                	mov    eax,ebx
c000c816:	83 c4 14             	add    esp,0x14
c000c819:	5b                   	pop    ebx
c000c81a:	c2 04 00             	ret    0x4
c000c81d:	90                   	nop

c000c81e <Device::hibernate()>:
c000c81e:	c3                   	ret    
c000c81f:	90                   	nop

c000c820 <Device::wake()>:
c000c820:	c3                   	ret    
c000c821:	90                   	nop

c000c822 <Device::detect()>:
c000c822:	c3                   	ret    
c000c823:	90                   	nop

c000c824 <Device::disableLegacy()>:
c000c824:	c3                   	ret    
c000c825:	90                   	nop

c000c826 <Device::powerSaving(PowerSavingLevel)>:
c000c826:	c3                   	ret    
c000c827:	90                   	nop

c000c828 <DriverlessDevice::close(int, int, void*)>:
c000c828:	31 c0                	xor    eax,eax
c000c82a:	c3                   	ret    
c000c82b:	90                   	nop

c000c82c <DriverlessDevice::detect()>:
c000c82c:	c3                   	ret    
c000c82d:	90                   	nop

c000c82e <DriverlessDevice::open(int, int, void*)>:
c000c82e:	83 ec 18             	sub    esp,0x18
c000c831:	68 d0 19 02 c0       	push   0xc00219d0
c000c836:	e8 cc 4c 00 00       	call   c0011507 <KePanic(char const*)>
c000c83b:	83 c8 ff             	or     eax,0xffffffff
c000c83e:	83 c4 1c             	add    esp,0x1c
c000c841:	c3                   	ret    

c000c842 <Device::~Device()>:
c000c842:	ba 30 1a 02 c0       	mov    edx,0xc0021a30
c000c847:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c84b:	89 10                	mov    DWORD PTR [eax],edx
c000c84d:	90                   	nop
c000c84e:	c3                   	ret    
c000c84f:	90                   	nop

c000c850 <Device::~Device()>:
c000c850:	83 ec 0c             	sub    esp,0xc
c000c853:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c857:	e8 e6 ff ff ff       	call   c000c842 <Device::~Device()>
c000c85c:	83 c4 04             	add    esp,0x4
c000c85f:	83 ec 08             	sub    esp,0x8
c000c862:	68 58 01 00 00       	push   0x158
c000c867:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c86b:	e8 9c df ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c870:	83 c4 10             	add    esp,0x10
c000c873:	83 c4 0c             	add    esp,0xc
c000c876:	c3                   	ret    
c000c877:	90                   	nop

c000c878 <Device::findAndLoadDriver()>:
c000c878:	c7 44 24 04 ee 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc00219ee
c000c880:	e9 85 e0 ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c000c885:	90                   	nop

c000c886 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c886:	57                   	push   edi
c000c887:	b9 09 00 00 00       	mov    ecx,0x9
c000c88c:	56                   	push   esi
c000c88d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c891:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c895:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c89f:	81 c7 18 01 00 00    	add    edi,0x118
c000c8a5:	fc                   	cld    
c000c8a6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c8a8:	5e                   	pop    esi
c000c8a9:	5f                   	pop    edi
c000c8aa:	c3                   	ret    
c000c8ab:	90                   	nop

c000c8ac <Device::preOpenACPI(void*, char*, char*)>:
c000c8ac:	57                   	push   edi
c000c8ad:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c8b2:	56                   	push   esi
c000c8b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c8b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c8bb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c8bf:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c8c9:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c8cf:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c8d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c8d7:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c8dd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c8e1:	b9 0e 00 00 00       	mov    ecx,0xe
c000c8e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c8e8:	5e                   	pop    esi
c000c8e9:	5f                   	pop    edi
c000c8ea:	c3                   	ret    
c000c8eb:	90                   	nop

c000c8ec <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c8ec:	53                   	push   ebx
c000c8ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c8f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c8f9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c8fd:	0f b6 c0             	movzx  eax,al
c000c900:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c904:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c908:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c90c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c910:	5b                   	pop    ebx
c000c911:	e9 aa 05 00 00       	jmp    c000cec0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c916 <Device::getParent()>:
c000c916:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c91a:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c920:	c3                   	ret    
c000c921:	90                   	nop

c000c922 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c922:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c926:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c92a:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c92f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c933:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c937:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c93b:	e9 f7 06 00 00       	jmp    c000d037 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c940 <Device::addChild(Device*)>:
c000c940:	53                   	push   ebx
c000c941:	83 ec 08             	sub    esp,0x8
c000c944:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c948:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c94c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c952:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c958:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c95a:	85 d2                	test   edx,edx
c000c95c:	74 04                	je     c000c962 <Device::addChild(Device*)+0x22>
c000c95e:	89 d3                	mov    ebx,edx
c000c960:	eb f6                	jmp    c000c958 <Device::addChild(Device*)+0x18>
c000c962:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c965:	83 ec 0c             	sub    esp,0xc
c000c968:	6a 08                	push   0x8
c000c96a:	e8 64 b1 ff ff       	call   c0007ad3 <malloc>
c000c96f:	89 03                	mov    DWORD PTR [ebx],eax
c000c971:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c977:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c97e:	83 c4 18             	add    esp,0x18
c000c981:	5b                   	pop    ebx
c000c982:	c3                   	ret    
c000c983:	90                   	nop

c000c984 <Device::removeAllChildren()>:
c000c984:	56                   	push   esi
c000c985:	53                   	push   ebx
c000c986:	52                   	push   edx
c000c987:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c98b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c991:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c994:	74 17                	je     c000c9ad <Device::removeAllChildren()+0x29>
c000c996:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c999:	85 c0                	test   eax,eax
c000c99b:	74 0c                	je     c000c9a9 <Device::removeAllChildren()+0x25>
c000c99d:	8b 10                	mov    edx,DWORD PTR [eax]
c000c99f:	83 ec 0c             	sub    esp,0xc
c000c9a2:	50                   	push   eax
c000c9a3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c9a6:	83 c4 10             	add    esp,0x10
c000c9a9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c9ab:	eb e4                	jmp    c000c991 <Device::removeAllChildren()+0xd>
c000c9ad:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c9b3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c9b9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c9bf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c9c6:	58                   	pop    eax
c000c9c7:	5b                   	pop    ebx
c000c9c8:	5e                   	pop    esi
c000c9c9:	c3                   	ret    

c000c9ca <Device::hibernateAll()>:
c000c9ca:	53                   	push   ebx
c000c9cb:	83 ec 14             	sub    esp,0x14
c000c9ce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c9d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c9d4:	53                   	push   ebx
c000c9d5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c9d8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c9de:	83 c4 10             	add    esp,0x10
c000c9e1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c9e4:	74 0f                	je     c000c9f5 <Device::hibernateAll()+0x2b>
c000c9e6:	83 ec 0c             	sub    esp,0xc
c000c9e9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c9ec:	e8 d9 ff ff ff       	call   c000c9ca <Device::hibernateAll()>
c000c9f1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c9f3:	eb e9                	jmp    c000c9de <Device::hibernateAll()+0x14>
c000c9f5:	83 c4 08             	add    esp,0x8
c000c9f8:	5b                   	pop    ebx
c000c9f9:	c3                   	ret    

c000c9fa <Device::wakeAll()>:
c000c9fa:	53                   	push   ebx
c000c9fb:	83 ec 14             	sub    esp,0x14
c000c9fe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca02:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca04:	53                   	push   ebx
c000ca05:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000ca08:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca0e:	83 c4 10             	add    esp,0x10
c000ca11:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca14:	74 0f                	je     c000ca25 <Device::wakeAll()+0x2b>
c000ca16:	83 ec 0c             	sub    esp,0xc
c000ca19:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca1c:	e8 d9 ff ff ff       	call   c000c9fa <Device::wakeAll()>
c000ca21:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca23:	eb e9                	jmp    c000ca0e <Device::wakeAll()+0x14>
c000ca25:	83 c4 08             	add    esp,0x8
c000ca28:	5b                   	pop    ebx
c000ca29:	c3                   	ret    

c000ca2a <Device::detectAll()>:
c000ca2a:	53                   	push   ebx
c000ca2b:	83 ec 14             	sub    esp,0x14
c000ca2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca32:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca34:	53                   	push   ebx
c000ca35:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000ca38:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca3e:	83 c4 10             	add    esp,0x10
c000ca41:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca44:	74 0f                	je     c000ca55 <Device::detectAll()+0x2b>
c000ca46:	83 ec 0c             	sub    esp,0xc
c000ca49:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca4c:	e8 d9 ff ff ff       	call   c000ca2a <Device::detectAll()>
c000ca51:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca53:	eb e9                	jmp    c000ca3e <Device::detectAll()+0x14>
c000ca55:	83 c4 08             	add    esp,0x8
c000ca58:	5b                   	pop    ebx
c000ca59:	c3                   	ret    

c000ca5a <Device::disableLegacyAll()>:
c000ca5a:	c3                   	ret    
c000ca5b:	90                   	nop

c000ca5c <Device::loadDriversForAll()>:
c000ca5c:	c3                   	ret    
c000ca5d:	90                   	nop

c000ca5e <Device::closeAll()>:
c000ca5e:	53                   	push   ebx
c000ca5f:	83 ec 08             	sub    esp,0x8
c000ca62:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ca66:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca68:	6a 00                	push   0x0
c000ca6a:	6a 00                	push   0x0
c000ca6c:	6a 00                	push   0x0
c000ca6e:	53                   	push   ebx
c000ca6f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ca72:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca78:	83 c4 10             	add    esp,0x10
c000ca7b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca7e:	74 0f                	je     c000ca8f <Device::closeAll()+0x31>
c000ca80:	83 ec 0c             	sub    esp,0xc
c000ca83:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca86:	e8 d3 ff ff ff       	call   c000ca5e <Device::closeAll()>
c000ca8b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca8d:	eb e9                	jmp    c000ca78 <Device::closeAll()+0x1a>
c000ca8f:	83 c4 08             	add    esp,0x8
c000ca92:	5b                   	pop    ebx
c000ca93:	c3                   	ret    

c000ca94 <Device::powerSavingAll(PowerSavingLevel)>:
c000ca94:	56                   	push   esi
c000ca95:	53                   	push   ebx
c000ca96:	83 ec 0c             	sub    esp,0xc
c000ca99:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ca9d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000caa1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000caa3:	56                   	push   esi
c000caa4:	53                   	push   ebx
c000caa5:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000caa8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000caae:	83 c4 10             	add    esp,0x10
c000cab1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cab4:	74 0f                	je     c000cac5 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000cab6:	52                   	push   edx
c000cab7:	52                   	push   edx
c000cab8:	56                   	push   esi
c000cab9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cabc:	e8 d3 ff ff ff       	call   c000ca94 <Device::powerSavingAll(PowerSavingLevel)>
c000cac1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cac3:	eb e9                	jmp    c000caae <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000cac5:	58                   	pop    eax
c000cac6:	5b                   	pop    ebx
c000cac7:	5e                   	pop    esi
c000cac8:	c3                   	ret    
c000cac9:	90                   	nop

c000caca <Device::setName(char const*)>:
c000caca:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000cad2:	e9 79 3b ff ff       	jmp    c0000650 <strcpy>
c000cad7:	90                   	nop

c000cad8 <Device::Device(char const*)>:
c000cad8:	83 ec 1c             	sub    esp,0x1c
c000cadb:	ba 30 1a 02 c0       	mov    edx,0xc0021a30
c000cae0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cae4:	89 10                	mov    DWORD PTR [eax],edx
c000cae6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000caea:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000caf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000caf8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cb02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb06:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cb10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb14:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cb1e:	83 ec 08             	sub    esp,0x8
c000cb21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb29:	e8 9c ff ff ff       	call   c000caca <Device::setName(char const*)>
c000cb2e:	83 c4 10             	add    esp,0x10
c000cb31:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000cb39:	83 ec 0c             	sub    esp,0xc
c000cb3c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb40:	e8 8e af ff ff       	call   c0007ad3 <malloc>
c000cb45:	83 c4 10             	add    esp,0x10
c000cb48:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cb4e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cb55:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000cb59:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000cb5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb63:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cb69:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cb6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb73:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cb79:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cb80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb84:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000cb8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb8f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000cb96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb9a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cba4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cba8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cbb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbb6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cbc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbc4:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000cbce:	90                   	nop
c000cbcf:	83 c4 1c             	add    esp,0x1c
c000cbd2:	c3                   	ret    
c000cbd3:	90                   	nop

c000cbd4 <Device::getName()>:
c000cbd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbd8:	05 d0 00 00 00       	add    eax,0xd0
c000cbdd:	c3                   	ret    

c000cbde <DriverlessDevice::DriverlessDevice(char const*)>:
c000cbde:	83 ec 0c             	sub    esp,0xc
c000cbe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbe5:	83 ec 08             	sub    esp,0x8
c000cbe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbec:	50                   	push   eax
c000cbed:	e8 e6 fe ff ff       	call   c000cad8 <Device::Device(char const*)>
c000cbf2:	83 c4 10             	add    esp,0x10
c000cbf5:	ba 5c 1a 02 c0       	mov    edx,0xc0021a5c
c000cbfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbfe:	89 10                	mov    DWORD PTR [eax],edx
c000cc00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc04:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000cc0e:	90                   	nop
c000cc0f:	83 c4 0c             	add    esp,0xc
c000cc12:	c3                   	ret    
c000cc13:	90                   	nop

c000cc14 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000cc14:	57                   	push   edi
c000cc15:	56                   	push   esi
c000cc16:	53                   	push   ebx
c000cc17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc1b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000cc1f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cc23:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000cc29:	75 0c                	jne    c000cc37 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000cc2b:	52                   	push   edx
c000cc2c:	52                   	push   edx
c000cc2d:	53                   	push   ebx
c000cc2e:	56                   	push   esi
c000cc2f:	e8 0e 2f 01 00       	call   c001fb42 <LinkedList<Device>::addElement(Device*)>
c000cc34:	83 c4 10             	add    esp,0x10
c000cc37:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cc3d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cc40:	74 12                	je     c000cc54 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000cc42:	50                   	push   eax
c000cc43:	57                   	push   edi
c000cc44:	56                   	push   esi
c000cc45:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cc48:	e8 c7 ff ff ff       	call   c000cc14 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cc4d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cc4f:	83 c4 10             	add    esp,0x10
c000cc52:	eb e9                	jmp    c000cc3d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000cc54:	5b                   	pop    ebx
c000cc55:	5e                   	pop    esi
c000cc56:	5f                   	pop    edi
c000cc57:	c3                   	ret    

c000cc58 <getDevicesOfType(DeviceType)>:
c000cc58:	53                   	push   ebx
c000cc59:	83 ec 14             	sub    esp,0x14
c000cc5c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cc60:	53                   	push   ebx
c000cc61:	e8 b8 2f 01 00       	call   c001fc1e <LinkedList<Device>::LinkedList()>
c000cc66:	83 c4 0c             	add    esp,0xc
c000cc69:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cc6d:	53                   	push   ebx
c000cc6e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000cc74:	e8 9b ff ff ff       	call   c000cc14 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cc79:	83 c4 18             	add    esp,0x18
c000cc7c:	89 d8                	mov    eax,ebx
c000cc7e:	5b                   	pop    ebx
c000cc7f:	c2 04 00             	ret    0x4
c000cc82:	66 90                	xchg   ax,ax

c000cc84 <HardDiskController::HardDiskController(char const*)>:
c000cc84:	83 ec 0c             	sub    esp,0xc
c000cc87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc8b:	83 ec 08             	sub    esp,0x8
c000cc8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc92:	50                   	push   eax
c000cc93:	e8 40 fe ff ff       	call   c000cad8 <Device::Device(char const*)>
c000cc98:	83 c4 10             	add    esp,0x10
c000cc9b:	ba 88 1a 02 c0       	mov    edx,0xc0021a88
c000cca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cca4:	89 10                	mov    DWORD PTR [eax],edx
c000cca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccaa:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000ccb4:	90                   	nop
c000ccb5:	83 c4 0c             	add    esp,0xc
c000ccb8:	c3                   	ret    
c000ccb9:	90                   	nop
c000ccba:	66 90                	xchg   ax,ax

c000ccbc <HardDiskController::~HardDiskController()>:
c000ccbc:	83 ec 0c             	sub    esp,0xc
c000ccbf:	ba 88 1a 02 c0       	mov    edx,0xc0021a88
c000ccc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccc8:	89 10                	mov    DWORD PTR [eax],edx
c000ccca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccce:	83 ec 0c             	sub    esp,0xc
c000ccd1:	50                   	push   eax
c000ccd2:	e8 6b fb ff ff       	call   c000c842 <Device::~Device()>
c000ccd7:	83 c4 10             	add    esp,0x10
c000ccda:	90                   	nop
c000ccdb:	83 c4 0c             	add    esp,0xc
c000ccde:	c3                   	ret    
c000ccdf:	90                   	nop

c000cce0 <HardDiskController::~HardDiskController()>:
c000cce0:	83 ec 0c             	sub    esp,0xc
c000cce3:	83 ec 0c             	sub    esp,0xc
c000cce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccea:	e8 cd ff ff ff       	call   c000ccbc <HardDiskController::~HardDiskController()>
c000ccef:	83 c4 10             	add    esp,0x10
c000ccf2:	83 ec 08             	sub    esp,0x8
c000ccf5:	68 58 01 00 00       	push   0x158
c000ccfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccfe:	e8 09 db ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000cd03:	83 c4 10             	add    esp,0x10
c000cd06:	83 c4 0c             	add    esp,0xc
c000cd09:	c3                   	ret    

c000cd0a <PhysicalDisk::eject()>:
c000cd0a:	83 c8 ff             	or     eax,0xffffffff
c000cd0d:	c3                   	ret    

c000cd0e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cd0e:	83 ec 0c             	sub    esp,0xc
c000cd11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd15:	83 ec 08             	sub    esp,0x8
c000cd18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd1c:	50                   	push   eax
c000cd1d:	e8 b6 fd ff ff       	call   c000cad8 <Device::Device(char const*)>
c000cd22:	83 c4 10             	add    esp,0x10
c000cd25:	ba b4 1a 02 c0       	mov    edx,0xc0021ab4
c000cd2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd2e:	89 10                	mov    DWORD PTR [eax],edx
c000cd30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd34:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cd3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd3f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cd46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd4a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cd54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd58:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cd5c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cd62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd66:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000cd70:	90                   	nop
c000cd71:	83 c4 0c             	add    esp,0xc
c000cd74:	c3                   	ret    
c000cd75:	90                   	nop

c000cd76 <PhysicalDisk::startCache()>:
c000cd76:	56                   	push   esi
c000cd77:	53                   	push   ebx
c000cd78:	83 ec 10             	sub    esp,0x10
c000cd7b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cd7f:	6a 44                	push   0x44
c000cd81:	e8 4d ad ff ff       	call   c0007ad3 <malloc>
c000cd86:	89 c6                	mov    esi,eax
c000cd88:	58                   	pop    eax
c000cd89:	5a                   	pop    edx
c000cd8a:	53                   	push   ebx
c000cd8b:	56                   	push   esi
c000cd8c:	e8 83 17 00 00       	call   c000e514 <VCache::VCache(PhysicalDisk*)>
c000cd91:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000cd97:	83 c4 14             	add    esp,0x14
c000cd9a:	5b                   	pop    ebx
c000cd9b:	5e                   	pop    esi
c000cd9c:	c3                   	ret    
c000cd9d:	90                   	nop

c000cd9e <PhysicalDisk::~PhysicalDisk()>:
c000cd9e:	83 ec 0c             	sub    esp,0xc
c000cda1:	ba b4 1a 02 c0       	mov    edx,0xc0021ab4
c000cda6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdaa:	89 10                	mov    DWORD PTR [eax],edx
c000cdac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdb0:	83 ec 0c             	sub    esp,0xc
c000cdb3:	50                   	push   eax
c000cdb4:	e8 89 fa ff ff       	call   c000c842 <Device::~Device()>
c000cdb9:	83 c4 10             	add    esp,0x10
c000cdbc:	90                   	nop
c000cdbd:	83 c4 0c             	add    esp,0xc
c000cdc0:	c3                   	ret    
c000cdc1:	90                   	nop

c000cdc2 <PhysicalDisk::~PhysicalDisk()>:
c000cdc2:	83 ec 0c             	sub    esp,0xc
c000cdc5:	83 ec 0c             	sub    esp,0xc
c000cdc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdcc:	e8 cd ff ff ff       	call   c000cd9e <PhysicalDisk::~PhysicalDisk()>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	83 ec 08             	sub    esp,0x8
c000cdd7:	68 6c 01 00 00       	push   0x16c
c000cddc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cde0:	e8 27 da ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000cde5:	83 c4 10             	add    esp,0x10
c000cde8:	83 c4 0c             	add    esp,0xc
c000cdeb:	c3                   	ret    

c000cdec <int_handler>:
c000cdec:	55                   	push   ebp
c000cded:	57                   	push   edi
c000cdee:	56                   	push   esi
c000cdef:	53                   	push   ebx
c000cdf0:	83 ec 0c             	sub    esp,0xc
c000cdf3:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000cdfa:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000cdfe:	74 0b                	je     c000ce0b <int_handler+0x1f>
c000ce00:	fa                   	cli    
c000ce01:	f4                   	hlt    
c000ce02:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ce09:	75 f5                	jne    c000ce00 <int_handler+0x14>
c000ce0b:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000ce0e:	8d 46 e0             	lea    eax,[esi-0x20]
c000ce11:	83 f8 17             	cmp    eax,0x17
c000ce14:	76 40                	jbe    c000ce56 <int_handler+0x6a>
c000ce16:	c1 e6 04             	shl    esi,0x4
c000ce19:	31 db                	xor    ebx,ebx
c000ce1b:	8d ae 20 a4 02 c0    	lea    ebp,[esi-0x3ffd5be0]
c000ce21:	81 c6 20 94 02 c0    	add    esi,0xc0029420
c000ce27:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000ce2b:	85 c0                	test   eax,eax
c000ce2d:	74 13                	je     c000ce42 <int_handler+0x56>
c000ce2f:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000ce33:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000ce36:	74 2c                	je     c000ce64 <int_handler+0x78>
c000ce38:	83 ec 08             	sub    esp,0x8
c000ce3b:	52                   	push   edx
c000ce3c:	57                   	push   edi
c000ce3d:	ff d0                	call   eax
c000ce3f:	83 c4 10             	add    esp,0x10
c000ce42:	83 c3 01             	add    ebx,0x1
c000ce45:	83 fb 04             	cmp    ebx,0x4
c000ce48:	75 dd                	jne    c000ce27 <int_handler+0x3b>
c000ce4a:	83 c4 0c             	add    esp,0xc
c000ce4d:	31 c0                	xor    eax,eax
c000ce4f:	5b                   	pop    ebx
c000ce50:	31 d2                	xor    edx,edx
c000ce52:	5e                   	pop    esi
c000ce53:	5f                   	pop    edi
c000ce54:	5d                   	pop    ebp
c000ce55:	c3                   	ret    
c000ce56:	83 ec 0c             	sub    esp,0xc
c000ce59:	50                   	push   eax
c000ce5a:	e8 23 b4 00 00       	call   c0018282 <HalEndOfInterrupt(int)>
c000ce5f:	83 c4 10             	add    esp,0x10
c000ce62:	eb b2                	jmp    c000ce16 <int_handler+0x2a>
c000ce64:	83 ec 08             	sub    esp,0x8
c000ce67:	52                   	push   edx
c000ce68:	57                   	push   edi
c000ce69:	ff d0                	call   eax
c000ce6b:	83 c4 10             	add    esp,0x10
c000ce6e:	83 c4 0c             	add    esp,0xc
c000ce71:	5b                   	pop    ebx
c000ce72:	5e                   	pop    esi
c000ce73:	5f                   	pop    edi
c000ce74:	5d                   	pop    ebp
c000ce75:	c3                   	ret    

c000ce76 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000ce76:	56                   	push   esi
c000ce77:	31 c0                	xor    eax,eax
c000ce79:	53                   	push   ebx
c000ce7a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ce7e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ce82:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ce86:	89 ca                	mov    edx,ecx
c000ce88:	c1 e2 04             	shl    edx,0x4
c000ce8b:	83 bc 82 20 a4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5be0],0x0
c000ce93:	74 17                	je     c000ceac <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000ce95:	83 c0 01             	add    eax,0x1
c000ce98:	83 f8 04             	cmp    eax,0x4
c000ce9b:	75 ee                	jne    c000ce8b <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000ce9d:	c7 44 24 0c e4 1a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021ae4
c000cea5:	5b                   	pop    ebx
c000cea6:	5e                   	pop    esi
c000cea7:	e9 5b 46 00 00       	jmp    c0011507 <KePanic(char const*)>
c000ceac:	8d 04 88             	lea    eax,[eax+ecx*4]
c000ceaf:	89 1c 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],ebx
c000ceb6:	5b                   	pop    ebx
c000ceb7:	89 34 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],esi
c000cebe:	5e                   	pop    esi
c000cebf:	c3                   	ret    

c000cec0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cec0:	55                   	push   ebp
c000cec1:	57                   	push   edi
c000cec2:	56                   	push   esi
c000cec3:	53                   	push   ebx
c000cec4:	83 ec 0c             	sub    esp,0xc
c000cec7:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000cecd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ced1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ced5:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cedc:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cedf:	74 57                	je     c000cf38 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cee1:	84 c0                	test   al,al
c000cee3:	89 c7                	mov    edi,eax
c000cee5:	74 1d                	je     c000cf04 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cee7:	83 fe 0f             	cmp    esi,0xf
c000ceea:	0f 8f d9 00 00 00    	jg     c000cfc9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000cef0:	0f b6 b6 e8 35 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdca18]
c000cef7:	0f b7 bc 36 c0 bb 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd4440]
c000ceff:	d1 ef                	shr    edi,1
c000cf01:	83 e7 01             	and    edi,0x1
c000cf04:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cf09:	83 ec 08             	sub    esp,0x8
c000cf0c:	31 db                	xor    ebx,ebx
c000cf0e:	50                   	push   eax
c000cf0f:	68 f1 1a 02 c0       	push   0xc0021af1
c000cf14:	e8 f1 d9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000cf19:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cf1e:	83 c4 10             	add    esp,0x10
c000cf21:	85 c0                	test   eax,eax
c000cf23:	7f 59                	jg     c000cf7e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000cf25:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cf28:	83 ec 0c             	sub    esp,0xc
c000cf2b:	68 08 1b 02 c0       	push   0xc0021b08
c000cf30:	e8 d2 45 00 00       	call   c0011507 <KePanic(char const*)>
c000cf35:	83 c4 10             	add    esp,0x10
c000cf38:	89 e8                	mov    eax,ebp
c000cf3a:	31 d2                	xor    edx,edx
c000cf3c:	c1 e0 04             	shl    eax,0x4
c000cf3f:	8b 8c 90 20 a4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5be0]
c000cf46:	85 c9                	test   ecx,ecx
c000cf48:	0f 84 92 00 00 00    	je     c000cfe0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000cf4e:	83 c2 01             	add    edx,0x1
c000cf51:	83 fa 04             	cmp    edx,0x4
c000cf54:	75 e9                	jne    c000cf3f <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	68 5c 1b 02 c0       	push   0xc0021b5c
c000cf5e:	e8 a4 45 00 00       	call   c0011507 <KePanic(char const*)>
c000cf63:	83 c4 10             	add    esp,0x10
c000cf66:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cf6b:	83 c4 0c             	add    esp,0xc
c000cf6e:	5b                   	pop    ebx
c000cf6f:	5e                   	pop    esi
c000cf70:	5f                   	pop    edi
c000cf71:	5d                   	pop    ebp
c000cf72:	c3                   	ret    
c000cf73:	83 c3 01             	add    ebx,0x1
c000cf76:	39 1d c0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c0,ebx
c000cf7c:	7e a7                	jle    c000cf25 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000cf7e:	8b 2c 9d e0 d0 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd2f20]
c000cf85:	83 ec 08             	sub    esp,0x8
c000cf88:	56                   	push   esi
c000cf89:	55                   	push   ebp
c000cf8a:	e8 dd 1a 01 00       	call   c001ea6c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cf8f:	83 c4 10             	add    esp,0x10
c000cf92:	84 c0                	test   al,al
c000cf94:	74 dd                	je     c000cf73 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cf96:	89 f8                	mov    eax,edi
c000cf98:	83 ec 04             	sub    esp,0x4
c000cf9b:	8b 1c 9d e0 d0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f20]
c000cfa2:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cfa5:	0f b6 f8             	movzx  edi,al
c000cfa8:	57                   	push   edi
c000cfa9:	89 e8                	mov    eax,ebp
c000cfab:	6a 00                	push   0x0
c000cfad:	0f b6 c0             	movzx  eax,al
c000cfb0:	50                   	push   eax
c000cfb1:	89 f0                	mov    eax,esi
c000cfb3:	6a 00                	push   0x0
c000cfb5:	0f b6 c0             	movzx  eax,al
c000cfb8:	6a 00                	push   0x0
c000cfba:	50                   	push   eax
c000cfbb:	53                   	push   ebx
c000cfbc:	e8 17 1c 01 00       	call   c001ebd8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000cfc1:	83 c4 20             	add    esp,0x20
c000cfc4:	e9 6f ff ff ff       	jmp    c000cf38 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cfc9:	83 ec 0c             	sub    esp,0xc
c000cfcc:	31 ff                	xor    edi,edi
c000cfce:	68 24 1b 02 c0       	push   0xc0021b24
c000cfd3:	e8 2f 45 00 00       	call   c0011507 <KePanic(char const*)>
c000cfd8:	83 c4 10             	add    esp,0x10
c000cfdb:	e9 24 ff ff ff       	jmp    c000cf04 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cfe0:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000cfe3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000cfe7:	89 14 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],edx
c000cfee:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cff2:	89 14 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],edx
c000cff9:	83 c4 0c             	add    esp,0xc
c000cffc:	89 f0                	mov    eax,esi
c000cffe:	5b                   	pop    ebx
c000cfff:	5e                   	pop    esi
c000d000:	5f                   	pop    edi
c000d001:	5d                   	pop    ebp
c000d002:	c3                   	ret    

c000d003 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000d003:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d007:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d00b:	c1 e0 04             	shl    eax,0x4
c000d00e:	8d 50 10             	lea    edx,[eax+0x10]
c000d011:	39 88 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ecx
c000d017:	74 08                	je     c000d021 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000d019:	83 c0 04             	add    eax,0x4
c000d01c:	39 d0                	cmp    eax,edx
c000d01e:	75 f1                	jne    c000d011 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000d020:	c3                   	ret    
c000d021:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d02b:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d035:	eb e2                	jmp    c000d019 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000d037 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000d037:	56                   	push   esi
c000d038:	53                   	push   ebx
c000d039:	83 ec 04             	sub    esp,0x4
c000d03c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d041:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d045:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d049:	74 0e                	je     c000d059 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000d04b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000d050:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000d057:	75 34                	jne    c000d08d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000d059:	8d 43 20             	lea    eax,[ebx+0x20]
c000d05c:	c1 e0 04             	shl    eax,0x4
c000d05f:	8d 50 10             	lea    edx,[eax+0x10]
c000d062:	39 b0 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],esi
c000d068:	74 0d                	je     c000d077 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000d06a:	83 c0 04             	add    eax,0x4
c000d06d:	39 d0                	cmp    eax,edx
c000d06f:	75 f1                	jne    c000d062 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000d071:	83 c4 04             	add    esp,0x4
c000d074:	5b                   	pop    ebx
c000d075:	5e                   	pop    esi
c000d076:	c3                   	ret    
c000d077:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d081:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d08b:	eb dd                	jmp    c000d06a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000d08d:	83 fb 0f             	cmp    ebx,0xf
c000d090:	7f 09                	jg     c000d09b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000d092:	0f b6 9b e8 35 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdca18]
c000d099:	eb be                	jmp    c000d059 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000d09b:	83 ec 0c             	sub    esp,0xc
c000d09e:	68 15 1b 02 c0       	push   0xc0021b15
c000d0a3:	e8 5f 44 00 00       	call   c0011507 <KePanic(char const*)>
c000d0a8:	83 c4 10             	add    esp,0x10
c000d0ab:	eb ac                	jmp    c000d059 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000d0ad <setupINTS()>:
c000d0ad:	31 c0                	xor    eax,eax
c000d0af:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d0b9:	83 c0 10             	add    eax,0x10
c000d0bc:	c7 80 10 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bf0],0x0
c000d0c6:	c7 80 14 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bec],0x0
c000d0d0:	c7 80 14 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bec],0x0
c000d0da:	c7 80 18 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be8],0x0
c000d0e4:	c7 80 18 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be8],0x0
c000d0ee:	c7 80 1c a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be4],0x0
c000d0f8:	c7 80 1c 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be4],0x0
c000d102:	3d 00 10 00 00       	cmp    eax,0x1000
c000d107:	75 a6                	jne    c000d0af <setupINTS()+0x2>
c000d109:	c3                   	ret    

c000d10a <convertLegacyIRQNumber(int)>:
c000d10a:	83 ec 0c             	sub    esp,0xc
c000d10d:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000d113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d117:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000d11e:	74 0c                	je     c000d12c <convertLegacyIRQNumber(int)+0x22>
c000d120:	83 f8 0f             	cmp    eax,0xf
c000d123:	7f 0b                	jg     c000d130 <convertLegacyIRQNumber(int)+0x26>
c000d125:	0f b6 80 e8 35 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdca18]
c000d12c:	83 c4 0c             	add    esp,0xc
c000d12f:	c3                   	ret    
c000d130:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d134:	83 ec 0c             	sub    esp,0xc
c000d137:	68 24 1b 02 c0       	push   0xc0021b24
c000d13c:	e8 c6 43 00 00       	call   c0011507 <KePanic(char const*)>
c000d141:	83 c4 10             	add    esp,0x10
c000d144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d148:	83 c4 0c             	add    esp,0xc
c000d14b:	c3                   	ret    

c000d14c <startGUI(void*)>:
c000d14c:	55                   	push   ebp
c000d14d:	89 e5                	mov    ebp,esp
c000d14f:	53                   	push   ebx
c000d150:	83 ec 04             	sub    esp,0x4
c000d153:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d158:	83 e8 01             	sub    eax,0x1
c000d15b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d160:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d165:	85 c0                	test   eax,eax
c000d167:	75 01                	jne    c000d16a <startGUI(void*)+0x1e>
c000d169:	fb                   	sti    
c000d16a:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d170:	83 ec 08             	sub    esp,0x8
c000d173:	6a 01                	push   0x1
c000d175:	68 81 1b 02 c0       	push   0xc0021b81
c000d17a:	e8 e6 83 00 00       	call   c0015565 <Thr::loadDLL(char const*, bool)>
c000d17f:	83 c4 10             	add    esp,0x10
c000d182:	83 ec 08             	sub    esp,0x8
c000d185:	53                   	push   ebx
c000d186:	50                   	push   eax
c000d187:	e8 19 86 00 00       	call   c00157a5 <Thr::executeDLL(unsigned long, void*)>
c000d18c:	83 c4 10             	add    esp,0x10
c000d18f:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d195:	83 ec 08             	sub    esp,0x8
c000d198:	6a 01                	push   0x1
c000d19a:	68 9b 1b 02 c0       	push   0xc0021b9b
c000d19f:	e8 c1 83 00 00       	call   c0015565 <Thr::loadDLL(char const*, bool)>
c000d1a4:	83 c4 10             	add    esp,0x10
c000d1a7:	83 ec 08             	sub    esp,0x8
c000d1aa:	53                   	push   ebx
c000d1ab:	50                   	push   eax
c000d1ac:	e8 f4 85 00 00       	call   c00157a5 <Thr::executeDLL(unsigned long, void*)>
c000d1b1:	83 c4 10             	add    esp,0x10
c000d1b4:	90                   	nop
c000d1b5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d1b8:	c9                   	leave  
c000d1b9:	c3                   	ret    

c000d1ba <startGUIVESA(void*)>:
c000d1ba:	55                   	push   ebp
c000d1bb:	89 e5                	mov    ebp,esp
c000d1bd:	53                   	push   ebx
c000d1be:	83 ec 04             	sub    esp,0x4
c000d1c1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1c6:	83 e8 01             	sub    eax,0x1
c000d1c9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d1ce:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1d3:	85 c0                	test   eax,eax
c000d1d5:	75 01                	jne    c000d1d8 <startGUIVESA(void*)+0x1e>
c000d1d7:	fb                   	sti    
c000d1d8:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d1de:	83 ec 08             	sub    esp,0x8
c000d1e1:	6a 01                	push   0x1
c000d1e3:	68 b9 1b 02 c0       	push   0xc0021bb9
c000d1e8:	e8 78 83 00 00       	call   c0015565 <Thr::loadDLL(char const*, bool)>
c000d1ed:	83 c4 10             	add    esp,0x10
c000d1f0:	83 ec 08             	sub    esp,0x8
c000d1f3:	53                   	push   ebx
c000d1f4:	50                   	push   eax
c000d1f5:	e8 ab 85 00 00       	call   c00157a5 <Thr::executeDLL(unsigned long, void*)>
c000d1fa:	83 c4 10             	add    esp,0x10
c000d1fd:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d203:	83 ec 08             	sub    esp,0x8
c000d206:	6a 01                	push   0x1
c000d208:	68 9b 1b 02 c0       	push   0xc0021b9b
c000d20d:	e8 53 83 00 00       	call   c0015565 <Thr::loadDLL(char const*, bool)>
c000d212:	83 c4 10             	add    esp,0x10
c000d215:	83 ec 08             	sub    esp,0x8
c000d218:	53                   	push   ebx
c000d219:	50                   	push   eax
c000d21a:	e8 86 85 00 00       	call   c00157a5 <Thr::executeDLL(unsigned long, void*)>
c000d21f:	83 c4 10             	add    esp,0x10
c000d222:	90                   	nop
c000d223:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d226:	c9                   	leave  
c000d227:	c3                   	ret    

c000d228 <sendKeyToTerminal(unsigned char)>:
c000d228:	55                   	push   ebp
c000d229:	89 e5                	mov    ebp,esp
c000d22b:	83 ec 28             	sub    esp,0x28
c000d22e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d231:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d234:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000d239:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d23d:	83 ec 08             	sub    esp,0x8
c000d240:	52                   	push   edx
c000d241:	50                   	push   eax
c000d242:	e8 75 bb ff ff       	call   c0008dbc <VgaText::receiveKey(unsigned char)>
c000d247:	83 c4 10             	add    esp,0x10
c000d24a:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d24e:	83 f8 0a             	cmp    eax,0xa
c000d251:	74 16                	je     c000d269 <sendKeyToTerminal(unsigned char)+0x41>
c000d253:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d257:	83 f8 03             	cmp    eax,0x3
c000d25a:	74 0d                	je     c000d269 <sendKeyToTerminal(unsigned char)+0x41>
c000d25c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d260:	83 f8 1c             	cmp    eax,0x1c
c000d263:	0f 85 97 00 00 00    	jne    c000d300 <sendKeyToTerminal(unsigned char)+0xd8>
c000d269:	fa                   	cli    
c000d26a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d26f:	83 c0 01             	add    eax,0x1
c000d272:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d277:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d27c:	83 c0 01             	add    eax,0x1
c000d27f:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d284:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c000d289:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d28c:	c7 05 20 b4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b420,0x0
c000d296:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d29a:	74 1f                	je     c000d2bb <sendKeyToTerminal(unsigned char)+0x93>
c000d29c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d29f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d2a2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d2a5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d2a8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d2ab:	83 ec 0c             	sub    esp,0xc
c000d2ae:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d2b1:	e8 12 92 00 00       	call   c00164c8 <unblockTask(ThreadControlBlock*)>
c000d2b6:	83 c4 10             	add    esp,0x10
c000d2b9:	eb db                	jmp    c000d296 <sendKeyToTerminal(unsigned char)+0x6e>
c000d2bb:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d2c0:	83 e8 01             	sub    eax,0x1
c000d2c3:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d2c8:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d2cd:	85 c0                	test   eax,eax
c000d2cf:	75 18                	jne    c000d2e9 <sendKeyToTerminal(unsigned char)+0xc1>
c000d2d1:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c000d2d6:	85 c0                	test   eax,eax
c000d2d8:	74 0f                	je     c000d2e9 <sendKeyToTerminal(unsigned char)+0xc1>
c000d2da:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000d2e4:	e8 e7 8c 00 00       	call   c0015fd0 <schedule()>
c000d2e9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d2ee:	83 e8 01             	sub    eax,0x1
c000d2f1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d2f6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d2fb:	85 c0                	test   eax,eax
c000d2fd:	75 01                	jne    c000d300 <sendKeyToTerminal(unsigned char)+0xd8>
c000d2ff:	fb                   	sti    
c000d300:	90                   	nop
c000d301:	c9                   	leave  
c000d302:	c3                   	ret    

c000d303 <sendKeyboardToken(KeyboardToken)>:
c000d303:	55                   	push   ebp
c000d304:	89 e5                	mov    ebp,esp
c000d306:	83 ec 18             	sub    esp,0x18
c000d309:	e8 49 42 00 00       	call   c0011557 <KeUserIOReceived()>
c000d30e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d311:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d314:	0f b7 c0             	movzx  eax,ax
c000d317:	83 f2 01             	xor    edx,0x1
c000d31a:	88 90 40 b4 02 c0    	mov    BYTE PTR [eax-0x3ffd4bc0],dl
c000d320:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d325:	85 c0                	test   eax,eax
c000d327:	74 24                	je     c000d34d <sendKeyboardToken(KeyboardToken)+0x4a>
c000d329:	8b 15 28 b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b428
c000d32f:	83 ec 04             	sub    esp,0x4
c000d332:	68 40 b4 02 c0       	push   0xc002b440
c000d337:	83 ec 08             	sub    esp,0x8
c000d33a:	89 e0                	mov    eax,esp
c000d33c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000d33f:	89 08                	mov    DWORD PTR [eax],ecx
c000d341:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000d344:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d348:	ff d2                	call   edx
c000d34a:	83 c4 10             	add    esp,0x10
c000d34d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d351:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d354:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d359:	0f b6 d2             	movzx  edx,dl
c000d35c:	0f b6 c0             	movzx  eax,al
c000d35f:	39 c2                	cmp    edx,eax
c000d361:	74 1c                	je     c000d37f <sendKeyboardToken(KeyboardToken)+0x7c>
c000d363:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d366:	a2 48 b8 02 c0       	mov    ds:0xc002b848,al
c000d36b:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d370:	0f b6 c0             	movzx  eax,al
c000d373:	83 ec 0c             	sub    esp,0xc
c000d376:	50                   	push   eax
c000d377:	e8 9c b1 ff ff       	call   c0008518 <setTerminalScrollLock(bool)>
c000d37c:	83 c4 10             	add    esp,0x10
c000d37f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d382:	0f b6 c0             	movzx  eax,al
c000d385:	85 c0                	test   eax,eax
c000d387:	0f 84 da 00 00 00    	je     c000d467 <sendKeyboardToken(KeyboardToken)+0x164>
c000d38d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d390:	0f b7 c0             	movzx  eax,ax
c000d393:	3d 18 03 00 00       	cmp    eax,0x318
c000d398:	75 06                	jne    c000d3a0 <sendKeyboardToken(KeyboardToken)+0x9d>
c000d39a:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d3a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3a3:	0f b7 c0             	movzx  eax,ax
c000d3a6:	3d 19 03 00 00       	cmp    eax,0x319
c000d3ab:	75 06                	jne    c000d3b3 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d3ad:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d3b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3b6:	0f b7 c0             	movzx  eax,ax
c000d3b9:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d3be:	75 06                	jne    c000d3c6 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d3c0:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d3c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3c9:	0f b7 c0             	movzx  eax,ax
c000d3cc:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d3d1:	75 06                	jne    c000d3d9 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d3d3:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d3d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3dc:	0f b7 c0             	movzx  eax,ax
c000d3df:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d3e4:	75 06                	jne    c000d3ec <sendKeyboardToken(KeyboardToken)+0xe9>
c000d3e6:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d3ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3ef:	0f b7 c0             	movzx  eax,ax
c000d3f2:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d3f7:	75 06                	jne    c000d3ff <sendKeyboardToken(KeyboardToken)+0xfc>
c000d3f9:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d3ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d402:	0f b7 c0             	movzx  eax,ax
c000d405:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d40a:	75 06                	jne    c000d412 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d40c:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d412:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d415:	0f b7 c0             	movzx  eax,ax
c000d418:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d41d:	75 06                	jne    c000d425 <sendKeyboardToken(KeyboardToken)+0x122>
c000d41f:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d425:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d428:	0f b7 c0             	movzx  eax,ax
c000d42b:	3d 20 03 00 00       	cmp    eax,0x320
c000d430:	75 06                	jne    c000d438 <sendKeyboardToken(KeyboardToken)+0x135>
c000d432:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d438:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d43b:	0f b7 c0             	movzx  eax,ax
c000d43e:	3d 21 03 00 00       	cmp    eax,0x321
c000d443:	75 06                	jne    c000d44b <sendKeyboardToken(KeyboardToken)+0x148>
c000d445:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d44b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d44e:	0f b7 c0             	movzx  eax,ax
c000d451:	3d 22 03 00 00       	cmp    eax,0x322
c000d456:	0f 85 f1 00 00 00    	jne    c000d54d <sendKeyboardToken(KeyboardToken)+0x24a>
c000d45c:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d462:	e9 e6 00 00 00       	jmp    c000d54d <sendKeyboardToken(KeyboardToken)+0x24a>
c000d467:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d46a:	0f b7 c0             	movzx  eax,ax
c000d46d:	3d 18 03 00 00       	cmp    eax,0x318
c000d472:	75 0a                	jne    c000d47e <sendKeyboardToken(KeyboardToken)+0x17b>
c000d474:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d47a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d47e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d481:	0f b7 c0             	movzx  eax,ax
c000d484:	3d 19 03 00 00       	cmp    eax,0x319
c000d489:	75 0a                	jne    c000d495 <sendKeyboardToken(KeyboardToken)+0x192>
c000d48b:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d491:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d498:	0f b7 c0             	movzx  eax,ax
c000d49b:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d4a0:	75 0a                	jne    c000d4ac <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d4a2:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d4a8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d4ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4af:	0f b7 c0             	movzx  eax,ax
c000d4b2:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d4b7:	75 0a                	jne    c000d4c3 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d4b9:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d4bf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d4c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4c6:	0f b7 c0             	movzx  eax,ax
c000d4c9:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d4ce:	75 0a                	jne    c000d4da <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d4d0:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d4d6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d4da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4dd:	0f b7 c0             	movzx  eax,ax
c000d4e0:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d4e5:	75 0a                	jne    c000d4f1 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d4e7:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d4ed:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d4f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4f4:	0f b7 c0             	movzx  eax,ax
c000d4f7:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d4fc:	75 0a                	jne    c000d508 <sendKeyboardToken(KeyboardToken)+0x205>
c000d4fe:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d504:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d508:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d50b:	0f b7 c0             	movzx  eax,ax
c000d50e:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d513:	75 0a                	jne    c000d51f <sendKeyboardToken(KeyboardToken)+0x21c>
c000d515:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d51b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d51f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d522:	0f b7 c0             	movzx  eax,ax
c000d525:	3d 20 03 00 00       	cmp    eax,0x320
c000d52a:	75 0a                	jne    c000d536 <sendKeyboardToken(KeyboardToken)+0x233>
c000d52c:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d532:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d536:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d539:	0f b7 c0             	movzx  eax,ax
c000d53c:	3d 21 03 00 00       	cmp    eax,0x321
c000d541:	75 0a                	jne    c000d54d <sendKeyboardToken(KeyboardToken)+0x24a>
c000d543:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d549:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d54d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d550:	0f b7 c0             	movzx  eax,ax
c000d553:	3d 00 02 00 00       	cmp    eax,0x200
c000d558:	75 2f                	jne    c000d589 <sendKeyboardToken(KeyboardToken)+0x286>
c000d55a:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d55f:	83 f0 01             	xor    eax,0x1
c000d562:	0f b6 c0             	movzx  eax,al
c000d565:	85 c0                	test   eax,eax
c000d567:	74 20                	je     c000d589 <sendKeyboardToken(KeyboardToken)+0x286>
c000d569:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d56e:	6a 01                	push   0x1
c000d570:	6a 00                	push   0x0
c000d572:	68 4c d1 00 c0       	push   0xc000d14c
c000d577:	50                   	push   eax
c000d578:	e8 07 88 00 00       	call   c0015d84 <Process::createThread(void (*)(void*), void*, int)>
c000d57d:	83 c4 10             	add    esp,0x10
c000d580:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d587:	eb 3a                	jmp    c000d5c3 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d589:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d58c:	0f b7 c0             	movzx  eax,ax
c000d58f:	3d 01 02 00 00       	cmp    eax,0x201
c000d594:	75 2d                	jne    c000d5c3 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d596:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d59b:	83 f0 01             	xor    eax,0x1
c000d59e:	0f b6 c0             	movzx  eax,al
c000d5a1:	85 c0                	test   eax,eax
c000d5a3:	74 1e                	je     c000d5c3 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d5a5:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d5aa:	6a 01                	push   0x1
c000d5ac:	6a 00                	push   0x0
c000d5ae:	68 ba d1 00 c0       	push   0xc000d1ba
c000d5b3:	50                   	push   eax
c000d5b4:	e8 cb 87 00 00       	call   c0015d84 <Process::createThread(void (*)(void*), void*, int)>
c000d5b9:	83 c4 10             	add    esp,0x10
c000d5bc:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d5c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5c6:	0f b7 c0             	movzx  eax,ax
c000d5c9:	3d 25 03 00 00       	cmp    eax,0x325
c000d5ce:	75 06                	jne    c000d5d6 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d5d0:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d5d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5d9:	0f b7 c0             	movzx  eax,ax
c000d5dc:	3d 24 03 00 00       	cmp    eax,0x324
c000d5e1:	75 06                	jne    c000d5e9 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d5e3:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d5e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5ec:	0f b7 c0             	movzx  eax,ax
c000d5ef:	3d 23 03 00 00       	cmp    eax,0x323
c000d5f4:	75 06                	jne    c000d5fc <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d5f6:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d5fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5ff:	0f b7 c0             	movzx  eax,ax
c000d602:	3d 26 03 00 00       	cmp    eax,0x326
c000d607:	75 06                	jne    c000d60f <sendKeyboardToken(KeyboardToken)+0x30c>
c000d609:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d60f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d612:	0f b7 c0             	movzx  eax,ax
c000d615:	3d 27 03 00 00       	cmp    eax,0x327
c000d61a:	75 06                	jne    c000d622 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d61c:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d622:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d625:	0f b7 c0             	movzx  eax,ax
c000d628:	3d 22 03 00 00       	cmp    eax,0x322
c000d62d:	75 06                	jne    c000d635 <sendKeyboardToken(KeyboardToken)+0x332>
c000d62f:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d635:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d639:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d63c:	83 f0 01             	xor    eax,0x1
c000d63f:	0f b6 c0             	movzx  eax,al
c000d642:	85 c0                	test   eax,eax
c000d644:	74 7c                	je     c000d6c2 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d646:	a0 41 b5 02 c0       	mov    al,ds:0xc002b541
c000d64b:	0f b6 c0             	movzx  eax,al
c000d64e:	85 c0                	test   eax,eax
c000d650:	74 43                	je     c000d695 <sendKeyboardToken(KeyboardToken)+0x392>
c000d652:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d656:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d65a:	85 c0                	test   eax,eax
c000d65c:	74 2b                	je     c000d689 <sendKeyboardToken(KeyboardToken)+0x386>
c000d65e:	8b 15 44 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b844
c000d664:	89 d0                	mov    eax,edx
c000d666:	c1 e0 02             	shl    eax,0x2
c000d669:	01 d0                	add    eax,edx
c000d66b:	d1 e0                	shl    eax,1
c000d66d:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d672:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d675:	0f b7 c0             	movzx  eax,ax
c000d678:	8d 50 d0             	lea    edx,[eax-0x30]
c000d67b:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d680:	01 d0                	add    eax,edx
c000d682:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d687:	eb 71                	jmp    c000d6fa <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d689:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d693:	eb 65                	jmp    c000d6fa <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d695:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d69a:	85 c0                	test   eax,eax
c000d69c:	74 18                	je     c000d6b6 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d69e:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d6a3:	0f b6 c0             	movzx  eax,al
c000d6a6:	83 ec 0c             	sub    esp,0xc
c000d6a9:	50                   	push   eax
c000d6aa:	e8 79 fb ff ff       	call   c000d228 <sendKeyToTerminal(unsigned char)>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d6b6:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d6c0:	eb 38                	jmp    c000d6fa <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d6c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6c5:	0f b7 c0             	movzx  eax,ax
c000d6c8:	3d 01 01 00 00       	cmp    eax,0x101
c000d6cd:	75 2b                	jne    c000d6fa <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d6cf:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d6d4:	85 c0                	test   eax,eax
c000d6d6:	74 18                	je     c000d6f0 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d6d8:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d6dd:	0f b6 c0             	movzx  eax,al
c000d6e0:	83 ec 0c             	sub    esp,0xc
c000d6e3:	50                   	push   eax
c000d6e4:	e8 3f fb ff ff       	call   c000d228 <sendKeyToTerminal(unsigned char)>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d6f0:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d6fa:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d6fd:	83 f0 01             	xor    eax,0x1
c000d700:	0f b6 c0             	movzx  eax,al
c000d703:	85 c0                	test   eax,eax
c000d705:	74 5a                	je     c000d761 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d707:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d70a:	83 f0 01             	xor    eax,0x1
c000d70d:	0f b6 c0             	movzx  eax,al
c000d710:	85 c0                	test   eax,eax
c000d712:	74 4d                	je     c000d761 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d714:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d719:	83 f0 01             	xor    eax,0x1
c000d71c:	0f b6 c0             	movzx  eax,al
c000d71f:	85 c0                	test   eax,eax
c000d721:	74 3e                	je     c000d761 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d723:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d726:	0f b7 c0             	movzx  eax,ax
c000d729:	83 f8 1f             	cmp    eax,0x1f
c000d72c:	76 0b                	jbe    c000d739 <sendKeyboardToken(KeyboardToken)+0x436>
c000d72e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d731:	0f b7 c0             	movzx  eax,ax
c000d734:	83 f8 7e             	cmp    eax,0x7e
c000d737:	76 16                	jbe    c000d74f <sendKeyboardToken(KeyboardToken)+0x44c>
c000d739:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d73c:	0f b7 c0             	movzx  eax,ax
c000d73f:	83 f8 0a             	cmp    eax,0xa
c000d742:	74 0b                	je     c000d74f <sendKeyboardToken(KeyboardToken)+0x44c>
c000d744:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d747:	0f b7 c0             	movzx  eax,ax
c000d74a:	83 f8 08             	cmp    eax,0x8
c000d74d:	75 12                	jne    c000d761 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d74f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d752:	0f b6 c0             	movzx  eax,al
c000d755:	83 ec 0c             	sub    esp,0xc
c000d758:	50                   	push   eax
c000d759:	e8 ca fa ff ff       	call   c000d228 <sendKeyToTerminal(unsigned char)>
c000d75e:	83 c4 10             	add    esp,0x10
c000d761:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d764:	83 f0 01             	xor    eax,0x1
c000d767:	0f b6 c0             	movzx  eax,al
c000d76a:	85 c0                	test   eax,eax
c000d76c:	74 5d                	je     c000d7cb <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d76e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d771:	83 f0 01             	xor    eax,0x1
c000d774:	0f b6 c0             	movzx  eax,al
c000d777:	85 c0                	test   eax,eax
c000d779:	74 50                	je     c000d7cb <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d77b:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d780:	0f b6 c0             	movzx  eax,al
c000d783:	85 c0                	test   eax,eax
c000d785:	74 44                	je     c000d7cb <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d787:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d78a:	0f b7 c0             	movzx  eax,ax
c000d78d:	83 f8 3f             	cmp    eax,0x3f
c000d790:	76 39                	jbe    c000d7cb <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d792:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d795:	0f b7 c0             	movzx  eax,ax
c000d798:	83 f8 7f             	cmp    eax,0x7f
c000d79b:	77 2e                	ja     c000d7cb <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d79d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7a0:	88 c2                	mov    dl,al
c000d7a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7a5:	0f b7 c0             	movzx  eax,ax
c000d7a8:	83 f8 5f             	cmp    eax,0x5f
c000d7ab:	76 04                	jbe    c000d7b1 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d7ad:	b0 20                	mov    al,0x20
c000d7af:	eb 02                	jmp    c000d7b3 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d7b1:	b0 00                	mov    al,0x0
c000d7b3:	89 d1                	mov    ecx,edx
c000d7b5:	29 c1                	sub    ecx,eax
c000d7b7:	89 c8                	mov    eax,ecx
c000d7b9:	83 e8 40             	sub    eax,0x40
c000d7bc:	0f b6 c0             	movzx  eax,al
c000d7bf:	83 ec 0c             	sub    esp,0xc
c000d7c2:	50                   	push   eax
c000d7c3:	e8 60 fa ff ff       	call   c000d228 <sendKeyToTerminal(unsigned char)>
c000d7c8:	83 c4 10             	add    esp,0x10
c000d7cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7ce:	0f b7 c0             	movzx  eax,ax
c000d7d1:	3d 00 03 00 00       	cmp    eax,0x300
c000d7d6:	75 12                	jne    c000d7ea <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d7d8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d7db:	83 f0 01             	xor    eax,0x1
c000d7de:	0f b6 c0             	movzx  eax,al
c000d7e1:	85 c0                	test   eax,eax
c000d7e3:	74 05                	je     c000d7ea <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d7e5:	e8 2f ad ff ff       	call   c0008519 <doTerminalCycle()>
c000d7ea:	90                   	nop
c000d7eb:	c9                   	leave  
c000d7ec:	c3                   	ret    

c000d7ed <clearInternalKeybuffer(VgaText*)>:
c000d7ed:	55                   	push   ebp
c000d7ee:	89 e5                	mov    ebp,esp
c000d7f0:	83 ec 08             	sub    esp,0x8
c000d7f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7f6:	05 02 01 00 00       	add    eax,0x102
c000d7fb:	83 ec 0c             	sub    esp,0xc
c000d7fe:	50                   	push   eax
c000d7ff:	e8 7c 2d ff ff       	call   c0000580 <strlen>
c000d804:	83 c4 10             	add    esp,0x10
c000d807:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d80a:	81 c2 02 01 00 00    	add    edx,0x102
c000d810:	83 ec 04             	sub    esp,0x4
c000d813:	50                   	push   eax
c000d814:	6a 00                	push   0x0
c000d816:	52                   	push   edx
c000d817:	e8 d4 2c ff ff       	call   c00004f0 <memset>
c000d81c:	83 c4 10             	add    esp,0x10
c000d81f:	90                   	nop
c000d820:	c9                   	leave  
c000d821:	c3                   	ret    

c000d822 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d822:	55                   	push   ebp
c000d823:	89 e5                	mov    ebp,esp
c000d825:	83 ec 18             	sub    esp,0x18
c000d828:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d82d:	85 c0                	test   eax,eax
c000d82f:	74 2a                	je     c000d85b <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d831:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d837:	8b 15 28 b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b428
c000d83d:	83 ec 04             	sub    esp,0x4
c000d840:	68 40 b4 02 c0       	push   0xc002b440
c000d845:	83 ec 08             	sub    esp,0x8
c000d848:	89 e0                	mov    eax,esp
c000d84a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000d84d:	89 08                	mov    DWORD PTR [eax],ecx
c000d84f:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000d852:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d856:	ff d2                	call   edx
c000d858:	83 c4 10             	add    esp,0x10
c000d85b:	fb                   	sti    
c000d85c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d863:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d867:	0f 84 0d 01 00 00    	je     c000d97a <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d86d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d870:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d876:	0f be c0             	movsx  eax,al
c000d879:	85 c0                	test   eax,eax
c000d87b:	75 2c                	jne    c000d8a9 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d87d:	fa                   	cli    
c000d87e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d883:	83 c0 01             	add    eax,0x1
c000d886:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d88b:	e8 40 87 00 00       	call   c0015fd0 <schedule()>
c000d890:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d895:	83 e8 01             	sub    eax,0x1
c000d898:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d89d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d8a2:	85 c0                	test   eax,eax
c000d8a4:	75 c7                	jne    c000d86d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d8a6:	fb                   	sti    
c000d8a7:	eb c4                	jmp    c000d86d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d8a9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d8ac:	8d 50 01             	lea    edx,[eax+0x1]
c000d8af:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d8b2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d8b5:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d8bb:	88 10                	mov    BYTE PTR [eax],dl
c000d8bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8c0:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d8c6:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d8c9:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d8cd:	83 f8 03             	cmp    eax,0x3
c000d8d0:	75 1e                	jne    c000d8f0 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d8d2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d8d7:	8b 00                	mov    eax,DWORD PTR [eax]
c000d8d9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d8dc:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d8e2:	83 ec 08             	sub    esp,0x8
c000d8e5:	6a 02                	push   0x2
c000d8e7:	50                   	push   eax
c000d8e8:	e8 b6 40 00 00       	call   c00119a3 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d8ed:	83 c4 10             	add    esp,0x10
c000d8f0:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d8f4:	83 f8 1c             	cmp    eax,0x1c
c000d8f7:	75 1e                	jne    c000d917 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d8f9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d8fe:	8b 00                	mov    eax,DWORD PTR [eax]
c000d900:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d903:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d909:	83 ec 08             	sub    esp,0x8
c000d90c:	6a 09                	push   0x9
c000d90e:	50                   	push   eax
c000d90f:	e8 8f 40 00 00       	call   c00119a3 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d914:	83 c4 10             	add    esp,0x10
c000d917:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d91a:	05 02 01 00 00       	add    eax,0x102
c000d91f:	83 ec 0c             	sub    esp,0xc
c000d922:	50                   	push   eax
c000d923:	e8 58 2c ff ff       	call   c0000580 <strlen>
c000d928:	83 c4 10             	add    esp,0x10
c000d92b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d92e:	81 c2 02 01 00 00    	add    edx,0x102
c000d934:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d937:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d93a:	81 c2 02 01 00 00    	add    edx,0x102
c000d940:	83 ec 04             	sub    esp,0x4
c000d943:	50                   	push   eax
c000d944:	51                   	push   ecx
c000d945:	52                   	push   edx
c000d946:	e8 85 2a ff ff       	call   c00003d0 <memmove>
c000d94b:	83 c4 10             	add    esp,0x10
c000d94e:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d952:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d956:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d95a:	83 f8 0a             	cmp    eax,0xa
c000d95d:	74 16                	je     c000d975 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d95f:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d963:	83 f8 03             	cmp    eax,0x3
c000d966:	74 0d                	je     c000d975 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d968:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d96c:	83 f8 1c             	cmp    eax,0x1c
c000d96f:	0f 85 ee fe ff ff    	jne    c000d863 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d975:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d978:	eb 03                	jmp    c000d97d <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d97a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d97d:	c9                   	leave  
c000d97e:	c3                   	ret    
c000d97f:	90                   	nop

c000d980 <Keyboard::Keyboard(char const*)>:
c000d980:	83 ec 0c             	sub    esp,0xc
c000d983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d987:	83 ec 08             	sub    esp,0x8
c000d98a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d98e:	50                   	push   eax
c000d98f:	e8 44 f1 ff ff       	call   c000cad8 <Device::Device(char const*)>
c000d994:	83 c4 10             	add    esp,0x10
c000d997:	ba dc 1b 02 c0       	mov    edx,0xc0021bdc
c000d99c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9a0:	89 10                	mov    DWORD PTR [eax],edx
c000d9a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9a6:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d9b0:	c6 05 24 b4 02 c0 01 	mov    BYTE PTR ds:0xc002b424,0x1
c000d9b7:	90                   	nop
c000d9b8:	83 c4 0c             	add    esp,0xc
c000d9bb:	c3                   	ret    

c000d9bc <Keyboard::~Keyboard()>:
c000d9bc:	83 ec 0c             	sub    esp,0xc
c000d9bf:	ba dc 1b 02 c0       	mov    edx,0xc0021bdc
c000d9c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9c8:	89 10                	mov    DWORD PTR [eax],edx
c000d9ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9ce:	83 ec 0c             	sub    esp,0xc
c000d9d1:	50                   	push   eax
c000d9d2:	e8 6b ee ff ff       	call   c000c842 <Device::~Device()>
c000d9d7:	83 c4 10             	add    esp,0x10
c000d9da:	90                   	nop
c000d9db:	83 c4 0c             	add    esp,0xc
c000d9de:	c3                   	ret    
c000d9df:	90                   	nop

c000d9e0 <Keyboard::~Keyboard()>:
c000d9e0:	83 ec 0c             	sub    esp,0xc
c000d9e3:	83 ec 0c             	sub    esp,0xc
c000d9e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ea:	e8 cd ff ff ff       	call   c000d9bc <Keyboard::~Keyboard()>
c000d9ef:	83 c4 10             	add    esp,0x10
c000d9f2:	83 ec 08             	sub    esp,0x8
c000d9f5:	68 5c 01 00 00       	push   0x15c
c000d9fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9fe:	e8 09 ce ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000da03:	83 c4 10             	add    esp,0x10
c000da06:	83 c4 0c             	add    esp,0xc
c000da09:	c3                   	ret    

c000da0a <LogicalDisk::close(int, int, void*)>:
c000da0a:	83 c8 ff             	or     eax,0xffffffff
c000da0d:	c3                   	ret    

c000da0e <LogicalDisk::~LogicalDisk()>:
c000da0e:	83 ec 0c             	sub    esp,0xc
c000da11:	ba 54 1c 02 c0       	mov    edx,0xc0021c54
c000da16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da1a:	89 10                	mov    DWORD PTR [eax],edx
c000da1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da20:	83 ec 0c             	sub    esp,0xc
c000da23:	50                   	push   eax
c000da24:	e8 19 ee ff ff       	call   c000c842 <Device::~Device()>
c000da29:	83 c4 10             	add    esp,0x10
c000da2c:	90                   	nop
c000da2d:	83 c4 0c             	add    esp,0xc
c000da30:	c3                   	ret    
c000da31:	90                   	nop

c000da32 <LogicalDisk::~LogicalDisk()>:
c000da32:	83 ec 0c             	sub    esp,0xc
c000da35:	83 ec 0c             	sub    esp,0xc
c000da38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da3c:	e8 cd ff ff ff       	call   c000da0e <LogicalDisk::~LogicalDisk()>
c000da41:	83 c4 10             	add    esp,0x10
c000da44:	83 ec 08             	sub    esp,0x8
c000da47:	68 78 01 00 00       	push   0x178
c000da4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da50:	e8 b7 cd ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	83 c4 0c             	add    esp,0xc
c000da5b:	c3                   	ret    

c000da5c <LogicalDisk::open(int, int, void*)>:
c000da5c:	83 ec 18             	sub    esp,0x18
c000da5f:	68 08 1c 02 c0       	push   0xc0021c08
c000da64:	e8 9e 3a 00 00       	call   c0011507 <KePanic(char const*)>
c000da69:	83 c8 ff             	or     eax,0xffffffff
c000da6c:	83 c4 1c             	add    esp,0x1c
c000da6f:	c3                   	ret    

c000da70 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000da70:	53                   	push   ebx
c000da71:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000da75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da79:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000da7d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000da83:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000da89:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000da8f:	77 10                	ja     c000daa1 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000da91:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000da97:	89 d3                	mov    ebx,edx
c000da99:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000da9f:	72 05                	jb     c000daa6 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000daa1:	83 c8 ff             	or     eax,0xffffffff
c000daa4:	89 c2                	mov    edx,eax
c000daa6:	5b                   	pop    ebx
c000daa7:	c3                   	ret    

c000daa8 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000daa8:	56                   	push   esi
c000daa9:	83 c8 ff             	or     eax,0xffffffff
c000daac:	53                   	push   ebx
c000daad:	89 c2                	mov    edx,eax
c000daaf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000dab3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dab7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dabb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dac1:	77 27                	ja     c000daea <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000dac3:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000dac9:	89 d8                	mov    eax,ebx
c000dacb:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000dad1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dad6:	89 c2                	mov    edx,eax
c000dad8:	73 10                	jae    c000daea <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000dada:	89 c8                	mov    eax,ecx
c000dadc:	89 da                	mov    edx,ebx
c000dade:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000dae4:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000daea:	5b                   	pop    ebx
c000daeb:	5e                   	pop    esi
c000daec:	c3                   	ret    
c000daed:	90                   	nop

c000daee <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000daee:	83 ec 1c             	sub    esp,0x1c
c000daf1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000daf5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000daf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dafd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db01:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db05:	89 04 24             	mov    DWORD PTR [esp],eax
c000db08:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000db0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000db10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db14:	83 ec 08             	sub    esp,0x8
c000db17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db1b:	50                   	push   eax
c000db1c:	e8 b7 ef ff ff       	call   c000cad8 <Device::Device(char const*)>
c000db21:	83 c4 10             	add    esp,0x10
c000db24:	ba 54 1c 02 c0       	mov    edx,0xc0021c54
c000db29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db2d:	89 10                	mov    DWORD PTR [eax],edx
c000db2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db33:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000db3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db3e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000db45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db49:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000db50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db54:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000db5e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000db62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000db66:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000db6a:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000db70:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000db76:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000db7a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000db7d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000db81:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000db87:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000db8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db91:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000db95:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000db9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db9f:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dba9:	90                   	nop
c000dbaa:	83 c4 1c             	add    esp,0x1c
c000dbad:	c3                   	ret    

c000dbae <LogicalDisk::assignDriveLetter()>:
c000dbae:	55                   	push   ebp
c000dbaf:	57                   	push   edi
c000dbb0:	56                   	push   esi
c000dbb1:	53                   	push   ebx
c000dbb2:	83 ec 14             	sub    esp,0x14
c000dbb5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dbb9:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000dbbf:	b0 41                	mov    al,0x41
c000dbc1:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000dbc7:	84 d2                	test   dl,dl
c000dbc9:	75 02                	jne    c000dbcd <LogicalDisk::assignDriveLetter()+0x1f>
c000dbcb:	b0 43                	mov    al,0x43
c000dbcd:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c000dbd3:	0f b6 ca             	movzx  ecx,dl
c000dbd6:	0f be e8             	movsx  ebp,al
c000dbd9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dbdd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000dbe1:	8b 3d 64 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b864
c000dbe7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dbeb:	3c 43                	cmp    al,0x43
c000dbed:	75 10                	jne    c000dbff <LogicalDisk::assignDriveLetter()+0x51>
c000dbef:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000dbf6:	75 5a                	jne    c000dc52 <LogicalDisk::assignDriveLetter()+0xa4>
c000dbf8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000dbfd:	75 53                	jne    c000dc52 <LogicalDisk::assignDriveLetter()+0xa4>
c000dbff:	8d 75 bf             	lea    esi,[ebp-0x41]
c000dc02:	ba 01 00 00 00       	mov    edx,0x1
c000dc07:	89 34 24             	mov    DWORD PTR [esp],esi
c000dc0a:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000dc0d:	d3 e2                	shl    edx,cl
c000dc0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dc13:	89 d7                	mov    edi,edx
c000dc15:	89 d6                	mov    esi,edx
c000dc17:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000dc1b:	c1 ff 1f             	sar    edi,0x1f
c000dc1e:	21 f9                	and    ecx,edi
c000dc20:	09 d1                	or     ecx,edx
c000dc22:	75 2e                	jne    c000dc52 <LogicalDisk::assignDriveLetter()+0xa4>
c000dc24:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc28:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000dc2c:	09 f2                	or     edx,esi
c000dc2e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dc31:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c000dc37:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dc3b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000dc41:	89 1c b5 80 b8 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4780],ebx
c000dc48:	09 fa                	or     edx,edi
c000dc4a:	89 15 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,edx
c000dc50:	eb 0d                	jmp    c000dc5f <LogicalDisk::assignDriveLetter()+0xb1>
c000dc52:	8d 50 01             	lea    edx,[eax+0x1]
c000dc55:	45                   	inc    ebp
c000dc56:	80 fa 5b             	cmp    dl,0x5b
c000dc59:	88 d0                	mov    al,dl
c000dc5b:	75 8e                	jne    c000dbeb <LogicalDisk::assignDriveLetter()+0x3d>
c000dc5d:	31 c0                	xor    eax,eax
c000dc5f:	83 c4 14             	add    esp,0x14
c000dc62:	5b                   	pop    ebx
c000dc63:	5e                   	pop    esi
c000dc64:	5f                   	pop    edi
c000dc65:	5d                   	pop    ebp
c000dc66:	c3                   	ret    
c000dc67:	90                   	nop

c000dc68 <LogicalDisk::mount()>:
c000dc68:	56                   	push   esi
c000dc69:	53                   	push   ebx
c000dc6a:	53                   	push   ebx
c000dc6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dc6f:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c000dc75:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000dc7f:	85 db                	test   ebx,ebx
c000dc81:	74 27                	je     c000dcaa <LogicalDisk::mount()+0x42>
c000dc83:	51                   	push   ecx
c000dc84:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dc8b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dc8d:	83 e8 41             	sub    eax,0x41
c000dc90:	50                   	push   eax
c000dc91:	56                   	push   esi
c000dc92:	53                   	push   ebx
c000dc93:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	84 c0                	test   al,al
c000dc9b:	74 08                	je     c000dca5 <LogicalDisk::mount()+0x3d>
c000dc9d:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000dca3:	eb 07                	jmp    c000dcac <LogicalDisk::mount()+0x44>
c000dca5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000dca8:	eb d5                	jmp    c000dc7f <LogicalDisk::mount()+0x17>
c000dcaa:	31 c0                	xor    eax,eax
c000dcac:	5a                   	pop    edx
c000dcad:	5b                   	pop    ebx
c000dcae:	5e                   	pop    esi
c000dcaf:	c3                   	ret    

c000dcb0 <LogicalDisk::unmount()>:
c000dcb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcb4:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dcbe:	c3                   	ret    
c000dcbf:	90                   	nop

c000dcc0 <LogicalDisk::eject()>:
c000dcc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcc4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000dcca:	8b 10                	mov    edx,DWORD PTR [eax]
c000dccc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dcd0:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000dcd3:	90                   	nop

c000dcd4 <LogicalDisk::unassignDriveLetter()>:
c000dcd4:	57                   	push   edi
c000dcd5:	56                   	push   esi
c000dcd6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dcda:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000dce1:	85 c9                	test   ecx,ecx
c000dce3:	75 0f                	jne    c000dcf4 <LogicalDisk::unassignDriveLetter()+0x20>
c000dce5:	c7 44 24 0c 2c 1c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021c2c
c000dced:	5e                   	pop    esi
c000dcee:	5f                   	pop    edi
c000dcef:	e9 13 38 00 00       	jmp    c0011507 <KePanic(char const*)>
c000dcf4:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000dcfb:	83 e9 41             	sub    ecx,0x41
c000dcfe:	b8 01 00 00 00       	mov    eax,0x1
c000dd03:	c7 04 8d 80 b8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4780],0x0
c000dd0e:	d3 e0                	shl    eax,cl
c000dd10:	89 c7                	mov    edi,eax
c000dd12:	f7 d0                	not    eax
c000dd14:	c1 ff 1f             	sar    edi,0x1f
c000dd17:	21 05 60 b8 02 c0    	and    DWORD PTR ds:0xc002b860,eax
c000dd1d:	89 fe                	mov    esi,edi
c000dd1f:	f7 d6                	not    esi
c000dd21:	21 35 64 b8 02 c0    	and    DWORD PTR ds:0xc002b864,esi
c000dd27:	5e                   	pop    esi
c000dd28:	5f                   	pop    edi
c000dd29:	c3                   	ret    

c000dd2a <LogicalDisk::read(unsigned long long, int, void*)>:
c000dd2a:	57                   	push   edi
c000dd2b:	56                   	push   esi
c000dd2c:	53                   	push   ebx
c000dd2d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dd31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dd35:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dd39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dd3d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dd43:	77 41                	ja     c000dd86 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000dd45:	99                   	cdq    
c000dd46:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000dd4c:	01 c8                	add    eax,ecx
c000dd4e:	11 da                	adc    edx,ebx
c000dd50:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dd56:	19 d7                	sbb    edi,edx
c000dd58:	72 33                	jb     c000dd8d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000dd5a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000dd60:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dd66:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dd6a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dd6e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dd74:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dd7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd7e:	5b                   	pop    ebx
c000dd7f:	5e                   	pop    esi
c000dd80:	5f                   	pop    edi
c000dd81:	e9 d4 0a 00 00       	jmp    c000e85a <VCache::read(unsigned long long, int, void*)>
c000dd86:	b8 05 00 00 00       	mov    eax,0x5
c000dd8b:	eb 05                	jmp    c000dd92 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000dd8d:	b8 07 00 00 00       	mov    eax,0x7
c000dd92:	5b                   	pop    ebx
c000dd93:	5e                   	pop    esi
c000dd94:	5f                   	pop    edi
c000dd95:	c3                   	ret    

c000dd96 <LogicalDisk::write(unsigned long long, int, void*)>:
c000dd96:	57                   	push   edi
c000dd97:	56                   	push   esi
c000dd98:	53                   	push   ebx
c000dd99:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dd9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dda1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dda5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dda9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ddaf:	77 41                	ja     c000ddf2 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000ddb1:	99                   	cdq    
c000ddb2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ddb8:	01 c8                	add    eax,ecx
c000ddba:	11 da                	adc    edx,ebx
c000ddbc:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ddc2:	19 d7                	sbb    edi,edx
c000ddc4:	72 33                	jb     c000ddf9 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000ddc6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ddcc:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ddd2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ddd6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ddda:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dde0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dde6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddea:	5b                   	pop    ebx
c000ddeb:	5e                   	pop    esi
c000ddec:	5f                   	pop    edi
c000dded:	e9 6e 09 00 00       	jmp    c000e760 <VCache::write(unsigned long long, int, void*)>
c000ddf2:	b8 05 00 00 00       	mov    eax,0x5
c000ddf7:	eb 05                	jmp    c000ddfe <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ddf9:	b8 07 00 00 00       	mov    eax,0x7
c000ddfe:	5b                   	pop    ebx
c000ddff:	5e                   	pop    esi
c000de00:	5f                   	pop    edi
c000de01:	c3                   	ret    
c000de02:	66 90                	xchg   ax,ax

c000de04 <Mouse::Mouse(char const*)>:
c000de04:	83 ec 0c             	sub    esp,0xc
c000de07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de0b:	83 ec 08             	sub    esp,0x8
c000de0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de12:	50                   	push   eax
c000de13:	e8 c0 ec ff ff       	call   c000cad8 <Device::Device(char const*)>
c000de18:	83 c4 10             	add    esp,0x10
c000de1b:	ba 80 1c 02 c0       	mov    edx,0xc0021c80
c000de20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de24:	89 10                	mov    DWORD PTR [eax],edx
c000de26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de2a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000de34:	90                   	nop
c000de35:	83 c4 0c             	add    esp,0xc
c000de38:	c3                   	ret    
c000de39:	90                   	nop
c000de3a:	66 90                	xchg   ax,ax

c000de3c <Mouse::~Mouse()>:
c000de3c:	83 ec 0c             	sub    esp,0xc
c000de3f:	ba 80 1c 02 c0       	mov    edx,0xc0021c80
c000de44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de48:	89 10                	mov    DWORD PTR [eax],edx
c000de4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de4e:	83 ec 0c             	sub    esp,0xc
c000de51:	50                   	push   eax
c000de52:	e8 eb e9 ff ff       	call   c000c842 <Device::~Device()>
c000de57:	83 c4 10             	add    esp,0x10
c000de5a:	90                   	nop
c000de5b:	83 c4 0c             	add    esp,0xc
c000de5e:	c3                   	ret    
c000de5f:	90                   	nop

c000de60 <Mouse::~Mouse()>:
c000de60:	83 ec 0c             	sub    esp,0xc
c000de63:	83 ec 0c             	sub    esp,0xc
c000de66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de6a:	e8 cd ff ff ff       	call   c000de3c <Mouse::~Mouse()>
c000de6f:	83 c4 10             	add    esp,0x10
c000de72:	83 ec 08             	sub    esp,0x8
c000de75:	68 58 01 00 00       	push   0x158
c000de7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de7e:	e8 89 c9 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000de83:	83 c4 10             	add    esp,0x10
c000de86:	83 c4 0c             	add    esp,0xc
c000de89:	c3                   	ret    

c000de8a <NIC::getMAC()>:
c000de8a:	31 c0                	xor    eax,eax
c000de8c:	31 d2                	xor    edx,edx
c000de8e:	c3                   	ret    
c000de8f:	90                   	nop

c000de90 <NIC::write(int, unsigned char*, int*)>:
c000de90:	b8 01 00 00 00       	mov    eax,0x1
c000de95:	c3                   	ret    

c000de96 <NIC::NIC(char const*)>:
c000de96:	83 ec 0c             	sub    esp,0xc
c000de99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de9d:	83 ec 08             	sub    esp,0x8
c000dea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dea4:	50                   	push   eax
c000dea5:	e8 2e ec ff ff       	call   c000cad8 <Device::Device(char const*)>
c000deaa:	83 c4 10             	add    esp,0x10
c000dead:	ba ac 1c 02 c0       	mov    edx,0xc0021cac
c000deb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deb6:	89 10                	mov    DWORD PTR [eax],edx
c000deb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000debc:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000dec6:	90                   	nop
c000dec7:	83 c4 0c             	add    esp,0xc
c000deca:	c3                   	ret    
c000decb:	90                   	nop

c000decc <NIC::~NIC()>:
c000decc:	83 ec 0c             	sub    esp,0xc
c000decf:	ba ac 1c 02 c0       	mov    edx,0xc0021cac
c000ded4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ded8:	89 10                	mov    DWORD PTR [eax],edx
c000deda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dede:	83 ec 0c             	sub    esp,0xc
c000dee1:	50                   	push   eax
c000dee2:	e8 5b e9 ff ff       	call   c000c842 <Device::~Device()>
c000dee7:	83 c4 10             	add    esp,0x10
c000deea:	90                   	nop
c000deeb:	83 c4 0c             	add    esp,0xc
c000deee:	c3                   	ret    
c000deef:	90                   	nop

c000def0 <NIC::~NIC()>:
c000def0:	83 ec 0c             	sub    esp,0xc
c000def3:	83 ec 0c             	sub    esp,0xc
c000def6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000defa:	e8 cd ff ff ff       	call   c000decc <NIC::~NIC()>
c000deff:	83 c4 10             	add    esp,0x10
c000df02:	83 ec 08             	sub    esp,0x8
c000df05:	68 58 01 00 00       	push   0x158
c000df0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df0e:	e8 f9 c8 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000df13:	83 c4 10             	add    esp,0x10
c000df16:	83 c4 0c             	add    esp,0xc
c000df19:	c3                   	ret    

c000df1a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000df1a:	55                   	push   ebp
c000df1b:	57                   	push   edi
c000df1c:	56                   	push   esi
c000df1d:	53                   	push   ebx
c000df1e:	81 ec 28 01 00 00    	sub    esp,0x128
c000df24:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000df2b:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000df32:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000df39:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000df40:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df44:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df48:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000df4f:	e8 80 ec ff ff       	call   c000cbd4 <Device::getName()>
c000df54:	5a                   	pop    edx
c000df55:	59                   	pop    ecx
c000df56:	50                   	push   eax
c000df57:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000df5b:	55                   	push   ebp
c000df5c:	e8 ef 26 ff ff       	call   c0000650 <strcpy>
c000df61:	5b                   	pop    ebx
c000df62:	58                   	pop    eax
c000df63:	68 d8 1c 02 c0       	push   0xc0021cd8
c000df68:	55                   	push   ebp
c000df69:	e8 02 29 ff ff       	call   c0000870 <strcat>
c000df6e:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000df75:	e8 59 9b ff ff       	call   c0007ad3 <malloc>
c000df7a:	83 c4 0c             	add    esp,0xc
c000df7d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000df81:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000df85:	89 c3                	mov    ebx,eax
c000df87:	57                   	push   edi
c000df88:	56                   	push   esi
c000df89:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000df90:	55                   	push   ebp
c000df91:	50                   	push   eax
c000df92:	e8 57 fb ff ff       	call   c000daee <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000df97:	83 c4 14             	add    esp,0x14
c000df9a:	53                   	push   ebx
c000df9b:	e8 0e fc ff ff       	call   c000dbae <LogicalDisk::assignDriveLetter()>
c000dfa0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dfa3:	e8 c0 fc ff ff       	call   c000dc68 <LogicalDisk::mount()>
c000dfa8:	58                   	pop    eax
c000dfa9:	5a                   	pop    edx
c000dfaa:	53                   	push   ebx
c000dfab:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dfb2:	e8 89 e9 ff ff       	call   c000c940 <Device::addChild(Device*)>
c000dfb7:	81 c4 2c 01 00 00    	add    esp,0x12c
c000dfbd:	5b                   	pop    ebx
c000dfbe:	5e                   	pop    esi
c000dfbf:	5f                   	pop    edi
c000dfc0:	5d                   	pop    ebp
c000dfc1:	c3                   	ret    

c000dfc2 <createPartitionsForDisk(PhysicalDisk*)>:
c000dfc2:	55                   	push   ebp
c000dfc3:	57                   	push   edi
c000dfc4:	56                   	push   esi
c000dfc5:	53                   	push   ebx
c000dfc6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000dfcc:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000dfd3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000dfd9:	3d 00 02 00 00       	cmp    eax,0x200
c000dfde:	74 27                	je     c000e007 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000dfe0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000dfe6:	83 ec 10             	sub    esp,0x10
c000dfe9:	99                   	cdq    
c000dfea:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000dff0:	52                   	push   edx
c000dff1:	50                   	push   eax
c000dff2:	0f a4 f7 0a          	shld   edi,esi,0xa
c000dff6:	c1 e6 0a             	shl    esi,0xa
c000dff9:	89 fd                	mov    ebp,edi
c000dffb:	55                   	push   ebp
c000dffc:	56                   	push   esi
c000dffd:	e8 8e 16 01 00       	call   c001f690 <__udivdi3>
c000e002:	e9 b9 00 00 00       	jmp    c000e0c0 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e007:	83 ec 0c             	sub    esp,0xc
c000e00a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e00c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000e010:	56                   	push   esi
c000e011:	6a 01                	push   0x1
c000e013:	6a 00                	push   0x0
c000e015:	6a 00                	push   0x0
c000e017:	53                   	push   ebx
c000e018:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000e01b:	83 c4 20             	add    esp,0x20
c000e01e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000e026:	75 0a                	jne    c000e032 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000e028:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000e030:	74 2c                	je     c000e05e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000e032:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e038:	83 ec 10             	sub    esp,0x10
c000e03b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e041:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e047:	89 f7                	mov    edi,esi
c000e049:	c1 ff 1f             	sar    edi,0x1f
c000e04c:	57                   	push   edi
c000e04d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e051:	56                   	push   esi
c000e052:	c1 e0 0a             	shl    eax,0xa
c000e055:	52                   	push   edx
c000e056:	50                   	push   eax
c000e057:	e8 34 16 01 00       	call   c001f690 <__udivdi3>
c000e05c:	eb 62                	jmp    c000e0c0 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e05e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000e065:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000e06c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000e073:	89 cf                	mov    edi,ecx
c000e075:	83 e2 7f             	and    edx,0x7f
c000e078:	83 e7 7f             	and    edi,0x7f
c000e07b:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000e07e:	83 e0 7f             	and    eax,0x7f
c000e081:	8d 14 01             	lea    edx,[ecx+eax*1]
c000e084:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000e08b:	83 e0 7f             	and    eax,0x7f
c000e08e:	01 d0                	add    eax,edx
c000e090:	84 c0                	test   al,al
c000e092:	89 c5                	mov    ebp,eax
c000e094:	74 41                	je     c000e0d7 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000e096:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e09c:	83 ec 10             	sub    esp,0x10
c000e09f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e0a5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e0ab:	89 f7                	mov    edi,esi
c000e0ad:	c1 ff 1f             	sar    edi,0x1f
c000e0b0:	57                   	push   edi
c000e0b1:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e0b5:	56                   	push   esi
c000e0b6:	c1 e0 0a             	shl    eax,0xa
c000e0b9:	52                   	push   edx
c000e0ba:	50                   	push   eax
c000e0bb:	e8 d0 15 01 00       	call   c001f690 <__udivdi3>
c000e0c0:	83 c4 14             	add    esp,0x14
c000e0c3:	52                   	push   edx
c000e0c4:	50                   	push   eax
c000e0c5:	6a 00                	push   0x0
c000e0c7:	6a 00                	push   0x0
c000e0c9:	53                   	push   ebx
c000e0ca:	e8 4b fe ff ff       	call   c000df1a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e0cf:	83 c4 20             	add    esp,0x20
c000e0d2:	e9 73 01 00 00       	jmp    c000e24a <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000e0d7:	89 f0                	mov    eax,esi
c000e0d9:	31 c9                	xor    ecx,ecx
c000e0db:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000e0e2:	75 02                	jne    c000e0e6 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000e0e4:	89 cd                	mov    ebp,ecx
c000e0e6:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000e0ee:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000e0f5:	83 c0 10             	add    eax,0x10
c000e0f8:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000e100:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000e107:	c1 e2 08             	shl    edx,0x8
c000e10a:	c1 e6 10             	shl    esi,0x10
c000e10d:	09 f2                	or     edx,esi
c000e10f:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000e116:	09 f2                	or     edx,esi
c000e118:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000e11f:	c1 e6 18             	shl    esi,0x18
c000e122:	09 f2                	or     edx,esi
c000e124:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000e12b:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000e12f:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000e136:	c1 e6 10             	shl    esi,0x10
c000e139:	c1 e2 08             	shl    edx,0x8
c000e13c:	09 f2                	or     edx,esi
c000e13e:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000e145:	09 f2                	or     edx,esi
c000e147:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000e14e:	c1 e6 18             	shl    esi,0x18
c000e151:	09 f2                	or     edx,esi
c000e153:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000e157:	41                   	inc    ecx
c000e158:	83 f9 04             	cmp    ecx,0x4
c000e15b:	0f 85 7a ff ff ff    	jne    c000e0db <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000e161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e165:	83 f0 01             	xor    eax,0x1
c000e168:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e16c:	75 4f                	jne    c000e1bd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e16e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e172:	83 f0 01             	xor    eax,0x1
c000e175:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e179:	75 42                	jne    c000e1bd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e17b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e181:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e189:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e18f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e197:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e19d:	89 f7                	mov    edi,esi
c000e19f:	c1 ff 1f             	sar    edi,0x1f
c000e1a2:	57                   	push   edi
c000e1a3:	56                   	push   esi
c000e1a4:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e1a8:	52                   	push   edx
c000e1a9:	c1 e0 0a             	shl    eax,0xa
c000e1ac:	50                   	push   eax
c000e1ad:	e8 de 14 01 00       	call   c001f690 <__udivdi3>
c000e1b2:	83 c4 10             	add    esp,0x10
c000e1b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e1b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e1bd:	89 e8                	mov    eax,ebp
c000e1bf:	0f b6 e8             	movzx  ebp,al
c000e1c2:	85 ed                	test   ebp,ebp
c000e1c4:	74 50                	je     c000e216 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e1c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e1ca:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e1ce:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e1d2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e1d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1da:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1e2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e1e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e1ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e1ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e1f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e1f6:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e1fa:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e1fe:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e202:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e206:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e20a:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e20e:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e212:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e216:	31 ed                	xor    ebp,ebp
c000e218:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e21c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e220:	89 f8                	mov    eax,edi
c000e222:	09 f0                	or     eax,esi
c000e224:	74 1e                	je     c000e244 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e226:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e22a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e22e:	89 d1                	mov    ecx,edx
c000e230:	09 c1                	or     ecx,eax
c000e232:	74 10                	je     c000e244 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e234:	83 ec 0c             	sub    esp,0xc
c000e237:	57                   	push   edi
c000e238:	56                   	push   esi
c000e239:	52                   	push   edx
c000e23a:	50                   	push   eax
c000e23b:	53                   	push   ebx
c000e23c:	e8 d9 fc ff ff       	call   c000df1a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e241:	83 c4 20             	add    esp,0x20
c000e244:	45                   	inc    ebp
c000e245:	83 fd 04             	cmp    ebp,0x4
c000e248:	75 ce                	jne    c000e218 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e24a:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e250:	5b                   	pop    ebx
c000e251:	5e                   	pop    esi
c000e252:	5f                   	pop    edi
c000e253:	5d                   	pop    ebp
c000e254:	c3                   	ret    
c000e255:	66 90                	xchg   ax,ax
c000e257:	90                   	nop

c000e258 <Serial::Serial(char const*)>:
c000e258:	83 ec 0c             	sub    esp,0xc
c000e25b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e25f:	83 ec 08             	sub    esp,0x8
c000e262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e266:	50                   	push   eax
c000e267:	e8 6c e8 ff ff       	call   c000cad8 <Device::Device(char const*)>
c000e26c:	83 c4 10             	add    esp,0x10
c000e26f:	ba ec 1c 02 c0       	mov    edx,0xc0021cec
c000e274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e278:	89 10                	mov    DWORD PTR [eax],edx
c000e27a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e27e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e288:	90                   	nop
c000e289:	83 c4 0c             	add    esp,0xc
c000e28c:	c3                   	ret    
c000e28d:	90                   	nop
c000e28e:	66 90                	xchg   ax,ax

c000e290 <Serial::~Serial()>:
c000e290:	83 ec 0c             	sub    esp,0xc
c000e293:	ba ec 1c 02 c0       	mov    edx,0xc0021cec
c000e298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e29c:	89 10                	mov    DWORD PTR [eax],edx
c000e29e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2a2:	83 ec 0c             	sub    esp,0xc
c000e2a5:	50                   	push   eax
c000e2a6:	e8 97 e5 ff ff       	call   c000c842 <Device::~Device()>
c000e2ab:	83 c4 10             	add    esp,0x10
c000e2ae:	90                   	nop
c000e2af:	83 c4 0c             	add    esp,0xc
c000e2b2:	c3                   	ret    
c000e2b3:	90                   	nop

c000e2b4 <Serial::~Serial()>:
c000e2b4:	83 ec 0c             	sub    esp,0xc
c000e2b7:	83 ec 0c             	sub    esp,0xc
c000e2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2be:	e8 cd ff ff ff       	call   c000e290 <Serial::~Serial()>
c000e2c3:	83 c4 10             	add    esp,0x10
c000e2c6:	83 ec 08             	sub    esp,0x8
c000e2c9:	68 58 01 00 00       	push   0x158
c000e2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d2:	e8 35 c5 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e2d7:	83 c4 10             	add    esp,0x10
c000e2da:	83 c4 0c             	add    esp,0xc
c000e2dd:	c3                   	ret    
c000e2de:	66 90                	xchg   ax,ax

c000e2e0 <Timer::Timer(char const*)>:
c000e2e0:	83 ec 0c             	sub    esp,0xc
c000e2e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2e7:	83 ec 08             	sub    esp,0x8
c000e2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ee:	50                   	push   eax
c000e2ef:	e8 e4 e7 ff ff       	call   c000cad8 <Device::Device(char const*)>
c000e2f4:	83 c4 10             	add    esp,0x10
c000e2f7:	ba 30 1d 02 c0       	mov    edx,0xc0021d30
c000e2fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e300:	89 10                	mov    DWORD PTR [eax],edx
c000e302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e306:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e310:	90                   	nop
c000e311:	83 c4 0c             	add    esp,0xc
c000e314:	c3                   	ret    
c000e315:	90                   	nop
c000e316:	66 90                	xchg   ax,ax

c000e318 <Timer::~Timer()>:
c000e318:	83 ec 0c             	sub    esp,0xc
c000e31b:	ba 30 1d 02 c0       	mov    edx,0xc0021d30
c000e320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e324:	89 10                	mov    DWORD PTR [eax],edx
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	50                   	push   eax
c000e32e:	e8 0f e5 ff ff       	call   c000c842 <Device::~Device()>
c000e333:	83 c4 10             	add    esp,0x10
c000e336:	90                   	nop
c000e337:	83 c4 0c             	add    esp,0xc
c000e33a:	c3                   	ret    
c000e33b:	90                   	nop

c000e33c <Timer::~Timer()>:
c000e33c:	83 ec 0c             	sub    esp,0xc
c000e33f:	83 ec 0c             	sub    esp,0xc
c000e342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e346:	e8 cd ff ff ff       	call   c000e318 <Timer::~Timer()>
c000e34b:	83 c4 10             	add    esp,0x10
c000e34e:	83 ec 08             	sub    esp,0x8
c000e351:	68 5c 01 00 00       	push   0x15c
c000e356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e35a:	e8 ad c4 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e35f:	83 c4 10             	add    esp,0x10
c000e362:	83 c4 0c             	add    esp,0xc
c000e365:	c3                   	ret    

c000e366 <Timer::read()>:
c000e366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e36a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e370:	c3                   	ret    

c000e371 <setupTimer(int)>:
c000e371:	53                   	push   ebx
c000e372:	83 ec 14             	sub    esp,0x14
c000e375:	68 5c 01 00 00       	push   0x15c
c000e37a:	e8 54 97 ff ff       	call   c0007ad3 <malloc>
c000e37f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e382:	89 c3                	mov    ebx,eax
c000e384:	e8 6b 0b 01 00       	call   c001eef4 <PIT::PIT()>
c000e389:	58                   	pop    eax
c000e38a:	5a                   	pop    edx
c000e38b:	53                   	push   ebx
c000e38c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000e392:	e8 a9 e5 ff ff       	call   c000c940 <Device::addChild(Device*)>
c000e397:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e399:	6a 00                	push   0x0
c000e39b:	6a 00                	push   0x0
c000e39d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e3a1:	53                   	push   ebx
c000e3a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e3a5:	83 c4 28             	add    esp,0x28
c000e3a8:	89 d8                	mov    eax,ebx
c000e3aa:	5b                   	pop    ebx
c000e3ab:	c3                   	ret    

c000e3ac <timerHandler(unsigned int)>:
c000e3ac:	56                   	push   esi
c000e3ad:	53                   	push   ebx
c000e3ae:	51                   	push   ecx
c000e3af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3b3:	01 05 ec b8 02 c0    	add    DWORD PTR ds:0xc002b8ec,eax
c000e3b9:	80 3d bd 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebd,0x0
c000e3c0:	0f 84 4a 01 00 00    	je     c000e510 <timerHandler(unsigned int)+0x164>
c000e3c6:	fa                   	cli    
c000e3c7:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e3cd:	83 ec 0c             	sub    esp,0xc
c000e3d0:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e3d5:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c000e3db:	e8 80 18 01 00       	call   c001fc60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e3e0:	83 c4 10             	add    esp,0x10
c000e3e3:	84 c0                	test   al,al
c000e3e5:	0f 85 a1 00 00 00    	jne    c000e48c <timerHandler(unsigned int)+0xe0>
c000e3eb:	83 ec 0c             	sub    esp,0xc
c000e3ee:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e3f3:	e8 84 18 01 00       	call   c001fc7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e3f8:	83 c4 10             	add    esp,0x10
c000e3fb:	89 c6                	mov    esi,eax
c000e3fd:	8d 76 00             	lea    esi,[esi+0x0]
c000e400:	83 ec 0c             	sub    esp,0xc
c000e403:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e408:	e8 6f 18 01 00       	call   c001fc7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e40d:	c7 04 24 d8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6d8
c000e414:	89 c3                	mov    ebx,eax
c000e416:	e8 69 18 01 00       	call   c001fc84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e41b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e41e:	83 c4 10             	add    esp,0x10
c000e421:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c000e427:	77 23                	ja     c000e44c <timerHandler(unsigned int)+0xa0>
c000e429:	83 ec 0c             	sub    esp,0xc
c000e42c:	53                   	push   ebx
c000e42d:	e8 96 80 00 00       	call   c00164c8 <unblockTask(ThreadControlBlock*)>
c000e432:	83 c4 10             	add    esp,0x10
c000e435:	39 de                	cmp    esi,ebx
c000e437:	75 27                	jne    c000e460 <timerHandler(unsigned int)+0xb4>
c000e439:	83 ec 0c             	sub    esp,0xc
c000e43c:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e441:	e8 36 18 01 00       	call   c001fc7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e446:	89 c6                	mov    esi,eax
c000e448:	eb 12                	jmp    c000e45c <timerHandler(unsigned int)+0xb0>
c000e44a:	66 90                	xchg   ax,ax
c000e44c:	52                   	push   edx
c000e44d:	52                   	push   edx
c000e44e:	53                   	push   ebx
c000e44f:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e454:	e8 e7 18 01 00       	call   c001fd40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e459:	8d 76 00             	lea    esi,[esi+0x0]
c000e45c:	83 c4 10             	add    esp,0x10
c000e45f:	90                   	nop
c000e460:	83 ec 0c             	sub    esp,0xc
c000e463:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e468:	e8 f3 17 01 00       	call   c001fc60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e46d:	83 c4 10             	add    esp,0x10
c000e470:	84 c0                	test   al,al
c000e472:	75 18                	jne    c000e48c <timerHandler(unsigned int)+0xe0>
c000e474:	83 ec 0c             	sub    esp,0xc
c000e477:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e47c:	e8 fb 17 01 00       	call   c001fc7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e481:	83 c4 10             	add    esp,0x10
c000e484:	39 f0                	cmp    eax,esi
c000e486:	0f 85 74 ff ff ff    	jne    c000e400 <timerHandler(unsigned int)+0x54>
c000e48c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e491:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e495:	74 41                	je     c000e4d8 <timerHandler(unsigned int)+0x12c>
c000e497:	80 3d bc 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebc,0x0
c000e49e:	74 38                	je     c000e4d8 <timerHandler(unsigned int)+0x12c>
c000e4a0:	fa                   	cli    
c000e4a1:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e4a7:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c000e4ac:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e4b2:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e4b5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e4bb:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e4be:	72 08                	jb     c000e4c8 <timerHandler(unsigned int)+0x11c>
c000e4c0:	e8 0b 7b 00 00       	call   c0015fd0 <schedule()>
c000e4c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e4c8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e4cd:	48                   	dec    eax
c000e4ce:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e4d3:	75 03                	jne    c000e4d8 <timerHandler(unsigned int)+0x12c>
c000e4d5:	fb                   	sti    
c000e4d6:	66 90                	xchg   ax,ax
c000e4d8:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000e4dd:	48                   	dec    eax
c000e4de:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000e4e3:	75 1b                	jne    c000e500 <timerHandler(unsigned int)+0x154>
c000e4e5:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c000e4ec:	74 12                	je     c000e500 <timerHandler(unsigned int)+0x154>
c000e4ee:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000e4f8:	e8 d3 7a 00 00       	call   c0015fd0 <schedule()>
c000e4fd:	8d 76 00             	lea    esi,[esi+0x0]
c000e500:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e505:	48                   	dec    eax
c000e506:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e50b:	75 03                	jne    c000e510 <timerHandler(unsigned int)+0x164>
c000e50d:	fb                   	sti    
c000e50e:	66 90                	xchg   ax,ax
c000e510:	58                   	pop    eax
c000e511:	5b                   	pop    ebx
c000e512:	5e                   	pop    esi
c000e513:	c3                   	ret    

c000e514 <VCache::VCache(PhysicalDisk*)>:
c000e514:	53                   	push   ebx
c000e515:	83 ec 18             	sub    esp,0x18
c000e518:	ba 60 1d 02 c0       	mov    edx,0xc0021d60
c000e51d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e521:	89 10                	mov    DWORD PTR [eax],edx
c000e523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e527:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e52e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e532:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e539:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e53d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e544:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e54b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e54f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e556:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e55d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e561:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e568:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e56c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e570:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e574:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e57b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e582:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e586:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e58a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e58e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e592:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e596:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e59a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e59e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e5a5:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e5ad:	83 ec 0c             	sub    esp,0xc
c000e5b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e5b4:	e8 1a 95 ff ff       	call   c0007ad3 <malloc>
c000e5b9:	83 c4 10             	add    esp,0x10
c000e5bc:	89 c3                	mov    ebx,eax
c000e5be:	83 ec 0c             	sub    esp,0xc
c000e5c1:	53                   	push   ebx
c000e5c2:	e8 a9 77 00 00       	call   c0015d70 <Mutex::Mutex()>
c000e5c7:	83 c4 10             	add    esp,0x10
c000e5ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e5d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5d5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e5d9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e5dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5e0:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e5e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e5eb:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e5f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5f5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e5f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e5fc:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e602:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e608:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e60c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e60f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e612:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e616:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e61a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e61e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e624:	05 00 02 00 00       	add    eax,0x200
c000e629:	c1 e0 03             	shl    eax,0x3
c000e62c:	83 ec 0c             	sub    esp,0xc
c000e62f:	50                   	push   eax
c000e630:	e8 9e 94 ff ff       	call   c0007ad3 <malloc>
c000e635:	83 c4 10             	add    esp,0x10
c000e638:	89 c2                	mov    edx,eax
c000e63a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e63e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e641:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e645:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e64c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e650:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e654:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e658:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e65e:	89 d0                	mov    eax,edx
c000e660:	c1 e0 02             	shl    eax,0x2
c000e663:	01 d0                	add    eax,edx
c000e665:	c1 e0 04             	shl    eax,0x4
c000e668:	83 ec 0c             	sub    esp,0xc
c000e66b:	50                   	push   eax
c000e66c:	e8 62 94 ff ff       	call   c0007ad3 <malloc>
c000e671:	83 c4 10             	add    esp,0x10
c000e674:	89 c2                	mov    edx,eax
c000e676:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e67a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e67d:	90                   	nop
c000e67e:	83 c4 18             	add    esp,0x18
c000e681:	5b                   	pop    ebx
c000e682:	c3                   	ret    
c000e683:	90                   	nop

c000e684 <VCache::invalidateReadBuffer()>:
c000e684:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e688:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e68e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e692:	c3                   	ret    
c000e693:	90                   	nop

c000e694 <VCache::writeWriteBuffer()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 08             	sub    esp,0x8
c000e698:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e69c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e6a0:	74 1e                	je     c000e6c0 <VCache::writeWriteBuffer()+0x2c>
c000e6a2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e6a5:	83 ec 0c             	sub    esp,0xc
c000e6a8:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6aa:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e6ad:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e6b0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e6b3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e6b6:	50                   	push   eax
c000e6b7:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e6ba:	83 c4 20             	add    esp,0x20
c000e6bd:	8d 76 00             	lea    esi,[esi+0x0]
c000e6c0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e6c7:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e6ce:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e6d2:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e6d9:	83 c4 08             	add    esp,0x8
c000e6dc:	5b                   	pop    ebx
c000e6dd:	c3                   	ret    
c000e6de:	66 90                	xchg   ax,ax

c000e6e0 <VCache::~VCache()>:
c000e6e0:	83 ec 0c             	sub    esp,0xc
c000e6e3:	ba 60 1d 02 c0       	mov    edx,0xc0021d60
c000e6e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6ec:	89 10                	mov    DWORD PTR [eax],edx
c000e6ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6f2:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e6f5:	0f b6 c0             	movzx  eax,al
c000e6f8:	85 c0                	test   eax,eax
c000e6fa:	74 10                	je     c000e70c <VCache::~VCache()+0x2c>
c000e6fc:	83 ec 0c             	sub    esp,0xc
c000e6ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e703:	e8 8c ff ff ff       	call   c000e694 <VCache::writeWriteBuffer()>
c000e708:	83 c4 10             	add    esp,0x10
c000e70b:	90                   	nop
c000e70c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e710:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e713:	83 ec 0c             	sub    esp,0xc
c000e716:	50                   	push   eax
c000e717:	e8 c7 93 ff ff       	call   c0007ae3 <free>
c000e71c:	83 c4 10             	add    esp,0x10
c000e71f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e723:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e726:	83 ec 0c             	sub    esp,0xc
c000e729:	50                   	push   eax
c000e72a:	e8 b4 93 ff ff       	call   c0007ae3 <free>
c000e72f:	83 c4 10             	add    esp,0x10
c000e732:	90                   	nop
c000e733:	83 c4 0c             	add    esp,0xc
c000e736:	c3                   	ret    
c000e737:	90                   	nop

c000e738 <VCache::~VCache()>:
c000e738:	83 ec 0c             	sub    esp,0xc
c000e73b:	83 ec 0c             	sub    esp,0xc
c000e73e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e742:	e8 99 ff ff ff       	call   c000e6e0 <VCache::~VCache()>
c000e747:	83 c4 10             	add    esp,0x10
c000e74a:	83 ec 08             	sub    esp,0x8
c000e74d:	6a 44                	push   0x44
c000e74f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e753:	e8 b4 c0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e758:	83 c4 10             	add    esp,0x10
c000e75b:	83 c4 0c             	add    esp,0xc
c000e75e:	c3                   	ret    
c000e75f:	90                   	nop

c000e760 <VCache::write(unsigned long long, int, void*)>:
c000e760:	55                   	push   ebp
c000e761:	57                   	push   edi
c000e762:	56                   	push   esi
c000e763:	53                   	push   ebx
c000e764:	83 ec 1c             	sub    esp,0x1c
c000e767:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e76b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e76f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e773:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e777:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e77b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e77f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e783:	74 0f                	je     c000e794 <VCache::write(unsigned long long, int, void*)+0x34>
c000e785:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e789:	53                   	push   ebx
c000e78a:	e8 f5 fe ff ff       	call   c000e684 <VCache::invalidateReadBuffer()>
c000e78f:	58                   	pop    eax
c000e790:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e794:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e798:	74 66                	je     c000e800 <VCache::write(unsigned long long, int, void*)+0xa0>
c000e79a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e79d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e7a1:	99                   	cdq    
c000e7a2:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e7a5:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e7a8:	89 c6                	mov    esi,eax
c000e7aa:	31 ce                	xor    esi,ecx
c000e7ac:	89 d0                	mov    eax,edx
c000e7ae:	31 e8                	xor    eax,ebp
c000e7b0:	09 c6                	or     esi,eax
c000e7b2:	75 38                	jne    c000e7ec <VCache::write(unsigned long long, int, void*)+0x8c>
c000e7b4:	83 ff 01             	cmp    edi,0x1
c000e7b7:	75 33                	jne    c000e7ec <VCache::write(unsigned long long, int, void*)+0x8c>
c000e7b9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e7bc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e7c0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e7c4:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e7ca:	0f af f9             	imul   edi,ecx
c000e7cd:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000e7d0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e7d2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e7d5:	40                   	inc    eax
c000e7d6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e7d9:	83 f8 50             	cmp    eax,0x50
c000e7dc:	75 72                	jne    c000e850 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e7de:	83 ec 0c             	sub    esp,0xc
c000e7e1:	53                   	push   ebx
c000e7e2:	e8 ad fe ff ff       	call   c000e694 <VCache::writeWriteBuffer()>
c000e7e7:	83 c4 10             	add    esp,0x10
c000e7ea:	eb 64                	jmp    c000e850 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e7ec:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e7f0:	83 ec 0c             	sub    esp,0xc
c000e7f3:	53                   	push   ebx
c000e7f4:	e8 9b fe ff ff       	call   c000e694 <VCache::writeWriteBuffer()>
c000e7f9:	83 c4 10             	add    esp,0x10
c000e7fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e800:	83 ff 4f             	cmp    edi,0x4f
c000e803:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e806:	7f 20                	jg     c000e828 <VCache::write(unsigned long long, int, void*)+0xc8>
c000e808:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e80b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e80f:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000e812:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e815:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e818:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e81c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e822:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e824:	eb 2a                	jmp    c000e850 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e826:	66 90                	xchg   ax,ax
c000e828:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e82c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e82e:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e832:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e836:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e83a:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000e83e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e842:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e845:	83 c4 1c             	add    esp,0x1c
c000e848:	5b                   	pop    ebx
c000e849:	5e                   	pop    esi
c000e84a:	5f                   	pop    edi
c000e84b:	5d                   	pop    ebp
c000e84c:	ff e0                	jmp    eax
c000e84e:	66 90                	xchg   ax,ax
c000e850:	83 c4 1c             	add    esp,0x1c
c000e853:	31 c0                	xor    eax,eax
c000e855:	5b                   	pop    ebx
c000e856:	5e                   	pop    esi
c000e857:	5f                   	pop    edi
c000e858:	5d                   	pop    ebp
c000e859:	c3                   	ret    

c000e85a <VCache::read(unsigned long long, int, void*)>:
c000e85a:	55                   	push   ebp
c000e85b:	57                   	push   edi
c000e85c:	56                   	push   esi
c000e85d:	53                   	push   ebx
c000e85e:	83 ec 1c             	sub    esp,0x1c
c000e861:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e865:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e869:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e86d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e871:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e875:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e879:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e87d:	74 0d                	je     c000e88c <VCache::read(unsigned long long, int, void*)+0x32>
c000e87f:	83 ec 0c             	sub    esp,0xc
c000e882:	57                   	push   edi
c000e883:	e8 0c fe ff ff       	call   c000e694 <VCache::writeWriteBuffer()>
c000e888:	83 c4 10             	add    esp,0x10
c000e88b:	90                   	nop
c000e88c:	83 fd 01             	cmp    ebp,0x1
c000e88f:	0f 85 93 00 00 00    	jne    c000e928 <VCache::read(unsigned long long, int, void*)+0xce>
c000e895:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e898:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e89f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e8a2:	0f 85 80 00 00 00    	jne    c000e928 <VCache::read(unsigned long long, int, void*)+0xce>
c000e8a8:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000e8ab:	89 cd                	mov    ebp,ecx
c000e8ad:	f7 dd                	neg    ebp
c000e8af:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000e8b3:	89 e8                	mov    eax,ebp
c000e8b5:	21 dd                	and    ebp,ebx
c000e8b7:	c1 f8 1f             	sar    eax,0x1f
c000e8ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e8be:	89 e8                	mov    eax,ebp
c000e8c0:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000e8c4:	21 f5                	and    ebp,esi
c000e8c6:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e8ca:	89 ea                	mov    edx,ebp
c000e8cc:	74 2e                	je     c000e8fc <VCache::read(unsigned long long, int, void*)+0xa2>
c000e8ce:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000e8d1:	75 29                	jne    c000e8fc <VCache::read(unsigned long long, int, void*)+0xa2>
c000e8d3:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e8d6:	75 24                	jne    c000e8fc <VCache::read(unsigned long long, int, void*)+0xa2>
c000e8d8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e8db:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e8e1:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e8e4:	8d 70 ff             	lea    esi,[eax-0x1]
c000e8e7:	21 f3                	and    ebx,esi
c000e8e9:	0f af d9             	imul   ebx,ecx
c000e8ec:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e8ef:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e8f3:	89 de                	mov    esi,ebx
c000e8f5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e8f7:	31 c0                	xor    eax,eax
c000e8f9:	eb 61                	jmp    c000e95c <VCache::read(unsigned long long, int, void*)+0x102>
c000e8fb:	90                   	nop
c000e8fc:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e900:	83 ec 0c             	sub    esp,0xc
c000e903:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e906:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e90a:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e90d:	8b 36                	mov    esi,DWORD PTR [esi]
c000e90f:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e912:	51                   	push   ecx
c000e913:	52                   	push   edx
c000e914:	50                   	push   eax
c000e915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e919:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000e91c:	83 c4 20             	add    esp,0x20
c000e91f:	85 c0                	test   eax,eax
c000e921:	75 39                	jne    c000e95c <VCache::read(unsigned long long, int, void*)+0x102>
c000e923:	eb b3                	jmp    c000e8d8 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e925:	8d 76 00             	lea    esi,[esi+0x0]
c000e928:	83 ec 0c             	sub    esp,0xc
c000e92b:	57                   	push   edi
c000e92c:	e8 53 fd ff ff       	call   c000e684 <VCache::invalidateReadBuffer()>
c000e931:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e934:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e938:	8b 10                	mov    edx,DWORD PTR [eax]
c000e93a:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e93e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e942:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e946:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e94a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e94e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e951:	83 c4 2c             	add    esp,0x2c
c000e954:	5b                   	pop    ebx
c000e955:	5e                   	pop    esi
c000e956:	5f                   	pop    edi
c000e957:	5d                   	pop    ebp
c000e958:	ff e0                	jmp    eax
c000e95a:	66 90                	xchg   ax,ax
c000e95c:	83 c4 1c             	add    esp,0x1c
c000e95f:	5b                   	pop    ebx
c000e960:	5e                   	pop    esi
c000e961:	5f                   	pop    edi
c000e962:	5d                   	pop    ebp
c000e963:	c3                   	ret    

c000e964 <Video::putrect(int, int, int, int, unsigned int)>:
c000e964:	55                   	push   ebp
c000e965:	57                   	push   edi
c000e966:	56                   	push   esi
c000e967:	53                   	push   ebx
c000e968:	83 ec 1c             	sub    esp,0x1c
c000e96b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e96f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e973:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e977:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e97b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e97f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e983:	01 df                	add    edi,ebx
c000e985:	39 fb                	cmp    ebx,edi
c000e987:	7d 1f                	jge    c000e9a8 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e989:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e98d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e991:	7d 12                	jge    c000e9a5 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e993:	8b 16                	mov    edx,DWORD PTR [esi]
c000e995:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e999:	53                   	push   ebx
c000e99a:	55                   	push   ebp
c000e99b:	45                   	inc    ebp
c000e99c:	56                   	push   esi
c000e99d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e9a0:	83 c4 10             	add    esp,0x10
c000e9a3:	eb e8                	jmp    c000e98d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e9a5:	43                   	inc    ebx
c000e9a6:	eb dd                	jmp    c000e985 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e9a8:	83 c4 1c             	add    esp,0x1c
c000e9ab:	5b                   	pop    ebx
c000e9ac:	5e                   	pop    esi
c000e9ad:	5f                   	pop    edi
c000e9ae:	5d                   	pop    ebp
c000e9af:	c3                   	ret    

c000e9b0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e9b0:	55                   	push   ebp
c000e9b1:	57                   	push   edi
c000e9b2:	31 ff                	xor    edi,edi
c000e9b4:	56                   	push   esi
c000e9b5:	53                   	push   ebx
c000e9b6:	83 ec 1c             	sub    esp,0x1c
c000e9b9:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e9bd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e9c1:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e9c8:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e9cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e9d1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e9d5:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e9d9:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e9dc:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e9e0:	01 f9                	add    ecx,edi
c000e9e2:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e9e6:	7d 2f                	jge    c000ea17 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e9e8:	31 f6                	xor    esi,esi
c000e9ea:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e9ee:	01 f2                	add    edx,esi
c000e9f0:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e9f4:	7d 1a                	jge    c000ea10 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e9f6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e9f9:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e9fc:	46                   	inc    esi
c000e9fd:	51                   	push   ecx
c000e9fe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ea02:	52                   	push   edx
c000ea03:	55                   	push   ebp
c000ea04:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ea07:	83 c4 10             	add    esp,0x10
c000ea0a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea0e:	eb da                	jmp    c000e9ea <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000ea10:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000ea14:	47                   	inc    edi
c000ea15:	eb c5                	jmp    c000e9dc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000ea17:	83 c4 1c             	add    esp,0x1c
c000ea1a:	5b                   	pop    ebx
c000ea1b:	5e                   	pop    esi
c000ea1c:	5f                   	pop    edi
c000ea1d:	5d                   	pop    ebp
c000ea1e:	c3                   	ret    
c000ea1f:	90                   	nop

c000ea20 <Video::blit(unsigned int*, int, int, int, int)>:
c000ea20:	55                   	push   ebp
c000ea21:	ba 00 00 00 00       	mov    edx,0x0
c000ea26:	57                   	push   edi
c000ea27:	56                   	push   esi
c000ea28:	53                   	push   ebx
c000ea29:	83 ec 1c             	sub    esp,0x1c
c000ea2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea30:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ea34:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ea38:	85 c0                	test   eax,eax
c000ea3a:	0f 49 d0             	cmovns edx,eax
c000ea3d:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000ea44:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ea48:	89 eb                	mov    ebx,ebp
c000ea4a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000ea4e:	01 ea                	add    edx,ebp
c000ea50:	39 da                	cmp    edx,ebx
c000ea52:	7e 54                	jle    c000eaa8 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000ea54:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ea5a:	7c 4c                	jl     c000eaa8 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000ea5c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ea60:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea64:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ea68:	01 c1                	add    ecx,eax
c000ea6a:	39 f9                	cmp    ecx,edi
c000ea6c:	7e 2f                	jle    c000ea9d <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000ea6e:	83 c2 04             	add    edx,0x4
c000ea71:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ea77:	7c 21                	jl     c000ea9a <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000ea79:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ea7d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ea7f:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000ea82:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000ea86:	55                   	push   ebp
c000ea87:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ea8b:	56                   	push   esi
c000ea8c:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ea8f:	83 c4 10             	add    esp,0x10
c000ea92:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea9a:	47                   	inc    edi
c000ea9b:	eb c7                	jmp    c000ea64 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000ea9d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000eaa1:	43                   	inc    ebx
c000eaa2:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000eaa6:	eb a2                	jmp    c000ea4a <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000eaa8:	83 c4 1c             	add    esp,0x1c
c000eaab:	5b                   	pop    ebx
c000eaac:	5e                   	pop    esi
c000eaad:	5f                   	pop    edi
c000eaae:	5d                   	pop    ebp
c000eaaf:	c3                   	ret    

c000eab0 <Video::clearScreen(unsigned int)>:
c000eab0:	57                   	push   edi
c000eab1:	56                   	push   esi
c000eab2:	53                   	push   ebx
c000eab3:	31 db                	xor    ebx,ebx
c000eab5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eab9:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eabf:	7e 1f                	jle    c000eae0 <Video::clearScreen(unsigned int)+0x30>
c000eac1:	31 ff                	xor    edi,edi
c000eac3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eac9:	7e 12                	jle    c000eadd <Video::clearScreen(unsigned int)+0x2d>
c000eacb:	8b 06                	mov    eax,DWORD PTR [esi]
c000eacd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ead1:	53                   	push   ebx
c000ead2:	57                   	push   edi
c000ead3:	47                   	inc    edi
c000ead4:	56                   	push   esi
c000ead5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ead8:	83 c4 10             	add    esp,0x10
c000eadb:	eb e6                	jmp    c000eac3 <Video::clearScreen(unsigned int)+0x13>
c000eadd:	43                   	inc    ebx
c000eade:	eb d9                	jmp    c000eab9 <Video::clearScreen(unsigned int)+0x9>
c000eae0:	5b                   	pop    ebx
c000eae1:	5e                   	pop    esi
c000eae2:	5f                   	pop    edi
c000eae3:	c3                   	ret    

c000eae4 <Video::putpixel(int, int, unsigned int)>:
c000eae4:	c7 44 24 04 68 1d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021d68
c000eaec:	e9 16 2a 00 00       	jmp    c0011507 <KePanic(char const*)>
c000eaf1:	90                   	nop

c000eaf2 <Video::readPixelApprox(int, int)>:
c000eaf2:	83 ec 18             	sub    esp,0x18
c000eaf5:	68 89 1d 02 c0       	push   0xc0021d89
c000eafa:	e8 08 2a 00 00       	call   c0011507 <KePanic(char const*)>
c000eaff:	31 c0                	xor    eax,eax
c000eb01:	83 c4 1c             	add    esp,0x1c
c000eb04:	c3                   	ret    
c000eb05:	90                   	nop

c000eb06 <Video::Video(char const*)>:
c000eb06:	83 ec 0c             	sub    esp,0xc
c000eb09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb0d:	83 ec 08             	sub    esp,0x8
c000eb10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb14:	50                   	push   eax
c000eb15:	e8 be df ff ff       	call   c000cad8 <Device::Device(char const*)>
c000eb1a:	83 c4 10             	add    esp,0x10
c000eb1d:	ba 04 1e 02 c0       	mov    edx,0xc0021e04
c000eb22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb26:	89 10                	mov    DWORD PTR [eax],edx
c000eb28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb2c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000eb36:	90                   	nop
c000eb37:	83 c4 0c             	add    esp,0xc
c000eb3a:	c3                   	ret    
c000eb3b:	90                   	nop

c000eb3c <Video::~Video()>:
c000eb3c:	83 ec 0c             	sub    esp,0xc
c000eb3f:	ba 04 1e 02 c0       	mov    edx,0xc0021e04
c000eb44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb48:	89 10                	mov    DWORD PTR [eax],edx
c000eb4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb4e:	83 ec 0c             	sub    esp,0xc
c000eb51:	50                   	push   eax
c000eb52:	e8 eb dc ff ff       	call   c000c842 <Device::~Device()>
c000eb57:	83 c4 10             	add    esp,0x10
c000eb5a:	90                   	nop
c000eb5b:	83 c4 0c             	add    esp,0xc
c000eb5e:	c3                   	ret    
c000eb5f:	90                   	nop

c000eb60 <Video::~Video()>:
c000eb60:	83 ec 0c             	sub    esp,0xc
c000eb63:	83 ec 0c             	sub    esp,0xc
c000eb66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb6a:	e8 cd ff ff ff       	call   c000eb3c <Video::~Video()>
c000eb6f:	83 c4 10             	add    esp,0x10
c000eb72:	83 ec 08             	sub    esp,0x8
c000eb75:	68 64 01 00 00       	push   0x164
c000eb7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb7e:	e8 89 bc ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000eb83:	83 c4 10             	add    esp,0x10
c000eb86:	83 c4 0c             	add    esp,0xc
c000eb89:	c3                   	ret    

c000eb8a <Video::isMonochrome()>:
c000eb8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb8e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000eb94:	c3                   	ret    
c000eb95:	90                   	nop

c000eb96 <Video::getWidth()>:
c000eb96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb9a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000eba0:	c3                   	ret    
c000eba1:	90                   	nop

c000eba2 <Video::getHeight()>:
c000eba2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eba6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ebac:	c3                   	ret    
c000ebad:	90                   	nop

c000ebae <Video::drawCursor(int, int, unsigned int*, int)>:
c000ebae:	55                   	push   ebp
c000ebaf:	57                   	push   edi
c000ebb0:	56                   	push   esi
c000ebb1:	53                   	push   ebx
c000ebb2:	83 ec 2c             	sub    esp,0x2c
c000ebb5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ebb9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ebbd:	83 f8 01             	cmp    eax,0x1
c000ebc0:	19 c9                	sbb    ecx,ecx
c000ebc2:	31 db                	xor    ebx,ebx
c000ebc4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ebc8:	89 ce                	mov    esi,ecx
c000ebca:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ebd2:	f7 d6                	not    esi
c000ebd4:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000ebda:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ebde:	01 d8                	add    eax,ebx
c000ebe0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ebe4:	57                   	push   edi
c000ebe5:	e8 b8 ff ff ff       	call   c000eba2 <Video::getHeight()>
c000ebea:	59                   	pop    ecx
c000ebeb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ebef:	7e 70                	jle    c000ec61 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ebf1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ebf5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000ebf9:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ebfc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec00:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec04:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ec0b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec0f:	89 e8                	mov    eax,ebp
c000ec11:	83 c0 20             	add    eax,0x20
c000ec14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ec18:	57                   	push   edi
c000ec19:	e8 78 ff ff ff       	call   c000eb96 <Video::getWidth()>
c000ec1e:	5a                   	pop    edx
c000ec1f:	39 c5                	cmp    ebp,eax
c000ec21:	7d 34                	jge    c000ec57 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ec23:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ec28:	74 05                	je     c000ec2f <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ec2a:	8b 07                	mov    eax,DWORD PTR [edi]
c000ec2c:	56                   	push   esi
c000ec2d:	eb 0d                	jmp    c000ec3c <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ec2f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ec34:	74 12                	je     c000ec48 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ec36:	8b 07                	mov    eax,DWORD PTR [edi]
c000ec38:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ec3c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ec40:	55                   	push   ebp
c000ec41:	57                   	push   edi
c000ec42:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ec45:	83 c4 10             	add    esp,0x10
c000ec48:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ec4c:	45                   	inc    ebp
c000ec4d:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ec51:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000ec55:	75 c1                	jne    c000ec18 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ec57:	43                   	inc    ebx
c000ec58:	83 fb 20             	cmp    ebx,0x20
c000ec5b:	0f 85 79 ff ff ff    	jne    c000ebda <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ec61:	83 c4 2c             	add    esp,0x2c
c000ec64:	5b                   	pop    ebx
c000ec65:	5e                   	pop    esi
c000ec66:	5f                   	pop    edi
c000ec67:	5d                   	pop    ebp
c000ec68:	c3                   	ret    
c000ec69:	90                   	nop

c000ec6a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ec6a:	55                   	push   ebp
c000ec6b:	57                   	push   edi
c000ec6c:	56                   	push   esi
c000ec6d:	53                   	push   ebx
c000ec6e:	83 ec 28             	sub    esp,0x28
c000ec71:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ec75:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000ec79:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ec7d:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000ec81:	c1 e7 08             	shl    edi,0x8
c000ec84:	01 c7                	add    edi,eax
c000ec86:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000ec8a:	c1 e6 08             	shl    esi,0x8
c000ec8d:	01 f0                	add    eax,esi
c000ec8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec97:	0f af c7             	imul   eax,edi
c000ec9a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000eca1:	50                   	push   eax
c000eca2:	e8 2c 8e ff ff       	call   c0007ad3 <malloc>
c000eca7:	83 c4 10             	add    esp,0x10
c000ecaa:	85 c0                	test   eax,eax
c000ecac:	89 c5                	mov    ebp,eax
c000ecae:	75 10                	jne    c000ecc0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	68 b4 1d 02 c0       	push   0xc0021db4
c000ecb8:	e8 4a 28 00 00       	call   c0011507 <KePanic(char const*)>
c000ecbd:	83 c4 10             	add    esp,0x10
c000ecc0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ecc4:	ba 12 00 00 00       	mov    edx,0x12
c000ecc9:	85 c0                	test   eax,eax
c000eccb:	74 11                	je     c000ecde <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000eccd:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ecd1:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ecd5:	c1 fa 03             	sar    edx,0x3
c000ecd8:	0f af d1             	imul   edx,ecx
c000ecdb:	83 c2 12             	add    edx,0x12
c000ecde:	85 ff                	test   edi,edi
c000ece0:	74 06                	je     c000ece8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000ece2:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000ece6:	75 12                	jne    c000ecfa <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000ece8:	83 ec 0c             	sub    esp,0xc
c000eceb:	68 c4 1d 02 c0       	push   0xc0021dc4
c000ecf0:	e8 15 bc ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ecf5:	e9 b8 00 00 00       	jmp    c000edb2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000ecfa:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000ecfe:	83 f9 02             	cmp    ecx,0x2
c000ed01:	0f 85 96 00 00 00    	jne    c000ed9d <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000ed07:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000ed0c:	75 0e                	jne    c000ed1c <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed0e:	85 c0                	test   eax,eax
c000ed10:	75 0a                	jne    c000ed1c <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed12:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000ed15:	83 e8 18             	sub    eax,0x18
c000ed18:	a8 f7                	test   al,0xf7
c000ed1a:	74 0a                	je     c000ed26 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000ed1c:	83 ec 0c             	sub    esp,0xc
c000ed1f:	68 d9 1d 02 c0       	push   0xc0021dd9
c000ed24:	eb 7f                	jmp    c000eda5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000ed26:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ed2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000ed36:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000ed3a:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000ed3e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ed46:	75 0c                	jne    c000ed54 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000ed48:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000ed4d:	c1 e1 18             	shl    ecx,0x18
c000ed50:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ed54:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000ed59:	46                   	inc    esi
c000ed5a:	89 c8                	mov    eax,ecx
c000ed5c:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ed61:	c1 e0 10             	shl    eax,0x10
c000ed64:	c1 e1 08             	shl    ecx,0x8
c000ed67:	09 c1                	or     ecx,eax
c000ed69:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ed6d:	09 c1                	or     ecx,eax
c000ed6f:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ed73:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000ed77:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ed7b:	c1 f8 03             	sar    eax,0x3
c000ed7e:	01 c2                	add    edx,eax
c000ed80:	89 f0                	mov    eax,esi
c000ed82:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ed86:	39 c7                	cmp    edi,eax
c000ed88:	7f b0                	jg     c000ed3a <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ed8a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ed8e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ed92:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ed95:	7e 22                	jle    c000edb9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ed97:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ed9b:	eb 99                	jmp    c000ed36 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ed9d:	50                   	push   eax
c000ed9e:	50                   	push   eax
c000ed9f:	51                   	push   ecx
c000eda0:	68 e7 1d 02 c0       	push   0xc0021de7
c000eda5:	e8 60 bb ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000edaa:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000edad:	e8 31 8d ff ff       	call   c0007ae3 <free>
c000edb2:	83 c4 10             	add    esp,0x10
c000edb5:	31 ed                	xor    ebp,ebp
c000edb7:	eb 0f                	jmp    c000edc8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000edb9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edbd:	89 38                	mov    DWORD PTR [eax],edi
c000edbf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000edc3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000edc6:	89 38                	mov    DWORD PTR [eax],edi
c000edc8:	83 c4 1c             	add    esp,0x1c
c000edcb:	89 e8                	mov    eax,ebp
c000edcd:	5b                   	pop    ebx
c000edce:	5e                   	pop    esi
c000edcf:	5f                   	pop    edi
c000edd0:	5d                   	pop    ebp
c000edd1:	c3                   	ret    

c000edd2 <Video::putTGA(int, int, unsigned char*, int)>:
c000edd2:	55                   	push   ebp
c000edd3:	57                   	push   edi
c000edd4:	56                   	push   esi
c000edd5:	53                   	push   ebx
c000edd6:	83 ec 28             	sub    esp,0x28
c000edd9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eddd:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ede1:	50                   	push   eax
c000ede2:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ede6:	50                   	push   eax
c000ede7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000edeb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000edef:	57                   	push   edi
c000edf0:	e8 75 fe ff ff       	call   c000ec6a <Video::tgaParse(unsigned char*, int, int*, int*)>
c000edf5:	83 c4 20             	add    esp,0x20
c000edf8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000edfc:	85 c0                	test   eax,eax
c000edfe:	74 35                	je     c000ee35 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee00:	89 c6                	mov    esi,eax
c000ee02:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee06:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ee0a:	39 d8                	cmp    eax,ebx
c000ee0c:	7e 27                	jle    c000ee35 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee0e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ee12:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000ee16:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000ee1a:	39 e9                	cmp    ecx,ebp
c000ee1c:	7e 14                	jle    c000ee32 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ee1e:	83 c6 04             	add    esi,0x4
c000ee21:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ee23:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000ee26:	53                   	push   ebx
c000ee27:	55                   	push   ebp
c000ee28:	45                   	inc    ebp
c000ee29:	57                   	push   edi
c000ee2a:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ee2d:	83 c4 10             	add    esp,0x10
c000ee30:	eb e0                	jmp    c000ee12 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ee32:	43                   	inc    ebx
c000ee33:	eb cd                	jmp    c000ee02 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ee35:	83 c4 1c             	add    esp,0x1c
c000ee38:	5b                   	pop    ebx
c000ee39:	5e                   	pop    esi
c000ee3a:	5f                   	pop    edi
c000ee3b:	5d                   	pop    ebp
c000ee3c:	c3                   	ret    
c000ee3d:	66 90                	xchg   ax,ax
c000ee3f:	90                   	nop

c000ee40 <ACPI::close(int, int, void*)>:
c000ee40:	83 ec 1c             	sub    esp,0x1c
c000ee43:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ee4b:	74 0b                	je     c000ee58 <ACPI::close(int, int, void*)+0x18>
c000ee4d:	b8 00 00 00 00       	mov    eax,0x0
c000ee52:	e9 99 00 00 00       	jmp    c000eef0 <ACPI::close(int, int, void*)+0xb0>
c000ee57:	90                   	nop
c000ee58:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ee5d:	75 29                	jne    c000ee88 <ACPI::close(int, int, void*)+0x48>
c000ee5f:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ee64:	85 c0                	test   eax,eax
c000ee66:	74 08                	je     c000ee70 <ACPI::close(int, int, void*)+0x30>
c000ee68:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ee6d:	ff d0                	call   eax
c000ee6f:	90                   	nop
c000ee70:	83 ec 0c             	sub    esp,0xc
c000ee73:	68 48 1e 02 c0       	push   0xc0021e48
c000ee78:	e8 8a 26 00 00       	call   c0011507 <KePanic(char const*)>
c000ee7d:	83 c4 10             	add    esp,0x10
c000ee80:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ee85:	eb 69                	jmp    c000eef0 <ACPI::close(int, int, void*)+0xb0>
c000ee87:	90                   	nop
c000ee88:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ee8d:	75 59                	jne    c000eee8 <ACPI::close(int, int, void*)+0xa8>
c000ee8f:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ee94:	85 c0                	test   eax,eax
c000ee96:	74 08                	je     c000eea0 <ACPI::close(int, int, void*)+0x60>
c000ee98:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ee9d:	ff d0                	call   eax
c000ee9f:	90                   	nop
c000eea0:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000eea5:	8d 76 00             	lea    esi,[esi+0x0]
c000eea8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eead:	83 e0 02             	and    eax,0x2
c000eeb0:	74 1e                	je     c000eed0 <ACPI::close(int, int, void*)+0x90>
c000eeb2:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000eeb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eebd:	89 c2                	mov    edx,eax
c000eebf:	ec                   	in     al,dx
c000eec0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eec4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000eec8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eecc:	eb da                	jmp    c000eea8 <ACPI::close(int, int, void*)+0x68>
c000eece:	66 90                	xchg   ax,ax
c000eed0:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000eed7:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000eedc:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000eee0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eee4:	ee                   	out    dx,al
c000eee5:	8d 76 00             	lea    esi,[esi+0x0]
c000eee8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eeed:	8d 76 00             	lea    esi,[esi+0x0]
c000eef0:	83 c4 1c             	add    esp,0x1c
c000eef3:	c3                   	ret    

c000eef4 <findRSDP()>:
c000eef4:	83 ec 1c             	sub    esp,0x1c
c000eef7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000eefc:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef02:	83 e0 04             	and    eax,0x4
c000ef05:	0f b6 c0             	movzx  eax,al
c000ef08:	85 c0                	test   eax,eax
c000ef0a:	75 08                	jne    c000ef14 <findRSDP()+0x20>
c000ef0c:	b8 00 00 00 00       	mov    eax,0x0
c000ef11:	eb 75                	jmp    c000ef88 <findRSDP()+0x94>
c000ef13:	90                   	nop
c000ef14:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000ef19:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ef1e:	7f 1c                	jg     c000ef3c <findRSDP()+0x48>
c000ef20:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000ef25:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ef2b:	83 e2 fb             	and    edx,0xfffffffb
c000ef2e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ef34:	b8 00 00 00 00       	mov    eax,0x0
c000ef39:	eb 4d                	jmp    c000ef88 <findRSDP()+0x94>
c000ef3b:	90                   	nop
c000ef3c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ef44:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ef4c:	77 32                	ja     c000ef80 <findRSDP()+0x8c>
c000ef4e:	83 ec 04             	sub    esp,0x4
c000ef51:	6a 08                	push   0x8
c000ef53:	68 e3 1e 02 c0       	push   0xc0021ee3
c000ef58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ef5c:	e8 1f 14 ff ff       	call   c0000380 <memcmp>
c000ef61:	83 c4 10             	add    esp,0x10
c000ef64:	85 c0                	test   eax,eax
c000ef66:	0f 94 c0             	sete   al
c000ef69:	0f b6 c0             	movzx  eax,al
c000ef6c:	85 c0                	test   eax,eax
c000ef6e:	74 08                	je     c000ef78 <findRSDP()+0x84>
c000ef70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef74:	eb 12                	jmp    c000ef88 <findRSDP()+0x94>
c000ef76:	66 90                	xchg   ax,ax
c000ef78:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ef7d:	eb c5                	jmp    c000ef44 <findRSDP()+0x50>
c000ef7f:	90                   	nop
c000ef80:	b8 00 00 00 00       	mov    eax,0x0
c000ef85:	8d 76 00             	lea    esi,[esi+0x0]
c000ef88:	83 c4 1c             	add    esp,0x1c
c000ef8b:	c3                   	ret    

c000ef8c <loadACPITables(unsigned char*)>:
c000ef8c:	57                   	push   edi
c000ef8d:	56                   	push   esi
c000ef8e:	53                   	push   ebx
c000ef8f:	83 ec 60             	sub    esp,0x60
c000ef92:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000ef97:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef9d:	83 e0 04             	and    eax,0x4
c000efa0:	0f b6 c0             	movzx  eax,al
c000efa3:	85 c0                	test   eax,eax
c000efa5:	0f 84 41 02 00 00    	je     c000f1ec <loadACPITables(unsigned char*)+0x260>
c000efab:	a0 20 bb 02 c0       	mov    al,ds:0xc002bb20
c000efb0:	0f b6 c0             	movzx  eax,al
c000efb3:	85 c0                	test   eax,eax
c000efb5:	74 79                	je     c000f030 <loadACPITables(unsigned char*)+0xa4>
c000efb7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000efbb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000efbf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000efc3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000efc6:	83 e8 24             	sub    eax,0x24
c000efc9:	c1 e8 03             	shr    eax,0x3
c000efcc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000efd0:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000efd8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000efdc:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000efe0:	0f 8d ba 00 00 00    	jge    c000f0a0 <loadACPITables(unsigned char*)+0x114>
c000efe6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000efea:	83 c0 24             	add    eax,0x24
c000efed:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000eff1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000eff5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000eff9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000effd:	c1 e0 03             	shl    eax,0x3
c000f000:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000f004:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f008:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f00b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f00d:	89 c1                	mov    ecx,eax
c000f00f:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f014:	8d 50 01             	lea    edx,[eax+0x1]
c000f017:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f01d:	89 ca                	mov    edx,ecx
c000f01f:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f026:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000f02b:	eb ab                	jmp    c000efd8 <loadACPITables(unsigned char*)+0x4c>
c000f02d:	8d 76 00             	lea    esi,[esi+0x0]
c000f030:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f034:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f038:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f03c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f03f:	83 e8 24             	sub    eax,0x24
c000f042:	c1 e8 02             	shr    eax,0x2
c000f045:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f049:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000f051:	8d 76 00             	lea    esi,[esi+0x0]
c000f054:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f058:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000f05c:	7d 42                	jge    c000f0a0 <loadACPITables(unsigned char*)+0x114>
c000f05e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f062:	83 c0 24             	add    eax,0x24
c000f065:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f069:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f06d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f071:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f075:	c1 e0 02             	shl    eax,0x2
c000f078:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000f07c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f080:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f082:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f087:	8d 50 01             	lea    edx,[eax+0x1]
c000f08a:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f090:	89 ca                	mov    edx,ecx
c000f092:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f099:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000f09e:	eb b4                	jmp    c000f054 <loadACPITables(unsigned char*)+0xc8>
c000f0a0:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000f0a8:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f0ad:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000f0b1:	0f 8d 39 01 00 00    	jge    c000f1f0 <loadACPITables(unsigned char*)+0x264>
c000f0b7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f0bb:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f0c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f0c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0ca:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f0ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0d2:	25 ff 0f 00 00       	and    eax,0xfff
c000f0d7:	89 c6                	mov    esi,eax
c000f0d9:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f0df:	83 ec 0c             	sub    esp,0xc
c000f0e2:	6a 01                	push   0x1
c000f0e4:	e8 0c a5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f0e9:	83 c4 10             	add    esp,0x10
c000f0ec:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f0f0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f0f6:	83 ec 0c             	sub    esp,0xc
c000f0f9:	6a 01                	push   0x1
c000f0fb:	6a 01                	push   0x1
c000f0fd:	50                   	push   eax
c000f0fe:	52                   	push   edx
c000f0ff:	53                   	push   ebx
c000f100:	e8 03 ae ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f105:	83 c4 20             	add    esp,0x20
c000f108:	09 f0                	or     eax,esi
c000f10a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f10e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f112:	c1 e0 03             	shl    eax,0x3
c000f115:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f11a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f11e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f122:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f126:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000f12e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f132:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f136:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f13a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f13e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f142:	89 c6                	mov    esi,eax
c000f144:	89 d7                	mov    edi,edx
c000f146:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f148:	89 c8                	mov    eax,ecx
c000f14a:	89 fa                	mov    edx,edi
c000f14c:	89 f3                	mov    ebx,esi
c000f14e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f152:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000f156:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f15a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f15e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f161:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f165:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f169:	05 00 10 00 00       	add    eax,0x1000
c000f16e:	c1 e8 0c             	shr    eax,0xc
c000f171:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f175:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f179:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f17d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f181:	25 ff 0f 00 00       	and    eax,0xfff
c000f186:	89 c6                	mov    esi,eax
c000f188:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f18e:	83 ec 0c             	sub    esp,0xc
c000f191:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f195:	e8 5b a4 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f19a:	83 c4 10             	add    esp,0x10
c000f19d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f1a1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f1a7:	83 ec 0c             	sub    esp,0xc
c000f1aa:	6a 01                	push   0x1
c000f1ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f1b0:	50                   	push   eax
c000f1b1:	52                   	push   edx
c000f1b2:	53                   	push   ebx
c000f1b3:	e8 50 ad ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f1b8:	83 c4 20             	add    esp,0x20
c000f1bb:	09 f0                	or     eax,esi
c000f1bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f1c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f1c5:	83 ec 0c             	sub    esp,0xc
c000f1c8:	50                   	push   eax
c000f1c9:	e8 3b a7 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000f1ce:	83 c4 10             	add    esp,0x10
c000f1d1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f1d5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f1d9:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f1e0:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f1e5:	e9 be fe ff ff       	jmp    c000f0a8 <loadACPITables(unsigned char*)+0x11c>
c000f1ea:	66 90                	xchg   ax,ax
c000f1ec:	90                   	nop
c000f1ed:	8d 76 00             	lea    esi,[esi+0x0]
c000f1f0:	83 c4 60             	add    esp,0x60
c000f1f3:	5b                   	pop    ebx
c000f1f4:	5e                   	pop    esi
c000f1f5:	5f                   	pop    edi
c000f1f6:	c3                   	ret    
c000f1f7:	90                   	nop

c000f1f8 <findRSDT(unsigned char*)>:
c000f1f8:	57                   	push   edi
c000f1f9:	56                   	push   esi
c000f1fa:	53                   	push   ebx
c000f1fb:	83 ec 50             	sub    esp,0x50
c000f1fe:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f203:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f209:	83 e0 04             	and    eax,0x4
c000f20c:	0f b6 c0             	movzx  eax,al
c000f20f:	85 c0                	test   eax,eax
c000f211:	75 0d                	jne    c000f220 <findRSDT(unsigned char*)+0x28>
c000f213:	b8 00 00 00 00       	mov    eax,0x0
c000f218:	e9 2b 01 00 00       	jmp    c000f348 <findRSDT(unsigned char*)+0x150>
c000f21d:	8d 76 00             	lea    esi,[esi+0x0]
c000f220:	89 e0                	mov    eax,esp
c000f222:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f226:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f22a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f22e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f23a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f23e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f242:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f246:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f24a:	89 c6                	mov    esi,eax
c000f24c:	89 d7                	mov    edi,edx
c000f24e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f250:	89 c8                	mov    eax,ecx
c000f252:	89 fa                	mov    edx,edi
c000f254:	89 f3                	mov    ebx,esi
c000f256:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f25a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f25e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f262:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f266:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f26a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f272:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f276:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f27a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f27e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f282:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f286:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f28a:	25 ff 0f 00 00       	and    eax,0xfff
c000f28f:	89 c6                	mov    esi,eax
c000f291:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f297:	83 ec 0c             	sub    esp,0xc
c000f29a:	6a 02                	push   0x2
c000f29c:	e8 54 a3 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f2a1:	83 c4 10             	add    esp,0x10
c000f2a4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f2a8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f2ae:	83 ec 0c             	sub    esp,0xc
c000f2b1:	6a 01                	push   0x1
c000f2b3:	6a 02                	push   0x2
c000f2b5:	50                   	push   eax
c000f2b6:	52                   	push   edx
c000f2b7:	53                   	push   ebx
c000f2b8:	e8 4b ac ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f2bd:	83 c4 20             	add    esp,0x20
c000f2c0:	09 f0                	or     eax,esi
c000f2c2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f2c6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f2ca:	25 ff 0f 00 00       	and    eax,0xfff
c000f2cf:	89 c6                	mov    esi,eax
c000f2d1:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f2d7:	83 ec 0c             	sub    esp,0xc
c000f2da:	6a 02                	push   0x2
c000f2dc:	e8 14 a3 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f2e1:	83 c4 10             	add    esp,0x10
c000f2e4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f2e8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f2ee:	83 ec 0c             	sub    esp,0xc
c000f2f1:	6a 01                	push   0x1
c000f2f3:	6a 02                	push   0x2
c000f2f5:	50                   	push   eax
c000f2f6:	52                   	push   edx
c000f2f7:	53                   	push   ebx
c000f2f8:	e8 0b ac ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f2fd:	83 c4 20             	add    esp,0x20
c000f300:	09 f0                	or     eax,esi
c000f302:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f306:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f30b:	85 c0                	test   eax,eax
c000f30d:	75 11                	jne    c000f320 <findRSDT(unsigned char*)+0x128>
c000f30f:	c6 05 20 bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb20,0x0
c000f316:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f31a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f31e:	eb 24                	jmp    c000f344 <findRSDT(unsigned char*)+0x14c>
c000f320:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f325:	83 f8 02             	cmp    eax,0x2
c000f328:	75 12                	jne    c000f33c <findRSDT(unsigned char*)+0x144>
c000f32a:	c6 05 20 bb 02 c0 01 	mov    BYTE PTR ds:0xc002bb20,0x1
c000f331:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f335:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f339:	eb 09                	jmp    c000f344 <findRSDT(unsigned char*)+0x14c>
c000f33b:	90                   	nop
c000f33c:	b8 00 00 00 00       	mov    eax,0x0
c000f341:	eb 05                	jmp    c000f348 <findRSDT(unsigned char*)+0x150>
c000f343:	90                   	nop
c000f344:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f348:	83 c4 50             	add    esp,0x50
c000f34b:	5b                   	pop    ebx
c000f34c:	5e                   	pop    esi
c000f34d:	5f                   	pop    edi
c000f34e:	c3                   	ret    
c000f34f:	90                   	nop

c000f350 <findDataTable(unsigned char*, char*)>:
c000f350:	83 ec 1c             	sub    esp,0x1c
c000f353:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f358:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f35e:	83 e0 04             	and    eax,0x4
c000f361:	0f b6 c0             	movzx  eax,al
c000f364:	85 c0                	test   eax,eax
c000f366:	75 08                	jne    c000f370 <findDataTable(unsigned char*, char*)+0x20>
c000f368:	b8 00 00 00 00       	mov    eax,0x0
c000f36d:	eb 5d                	jmp    c000f3cc <findDataTable(unsigned char*, char*)+0x7c>
c000f36f:	90                   	nop
c000f370:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f378:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f37d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f381:	7d 41                	jge    c000f3c4 <findDataTable(unsigned char*, char*)+0x74>
c000f383:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f387:	c1 e0 03             	shl    eax,0x3
c000f38a:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f38f:	83 ec 04             	sub    esp,0x4
c000f392:	6a 04                	push   0x4
c000f394:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f398:	50                   	push   eax
c000f399:	e8 e2 0f ff ff       	call   c0000380 <memcmp>
c000f39e:	83 c4 10             	add    esp,0x10
c000f3a1:	85 c0                	test   eax,eax
c000f3a3:	0f 94 c0             	sete   al
c000f3a6:	0f b6 c0             	movzx  eax,al
c000f3a9:	85 c0                	test   eax,eax
c000f3ab:	74 0f                	je     c000f3bc <findDataTable(unsigned char*, char*)+0x6c>
c000f3ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f3b1:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f3b8:	eb 12                	jmp    c000f3cc <findDataTable(unsigned char*, char*)+0x7c>
c000f3ba:	66 90                	xchg   ax,ax
c000f3bc:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f3c1:	eb b5                	jmp    c000f378 <findDataTable(unsigned char*, char*)+0x28>
c000f3c3:	90                   	nop
c000f3c4:	b8 00 00 00 00       	mov    eax,0x0
c000f3c9:	8d 76 00             	lea    esi,[esi+0x0]
c000f3cc:	83 c4 1c             	add    esp,0x1c
c000f3cf:	c3                   	ret    

c000f3d0 <scanMADT()>:
c000f3d0:	53                   	push   ebx
c000f3d1:	83 ec 38             	sub    esp,0x38
c000f3d4:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c000f3d9:	25 00 04 00 00       	and    eax,0x400
c000f3de:	74 14                	je     c000f3f4 <scanMADT()+0x24>
c000f3e0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f3e5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f3eb:	83 e2 fb             	and    edx,0xfffffffb
c000f3ee:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f3f4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f3f9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f3ff:	83 e0 04             	and    eax,0x4
c000f402:	0f b6 c0             	movzx  eax,al
c000f405:	85 c0                	test   eax,eax
c000f407:	0f 84 6b 04 00 00    	je     c000f878 <scanMADT()+0x4a8>
c000f40d:	e8 e2 fa ff ff       	call   c000eef4 <findRSDP()>
c000f412:	a3 2c bb 02 c0       	mov    ds:0xc002bb2c,eax
c000f417:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f41c:	85 c0                	test   eax,eax
c000f41e:	75 1c                	jne    c000f43c <scanMADT()+0x6c>
c000f420:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f425:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f42b:	83 e2 fb             	and    edx,0xfffffffb
c000f42e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f434:	e9 47 04 00 00       	jmp    c000f880 <scanMADT()+0x4b0>
c000f439:	8d 76 00             	lea    esi,[esi+0x0]
c000f43c:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f441:	83 ec 0c             	sub    esp,0xc
c000f444:	50                   	push   eax
c000f445:	e8 ae fd ff ff       	call   c000f1f8 <findRSDT(unsigned char*)>
c000f44a:	83 c4 10             	add    esp,0x10
c000f44d:	a3 28 bb 02 c0       	mov    ds:0xc002bb28,eax
c000f452:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f457:	85 c0                	test   eax,eax
c000f459:	75 19                	jne    c000f474 <scanMADT()+0xa4>
c000f45b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f460:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f466:	83 e2 fb             	and    edx,0xfffffffb
c000f469:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f46f:	e9 0c 04 00 00       	jmp    c000f880 <scanMADT()+0x4b0>
c000f474:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f479:	83 ec 0c             	sub    esp,0xc
c000f47c:	50                   	push   eax
c000f47d:	e8 0a fb ff ff       	call   c000ef8c <loadACPITables(unsigned char*)>
c000f482:	83 c4 10             	add    esp,0x10
c000f485:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f48a:	83 ec 08             	sub    esp,0x8
c000f48d:	68 ec 1e 02 c0       	push   0xc0021eec
c000f492:	50                   	push   eax
c000f493:	e8 b8 fe ff ff       	call   c000f350 <findDataTable(unsigned char*, char*)>
c000f498:	83 c4 10             	add    esp,0x10
c000f49b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f49f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f4a4:	75 1a                	jne    c000f4c0 <scanMADT()+0xf0>
c000f4a6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4ab:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f4b1:	83 e2 fe             	and    edx,0xfffffffe
c000f4b4:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f4ba:	e9 c1 03 00 00       	jmp    c000f880 <scanMADT()+0x4b0>
c000f4bf:	90                   	nop
c000f4c0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f4c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f4cf:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f4d3:	0f 87 a7 03 00 00    	ja     c000f880 <scanMADT()+0x4b0>
c000f4d9:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f4e1:	0f 87 99 03 00 00    	ja     c000f880 <scanMADT()+0x4b0>
c000f4e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4eb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f4ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4f3:	8d 50 01             	lea    edx,[eax+0x1]
c000f4f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4fe:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f502:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f506:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f50a:	8d 50 01             	lea    edx,[eax+0x1]
c000f50d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f511:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f515:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f519:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f51d:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f522:	83 f8 02             	cmp    eax,0x2
c000f525:	0f 86 51 03 00 00    	jbe    c000f87c <scanMADT()+0x4ac>
c000f52b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f530:	85 c0                	test   eax,eax
c000f532:	75 58                	jne    c000f58c <scanMADT()+0x1bc>
c000f534:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f538:	8d 50 01             	lea    edx,[eax+0x1]
c000f53b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f53f:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f545:	0f b6 d2             	movzx  edx,dl
c000f548:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f54c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f550:	88 82 60 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42a0],al
c000f556:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f55a:	8d 50 01             	lea    edx,[eax+0x1]
c000f55d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f561:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f567:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f56a:	88 0d 20 bd 02 c0    	mov    BYTE PTR ds:0xc002bd20,cl
c000f570:	0f b6 d2             	movzx  edx,dl
c000f573:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f577:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f57b:	88 82 40 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42c0],al
c000f581:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f586:	e9 d9 02 00 00       	jmp    c000f864 <scanMADT()+0x494>
c000f58b:	90                   	nop
c000f58c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f591:	83 f8 01             	cmp    eax,0x1
c000f594:	0f 85 1a 01 00 00    	jne    c000f6b4 <scanMADT()+0x2e4>
c000f59a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f59e:	8d 50 01             	lea    edx,[eax+0x1]
c000f5a1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5a5:	8a 15 e0 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bbe0
c000f5ab:	0f b6 d2             	movzx  edx,dl
c000f5ae:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f5b2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f5b6:	88 82 00 bc 02 c0    	mov    BYTE PTR [edx-0x3ffd4400],al
c000f5bc:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f5c1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5c9:	01 d0                	add    eax,edx
c000f5cb:	83 c0 2c             	add    eax,0x2c
c000f5ce:	8a 00                	mov    al,BYTE PTR [eax]
c000f5d0:	0f b6 d0             	movzx  edx,al
c000f5d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5d7:	8d 48 01             	lea    ecx,[eax+0x1]
c000f5da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5de:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f5e2:	0f b6 c0             	movzx  eax,al
c000f5e5:	c1 e0 08             	shl    eax,0x8
c000f5e8:	89 d1                	mov    ecx,edx
c000f5ea:	09 c1                	or     ecx,eax
c000f5ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5f0:	8d 50 02             	lea    edx,[eax+0x2]
c000f5f3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5f7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f5fb:	0f b6 c0             	movzx  eax,al
c000f5fe:	c1 e0 10             	shl    eax,0x10
c000f601:	09 c1                	or     ecx,eax
c000f603:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f607:	8d 50 03             	lea    edx,[eax+0x3]
c000f60a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f60e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f612:	0f b6 c0             	movzx  eax,al
c000f615:	c1 e0 18             	shl    eax,0x18
c000f618:	09 c1                	or     ecx,eax
c000f61a:	89 ca                	mov    edx,ecx
c000f61c:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f621:	0f b6 c0             	movzx  eax,al
c000f624:	89 14 85 20 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43e0],edx
c000f62b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f630:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f634:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f638:	01 d0                	add    eax,edx
c000f63a:	83 c0 2c             	add    eax,0x2c
c000f63d:	8a 00                	mov    al,BYTE PTR [eax]
c000f63f:	0f b6 d0             	movzx  edx,al
c000f642:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f646:	8d 48 01             	lea    ecx,[eax+0x1]
c000f649:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f64d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f651:	0f b6 c0             	movzx  eax,al
c000f654:	c1 e0 08             	shl    eax,0x8
c000f657:	89 d1                	mov    ecx,edx
c000f659:	09 c1                	or     ecx,eax
c000f65b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f65f:	8d 50 02             	lea    edx,[eax+0x2]
c000f662:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f666:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f66a:	0f b6 c0             	movzx  eax,al
c000f66d:	c1 e0 10             	shl    eax,0x10
c000f670:	09 c1                	or     ecx,eax
c000f672:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f676:	8d 50 03             	lea    edx,[eax+0x3]
c000f679:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f67d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f681:	0f b6 c0             	movzx  eax,al
c000f684:	c1 e0 18             	shl    eax,0x18
c000f687:	09 c1                	or     ecx,eax
c000f689:	89 ca                	mov    edx,ecx
c000f68b:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f690:	0f b6 c0             	movzx  eax,al
c000f693:	89 14 85 a0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4360],edx
c000f69a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f69f:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f6a4:	83 c0 01             	add    eax,0x1
c000f6a7:	a2 e0 bb 02 c0       	mov    ds:0xc002bbe0,al
c000f6ac:	e9 b3 01 00 00       	jmp    c000f864 <scanMADT()+0x494>
c000f6b1:	8d 76 00             	lea    esi,[esi+0x0]
c000f6b4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f6b9:	83 f8 02             	cmp    eax,0x2
c000f6bc:	0f 85 ea 00 00 00    	jne    c000f7ac <scanMADT()+0x3dc>
c000f6c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6c6:	8d 50 01             	lea    edx,[eax+0x1]
c000f6c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f6cd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f6d1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f6d5:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f6d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6dd:	8d 50 01             	lea    edx,[eax+0x1]
c000f6e0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f6e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f6e8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f6ec:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f6f0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f6f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6f8:	01 d0                	add    eax,edx
c000f6fa:	83 c0 2c             	add    eax,0x2c
c000f6fd:	8a 00                	mov    al,BYTE PTR [eax]
c000f6ff:	0f b6 d0             	movzx  edx,al
c000f702:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f706:	8d 48 01             	lea    ecx,[eax+0x1]
c000f709:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f70d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f711:	0f b6 c0             	movzx  eax,al
c000f714:	c1 e0 08             	shl    eax,0x8
c000f717:	89 d1                	mov    ecx,edx
c000f719:	09 c1                	or     ecx,eax
c000f71b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f71f:	8d 50 02             	lea    edx,[eax+0x2]
c000f722:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f726:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f72a:	0f b6 c0             	movzx  eax,al
c000f72d:	c1 e0 10             	shl    eax,0x10
c000f730:	09 c1                	or     ecx,eax
c000f732:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f736:	8d 50 03             	lea    edx,[eax+0x3]
c000f739:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f73d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f741:	0f b6 c0             	movzx  eax,al
c000f744:	c1 e0 18             	shl    eax,0x18
c000f747:	09 c8                	or     eax,ecx
c000f749:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f74d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f752:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f756:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f75a:	01 d0                	add    eax,edx
c000f75c:	83 c0 2c             	add    eax,0x2c
c000f75f:	8a 00                	mov    al,BYTE PTR [eax]
c000f761:	0f b6 d0             	movzx  edx,al
c000f764:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f768:	8d 48 01             	lea    ecx,[eax+0x1]
c000f76b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f76f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f773:	0f b6 c0             	movzx  eax,al
c000f776:	c1 e0 08             	shl    eax,0x8
c000f779:	09 d0                	or     eax,edx
c000f77b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f780:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f785:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f78a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f78e:	88 90 e8 35 02 c0    	mov    BYTE PTR [eax-0x3ffdca18],dl
c000f794:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f799:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000f79e:	66 89 94 00 c0 bb 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd4440],dx
c000f7a6:	e9 b9 00 00 00       	jmp    c000f864 <scanMADT()+0x494>
c000f7ab:	90                   	nop
c000f7ac:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f7b1:	83 f8 04             	cmp    eax,0x4
c000f7b4:	0f 85 9a 00 00 00    	jne    c000f854 <scanMADT()+0x484>
c000f7ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7be:	8d 50 01             	lea    edx,[eax+0x1]
c000f7c1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f7c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7c9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f7cd:	0f b6 c0             	movzx  eax,al
c000f7d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f7d4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7dc:	01 d0                	add    eax,edx
c000f7de:	83 c0 2c             	add    eax,0x2c
c000f7e1:	8a 00                	mov    al,BYTE PTR [eax]
c000f7e3:	0f b6 d0             	movzx  edx,al
c000f7e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7ea:	8d 48 01             	lea    ecx,[eax+0x1]
c000f7ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7f1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f7f5:	0f b6 c0             	movzx  eax,al
c000f7f8:	c1 e0 08             	shl    eax,0x8
c000f7fb:	09 d0                	or     eax,edx
c000f7fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f801:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f806:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f80a:	8d 50 01             	lea    edx,[eax+0x1]
c000f80d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f811:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f815:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f819:	0f b6 c0             	movzx  eax,al
c000f81c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f824:	c1 e0 08             	shl    eax,0x8
c000f827:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f82b:	89 c1                	mov    ecx,eax
c000f82d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f831:	c1 e0 18             	shl    eax,0x18
c000f834:	89 c3                	mov    ebx,eax
c000f836:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c000f83b:	8d 50 01             	lea    edx,[eax+0x1]
c000f83e:	89 15 30 bb 02 c0    	mov    DWORD PTR ds:0xc002bb30,edx
c000f844:	09 d9                	or     ecx,ebx
c000f846:	89 ca                	mov    edx,ecx
c000f848:	89 14 85 40 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd44c0],edx
c000f84f:	eb 13                	jmp    c000f864 <scanMADT()+0x494>
c000f851:	8d 76 00             	lea    esi,[esi+0x0]
c000f854:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f859:	83 f8 05             	cmp    eax,0x5
c000f85c:	75 06                	jne    c000f864 <scanMADT()+0x494>
c000f85e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f863:	90                   	nop
c000f864:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f869:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f86d:	01 d0                	add    eax,edx
c000f86f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f873:	e9 50 fc ff ff       	jmp    c000f4c8 <scanMADT()+0xf8>
c000f878:	90                   	nop
c000f879:	eb 05                	jmp    c000f880 <scanMADT()+0x4b0>
c000f87b:	90                   	nop
c000f87c:	90                   	nop
c000f87d:	8d 76 00             	lea    esi,[esi+0x0]
c000f880:	83 c4 38             	add    esp,0x38
c000f883:	5b                   	pop    ebx
c000f884:	c3                   	ret    
c000f885:	90                   	nop
c000f886:	66 90                	xchg   ax,ax

c000f888 <ACPI::ACPI()>:
c000f888:	83 ec 0c             	sub    esp,0xc
c000f88b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f88f:	83 ec 08             	sub    esp,0x8
c000f892:	68 f1 1e 02 c0       	push   0xc0021ef1
c000f897:	50                   	push   eax
c000f898:	e8 3b d2 ff ff       	call   c000cad8 <Device::Device(char const*)>
c000f89d:	83 c4 10             	add    esp,0x10
c000f8a0:	ba 44 20 02 c0       	mov    edx,0xc0022044
c000f8a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8a9:	89 10                	mov    DWORD PTR [eax],edx
c000f8ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8af:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f8b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8ba:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f8c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8c8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f8d2:	e8 f9 fa ff ff       	call   c000f3d0 <scanMADT()>
c000f8d7:	90                   	nop
c000f8d8:	83 c4 0c             	add    esp,0xc
c000f8db:	c3                   	ret    

c000f8dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f8dc:	83 ec 2c             	sub    esp,0x2c
c000f8df:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f8e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f8e7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000f8eb:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000f8ef:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f8f4:	88 c8                	mov    al,cl
c000f8f6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f8fa:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f8ff:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f907:	90                   	nop
c000f908:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f90c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f912:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f916:	0f 8d b0 00 00 00    	jge    c000f9cc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f91c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f924:	83 c2 2a             	add    edx,0x2a
c000f927:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f92b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f930:	0f b7 c0             	movzx  eax,ax
c000f933:	39 c2                	cmp    edx,eax
c000f935:	0f 85 85 00 00 00    	jne    c000f9c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f93b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f93f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f943:	83 c2 2a             	add    edx,0x2a
c000f946:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f94a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f94f:	0f b6 c0             	movzx  eax,al
c000f952:	39 c2                	cmp    edx,eax
c000f954:	75 6a                	jne    c000f9c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f956:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f95b:	85 c0                	test   eax,eax
c000f95d:	74 3d                	je     c000f99c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f95f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f963:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f967:	83 c2 2a             	add    edx,0x2a
c000f96a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f96e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f972:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f975:	39 c2                	cmp    edx,eax
c000f977:	74 13                	je     c000f98c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f979:	83 ec 0c             	sub    esp,0xc
c000f97c:	68 6c 1e 02 c0       	push   0xc0021e6c
c000f981:	e8 81 1b 00 00       	call   c0011507 <KePanic(char const*)>
c000f986:	83 c4 10             	add    esp,0x10
c000f989:	8d 76 00             	lea    esi,[esi+0x0]
c000f98c:	83 ec 0c             	sub    esp,0xc
c000f98f:	68 f6 1e 02 c0       	push   0xc0021ef6
c000f994:	e8 6e 1b 00 00       	call   c0011507 <KePanic(char const*)>
c000f999:	83 c4 10             	add    esp,0x10
c000f99c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f9a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f9a4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f9a8:	83 c2 2a             	add    edx,0x2a
c000f9ab:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f9af:	8b 02                	mov    eax,DWORD PTR [edx]
c000f9b1:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f9b4:	89 01                	mov    DWORD PTR [ecx],eax
c000f9b6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f9b9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f9be:	66 90                	xchg   ax,ax
c000f9c0:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f9c5:	e9 3e ff ff ff       	jmp    c000f908 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f9ca:	66 90                	xchg   ax,ax
c000f9cc:	90                   	nop
c000f9cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9d1:	83 c4 2c             	add    esp,0x2c
c000f9d4:	c2 04 00             	ret    0x4
c000f9d7:	90                   	nop

c000f9d8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f9d8:	83 ec 1c             	sub    esp,0x1c
c000f9db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f9df:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f9e3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f9e7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f9ec:	88 c8                	mov    al,cl
c000f9ee:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f9f2:	88 d0                	mov    al,dl
c000f9f4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f9f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f9fc:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa06:	83 c2 2a             	add    edx,0x2a
c000fa09:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000fa0d:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000fa11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa15:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa1f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fa22:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fa26:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000fa2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa2f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa35:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000fa39:	83 c0 01             	add    eax,0x1
c000fa3c:	88 c1                	mov    cl,al
c000fa3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa42:	83 c2 2a             	add    edx,0x2a
c000fa45:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000fa49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa4d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa57:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fa5a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fa5e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000fa62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa66:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fa6c:	8d 50 01             	lea    edx,[eax+0x1]
c000fa6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa73:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000fa79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa7d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fa83:	3d 00 02 00 00       	cmp    eax,0x200
c000fa88:	75 12                	jne    c000fa9c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000fa8a:	83 ec 0c             	sub    esp,0xc
c000fa8d:	68 05 1f 02 c0       	push   0xc0021f05
c000fa92:	e8 70 1a 00 00       	call   c0011507 <KePanic(char const*)>
c000fa97:	83 c4 10             	add    esp,0x10
c000fa9a:	66 90                	xchg   ax,ax
c000fa9c:	90                   	nop
c000fa9d:	83 c4 1c             	add    esp,0x1c
c000faa0:	c3                   	ret    
c000faa1:	90                   	nop
c000faa2:	66 90                	xchg   ax,ax

c000faa4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000faa4:	b8 00 00 00 00       	mov    eax,0x0
c000faa9:	c3                   	ret    
c000faaa:	66 90                	xchg   ax,ax

c000faac <ACPI::detectPCI()>:
c000faac:	53                   	push   ebx
c000faad:	83 ec 28             	sub    esp,0x28
c000fab0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fab5:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000faba:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fabf:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fac5:	83 e0 04             	and    eax,0x4
c000fac8:	0f b6 c0             	movzx  eax,al
c000facb:	85 c0                	test   eax,eax
c000facd:	74 2d                	je     c000fafc <ACPI::detectPCI()+0x50>
c000facf:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	68 22 1f 02 c0       	push   0xc0021f22
c000fadc:	50                   	push   eax
c000fadd:	e8 6e f8 ff ff       	call   c000f350 <findDataTable(unsigned char*, char*)>
c000fae2:	83 c4 10             	add    esp,0x10
c000fae5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fae9:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000faee:	74 0c                	je     c000fafc <ACPI::detectPCI()+0x50>
c000faf0:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000faf5:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fafa:	66 90                	xchg   ax,ax
c000fafc:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000fb04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb08:	8a 00                	mov    al,BYTE PTR [eax]
c000fb0a:	0f b6 c0             	movzx  eax,al
c000fb0d:	83 f8 01             	cmp    eax,0x1
c000fb10:	75 0e                	jne    c000fb20 <ACPI::detectPCI()+0x74>
c000fb12:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb17:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fb1c:	eb 2e                	jmp    c000fb4c <ACPI::detectPCI()+0xa0>
c000fb1e:	66 90                	xchg   ax,ax
c000fb20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb24:	8a 00                	mov    al,BYTE PTR [eax]
c000fb26:	0f b6 c0             	movzx  eax,al
c000fb29:	83 f8 02             	cmp    eax,0x2
c000fb2c:	75 1e                	jne    c000fb4c <ACPI::detectPCI()+0xa0>
c000fb2e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb33:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fb38:	85 c0                	test   eax,eax
c000fb3a:	74 10                	je     c000fb4c <ACPI::detectPCI()+0xa0>
c000fb3c:	83 ec 0c             	sub    esp,0xc
c000fb3f:	68 9c 1e 02 c0       	push   0xc0021e9c
c000fb44:	e8 be 19 00 00       	call   c0011507 <KePanic(char const*)>
c000fb49:	83 c4 10             	add    esp,0x10
c000fb4c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000fb50:	83 f0 01             	xor    eax,0x1
c000fb53:	0f b6 c0             	movzx  eax,al
c000fb56:	85 c0                	test   eax,eax
c000fb58:	74 46                	je     c000fba0 <ACPI::detectPCI()+0xf4>
c000fb5a:	e8 d1 05 ff ff       	call   c0000130 <manualPCIProbe>
c000fb5f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fb63:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000fb68:	75 0e                	jne    c000fb78 <ACPI::detectPCI()+0xcc>
c000fb6a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb6f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fb74:	eb 2a                	jmp    c000fba0 <ACPI::detectPCI()+0xf4>
c000fb76:	66 90                	xchg   ax,ax
c000fb78:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000fb7d:	75 21                	jne    c000fba0 <ACPI::detectPCI()+0xf4>
c000fb7f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb84:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fb89:	85 c0                	test   eax,eax
c000fb8b:	74 13                	je     c000fba0 <ACPI::detectPCI()+0xf4>
c000fb8d:	83 ec 0c             	sub    esp,0xc
c000fb90:	68 9c 1e 02 c0       	push   0xc0021e9c
c000fb95:	e8 6d 19 00 00       	call   c0011507 <KePanic(char const*)>
c000fb9a:	83 c4 10             	add    esp,0x10
c000fb9d:	8d 76 00             	lea    esi,[esi+0x0]
c000fba0:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fba5:	85 c0                	test   eax,eax
c000fba7:	0f 84 87 00 00 00    	je     c000fc34 <ACPI::detectPCI()+0x188>
c000fbad:	83 ec 0c             	sub    esp,0xc
c000fbb0:	68 27 1f 02 c0       	push   0xc0021f27
c000fbb5:	e8 4f 12 00 00       	call   c0010e09 <KeSetBootMessage(char const*)>
c000fbba:	83 c4 10             	add    esp,0x10
c000fbbd:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000fbc5:	83 ec 0c             	sub    esp,0xc
c000fbc8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fbcc:	e8 02 7f ff ff       	call   c0007ad3 <malloc>
c000fbd1:	83 c4 10             	add    esp,0x10
c000fbd4:	89 c3                	mov    ebx,eax
c000fbd6:	83 ec 0c             	sub    esp,0xc
c000fbd9:	53                   	push   ebx
c000fbda:	e8 df b4 00 00       	call   c001b0be <PCI::PCI()>
c000fbdf:	83 c4 10             	add    esp,0x10
c000fbe2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fbe6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fbea:	83 ec 08             	sub    esp,0x8
c000fbed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fbf1:	50                   	push   eax
c000fbf2:	e8 49 cd ff ff       	call   c000c940 <Device::addChild(Device*)>
c000fbf7:	83 c4 10             	add    esp,0x10
c000fbfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbfe:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc00:	83 c0 08             	add    eax,0x8
c000fc03:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc05:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fc0a:	85 d2                	test   edx,edx
c000fc0c:	74 0a                	je     c000fc18 <ACPI::detectPCI()+0x16c>
c000fc0e:	ba 01 00 00 00       	mov    edx,0x1
c000fc13:	eb 0b                	jmp    c000fc20 <ACPI::detectPCI()+0x174>
c000fc15:	8d 76 00             	lea    esi,[esi+0x0]
c000fc18:	ba 02 00 00 00       	mov    edx,0x2
c000fc1d:	8d 76 00             	lea    esi,[esi+0x0]
c000fc20:	6a 00                	push   0x0
c000fc22:	6a 00                	push   0x0
c000fc24:	52                   	push   edx
c000fc25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc29:	ff d0                	call   eax
c000fc2b:	83 c4 10             	add    esp,0x10
c000fc2e:	e9 91 00 00 00       	jmp    c000fcc4 <ACPI::detectPCI()+0x218>
c000fc33:	90                   	nop
c000fc34:	83 ec 0c             	sub    esp,0xc
c000fc37:	68 3f 1f 02 c0       	push   0xc0021f3f
c000fc3c:	e8 c8 11 00 00       	call   c0010e09 <KeSetBootMessage(char const*)>
c000fc41:	83 c4 10             	add    esp,0x10
c000fc44:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fc4b:	83 ec 0c             	sub    esp,0xc
c000fc4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fc52:	e8 7c 7e ff ff       	call   c0007ad3 <malloc>
c000fc57:	83 c4 10             	add    esp,0x10
c000fc5a:	89 c3                	mov    ebx,eax
c000fc5c:	83 ec 0c             	sub    esp,0xc
c000fc5f:	53                   	push   ebx
c000fc60:	e8 01 c0 00 00       	call   c001bc66 <IDE::IDE()>
c000fc65:	83 c4 10             	add    esp,0x10
c000fc68:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fc6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fc70:	83 ec 08             	sub    esp,0x8
c000fc73:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fc77:	50                   	push   eax
c000fc78:	e8 c3 cc ff ff       	call   c000c940 <Device::addChild(Device*)>
c000fc7d:	83 c4 10             	add    esp,0x10
c000fc80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fc84:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fc8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fc92:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fc9b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fc9f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fca8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcac:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcae:	83 c0 08             	add    eax,0x8
c000fcb1:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcb3:	6a 00                	push   0x0
c000fcb5:	6a 00                	push   0x0
c000fcb7:	6a 00                	push   0x0
c000fcb9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fcbd:	ff d0                	call   eax
c000fcbf:	83 c4 10             	add    esp,0x10
c000fcc2:	66 90                	xchg   ax,ax
c000fcc4:	90                   	nop
c000fcc5:	83 c4 28             	add    esp,0x28
c000fcc8:	5b                   	pop    ebx
c000fcc9:	c3                   	ret    
c000fcca:	66 90                	xchg   ax,ax

c000fccc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fccc:	83 ec 1c             	sub    esp,0x1c
c000fccf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcd3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fcd6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fcda:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fcdf:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fce4:	83 ec 08             	sub    esp,0x8
c000fce7:	52                   	push   edx
c000fce8:	50                   	push   eax
c000fce9:	e8 ac 74 ff ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c000fcee:	83 c4 10             	add    esp,0x10
c000fcf1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fcf5:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fcfa:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fcff:	83 ec 04             	sub    esp,0x4
c000fd02:	6a 01                	push   0x1
c000fd04:	52                   	push   edx
c000fd05:	50                   	push   eax
c000fd06:	e8 a7 75 ff ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fd0b:	83 c4 10             	add    esp,0x10
c000fd0e:	90                   	nop
c000fd0f:	83 c4 1c             	add    esp,0x1c
c000fd12:	c3                   	ret    
c000fd13:	90                   	nop

c000fd14 <ACPI::sleep()>:
c000fd14:	83 ec 0c             	sub    esp,0xc
c000fd17:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fd1c:	85 c0                	test   eax,eax
c000fd1e:	74 08                	je     c000fd28 <ACPI::sleep()+0x14>
c000fd20:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fd25:	ff d0                	call   eax
c000fd27:	90                   	nop
c000fd28:	90                   	nop
c000fd29:	83 c4 0c             	add    esp,0xc
c000fd2c:	c3                   	ret    
c000fd2d:	90                   	nop
c000fd2e:	66 90                	xchg   ax,ax

c000fd30 <ACPI::open(int, int, void*)>:
c000fd30:	55                   	push   ebp
c000fd31:	89 e5                	mov    ebp,esp
c000fd33:	53                   	push   ebx
c000fd34:	81 ec 74 01 00 00    	sub    esp,0x174
c000fd3a:	83 ec 0c             	sub    esp,0xc
c000fd3d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fd40:	e8 67 fd ff ff       	call   c000faac <ACPI::detectPCI()>
c000fd45:	83 c4 10             	add    esp,0x10
c000fd48:	83 ec 0c             	sub    esp,0xc
c000fd4b:	68 c4 1e 02 c0       	push   0xc0021ec4
c000fd50:	e8 b4 10 00 00       	call   c0010e09 <KeSetBootMessage(char const*)>
c000fd55:	83 c4 10             	add    esp,0x10
c000fd58:	b8 4c 05 00 00       	mov    eax,0x54c
c000fd5d:	8a 00                	mov    al,BYTE PTR [eax]
c000fd5f:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000fd62:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fd66:	83 f8 01             	cmp    eax,0x1
c000fd69:	75 15                	jne    c000fd80 <ACPI::open(int, int, void*)+0x50>
c000fd6b:	83 ec 0c             	sub    esp,0xc
c000fd6e:	68 2f 18 02 c0       	push   0xc002182f
c000fd73:	e8 6b 4d 00 00       	call   c0014ae3 <Thr::loadKernelSymbolTable(char const*)>
c000fd78:	83 c4 10             	add    esp,0x10
c000fd7b:	eb 33                	jmp    c000fdb0 <ACPI::open(int, int, void*)+0x80>
c000fd7d:	8d 76 00             	lea    esi,[esi+0x0]
c000fd80:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fd84:	3d bb 00 00 00       	cmp    eax,0xbb
c000fd89:	75 15                	jne    c000fda0 <ACPI::open(int, int, void*)+0x70>
c000fd8b:	83 ec 0c             	sub    esp,0xc
c000fd8e:	68 54 1f 02 c0       	push   0xc0021f54
c000fd93:	e8 4b 4d 00 00       	call   c0014ae3 <Thr::loadKernelSymbolTable(char const*)>
c000fd98:	83 c4 10             	add    esp,0x10
c000fd9b:	eb 13                	jmp    c000fdb0 <ACPI::open(int, int, void*)+0x80>
c000fd9d:	8d 76 00             	lea    esi,[esi+0x0]
c000fda0:	83 ec 0c             	sub    esp,0xc
c000fda3:	68 72 1f 02 c0       	push   0xc0021f72
c000fda8:	e8 5a 17 00 00       	call   c0011507 <KePanic(char const*)>
c000fdad:	83 c4 10             	add    esp,0x10
c000fdb0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fdb4:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000fdbb:	83 ec 0c             	sub    esp,0xc
c000fdbe:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000fdc1:	e8 0d 7d ff ff       	call   c0007ad3 <malloc>
c000fdc6:	83 c4 10             	add    esp,0x10
c000fdc9:	89 c3                	mov    ebx,eax
c000fdcb:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000fdd0:	83 ec 04             	sub    esp,0x4
c000fdd3:	50                   	push   eax
c000fdd4:	68 8c 1f 02 c0       	push   0xc0021f8c
c000fdd9:	53                   	push   ebx
c000fdda:	e8 e1 bc ff ff       	call   c000bac0 <File::File(char const*, Process*)>
c000fddf:	83 c4 10             	add    esp,0x10
c000fde2:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000fde5:	83 ec 08             	sub    esp,0x8
c000fde8:	6a 01                	push   0x1
c000fdea:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fded:	e8 ec bc ff ff       	call   c000bade <File::open(FileOpenMode)>
c000fdf2:	83 c4 10             	add    esp,0x10
c000fdf5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000fdf8:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000fdfc:	75 12                	jne    c000fe10 <ACPI::open(int, int, void*)+0xe0>
c000fdfe:	83 ec 0c             	sub    esp,0xc
c000fe01:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fe04:	e8 33 bd ff ff       	call   c000bb3c <File::close()>
c000fe09:	83 c4 10             	add    esp,0x10
c000fe0c:	eb 06                	jmp    c000fe14 <ACPI::open(int, int, void*)+0xe4>
c000fe0e:	66 90                	xchg   ax,ax
c000fe10:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe14:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000fe18:	74 16                	je     c000fe30 <ACPI::open(int, int, void*)+0x100>
c000fe1a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fe1d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe1f:	83 c0 08             	add    eax,0x8
c000fe22:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe24:	83 ec 0c             	sub    esp,0xc
c000fe27:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fe2a:	ff d0                	call   eax
c000fe2c:	83 c4 10             	add    esp,0x10
c000fe2f:	90                   	nop
c000fe30:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000fe33:	83 f0 01             	xor    eax,0x1
c000fe36:	0f b6 c0             	movzx  eax,al
c000fe39:	85 c0                	test   eax,eax
c000fe3b:	74 3b                	je     c000fe78 <ACPI::open(int, int, void*)+0x148>
c000fe3d:	83 ec 0c             	sub    esp,0xc
c000fe40:	68 aa 1f 02 c0       	push   0xc0021faa
c000fe45:	e8 bf 0f 00 00       	call   c0010e09 <KeSetBootMessage(char const*)>
c000fe4a:	83 c4 10             	add    esp,0x10
c000fe4d:	83 ec 04             	sub    esp,0x4
c000fe50:	6a 0c                	push   0xc
c000fe52:	68 c5 1f 02 c0       	push   0xc0021fc5
c000fe57:	68 d6 1f 02 c0       	push   0xc0021fd6
c000fe5c:	e8 01 3f 00 00       	call   c0013d62 <Reg::readIntWithDefault(char*, char*, int)>
c000fe61:	83 c4 10             	add    esp,0x10
c000fe64:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000fe67:	83 ec 0c             	sub    esp,0xc
c000fe6a:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000fe6d:	e8 a8 99 ff ff       	call   c000981a <Virt::setupPageSwapping(int)>
c000fe72:	83 c4 10             	add    esp,0x10
c000fe75:	8d 76 00             	lea    esi,[esi+0x0]
c000fe78:	83 ec 0c             	sub    esp,0xc
c000fe7b:	68 75 0a 02 c0       	push   0xc0020a75
c000fe80:	e8 84 0f 00 00       	call   c0010e09 <KeSetBootMessage(char const*)>
c000fe85:	83 c4 10             	add    esp,0x10
c000fe88:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fe8b:	83 ec 08             	sub    esp,0x8
c000fe8e:	6a 13                	push   0x13
c000fe90:	50                   	push   eax
c000fe91:	e8 c2 cd ff ff       	call   c000cc58 <getDevicesOfType(DeviceType)>
c000fe96:	83 c4 0c             	add    esp,0xc
c000fe99:	8d 76 00             	lea    esi,[esi+0x0]
c000fe9c:	83 ec 0c             	sub    esp,0xc
c000fe9f:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fea2:	50                   	push   eax
c000fea3:	e8 c8 ff 00 00       	call   c001fe70 <LinkedList<Device>::isEmpty()>
c000fea8:	83 c4 10             	add    esp,0x10
c000feab:	83 f0 01             	xor    eax,0x1
c000feae:	0f b6 c0             	movzx  eax,al
c000feb1:	85 c0                	test   eax,eax
c000feb3:	0f 84 1f 01 00 00    	je     c000ffd8 <ACPI::open(int, int, void*)+0x2a8>
c000feb9:	83 ec 0c             	sub    esp,0xc
c000febc:	8d 45 b8             	lea    eax,[ebp-0x48]
c000febf:	50                   	push   eax
c000fec0:	e8 c7 ff 00 00       	call   c001fe8c <LinkedList<Device>::getFirstElement()>
c000fec5:	83 c4 10             	add    esp,0x10
c000fec8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000fecb:	83 ec 0c             	sub    esp,0xc
c000fece:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fed1:	50                   	push   eax
c000fed2:	e8 bd ff 00 00       	call   c001fe94 <LinkedList<Device>::removeFirst()>
c000fed7:	83 c4 10             	add    esp,0x10
c000feda:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000fedd:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000fee0:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000fee3:	b8 24 00 00 00       	mov    eax,0x24
c000fee8:	83 e0 fc             	and    eax,0xfffffffc
c000feeb:	89 c3                	mov    ebx,eax
c000feed:	b8 00 00 00 00       	mov    eax,0x0
c000fef2:	66 90                	xchg   ax,ax
c000fef4:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000fefb:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000ff02:	83 c0 04             	add    eax,0x4
c000ff05:	39 d8                	cmp    eax,ebx
c000ff07:	72 eb                	jb     c000fef4 <ACPI::open(int, int, void*)+0x1c4>
c000ff09:	83 ec 08             	sub    esp,0x8
c000ff0c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000ff12:	50                   	push   eax
c000ff13:	83 ec 24             	sub    esp,0x24
c000ff16:	89 e1                	mov    ecx,esp
c000ff18:	b8 24 00 00 00       	mov    eax,0x24
c000ff1d:	83 e0 fc             	and    eax,0xfffffffc
c000ff20:	89 c3                	mov    ebx,eax
c000ff22:	b8 00 00 00 00       	mov    eax,0x0
c000ff27:	90                   	nop
c000ff28:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000ff2f:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000ff32:	83 c0 04             	add    eax,0x4
c000ff35:	39 d8                	cmp    eax,ebx
c000ff37:	72 ef                	jb     c000ff28 <ACPI::open(int, int, void*)+0x1f8>
c000ff39:	e8 68 b6 00 00       	call   c001b5a6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ff3e:	83 c4 30             	add    esp,0x30
c000ff41:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000ff44:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000ff48:	0f 84 4e ff ff ff    	je     c000fe9c <ACPI::open(int, int, void*)+0x16c>
c000ff4e:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000ff55:	83 ec 0c             	sub    esp,0xc
c000ff58:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000ff5b:	e8 73 7b ff ff       	call   c0007ad3 <malloc>
c000ff60:	83 c4 10             	add    esp,0x10
c000ff63:	89 c3                	mov    ebx,eax
c000ff65:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000ff6a:	83 ec 04             	sub    esp,0x4
c000ff6d:	50                   	push   eax
c000ff6e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000ff71:	53                   	push   ebx
c000ff72:	e8 49 bb ff ff       	call   c000bac0 <File::File(char const*, Process*)>
c000ff77:	83 c4 10             	add    esp,0x10
c000ff7a:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000ff7d:	83 ec 0c             	sub    esp,0xc
c000ff80:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000ff83:	e8 1a be ff ff       	call   c000bda2 <File::exists()>
c000ff88:	83 c4 10             	add    esp,0x10
c000ff8b:	0f b6 c0             	movzx  eax,al
c000ff8e:	85 c0                	test   eax,eax
c000ff90:	74 22                	je     c000ffb4 <ACPI::open(int, int, void*)+0x284>
c000ff92:	83 ec 08             	sub    esp,0x8
c000ff95:	6a 01                	push   0x1
c000ff97:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000ff9a:	e8 c6 55 00 00       	call   c0015565 <Thr::loadDLL(char const*, bool)>
c000ff9f:	83 c4 10             	add    esp,0x10
c000ffa2:	83 ec 08             	sub    esp,0x8
c000ffa5:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000ffa8:	50                   	push   eax
c000ffa9:	e8 f7 57 00 00       	call   c00157a5 <Thr::executeDLL(unsigned long, void*)>
c000ffae:	83 c4 10             	add    esp,0x10
c000ffb1:	8d 76 00             	lea    esi,[esi+0x0]
c000ffb4:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000ffb8:	0f 84 de fe ff ff    	je     c000fe9c <ACPI::open(int, int, void*)+0x16c>
c000ffbe:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000ffc1:	8b 00                	mov    eax,DWORD PTR [eax]
c000ffc3:	83 c0 08             	add    eax,0x8
c000ffc6:	8b 00                	mov    eax,DWORD PTR [eax]
c000ffc8:	83 ec 0c             	sub    esp,0xc
c000ffcb:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000ffce:	ff d0                	call   eax
c000ffd0:	83 c4 10             	add    esp,0x10
c000ffd3:	e9 c4 fe ff ff       	jmp    c000fe9c <ACPI::open(int, int, void*)+0x16c>
c000ffd8:	83 ec 0c             	sub    esp,0xc
c000ffdb:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ffde:	50                   	push   eax
c000ffdf:	e8 88 fe 00 00       	call   c001fe6c <LinkedList<Device>::~LinkedList()>
c000ffe4:	83 c4 10             	add    esp,0x10
c000ffe7:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000ffed:	83 ec 08             	sub    esp,0x8
c000fff0:	6a 01                	push   0x1
c000fff2:	68 dd 1f 02 c0       	push   0xc0021fdd
c000fff7:	e8 69 55 00 00       	call   c0015565 <Thr::loadDLL(char const*, bool)>
c000fffc:	83 c4 10             	add    esp,0x10
c000ffff:	83 ec 08             	sub    esp,0x8
c0010002:	53                   	push   ebx
c0010003:	50                   	push   eax
c0010004:	e8 9c 57 00 00       	call   c00157a5 <Thr::executeDLL(unsigned long, void*)>
c0010009:	83 c4 10             	add    esp,0x10
c001000c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010011:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c0010017:	83 e0 04             	and    eax,0x4
c001001a:	0f b6 c0             	movzx  eax,al
c001001d:	85 c0                	test   eax,eax
c001001f:	0f 84 e3 00 00 00    	je     c0010108 <ACPI::open(int, int, void*)+0x3d8>
c0010025:	83 ec 0c             	sub    esp,0xc
c0010028:	68 fa 1f 02 c0       	push   0xc0021ffa
c001002d:	e8 d7 0d 00 00       	call   c0010e09 <KeSetBootMessage(char const*)>
c0010032:	83 c4 10             	add    esp,0x10
c0010035:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c001003c:	83 ec 0c             	sub    esp,0xc
c001003f:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c0010042:	e8 8c 7a ff ff       	call   c0007ad3 <malloc>
c0010047:	83 c4 10             	add    esp,0x10
c001004a:	89 c3                	mov    ebx,eax
c001004c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0010051:	83 ec 04             	sub    esp,0x4
c0010054:	50                   	push   eax
c0010055:	68 17 20 02 c0       	push   0xc0022017
c001005a:	53                   	push   ebx
c001005b:	e8 60 ba ff ff       	call   c000bac0 <File::File(char const*, Process*)>
c0010060:	83 c4 10             	add    esp,0x10
c0010063:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0010066:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001006a:	74 1c                	je     c0010088 <ACPI::open(int, int, void*)+0x358>
c001006c:	83 ec 0c             	sub    esp,0xc
c001006f:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c0010072:	e8 2b bd ff ff       	call   c000bda2 <File::exists()>
c0010077:	83 c4 10             	add    esp,0x10
c001007a:	0f b6 c0             	movzx  eax,al
c001007d:	85 c0                	test   eax,eax
c001007f:	74 07                	je     c0010088 <ACPI::open(int, int, void*)+0x358>
c0010081:	b0 01                	mov    al,0x1
c0010083:	eb 07                	jmp    c001008c <ACPI::open(int, int, void*)+0x35c>
c0010085:	8d 76 00             	lea    esi,[esi+0x0]
c0010088:	b0 00                	mov    al,0x0
c001008a:	66 90                	xchg   ax,ax
c001008c:	0f b6 c0             	movzx  eax,al
c001008f:	85 c0                	test   eax,eax
c0010091:	74 21                	je     c00100b4 <ACPI::open(int, int, void*)+0x384>
c0010093:	83 ec 08             	sub    esp,0x8
c0010096:	6a 01                	push   0x1
c0010098:	68 17 20 02 c0       	push   0xc0022017
c001009d:	e8 c3 54 00 00       	call   c0015565 <Thr::loadDLL(char const*, bool)>
c00100a2:	83 c4 10             	add    esp,0x10
c00100a5:	83 ec 08             	sub    esp,0x8
c00100a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00100ab:	50                   	push   eax
c00100ac:	e8 f4 56 00 00       	call   c00157a5 <Thr::executeDLL(unsigned long, void*)>
c00100b1:	83 c4 10             	add    esp,0x10
c00100b4:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00100b8:	74 1e                	je     c00100d8 <ACPI::open(int, int, void*)+0x3a8>
c00100ba:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00100be:	74 18                	je     c00100d8 <ACPI::open(int, int, void*)+0x3a8>
c00100c0:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00100c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00100c5:	83 c0 08             	add    eax,0x8
c00100c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00100ca:	83 ec 0c             	sub    esp,0xc
c00100cd:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c00100d0:	ff d0                	call   eax
c00100d2:	83 c4 10             	add    esp,0x10
c00100d5:	8d 76 00             	lea    esi,[esi+0x0]
c00100d8:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c00100dd:	83 ec 08             	sub    esp,0x8
c00100e0:	68 34 20 02 c0       	push   0xc0022034
c00100e5:	50                   	push   eax
c00100e6:	e8 65 f2 ff ff       	call   c000f350 <findDataTable(unsigned char*, char*)>
c00100eb:	83 c4 10             	add    esp,0x10
c00100ee:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00100f1:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00100f5:	74 11                	je     c0010108 <ACPI::open(int, int, void*)+0x3d8>
c00100f7:	83 ec 08             	sub    esp,0x8
c00100fa:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00100fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010100:	e8 c7 fb ff ff       	call   c000fccc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0010105:	83 c4 10             	add    esp,0x10
c0010108:	b8 00 00 00 00       	mov    eax,0x0
c001010d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010110:	c9                   	leave  
c0010111:	c3                   	ret    

c0010112 <CPU::close(int, int, void*)>:
c0010112:	31 c0                	xor    eax,eax
c0010114:	c3                   	ret    
c0010115:	90                   	nop

c0010116 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0010116:	60                   	pusha  
c0010117:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001011b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001011f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010123:	9c                   	pushf  
c0010124:	fa                   	cli    
c0010125:	0f 09                	wbinvd 
c0010127:	0f 30                	wrmsr  
c0010129:	9d                   	popf   
c001012a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001012e:	89 02                	mov    DWORD PTR [edx],eax
c0010130:	61                   	popa   
c0010131:	c3                   	ret    

c0010132 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0010132:	60                   	pusha  
c0010133:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010137:	9c                   	pushf  
c0010138:	fa                   	cli    
c0010139:	0f 09                	wbinvd 
c001013b:	31 c0                	xor    eax,eax
c001013d:	31 d2                	xor    edx,edx
c001013f:	0f 32                	rdmsr  
c0010141:	9d                   	popf   
c0010142:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010146:	89 02                	mov    DWORD PTR [edx],eax
c0010148:	61                   	popa   
c0010149:	c3                   	ret    

c001014a <CPU::AMD_K6_writeback(int, int, int)>:
c001014a:	56                   	push   esi
c001014b:	53                   	push   ebx
c001014c:	83 ec 10             	sub    esp,0x10
c001014f:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0010154:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010158:	75 5d                	jne    c00101b7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001015a:	83 f8 08             	cmp    eax,0x8
c001015d:	75 09                	jne    c0010168 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001015f:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0010164:	7e 13                	jle    c0010179 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010166:	eb 30                	jmp    c0010198 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010168:	83 f8 06             	cmp    eax,0x6
c001016b:	7c 4a                	jl     c00101b7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001016d:	83 f8 07             	cmp    eax,0x7
c0010170:	7e 07                	jle    c0010179 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010172:	83 f8 09             	cmp    eax,0x9
c0010175:	74 21                	je     c0010198 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010177:	eb 3e                	jmp    c00101b7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010179:	8b 1d dc 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026edc
c001017f:	89 e6                	mov    esi,esp
c0010181:	56                   	push   esi
c0010182:	68 82 00 00 c0       	push   0xc0000082
c0010187:	e8 a6 ff ff ff       	call   c0010132 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001018c:	c1 eb 15             	shr    ebx,0x15
c001018f:	56                   	push   esi
c0010190:	83 e3 7e             	and    ebx,0x7e
c0010193:	6a 00                	push   0x0
c0010195:	53                   	push   ebx
c0010196:	eb 12                	jmp    c00101aa <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0010198:	89 e3                	mov    ebx,esp
c001019a:	53                   	push   ebx
c001019b:	68 82 00 00 c0       	push   0xc0000082
c00101a0:	e8 8d ff ff ff       	call   c0010132 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00101a5:	53                   	push   ebx
c00101a6:	6a 00                	push   0x0
c00101a8:	6a 00                	push   0x0
c00101aa:	68 82 00 00 c0       	push   0xc0000082
c00101af:	e8 62 ff ff ff       	call   c0010116 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00101b4:	83 c4 18             	add    esp,0x18
c00101b7:	83 c4 10             	add    esp,0x10
c00101ba:	5b                   	pop    ebx
c00101bb:	5e                   	pop    esi
c00101bc:	c3                   	ret    
c00101bd:	90                   	nop

c00101be <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00101be:	55                   	push   ebp
c00101bf:	57                   	push   edi
c00101c0:	56                   	push   esi
c00101c1:	53                   	push   ebx
c00101c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101c6:	39 05 f8 35 02 c0    	cmp    DWORD PTR ds:0xc00235f8,eax
c00101cc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00101d0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00101d4:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00101d8:	75 23                	jne    c00101fd <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00101da:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c00101df:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00101e3:	89 06                	mov    DWORD PTR [esi],eax
c00101e5:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c00101ea:	89 07                	mov    DWORD PTR [edi],eax
c00101ec:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c00101f1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00101f4:	a1 80 bd 02 c0       	mov    eax,ds:0xc002bd80
c00101f9:	89 02                	mov    DWORD PTR [edx],eax
c00101fb:	eb 3f                	jmp    c001023c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00101fd:	31 c9                	xor    ecx,ecx
c00101ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010203:	0f a2                	cpuid  
c0010205:	89 06                	mov    DWORD PTR [esi],eax
c0010207:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001020b:	89 1f                	mov    DWORD PTR [edi],ebx
c001020d:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0010210:	89 10                	mov    DWORD PTR [eax],edx
c0010212:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010216:	a3 f8 35 02 c0       	mov    ds:0xc00235f8,eax
c001021b:	8b 06                	mov    eax,DWORD PTR [esi]
c001021d:	a3 8c bd 02 c0       	mov    ds:0xc002bd8c,eax
c0010222:	8b 07                	mov    eax,DWORD PTR [edi]
c0010224:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c0010229:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001022c:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c0010231:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010235:	8b 00                	mov    eax,DWORD PTR [eax]
c0010237:	a3 80 bd 02 c0       	mov    ds:0xc002bd80,eax
c001023c:	5b                   	pop    ebx
c001023d:	5e                   	pop    esi
c001023e:	5f                   	pop    edi
c001023f:	5d                   	pop    ebp
c0010240:	c3                   	ret    
c0010241:	90                   	nop

c0010242 <CPU::cpuidCheckEDX(unsigned int)>:
c0010242:	83 ec 10             	sub    esp,0x10
c0010245:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010249:	50                   	push   eax
c001024a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001024e:	50                   	push   eax
c001024f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010253:	50                   	push   eax
c0010254:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010258:	50                   	push   eax
c0010259:	6a 01                	push   0x1
c001025b:	e8 5e ff ff ff       	call   c00101be <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010260:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010264:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0010268:	0f 95 c0             	setne  al
c001026b:	83 c4 24             	add    esp,0x24
c001026e:	c3                   	ret    
c001026f:	90                   	nop

c0010270 <CPU::cpuidCheckECX(unsigned int)>:
c0010270:	83 ec 10             	sub    esp,0x10
c0010273:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010277:	50                   	push   eax
c0010278:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001027c:	50                   	push   eax
c001027d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010281:	50                   	push   eax
c0010282:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010286:	50                   	push   eax
c0010287:	6a 01                	push   0x1
c0010289:	e8 30 ff ff ff       	call   c00101be <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001028e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010292:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010296:	0f 95 c0             	setne  al
c0010299:	83 c4 24             	add    esp,0x24
c001029c:	c3                   	ret    
c001029d:	90                   	nop

c001029e <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001029e:	83 ec 10             	sub    esp,0x10
c00102a1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102a5:	50                   	push   eax
c00102a6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102aa:	50                   	push   eax
c00102ab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102af:	50                   	push   eax
c00102b0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102b4:	50                   	push   eax
c00102b5:	6a 07                	push   0x7
c00102b7:	e8 02 ff ff ff       	call   c00101be <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00102bc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00102c0:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00102c4:	0f 95 c0             	setne  al
c00102c7:	83 c4 24             	add    esp,0x24
c00102ca:	c3                   	ret    
c00102cb:	90                   	nop

c00102cc <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00102cc:	83 ec 10             	sub    esp,0x10
c00102cf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102d3:	50                   	push   eax
c00102d4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102d8:	50                   	push   eax
c00102d9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102dd:	50                   	push   eax
c00102de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00102e2:	50                   	push   eax
c00102e3:	6a 07                	push   0x7
c00102e5:	e8 d4 fe ff ff       	call   c00101be <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00102ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00102ee:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00102f2:	0f 95 c0             	setne  al
c00102f5:	83 c4 24             	add    esp,0x24
c00102f8:	c3                   	ret    
c00102f9:	90                   	nop

c00102fa <CPU::CPU()>:
c00102fa:	83 ec 0c             	sub    esp,0xc
c00102fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010301:	83 ec 08             	sub    esp,0x8
c0010304:	68 59 21 02 c0       	push   0xc0022159
c0010309:	50                   	push   eax
c001030a:	e8 c9 c7 ff ff       	call   c000cad8 <Device::Device(char const*)>
c001030f:	83 c4 10             	add    esp,0x10
c0010312:	ba ec 21 02 c0       	mov    edx,0xc00221ec
c0010317:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001031b:	89 10                	mov    DWORD PTR [eax],edx
c001031d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010321:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001032b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001032f:	05 78 01 00 00       	add    eax,0x178
c0010334:	83 ec 0c             	sub    esp,0xc
c0010337:	50                   	push   eax
c0010338:	e8 3f 70 ff ff       	call   c000737c <GDT::GDT()>
c001033d:	83 c4 10             	add    esp,0x10
c0010340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010344:	05 7c 09 00 00       	add    eax,0x97c
c0010349:	83 ec 0c             	sub    esp,0xc
c001034c:	50                   	push   eax
c001034d:	e8 7a 72 ff ff       	call   c00075cc <IDT::IDT()>
c0010352:	83 c4 10             	add    esp,0x10
c0010355:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010359:	05 7c 11 00 00       	add    eax,0x117c
c001035e:	83 ec 0c             	sub    esp,0xc
c0010361:	50                   	push   eax
c0010362:	e8 c5 8b ff ff       	call   c0008f2c <TSS::TSS()>
c0010367:	83 c4 10             	add    esp,0x10
c001036a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001036e:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0010375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010379:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0010383:	90                   	nop
c0010384:	83 c4 0c             	add    esp,0xc
c0010387:	c3                   	ret    

c0010388 <CPU::displayFeatures()>:
c0010388:	c3                   	ret    
c0010389:	90                   	nop

c001038a <CPU::detectFeatures()>:
c001038a:	55                   	push   ebp
c001038b:	57                   	push   edi
c001038c:	56                   	push   esi
c001038d:	53                   	push   ebx
c001038e:	83 ec 30             	sub    esp,0x30
c0010391:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010395:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001039f:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00103a5:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c00103ac:	6a 0d                	push   0xd
c00103ae:	6a 00                	push   0x0
c00103b0:	55                   	push   ebp
c00103b1:	e8 3a 01 ff ff       	call   c00004f0 <memset>
c00103b6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00103bb:	83 c4 10             	add    esp,0x10
c00103be:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c00103c5:	0f 84 db 05 00 00    	je     c00109a6 <CPU::detectFeatures()+0x61c>
c00103cb:	83 ec 0c             	sub    esp,0xc
c00103ce:	89 ef                	mov    edi,ebp
c00103d0:	6a 10                	push   0x10
c00103d2:	e8 6b fe ff ff       	call   c0010242 <CPU::cpuidCheckEDX(unsigned int)>
c00103d7:	83 e0 01             	and    eax,0x1
c00103da:	8d 14 00             	lea    edx,[eax+eax*1]
c00103dd:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00103e3:	83 e0 fd             	and    eax,0xfffffffd
c00103e6:	09 d0                	or     eax,edx
c00103e8:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00103ee:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00103f5:	e8 48 fe ff ff       	call   c0010242 <CPU::cpuidCheckEDX(unsigned int)>
c00103fa:	83 e0 01             	and    eax,0x1
c00103fd:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010404:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001040a:	83 e0 fb             	and    eax,0xfffffffb
c001040d:	09 d0                	or     eax,edx
c001040f:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010415:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001041c:	e8 21 fe ff ff       	call   c0010242 <CPU::cpuidCheckEDX(unsigned int)>
c0010421:	83 e0 01             	and    eax,0x1
c0010424:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001042b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010431:	83 e0 f7             	and    eax,0xfffffff7
c0010434:	09 d0                	or     eax,edx
c0010436:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001043c:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0010443:	e8 fa fd ff ff       	call   c0010242 <CPU::cpuidCheckEDX(unsigned int)>
c0010448:	83 e0 01             	and    eax,0x1
c001044b:	c1 e0 04             	shl    eax,0x4
c001044e:	89 c2                	mov    edx,eax
c0010450:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010456:	83 e0 ef             	and    eax,0xffffffef
c0010459:	09 d0                	or     eax,edx
c001045b:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010461:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0010468:	e8 d5 fd ff ff       	call   c0010242 <CPU::cpuidCheckEDX(unsigned int)>
c001046d:	83 e0 01             	and    eax,0x1
c0010470:	c1 e0 05             	shl    eax,0x5
c0010473:	89 c2                	mov    edx,eax
c0010475:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001047b:	83 e0 df             	and    eax,0xffffffdf
c001047e:	09 d0                	or     eax,edx
c0010480:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010486:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001048d:	e8 b0 fd ff ff       	call   c0010242 <CPU::cpuidCheckEDX(unsigned int)>
c0010492:	83 e0 01             	and    eax,0x1
c0010495:	8d 14 00             	lea    edx,[eax+eax*1]
c0010498:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001049e:	83 e0 fd             	and    eax,0xfffffffd
c00104a1:	09 d0                	or     eax,edx
c00104a3:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00104a9:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00104b0:	e8 8d fd ff ff       	call   c0010242 <CPU::cpuidCheckEDX(unsigned int)>
c00104b5:	83 e0 01             	and    eax,0x1
c00104b8:	c1 e0 06             	shl    eax,0x6
c00104bb:	89 c2                	mov    edx,eax
c00104bd:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00104c3:	83 e0 bf             	and    eax,0xffffffbf
c00104c6:	09 d0                	or     eax,edx
c00104c8:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00104ce:	58                   	pop    eax
c00104cf:	8d 44 24 28          	lea    eax,[esp+0x28]
c00104d3:	50                   	push   eax
c00104d4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00104d8:	50                   	push   eax
c00104d9:	8d 74 24 28          	lea    esi,[esp+0x28]
c00104dd:	56                   	push   esi
c00104de:	8d 44 24 28          	lea    eax,[esp+0x28]
c00104e2:	50                   	push   eax
c00104e3:	6a 00                	push   0x0
c00104e5:	e8 d4 fc ff ff       	call   c00101be <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00104ea:	b8 04 00 00 00       	mov    eax,0x4
c00104ef:	89 c1                	mov    ecx,eax
c00104f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104f3:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00104f9:	89 c1                	mov    ecx,eax
c00104fb:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00104ff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010501:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0010507:	89 c1                	mov    ecx,eax
c0010509:	8d 74 24 38          	lea    esi,[esp+0x38]
c001050d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001050f:	83 c4 18             	add    esp,0x18
c0010512:	68 68 20 02 c0       	push   0xc0022068
c0010517:	55                   	push   ebp
c0010518:	e8 63 02 ff ff       	call   c0000780 <strcmp>
c001051d:	83 c4 10             	add    esp,0x10
c0010520:	85 c0                	test   eax,eax
c0010522:	75 0f                	jne    c0010533 <CPU::detectFeatures()+0x1a9>
c0010524:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001052e:	e9 22 02 00 00       	jmp    c0010755 <CPU::detectFeatures()+0x3cb>
c0010533:	50                   	push   eax
c0010534:	50                   	push   eax
c0010535:	68 75 20 02 c0       	push   0xc0022075
c001053a:	55                   	push   ebp
c001053b:	e8 40 02 ff ff       	call   c0000780 <strcmp>
c0010540:	83 c4 10             	add    esp,0x10
c0010543:	85 c0                	test   eax,eax
c0010545:	74 dd                	je     c0010524 <CPU::detectFeatures()+0x19a>
c0010547:	50                   	push   eax
c0010548:	50                   	push   eax
c0010549:	68 82 20 02 c0       	push   0xc0022082
c001054e:	55                   	push   ebp
c001054f:	e8 2c 02 ff ff       	call   c0000780 <strcmp>
c0010554:	83 c4 10             	add    esp,0x10
c0010557:	85 c0                	test   eax,eax
c0010559:	74 2a                	je     c0010585 <CPU::detectFeatures()+0x1fb>
c001055b:	50                   	push   eax
c001055c:	50                   	push   eax
c001055d:	68 8f 20 02 c0       	push   0xc002208f
c0010562:	55                   	push   ebp
c0010563:	e8 18 02 ff ff       	call   c0000780 <strcmp>
c0010568:	83 c4 10             	add    esp,0x10
c001056b:	85 c0                	test   eax,eax
c001056d:	74 16                	je     c0010585 <CPU::detectFeatures()+0x1fb>
c001056f:	50                   	push   eax
c0010570:	50                   	push   eax
c0010571:	68 9c 20 02 c0       	push   0xc002209c
c0010576:	55                   	push   ebp
c0010577:	e8 04 02 ff ff       	call   c0000780 <strcmp>
c001057c:	83 c4 10             	add    esp,0x10
c001057f:	85 c0                	test   eax,eax
c0010581:	74 48                	je     c00105cb <CPU::detectFeatures()+0x241>
c0010583:	eb 0f                	jmp    c0010594 <CPU::detectFeatures()+0x20a>
c0010585:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001058f:	e9 c1 01 00 00       	jmp    c0010755 <CPU::detectFeatures()+0x3cb>
c0010594:	50                   	push   eax
c0010595:	50                   	push   eax
c0010596:	68 a9 20 02 c0       	push   0xc00220a9
c001059b:	55                   	push   ebp
c001059c:	e8 df 01 ff ff       	call   c0000780 <strcmp>
c00105a1:	83 c4 10             	add    esp,0x10
c00105a4:	85 c0                	test   eax,eax
c00105a6:	74 23                	je     c00105cb <CPU::detectFeatures()+0x241>
c00105a8:	57                   	push   edi
c00105a9:	57                   	push   edi
c00105aa:	68 b6 20 02 c0       	push   0xc00220b6
c00105af:	55                   	push   ebp
c00105b0:	e8 cb 01 ff ff       	call   c0000780 <strcmp>
c00105b5:	83 c4 10             	add    esp,0x10
c00105b8:	85 c0                	test   eax,eax
c00105ba:	75 1e                	jne    c00105da <CPU::detectFeatures()+0x250>
c00105bc:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00105c6:	e9 8a 01 00 00       	jmp    c0010755 <CPU::detectFeatures()+0x3cb>
c00105cb:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00105d5:	e9 7b 01 00 00       	jmp    c0010755 <CPU::detectFeatures()+0x3cb>
c00105da:	56                   	push   esi
c00105db:	56                   	push   esi
c00105dc:	68 c3 20 02 c0       	push   0xc00220c3
c00105e1:	55                   	push   ebp
c00105e2:	e8 99 01 ff ff       	call   c0000780 <strcmp>
c00105e7:	83 c4 10             	add    esp,0x10
c00105ea:	85 c0                	test   eax,eax
c00105ec:	75 0f                	jne    c00105fd <CPU::detectFeatures()+0x273>
c00105ee:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00105f8:	e9 58 01 00 00       	jmp    c0010755 <CPU::detectFeatures()+0x3cb>
c00105fd:	51                   	push   ecx
c00105fe:	51                   	push   ecx
c00105ff:	68 82 20 02 c0       	push   0xc0022082
c0010604:	55                   	push   ebp
c0010605:	e8 76 01 ff ff       	call   c0000780 <strcmp>
c001060a:	83 c4 10             	add    esp,0x10
c001060d:	85 c0                	test   eax,eax
c001060f:	75 0f                	jne    c0010620 <CPU::detectFeatures()+0x296>
c0010611:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001061b:	e9 35 01 00 00       	jmp    c0010755 <CPU::detectFeatures()+0x3cb>
c0010620:	52                   	push   edx
c0010621:	52                   	push   edx
c0010622:	68 d0 20 02 c0       	push   0xc00220d0
c0010627:	55                   	push   ebp
c0010628:	e8 53 01 ff ff       	call   c0000780 <strcmp>
c001062d:	83 c4 10             	add    esp,0x10
c0010630:	85 c0                	test   eax,eax
c0010632:	75 0f                	jne    c0010643 <CPU::detectFeatures()+0x2b9>
c0010634:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001063e:	e9 12 01 00 00       	jmp    c0010755 <CPU::detectFeatures()+0x3cb>
c0010643:	50                   	push   eax
c0010644:	50                   	push   eax
c0010645:	68 dd 20 02 c0       	push   0xc00220dd
c001064a:	55                   	push   ebp
c001064b:	e8 30 01 ff ff       	call   c0000780 <strcmp>
c0010650:	83 c4 10             	add    esp,0x10
c0010653:	85 c0                	test   eax,eax
c0010655:	75 0f                	jne    c0010666 <CPU::detectFeatures()+0x2dc>
c0010657:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0010661:	e9 ef 00 00 00       	jmp    c0010755 <CPU::detectFeatures()+0x3cb>
c0010666:	50                   	push   eax
c0010667:	50                   	push   eax
c0010668:	68 ea 20 02 c0       	push   0xc00220ea
c001066d:	55                   	push   ebp
c001066e:	e8 0d 01 ff ff       	call   c0000780 <strcmp>
c0010673:	83 c4 10             	add    esp,0x10
c0010676:	85 c0                	test   eax,eax
c0010678:	75 0f                	jne    c0010689 <CPU::detectFeatures()+0x2ff>
c001067a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0010684:	e9 cc 00 00 00       	jmp    c0010755 <CPU::detectFeatures()+0x3cb>
c0010689:	50                   	push   eax
c001068a:	50                   	push   eax
c001068b:	68 f7 20 02 c0       	push   0xc00220f7
c0010690:	55                   	push   ebp
c0010691:	e8 ea 00 ff ff       	call   c0000780 <strcmp>
c0010696:	83 c4 10             	add    esp,0x10
c0010699:	85 c0                	test   eax,eax
c001069b:	75 0f                	jne    c00106ac <CPU::detectFeatures()+0x322>
c001069d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00106a7:	e9 a9 00 00 00       	jmp    c0010755 <CPU::detectFeatures()+0x3cb>
c00106ac:	50                   	push   eax
c00106ad:	50                   	push   eax
c00106ae:	68 04 21 02 c0       	push   0xc0022104
c00106b3:	55                   	push   ebp
c00106b4:	e8 c7 00 ff ff       	call   c0000780 <strcmp>
c00106b9:	83 c4 10             	add    esp,0x10
c00106bc:	85 c0                	test   eax,eax
c00106be:	75 0f                	jne    c00106cf <CPU::detectFeatures()+0x345>
c00106c0:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00106ca:	e9 86 00 00 00       	jmp    c0010755 <CPU::detectFeatures()+0x3cb>
c00106cf:	50                   	push   eax
c00106d0:	50                   	push   eax
c00106d1:	68 11 21 02 c0       	push   0xc0022111
c00106d6:	55                   	push   ebp
c00106d7:	e8 a4 00 ff ff       	call   c0000780 <strcmp>
c00106dc:	83 c4 10             	add    esp,0x10
c00106df:	85 c0                	test   eax,eax
c00106e1:	75 0c                	jne    c00106ef <CPU::detectFeatures()+0x365>
c00106e3:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00106ed:	eb 66                	jmp    c0010755 <CPU::detectFeatures()+0x3cb>
c00106ef:	50                   	push   eax
c00106f0:	50                   	push   eax
c00106f1:	68 1e 21 02 c0       	push   0xc002211e
c00106f6:	55                   	push   ebp
c00106f7:	e8 84 00 ff ff       	call   c0000780 <strcmp>
c00106fc:	83 c4 10             	add    esp,0x10
c00106ff:	85 c0                	test   eax,eax
c0010701:	75 0c                	jne    c001070f <CPU::detectFeatures()+0x385>
c0010703:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001070d:	eb 46                	jmp    c0010755 <CPU::detectFeatures()+0x3cb>
c001070f:	57                   	push   edi
c0010710:	57                   	push   edi
c0010711:	68 2b 21 02 c0       	push   0xc002212b
c0010716:	55                   	push   ebp
c0010717:	e8 64 00 ff ff       	call   c0000780 <strcmp>
c001071c:	83 c4 10             	add    esp,0x10
c001071f:	85 c0                	test   eax,eax
c0010721:	74 e0                	je     c0010703 <CPU::detectFeatures()+0x379>
c0010723:	56                   	push   esi
c0010724:	56                   	push   esi
c0010725:	68 38 21 02 c0       	push   0xc0022138
c001072a:	55                   	push   ebp
c001072b:	e8 50 00 ff ff       	call   c0000780 <strcmp>
c0010730:	83 c4 10             	add    esp,0x10
c0010733:	85 c0                	test   eax,eax
c0010735:	74 cc                	je     c0010703 <CPU::detectFeatures()+0x379>
c0010737:	51                   	push   ecx
c0010738:	51                   	push   ecx
c0010739:	68 45 21 02 c0       	push   0xc0022145
c001073e:	55                   	push   ebp
c001073f:	e8 3c 00 ff ff       	call   c0000780 <strcmp>
c0010744:	83 c4 10             	add    esp,0x10
c0010747:	85 c0                	test   eax,eax
c0010749:	74 b8                	je     c0010703 <CPU::detectFeatures()+0x379>
c001074b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0010755:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001075a:	0f 86 be 00 00 00    	jbe    c001081e <CPU::detectFeatures()+0x494>
c0010760:	83 ec 0c             	sub    esp,0xc
c0010763:	68 80 00 00 00       	push   0x80
c0010768:	e8 31 fb ff ff       	call   c001029e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001076d:	83 e0 01             	and    eax,0x1
c0010770:	c1 e0 06             	shl    eax,0x6
c0010773:	89 c2                	mov    edx,eax
c0010775:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001077b:	83 e0 bf             	and    eax,0xffffffbf
c001077e:	09 d0                	or     eax,edx
c0010780:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010786:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001078d:	e8 0c fb ff ff       	call   c001029e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010792:	83 e0 01             	and    eax,0x1
c0010795:	c1 e0 04             	shl    eax,0x4
c0010798:	89 c2                	mov    edx,eax
c001079a:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00107a0:	83 e0 ef             	and    eax,0xffffffef
c00107a3:	09 d0                	or     eax,edx
c00107a5:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00107ab:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00107b2:	e8 e7 fa ff ff       	call   c001029e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00107b7:	89 c2                	mov    edx,eax
c00107b9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00107bf:	c1 e2 07             	shl    edx,0x7
c00107c2:	83 e0 7f             	and    eax,0x7f
c00107c5:	09 d0                	or     eax,edx
c00107c7:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00107cd:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00107d4:	e8 f3 fa ff ff       	call   c00102cc <CPU::cpuidCheckExtendedECX(unsigned int)>
c00107d9:	83 e0 01             	and    eax,0x1
c00107dc:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00107e3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00107e9:	83 e0 f7             	and    eax,0xfffffff7
c00107ec:	09 d0                	or     eax,edx
c00107ee:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00107f4:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00107fb:	e8 cc fa ff ff       	call   c00102cc <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010800:	83 c4 10             	add    esp,0x10
c0010803:	83 e0 01             	and    eax,0x1
c0010806:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001080d:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010813:	83 e0 fb             	and    eax,0xfffffffb
c0010816:	09 d0                	or     eax,edx
c0010818:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001081e:	83 ec 0c             	sub    esp,0xc
c0010821:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010825:	50                   	push   eax
c0010826:	8d 44 24 28          	lea    eax,[esp+0x28]
c001082a:	50                   	push   eax
c001082b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001082f:	57                   	push   edi
c0010830:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010834:	56                   	push   esi
c0010835:	6a 01                	push   0x1
c0010837:	e8 82 f9 ff ff       	call   c00101be <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001083c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010840:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0010846:	89 c1                	mov    ecx,eax
c0010848:	83 e1 0f             	and    ecx,0xf
c001084b:	83 e2 f0             	and    edx,0xfffffff0
c001084e:	09 ca                	or     edx,ecx
c0010850:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0010856:	89 c2                	mov    edx,eax
c0010858:	c1 ea 04             	shr    edx,0x4
c001085b:	83 e2 0f             	and    edx,0xf
c001085e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010862:	89 d1                	mov    ecx,edx
c0010864:	83 c4 20             	add    esp,0x20
c0010867:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001086d:	c1 e1 06             	shl    ecx,0x6
c0010870:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010876:	09 ca                	or     edx,ecx
c0010878:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001087f:	89 c2                	mov    edx,eax
c0010881:	c1 ea 08             	shr    edx,0x8
c0010884:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001088a:	83 e2 0f             	and    edx,0xf
c001088d:	89 d5                	mov    ebp,edx
c001088f:	83 e5 03             	and    ebp,0x3
c0010892:	c1 e5 06             	shl    ebp,0x6
c0010895:	83 e1 3f             	and    ecx,0x3f
c0010898:	09 e9                	or     ecx,ebp
c001089a:	89 d5                	mov    ebp,edx
c001089c:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c00108a2:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c00108a8:	c1 ed 02             	shr    ebp,0x2
c00108ab:	83 e1 c0             	and    ecx,0xffffffc0
c00108ae:	09 e9                	or     ecx,ebp
c00108b0:	89 c5                	mov    ebp,eax
c00108b2:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00108b8:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c00108be:	c1 ed 08             	shr    ebp,0x8
c00108c1:	83 e5 30             	and    ebp,0x30
c00108c4:	83 e1 cf             	and    ecx,0xffffffcf
c00108c7:	09 e9                	or     ecx,ebp
c00108c9:	83 fa 06             	cmp    edx,0x6
c00108cc:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c00108d2:	74 05                	je     c00108d9 <CPU::detectFeatures()+0x54f>
c00108d4:	83 fa 0f             	cmp    edx,0xf
c00108d7:	75 64                	jne    c001093d <CPU::detectFeatures()+0x5b3>
c00108d9:	89 c1                	mov    ecx,eax
c00108db:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00108e1:	c1 e9 10             	shr    ecx,0x10
c00108e4:	c1 e1 04             	shl    ecx,0x4
c00108e7:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00108eb:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c00108f1:	0f b6 c9             	movzx  ecx,cl
c00108f4:	c1 e1 06             	shl    ecx,0x6
c00108f7:	09 e9                	or     ecx,ebp
c00108f9:	83 fa 0f             	cmp    edx,0xf
c00108fc:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010903:	75 38                	jne    c001093d <CPU::detectFeatures()+0x5b3>
c0010905:	c1 e8 14             	shr    eax,0x14
c0010908:	83 c0 0f             	add    eax,0xf
c001090b:	0f b6 c0             	movzx  eax,al
c001090e:	89 c2                	mov    edx,eax
c0010910:	c1 e8 02             	shr    eax,0x2
c0010913:	83 e2 03             	and    edx,0x3
c0010916:	89 d1                	mov    ecx,edx
c0010918:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001091e:	c1 e1 06             	shl    ecx,0x6
c0010921:	83 e2 3f             	and    edx,0x3f
c0010924:	09 ca                	or     edx,ecx
c0010926:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001092c:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010932:	83 e2 c0             	and    edx,0xffffffc0
c0010935:	09 d0                	or     eax,edx
c0010937:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001093d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010943:	83 ec 0c             	sub    esp,0xc
c0010946:	83 c8 07             	or     eax,0x7
c0010949:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001094f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010953:	50                   	push   eax
c0010954:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010958:	55                   	push   ebp
c0010959:	57                   	push   edi
c001095a:	56                   	push   esi
c001095b:	68 00 00 00 80       	push   0x80000000
c0010960:	e8 59 f8 ff ff       	call   c00101be <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010965:	83 c4 20             	add    esp,0x20
c0010968:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010970:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010974:	76 1e                	jbe    c0010994 <CPU::detectFeatures()+0x60a>
c0010976:	83 ec 0c             	sub    esp,0xc
c0010979:	50                   	push   eax
c001097a:	55                   	push   ebp
c001097b:	57                   	push   edi
c001097c:	56                   	push   esi
c001097d:	68 01 00 00 80       	push   0x80000001
c0010982:	e8 37 f8 ff ff       	call   c00101be <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010987:	83 c4 20             	add    esp,0x20
c001098a:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010994:	52                   	push   edx
c0010995:	52                   	push   edx
c0010996:	68 51 21 02 c0       	push   0xc0022151
c001099b:	53                   	push   ebx
c001099c:	e8 29 c1 ff ff       	call   c000caca <Device::setName(char const*)>
c00109a1:	83 c4 10             	add    esp,0x10
c00109a4:	eb 69                	jmp    c0010a0f <CPU::detectFeatures()+0x685>
c00109a6:	50                   	push   eax
c00109a7:	50                   	push   eax
c00109a8:	68 b6 20 02 c0       	push   0xc00220b6
c00109ad:	55                   	push   ebp
c00109ae:	e8 9d fc fe ff       	call   c0000650 <strcpy>
c00109b3:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00109bd:	e8 01 f8 fe ff       	call   c00001c3 <is486>
c00109c2:	83 c4 10             	add    esp,0x10
c00109c5:	85 c0                	test   eax,eax
c00109c7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00109cd:	74 1f                	je     c00109ee <CPU::detectFeatures()+0x664>
c00109cf:	83 c8 07             	or     eax,0x7
c00109d2:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00109d8:	0f 20 c0             	mov    eax,cr0
c00109db:	83 e0 14             	and    eax,0x14
c00109de:	83 f8 04             	cmp    eax,0x4
c00109e1:	75 10                	jne    c00109f3 <CPU::detectFeatures()+0x669>
c00109e3:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00109e9:	83 e0 fd             	and    eax,0xfffffffd
c00109ec:	eb 1b                	jmp    c0010a09 <CPU::detectFeatures()+0x67f>
c00109ee:	83 e0 f8             	and    eax,0xfffffff8
c00109f1:	eb df                	jmp    c00109d2 <CPU::detectFeatures()+0x648>
c00109f3:	e8 a6 f7 fe ff       	call   c000019e <hasLegacyFPU>
c00109f8:	83 e0 01             	and    eax,0x1
c00109fb:	8d 14 00             	lea    edx,[eax+eax*1]
c00109fe:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010a04:	83 e0 fd             	and    eax,0xfffffffd
c0010a07:	09 d0                	or     eax,edx
c0010a09:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010a0f:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010a16:	74 17                	je     c0010a2f <CPU::detectFeatures()+0x6a5>
c0010a18:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c0010a1e:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010a24:	83 c8 10             	or     eax,0x10
c0010a27:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010a2d:	eb 20                	jmp    c0010a4f <CPU::detectFeatures()+0x6c5>
c0010a2f:	e8 6a f7 fe ff       	call   c000019e <hasLegacyFPU>
c0010a34:	83 e0 01             	and    eax,0x1
c0010a37:	8d 14 00             	lea    edx,[eax+eax*1]
c0010a3a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010a40:	83 e0 fd             	and    eax,0xfffffffd
c0010a43:	09 d0                	or     eax,edx
c0010a45:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010a4b:	a8 02                	test   al,0x2
c0010a4d:	75 c9                	jne    c0010a18 <CPU::detectFeatures()+0x68e>
c0010a4f:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010a56:	83 c4 2c             	add    esp,0x2c
c0010a59:	5b                   	pop    ebx
c0010a5a:	5e                   	pop    esi
c0010a5b:	5f                   	pop    edi
c0010a5c:	5d                   	pop    ebp
c0010a5d:	c3                   	ret    

c0010a5e <CPU::setupSMEP()>:
c0010a5e:	0f 20 e0             	mov    eax,cr4
c0010a61:	0d 00 00 10 00       	or     eax,0x100000
c0010a66:	0f 22 e0             	mov    cr4,eax
c0010a69:	c3                   	ret    

c0010a6a <CPU::setupUMIP()>:
c0010a6a:	0f 20 e0             	mov    eax,cr4
c0010a6d:	80 cc 08             	or     ah,0x8
c0010a70:	0f 22 e0             	mov    cr4,eax
c0010a73:	c3                   	ret    

c0010a74 <CPU::setupTSC()>:
c0010a74:	0f 20 e0             	mov    eax,cr4
c0010a77:	83 c8 04             	or     eax,0x4
c0010a7a:	0f 22 e0             	mov    cr4,eax
c0010a7d:	c3                   	ret    

c0010a7e <CPU::setupLargePages()>:
c0010a7e:	0f 20 e0             	mov    eax,cr4
c0010a81:	83 c8 10             	or     eax,0x10
c0010a84:	0f 22 e0             	mov    cr4,eax
c0010a87:	c3                   	ret    

c0010a88 <CPU::setupPAT()>:
c0010a88:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010a8d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010a94:	74 2c                	je     c0010ac2 <CPU::setupPAT()+0x3a>
c0010a96:	53                   	push   ebx
c0010a97:	83 ec 10             	sub    esp,0x10
c0010a9a:	68 77 02 00 00       	push   0x277
c0010a9f:	50                   	push   eax
c0010aa0:	e8 3d 66 ff ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0010aa5:	83 e2 f8             	and    edx,0xfffffff8
c0010aa8:	83 ca 01             	or     edx,0x1
c0010aab:	52                   	push   edx
c0010aac:	50                   	push   eax
c0010aad:	68 77 02 00 00       	push   0x277
c0010ab2:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0010ab8:	e8 51 66 ff ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c0010abd:	83 c4 28             	add    esp,0x28
c0010ac0:	5b                   	pop    ebx
c0010ac1:	c3                   	ret    
c0010ac2:	c3                   	ret    
c0010ac3:	90                   	nop

c0010ac4 <CPU::setupMTRR()>:
c0010ac4:	c3                   	ret    
c0010ac5:	90                   	nop

c0010ac6 <CPU::setupGlobalPages()>:
c0010ac6:	0f 20 e0             	mov    eax,cr4
c0010ac9:	0c 80                	or     al,0x80
c0010acb:	0f 22 e0             	mov    cr4,eax
c0010ace:	c3                   	ret    
c0010acf:	90                   	nop

c0010ad0 <CPU::allowUsermodeDataAccess()>:
c0010ad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ad4:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010adb:	74 03                	je     c0010ae0 <CPU::allowUsermodeDataAccess()+0x10>
c0010add:	0f 01 cb             	stac   
c0010ae0:	c3                   	ret    
c0010ae1:	90                   	nop

c0010ae2 <CPU::prohibitUsermodeDataAccess()>:
c0010ae2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ae6:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010aed:	74 03                	je     c0010af2 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010aef:	0f 01 ca             	clac   
c0010af2:	c3                   	ret    
c0010af3:	90                   	nop

c0010af4 <CPU::setupSMAP()>:
c0010af4:	0f 20 e0             	mov    eax,cr4
c0010af7:	0d 00 00 20 00       	or     eax,0x200000
c0010afc:	0f 22 e0             	mov    cr4,eax
c0010aff:	eb e1                	jmp    c0010ae2 <CPU::prohibitUsermodeDataAccess()>
c0010b01:	90                   	nop

c0010b02 <CPU::setupFeatures()>:
c0010b02:	53                   	push   ebx
c0010b03:	83 ec 08             	sub    esp,0x8
c0010b06:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b0a:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010b11:	74 18                	je     c0010b2b <CPU::setupFeatures()+0x29>
c0010b13:	83 ec 0c             	sub    esp,0xc
c0010b16:	68 5d 21 02 c0       	push   0xc002215d
c0010b1b:	e8 ea 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b23:	e8 42 ff ff ff       	call   c0010a6a <CPU::setupUMIP()>
c0010b28:	83 c4 10             	add    esp,0x10
c0010b2b:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010b32:	74 18                	je     c0010b4c <CPU::setupFeatures()+0x4a>
c0010b34:	83 ec 0c             	sub    esp,0xc
c0010b37:	68 67 21 02 c0       	push   0xc0022167
c0010b3c:	e8 c9 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b44:	e8 2b ff ff ff       	call   c0010a74 <CPU::setupTSC()>
c0010b49:	83 c4 10             	add    esp,0x10
c0010b4c:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010b53:	74 18                	je     c0010b6d <CPU::setupFeatures()+0x6b>
c0010b55:	83 ec 0c             	sub    esp,0xc
c0010b58:	68 70 21 02 c0       	push   0xc0022170
c0010b5d:	e8 a8 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b65:	e8 14 ff ff ff       	call   c0010a7e <CPU::setupLargePages()>
c0010b6a:	83 c4 10             	add    esp,0x10
c0010b6d:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010b74:	74 18                	je     c0010b8e <CPU::setupFeatures()+0x8c>
c0010b76:	83 ec 0c             	sub    esp,0xc
c0010b79:	68 79 21 02 c0       	push   0xc0022179
c0010b7e:	e8 87 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010b83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b86:	e8 3b ff ff ff       	call   c0010ac6 <CPU::setupGlobalPages()>
c0010b8b:	83 c4 10             	add    esp,0x10
c0010b8e:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010b95:	74 18                	je     c0010baf <CPU::setupFeatures()+0xad>
c0010b97:	83 ec 0c             	sub    esp,0xc
c0010b9a:	68 8b 21 02 c0       	push   0xc002218b
c0010b9f:	e8 66 9d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010ba4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ba7:	e8 dc fe ff ff       	call   c0010a88 <CPU::setupPAT()>
c0010bac:	83 c4 10             	add    esp,0x10
c0010baf:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010bb6:	74 11                	je     c0010bc9 <CPU::setupFeatures()+0xc7>
c0010bb8:	c7 44 24 10 94 21 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022194
c0010bc0:	83 c4 08             	add    esp,0x8
c0010bc3:	5b                   	pop    ebx
c0010bc4:	e9 41 9d ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c0010bc9:	83 c4 08             	add    esp,0x8
c0010bcc:	5b                   	pop    ebx
c0010bcd:	c3                   	ret    

c0010bce <CPU::open(int, int, void*)>:
c0010bce:	55                   	push   ebp
c0010bcf:	57                   	push   edi
c0010bd0:	56                   	push   esi
c0010bd1:	53                   	push   ebx
c0010bd2:	83 ec 18             	sub    esp,0x18
c0010bd5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010bd9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010bdd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010be1:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010be7:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010bed:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010bf3:	50                   	push   eax
c0010bf4:	e8 e5 67 ff ff       	call   c00073de <GDT::setup()>
c0010bf9:	83 c4 0c             	add    esp,0xc
c0010bfc:	6a 00                	push   0x0
c0010bfe:	68 ef be ad de       	push   0xdeadbeef
c0010c03:	55                   	push   ebp
c0010c04:	e8 67 83 ff ff       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c0010c09:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010c0c:	e8 3f 83 ff ff       	call   c0008f50 <TSS::flush()>
c0010c11:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010c17:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c1a:	e8 23 6a ff ff       	call   c0007642 <IDT::setup()>
c0010c1f:	b8 00 04 00 00       	mov    eax,0x400
c0010c24:	0f 23 f8             	mov    db7,eax
c0010c27:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010c31:	e8 ac 71 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0010c36:	83 c4 10             	add    esp,0x10
c0010c39:	85 f6                	test   esi,esi
c0010c3b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010c41:	89 38                	mov    DWORD PTR [eax],edi
c0010c43:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010c49:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010c4c:	74 10                	je     c0010c5e <CPU::open(int, int, void*)+0x90>
c0010c4e:	50                   	push   eax
c0010c4f:	50                   	push   eax
c0010c50:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010c56:	56                   	push   esi
c0010c57:	e8 30 8c ff ff       	call   c000988c <VAS::setCPUSpecific(unsigned long)>
c0010c5c:	eb 0d                	jmp    c0010c6b <CPU::open(int, int, void*)+0x9d>
c0010c5e:	83 ec 0c             	sub    esp,0xc
c0010c61:	68 9e 21 02 c0       	push   0xc002219e
c0010c66:	e8 9c 08 00 00       	call   c0011507 <KePanic(char const*)>
c0010c6b:	83 c4 10             	add    esp,0x10
c0010c6e:	83 ec 0c             	sub    esp,0xc
c0010c71:	68 ac 21 02 c0       	push   0xc00221ac
c0010c76:	e8 8e 01 00 00       	call   c0010e09 <KeSetBootMessage(char const*)>
c0010c7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c7e:	e8 07 f7 ff ff       	call   c001038a <CPU::detectFeatures()>
c0010c83:	c7 04 24 cf 21 02 c0 	mov    DWORD PTR [esp],0xc00221cf
c0010c8a:	e8 7a 01 00 00       	call   c0010e09 <KeSetBootMessage(char const*)>
c0010c8f:	e8 fb 73 00 00       	call   c001808f <HalInitialise()>
c0010c94:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0010c99:	83 e0 10             	and    eax,0x10
c0010c9c:	83 f8 01             	cmp    eax,0x1
c0010c9f:	19 c0                	sbb    eax,eax
c0010ca1:	83 e0 46             	and    eax,0x46
c0010ca4:	83 c0 1e             	add    eax,0x1e
c0010ca7:	89 04 24             	mov    DWORD PTR [esp],eax
c0010caa:	e8 c2 d6 ff ff       	call   c000e371 <setupTimer(int)>
c0010caf:	83 c4 10             	add    esp,0x10
c0010cb2:	f6 05 d0 6e 02 c0 20 	test   BYTE PTR ds:0xc0026ed0,0x20
c0010cb9:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010cbf:	74 0c                	je     c0010ccd <CPU::open(int, int, void*)+0xff>
c0010cc1:	83 ec 0c             	sub    esp,0xc
c0010cc4:	53                   	push   ebx
c0010cc5:	e8 38 fe ff ff       	call   c0010b02 <CPU::setupFeatures()>
c0010cca:	83 c4 10             	add    esp,0x10
c0010ccd:	83 c4 0c             	add    esp,0xc
c0010cd0:	31 c0                	xor    eax,eax
c0010cd2:	5b                   	pop    ebx
c0010cd3:	5e                   	pop    esi
c0010cd4:	5f                   	pop    edi
c0010cd5:	5d                   	pop    ebp
c0010cd6:	c3                   	ret    

c0010cd7 <KeInitialiseAtexit()>:
c0010cd7:	83 ec 10             	sub    esp,0x10
c0010cda:	6a 60                	push   0x60
c0010cdc:	6a 00                	push   0x0
c0010cde:	68 20 be 02 c0       	push   0xc002be20
c0010ce3:	c7 05 a0 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bda0,0x0
c0010ced:	e8 fe f7 fe ff       	call   c00004f0 <memset>
c0010cf2:	83 c4 1c             	add    esp,0x1c
c0010cf5:	c3                   	ret    

c0010cf6 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010cf6:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0010cfb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010cff:	89 14 85 20 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41e0],edx
c0010d06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d0a:	89 14 85 c0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4240],edx
c0010d11:	40                   	inc    eax
c0010d12:	a3 a0 bd 02 c0       	mov    ds:0xc002bda0,eax
c0010d17:	83 f8 17             	cmp    eax,0x17
c0010d1a:	7e 0d                	jle    c0010d29 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010d1c:	c7 44 24 04 10 22 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022210
c0010d24:	e9 de 07 00 00       	jmp    c0011507 <KePanic(char const*)>
c0010d29:	c3                   	ret    

c0010d2a <KeExecuteAtexit()>:
c0010d2a:	53                   	push   ebx
c0010d2b:	31 db                	xor    ebx,ebx
c0010d2d:	83 ec 08             	sub    esp,0x8
c0010d30:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c0010d36:	7e 50                	jle    c0010d88 <KeExecuteAtexit()+0x5e>
c0010d38:	8b 04 9d 20 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41e0]
c0010d3f:	85 c0                	test   eax,eax
c0010d41:	74 42                	je     c0010d85 <KeExecuteAtexit()+0x5b>
c0010d43:	51                   	push   ecx
c0010d44:	50                   	push   eax
c0010d45:	53                   	push   ebx
c0010d46:	68 29 22 02 c0       	push   0xc0022229
c0010d4b:	e8 ba 9b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010d50:	58                   	pop    eax
c0010d51:	ff 34 9d c0 bd 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4240]
c0010d58:	ff 14 9d 20 be 02 c0 	call   DWORD PTR [ebx*4-0x3ffd41e0]
c0010d5f:	c7 04 24 4b 22 02 c0 	mov    DWORD PTR [esp],0xc002224b
c0010d66:	e8 9f 9b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010d6b:	c7 04 24 ab 33 02 c0 	mov    DWORD PTR [esp],0xc00233ab
c0010d72:	c7 04 9d 20 be 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd41e0],0x0
c0010d7d:	e8 88 9b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010d82:	83 c4 10             	add    esp,0x10
c0010d85:	43                   	inc    ebx
c0010d86:	eb a8                	jmp    c0010d30 <KeExecuteAtexit()+0x6>
c0010d88:	83 c4 08             	add    esp,0x8
c0010d8b:	5b                   	pop    ebx
c0010d8c:	c3                   	ret    

c0010d8d <KeDisplaySplashScreen()>:
c0010d8d:	55                   	push   ebp
c0010d8e:	bd 05 00 00 00       	mov    ebp,0x5
c0010d93:	57                   	push   edi
c0010d94:	bf 0a 00 00 00       	mov    edi,0xa
c0010d99:	56                   	push   esi
c0010d9a:	31 f6                	xor    esi,esi
c0010d9c:	53                   	push   ebx
c0010d9d:	31 db                	xor    ebx,ebx
c0010d9f:	83 ec 0c             	sub    esp,0xc
c0010da2:	0f b6 96 00 36 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdca00]
c0010da9:	85 d2                	test   edx,edx
c0010dab:	89 d0                	mov    eax,edx
c0010dad:	74 52                	je     c0010e01 <KeDisplaySplashScreen()+0x74>
c0010daf:	80 bb 36 36 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdc9ca],0xdb
c0010db6:	75 13                	jne    c0010dcb <KeDisplaySplashScreen()+0x3e>
c0010db8:	0f b6 8b 35 36 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdc9cb]
c0010dbf:	83 e1 fe             	and    ecx,0xfffffffe
c0010dc2:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010dc8:	75 01                	jne    c0010dcb <KeDisplaySplashScreen()+0x3e>
c0010dca:	47                   	inc    edi
c0010dcb:	83 fa 0d             	cmp    edx,0xd
c0010dce:	74 28                	je     c0010df8 <KeDisplaySplashScreen()+0x6b>
c0010dd0:	83 fa 0a             	cmp    edx,0xa
c0010dd3:	75 0a                	jne    c0010ddf <KeDisplaySplashScreen()+0x52>
c0010dd5:	45                   	inc    ebp
c0010dd6:	bf 0a 00 00 00       	mov    edi,0xa
c0010ddb:	31 db                	xor    ebx,ebx
c0010ddd:	eb 19                	jmp    c0010df8 <KeDisplaySplashScreen()+0x6b>
c0010ddf:	83 ec 0c             	sub    esp,0xc
c0010de2:	0f be c0             	movsx  eax,al
c0010de5:	55                   	push   ebp
c0010de6:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010de9:	43                   	inc    ebx
c0010dea:	52                   	push   edx
c0010deb:	6a 00                	push   0x0
c0010ded:	6a 0e                	push   0xe
c0010def:	50                   	push   eax
c0010df0:	e8 17 7f 00 00       	call   c0018d0c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010df5:	83 c4 20             	add    esp,0x20
c0010df8:	46                   	inc    esi
c0010df9:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010dff:	75 a1                	jne    c0010da2 <KeDisplaySplashScreen()+0x15>
c0010e01:	83 c4 0c             	add    esp,0xc
c0010e04:	5b                   	pop    ebx
c0010e05:	5e                   	pop    esi
c0010e06:	5f                   	pop    edi
c0010e07:	5d                   	pop    ebp
c0010e08:	c3                   	ret    

c0010e09 <KeSetBootMessage(char const*)>:
c0010e09:	57                   	push   edi
c0010e0a:	56                   	push   esi
c0010e0b:	53                   	push   ebx
c0010e0c:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010e12:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010e19:	68 9e 00 00 00       	push   0x9e
c0010e1e:	6a 00                	push   0x0
c0010e20:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010e24:	56                   	push   esi
c0010e25:	e8 c6 f6 fe ff       	call   c00004f0 <memset>
c0010e2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e2d:	e8 4e f7 fe ff       	call   c0000580 <strlen>
c0010e32:	ba 50 00 00 00       	mov    edx,0x50
c0010e37:	83 c4 10             	add    esp,0x10
c0010e3a:	31 c9                	xor    ecx,ecx
c0010e3c:	29 c2                	sub    edx,eax
c0010e3e:	83 e2 fe             	and    edx,0xfffffffe
c0010e41:	01 f2                	add    edx,esi
c0010e43:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010e48:	84 c0                	test   al,al
c0010e4a:	74 0a                	je     c0010e56 <KeSetBootMessage(char const*)+0x4d>
c0010e4c:	80 cc 0f             	or     ah,0xf
c0010e4f:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010e53:	41                   	inc    ecx
c0010e54:	eb ed                	jmp    c0010e43 <KeSetBootMessage(char const*)+0x3a>
c0010e56:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010e5b:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010e60:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e62:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010e68:	5b                   	pop    ebx
c0010e69:	5e                   	pop    esi
c0010e6a:	5f                   	pop    edi
c0010e6b:	c3                   	ret    

c0010e6c <Krnl::handlePowerButton()>:
c0010e6c:	83 ec 0c             	sub    esp,0xc
c0010e6f:	e8 ee 06 00 00       	call   c0011562 <KeHandlePowerButton()>
c0010e74:	90                   	nop
c0010e75:	83 c4 0c             	add    esp,0xc
c0010e78:	c3                   	ret    
c0010e79:	8d 76 00             	lea    esi,[esi+0x0]

c0010e7c <Krnl::handleSleepButton()>:
c0010e7c:	83 ec 0c             	sub    esp,0xc
c0010e7f:	e8 13 07 00 00       	call   c0011597 <KeHandleSleepButton()>
c0010e84:	90                   	nop
c0010e85:	83 c4 0c             	add    esp,0xc
c0010e88:	c3                   	ret    

c0010e89 <KeCalculateCRC32(unsigned char*, int)>:
c0010e89:	53                   	push   ebx
c0010e8a:	83 c8 ff             	or     eax,0xffffffff
c0010e8d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010e91:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010e95:	01 cb                	add    ebx,ecx
c0010e97:	39 d9                	cmp    ecx,ebx
c0010e99:	74 15                	je     c0010eb0 <KeCalculateCRC32(unsigned char*, int)+0x27>
c0010e9b:	41                   	inc    ecx
c0010e9c:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c0010e9f:	31 c2                	xor    edx,eax
c0010ea1:	c1 e8 08             	shr    eax,0x8
c0010ea4:	0f b6 d2             	movzx  edx,dl
c0010ea7:	33 04 95 60 37 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc8a0]
c0010eae:	eb e7                	jmp    c0010e97 <KeCalculateCRC32(unsigned char*, int)+0xe>
c0010eb0:	5b                   	pop    ebx
c0010eb1:	f7 d0                	not    eax
c0010eb3:	c3                   	ret    

c0010eb4 <EnvVarContainer::getEnv(char const*)>:
c0010eb4:	57                   	push   edi
c0010eb5:	56                   	push   esi
c0010eb6:	53                   	push   ebx
c0010eb7:	31 db                	xor    ebx,ebx
c0010eb9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010ebd:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010ebf:	7e 2b                	jle    c0010eec <EnvVarContainer::getEnv(char const*)+0x38>
c0010ec1:	50                   	push   eax
c0010ec2:	50                   	push   eax
c0010ec3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010ec6:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010ecd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010ed0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010ed4:	e8 a7 f8 fe ff       	call   c0000780 <strcmp>
c0010ed9:	83 c4 10             	add    esp,0x10
c0010edc:	85 c0                	test   eax,eax
c0010ede:	75 09                	jne    c0010ee9 <EnvVarContainer::getEnv(char const*)+0x35>
c0010ee0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010ee3:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010ee7:	eb 05                	jmp    c0010eee <EnvVarContainer::getEnv(char const*)+0x3a>
c0010ee9:	43                   	inc    ebx
c0010eea:	eb d1                	jmp    c0010ebd <EnvVarContainer::getEnv(char const*)+0x9>
c0010eec:	31 c0                	xor    eax,eax
c0010eee:	5b                   	pop    ebx
c0010eef:	5e                   	pop    esi
c0010ef0:	5f                   	pop    edi
c0010ef1:	c3                   	ret    

c0010ef2 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010ef2:	55                   	push   ebp
c0010ef3:	57                   	push   edi
c0010ef4:	56                   	push   esi
c0010ef5:	53                   	push   ebx
c0010ef6:	83 ec 28             	sub    esp,0x28
c0010ef9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010efd:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010f01:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010f05:	56                   	push   esi
c0010f06:	e8 75 f6 fe ff       	call   c0000580 <strlen>
c0010f0b:	40                   	inc    eax
c0010f0c:	89 04 24             	mov    DWORD PTR [esp],eax
c0010f0f:	e8 bf 6b ff ff       	call   c0007ad3 <malloc>
c0010f14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010f1b:	e8 60 f6 fe ff       	call   c0000580 <strlen>
c0010f20:	40                   	inc    eax
c0010f21:	89 04 24             	mov    DWORD PTR [esp],eax
c0010f24:	e8 aa 6b ff ff       	call   c0007ad3 <malloc>
c0010f29:	89 34 24             	mov    DWORD PTR [esp],esi
c0010f2c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010f30:	e8 4b f6 fe ff       	call   c0000580 <strlen>
c0010f35:	83 c4 0c             	add    esp,0xc
c0010f38:	40                   	inc    eax
c0010f39:	50                   	push   eax
c0010f3a:	6a 00                	push   0x0
c0010f3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010f40:	e8 ab f5 fe ff       	call   c00004f0 <memset>
c0010f45:	89 34 24             	mov    DWORD PTR [esp],esi
c0010f48:	e8 33 f6 fe ff       	call   c0000580 <strlen>
c0010f4d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010f51:	8d 48 01             	lea    ecx,[eax+0x1]
c0010f54:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f59:	89 de                	mov    esi,ebx
c0010f5b:	e8 20 f6 fe ff       	call   c0000580 <strlen>
c0010f60:	83 c4 0c             	add    esp,0xc
c0010f63:	40                   	inc    eax
c0010f64:	50                   	push   eax
c0010f65:	6a 00                	push   0x0
c0010f67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010f6b:	e8 80 f5 fe ff       	call   c00004f0 <memset>
c0010f70:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f73:	e8 08 f6 fe ff       	call   c0000580 <strlen>
c0010f78:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010f7c:	8d 48 01             	lea    ecx,[eax+0x1]
c0010f7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f81:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010f84:	40                   	inc    eax
c0010f85:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010f88:	c1 e0 03             	shl    eax,0x3
c0010f8b:	5a                   	pop    edx
c0010f8c:	59                   	pop    ecx
c0010f8d:	50                   	push   eax
c0010f8e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010f91:	e8 29 6b ff ff       	call   c0007abf <realloc>
c0010f96:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010f99:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010f9d:	b9 08 00 00 00       	mov    ecx,0x8
c0010fa2:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010fa5:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010fa9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fab:	83 c4 2c             	add    esp,0x2c
c0010fae:	5b                   	pop    ebx
c0010faf:	5e                   	pop    esi
c0010fb0:	5f                   	pop    edi
c0010fb1:	5d                   	pop    ebp
c0010fb2:	c3                   	ret    
c0010fb3:	90                   	nop

c0010fb4 <EnvVarContainer::deleteEnv(char const*)>:
c0010fb4:	c3                   	ret    
c0010fb5:	90                   	nop

c0010fb6 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010fb6:	55                   	push   ebp
c0010fb7:	57                   	push   edi
c0010fb8:	56                   	push   esi
c0010fb9:	53                   	push   ebx
c0010fba:	81 ec 38 01 00 00    	sub    esp,0x138
c0010fc0:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010fc7:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010fce:	68 14 01 00 00       	push   0x114
c0010fd3:	e8 fb 6a ff ff       	call   c0007ad3 <malloc>
c0010fd8:	83 c4 0c             	add    esp,0xc
c0010fdb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010fde:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010fe5:	89 c3                	mov    ebx,eax
c0010fe7:	50                   	push   eax
c0010fe8:	e8 d3 aa ff ff       	call   c000bac0 <File::File(char const*, Process*)>
c0010fed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ff0:	e8 ad ad ff ff       	call   c000bda2 <File::exists()>
c0010ff5:	83 c4 10             	add    esp,0x10
c0010ff8:	84 c0                	test   al,al
c0010ffa:	75 31                	jne    c001102d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010ffc:	50                   	push   eax
c0010ffd:	50                   	push   eax
c0010ffe:	6a 12                	push   0x12
c0011000:	53                   	push   ebx
c0011001:	e8 d8 aa ff ff       	call   c000bade <File::open(FileOpenMode)>
c0011006:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011008:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001100b:	89 34 24             	mov    DWORD PTR [esp],esi
c001100e:	e8 6d f5 fe ff       	call   c0000580 <strlen>
c0011013:	5a                   	pop    edx
c0011014:	8d 54 24 20          	lea    edx,[esp+0x20]
c0011018:	52                   	push   edx
c0011019:	31 d2                	xor    edx,edx
c001101b:	56                   	push   esi
c001101c:	52                   	push   edx
c001101d:	50                   	push   eax
c001101e:	53                   	push   ebx
c001101f:	ff d7                	call   edi
c0011021:	83 c4 14             	add    esp,0x14
c0011024:	53                   	push   ebx
c0011025:	e8 12 ab ff ff       	call   c000bb3c <File::close()>
c001102a:	83 c4 10             	add    esp,0x10
c001102d:	56                   	push   esi
c001102e:	31 f6                	xor    esi,esi
c0011030:	68 00 01 00 00       	push   0x100
c0011035:	6a 00                	push   0x0
c0011037:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001103b:	50                   	push   eax
c001103c:	e8 af f4 fe ff       	call   c00004f0 <memset>
c0011041:	5f                   	pop    edi
c0011042:	58                   	pop    eax
c0011043:	6a 01                	push   0x1
c0011045:	53                   	push   ebx
c0011046:	e8 93 aa ff ff       	call   c000bade <File::open(FileOpenMode)>
c001104b:	83 c4 10             	add    esp,0x10
c001104e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011056:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001105e:	83 ec 0c             	sub    esp,0xc
c0011061:	8d 54 24 20          	lea    edx,[esp+0x20]
c0011065:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011067:	52                   	push   edx
c0011068:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c001106c:	51                   	push   ecx
c001106d:	6a 00                	push   0x0
c001106f:	6a 01                	push   0x1
c0011071:	53                   	push   ebx
c0011072:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011075:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c001107a:	83 c4 20             	add    esp,0x20
c001107d:	85 c0                	test   eax,eax
c001107f:	89 c1                	mov    ecx,eax
c0011081:	0f 84 36 01 00 00    	je     c00111bd <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0011087:	83 f8 0d             	cmp    eax,0xd
c001108a:	0f 84 22 01 00 00    	je     c00111b2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011090:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0011095:	0f 84 f0 00 00 00    	je     c001118b <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c001109b:	83 f8 0a             	cmp    eax,0xa
c001109e:	74 13                	je     c00110b3 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00110a0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00110a5:	74 0c                	je     c00110b3 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00110a7:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00110ad:	0f 8e f6 00 00 00    	jle    c00111a9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c00110b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00110b7:	83 ec 0c             	sub    esp,0xc
c00110ba:	8d 78 01             	lea    edi,[eax+0x1]
c00110bd:	57                   	push   edi
c00110be:	e8 10 6a ff ff       	call   c0007ad3 <malloc>
c00110c3:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00110c7:	8d 56 04             	lea    edx,[esi+0x4]
c00110ca:	89 14 24             	mov    DWORD PTR [esp],edx
c00110cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00110d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00110d5:	e8 f9 69 ff ff       	call   c0007ad3 <malloc>
c00110da:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00110de:	83 c4 0c             	add    esp,0xc
c00110e1:	57                   	push   edi
c00110e2:	6a 00                	push   0x0
c00110e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00110e8:	e8 03 f4 fe ff       	call   c00004f0 <memset>
c00110ed:	8d 74 24 30          	lea    esi,[esp+0x30]
c00110f1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00110f5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00110f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110fb:	83 c4 0c             	add    esp,0xc
c00110fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011102:	52                   	push   edx
c0011103:	6a 00                	push   0x0
c0011105:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011109:	e8 e2 f3 fe ff       	call   c00004f0 <memset>
c001110e:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011112:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0011116:	89 34 24             	mov    DWORD PTR [esp],esi
c0011119:	e8 62 f4 fe ff       	call   c0000580 <strlen>
c001111e:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0011122:	89 c1                	mov    ecx,eax
c0011124:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011126:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011129:	83 c4 10             	add    esp,0x10
c001112c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001112f:	40                   	inc    eax
c0011130:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011133:	85 d2                	test   edx,edx
c0011135:	75 0c                	jne    c0011143 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0011137:	83 ec 0c             	sub    esp,0xc
c001113a:	6a 08                	push   0x8
c001113c:	e8 92 69 ff ff       	call   c0007ad3 <malloc>
c0011141:	eb 0c                	jmp    c001114f <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0011143:	51                   	push   ecx
c0011144:	51                   	push   ecx
c0011145:	c1 e0 03             	shl    eax,0x3
c0011148:	50                   	push   eax
c0011149:	52                   	push   edx
c001114a:	e8 70 69 ff ff       	call   c0007abf <realloc>
c001114f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0011152:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011155:	83 c4 10             	add    esp,0x10
c0011158:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001115b:	8d 74 24 18          	lea    esi,[esp+0x18]
c001115f:	b9 08 00 00 00       	mov    ecx,0x8
c0011164:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0011168:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001116a:	50                   	push   eax
c001116b:	31 f6                	xor    esi,esi
c001116d:	68 00 01 00 00       	push   0x100
c0011172:	6a 00                	push   0x0
c0011174:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0011178:	50                   	push   eax
c0011179:	e8 72 f3 fe ff       	call   c00004f0 <memset>
c001117e:	83 c4 10             	add    esp,0x10
c0011181:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011189:	eb 27                	jmp    c00111b2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001118b:	83 f8 3d             	cmp    eax,0x3d
c001118e:	74 1e                	je     c00111ae <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0011190:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0011196:	7f 07                	jg     c001119f <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0011198:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c001119c:	46                   	inc    esi
c001119d:	eb 13                	jmp    c00111b2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001119f:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00111a7:	eb 09                	jmp    c00111b2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00111a9:	83 f8 3d             	cmp    eax,0x3d
c00111ac:	75 ea                	jne    c0011198 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c00111ae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00111b2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00111b7:	0f 85 99 fe ff ff    	jne    c0011056 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00111bd:	83 ec 0c             	sub    esp,0xc
c00111c0:	53                   	push   ebx
c00111c1:	e8 76 a9 ff ff       	call   c000bb3c <File::close()>
c00111c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00111ce:	81 c4 3c 01 00 00    	add    esp,0x13c
c00111d4:	5b                   	pop    ebx
c00111d5:	5e                   	pop    esi
c00111d6:	5f                   	pop    edi
c00111d7:	5d                   	pop    ebp
c00111d8:	c3                   	ret    
c00111d9:	90                   	nop

c00111da <EnvVarContainer::__loadSystem()>:
c00111da:	83 ec 10             	sub    esp,0x10
c00111dd:	68 60 3b 02 c0       	push   0xc0023b60
c00111e2:	68 50 22 02 c0       	push   0xc0022250
c00111e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111eb:	e8 c6 fd ff ff       	call   c0010fb6 <EnvVarContainer::loadFrom(char const*, char const*)>
c00111f0:	83 c4 1c             	add    esp,0x1c
c00111f3:	c3                   	ret    

c00111f4 <EnvVarContainer::__loadUser()>:
c00111f4:	c3                   	ret    
c00111f5:	90                   	nop

c00111f6 <EnvVarContainer::EnvVarContainer(Process*)>:
c00111f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011200:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011204:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011208:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001120b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001120f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011216:	90                   	nop
c0011217:	c3                   	ret    

c0011218 <EnvVarContainer::~EnvVarContainer()>:
c0011218:	83 ec 0c             	sub    esp,0xc
c001121b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001121f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011222:	85 c0                	test   eax,eax
c0011224:	74 1d                	je     c0011243 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001122a:	8b 00                	mov    eax,DWORD PTR [eax]
c001122c:	85 c0                	test   eax,eax
c001122e:	74 13                	je     c0011243 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011234:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011237:	83 ec 0c             	sub    esp,0xc
c001123a:	50                   	push   eax
c001123b:	e8 a3 68 ff ff       	call   c0007ae3 <free>
c0011240:	83 c4 10             	add    esp,0x10
c0011243:	90                   	nop
c0011244:	83 c4 0c             	add    esp,0xc
c0011247:	c3                   	ret    

c0011248 <KeGetEnv(Process*, char const*)>:
c0011248:	53                   	push   ebx
c0011249:	83 ec 08             	sub    esp,0x8
c001124c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011250:	39 05 f0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6f0,eax
c0011256:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001125a:	74 04                	je     c0011260 <KeGetEnv(Process*, char const*)+0x18>
c001125c:	85 c0                	test   eax,eax
c001125e:	75 0b                	jne    c001126b <KeGetEnv(Process*, char const*)+0x23>
c0011260:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c0011265:	85 c0                	test   eax,eax
c0011267:	75 19                	jne    c0011282 <KeGetEnv(Process*, char const*)+0x3a>
c0011269:	eb 27                	jmp    c0011292 <KeGetEnv(Process*, char const*)+0x4a>
c001126b:	52                   	push   edx
c001126c:	52                   	push   edx
c001126d:	53                   	push   ebx
c001126e:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0011274:	e8 3b fc ff ff       	call   c0010eb4 <EnvVarContainer::getEnv(char const*)>
c0011279:	83 c4 10             	add    esp,0x10
c001127c:	85 c0                	test   eax,eax
c001127e:	75 28                	jne    c00112a8 <KeGetEnv(Process*, char const*)+0x60>
c0011280:	eb de                	jmp    c0011260 <KeGetEnv(Process*, char const*)+0x18>
c0011282:	52                   	push   edx
c0011283:	52                   	push   edx
c0011284:	53                   	push   ebx
c0011285:	50                   	push   eax
c0011286:	e8 29 fc ff ff       	call   c0010eb4 <EnvVarContainer::getEnv(char const*)>
c001128b:	83 c4 10             	add    esp,0x10
c001128e:	85 c0                	test   eax,eax
c0011290:	75 16                	jne    c00112a8 <KeGetEnv(Process*, char const*)+0x60>
c0011292:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011296:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c001129b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001129f:	83 c4 08             	add    esp,0x8
c00112a2:	5b                   	pop    ebx
c00112a3:	e9 0c fc ff ff       	jmp    c0010eb4 <EnvVarContainer::getEnv(char const*)>
c00112a8:	83 c4 08             	add    esp,0x8
c00112ab:	5b                   	pop    ebx
c00112ac:	c3                   	ret    

c00112ad <KeSetEnvSystem(char const*, char const*)>:
c00112ad:	83 ec 10             	sub    esp,0x10
c00112b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00112b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00112b8:	ff 35 84 be 02 c0    	push   DWORD PTR ds:0xc002be84
c00112be:	e8 2f fc ff ff       	call   c0010ef2 <EnvVarContainer::setEnv(char const*, char const*)>
c00112c3:	83 c4 1c             	add    esp,0x1c
c00112c6:	c3                   	ret    

c00112c7 <KeSetEnvUser(char const*, char const*)>:
c00112c7:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c00112cc:	85 c0                	test   eax,eax
c00112ce:	74 15                	je     c00112e5 <KeSetEnvUser(char const*, char const*)+0x1e>
c00112d0:	83 ec 10             	sub    esp,0x10
c00112d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00112d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00112db:	50                   	push   eax
c00112dc:	e8 11 fc ff ff       	call   c0010ef2 <EnvVarContainer::setEnv(char const*, char const*)>
c00112e1:	83 c4 1c             	add    esp,0x1c
c00112e4:	c3                   	ret    
c00112e5:	c3                   	ret    

c00112e6 <KeSetEnvProcess(Process*, char const*, char const*)>:
c00112e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112ea:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00112f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00112f4:	e9 f9 fb ff ff       	jmp    c0010ef2 <EnvVarContainer::setEnv(char const*, char const*)>

c00112f9 <KeDeleteEnvSystem(char const*)>:
c00112f9:	c3                   	ret    

c00112fa <KeDeleteEnvUser(char const*)>:
c00112fa:	c3                   	ret    

c00112fb <KeDeleteEnvProcess(Process*, char const*)>:
c00112fb:	c3                   	ret    

c00112fc <KeNewProcessEnv(Process*)>:
c00112fc:	83 ec 28             	sub    esp,0x28
c00112ff:	6a 0c                	push   0xc
c0011301:	e8 cd 67 ff ff       	call   c0007ad3 <malloc>
c0011306:	5a                   	pop    edx
c0011307:	59                   	pop    ecx
c0011308:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001130c:	50                   	push   eax
c001130d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011311:	e8 e0 fe ff ff       	call   c00111f6 <EnvVarContainer::EnvVarContainer(Process*)>
c0011316:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001131a:	83 c4 2c             	add    esp,0x2c
c001131d:	c3                   	ret    

c001131e <KeCopyProcessEnv(Process*, Process*)>:
c001131e:	57                   	push   edi
c001131f:	56                   	push   esi
c0011320:	53                   	push   ebx
c0011321:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011325:	83 ec 0c             	sub    esp,0xc
c0011328:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001132e:	6a 0c                	push   0xc
c0011330:	e8 9e 67 ff ff       	call   c0007ad3 <malloc>
c0011335:	89 c3                	mov    ebx,eax
c0011337:	58                   	pop    eax
c0011338:	5a                   	pop    edx
c0011339:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001133d:	53                   	push   ebx
c001133e:	e8 b3 fe ff ff       	call   c00111f6 <EnvVarContainer::EnvVarContainer(Process*)>
c0011343:	8b 07                	mov    eax,DWORD PTR [edi]
c0011345:	89 03                	mov    DWORD PTR [ebx],eax
c0011347:	c1 e0 03             	shl    eax,0x3
c001134a:	89 04 24             	mov    DWORD PTR [esp],eax
c001134d:	e8 81 67 ff ff       	call   c0007ad3 <malloc>
c0011352:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0011355:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0011357:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001135a:	89 c7                	mov    edi,eax
c001135c:	c1 e1 03             	shl    ecx,0x3
c001135f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011361:	83 c4 10             	add    esp,0x10
c0011364:	89 d8                	mov    eax,ebx
c0011366:	5b                   	pop    ebx
c0011367:	5e                   	pop    esi
c0011368:	5f                   	pop    edi
c0011369:	c3                   	ret    

c001136a <KeLoadSystemEnv()>:
c001136a:	53                   	push   ebx
c001136b:	83 ec 14             	sub    esp,0x14
c001136e:	6a 0c                	push   0xc
c0011370:	e8 5e 67 ff ff       	call   c0007ad3 <malloc>
c0011375:	89 c3                	mov    ebx,eax
c0011377:	58                   	pop    eax
c0011378:	5a                   	pop    edx
c0011379:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001137f:	53                   	push   ebx
c0011380:	e8 71 fe ff ff       	call   c00111f6 <EnvVarContainer::EnvVarContainer(Process*)>
c0011385:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011388:	89 1d 84 be 02 c0    	mov    DWORD PTR ds:0xc002be84,ebx
c001138e:	e8 47 fe ff ff       	call   c00111da <EnvVarContainer::__loadSystem()>
c0011393:	83 c4 18             	add    esp,0x18
c0011396:	5b                   	pop    ebx
c0011397:	c3                   	ret    

c0011398 <KeLoadUserEnv()>:
c0011398:	53                   	push   ebx
c0011399:	83 ec 14             	sub    esp,0x14
c001139c:	6a 0c                	push   0xc
c001139e:	e8 30 67 ff ff       	call   c0007ad3 <malloc>
c00113a3:	89 c3                	mov    ebx,eax
c00113a5:	58                   	pop    eax
c00113a6:	5a                   	pop    edx
c00113a7:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00113ad:	53                   	push   ebx
c00113ae:	e8 43 fe ff ff       	call   c00111f6 <EnvVarContainer::EnvVarContainer(Process*)>
c00113b3:	89 1d 80 be 02 c0    	mov    DWORD PTR ds:0xc002be80,ebx
c00113b9:	83 c4 18             	add    esp,0x18
c00113bc:	5b                   	pop    ebx
c00113bd:	c3                   	ret    

c00113be <KeFlushEnv()>:
c00113be:	c3                   	ret    

c00113bf <KeGetProcessTotalEnvCount(Process*)>:
c00113bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113c3:	8b 15 80 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be80
c00113c9:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00113cf:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c00113d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00113d6:	03 01                	add    eax,DWORD PTR [ecx]
c00113d8:	85 d2                	test   edx,edx
c00113da:	74 02                	je     c00113de <KeGetProcessTotalEnvCount(Process*)+0x1f>
c00113dc:	03 02                	add    eax,DWORD PTR [edx]
c00113de:	c3                   	ret    

c00113df <KeGetProcessEnvPair(Process*, int)>:
c00113df:	57                   	push   edi
c00113e0:	56                   	push   esi
c00113e1:	8b 35 80 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be80
c00113e7:	53                   	push   ebx
c00113e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00113ec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00113f0:	85 f6                	test   esi,esi
c00113f2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00113f6:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00113fc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00113fe:	75 16                	jne    c0011416 <KeGetProcessEnvPair(Process*, int)+0x37>
c0011400:	39 c2                	cmp    edx,eax
c0011402:	7c 16                	jl     c001141a <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011404:	8b 0d 84 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be84
c001140a:	8b 31                	mov    esi,DWORD PTR [ecx]
c001140c:	01 c6                	add    esi,eax
c001140e:	39 d6                	cmp    esi,edx
c0011410:	7e 3c                	jle    c001144e <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011412:	29 c2                	sub    edx,eax
c0011414:	eb 04                	jmp    c001141a <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011416:	39 c2                	cmp    edx,eax
c0011418:	7d 05                	jge    c001141f <KeGetProcessEnvPair(Process*, int)+0x40>
c001141a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001141d:	eb 20                	jmp    c001143f <KeGetProcessEnvPair(Process*, int)+0x60>
c001141f:	8b 3e                	mov    edi,DWORD PTR [esi]
c0011421:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0011424:	39 d1                	cmp    ecx,edx
c0011426:	7e 04                	jle    c001142c <KeGetProcessEnvPair(Process*, int)+0x4d>
c0011428:	29 c2                	sub    edx,eax
c001142a:	eb 10                	jmp    c001143c <KeGetProcessEnvPair(Process*, int)+0x5d>
c001142c:	8b 35 84 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be84
c0011432:	03 0e                	add    ecx,DWORD PTR [esi]
c0011434:	39 d1                	cmp    ecx,edx
c0011436:	7e 16                	jle    c001144e <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011438:	29 c2                	sub    edx,eax
c001143a:	29 fa                	sub    edx,edi
c001143c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001143f:	8d 14 d0             	lea    edx,[eax+edx*8]
c0011442:	8b 02                	mov    eax,DWORD PTR [edx]
c0011444:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011447:	89 03                	mov    DWORD PTR [ebx],eax
c0011449:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001144c:	eb 1d                	jmp    c001146b <KeGetProcessEnvPair(Process*, int)+0x8c>
c001144e:	83 ec 0c             	sub    esp,0xc
c0011451:	68 72 22 02 c0       	push   0xc0022272
c0011456:	e8 ac 00 00 00       	call   c0011507 <KePanic(char const*)>
c001145b:	83 c4 10             	add    esp,0x10
c001145e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011464:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001146b:	89 d8                	mov    eax,ebx
c001146d:	5b                   	pop    ebx
c001146e:	5e                   	pop    esi
c001146f:	5f                   	pop    edi
c0011470:	c2 04 00             	ret    0x4

c0011473 <CPU::current()>:
c0011473:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011478:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001147e:	c3                   	ret    

c001147f <operator new(unsigned long)>:
c001147f:	e9 4f 66 ff ff       	jmp    c0007ad3 <malloc>

c0011484 <operator delete(void*)>:
c0011484:	e9 6a 66 ff ff       	jmp    c0007af3 <rfree>

c0011489 <disableIRQs()>:
c0011489:	fa                   	cli    
c001148a:	c3                   	ret    

c001148b <enableIRQs()>:
c001148b:	fb                   	sti    
c001148c:	c3                   	ret    

c001148d <lockScheduler()>:
c001148d:	fa                   	cli    
c001148e:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0011494:	c3                   	ret    

c0011495 <unlockScheduler()>:
c0011495:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001149a:	48                   	dec    eax
c001149b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00114a0:	75 01                	jne    c00114a3 <unlockScheduler()+0xe>
c00114a2:	fb                   	sti    
c00114a3:	c3                   	ret    

c00114a4 <lockStuff()>:
c00114a4:	fa                   	cli    
c00114a5:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00114ab:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c00114b1:	c3                   	ret    

c00114b2 <unlockStuff()>:
c00114b2:	83 ec 0c             	sub    esp,0xc
c00114b5:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00114ba:	48                   	dec    eax
c00114bb:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00114c0:	75 18                	jne    c00114da <unlockStuff()+0x28>
c00114c2:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c00114c9:	74 0f                	je     c00114da <unlockStuff()+0x28>
c00114cb:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00114d5:	e8 f6 4a 00 00       	call   c0015fd0 <schedule()>
c00114da:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00114df:	48                   	dec    eax
c00114e0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00114e5:	75 01                	jne    c00114e8 <unlockStuff()+0x36>
c00114e7:	fb                   	sti    
c00114e8:	83 c4 0c             	add    esp,0xc
c00114eb:	c3                   	ret    

c00114ec <Virt::getAKernelVAS()>:
c00114ec:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c00114f1:	c3                   	ret    

c00114f2 <__not_memcpy>:
c00114f2:	57                   	push   edi
c00114f3:	56                   	push   esi
c00114f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114f8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00114fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011500:	89 c7                	mov    edi,eax
c0011502:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011504:	5e                   	pop    esi
c0011505:	5f                   	pop    edi
c0011506:	c3                   	ret    

c0011507 <KePanic(char const*)>:
c0011507:	c6 05 88 be 02 c0 01 	mov    BYTE PTR ds:0xc002be88,0x1
c001150e:	e9 4d 6a 00 00       	jmp    c0017f60 <HalPanic(char const*)>

c0011513 <KePowerThread(void*)>:
c0011513:	83 ec 0c             	sub    esp,0xc
c0011516:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001151b:	48                   	dec    eax
c001151c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011521:	75 01                	jne    c0011524 <KePowerThread(void*)+0x11>
c0011523:	fb                   	sti    
c0011524:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c001152b:	83 ec 0c             	sub    esp,0xc
c001152e:	6a 0a                	push   0xa
c0011530:	e8 cb 4d 00 00       	call   c0016300 <sleep(unsigned int)>
c0011535:	83 c4 10             	add    esp,0x10
c0011538:	83 05 e4 be 02 c0 0a 	add    DWORD PTR ds:0xc002bee4,0xa
c001153f:	eb e3                	jmp    c0011524 <KePowerThread(void*)+0x11>

c0011541 <KeChangePowerSettings(PowerSettings)>:
c0011541:	57                   	push   edi
c0011542:	b9 09 00 00 00       	mov    ecx,0x9
c0011547:	56                   	push   esi
c0011548:	bf c0 be 02 c0       	mov    edi,0xc002bec0
c001154d:	fc                   	cld    
c001154e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011552:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011554:	5e                   	pop    esi
c0011555:	5f                   	pop    edi
c0011556:	c3                   	ret    

c0011557 <KeUserIOReceived()>:
c0011557:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c0011561:	c3                   	ret    

c0011562 <KeHandlePowerButton()>:
c0011562:	83 ec 0c             	sub    esp,0xc
c0011565:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c001156a:	83 f8 02             	cmp    eax,0x2
c001156d:	75 10                	jne    c001157f <KeHandlePowerButton()+0x1d>
c001156f:	83 ec 0c             	sub    esp,0xc
c0011572:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011578:	e8 cd 5b ff ff       	call   c000714a <Computer::shutdown()>
c001157d:	eb 11                	jmp    c0011590 <KeHandlePowerButton()+0x2e>
c001157f:	48                   	dec    eax
c0011580:	75 11                	jne    c0011593 <KeHandlePowerButton()+0x31>
c0011582:	83 ec 0c             	sub    esp,0xc
c0011585:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001158b:	e8 ea 5b ff ff       	call   c000717a <Computer::sleep()>
c0011590:	83 c4 10             	add    esp,0x10
c0011593:	83 c4 0c             	add    esp,0xc
c0011596:	c3                   	ret    

c0011597 <KeHandleSleepButton()>:
c0011597:	83 ec 0c             	sub    esp,0xc
c001159a:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c001159f:	83 f8 02             	cmp    eax,0x2
c00115a2:	75 10                	jne    c00115b4 <KeHandleSleepButton()+0x1d>
c00115a4:	83 ec 0c             	sub    esp,0xc
c00115a7:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00115ad:	e8 98 5b ff ff       	call   c000714a <Computer::shutdown()>
c00115b2:	eb 11                	jmp    c00115c5 <KeHandleSleepButton()+0x2e>
c00115b4:	48                   	dec    eax
c00115b5:	75 11                	jne    c00115c8 <KeHandleSleepButton()+0x31>
c00115b7:	83 ec 0c             	sub    esp,0xc
c00115ba:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00115c0:	e8 b5 5b ff ff       	call   c000717a <Computer::sleep()>
c00115c5:	83 c4 10             	add    esp,0x10
c00115c8:	83 c4 0c             	add    esp,0xc
c00115cb:	c3                   	ret    

c00115cc <KeSetupPowerManager()>:
c00115cc:	83 ec 0c             	sub    esp,0xc
c00115cf:	68 f0 00 00 00       	push   0xf0
c00115d4:	6a 00                	push   0x0
c00115d6:	68 13 15 01 c0       	push   0xc0011513
c00115db:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00115e1:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c00115eb:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c00115f2:	e8 8d 47 00 00       	call   c0015d84 <Process::createThread(void (*)(void*), void*, int)>
c00115f7:	c7 05 c0 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002bec0,0x2
c0011601:	c7 05 c4 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bec4,0x1
c001160b:	c7 05 c8 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002bec8,0x3
c0011615:	c7 05 cc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002becc,0x0
c001161f:	c7 05 d8 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed8,0x0
c0011629:	c7 05 d0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed0,0x0
c0011633:	c7 05 dc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bedc,0x0
c001163d:	c7 05 d4 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bed4,0x3c
c0011647:	c7 05 e0 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bee0,0x3c
c0011651:	83 c4 1c             	add    esp,0x1c
c0011654:	c3                   	ret    

c0011655 <KeRand()>:
c0011655:	69 05 e8 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002bee8,0x2875
c001165f:	69 0d ec be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002beec,0xa2e7b175
c0011669:	53                   	push   ebx
c001166a:	01 c1                	add    ecx,eax
c001166c:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011671:	f7 25 e8 be 02 c0    	mul    DWORD PTR ds:0xc002bee8
c0011677:	01 ca                	add    edx,ecx
c0011679:	05 ef 04 b5 00       	add    eax,0xb504ef
c001167e:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c0011683:	83 d2 00             	adc    edx,0x0
c0011686:	0f b7 da             	movzx  ebx,dx
c0011689:	89 1d ec be 02 c0    	mov    DWORD PTR ds:0xc002beec,ebx
c001168f:	0f ac d8 0e          	shrd   eax,ebx,0xe
c0011693:	5b                   	pop    ebx
c0011694:	c3                   	ret    

c0011695 <KeSeedRand(unsigned int)>:
c0011695:	53                   	push   ebx
c0011696:	83 ec 08             	sub    esp,0x8
c0011699:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001169d:	e8 dd 6b 00 00       	call   c001827f <HalGetRand()>
c00116a2:	c7 05 ec be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002beec,0x0
c00116ac:	31 d8                	xor    eax,ebx
c00116ae:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c00116b3:	e8 9d ff ff ff       	call   c0011655 <KeRand()>
c00116b8:	83 c4 08             	add    esp,0x8
c00116bb:	5b                   	pop    ebx
c00116bc:	eb 97                	jmp    c0011655 <KeRand()>

c00116be <KeInitRand()>:
c00116be:	83 ec 0c             	sub    esp,0xc
c00116c1:	e8 ae 69 00 00       	call   c0018074 <HalQueryPerformanceCounter()>
c00116c6:	0f 20 da             	mov    edx,cr3
c00116c9:	0f 22 da             	mov    cr3,edx
c00116cc:	0f 20 da             	mov    edx,cr3
c00116cf:	0f 22 da             	mov    cr3,edx
c00116d2:	0f 20 da             	mov    edx,cr3
c00116d5:	0f 22 da             	mov    cr3,edx
c00116d8:	0f 20 da             	mov    edx,cr3
c00116db:	0f 22 da             	mov    cr3,edx
c00116de:	83 ec 0c             	sub    esp,0xc
c00116e1:	35 03 8a 95 38       	xor    eax,0x38958a03
c00116e6:	50                   	push   eax
c00116e7:	e8 a9 ff ff ff       	call   c0011695 <KeSeedRand(unsigned int)>
c00116ec:	83 c4 1c             	add    esp,0x1c
c00116ef:	c3                   	ret    

c00116f0 <KeResolveCompatibilitySymbol(char*)>:
c00116f0:	83 ec 0c             	sub    esp,0xc
c00116f3:	83 ec 08             	sub    esp,0x8
c00116f6:	68 8c 22 02 c0       	push   0xc002228c
c00116fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116ff:	e8 7c f0 fe ff       	call   c0000780 <strcmp>
c0011704:	83 c4 10             	add    esp,0x10
c0011707:	85 c0                	test   eax,eax
c0011709:	0f 94 c0             	sete   al
c001170c:	0f b6 c0             	movzx  eax,al
c001170f:	85 c0                	test   eax,eax
c0011711:	74 0d                	je     c0011720 <KeResolveCompatibilitySymbol(char*)+0x30>
c0011713:	b8 b8 6e 02 c0       	mov    eax,0xc0026eb8
c0011718:	e9 8b 01 00 00       	jmp    c00118a8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001171d:	8d 76 00             	lea    esi,[esi+0x0]
c0011720:	83 ec 08             	sub    esp,0x8
c0011723:	68 95 22 02 c0       	push   0xc0022295
c0011728:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001172c:	e8 4f f0 fe ff       	call   c0000780 <strcmp>
c0011731:	83 c4 10             	add    esp,0x10
c0011734:	85 c0                	test   eax,eax
c0011736:	0f 94 c0             	sete   al
c0011739:	0f b6 c0             	movzx  eax,al
c001173c:	85 c0                	test   eax,eax
c001173e:	74 0c                	je     c001174c <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011740:	b8 90 f6 01 c0       	mov    eax,0xc001f690
c0011745:	e9 5e 01 00 00       	jmp    c00118a8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001174a:	66 90                	xchg   ax,ax
c001174c:	83 ec 08             	sub    esp,0x8
c001174f:	68 9f 22 02 c0       	push   0xc002229f
c0011754:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011758:	e8 23 f0 fe ff       	call   c0000780 <strcmp>
c001175d:	83 c4 10             	add    esp,0x10
c0011760:	85 c0                	test   eax,eax
c0011762:	0f 94 c0             	sete   al
c0011765:	0f b6 c0             	movzx  eax,al
c0011768:	85 c0                	test   eax,eax
c001176a:	74 0c                	je     c0011778 <KeResolveCompatibilitySymbol(char*)+0x88>
c001176c:	b8 c4 f3 01 c0       	mov    eax,0xc001f3c4
c0011771:	e9 32 01 00 00       	jmp    c00118a8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011776:	66 90                	xchg   ax,ax
c0011778:	83 ec 08             	sub    esp,0x8
c001177b:	68 a8 22 02 c0       	push   0xc00222a8
c0011780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011784:	e8 f7 ef fe ff       	call   c0000780 <strcmp>
c0011789:	83 c4 10             	add    esp,0x10
c001178c:	85 c0                	test   eax,eax
c001178e:	0f 94 c0             	sete   al
c0011791:	0f b6 c0             	movzx  eax,al
c0011794:	85 c0                	test   eax,eax
c0011796:	74 0c                	je     c00117a4 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0011798:	b8 07 15 01 c0       	mov    eax,0xc0011507
c001179d:	e9 06 01 00 00       	jmp    c00118a8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00117a2:	66 90                	xchg   ax,ax
c00117a4:	83 ec 08             	sub    esp,0x8
c00117a7:	68 bb 22 02 c0       	push   0xc00222bb
c00117ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117b0:	e8 cb ef fe ff       	call   c0000780 <strcmp>
c00117b5:	83 c4 10             	add    esp,0x10
c00117b8:	85 c0                	test   eax,eax
c00117ba:	0f 94 c0             	sete   al
c00117bd:	0f b6 c0             	movzx  eax,al
c00117c0:	85 c0                	test   eax,eax
c00117c2:	74 0c                	je     c00117d0 <KeResolveCompatibilitySymbol(char*)+0xe0>
c00117c4:	b8 09 0e 01 c0       	mov    eax,0xc0010e09
c00117c9:	e9 da 00 00 00       	jmp    c00118a8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00117ce:	66 90                	xchg   ax,ax
c00117d0:	83 ec 08             	sub    esp,0x8
c00117d3:	68 d8 22 02 c0       	push   0xc00222d8
c00117d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117dc:	e8 9f ef fe ff       	call   c0000780 <strcmp>
c00117e1:	83 c4 10             	add    esp,0x10
c00117e4:	85 c0                	test   eax,eax
c00117e6:	0f 94 c0             	sete   al
c00117e9:	0f b6 c0             	movzx  eax,al
c00117ec:	85 c0                	test   eax,eax
c00117ee:	74 0c                	je     c00117fc <KeResolveCompatibilitySymbol(char*)+0x10c>
c00117f0:	b8 90 f7 01 c0       	mov    eax,0xc001f790
c00117f5:	e9 ae 00 00 00       	jmp    c00118a8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00117fa:	66 90                	xchg   ax,ax
c00117fc:	83 ec 08             	sub    esp,0x8
c00117ff:	68 e2 22 02 c0       	push   0xc00222e2
c0011804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011808:	e8 73 ef fe ff       	call   c0000780 <strcmp>
c001180d:	83 c4 10             	add    esp,0x10
c0011810:	85 c0                	test   eax,eax
c0011812:	0f 94 c0             	sete   al
c0011815:	0f b6 c0             	movzx  eax,al
c0011818:	85 c0                	test   eax,eax
c001181a:	74 0c                	je     c0011828 <KeResolveCompatibilitySymbol(char*)+0x138>
c001181c:	b8 10 f5 01 c0       	mov    eax,0xc001f510
c0011821:	e9 82 00 00 00       	jmp    c00118a8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011826:	66 90                	xchg   ax,ax
c0011828:	83 ec 08             	sub    esp,0x8
c001182b:	68 eb 22 02 c0       	push   0xc00222eb
c0011830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011834:	e8 47 ef fe ff       	call   c0000780 <strcmp>
c0011839:	83 c4 10             	add    esp,0x10
c001183c:	85 c0                	test   eax,eax
c001183e:	0f 94 c0             	sete   al
c0011841:	0f b6 c0             	movzx  eax,al
c0011844:	85 c0                	test   eax,eax
c0011846:	74 08                	je     c0011850 <KeResolveCompatibilitySymbol(char*)+0x160>
c0011848:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c001184d:	eb 59                	jmp    c00118a8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001184f:	90                   	nop
c0011850:	83 ec 08             	sub    esp,0x8
c0011853:	68 03 23 02 c0       	push   0xc0022303
c0011858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001185c:	e8 1f ef fe ff       	call   c0000780 <strcmp>
c0011861:	83 c4 10             	add    esp,0x10
c0011864:	85 c0                	test   eax,eax
c0011866:	0f 94 c0             	sete   al
c0011869:	0f b6 c0             	movzx  eax,al
c001186c:	85 c0                	test   eax,eax
c001186e:	74 08                	je     c0011878 <KeResolveCompatibilitySymbol(char*)+0x188>
c0011870:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011875:	eb 31                	jmp    c00118a8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011877:	90                   	nop
c0011878:	83 ec 08             	sub    esp,0x8
c001187b:	68 10 23 02 c0       	push   0xc0022310
c0011880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011884:	e8 f7 ee fe ff       	call   c0000780 <strcmp>
c0011889:	83 c4 10             	add    esp,0x10
c001188c:	85 c0                	test   eax,eax
c001188e:	0f 94 c0             	sete   al
c0011891:	0f b6 c0             	movzx  eax,al
c0011894:	85 c0                	test   eax,eax
c0011896:	74 08                	je     c00118a0 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0011898:	b8 bd 6e 02 c0       	mov    eax,0xc0026ebd
c001189d:	eb 09                	jmp    c00118a8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001189f:	90                   	nop
c00118a0:	b8 00 00 00 00       	mov    eax,0x0
c00118a5:	8d 76 00             	lea    esi,[esi+0x0]
c00118a8:	83 c4 0c             	add    esp,0xc
c00118ab:	c3                   	ret    

c00118ac <KiSigKill(int)>:
c00118ac:	83 ec 0c             	sub    esp,0xc
c00118af:	6a 00                	push   0x0
c00118b1:	6a 00                	push   0x0
c00118b3:	6a ff                	push   0xffffffff
c00118b5:	6a 01                	push   0x1
c00118b7:	e8 96 37 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00118bc:	83 c4 1c             	add    esp,0x1c
c00118bf:	c3                   	ret    

c00118c0 <KiDefaultSignalHandlerIgnore(int)>:
c00118c0:	c3                   	ret    

c00118c1 <KiDefaultSignalHandlerPause(int)>:
c00118c1:	57                   	push   edi
c00118c2:	b9 07 00 00 00       	mov    ecx,0x7
c00118c7:	56                   	push   esi
c00118c8:	be 59 23 02 c0       	mov    esi,0xc0022359
c00118cd:	83 ec 24             	sub    esp,0x24
c00118d0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00118d4:	fc                   	cld    
c00118d5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00118d7:	8d 44 24 04          	lea    eax,[esp+0x4]
c00118db:	50                   	push   eax
c00118dc:	6a 00                	push   0x0
c00118de:	6a 00                	push   0x0
c00118e0:	6a 27                	push   0x27
c00118e2:	e8 6b 37 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00118e7:	83 c4 34             	add    esp,0x34
c00118ea:	5e                   	pop    esi
c00118eb:	5f                   	pop    edi
c00118ec:	c3                   	ret    

c00118ed <KiDefaultSignalHandlerResume(int)>:
c00118ed:	57                   	push   edi
c00118ee:	b9 1d 00 00 00       	mov    ecx,0x1d
c00118f3:	56                   	push   esi
c00118f4:	be 75 23 02 c0       	mov    esi,0xc0022375
c00118f9:	83 ec 24             	sub    esp,0x24
c00118fc:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011900:	fc                   	cld    
c0011901:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011903:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011907:	50                   	push   eax
c0011908:	6a 00                	push   0x0
c001190a:	6a 00                	push   0x0
c001190c:	6a 27                	push   0x27
c001190e:	e8 3f 37 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011913:	83 c4 34             	add    esp,0x34
c0011916:	5e                   	pop    esi
c0011917:	5f                   	pop    edi
c0011918:	c3                   	ret    

c0011919 <KeDeinitSignals(SigHandlerBlock*)>:
c0011919:	e9 c5 61 ff ff       	jmp    c0007ae3 <free>

c001191e <KeInitSignals()>:
c001191e:	53                   	push   ebx
c001191f:	83 ec 14             	sub    esp,0x14
c0011922:	68 c8 00 00 00       	push   0xc8
c0011927:	e8 a7 61 ff ff       	call   c0007ad3 <malloc>
c001192c:	83 c4 0c             	add    esp,0xc
c001192f:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011939:	89 c3                	mov    ebx,eax
c001193b:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011945:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c001194b:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c001194f:	6a 20                	push   0x20
c0011951:	6a 00                	push   0x0
c0011953:	50                   	push   eax
c0011954:	e8 97 eb fe ff       	call   c00004f0 <memset>
c0011959:	83 c4 0c             	add    esp,0xc
c001195c:	6a 44                	push   0x44
c001195e:	6a 00                	push   0x0
c0011960:	53                   	push   ebx
c0011961:	e8 8a eb fe ff       	call   c00004f0 <memset>
c0011966:	83 c4 18             	add    esp,0x18
c0011969:	89 d8                	mov    eax,ebx
c001196b:	5b                   	pop    ebx
c001196c:	c3                   	ret    

c001196d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c001196d:	53                   	push   ebx
c001196e:	b8 01 00 00 00       	mov    eax,0x1
c0011973:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011977:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001197b:	83 f9 10             	cmp    ecx,0x10
c001197e:	7f 21                	jg     c00119a1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011984:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011987:	89 03                	mov    DWORD PTR [ebx],eax
c0011989:	b8 01 00 00 00       	mov    eax,0x1
c001198e:	d3 e0                	shl    eax,cl
c0011990:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011994:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011997:	31 c0                	xor    eax,eax
c0011999:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c00119a1:	5b                   	pop    ebx
c00119a2:	c3                   	ret    

c00119a3 <KeRaiseSignal(SigHandlerBlock*, int)>:
c00119a3:	55                   	push   ebp
c00119a4:	57                   	push   edi
c00119a5:	bf 08 00 00 00       	mov    edi,0x8
c00119aa:	56                   	push   esi
c00119ab:	53                   	push   ebx
c00119ac:	83 ec 18             	sub    esp,0x18
c00119af:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00119b3:	68 92 23 02 c0       	push   0xc0022392
c00119b8:	e8 4d 8f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00119bd:	83 c4 10             	add    esp,0x10
c00119c0:	31 c9                	xor    ecx,ecx
c00119c2:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00119c9:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00119cf:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00119d3:	99                   	cdq    
c00119d4:	f7 ff                	idiv   edi
c00119d6:	8d 42 24             	lea    eax,[edx+0x24]
c00119d9:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00119dd:	85 f6                	test   esi,esi
c00119df:	75 1a                	jne    c00119fb <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00119e1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00119e5:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00119e9:	50                   	push   eax
c00119ea:	50                   	push   eax
c00119eb:	52                   	push   edx
c00119ec:	68 a3 23 02 c0       	push   0xc00223a3
c00119f1:	e8 14 8f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00119f6:	83 c4 10             	add    esp,0x10
c00119f9:	eb 1b                	jmp    c0011a16 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00119fb:	41                   	inc    ecx
c00119fc:	83 f9 08             	cmp    ecx,0x8
c00119ff:	75 ce                	jne    c00119cf <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011a01:	83 ec 0c             	sub    esp,0xc
c0011a04:	be 01 00 00 00       	mov    esi,0x1
c0011a09:	68 c4 23 02 c0       	push   0xc00223c4
c0011a0e:	e8 f7 8e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011a13:	83 c4 10             	add    esp,0x10
c0011a16:	83 c4 0c             	add    esp,0xc
c0011a19:	89 f0                	mov    eax,esi
c0011a1b:	5b                   	pop    ebx
c0011a1c:	5e                   	pop    esi
c0011a1d:	5f                   	pop    edi
c0011a1e:	5d                   	pop    ebp
c0011a1f:	c3                   	ret    

c0011a20 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011a20:	55                   	push   ebp
c0011a21:	57                   	push   edi
c0011a22:	56                   	push   esi
c0011a23:	53                   	push   ebx
c0011a24:	51                   	push   ecx
c0011a25:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011a29:	85 db                	test   ebx,ebx
c0011a2b:	0f 84 bc 00 00 00    	je     c0011aed <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011a31:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011a38:	0f 84 af 00 00 00    	je     c0011aed <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011a3e:	31 c9                	xor    ecx,ecx
c0011a40:	bf 08 00 00 00       	mov    edi,0x8
c0011a45:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011a4b:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011a4e:	99                   	cdq    
c0011a4f:	f7 ff                	idiv   edi
c0011a51:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011a58:	85 ed                	test   ebp,ebp
c0011a5a:	0f 84 9e 00 00 00    	je     c0011afe <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011a60:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011a66:	89 e9                	mov    ecx,ebp
c0011a68:	bf 01 00 00 00       	mov    edi,0x1
c0011a6d:	d3 e7                	shl    edi,cl
c0011a6f:	31 c9                	xor    ecx,ecx
c0011a71:	89 04 24             	mov    DWORD PTR [esp],eax
c0011a74:	b8 01 00 00 00       	mov    eax,0x1
c0011a79:	d3 e0                	shl    eax,cl
c0011a7b:	85 04 24             	test   DWORD PTR [esp],eax
c0011a7e:	74 06                	je     c0011a86 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011a80:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011a84:	75 67                	jne    c0011aed <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011a86:	41                   	inc    ecx
c0011a87:	83 f9 11             	cmp    ecx,0x11
c0011a8a:	75 e8                	jne    c0011a74 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011a8f:	46                   	inc    esi
c0011a90:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011a96:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011aa1:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011aa8:	09 f8                	or     eax,edi
c0011aaa:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011ab0:	31 c0                	xor    eax,eax
c0011ab2:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011aba:	74 09                	je     c0011ac5 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011abc:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011ac3:	eb 06                	jmp    c0011acb <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011ac5:	40                   	inc    eax
c0011ac6:	83 f8 08             	cmp    eax,0x8
c0011ac9:	75 e7                	jne    c0011ab2 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011acb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011acf:	83 fd 09             	cmp    ebp,0x9
c0011ad2:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011ad5:	89 2a                	mov    DWORD PTR [edx],ebp
c0011ad7:	75 07                	jne    c0011ae0 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011ad9:	b8 ac 18 01 c0       	mov    eax,0xc00118ac
c0011ade:	eb 31                	jmp    c0011b11 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011ae0:	83 f8 01             	cmp    eax,0x1
c0011ae3:	75 0c                	jne    c0011af1 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011ae5:	f7 d7                	not    edi
c0011ae7:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011aed:	31 c0                	xor    eax,eax
c0011aef:	eb 20                	jmp    c0011b11 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011af1:	85 c0                	test   eax,eax
c0011af3:	75 1c                	jne    c0011b11 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011af5:	8b 04 ad c0 3b 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdc440]
c0011afc:	eb 13                	jmp    c0011b11 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011afe:	41                   	inc    ecx
c0011aff:	46                   	inc    esi
c0011b00:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011b06:	83 f9 08             	cmp    ecx,0x8
c0011b09:	0f 85 36 ff ff ff    	jne    c0011a45 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011b0f:	eb dc                	jmp    c0011aed <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b11:	5a                   	pop    edx
c0011b12:	5b                   	pop    ebx
c0011b13:	5e                   	pop    esi
c0011b14:	5f                   	pop    edi
c0011b15:	5d                   	pop    ebp
c0011b16:	c3                   	ret    

c0011b17 <KiCheckSignalZ>:
c0011b17:	83 ec 10             	sub    esp,0x10
c0011b1a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011b1e:	50                   	push   eax
c0011b1f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b24:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b27:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011b2d:	e8 ee fe ff ff       	call   c0011a20 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011b32:	5a                   	pop    edx
c0011b33:	31 d2                	xor    edx,edx
c0011b35:	59                   	pop    ecx
c0011b36:	85 c0                	test   eax,eax
c0011b38:	74 19                	je     c0011b53 <KiCheckSignalZ+0x3c>
c0011b3a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011b40:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011b43:	89 02                	mov    DWORD PTR [edx],eax
c0011b45:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011b4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b50:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011b53:	89 d0                	mov    eax,edx
c0011b55:	83 c4 10             	add    esp,0x10
c0011b58:	c3                   	ret    

c0011b59 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011b59:	56                   	push   esi
c0011b5a:	53                   	push   ebx
c0011b5b:	bb 01 00 00 00       	mov    ebx,0x1
c0011b60:	52                   	push   edx
c0011b61:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011b65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011b69:	d3 e3                	shl    ebx,cl
c0011b6b:	83 f9 10             	cmp    ecx,0x10
c0011b6e:	7f 08                	jg     c0011b78 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011b70:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011b76:	75 10                	jne    c0011b88 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011b78:	83 ec 0c             	sub    esp,0xc
c0011b7b:	68 d5 23 02 c0       	push   0xc00223d5
c0011b80:	e8 82 f9 ff ff       	call   c0011507 <KePanic(char const*)>
c0011b85:	83 c4 10             	add    esp,0x10
c0011b88:	f7 d3                	not    ebx
c0011b8a:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011b90:	58                   	pop    eax
c0011b91:	5b                   	pop    ebx
c0011b92:	5e                   	pop    esi
c0011b93:	c3                   	ret    

c0011b94 <KiFinishSignalZ>:
c0011b94:	53                   	push   ebx
c0011b95:	83 ec 10             	sub    esp,0x10
c0011b98:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011b9c:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011b9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ba4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ba7:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011bad:	e8 a7 ff ff ff       	call   c0011b59 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011bb2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011bb8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011bbf:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011bc6:	83 c4 18             	add    esp,0x18
c0011bc9:	5b                   	pop    ebx
c0011bca:	c3                   	ret    

c0011bcb <SysSeekDir(regs*)>:
c0011bcb:	31 c0                	xor    eax,eax
c0011bcd:	31 d2                	xor    edx,edx
c0011bcf:	c3                   	ret    

c0011bd0 <SysTellDir(regs*)>:
c0011bd0:	31 c0                	xor    eax,eax
c0011bd2:	31 d2                	xor    edx,edx
c0011bd4:	c3                   	ret    

c0011bd5 <SysVerify(regs*)>:
c0011bd5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bd9:	31 d2                	xor    edx,edx
c0011bdb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011bde:	c3                   	ret    

c0011bdf <SysGetArgc(regs*)>:
c0011bdf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011be4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011be7:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011bed:	89 c2                	mov    edx,eax
c0011bef:	c1 fa 1f             	sar    edx,0x1f
c0011bf2:	c3                   	ret    

c0011bf3 <SysTTYName(regs*)>:
c0011bf3:	b8 01 00 00 00       	mov    eax,0x1
c0011bf8:	31 d2                	xor    edx,edx
c0011bfa:	c3                   	ret    

c0011bfb <SysFormatDisk(regs*)>:
c0011bfb:	56                   	push   esi
c0011bfc:	53                   	push   ebx
c0011bfd:	83 ec 04             	sub    esp,0x4
c0011c00:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011c04:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c0011c0a:	eb 2a                	jmp    c0011c36 <SysFormatDisk(regs*)+0x3b>
c0011c0c:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011c0f:	83 ec 0c             	sub    esp,0xc
c0011c12:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011c15:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011c17:	51                   	push   ecx
c0011c18:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011c1b:	51                   	push   ecx
c0011c1c:	50                   	push   eax
c0011c1d:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0011c24:	50                   	push   eax
c0011c25:	53                   	push   ebx
c0011c26:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011c29:	83 c4 20             	add    esp,0x20
c0011c2c:	83 f8 08             	cmp    eax,0x8
c0011c2f:	89 c1                	mov    ecx,eax
c0011c31:	75 14                	jne    c0011c47 <SysFormatDisk(regs*)+0x4c>
c0011c33:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011c36:	85 db                	test   ebx,ebx
c0011c38:	75 d2                	jne    c0011c0c <SysFormatDisk(regs*)+0x11>
c0011c3a:	b8 03 00 00 00       	mov    eax,0x3
c0011c3f:	31 d2                	xor    edx,edx
c0011c41:	83 c4 04             	add    esp,0x4
c0011c44:	5b                   	pop    ebx
c0011c45:	5e                   	pop    esi
c0011c46:	c3                   	ret    
c0011c47:	85 c0                	test   eax,eax
c0011c49:	74 13                	je     c0011c5e <SysFormatDisk(regs*)+0x63>
c0011c4b:	31 d2                	xor    edx,edx
c0011c4d:	83 f9 09             	cmp    ecx,0x9
c0011c50:	b8 01 00 00 00       	mov    eax,0x1
c0011c55:	74 ea                	je     c0011c41 <SysFormatDisk(regs*)+0x46>
c0011c57:	b8 02 00 00 00       	mov    eax,0x2
c0011c5c:	eb e1                	jmp    c0011c3f <SysFormatDisk(regs*)+0x44>
c0011c5e:	31 c0                	xor    eax,eax
c0011c60:	eb dd                	jmp    c0011c3f <SysFormatDisk(regs*)+0x44>

c0011c62 <SysSetDiskVolumeLabel(regs*)>:
c0011c62:	56                   	push   esi
c0011c63:	53                   	push   ebx
c0011c64:	83 ec 04             	sub    esp,0x4
c0011c67:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011c6b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011c6e:	83 f8 19             	cmp    eax,0x19
c0011c71:	77 33                	ja     c0011ca6 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011c73:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0011c7a:	85 c9                	test   ecx,ecx
c0011c7c:	74 28                	je     c0011ca6 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011c7e:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011c81:	85 db                	test   ebx,ebx
c0011c83:	74 21                	je     c0011ca6 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011c85:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011c8b:	85 d2                	test   edx,edx
c0011c8d:	74 17                	je     c0011ca6 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011c8f:	8b 32                	mov    esi,DWORD PTR [edx]
c0011c91:	53                   	push   ebx
c0011c92:	50                   	push   eax
c0011c93:	51                   	push   ecx
c0011c94:	52                   	push   edx
c0011c95:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011c98:	83 c4 10             	add    esp,0x10
c0011c9b:	83 c4 04             	add    esp,0x4
c0011c9e:	5b                   	pop    ebx
c0011c9f:	5e                   	pop    esi
c0011ca0:	89 c2                	mov    edx,eax
c0011ca2:	c1 fa 1f             	sar    edx,0x1f
c0011ca5:	c3                   	ret    
c0011ca6:	83 c4 04             	add    esp,0x4
c0011ca9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011cae:	5b                   	pop    ebx
c0011caf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011cb4:	5e                   	pop    esi
c0011cb5:	c3                   	ret    

c0011cb6 <SysGetDiskVolumeLabel(regs*)>:
c0011cb6:	57                   	push   edi
c0011cb7:	56                   	push   esi
c0011cb8:	53                   	push   ebx
c0011cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011cbd:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011cc0:	83 fa 19             	cmp    edx,0x19
c0011cc3:	77 3c                	ja     c0011d01 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011cc5:	8b 0c 95 80 b8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4780]
c0011ccc:	85 c9                	test   ecx,ecx
c0011cce:	74 31                	je     c0011d01 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011cd0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011cd3:	85 db                	test   ebx,ebx
c0011cd5:	74 2a                	je     c0011d01 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011cd7:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011cda:	85 f6                	test   esi,esi
c0011cdc:	74 23                	je     c0011d01 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011cde:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011ce4:	85 c0                	test   eax,eax
c0011ce6:	74 19                	je     c0011d01 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ce8:	83 ec 0c             	sub    esp,0xc
c0011ceb:	8b 38                	mov    edi,DWORD PTR [eax]
c0011ced:	56                   	push   esi
c0011cee:	53                   	push   ebx
c0011cef:	52                   	push   edx
c0011cf0:	51                   	push   ecx
c0011cf1:	50                   	push   eax
c0011cf2:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011cf5:	83 c4 20             	add    esp,0x20
c0011cf8:	5b                   	pop    ebx
c0011cf9:	5e                   	pop    esi
c0011cfa:	89 c2                	mov    edx,eax
c0011cfc:	c1 fa 1f             	sar    edx,0x1f
c0011cff:	5f                   	pop    edi
c0011d00:	c3                   	ret    
c0011d01:	5b                   	pop    ebx
c0011d02:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011d07:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d0c:	5e                   	pop    esi
c0011d0d:	5f                   	pop    edi
c0011d0e:	c3                   	ret    

c0011d0f <SysShutdown(regs*)>:
c0011d0f:	57                   	push   edi
c0011d10:	56                   	push   esi
c0011d11:	83 ec 04             	sub    esp,0x4
c0011d14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d18:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011d1b:	85 c0                	test   eax,eax
c0011d1d:	74 1e                	je     c0011d3d <SysShutdown(regs*)+0x2e>
c0011d1f:	83 f8 01             	cmp    eax,0x1
c0011d22:	74 5f                	je     c0011d83 <SysShutdown(regs*)+0x74>
c0011d24:	83 f8 02             	cmp    eax,0x2
c0011d27:	be ff ff ff ff       	mov    esi,0xffffffff
c0011d2c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011d31:	74 32                	je     c0011d65 <SysShutdown(regs*)+0x56>
c0011d33:	83 c4 04             	add    esp,0x4
c0011d36:	89 f0                	mov    eax,esi
c0011d38:	5e                   	pop    esi
c0011d39:	89 fa                	mov    edx,edi
c0011d3b:	5f                   	pop    edi
c0011d3c:	c3                   	ret    
c0011d3d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011d42:	be ff ff ff ff       	mov    esi,0xffffffff
c0011d47:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011d4c:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d4e:	6a 00                	push   0x0
c0011d50:	6a 00                	push   0x0
c0011d52:	6a 00                	push   0x0
c0011d54:	50                   	push   eax
c0011d55:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011d58:	83 c4 10             	add    esp,0x10
c0011d5b:	89 f0                	mov    eax,esi
c0011d5d:	83 c4 04             	add    esp,0x4
c0011d60:	89 fa                	mov    edx,edi
c0011d62:	5e                   	pop    esi
c0011d63:	5f                   	pop    edi
c0011d64:	c3                   	ret    
c0011d65:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011d6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d6c:	6a 00                	push   0x0
c0011d6e:	6a 00                	push   0x0
c0011d70:	6a 01                	push   0x1
c0011d72:	50                   	push   eax
c0011d73:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011d76:	83 c4 10             	add    esp,0x10
c0011d79:	89 f0                	mov    eax,esi
c0011d7b:	83 c4 04             	add    esp,0x4
c0011d7e:	89 fa                	mov    edx,edi
c0011d80:	5e                   	pop    esi
c0011d81:	5f                   	pop    edi
c0011d82:	c3                   	ret    
c0011d83:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011d88:	85 c0                	test   eax,eax
c0011d8a:	74 02                	je     c0011d8e <SysShutdown(regs*)+0x7f>
c0011d8c:	ff d0                	call   eax
c0011d8e:	31 f6                	xor    esi,esi
c0011d90:	83 c4 04             	add    esp,0x4
c0011d93:	89 f0                	mov    eax,esi
c0011d95:	31 ff                	xor    edi,edi
c0011d97:	5e                   	pop    esi
c0011d98:	89 fa                	mov    edx,edi
c0011d9a:	5f                   	pop    edi
c0011d9b:	c3                   	ret    

c0011d9c <SysRealpath(regs*)>:
c0011d9c:	53                   	push   ebx
c0011d9d:	83 ec 08             	sub    esp,0x8
c0011da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011da4:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011da7:	85 c9                	test   ecx,ecx
c0011da9:	74 36                	je     c0011de1 <SysRealpath(regs*)+0x45>
c0011dab:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011dae:	31 d2                	xor    edx,edx
c0011db0:	b8 01 00 00 00       	mov    eax,0x1
c0011db5:	85 db                	test   ebx,ebx
c0011db7:	75 05                	jne    c0011dbe <SysRealpath(regs*)+0x22>
c0011db9:	83 c4 08             	add    esp,0x8
c0011dbc:	5b                   	pop    ebx
c0011dbd:	c3                   	ret    
c0011dbe:	6a 00                	push   0x0
c0011dc0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011dc5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011dc8:	05 0c 01 00 00       	add    eax,0x10c
c0011dcd:	50                   	push   eax
c0011dce:	51                   	push   ecx
c0011dcf:	53                   	push   ebx
c0011dd0:	e8 ef 99 ff ff       	call   c000b7c4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011dd5:	83 c4 10             	add    esp,0x10
c0011dd8:	31 c0                	xor    eax,eax
c0011dda:	31 d2                	xor    edx,edx
c0011ddc:	83 c4 08             	add    esp,0x8
c0011ddf:	5b                   	pop    ebx
c0011de0:	c3                   	ret    
c0011de1:	b8 01 00 00 00       	mov    eax,0x1
c0011de6:	31 d2                	xor    edx,edx
c0011de8:	eb f2                	jmp    c0011ddc <SysRealpath(regs*)+0x40>

c0011dea <SysReadDir(regs*)>:
c0011dea:	53                   	push   ebx
c0011deb:	83 ec 18             	sub    esp,0x18
c0011dee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011df2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011df5:	83 f8 02             	cmp    eax,0x2
c0011df8:	76 4f                	jbe    c0011e49 <SysReadDir(regs*)+0x5f>
c0011dfa:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011e01:	77 52                	ja     c0011e55 <SysReadDir(regs*)+0x6b>
c0011e03:	83 ec 0c             	sub    esp,0xc
c0011e06:	50                   	push   eax
c0011e07:	e8 8f 76 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011e0c:	83 c4 10             	add    esp,0x10
c0011e0f:	85 c0                	test   eax,eax
c0011e11:	74 42                	je     c0011e55 <SysReadDir(regs*)+0x6b>
c0011e13:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e1b:	83 ec 0c             	sub    esp,0xc
c0011e1e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011e22:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e24:	51                   	push   ecx
c0011e25:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011e28:	51                   	push   ecx
c0011e29:	6a 00                	push   0x0
c0011e2b:	68 10 01 00 00       	push   0x110
c0011e30:	50                   	push   eax
c0011e31:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e34:	83 c4 20             	add    esp,0x20
c0011e37:	85 c0                	test   eax,eax
c0011e39:	89 c1                	mov    ecx,eax
c0011e3b:	74 27                	je     c0011e64 <SysReadDir(regs*)+0x7a>
c0011e3d:	31 d2                	xor    edx,edx
c0011e3f:	83 f9 07             	cmp    ecx,0x7
c0011e42:	b8 02 00 00 00       	mov    eax,0x2
c0011e47:	75 16                	jne    c0011e5f <SysReadDir(regs*)+0x75>
c0011e49:	b8 01 00 00 00       	mov    eax,0x1
c0011e4e:	31 d2                	xor    edx,edx
c0011e50:	83 c4 18             	add    esp,0x18
c0011e53:	5b                   	pop    ebx
c0011e54:	c3                   	ret    
c0011e55:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e5a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e5f:	83 c4 18             	add    esp,0x18
c0011e62:	5b                   	pop    ebx
c0011e63:	c3                   	ret    
c0011e64:	31 c0                	xor    eax,eax
c0011e66:	31 d2                	xor    edx,edx
c0011e68:	eb e6                	jmp    c0011e50 <SysReadDir(regs*)+0x66>

c0011e6a <SysIsATTY(regs*)>:
c0011e6a:	83 ec 0c             	sub    esp,0xc
c0011e6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e71:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011e74:	83 f8 02             	cmp    eax,0x2
c0011e77:	76 07                	jbe    c0011e80 <SysIsATTY(regs*)+0x16>
c0011e79:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011e7e:	75 26                	jne    c0011ea6 <SysIsATTY(regs*)+0x3c>
c0011e80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e85:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e88:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011e8e:	85 c0                	test   eax,eax
c0011e90:	74 24                	je     c0011eb6 <SysIsATTY(regs*)+0x4c>
c0011e92:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e94:	83 ec 0c             	sub    esp,0xc
c0011e97:	50                   	push   eax
c0011e98:	ff 12                	call   DWORD PTR [edx]
c0011e9a:	83 c4 10             	add    esp,0x10
c0011e9d:	31 d2                	xor    edx,edx
c0011e9f:	83 c4 0c             	add    esp,0xc
c0011ea2:	0f b6 c0             	movzx  eax,al
c0011ea5:	c3                   	ret    
c0011ea6:	83 ec 0c             	sub    esp,0xc
c0011ea9:	50                   	push   eax
c0011eaa:	e8 ec 75 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011eaf:	83 c4 10             	add    esp,0x10
c0011eb2:	85 c0                	test   eax,eax
c0011eb4:	75 dc                	jne    c0011e92 <SysIsATTY(regs*)+0x28>
c0011eb6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ebb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ec0:	83 c4 0c             	add    esp,0xc
c0011ec3:	c3                   	ret    

c0011ec4 <SysSeek(regs*)>:
c0011ec4:	56                   	push   esi
c0011ec5:	53                   	push   ebx
c0011ec6:	83 ec 04             	sub    esp,0x4
c0011ec9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ecd:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011ed0:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011ed3:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011ed9:	77 33                	ja     c0011f0e <SysSeek(regs*)+0x4a>
c0011edb:	83 ec 0c             	sub    esp,0xc
c0011ede:	51                   	push   ecx
c0011edf:	e8 b7 75 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011ee4:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011ee7:	83 c4 0c             	add    esp,0xc
c0011eea:	31 db                	xor    ebx,ebx
c0011eec:	53                   	push   ebx
c0011eed:	51                   	push   ecx
c0011eee:	50                   	push   eax
c0011eef:	e8 a8 9c ff ff       	call   c000bb9c <File::seek(unsigned long long)>
c0011ef4:	83 c4 10             	add    esp,0x10
c0011ef7:	85 c0                	test   eax,eax
c0011ef9:	0f 95 c0             	setne  al
c0011efc:	31 d2                	xor    edx,edx
c0011efe:	0f b6 c0             	movzx  eax,al
c0011f01:	f7 d8                	neg    eax
c0011f03:	83 d2 00             	adc    edx,0x0
c0011f06:	83 c4 04             	add    esp,0x4
c0011f09:	5b                   	pop    ebx
c0011f0a:	f7 da                	neg    edx
c0011f0c:	5e                   	pop    esi
c0011f0d:	c3                   	ret    
c0011f0e:	83 c4 04             	add    esp,0x4
c0011f11:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f16:	5b                   	pop    ebx
c0011f17:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f1c:	5e                   	pop    esi
c0011f1d:	c3                   	ret    

c0011f1e <SysTell(regs*)>:
c0011f1e:	53                   	push   ebx
c0011f1f:	83 ec 08             	sub    esp,0x8
c0011f22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011f26:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011f29:	83 f8 02             	cmp    eax,0x2
c0011f2c:	76 4e                	jbe    c0011f7c <SysTell(regs*)+0x5e>
c0011f2e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011f33:	76 19                	jbe    c0011f4e <SysTell(regs*)+0x30>
c0011f35:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011f38:	31 d2                	xor    edx,edx
c0011f3a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011f40:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f47:	83 c4 08             	add    esp,0x8
c0011f4a:	31 c0                	xor    eax,eax
c0011f4c:	5b                   	pop    ebx
c0011f4d:	c3                   	ret    
c0011f4e:	83 ec 0c             	sub    esp,0xc
c0011f51:	50                   	push   eax
c0011f52:	e8 44 75 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011f57:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011f5a:	5a                   	pop    edx
c0011f5b:	59                   	pop    ecx
c0011f5c:	53                   	push   ebx
c0011f5d:	50                   	push   eax
c0011f5e:	e8 e5 9c ff ff       	call   c000bc48 <File::tell(unsigned long long*)>
c0011f63:	83 c4 10             	add    esp,0x10
c0011f66:	85 c0                	test   eax,eax
c0011f68:	0f 95 c0             	setne  al
c0011f6b:	31 d2                	xor    edx,edx
c0011f6d:	0f b6 c0             	movzx  eax,al
c0011f70:	f7 d8                	neg    eax
c0011f72:	83 d2 00             	adc    edx,0x0
c0011f75:	83 c4 08             	add    esp,0x8
c0011f78:	5b                   	pop    ebx
c0011f79:	f7 da                	neg    edx
c0011f7b:	c3                   	ret    
c0011f7c:	83 c4 08             	add    esp,0x8
c0011f7f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f84:	5b                   	pop    ebx
c0011f85:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f8a:	c3                   	ret    

c0011f8b <SysSize(regs*)>:
c0011f8b:	53                   	push   ebx
c0011f8c:	83 ec 18             	sub    esp,0x18
c0011f8f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f93:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011f96:	83 f8 02             	cmp    eax,0x2
c0011f99:	76 54                	jbe    c0011fef <SysSize(regs*)+0x64>
c0011f9b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011fa0:	76 19                	jbe    c0011fbb <SysSize(regs*)+0x30>
c0011fa2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011fa5:	31 d2                	xor    edx,edx
c0011fa7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011fad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011fb4:	83 c4 18             	add    esp,0x18
c0011fb7:	31 c0                	xor    eax,eax
c0011fb9:	5b                   	pop    ebx
c0011fba:	c3                   	ret    
c0011fbb:	83 ec 0c             	sub    esp,0xc
c0011fbe:	50                   	push   eax
c0011fbf:	e8 d7 74 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011fc4:	83 c4 0c             	add    esp,0xc
c0011fc7:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011fcb:	52                   	push   edx
c0011fcc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011fcf:	52                   	push   edx
c0011fd0:	50                   	push   eax
c0011fd1:	e8 0a 9e ff ff       	call   c000bde0 <File::stat(unsigned long long*, bool*)>
c0011fd6:	83 c4 10             	add    esp,0x10
c0011fd9:	85 c0                	test   eax,eax
c0011fdb:	0f 95 c0             	setne  al
c0011fde:	31 d2                	xor    edx,edx
c0011fe0:	0f b6 c0             	movzx  eax,al
c0011fe3:	f7 d8                	neg    eax
c0011fe5:	83 d2 00             	adc    edx,0x0
c0011fe8:	83 c4 18             	add    esp,0x18
c0011feb:	5b                   	pop    ebx
c0011fec:	f7 da                	neg    edx
c0011fee:	c3                   	ret    
c0011fef:	83 c4 18             	add    esp,0x18
c0011ff2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ff7:	5b                   	pop    ebx
c0011ff8:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ffd:	c3                   	ret    

c0011ffe <SysSizeFromFilename(regs*)>:
c0011ffe:	55                   	push   ebp
c0011fff:	57                   	push   edi
c0012000:	56                   	push   esi
c0012001:	53                   	push   ebx
c0012002:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012008:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001200f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012012:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012015:	85 f6                	test   esi,esi
c0012017:	89 f8                	mov    eax,edi
c0012019:	74 09                	je     c0012024 <SysSizeFromFilename(regs*)+0x26>
c001201b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012021:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012024:	83 f8 02             	cmp    eax,0x2
c0012027:	0f 86 ad 00 00 00    	jbe    c00120da <SysSizeFromFilename(regs*)+0xdc>
c001202d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012032:	76 1f                	jbe    c0012053 <SysSizeFromFilename(regs*)+0x55>
c0012034:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012037:	31 d2                	xor    edx,edx
c0012039:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001203f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012046:	31 c0                	xor    eax,eax
c0012048:	81 c4 2c 01 00 00    	add    esp,0x12c
c001204e:	5b                   	pop    ebx
c001204f:	5e                   	pop    esi
c0012050:	5f                   	pop    edi
c0012051:	5d                   	pop    ebp
c0012052:	c3                   	ret    
c0012053:	83 ec 0c             	sub    esp,0xc
c0012056:	68 14 01 00 00       	push   0x114
c001205b:	e8 73 5a ff ff       	call   c0007ad3 <malloc>
c0012060:	6a 01                	push   0x1
c0012062:	89 c5                	mov    ebp,eax
c0012064:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012069:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001206c:	50                   	push   eax
c001206d:	57                   	push   edi
c001206e:	55                   	push   ebp
c001206f:	e8 6e 99 ff ff       	call   c000b9e2 <File::File(char const*, Process*, bool)>
c0012074:	83 c4 1c             	add    esp,0x1c
c0012077:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001207b:	50                   	push   eax
c001207c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001207f:	52                   	push   edx
c0012080:	55                   	push   ebp
c0012081:	e8 5a 9d ff ff       	call   c000bde0 <File::stat(unsigned long long*, bool*)>
c0012086:	83 c4 10             	add    esp,0x10
c0012089:	85 ed                	test   ebp,ebp
c001208b:	89 c3                	mov    ebx,eax
c001208d:	74 0d                	je     c001209c <SysSizeFromFilename(regs*)+0x9e>
c001208f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012092:	83 ec 0c             	sub    esp,0xc
c0012095:	55                   	push   ebp
c0012096:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012099:	83 c4 10             	add    esp,0x10
c001209c:	85 db                	test   ebx,ebx
c001209e:	75 3a                	jne    c00120da <SysSizeFromFilename(regs*)+0xdc>
c00120a0:	83 ec 08             	sub    esp,0x8
c00120a3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00120a7:	50                   	push   eax
c00120a8:	57                   	push   edi
c00120a9:	e8 3f 90 ff ff       	call   c000b0ed <KeDereferenceSymlink(char const*, char*)>
c00120ae:	83 c4 10             	add    esp,0x10
c00120b1:	ba 00 00 00 00       	mov    edx,0x0
c00120b6:	83 f8 01             	cmp    eax,0x1
c00120b9:	b8 00 00 00 00       	mov    eax,0x0
c00120be:	74 2f                	je     c00120ef <SysSizeFromFilename(regs*)+0xf1>
c00120c0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00120c5:	74 3b                	je     c0012102 <SysSizeFromFilename(regs*)+0x104>
c00120c7:	85 f6                	test   esi,esi
c00120c9:	0f 84 79 ff ff ff    	je     c0012048 <SysSizeFromFilename(regs*)+0x4a>
c00120cf:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00120d5:	e9 6e ff ff ff       	jmp    c0012048 <SysSizeFromFilename(regs*)+0x4a>
c00120da:	81 c4 2c 01 00 00    	add    esp,0x12c
c00120e0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120e5:	5b                   	pop    ebx
c00120e6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120eb:	5e                   	pop    esi
c00120ec:	5f                   	pop    edi
c00120ed:	5d                   	pop    ebp
c00120ee:	c3                   	ret    
c00120ef:	85 f6                	test   esi,esi
c00120f1:	0f 84 51 ff ff ff    	je     c0012048 <SysSizeFromFilename(regs*)+0x4a>
c00120f7:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00120fd:	e9 46 ff ff ff       	jmp    c0012048 <SysSizeFromFilename(regs*)+0x4a>
c0012102:	85 f6                	test   esi,esi
c0012104:	0f 84 3e ff ff ff    	je     c0012048 <SysSizeFromFilename(regs*)+0x4a>
c001210a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012110:	e9 33 ff ff ff       	jmp    c0012048 <SysSizeFromFilename(regs*)+0x4a>

c0012115 <SysSizeFromFilenameNoSymlink(regs*)>:
c0012115:	55                   	push   ebp
c0012116:	57                   	push   edi
c0012117:	56                   	push   esi
c0012118:	53                   	push   ebx
c0012119:	81 ec 4c 02 00 00    	sub    esp,0x24c
c001211f:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0012126:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012129:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001212c:	85 f6                	test   esi,esi
c001212e:	89 f8                	mov    eax,edi
c0012130:	74 09                	je     c001213b <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c0012132:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012138:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001213b:	83 f8 02             	cmp    eax,0x2
c001213e:	0f 86 ca 00 00 00    	jbe    c001220e <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c0012144:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012149:	76 1f                	jbe    c001216a <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c001214b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001214e:	31 d2                	xor    edx,edx
c0012150:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012156:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001215d:	31 c0                	xor    eax,eax
c001215f:	81 c4 4c 02 00 00    	add    esp,0x24c
c0012165:	5b                   	pop    ebx
c0012166:	5e                   	pop    esi
c0012167:	5f                   	pop    edi
c0012168:	5d                   	pop    ebp
c0012169:	c3                   	ret    
c001216a:	83 ec 0c             	sub    esp,0xc
c001216d:	68 14 01 00 00       	push   0x114
c0012172:	e8 5c 59 ff ff       	call   c0007ad3 <malloc>
c0012177:	6a 00                	push   0x0
c0012179:	89 c5                	mov    ebp,eax
c001217b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012180:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012183:	51                   	push   ecx
c0012184:	57                   	push   edi
c0012185:	55                   	push   ebp
c0012186:	e8 57 98 ff ff       	call   c000b9e2 <File::File(char const*, Process*, bool)>
c001218b:	83 c4 1c             	add    esp,0x1c
c001218e:	8d 44 24 13          	lea    eax,[esp+0x13]
c0012192:	50                   	push   eax
c0012193:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012196:	53                   	push   ebx
c0012197:	55                   	push   ebp
c0012198:	e8 43 9c ff ff       	call   c000bde0 <File::stat(unsigned long long*, bool*)>
c001219d:	83 c4 10             	add    esp,0x10
c00121a0:	85 ed                	test   ebp,ebp
c00121a2:	89 c3                	mov    ebx,eax
c00121a4:	74 0d                	je     c00121b3 <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c00121a6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00121a9:	83 ec 0c             	sub    esp,0xc
c00121ac:	55                   	push   ebp
c00121ad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00121b0:	83 c4 10             	add    esp,0x10
c00121b3:	85 db                	test   ebx,ebx
c00121b5:	75 57                	jne    c001220e <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c00121b7:	6a 00                	push   0x0
c00121b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121be:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121c1:	05 0c 01 00 00       	add    eax,0x10c
c00121c6:	50                   	push   eax
c00121c7:	57                   	push   edi
c00121c8:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00121cf:	53                   	push   ebx
c00121d0:	e8 ef 95 ff ff       	call   c000b7c4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00121d5:	58                   	pop    eax
c00121d6:	5a                   	pop    edx
c00121d7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00121db:	50                   	push   eax
c00121dc:	53                   	push   ebx
c00121dd:	e8 0b 8f ff ff       	call   c000b0ed <KeDereferenceSymlink(char const*, char*)>
c00121e2:	83 c4 10             	add    esp,0x10
c00121e5:	ba 00 00 00 00       	mov    edx,0x0
c00121ea:	83 f8 01             	cmp    eax,0x1
c00121ed:	b8 00 00 00 00       	mov    eax,0x0
c00121f2:	74 2f                	je     c0012223 <SysSizeFromFilenameNoSymlink(regs*)+0x10e>
c00121f4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00121f9:	74 3b                	je     c0012236 <SysSizeFromFilenameNoSymlink(regs*)+0x121>
c00121fb:	85 f6                	test   esi,esi
c00121fd:	0f 84 5c ff ff ff    	je     c001215f <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012203:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0012209:	e9 51 ff ff ff       	jmp    c001215f <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001220e:	81 c4 4c 02 00 00    	add    esp,0x24c
c0012214:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012219:	5b                   	pop    ebx
c001221a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001221f:	5e                   	pop    esi
c0012220:	5f                   	pop    edi
c0012221:	5d                   	pop    ebp
c0012222:	c3                   	ret    
c0012223:	85 f6                	test   esi,esi
c0012225:	0f 84 34 ff ff ff    	je     c001215f <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001222b:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0012231:	e9 29 ff ff ff       	jmp    c001215f <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012236:	85 f6                	test   esi,esi
c0012238:	0f 84 21 ff ff ff    	je     c001215f <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001223e:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012244:	e9 16 ff ff ff       	jmp    c001215f <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c0012249 <SysClose(regs*)>:
c0012249:	53                   	push   ebx
c001224a:	83 ec 08             	sub    esp,0x8
c001224d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012251:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012254:	83 f8 02             	cmp    eax,0x2
c0012257:	76 41                	jbe    c001229a <SysClose(regs*)+0x51>
c0012259:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001225f:	83 fa 01             	cmp    edx,0x1
c0012262:	76 2d                	jbe    c0012291 <SysClose(regs*)+0x48>
c0012264:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012269:	77 2f                	ja     c001229a <SysClose(regs*)+0x51>
c001226b:	83 ec 0c             	sub    esp,0xc
c001226e:	50                   	push   eax
c001226f:	e8 27 72 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0012274:	89 04 24             	mov    DWORD PTR [esp],eax
c0012277:	89 c3                	mov    ebx,eax
c0012279:	e8 be 98 ff ff       	call   c000bb3c <File::close()>
c001227e:	83 c4 10             	add    esp,0x10
c0012281:	85 db                	test   ebx,ebx
c0012283:	74 0c                	je     c0012291 <SysClose(regs*)+0x48>
c0012285:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012287:	83 ec 0c             	sub    esp,0xc
c001228a:	53                   	push   ebx
c001228b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001228e:	83 c4 10             	add    esp,0x10
c0012291:	83 c4 08             	add    esp,0x8
c0012294:	31 c0                	xor    eax,eax
c0012296:	5b                   	pop    ebx
c0012297:	31 d2                	xor    edx,edx
c0012299:	c3                   	ret    
c001229a:	83 c4 08             	add    esp,0x8
c001229d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00122a2:	5b                   	pop    ebx
c00122a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00122a8:	c3                   	ret    

c00122a9 <SysOpenDir(regs*)>:
c00122a9:	56                   	push   esi
c00122aa:	53                   	push   ebx
c00122ab:	83 ec 04             	sub    esp,0x4
c00122ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00122b2:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00122b5:	85 c9                	test   ecx,ecx
c00122b7:	74 5d                	je     c0012316 <SysOpenDir(regs*)+0x6d>
c00122b9:	83 ec 0c             	sub    esp,0xc
c00122bc:	68 14 01 00 00       	push   0x114
c00122c1:	e8 0d 58 ff ff       	call   c0007ad3 <malloc>
c00122c6:	83 c4 0c             	add    esp,0xc
c00122c9:	89 c6                	mov    esi,eax
c00122cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122d0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00122d3:	50                   	push   eax
c00122d4:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00122d7:	52                   	push   edx
c00122d8:	56                   	push   esi
c00122d9:	e8 c2 9c ff ff       	call   c000bfa0 <Directory::Directory(char const*, Process*)>
c00122de:	83 c4 10             	add    esp,0x10
c00122e1:	85 f6                	test   esi,esi
c00122e3:	74 31                	je     c0012316 <SysOpenDir(regs*)+0x6d>
c00122e5:	83 ec 0c             	sub    esp,0xc
c00122e8:	56                   	push   esi
c00122e9:	e8 7a 9d ff ff       	call   c000c068 <Directory::open()>
c00122ee:	83 c4 10             	add    esp,0x10
c00122f1:	85 c0                	test   eax,eax
c00122f3:	75 21                	jne    c0012316 <SysOpenDir(regs*)+0x6d>
c00122f5:	83 ec 0c             	sub    esp,0xc
c00122f8:	56                   	push   esi
c00122f9:	e8 a0 6e ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c00122fe:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012301:	83 c4 10             	add    esp,0x10
c0012304:	89 02                	mov    DWORD PTR [edx],eax
c0012306:	c1 f8 1f             	sar    eax,0x1f
c0012309:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001230c:	83 c4 04             	add    esp,0x4
c001230f:	31 c0                	xor    eax,eax
c0012311:	5b                   	pop    ebx
c0012312:	31 d2                	xor    edx,edx
c0012314:	5e                   	pop    esi
c0012315:	c3                   	ret    
c0012316:	83 c4 04             	add    esp,0x4
c0012319:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001231e:	5b                   	pop    ebx
c001231f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012324:	5e                   	pop    esi
c0012325:	c3                   	ret    

c0012326 <SysMakeDir(regs*)>:
c0012326:	56                   	push   esi
c0012327:	53                   	push   ebx
c0012328:	83 ec 10             	sub    esp,0x10
c001232b:	68 14 01 00 00       	push   0x114
c0012330:	e8 9e 57 ff ff       	call   c0007ad3 <malloc>
c0012335:	83 c4 0c             	add    esp,0xc
c0012338:	89 c3                	mov    ebx,eax
c001233a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001233f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012342:	50                   	push   eax
c0012343:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012347:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001234a:	52                   	push   edx
c001234b:	53                   	push   ebx
c001234c:	e8 4f 9c ff ff       	call   c000bfa0 <Directory::Directory(char const*, Process*)>
c0012351:	83 c4 10             	add    esp,0x10
c0012354:	85 db                	test   ebx,ebx
c0012356:	74 2c                	je     c0012384 <SysMakeDir(regs*)+0x5e>
c0012358:	83 ec 0c             	sub    esp,0xc
c001235b:	53                   	push   ebx
c001235c:	e8 e7 9e ff ff       	call   c000c248 <Directory::create()>
c0012361:	89 c6                	mov    esi,eax
c0012363:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012365:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012368:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001236b:	83 c4 10             	add    esp,0x10
c001236e:	31 c0                	xor    eax,eax
c0012370:	85 f6                	test   esi,esi
c0012372:	0f 95 c0             	setne  al
c0012375:	31 d2                	xor    edx,edx
c0012377:	f7 d8                	neg    eax
c0012379:	83 d2 00             	adc    edx,0x0
c001237c:	83 c4 04             	add    esp,0x4
c001237f:	5b                   	pop    ebx
c0012380:	f7 da                	neg    edx
c0012382:	5e                   	pop    esi
c0012383:	c3                   	ret    
c0012384:	83 c4 04             	add    esp,0x4
c0012387:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001238c:	5b                   	pop    ebx
c001238d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012392:	5e                   	pop    esi
c0012393:	c3                   	ret    

c0012394 <SysCloseDir(regs*)>:
c0012394:	53                   	push   ebx
c0012395:	ba ff ff ff ff       	mov    edx,0xffffffff
c001239a:	83 ec 08             	sub    esp,0x8
c001239d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123a1:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00123a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00123a9:	8d 59 fd             	lea    ebx,[ecx-0x3]
c00123ac:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c00123b2:	77 2a                	ja     c00123de <SysCloseDir(regs*)+0x4a>
c00123b4:	83 ec 0c             	sub    esp,0xc
c00123b7:	51                   	push   ecx
c00123b8:	e8 de 70 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00123bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00123c0:	89 c3                	mov    ebx,eax
c00123c2:	e8 fd 9c ff ff       	call   c000c0c4 <Directory::close()>
c00123c7:	83 c4 10             	add    esp,0x10
c00123ca:	85 db                	test   ebx,ebx
c00123cc:	74 0c                	je     c00123da <SysCloseDir(regs*)+0x46>
c00123ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00123d0:	83 ec 0c             	sub    esp,0xc
c00123d3:	53                   	push   ebx
c00123d4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00123d7:	83 c4 10             	add    esp,0x10
c00123da:	31 c0                	xor    eax,eax
c00123dc:	31 d2                	xor    edx,edx
c00123de:	83 c4 08             	add    esp,0x8
c00123e1:	5b                   	pop    ebx
c00123e2:	c3                   	ret    

c00123e3 <SysWait(regs*)>:
c00123e3:	83 ec 10             	sub    esp,0x10
c00123e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00123ea:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00123ed:	52                   	push   edx
c00123ee:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00123f1:	51                   	push   ecx
c00123f2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00123f5:	50                   	push   eax
c00123f6:	e8 0d 3e 00 00       	call   c0016208 <waitTask(int, int*, int)>
c00123fb:	83 c4 1c             	add    esp,0x1c
c00123fe:	89 c2                	mov    edx,eax
c0012400:	c1 fa 1f             	sar    edx,0x1f
c0012403:	c3                   	ret    

c0012404 <SysNotImpl(regs*)>:
c0012404:	83 ec 18             	sub    esp,0x18
c0012407:	68 e6 23 02 c0       	push   0xc00223e6
c001240c:	e8 f6 f0 ff ff       	call   c0011507 <KePanic(char const*)>
c0012411:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012416:	ba ff ff ff ff       	mov    edx,0xffffffff
c001241b:	83 c4 1c             	add    esp,0x1c
c001241e:	c3                   	ret    

c001241f <SysPanic(regs*)>:
c001241f:	83 ec 18             	sub    esp,0x18
c0012422:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012426:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0012429:	50                   	push   eax
c001242a:	e8 d8 f0 ff ff       	call   c0011507 <KePanic(char const*)>
c001242f:	b8 01 00 00 00       	mov    eax,0x1
c0012434:	31 d2                	xor    edx,edx
c0012436:	83 c4 1c             	add    esp,0x1c
c0012439:	c3                   	ret    

c001243a <SysRmdir(regs*)>:
c001243a:	56                   	push   esi
c001243b:	53                   	push   ebx
c001243c:	83 ec 10             	sub    esp,0x10
c001243f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012443:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012446:	68 14 01 00 00       	push   0x114
c001244b:	e8 83 56 ff ff       	call   c0007ad3 <malloc>
c0012450:	6a 00                	push   0x0
c0012452:	89 c3                	mov    ebx,eax
c0012454:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012459:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001245c:	50                   	push   eax
c001245d:	56                   	push   esi
c001245e:	53                   	push   ebx
c001245f:	e8 7e 95 ff ff       	call   c000b9e2 <File::File(char const*, Process*, bool)>
c0012464:	83 c4 14             	add    esp,0x14
c0012467:	53                   	push   ebx
c0012468:	e8 3f 98 ff ff       	call   c000bcac <File::unlink()>
c001246d:	83 c4 10             	add    esp,0x10
c0012470:	85 db                	test   ebx,ebx
c0012472:	89 c6                	mov    esi,eax
c0012474:	74 0c                	je     c0012482 <SysRmdir(regs*)+0x48>
c0012476:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012478:	83 ec 0c             	sub    esp,0xc
c001247b:	53                   	push   ebx
c001247c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001247f:	83 c4 10             	add    esp,0x10
c0012482:	31 c0                	xor    eax,eax
c0012484:	85 f6                	test   esi,esi
c0012486:	0f 95 c0             	setne  al
c0012489:	31 d2                	xor    edx,edx
c001248b:	f7 d8                	neg    eax
c001248d:	83 d2 00             	adc    edx,0x0
c0012490:	83 c4 04             	add    esp,0x4
c0012493:	5b                   	pop    ebx
c0012494:	f7 da                	neg    edx
c0012496:	5e                   	pop    esi
c0012497:	c3                   	ret    

c0012498 <SysUnlink(regs*)>:
c0012498:	56                   	push   esi
c0012499:	53                   	push   ebx
c001249a:	83 ec 10             	sub    esp,0x10
c001249d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00124a1:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00124a4:	68 14 01 00 00       	push   0x114
c00124a9:	e8 25 56 ff ff       	call   c0007ad3 <malloc>
c00124ae:	6a 00                	push   0x0
c00124b0:	89 c3                	mov    ebx,eax
c00124b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00124b7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00124ba:	50                   	push   eax
c00124bb:	56                   	push   esi
c00124bc:	53                   	push   ebx
c00124bd:	e8 20 95 ff ff       	call   c000b9e2 <File::File(char const*, Process*, bool)>
c00124c2:	83 c4 14             	add    esp,0x14
c00124c5:	53                   	push   ebx
c00124c6:	e8 e1 97 ff ff       	call   c000bcac <File::unlink()>
c00124cb:	83 c4 10             	add    esp,0x10
c00124ce:	85 db                	test   ebx,ebx
c00124d0:	89 c6                	mov    esi,eax
c00124d2:	74 0c                	je     c00124e0 <SysUnlink(regs*)+0x48>
c00124d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124d6:	83 ec 0c             	sub    esp,0xc
c00124d9:	53                   	push   ebx
c00124da:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00124dd:	83 c4 10             	add    esp,0x10
c00124e0:	31 c0                	xor    eax,eax
c00124e2:	85 f6                	test   esi,esi
c00124e4:	0f 95 c0             	setne  al
c00124e7:	31 d2                	xor    edx,edx
c00124e9:	f7 d8                	neg    eax
c00124eb:	83 d2 00             	adc    edx,0x0
c00124ee:	83 c4 04             	add    esp,0x4
c00124f1:	5b                   	pop    ebx
c00124f2:	f7 da                	neg    edx
c00124f4:	5e                   	pop    esi
c00124f5:	c3                   	ret    

c00124f6 <SysGetArgv(regs*)>:
c00124f6:	83 ec 0c             	sub    esp,0xc
c00124f9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00124fd:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0012500:	85 c0                	test   eax,eax
c0012502:	78 2c                	js     c0012530 <SysGetArgv(regs*)+0x3a>
c0012504:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001250a:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001250d:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0012513:	7d 1b                	jge    c0012530 <SysGetArgv(regs*)+0x3a>
c0012515:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001251c:	85 c0                	test   eax,eax
c001251e:	74 18                	je     c0012538 <SysGetArgv(regs*)+0x42>
c0012520:	83 ec 08             	sub    esp,0x8
c0012523:	50                   	push   eax
c0012524:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0012527:	50                   	push   eax
c0012528:	e8 23 e1 fe ff       	call   c0000650 <strcpy>
c001252d:	83 c4 10             	add    esp,0x10
c0012530:	31 c0                	xor    eax,eax
c0012532:	31 d2                	xor    edx,edx
c0012534:	83 c4 0c             	add    esp,0xc
c0012537:	c3                   	ret    
c0012538:	b8 01 00 00 00       	mov    eax,0x1
c001253d:	31 d2                	xor    edx,edx
c001253f:	83 c4 0c             	add    esp,0xc
c0012542:	c3                   	ret    

c0012543 <SysUSleep(regs*)>:
c0012543:	83 ec 1c             	sub    esp,0x1c
c0012546:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001254a:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001254d:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0012550:	6a 00                	push   0x0
c0012552:	6a 64                	push   0x64
c0012554:	52                   	push   edx
c0012555:	50                   	push   eax
c0012556:	e8 35 d1 00 00       	call   c001f690 <__udivdi3>
c001255b:	83 c4 14             	add    esp,0x14
c001255e:	50                   	push   eax
c001255f:	e8 88 3d 00 00       	call   c00162ec <milliTenthSleep(unsigned int)>
c0012564:	31 c0                	xor    eax,eax
c0012566:	31 d2                	xor    edx,edx
c0012568:	83 c4 1c             	add    esp,0x1c
c001256b:	c3                   	ret    

c001256c <SysSpawn(regs*)>:
c001256c:	56                   	push   esi
c001256d:	53                   	push   ebx
c001256e:	83 ec 04             	sub    esp,0x4
c0012571:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012575:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012578:	85 f6                	test   esi,esi
c001257a:	75 0a                	jne    c0012586 <SysSpawn(regs*)+0x1a>
c001257c:	83 c4 04             	add    esp,0x4
c001257f:	31 c0                	xor    eax,eax
c0012581:	5b                   	pop    ebx
c0012582:	31 d2                	xor    edx,edx
c0012584:	5e                   	pop    esi
c0012585:	c3                   	ret    
c0012586:	83 ec 0c             	sub    esp,0xc
c0012589:	68 24 07 00 00       	push   0x724
c001258e:	e8 40 55 ff ff       	call   c0007ad3 <malloc>
c0012593:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012596:	83 c4 10             	add    esp,0x10
c0012599:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001259c:	89 c6                	mov    esi,eax
c001259e:	31 c0                	xor    eax,eax
c00125a0:	85 c9                	test   ecx,ecx
c00125a2:	75 08                	jne    c00125ac <SysSpawn(regs*)+0x40>
c00125a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125a9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00125ac:	52                   	push   edx
c00125ad:	50                   	push   eax
c00125ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00125b1:	50                   	push   eax
c00125b2:	56                   	push   esi
c00125b3:	e8 9c 33 00 00       	call   c0015954 <Process::Process(char const*, Process*, char**)>
c00125b8:	83 c4 10             	add    esp,0x10
c00125bb:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00125c2:	75 b8                	jne    c001257c <SysSpawn(regs*)+0x10>
c00125c4:	83 ec 0c             	sub    esp,0xc
c00125c7:	56                   	push   esi
c00125c8:	e8 bf 38 00 00       	call   c0015e8c <Process::createUserThread()>
c00125cd:	8b 06                	mov    eax,DWORD PTR [esi]
c00125cf:	83 c4 10             	add    esp,0x10
c00125d2:	83 c4 04             	add    esp,0x4
c00125d5:	5b                   	pop    ebx
c00125d6:	89 c2                	mov    edx,eax
c00125d8:	c1 fa 1f             	sar    edx,0x1f
c00125db:	5e                   	pop    esi
c00125dc:	c3                   	ret    

c00125dd <SysGetEnv(regs*)>:
c00125dd:	57                   	push   edi
c00125de:	56                   	push   esi
c00125df:	53                   	push   ebx
c00125e0:	83 ec 1c             	sub    esp,0x1c
c00125e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125e8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00125ec:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00125ef:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00125f2:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00125f5:	51                   	push   ecx
c00125f6:	e8 c4 ed ff ff       	call   c00113bf <KeGetProcessTotalEnvCount(Process*)>
c00125fb:	83 c4 10             	add    esp,0x10
c00125fe:	39 c7                	cmp    edi,eax
c0012600:	7c 12                	jl     c0012614 <SysGetEnv(regs*)+0x37>
c0012602:	31 c0                	xor    eax,eax
c0012604:	31 d2                	xor    edx,edx
c0012606:	85 f6                	test   esi,esi
c0012608:	74 03                	je     c001260d <SysGetEnv(regs*)+0x30>
c001260a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001260d:	83 c4 10             	add    esp,0x10
c0012610:	5b                   	pop    ebx
c0012611:	5e                   	pop    esi
c0012612:	5f                   	pop    edi
c0012613:	c3                   	ret    
c0012614:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012618:	83 ec 04             	sub    esp,0x4
c001261b:	57                   	push   edi
c001261c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012622:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0012625:	57                   	push   edi
c0012626:	50                   	push   eax
c0012627:	e8 b3 ed ff ff       	call   c00113df <KeGetProcessEnvPair(Process*, int)>
c001262c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001262f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012637:	83 c4 0c             	add    esp,0xc
c001263a:	85 d2                	test   edx,edx
c001263c:	75 23                	jne    c0012661 <SysGetEnv(regs*)+0x84>
c001263e:	83 ec 0c             	sub    esp,0xc
c0012641:	50                   	push   eax
c0012642:	e8 39 df fe ff       	call   c0000580 <strlen>
c0012647:	89 3c 24             	mov    DWORD PTR [esp],edi
c001264a:	89 c3                	mov    ebx,eax
c001264c:	e8 2f df fe ff       	call   c0000580 <strlen>
c0012651:	83 c4 10             	add    esp,0x10
c0012654:	31 d2                	xor    edx,edx
c0012656:	83 c4 10             	add    esp,0x10
c0012659:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001265d:	5b                   	pop    ebx
c001265e:	5e                   	pop    esi
c001265f:	5f                   	pop    edi
c0012660:	c3                   	ret    
c0012661:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012664:	83 ec 08             	sub    esp,0x8
c0012667:	50                   	push   eax
c0012668:	56                   	push   esi
c0012669:	e8 e2 df fe ff       	call   c0000650 <strcpy>
c001266e:	58                   	pop    eax
c001266f:	5a                   	pop    edx
c0012670:	68 00 24 02 c0       	push   0xc0022400
c0012675:	56                   	push   esi
c0012676:	e8 f5 e1 fe ff       	call   c0000870 <strcat>
c001267b:	59                   	pop    ecx
c001267c:	5b                   	pop    ebx
c001267d:	57                   	push   edi
c001267e:	56                   	push   esi
c001267f:	e8 ec e1 fe ff       	call   c0000870 <strcat>
c0012684:	83 c4 10             	add    esp,0x10
c0012687:	31 c0                	xor    eax,eax
c0012689:	83 c4 10             	add    esp,0x10
c001268c:	31 d2                	xor    edx,edx
c001268e:	5b                   	pop    ebx
c001268f:	5e                   	pop    esi
c0012690:	5f                   	pop    edi
c0012691:	c3                   	ret    

c0012692 <SysSetFatAttrib(regs*)>:
c0012692:	57                   	push   edi
c0012693:	56                   	push   esi
c0012694:	53                   	push   ebx
c0012695:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012699:	83 ec 0c             	sub    esp,0xc
c001269c:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001269f:	68 14 01 00 00       	push   0x114
c00126a4:	e8 2a 54 ff ff       	call   c0007ad3 <malloc>
c00126a9:	83 c4 0c             	add    esp,0xc
c00126ac:	89 c3                	mov    ebx,eax
c00126ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126b3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00126b6:	50                   	push   eax
c00126b7:	57                   	push   edi
c00126b8:	53                   	push   ebx
c00126b9:	e8 02 94 ff ff       	call   c000bac0 <File::File(char const*, Process*)>
c00126be:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00126c1:	83 c4 0c             	add    esp,0xc
c00126c4:	0f b6 d4             	movzx  edx,ah
c00126c7:	0f b6 c0             	movzx  eax,al
c00126ca:	52                   	push   edx
c00126cb:	50                   	push   eax
c00126cc:	53                   	push   ebx
c00126cd:	e8 74 96 ff ff       	call   c000bd46 <File::chfatattr(unsigned char, unsigned char)>
c00126d2:	83 c4 10             	add    esp,0x10
c00126d5:	85 db                	test   ebx,ebx
c00126d7:	89 c6                	mov    esi,eax
c00126d9:	74 0c                	je     c00126e7 <SysSetFatAttrib(regs*)+0x55>
c00126db:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126dd:	83 ec 0c             	sub    esp,0xc
c00126e0:	53                   	push   ebx
c00126e1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00126e4:	83 c4 10             	add    esp,0x10
c00126e7:	5b                   	pop    ebx
c00126e8:	31 c0                	xor    eax,eax
c00126ea:	85 f6                	test   esi,esi
c00126ec:	0f 95 c0             	setne  al
c00126ef:	31 d2                	xor    edx,edx
c00126f1:	5e                   	pop    esi
c00126f2:	f7 d8                	neg    eax
c00126f4:	83 d2 00             	adc    edx,0x0
c00126f7:	f7 da                	neg    edx
c00126f9:	5f                   	pop    edi
c00126fa:	c3                   	ret    

c00126fb <SysPipe(regs*)>:
c00126fb:	57                   	push   edi
c00126fc:	56                   	push   esi
c00126fd:	53                   	push   ebx
c00126fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012702:	83 ec 0c             	sub    esp,0xc
c0012705:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0012708:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001270b:	6a 20                	push   0x20
c001270d:	e8 c1 53 ff ff       	call   c0007ad3 <malloc>
c0012712:	89 c3                	mov    ebx,eax
c0012714:	58                   	pop    eax
c0012715:	5a                   	pop    edx
c0012716:	68 00 50 00 00       	push   0x5000
c001271b:	53                   	push   ebx
c001271c:	e8 1d 5d ff ff       	call   c000843e <Pipe::Pipe(int)>
c0012721:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012724:	e8 75 6a ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012729:	89 07                	mov    DWORD PTR [edi],eax
c001272b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001272e:	e8 6b 6a ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012733:	83 c4 10             	add    esp,0x10
c0012736:	31 d2                	xor    edx,edx
c0012738:	89 06                	mov    DWORD PTR [esi],eax
c001273a:	31 c0                	xor    eax,eax
c001273c:	5b                   	pop    ebx
c001273d:	5e                   	pop    esi
c001273e:	5f                   	pop    edi
c001273f:	c3                   	ret    

c0012740 <SysGetUnixTime(regs*)>:
c0012740:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0012745:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001274b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001274f:	e9 3a 9d ff ff       	jmp    c000c48e <Clock::timeInSecondsLocal()>

c0012754 <string_ends_with(char const*, char const*)>:
c0012754:	57                   	push   edi
c0012755:	56                   	push   esi
c0012756:	53                   	push   ebx
c0012757:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001275b:	83 ec 0c             	sub    esp,0xc
c001275e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012762:	53                   	push   ebx
c0012763:	e8 18 de fe ff       	call   c0000580 <strlen>
c0012768:	89 3c 24             	mov    DWORD PTR [esp],edi
c001276b:	89 c6                	mov    esi,eax
c001276d:	e8 0e de fe ff       	call   c0000580 <strlen>
c0012772:	83 c4 10             	add    esp,0x10
c0012775:	31 d2                	xor    edx,edx
c0012777:	39 c6                	cmp    esi,eax
c0012779:	7d 06                	jge    c0012781 <string_ends_with(char const*, char const*)+0x2d>
c001277b:	5b                   	pop    ebx
c001277c:	89 d0                	mov    eax,edx
c001277e:	5e                   	pop    esi
c001277f:	5f                   	pop    edi
c0012780:	c3                   	ret    
c0012781:	83 ec 08             	sub    esp,0x8
c0012784:	29 c6                	sub    esi,eax
c0012786:	57                   	push   edi
c0012787:	01 f3                	add    ebx,esi
c0012789:	53                   	push   ebx
c001278a:	e8 f1 df fe ff       	call   c0000780 <strcmp>
c001278f:	83 c4 10             	add    esp,0x10
c0012792:	31 d2                	xor    edx,edx
c0012794:	5b                   	pop    ebx
c0012795:	5e                   	pop    esi
c0012796:	85 c0                	test   eax,eax
c0012798:	5f                   	pop    edi
c0012799:	0f 94 c2             	sete   dl
c001279c:	89 d0                	mov    eax,edx
c001279e:	c3                   	ret    

c001279f <SysOpen(regs*)>:
c001279f:	56                   	push   esi
c00127a0:	53                   	push   ebx
c00127a1:	81 ec 04 01 00 00    	sub    esp,0x104
c00127a7:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00127ae:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00127b1:	85 c0                	test   eax,eax
c00127b3:	0f 84 c4 01 00 00    	je     c001297d <SysOpen(regs*)+0x1de>
c00127b9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00127bc:	85 c0                	test   eax,eax
c00127be:	0f 84 b9 01 00 00    	je     c001297d <SysOpen(regs*)+0x1de>
c00127c4:	6a 00                	push   0x0
c00127c6:	68 02 24 02 c0       	push   0xc0022402
c00127cb:	50                   	push   eax
c00127cc:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00127d0:	56                   	push   esi
c00127d1:	e8 ee 8f ff ff       	call   c000b7c4 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00127d6:	89 34 24             	mov    DWORD PTR [esp],esi
c00127d9:	e8 a2 dd fe ff       	call   c0000580 <strlen>
c00127de:	83 c4 10             	add    esp,0x10
c00127e1:	83 e8 01             	sub    eax,0x1
c00127e4:	74 29                	je     c001280f <SysOpen(regs*)+0x70>
c00127e6:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00127ea:	83 fa 2e             	cmp    edx,0x2e
c00127ed:	74 1c                	je     c001280b <SysOpen(regs*)+0x6c>
c00127ef:	83 fa 3a             	cmp    edx,0x3a
c00127f2:	74 17                	je     c001280b <SysOpen(regs*)+0x6c>
c00127f4:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00127f8:	83 e8 01             	sub    eax,0x1
c00127fb:	74 12                	je     c001280f <SysOpen(regs*)+0x70>
c00127fd:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0012801:	83 fa 3a             	cmp    edx,0x3a
c0012804:	74 05                	je     c001280b <SysOpen(regs*)+0x6c>
c0012806:	83 fa 2e             	cmp    edx,0x2e
c0012809:	75 e9                	jne    c00127f4 <SysOpen(regs*)+0x55>
c001280b:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001280f:	83 ec 08             	sub    esp,0x8
c0012812:	68 06 24 02 c0       	push   0xc0022406
c0012817:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001281a:	50                   	push   eax
c001281b:	e8 34 ff ff ff       	call   c0012754 <string_ends_with(char const*, char const*)>
c0012820:	83 c4 10             	add    esp,0x10
c0012823:	85 c0                	test   eax,eax
c0012825:	74 1d                	je     c0012844 <SysOpen(regs*)+0xa5>
c0012827:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001282a:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0012830:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012837:	81 c4 04 01 00 00    	add    esp,0x104
c001283d:	31 c0                	xor    eax,eax
c001283f:	5b                   	pop    ebx
c0012840:	31 d2                	xor    edx,edx
c0012842:	5e                   	pop    esi
c0012843:	c3                   	ret    
c0012844:	83 ec 08             	sub    esp,0x8
c0012847:	68 0b 24 02 c0       	push   0xc002240b
c001284c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001284f:	50                   	push   eax
c0012850:	e8 ff fe ff ff       	call   c0012754 <string_ends_with(char const*, char const*)>
c0012855:	83 c4 10             	add    esp,0x10
c0012858:	85 c0                	test   eax,eax
c001285a:	75 cb                	jne    c0012827 <SysOpen(regs*)+0x88>
c001285c:	83 ec 08             	sub    esp,0x8
c001285f:	68 07 24 02 c0       	push   0xc0022407
c0012864:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012867:	50                   	push   eax
c0012868:	e8 13 df fe ff       	call   c0000780 <strcmp>
c001286d:	83 c4 10             	add    esp,0x10
c0012870:	85 c0                	test   eax,eax
c0012872:	74 b3                	je     c0012827 <SysOpen(regs*)+0x88>
c0012874:	83 ec 08             	sub    esp,0x8
c0012877:	68 06 24 02 c0       	push   0xc0022406
c001287c:	56                   	push   esi
c001287d:	e8 d2 fe ff ff       	call   c0012754 <string_ends_with(char const*, char const*)>
c0012882:	83 c4 10             	add    esp,0x10
c0012885:	85 c0                	test   eax,eax
c0012887:	75 9e                	jne    c0012827 <SysOpen(regs*)+0x88>
c0012889:	83 ec 08             	sub    esp,0x8
c001288c:	68 10 24 02 c0       	push   0xc0022410
c0012891:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012894:	50                   	push   eax
c0012895:	e8 ba fe ff ff       	call   c0012754 <string_ends_with(char const*, char const*)>
c001289a:	83 c4 10             	add    esp,0x10
c001289d:	85 c0                	test   eax,eax
c001289f:	0f 85 eb 00 00 00    	jne    c0012990 <SysOpen(regs*)+0x1f1>
c00128a5:	83 ec 08             	sub    esp,0x8
c00128a8:	68 15 24 02 c0       	push   0xc0022415
c00128ad:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128b0:	50                   	push   eax
c00128b1:	e8 9e fe ff ff       	call   c0012754 <string_ends_with(char const*, char const*)>
c00128b6:	83 c4 10             	add    esp,0x10
c00128b9:	85 c0                	test   eax,eax
c00128bb:	0f 85 cf 00 00 00    	jne    c0012990 <SysOpen(regs*)+0x1f1>
c00128c1:	83 ec 08             	sub    esp,0x8
c00128c4:	68 11 24 02 c0       	push   0xc0022411
c00128c9:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00128cc:	51                   	push   ecx
c00128cd:	e8 ae de fe ff       	call   c0000780 <strcmp>
c00128d2:	83 c4 10             	add    esp,0x10
c00128d5:	85 c0                	test   eax,eax
c00128d7:	0f 84 b3 00 00 00    	je     c0012990 <SysOpen(regs*)+0x1f1>
c00128dd:	83 ec 08             	sub    esp,0x8
c00128e0:	68 10 24 02 c0       	push   0xc0022410
c00128e5:	56                   	push   esi
c00128e6:	e8 69 fe ff ff       	call   c0012754 <string_ends_with(char const*, char const*)>
c00128eb:	83 c4 10             	add    esp,0x10
c00128ee:	85 c0                	test   eax,eax
c00128f0:	0f 85 9a 00 00 00    	jne    c0012990 <SysOpen(regs*)+0x1f1>
c00128f6:	83 ec 0c             	sub    esp,0xc
c00128f9:	68 14 01 00 00       	push   0x114
c00128fe:	e8 d0 51 ff ff       	call   c0007ad3 <malloc>
c0012903:	83 c4 0c             	add    esp,0xc
c0012906:	89 c6                	mov    esi,eax
c0012908:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001290d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012910:	50                   	push   eax
c0012911:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012914:	52                   	push   edx
c0012915:	56                   	push   esi
c0012916:	e8 a5 91 ff ff       	call   c000bac0 <File::File(char const*, Process*)>
c001291b:	83 c4 10             	add    esp,0x10
c001291e:	85 f6                	test   esi,esi
c0012920:	74 5b                	je     c001297d <SysOpen(regs*)+0x1de>
c0012922:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012925:	0f b6 c2             	movzx  eax,dl
c0012928:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001292b:	89 d0                	mov    eax,edx
c001292d:	83 e0 01             	and    eax,0x1
c0012930:	f6 c2 02             	test   dl,0x2
c0012933:	74 03                	je     c0012938 <SysOpen(regs*)+0x199>
c0012935:	83 c8 02             	or     eax,0x2
c0012938:	f6 c2 04             	test   dl,0x4
c001293b:	74 03                	je     c0012940 <SysOpen(regs*)+0x1a1>
c001293d:	83 c8 04             	or     eax,0x4
c0012940:	f6 c2 08             	test   dl,0x8
c0012943:	74 03                	je     c0012948 <SysOpen(regs*)+0x1a9>
c0012945:	83 c8 0a             	or     eax,0xa
c0012948:	80 e2 10             	and    dl,0x10
c001294b:	74 03                	je     c0012950 <SysOpen(regs*)+0x1b1>
c001294d:	83 c8 12             	or     eax,0x12
c0012950:	83 ec 08             	sub    esp,0x8
c0012953:	50                   	push   eax
c0012954:	56                   	push   esi
c0012955:	e8 84 91 ff ff       	call   c000bade <File::open(FileOpenMode)>
c001295a:	83 c4 10             	add    esp,0x10
c001295d:	85 c0                	test   eax,eax
c001295f:	75 1c                	jne    c001297d <SysOpen(regs*)+0x1de>
c0012961:	83 ec 0c             	sub    esp,0xc
c0012964:	56                   	push   esi
c0012965:	e8 34 68 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c001296a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001296d:	83 c4 10             	add    esp,0x10
c0012970:	89 02                	mov    DWORD PTR [edx],eax
c0012972:	c1 f8 1f             	sar    eax,0x1f
c0012975:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012978:	e9 ba fe ff ff       	jmp    c0012837 <SysOpen(regs*)+0x98>
c001297d:	81 c4 04 01 00 00    	add    esp,0x104
c0012983:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012988:	5b                   	pop    ebx
c0012989:	ba ff ff ff ff       	mov    edx,0xffffffff
c001298e:	5e                   	pop    esi
c001298f:	c3                   	ret    
c0012990:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012993:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012999:	e9 92 fe ff ff       	jmp    c0012830 <SysOpen(regs*)+0x91>

c001299e <KeSystemCall(regs*, void*)>:
c001299e:	53                   	push   ebx
c001299f:	83 ec 08             	sub    esp,0x8
c00129a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00129a6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00129a9:	83 f8 3e             	cmp    eax,0x3e
c00129ac:	77 16                	ja     c00129c4 <KeSystemCall(regs*, void*)+0x26>
c00129ae:	8b 14 85 20 3c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc3e0]
c00129b5:	85 d2                	test   edx,edx
c00129b7:	74 0b                	je     c00129c4 <KeSystemCall(regs*, void*)+0x26>
c00129b9:	83 ec 0c             	sub    esp,0xc
c00129bc:	53                   	push   ebx
c00129bd:	ff d2                	call   edx
c00129bf:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00129c2:	eb 0d                	jmp    c00129d1 <KeSystemCall(regs*, void*)+0x33>
c00129c4:	52                   	push   edx
c00129c5:	52                   	push   edx
c00129c6:	50                   	push   eax
c00129c7:	68 1a 24 02 c0       	push   0xc002241a
c00129cc:	e8 39 7f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00129d1:	83 c4 10             	add    esp,0x10
c00129d4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00129d9:	83 c4 08             	add    esp,0x8
c00129dc:	31 d2                	xor    edx,edx
c00129de:	5b                   	pop    ebx
c00129df:	c3                   	ret    

c00129e0 <KeSwitchEndian16(unsigned short)>:
c00129e0:	83 ec 04             	sub    esp,0x4
c00129e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00129e7:	66 89 04 24          	mov    WORD PTR [esp],ax
c00129eb:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00129ef:	c1 f8 08             	sar    eax,0x8
c00129f2:	89 c2                	mov    edx,eax
c00129f4:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00129f8:	c1 e0 08             	shl    eax,0x8
c00129fb:	09 d0                	or     eax,edx
c00129fd:	83 c4 04             	add    esp,0x4
c0012a00:	c3                   	ret    
c0012a01:	8d 76 00             	lea    esi,[esi+0x0]

c0012a04 <KeSwitchEndian32(unsigned int)>:
c0012a04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a08:	c1 e8 18             	shr    eax,0x18
c0012a0b:	89 c2                	mov    edx,eax
c0012a0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a11:	c1 e0 08             	shl    eax,0x8
c0012a14:	25 00 00 ff 00       	and    eax,0xff0000
c0012a19:	09 c2                	or     edx,eax
c0012a1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a1f:	c1 e8 08             	shr    eax,0x8
c0012a22:	25 00 ff 00 00       	and    eax,0xff00
c0012a27:	09 c2                	or     edx,eax
c0012a29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a2d:	c1 e0 18             	shl    eax,0x18
c0012a30:	09 d0                	or     eax,edx
c0012a32:	c3                   	ret    
c0012a33:	90                   	nop

c0012a34 <EthernetCRC32(unsigned char*, int)>:
c0012a34:	83 ec 10             	sub    esp,0x10
c0012a37:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012a3c:	75 0a                	jne    c0012a48 <EthernetCRC32(unsigned char*, int)+0x14>
c0012a3e:	b8 00 00 00 00       	mov    eax,0x0
c0012a43:	e9 8c 00 00 00       	jmp    c0012ad4 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012a48:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012a4d:	7f 09                	jg     c0012a58 <EthernetCRC32(unsigned char*, int)+0x24>
c0012a4f:	b8 00 00 00 00       	mov    eax,0x0
c0012a54:	eb 7e                	jmp    c0012ad4 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012a56:	66 90                	xchg   ax,ax
c0012a58:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012a60:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012a68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012a6c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012a70:	7d 5a                	jge    c0012acc <EthernetCRC32(unsigned char*, int)+0x98>
c0012a72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012a7a:	01 d0                	add    eax,edx
c0012a7c:	8a 00                	mov    al,BYTE PTR [eax]
c0012a7e:	0f b6 c0             	movzx  eax,al
c0012a81:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012a85:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012a8d:	8d 76 00             	lea    esi,[esi+0x0]
c0012a90:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012a95:	7f 2d                	jg     c0012ac4 <EthernetCRC32(unsigned char*, int)+0x90>
c0012a97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a9b:	83 e0 01             	and    eax,0x1
c0012a9e:	74 10                	je     c0012ab0 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012aa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012aa4:	d1 e8                	shr    eax,1
c0012aa6:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012aab:	eb 0b                	jmp    c0012ab8 <EthernetCRC32(unsigned char*, int)+0x84>
c0012aad:	8d 76 00             	lea    esi,[esi+0x0]
c0012ab0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ab4:	d1 e8                	shr    eax,1
c0012ab6:	66 90                	xchg   ax,ax
c0012ab8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012abc:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012ac1:	eb cd                	jmp    c0012a90 <EthernetCRC32(unsigned char*, int)+0x5c>
c0012ac3:	90                   	nop
c0012ac4:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012ac9:	eb 9d                	jmp    c0012a68 <EthernetCRC32(unsigned char*, int)+0x34>
c0012acb:	90                   	nop
c0012acc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ad0:	f7 d0                	not    eax
c0012ad2:	66 90                	xchg   ax,ax
c0012ad4:	83 c4 10             	add    esp,0x10
c0012ad7:	c3                   	ret    

c0012ad8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012ad8:	83 ec 2c             	sub    esp,0x2c
c0012adb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012adf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012ae4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ae8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012aec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012af0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012af3:	0f b7 c0             	movzx  eax,ax
c0012af6:	3d 06 08 00 00       	cmp    eax,0x806
c0012afb:	75 13                	jne    c0012b10 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012afd:	83 ec 0c             	sub    esp,0xc
c0012b00:	68 2e 24 02 c0       	push   0xc002242e
c0012b05:	e8 00 7e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012b0a:	83 c4 10             	add    esp,0x10
c0012b0d:	eb 25                	jmp    c0012b34 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012b0f:	90                   	nop
c0012b10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012b14:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b17:	0f b7 c0             	movzx  eax,ax
c0012b1a:	3d 00 08 00 00       	cmp    eax,0x800
c0012b1f:	75 13                	jne    c0012b34 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012b21:	83 ec 0c             	sub    esp,0xc
c0012b24:	68 44 24 02 c0       	push   0xc0022444
c0012b29:	e8 dc 7d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0012b2e:	83 c4 10             	add    esp,0x10
c0012b31:	8d 76 00             	lea    esi,[esi+0x0]
c0012b34:	90                   	nop
c0012b35:	83 c4 2c             	add    esp,0x2c
c0012b38:	c3                   	ret    

c0012b39 <CmOpen(char const*)>:
c0012b39:	57                   	push   edi
c0012b3a:	56                   	push   esi
c0012b3b:	53                   	push   ebx
c0012b3c:	83 ec 1c             	sub    esp,0x1c
c0012b3f:	6a 30                	push   0x30
c0012b41:	e8 8d 4f ff ff       	call   c0007ad3 <malloc>
c0012b46:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012b4d:	89 c3                	mov    ebx,eax
c0012b4f:	e8 7f 4f ff ff       	call   c0007ad3 <malloc>
c0012b54:	83 c4 0c             	add    esp,0xc
c0012b57:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0012b5d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012b61:	89 c6                	mov    esi,eax
c0012b63:	50                   	push   eax
c0012b64:	e8 57 8f ff ff       	call   c000bac0 <File::File(char const*, Process*)>
c0012b69:	83 c4 0c             	add    esp,0xc
c0012b6c:	89 33                	mov    DWORD PTR [ebx],esi
c0012b6e:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012b72:	50                   	push   eax
c0012b73:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012b77:	50                   	push   eax
c0012b78:	56                   	push   esi
c0012b79:	e8 62 92 ff ff       	call   c000bde0 <File::stat(unsigned long long*, bool*)>
c0012b7e:	5a                   	pop    edx
c0012b7f:	59                   	pop    ecx
c0012b80:	6a 01                	push   0x1
c0012b82:	ff 33                	push   DWORD PTR [ebx]
c0012b84:	e8 55 8f ff ff       	call   c000bade <File::open(FileOpenMode)>
c0012b89:	5e                   	pop    esi
c0012b8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012b8e:	e8 40 4f ff ff       	call   c0007ad3 <malloc>
c0012b93:	5a                   	pop    edx
c0012b94:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012b98:	89 c7                	mov    edi,eax
c0012b9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012b9c:	8b 10                	mov    edx,DWORD PTR [eax]
c0012b9e:	56                   	push   esi
c0012b9f:	57                   	push   edi
c0012ba0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012ba4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012ba8:	50                   	push   eax
c0012ba9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012bac:	83 c4 14             	add    esp,0x14
c0012baf:	ff 33                	push   DWORD PTR [ebx]
c0012bb1:	e8 86 8f ff ff       	call   c000bb3c <File::close()>
c0012bb6:	59                   	pop    ecx
c0012bb7:	58                   	pop    eax
c0012bb8:	6a 13                	push   0x13
c0012bba:	ff 33                	push   DWORD PTR [ebx]
c0012bbc:	e8 1d 8f ff ff       	call   c000bade <File::open(FileOpenMode)>
c0012bc1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012bc3:	8b 10                	mov    edx,DWORD PTR [eax]
c0012bc5:	89 34 24             	mov    DWORD PTR [esp],esi
c0012bc8:	57                   	push   edi
c0012bc9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012bcd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012bd1:	50                   	push   eax
c0012bd2:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012bd5:	83 c4 14             	add    esp,0x14
c0012bd8:	57                   	push   edi
c0012bd9:	e8 05 4f ff ff       	call   c0007ae3 <free>
c0012bde:	83 c4 10             	add    esp,0x10
c0012be1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012be4:	75 10                	jne    c0012bf6 <CmOpen(char const*)+0xbd>
c0012be6:	83 ec 0c             	sub    esp,0xc
c0012be9:	68 59 24 02 c0       	push   0xc0022459
c0012bee:	e8 14 e9 ff ff       	call   c0011507 <KePanic(char const*)>
c0012bf3:	83 c4 10             	add    esp,0x10
c0012bf6:	50                   	push   eax
c0012bf7:	6a 00                	push   0x0
c0012bf9:	6a 00                	push   0x0
c0012bfb:	ff 33                	push   DWORD PTR [ebx]
c0012bfd:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012c00:	e8 97 8f ff ff       	call   c000bb9c <File::seek(unsigned long long)>
c0012c05:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c07:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c09:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c0c:	57                   	push   edi
c0012c0d:	6a 00                	push   0x0
c0012c0f:	6a 2b                	push   0x2b
c0012c11:	50                   	push   eax
c0012c12:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012c15:	83 c4 1c             	add    esp,0x1c
c0012c18:	6a 00                	push   0x0
c0012c1a:	6a 00                	push   0x0
c0012c1c:	ff 33                	push   DWORD PTR [ebx]
c0012c1e:	e8 79 8f ff ff       	call   c000bb9c <File::seek(unsigned long long)>
c0012c23:	83 c4 0c             	add    esp,0xc
c0012c26:	6a 08                	push   0x8
c0012c28:	68 6a 24 02 c0       	push   0xc002246a
c0012c2d:	57                   	push   edi
c0012c2e:	e8 4d d7 fe ff       	call   c0000380 <memcmp>
c0012c33:	83 c4 10             	add    esp,0x10
c0012c36:	85 c0                	test   eax,eax
c0012c38:	74 10                	je     c0012c4a <CmOpen(char const*)+0x111>
c0012c3a:	83 ec 0c             	sub    esp,0xc
c0012c3d:	68 73 24 02 c0       	push   0xc0022473
c0012c42:	e8 c0 e8 ff ff       	call   c0011507 <KePanic(char const*)>
c0012c47:	83 c4 10             	add    esp,0x10
c0012c4a:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012c4e:	83 c4 10             	add    esp,0x10
c0012c51:	89 d8                	mov    eax,ebx
c0012c53:	5b                   	pop    ebx
c0012c54:	5e                   	pop    esi
c0012c55:	5f                   	pop    edi
c0012c56:	c3                   	ret    

c0012c57 <CmClose(Reghive_Tag*)>:
c0012c57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c5b:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012c5f:	74 0b                	je     c0012c6c <CmClose(Reghive_Tag*)+0x15>
c0012c61:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012c67:	e9 d0 8e ff ff       	jmp    c000bb3c <File::close()>
c0012c6c:	c3                   	ret    

c0012c6d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012c6d:	53                   	push   ebx
c0012c6e:	83 ec 18             	sub    esp,0x18
c0012c71:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012c75:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012c79:	74 29                	je     c0012ca4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012c7b:	50                   	push   eax
c0012c7c:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012c81:	99                   	cdq    
c0012c82:	52                   	push   edx
c0012c83:	50                   	push   eax
c0012c84:	ff 33                	push   DWORD PTR [ebx]
c0012c86:	e8 11 8f ff ff       	call   c000bb9c <File::seek(unsigned long long)>
c0012c8b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c8d:	5a                   	pop    edx
c0012c8e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012c92:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c94:	51                   	push   ecx
c0012c95:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012c99:	6a 00                	push   0x0
c0012c9b:	6a 2b                	push   0x2b
c0012c9d:	50                   	push   eax
c0012c9e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012ca1:	83 c4 20             	add    esp,0x20
c0012ca4:	83 c4 18             	add    esp,0x18
c0012ca7:	5b                   	pop    ebx
c0012ca8:	c3                   	ret    

c0012ca9 <CmGetString(Reghive_Tag*, int, char*)>:
c0012ca9:	55                   	push   ebp
c0012caa:	57                   	push   edi
c0012cab:	56                   	push   esi
c0012cac:	53                   	push   ebx
c0012cad:	31 db                	xor    ebx,ebx
c0012caf:	83 ec 70             	sub    esp,0x70
c0012cb2:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012cb6:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012cbd:	50                   	push   eax
c0012cbe:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012cc5:	55                   	push   ebp
c0012cc6:	e8 a2 ff ff ff       	call   c0012c6d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ccb:	83 c4 10             	add    esp,0x10
c0012cce:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012cd3:	c1 e0 08             	shl    eax,0x8
c0012cd6:	89 c2                	mov    edx,eax
c0012cd8:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012cdd:	09 d0                	or     eax,edx
c0012cdf:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012ce4:	c1 e0 08             	shl    eax,0x8
c0012ce7:	09 d0                	or     eax,edx
c0012ce9:	74 25                	je     c0012d10 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012ceb:	52                   	push   edx
c0012cec:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012cf0:	52                   	push   edx
c0012cf1:	6b fb 0d             	imul   edi,ebx,0xd
c0012cf4:	50                   	push   eax
c0012cf5:	55                   	push   ebp
c0012cf6:	e8 72 ff ff ff       	call   c0012c6d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012cfb:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012cff:	b9 27 00 00 00       	mov    ecx,0x27
c0012d04:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012d0b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d0d:	83 c4 10             	add    esp,0x10
c0012d10:	83 c3 03             	add    ebx,0x3
c0012d13:	83 fb 15             	cmp    ebx,0x15
c0012d16:	75 b6                	jne    c0012cce <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012d18:	83 c4 6c             	add    esp,0x6c
c0012d1b:	5b                   	pop    ebx
c0012d1c:	5e                   	pop    esi
c0012d1d:	5f                   	pop    edi
c0012d1e:	5d                   	pop    ebp
c0012d1f:	c3                   	ret    

c0012d20 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012d20:	83 ec 40             	sub    esp,0x40
c0012d23:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012d27:	50                   	push   eax
c0012d28:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012d2c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012d30:	e8 38 ff ff ff       	call   c0012c6d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d35:	83 c4 10             	add    esp,0x10
c0012d38:	83 c8 ff             	or     eax,0xffffffff
c0012d3b:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012d40:	75 19                	jne    c0012d5b <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012d42:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012d47:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012d4c:	c1 e0 08             	shl    eax,0x8
c0012d4f:	09 c2                	or     edx,eax
c0012d51:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012d56:	c1 e0 10             	shl    eax,0x10
c0012d59:	09 d0                	or     eax,edx
c0012d5b:	83 c4 3c             	add    esp,0x3c
c0012d5e:	c3                   	ret    

c0012d5f <CmGetNext(Reghive_Tag*, int)>:
c0012d5f:	83 ec 40             	sub    esp,0x40
c0012d62:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012d66:	50                   	push   eax
c0012d67:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012d6b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012d6f:	e8 f9 fe ff ff       	call   c0012c6d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d74:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012d79:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012d7e:	c1 e0 08             	shl    eax,0x8
c0012d81:	09 c2                	or     edx,eax
c0012d83:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012d88:	83 c4 4c             	add    esp,0x4c
c0012d8b:	c1 e0 10             	shl    eax,0x10
c0012d8e:	09 d0                	or     eax,edx
c0012d90:	c3                   	ret    

c0012d91 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012d91:	53                   	push   ebx
c0012d92:	83 ec 18             	sub    esp,0x18
c0012d95:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012d99:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012d9d:	74 29                	je     c0012dc8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012d9f:	50                   	push   eax
c0012da0:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012da5:	99                   	cdq    
c0012da6:	52                   	push   edx
c0012da7:	50                   	push   eax
c0012da8:	ff 33                	push   DWORD PTR [ebx]
c0012daa:	e8 ed 8d ff ff       	call   c000bb9c <File::seek(unsigned long long)>
c0012daf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012db1:	5a                   	pop    edx
c0012db2:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012db6:	8b 10                	mov    edx,DWORD PTR [eax]
c0012db8:	51                   	push   ecx
c0012db9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012dbd:	6a 00                	push   0x0
c0012dbf:	6a 2b                	push   0x2b
c0012dc1:	50                   	push   eax
c0012dc2:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012dc5:	83 c4 20             	add    esp,0x20
c0012dc8:	83 c4 18             	add    esp,0x18
c0012dcb:	5b                   	pop    ebx
c0012dcc:	c3                   	ret    

c0012dcd <CmFreeExtent(Reghive_Tag*, int)>:
c0012dcd:	53                   	push   ebx
c0012dce:	83 ec 3c             	sub    esp,0x3c
c0012dd1:	6a 2b                	push   0x2b
c0012dd3:	6a 00                	push   0x0
c0012dd5:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012dd9:	53                   	push   ebx
c0012dda:	e8 11 d7 fe ff       	call   c00004f0 <memset>
c0012ddf:	83 c4 0c             	add    esp,0xc
c0012de2:	53                   	push   ebx
c0012de3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012de7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012deb:	e8 a1 ff ff ff       	call   c0012d91 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012df0:	83 c4 48             	add    esp,0x48
c0012df3:	5b                   	pop    ebx
c0012df4:	c3                   	ret    

c0012df5 <CmUpdateHeader(Reghive_Tag*)>:
c0012df5:	83 ec 0c             	sub    esp,0xc
c0012df8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dfc:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012e00:	74 10                	je     c0012e12 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012e02:	52                   	push   edx
c0012e03:	8d 50 05             	lea    edx,[eax+0x5]
c0012e06:	52                   	push   edx
c0012e07:	6a 00                	push   0x0
c0012e09:	50                   	push   eax
c0012e0a:	e8 82 ff ff ff       	call   c0012d91 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012e0f:	83 c4 10             	add    esp,0x10
c0012e12:	83 c4 0c             	add    esp,0xc
c0012e15:	c3                   	ret    

c0012e16 <CmExpand(Reghive_Tag*, int)>:
c0012e16:	55                   	push   ebp
c0012e17:	57                   	push   edi
c0012e18:	83 cf ff             	or     edi,0xffffffff
c0012e1b:	56                   	push   esi
c0012e1c:	53                   	push   ebx
c0012e1d:	83 ec 3c             	sub    esp,0x3c
c0012e20:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012e24:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012e28:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012e2c:	74 59                	je     c0012e87 <CmExpand(Reghive_Tag*, int)+0x71>
c0012e2e:	50                   	push   eax
c0012e2f:	31 d2                	xor    edx,edx
c0012e31:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012e35:	31 ff                	xor    edi,edi
c0012e37:	52                   	push   edx
c0012e38:	50                   	push   eax
c0012e39:	ff 33                	push   DWORD PTR [ebx]
c0012e3b:	e8 5c 8d ff ff       	call   c000bb9c <File::seek(unsigned long long)>
c0012e40:	83 c4 0c             	add    esp,0xc
c0012e43:	6a 2b                	push   0x2b
c0012e45:	6a 00                	push   0x0
c0012e47:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0012e4b:	55                   	push   ebp
c0012e4c:	e8 9f d6 fe ff       	call   c00004f0 <memset>
c0012e51:	83 c4 10             	add    esp,0x10
c0012e54:	39 f7                	cmp    edi,esi
c0012e56:	7d 1b                	jge    c0012e73 <CmExpand(Reghive_Tag*, int)+0x5d>
c0012e58:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e5a:	83 ec 0c             	sub    esp,0xc
c0012e5d:	47                   	inc    edi
c0012e5e:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012e62:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e64:	51                   	push   ecx
c0012e65:	55                   	push   ebp
c0012e66:	6a 00                	push   0x0
c0012e68:	6a 2b                	push   0x2b
c0012e6a:	50                   	push   eax
c0012e6b:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012e6e:	83 c4 20             	add    esp,0x20
c0012e71:	eb e1                	jmp    c0012e54 <CmExpand(Reghive_Tag*, int)+0x3e>
c0012e73:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0012e76:	83 ec 0c             	sub    esp,0xc
c0012e79:	01 fe                	add    esi,edi
c0012e7b:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0012e7e:	53                   	push   ebx
c0012e7f:	e8 71 ff ff ff       	call   c0012df5 <CmUpdateHeader(Reghive_Tag*)>
c0012e84:	83 c4 10             	add    esp,0x10
c0012e87:	83 c4 3c             	add    esp,0x3c
c0012e8a:	89 f8                	mov    eax,edi
c0012e8c:	5b                   	pop    ebx
c0012e8d:	5e                   	pop    esi
c0012e8e:	5f                   	pop    edi
c0012e8f:	5d                   	pop    ebp
c0012e90:	c3                   	ret    

c0012e91 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012e91:	55                   	push   ebp
c0012e92:	57                   	push   edi
c0012e93:	56                   	push   esi
c0012e94:	53                   	push   ebx
c0012e95:	83 cb ff             	or     ebx,0xffffffff
c0012e98:	83 ec 1c             	sub    esp,0x1c
c0012e9b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012e9f:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012ea3:	74 68                	je     c0012f0d <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012ea5:	51                   	push   ecx
c0012ea6:	be 2b 00 00 00       	mov    esi,0x2b
c0012eab:	6a 00                	push   0x0
c0012ead:	31 ff                	xor    edi,edi
c0012eaf:	6a 00                	push   0x0
c0012eb1:	31 db                	xor    ebx,ebx
c0012eb3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012eb6:	e8 e1 8c ff ff       	call   c000bb9c <File::seek(unsigned long long)>
c0012ebb:	83 c4 10             	add    esp,0x10
c0012ebe:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012ec1:	76 3b                	jbe    c0012efe <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012ec3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012ec6:	83 ec 0c             	sub    esp,0xc
c0012ec9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012ecd:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ecf:	51                   	push   ecx
c0012ed0:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012ed4:	51                   	push   ecx
c0012ed5:	6a 00                	push   0x0
c0012ed7:	6a 01                	push   0x1
c0012ed9:	50                   	push   eax
c0012eda:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012edd:	83 c4 20             	add    esp,0x20
c0012ee0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012ee5:	74 26                	je     c0012f0d <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012ee7:	52                   	push   edx
c0012ee8:	43                   	inc    ebx
c0012ee9:	57                   	push   edi
c0012eea:	56                   	push   esi
c0012eeb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012eee:	e8 a9 8c ff ff       	call   c000bb9c <File::seek(unsigned long long)>
c0012ef3:	83 c6 2b             	add    esi,0x2b
c0012ef6:	83 d7 00             	adc    edi,0x0
c0012ef9:	83 c4 10             	add    esp,0x10
c0012efc:	eb c0                	jmp    c0012ebe <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012efe:	50                   	push   eax
c0012eff:	50                   	push   eax
c0012f00:	6a 40                	push   0x40
c0012f02:	55                   	push   ebp
c0012f03:	e8 0e ff ff ff       	call   c0012e16 <CmExpand(Reghive_Tag*, int)>
c0012f08:	83 c4 10             	add    esp,0x10
c0012f0b:	89 c3                	mov    ebx,eax
c0012f0d:	83 c4 1c             	add    esp,0x1c
c0012f10:	89 d8                	mov    eax,ebx
c0012f12:	5b                   	pop    ebx
c0012f13:	5e                   	pop    esi
c0012f14:	5f                   	pop    edi
c0012f15:	5d                   	pop    ebp
c0012f16:	c3                   	ret    

c0012f17 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012f17:	55                   	push   ebp
c0012f18:	57                   	push   edi
c0012f19:	56                   	push   esi
c0012f1a:	53                   	push   ebx
c0012f1b:	81 ec 88 00 00 00    	sub    esp,0x88
c0012f21:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012f28:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012f2f:	e8 5d ff ff ff       	call   c0012e91 <CmFindUnusedExtent(Reghive_Tag*)>
c0012f34:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012f38:	83 c4 0c             	add    esp,0xc
c0012f3b:	6a 2b                	push   0x2b
c0012f3d:	6a 00                	push   0x0
c0012f3f:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012f43:	55                   	push   ebp
c0012f44:	e8 a7 d5 fe ff       	call   c00004f0 <memset>
c0012f49:	83 c4 10             	add    esp,0x10
c0012f4c:	85 db                	test   ebx,ebx
c0012f4e:	74 12                	je     c0012f62 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012f50:	51                   	push   ecx
c0012f51:	55                   	push   ebp
c0012f52:	53                   	push   ebx
c0012f53:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012f5a:	e8 0e fd ff ff       	call   c0012c6d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012f5f:	83 c4 10             	add    esp,0x10
c0012f62:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012f66:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012f6d:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012f72:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f74:	85 db                	test   ebx,ebx
c0012f76:	74 49                	je     c0012fc1 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012f78:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012f7d:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012f82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012f86:	c1 e0 08             	shl    eax,0x8
c0012f89:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012f8f:	09 c8                	or     eax,ecx
c0012f91:	74 11                	je     c0012fa4 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012f93:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012f97:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012f9b:	c1 e8 10             	shr    eax,0x10
c0012f9e:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012fa2:	eb 0f                	jmp    c0012fb3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012fa4:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012fa9:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012fae:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012fb3:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012fb7:	c1 ea 08             	shr    edx,0x8
c0012fba:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012fbf:	eb 0f                	jmp    c0012fd0 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012fc1:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012fc6:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012fcb:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012fd0:	52                   	push   edx
c0012fd1:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012fd5:	50                   	push   eax
c0012fd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012fda:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012fe1:	e8 ab fd ff ff       	call   c0012d91 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012fe6:	83 c4 10             	add    esp,0x10
c0012fe9:	85 db                	test   ebx,ebx
c0012feb:	74 12                	je     c0012fff <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012fed:	50                   	push   eax
c0012fee:	55                   	push   ebp
c0012fef:	53                   	push   ebx
c0012ff0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012ff7:	e8 95 fd ff ff       	call   c0012d91 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012ffc:	83 c4 10             	add    esp,0x10
c0012fff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013003:	83 c4 7c             	add    esp,0x7c
c0013006:	5b                   	pop    ebx
c0013007:	5e                   	pop    esi
c0013008:	5f                   	pop    edi
c0013009:	5d                   	pop    ebp
c001300a:	c3                   	ret    

c001300b <CmSetString(Reghive_Tag*, int, char const*)>:
c001300b:	55                   	push   ebp
c001300c:	57                   	push   edi
c001300d:	56                   	push   esi
c001300e:	53                   	push   ebx
c001300f:	bb 27 00 00 00       	mov    ebx,0x27
c0013014:	81 ec 88 00 00 00    	sub    esp,0x88
c001301a:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0013021:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0013028:	e8 53 d5 fe ff       	call   c0000580 <strlen>
c001302d:	8d 48 26             	lea    ecx,[eax+0x26]
c0013030:	89 c8                	mov    eax,ecx
c0013032:	99                   	cdq    
c0013033:	f7 fb                	idiv   ebx
c0013035:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013039:	83 c4 10             	add    esp,0x10
c001303c:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0013042:	7e 10                	jle    c0013054 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0013044:	83 ec 0c             	sub    esp,0xc
c0013047:	68 84 24 02 c0       	push   0xc0022484
c001304c:	e8 b6 e4 ff ff       	call   c0011507 <KePanic(char const*)>
c0013051:	83 c4 10             	add    esp,0x10
c0013054:	53                   	push   ebx
c0013055:	31 ed                	xor    ebp,ebp
c0013057:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c001305b:	53                   	push   ebx
c001305c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013063:	57                   	push   edi
c0013064:	e8 04 fc ff ff       	call   c0012c6d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013069:	83 c4 10             	add    esp,0x10
c001306c:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c0013070:	89 f0                	mov    eax,esi
c0013072:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c0013076:	c1 e0 08             	shl    eax,0x8
c0013079:	09 c6                	or     esi,eax
c001307b:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c001307f:	c1 e6 08             	shl    esi,0x8
c0013082:	09 c6                	or     esi,eax
c0013084:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0013088:	7e 72                	jle    c00130fc <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c001308a:	85 f6                	test   esi,esi
c001308c:	75 25                	jne    c00130b3 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c001308e:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0013093:	8d 44 24 45          	lea    eax,[esp+0x45]
c0013097:	50                   	push   eax
c0013098:	6a 00                	push   0x0
c001309a:	6a 00                	push   0x0
c001309c:	57                   	push   edi
c001309d:	e8 75 fe ff ff       	call   c0012f17 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00130a2:	83 c4 10             	add    esp,0x10
c00130a5:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c00130a8:	89 c6                	mov    esi,eax
c00130aa:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c00130ad:	c1 f8 10             	sar    eax,0x10
c00130b0:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c00130b3:	51                   	push   ecx
c00130b4:	8d 54 24 49          	lea    edx,[esp+0x49]
c00130b8:	52                   	push   edx
c00130b9:	56                   	push   esi
c00130ba:	57                   	push   edi
c00130bb:	e8 ad fb ff ff       	call   c0012c6d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00130c0:	83 c4 0c             	add    esp,0xc
c00130c3:	6a 27                	push   0x27
c00130c5:	6a 00                	push   0x0
c00130c7:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00130cb:	51                   	push   ecx
c00130cc:	e8 1f d4 fe ff       	call   c00004f0 <memset>
c00130d1:	6b c5 27             	imul   eax,ebp,0x27
c00130d4:	83 c4 0c             	add    esp,0xc
c00130d7:	6a 27                	push   0x27
c00130d9:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c00130e0:	50                   	push   eax
c00130e1:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00130e5:	51                   	push   ecx
c00130e6:	e8 a5 d5 fe ff       	call   c0000690 <strncpy>
c00130eb:	83 c4 0c             	add    esp,0xc
c00130ee:	8d 54 24 49          	lea    edx,[esp+0x49]
c00130f2:	52                   	push   edx
c00130f3:	56                   	push   esi
c00130f4:	57                   	push   edi
c00130f5:	e8 97 fc ff ff       	call   c0012d91 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00130fa:	eb 19                	jmp    c0013115 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c00130fc:	85 f6                	test   esi,esi
c00130fe:	74 18                	je     c0013118 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0013100:	52                   	push   edx
c0013101:	52                   	push   edx
c0013102:	56                   	push   esi
c0013103:	57                   	push   edi
c0013104:	e8 c4 fc ff ff       	call   c0012dcd <CmFreeExtent(Reghive_Tag*, int)>
c0013109:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c001310d:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0013111:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0013115:	83 c4 10             	add    esp,0x10
c0013118:	45                   	inc    ebp
c0013119:	83 c3 03             	add    ebx,0x3
c001311c:	83 fd 07             	cmp    ebp,0x7
c001311f:	0f 85 47 ff ff ff    	jne    c001306c <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0013125:	50                   	push   eax
c0013126:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c001312a:	50                   	push   eax
c001312b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013132:	57                   	push   edi
c0013133:	e8 59 fc ff ff       	call   c0012d91 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013138:	81 c4 8c 00 00 00    	add    esp,0x8c
c001313e:	5b                   	pop    ebx
c001313f:	5e                   	pop    esi
c0013140:	5f                   	pop    edi
c0013141:	5d                   	pop    ebp
c0013142:	c3                   	ret    

c0013143 <CmGetMatch(char*, char*, bool, bool*)>:
c0013143:	56                   	push   esi
c0013144:	53                   	push   ebx
c0013145:	50                   	push   eax
c0013146:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001314b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001314f:	74 25                	je     c0013176 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0013151:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013154:	31 db                	xor    ebx,ebx
c0013156:	50                   	push   eax
c0013157:	50                   	push   eax
c0013158:	8d 04 9d 20 3d 02 c0 	lea    eax,[ebx*4-0x3ffdc2e0]
c001315f:	50                   	push   eax
c0013160:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013164:	e8 17 d6 fe ff       	call   c0000780 <strcmp>
c0013169:	83 c4 10             	add    esp,0x10
c001316c:	85 c0                	test   eax,eax
c001316e:	74 2e                	je     c001319e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0013170:	43                   	inc    ebx
c0013171:	83 fb 3f             	cmp    ebx,0x3f
c0013174:	75 e0                	jne    c0013156 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0013176:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013179:	31 db                	xor    ebx,ebx
c001317b:	51                   	push   ecx
c001317c:	51                   	push   ecx
c001317d:	8d 04 9d 20 3d 02 c0 	lea    eax,[ebx*4-0x3ffdc2e0]
c0013184:	50                   	push   eax
c0013185:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013189:	e8 f2 d5 fe ff       	call   c0000780 <strcmp>
c001318e:	83 c4 10             	add    esp,0x10
c0013191:	85 c0                	test   eax,eax
c0013193:	74 09                	je     c001319e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0013195:	43                   	inc    ebx
c0013196:	83 fb 3f             	cmp    ebx,0x3f
c0013199:	75 e0                	jne    c001317b <CmGetMatch(char*, char*, bool, bool*)+0x38>
c001319b:	83 cb ff             	or     ebx,0xffffffff
c001319e:	5a                   	pop    edx
c001319f:	89 d8                	mov    eax,ebx
c00131a1:	5b                   	pop    ebx
c00131a2:	5e                   	pop    esi
c00131a3:	c3                   	ret    

c00131a4 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c00131a4:	55                   	push   ebp
c00131a5:	31 c0                	xor    eax,eax
c00131a7:	57                   	push   edi
c00131a8:	56                   	push   esi
c00131a9:	53                   	push   ebx
c00131aa:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00131ae:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00131b2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00131b6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00131ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00131bc:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c00131bf:	83 fd 1f             	cmp    ebp,0x1f
c00131c2:	7f 0b                	jg     c00131cf <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c00131c4:	0f b6 c2             	movzx  eax,dl
c00131c7:	d3 e0                	shl    eax,cl
c00131c9:	09 07                	or     DWORD PTR [edi],eax
c00131cb:	b0 01                	mov    al,0x1
c00131cd:	01 33                	add    DWORD PTR [ebx],esi
c00131cf:	5b                   	pop    ebx
c00131d0:	5e                   	pop    esi
c00131d1:	5f                   	pop    edi
c00131d2:	5d                   	pop    ebp
c00131d3:	c3                   	ret    

c00131d4 <CmGetShift(unsigned int*, int*, int, bool*)>:
c00131d4:	57                   	push   edi
c00131d5:	56                   	push   esi
c00131d6:	53                   	push   ebx
c00131d7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00131db:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00131df:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00131e3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00131e7:	39 0b                	cmp    DWORD PTR [ebx],ecx
c00131e9:	7c 17                	jl     c0013202 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c00131eb:	8b 17                	mov    edx,DWORD PTR [edi]
c00131ed:	b8 01 00 00 00       	mov    eax,0x1
c00131f2:	d3 e0                	shl    eax,cl
c00131f4:	48                   	dec    eax
c00131f5:	21 d0                	and    eax,edx
c00131f7:	d3 ea                	shr    edx,cl
c00131f9:	89 17                	mov    DWORD PTR [edi],edx
c00131fb:	29 0b                	sub    DWORD PTR [ebx],ecx
c00131fd:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013200:	eb 05                	jmp    c0013207 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0013202:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013205:	31 c0                	xor    eax,eax
c0013207:	5b                   	pop    ebx
c0013208:	5e                   	pop    esi
c0013209:	5f                   	pop    edi
c001320a:	c3                   	ret    

c001320b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c001320b:	83 ec 40             	sub    esp,0x40
c001320e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013212:	50                   	push   eax
c0013213:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013217:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001321b:	e8 4d fa ff ff       	call   c0012c6d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013220:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0013224:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0013228:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c001322c:	89 10                	mov    DWORD PTR [eax],edx
c001322e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0013231:	83 c4 4c             	add    esp,0x4c
c0013234:	c3                   	ret    

c0013235 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0013235:	55                   	push   ebp
c0013236:	57                   	push   edi
c0013237:	56                   	push   esi
c0013238:	53                   	push   ebx
c0013239:	83 ec 40             	sub    esp,0x40
c001323c:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0013240:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0013244:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0013248:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c001324c:	53                   	push   ebx
c001324d:	56                   	push   esi
c001324e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013252:	e8 16 fa ff ff       	call   c0012c6d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013257:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c001325b:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c001325f:	83 c4 0c             	add    esp,0xc
c0013262:	53                   	push   ebx
c0013263:	56                   	push   esi
c0013264:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013268:	e8 24 fb ff ff       	call   c0012d91 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001326d:	83 c4 4c             	add    esp,0x4c
c0013270:	5b                   	pop    ebx
c0013271:	5e                   	pop    esi
c0013272:	5f                   	pop    edi
c0013273:	5d                   	pop    ebp
c0013274:	c3                   	ret    

c0013275 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0013275:	55                   	push   ebp
c0013276:	57                   	push   edi
c0013277:	56                   	push   esi
c0013278:	31 f6                	xor    esi,esi
c001327a:	53                   	push   ebx
c001327b:	31 db                	xor    ebx,ebx
c001327d:	83 ec 40             	sub    esp,0x40
c0013280:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013288:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013290:	6a 12                	push   0x12
c0013292:	68 ee 00 00 00       	push   0xee
c0013297:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001329b:	e8 50 d2 fe ff       	call   c00004f0 <memset>
c00132a0:	83 c4 10             	add    esp,0x10
c00132a3:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00132a7:	6a 08                	push   0x8
c00132a9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00132ad:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c00132b1:	50                   	push   eax
c00132b2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00132b6:	55                   	push   ebp
c00132b7:	57                   	push   edi
c00132b8:	e8 e7 fe ff ff       	call   c00131a4 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00132bd:	83 c4 10             	add    esp,0x10
c00132c0:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00132c4:	50                   	push   eax
c00132c5:	6a 06                	push   0x6
c00132c7:	55                   	push   ebp
c00132c8:	57                   	push   edi
c00132c9:	e8 06 ff ff ff       	call   c00131d4 <CmGetShift(unsigned int*, int*, int, bool*)>
c00132ce:	83 c4 10             	add    esp,0x10
c00132d1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00132d6:	74 07                	je     c00132df <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c00132d8:	46                   	inc    esi
c00132d9:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c00132dd:	eb e1                	jmp    c00132c0 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c00132df:	43                   	inc    ebx
c00132e0:	83 fb 12             	cmp    ebx,0x12
c00132e3:	75 c2                	jne    c00132a7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c00132e5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00132e9:	31 f6                	xor    esi,esi
c00132eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00132ee:	50                   	push   eax
c00132ef:	50                   	push   eax
c00132f0:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c00132f5:	46                   	inc    esi
c00132f6:	8d 04 85 20 3d 02 c0 	lea    eax,[eax*4-0x3ffdc2e0]
c00132fd:	50                   	push   eax
c00132fe:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0013302:	e8 69 d5 fe ff       	call   c0000870 <strcat>
c0013307:	83 c4 10             	add    esp,0x10
c001330a:	83 fe 18             	cmp    esi,0x18
c001330d:	75 df                	jne    c00132ee <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c001330f:	83 c4 3c             	add    esp,0x3c
c0013312:	31 c0                	xor    eax,eax
c0013314:	5b                   	pop    ebx
c0013315:	5e                   	pop    esi
c0013316:	5f                   	pop    edi
c0013317:	5d                   	pop    ebp
c0013318:	c3                   	ret    

c0013319 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0013319:	83 ec 40             	sub    esp,0x40
c001331c:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013320:	50                   	push   eax
c0013321:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013325:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013329:	e8 3f f9 ff ff       	call   c0012c6d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001332e:	58                   	pop    eax
c001332f:	5a                   	pop    edx
c0013330:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013334:	8d 44 24 15          	lea    eax,[esp+0x15]
c0013338:	50                   	push   eax
c0013339:	e8 37 ff ff ff       	call   c0013275 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c001333e:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0013343:	83 c4 4c             	add    esp,0x4c
c0013346:	c3                   	ret    

c0013347 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0013347:	55                   	push   ebp
c0013348:	57                   	push   edi
c0013349:	56                   	push   esi
c001334a:	53                   	push   ebx
c001334b:	31 db                	xor    ebx,ebx
c001334d:	83 ec 70             	sub    esp,0x70
c0013350:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0013357:	6a 30                	push   0x30
c0013359:	6a 00                	push   0x0
c001335b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001335f:	56                   	push   esi
c0013360:	e8 8b d1 fe ff       	call   c00004f0 <memset>
c0013365:	83 c4 10             	add    esp,0x10
c0013368:	83 ec 0c             	sub    esp,0xc
c001336b:	57                   	push   edi
c001336c:	e8 0f d2 fe ff       	call   c0000580 <strlen>
c0013371:	83 c4 10             	add    esp,0x10
c0013374:	39 d8                	cmp    eax,ebx
c0013376:	76 16                	jbe    c001338e <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0013378:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c001337c:	83 ec 0c             	sub    esp,0xc
c001337f:	50                   	push   eax
c0013380:	e8 db d5 fe ff       	call   c0000960 <toupper>
c0013385:	83 c4 10             	add    esp,0x10
c0013388:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001338b:	43                   	inc    ebx
c001338c:	eb da                	jmp    c0013368 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c001338e:	52                   	push   edx
c001338f:	31 db                	xor    ebx,ebx
c0013391:	6a 18                	push   0x18
c0013393:	31 ff                	xor    edi,edi
c0013395:	6a 3f                	push   0x3f
c0013397:	8d 44 24 24          	lea    eax,[esp+0x24]
c001339b:	50                   	push   eax
c001339c:	e8 4f d1 fe ff       	call   c00004f0 <memset>
c00133a1:	83 c4 10             	add    esp,0x10
c00133a4:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c00133a8:	8d 74 24 10          	lea    esi,[esp+0x10]
c00133ac:	84 c0                	test   al,al
c00133ae:	0f 84 af 00 00 00    	je     c0013463 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00133b4:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00133b8:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00133bb:	83 ec 0c             	sub    esp,0xc
c00133be:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c00133c3:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c00133c7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00133cb:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c00133d0:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c00133d4:	56                   	push   esi
c00133d5:	e8 a6 d1 fe ff       	call   c0000580 <strlen>
c00133da:	83 c4 10             	add    esp,0x10
c00133dd:	85 c0                	test   eax,eax
c00133df:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00133e3:	74 0b                	je     c00133f0 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c00133e5:	50                   	push   eax
c00133e6:	6a 01                	push   0x1
c00133e8:	56                   	push   esi
c00133e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00133ed:	50                   	push   eax
c00133ee:	eb 0a                	jmp    c00133fa <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c00133f0:	50                   	push   eax
c00133f1:	6a 00                	push   0x0
c00133f3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00133f7:	50                   	push   eax
c00133f8:	6a 00                	push   0x0
c00133fa:	e8 44 fd ff ff       	call   c0013143 <CmGetMatch(char*, char*, bool, bool*)>
c00133ff:	83 c4 10             	add    esp,0x10
c0013402:	83 f8 ff             	cmp    eax,0xffffffff
c0013405:	75 1a                	jne    c0013421 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0013407:	83 ec 0c             	sub    esp,0xc
c001340a:	68 99 24 02 c0       	push   0xc0022499
c001340f:	e8 f3 e0 ff ff       	call   c0011507 <KePanic(char const*)>
c0013414:	83 c4 10             	add    esp,0x10
c0013417:	b8 02 00 00 00       	mov    eax,0x2
c001341c:	e9 bb 00 00 00       	jmp    c00134dc <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013421:	83 ff 18             	cmp    edi,0x18
c0013424:	75 1a                	jne    c0013440 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0013426:	83 ec 0c             	sub    esp,0xc
c0013429:	68 ae 24 02 c0       	push   0xc00224ae
c001342e:	e8 d4 e0 ff ff       	call   c0011507 <KePanic(char const*)>
c0013433:	83 c4 10             	add    esp,0x10
c0013436:	b8 01 00 00 00       	mov    eax,0x1
c001343b:	e9 9c 00 00 00       	jmp    c00134dc <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013440:	47                   	inc    edi
c0013441:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013446:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c001344a:	0f 45 dd             	cmovne ebx,ebp
c001344d:	83 ec 0c             	sub    esp,0xc
c0013450:	56                   	push   esi
c0013451:	e8 2a d1 fe ff       	call   c0000580 <strlen>
c0013456:	83 c4 10             	add    esp,0x10
c0013459:	85 c0                	test   eax,eax
c001345b:	74 06                	je     c0013463 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c001345d:	43                   	inc    ebx
c001345e:	e9 41 ff ff ff       	jmp    c00133a4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0013463:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001346b:	31 db                	xor    ebx,ebx
c001346d:	31 ff                	xor    edi,edi
c001346f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013477:	50                   	push   eax
c0013478:	6a 12                	push   0x12
c001347a:	68 ee 00 00 00       	push   0xee
c001347f:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0013486:	e8 65 d0 fe ff       	call   c00004f0 <memset>
c001348b:	83 c4 10             	add    esp,0x10
c001348e:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0013492:	83 fb 17             	cmp    ebx,0x17
c0013495:	7e 26                	jle    c00134bd <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c0013497:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001349b:	50                   	push   eax
c001349c:	6a 08                	push   0x8
c001349e:	55                   	push   ebp
c001349f:	56                   	push   esi
c00134a0:	e8 2f fd ff ff       	call   c00131d4 <CmGetShift(unsigned int*, int*, int, bool*)>
c00134a5:	83 c4 10             	add    esp,0x10
c00134a8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00134ad:	74 26                	je     c00134d5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c00134af:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00134b6:	4b                   	dec    ebx
c00134b7:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00134ba:	47                   	inc    edi
c00134bb:	eb 1c                	jmp    c00134d9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c00134bd:	6a 06                	push   0x6
c00134bf:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c00134c4:	50                   	push   eax
c00134c5:	55                   	push   ebp
c00134c6:	56                   	push   esi
c00134c7:	e8 d8 fc ff ff       	call   c00131a4 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00134cc:	83 c4 10             	add    esp,0x10
c00134cf:	84 c0                	test   al,al
c00134d1:	75 06                	jne    c00134d9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c00134d3:	eb c2                	jmp    c0013497 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c00134d5:	31 c0                	xor    eax,eax
c00134d7:	eb 03                	jmp    c00134dc <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00134d9:	43                   	inc    ebx
c00134da:	eb b2                	jmp    c001348e <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c00134dc:	83 c4 6c             	add    esp,0x6c
c00134df:	5b                   	pop    ebx
c00134e0:	5e                   	pop    esi
c00134e1:	5f                   	pop    edi
c00134e2:	5d                   	pop    ebp
c00134e3:	c3                   	ret    

c00134e4 <CmCreateString(Reghive_Tag*, int, char const*)>:
c00134e4:	53                   	push   ebx
c00134e5:	83 ec 3c             	sub    esp,0x3c
c00134e8:	6a 2b                	push   0x2b
c00134ea:	6a 00                	push   0x0
c00134ec:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00134f0:	53                   	push   ebx
c00134f1:	e8 fa cf fe ff       	call   c00004f0 <memset>
c00134f6:	58                   	pop    eax
c00134f7:	5a                   	pop    edx
c00134f8:	8d 44 24 11          	lea    eax,[esp+0x11]
c00134fc:	50                   	push   eax
c00134fd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013501:	e8 41 fe ff ff       	call   c0013347 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013506:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c001350b:	83 c4 0c             	add    esp,0xc
c001350e:	6a 15                	push   0x15
c0013510:	6a 00                	push   0x0
c0013512:	8d 44 24 27          	lea    eax,[esp+0x27]
c0013516:	50                   	push   eax
c0013517:	e8 d4 cf fe ff       	call   c00004f0 <memset>
c001351c:	53                   	push   ebx
c001351d:	6a 00                	push   0x0
c001351f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013523:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013527:	e8 eb f9 ff ff       	call   c0012f17 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001352c:	83 c4 58             	add    esp,0x58
c001352f:	5b                   	pop    ebx
c0013530:	c3                   	ret    

c0013531 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0013531:	56                   	push   esi
c0013532:	53                   	push   ebx
c0013533:	83 ec 48             	sub    esp,0x48
c0013536:	6a 12                	push   0x12
c0013538:	68 ff 00 00 00       	push   0xff
c001353d:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0013541:	56                   	push   esi
c0013542:	e8 a9 cf fe ff       	call   c00004f0 <memset>
c0013547:	5a                   	pop    edx
c0013548:	59                   	pop    ecx
c0013549:	56                   	push   esi
c001354a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001354e:	e8 f4 fd ff ff       	call   c0013347 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013553:	83 c4 10             	add    esp,0x10
c0013556:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001355a:	85 db                	test   ebx,ebx
c001355c:	74 42                	je     c00135a0 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001355e:	50                   	push   eax
c001355f:	8d 44 24 19          	lea    eax,[esp+0x19]
c0013563:	50                   	push   eax
c0013564:	53                   	push   ebx
c0013565:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013569:	e8 ff f6 ff ff       	call   c0012c6d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001356e:	83 c4 0c             	add    esp,0xc
c0013571:	6a 12                	push   0x12
c0013573:	8d 44 24 21          	lea    eax,[esp+0x21]
c0013577:	50                   	push   eax
c0013578:	56                   	push   esi
c0013579:	e8 02 ce fe ff       	call   c0000380 <memcmp>
c001357e:	83 c4 10             	add    esp,0x10
c0013581:	85 c0                	test   eax,eax
c0013583:	74 1e                	je     c00135a3 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0013585:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c001358a:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001358f:	c1 e3 08             	shl    ebx,0x8
c0013592:	09 d8                	or     eax,ebx
c0013594:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0013599:	c1 e3 10             	shl    ebx,0x10
c001359c:	09 c3                	or     ebx,eax
c001359e:	eb ba                	jmp    c001355a <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00135a0:	83 cb ff             	or     ebx,0xffffffff
c00135a3:	83 c4 44             	add    esp,0x44
c00135a6:	89 d8                	mov    eax,ebx
c00135a8:	5b                   	pop    ebx
c00135a9:	5e                   	pop    esi
c00135aa:	c3                   	ret    

c00135ab <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00135ab:	57                   	push   edi
c00135ac:	56                   	push   esi
c00135ad:	53                   	push   ebx
c00135ae:	83 ec 34             	sub    esp,0x34
c00135b1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00135b5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00135b9:	6a 2b                	push   0x2b
c00135bb:	6a 00                	push   0x0
c00135bd:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00135c1:	53                   	push   ebx
c00135c2:	e8 29 cf fe ff       	call   c00004f0 <memset>
c00135c7:	58                   	pop    eax
c00135c8:	5a                   	pop    edx
c00135c9:	8d 44 24 11          	lea    eax,[esp+0x11]
c00135cd:	50                   	push   eax
c00135ce:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00135d2:	e8 70 fd ff ff       	call   c0013347 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00135d7:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c00135db:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c00135df:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c00135e3:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00135e7:	53                   	push   ebx
c00135e8:	6a 00                	push   0x0
c00135ea:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00135ee:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00135f2:	e8 20 f9 ff ff       	call   c0012f17 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00135f7:	83 c4 50             	add    esp,0x50
c00135fa:	5b                   	pop    ebx
c00135fb:	5e                   	pop    esi
c00135fc:	5f                   	pop    edi
c00135fd:	c3                   	ret    

c00135fe <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00135fe:	55                   	push   ebp
c00135ff:	57                   	push   edi
c0013600:	56                   	push   esi
c0013601:	53                   	push   ebx
c0013602:	83 ec 40             	sub    esp,0x40
c0013605:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0013609:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001360d:	6a 2b                	push   0x2b
c001360f:	6a 00                	push   0x0
c0013611:	8d 74 24 11          	lea    esi,[esp+0x11]
c0013615:	56                   	push   esi
c0013616:	e8 d5 ce fe ff       	call   c00004f0 <memset>
c001361b:	5f                   	pop    edi
c001361c:	89 ef                	mov    edi,ebp
c001361e:	58                   	pop    eax
c001361f:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013623:	50                   	push   eax
c0013624:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013628:	e8 1a fd ff ff       	call   c0013347 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001362d:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0013632:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0013637:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c001363c:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0013641:	83 c4 10             	add    esp,0x10
c0013644:	85 ed                	test   ebp,ebp
c0013646:	74 14                	je     c001365c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013648:	51                   	push   ecx
c0013649:	51                   	push   ecx
c001364a:	57                   	push   edi
c001364b:	53                   	push   ebx
c001364c:	e8 0e f7 ff ff       	call   c0012d5f <CmGetNext(Reghive_Tag*, int)>
c0013651:	83 c4 10             	add    esp,0x10
c0013654:	85 c0                	test   eax,eax
c0013656:	74 04                	je     c001365c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013658:	89 c7                	mov    edi,eax
c001365a:	eb e8                	jmp    c0013644 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c001365c:	56                   	push   esi
c001365d:	6a 00                	push   0x0
c001365f:	57                   	push   edi
c0013660:	53                   	push   ebx
c0013661:	e8 b1 f8 ff ff       	call   c0012f17 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013666:	83 c4 0c             	add    esp,0xc
c0013669:	56                   	push   esi
c001366a:	50                   	push   eax
c001366b:	89 c7                	mov    edi,eax
c001366d:	53                   	push   ebx
c001366e:	e8 fa f5 ff ff       	call   c0012c6d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013673:	58                   	pop    eax
c0013674:	5a                   	pop    edx
c0013675:	6a 6c                	push   0x6c
c0013677:	6a 00                	push   0x0
c0013679:	6a 00                	push   0x0
c001367b:	68 bf 24 02 c0       	push   0xc00224bf
c0013680:	57                   	push   edi
c0013681:	53                   	push   ebx
c0013682:	e8 24 ff ff ff       	call   c00135ab <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0013687:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001368b:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c001368f:	c1 e8 10             	shr    eax,0x10
c0013692:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0013696:	83 c4 1c             	add    esp,0x1c
c0013699:	56                   	push   esi
c001369a:	57                   	push   edi
c001369b:	53                   	push   ebx
c001369c:	e8 f0 f6 ff ff       	call   c0012d91 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00136a1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00136a6:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00136ab:	c1 e0 08             	shl    eax,0x8
c00136ae:	09 c2                	or     edx,eax
c00136b0:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00136b5:	83 c4 4c             	add    esp,0x4c
c00136b8:	5b                   	pop    ebx
c00136b9:	5e                   	pop    esi
c00136ba:	c1 e0 10             	shl    eax,0x10
c00136bd:	09 d0                	or     eax,edx
c00136bf:	5f                   	pop    edi
c00136c0:	5d                   	pop    ebp
c00136c1:	c3                   	ret    

c00136c2 <zStrtok(char*, char const*)>:
c00136c2:	55                   	push   ebp
c00136c3:	57                   	push   edi
c00136c4:	56                   	push   esi
c00136c5:	53                   	push   ebx
c00136c6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00136ce:	85 db                	test   ebx,ebx
c00136d0:	74 2f                	je     c0013701 <zStrtok(char*, char const*)+0x3f>
c00136d2:	85 c0                	test   eax,eax
c00136d4:	75 09                	jne    c00136df <zStrtok(char*, char const*)+0x1d>
c00136d6:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c00136db:	85 c0                	test   eax,eax
c00136dd:	74 50                	je     c001372f <zStrtok(char*, char const*)+0x6d>
c00136df:	31 c9                	xor    ecx,ecx
c00136e1:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c00136e5:	74 03                	je     c00136ea <zStrtok(char*, char const*)+0x28>
c00136e7:	41                   	inc    ecx
c00136e8:	eb f7                	jmp    c00136e1 <zStrtok(char*, char const*)+0x1f>
c00136ea:	31 d2                	xor    edx,edx
c00136ec:	39 ca                	cmp    edx,ecx
c00136ee:	74 15                	je     c0013705 <zStrtok(char*, char const*)+0x43>
c00136f0:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c00136f4:	8d 3c 10             	lea    edi,[eax+edx*1]
c00136f7:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00136fa:	39 ee                	cmp    esi,ebp
c00136fc:	74 13                	je     c0013711 <zStrtok(char*, char const*)+0x4f>
c00136fe:	42                   	inc    edx
c00136ff:	eb eb                	jmp    c00136ec <zStrtok(char*, char const*)+0x2a>
c0013701:	31 c0                	xor    eax,eax
c0013703:	eb 2a                	jmp    c001372f <zStrtok(char*, char const*)+0x6d>
c0013705:	c7 05 f0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bef0,0x0
c001370f:	eb 1e                	jmp    c001372f <zStrtok(char*, char const*)+0x6d>
c0013711:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013714:	39 ce                	cmp    esi,ecx
c0013716:	75 0a                	jne    c0013722 <zStrtok(char*, char const*)+0x60>
c0013718:	40                   	inc    eax
c0013719:	a3 f0 be 02 c0       	mov    ds:0xc002bef0,eax
c001371e:	89 d8                	mov    eax,ebx
c0013720:	eb 0d                	jmp    c001372f <zStrtok(char*, char const*)+0x6d>
c0013722:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0013725:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0013729:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c001372f:	5b                   	pop    ebx
c0013730:	5e                   	pop    esi
c0013731:	5f                   	pop    edi
c0013732:	5d                   	pop    ebp
c0013733:	c3                   	ret    

c0013734 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0013734:	57                   	push   edi
c0013735:	56                   	push   esi
c0013736:	53                   	push   ebx
c0013737:	81 ec 08 01 00 00    	sub    esp,0x108
c001373d:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0013744:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c001374b:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c001374f:	53                   	push   ebx
c0013750:	e8 fb ce fe ff       	call   c0000650 <strcpy>
c0013755:	59                   	pop    ecx
c0013756:	5e                   	pop    esi
c0013757:	68 23 28 02 c0       	push   0xc0022823
c001375c:	53                   	push   ebx
c001375d:	bb 01 00 00 00       	mov    ebx,0x1
c0013762:	e8 5b ff ff ff       	call   c00136c2 <zStrtok(char*, char const*)>
c0013767:	83 c4 10             	add    esp,0x10
c001376a:	85 c0                	test   eax,eax
c001376c:	74 3b                	je     c00137a9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001376e:	52                   	push   edx
c001376f:	50                   	push   eax
c0013770:	6a 01                	push   0x1
c0013772:	57                   	push   edi
c0013773:	e8 b9 fd ff ff       	call   c0013531 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0013778:	59                   	pop    ecx
c0013779:	5e                   	pop    esi
c001377a:	89 c3                	mov    ebx,eax
c001377c:	68 23 28 02 c0       	push   0xc0022823
c0013781:	6a 00                	push   0x0
c0013783:	e8 3a ff ff ff       	call   c00136c2 <zStrtok(char*, char const*)>
c0013788:	83 c4 10             	add    esp,0x10
c001378b:	85 c0                	test   eax,eax
c001378d:	89 c6                	mov    esi,eax
c001378f:	74 18                	je     c00137a9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013791:	52                   	push   edx
c0013792:	52                   	push   edx
c0013793:	53                   	push   ebx
c0013794:	57                   	push   edi
c0013795:	e8 86 f5 ff ff       	call   c0012d20 <CmEnterDirectory(Reghive_Tag*, int)>
c001379a:	83 c4 10             	add    esp,0x10
c001379d:	83 f8 ff             	cmp    eax,0xffffffff
c00137a0:	89 c3                	mov    ebx,eax
c00137a2:	74 05                	je     c00137a9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00137a4:	50                   	push   eax
c00137a5:	56                   	push   esi
c00137a6:	53                   	push   ebx
c00137a7:	eb c9                	jmp    c0013772 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00137a9:	81 c4 00 01 00 00    	add    esp,0x100
c00137af:	89 d8                	mov    eax,ebx
c00137b1:	5b                   	pop    ebx
c00137b2:	5e                   	pop    esi
c00137b3:	5f                   	pop    edi
c00137b4:	c3                   	ret    

c00137b5 <CmDisplayTree(Reghive_Tag*, int, int)>:
c00137b5:	55                   	push   ebp
c00137b6:	57                   	push   edi
c00137b7:	56                   	push   esi
c00137b8:	53                   	push   ebx
c00137b9:	83 ec 5c             	sub    esp,0x5c
c00137bc:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00137c0:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00137c4:	85 db                	test   ebx,ebx
c00137c6:	0f 8e 84 00 00 00    	jle    c0013850 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00137cc:	57                   	push   edi
c00137cd:	31 ed                	xor    ebp,ebp
c00137cf:	6a 32                	push   0x32
c00137d1:	6a 00                	push   0x0
c00137d3:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c00137d7:	57                   	push   edi
c00137d8:	e8 13 cd fe ff       	call   c00004f0 <memset>
c00137dd:	83 c4 0c             	add    esp,0xc
c00137e0:	57                   	push   edi
c00137e1:	53                   	push   ebx
c00137e2:	56                   	push   esi
c00137e3:	e8 31 fb ff ff       	call   c0013319 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00137e8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00137ec:	83 c4 10             	add    esp,0x10
c00137ef:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c00137f3:	7d 13                	jge    c0013808 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00137f5:	83 ec 0c             	sub    esp,0xc
c00137f8:	45                   	inc    ebp
c00137f9:	68 c7 2b 02 c0       	push   0xc0022bc7
c00137fe:	e8 07 71 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013803:	83 c4 10             	add    esp,0x10
c0013806:	eb e7                	jmp    c00137ef <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0013808:	51                   	push   ecx
c0013809:	57                   	push   edi
c001380a:	53                   	push   ebx
c001380b:	68 c5 24 02 c0       	push   0xc00224c5
c0013810:	e8 f5 70 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013815:	83 c4 10             	add    esp,0x10
c0013818:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c001381d:	75 1e                	jne    c001383d <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c001381f:	52                   	push   edx
c0013820:	52                   	push   edx
c0013821:	53                   	push   ebx
c0013822:	56                   	push   esi
c0013823:	e8 f8 f4 ff ff       	call   c0012d20 <CmEnterDirectory(Reghive_Tag*, int)>
c0013828:	83 c4 0c             	add    esp,0xc
c001382b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c001382f:	8d 51 04             	lea    edx,[ecx+0x4]
c0013832:	52                   	push   edx
c0013833:	50                   	push   eax
c0013834:	56                   	push   esi
c0013835:	e8 7b ff ff ff       	call   c00137b5 <CmDisplayTree(Reghive_Tag*, int, int)>
c001383a:	83 c4 10             	add    esp,0x10
c001383d:	50                   	push   eax
c001383e:	50                   	push   eax
c001383f:	53                   	push   ebx
c0013840:	56                   	push   esi
c0013841:	e8 19 f5 ff ff       	call   c0012d5f <CmGetNext(Reghive_Tag*, int)>
c0013846:	83 c4 10             	add    esp,0x10
c0013849:	89 c3                	mov    ebx,eax
c001384b:	e9 74 ff ff ff       	jmp    c00137c4 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013850:	83 c4 5c             	add    esp,0x5c
c0013853:	5b                   	pop    ebx
c0013854:	5e                   	pop    esi
c0013855:	5f                   	pop    edi
c0013856:	5d                   	pop    ebp
c0013857:	c3                   	ret    

c0013858 <CmSplitFinalSlashInPlace(char*)>:
c0013858:	53                   	push   ebx
c0013859:	83 ec 14             	sub    esp,0x14
c001385c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013860:	53                   	push   ebx
c0013861:	e8 1a cd fe ff       	call   c0000580 <strlen>
c0013866:	83 c4 10             	add    esp,0x10
c0013869:	48                   	dec    eax
c001386a:	85 c0                	test   eax,eax
c001386c:	74 15                	je     c0013883 <CmSplitFinalSlashInPlace(char*)+0x2b>
c001386e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013872:	8d 14 03             	lea    edx,[ebx+eax*1]
c0013875:	75 09                	jne    c0013880 <CmSplitFinalSlashInPlace(char*)+0x28>
c0013877:	c6 02 00             	mov    BYTE PTR [edx],0x0
c001387a:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001387e:	eb 05                	jmp    c0013885 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0013880:	48                   	dec    eax
c0013881:	eb e7                	jmp    c001386a <CmSplitFinalSlashInPlace(char*)+0x12>
c0013883:	31 c0                	xor    eax,eax
c0013885:	83 c4 08             	add    esp,0x8
c0013888:	5b                   	pop    ebx
c0013889:	c3                   	ret    

c001388a <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001388a:	55                   	push   ebp
c001388b:	57                   	push   edi
c001388c:	56                   	push   esi
c001388d:	53                   	push   ebx
c001388e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013894:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c001389b:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c001389e:	8d 43 01             	lea    eax,[ebx+0x1]
c00138a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138a5:	89 f0                	mov    eax,esi
c00138a7:	3c 40                	cmp    al,0x40
c00138a9:	75 1b                	jne    c00138c6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c00138ab:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00138ae:	85 c0                	test   eax,eax
c00138b0:	74 08                	je     c00138ba <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00138b2:	83 f8 3a             	cmp    eax,0x3a
c00138b5:	74 03                	je     c00138ba <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00138b7:	43                   	inc    ebx
c00138b8:	eb f1                	jmp    c00138ab <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c00138ba:	85 c0                	test   eax,eax
c00138bc:	0f 84 45 01 00 00    	je     c0013a07 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00138c2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00138c5:	43                   	inc    ebx
c00138c6:	50                   	push   eax
c00138c7:	6a 40                	push   0x40
c00138c9:	6a 00                	push   0x0
c00138cb:	8d 44 24 24          	lea    eax,[esp+0x24]
c00138cf:	50                   	push   eax
c00138d0:	e8 1b cc fe ff       	call   c00004f0 <memset>
c00138d5:	89 f1                	mov    ecx,esi
c00138d7:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00138de:	31 c0                	xor    eax,eax
c00138e0:	83 c4 10             	add    esp,0x10
c00138e3:	0f be f1             	movsx  esi,cl
c00138e6:	0f be 17             	movsx  edx,BYTE PTR [edi]
c00138e9:	85 d2                	test   edx,edx
c00138eb:	89 d1                	mov    ecx,edx
c00138ed:	0f 84 14 01 00 00    	je     c0013a07 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00138f3:	3d c7 00 00 00       	cmp    eax,0xc7
c00138f8:	0f 8f 09 01 00 00    	jg     c0013a07 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00138fe:	83 fa 0a             	cmp    edx,0xa
c0013901:	0f 85 f1 00 00 00    	jne    c00139f8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0013907:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001390c:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013911:	89 c8                	mov    eax,ecx
c0013913:	a8 df                	test   al,0xdf
c0013915:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c001391a:	83 f9 23             	cmp    ecx,0x23
c001391d:	0f 94 c2             	sete   dl
c0013920:	89 d5                	mov    ebp,edx
c0013922:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013926:	09 ea                	or     edx,ebp
c0013928:	80 e2 01             	and    dl,0x1
c001392b:	75 47                	jne    c0013974 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c001392d:	83 e8 09             	sub    eax,0x9
c0013930:	3c 01                	cmp    al,0x1
c0013932:	76 40                	jbe    c0013974 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013934:	83 f9 5b             	cmp    ecx,0x5b
c0013937:	75 42                	jne    c001397b <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013939:	83 fe 40             	cmp    esi,0x40
c001393c:	75 36                	jne    c0013974 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c001393e:	83 ec 0c             	sub    esp,0xc
c0013941:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0013945:	55                   	push   ebp
c0013946:	e8 35 cc fe ff       	call   c0000580 <strlen>
c001394b:	83 c4 10             	add    esp,0x10
c001394e:	83 f8 3f             	cmp    eax,0x3f
c0013951:	0f 87 b0 00 00 00    	ja     c0013a07 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013957:	50                   	push   eax
c0013958:	50                   	push   eax
c0013959:	55                   	push   ebp
c001395a:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c001395e:	55                   	push   ebp
c001395f:	e8 ec cc fe ff       	call   c0000650 <strcpy>
c0013964:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013967:	e8 14 cc fe ff       	call   c0000580 <strlen>
c001396c:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013971:	83 c4 10             	add    esp,0x10
c0013974:	31 d2                	xor    edx,edx
c0013976:	e9 84 00 00 00       	jmp    c00139ff <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c001397b:	83 fe 40             	cmp    esi,0x40
c001397e:	74 06                	je     c0013986 <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c0013980:	8d 54 24 58          	lea    edx,[esp+0x58]
c0013984:	eb 19                	jmp    c001399f <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013986:	51                   	push   ecx
c0013987:	51                   	push   ecx
c0013988:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001398c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013990:	50                   	push   eax
c0013991:	e8 ea cd fe ff       	call   c0000780 <strcmp>
c0013996:	83 c4 10             	add    esp,0x10
c0013999:	85 c0                	test   eax,eax
c001399b:	75 d7                	jne    c0013974 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c001399d:	eb e1                	jmp    c0013980 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c001399f:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00139a2:	85 c9                	test   ecx,ecx
c00139a4:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c00139a9:	83 f9 3d             	cmp    ecx,0x3d
c00139ac:	0f 94 c0             	sete   al
c00139af:	89 c5                	mov    ebp,eax
c00139b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139b5:	09 e8                	or     eax,ebp
c00139b7:	a8 01                	test   al,0x1
c00139b9:	89 c5                	mov    ebp,eax
c00139bb:	75 03                	jne    c00139c0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c00139bd:	42                   	inc    edx
c00139be:	eb df                	jmp    c001399f <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c00139c0:	85 c9                	test   ecx,ecx
c00139c2:	74 43                	je     c0013a07 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00139c4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00139c8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00139cb:	52                   	push   edx
c00139cc:	52                   	push   edx
c00139cd:	8d 44 24 60          	lea    eax,[esp+0x60]
c00139d1:	50                   	push   eax
c00139d2:	53                   	push   ebx
c00139d3:	e8 a8 cd fe ff       	call   c0000780 <strcmp>
c00139d8:	83 c4 10             	add    esp,0x10
c00139db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00139df:	85 c0                	test   eax,eax
c00139e1:	75 91                	jne    c0013974 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00139e3:	50                   	push   eax
c00139e4:	42                   	inc    edx
c00139e5:	50                   	push   eax
c00139e6:	52                   	push   edx
c00139e7:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00139ee:	e8 5d cc fe ff       	call   c0000650 <strcpy>
c00139f3:	83 c4 10             	add    esp,0x10
c00139f6:	eb 11                	jmp    c0013a09 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c00139f8:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00139fc:	8d 50 01             	lea    edx,[eax+0x1]
c00139ff:	47                   	inc    edi
c0013a00:	89 d0                	mov    eax,edx
c0013a02:	e9 df fe ff ff       	jmp    c00138e6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0013a07:	31 ed                	xor    ebp,ebp
c0013a09:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013a0f:	89 e8                	mov    eax,ebp
c0013a11:	5b                   	pop    ebx
c0013a12:	5e                   	pop    esi
c0013a13:	5f                   	pop    edi
c0013a14:	5d                   	pop    ebp
c0013a15:	c3                   	ret    

c0013a16 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013a16:	57                   	push   edi
c0013a17:	56                   	push   esi
c0013a18:	53                   	push   ebx
c0013a19:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013a1f:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013a26:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013a2d:	53                   	push   ebx
c0013a2e:	e8 4d cb fe ff       	call   c0000580 <strlen>
c0013a33:	89 34 24             	mov    DWORD PTR [esp],esi
c0013a36:	89 c7                	mov    edi,eax
c0013a38:	e8 43 cb fe ff       	call   c0000580 <strlen>
c0013a3d:	83 c4 10             	add    esp,0x10
c0013a40:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013a44:	3d ff 00 00 00       	cmp    eax,0xff
c0013a49:	0f 87 d3 00 00 00    	ja     c0013b22 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013a4f:	57                   	push   edi
c0013a50:	57                   	push   edi
c0013a51:	56                   	push   esi
c0013a52:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013a56:	56                   	push   esi
c0013a57:	e8 f4 cb fe ff       	call   c0000650 <strcpy>
c0013a5c:	58                   	pop    eax
c0013a5d:	5a                   	pop    edx
c0013a5e:	68 23 28 02 c0       	push   0xc0022823
c0013a63:	56                   	push   esi
c0013a64:	e8 07 ce fe ff       	call   c0000870 <strcat>
c0013a69:	59                   	pop    ecx
c0013a6a:	5f                   	pop    edi
c0013a6b:	53                   	push   ebx
c0013a6c:	56                   	push   esi
c0013a6d:	e8 fe cd fe ff       	call   c0000870 <strcat>
c0013a72:	58                   	pop    eax
c0013a73:	5a                   	pop    edx
c0013a74:	68 cf 24 02 c0       	push   0xc00224cf
c0013a79:	56                   	push   esi
c0013a7a:	e8 f1 cd fe ff       	call   c0000870 <strcat>
c0013a7f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013a86:	e8 48 40 ff ff       	call   c0007ad3 <malloc>
c0013a8b:	83 c4 0c             	add    esp,0xc
c0013a8e:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0013a94:	56                   	push   esi
c0013a95:	50                   	push   eax
c0013a96:	89 c3                	mov    ebx,eax
c0013a98:	e8 23 80 ff ff       	call   c000bac0 <File::File(char const*, Process*)>
c0013a9d:	83 c4 10             	add    esp,0x10
c0013aa0:	85 db                	test   ebx,ebx
c0013aa2:	74 7e                	je     c0013b22 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013aa4:	51                   	push   ecx
c0013aa5:	51                   	push   ecx
c0013aa6:	6a 01                	push   0x1
c0013aa8:	53                   	push   ebx
c0013aa9:	e8 30 80 ff ff       	call   c000bade <File::open(FileOpenMode)>
c0013aae:	83 c4 10             	add    esp,0x10
c0013ab1:	85 c0                	test   eax,eax
c0013ab3:	74 08                	je     c0013abd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013ab5:	83 ec 0c             	sub    esp,0xc
c0013ab8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013aba:	53                   	push   ebx
c0013abb:	eb 5f                	jmp    c0013b1c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013abd:	52                   	push   edx
c0013abe:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013ac2:	50                   	push   eax
c0013ac3:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013ac7:	50                   	push   eax
c0013ac8:	53                   	push   ebx
c0013ac9:	e8 12 83 ff ff       	call   c000bde0 <File::stat(unsigned long long*, bool*)>
c0013ace:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013ad2:	83 c4 10             	add    esp,0x10
c0013ad5:	89 c1                	mov    ecx,eax
c0013ad7:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013adb:	74 31                	je     c0013b0e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013add:	83 ec 0c             	sub    esp,0xc
c0013ae0:	50                   	push   eax
c0013ae1:	e8 ed 3f ff ff       	call   c0007ad3 <malloc>
c0013ae6:	89 c6                	mov    esi,eax
c0013ae8:	58                   	pop    eax
c0013ae9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013aeb:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013aef:	52                   	push   edx
c0013af0:	56                   	push   esi
c0013af1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013af5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013af9:	53                   	push   ebx
c0013afa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013afd:	83 c4 20             	add    esp,0x20
c0013b00:	85 c0                	test   eax,eax
c0013b02:	75 0a                	jne    c0013b0e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013b04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b08:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013b0c:	74 18                	je     c0013b26 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013b0e:	83 ec 0c             	sub    esp,0xc
c0013b11:	53                   	push   ebx
c0013b12:	e8 25 80 ff ff       	call   c000bb3c <File::close()>
c0013b17:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b1c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013b1f:	83 c4 10             	add    esp,0x10
c0013b22:	31 c0                	xor    eax,eax
c0013b24:	eb 3b                	jmp    c0013b61 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013b26:	83 ec 0c             	sub    esp,0xc
c0013b29:	53                   	push   ebx
c0013b2a:	e8 0d 80 ff ff       	call   c000bb3c <File::close()>
c0013b2f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b34:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013b37:	83 c4 0c             	add    esp,0xc
c0013b3a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013b41:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013b48:	56                   	push   esi
c0013b49:	e8 3c fd ff ff       	call   c001388a <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013b4e:	89 34 24             	mov    DWORD PTR [esp],esi
c0013b51:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013b55:	e8 89 3f ff ff       	call   c0007ae3 <free>
c0013b5a:	83 c4 10             	add    esp,0x10
c0013b5d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013b61:	81 c4 20 01 00 00    	add    esp,0x120
c0013b67:	5b                   	pop    ebx
c0013b68:	5e                   	pop    esi
c0013b69:	5f                   	pop    edi
c0013b6a:	c3                   	ret    

c0013b6b <Reg::getLine(char*, char*, char*)>:
c0013b6b:	57                   	push   edi
c0013b6c:	56                   	push   esi
c0013b6d:	53                   	push   ebx
c0013b6e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013b72:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013b76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013b7a:	57                   	push   edi
c0013b7b:	56                   	push   esi
c0013b7c:	53                   	push   ebx
c0013b7d:	68 d4 24 02 c0       	push   0xc00224d4
c0013b82:	e8 8f fe ff ff       	call   c0013a16 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013b87:	83 c4 10             	add    esp,0x10
c0013b8a:	84 c0                	test   al,al
c0013b8c:	75 10                	jne    c0013b9e <Reg::getLine(char*, char*, char*)+0x33>
c0013b8e:	57                   	push   edi
c0013b8f:	56                   	push   esi
c0013b90:	53                   	push   ebx
c0013b91:	68 f9 24 02 c0       	push   0xc00224f9
c0013b96:	e8 7b fe ff ff       	call   c0013a16 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013b9b:	83 c4 10             	add    esp,0x10
c0013b9e:	5b                   	pop    ebx
c0013b9f:	5e                   	pop    esi
c0013ba0:	5f                   	pop    edi
c0013ba1:	c3                   	ret    

c0013ba2 <Reg::readInt(char*, char*, int*)>:
c0013ba2:	55                   	push   ebp
c0013ba3:	57                   	push   edi
c0013ba4:	56                   	push   esi
c0013ba5:	53                   	push   ebx
c0013ba6:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013bac:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013bb0:	55                   	push   ebp
c0013bb1:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013bb8:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013bbf:	e8 a7 ff ff ff       	call   c0013b6b <Reg::getLine(char*, char*, char*)>
c0013bc4:	83 c4 10             	add    esp,0x10
c0013bc7:	84 c0                	test   al,al
c0013bc9:	0f 84 b6 00 00 00    	je     c0013c85 <Reg::readInt(char*, char*, int*)+0xe3>
c0013bcf:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013bd4:	83 fa 2b             	cmp    edx,0x2b
c0013bd7:	74 0c                	je     c0013be5 <Reg::readInt(char*, char*, int*)+0x43>
c0013bd9:	83 fa 2d             	cmp    edx,0x2d
c0013bdc:	75 0e                	jne    c0013bec <Reg::readInt(char*, char*, int*)+0x4a>
c0013bde:	ba 01 00 00 00       	mov    edx,0x1
c0013be3:	eb 0b                	jmp    c0013bf0 <Reg::readInt(char*, char*, int*)+0x4e>
c0013be5:	ba 01 00 00 00       	mov    edx,0x1
c0013bea:	eb 02                	jmp    c0013bee <Reg::readInt(char*, char*, int*)+0x4c>
c0013bec:	31 d2                	xor    edx,edx
c0013bee:	31 c0                	xor    eax,eax
c0013bf0:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013bf5:	be 0a 00 00 00       	mov    esi,0xa
c0013bfa:	75 21                	jne    c0013c1d <Reg::readInt(char*, char*, int*)+0x7b>
c0013bfc:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013c01:	83 f9 78             	cmp    ecx,0x78
c0013c04:	75 0a                	jne    c0013c10 <Reg::readInt(char*, char*, int*)+0x6e>
c0013c06:	83 c2 02             	add    edx,0x2
c0013c09:	be 10 00 00 00       	mov    esi,0x10
c0013c0e:	eb 0d                	jmp    c0013c1d <Reg::readInt(char*, char*, int*)+0x7b>
c0013c10:	83 f9 62             	cmp    ecx,0x62
c0013c13:	75 08                	jne    c0013c1d <Reg::readInt(char*, char*, int*)+0x7b>
c0013c15:	83 c2 02             	add    edx,0x2
c0013c18:	be 02 00 00 00       	mov    esi,0x2
c0013c1d:	01 d5                	add    ebp,edx
c0013c1f:	31 d2                	xor    edx,edx
c0013c21:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013c25:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013c29:	85 c9                	test   ecx,ecx
c0013c2b:	0f 94 c3             	sete   bl
c0013c2e:	83 f9 0d             	cmp    ecx,0xd
c0013c31:	89 df                	mov    edi,ebx
c0013c33:	0f 94 c3             	sete   bl
c0013c36:	09 df                	or     edi,ebx
c0013c38:	89 fb                	mov    ebx,edi
c0013c3a:	83 e7 01             	and    edi,0x1
c0013c3d:	75 35                	jne    c0013c74 <Reg::readInt(char*, char*, int*)+0xd2>
c0013c3f:	0f af d6             	imul   edx,esi
c0013c42:	83 fe 10             	cmp    esi,0x10
c0013c45:	75 26                	jne    c0013c6d <Reg::readInt(char*, char*, int*)+0xcb>
c0013c47:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013c4b:	83 ef 41             	sub    edi,0x41
c0013c4e:	89 fb                	mov    ebx,edi
c0013c50:	80 fb 05             	cmp    bl,0x5
c0013c53:	77 06                	ja     c0013c5b <Reg::readInt(char*, char*, int*)+0xb9>
c0013c55:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013c59:	eb 16                	jmp    c0013c71 <Reg::readInt(char*, char*, int*)+0xcf>
c0013c5b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013c5f:	83 eb 61             	sub    ebx,0x61
c0013c62:	80 fb 05             	cmp    bl,0x5
c0013c65:	77 06                	ja     c0013c6d <Reg::readInt(char*, char*, int*)+0xcb>
c0013c67:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013c6b:	eb 04                	jmp    c0013c71 <Reg::readInt(char*, char*, int*)+0xcf>
c0013c6d:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013c71:	45                   	inc    ebp
c0013c72:	eb ad                	jmp    c0013c21 <Reg::readInt(char*, char*, int*)+0x7f>
c0013c74:	84 c0                	test   al,al
c0013c76:	74 02                	je     c0013c7a <Reg::readInt(char*, char*, int*)+0xd8>
c0013c78:	f7 da                	neg    edx
c0013c7a:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013c81:	89 10                	mov    DWORD PTR [eax],edx
c0013c83:	88 d8                	mov    al,bl
c0013c85:	81 c4 ec 00 00 00    	add    esp,0xec
c0013c8b:	5b                   	pop    ebx
c0013c8c:	5e                   	pop    esi
c0013c8d:	5f                   	pop    edi
c0013c8e:	5d                   	pop    ebp
c0013c8f:	c3                   	ret    

c0013c90 <Reg::readString(char*, char*, char*, int)>:
c0013c90:	57                   	push   edi
c0013c91:	56                   	push   esi
c0013c92:	53                   	push   ebx
c0013c93:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013c99:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013c9d:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013ca4:	57                   	push   edi
c0013ca5:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013cac:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013cb3:	e8 b3 fe ff ff       	call   c0013b6b <Reg::getLine(char*, char*, char*)>
c0013cb8:	83 c4 10             	add    esp,0x10
c0013cbb:	84 c0                	test   al,al
c0013cbd:	89 c6                	mov    esi,eax
c0013cbf:	74 44                	je     c0013d05 <Reg::readString(char*, char*, char*, int)+0x75>
c0013cc1:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013cc8:	31 c0                	xor    eax,eax
c0013cca:	4a                   	dec    edx
c0013ccb:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013cce:	84 c9                	test   cl,cl
c0013cd0:	74 0f                	je     c0013ce1 <Reg::readString(char*, char*, char*, int)+0x51>
c0013cd2:	39 c2                	cmp    edx,eax
c0013cd4:	7e 0b                	jle    c0013ce1 <Reg::readString(char*, char*, char*, int)+0x51>
c0013cd6:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013cd9:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013cde:	40                   	inc    eax
c0013cdf:	eb ea                	jmp    c0013ccb <Reg::readString(char*, char*, char*, int)+0x3b>
c0013ce1:	83 ec 0c             	sub    esp,0xc
c0013ce4:	53                   	push   ebx
c0013ce5:	e8 96 c8 fe ff       	call   c0000580 <strlen>
c0013cea:	83 c4 10             	add    esp,0x10
c0013ced:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013cf2:	75 11                	jne    c0013d05 <Reg::readString(char*, char*, char*, int)+0x75>
c0013cf4:	83 ec 0c             	sub    esp,0xc
c0013cf7:	53                   	push   ebx
c0013cf8:	e8 83 c8 fe ff       	call   c0000580 <strlen>
c0013cfd:	83 c4 10             	add    esp,0x10
c0013d00:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013d05:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013d0b:	89 f0                	mov    eax,esi
c0013d0d:	5b                   	pop    ebx
c0013d0e:	5e                   	pop    esi
c0013d0f:	5f                   	pop    edi
c0013d10:	c3                   	ret    

c0013d11 <Reg::readBool(char*, char*, bool*)>:
c0013d11:	83 ec 20             	sub    esp,0x20
c0013d14:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013d18:	50                   	push   eax
c0013d19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d21:	e8 7c fe ff ff       	call   c0013ba2 <Reg::readInt(char*, char*, int*)>
c0013d26:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013d2a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013d2f:	0f 95 02             	setne  BYTE PTR [edx]
c0013d32:	83 c4 2c             	add    esp,0x2c
c0013d35:	c3                   	ret    

c0013d36 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013d36:	53                   	push   ebx
c0013d37:	83 ec 1c             	sub    esp,0x1c
c0013d3a:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013d3e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013d42:	50                   	push   eax
c0013d43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d4b:	e8 c1 ff ff ff       	call   c0013d11 <Reg::readBool(char*, char*, bool*)>
c0013d50:	83 c4 10             	add    esp,0x10
c0013d53:	84 c0                	test   al,al
c0013d55:	74 04                	je     c0013d5b <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013d57:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013d5b:	83 c4 18             	add    esp,0x18
c0013d5e:	88 d8                	mov    al,bl
c0013d60:	5b                   	pop    ebx
c0013d61:	c3                   	ret    

c0013d62 <Reg::readIntWithDefault(char*, char*, int)>:
c0013d62:	53                   	push   ebx
c0013d63:	83 ec 1c             	sub    esp,0x1c
c0013d66:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013d6a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013d6e:	50                   	push   eax
c0013d6f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d77:	e8 26 fe ff ff       	call   c0013ba2 <Reg::readInt(char*, char*, int*)>
c0013d7c:	83 c4 10             	add    esp,0x10
c0013d7f:	84 c0                	test   al,al
c0013d81:	74 04                	je     c0013d87 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013d83:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013d87:	83 c4 18             	add    esp,0x18
c0013d8a:	89 d8                	mov    eax,ebx
c0013d8c:	5b                   	pop    ebx
c0013d8d:	c3                   	ret    

c0013d8e <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013d8e:	57                   	push   edi
c0013d8f:	56                   	push   esi
c0013d90:	53                   	push   ebx
c0013d91:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013d95:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013d99:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013d9d:	56                   	push   esi
c0013d9e:	57                   	push   edi
c0013d9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013da3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013da7:	e8 e4 fe ff ff       	call   c0013c90 <Reg::readString(char*, char*, char*, int)>
c0013dac:	83 c4 10             	add    esp,0x10
c0013daf:	84 c0                	test   al,al
c0013db1:	75 16                	jne    c0013dc9 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013db3:	50                   	push   eax
c0013db4:	56                   	push   esi
c0013db5:	6a 00                	push   0x0
c0013db7:	57                   	push   edi
c0013db8:	e8 33 c7 fe ff       	call   c00004f0 <memset>
c0013dbd:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013dc0:	89 de                	mov    esi,ebx
c0013dc2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013dc4:	83 c4 10             	add    esp,0x10
c0013dc7:	89 df                	mov    edi,ebx
c0013dc9:	5b                   	pop    ebx
c0013dca:	89 f8                	mov    eax,edi
c0013dcc:	5e                   	pop    esi
c0013dcd:	5f                   	pop    edi
c0013dce:	c3                   	ret    

c0013dcf <SysEject(regs*)>:
c0013dcf:	83 ec 0c             	sub    esp,0xc
c0013dd2:	83 ca ff             	or     edx,0xffffffff
c0013dd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dd9:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013ddc:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013de1:	83 e9 41             	sub    ecx,0x41
c0013de4:	83 f9 19             	cmp    ecx,0x19
c0013de7:	77 18                	ja     c0013e01 <SysEject(regs*)+0x32>
c0013de9:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0013df0:	85 c9                	test   ecx,ecx
c0013df2:	74 0d                	je     c0013e01 <SysEject(regs*)+0x32>
c0013df4:	83 ec 0c             	sub    esp,0xc
c0013df7:	51                   	push   ecx
c0013df8:	e8 c3 9e ff ff       	call   c000dcc0 <LogicalDisk::eject()>
c0013dfd:	83 c4 10             	add    esp,0x10
c0013e00:	99                   	cdq    
c0013e01:	83 c4 0c             	add    esp,0xc
c0013e04:	c3                   	ret    

c0013e05 <SysExit(regs*)>:
c0013e05:	83 ec 18             	sub    esp,0x18
c0013e08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e0c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013e0f:	e8 3c 2b 00 00       	call   c0016950 <terminateTask(int)>
c0013e14:	83 c8 ff             	or     eax,0xffffffff
c0013e17:	83 c4 1c             	add    esp,0x1c
c0013e1a:	89 c2                	mov    edx,eax
c0013e1c:	c3                   	ret    

c0013e1d <SysGetCwd(regs*)>:
c0013e1d:	83 ec 10             	sub    esp,0x10
c0013e20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e24:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013e27:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013e2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e2f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013e32:	e8 39 79 ff ff       	call   c000b770 <Fs::getcwd(Process*, char*, int)>
c0013e37:	83 c4 1c             	add    esp,0x1c
c0013e3a:	99                   	cdq    
c0013e3b:	c3                   	ret    

c0013e3c <SysGetPID(regs*)>:
c0013e3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e41:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013e44:	8b 00                	mov    eax,DWORD PTR [eax]
c0013e46:	99                   	cdq    
c0013e47:	c3                   	ret    

c0013e48 <SysGetRAMData(regs*)>:
c0013e48:	69 05 e4 6e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026ee4,0xc8
c0013e52:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0013e58:	99                   	cdq    
c0013e59:	f7 f9                	idiv   ecx
c0013e5b:	c1 e0 18             	shl    eax,0x18
c0013e5e:	09 c8                	or     eax,ecx
c0013e60:	99                   	cdq    
c0013e61:	c3                   	ret    

c0013e62 <SysGetVGAPtr(regs*)>:
c0013e62:	55                   	push   ebp
c0013e63:	57                   	push   edi
c0013e64:	56                   	push   esi
c0013e65:	53                   	push   ebx
c0013e66:	83 ec 18             	sub    esp,0x18
c0013e69:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013e6d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013e70:	e8 a7 25 00 00       	call   c001641c <Thr::processFromPID(int)>
c0013e75:	83 c4 10             	add    esp,0x10
c0013e78:	89 c1                	mov    ecx,eax
c0013e7a:	b8 01 00 00 00       	mov    eax,0x1
c0013e7f:	85 c9                	test   ecx,ecx
c0013e81:	74 57                	je     c0013eda <SysGetVGAPtr(regs*)+0x78>
c0013e83:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013e87:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013e8d:	74 0c                	je     c0013e9b <SysGetVGAPtr(regs*)+0x39>
c0013e8f:	83 ec 0c             	sub    esp,0xc
c0013e92:	55                   	push   ebp
c0013e93:	e8 d7 48 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0013e98:	83 c4 10             	add    esp,0x10
c0013e9b:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013e9e:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013ea3:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013ea6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ea8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013eab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013eae:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013eb4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013eb7:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013eba:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013ec0:	50                   	push   eax
c0013ec1:	50                   	push   eax
c0013ec2:	68 14 25 02 c0       	push   0xc0022514
c0013ec7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013eca:	05 a8 0f 00 00       	add    eax,0xfa8
c0013ecf:	50                   	push   eax
c0013ed0:	e8 7b c7 fe ff       	call   c0000650 <strcpy>
c0013ed5:	83 c4 10             	add    esp,0x10
c0013ed8:	31 c0                	xor    eax,eax
c0013eda:	83 c4 0c             	add    esp,0xc
c0013edd:	31 d2                	xor    edx,edx
c0013edf:	5b                   	pop    ebx
c0013ee0:	5e                   	pop    esi
c0013ee1:	5f                   	pop    edi
c0013ee2:	5d                   	pop    ebp
c0013ee3:	c3                   	ret    

c0013ee4 <SysKill(regs*)>:
c0013ee4:	53                   	push   ebx
c0013ee5:	83 ec 08             	sub    esp,0x8
c0013ee8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013eec:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013ef0:	75 16                	jne    c0013f08 <SysKill(regs*)+0x24>
c0013ef2:	83 ec 0c             	sub    esp,0xc
c0013ef5:	68 1e 25 02 c0       	push   0xc002251e
c0013efa:	e8 08 d6 ff ff       	call   c0011507 <KePanic(char const*)>
c0013eff:	83 c4 10             	add    esp,0x10
c0013f02:	e9 89 00 00 00       	jmp    c0013f90 <SysKill(regs*)+0xac>
c0013f07:	90                   	nop
c0013f08:	83 ec 0c             	sub    esp,0xc
c0013f0b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0013f10:	e8 67 bd 00 00       	call   c001fc7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f15:	8d 76 00             	lea    esi,[esi+0x0]
c0013f18:	83 c4 10             	add    esp,0x10
c0013f1b:	85 c0                	test   eax,eax
c0013f1d:	74 19                	je     c0013f38 <SysKill(regs*)+0x54>
c0013f1f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013f22:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013f25:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013f27:	74 33                	je     c0013f5c <SysKill(regs*)+0x78>
c0013f29:	52                   	push   edx
c0013f2a:	52                   	push   edx
c0013f2b:	50                   	push   eax
c0013f2c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0013f31:	e8 66 c0 00 00       	call   c001ff9c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013f36:	eb e0                	jmp    c0013f18 <SysKill(regs*)+0x34>
c0013f38:	83 ec 0c             	sub    esp,0xc
c0013f3b:	68 d8 c6 02 c0       	push   0xc002c6d8
c0013f40:	e8 37 bd 00 00       	call   c001fc7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f45:	8d 76 00             	lea    esi,[esi+0x0]
c0013f48:	83 c4 10             	add    esp,0x10
c0013f4b:	85 c0                	test   eax,eax
c0013f4d:	74 41                	je     c0013f90 <SysKill(regs*)+0xac>
c0013f4f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013f52:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013f55:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013f57:	75 27                	jne    c0013f80 <SysKill(regs*)+0x9c>
c0013f59:	8d 76 00             	lea    esi,[esi+0x0]
c0013f5c:	51                   	push   ecx
c0013f5d:	51                   	push   ecx
c0013f5e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013f61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f66:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f69:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013f6f:	e8 2f da ff ff       	call   c00119a3 <KeRaiseSignal(SigHandlerBlock*, int)>
c0013f74:	83 c4 10             	add    esp,0x10
c0013f77:	31 c0                	xor    eax,eax
c0013f79:	31 d2                	xor    edx,edx
c0013f7b:	eb 1b                	jmp    c0013f98 <SysKill(regs*)+0xb4>
c0013f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0013f80:	52                   	push   edx
c0013f81:	52                   	push   edx
c0013f82:	50                   	push   eax
c0013f83:	68 d8 c6 02 c0       	push   0xc002c6d8
c0013f88:	e8 0f c0 00 00       	call   c001ff9c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013f8d:	eb b9                	jmp    c0013f48 <SysKill(regs*)+0x64>
c0013f8f:	90                   	nop
c0013f90:	83 c8 ff             	or     eax,0xffffffff
c0013f93:	89 c2                	mov    edx,eax
c0013f95:	8d 76 00             	lea    esi,[esi+0x0]
c0013f98:	83 c4 08             	add    esp,0x8
c0013f9b:	5b                   	pop    ebx
c0013f9c:	c3                   	ret    

c0013f9d <SysLoadDLL(regs*)>:
c0013f9d:	56                   	push   esi
c0013f9e:	31 d2                	xor    edx,edx
c0013fa0:	53                   	push   ebx
c0013fa1:	b8 01 00 00 00       	mov    eax,0x1
c0013fa6:	51                   	push   ecx
c0013fa7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013fab:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013faf:	0f 84 8c 00 00 00    	je     c0014041 <SysLoadDLL(regs*)+0xa4>
c0013fb5:	83 ec 0c             	sub    esp,0xc
c0013fb8:	68 14 01 00 00       	push   0x114
c0013fbd:	e8 11 3b ff ff       	call   c0007ad3 <malloc>
c0013fc2:	83 c4 0c             	add    esp,0xc
c0013fc5:	89 c3                	mov    ebx,eax
c0013fc7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fcc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013fcf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013fd2:	53                   	push   ebx
c0013fd3:	e8 e8 7a ff ff       	call   c000bac0 <File::File(char const*, Process*)>
c0013fd8:	83 c4 10             	add    esp,0x10
c0013fdb:	31 d2                	xor    edx,edx
c0013fdd:	85 db                	test   ebx,ebx
c0013fdf:	b8 02 00 00 00       	mov    eax,0x2
c0013fe4:	74 5b                	je     c0014041 <SysLoadDLL(regs*)+0xa4>
c0013fe6:	83 ec 0c             	sub    esp,0xc
c0013fe9:	53                   	push   ebx
c0013fea:	e8 b3 7d ff ff       	call   c000bda2 <File::exists()>
c0013fef:	83 c4 10             	add    esp,0x10
c0013ff2:	84 c0                	test   al,al
c0013ff4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ff6:	75 11                	jne    c0014009 <SysLoadDLL(regs*)+0x6c>
c0013ff8:	83 ec 0c             	sub    esp,0xc
c0013ffb:	53                   	push   ebx
c0013ffc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013fff:	83 c4 10             	add    esp,0x10
c0014002:	b8 03 00 00 00       	mov    eax,0x3
c0014007:	eb 36                	jmp    c001403f <SysLoadDLL(regs*)+0xa2>
c0014009:	83 ec 0c             	sub    esp,0xc
c001400c:	53                   	push   ebx
c001400d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014010:	58                   	pop    eax
c0014011:	5a                   	pop    edx
c0014012:	6a 00                	push   0x0
c0014014:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014017:	e8 49 15 00 00       	call   c0015565 <Thr::loadDLL(char const*, bool)>
c001401c:	83 c4 10             	add    esp,0x10
c001401f:	31 d2                	xor    edx,edx
c0014021:	89 c1                	mov    ecx,eax
c0014023:	b8 04 00 00 00       	mov    eax,0x4
c0014028:	85 c9                	test   ecx,ecx
c001402a:	74 15                	je     c0014041 <SysLoadDLL(regs*)+0xa4>
c001402c:	53                   	push   ebx
c001402d:	53                   	push   ebx
c001402e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0014034:	51                   	push   ecx
c0014035:	e8 6b 17 00 00       	call   c00157a5 <Thr::executeDLL(unsigned long, void*)>
c001403a:	83 c4 10             	add    esp,0x10
c001403d:	31 c0                	xor    eax,eax
c001403f:	31 d2                	xor    edx,edx
c0014041:	59                   	pop    ecx
c0014042:	5b                   	pop    ebx
c0014043:	5e                   	pop    esi
c0014044:	c3                   	ret    

c0014045 <SysRead(regs*)>:
c0014045:	57                   	push   edi
c0014046:	56                   	push   esi
c0014047:	53                   	push   ebx
c0014048:	83 ec 10             	sub    esp,0x10
c001404b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001404f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014052:	83 f8 02             	cmp    eax,0x2
c0014055:	77 10                	ja     c0014067 <SysRead(regs*)+0x22>
c0014057:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001405c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001405f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014065:	eb 0e                	jmp    c0014075 <SysRead(regs*)+0x30>
c0014067:	83 ec 0c             	sub    esp,0xc
c001406a:	50                   	push   eax
c001406b:	e8 2b 54 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0014070:	83 c4 10             	add    esp,0x10
c0014073:	89 c1                	mov    ecx,eax
c0014075:	83 c8 ff             	or     eax,0xffffffff
c0014078:	85 c9                	test   ecx,ecx
c001407a:	89 c2                	mov    edx,eax
c001407c:	74 28                	je     c00140a6 <SysRead(regs*)+0x61>
c001407e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014086:	83 ec 0c             	sub    esp,0xc
c0014089:	31 ff                	xor    edi,edi
c001408b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001408f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014091:	52                   	push   edx
c0014092:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014095:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014098:	57                   	push   edi
c0014099:	56                   	push   esi
c001409a:	51                   	push   ecx
c001409b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001409e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00140a2:	83 c4 20             	add    esp,0x20
c00140a5:	99                   	cdq    
c00140a6:	83 c4 10             	add    esp,0x10
c00140a9:	5b                   	pop    ebx
c00140aa:	5e                   	pop    esi
c00140ab:	5f                   	pop    edi
c00140ac:	c3                   	ret    

c00140ad <SysRegisterSignal(regs*)>:
c00140ad:	83 ec 18             	sub    esp,0x18
c00140b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00140b4:	6a 00                	push   0x0
c00140b6:	6a 00                	push   0x0
c00140b8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00140bb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00140be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140c3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00140c6:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00140cc:	e8 9c d8 ff ff       	call   c001196d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00140d1:	83 c4 2c             	add    esp,0x2c
c00140d4:	99                   	cdq    
c00140d5:	c3                   	ret    

c00140d6 <SysRegistryGetTypeFromPath(regs*)>:
c00140d6:	57                   	push   edi
c00140d7:	56                   	push   esi
c00140d8:	53                   	push   ebx
c00140d9:	81 ec 38 01 00 00    	sub    esp,0x138
c00140df:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00140e6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00140e9:	68 3f 25 02 c0       	push   0xc002253f
c00140ee:	e8 17 68 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00140f3:	5a                   	pop    edx
c00140f4:	59                   	pop    ecx
c00140f5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00140f8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00140fb:	e8 34 f6 ff ff       	call   c0013734 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014100:	5f                   	pop    edi
c0014101:	5a                   	pop    edx
c0014102:	89 c6                	mov    esi,eax
c0014104:	50                   	push   eax
c0014105:	68 5f 25 02 c0       	push   0xc002255f
c001410a:	e8 fb 67 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001410f:	83 c4 10             	add    esp,0x10
c0014112:	85 f6                	test   esi,esi
c0014114:	74 28                	je     c001413e <SysRegistryGetTypeFromPath(regs*)+0x68>
c0014116:	50                   	push   eax
c0014117:	8d 7c 24 08          	lea    edi,[esp+0x8]
c001411b:	57                   	push   edi
c001411c:	56                   	push   esi
c001411d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014120:	e8 f4 f1 ff ff       	call   c0013319 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014125:	83 c4 0c             	add    esp,0xc
c0014128:	57                   	push   edi
c0014129:	50                   	push   eax
c001412a:	89 c3                	mov    ebx,eax
c001412c:	68 67 25 02 c0       	push   0xc0022567
c0014131:	e8 d4 67 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014136:	89 d8                	mov    eax,ebx
c0014138:	83 c4 10             	add    esp,0x10
c001413b:	99                   	cdq    
c001413c:	eb 05                	jmp    c0014143 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c001413e:	83 c8 ff             	or     eax,0xffffffff
c0014141:	89 c2                	mov    edx,eax
c0014143:	81 c4 30 01 00 00    	add    esp,0x130
c0014149:	5b                   	pop    ebx
c001414a:	5e                   	pop    esi
c001414b:	5f                   	pop    edi
c001414c:	c3                   	ret    

c001414d <SysRegistryReadExtent(regs*)>:
c001414d:	83 ec 1c             	sub    esp,0x1c
c0014150:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014154:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014157:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001415a:	85 c0                	test   eax,eax
c001415c:	79 1f                	jns    c001417d <SysRegistryReadExtent(regs*)+0x30>
c001415e:	52                   	push   edx
c001415f:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014164:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014168:	52                   	push   edx
c0014169:	50                   	push   eax
c001416a:	51                   	push   ecx
c001416b:	e8 9b f0 ff ff       	call   c001320b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014170:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014174:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014178:	83 c4 10             	add    esp,0x10
c001417b:	eb 14                	jmp    c0014191 <SysRegistryReadExtent(regs*)+0x44>
c001417d:	83 ec 04             	sub    esp,0x4
c0014180:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014183:	50                   	push   eax
c0014184:	51                   	push   ecx
c0014185:	e8 1f eb ff ff       	call   c0012ca9 <CmGetString(Reghive_Tag*, int, char*)>
c001418a:	83 c4 10             	add    esp,0x10
c001418d:	31 c0                	xor    eax,eax
c001418f:	31 d2                	xor    edx,edx
c0014191:	83 c4 1c             	add    esp,0x1c
c0014194:	c3                   	ret    

c0014195 <SysRegistryPathToExtentLookup(regs*)>:
c0014195:	53                   	push   ebx
c0014196:	83 ec 10             	sub    esp,0x10
c0014199:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001419d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141a0:	68 7d 25 02 c0       	push   0xc002257d
c00141a5:	e8 60 67 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00141aa:	58                   	pop    eax
c00141ab:	5a                   	pop    edx
c00141ac:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141af:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00141b2:	e8 7d f5 ff ff       	call   c0013734 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00141b7:	83 c4 18             	add    esp,0x18
c00141ba:	5b                   	pop    ebx
c00141bb:	99                   	cdq    
c00141bc:	c3                   	ret    

c00141bd <SysRegistryEnterDirectory(regs*)>:
c00141bd:	53                   	push   ebx
c00141be:	83 ec 10             	sub    esp,0x10
c00141c1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00141c5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00141c8:	68 a0 25 02 c0       	push   0xc00225a0
c00141cd:	e8 38 67 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00141d2:	58                   	pop    eax
c00141d3:	5a                   	pop    edx
c00141d4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00141d7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00141da:	e8 41 eb ff ff       	call   c0012d20 <CmEnterDirectory(Reghive_Tag*, int)>
c00141df:	83 c4 18             	add    esp,0x18
c00141e2:	5b                   	pop    ebx
c00141e3:	99                   	cdq    
c00141e4:	c3                   	ret    

c00141e5 <SysRegistryGetNext(regs*)>:
c00141e5:	53                   	push   ebx
c00141e6:	83 ec 10             	sub    esp,0x10
c00141e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00141ed:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00141f0:	68 be 25 02 c0       	push   0xc00225be
c00141f5:	e8 10 67 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00141fa:	58                   	pop    eax
c00141fb:	5a                   	pop    edx
c00141fc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00141ff:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014202:	e8 58 eb ff ff       	call   c0012d5f <CmGetNext(Reghive_Tag*, int)>
c0014207:	83 c4 18             	add    esp,0x18
c001420a:	5b                   	pop    ebx
c001420b:	99                   	cdq    
c001420c:	c3                   	ret    

c001420d <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c001420d:	57                   	push   edi
c001420e:	56                   	push   esi
c001420f:	53                   	push   ebx
c0014210:	81 ec 34 01 00 00    	sub    esp,0x134
c0014216:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001421d:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014221:	57                   	push   edi
c0014222:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014225:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014228:	e8 ec f0 ff ff       	call   c0013319 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001422d:	89 c3                	mov    ebx,eax
c001422f:	58                   	pop    eax
c0014230:	5a                   	pop    edx
c0014231:	57                   	push   edi
c0014232:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014235:	e8 16 c4 fe ff       	call   c0000650 <strcpy>
c001423a:	81 c4 40 01 00 00    	add    esp,0x140
c0014240:	89 d8                	mov    eax,ebx
c0014242:	5b                   	pop    ebx
c0014243:	99                   	cdq    
c0014244:	5e                   	pop    esi
c0014245:	5f                   	pop    edi
c0014246:	c3                   	ret    

c0014247 <SysRegistryOpen(regs*)>:
c0014247:	83 ec 18             	sub    esp,0x18
c001424a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001424e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014251:	e8 e3 e8 ff ff       	call   c0012b39 <CmOpen(char const*)>
c0014256:	83 c4 1c             	add    esp,0x1c
c0014259:	99                   	cdq    
c001425a:	c3                   	ret    

c001425b <SysRegistryClose(regs*)>:
c001425b:	83 ec 18             	sub    esp,0x18
c001425e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014262:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014265:	e8 ed e9 ff ff       	call   c0012c57 <CmClose(Reghive_Tag*)>
c001426a:	31 c0                	xor    eax,eax
c001426c:	31 d2                	xor    edx,edx
c001426e:	83 c4 1c             	add    esp,0x1c
c0014271:	c3                   	ret    

c0014272 <SysSbrk(regs*)>:
c0014272:	56                   	push   esi
c0014273:	53                   	push   ebx
c0014274:	50                   	push   eax
c0014275:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001427a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001427e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014281:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014284:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001428a:	85 db                	test   ebx,ebx
c001428c:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001428f:	74 02                	je     c0014293 <SysSbrk(regs*)+0x21>
c0014291:	79 06                	jns    c0014299 <SysSbrk(regs*)+0x27>
c0014293:	89 f0                	mov    eax,esi
c0014295:	31 d2                	xor    edx,edx
c0014297:	eb 2a                	jmp    c00142c3 <SysSbrk(regs*)+0x51>
c0014299:	83 c8 ff             	or     eax,0xffffffff
c001429c:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00142a2:	89 c2                	mov    edx,eax
c00142a4:	77 1d                	ja     c00142c3 <SysSbrk(regs*)+0x51>
c00142a6:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00142ac:	50                   	push   eax
c00142ad:	68 07 0c 00 00       	push   0xc07
c00142b2:	c1 ea 0c             	shr    edx,0xc
c00142b5:	52                   	push   edx
c00142b6:	51                   	push   ecx
c00142b7:	e8 4a 5b ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c00142bc:	89 f0                	mov    eax,esi
c00142be:	31 d2                	xor    edx,edx
c00142c0:	83 c4 10             	add    esp,0x10
c00142c3:	59                   	pop    ecx
c00142c4:	5b                   	pop    ebx
c00142c5:	5e                   	pop    esi
c00142c6:	c3                   	ret    

c00142c7 <SysSetCwd(regs*)>:
c00142c7:	83 ec 14             	sub    esp,0x14
c00142ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142ce:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00142d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142d6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00142d9:	e8 63 7b ff ff       	call   c000be41 <Fs::setcwd(Process*, char*)>
c00142de:	83 c4 1c             	add    esp,0x1c
c00142e1:	99                   	cdq    
c00142e2:	c3                   	ret    

c00142e3 <SysSetTime(regs*)>:
c00142e3:	55                   	push   ebp
c00142e4:	31 c9                	xor    ecx,ecx
c00142e6:	57                   	push   edi
c00142e7:	bd 0c 00 00 00       	mov    ebp,0xc
c00142ec:	56                   	push   esi
c00142ed:	53                   	push   ebx
c00142ee:	31 db                	xor    ebx,ebx
c00142f0:	83 ec 10             	sub    esp,0x10
c00142f3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00142f7:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00142fa:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00142fd:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0014300:	89 c2                	mov    edx,eax
c0014302:	c1 e8 05             	shr    eax,0x5
c0014305:	83 e2 1f             	and    edx,0x1f
c0014308:	42                   	inc    edx
c0014309:	81 ef 6c 07 00 00    	sub    edi,0x76c
c001430f:	c1 e7 10             	shl    edi,0x10
c0014312:	88 d1                	mov    cl,dl
c0014314:	31 d2                	xor    edx,edx
c0014316:	f7 f5                	div    ebp
c0014318:	89 dd                	mov    ebp,ebx
c001431a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0014320:	88 d5                	mov    ch,dl
c0014322:	31 d2                	xor    edx,edx
c0014324:	0f b7 c1             	movzx  eax,cx
c0014327:	09 f8                	or     eax,edi
c0014329:	bf 3c 00 00 00       	mov    edi,0x3c
c001432e:	89 c1                	mov    ecx,eax
c0014330:	89 f0                	mov    eax,esi
c0014332:	f7 f7                	div    edi
c0014334:	c1 e2 10             	shl    edx,0x10
c0014337:	09 d5                	or     ebp,edx
c0014339:	31 d2                	xor    edx,edx
c001433b:	f7 f7                	div    edi
c001433d:	89 eb                	mov    ebx,ebp
c001433f:	bf 10 0e 00 00       	mov    edi,0xe10
c0014344:	89 f0                	mov    eax,esi
c0014346:	88 d7                	mov    bh,dl
c0014348:	31 d2                	xor    edx,edx
c001434a:	f7 f7                	div    edi
c001434c:	bf 18 00 00 00       	mov    edi,0x18
c0014351:	31 d2                	xor    edx,edx
c0014353:	f7 f7                	div    edi
c0014355:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001435a:	88 d3                	mov    bl,dl
c001435c:	53                   	push   ebx
c001435d:	51                   	push   ecx
c001435e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0014364:	e8 eb 82 ff ff       	call   c000c654 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014369:	83 c4 1c             	add    esp,0x1c
c001436c:	31 d2                	xor    edx,edx
c001436e:	5b                   	pop    ebx
c001436f:	5e                   	pop    esi
c0014370:	83 f0 01             	xor    eax,0x1
c0014373:	5f                   	pop    edi
c0014374:	0f b6 c0             	movzx  eax,al
c0014377:	5d                   	pop    ebp
c0014378:	c3                   	ret    

c0014379 <SysSymlink(regs*)>:
c0014379:	53                   	push   ebx
c001437a:	83 c8 ff             	or     eax,0xffffffff
c001437d:	83 ec 08             	sub    esp,0x8
c0014380:	89 c2                	mov    edx,eax
c0014382:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014386:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014389:	85 c9                	test   ecx,ecx
c001438b:	74 14                	je     c00143a1 <SysSymlink(regs*)+0x28>
c001438d:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0014390:	85 db                	test   ebx,ebx
c0014392:	74 0d                	je     c00143a1 <SysSymlink(regs*)+0x28>
c0014394:	50                   	push   eax
c0014395:	50                   	push   eax
c0014396:	53                   	push   ebx
c0014397:	51                   	push   ecx
c0014398:	e8 e4 6e ff ff       	call   c000b281 <KeCreateSymlink(char const*, char const*)>
c001439d:	83 c4 10             	add    esp,0x10
c00143a0:	99                   	cdq    
c00143a1:	83 c4 08             	add    esp,0x8
c00143a4:	5b                   	pop    ebx
c00143a5:	c3                   	ret    

c00143a6 <SysTimezone(regs*)>:
c00143a6:	53                   	push   ebx
c00143a7:	83 ec 08             	sub    esp,0x8
c00143aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00143ae:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00143b2:	75 17                	jne    c00143cb <SysTimezone(regs*)+0x25>
c00143b4:	83 ec 0c             	sub    esp,0xc
c00143b7:	68 d5 25 02 c0       	push   0xc00225d5
c00143bc:	e8 49 65 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00143c1:	83 c8 ff             	or     eax,0xffffffff
c00143c4:	83 c4 10             	add    esp,0x10
c00143c7:	89 c2                	mov    edx,eax
c00143c9:	eb 20                	jmp    c00143eb <SysTimezone(regs*)+0x45>
c00143cb:	83 ec 0c             	sub    esp,0xc
c00143ce:	68 ea 25 02 c0       	push   0xc00225ea
c00143d3:	e8 32 65 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00143d8:	58                   	pop    eax
c00143d9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00143dc:	e8 d7 7f ff ff       	call   c000c3b8 <User::loadClockSettings(int)>
c00143e1:	83 c4 10             	add    esp,0x10
c00143e4:	b8 01 00 00 00       	mov    eax,0x1
c00143e9:	31 d2                	xor    edx,edx
c00143eb:	83 c4 08             	add    esp,0x8
c00143ee:	5b                   	pop    ebx
c00143ef:	c3                   	ret    

c00143f0 <SysTruncate(regs*)>:
c00143f0:	55                   	push   ebp
c00143f1:	57                   	push   edi
c00143f2:	31 ff                	xor    edi,edi
c00143f4:	56                   	push   esi
c00143f5:	53                   	push   ebx
c00143f6:	83 ec 0c             	sub    esp,0xc
c00143f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143fd:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014400:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014404:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014407:	89 ce                	mov    esi,ecx
c0014409:	0f 84 9a 00 00 00    	je     c00144a9 <SysTruncate(regs*)+0xb9>
c001440f:	83 ec 0c             	sub    esp,0xc
c0014412:	68 14 01 00 00       	push   0x114
c0014417:	e8 b7 36 ff ff       	call   c0007ad3 <malloc>
c001441c:	83 c4 0c             	add    esp,0xc
c001441f:	89 c3                	mov    ebx,eax
c0014421:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014426:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014429:	55                   	push   ebp
c001442a:	53                   	push   ebx
c001442b:	e8 90 76 ff ff       	call   c000bac0 <File::File(char const*, Process*)>
c0014430:	83 c4 10             	add    esp,0x10
c0014433:	31 d2                	xor    edx,edx
c0014435:	85 db                	test   ebx,ebx
c0014437:	b8 03 00 00 00       	mov    eax,0x3
c001443c:	0f 84 a2 00 00 00    	je     c00144e4 <SysTruncate(regs*)+0xf4>
c0014442:	51                   	push   ecx
c0014443:	51                   	push   ecx
c0014444:	6a 02                	push   0x2
c0014446:	53                   	push   ebx
c0014447:	e8 92 76 ff ff       	call   c000bade <File::open(FileOpenMode)>
c001444c:	83 c4 10             	add    esp,0x10
c001444f:	85 c0                	test   eax,eax
c0014451:	74 13                	je     c0014466 <SysTruncate(regs*)+0x76>
c0014453:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014455:	83 ec 0c             	sub    esp,0xc
c0014458:	53                   	push   ebx
c0014459:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001445c:	83 c4 10             	add    esp,0x10
c001445f:	b8 04 00 00 00       	mov    eax,0x4
c0014464:	eb 7c                	jmp    c00144e2 <SysTruncate(regs*)+0xf2>
c0014466:	52                   	push   edx
c0014467:	57                   	push   edi
c0014468:	56                   	push   esi
c0014469:	53                   	push   ebx
c001446a:	e8 83 77 ff ff       	call   c000bbf2 <File::truncate(unsigned long long)>
c001446f:	83 c4 10             	add    esp,0x10
c0014472:	85 c0                	test   eax,eax
c0014474:	74 1b                	je     c0014491 <SysTruncate(regs*)+0xa1>
c0014476:	83 ec 0c             	sub    esp,0xc
c0014479:	53                   	push   ebx
c001447a:	e8 bd 76 ff ff       	call   c000bb3c <File::close()>
c001447f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014481:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014484:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014487:	83 c4 10             	add    esp,0x10
c001448a:	b8 05 00 00 00       	mov    eax,0x5
c001448f:	eb 51                	jmp    c00144e2 <SysTruncate(regs*)+0xf2>
c0014491:	83 ec 0c             	sub    esp,0xc
c0014494:	53                   	push   ebx
c0014495:	e8 a2 76 ff ff       	call   c000bb3c <File::close()>
c001449a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001449c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001449f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00144a2:	83 c4 10             	add    esp,0x10
c00144a5:	31 c0                	xor    eax,eax
c00144a7:	eb 39                	jmp    c00144e2 <SysTruncate(regs*)+0xf2>
c00144a9:	31 d2                	xor    edx,edx
c00144ab:	83 fd 02             	cmp    ebp,0x2
c00144ae:	b8 01 00 00 00       	mov    eax,0x1
c00144b3:	7e 2f                	jle    c00144e4 <SysTruncate(regs*)+0xf4>
c00144b5:	83 ec 0c             	sub    esp,0xc
c00144b8:	51                   	push   ecx
c00144b9:	e8 dd 4f ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c00144be:	83 c4 10             	add    esp,0x10
c00144c1:	31 d2                	xor    edx,edx
c00144c3:	89 c1                	mov    ecx,eax
c00144c5:	b8 02 00 00 00       	mov    eax,0x2
c00144ca:	85 c9                	test   ecx,ecx
c00144cc:	74 16                	je     c00144e4 <SysTruncate(regs*)+0xf4>
c00144ce:	50                   	push   eax
c00144cf:	57                   	push   edi
c00144d0:	56                   	push   esi
c00144d1:	51                   	push   ecx
c00144d2:	e8 1b 77 ff ff       	call   c000bbf2 <File::truncate(unsigned long long)>
c00144d7:	83 c4 10             	add    esp,0x10
c00144da:	85 c0                	test   eax,eax
c00144dc:	0f 95 c0             	setne  al
c00144df:	0f b6 c0             	movzx  eax,al
c00144e2:	31 d2                	xor    edx,edx
c00144e4:	83 c4 0c             	add    esp,0xc
c00144e7:	5b                   	pop    ebx
c00144e8:	5e                   	pop    esi
c00144e9:	5f                   	pop    edi
c00144ea:	5d                   	pop    ebp
c00144eb:	c3                   	ret    

c00144ec <SysWrite(regs*)>:
c00144ec:	57                   	push   edi
c00144ed:	56                   	push   esi
c00144ee:	53                   	push   ebx
c00144ef:	83 ec 10             	sub    esp,0x10
c00144f2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00144f6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00144f9:	83 f8 02             	cmp    eax,0x2
c00144fc:	77 10                	ja     c001450e <SysWrite(regs*)+0x22>
c00144fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014503:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014506:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001450c:	eb 0e                	jmp    c001451c <SysWrite(regs*)+0x30>
c001450e:	83 ec 0c             	sub    esp,0xc
c0014511:	50                   	push   eax
c0014512:	e8 84 4f ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0014517:	83 c4 10             	add    esp,0x10
c001451a:	89 c1                	mov    ecx,eax
c001451c:	83 c8 ff             	or     eax,0xffffffff
c001451f:	85 c9                	test   ecx,ecx
c0014521:	89 c2                	mov    edx,eax
c0014523:	74 28                	je     c001454d <SysWrite(regs*)+0x61>
c0014525:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001452d:	83 ec 0c             	sub    esp,0xc
c0014530:	31 ff                	xor    edi,edi
c0014532:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014536:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014538:	52                   	push   edx
c0014539:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001453c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001453f:	57                   	push   edi
c0014540:	56                   	push   esi
c0014541:	51                   	push   ecx
c0014542:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014545:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014549:	83 c4 20             	add    esp,0x20
c001454c:	99                   	cdq    
c001454d:	83 c4 10             	add    esp,0x10
c0014550:	5b                   	pop    ebx
c0014551:	5e                   	pop    esi
c0014552:	5f                   	pop    edi
c0014553:	c3                   	ret    

c0014554 <SysWsbe(regs*)>:
c0014554:	57                   	push   edi
c0014555:	b9 0b 00 00 00       	mov    ecx,0xb
c001455a:	56                   	push   esi
c001455b:	be 29 26 02 c0       	mov    esi,0xc0022629
c0014560:	53                   	push   ebx
c0014561:	83 ec 30             	sub    esp,0x30
c0014564:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014568:	fc                   	cld    
c0014569:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001456b:	83 ec 0c             	sub    esp,0xc
c001456e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014572:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014577:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001457a:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014580:	8b 06                	mov    eax,DWORD PTR [esi]
c0014582:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0014585:	57                   	push   edi
c0014586:	e8 f5 bf fe ff       	call   c0000580 <strlen>
c001458b:	5a                   	pop    edx
c001458c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014590:	52                   	push   edx
c0014591:	31 d2                	xor    edx,edx
c0014593:	57                   	push   edi
c0014594:	52                   	push   edx
c0014595:	50                   	push   eax
c0014596:	56                   	push   esi
c0014597:	ff d3                	call   ebx
c0014599:	83 c4 14             	add    esp,0x14
c001459c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00145a0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00145a3:	e8 a8 23 00 00       	call   c0016950 <terminateTask(int)>
c00145a8:	83 c4 40             	add    esp,0x40
c00145ab:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00145b0:	5b                   	pop    ebx
c00145b1:	31 d2                	xor    edx,edx
c00145b3:	5e                   	pop    esi
c00145b4:	5f                   	pop    edi
c00145b5:	c3                   	ret    

c00145b6 <SysYield(regs*)>:
c00145b6:	83 ec 0c             	sub    esp,0xc
c00145b9:	fa                   	cli    
c00145ba:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00145c0:	e8 0b 1a 00 00       	call   c0015fd0 <schedule()>
c00145c5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00145ca:	48                   	dec    eax
c00145cb:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00145d0:	75 01                	jne    c00145d3 <SysYield(regs*)+0x1d>
c00145d2:	fb                   	sti    
c00145d3:	31 c0                	xor    eax,eax
c00145d5:	31 d2                	xor    edx,edx
c00145d7:	83 c4 0c             	add    esp,0xc
c00145da:	c3                   	ret    

c00145db <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00145db:	55                   	push   ebp
c00145dc:	57                   	push   edi
c00145dd:	56                   	push   esi
c00145de:	53                   	push   ebx
c00145df:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00145e5:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00145f0:	74 3b                	je     c001462d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00145f2:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00145fa:	74 31                	je     c001462d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00145fc:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0014604:	75 27                	jne    c001462d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014606:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001460d:	05 00 10 00 00       	add    eax,0x1000
c0014612:	89 c2                	mov    edx,eax
c0014614:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014619:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0014620:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0014626:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001462d:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0014634:	83 ec 0c             	sub    esp,0xc
c0014637:	6a 01                	push   0x1
c0014639:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001463f:	e8 b1 4f ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0014644:	83 c4 10             	add    esp,0x10
c0014647:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001464d:	89 c3                	mov    ebx,eax
c001464f:	0f 86 26 01 00 00    	jbe    c001477b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c0014655:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001465d:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014664:	c1 ee 0c             	shr    esi,0xc
c0014667:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001466b:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014672:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0014679:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001467d:	29 ef                	sub    edi,ebp
c001467f:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0014683:	0f 83 f9 00 00 00    	jae    c0014782 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0014689:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001468f:	b8 00 10 00 00       	mov    eax,0x1000
c0014694:	0f 47 f8             	cmova  edi,eax
c0014697:	83 ec 0c             	sub    esp,0xc
c001469a:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00146a1:	31 d2                	xor    edx,edx
c00146a3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00146a5:	8d 44 24 28          	lea    eax,[esp+0x28]
c00146a9:	50                   	push   eax
c00146aa:	8d 74 24 30          	lea    esi,[esp+0x30]
c00146ae:	56                   	push   esi
c00146af:	52                   	push   edx
c00146b0:	57                   	push   edi
c00146b1:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00146b8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00146bb:	83 c4 20             	add    esp,0x20
c00146be:	85 c0                	test   eax,eax
c00146c0:	75 06                	jne    c00146c8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c00146c2:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00146c6:	74 13                	je     c00146db <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c00146c8:	83 ec 0c             	sub    esp,0xc
c00146cb:	53                   	push   ebx
c00146cc:	e8 38 52 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c00146d1:	83 c4 10             	add    esp,0x10
c00146d4:	31 c0                	xor    eax,eax
c00146d6:	e9 7c 01 00 00       	jmp    c0014857 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c00146db:	fa                   	cli    
c00146dc:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00146e2:	e8 fb 36 ff ff       	call   c0007de2 <Phys::allocatePage()>
c00146e7:	6a 07                	push   0x7
c00146e9:	53                   	push   ebx
c00146ea:	50                   	push   eax
c00146eb:	89 c7                	mov    edi,eax
c00146ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146f2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00146f5:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00146fb:	e8 fe 55 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0014700:	83 c4 0c             	add    esp,0xc
c0014703:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001470a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014710:	6a 00                	push   0x0
c0014712:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014717:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001471a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014720:	e8 3f 54 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0014725:	58                   	pop    eax
c0014726:	5a                   	pop    edx
c0014727:	68 07 0c 00 00       	push   0xc07
c001472c:	55                   	push   ebp
c001472d:	57                   	push   edi
c001472e:	89 df                	mov    edi,ebx
c0014730:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014737:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001473d:	6a 00                	push   0x0
c001473f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014744:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014747:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001474d:	e8 10 58 ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014752:	b9 00 10 00 00       	mov    ecx,0x1000
c0014757:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014759:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001475e:	83 c4 20             	add    esp,0x20
c0014761:	48                   	dec    eax
c0014762:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014767:	85 c0                	test   eax,eax
c0014769:	75 01                	jne    c001476c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c001476b:	fb                   	sti    
c001476c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014770:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014776:	e9 f0 fe ff ff       	jmp    c001466b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c001477b:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014782:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014789:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001478f:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014795:	0f 86 ae 00 00 00    	jbe    c0014849 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c001479b:	fa                   	cli    
c001479c:	51                   	push   ecx
c001479d:	31 ff                	xor    edi,edi
c001479f:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00147a6:	c1 ee 0c             	shr    esi,0xc
c00147a9:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00147af:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147b5:	6a 00                	push   0x0
c00147b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147bc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00147bf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147c5:	e8 9a 53 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c00147ca:	83 c4 10             	add    esp,0x10
c00147cd:	e8 10 36 ff ff       	call   c0007de2 <Phys::allocatePage()>
c00147d2:	47                   	inc    edi
c00147d3:	6a 07                	push   0x7
c00147d5:	53                   	push   ebx
c00147d6:	50                   	push   eax
c00147d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00147db:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00147e1:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00147e4:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00147ea:	e8 0f 55 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00147ef:	58                   	pop    eax
c00147f0:	5a                   	pop    edx
c00147f1:	68 07 0c 00 00       	push   0xc07
c00147f6:	55                   	push   ebp
c00147f7:	81 c5 00 10 00 00    	add    ebp,0x1000
c00147fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014801:	50                   	push   eax
c0014802:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014809:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001480f:	6a 00                	push   0x0
c0014811:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014816:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014819:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001481f:	e8 3e 57 ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014824:	83 c4 1c             	add    esp,0x1c
c0014827:	68 00 10 00 00       	push   0x1000
c001482c:	6a 00                	push   0x0
c001482e:	53                   	push   ebx
c001482f:	e8 bc bc fe ff       	call   c00004f0 <memset>
c0014834:	83 c4 10             	add    esp,0x10
c0014837:	39 fe                	cmp    esi,edi
c0014839:	77 92                	ja     c00147cd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c001483b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014840:	48                   	dec    eax
c0014841:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014846:	75 01                	jne    c0014849 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0014848:	fb                   	sti    
c0014849:	83 ec 0c             	sub    esp,0xc
c001484c:	53                   	push   ebx
c001484d:	e8 b7 50 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0014852:	83 c4 10             	add    esp,0x10
c0014855:	b0 01                	mov    al,0x1
c0014857:	81 c4 2c 10 00 00    	add    esp,0x102c
c001485d:	5b                   	pop    ebx
c001485e:	5e                   	pop    esi
c001485f:	5f                   	pop    edi
c0014860:	5d                   	pop    ebp
c0014861:	c3                   	ret    

c0014862 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014862:	55                   	push   ebp
c0014863:	57                   	push   edi
c0014864:	56                   	push   esi
c0014865:	53                   	push   ebx
c0014866:	83 ec 48             	sub    esp,0x48
c0014869:	68 14 01 00 00       	push   0x114
c001486e:	e8 60 32 ff ff       	call   c0007ad3 <malloc>
c0014873:	83 c4 0c             	add    esp,0xc
c0014876:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001487a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001487e:	89 c7                	mov    edi,eax
c0014880:	50                   	push   eax
c0014881:	e8 3a 72 ff ff       	call   c000bac0 <File::File(char const*, Process*)>
c0014886:	58                   	pop    eax
c0014887:	5a                   	pop    edx
c0014888:	6a 01                	push   0x1
c001488a:	57                   	push   edi
c001488b:	e8 4e 72 ff ff       	call   c000bade <File::open(FileOpenMode)>
c0014890:	83 c4 10             	add    esp,0x10
c0014893:	85 c0                	test   eax,eax
c0014895:	0f 85 4c 01 00 00    	jne    c00149e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001489b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00148a3:	83 ec 0c             	sub    esp,0xc
c00148a6:	6a 34                	push   0x34
c00148a8:	e8 26 32 ff ff       	call   c0007ad3 <malloc>
c00148ad:	89 c3                	mov    ebx,eax
c00148af:	58                   	pop    eax
c00148b0:	8b 07                	mov    eax,DWORD PTR [edi]
c00148b2:	8d 74 24 38          	lea    esi,[esp+0x38]
c00148b6:	56                   	push   esi
c00148b7:	53                   	push   ebx
c00148b8:	6a 00                	push   0x0
c00148ba:	6a 34                	push   0x34
c00148bc:	57                   	push   edi
c00148bd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00148c0:	83 c4 20             	add    esp,0x20
c00148c3:	85 c0                	test   eax,eax
c00148c5:	0f 85 1c 01 00 00    	jne    c00149e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00148cb:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00148d1:	0f 85 10 01 00 00    	jne    c00149e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00148d7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00148da:	85 c0                	test   eax,eax
c00148dc:	0f 84 05 01 00 00    	je     c00149e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00148e2:	31 d2                	xor    edx,edx
c00148e4:	55                   	push   ebp
c00148e5:	52                   	push   edx
c00148e6:	50                   	push   eax
c00148e7:	57                   	push   edi
c00148e8:	e8 af 72 ff ff       	call   c000bb9c <File::seek(unsigned long long)>
c00148ed:	83 c4 10             	add    esp,0x10
c00148f0:	85 c0                	test   eax,eax
c00148f2:	0f 85 ef 00 00 00    	jne    c00149e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00148f8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00148fb:	83 ec 0c             	sub    esp,0xc
c00148fe:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014902:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014906:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001490a:	0f af c2             	imul   eax,edx
c001490d:	50                   	push   eax
c001490e:	e8 c0 31 ff ff       	call   c0007ad3 <malloc>
c0014913:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014915:	89 34 24             	mov    DWORD PTR [esp],esi
c0014918:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001491c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014920:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014924:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014928:	0f af c2             	imul   eax,edx
c001492b:	99                   	cdq    
c001492c:	52                   	push   edx
c001492d:	50                   	push   eax
c001492e:	57                   	push   edi
c001492f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014932:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014935:	83 c4 20             	add    esp,0x20
c0014938:	85 c0                	test   eax,eax
c001493a:	0f 84 a7 00 00 00    	je     c00149e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014940:	31 d2                	xor    edx,edx
c0014942:	51                   	push   ecx
c0014943:	52                   	push   edx
c0014944:	50                   	push   eax
c0014945:	57                   	push   edi
c0014946:	e8 51 72 ff ff       	call   c000bb9c <File::seek(unsigned long long)>
c001494b:	83 c4 10             	add    esp,0x10
c001494e:	85 c0                	test   eax,eax
c0014950:	0f 85 91 00 00 00    	jne    c00149e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014956:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001495a:	83 ec 0c             	sub    esp,0xc
c001495d:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014961:	0f af c2             	imul   eax,edx
c0014964:	50                   	push   eax
c0014965:	e8 69 31 ff ff       	call   c0007ad3 <malloc>
c001496a:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001496c:	89 34 24             	mov    DWORD PTR [esp],esi
c001496f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014973:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014977:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001497b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001497f:	0f af c2             	imul   eax,edx
c0014982:	99                   	cdq    
c0014983:	52                   	push   edx
c0014984:	50                   	push   eax
c0014985:	57                   	push   edi
c0014986:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014989:	83 c4 20             	add    esp,0x20
c001498c:	31 c9                	xor    ecx,ecx
c001498e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014996:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c001499a:	0f b7 e9             	movzx  ebp,cx
c001499d:	0f 83 86 00 00 00    	jae    c0014a29 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c00149a3:	c1 e5 05             	shl    ebp,0x5
c00149a6:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c00149aa:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c00149ae:	75 73                	jne    c0014a23 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c00149b0:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00149b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149b7:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00149ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00149be:	52                   	push   edx
c00149bf:	31 d2                	xor    edx,edx
c00149c1:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00149c4:	52                   	push   edx
c00149c5:	50                   	push   eax
c00149c6:	57                   	push   edi
c00149c7:	e8 d0 71 ff ff       	call   c000bb9c <File::seek(unsigned long long)>
c00149cc:	83 c4 10             	add    esp,0x10
c00149cf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00149d3:	85 c0                	test   eax,eax
c00149d5:	74 17                	je     c00149ee <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c00149d7:	83 ec 0c             	sub    esp,0xc
c00149da:	68 55 26 02 c0       	push   0xc0022655
c00149df:	e8 26 5f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00149e4:	83 c4 10             	add    esp,0x10
c00149e7:	31 c0                	xor    eax,eax
c00149e9:	e9 8b 00 00 00       	jmp    c0014a79 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c00149ee:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00149f2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00149f5:	83 ec 0c             	sub    esp,0xc
c00149f8:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c00149fb:	50                   	push   eax
c00149fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014a00:	56                   	push   esi
c0014a01:	57                   	push   edi
c0014a02:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014a06:	e8 d0 fb ff ff       	call   c00145db <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014a0b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014a0f:	83 c4 20             	add    esp,0x20
c0014a12:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0014a16:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014a1a:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0014a1f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014a23:	41                   	inc    ecx
c0014a24:	e9 6d ff ff ff       	jmp    c0014996 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014a29:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014a2d:	83 ec 0c             	sub    esp,0xc
c0014a30:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014a34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a38:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0014a3e:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0014a44:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014a49:	05 00 10 00 00       	add    eax,0x1000
c0014a4e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014a51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a55:	e8 89 30 ff ff       	call   c0007ae3 <free>
c0014a5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a5d:	e8 81 30 ff ff       	call   c0007ae3 <free>
c0014a62:	58                   	pop    eax
c0014a63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014a67:	e8 77 30 ff ff       	call   c0007ae3 <free>
c0014a6c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014a6f:	e8 c8 70 ff ff       	call   c000bb3c <File::close()>
c0014a74:	83 c4 10             	add    esp,0x10
c0014a77:	b0 01                	mov    al,0x1
c0014a79:	83 c4 3c             	add    esp,0x3c
c0014a7c:	5b                   	pop    ebx
c0014a7d:	5e                   	pop    esi
c0014a7e:	5f                   	pop    edi
c0014a7f:	5d                   	pop    ebp
c0014a80:	c3                   	ret    

c0014a81 <Thr::runtimeReferenceHelper()>:
c0014a81:	83 ec 18             	sub    esp,0x18
c0014a84:	68 5d 26 02 c0       	push   0xc002265d
c0014a89:	e8 7c 5e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014a8e:	fa                   	cli    
c0014a8f:	83 c4 10             	add    esp,0x10
c0014a92:	eb fe                	jmp    c0014a92 <Thr::runtimeReferenceHelper()+0x11>

c0014a94 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014a94:	57                   	push   edi
c0014a95:	56                   	push   esi
c0014a96:	53                   	push   ebx
c0014a97:	31 db                	xor    ebx,ebx
c0014a99:	39 1d a0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6a0,ebx
c0014a9f:	7e 3c                	jle    c0014add <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014aa1:	8b 34 9d 20 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd39e0]
c0014aa8:	31 ff                	xor    edi,edi
c0014aaa:	39 3c 9d 20 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3ae0],edi
c0014ab1:	7e 27                	jle    c0014ada <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014ab3:	50                   	push   eax
c0014ab4:	50                   	push   eax
c0014ab5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ab9:	8b 06                	mov    eax,DWORD PTR [esi]
c0014abb:	03 04 9d a0 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a60]
c0014ac2:	50                   	push   eax
c0014ac3:	e8 b8 bc fe ff       	call   c0000780 <strcmp>
c0014ac8:	83 c4 10             	add    esp,0x10
c0014acb:	85 c0                	test   eax,eax
c0014acd:	75 05                	jne    c0014ad4 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014acf:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014ad2:	eb 0b                	jmp    c0014adf <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014ad4:	83 c6 10             	add    esi,0x10
c0014ad7:	47                   	inc    edi
c0014ad8:	eb d0                	jmp    c0014aaa <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014ada:	43                   	inc    ebx
c0014adb:	eb bc                	jmp    c0014a99 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014add:	31 c0                	xor    eax,eax
c0014adf:	5b                   	pop    ebx
c0014ae0:	5e                   	pop    esi
c0014ae1:	5f                   	pop    edi
c0014ae2:	c3                   	ret    

c0014ae3 <Thr::loadKernelSymbolTable(char const*)>:
c0014ae3:	55                   	push   ebp
c0014ae4:	57                   	push   edi
c0014ae5:	56                   	push   esi
c0014ae6:	53                   	push   ebx
c0014ae7:	83 ec 68             	sub    esp,0x68
c0014aea:	68 14 01 00 00       	push   0x114
c0014aef:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014af5:	e8 d9 2f ff ff       	call   c0007ad3 <malloc>
c0014afa:	83 c4 0c             	add    esp,0xc
c0014afd:	56                   	push   esi
c0014afe:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014b02:	89 c3                	mov    ebx,eax
c0014b04:	50                   	push   eax
c0014b05:	e8 b6 6f ff ff       	call   c000bac0 <File::File(char const*, Process*)>
c0014b0a:	5e                   	pop    esi
c0014b0b:	5f                   	pop    edi
c0014b0c:	6a 01                	push   0x1
c0014b0e:	53                   	push   ebx
c0014b0f:	e8 ca 6f ff ff       	call   c000bade <File::open(FileOpenMode)>
c0014b14:	83 c4 10             	add    esp,0x10
c0014b17:	85 c0                	test   eax,eax
c0014b19:	74 0a                	je     c0014b25 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014b1b:	83 ec 0c             	sub    esp,0xc
c0014b1e:	68 7f 26 02 c0       	push   0xc002267f
c0014b23:	eb 34                	jmp    c0014b59 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014b25:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014b2d:	83 ec 0c             	sub    esp,0xc
c0014b30:	6a 34                	push   0x34
c0014b32:	e8 9c 2f ff ff       	call   c0007ad3 <malloc>
c0014b37:	59                   	pop    ecx
c0014b38:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014b3c:	89 c7                	mov    edi,eax
c0014b3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014b40:	56                   	push   esi
c0014b41:	57                   	push   edi
c0014b42:	6a 00                	push   0x0
c0014b44:	6a 34                	push   0x34
c0014b46:	53                   	push   ebx
c0014b47:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014b4a:	83 c4 20             	add    esp,0x20
c0014b4d:	85 c0                	test   eax,eax
c0014b4f:	74 17                	je     c0014b68 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014b51:	83 ec 0c             	sub    esp,0xc
c0014b54:	68 96 26 02 c0       	push   0xc0022696
c0014b59:	e8 a9 c9 ff ff       	call   c0011507 <KePanic(char const*)>
c0014b5e:	83 c4 10             	add    esp,0x10
c0014b61:	31 c0                	xor    eax,eax
c0014b63:	e9 31 02 00 00       	jmp    c0014d99 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014b68:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014b6e:	75 e1                	jne    c0014b51 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014b70:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014b73:	85 c0                	test   eax,eax
c0014b75:	74 da                	je     c0014b51 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014b77:	52                   	push   edx
c0014b78:	31 d2                	xor    edx,edx
c0014b7a:	52                   	push   edx
c0014b7b:	50                   	push   eax
c0014b7c:	53                   	push   ebx
c0014b7d:	e8 1a 70 ff ff       	call   c000bb9c <File::seek(unsigned long long)>
c0014b82:	83 c4 10             	add    esp,0x10
c0014b85:	85 c0                	test   eax,eax
c0014b87:	75 c8                	jne    c0014b51 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014b89:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014b8d:	83 ec 0c             	sub    esp,0xc
c0014b90:	31 ed                	xor    ebp,ebp
c0014b92:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014b96:	0f af c2             	imul   eax,edx
c0014b99:	50                   	push   eax
c0014b9a:	e8 34 2f ff ff       	call   c0007ad3 <malloc>
c0014b9f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014ba1:	89 34 24             	mov    DWORD PTR [esp],esi
c0014ba4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014ba8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014bac:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014bb0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014bb4:	0f af c2             	imul   eax,edx
c0014bb7:	99                   	cdq    
c0014bb8:	52                   	push   edx
c0014bb9:	50                   	push   eax
c0014bba:	53                   	push   ebx
c0014bbb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014bbe:	83 c4 20             	add    esp,0x20
c0014bc1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014bc9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014bd1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014bd9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014be1:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014be5:	0f b7 f5             	movzx  esi,bp
c0014be8:	0f 83 a7 00 00 00    	jae    c0014c95 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014bee:	6b f6 28             	imul   esi,esi,0x28
c0014bf1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014bf5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014bf8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014bfc:	50                   	push   eax
c0014bfd:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014c01:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014c05:	8b 16                	mov    edx,DWORD PTR [esi]
c0014c07:	6b c0 28             	imul   eax,eax,0x28
c0014c0a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014c0e:	89 d0                	mov    eax,edx
c0014c10:	31 d2                	xor    edx,edx
c0014c12:	52                   	push   edx
c0014c13:	50                   	push   eax
c0014c14:	53                   	push   ebx
c0014c15:	e8 82 6f ff ff       	call   c000bb9c <File::seek(unsigned long long)>
c0014c1a:	83 c4 0c             	add    esp,0xc
c0014c1d:	6a 20                	push   0x20
c0014c1f:	6a 00                	push   0x0
c0014c21:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014c25:	52                   	push   edx
c0014c26:	e8 c5 b8 fe ff       	call   c00004f0 <memset>
c0014c2b:	58                   	pop    eax
c0014c2c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c2e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014c32:	51                   	push   ecx
c0014c33:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014c37:	52                   	push   edx
c0014c38:	6a 00                	push   0x0
c0014c3a:	6a 1f                	push   0x1f
c0014c3c:	53                   	push   ebx
c0014c3d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014c40:	83 c4 18             	add    esp,0x18
c0014c43:	68 ad 26 02 c0       	push   0xc00226ad
c0014c48:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014c4c:	52                   	push   edx
c0014c4d:	e8 2e bb fe ff       	call   c0000780 <strcmp>
c0014c52:	83 c4 10             	add    esp,0x10
c0014c55:	85 c0                	test   eax,eax
c0014c57:	75 0f                	jne    c0014c68 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014c59:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014c5c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014c68:	50                   	push   eax
c0014c69:	50                   	push   eax
c0014c6a:	68 b5 26 02 c0       	push   0xc00226b5
c0014c6f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014c73:	50                   	push   eax
c0014c74:	e8 07 bb fe ff       	call   c0000780 <strcmp>
c0014c79:	83 c4 10             	add    esp,0x10
c0014c7c:	85 c0                	test   eax,eax
c0014c7e:	75 0f                	jne    c0014c8f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014c80:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014c83:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c87:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014c8f:	45                   	inc    ebp
c0014c90:	e9 4c ff ff ff       	jmp    c0014be1 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014c95:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014c9a:	75 10                	jne    c0014cac <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014c9c:	83 ec 0c             	sub    esp,0xc
c0014c9f:	68 bd 26 02 c0       	push   0xc00226bd
c0014ca4:	e8 5e c8 ff ff       	call   c0011507 <KePanic(char const*)>
c0014ca9:	83 c4 10             	add    esp,0x10
c0014cac:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014cb1:	75 10                	jne    c0014cc3 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014cb3:	83 ec 0c             	sub    esp,0xc
c0014cb6:	68 bd 26 02 c0       	push   0xc00226bd
c0014cbb:	e8 47 c8 ff ff       	call   c0011507 <KePanic(char const*)>
c0014cc0:	83 c4 10             	add    esp,0x10
c0014cc3:	50                   	push   eax
c0014cc4:	31 d2                	xor    edx,edx
c0014cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014cca:	52                   	push   edx
c0014ccb:	50                   	push   eax
c0014ccc:	53                   	push   ebx
c0014ccd:	e8 ca 6e ff ff       	call   c000bb9c <File::seek(unsigned long long)>
c0014cd2:	5a                   	pop    edx
c0014cd3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014cd7:	e8 f7 2d ff ff       	call   c0007ad3 <malloc>
c0014cdc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014ce0:	31 c9                	xor    ecx,ecx
c0014ce2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014ce6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ce8:	5e                   	pop    esi
c0014ce9:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014ced:	55                   	push   ebp
c0014cee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cf2:	51                   	push   ecx
c0014cf3:	52                   	push   edx
c0014cf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014cf8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014cfc:	53                   	push   ebx
c0014cfd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d00:	83 c4 14             	add    esp,0x14
c0014d03:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014d07:	e8 c7 2d ff ff       	call   c0007ad3 <malloc>
c0014d0c:	89 c6                	mov    esi,eax
c0014d0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d10:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014d13:	56                   	push   esi
c0014d14:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014d18:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014d1c:	51                   	push   ecx
c0014d1d:	52                   	push   edx
c0014d1e:	53                   	push   ebx
c0014d1f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d22:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014d26:	83 c4 1c             	add    esp,0x1c
c0014d29:	8b 15 a0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a0
c0014d2f:	c1 e8 04             	shr    eax,0x4
c0014d32:	89 04 95 20 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3ae0],eax
c0014d39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014d3d:	31 d2                	xor    edx,edx
c0014d3f:	52                   	push   edx
c0014d40:	50                   	push   eax
c0014d41:	53                   	push   ebx
c0014d42:	e8 55 6e ff ff       	call   c000bb9c <File::seek(unsigned long long)>
c0014d47:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014d49:	31 d2                	xor    edx,edx
c0014d4b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014d4e:	56                   	push   esi
c0014d4f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014d53:	52                   	push   edx
c0014d54:	50                   	push   eax
c0014d55:	53                   	push   ebx
c0014d56:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d59:	83 c4 14             	add    esp,0x14
c0014d5c:	53                   	push   ebx
c0014d5d:	e8 da 6d ff ff       	call   c000bb3c <File::close()>
c0014d62:	5d                   	pop    ebp
c0014d63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014d67:	e8 77 2d ff ff       	call   c0007ae3 <free>
c0014d6c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014d6f:	e8 6f 2d ff ff       	call   c0007ae3 <free>
c0014d74:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0014d79:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014d7d:	83 c4 10             	add    esp,0x10
c0014d80:	89 34 85 a0 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a60],esi
c0014d87:	8d 50 01             	lea    edx,[eax+0x1]
c0014d8a:	89 0c 85 20 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39e0],ecx
c0014d91:	b0 01                	mov    al,0x1
c0014d93:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0014d99:	83 c4 5c             	add    esp,0x5c
c0014d9c:	5b                   	pop    ebx
c0014d9d:	5e                   	pop    esi
c0014d9e:	5f                   	pop    edi
c0014d9f:	5d                   	pop    ebp
c0014da0:	c3                   	ret    

c0014da1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014da1:	55                   	push   ebp
c0014da2:	57                   	push   edi
c0014da3:	56                   	push   esi
c0014da4:	53                   	push   ebx
c0014da5:	81 ec 68 03 00 00    	sub    esp,0x368
c0014dab:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014db2:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014db8:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0014dbc:	68 14 01 00 00       	push   0x114
c0014dc1:	e8 0d 2d ff ff       	call   c0007ad3 <malloc>
c0014dc6:	83 c4 0c             	add    esp,0xc
c0014dc9:	56                   	push   esi
c0014dca:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014dd1:	50                   	push   eax
c0014dd2:	89 c3                	mov    ebx,eax
c0014dd4:	e8 e7 6c ff ff       	call   c000bac0 <File::File(char const*, Process*)>
c0014dd9:	5f                   	pop    edi
c0014dda:	5d                   	pop    ebp
c0014ddb:	6a 01                	push   0x1
c0014ddd:	53                   	push   ebx
c0014dde:	e8 fb 6c ff ff       	call   c000bade <File::open(FileOpenMode)>
c0014de3:	83 c4 10             	add    esp,0x10
c0014de6:	85 c0                	test   eax,eax
c0014de8:	0f 85 b3 06 00 00    	jne    c00154a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014dee:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014df6:	83 ec 0c             	sub    esp,0xc
c0014df9:	6a 34                	push   0x34
c0014dfb:	e8 d3 2c ff ff       	call   c0007ad3 <malloc>
c0014e00:	5e                   	pop    esi
c0014e01:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014e05:	89 c5                	mov    ebp,eax
c0014e07:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e09:	56                   	push   esi
c0014e0a:	55                   	push   ebp
c0014e0b:	6a 00                	push   0x0
c0014e0d:	6a 34                	push   0x34
c0014e0f:	53                   	push   ebx
c0014e10:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e13:	83 c4 20             	add    esp,0x20
c0014e16:	85 c0                	test   eax,eax
c0014e18:	0f 85 83 06 00 00    	jne    c00154a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014e1e:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0014e25:	0f 85 76 06 00 00    	jne    c00154a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014e2b:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0014e2e:	85 c0                	test   eax,eax
c0014e30:	0f 84 6b 06 00 00    	je     c00154a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014e36:	31 d2                	xor    edx,edx
c0014e38:	51                   	push   ecx
c0014e39:	52                   	push   edx
c0014e3a:	50                   	push   eax
c0014e3b:	53                   	push   ebx
c0014e3c:	e8 5b 6d ff ff       	call   c000bb9c <File::seek(unsigned long long)>
c0014e41:	83 c4 10             	add    esp,0x10
c0014e44:	85 c0                	test   eax,eax
c0014e46:	0f 85 55 06 00 00    	jne    c00154a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014e4c:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0014e4f:	83 ec 0c             	sub    esp,0xc
c0014e52:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014e56:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014e5a:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014e5e:	0f af c2             	imul   eax,edx
c0014e61:	50                   	push   eax
c0014e62:	e8 6c 2c ff ff       	call   c0007ad3 <malloc>
c0014e67:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014e69:	89 34 24             	mov    DWORD PTR [esp],esi
c0014e6c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014e70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014e74:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0014e78:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014e7c:	0f af c2             	imul   eax,edx
c0014e7f:	99                   	cdq    
c0014e80:	52                   	push   edx
c0014e81:	50                   	push   eax
c0014e82:	53                   	push   ebx
c0014e83:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014e86:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0014e89:	83 c4 20             	add    esp,0x20
c0014e8c:	85 c0                	test   eax,eax
c0014e8e:	0f 84 0d 06 00 00    	je     c00154a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014e94:	52                   	push   edx
c0014e95:	31 d2                	xor    edx,edx
c0014e97:	52                   	push   edx
c0014e98:	50                   	push   eax
c0014e99:	53                   	push   ebx
c0014e9a:	e8 fd 6c ff ff       	call   c000bb9c <File::seek(unsigned long long)>
c0014e9f:	83 c4 10             	add    esp,0x10
c0014ea2:	85 c0                	test   eax,eax
c0014ea4:	0f 85 f7 05 00 00    	jne    c00154a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014eaa:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014eae:	83 ec 0c             	sub    esp,0xc
c0014eb1:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014eb5:	0f af c2             	imul   eax,edx
c0014eb8:	50                   	push   eax
c0014eb9:	e8 15 2c ff ff       	call   c0007ad3 <malloc>
c0014ebe:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014ec0:	89 34 24             	mov    DWORD PTR [esp],esi
c0014ec3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014ec7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ecb:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014ecf:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014ed3:	0f af c2             	imul   eax,edx
c0014ed6:	99                   	cdq    
c0014ed7:	52                   	push   edx
c0014ed8:	50                   	push   eax
c0014ed9:	53                   	push   ebx
c0014eda:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014edd:	83 c4 20             	add    esp,0x20
c0014ee0:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0014ee6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014ee9:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0014eed:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0014ef1:	73 78                	jae    c0014f6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0014ef3:	c1 e7 05             	shl    edi,0x5
c0014ef6:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0014efa:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014efd:	75 63                	jne    c0014f62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0014eff:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014f02:	31 d2                	xor    edx,edx
c0014f04:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0014f07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014f0b:	50                   	push   eax
c0014f0c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014f0f:	52                   	push   edx
c0014f10:	50                   	push   eax
c0014f11:	53                   	push   ebx
c0014f12:	e8 85 6c ff ff       	call   c000bb9c <File::seek(unsigned long long)>
c0014f17:	83 c4 10             	add    esp,0x10
c0014f1a:	85 c0                	test   eax,eax
c0014f1c:	0f 85 7f 05 00 00    	jne    c00154a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014f22:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014f29:	83 ec 0c             	sub    esp,0xc
c0014f2c:	31 d2                	xor    edx,edx
c0014f2e:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0014f32:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014f34:	01 c6                	add    esi,eax
c0014f36:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014f3d:	50                   	push   eax
c0014f3e:	56                   	push   esi
c0014f3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f43:	52                   	push   edx
c0014f44:	50                   	push   eax
c0014f45:	53                   	push   ebx
c0014f46:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f49:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014f4c:	83 c4 1c             	add    esp,0x1c
c0014f4f:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014f52:	50                   	push   eax
c0014f53:	6a 00                	push   0x0
c0014f55:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014f59:	56                   	push   esi
c0014f5a:	e8 91 b5 fe ff       	call   c00004f0 <memset>
c0014f5f:	83 c4 10             	add    esp,0x10
c0014f62:	66 ff 04 24          	inc    WORD PTR [esp]
c0014f66:	e9 7b ff ff ff       	jmp    c0014ee6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0014f6b:	50                   	push   eax
c0014f6c:	68 00 01 00 00       	push   0x100
c0014f71:	6a 00                	push   0x0
c0014f73:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014f77:	50                   	push   eax
c0014f78:	e8 73 b5 fe ff       	call   c00004f0 <memset>
c0014f7d:	83 c4 0c             	add    esp,0xc
c0014f80:	68 00 01 00 00       	push   0x100
c0014f85:	6a 00                	push   0x0
c0014f87:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014f8e:	50                   	push   eax
c0014f8f:	e8 5c b5 fe ff       	call   c00004f0 <memset>
c0014f94:	83 c4 10             	add    esp,0x10
c0014f97:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0014f9e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014fa5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014fad:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014fb5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014fbd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014fc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014fc9:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0014fcd:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0014fd2:	0f 83 16 01 00 00    	jae    c00150ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0014fd8:	6b ff 28             	imul   edi,edi,0x28
c0014fdb:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0014fdf:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0014fe2:	51                   	push   ecx
c0014fe3:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0014fe7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014feb:	8b 07                	mov    eax,DWORD PTR [edi]
c0014fed:	6b d2 28             	imul   edx,edx,0x28
c0014ff0:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014ff4:	31 d2                	xor    edx,edx
c0014ff6:	52                   	push   edx
c0014ff7:	50                   	push   eax
c0014ff8:	53                   	push   ebx
c0014ff9:	e8 9e 6b ff ff       	call   c000bb9c <File::seek(unsigned long long)>
c0014ffe:	83 c4 0c             	add    esp,0xc
c0015001:	6a 20                	push   0x20
c0015003:	6a 00                	push   0x0
c0015005:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001500c:	51                   	push   ecx
c001500d:	e8 de b4 fe ff       	call   c00004f0 <memset>
c0015012:	58                   	pop    eax
c0015013:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015015:	8d 54 24 58          	lea    edx,[esp+0x58]
c0015019:	52                   	push   edx
c001501a:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015021:	51                   	push   ecx
c0015022:	6a 00                	push   0x0
c0015024:	6a 1f                	push   0x1f
c0015026:	53                   	push   ebx
c0015027:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001502a:	83 c4 1c             	add    esp,0x1c
c001502d:	6a 09                	push   0x9
c001502f:	68 d7 26 02 c0       	push   0xc00226d7
c0015034:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001503b:	51                   	push   ecx
c001503c:	e8 3f b3 fe ff       	call   c0000380 <memcmp>
c0015041:	83 c4 10             	add    esp,0x10
c0015044:	85 c0                	test   eax,eax
c0015046:	75 1a                	jne    c0015062 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c0015048:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001504b:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001504e:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0015052:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015055:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001505c:	89 d0                	mov    eax,edx
c001505e:	40                   	inc    eax
c001505f:	89 04 24             	mov    DWORD PTR [esp],eax
c0015062:	52                   	push   edx
c0015063:	6a 09                	push   0x9
c0015065:	68 e1 26 02 c0       	push   0xc00226e1
c001506a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015071:	50                   	push   eax
c0015072:	e8 09 b3 fe ff       	call   c0000380 <memcmp>
c0015077:	83 c4 10             	add    esp,0x10
c001507a:	85 c0                	test   eax,eax
c001507c:	75 1a                	jne    c0015098 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c001507e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015081:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0015084:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0015088:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001508b:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0015092:	89 c8                	mov    eax,ecx
c0015094:	40                   	inc    eax
c0015095:	89 04 24             	mov    DWORD PTR [esp],eax
c0015098:	50                   	push   eax
c0015099:	50                   	push   eax
c001509a:	68 ad 26 02 c0       	push   0xc00226ad
c001509f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00150a6:	50                   	push   eax
c00150a7:	e8 d4 b6 fe ff       	call   c0000780 <strcmp>
c00150ac:	83 c4 10             	add    esp,0x10
c00150af:	85 c0                	test   eax,eax
c00150b1:	75 0b                	jne    c00150be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c00150b3:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00150b7:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00150ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00150be:	50                   	push   eax
c00150bf:	50                   	push   eax
c00150c0:	68 b5 26 02 c0       	push   0xc00226b5
c00150c5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00150cc:	50                   	push   eax
c00150cd:	e8 ae b6 fe ff       	call   c0000780 <strcmp>
c00150d2:	83 c4 10             	add    esp,0x10
c00150d5:	85 c0                	test   eax,eax
c00150d7:	75 0b                	jne    c00150e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c00150d9:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c00150dd:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00150e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00150e4:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c00150e9:	e9 d7 fe ff ff       	jmp    c0014fc5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c00150ee:	50                   	push   eax
c00150ef:	31 d2                	xor    edx,edx
c00150f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00150f5:	52                   	push   edx
c00150f6:	50                   	push   eax
c00150f7:	53                   	push   ebx
c00150f8:	e8 9f 6a ff ff       	call   c000bb9c <File::seek(unsigned long long)>
c00150fd:	58                   	pop    eax
c00150fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015102:	e8 cc 29 ff ff       	call   c0007ad3 <malloc>
c0015107:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015109:	31 d2                	xor    edx,edx
c001510b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001510f:	58                   	pop    eax
c0015110:	8d 74 24 54          	lea    esi,[esp+0x54]
c0015114:	56                   	push   esi
c0015115:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015119:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001511d:	52                   	push   edx
c001511e:	50                   	push   eax
c001511f:	53                   	push   ebx
c0015120:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015123:	83 c4 14             	add    esp,0x14
c0015126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001512a:	e8 a4 29 ff ff       	call   c0007ad3 <malloc>
c001512f:	31 d2                	xor    edx,edx
c0015131:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015135:	83 c4 0c             	add    esp,0xc
c0015138:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001513c:	52                   	push   edx
c001513d:	50                   	push   eax
c001513e:	53                   	push   ebx
c001513f:	e8 58 6a ff ff       	call   c000bb9c <File::seek(unsigned long long)>
c0015144:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015146:	31 d2                	xor    edx,edx
c0015148:	89 34 24             	mov    DWORD PTR [esp],esi
c001514b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001514f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015153:	52                   	push   edx
c0015154:	50                   	push   eax
c0015155:	53                   	push   ebx
c0015156:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015159:	83 c4 20             	add    esp,0x20
c001515c:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0015161:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015169:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001516d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015171:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0015174:	0f 84 2b 03 00 00    	je     c00154a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c001517a:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0015181:	31 d2                	xor    edx,edx
c0015183:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015187:	c1 e8 03             	shr    eax,0x3
c001518a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001518e:	51                   	push   ecx
c001518f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015193:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0015197:	52                   	push   edx
c0015198:	50                   	push   eax
c0015199:	53                   	push   ebx
c001519a:	e8 fd 69 ff ff       	call   c000bb9c <File::seek(unsigned long long)>
c001519f:	5e                   	pop    esi
c00151a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151a4:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00151ab:	e8 23 29 ff ff       	call   c0007ad3 <malloc>
c00151b0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00151b2:	31 d2                	xor    edx,edx
c00151b4:	89 c7                	mov    edi,eax
c00151b6:	58                   	pop    eax
c00151b7:	8d 44 24 58          	lea    eax,[esp+0x58]
c00151bb:	50                   	push   eax
c00151bc:	57                   	push   edi
c00151bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151c1:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00151c8:	52                   	push   edx
c00151c9:	50                   	push   eax
c00151ca:	53                   	push   ebx
c00151cb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00151ce:	83 c4 20             	add    esp,0x20
c00151d1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00151d9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00151dd:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c00151e1:	0f 8d a5 02 00 00    	jge    c001548c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c00151e7:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c00151ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151f0:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c00151f3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00151f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151fb:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c00151ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015203:	c1 e8 08             	shr    eax,0x8
c0015206:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001520a:	89 c2                	mov    edx,eax
c001520c:	c1 e2 04             	shl    edx,0x4
c001520f:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0015213:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0015216:	85 f6                	test   esi,esi
c0015218:	0f 85 cf 00 00 00    	jne    c00152ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c001521e:	83 ec 0c             	sub    esp,0xc
c0015221:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0015225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015229:	03 02                	add    eax,DWORD PTR [edx]
c001522b:	50                   	push   eax
c001522c:	e8 63 f8 ff ff       	call   c0014a94 <Thr::getAddressOfKernelSymbol(char const*)>
c0015231:	83 c4 10             	add    esp,0x10
c0015234:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015238:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c001523d:	85 c0                	test   eax,eax
c001523f:	89 c6                	mov    esi,eax
c0015241:	0f 85 a6 00 00 00    	jne    c00152ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0015247:	83 ec 0c             	sub    esp,0xc
c001524a:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c001524e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015252:	03 02                	add    eax,DWORD PTR [edx]
c0015254:	50                   	push   eax
c0015255:	e8 96 c4 ff ff       	call   c00116f0 <KeResolveCompatibilitySymbol(char*)>
c001525a:	83 c4 10             	add    esp,0x10
c001525d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015261:	85 c0                	test   eax,eax
c0015263:	89 c6                	mov    esi,eax
c0015265:	0f 85 82 00 00 00    	jne    c00152ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c001526b:	50                   	push   eax
c001526c:	50                   	push   eax
c001526d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015271:	03 02                	add    eax,DWORD PTR [edx]
c0015273:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015277:	50                   	push   eax
c0015278:	68 eb 26 02 c0       	push   0xc00226eb
c001527d:	e8 88 56 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015282:	58                   	pop    eax
c0015283:	5a                   	pop    edx
c0015284:	68 05 27 02 c0       	push   0xc0022705
c0015289:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015290:	51                   	push   ecx
c0015291:	e8 ba b3 fe ff       	call   c0000650 <strcpy>
c0015296:	59                   	pop    ecx
c0015297:	58                   	pop    eax
c0015298:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001529c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152a0:	03 02                	add    eax,DWORD PTR [edx]
c00152a2:	50                   	push   eax
c00152a3:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00152aa:	51                   	push   ecx
c00152ab:	e8 c0 b5 fe ff       	call   c0000870 <strcat>
c00152b0:	58                   	pop    eax
c00152b1:	5a                   	pop    edx
c00152b2:	68 9b 27 02 c0       	push   0xc002279b
c00152b7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00152be:	51                   	push   ecx
c00152bf:	e8 ac b5 fe ff       	call   c0000870 <strcat>
c00152c4:	83 c4 10             	add    esp,0x10
c00152c7:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00152cc:	0f 84 77 01 00 00    	je     c0015449 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00152d2:	83 ec 0c             	sub    esp,0xc
c00152d5:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00152dc:	51                   	push   ecx
c00152dd:	e8 25 c2 ff ff       	call   c0011507 <KePanic(char const*)>
c00152e2:	83 c4 10             	add    esp,0x10
c00152e5:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00152e9:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00152ed:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00152f2:	83 f8 01             	cmp    eax,0x1
c00152f5:	0f 85 9b 00 00 00    	jne    c0015396 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c00152fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00152ff:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0015306:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c001530a:	01 d0                	add    eax,edx
c001530c:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0015314:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015318:	0f 94 c0             	sete   al
c001531b:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0015323:	0f 94 c1             	sete   cl
c0015326:	09 c1                	or     ecx,eax
c0015328:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001532c:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0015331:	0f b6 c9             	movzx  ecx,cl
c0015334:	8b 00                	mov    eax,DWORD PTR [eax]
c0015336:	74 41                	je     c0015379 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c0015338:	8d 14 06             	lea    edx,[esi+eax*1]
c001533b:	85 c9                	test   ecx,ecx
c001533d:	75 15                	jne    c0015354 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001533f:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0015343:	66 83 f8 0c          	cmp    ax,0xc
c0015347:	76 05                	jbe    c001534e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0015349:	b8 0c 00 00 00       	mov    eax,0xc
c001534e:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0015352:	76 37                	jbe    c001538b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015354:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015359:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001535d:	0f 84 e6 00 00 00    	je     c0015449 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015363:	83 ec 0c             	sub    esp,0xc
c0015366:	68 1c 27 02 c0       	push   0xc002271c
c001536b:	e8 97 c1 ff ff       	call   c0011507 <KePanic(char const*)>
c0015370:	83 c4 10             	add    esp,0x10
c0015373:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015377:	eb 12                	jmp    c001538b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015379:	01 c2                	add    edx,eax
c001537b:	85 c9                	test   ecx,ecx
c001537d:	75 0c                	jne    c001538b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c001537f:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0015383:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0015387:	77 02                	ja     c001538b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015389:	01 f2                	add    edx,esi
c001538b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001538f:	89 10                	mov    DWORD PTR [eax],edx
c0015391:	e9 ed 00 00 00       	jmp    c0015483 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015396:	83 f8 02             	cmp    eax,0x2
c0015399:	0f 85 81 00 00 00    	jne    c0015420 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c001539f:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00153a6:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c00153aa:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00153ae:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c00153b6:	74 21                	je     c00153d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c00153b8:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c00153c0:	74 17                	je     c00153d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c00153c2:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c00153c6:	ba 0a 00 00 00       	mov    edx,0xa
c00153cb:	83 f9 0e             	cmp    ecx,0xe
c00153ce:	77 03                	ja     c00153d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c00153d0:	8d 51 fc             	lea    edx,[ecx-0x4]
c00153d3:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c00153d7:	76 1f                	jbe    c00153f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c00153d9:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00153de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00153e2:	74 65                	je     c0015449 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00153e4:	83 ec 0c             	sub    esp,0xc
c00153e7:	68 38 27 02 c0       	push   0xc0022738
c00153ec:	e8 16 c1 ff ff       	call   c0011507 <KePanic(char const*)>
c00153f1:	83 c4 10             	add    esp,0x10
c00153f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00153f8:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00153fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00153ff:	74 15                	je     c0015416 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0015401:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015405:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001540c:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0015410:	01 d1                	add    ecx,edx
c0015412:	01 ce                	add    esi,ecx
c0015414:	eb 06                	jmp    c001541c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0015416:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c001541a:	01 d6                	add    esi,edx
c001541c:	89 30                	mov    DWORD PTR [eax],esi
c001541e:	eb 63                	jmp    c0015483 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015420:	56                   	push   esi
c0015421:	56                   	push   esi
c0015422:	50                   	push   eax
c0015423:	68 54 27 02 c0       	push   0xc0022754
c0015428:	e8 dd 54 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001542d:	83 c4 10             	add    esp,0x10
c0015430:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015435:	74 12                	je     c0015449 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015437:	83 ec 0c             	sub    esp,0xc
c001543a:	68 5f 27 02 c0       	push   0xc002275f
c001543f:	e8 c3 c0 ff ff       	call   c0011507 <KePanic(char const*)>
c0015444:	83 c4 10             	add    esp,0x10
c0015447:	eb 3a                	jmp    c0015483 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0015449:	83 ec 0c             	sub    esp,0xc
c001544c:	53                   	push   ebx
c001544d:	e8 ea 66 ff ff       	call   c000bb3c <File::close()>
c0015452:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015454:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015457:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001545a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001545d:	e8 81 26 ff ff       	call   c0007ae3 <free>
c0015462:	59                   	pop    ecx
c0015463:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015467:	e8 77 26 ff ff       	call   c0007ae3 <free>
c001546c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001546f:	e8 6f 26 ff ff       	call   c0007ae3 <free>
c0015474:	5b                   	pop    ebx
c0015475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015479:	e8 65 26 ff ff       	call   c0007ae3 <free>
c001547e:	83 c4 10             	add    esp,0x10
c0015481:	eb 1e                	jmp    c00154a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015483:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0015487:	e9 4d fd ff ff       	jmp    c00151d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c001548c:	83 ec 0c             	sub    esp,0xc
c001548f:	57                   	push   edi
c0015490:	e8 4e 26 ff ff       	call   c0007ae3 <free>
c0015495:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0015499:	83 c4 10             	add    esp,0x10
c001549c:	e9 cc fc ff ff       	jmp    c001516d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c00154a1:	31 c0                	xor    eax,eax
c00154a3:	eb 32                	jmp    c00154d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c00154a5:	83 ec 0c             	sub    esp,0xc
c00154a8:	53                   	push   ebx
c00154a9:	e8 8e 66 ff ff       	call   c000bb3c <File::close()>
c00154ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c00154b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00154b3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00154b6:	58                   	pop    eax
c00154b7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00154bb:	e8 23 26 ff ff       	call   c0007ae3 <free>
c00154c0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00154c3:	e8 1b 26 ff ff       	call   c0007ae3 <free>
c00154c8:	5a                   	pop    edx
c00154c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00154cd:	e8 11 26 ff ff       	call   c0007ae3 <free>
c00154d2:	83 c4 10             	add    esp,0x10
c00154d5:	b0 01                	mov    al,0x1
c00154d7:	81 c4 5c 03 00 00    	add    esp,0x35c
c00154dd:	5b                   	pop    ebx
c00154de:	5e                   	pop    esi
c00154df:	5f                   	pop    edi
c00154e0:	5d                   	pop    ebp
c00154e1:	c3                   	ret    

c00154e2 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00154e2:	56                   	push   esi
c00154e3:	31 d2                	xor    edx,edx
c00154e5:	53                   	push   ebx
c00154e6:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c00154ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00154f0:	39 d3                	cmp    ebx,edx
c00154f2:	7e 1b                	jle    c001550f <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00154f4:	8b 04 95 20 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3ee0]
c00154fb:	39 c8                	cmp    eax,ecx
c00154fd:	77 0d                	ja     c001550c <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00154ff:	8b 34 95 20 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd40e0]
c0015506:	01 c6                	add    esi,eax
c0015508:	39 ce                	cmp    esi,ecx
c001550a:	77 05                	ja     c0015511 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001550c:	42                   	inc    edx
c001550d:	eb e1                	jmp    c00154f0 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001550f:	31 c0                	xor    eax,eax
c0015511:	5b                   	pop    ebx
c0015512:	5e                   	pop    esi
c0015513:	c3                   	ret    

c0015514 <Thr::getDriverNameFromAddress(unsigned long)>:
c0015514:	53                   	push   ebx
c0015515:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c001551b:	31 c0                	xor    eax,eax
c001551d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015521:	39 c3                	cmp    ebx,eax
c0015523:	7e 22                	jle    c0015547 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0015525:	8b 14 85 20 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ee0]
c001552c:	39 ca                	cmp    edx,ecx
c001552e:	77 14                	ja     c0015544 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015530:	03 14 85 20 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd40e0]
c0015537:	39 ca                	cmp    edx,ecx
c0015539:	76 09                	jbe    c0015544 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001553b:	8b 04 85 20 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3ce0]
c0015542:	eb 05                	jmp    c0015549 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0015544:	40                   	inc    eax
c0015545:	eb da                	jmp    c0015521 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015547:	31 c0                	xor    eax,eax
c0015549:	5b                   	pop    ebx
c001554a:	c3                   	ret    

c001554b <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001554b:	53                   	push   ebx
c001554c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015550:	53                   	push   ebx
c0015551:	e8 8c ff ff ff       	call   c00154e2 <Thr::getDriverBaseFromAddress(unsigned long)>
c0015556:	5a                   	pop    edx
c0015557:	31 d2                	xor    edx,edx
c0015559:	85 c0                	test   eax,eax
c001555b:	74 04                	je     c0015561 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001555d:	89 da                	mov    edx,ebx
c001555f:	29 c2                	sub    edx,eax
c0015561:	5b                   	pop    ebx
c0015562:	89 d0                	mov    eax,edx
c0015564:	c3                   	ret    

c0015565 <Thr::loadDLL(char const*, bool)>:
c0015565:	55                   	push   ebp
c0015566:	57                   	push   edi
c0015567:	56                   	push   esi
c0015568:	53                   	push   ebx
c0015569:	81 ec 34 01 00 00    	sub    esp,0x134
c001556f:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015576:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001557d:	56                   	push   esi
c001557e:	68 77 27 02 c0       	push   0xc0022777
c0015583:	e8 82 53 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015588:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001558f:	e8 3f 25 ff ff       	call   c0007ad3 <malloc>
c0015594:	83 c4 0c             	add    esp,0xc
c0015597:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001559d:	56                   	push   esi
c001559e:	50                   	push   eax
c001559f:	89 c3                	mov    ebx,eax
c00155a1:	e8 1a 65 ff ff       	call   c000bac0 <File::File(char const*, Process*)>
c00155a6:	83 c4 10             	add    esp,0x10
c00155a9:	85 db                	test   ebx,ebx
c00155ab:	75 3c                	jne    c00155e9 <Thr::loadDLL(char const*, bool)+0x84>
c00155ad:	89 e8                	mov    eax,ebp
c00155af:	84 c0                	test   al,al
c00155b1:	0f 84 e1 01 00 00    	je     c0015798 <Thr::loadDLL(char const*, bool)+0x233>
c00155b7:	50                   	push   eax
c00155b8:	50                   	push   eax
c00155b9:	68 88 27 02 c0       	push   0xc0022788
c00155be:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c00155c2:	57                   	push   edi
c00155c3:	e8 88 b0 fe ff       	call   c0000650 <strcpy>
c00155c8:	58                   	pop    eax
c00155c9:	5a                   	pop    edx
c00155ca:	56                   	push   esi
c00155cb:	57                   	push   edi
c00155cc:	e8 9f b2 fe ff       	call   c0000870 <strcat>
c00155d1:	59                   	pop    ecx
c00155d2:	58                   	pop    eax
c00155d3:	68 9b 27 02 c0       	push   0xc002279b
c00155d8:	57                   	push   edi
c00155d9:	e8 92 b2 fe ff       	call   c0000870 <strcat>
c00155de:	89 3c 24             	mov    DWORD PTR [esp],edi
c00155e1:	e8 21 bf ff ff       	call   c0011507 <KePanic(char const*)>
c00155e6:	83 c4 10             	add    esp,0x10
c00155e9:	50                   	push   eax
c00155ea:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00155ee:	50                   	push   eax
c00155ef:	8d 44 24 20          	lea    eax,[esp+0x20]
c00155f3:	50                   	push   eax
c00155f4:	53                   	push   ebx
c00155f5:	e8 e6 67 ff ff       	call   c000bde0 <File::stat(unsigned long long*, bool*)>
c00155fa:	83 c4 10             	add    esp,0x10
c00155fd:	85 db                	test   ebx,ebx
c00155ff:	74 0c                	je     c001560d <Thr::loadDLL(char const*, bool)+0xa8>
c0015601:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015603:	83 ec 0c             	sub    esp,0xc
c0015606:	53                   	push   ebx
c0015607:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001560a:	83 c4 10             	add    esp,0x10
c001560d:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015612:	75 0a                	jne    c001561e <Thr::loadDLL(char const*, bool)+0xb9>
c0015614:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015618:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001561c:	75 3e                	jne    c001565c <Thr::loadDLL(char const*, bool)+0xf7>
c001561e:	89 e8                	mov    eax,ebp
c0015620:	31 db                	xor    ebx,ebx
c0015622:	84 c0                	test   al,al
c0015624:	0f 84 6e 01 00 00    	je     c0015798 <Thr::loadDLL(char const*, bool)+0x233>
c001562a:	50                   	push   eax
c001562b:	50                   	push   eax
c001562c:	68 88 27 02 c0       	push   0xc0022788
c0015631:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0015635:	53                   	push   ebx
c0015636:	e8 15 b0 fe ff       	call   c0000650 <strcpy>
c001563b:	58                   	pop    eax
c001563c:	5a                   	pop    edx
c001563d:	56                   	push   esi
c001563e:	53                   	push   ebx
c001563f:	e8 2c b2 fe ff       	call   c0000870 <strcat>
c0015644:	59                   	pop    ecx
c0015645:	5f                   	pop    edi
c0015646:	68 9b 27 02 c0       	push   0xc002279b
c001564b:	53                   	push   ebx
c001564c:	e8 1f b2 fe ff       	call   c0000870 <strcat>
c0015651:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015654:	e8 ae be ff ff       	call   c0011507 <KePanic(char const*)>
c0015659:	83 c4 10             	add    esp,0x10
c001565c:	53                   	push   ebx
c001565d:	6a 03                	push   0x3
c001565f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015663:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015667:	05 ff 0f 00 00       	add    eax,0xfff
c001566c:	83 d2 00             	adc    edx,0x0
c001566f:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015673:	50                   	push   eax
c0015674:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001567a:	e8 87 47 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c001567f:	89 c3                	mov    ebx,eax
c0015681:	58                   	pop    eax
c0015682:	5a                   	pop    edx
c0015683:	53                   	push   ebx
c0015684:	68 12 0d 02 c0       	push   0xc0020d12
c0015689:	e8 7c 52 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001568e:	89 34 24             	mov    DWORD PTR [esp],esi
c0015691:	e8 ea ae fe ff       	call   c0000580 <strlen>
c0015696:	8b 3d 00 bf 02 c0    	mov    edi,DWORD PTR ds:0xc002bf00
c001569c:	40                   	inc    eax
c001569d:	89 04 24             	mov    DWORD PTR [esp],eax
c00156a0:	e8 2e 24 ff ff       	call   c0007ad3 <malloc>
c00156a5:	59                   	pop    ecx
c00156a6:	89 04 bd 20 c3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3ce0],eax
c00156ad:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c00156b2:	5f                   	pop    edi
c00156b3:	56                   	push   esi
c00156b4:	ff 34 85 20 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3ce0]
c00156bb:	e8 90 af fe ff       	call   c0000650 <strcpy>
c00156c0:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c00156c5:	89 1c 85 20 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ee0],ebx
c00156cc:	8d 50 01             	lea    edx,[eax+0x1]
c00156cf:	89 15 00 bf 02 c0    	mov    DWORD PTR ds:0xc002bf00,edx
c00156d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00156d9:	83 c4 0c             	add    esp,0xc
c00156dc:	6a 01                	push   0x1
c00156de:	53                   	push   ebx
c00156df:	56                   	push   esi
c00156e0:	89 14 85 20 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40e0],edx
c00156e7:	e8 b5 f6 ff ff       	call   c0014da1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00156ec:	83 c4 10             	add    esp,0x10
c00156ef:	89 c7                	mov    edi,eax
c00156f1:	89 f8                	mov    eax,edi
c00156f3:	83 f0 01             	xor    eax,0x1
c00156f6:	84 c0                	test   al,al
c00156f8:	74 18                	je     c0015712 <Thr::loadDLL(char const*, bool)+0x1ad>
c00156fa:	89 e8                	mov    eax,ebp
c00156fc:	84 c0                	test   al,al
c00156fe:	74 12                	je     c0015712 <Thr::loadDLL(char const*, bool)+0x1ad>
c0015700:	83 ec 0c             	sub    esp,0xc
c0015703:	68 9d 27 02 c0       	push   0xc002279d
c0015708:	e8 fa bd ff ff       	call   c0011507 <KePanic(char const*)>
c001570d:	83 c4 10             	add    esp,0x10
c0015710:	eb 06                	jmp    c0015718 <Thr::loadDLL(char const*, bool)+0x1b3>
c0015712:	89 f8                	mov    eax,edi
c0015714:	84 c0                	test   al,al
c0015716:	75 10                	jne    c0015728 <Thr::loadDLL(char const*, bool)+0x1c3>
c0015718:	83 ec 0c             	sub    esp,0xc
c001571b:	68 bc 27 02 c0       	push   0xc00227bc
c0015720:	e8 e2 bd ff ff       	call   c0011507 <KePanic(char const*)>
c0015725:	83 c4 10             	add    esp,0x10
c0015728:	31 f6                	xor    esi,esi
c001572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001572e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015732:	05 ff 0f 00 00       	add    eax,0xfff
c0015737:	83 d2 00             	adc    edx,0x0
c001573a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001573e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015742:	c1 ea 0c             	shr    edx,0xc
c0015745:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015749:	ba 00 00 00 00       	mov    edx,0x0
c001574e:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0015752:	89 d0                	mov    eax,edx
c0015754:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0015758:	73 32                	jae    c001578c <Thr::loadDLL(char const*, bool)+0x227>
c001575a:	50                   	push   eax
c001575b:	50                   	push   eax
c001575c:	89 f0                	mov    eax,esi
c001575e:	c1 e0 0c             	shl    eax,0xc
c0015761:	01 d8                	add    eax,ebx
c0015763:	50                   	push   eax
c0015764:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001576a:	e8 7b 41 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c001576f:	83 c4 10             	add    esp,0x10
c0015772:	8b 00                	mov    eax,DWORD PTR [eax]
c0015774:	a8 60                	test   al,0x60
c0015776:	75 11                	jne    c0015789 <Thr::loadDLL(char const*, bool)+0x224>
c0015778:	83 ec 0c             	sub    esp,0xc
c001577b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015780:	50                   	push   eax
c0015781:	e8 f3 25 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0015786:	83 c4 10             	add    esp,0x10
c0015789:	46                   	inc    esi
c001578a:	eb 9e                	jmp    c001572a <Thr::loadDLL(char const*, bool)+0x1c5>
c001578c:	89 f8                	mov    eax,edi
c001578e:	84 c0                	test   al,al
c0015790:	b8 00 00 00 00       	mov    eax,0x0
c0015795:	0f 44 d8             	cmove  ebx,eax
c0015798:	81 c4 2c 01 00 00    	add    esp,0x12c
c001579e:	89 d8                	mov    eax,ebx
c00157a0:	5b                   	pop    ebx
c00157a1:	5e                   	pop    esi
c00157a2:	5f                   	pop    edi
c00157a3:	5d                   	pop    ebp
c00157a4:	c3                   	ret    

c00157a5 <Thr::executeDLL(unsigned long, void*)>:
c00157a5:	56                   	push   esi
c00157a6:	53                   	push   ebx
c00157a7:	52                   	push   edx
c00157a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00157ac:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00157b0:	85 db                	test   ebx,ebx
c00157b2:	75 10                	jne    c00157c4 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00157b4:	83 ec 0c             	sub    esp,0xc
c00157b7:	68 d8 27 02 c0       	push   0xc00227d8
c00157bc:	e8 46 bd ff ff       	call   c0011507 <KePanic(char const*)>
c00157c1:	83 c4 10             	add    esp,0x10
c00157c4:	50                   	push   eax
c00157c5:	50                   	push   eax
c00157c6:	53                   	push   ebx
c00157c7:	68 02 28 02 c0       	push   0xc0022802
c00157cc:	e8 39 51 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00157d1:	89 d8                	mov    eax,ebx
c00157d3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00157d7:	83 c4 14             	add    esp,0x14
c00157da:	5b                   	pop    ebx
c00157db:	5e                   	pop    esi
c00157dc:	ff e0                	jmp    eax
c00157de:	66 90                	xchg   ax,ax

c00157e0 <userModeEntryPoint(void*)>:
c00157e0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00157e5:	83 e8 01             	sub    eax,0x1
c00157e8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00157ed:	75 01                	jne    c00157f0 <userModeEntryPoint(void*)+0x10>
c00157ef:	fb                   	sti    
c00157f0:	fb                   	sti    
c00157f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157f6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157f9:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00157ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015803:	e9 37 aa fe ff       	jmp    c000023f <goToUsermode>

c0015808 <changeTSS>:
c0015808:	83 ec 14             	sub    esp,0x14
c001580b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015810:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015813:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015818:	c1 e2 15             	shl    edx,0x15
c001581b:	29 d0                	sub    eax,edx
c001581d:	50                   	push   eax
c001581e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0015823:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015829:	05 7c 11 00 00       	add    eax,0x117c
c001582e:	50                   	push   eax
c001582f:	e8 08 37 ff ff       	call   c0008f3c <TSS::setESP(unsigned long)>
c0015834:	83 c4 1c             	add    esp,0x1c
c0015837:	c3                   	ret    

c0015838 <switchToThread(ThreadControlBlock*)>:
c0015838:	57                   	push   edi
c0015839:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c001583f:	56                   	push   esi
c0015840:	53                   	push   ebx
c0015841:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015845:	85 c9                	test   ecx,ecx
c0015847:	0f 85 8b 00 00 00    	jne    c00158d8 <switchToThread(ThreadControlBlock*)+0xa0>
c001584d:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015851:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015857:	74 7b                	je     c00158d4 <switchToThread(ThreadControlBlock*)+0x9c>
c0015859:	b8 00 04 00 00       	mov    eax,0x400
c001585e:	29 d0                	sub    eax,edx
c0015860:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0015863:	d1 f8                	sar    eax,1
c0015865:	01 d0                	add    eax,edx
c0015867:	90                   	nop
c0015868:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001586b:	e8 04 28 00 00       	call   c0018074 <HalQueryPerformanceCounter()>
c0015870:	a3 08 c7 02 c0       	mov    ds:0xc002c708,eax
c0015875:	89 c6                	mov    esi,eax
c0015877:	89 d7                	mov    edi,edx
c0015879:	2b 35 f8 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6f8
c001587f:	a3 f8 c6 02 c0       	mov    ds:0xc002c6f8,eax
c0015884:	1b 3d fc c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6fc
c001588a:	89 35 00 c7 02 c0    	mov    DWORD PTR ds:0xc002c700,esi
c0015890:	89 15 0c c7 02 c0    	mov    DWORD PTR ds:0xc002c70c,edx
c0015896:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001589c:	89 15 fc c6 02 c0    	mov    DWORD PTR ds:0xc002c6fc,edx
c00158a2:	89 3d 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,edi
c00158a8:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00158ab:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00158ae:	01 c6                	add    esi,eax
c00158b0:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00158b3:	11 d7                	adc    edi,edx
c00158b5:	83 ec 0c             	sub    esp,0xc
c00158b8:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00158bb:	53                   	push   ebx
c00158bc:	e8 b6 a9 fe ff       	call   c0000277 <switchToThreadASM>
c00158c1:	0f 20 c0             	mov    eax,cr0
c00158c4:	83 c8 08             	or     eax,0x8
c00158c7:	0f 22 c0             	mov    cr0,eax
c00158ca:	83 c4 10             	add    esp,0x10
c00158cd:	5b                   	pop    ebx
c00158ce:	5e                   	pop    esi
c00158cf:	5f                   	pop    edi
c00158d0:	c3                   	ret    
c00158d1:	8d 76 00             	lea    esi,[esi+0x0]
c00158d4:	31 c0                	xor    eax,eax
c00158d6:	eb 90                	jmp    c0015868 <switchToThread(ThreadControlBlock*)+0x30>
c00158d8:	5b                   	pop    ebx
c00158d9:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c00158e3:	5e                   	pop    esi
c00158e4:	5f                   	pop    edi
c00158e5:	c3                   	ret    
c00158e6:	66 90                	xchg   ax,ax

c00158e8 <Process::addArgs(char**)>:
c00158e8:	57                   	push   edi
c00158e9:	56                   	push   esi
c00158ea:	53                   	push   ebx
c00158eb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00158ef:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00158f3:	85 f6                	test   esi,esi
c00158f5:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c00158ff:	74 4f                	je     c0015950 <Process::addArgs(char**)+0x68>
c0015901:	8b 06                	mov    eax,DWORD PTR [esi]
c0015903:	85 c0                	test   eax,eax
c0015905:	74 49                	je     c0015950 <Process::addArgs(char**)+0x68>
c0015907:	31 db                	xor    ebx,ebx
c0015909:	8d 76 00             	lea    esi,[esi+0x0]
c001590c:	83 ec 0c             	sub    esp,0xc
c001590f:	50                   	push   eax
c0015910:	e8 6b ac fe ff       	call   c0000580 <strlen>
c0015915:	83 c0 01             	add    eax,0x1
c0015918:	89 04 24             	mov    DWORD PTR [esp],eax
c001591b:	e8 b3 21 ff ff       	call   c0007ad3 <malloc>
c0015920:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0015927:	5a                   	pop    edx
c0015928:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001592b:	83 c3 01             	add    ebx,0x1
c001592e:	59                   	pop    ecx
c001592f:	52                   	push   edx
c0015930:	50                   	push   eax
c0015931:	e8 1a ad fe ff       	call   c0000650 <strcpy>
c0015936:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c001593c:	83 c4 10             	add    esp,0x10
c001593f:	83 c1 01             	add    ecx,0x1
c0015942:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0015948:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c001594b:	85 c0                	test   eax,eax
c001594d:	75 bd                	jne    c001590c <Process::addArgs(char**)+0x24>
c001594f:	90                   	nop
c0015950:	5b                   	pop    ebx
c0015951:	5e                   	pop    esi
c0015952:	5f                   	pop    edi
c0015953:	c3                   	ret    

c0015954 <Process::Process(char const*, Process*, char**)>:
c0015954:	56                   	push   esi
c0015955:	53                   	push   ebx
c0015956:	83 ec 14             	sub    esp,0x14
c0015959:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001595d:	05 0c 02 00 00       	add    eax,0x20c
c0015962:	bb 07 00 00 00       	mov    ebx,0x7
c0015967:	89 c6                	mov    esi,eax
c0015969:	8d 76 00             	lea    esi,[esi+0x0]
c001596c:	85 db                	test   ebx,ebx
c001596e:	78 14                	js     c0015984 <Process::Process(char const*, Process*, char**)+0x30>
c0015970:	83 ec 0c             	sub    esp,0xc
c0015973:	56                   	push   esi
c0015974:	e8 2f a6 00 00       	call   c001ffa8 <ThreadControlBlock::ThreadControlBlock()>
c0015979:	83 c4 10             	add    esp,0x10
c001597c:	83 c6 5f             	add    esi,0x5f
c001597f:	83 eb 01             	sub    ebx,0x1
c0015982:	eb e8                	jmp    c001596c <Process::Process(char const*, Process*, char**)+0x18>
c0015984:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015988:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001598f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015993:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001599a:	83 ec 0c             	sub    esp,0xc
c001599d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00159a1:	e8 56 b9 ff ff       	call   c00112fc <KeNewProcessEnv(Process*)>
c00159a6:	83 c4 10             	add    esp,0x10
c00159a9:	89 c2                	mov    edx,eax
c00159ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159af:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00159b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159b9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00159c2:	a1 20 3e 02 c0       	mov    eax,ds:0xc0023e20
c00159c7:	8d 50 01             	lea    edx,[eax+0x1]
c00159ca:	89 15 20 3e 02 c0    	mov    DWORD PTR ds:0xc0023e20,edx
c00159d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00159d4:	89 02                	mov    DWORD PTR [edx],eax
c00159d6:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00159de:	83 ec 0c             	sub    esp,0xc
c00159e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00159e5:	e8 e9 20 ff ff       	call   c0007ad3 <malloc>
c00159ea:	83 c4 10             	add    esp,0x10
c00159ed:	89 c3                	mov    ebx,eax
c00159ef:	83 ec 08             	sub    esp,0x8
c00159f2:	6a 00                	push   0x0
c00159f4:	53                   	push   ebx
c00159f5:	e8 58 46 ff ff       	call   c000a052 <VAS::VAS(bool)>
c00159fa:	83 c4 10             	add    esp,0x10
c00159fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a01:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015a07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a0b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015a15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a19:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015a1d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015a23:	e8 f6 be ff ff       	call   c001191e <KeInitSignals()>
c0015a28:	89 c2                	mov    edx,eax
c0015a2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a2e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015a34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a38:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015a3e:	85 c0                	test   eax,eax
c0015a40:	74 42                	je     c0015a84 <Process::Process(char const*, Process*, char**)+0x130>
c0015a42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a46:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015a4c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015a52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a56:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015a5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a60:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015a66:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015a6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a70:	05 0c 01 00 00       	add    eax,0x10c
c0015a75:	83 ec 08             	sub    esp,0x8
c0015a78:	52                   	push   edx
c0015a79:	50                   	push   eax
c0015a7a:	e8 d1 ab fe ff       	call   c0000650 <strcpy>
c0015a7f:	83 c4 10             	add    esp,0x10
c0015a82:	eb 64                	jmp    c0015ae8 <Process::Process(char const*, Process*, char**)+0x194>
c0015a84:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015a8c:	83 ec 0c             	sub    esp,0xc
c0015a8f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015a93:	e8 3b 20 ff ff       	call   c0007ad3 <malloc>
c0015a98:	83 c4 10             	add    esp,0x10
c0015a9b:	89 c3                	mov    ebx,eax
c0015a9d:	83 ec 08             	sub    esp,0x8
c0015aa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015aa4:	53                   	push   ebx
c0015aa5:	e8 c2 31 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c0015aaa:	83 c4 10             	add    esp,0x10
c0015aad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ab1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015ab7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015abb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015ac1:	83 ec 0c             	sub    esp,0xc
c0015ac4:	50                   	push   eax
c0015ac5:	e8 50 2a ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c0015aca:	83 c4 10             	add    esp,0x10
c0015acd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ad1:	05 0c 01 00 00       	add    eax,0x10c
c0015ad6:	83 ec 08             	sub    esp,0x8
c0015ad9:	68 21 28 02 c0       	push   0xc0022821
c0015ade:	50                   	push   eax
c0015adf:	e8 6c ab fe ff       	call   c0000650 <strcpy>
c0015ae4:	83 c4 10             	add    esp,0x10
c0015ae7:	90                   	nop
c0015ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aec:	83 c0 0c             	add    eax,0xc
c0015aef:	83 ec 08             	sub    esp,0x8
c0015af2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015af6:	50                   	push   eax
c0015af7:	e8 54 ab fe ff       	call   c0000650 <strcpy>
c0015afc:	83 c4 10             	add    esp,0x10
c0015aff:	83 ec 08             	sub    esp,0x8
c0015b02:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015b06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b0a:	e8 d9 fd ff ff       	call   c00158e8 <Process::addArgs(char**)>
c0015b0f:	83 c4 10             	add    esp,0x10
c0015b12:	83 ec 08             	sub    esp,0x8
c0015b15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b1d:	e8 40 ed ff ff       	call   c0014862 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015b22:	83 c4 10             	add    esp,0x10
c0015b25:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015b29:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015b2d:	83 f0 01             	xor    eax,0x1
c0015b30:	88 c2                	mov    dl,al
c0015b32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b36:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015b3c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015b41:	83 ec 04             	sub    esp,0x4
c0015b44:	50                   	push   eax
c0015b45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b49:	68 78 28 02 c0       	push   0xc0022878
c0015b4e:	e8 b7 4d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015b53:	83 c4 10             	add    esp,0x10
c0015b56:	90                   	nop
c0015b57:	83 c4 14             	add    esp,0x14
c0015b5a:	5b                   	pop    ebx
c0015b5b:	5e                   	pop    esi
c0015b5c:	c3                   	ret    
c0015b5d:	90                   	nop
c0015b5e:	66 90                	xchg   ax,ax

c0015b60 <Process::Process(bool, char const*, Process*, char**)>:
c0015b60:	56                   	push   esi
c0015b61:	53                   	push   ebx
c0015b62:	83 ec 24             	sub    esp,0x24
c0015b65:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015b69:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015b6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015b71:	05 0c 02 00 00       	add    eax,0x20c
c0015b76:	bb 07 00 00 00       	mov    ebx,0x7
c0015b7b:	89 c6                	mov    esi,eax
c0015b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0015b80:	85 db                	test   ebx,ebx
c0015b82:	78 14                	js     c0015b98 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015b84:	83 ec 0c             	sub    esp,0xc
c0015b87:	56                   	push   esi
c0015b88:	e8 1b a4 00 00       	call   c001ffa8 <ThreadControlBlock::ThreadControlBlock()>
c0015b8d:	83 c4 10             	add    esp,0x10
c0015b90:	83 c6 5f             	add    esi,0x5f
c0015b93:	83 eb 01             	sub    ebx,0x1
c0015b96:	eb e8                	jmp    c0015b80 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015b98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015b9c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015ba3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ba7:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015bae:	83 ec 0c             	sub    esp,0xc
c0015bb1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015bb5:	e8 42 b7 ff ff       	call   c00112fc <KeNewProcessEnv(Process*)>
c0015bba:	83 c4 10             	add    esp,0x10
c0015bbd:	89 c2                	mov    edx,eax
c0015bbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015bc3:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015bc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015bcd:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015bd6:	a1 20 3e 02 c0       	mov    eax,ds:0xc0023e20
c0015bdb:	8d 50 01             	lea    edx,[eax+0x1]
c0015bde:	89 15 20 3e 02 c0    	mov    DWORD PTR ds:0xc0023e20,edx
c0015be4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015be8:	89 02                	mov    DWORD PTR [edx],eax
c0015bea:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015bf2:	83 ec 0c             	sub    esp,0xc
c0015bf5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015bf9:	e8 d5 1e ff ff       	call   c0007ad3 <malloc>
c0015bfe:	83 c4 10             	add    esp,0x10
c0015c01:	89 c3                	mov    ebx,eax
c0015c03:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015c08:	83 ec 08             	sub    esp,0x8
c0015c0b:	50                   	push   eax
c0015c0c:	53                   	push   ebx
c0015c0d:	e8 40 44 ff ff       	call   c000a052 <VAS::VAS(bool)>
c0015c12:	83 c4 10             	add    esp,0x10
c0015c15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c19:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015c1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c23:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015c2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015c35:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015c3b:	e8 de bc ff ff       	call   c001191e <KeInitSignals()>
c0015c40:	89 c2                	mov    edx,eax
c0015c42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c46:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015c4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c50:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015c56:	85 c0                	test   eax,eax
c0015c58:	74 42                	je     c0015c9c <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015c5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c5e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015c64:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015c6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c6e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015c74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c78:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015c7e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015c84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c88:	05 0c 01 00 00       	add    eax,0x10c
c0015c8d:	83 ec 08             	sub    esp,0x8
c0015c90:	52                   	push   edx
c0015c91:	50                   	push   eax
c0015c92:	e8 b9 a9 fe ff       	call   c0000650 <strcpy>
c0015c97:	83 c4 10             	add    esp,0x10
c0015c9a:	eb 64                	jmp    c0015d00 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015c9c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015ca4:	83 ec 0c             	sub    esp,0xc
c0015ca7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015cab:	e8 23 1e ff ff       	call   c0007ad3 <malloc>
c0015cb0:	83 c4 10             	add    esp,0x10
c0015cb3:	89 c3                	mov    ebx,eax
c0015cb5:	83 ec 08             	sub    esp,0x8
c0015cb8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015cbc:	53                   	push   ebx
c0015cbd:	e8 aa 2f ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c0015cc2:	83 c4 10             	add    esp,0x10
c0015cc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cc9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015ccf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cd3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015cd9:	83 ec 0c             	sub    esp,0xc
c0015cdc:	50                   	push   eax
c0015cdd:	e8 38 28 ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c0015ce2:	83 c4 10             	add    esp,0x10
c0015ce5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ce9:	05 0c 01 00 00       	add    eax,0x10c
c0015cee:	83 ec 08             	sub    esp,0x8
c0015cf1:	68 21 28 02 c0       	push   0xc0022821
c0015cf6:	50                   	push   eax
c0015cf7:	e8 54 a9 fe ff       	call   c0000650 <strcpy>
c0015cfc:	83 c4 10             	add    esp,0x10
c0015cff:	90                   	nop
c0015d00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d04:	83 c0 0c             	add    eax,0xc
c0015d07:	83 ec 08             	sub    esp,0x8
c0015d0a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015d0e:	50                   	push   eax
c0015d0f:	e8 3c a9 fe ff       	call   c0000650 <strcpy>
c0015d14:	83 c4 10             	add    esp,0x10
c0015d17:	83 ec 08             	sub    esp,0x8
c0015d1a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015d1e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015d22:	e8 c1 fb ff ff       	call   c00158e8 <Process::addArgs(char**)>
c0015d27:	83 c4 10             	add    esp,0x10
c0015d2a:	90                   	nop
c0015d2b:	83 c4 24             	add    esp,0x24
c0015d2e:	5b                   	pop    ebx
c0015d2f:	5e                   	pop    esi
c0015d30:	c3                   	ret    
c0015d31:	8d 76 00             	lea    esi,[esi+0x0]

c0015d34 <taskStartupFunction>:
c0015d34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d39:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015d3c:	c3                   	ret    
c0015d3d:	90                   	nop
c0015d3e:	66 90                	xchg   ax,ax

c0015d40 <Semaphore::Semaphore(int)>:
c0015d40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015d48:	89 10                	mov    DWORD PTR [eax],edx
c0015d4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d4e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015d55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d59:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015d60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d64:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015d6b:	90                   	nop
c0015d6c:	c3                   	ret    
c0015d6d:	90                   	nop
c0015d6e:	66 90                	xchg   ax,ax

c0015d70 <Mutex::Mutex()>:
c0015d70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d74:	6a 01                	push   0x1
c0015d76:	50                   	push   eax
c0015d77:	e8 c4 ff ff ff       	call   c0015d40 <Semaphore::Semaphore(int)>
c0015d7c:	83 c4 08             	add    esp,0x8
c0015d7f:	90                   	nop
c0015d80:	c3                   	ret    
c0015d81:	90                   	nop
c0015d82:	66 90                	xchg   ax,ax

c0015d84 <Process::createThread(void (*)(void*), void*, int)>:
c0015d84:	57                   	push   edi
c0015d85:	31 c9                	xor    ecx,ecx
c0015d87:	56                   	push   esi
c0015d88:	53                   	push   ebx
c0015d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015d8d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015d94:	89 f2                	mov    edx,esi
c0015d96:	66 90                	xchg   ax,ax
c0015d98:	0f b7 c2             	movzx  eax,dx
c0015d9b:	80 e2 01             	and    dl,0x1
c0015d9e:	74 14                	je     c0015db4 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015da0:	d1 f8                	sar    eax,1
c0015da2:	83 c1 01             	add    ecx,0x1
c0015da5:	83 f9 10             	cmp    ecx,0x10
c0015da8:	89 c2                	mov    edx,eax
c0015daa:	75 ec                	jne    c0015d98 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015dac:	31 db                	xor    ebx,ebx
c0015dae:	89 d8                	mov    eax,ebx
c0015db0:	5b                   	pop    ebx
c0015db1:	5e                   	pop    esi
c0015db2:	5f                   	pop    edi
c0015db3:	c3                   	ret    
c0015db4:	b8 01 00 00 00       	mov    eax,0x1
c0015db9:	d3 e0                	shl    eax,cl
c0015dbb:	09 c6                	or     esi,eax
c0015dbd:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015dc4:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0015dc7:	c1 e0 05             	shl    eax,0x5
c0015dca:	29 c8                	sub    eax,ecx
c0015dcc:	01 d8                	add    eax,ebx
c0015dce:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015dd5:	75 0d                	jne    c0015de4 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015dd7:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015de1:	8d 76 00             	lea    esi,[esi+0x0]
c0015de4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015dea:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0015ded:	83 ec 0c             	sub    esp,0xc
c0015df0:	c1 e6 05             	shl    esi,0x5
c0015df3:	29 ce                	sub    esi,ecx
c0015df5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015df8:	8d 04 33             	lea    eax,[ebx+esi*1]
c0015dfb:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015e01:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015e07:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015e0d:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015e14:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015e1a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015e1e:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015e24:	89 ca                	mov    edx,ecx
c0015e26:	f7 da                	neg    edx
c0015e28:	c1 e2 15             	shl    edx,0x15
c0015e2b:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015e31:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015e37:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0015e3b:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015e45:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015e4b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015e4f:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015e55:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015e5f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015e69:	68 00 01 00 00       	push   0x100
c0015e6e:	e8 60 1c ff ff       	call   c0007ad3 <malloc>
c0015e73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0015e76:	58                   	pop    eax
c0015e77:	5a                   	pop    edx
c0015e78:	53                   	push   ebx
c0015e79:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015e7e:	e8 bd 9e 00 00       	call   c001fd40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015e83:	83 c4 10             	add    esp,0x10
c0015e86:	89 d8                	mov    eax,ebx
c0015e88:	5b                   	pop    ebx
c0015e89:	5e                   	pop    esi
c0015e8a:	5f                   	pop    edi
c0015e8b:	c3                   	ret    

c0015e8c <Process::createUserThread()>:
c0015e8c:	83 ec 0c             	sub    esp,0xc
c0015e8f:	68 80 00 00 00       	push   0x80
c0015e94:	6a 00                	push   0x0
c0015e96:	68 e0 57 01 c0       	push   0xc00157e0
c0015e9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e9f:	50                   	push   eax
c0015ea0:	e8 df fe ff ff       	call   c0015d84 <Process::createThread(void (*)(void*), void*, int)>
c0015ea5:	83 c4 1c             	add    esp,0x1c
c0015ea8:	c3                   	ret    
c0015ea9:	8d 76 00             	lea    esi,[esi+0x0]

c0015eac <setupMultitasking(void (*)())>:
c0015eac:	56                   	push   esi
c0015ead:	53                   	push   ebx
c0015eae:	83 ec 04             	sub    esp,0x4
c0015eb1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015eb5:	eb 11                	jmp    c0015ec8 <setupMultitasking(void (*)())+0x1c>
c0015eb7:	90                   	nop
c0015eb8:	83 ec 0c             	sub    esp,0xc
c0015ebb:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015ec0:	e8 bf 9d 00 00       	call   c001fc84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015ec5:	83 c4 10             	add    esp,0x10
c0015ec8:	83 ec 0c             	sub    esp,0xc
c0015ecb:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015ed0:	e8 8b 9d 00 00       	call   c001fc60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015ed5:	83 c4 10             	add    esp,0x10
c0015ed8:	84 c0                	test   al,al
c0015eda:	74 dc                	je     c0015eb8 <setupMultitasking(void (*)())+0xc>
c0015edc:	83 ec 0c             	sub    esp,0xc
c0015edf:	68 24 07 00 00       	push   0x724
c0015ee4:	e8 ea 1b ff ff       	call   c0007ad3 <malloc>
c0015ee9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015ef0:	6a 00                	push   0x0
c0015ef2:	68 25 28 02 c0       	push   0xc0022825
c0015ef7:	6a 01                	push   0x1
c0015ef9:	50                   	push   eax
c0015efa:	89 c3                	mov    ebx,eax
c0015efc:	e8 5f fc ff ff       	call   c0015b60 <Process::Process(bool, char const*, Process*, char**)>
c0015f01:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015f07:	83 c4 14             	add    esp,0x14
c0015f0a:	89 1d f0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f0,ebx
c0015f10:	50                   	push   eax
c0015f11:	e8 59 28 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0015f16:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015f1d:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015f27:	83 c8 01             	or     eax,0x1
c0015f2a:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015f31:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015f37:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015f3a:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015f44:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015f4a:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015f54:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015f5a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015f64:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015f6e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015f74:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015f7a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015f84:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015f8e:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015f95:	e8 39 1b ff ff       	call   c0007ad3 <malloc>
c0015f9a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015fa0:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015fa6:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015fac:	5a                   	pop    edx
c0015fad:	59                   	pop    ecx
c0015fae:	68 21 28 02 c0       	push   0xc0022821
c0015fb3:	50                   	push   eax
c0015fb4:	e8 97 a6 fe ff       	call   c0000650 <strcpy>
c0015fb9:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015fc0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015fc4:	83 c4 14             	add    esp,0x14
c0015fc7:	5b                   	pop    ebx
c0015fc8:	5e                   	pop    esi
c0015fc9:	e9 9b a2 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015fce:	66 90                	xchg   ax,ax

c0015fd0 <schedule()>:
c0015fd0:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c0015fd6:	85 d2                	test   edx,edx
c0015fd8:	74 0e                	je     c0015fe8 <schedule()+0x18>
c0015fda:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0015fe4:	c3                   	ret    
c0015fe5:	8d 76 00             	lea    esi,[esi+0x0]
c0015fe8:	53                   	push   ebx
c0015fe9:	83 ec 14             	sub    esp,0x14
c0015fec:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015ff1:	e8 6a 9c 00 00       	call   c001fc60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015ff6:	83 c4 10             	add    esp,0x10
c0015ff9:	84 c0                	test   al,al
c0015ffb:	75 3f                	jne    c001603c <schedule()+0x6c>
c0015ffd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016002:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016005:	83 fa 01             	cmp    edx,0x1
c0016008:	74 3a                	je     c0016044 <schedule()+0x74>
c001600a:	66 90                	xchg   ax,ax
c001600c:	83 ec 0c             	sub    esp,0xc
c001600f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016014:	e8 63 9c 00 00       	call   c001fc7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016019:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016020:	89 c3                	mov    ebx,eax
c0016022:	e8 5d 9c 00 00       	call   c001fc84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016027:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001602e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016031:	e8 02 f8 ff ff       	call   c0015838 <switchToThread(ThreadControlBlock*)>
c0016036:	83 c4 10             	add    esp,0x10
c0016039:	8d 76 00             	lea    esi,[esi+0x0]
c001603c:	83 c4 08             	add    esp,0x8
c001603f:	5b                   	pop    ebx
c0016040:	c3                   	ret    
c0016041:	8d 76 00             	lea    esi,[esi+0x0]
c0016044:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001604b:	83 ec 08             	sub    esp,0x8
c001604e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016053:	50                   	push   eax
c0016054:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016059:	e8 e2 9c 00 00       	call   c001fd40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001605e:	83 c4 10             	add    esp,0x10
c0016061:	eb a9                	jmp    c001600c <schedule()+0x3c>
c0016063:	90                   	nop

c0016064 <Semaphore::tryAcquire()>:
c0016064:	53                   	push   ebx
c0016065:	83 ec 08             	sub    esp,0x8
c0016068:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001606c:	fa                   	cli    
c001606d:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016073:	8d 42 01             	lea    eax,[edx+0x1]
c0016076:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001607b:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016080:	8d 58 01             	lea    ebx,[eax+0x1]
c0016083:	89 1d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ebx
c0016089:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001608c:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001608e:	7c 2c                	jl     c00160bc <Semaphore::tryAcquire()+0x58>
c0016090:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016095:	85 c0                	test   eax,eax
c0016097:	75 0b                	jne    c00160a4 <Semaphore::tryAcquire()+0x40>
c0016099:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001609e:	85 c0                	test   eax,eax
c00160a0:	75 5a                	jne    c00160fc <Semaphore::tryAcquire()+0x98>
c00160a2:	66 90                	xchg   ax,ax
c00160a4:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00160aa:	31 c0                	xor    eax,eax
c00160ac:	85 d2                	test   edx,edx
c00160ae:	75 04                	jne    c00160b4 <Semaphore::tryAcquire()+0x50>
c00160b0:	fb                   	sti    
c00160b1:	8d 76 00             	lea    esi,[esi+0x0]
c00160b4:	83 c4 08             	add    esp,0x8
c00160b7:	5b                   	pop    ebx
c00160b8:	c3                   	ret    
c00160b9:	8d 76 00             	lea    esi,[esi+0x0]
c00160bc:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00160c1:	83 c3 01             	add    ebx,0x1
c00160c4:	85 c0                	test   eax,eax
c00160c6:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00160c9:	75 21                	jne    c00160ec <Semaphore::tryAcquire()+0x88>
c00160cb:	8b 0d c0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c0
c00160d1:	85 c9                	test   ecx,ecx
c00160d3:	74 17                	je     c00160ec <Semaphore::tryAcquire()+0x88>
c00160d5:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00160df:	e8 ec fe ff ff       	call   c0015fd0 <schedule()>
c00160e4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00160e9:	8d 50 ff             	lea    edx,[eax-0x1]
c00160ec:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00160f2:	85 d2                	test   edx,edx
c00160f4:	b0 01                	mov    al,0x1
c00160f6:	75 bc                	jne    c00160b4 <Semaphore::tryAcquire()+0x50>
c00160f8:	eb b6                	jmp    c00160b0 <Semaphore::tryAcquire()+0x4c>
c00160fa:	66 90                	xchg   ax,ax
c00160fc:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016106:	e8 c5 fe ff ff       	call   c0015fd0 <schedule()>
c001610b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016110:	8d 50 ff             	lea    edx,[eax-0x1]
c0016113:	31 c0                	xor    eax,eax
c0016115:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001611b:	85 d2                	test   edx,edx
c001611d:	75 95                	jne    c00160b4 <Semaphore::tryAcquire()+0x50>
c001611f:	eb 8f                	jmp    c00160b0 <Semaphore::tryAcquire()+0x4c>
c0016121:	90                   	nop
c0016122:	66 90                	xchg   ax,ax

c0016124 <Semaphore::assertLocked(char const*)>:
c0016124:	83 ec 0c             	sub    esp,0xc
c0016127:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001612b:	fa                   	cli    
c001612c:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c0016132:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016137:	83 c1 01             	add    ecx,0x1
c001613a:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c0016140:	8d 48 01             	lea    ecx,[eax+0x1]
c0016143:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016149:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001614b:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001614e:	7c 28                	jl     c0016178 <Semaphore::assertLocked(char const*)+0x54>
c0016150:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016155:	85 c0                	test   eax,eax
c0016157:	75 0b                	jne    c0016164 <Semaphore::assertLocked(char const*)+0x40>
c0016159:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001615e:	85 c0                	test   eax,eax
c0016160:	75 32                	jne    c0016194 <Semaphore::assertLocked(char const*)+0x70>
c0016162:	66 90                	xchg   ax,ax
c0016164:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016169:	83 e8 01             	sub    eax,0x1
c001616c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016171:	75 01                	jne    c0016174 <Semaphore::assertLocked(char const*)+0x50>
c0016173:	fb                   	sti    
c0016174:	83 c4 0c             	add    esp,0xc
c0016177:	c3                   	ret    
c0016178:	83 ec 0c             	sub    esp,0xc
c001617b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001617f:	52                   	push   edx
c0016180:	e8 82 b3 ff ff       	call   c0011507 <KePanic(char const*)>
c0016185:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001618a:	83 c4 10             	add    esp,0x10
c001618d:	83 e8 01             	sub    eax,0x1
c0016190:	eb be                	jmp    c0016150 <Semaphore::assertLocked(char const*)+0x2c>
c0016192:	66 90                	xchg   ax,ax
c0016194:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001619e:	e8 2d fe ff ff       	call   c0015fd0 <schedule()>
c00161a3:	eb bf                	jmp    c0016164 <Semaphore::assertLocked(char const*)+0x40>
c00161a5:	8d 76 00             	lea    esi,[esi+0x0]

c00161a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00161a8:	83 ec 0c             	sub    esp,0xc
c00161ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00161b4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00161b7:	e8 14 fe ff ff       	call   c0015fd0 <schedule()>
c00161bc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00161c1:	83 e8 01             	sub    eax,0x1
c00161c4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00161c9:	75 01                	jne    c00161cc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00161cb:	fb                   	sti    
c00161cc:	83 c4 0c             	add    esp,0xc
c00161cf:	c3                   	ret    

c00161d0 <blockTask(TaskState)>:
c00161d0:	83 ec 0c             	sub    esp,0xc
c00161d3:	fa                   	cli    
c00161d4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00161d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00161dd:	83 c0 01             	add    eax,0x1
c00161e0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00161e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161ea:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00161ed:	e8 de fd ff ff       	call   c0015fd0 <schedule()>
c00161f2:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00161f7:	83 e8 01             	sub    eax,0x1
c00161fa:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00161ff:	75 03                	jne    c0016204 <blockTask(TaskState)+0x34>
c0016201:	fb                   	sti    
c0016202:	66 90                	xchg   ax,ax
c0016204:	83 c4 0c             	add    esp,0xc
c0016207:	c3                   	ret    

c0016208 <waitTask(int, int*, int)>:
c0016208:	83 ec 18             	sub    esp,0x18
c001620b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016210:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016214:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0016217:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001621b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016220:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0016223:	6a 07                	push   0x7
c0016225:	e8 a6 ff ff ff       	call   c00161d0 <blockTask(TaskState)>
c001622a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001622f:	83 c4 10             	add    esp,0x10
c0016232:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0016235:	85 d2                	test   edx,edx
c0016237:	74 0b                	je     c0016244 <waitTask(int, int*, int)+0x3c>
c0016239:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001623c:	89 02                	mov    DWORD PTR [edx],eax
c001623e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016243:	90                   	nop
c0016244:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016247:	83 c4 0c             	add    esp,0xc
c001624a:	c3                   	ret    
c001624b:	90                   	nop

c001624c <milliTenthSleepUntil(unsigned int)>:
c001624c:	83 ec 0c             	sub    esp,0xc
c001624f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016253:	39 05 ec b8 02 c0    	cmp    DWORD PTR ds:0xc002b8ec,eax
c0016259:	76 05                	jbe    c0016260 <milliTenthSleepUntil(unsigned int)+0x14>
c001625b:	90                   	nop
c001625c:	83 c4 0c             	add    esp,0xc
c001625f:	c3                   	ret    
c0016260:	fa                   	cli    
c0016261:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016267:	83 ec 08             	sub    esp,0x8
c001626a:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016270:	83 c2 01             	add    edx,0x1
c0016273:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016279:	83 c1 01             	add    ecx,0x1
c001627c:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016282:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016288:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001628b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016290:	50                   	push   eax
c0016291:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016296:	e8 a5 9a 00 00       	call   c001fd40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001629b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00162a2:	e8 29 ff ff ff       	call   c00161d0 <blockTask(TaskState)>
c00162a7:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00162ac:	83 c4 10             	add    esp,0x10
c00162af:	83 e8 01             	sub    eax,0x1
c00162b2:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00162b7:	85 c0                	test   eax,eax
c00162b9:	75 09                	jne    c00162c4 <milliTenthSleepUntil(unsigned int)+0x78>
c00162bb:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00162c0:	85 c0                	test   eax,eax
c00162c2:	75 14                	jne    c00162d8 <milliTenthSleepUntil(unsigned int)+0x8c>
c00162c4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162c9:	83 e8 01             	sub    eax,0x1
c00162cc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162d1:	75 89                	jne    c001625c <milliTenthSleepUntil(unsigned int)+0x10>
c00162d3:	fb                   	sti    
c00162d4:	83 c4 0c             	add    esp,0xc
c00162d7:	c3                   	ret    
c00162d8:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00162e2:	e8 e9 fc ff ff       	call   c0015fd0 <schedule()>
c00162e7:	eb db                	jmp    c00162c4 <milliTenthSleepUntil(unsigned int)+0x78>
c00162e9:	8d 76 00             	lea    esi,[esi+0x0]

c00162ec <milliTenthSleep(unsigned int)>:
c00162ec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00162f0:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c00162f5:	01 c2                	add    edx,eax
c00162f7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00162fb:	e9 4c ff ff ff       	jmp    c001624c <milliTenthSleepUntil(unsigned int)>

c0016300 <sleep(unsigned int)>:
c0016300:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0016308:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001630c:	eb de                	jmp    c00162ec <milliTenthSleep(unsigned int)>
c001630e:	66 90                	xchg   ax,ax

c0016310 <Semaphore::acquire()>:
c0016310:	83 ec 0c             	sub    esp,0xc
c0016313:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016317:	fa                   	cli    
c0016318:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001631d:	83 c0 01             	add    eax,0x1
c0016320:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016325:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001632a:	8d 48 01             	lea    ecx,[eax+0x1]
c001632d:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016333:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016336:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0016338:	7d 2e                	jge    c0016368 <Semaphore::acquire()+0x58>
c001633a:	83 c1 01             	add    ecx,0x1
c001633d:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016340:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016345:	85 c0                	test   eax,eax
c0016347:	75 0b                	jne    c0016354 <Semaphore::acquire()+0x44>
c0016349:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001634e:	85 c0                	test   eax,eax
c0016350:	75 66                	jne    c00163b8 <Semaphore::acquire()+0xa8>
c0016352:	66 90                	xchg   ax,ax
c0016354:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016359:	83 e8 01             	sub    eax,0x1
c001635c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016361:	75 01                	jne    c0016364 <Semaphore::acquire()+0x54>
c0016363:	fb                   	sti    
c0016364:	83 c4 0c             	add    esp,0xc
c0016367:	c3                   	ret    
c0016368:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001636d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016374:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016377:	85 c9                	test   ecx,ecx
c0016379:	74 51                	je     c00163cc <Semaphore::acquire()+0xbc>
c001637b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001637e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016384:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0016387:	90                   	nop
c0016388:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001638d:	83 ec 0c             	sub    esp,0xc
c0016390:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0016393:	68 a4 28 02 c0       	push   0xc00228a4
c0016398:	e8 6d 45 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001639d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00163a4:	e8 27 fe ff ff       	call   c00161d0 <blockTask(TaskState)>
c00163a9:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00163ae:	83 c4 10             	add    esp,0x10
c00163b1:	83 e8 01             	sub    eax,0x1
c00163b4:	eb 8a                	jmp    c0016340 <Semaphore::acquire()+0x30>
c00163b6:	66 90                	xchg   ax,ax
c00163b8:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00163c2:	e8 09 fc ff ff       	call   c0015fd0 <schedule()>
c00163c7:	eb 8b                	jmp    c0016354 <Semaphore::acquire()+0x44>
c00163c9:	8d 76 00             	lea    esi,[esi+0x0]
c00163cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163d1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00163d4:	eb b2                	jmp    c0016388 <Semaphore::acquire()+0x78>
c00163d6:	66 90                	xchg   ax,ax

c00163d8 <taskReturned>:
c00163d8:	83 ec 18             	sub    esp,0x18
c00163db:	68 c4 28 02 c0       	push   0xc00228c4
c00163e0:	e8 22 b1 ff ff       	call   c0011507 <KePanic(char const*)>
c00163e5:	83 c4 10             	add    esp,0x10
c00163e8:	83 ec 0c             	sub    esp,0xc
c00163eb:	6a 02                	push   0x2
c00163ed:	e8 de fd ff ff       	call   c00161d0 <blockTask(TaskState)>
c00163f2:	fa                   	cli    
c00163f3:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00163f8:	83 c0 01             	add    eax,0x1
c00163fb:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016400:	e8 cb fb ff ff       	call   c0015fd0 <schedule()>
c0016405:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001640a:	83 c4 10             	add    esp,0x10
c001640d:	83 e8 01             	sub    eax,0x1
c0016410:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016415:	85 c0                	test   eax,eax
c0016417:	75 cf                	jne    c00163e8 <taskReturned+0x10>
c0016419:	fb                   	sti    
c001641a:	eb cc                	jmp    c00163e8 <taskReturned+0x10>

c001641c <Thr::processFromPID(int)>:
c001641c:	57                   	push   edi
c001641d:	56                   	push   esi
c001641e:	53                   	push   ebx
c001641f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016423:	fa                   	cli    
c0016424:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c001642a:	83 ec 0c             	sub    esp,0xc
c001642d:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016432:	83 c1 01             	add    ecx,0x1
c0016435:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c001643b:	e8 3c 98 00 00       	call   c001fc7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016440:	83 c4 10             	add    esp,0x10
c0016443:	89 c7                	mov    edi,eax
c0016445:	eb 15                	jmp    c001645c <Thr::processFromPID(int)+0x40>
c0016447:	90                   	nop
c0016448:	83 ec 0c             	sub    esp,0xc
c001644b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016450:	e8 27 98 00 00       	call   c001fc7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016455:	83 c4 10             	add    esp,0x10
c0016458:	39 f8                	cmp    eax,edi
c001645a:	74 50                	je     c00164ac <Thr::processFromPID(int)+0x90>
c001645c:	83 ec 0c             	sub    esp,0xc
c001645f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016464:	e8 13 98 00 00       	call   c001fc7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016469:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016470:	89 c3                	mov    ebx,eax
c0016472:	e8 0d 98 00 00       	call   c001fc84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016477:	58                   	pop    eax
c0016478:	5a                   	pop    edx
c0016479:	53                   	push   ebx
c001647a:	68 e4 c6 02 c0       	push   0xc002c6e4
c001647f:	e8 bc 98 00 00       	call   c001fd40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016484:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016487:	83 c4 10             	add    esp,0x10
c001648a:	39 30                	cmp    DWORD PTR [eax],esi
c001648c:	75 ba                	jne    c0016448 <Thr::processFromPID(int)+0x2c>
c001648e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016493:	83 e8 01             	sub    eax,0x1
c0016496:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001649b:	74 0b                	je     c00164a8 <Thr::processFromPID(int)+0x8c>
c001649d:	8d 76 00             	lea    esi,[esi+0x0]
c00164a0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00164a3:	90                   	nop
c00164a4:	5b                   	pop    ebx
c00164a5:	5e                   	pop    esi
c00164a6:	5f                   	pop    edi
c00164a7:	c3                   	ret    
c00164a8:	fb                   	sti    
c00164a9:	eb f5                	jmp    c00164a0 <Thr::processFromPID(int)+0x84>
c00164ab:	90                   	nop
c00164ac:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00164b1:	8d 50 ff             	lea    edx,[eax-0x1]
c00164b4:	31 c0                	xor    eax,eax
c00164b6:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00164bc:	85 d2                	test   edx,edx
c00164be:	75 e4                	jne    c00164a4 <Thr::processFromPID(int)+0x88>
c00164c0:	fb                   	sti    
c00164c1:	5b                   	pop    ebx
c00164c2:	5e                   	pop    esi
c00164c3:	5f                   	pop    edi
c00164c4:	c3                   	ret    
c00164c5:	8d 76 00             	lea    esi,[esi+0x0]

c00164c8 <unblockTask(ThreadControlBlock*)>:
c00164c8:	53                   	push   ebx
c00164c9:	83 ec 08             	sub    esp,0x8
c00164cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00164d0:	fa                   	cli    
c00164d1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00164d6:	83 c0 01             	add    eax,0x1
c00164d9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00164de:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00164e1:	85 c0                	test   eax,eax
c00164e3:	74 67                	je     c001654c <unblockTask(ThreadControlBlock*)+0x84>
c00164e5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00164e8:	83 f8 01             	cmp    eax,0x1
c00164eb:	74 37                	je     c0016524 <unblockTask(ThreadControlBlock*)+0x5c>
c00164ed:	83 ec 0c             	sub    esp,0xc
c00164f0:	68 e4 c6 02 c0       	push   0xc002c6e4
c00164f5:	e8 82 97 00 00       	call   c001fc7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164fa:	83 c4 10             	add    esp,0x10
c00164fd:	85 c0                	test   eax,eax
c00164ff:	75 1b                	jne    c001651c <unblockTask(ThreadControlBlock*)+0x54>
c0016501:	eb 5d                	jmp    c0016560 <unblockTask(ThreadControlBlock*)+0x98>
c0016503:	90                   	nop
c0016504:	83 ec 08             	sub    esp,0x8
c0016507:	50                   	push   eax
c0016508:	68 e4 c6 02 c0       	push   0xc002c6e4
c001650d:	e8 8a 9a 00 00       	call   c001ff9c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0016512:	83 c4 10             	add    esp,0x10
c0016515:	85 c0                	test   eax,eax
c0016517:	74 47                	je     c0016560 <unblockTask(ThreadControlBlock*)+0x98>
c0016519:	8d 76 00             	lea    esi,[esi+0x0]
c001651c:	39 c3                	cmp    ebx,eax
c001651e:	75 e4                	jne    c0016504 <unblockTask(ThreadControlBlock*)+0x3c>
c0016520:	eb 12                	jmp    c0016534 <unblockTask(ThreadControlBlock*)+0x6c>
c0016522:	66 90                	xchg   ax,ax
c0016524:	83 ec 0c             	sub    esp,0xc
c0016527:	68 43 28 02 c0       	push   0xc0022843
c001652c:	e8 d9 43 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016531:	83 c4 10             	add    esp,0x10
c0016534:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016539:	83 e8 01             	sub    eax,0x1
c001653c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016541:	75 01                	jne    c0016544 <unblockTask(ThreadControlBlock*)+0x7c>
c0016543:	fb                   	sti    
c0016544:	83 c4 08             	add    esp,0x8
c0016547:	5b                   	pop    ebx
c0016548:	c3                   	ret    
c0016549:	8d 76 00             	lea    esi,[esi+0x0]
c001654c:	83 ec 0c             	sub    esp,0xc
c001654f:	68 2c 28 02 c0       	push   0xc002282c
c0016554:	e8 b1 43 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016559:	83 c4 10             	add    esp,0x10
c001655c:	eb d6                	jmp    c0016534 <unblockTask(ThreadControlBlock*)+0x6c>
c001655e:	66 90                	xchg   ax,ax
c0016560:	83 ec 08             	sub    esp,0x8
c0016563:	53                   	push   ebx
c0016564:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016569:	e8 d2 97 00 00       	call   c001fd40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001656e:	83 c4 10             	add    esp,0x10
c0016571:	eb c1                	jmp    c0016534 <unblockTask(ThreadControlBlock*)+0x6c>
c0016573:	90                   	nop

c0016574 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016574:	55                   	push   ebp
c0016575:	57                   	push   edi
c0016576:	56                   	push   esi
c0016577:	53                   	push   ebx
c0016578:	83 ec 1c             	sub    esp,0x1c
c001657b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001657f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016582:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016588:	85 ed                	test   ebp,ebp
c001658a:	7e 28                	jle    c00165b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c001658c:	31 f6                	xor    esi,esi
c001658e:	66 90                	xchg   ax,ax
c0016590:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0016597:	83 ec 0c             	sub    esp,0xc
c001659a:	83 c6 01             	add    esi,0x1
c001659d:	57                   	push   edi
c001659e:	e8 40 15 ff ff       	call   c0007ae3 <free>
c00165a3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00165a6:	83 c4 10             	add    esp,0x10
c00165a9:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00165af:	7f df                	jg     c0016590 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00165b1:	8d 76 00             	lea    esi,[esi+0x0]
c00165b4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00165be:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00165c3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00165c6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00165c9:	d3 c0                	rol    eax,cl
c00165cb:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00165d2:	21 c8                	and    eax,ecx
c00165d4:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00165db:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00165de:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00165e6:	89 f7                	mov    edi,esi
c00165e8:	0f 85 72 01 00 00    	jne    c0016760 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00165ee:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00165f4:	85 ed                	test   ebp,ebp
c00165f6:	74 1c                	je     c0016614 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00165f8:	83 ec 0c             	sub    esp,0xc
c00165fb:	55                   	push   ebp
c00165fc:	e8 17 ac ff ff       	call   c0011218 <EnvVarContainer::~EnvVarContainer()>
c0016601:	59                   	pop    ecx
c0016602:	5e                   	pop    esi
c0016603:	6a 0c                	push   0xc
c0016605:	55                   	push   ebp
c0016606:	e8 01 42 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001660b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001660e:	83 c4 10             	add    esp,0x10
c0016611:	89 f7                	mov    edi,esi
c0016613:	90                   	nop
c0016614:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001661a:	85 c0                	test   eax,eax
c001661c:	0f 84 b2 00 00 00    	je     c00166d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016622:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016625:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016629:	31 c9                	xor    ecx,ecx
c001662b:	eb 17                	jmp    c0016644 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c001662d:	8d 76 00             	lea    esi,[esi+0x0]
c0016630:	83 c1 01             	add    ecx,0x1
c0016633:	83 f9 10             	cmp    ecx,0x10
c0016636:	0f 84 98 00 00 00    	je     c00166d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001663c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016642:	66 90                	xchg   ax,ax
c0016644:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001664b:	d3 fa                	sar    edx,cl
c001664d:	80 e2 01             	and    dl,0x1
c0016650:	74 de                	je     c0016630 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016652:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0016655:	c1 e2 05             	shl    edx,0x5
c0016658:	29 ca                	sub    edx,ecx
c001665a:	01 d0                	add    eax,edx
c001665c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016662:	83 fd 07             	cmp    ebp,0x7
c0016665:	75 c9                	jne    c0016630 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016667:	05 40 02 00 00       	add    eax,0x240
c001666c:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001666f:	83 fd ff             	cmp    ebp,0xffffffff
c0016672:	0f 8c f0 00 00 00    	jl     c0016768 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0016678:	0f 84 ae 01 00 00    	je     c001682c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c001667e:	85 ed                	test   ebp,ebp
c0016680:	0f 84 92 01 00 00    	je     c0016818 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016686:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016688:	75 a6                	jne    c0016630 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001668a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001668e:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016694:	01 d0                	add    eax,edx
c0016696:	66 90                	xchg   ax,ax
c0016698:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001669c:	83 ec 0c             	sub    esp,0xc
c001669f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00166a5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00166a8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00166ae:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00166b5:	50                   	push   eax
c00166b6:	e8 0d fe ff ff       	call   c00164c8 <unblockTask(ThreadControlBlock*)>
c00166bb:	83 c4 10             	add    esp,0x10
c00166be:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00166c1:	89 f7                	mov    edi,esi
c00166c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00166c7:	83 c1 01             	add    ecx,0x1
c00166ca:	83 f9 10             	cmp    ecx,0x10
c00166cd:	0f 85 69 ff ff ff    	jne    c001663c <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00166d3:	90                   	nop
c00166d4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00166da:	85 c0                	test   eax,eax
c00166dc:	74 62                	je     c0016740 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00166de:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00166e4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00166ea:	74 54                	je     c0016740 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00166ec:	83 ec 0c             	sub    esp,0xc
c00166ef:	68 e4 c6 02 c0       	push   0xc002c6e4
c00166f4:	e8 83 95 00 00       	call   c001fc7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166f9:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016700:	89 c7                	mov    edi,eax
c0016702:	e8 59 95 00 00       	call   c001fc60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016707:	83 c4 10             	add    esp,0x10
c001670a:	84 c0                	test   al,al
c001670c:	0f 84 ce 00 00 00    	je     c00167e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0016712:	66 90                	xchg   ax,ax
c0016714:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016717:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001671d:	85 d2                	test   edx,edx
c001671f:	74 0f                	je     c0016730 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0016721:	8b 02                	mov    eax,DWORD PTR [edx]
c0016723:	83 ec 0c             	sub    esp,0xc
c0016726:	52                   	push   edx
c0016727:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001672a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001672d:	83 c4 10             	add    esp,0x10
c0016730:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001673a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001673d:	8d 76 00             	lea    esi,[esi+0x0]
c0016740:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0016746:	85 db                	test   ebx,ebx
c0016748:	74 16                	je     c0016760 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001674a:	83 ec 0c             	sub    esp,0xc
c001674d:	53                   	push   ebx
c001674e:	e8 3d 34 ff ff       	call   c0009b90 <VAS::~VAS()>
c0016753:	58                   	pop    eax
c0016754:	5a                   	pop    edx
c0016755:	6a 14                	push   0x14
c0016757:	53                   	push   ebx
c0016758:	e8 af 40 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001675d:	83 c4 10             	add    esp,0x10
c0016760:	83 c4 1c             	add    esp,0x1c
c0016763:	5b                   	pop    ebx
c0016764:	5e                   	pop    esi
c0016765:	5f                   	pop    edi
c0016766:	5d                   	pop    ebp
c0016767:	c3                   	ret    
c0016768:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001676c:	83 ec 0c             	sub    esp,0xc
c001676f:	68 f8 28 02 c0       	push   0xc00228f8
c0016774:	e8 8e ad ff ff       	call   c0011507 <KePanic(char const*)>
c0016779:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001677c:	83 c4 10             	add    esp,0x10
c001677f:	89 f7                	mov    edi,esi
c0016781:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016785:	e9 a6 fe ff ff       	jmp    c0016630 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001678a:	66 90                	xchg   ax,ax
c001678c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016792:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016798:	75 1e                	jne    c00167b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001679a:	83 ec 0c             	sub    esp,0xc
c001679d:	68 60 29 02 c0       	push   0xc0022960
c00167a2:	e8 63 41 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00167a7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00167ae:	e8 1d fa ff ff       	call   c00161d0 <blockTask(TaskState)>
c00167b3:	83 c4 10             	add    esp,0x10
c00167b6:	66 90                	xchg   ax,ax
c00167b8:	83 ec 08             	sub    esp,0x8
c00167bb:	56                   	push   esi
c00167bc:	68 e4 c6 02 c0       	push   0xc002c6e4
c00167c1:	e8 7a 95 00 00       	call   c001fd40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00167c6:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00167cd:	e8 aa 94 00 00       	call   c001fc7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00167d2:	83 c4 10             	add    esp,0x10
c00167d5:	39 f8                	cmp    eax,edi
c00167d7:	0f 84 37 ff ff ff    	je     c0016714 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00167dd:	8d 76 00             	lea    esi,[esi+0x0]
c00167e0:	83 ec 0c             	sub    esp,0xc
c00167e3:	68 e4 c6 02 c0       	push   0xc002c6e4
c00167e8:	e8 8f 94 00 00       	call   c001fc7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00167ed:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00167f4:	89 c6                	mov    esi,eax
c00167f6:	e8 89 94 00 00       	call   c001fc84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00167fb:	83 c4 10             	add    esp,0x10
c00167fe:	39 f3                	cmp    ebx,esi
c0016800:	74 b6                	je     c00167b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016802:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016805:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016808:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001680e:	75 a8                	jne    c00167b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016810:	e9 77 ff ff ff       	jmp    c001678c <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016815:	8d 76 00             	lea    esi,[esi+0x0]
c0016818:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001681c:	83 ec 0c             	sub    esp,0xc
c001681f:	68 2c 29 02 c0       	push   0xc002292c
c0016824:	e9 4b ff ff ff       	jmp    c0016774 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016829:	8d 76 00             	lea    esi,[esi+0x0]
c001682c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016830:	8b 36                	mov    esi,DWORD PTR [esi]
c0016832:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016835:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016838:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001683e:	01 d7                	add    edi,edx
c0016840:	89 f8                	mov    eax,edi
c0016842:	e9 51 fe ff ff       	jmp    c0016698 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0016847:	90                   	nop

c0016848 <cleanerTaskFunction(void*)>:
c0016848:	53                   	push   ebx
c0016849:	83 ec 08             	sub    esp,0x8
c001684c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016851:	83 e8 01             	sub    eax,0x1
c0016854:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016859:	75 01                	jne    c001685c <cleanerTaskFunction(void*)+0x14>
c001685b:	fb                   	sti    
c001685c:	fa                   	cli    
c001685d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016862:	80 3d ac c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c6ac,0x0
c0016869:	8d 50 01             	lea    edx,[eax+0x1]
c001686c:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016872:	0f 84 c4 00 00 00    	je     c001693c <cleanerTaskFunction(void*)+0xf4>
c0016878:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001687d:	85 c0                	test   eax,eax
c001687f:	75 03                	jne    c0016884 <cleanerTaskFunction(void*)+0x3c>
c0016881:	fb                   	sti    
c0016882:	66 90                	xchg   ax,ax
c0016884:	c6 05 ac c6 02 c0 00 	mov    BYTE PTR ds:0xc002c6ac,0x0
c001688b:	fa                   	cli    
c001688c:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016892:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016898:	83 c2 01             	add    edx,0x1
c001689b:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00168a1:	83 c1 01             	add    ecx,0x1
c00168a4:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00168aa:	fa                   	cli    
c00168ab:	8b 1d c8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6c8
c00168b1:	83 c3 01             	add    ebx,0x1
c00168b4:	89 1d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ebx
c00168ba:	eb 28                	jmp    c00168e4 <cleanerTaskFunction(void*)+0x9c>
c00168bc:	83 ec 0c             	sub    esp,0xc
c00168bf:	68 cc c6 02 c0       	push   0xc002c6cc
c00168c4:	e8 b3 93 00 00       	call   c001fc7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168c9:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c00168d0:	89 c3                	mov    ebx,eax
c00168d2:	e8 ad 93 00 00       	call   c001fc84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00168d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00168da:	e8 95 fc ff ff       	call   c0016574 <cleanupTerminatedTask(ThreadControlBlock*)>
c00168df:	83 c4 10             	add    esp,0x10
c00168e2:	66 90                	xchg   ax,ax
c00168e4:	83 ec 0c             	sub    esp,0xc
c00168e7:	68 cc c6 02 c0       	push   0xc002c6cc
c00168ec:	e8 6f 93 00 00       	call   c001fc60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00168f1:	83 c4 10             	add    esp,0x10
c00168f4:	84 c0                	test   al,al
c00168f6:	74 c4                	je     c00168bc <cleanerTaskFunction(void*)+0x74>
c00168f8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00168fd:	83 e8 01             	sub    eax,0x1
c0016900:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016905:	75 01                	jne    c0016908 <cleanerTaskFunction(void*)+0xc0>
c0016907:	fb                   	sti    
c0016908:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001690d:	83 e8 01             	sub    eax,0x1
c0016910:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016915:	0f 85 31 ff ff ff    	jne    c001684c <cleanerTaskFunction(void*)+0x4>
c001691b:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016920:	85 c0                	test   eax,eax
c0016922:	0f 84 24 ff ff ff    	je     c001684c <cleanerTaskFunction(void*)+0x4>
c0016928:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016932:	e8 99 f6 ff ff       	call   c0015fd0 <schedule()>
c0016937:	e9 10 ff ff ff       	jmp    c001684c <cleanerTaskFunction(void*)+0x4>
c001693c:	83 ec 0c             	sub    esp,0xc
c001693f:	6a 02                	push   0x2
c0016941:	e8 62 f8 ff ff       	call   c00161a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016946:	83 c4 10             	add    esp,0x10
c0016949:	e9 36 ff ff ff       	jmp    c0016884 <cleanerTaskFunction(void*)+0x3c>
c001694e:	66 90                	xchg   ax,ax

c0016950 <terminateTask(int)>:
c0016950:	83 ec 14             	sub    esp,0x14
c0016953:	fa                   	cli    
c0016954:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c001695a:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016960:	83 c2 01             	add    edx,0x1
c0016963:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016969:	83 c1 01             	add    ecx,0x1
c001696c:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016972:	fa                   	cli    
c0016973:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016978:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001697c:	83 c0 01             	add    eax,0x1
c001697f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016984:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016989:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001698c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016991:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016994:	50                   	push   eax
c0016995:	68 cc c6 02 c0       	push   0xc002c6cc
c001699a:	e8 a1 93 00 00       	call   c001fd40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001699f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169a4:	83 c4 10             	add    esp,0x10
c00169a7:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00169ae:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c00169b3:	85 c0                	test   eax,eax
c00169b5:	74 65                	je     c0016a1c <terminateTask(int)+0xcc>
c00169b7:	c6 05 ac c6 02 c0 01 	mov    BYTE PTR ds:0xc002c6ac,0x1
c00169be:	83 ec 0c             	sub    esp,0xc
c00169c1:	50                   	push   eax
c00169c2:	e8 01 fb ff ff       	call   c00164c8 <unblockTask(ThreadControlBlock*)>
c00169c7:	83 c4 10             	add    esp,0x10
c00169ca:	66 90                	xchg   ax,ax
c00169cc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00169d1:	83 e8 01             	sub    eax,0x1
c00169d4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00169d9:	75 01                	jne    c00169dc <terminateTask(int)+0x8c>
c00169db:	fb                   	sti    
c00169dc:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00169e1:	83 e8 01             	sub    eax,0x1
c00169e4:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00169e9:	75 09                	jne    c00169f4 <terminateTask(int)+0xa4>
c00169eb:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c00169f2:	75 3c                	jne    c0016a30 <terminateTask(int)+0xe0>
c00169f4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00169f9:	83 e8 01             	sub    eax,0x1
c00169fc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a01:	75 01                	jne    c0016a04 <terminateTask(int)+0xb4>
c0016a03:	fb                   	sti    
c0016a04:	fa                   	cli    
c0016a05:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a0a:	83 c0 01             	add    eax,0x1
c0016a0d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a12:	66 90                	xchg   ax,ax
c0016a14:	e8 b7 f5 ff ff       	call   c0015fd0 <schedule()>
c0016a19:	eb d9                	jmp    c00169f4 <terminateTask(int)+0xa4>
c0016a1b:	90                   	nop
c0016a1c:	83 ec 0c             	sub    esp,0xc
c0016a1f:	68 5a 28 02 c0       	push   0xc002285a
c0016a24:	e8 e1 3e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016a29:	83 c4 10             	add    esp,0x10
c0016a2c:	eb 9e                	jmp    c00169cc <terminateTask(int)+0x7c>
c0016a2e:	66 90                	xchg   ax,ax
c0016a30:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016a3a:	eb d8                	jmp    c0016a14 <terminateTask(int)+0xc4>

c0016a3c <Thr::terminateFromIRQ(int)>:
c0016a3c:	83 ec 18             	sub    esp,0x18
c0016a3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a43:	50                   	push   eax
c0016a44:	e8 07 ff ff ff       	call   c0016950 <terminateTask(int)>
c0016a49:	90                   	nop
c0016a4a:	66 90                	xchg   ax,ax

c0016a4c <Semaphore::release()>:
c0016a4c:	83 ec 0c             	sub    esp,0xc
c0016a4f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016a53:	fa                   	cli    
c0016a54:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a59:	83 c0 01             	add    eax,0x1
c0016a5c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a61:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016a66:	8d 48 01             	lea    ecx,[eax+0x1]
c0016a69:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016a6f:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016a72:	85 c9                	test   ecx,ecx
c0016a74:	74 42                	je     c0016ab8 <Semaphore::release()+0x6c>
c0016a76:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016a79:	83 ec 0c             	sub    esp,0xc
c0016a7c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016a7f:	51                   	push   ecx
c0016a80:	e8 43 fa ff ff       	call   c00164c8 <unblockTask(ThreadControlBlock*)>
c0016a85:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016a8a:	83 c4 10             	add    esp,0x10
c0016a8d:	83 e8 01             	sub    eax,0x1
c0016a90:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016a95:	85 c0                	test   eax,eax
c0016a97:	75 0b                	jne    c0016aa4 <Semaphore::release()+0x58>
c0016a99:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016a9e:	85 c0                	test   eax,eax
c0016aa0:	75 22                	jne    c0016ac4 <Semaphore::release()+0x78>
c0016aa2:	66 90                	xchg   ax,ax
c0016aa4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016aa9:	83 e8 01             	sub    eax,0x1
c0016aac:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ab1:	75 01                	jne    c0016ab4 <Semaphore::release()+0x68>
c0016ab3:	fb                   	sti    
c0016ab4:	83 c4 0c             	add    esp,0xc
c0016ab7:	c3                   	ret    
c0016ab8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016abb:	83 e9 01             	sub    ecx,0x1
c0016abe:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016ac1:	eb cd                	jmp    c0016a90 <Semaphore::release()+0x44>
c0016ac3:	90                   	nop
c0016ac4:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016ace:	e8 fd f4 ff ff       	call   c0015fd0 <schedule()>
c0016ad3:	eb cf                	jmp    c0016aa4 <Semaphore::release()+0x58>
c0016ad5:	8d 76 00             	lea    esi,[esi+0x0]

c0016ad8 <__static_initialization_and_destruction_0(int, int)>:
c0016ad8:	83 ec 0c             	sub    esp,0xc
c0016adb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016ae0:	0f 85 8e 00 00 00    	jne    c0016b74 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016ae6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016aee:	0f 85 80 00 00 00    	jne    c0016b74 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016af4:	83 ec 0c             	sub    esp,0xc
c0016af7:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016afc:	e8 f3 94 00 00       	call   c001fff4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016b01:	83 c4 10             	add    esp,0x10
c0016b04:	83 ec 04             	sub    esp,0x4
c0016b07:	68 30 35 02 c0       	push   0xc0023530
c0016b0c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016b11:	68 a4 ff 01 c0       	push   0xc001ffa4
c0016b16:	e8 a1 3c ff ff       	call   c000a7bc <__cxa_atexit>
c0016b1b:	83 c4 10             	add    esp,0x10
c0016b1e:	83 ec 0c             	sub    esp,0xc
c0016b21:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016b26:	e8 c9 94 00 00       	call   c001fff4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016b2b:	83 c4 10             	add    esp,0x10
c0016b2e:	83 ec 04             	sub    esp,0x4
c0016b31:	68 30 35 02 c0       	push   0xc0023530
c0016b36:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016b3b:	68 a4 ff 01 c0       	push   0xc001ffa4
c0016b40:	e8 77 3c ff ff       	call   c000a7bc <__cxa_atexit>
c0016b45:	83 c4 10             	add    esp,0x10
c0016b48:	83 ec 0c             	sub    esp,0xc
c0016b4b:	68 cc c6 02 c0       	push   0xc002c6cc
c0016b50:	e8 9f 94 00 00       	call   c001fff4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016b55:	83 c4 10             	add    esp,0x10
c0016b58:	83 ec 04             	sub    esp,0x4
c0016b5b:	68 30 35 02 c0       	push   0xc0023530
c0016b60:	68 cc c6 02 c0       	push   0xc002c6cc
c0016b65:	68 a4 ff 01 c0       	push   0xc001ffa4
c0016b6a:	e8 4d 3c ff ff       	call   c000a7bc <__cxa_atexit>
c0016b6f:	83 c4 10             	add    esp,0x10
c0016b72:	66 90                	xchg   ax,ax
c0016b74:	90                   	nop
c0016b75:	83 c4 0c             	add    esp,0xc
c0016b78:	c3                   	ret    
c0016b79:	8d 76 00             	lea    esi,[esi+0x0]

c0016b7c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016b7c:	83 ec 0c             	sub    esp,0xc
c0016b7f:	83 ec 08             	sub    esp,0x8
c0016b82:	68 ff ff 00 00       	push   0xffff
c0016b87:	6a 01                	push   0x1
c0016b89:	e8 4a ff ff ff       	call   c0016ad8 <__static_initialization_and_destruction_0(int, int)>
c0016b8e:	83 c4 10             	add    esp,0x10
c0016b91:	83 c4 0c             	add    esp,0xc
c0016b94:	c3                   	ret    

c0016b95 <Vm::inbv(unsigned short)>:
c0016b95:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016b99:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016b9e:	75 06                	jne    c0016ba6 <Vm::inbv(unsigned short)+0x11>
c0016ba0:	a0 2c c7 02 c0       	mov    al,ds:0xc002c72c
c0016ba5:	c3                   	ret    
c0016ba6:	ec                   	in     al,dx
c0016ba7:	c3                   	ret    

c0016ba8 <Vm::outbv(unsigned short, unsigned char)>:
c0016ba8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016bac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016bb0:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016bb5:	75 25                	jne    c0016bdc <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016bb7:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016bbd:	88 81 40 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38c0],al
c0016bc3:	8d 51 01             	lea    edx,[ecx+0x1]
c0016bc6:	89 15 2c c7 02 c0    	mov    DWORD PTR ds:0xc002c72c,edx
c0016bcc:	83 fa 20             	cmp    edx,0x20
c0016bcf:	75 0c                	jne    c0016bdd <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016bd1:	c7 05 2c c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x1f
c0016bdb:	c3                   	ret    
c0016bdc:	ee                   	out    dx,al
c0016bdd:	c3                   	ret    

c0016bde <Vm::realToLinear(unsigned short, unsigned short)>:
c0016bde:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016be3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016be8:	c1 e0 04             	shl    eax,0x4
c0016beb:	01 d0                	add    eax,edx
c0016bed:	c3                   	ret    

c0016bee <Vm::getSegment(unsigned int)>:
c0016bee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016bf2:	c1 e8 10             	shr    eax,0x10
c0016bf5:	c3                   	ret    

c0016bf6 <Vm::getOffset(unsigned int)>:
c0016bf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016bfa:	c3                   	ret    

c0016bfb <Vm::mainloop2()>:
c0016bfb:	83 ec 18             	sub    esp,0x18
c0016bfe:	fa                   	cli    
c0016bff:	6a 02                	push   0x2
c0016c01:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016c07:	c6 05 25 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c725,0x1
c0016c0e:	e8 95 f5 ff ff       	call   c00161a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016c13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c18:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016c1c:	52                   	push   edx
c0016c1d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016c21:	52                   	push   edx
c0016c22:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016c26:	52                   	push   edx
c0016c27:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016c2b:	50                   	push   eax
c0016c2c:	e8 de 95 fe ff       	call   c000020f <goToVM86>
c0016c31:	83 c4 2c             	add    esp,0x2c
c0016c34:	c3                   	ret    

c0016c35 <Vm::mainVm8086Loop(void*)>:
c0016c35:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016c3a:	48                   	dec    eax
c0016c3b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016c40:	75 01                	jne    c0016c43 <Vm::mainVm8086Loop(void*)+0xe>
c0016c42:	fb                   	sti    
c0016c43:	eb b6                	jmp    c0016bfb <Vm::mainloop2()>

c0016c45 <Vm::mainloop3(unsigned long)>:
c0016c45:	83 ec 18             	sub    esp,0x18
c0016c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c4c:	fa                   	cli    
c0016c4d:	6a 02                	push   0x2
c0016c4f:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016c55:	c6 05 24 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c724,0x1
c0016c5c:	a3 20 c7 02 c0       	mov    ds:0xc002c720,eax
c0016c61:	e8 42 f5 ff ff       	call   c00161a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016c66:	83 c4 1c             	add    esp,0x1c
c0016c69:	eb 90                	jmp    c0016bfb <Vm::mainloop2()>

c0016c6b <Vm::initialise8086()>:
c0016c6b:	83 ec 0c             	sub    esp,0xc
c0016c6e:	68 80 00 00 00       	push   0x80
c0016c73:	6a 00                	push   0x0
c0016c75:	68 35 6c 01 c0       	push   0xc0016c35
c0016c7a:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016c80:	e8 ff f0 ff ff       	call   c0015d84 <Process::createThread(void (*)(void*), void*, int)>
c0016c85:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016c8c:	68 00 01 00 00       	push   0x100
c0016c91:	6a 00                	push   0x0
c0016c93:	6a 00                	push   0x0
c0016c95:	a3 28 c7 02 c0       	mov    ds:0xc002c728,eax
c0016c9a:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0016c9f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016ca5:	e8 5e 32 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016caa:	83 c4 2c             	add    esp,0x2c
c0016cad:	c3                   	ret    

c0016cae <Vm::finish8086()>:
c0016cae:	53                   	push   ebx
c0016caf:	83 ec 08             	sub    esp,0x8
c0016cb2:	fa                   	cli    
c0016cb3:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016cb9:	80 3d 24 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c724,0x0
c0016cc0:	75 15                	jne    c0016cd7 <Vm::finish8086()+0x29>
c0016cc2:	e8 09 f3 ff ff       	call   c0015fd0 <schedule()>
c0016cc7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ccc:	48                   	dec    eax
c0016ccd:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016cd2:	75 de                	jne    c0016cb2 <Vm::finish8086()+0x4>
c0016cd4:	fb                   	sti    
c0016cd5:	eb db                	jmp    c0016cb2 <Vm::finish8086()+0x4>
c0016cd7:	c6 05 24 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c724,0x0
c0016cde:	83 ec 0c             	sub    esp,0xc
c0016ce1:	8b 1d 20 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c720
c0016ce7:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016ced:	e8 d6 f7 ff ff       	call   c00164c8 <unblockTask(ThreadControlBlock*)>
c0016cf2:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016cf7:	83 c4 10             	add    esp,0x10
c0016cfa:	8d 50 ff             	lea    edx,[eax-0x1]
c0016cfd:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016d03:	85 d2                	test   edx,edx
c0016d05:	75 01                	jne    c0016d08 <Vm::finish8086()+0x5a>
c0016d07:	fb                   	sti    
c0016d08:	83 c4 08             	add    esp,0x8
c0016d0b:	89 d8                	mov    eax,ebx
c0016d0d:	5b                   	pop    ebx
c0016d0e:	c3                   	ret    

c0016d0f <Vm::getOutput8086(unsigned char*)>:
c0016d0f:	57                   	push   edi
c0016d10:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016d16:	56                   	push   esi
c0016d17:	be 40 c7 02 c0       	mov    esi,0xc002c740
c0016d1c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016d20:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d22:	5e                   	pop    esi
c0016d23:	a1 2c c7 02 c0       	mov    eax,ds:0xc002c72c
c0016d28:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016d32:	5f                   	pop    edi
c0016d33:	c3                   	ret    

c0016d34 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016d34:	55                   	push   ebp
c0016d35:	57                   	push   edi
c0016d36:	56                   	push   esi
c0016d37:	53                   	push   ebx
c0016d38:	83 ec 0c             	sub    esp,0xc
c0016d3b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016d3f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016d43:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016d47:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016d4b:	fa                   	cli    
c0016d4c:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016d52:	80 3d 25 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c725,0x0
c0016d59:	75 15                	jne    c0016d70 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016d5b:	e8 70 f2 ff ff       	call   c0015fd0 <schedule()>
c0016d60:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016d65:	48                   	dec    eax
c0016d66:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016d6b:	75 de                	jne    c0016d4b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016d6d:	fb                   	sti    
c0016d6e:	eb db                	jmp    c0016d4b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016d70:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016d7a:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016d7f:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016d83:	0f b7 ff             	movzx  edi,di
c0016d86:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016d8a:	0f b7 f6             	movzx  esi,si
c0016d8d:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016d91:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016d95:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016d99:	50                   	push   eax
c0016d9a:	6a 20                	push   0x20
c0016d9c:	6a 00                	push   0x0
c0016d9e:	68 40 c7 02 c0       	push   0xc002c740
c0016da3:	e8 48 97 fe ff       	call   c00004f0 <memset>
c0016da8:	5a                   	pop    edx
c0016da9:	59                   	pop    ecx
c0016daa:	57                   	push   edi
c0016dab:	56                   	push   esi
c0016dac:	e8 2d fe ff ff       	call   c0016bde <Vm::realToLinear(unsigned short, unsigned short)>
c0016db1:	83 c4 10             	add    esp,0x10
c0016db4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016db8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016dbc:	89 c7                	mov    edi,eax
c0016dbe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016dc0:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016dc7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016dcc:	48                   	dec    eax
c0016dcd:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016dd2:	75 01                	jne    c0016dd5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016dd4:	fb                   	sti    
c0016dd5:	83 ec 0c             	sub    esp,0xc
c0016dd8:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016dde:	e8 e5 f6 ff ff       	call   c00164c8 <unblockTask(ThreadControlBlock*)>
c0016de3:	83 c4 1c             	add    esp,0x1c
c0016de6:	b0 01                	mov    al,0x1
c0016de8:	5b                   	pop    ebx
c0016de9:	5e                   	pop    esi
c0016dea:	5f                   	pop    edi
c0016deb:	5d                   	pop    ebp
c0016dec:	c3                   	ret    

c0016ded <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016ded:	55                   	push   ebp
c0016dee:	57                   	push   edi
c0016def:	56                   	push   esi
c0016df0:	53                   	push   ebx
c0016df1:	83 ec 34             	sub    esp,0x34
c0016df4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016df8:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016dfc:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016e00:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016e04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e08:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016e0c:	68 88 29 02 c0       	push   0xc0022988
c0016e11:	e8 f4 3a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016e16:	83 c4 10             	add    esp,0x10
c0016e19:	fa                   	cli    
c0016e1a:	8a 1d 25 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c725
c0016e20:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e26:	84 db                	test   bl,bl
c0016e28:	75 15                	jne    c0016e3f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016e2a:	e8 a1 f1 ff ff       	call   c0015fd0 <schedule()>
c0016e2f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e34:	48                   	dec    eax
c0016e35:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e3a:	75 dd                	jne    c0016e19 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016e3c:	fb                   	sti    
c0016e3d:	eb da                	jmp    c0016e19 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016e3f:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016e49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016e4d:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016e52:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016e56:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016e5a:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016e5e:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016e62:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016e66:	50                   	push   eax
c0016e67:	6a 20                	push   0x20
c0016e69:	6a 00                	push   0x0
c0016e6b:	68 40 c7 02 c0       	push   0xc002c740
c0016e70:	e8 7b 96 fe ff       	call   c00004f0 <memset>
c0016e75:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016e7c:	e8 52 0c ff ff       	call   c0007ad3 <malloc>
c0016e81:	83 c4 0c             	add    esp,0xc
c0016e84:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016e8a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016e8e:	89 c5                	mov    ebp,eax
c0016e90:	50                   	push   eax
c0016e91:	e8 2a 4c ff ff       	call   c000bac0 <File::File(char const*, Process*)>
c0016e96:	83 c4 10             	add    esp,0x10
c0016e99:	85 ed                	test   ebp,ebp
c0016e9b:	75 0a                	jne    c0016ea7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016e9d:	83 ec 0c             	sub    esp,0xc
c0016ea0:	68 aa 29 02 c0       	push   0xc00229aa
c0016ea5:	eb 2b                	jmp    c0016ed2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016ea7:	50                   	push   eax
c0016ea8:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016eac:	50                   	push   eax
c0016ead:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016eb1:	50                   	push   eax
c0016eb2:	55                   	push   ebp
c0016eb3:	e8 28 4f ff ff       	call   c000bde0 <File::stat(unsigned long long*, bool*)>
c0016eb8:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016ebc:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016ec0:	83 c4 10             	add    esp,0x10
c0016ec3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016ec8:	74 27                	je     c0016ef1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016eca:	83 ec 0c             	sub    esp,0xc
c0016ecd:	68 be 29 02 c0       	push   0xc00229be
c0016ed2:	e8 30 a6 ff ff       	call   c0011507 <KePanic(char const*)>
c0016ed7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016edc:	83 c4 10             	add    esp,0x10
c0016edf:	48                   	dec    eax
c0016ee0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ee5:	85 c0                	test   eax,eax
c0016ee7:	75 01                	jne    c0016eea <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016ee9:	fb                   	sti    
c0016eea:	31 db                	xor    ebx,ebx
c0016eec:	e9 90 00 00 00       	jmp    c0016f81 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016ef1:	51                   	push   ecx
c0016ef2:	51                   	push   ecx
c0016ef3:	6a 01                	push   0x1
c0016ef5:	55                   	push   ebp
c0016ef6:	e8 e3 4b ff ff       	call   c000bade <File::open(FileOpenMode)>
c0016efb:	83 c4 10             	add    esp,0x10
c0016efe:	85 c0                	test   eax,eax
c0016f00:	74 26                	je     c0016f28 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016f02:	83 ec 0c             	sub    esp,0xc
c0016f05:	68 d7 29 02 c0       	push   0xc00229d7
c0016f0a:	e8 f8 a5 ff ff       	call   c0011507 <KePanic(char const*)>
c0016f0f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f14:	83 c4 10             	add    esp,0x10
c0016f17:	48                   	dec    eax
c0016f18:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f1d:	85 c0                	test   eax,eax
c0016f1f:	75 c9                	jne    c0016eea <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016f21:	fb                   	sti    
c0016f22:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016f26:	eb 59                	jmp    c0016f81 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016f28:	50                   	push   eax
c0016f29:	0f b7 ff             	movzx  edi,di
c0016f2c:	50                   	push   eax
c0016f2d:	0f b7 f6             	movzx  esi,si
c0016f30:	57                   	push   edi
c0016f31:	56                   	push   esi
c0016f32:	e8 a7 fc ff ff       	call   c0016bde <Vm::realToLinear(unsigned short, unsigned short)>
c0016f37:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016f3a:	5a                   	pop    edx
c0016f3b:	8d 74 24 20          	lea    esi,[esp+0x20]
c0016f3f:	56                   	push   esi
c0016f40:	50                   	push   eax
c0016f41:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f45:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f49:	55                   	push   ebp
c0016f4a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016f4d:	83 c4 14             	add    esp,0x14
c0016f50:	55                   	push   ebp
c0016f51:	e8 e6 4b ff ff       	call   c000bb3c <File::close()>
c0016f56:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f5b:	83 c4 10             	add    esp,0x10
c0016f5e:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016f65:	48                   	dec    eax
c0016f66:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f6b:	85 c0                	test   eax,eax
c0016f6d:	75 01                	jne    c0016f70 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016f6f:	fb                   	sti    
c0016f70:	83 ec 0c             	sub    esp,0xc
c0016f73:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016f79:	e8 4a f5 ff ff       	call   c00164c8 <unblockTask(ThreadControlBlock*)>
c0016f7e:	83 c4 10             	add    esp,0x10
c0016f81:	83 c4 2c             	add    esp,0x2c
c0016f84:	88 d8                	mov    al,bl
c0016f86:	5b                   	pop    ebx
c0016f87:	5e                   	pop    esi
c0016f88:	5f                   	pop    edi
c0016f89:	5d                   	pop    ebp
c0016f8a:	c3                   	ret    

c0016f8b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016f8b:	57                   	push   edi
c0016f8c:	56                   	push   esi
c0016f8d:	53                   	push   ebx
c0016f8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f92:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016f96:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016f9a:	83 e8 06             	sub    eax,0x6
c0016f9d:	0f b7 c0             	movzx  eax,ax
c0016fa0:	50                   	push   eax
c0016fa1:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016fa6:	50                   	push   eax
c0016fa7:	e8 32 fc ff ff       	call   c0016bde <Vm::realToLinear(unsigned short, unsigned short)>
c0016fac:	5a                   	pop    edx
c0016fad:	59                   	pop    ecx
c0016fae:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016fb1:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016fb4:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016fb7:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016fbd:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016fc0:	8d 51 02             	lea    edx,[ecx+0x2]
c0016fc3:	66 89 10             	mov    WORD PTR [eax],dx
c0016fc6:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016fca:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016fce:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016fd2:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016fd5:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016fd9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016fdf:	89 f1                	mov    ecx,esi
c0016fe1:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016fe5:	89 f2                	mov    edx,esi
c0016fe7:	0f b6 d6             	movzx  edx,dh
c0016fea:	0f b6 f1             	movzx  esi,cl
c0016fed:	74 0a                	je     c0016ff9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c0016fef:	c1 e2 08             	shl    edx,0x8
c0016ff2:	09 f2                	or     edx,esi
c0016ff4:	80 ce 02             	or     dh,0x2
c0016ff7:	eb 08                	jmp    c0017001 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0016ff9:	c1 e2 08             	shl    edx,0x8
c0016ffc:	09 f2                	or     edx,esi
c0016ffe:	80 e6 fd             	and    dh,0xfd
c0017001:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017005:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001700a:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001700e:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0017016:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0017019:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0017021:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017024:	5b                   	pop    ebx
c0017025:	5e                   	pop    esi
c0017026:	5f                   	pop    edi
c0017027:	c3                   	ret    

c0017028 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017028:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001702d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017032:	c1 e0 04             	shl    eax,0x4
c0017035:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0017038:	c3                   	ret    

c0017039 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0017039:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001703e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017043:	c1 e0 04             	shl    eax,0x4
c0017046:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001704a:	c3                   	ret    

c001704b <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001704b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017050:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017055:	c1 e0 04             	shl    eax,0x4
c0017058:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001705b:	c3                   	ret    

c001705c <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001705c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017061:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017066:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001706a:	c1 e0 04             	shl    eax,0x4
c001706d:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0017070:	c3                   	ret    

c0017071 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0017071:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017076:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001707b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001707f:	c1 e0 04             	shl    eax,0x4
c0017082:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0017086:	c3                   	ret    

c0017087 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0017087:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001708c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017091:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017095:	c1 e0 04             	shl    eax,0x4
c0017098:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001709b:	c3                   	ret    

c001709c <Vm::faultHandler(regs*)>:
c001709c:	55                   	push   ebp
c001709d:	57                   	push   edi
c001709e:	56                   	push   esi
c001709f:	53                   	push   ebx
c00170a0:	83 ec 2c             	sub    esp,0x2c
c00170a3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00170a7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00170aa:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00170ae:	0f b7 f8             	movzx  edi,ax
c00170b1:	0f b7 c0             	movzx  eax,ax
c00170b4:	52                   	push   edx
c00170b5:	50                   	push   eax
c00170b6:	e8 23 fb ff ff       	call   c0016bde <Vm::realToLinear(unsigned short, unsigned short)>
c00170bb:	5a                   	pop    edx
c00170bc:	59                   	pop    ecx
c00170bd:	89 c1                	mov    ecx,eax
c00170bf:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00170c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00170c6:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00170cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00170cf:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00170d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00170d6:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00170db:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00170df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00170e3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00170e7:	e8 f2 fa ff ff       	call   c0016bde <Vm::realToLinear(unsigned short, unsigned short)>
c00170ec:	5e                   	pop    esi
c00170ed:	be 06 00 00 00       	mov    esi,0x6
c00170f2:	5d                   	pop    ebp
c00170f3:	31 ed                	xor    ebp,ebp
c00170f5:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00170fa:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00170fd:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0017103:	0f 84 74 02 00 00    	je     c001737d <Vm::faultHandler(regs*)+0x2e1>
c0017109:	0f 87 94 00 00 00    	ja     c00171a3 <Vm::faultHandler(regs*)+0x107>
c001710f:	83 fa 66             	cmp    edx,0x66
c0017112:	0f 84 e2 01 00 00    	je     c00172fa <Vm::faultHandler(regs*)+0x25e>
c0017118:	77 47                	ja     c0017161 <Vm::faultHandler(regs*)+0xc5>
c001711a:	83 fa 36             	cmp    edx,0x36
c001711d:	0f 84 ca 01 00 00    	je     c00172ed <Vm::faultHandler(regs*)+0x251>
c0017123:	77 1a                	ja     c001713f <Vm::faultHandler(regs*)+0xa3>
c0017125:	83 fa 26             	cmp    edx,0x26
c0017128:	0f 84 98 01 00 00    	je     c00172c6 <Vm::faultHandler(regs*)+0x22a>
c001712e:	83 fa 2e             	cmp    edx,0x2e
c0017131:	0f 85 27 06 00 00    	jne    c001775e <Vm::faultHandler(regs*)+0x6c2>
c0017137:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001713a:	31 f6                	xor    esi,esi
c001713c:	41                   	inc    ecx
c001713d:	eb bb                	jmp    c00170fa <Vm::faultHandler(regs*)+0x5e>
c001713f:	83 fa 64             	cmp    edx,0x64
c0017142:	0f 84 8b 01 00 00    	je     c00172d3 <Vm::faultHandler(regs*)+0x237>
c0017148:	0f 87 92 01 00 00    	ja     c00172e0 <Vm::faultHandler(regs*)+0x244>
c001714e:	83 fa 3e             	cmp    edx,0x3e
c0017151:	0f 85 07 06 00 00    	jne    c001775e <Vm::faultHandler(regs*)+0x6c2>
c0017157:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001715a:	be 01 00 00 00       	mov    esi,0x1
c001715f:	eb db                	jmp    c001713c <Vm::faultHandler(regs*)+0xa0>
c0017161:	83 fa 6d             	cmp    edx,0x6d
c0017164:	0f 84 34 03 00 00    	je     c001749e <Vm::faultHandler(regs*)+0x402>
c001716a:	77 17                	ja     c0017183 <Vm::faultHandler(regs*)+0xe7>
c001716c:	83 fa 67             	cmp    edx,0x67
c001716f:	0f 84 92 01 00 00    	je     c0017307 <Vm::faultHandler(regs*)+0x26b>
c0017175:	83 fa 6c             	cmp    edx,0x6c
c0017178:	0f 84 b1 02 00 00    	je     c001742f <Vm::faultHandler(regs*)+0x393>
c001717e:	e9 db 05 00 00       	jmp    c001775e <Vm::faultHandler(regs*)+0x6c2>
c0017183:	83 fa 6f             	cmp    edx,0x6f
c0017186:	0f 84 40 04 00 00    	je     c00175cc <Vm::faultHandler(regs*)+0x530>
c001718c:	0f 82 a2 03 00 00    	jb     c0017534 <Vm::faultHandler(regs*)+0x498>
c0017192:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0017198:	0f 84 76 01 00 00    	je     c0017314 <Vm::faultHandler(regs*)+0x278>
c001719e:	e9 bb 05 00 00       	jmp    c001775e <Vm::faultHandler(regs*)+0x6c2>
c00171a3:	81 fa ec 00 00 00    	cmp    edx,0xec
c00171a9:	0f 84 57 05 00 00    	je     c0017706 <Vm::faultHandler(regs*)+0x66a>
c00171af:	0f 87 a9 00 00 00    	ja     c001725e <Vm::faultHandler(regs*)+0x1c2>
c00171b5:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00171bb:	0f 84 d6 04 00 00    	je     c0017697 <Vm::faultHandler(regs*)+0x5fb>
c00171c1:	77 78                	ja     c001723b <Vm::faultHandler(regs*)+0x19f>
c00171c3:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00171c9:	0f 84 0e 02 00 00    	je     c00173dd <Vm::faultHandler(regs*)+0x341>
c00171cf:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00171d5:	0f 85 83 05 00 00    	jne    c001775e <Vm::faultHandler(regs*)+0x6c2>
c00171db:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00171df:	89 d1                	mov    ecx,edx
c00171e1:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00171e4:	c1 e1 08             	shl    ecx,0x8
c00171e7:	09 ca                	or     edx,ecx
c00171e9:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00171ec:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00171f0:	89 d1                	mov    ecx,edx
c00171f2:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00171f6:	c1 e1 08             	shl    ecx,0x8
c00171f9:	09 ca                	or     edx,ecx
c00171fb:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00171fe:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0017202:	89 d1                	mov    ecx,edx
c0017204:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0017208:	c1 e1 08             	shl    ecx,0x8
c001720b:	09 ca                	or     edx,ecx
c001720d:	81 ca 00 02 02 00    	or     edx,0x20200
c0017213:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017216:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c001721a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017220:	d1 e8                	shr    eax,1
c0017222:	83 e0 01             	and    eax,0x1
c0017225:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017228:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001722b:	83 c0 06             	add    eax,0x6
c001722e:	25 ff ff 00 00       	and    eax,0xffff
c0017233:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017236:	e9 1f 05 00 00       	jmp    c001775a <Vm::faultHandler(regs*)+0x6be>
c001723b:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0017241:	0f 84 95 04 00 00    	je     c00176dc <Vm::faultHandler(regs*)+0x640>
c0017247:	0f 82 66 04 00 00    	jb     c00176b3 <Vm::faultHandler(regs*)+0x617>
c001724d:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0017253:	0f 84 9a 04 00 00    	je     c00176f3 <Vm::faultHandler(regs*)+0x657>
c0017259:	e9 00 05 00 00       	jmp    c001775e <Vm::faultHandler(regs*)+0x6c2>
c001725e:	81 fa ef 00 00 00    	cmp    edx,0xef
c0017264:	0f 84 dd 04 00 00    	je     c0017747 <Vm::faultHandler(regs*)+0x6ab>
c001726a:	77 2e                	ja     c001729a <Vm::faultHandler(regs*)+0x1fe>
c001726c:	81 fa ed 00 00 00    	cmp    edx,0xed
c0017272:	0f 84 aa 04 00 00    	je     c0017722 <Vm::faultHandler(regs*)+0x686>
c0017278:	81 fa ee 00 00 00    	cmp    edx,0xee
c001727e:	0f 85 da 04 00 00    	jne    c001775e <Vm::faultHandler(regs*)+0x6c2>
c0017284:	50                   	push   eax
c0017285:	50                   	push   eax
c0017286:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001728a:	50                   	push   eax
c001728b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001728f:	50                   	push   eax
c0017290:	e8 13 f9 ff ff       	call   c0016ba8 <Vm::outbv(unsigned short, unsigned char)>
c0017295:	e9 a5 04 00 00       	jmp    c001773f <Vm::faultHandler(regs*)+0x6a3>
c001729a:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00172a0:	0f 84 6d 01 00 00    	je     c0017413 <Vm::faultHandler(regs*)+0x377>
c00172a6:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00172ac:	0f 84 6f 01 00 00    	je     c0017421 <Vm::faultHandler(regs*)+0x385>
c00172b2:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00172b8:	0f 85 a0 04 00 00    	jne    c001775e <Vm::faultHandler(regs*)+0x6c2>
c00172be:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172c1:	e9 76 fe ff ff       	jmp    c001713c <Vm::faultHandler(regs*)+0xa0>
c00172c6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172c9:	be 02 00 00 00       	mov    esi,0x2
c00172ce:	e9 69 fe ff ff       	jmp    c001713c <Vm::faultHandler(regs*)+0xa0>
c00172d3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172d6:	be 03 00 00 00       	mov    esi,0x3
c00172db:	e9 5c fe ff ff       	jmp    c001713c <Vm::faultHandler(regs*)+0xa0>
c00172e0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172e3:	be 04 00 00 00       	mov    esi,0x4
c00172e8:	e9 4f fe ff ff       	jmp    c001713c <Vm::faultHandler(regs*)+0xa0>
c00172ed:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172f0:	be 05 00 00 00       	mov    esi,0x5
c00172f5:	e9 42 fe ff ff       	jmp    c001713c <Vm::faultHandler(regs*)+0xa0>
c00172fa:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172fd:	bd 01 00 00 00       	mov    ebp,0x1
c0017302:	e9 35 fe ff ff       	jmp    c001713c <Vm::faultHandler(regs*)+0xa0>
c0017307:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001730a:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001730f:	e9 28 fe ff ff       	jmp    c001713c <Vm::faultHandler(regs*)+0xa0>
c0017314:	83 e5 01             	and    ebp,0x1
c0017317:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001731a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001731e:	74 30                	je     c0017350 <Vm::faultHandler(regs*)+0x2b4>
c0017320:	83 e9 04             	sub    ecx,0x4
c0017323:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017329:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001732f:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017332:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017335:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001733b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001733f:	0f 84 12 04 00 00    	je     c0017757 <Vm::faultHandler(regs*)+0x6bb>
c0017345:	80 ce 02             	or     dh,0x2
c0017348:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001734b:	e9 07 04 00 00       	jmp    c0017757 <Vm::faultHandler(regs*)+0x6bb>
c0017350:	83 e9 02             	sub    ecx,0x2
c0017353:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017359:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001735c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017360:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017366:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001736a:	74 05                	je     c0017371 <Vm::faultHandler(regs*)+0x2d5>
c001736c:	80 ce 02             	or     dh,0x2
c001736f:	eb 03                	jmp    c0017374 <Vm::faultHandler(regs*)+0x2d8>
c0017371:	80 e6 fd             	and    dh,0xfd
c0017374:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017378:	e9 da 03 00 00       	jmp    c0017757 <Vm::faultHandler(regs*)+0x6bb>
c001737d:	83 e5 01             	and    ebp,0x1
c0017380:	74 2a                	je     c00173ac <Vm::faultHandler(regs*)+0x310>
c0017382:	8b 10                	mov    edx,DWORD PTR [eax]
c0017384:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001738a:	81 ca 00 02 02 00    	or     edx,0x20200
c0017390:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017393:	8b 00                	mov    eax,DWORD PTR [eax]
c0017395:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001739b:	c1 e8 09             	shr    eax,0x9
c001739e:	83 e0 01             	and    eax,0x1
c00173a1:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00173a4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00173a7:	83 c0 04             	add    eax,0x4
c00173aa:	eb 24                	jmp    c00173d0 <Vm::faultHandler(regs*)+0x334>
c00173ac:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00173af:	81 ca 00 02 02 00    	or     edx,0x20200
c00173b5:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00173b8:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00173bb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00173c1:	c1 e8 09             	shr    eax,0x9
c00173c4:	83 e0 01             	and    eax,0x1
c00173c7:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00173ca:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00173cd:	83 c0 02             	add    eax,0x2
c00173d0:	25 ff ff 00 00       	and    eax,0xffff
c00173d5:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00173d8:	e9 7a 03 00 00       	jmp    c0017757 <Vm::faultHandler(regs*)+0x6bb>
c00173dd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00173e1:	3d ee 00 00 00       	cmp    eax,0xee
c00173e6:	75 10                	jne    c00173f8 <Vm::faultHandler(regs*)+0x35c>
c00173e8:	83 ec 0c             	sub    esp,0xc
c00173eb:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00173ee:	e8 52 f8 ff ff       	call   c0016c45 <Vm::mainloop3(unsigned long)>
c00173f3:	e9 4a 03 00 00       	jmp    c0017742 <Vm::faultHandler(regs*)+0x6a6>
c00173f8:	83 ec 0c             	sub    esp,0xc
c00173fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00173ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017403:	51                   	push   ecx
c0017404:	50                   	push   eax
c0017405:	53                   	push   ebx
c0017406:	e8 80 fb ff ff       	call   c0016f8b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001740b:	83 c4 20             	add    esp,0x20
c001740e:	e9 47 03 00 00       	jmp    c001775a <Vm::faultHandler(regs*)+0x6be>
c0017413:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017418:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001741c:	e9 36 03 00 00       	jmp    c0017757 <Vm::faultHandler(regs*)+0x6bb>
c0017421:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017426:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001742a:	e9 28 03 00 00       	jmp    c0017757 <Vm::faultHandler(regs*)+0x6bb>
c001742f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017434:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017437:	74 2b                	je     c0017464 <Vm::faultHandler(regs*)+0x3c8>
c0017439:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017440:	76 22                	jbe    c0017464 <Vm::faultHandler(regs*)+0x3c8>
c0017442:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017446:	50                   	push   eax
c0017447:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001744b:	50                   	push   eax
c001744c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017450:	50                   	push   eax
c0017451:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017455:	50                   	push   eax
c0017456:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001745a:	50                   	push   eax
c001745b:	6a 6c                	push   0x6c
c001745d:	6a 6c                	push   0x6c
c001745f:	e9 c0 01 00 00       	jmp    c0017624 <Vm::faultHandler(regs*)+0x588>
c0017464:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017468:	83 ec 0c             	sub    esp,0xc
c001746b:	0f b7 f6             	movzx  esi,si
c001746e:	50                   	push   eax
c001746f:	e8 21 f7 ff ff       	call   c0016b95 <Vm::inbv(unsigned short)>
c0017474:	83 c4 0c             	add    esp,0xc
c0017477:	0f b6 c0             	movzx  eax,al
c001747a:	50                   	push   eax
c001747b:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001747f:	50                   	push   eax
c0017480:	56                   	push   esi
c0017481:	e8 d6 fb ff ff       	call   c001705c <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0017486:	83 c4 10             	add    esp,0x10
c0017489:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001748c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017490:	74 03                	je     c0017495 <Vm::faultHandler(regs*)+0x3f9>
c0017492:	48                   	dec    eax
c0017493:	eb 01                	jmp    c0017496 <Vm::faultHandler(regs*)+0x3fa>
c0017495:	40                   	inc    eax
c0017496:	0f b7 c0             	movzx  eax,ax
c0017499:	e9 8e 00 00 00       	jmp    c001752c <Vm::faultHandler(regs*)+0x490>
c001749e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00174a3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00174a6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00174a9:	74 29                	je     c00174d4 <Vm::faultHandler(regs*)+0x438>
c00174ab:	3d ff ff 00 00       	cmp    eax,0xffff
c00174b0:	76 22                	jbe    c00174d4 <Vm::faultHandler(regs*)+0x438>
c00174b2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00174b6:	50                   	push   eax
c00174b7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00174bb:	50                   	push   eax
c00174bc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00174c0:	50                   	push   eax
c00174c1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00174c5:	50                   	push   eax
c00174c6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00174ca:	50                   	push   eax
c00174cb:	6a 6d                	push   0x6d
c00174cd:	6a 6d                	push   0x6d
c00174cf:	e9 50 01 00 00       	jmp    c0017624 <Vm::faultHandler(regs*)+0x588>
c00174d4:	83 e5 01             	and    ebp,0x1
c00174d7:	0f b7 c8             	movzx  ecx,ax
c00174da:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00174dd:	0f b7 f6             	movzx  esi,si
c00174e0:	74 1e                	je     c0017500 <Vm::faultHandler(regs*)+0x464>
c00174e2:	ed                   	in     eax,dx
c00174e3:	55                   	push   ebp
c00174e4:	50                   	push   eax
c00174e5:	51                   	push   ecx
c00174e6:	56                   	push   esi
c00174e7:	e8 9b fb ff ff       	call   c0017087 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00174ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00174ef:	83 c4 10             	add    esp,0x10
c00174f2:	8d 50 04             	lea    edx,[eax+0x4]
c00174f5:	83 e8 04             	sub    eax,0x4
c00174f8:	81 e2 ff ff 00 00    	and    edx,0xffff
c00174fe:	eb 20                	jmp    c0017520 <Vm::faultHandler(regs*)+0x484>
c0017500:	66 ed                	in     ax,dx
c0017502:	57                   	push   edi
c0017503:	0f b7 c0             	movzx  eax,ax
c0017506:	50                   	push   eax
c0017507:	51                   	push   ecx
c0017508:	56                   	push   esi
c0017509:	e8 63 fb ff ff       	call   c0017071 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001750e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017511:	83 c4 10             	add    esp,0x10
c0017514:	8d 50 02             	lea    edx,[eax+0x2]
c0017517:	83 e8 02             	sub    eax,0x2
c001751a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017520:	25 ff ff 00 00       	and    eax,0xffff
c0017525:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017529:	0f 44 c2             	cmove  eax,edx
c001752c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001752f:	e9 23 02 00 00       	jmp    c0017757 <Vm::faultHandler(regs*)+0x6bb>
c0017534:	8d 46 ff             	lea    eax,[esi-0x1]
c0017537:	0f b6 f0             	movzx  esi,al
c001753a:	83 fe 05             	cmp    esi,0x5
c001753d:	77 23                	ja     c0017562 <Vm::faultHandler(regs*)+0x4c6>
c001753f:	ff 24 b5 4c 2a 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd5b4]
c0017546:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c001754b:	eb 15                	jmp    c0017562 <Vm::faultHandler(regs*)+0x4c6>
c001754d:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017551:	eb 0f                	jmp    c0017562 <Vm::faultHandler(regs*)+0x4c6>
c0017553:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0017557:	eb 09                	jmp    c0017562 <Vm::faultHandler(regs*)+0x4c6>
c0017559:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001755d:	eb 03                	jmp    c0017562 <Vm::faultHandler(regs*)+0x4c6>
c001755f:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0017562:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017567:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001756a:	74 29                	je     c0017595 <Vm::faultHandler(regs*)+0x4f9>
c001756c:	3d ff ff 00 00       	cmp    eax,0xffff
c0017571:	76 22                	jbe    c0017595 <Vm::faultHandler(regs*)+0x4f9>
c0017573:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017577:	50                   	push   eax
c0017578:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001757c:	50                   	push   eax
c001757d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017581:	50                   	push   eax
c0017582:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017586:	50                   	push   eax
c0017587:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001758b:	50                   	push   eax
c001758c:	6a 6e                	push   0x6e
c001758e:	6a 6e                	push   0x6e
c0017590:	e9 8f 00 00 00       	jmp    c0017624 <Vm::faultHandler(regs*)+0x588>
c0017595:	52                   	push   edx
c0017596:	0f b7 c0             	movzx  eax,ax
c0017599:	52                   	push   edx
c001759a:	50                   	push   eax
c001759b:	57                   	push   edi
c001759c:	e8 87 fa ff ff       	call   c0017028 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00175a1:	59                   	pop    ecx
c00175a2:	5e                   	pop    esi
c00175a3:	0f b6 c0             	movzx  eax,al
c00175a6:	50                   	push   eax
c00175a7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00175ab:	50                   	push   eax
c00175ac:	e8 f7 f5 ff ff       	call   c0016ba8 <Vm::outbv(unsigned short, unsigned char)>
c00175b1:	83 c4 10             	add    esp,0x10
c00175b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00175b7:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00175bb:	74 03                	je     c00175c0 <Vm::faultHandler(regs*)+0x524>
c00175bd:	48                   	dec    eax
c00175be:	eb 01                	jmp    c00175c1 <Vm::faultHandler(regs*)+0x525>
c00175c0:	40                   	inc    eax
c00175c1:	0f b7 c0             	movzx  eax,ax
c00175c4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00175c7:	e9 8b 01 00 00       	jmp    c0017757 <Vm::faultHandler(regs*)+0x6bb>
c00175cc:	8d 46 ff             	lea    eax,[esi-0x1]
c00175cf:	0f b6 f0             	movzx  esi,al
c00175d2:	83 fe 05             	cmp    esi,0x5
c00175d5:	77 1e                	ja     c00175f5 <Vm::faultHandler(regs*)+0x559>
c00175d7:	ff 24 b5 64 2a 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd59c]
c00175de:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00175e2:	eb 11                	jmp    c00175f5 <Vm::faultHandler(regs*)+0x559>
c00175e4:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00175e7:	eb 0c                	jmp    c00175f5 <Vm::faultHandler(regs*)+0x559>
c00175e9:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00175ec:	eb 07                	jmp    c00175f5 <Vm::faultHandler(regs*)+0x559>
c00175ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00175f1:	eb 02                	jmp    c00175f5 <Vm::faultHandler(regs*)+0x559>
c00175f3:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00175f5:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00175fa:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00175fd:	74 37                	je     c0017636 <Vm::faultHandler(regs*)+0x59a>
c00175ff:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0017605:	76 2f                	jbe    c0017636 <Vm::faultHandler(regs*)+0x59a>
c0017607:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001760b:	50                   	push   eax
c001760c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017610:	50                   	push   eax
c0017611:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017615:	50                   	push   eax
c0017616:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001761a:	50                   	push   eax
c001761b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001761f:	50                   	push   eax
c0017620:	6a 6f                	push   0x6f
c0017622:	6a 6f                	push   0x6f
c0017624:	68 f0 29 02 c0       	push   0xc00229f0
c0017629:	e8 dc 32 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001762e:	83 c4 20             	add    esp,0x20
c0017631:	e9 86 01 00 00       	jmp    c00177bc <Vm::faultHandler(regs*)+0x720>
c0017636:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017639:	0f b7 d7             	movzx  edx,di
c001763c:	0f b7 c6             	movzx  eax,si
c001763f:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0017642:	81 e1 00 04 00 00    	and    ecx,0x400
c0017648:	83 e5 01             	and    ebp,0x1
c001764b:	74 1c                	je     c0017669 <Vm::faultHandler(regs*)+0x5cd>
c001764d:	55                   	push   ebp
c001764e:	55                   	push   ebp
c001764f:	50                   	push   eax
c0017650:	52                   	push   edx
c0017651:	e8 f5 f9 ff ff       	call   c001704b <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0017656:	83 c4 10             	add    esp,0x10
c0017659:	89 fa                	mov    edx,edi
c001765b:	ef                   	out    dx,eax
c001765c:	8d 46 04             	lea    eax,[esi+0x4]
c001765f:	83 ee 04             	sub    esi,0x4
c0017662:	25 ff ff 00 00       	and    eax,0xffff
c0017667:	eb 1b                	jmp    c0017684 <Vm::faultHandler(regs*)+0x5e8>
c0017669:	55                   	push   ebp
c001766a:	55                   	push   ebp
c001766b:	50                   	push   eax
c001766c:	52                   	push   edx
c001766d:	e8 c7 f9 ff ff       	call   c0017039 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0017672:	83 c4 10             	add    esp,0x10
c0017675:	89 fa                	mov    edx,edi
c0017677:	66 ef                	out    dx,ax
c0017679:	8d 46 02             	lea    eax,[esi+0x2]
c001767c:	83 ee 02             	sub    esi,0x2
c001767f:	25 ff ff 00 00       	and    eax,0xffff
c0017684:	81 e6 ff ff 00 00    	and    esi,0xffff
c001768a:	85 c9                	test   ecx,ecx
c001768c:	0f 44 f0             	cmove  esi,eax
c001768f:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017692:	e9 c0 00 00 00       	jmp    c0017757 <Vm::faultHandler(regs*)+0x6bb>
c0017697:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001769e:	83 ec 0c             	sub    esp,0xc
c00176a1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00176a5:	50                   	push   eax
c00176a6:	e8 ea f4 ff ff       	call   c0016b95 <Vm::inbv(unsigned short)>
c00176ab:	0f b6 c0             	movzx  eax,al
c00176ae:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00176b1:	eb 3a                	jmp    c00176ed <Vm::faultHandler(regs*)+0x651>
c00176b3:	83 e5 01             	and    ebp,0x1
c00176b6:	74 07                	je     c00176bf <Vm::faultHandler(regs*)+0x623>
c00176b8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00176bc:	ed                   	in     eax,dx
c00176bd:	eb 14                	jmp    c00176d3 <Vm::faultHandler(regs*)+0x637>
c00176bf:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00176c2:	66 31 f6             	xor    si,si
c00176c5:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00176c8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00176cc:	66 ed                	in     ax,dx
c00176ce:	0f b7 c0             	movzx  eax,ax
c00176d1:	09 f0                	or     eax,esi
c00176d3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00176d6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00176da:	eb 7e                	jmp    c001775a <Vm::faultHandler(regs*)+0x6be>
c00176dc:	52                   	push   edx
c00176dd:	52                   	push   edx
c00176de:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00176e2:	50                   	push   eax
c00176e3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00176e7:	50                   	push   eax
c00176e8:	e8 bb f4 ff ff       	call   c0016ba8 <Vm::outbv(unsigned short, unsigned char)>
c00176ed:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00176f1:	eb 4f                	jmp    c0017742 <Vm::faultHandler(regs*)+0x6a6>
c00176f3:	83 e5 01             	and    ebp,0x1
c00176f6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00176f9:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00176fd:	74 03                	je     c0017702 <Vm::faultHandler(regs*)+0x666>
c00176ff:	ef                   	out    dx,eax
c0017700:	eb d4                	jmp    c00176d6 <Vm::faultHandler(regs*)+0x63a>
c0017702:	66 ef                	out    dx,ax
c0017704:	eb d0                	jmp    c00176d6 <Vm::faultHandler(regs*)+0x63a>
c0017706:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001770a:	83 ec 0c             	sub    esp,0xc
c001770d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017714:	50                   	push   eax
c0017715:	e8 7b f4 ff ff       	call   c0016b95 <Vm::inbv(unsigned short)>
c001771a:	0f b6 c0             	movzx  eax,al
c001771d:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017720:	eb 1d                	jmp    c001773f <Vm::faultHandler(regs*)+0x6a3>
c0017722:	83 e5 01             	and    ebp,0x1
c0017725:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017728:	74 03                	je     c001772d <Vm::faultHandler(regs*)+0x691>
c001772a:	ed                   	in     eax,dx
c001772b:	eb 0d                	jmp    c001773a <Vm::faultHandler(regs*)+0x69e>
c001772d:	66 ed                	in     ax,dx
c001772f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017732:	0f b7 c0             	movzx  eax,ax
c0017735:	66 31 d2             	xor    dx,dx
c0017738:	09 d0                	or     eax,edx
c001773a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001773d:	eb 18                	jmp    c0017757 <Vm::faultHandler(regs*)+0x6bb>
c001773f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017742:	83 c4 10             	add    esp,0x10
c0017745:	eb 13                	jmp    c001775a <Vm::faultHandler(regs*)+0x6be>
c0017747:	83 e5 01             	and    ebp,0x1
c001774a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001774d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017750:	74 03                	je     c0017755 <Vm::faultHandler(regs*)+0x6b9>
c0017752:	ef                   	out    dx,eax
c0017753:	eb 02                	jmp    c0017757 <Vm::faultHandler(regs*)+0x6bb>
c0017755:	66 ef                	out    dx,ax
c0017757:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001775a:	b0 01                	mov    al,0x1
c001775c:	eb 60                	jmp    c00177be <Vm::faultHandler(regs*)+0x722>
c001775e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017762:	50                   	push   eax
c0017763:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017767:	50                   	push   eax
c0017768:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001776c:	50                   	push   eax
c001776d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017771:	50                   	push   eax
c0017772:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017776:	50                   	push   eax
c0017777:	52                   	push   edx
c0017778:	52                   	push   edx
c0017779:	68 1d 2a 02 c0       	push   0xc0022a1d
c001777e:	e8 87 31 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017783:	83 c4 20             	add    esp,0x20
c0017786:	83 ec 0c             	sub    esp,0xc
c0017789:	6a 60                	push   0x60
c001778b:	e8 05 f4 ff ff       	call   c0016b95 <Vm::inbv(unsigned short)>
c0017790:	83 c4 10             	add    esp,0x10
c0017793:	0f b6 d0             	movzx  edx,al
c0017796:	83 fa 1c             	cmp    edx,0x1c
c0017799:	74 05                	je     c00177a0 <Vm::faultHandler(regs*)+0x704>
c001779b:	83 fa 5a             	cmp    edx,0x5a
c001779e:	75 e6                	jne    c0017786 <Vm::faultHandler(regs*)+0x6ea>
c00177a0:	0f b6 c0             	movzx  eax,al
c00177a3:	83 f8 1c             	cmp    eax,0x1c
c00177a6:	74 05                	je     c00177ad <Vm::faultHandler(regs*)+0x711>
c00177a8:	83 f8 5a             	cmp    eax,0x5a
c00177ab:	75 0f                	jne    c00177bc <Vm::faultHandler(regs*)+0x720>
c00177ad:	83 ec 0c             	sub    esp,0xc
c00177b0:	6a 60                	push   0x60
c00177b2:	e8 de f3 ff ff       	call   c0016b95 <Vm::inbv(unsigned short)>
c00177b7:	83 c4 10             	add    esp,0x10
c00177ba:	eb e4                	jmp    c00177a0 <Vm::faultHandler(regs*)+0x704>
c00177bc:	31 c0                	xor    eax,eax
c00177be:	83 c4 2c             	add    esp,0x2c
c00177c1:	5b                   	pop    ebx
c00177c2:	5e                   	pop    esi
c00177c3:	5f                   	pop    edi
c00177c4:	5d                   	pop    ebp
c00177c5:	c3                   	ret    

c00177c6 <noCopro(unsigned long)>:
c00177c6:	c3                   	ret    

c00177c7 <nmiHandler(regs*, void*)>:
c00177c7:	83 ec 0c             	sub    esp,0xc
c00177ca:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00177cf:	83 ec 0c             	sub    esp,0xc
c00177d2:	50                   	push   eax
c00177d3:	e8 fe fa fe ff       	call   c00072d6 <Computer::handleNMI()>
c00177d8:	83 c4 10             	add    esp,0x10
c00177db:	90                   	nop
c00177dc:	83 c4 0c             	add    esp,0xc
c00177df:	c3                   	ret    

c00177e0 <doubleFault(regs*, void*)>:
c00177e0:	55                   	push   ebp
c00177e1:	89 e5                	mov    ebp,esp
c00177e3:	83 ec 08             	sub    esp,0x8
c00177e6:	83 ec 0c             	sub    esp,0xc
c00177e9:	68 7c 2a 02 c0       	push   0xc0022a7c
c00177ee:	e8 14 9d ff ff       	call   c0011507 <KePanic(char const*)>
c00177f3:	83 c4 10             	add    esp,0x10
c00177f6:	90                   	nop
c00177f7:	c9                   	leave  
c00177f8:	c3                   	ret    

c00177f9 <displayDebugInfo(regs*)>:
c00177f9:	83 ec 1c             	sub    esp,0x1c
c00177fc:	0f 20 c0             	mov    eax,cr0
c00177ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017803:	0f 20 d0             	mov    eax,cr2
c0017806:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001780a:	0f 20 d8             	mov    eax,cr3
c001780d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017811:	0f 20 e0             	mov    eax,cr4
c0017814:	89 04 24             	mov    DWORD PTR [esp],eax
c0017817:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001781b:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001781e:	83 ec 08             	sub    esp,0x8
c0017821:	50                   	push   eax
c0017822:	68 98 2a 02 c0       	push   0xc0022a98
c0017827:	e8 de 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001782c:	83 c4 10             	add    esp,0x10
c001782f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017833:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017836:	83 ec 08             	sub    esp,0x8
c0017839:	50                   	push   eax
c001783a:	68 89 2a 02 c0       	push   0xc0022a89
c001783f:	e8 c6 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017844:	83 c4 10             	add    esp,0x10
c0017847:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001784b:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001784e:	83 ec 08             	sub    esp,0x8
c0017851:	50                   	push   eax
c0017852:	68 94 2a 02 c0       	push   0xc0022a94
c0017857:	e8 ae 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001785c:	83 c4 10             	add    esp,0x10
c001785f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017863:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017866:	83 ec 08             	sub    esp,0x8
c0017869:	50                   	push   eax
c001786a:	68 a3 2a 02 c0       	push   0xc0022aa3
c001786f:	e8 96 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017874:	83 c4 10             	add    esp,0x10
c0017877:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001787b:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001787e:	83 ec 08             	sub    esp,0x8
c0017881:	50                   	push   eax
c0017882:	68 ae 2a 02 c0       	push   0xc0022aae
c0017887:	e8 7e 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001788c:	83 c4 10             	add    esp,0x10
c001788f:	83 ec 08             	sub    esp,0x8
c0017892:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017896:	68 b9 2a 02 c0       	push   0xc0022ab9
c001789b:	e8 6a 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00178a0:	83 c4 10             	add    esp,0x10
c00178a3:	83 ec 08             	sub    esp,0x8
c00178a6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00178aa:	68 c4 2a 02 c0       	push   0xc0022ac4
c00178af:	e8 56 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00178b4:	83 c4 10             	add    esp,0x10
c00178b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178bb:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00178be:	c1 e0 05             	shl    eax,0x5
c00178c1:	8d 90 40 3e 02 c0    	lea    edx,[eax-0x3ffdc1c0]
c00178c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178cb:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00178ce:	83 ec 04             	sub    esp,0x4
c00178d1:	52                   	push   edx
c00178d2:	50                   	push   eax
c00178d3:	68 cf 2a 02 c0       	push   0xc0022acf
c00178d8:	e8 2d 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00178dd:	83 c4 10             	add    esp,0x10
c00178e0:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00178e5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00178eb:	83 ec 0c             	sub    esp,0xc
c00178ee:	50                   	push   eax
c00178ef:	e8 7b 0e ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c00178f4:	83 c4 10             	add    esp,0x10
c00178f7:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00178fc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017902:	83 ec 08             	sub    esp,0x8
c0017905:	68 de 2a 02 c0       	push   0xc0022ade
c001790a:	50                   	push   eax
c001790b:	e8 9c 11 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017910:	83 c4 10             	add    esp,0x10
c0017913:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017918:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001791e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017922:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017925:	83 ec 08             	sub    esp,0x8
c0017928:	52                   	push   edx
c0017929:	50                   	push   eax
c001792a:	e8 37 11 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001792f:	83 c4 10             	add    esp,0x10
c0017932:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017937:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001793d:	83 ec 08             	sub    esp,0x8
c0017940:	68 ec 2a 02 c0       	push   0xc0022aec
c0017945:	50                   	push   eax
c0017946:	e8 61 11 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001794b:	83 c4 10             	add    esp,0x10
c001794e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017953:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017959:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001795e:	8b 12                	mov    edx,DWORD PTR [edx]
c0017960:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017963:	83 c2 0c             	add    edx,0xc
c0017966:	83 ec 08             	sub    esp,0x8
c0017969:	52                   	push   edx
c001796a:	50                   	push   eax
c001796b:	e8 3c 11 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017970:	83 c4 10             	add    esp,0x10
c0017973:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017978:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001797e:	83 ec 08             	sub    esp,0x8
c0017981:	68 f5 2a 02 c0       	push   0xc0022af5
c0017986:	50                   	push   eax
c0017987:	e8 20 11 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001798c:	83 c4 10             	add    esp,0x10
c001798f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017994:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001799a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001799e:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00179a1:	83 ec 08             	sub    esp,0x8
c00179a4:	52                   	push   edx
c00179a5:	50                   	push   eax
c00179a6:	e8 bb 10 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00179ab:	83 c4 10             	add    esp,0x10
c00179ae:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179b3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179b9:	83 ec 08             	sub    esp,0x8
c00179bc:	68 fd 2a 02 c0       	push   0xc0022afd
c00179c1:	50                   	push   eax
c00179c2:	e8 e5 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00179c7:	83 c4 10             	add    esp,0x10
c00179ca:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179cf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179d5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00179d9:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00179dc:	83 ec 08             	sub    esp,0x8
c00179df:	52                   	push   edx
c00179e0:	50                   	push   eax
c00179e1:	e8 80 10 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00179e6:	83 c4 10             	add    esp,0x10
c00179e9:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179ee:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179f4:	83 ec 08             	sub    esp,0x8
c00179f7:	68 05 2b 02 c0       	push   0xc0022b05
c00179fc:	50                   	push   eax
c00179fd:	e8 aa 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a02:	83 c4 10             	add    esp,0x10
c0017a05:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a0a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a10:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a14:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017a17:	83 ec 08             	sub    esp,0x8
c0017a1a:	52                   	push   edx
c0017a1b:	50                   	push   eax
c0017a1c:	e8 45 10 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017a21:	83 c4 10             	add    esp,0x10
c0017a24:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a29:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a2f:	83 ec 08             	sub    esp,0x8
c0017a32:	68 0d 2b 02 c0       	push   0xc0022b0d
c0017a37:	50                   	push   eax
c0017a38:	e8 6f 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a3d:	83 c4 10             	add    esp,0x10
c0017a40:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a45:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a4b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a4f:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017a52:	83 ec 08             	sub    esp,0x8
c0017a55:	52                   	push   edx
c0017a56:	50                   	push   eax
c0017a57:	e8 0a 10 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017a5c:	83 c4 10             	add    esp,0x10
c0017a5f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a64:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a6a:	83 ec 08             	sub    esp,0x8
c0017a6d:	68 15 2b 02 c0       	push   0xc0022b15
c0017a72:	50                   	push   eax
c0017a73:	e8 34 10 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017a78:	83 c4 10             	add    esp,0x10
c0017a7b:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a80:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a86:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a8a:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017a8d:	83 ec 08             	sub    esp,0x8
c0017a90:	52                   	push   edx
c0017a91:	50                   	push   eax
c0017a92:	e8 cf 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017a97:	83 c4 10             	add    esp,0x10
c0017a9a:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a9f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017aa5:	83 ec 08             	sub    esp,0x8
c0017aa8:	68 1d 2b 02 c0       	push   0xc0022b1d
c0017aad:	50                   	push   eax
c0017aae:	e8 f9 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017ab3:	83 c4 10             	add    esp,0x10
c0017ab6:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017abb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ac1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ac5:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017ac8:	83 ec 08             	sub    esp,0x8
c0017acb:	52                   	push   edx
c0017acc:	50                   	push   eax
c0017acd:	e8 94 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017ad2:	83 c4 10             	add    esp,0x10
c0017ad5:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ada:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ae0:	83 ec 08             	sub    esp,0x8
c0017ae3:	68 25 2b 02 c0       	push   0xc0022b25
c0017ae8:	50                   	push   eax
c0017ae9:	e8 be 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017aee:	83 c4 10             	add    esp,0x10
c0017af1:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017af6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017afc:	83 ec 08             	sub    esp,0x8
c0017aff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b03:	50                   	push   eax
c0017b04:	e8 5d 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017b09:	83 c4 10             	add    esp,0x10
c0017b0c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b11:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b17:	83 ec 08             	sub    esp,0x8
c0017b1a:	68 2e 2b 02 c0       	push   0xc0022b2e
c0017b1f:	50                   	push   eax
c0017b20:	e8 87 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b25:	83 c4 10             	add    esp,0x10
c0017b28:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b2d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b33:	83 ec 08             	sub    esp,0x8
c0017b36:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b3a:	50                   	push   eax
c0017b3b:	e8 26 0f ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017b40:	83 c4 10             	add    esp,0x10
c0017b43:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b48:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b4e:	83 ec 08             	sub    esp,0x8
c0017b51:	68 36 2b 02 c0       	push   0xc0022b36
c0017b56:	50                   	push   eax
c0017b57:	e8 50 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b5c:	83 c4 10             	add    esp,0x10
c0017b5f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b64:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b6a:	83 ec 08             	sub    esp,0x8
c0017b6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017b71:	50                   	push   eax
c0017b72:	e8 ef 0e ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017b77:	83 c4 10             	add    esp,0x10
c0017b7a:	fa                   	cli    
c0017b7b:	f4                   	hlt    
c0017b7c:	eb fe                	jmp    c0017b7c <displayDebugInfo(regs*)+0x383>

c0017b7e <HalSystemIdle()>:
c0017b7e:	56                   	push   esi
c0017b7f:	53                   	push   ebx
c0017b80:	83 ec 14             	sub    esp,0x14
c0017b83:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017b88:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017b8e:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017b94:	83 e0 04             	and    eax,0x4
c0017b97:	0f b6 c0             	movzx  eax,al
c0017b9a:	85 c0                	test   eax,eax
c0017b9c:	0f 95 c0             	setne  al
c0017b9f:	0f b6 c0             	movzx  eax,al
c0017ba2:	85 c0                	test   eax,eax
c0017ba4:	74 4c                	je     c0017bf2 <HalSystemIdle()+0x74>
c0017ba6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017bab:	83 ec 08             	sub    esp,0x8
c0017bae:	68 e1 00 00 00       	push   0xe1
c0017bb3:	50                   	push   eax
c0017bb4:	e8 29 f5 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0017bb9:	83 c4 10             	add    esp,0x10
c0017bbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017bc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017bc4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017bc9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017bcd:	83 e2 02             	and    edx,0x2
c0017bd0:	89 d3                	mov    ebx,edx
c0017bd2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017bd6:	83 e2 00             	and    edx,0x0
c0017bd9:	89 d6                	mov    esi,edx
c0017bdb:	56                   	push   esi
c0017bdc:	53                   	push   ebx
c0017bdd:	68 e1 00 00 00       	push   0xe1
c0017be2:	50                   	push   eax
c0017be3:	e8 26 f5 fe ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c0017be8:	83 c4 10             	add    esp,0x10
c0017beb:	e8 a4 85 fe ff       	call   c0000194 <doTPAUSE>
c0017bf0:	eb 01                	jmp    c0017bf3 <HalSystemIdle()+0x75>
c0017bf2:	f4                   	hlt    
c0017bf3:	90                   	nop
c0017bf4:	83 c4 14             	add    esp,0x14
c0017bf7:	5b                   	pop    ebx
c0017bf8:	5e                   	pop    esi
c0017bf9:	c3                   	ret    

c0017bfa <displayProgramFault(char const*)>:
c0017bfa:	83 ec 0c             	sub    esp,0xc
c0017bfd:	83 ec 0c             	sub    esp,0xc
c0017c00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c04:	e8 01 2d ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017c09:	83 c4 10             	add    esp,0x10
c0017c0c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017c11:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017c16:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c1c:	85 c0                	test   eax,eax
c0017c1e:	74 21                	je     c0017c41 <displayProgramFault(char const*)+0x47>
c0017c20:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017c25:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c27:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017c2a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c30:	6a 04                	push   0x4
c0017c32:	6a 0f                	push   0xf
c0017c34:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c38:	50                   	push   eax
c0017c39:	e8 e0 0e ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017c3e:	83 c4 10             	add    esp,0x10
c0017c41:	90                   	nop
c0017c42:	83 c4 0c             	add    esp,0xc
c0017c45:	c3                   	ret    

c0017c46 <gpFault(regs*, void*)>:
c0017c46:	83 ec 1c             	sub    esp,0x1c
c0017c49:	c7 05 74 c7 02 c0 9c 70 01 c0 	mov    DWORD PTR ds:0xc002c774,0xc001709c
c0017c53:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017c58:	85 c0                	test   eax,eax
c0017c5a:	74 1e                	je     c0017c7a <gpFault(regs*, void*)+0x34>
c0017c5c:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017c61:	83 ec 0c             	sub    esp,0xc
c0017c64:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c68:	ff d0                	call   eax
c0017c6a:	83 c4 10             	add    esp,0x10
c0017c6d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017c71:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017c76:	85 c0                	test   eax,eax
c0017c78:	75 2e                	jne    c0017ca8 <gpFault(regs*, void*)+0x62>
c0017c7a:	83 ec 0c             	sub    esp,0xc
c0017c7d:	68 3e 2b 02 c0       	push   0xc0022b3e
c0017c82:	e8 73 ff ff ff       	call   c0017bfa <displayProgramFault(char const*)>
c0017c87:	83 c4 10             	add    esp,0x10
c0017c8a:	83 ec 0c             	sub    esp,0xc
c0017c8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c91:	e8 63 fb ff ff       	call   c00177f9 <displayDebugInfo(regs*)>
c0017c96:	83 c4 10             	add    esp,0x10
c0017c99:	83 ec 0c             	sub    esp,0xc
c0017c9c:	6a 00                	push   0x0
c0017c9e:	e8 99 ed ff ff       	call   c0016a3c <Thr::terminateFromIRQ(int)>
c0017ca3:	83 c4 10             	add    esp,0x10
c0017ca6:	eb 01                	jmp    c0017ca9 <gpFault(regs*, void*)+0x63>
c0017ca8:	90                   	nop
c0017ca9:	83 c4 1c             	add    esp,0x1c
c0017cac:	c3                   	ret    

c0017cad <pgFault(regs*, void*)>:
c0017cad:	83 ec 1c             	sub    esp,0x1c
c0017cb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cb4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017cb7:	0f 20 d0             	mov    eax,cr2
c0017cba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017cbe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cc2:	83 ec 04             	sub    esp,0x4
c0017cc5:	52                   	push   edx
c0017cc6:	50                   	push   eax
c0017cc7:	68 1c 2c 02 c0       	push   0xc0022c1c
c0017ccc:	e8 39 2c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017cd1:	83 c4 10             	add    esp,0x10
c0017cd4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017cd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0017cdb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017cde:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017ce4:	0f 20 d2             	mov    edx,cr2
c0017ce7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017ceb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017cef:	83 ec 08             	sub    esp,0x8
c0017cf2:	52                   	push   edx
c0017cf3:	50                   	push   eax
c0017cf4:	e8 81 26 ff ff       	call   c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>
c0017cf9:	83 c4 10             	add    esp,0x10
c0017cfc:	0f b6 c0             	movzx  eax,al
c0017cff:	85 c0                	test   eax,eax
c0017d01:	75 2e                	jne    c0017d31 <pgFault(regs*, void*)+0x84>
c0017d03:	83 ec 0c             	sub    esp,0xc
c0017d06:	68 57 2b 02 c0       	push   0xc0022b57
c0017d0b:	e8 ea fe ff ff       	call   c0017bfa <displayProgramFault(char const*)>
c0017d10:	83 c4 10             	add    esp,0x10
c0017d13:	83 ec 0c             	sub    esp,0xc
c0017d16:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d1a:	e8 da fa ff ff       	call   c00177f9 <displayDebugInfo(regs*)>
c0017d1f:	83 c4 10             	add    esp,0x10
c0017d22:	83 ec 0c             	sub    esp,0xc
c0017d25:	6a 00                	push   0x0
c0017d27:	e8 10 ed ff ff       	call   c0016a3c <Thr::terminateFromIRQ(int)>
c0017d2c:	83 c4 10             	add    esp,0x10
c0017d2f:	eb 01                	jmp    c0017d32 <pgFault(regs*, void*)+0x85>
c0017d31:	90                   	nop
c0017d32:	83 c4 1c             	add    esp,0x1c
c0017d35:	c3                   	ret    

c0017d36 <otherISRHandler(regs*, void*)>:
c0017d36:	83 ec 0c             	sub    esp,0xc
c0017d39:	83 ec 0c             	sub    esp,0xc
c0017d3c:	68 44 2c 02 c0       	push   0xc0022c44
c0017d41:	e8 b4 fe ff ff       	call   c0017bfa <displayProgramFault(char const*)>
c0017d46:	83 c4 10             	add    esp,0x10
c0017d49:	83 ec 0c             	sub    esp,0xc
c0017d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d50:	e8 a4 fa ff ff       	call   c00177f9 <displayDebugInfo(regs*)>
c0017d55:	83 c4 10             	add    esp,0x10
c0017d58:	83 ec 0c             	sub    esp,0xc
c0017d5b:	6a 00                	push   0x0
c0017d5d:	e8 da ec ff ff       	call   c0016a3c <Thr::terminateFromIRQ(int)>
c0017d62:	83 c4 10             	add    esp,0x10
c0017d65:	90                   	nop
c0017d66:	83 c4 0c             	add    esp,0xc
c0017d69:	c3                   	ret    

c0017d6a <opcodeFault(regs*, void*)>:
c0017d6a:	55                   	push   ebp
c0017d6b:	89 e5                	mov    ebp,esp
c0017d6d:	83 ec 08             	sub    esp,0x8
c0017d70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d73:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017d76:	83 ec 08             	sub    esp,0x8
c0017d79:	50                   	push   eax
c0017d7a:	68 62 2b 02 c0       	push   0xc0022b62
c0017d7f:	e8 86 2b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017d84:	83 c4 10             	add    esp,0x10
c0017d87:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017d8c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017d92:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017d98:	0f b6 c0             	movzx  eax,al
c0017d9b:	85 c0                	test   eax,eax
c0017d9d:	74 21                	je     c0017dc0 <opcodeFault(regs*, void*)+0x56>
c0017d9f:	83 ec 0c             	sub    esp,0xc
c0017da2:	68 6c 2c 02 c0       	push   0xc0022c6c
c0017da7:	e8 5e 2b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017dac:	83 c4 10             	add    esp,0x10
c0017daf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017db2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017db5:	8d 50 19             	lea    edx,[eax+0x19]
c0017db8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017dbb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017dbe:	eb 2b                	jmp    c0017deb <opcodeFault(regs*, void*)+0x81>
c0017dc0:	83 ec 0c             	sub    esp,0xc
c0017dc3:	68 70 2b 02 c0       	push   0xc0022b70
c0017dc8:	e8 2d fe ff ff       	call   c0017bfa <displayProgramFault(char const*)>
c0017dcd:	83 c4 10             	add    esp,0x10
c0017dd0:	83 ec 0c             	sub    esp,0xc
c0017dd3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017dd6:	e8 1e fa ff ff       	call   c00177f9 <displayDebugInfo(regs*)>
c0017ddb:	83 c4 10             	add    esp,0x10
c0017dde:	83 ec 0c             	sub    esp,0xc
c0017de1:	6a 00                	push   0x0
c0017de3:	e8 54 ec ff ff       	call   c0016a3c <Thr::terminateFromIRQ(int)>
c0017de8:	83 c4 10             	add    esp,0x10
c0017deb:	c9                   	leave  
c0017dec:	c3                   	ret    

c0017ded <i386SaveCoprocessor(void*)>:
c0017ded:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017df1:	83 c0 3f             	add    eax,0x3f
c0017df4:	83 e0 c0             	and    eax,0xffffffc0
c0017df7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017dfb:	ff 25 70 c7 02 c0    	jmp    DWORD PTR ds:0xc002c770

c0017e01 <i386LoadCoprocessor(void*)>:
c0017e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017e05:	83 c0 3f             	add    eax,0x3f
c0017e08:	83 e0 c0             	and    eax,0xffffffc0
c0017e0b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017e0f:	ff 25 6c c7 02 c0    	jmp    DWORD PTR ds:0xc002c76c

c0017e15 <x87EmulHandler(regs*, void*)>:
c0017e15:	53                   	push   ebx
c0017e16:	83 ec 08             	sub    esp,0x8
c0017e19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017e1e:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017e22:	74 10                	je     c0017e34 <x87EmulHandler(regs*, void*)+0x1f>
c0017e24:	83 ec 0c             	sub    esp,0xc
c0017e27:	68 7d 2b 02 c0       	push   0xc0022b7d
c0017e2c:	e8 d6 96 ff ff       	call   c0011507 <KePanic(char const*)>
c0017e31:	83 c4 10             	add    esp,0x10
c0017e34:	0f 20 c0             	mov    eax,cr0
c0017e37:	a8 08                	test   al,0x8
c0017e39:	74 59                	je     c0017e94 <x87EmulHandler(regs*, void*)+0x7f>
c0017e3b:	0f 06                	clts   
c0017e3d:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017e42:	85 c0                	test   eax,eax
c0017e44:	74 0e                	je     c0017e54 <x87EmulHandler(regs*, void*)+0x3f>
c0017e46:	83 ec 0c             	sub    esp,0xc
c0017e49:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017e4c:	e8 9c ff ff ff       	call   c0017ded <i386SaveCoprocessor(void*)>
c0017e51:	83 c4 10             	add    esp,0x10
c0017e54:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017e5a:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017e5e:	75 12                	jne    c0017e72 <x87EmulHandler(regs*, void*)+0x5d>
c0017e60:	83 ec 0c             	sub    esp,0xc
c0017e63:	68 40 02 00 00       	push   0x240
c0017e68:	e8 66 fc fe ff       	call   c0007ad3 <malloc>
c0017e6d:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017e70:	eb 10                	jmp    c0017e82 <x87EmulHandler(regs*, void*)+0x6d>
c0017e72:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017e77:	83 ec 0c             	sub    esp,0xc
c0017e7a:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017e7d:	e8 7f ff ff ff       	call   c0017e01 <i386LoadCoprocessor(void*)>
c0017e82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017e87:	83 c4 10             	add    esp,0x10
c0017e8a:	a3 68 c7 02 c0       	mov    ds:0xc002c768,eax
c0017e8f:	83 c4 08             	add    esp,0x8
c0017e92:	5b                   	pop    ebx
c0017e93:	c3                   	ret    
c0017e94:	83 ec 0c             	sub    esp,0xc
c0017e97:	68 91 2b 02 c0       	push   0xc0022b91
c0017e9c:	e8 69 2a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017ea1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017ea9:	83 c4 18             	add    esp,0x18
c0017eac:	5b                   	pop    ebx
c0017ead:	e9 8a eb ff ff       	jmp    c0016a3c <Thr::terminateFromIRQ(int)>

c0017eb2 <HalInitialiseCoprocessor()>:
c0017eb2:	83 ec 10             	sub    esp,0x10
c0017eb5:	6a 00                	push   0x0
c0017eb7:	68 15 7e 01 c0       	push   0xc0017e15
c0017ebc:	6a 07                	push   0x7
c0017ebe:	c7 05 68 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c768,0x0
c0017ec8:	e8 a9 4f ff ff       	call   c000ce76 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ecd:	e8 ae 70 00 00       	call   c001ef80 <avxDetect>
c0017ed2:	83 c4 10             	add    esp,0x10
c0017ed5:	85 c0                	test   eax,eax
c0017ed7:	74 1c                	je     c0017ef5 <HalInitialiseCoprocessor()+0x43>
c0017ed9:	c7 05 70 c7 02 c0 aa ef 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001efaa
c0017ee3:	c7 05 6c c7 02 c0 bb ef 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001efbb
c0017eed:	83 c4 0c             	add    esp,0xc
c0017ef0:	e9 d7 70 00 00       	jmp    c001efcc <avxInit>
c0017ef5:	e8 16 74 00 00       	call   c001f310 <absolutelyNoChanceInHell>
c0017efa:	85 c0                	test   eax,eax
c0017efc:	74 1c                	je     c0017f1a <HalInitialiseCoprocessor()+0x68>
c0017efe:	c7 05 70 c7 02 c0 28 f3 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f328
c0017f08:	c7 05 6c c7 02 c0 30 f3 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f330
c0017f12:	83 c4 0c             	add    esp,0xc
c0017f15:	e9 1e 74 00 00       	jmp    c001f338 <sseInit>
c0017f1a:	e8 37 74 00 00       	call   c001f356 <x87Detect>
c0017f1f:	85 c0                	test   eax,eax
c0017f21:	74 1c                	je     c0017f3f <HalInitialiseCoprocessor()+0x8d>
c0017f23:	c7 05 70 c7 02 c0 71 f3 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f371
c0017f2d:	c7 05 6c c7 02 c0 78 f3 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f378
c0017f37:	83 c4 0c             	add    esp,0xc
c0017f3a:	e9 40 74 00 00       	jmp    c001f37f <x87Init>
c0017f3f:	c7 05 70 c7 02 c0 c6 77 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc00177c6
c0017f49:	c7 05 6c c7 02 c0 c6 77 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc00177c6
c0017f53:	0f 20 c0             	mov    eax,cr0
c0017f56:	83 c8 04             	or     eax,0x4
c0017f59:	0f 22 c0             	mov    cr0,eax
c0017f5c:	83 c4 0c             	add    esp,0xc
c0017f5f:	c3                   	ret    

c0017f60 <HalPanic(char const*)>:
c0017f60:	53                   	push   ebx
c0017f61:	83 ec 10             	sub    esp,0x10
c0017f64:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017f68:	fa                   	cli    
c0017f69:	53                   	push   ebx
c0017f6a:	68 a7 2b 02 c0       	push   0xc0022ba7
c0017f6f:	e8 96 29 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017f74:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c0017f79:	83 c4 10             	add    esp,0x10
c0017f7c:	85 c0                	test   eax,eax
c0017f7e:	74 09                	je     c0017f89 <HalPanic(char const*)+0x29>
c0017f80:	83 ec 0c             	sub    esp,0xc
c0017f83:	53                   	push   ebx
c0017f84:	ff d0                	call   eax
c0017f86:	83 c4 10             	add    esp,0x10
c0017f89:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c0017f8e:	85 c0                	test   eax,eax
c0017f90:	0f 84 dc 00 00 00    	je     c0018072 <HalPanic(char const*)+0x112>
c0017f96:	52                   	push   edx
c0017f97:	6a 01                	push   0x1
c0017f99:	6a 0f                	push   0xf
c0017f9b:	50                   	push   eax
c0017f9c:	e8 29 06 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017fa1:	59                   	pop    ecx
c0017fa2:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0017fa8:	e8 0d 08 ff ff       	call   c00087ba <VgaText::clearScreen()>
c0017fad:	58                   	pop    eax
c0017fae:	5a                   	pop    edx
c0017faf:	68 c4 0d 02 c0       	push   0xc0020dc4
c0017fb4:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0017fba:	e8 43 06 ff ff       	call   c0008602 <VgaText::setTitle(char*)>
c0017fbf:	83 c4 0c             	add    esp,0xc
c0017fc2:	6a 01                	push   0x1
c0017fc4:	6a 0f                	push   0xf
c0017fc6:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0017fcc:	e8 f9 05 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017fd1:	59                   	pop    ecx
c0017fd2:	58                   	pop    eax
c0017fd3:	68 c0 2b 02 c0       	push   0xc0022bc0
c0017fd8:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0017fde:	e8 c9 0a ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017fe3:	83 c4 0c             	add    esp,0xc
c0017fe6:	6a 0f                	push   0xf
c0017fe8:	6a 01                	push   0x1
c0017fea:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0017ff0:	e8 d5 05 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017ff5:	58                   	pop    eax
c0017ff6:	5a                   	pop    edx
c0017ff7:	68 c9 2b 02 c0       	push   0xc0022bc9
c0017ffc:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018002:	e8 a5 0a ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0018007:	83 c4 0c             	add    esp,0xc
c001800a:	6a 01                	push   0x1
c001800c:	6a 0f                	push   0xf
c001800e:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018014:	e8 b1 05 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018019:	59                   	pop    ecx
c001801a:	58                   	pop    eax
c001801b:	68 0d 2c 02 c0       	push   0xc0022c0d
c0018020:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018026:	e8 81 0a ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001802b:	58                   	pop    eax
c001802c:	5a                   	pop    edx
c001802d:	68 d6 2b 02 c0       	push   0xc0022bd6
c0018032:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018038:	e8 6f 0a ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001803d:	59                   	pop    ecx
c001803e:	58                   	pop    eax
c001803f:	68 10 2c 02 c0       	push   0xc0022c10
c0018044:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001804a:	e8 5d 0a ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001804f:	58                   	pop    eax
c0018050:	5a                   	pop    edx
c0018051:	53                   	push   ebx
c0018052:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018058:	e8 4f 0a ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001805d:	59                   	pop    ecx
c001805e:	5b                   	pop    ebx
c001805f:	68 0d 2c 02 c0       	push   0xc0022c0d
c0018064:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001806a:	e8 3d 0a ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001806f:	83 c4 10             	add    esp,0x10
c0018072:	eb fe                	jmp    c0018072 <HalPanic(char const*)+0x112>

c0018074 <HalQueryPerformanceCounter()>:
c0018074:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018079:	31 d2                	xor    edx,edx
c001807b:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018081:	31 c0                	xor    eax,eax
c0018083:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001808a:	74 02                	je     c001808e <HalQueryPerformanceCounter()+0x1a>
c001808c:	0f 31                	rdtsc  
c001808e:	c3                   	ret    

c001808f <HalInitialise()>:
c001808f:	53                   	push   ebx
c0018090:	83 ec 08             	sub    esp,0x8
c0018093:	e8 15 50 ff ff       	call   c000d0ad <setupINTS()>
c0018098:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001809d:	80 3d e0 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbe0,0x0
c00180a4:	75 0f                	jne    c00180b5 <HalInitialise()+0x26>
c00180a6:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00180ac:	83 e2 fe             	and    edx,0xfffffffe
c00180af:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00180b5:	c6 05 60 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c760,0x0
c00180bc:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00180c2:	83 e2 fe             	and    edx,0xfffffffe
c00180c5:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00180cb:	e8 a0 02 00 00       	call   c0018370 <picOpen()>
c00180d0:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c00180d7:	74 0a                	je     c00180e3 <HalInitialise()+0x54>
c00180d9:	e8 e2 01 00 00       	call   c00182c0 <picDisable()>
c00180de:	e8 0d 68 00 00       	call   c001e8f0 <apicOpen()>
c00180e3:	50                   	push   eax
c00180e4:	bb 0f 00 00 00       	mov    ebx,0xf
c00180e9:	6a 00                	push   0x0
c00180eb:	68 36 7d 01 c0       	push   0xc0017d36
c00180f0:	6a 00                	push   0x0
c00180f2:	e8 7f 4d ff ff       	call   c000ce76 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00180f7:	83 c4 0c             	add    esp,0xc
c00180fa:	6a 00                	push   0x0
c00180fc:	68 36 7d 01 c0       	push   0xc0017d36
c0018101:	6a 01                	push   0x1
c0018103:	e8 6e 4d ff ff       	call   c000ce76 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018108:	83 c4 0c             	add    esp,0xc
c001810b:	6a 00                	push   0x0
c001810d:	68 c7 77 01 c0       	push   0xc00177c7
c0018112:	6a 02                	push   0x2
c0018114:	e8 5d 4d ff ff       	call   c000ce76 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018119:	83 c4 0c             	add    esp,0xc
c001811c:	6a 00                	push   0x0
c001811e:	68 36 7d 01 c0       	push   0xc0017d36
c0018123:	6a 03                	push   0x3
c0018125:	e8 4c 4d ff ff       	call   c000ce76 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001812a:	83 c4 0c             	add    esp,0xc
c001812d:	6a 00                	push   0x0
c001812f:	68 36 7d 01 c0       	push   0xc0017d36
c0018134:	6a 04                	push   0x4
c0018136:	e8 3b 4d ff ff       	call   c000ce76 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001813b:	83 c4 0c             	add    esp,0xc
c001813e:	6a 00                	push   0x0
c0018140:	68 36 7d 01 c0       	push   0xc0017d36
c0018145:	6a 05                	push   0x5
c0018147:	e8 2a 4d ff ff       	call   c000ce76 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001814c:	83 c4 0c             	add    esp,0xc
c001814f:	6a 00                	push   0x0
c0018151:	68 6a 7d 01 c0       	push   0xc0017d6a
c0018156:	6a 06                	push   0x6
c0018158:	e8 19 4d ff ff       	call   c000ce76 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001815d:	83 c4 0c             	add    esp,0xc
c0018160:	6a 00                	push   0x0
c0018162:	68 e0 77 01 c0       	push   0xc00177e0
c0018167:	6a 08                	push   0x8
c0018169:	e8 08 4d ff ff       	call   c000ce76 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001816e:	83 c4 0c             	add    esp,0xc
c0018171:	6a 00                	push   0x0
c0018173:	68 36 7d 01 c0       	push   0xc0017d36
c0018178:	6a 09                	push   0x9
c001817a:	e8 f7 4c ff ff       	call   c000ce76 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001817f:	83 c4 0c             	add    esp,0xc
c0018182:	6a 00                	push   0x0
c0018184:	68 36 7d 01 c0       	push   0xc0017d36
c0018189:	6a 0a                	push   0xa
c001818b:	e8 e6 4c ff ff       	call   c000ce76 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018190:	83 c4 0c             	add    esp,0xc
c0018193:	6a 00                	push   0x0
c0018195:	68 36 7d 01 c0       	push   0xc0017d36
c001819a:	6a 0b                	push   0xb
c001819c:	e8 d5 4c ff ff       	call   c000ce76 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181a1:	83 c4 0c             	add    esp,0xc
c00181a4:	6a 00                	push   0x0
c00181a6:	68 46 7c 01 c0       	push   0xc0017c46
c00181ab:	6a 0d                	push   0xd
c00181ad:	e8 c4 4c ff ff       	call   c000ce76 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181b2:	83 c4 0c             	add    esp,0xc
c00181b5:	6a 00                	push   0x0
c00181b7:	68 ad 7c 01 c0       	push   0xc0017cad
c00181bc:	6a 0e                	push   0xe
c00181be:	e8 b3 4c ff ff       	call   c000ce76 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181c3:	83 c4 10             	add    esp,0x10
c00181c6:	50                   	push   eax
c00181c7:	6a 00                	push   0x0
c00181c9:	68 36 7d 01 c0       	push   0xc0017d36
c00181ce:	53                   	push   ebx
c00181cf:	43                   	inc    ebx
c00181d0:	e8 a1 4c ff ff       	call   c000ce76 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181d5:	83 c4 10             	add    esp,0x10
c00181d8:	83 fb 1e             	cmp    ebx,0x1e
c00181db:	75 e9                	jne    c00181c6 <HalInitialise()+0x137>
c00181dd:	50                   	push   eax
c00181de:	6a 00                	push   0x0
c00181e0:	68 9e 29 01 c0       	push   0xc001299e
c00181e5:	6a 60                	push   0x60
c00181e7:	e8 8a 4c ff ff       	call   c000ce76 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181ec:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00181f1:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00181fb:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0018202:	e8 cc f8 fe ff       	call   c0007ad3 <malloc>
c0018207:	89 04 24             	mov    DWORD PTR [esp],eax
c001820a:	89 c3                	mov    ebx,eax
c001820c:	e8 37 09 00 00       	call   c0018b48 <RTC::RTC()>
c0018211:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001821b:	5a                   	pop    edx
c001821c:	59                   	pop    ecx
c001821d:	53                   	push   ebx
c001821e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018224:	e8 17 47 ff ff       	call   c000c940 <Device::addChild(Device*)>
c0018229:	8b 03                	mov    eax,DWORD PTR [ebx]
c001822b:	6a 00                	push   0x0
c001822d:	6a 00                	push   0x0
c001822f:	6a 00                	push   0x0
c0018231:	53                   	push   ebx
c0018232:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018235:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001823a:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0018240:	83 c4 28             	add    esp,0x28
c0018243:	5b                   	pop    ebx
c0018244:	c3                   	ret    

c0018245 <HalMakeBeep(int)>:
c0018245:	53                   	push   ebx
c0018246:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001824a:	85 db                	test   ebx,ebx
c001824c:	75 07                	jne    c0018255 <HalMakeBeep(int)+0x10>
c001824e:	e4 61                	in     al,0x61
c0018250:	83 e0 fc             	and    eax,0xfffffffc
c0018253:	eb 26                	jmp    c001827b <HalMakeBeep(int)+0x36>
c0018255:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001825a:	99                   	cdq    
c001825b:	f7 fb                	idiv   ebx
c001825d:	89 c1                	mov    ecx,eax
c001825f:	b0 b6                	mov    al,0xb6
c0018261:	e6 43                	out    0x43,al
c0018263:	88 c8                	mov    al,cl
c0018265:	e6 42                	out    0x42,al
c0018267:	89 c8                	mov    eax,ecx
c0018269:	c1 e8 08             	shr    eax,0x8
c001826c:	e6 42                	out    0x42,al
c001826e:	e4 61                	in     al,0x61
c0018270:	89 c2                	mov    edx,eax
c0018272:	83 ca 03             	or     edx,0x3
c0018275:	38 d0                	cmp    al,dl
c0018277:	74 04                	je     c001827d <HalMakeBeep(int)+0x38>
c0018279:	88 d0                	mov    al,dl
c001827b:	e6 61                	out    0x61,al
c001827d:	5b                   	pop    ebx
c001827e:	c3                   	ret    

c001827f <HalGetRand()>:
c001827f:	31 c0                	xor    eax,eax
c0018281:	c3                   	ret    

c0018282 <HalEndOfInterrupt(int)>:
c0018282:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c0018289:	74 23                	je     c00182ae <HalEndOfInterrupt(int)+0x2c>
c001828b:	83 ec 14             	sub    esp,0x14
c001828e:	6a 1b                	push   0x1b
c0018290:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018296:	e8 47 ee fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c001829b:	25 00 f0 ff ff       	and    eax,0xfffff000
c00182a0:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00182aa:	83 c4 1c             	add    esp,0x1c
c00182ad:	c3                   	ret    
c00182ae:	e9 41 02 00 00       	jmp    c00184f4 <picEOI(int)>

c00182b3 <HalRestart()>:
c00182b3:	c3                   	ret    

c00182b4 <HalShutdown()>:
c00182b4:	c3                   	ret    

c00182b5 <HalSleep()>:
c00182b5:	c3                   	ret    
c00182b6:	66 90                	xchg   ax,ax

c00182b8 <picIoWait()>:
c00182b8:	eb 00                	jmp    c00182ba <picIoWait()+0x2>
c00182ba:	eb 00                	jmp    c00182bc <picIoWait()+0x4>
c00182bc:	90                   	nop
c00182bd:	c3                   	ret    
c00182be:	66 90                	xchg   ax,ax

c00182c0 <picDisable()>:
c00182c0:	83 ec 10             	sub    esp,0x10
c00182c3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00182ca:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00182cf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00182d3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00182d8:	ee                   	out    dx,al
c00182d9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00182e0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00182e5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00182e9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00182ee:	ee                   	out    dx,al
c00182ef:	90                   	nop
c00182f0:	83 c4 10             	add    esp,0x10
c00182f3:	c3                   	ret    

c00182f4 <picGetIRQReg(int)>:
c00182f4:	83 ec 10             	sub    esp,0x10
c00182f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00182fb:	0f b6 c0             	movzx  eax,al
c00182fe:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018305:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0018309:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001830d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018312:	ee                   	out    dx,al
c0018313:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018317:	0f b6 c0             	movzx  eax,al
c001831a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018321:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018325:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018329:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001832e:	ee                   	out    dx,al
c001832f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0018336:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001833b:	89 c2                	mov    edx,eax
c001833d:	ec                   	in     al,dx
c001833e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018342:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018346:	0f b6 c0             	movzx  eax,al
c0018349:	c1 e0 08             	shl    eax,0x8
c001834c:	89 c1                	mov    ecx,eax
c001834e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018355:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001835a:	89 c2                	mov    edx,eax
c001835c:	ec                   	in     al,dx
c001835d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018361:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018365:	0f b6 c0             	movzx  eax,al
c0018368:	09 c8                	or     eax,ecx
c001836a:	83 c4 10             	add    esp,0x10
c001836d:	c3                   	ret    
c001836e:	66 90                	xchg   ax,ax

c0018370 <picOpen()>:
c0018370:	83 ec 50             	sub    esp,0x50
c0018373:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001837a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001837f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018383:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018387:	ee                   	out    dx,al
c0018388:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001838f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018394:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018398:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001839c:	ee                   	out    dx,al
c001839d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00183a5:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00183ad:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00183b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00183b8:	89 c2                	mov    edx,eax
c00183ba:	ec                   	in     al,dx
c00183bb:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00183bf:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00183c3:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00183c7:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00183ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00183d2:	89 c2                	mov    edx,eax
c00183d4:	ec                   	in     al,dx
c00183d5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00183d9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00183dd:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00183e1:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00183e8:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00183ed:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00183f1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00183f5:	ee                   	out    dx,al
c00183f6:	e8 bd fe ff ff       	call   c00182b8 <picIoWait()>
c00183fb:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0018402:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0018407:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001840b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001840f:	ee                   	out    dx,al
c0018410:	e8 a3 fe ff ff       	call   c00182b8 <picIoWait()>
c0018415:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018419:	0f b6 c0             	movzx  eax,al
c001841c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0018423:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0018427:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001842b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001842f:	ee                   	out    dx,al
c0018430:	e8 83 fe ff ff       	call   c00182b8 <picIoWait()>
c0018435:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018439:	0f b6 c0             	movzx  eax,al
c001843c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018443:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0018447:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001844b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001844f:	ee                   	out    dx,al
c0018450:	e8 63 fe ff ff       	call   c00182b8 <picIoWait()>
c0018455:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001845c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018461:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018465:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018469:	ee                   	out    dx,al
c001846a:	e8 49 fe ff ff       	call   c00182b8 <picIoWait()>
c001846f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0018476:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001847b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001847f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018483:	ee                   	out    dx,al
c0018484:	e8 2f fe ff ff       	call   c00182b8 <picIoWait()>
c0018489:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0018490:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018495:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0018499:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001849d:	ee                   	out    dx,al
c001849e:	e8 15 fe ff ff       	call   c00182b8 <picIoWait()>
c00184a3:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00184aa:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00184af:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00184b3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00184b7:	ee                   	out    dx,al
c00184b8:	e8 fb fd ff ff       	call   c00182b8 <picIoWait()>
c00184bd:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00184c2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00184c9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00184cd:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00184d1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00184d5:	ee                   	out    dx,al
c00184d6:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00184db:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00184e2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00184e6:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00184ea:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00184ee:	ee                   	out    dx,al
c00184ef:	90                   	nop
c00184f0:	83 c4 50             	add    esp,0x50
c00184f3:	c3                   	ret    

c00184f4 <picEOI(int)>:
c00184f4:	83 ec 10             	sub    esp,0x10
c00184f7:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00184fc:	75 1e                	jne    c001851c <picEOI(int)+0x28>
c00184fe:	6a 0b                	push   0xb
c0018500:	e8 ef fd ff ff       	call   c00182f4 <picGetIRQReg(int)>
c0018505:	83 c4 04             	add    esp,0x4
c0018508:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001850d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018512:	25 80 00 00 00       	and    eax,0x80
c0018517:	74 73                	je     c001858c <picEOI(int)+0x98>
c0018519:	8d 76 00             	lea    esi,[esi+0x0]
c001851c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018521:	75 31                	jne    c0018554 <picEOI(int)+0x60>
c0018523:	6a 0b                	push   0xb
c0018525:	e8 ca fd ff ff       	call   c00182f4 <picGetIRQReg(int)>
c001852a:	83 c4 04             	add    esp,0x4
c001852d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018532:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018536:	98                   	cwde   
c0018537:	85 c0                	test   eax,eax
c0018539:	78 19                	js     c0018554 <picEOI(int)+0x60>
c001853b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018542:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018547:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001854b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018550:	ee                   	out    dx,al
c0018551:	eb 3d                	jmp    c0018590 <picEOI(int)+0x9c>
c0018553:	90                   	nop
c0018554:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018559:	7e 19                	jle    c0018574 <picEOI(int)+0x80>
c001855b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018562:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0018567:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001856b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018570:	ee                   	out    dx,al
c0018571:	8d 76 00             	lea    esi,[esi+0x0]
c0018574:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001857b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018580:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018584:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018589:	ee                   	out    dx,al
c001858a:	eb 04                	jmp    c0018590 <picEOI(int)+0x9c>
c001858c:	90                   	nop
c001858d:	8d 76 00             	lea    esi,[esi+0x0]
c0018590:	83 c4 10             	add    esp,0x10
c0018593:	c3                   	ret    

c0018594 <RTC::open(int, int, void*)>:
c0018594:	31 c0                	xor    eax,eax
c0018596:	c3                   	ret    
c0018597:	90                   	nop

c0018598 <RTC::close(int, int, void*)>:
c0018598:	31 c0                	xor    eax,eax
c001859a:	c3                   	ret    
c001859b:	90                   	nop

c001859c <RTC::timeInSecondsUTC()>:
c001859c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00185a0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00185a6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00185ac:	c3                   	ret    
c00185ad:	90                   	nop

c00185ae <RTC::timeInDatetimeUTC()>:
c00185ae:	53                   	push   ebx
c00185af:	83 ec 14             	sub    esp,0x14
c00185b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00185b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00185ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00185bc:	50                   	push   eax
c00185bd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00185c0:	83 c4 0c             	add    esp,0xc
c00185c3:	52                   	push   edx
c00185c4:	50                   	push   eax
c00185c5:	53                   	push   ebx
c00185c6:	e8 e9 40 ff ff       	call   c000c6b4 <secondsToDatetime(unsigned long long)>
c00185cb:	89 d8                	mov    eax,ebx
c00185cd:	83 c4 14             	add    esp,0x14
c00185d0:	5b                   	pop    ebx
c00185d1:	c2 04 00             	ret    0x4

c00185d4 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00185d4:	56                   	push   esi
c00185d5:	53                   	push   ebx
c00185d6:	83 ec 14             	sub    esp,0x14
c00185d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00185dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00185df:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00185e2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00185e6:	52                   	push   edx
c00185e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00185eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00185ef:	50                   	push   eax
c00185f0:	e8 bf 40 ff ff       	call   c000c6b4 <secondsToDatetime(unsigned long long)>
c00185f5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00185f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00185fd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018601:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018605:	89 f0                	mov    eax,esi
c0018607:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001860b:	83 c4 20             	add    esp,0x20
c001860e:	5b                   	pop    ebx
c001860f:	5e                   	pop    esi
c0018610:	ff e0                	jmp    eax

c0018612 <RTC::~RTC()>:
c0018612:	83 ec 0c             	sub    esp,0xc
c0018615:	ba ac 2c 02 c0       	mov    edx,0xc0022cac
c001861a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001861e:	89 10                	mov    DWORD PTR [eax],edx
c0018620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018624:	83 ec 0c             	sub    esp,0xc
c0018627:	50                   	push   eax
c0018628:	e8 13 3e ff ff       	call   c000c440 <Clock::~Clock()>
c001862d:	83 c4 10             	add    esp,0x10
c0018630:	90                   	nop
c0018631:	83 c4 0c             	add    esp,0xc
c0018634:	c3                   	ret    
c0018635:	90                   	nop

c0018636 <RTC::~RTC()>:
c0018636:	83 ec 0c             	sub    esp,0xc
c0018639:	83 ec 0c             	sub    esp,0xc
c001863c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018640:	e8 cd ff ff ff       	call   c0018612 <RTC::~RTC()>
c0018645:	83 c4 10             	add    esp,0x10
c0018648:	83 ec 08             	sub    esp,0x8
c001864b:	68 60 01 00 00       	push   0x160
c0018650:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018654:	e8 b3 21 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018659:	83 c4 10             	add    esp,0x10
c001865c:	83 c4 0c             	add    esp,0xc
c001865f:	c3                   	ret    

c0018660 <RTC::get_update_in_progress_flag()>:
c0018660:	83 ec 14             	sub    esp,0x14
c0018663:	6a 0a                	push   0xa
c0018665:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001866b:	e8 2a eb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018670:	83 c4 1c             	add    esp,0x1c
c0018673:	0f b6 c0             	movzx  eax,al
c0018676:	c1 e8 07             	shr    eax,0x7
c0018679:	c3                   	ret    

c001867a <RTC::completeRTCRefresh()>:
c001867a:	55                   	push   ebp
c001867b:	57                   	push   edi
c001867c:	56                   	push   esi
c001867d:	53                   	push   ebx
c001867e:	83 ec 3c             	sub    esp,0x3c
c0018681:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c0018687:	83 ec 0c             	sub    esp,0xc
c001868a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001868e:	e8 cd ff ff ff       	call   c0018660 <RTC::get_update_in_progress_flag()>
c0018693:	83 c4 10             	add    esp,0x10
c0018696:	84 c0                	test   al,al
c0018698:	74 0e                	je     c00186a8 <RTC::completeRTCRefresh()+0x2e>
c001869a:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00186a0:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c00186a6:	73 df                	jae    c0018687 <RTC::completeRTCRefresh()+0xd>
c00186a8:	50                   	push   eax
c00186a9:	50                   	push   eax
c00186aa:	6a 00                	push   0x0
c00186ac:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00186b2:	e8 e3 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00186b7:	89 c7                	mov    edi,eax
c00186b9:	58                   	pop    eax
c00186ba:	5a                   	pop    edx
c00186bb:	6a 02                	push   0x2
c00186bd:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00186c3:	e8 d2 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00186c8:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00186cc:	59                   	pop    ecx
c00186cd:	5b                   	pop    ebx
c00186ce:	6a 04                	push   0x4
c00186d0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00186d6:	e8 bf ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00186db:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00186df:	5e                   	pop    esi
c00186e0:	5d                   	pop    ebp
c00186e1:	6a 07                	push   0x7
c00186e3:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00186e9:	e8 ac ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00186ee:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00186f2:	58                   	pop    eax
c00186f3:	5a                   	pop    edx
c00186f4:	6a 08                	push   0x8
c00186f6:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00186fc:	e8 99 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018701:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018705:	59                   	pop    ecx
c0018706:	5b                   	pop    ebx
c0018707:	6a 09                	push   0x9
c0018709:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001870f:	e8 86 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018714:	0f b6 c0             	movzx  eax,al
c0018717:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001871b:	83 c4 10             	add    esp,0x10
c001871e:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c0018724:	83 ec 0c             	sub    esp,0xc
c0018727:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001872b:	e8 30 ff ff ff       	call   c0018660 <RTC::get_update_in_progress_flag()>
c0018730:	83 c4 10             	add    esp,0x10
c0018733:	84 c0                	test   al,al
c0018735:	74 0e                	je     c0018745 <RTC::completeRTCRefresh()+0xcb>
c0018737:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001873d:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c0018743:	73 df                	jae    c0018724 <RTC::completeRTCRefresh()+0xaa>
c0018745:	51                   	push   ecx
c0018746:	51                   	push   ecx
c0018747:	6a 00                	push   0x0
c0018749:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001874f:	e8 46 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018754:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018758:	5b                   	pop    ebx
c0018759:	5e                   	pop    esi
c001875a:	6a 02                	push   0x2
c001875c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018762:	e8 33 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018767:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001876b:	5d                   	pop    ebp
c001876c:	58                   	pop    eax
c001876d:	6a 04                	push   0x4
c001876f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018775:	e8 20 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001877a:	88 c3                	mov    bl,al
c001877c:	58                   	pop    eax
c001877d:	5a                   	pop    edx
c001877e:	6a 07                	push   0x7
c0018780:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018786:	e8 0f ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001878b:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001878f:	59                   	pop    ecx
c0018790:	5e                   	pop    esi
c0018791:	6a 08                	push   0x8
c0018793:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018799:	e8 fc e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001879e:	5d                   	pop    ebp
c001879f:	89 c6                	mov    esi,eax
c00187a1:	58                   	pop    eax
c00187a2:	6a 09                	push   0x9
c00187a4:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187aa:	e8 eb e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00187af:	89 f9                	mov    ecx,edi
c00187b1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00187b5:	83 c4 10             	add    esp,0x10
c00187b8:	0f b6 e8             	movzx  ebp,al
c00187bb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00187c0:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00187c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00187c8:	74 27                	je     c00187f1 <RTC::completeRTCRefresh()+0x177>
c00187ca:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00187ce:	89 f0                	mov    eax,esi
c00187d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00187d4:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00187d8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00187dc:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00187e0:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00187e4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00187e8:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00187ec:	e9 2d ff ff ff       	jmp    c001871e <RTC::completeRTCRefresh()+0xa4>
c00187f1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00187f6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00187fa:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00187fe:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c0018802:	75 c6                	jne    c00187ca <RTC::completeRTCRefresh()+0x150>
c0018804:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0018809:	89 f1                	mov    ecx,esi
c001880b:	0f b6 fb             	movzx  edi,bl
c001880e:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0018812:	0f b6 c9             	movzx  ecx,cl
c0018815:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0018819:	89 f1                	mov    ecx,esi
c001881b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001881f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018823:	0f 94 c2             	sete   dl
c0018826:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001882a:	0f 94 c0             	sete   al
c001882d:	21 d0                	and    eax,edx
c001882f:	31 d2                	xor    edx,edx
c0018831:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018835:	0f 94 c2             	sete   dl
c0018838:	85 c2                	test   edx,eax
c001883a:	74 8e                	je     c00187ca <RTC::completeRTCRefresh()+0x150>
c001883c:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0018840:	75 88                	jne    c00187ca <RTC::completeRTCRefresh()+0x150>
c0018842:	52                   	push   edx
c0018843:	52                   	push   edx
c0018844:	6a 0b                	push   0xb
c0018846:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001884c:	e8 49 e9 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018851:	83 c4 10             	add    esp,0x10
c0018854:	a8 04                	test   al,0x4
c0018856:	75 7a                	jne    c00188d2 <RTC::completeRTCRefresh()+0x258>
c0018858:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001885c:	c1 ef 04             	shr    edi,0x4
c001885f:	83 e6 0f             	and    esi,0xf
c0018862:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018866:	c1 ed 04             	shr    ebp,0x4
c0018869:	6b ed 0a             	imul   ebp,ebp,0xa
c001886c:	c1 ea 04             	shr    edx,0x4
c001886f:	6b d2 0a             	imul   edx,edx,0xa
c0018872:	83 e1 0f             	and    ecx,0xf
c0018875:	01 d1                	add    ecx,edx
c0018877:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001887b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001887f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018883:	c1 ea 04             	shr    edx,0x4
c0018886:	6b d2 0a             	imul   edx,edx,0xa
c0018889:	83 e1 0f             	and    ecx,0xf
c001888c:	01 d1                	add    ecx,edx
c001888e:	89 fa                	mov    edx,edi
c0018890:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018894:	83 e2 07             	and    edx,0x7
c0018897:	89 d9                	mov    ecx,ebx
c0018899:	6b d2 0a             	imul   edx,edx,0xa
c001889c:	83 e1 0f             	and    ecx,0xf
c001889f:	83 e3 80             	and    ebx,0xffffff80
c00188a2:	01 d1                	add    ecx,edx
c00188a4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00188a8:	09 cb                	or     ebx,ecx
c00188aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00188ae:	c1 ea 04             	shr    edx,0x4
c00188b1:	6b d2 0a             	imul   edx,edx,0xa
c00188b4:	83 e1 0f             	and    ecx,0xf
c00188b7:	01 d1                	add    ecx,edx
c00188b9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00188bd:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00188c1:	c1 ea 04             	shr    edx,0x4
c00188c4:	6b d2 0a             	imul   edx,edx,0xa
c00188c7:	01 d6                	add    esi,edx
c00188c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00188cd:	83 e2 0f             	and    edx,0xf
c00188d0:	01 d5                	add    ebp,edx
c00188d2:	a8 02                	test   al,0x2
c00188d4:	75 15                	jne    c00188eb <RTC::completeRTCRefresh()+0x271>
c00188d6:	f6 c3 80             	test   bl,0x80
c00188d9:	74 10                	je     c00188eb <RTC::completeRTCRefresh()+0x271>
c00188db:	83 e3 7f             	and    ebx,0x7f
c00188de:	b9 18 00 00 00       	mov    ecx,0x18
c00188e3:	8d 43 0c             	lea    eax,[ebx+0xc]
c00188e6:	99                   	cdq    
c00188e7:	f7 f9                	idiv   ecx
c00188e9:	88 d3                	mov    bl,dl
c00188eb:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c00188f1:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00188f7:	77 06                	ja     c00188ff <RTC::completeRTCRefresh()+0x285>
c00188f9:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00188ff:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018904:	31 c9                	xor    ecx,ecx
c0018906:	31 d2                	xor    edx,edx
c0018908:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001890c:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0018910:	89 cd                	mov    ebp,ecx
c0018912:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0018916:	c1 e7 10             	shl    edi,0x10
c0018919:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001891f:	c1 e0 10             	shl    eax,0x10
c0018922:	09 c5                	or     ebp,eax
c0018924:	89 e9                	mov    ecx,ebp
c0018926:	0f b7 c2             	movzx  eax,dx
c0018929:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001892d:	09 f8                	or     eax,edi
c001892f:	89 c2                	mov    edx,eax
c0018931:	50                   	push   eax
c0018932:	50                   	push   eax
c0018933:	88 d9                	mov    cl,bl
c0018935:	51                   	push   ecx
c0018936:	52                   	push   edx
c0018937:	e8 f3 3b ff ff       	call   c000c52f <datetimeToSeconds(datetime_t)>
c001893c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018940:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018946:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001894c:	83 c4 4c             	add    esp,0x4c
c001894f:	5b                   	pop    ebx
c0018950:	5e                   	pop    esi
c0018951:	5f                   	pop    edi
c0018952:	5d                   	pop    ebp
c0018953:	c3                   	ret    

c0018954 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0018954:	55                   	push   ebp
c0018955:	57                   	push   edi
c0018956:	56                   	push   esi
c0018957:	53                   	push   ebx
c0018958:	83 ec 30             	sub    esp,0x30
c001895b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001895f:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018963:	6a 00                	push   0x0
c0018965:	6a 00                	push   0x0
c0018967:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001896d:	e8 40 e9 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018972:	83 c4 0c             	add    esp,0xc
c0018975:	6a 00                	push   0x0
c0018977:	6a 02                	push   0x2
c0018979:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001897f:	e8 2e e9 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018984:	89 f8                	mov    eax,edi
c0018986:	89 f9                	mov    ecx,edi
c0018988:	0f b6 c4             	movzx  eax,ah
c001898b:	31 d2                	xor    edx,edx
c001898d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018991:	c1 e9 10             	shr    ecx,0x10
c0018994:	89 f0                	mov    eax,esi
c0018996:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001899a:	89 f0                	mov    eax,esi
c001899c:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c00189a0:	0f b6 c4             	movzx  eax,ah
c00189a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00189a7:	89 f0                	mov    eax,esi
c00189a9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00189ad:	c1 e8 10             	shr    eax,0x10
c00189b0:	b9 64 00 00 00       	mov    ecx,0x64
c00189b5:	f7 f1                	div    ecx
c00189b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00189bb:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00189bf:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00189c3:	59                   	pop    ecx
c00189c4:	5b                   	pop    ebx
c00189c5:	89 fb                	mov    ebx,edi
c00189c7:	6a 0b                	push   0xb
c00189c9:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00189cf:	e8 c6 e7 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00189d4:	83 c4 10             	add    esp,0x10
c00189d7:	a8 04                	test   al,0x4
c00189d9:	89 c5                	mov    ebp,eax
c00189db:	75 6e                	jne    c0018a4b <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c00189dd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00189e1:	31 d2                	xor    edx,edx
c00189e3:	0f b6 c1             	movzx  eax,cl
c00189e6:	b9 0a 00 00 00       	mov    ecx,0xa
c00189eb:	f7 f1                	div    ecx
c00189ed:	c1 e0 04             	shl    eax,0x4
c00189f0:	09 d0                	or     eax,edx
c00189f2:	31 d2                	xor    edx,edx
c00189f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00189f8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00189fd:	f7 f1                	div    ecx
c00189ff:	c1 e0 04             	shl    eax,0x4
c0018a02:	09 d0                	or     eax,edx
c0018a04:	31 d2                	xor    edx,edx
c0018a06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018a0a:	0f b6 c3             	movzx  eax,bl
c0018a0d:	f7 f1                	div    ecx
c0018a0f:	c1 e0 04             	shl    eax,0x4
c0018a12:	09 d0                	or     eax,edx
c0018a14:	31 d2                	xor    edx,edx
c0018a16:	89 c3                	mov    ebx,eax
c0018a18:	89 f0                	mov    eax,esi
c0018a1a:	0f b6 c0             	movzx  eax,al
c0018a1d:	f7 f1                	div    ecx
c0018a1f:	c1 e0 04             	shl    eax,0x4
c0018a22:	09 d0                	or     eax,edx
c0018a24:	31 d2                	xor    edx,edx
c0018a26:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018a2a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a2f:	f7 f1                	div    ecx
c0018a31:	c1 e0 04             	shl    eax,0x4
c0018a34:	09 d0                	or     eax,edx
c0018a36:	31 d2                	xor    edx,edx
c0018a38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018a3c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a40:	f7 f1                	div    ecx
c0018a42:	c1 e0 04             	shl    eax,0x4
c0018a45:	09 d0                	or     eax,edx
c0018a47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018a4b:	83 e5 02             	and    ebp,0x2
c0018a4e:	75 1e                	jne    c0018a6e <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018a50:	0f b6 c3             	movzx  eax,bl
c0018a53:	83 f8 0b             	cmp    eax,0xb
c0018a56:	76 10                	jbe    c0018a68 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018a58:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018a5b:	84 d2                	test   dl,dl
c0018a5d:	88 d3                	mov    bl,dl
c0018a5f:	75 02                	jne    c0018a63 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018a61:	b3 0c                	mov    bl,0xc
c0018a63:	83 cb 80             	or     ebx,0xffffff80
c0018a66:	eb 06                	jmp    c0018a6e <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018a68:	85 c0                	test   eax,eax
c0018a6a:	75 02                	jne    c0018a6e <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018a6c:	b3 0c                	mov    bl,0xc
c0018a6e:	50                   	push   eax
c0018a6f:	0f b6 db             	movzx  ebx,bl
c0018a72:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018a77:	52                   	push   edx
c0018a78:	6a 00                	push   0x0
c0018a7a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a80:	e8 2d e8 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018a85:	83 c4 0c             	add    esp,0xc
c0018a88:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a8d:	50                   	push   eax
c0018a8e:	6a 02                	push   0x2
c0018a90:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a96:	e8 17 e8 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018a9b:	83 c4 0c             	add    esp,0xc
c0018a9e:	53                   	push   ebx
c0018a9f:	6a 04                	push   0x4
c0018aa1:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018aa7:	e8 06 e8 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018aac:	83 c4 0c             	add    esp,0xc
c0018aaf:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018ab4:	52                   	push   edx
c0018ab5:	6a 07                	push   0x7
c0018ab7:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018abd:	e8 f0 e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018ac2:	83 c4 0c             	add    esp,0xc
c0018ac5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018aca:	50                   	push   eax
c0018acb:	6a 08                	push   0x8
c0018acd:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018ad3:	e8 da e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018ad8:	83 c4 0c             	add    esp,0xc
c0018adb:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018ae0:	55                   	push   ebp
c0018ae1:	6a 09                	push   0x9
c0018ae3:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018ae9:	e8 c4 e7 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018aee:	5a                   	pop    edx
c0018aef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018af3:	e8 82 fb ff ff       	call   c001867a <RTC::completeRTCRefresh()>
c0018af8:	83 c4 3c             	add    esp,0x3c
c0018afb:	b0 01                	mov    al,0x1
c0018afd:	5b                   	pop    ebx
c0018afe:	5e                   	pop    esi
c0018aff:	5f                   	pop    edi
c0018b00:	5d                   	pop    ebp
c0018b01:	c3                   	ret    

c0018b02 <rtcIRQHandler(regs*, void*)>:
c0018b02:	53                   	push   ebx
c0018b03:	83 ec 10             	sub    esp,0x10
c0018b06:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018b0a:	6a 0c                	push   0xc
c0018b0c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b12:	e8 83 e6 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018b17:	83 c4 10             	add    esp,0x10
c0018b1a:	a8 80                	test   al,0x80
c0018b1c:	74 24                	je     c0018b42 <rtcIRQHandler(regs*, void*)+0x40>
c0018b1e:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018b25:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018b2c:	66 ff 05 78 c7 02 c0 	inc    WORD PTR ds:0xc002c778
c0018b33:	75 0d                	jne    c0018b42 <rtcIRQHandler(regs*, void*)+0x40>
c0018b35:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018b39:	83 c4 08             	add    esp,0x8
c0018b3c:	5b                   	pop    ebx
c0018b3d:	e9 38 fb ff ff       	jmp    c001867a <RTC::completeRTCRefresh()>
c0018b42:	83 c4 08             	add    esp,0x8
c0018b45:	5b                   	pop    ebx
c0018b46:	c3                   	ret    
c0018b47:	90                   	nop

c0018b48 <RTC::RTC()>:
c0018b48:	83 ec 1c             	sub    esp,0x1c
c0018b4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b4f:	83 ec 08             	sub    esp,0x8
c0018b52:	68 8f 2c 02 c0       	push   0xc0022c8f
c0018b57:	50                   	push   eax
c0018b58:	e8 ad 38 ff ff       	call   c000c40a <Clock::Clock(char const*)>
c0018b5d:	83 c4 10             	add    esp,0x10
c0018b60:	ba ac 2c 02 c0       	mov    edx,0xc0022cac
c0018b65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b69:	89 10                	mov    DWORD PTR [eax],edx
c0018b6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b6f:	83 ec 0c             	sub    esp,0xc
c0018b72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018b76:	6a 01                	push   0x1
c0018b78:	68 02 8b 01 c0       	push   0xc0018b02
c0018b7d:	6a 08                	push   0x8
c0018b7f:	50                   	push   eax
c0018b80:	e8 67 3d ff ff       	call   c000c8ec <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018b85:	83 c4 20             	add    esp,0x20
c0018b88:	89 c2                	mov    edx,eax
c0018b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b8e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018b94:	fa                   	cli    
c0018b95:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018b9a:	83 c0 01             	add    eax,0x1
c0018b9d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018ba2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018ba7:	83 ec 08             	sub    esp,0x8
c0018baa:	6a 0b                	push   0xb
c0018bac:	50                   	push   eax
c0018bad:	e8 e8 e5 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018bb2:	83 c4 10             	add    esp,0x10
c0018bb5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018bb9:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018bbe:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018bc2:	83 ca 10             	or     edx,0x10
c0018bc5:	0f b6 d2             	movzx  edx,dl
c0018bc8:	83 ec 04             	sub    esp,0x4
c0018bcb:	52                   	push   edx
c0018bcc:	6a 0b                	push   0xb
c0018bce:	50                   	push   eax
c0018bcf:	e8 de e6 fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bd4:	83 c4 10             	add    esp,0x10
c0018bd7:	83 ec 0c             	sub    esp,0xc
c0018bda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018bde:	e8 97 fa ff ff       	call   c001867a <RTC::completeRTCRefresh()>
c0018be3:	83 c4 10             	add    esp,0x10
c0018be6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018beb:	83 e8 01             	sub    eax,0x1
c0018bee:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018bf3:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018bf8:	85 c0                	test   eax,eax
c0018bfa:	75 01                	jne    c0018bfd <RTC::RTC()+0xb5>
c0018bfc:	fb                   	sti    
c0018bfd:	90                   	nop
c0018bfe:	83 c4 1c             	add    esp,0x1c
c0018c01:	c3                   	ret    
c0018c02:	66 90                	xchg   ax,ax

c0018c04 <HalConsoleScroll(int, int)>:
c0018c04:	83 ec 10             	sub    esp,0x10
c0018c07:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018c0f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018c17:	90                   	nop
c0018c18:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018c1d:	0f 8f e1 00 00 00    	jg     c0018d04 <HalConsoleScroll(int, int)+0x100>
c0018c23:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018c2b:	90                   	nop
c0018c2c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018c34:	0f 8f be 00 00 00    	jg     c0018cf8 <HalConsoleScroll(int, int)+0xf4>
c0018c3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c3e:	89 d0                	mov    eax,edx
c0018c40:	c1 e0 02             	shl    eax,0x2
c0018c43:	01 d0                	add    eax,edx
c0018c45:	c1 e0 05             	shl    eax,0x5
c0018c48:	89 c2                	mov    edx,eax
c0018c4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c4e:	01 d0                	add    eax,edx
c0018c50:	89 c2                	mov    edx,eax
c0018c52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018c56:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018c59:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c5d:	89 d0                	mov    eax,edx
c0018c5f:	c1 e0 02             	shl    eax,0x2
c0018c62:	01 d0                	add    eax,edx
c0018c64:	c1 e0 05             	shl    eax,0x5
c0018c67:	89 c2                	mov    edx,eax
c0018c69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c6d:	01 d0                	add    eax,edx
c0018c6f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018c75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018c79:	01 d0                	add    eax,edx
c0018c7b:	8a 11                	mov    dl,BYTE PTR [ecx]
c0018c7d:	88 10                	mov    BYTE PTR [eax],dl
c0018c7f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018c84:	75 66                	jne    c0018cec <HalConsoleScroll(int, int)+0xe8>
c0018c86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c8a:	83 e0 01             	and    eax,0x1
c0018c8d:	74 39                	je     c0018cc8 <HalConsoleScroll(int, int)+0xc4>
c0018c8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c93:	83 e0 0f             	and    eax,0xf
c0018c96:	88 c2                	mov    dl,al
c0018c98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c9c:	c1 e0 04             	shl    eax,0x4
c0018c9f:	09 d0                	or     eax,edx
c0018ca1:	88 c1                	mov    cl,al
c0018ca3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018ca7:	89 d0                	mov    eax,edx
c0018ca9:	c1 e0 02             	shl    eax,0x2
c0018cac:	01 d0                	add    eax,edx
c0018cae:	c1 e0 05             	shl    eax,0x5
c0018cb1:	89 c2                	mov    edx,eax
c0018cb3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018cb7:	01 d0                	add    eax,edx
c0018cb9:	89 c2                	mov    edx,eax
c0018cbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018cbf:	01 d0                	add    eax,edx
c0018cc1:	88 ca                	mov    dl,cl
c0018cc3:	88 10                	mov    BYTE PTR [eax],dl
c0018cc5:	eb 25                	jmp    c0018cec <HalConsoleScroll(int, int)+0xe8>
c0018cc7:	90                   	nop
c0018cc8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018ccc:	89 d0                	mov    eax,edx
c0018cce:	c1 e0 02             	shl    eax,0x2
c0018cd1:	01 d0                	add    eax,edx
c0018cd3:	c1 e0 05             	shl    eax,0x5
c0018cd6:	89 c2                	mov    edx,eax
c0018cd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018cdc:	01 d0                	add    eax,edx
c0018cde:	89 c2                	mov    edx,eax
c0018ce0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ce4:	01 d0                	add    eax,edx
c0018ce6:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0018cec:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018cf1:	e9 36 ff ff ff       	jmp    c0018c2c <HalConsoleScroll(int, int)+0x28>
c0018cf6:	66 90                	xchg   ax,ax
c0018cf8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018cfd:	e9 16 ff ff ff       	jmp    c0018c18 <HalConsoleScroll(int, int)+0x14>
c0018d02:	66 90                	xchg   ax,ax
c0018d04:	90                   	nop
c0018d05:	83 c4 10             	add    esp,0x10
c0018d08:	c3                   	ret    
c0018d09:	8d 76 00             	lea    esi,[esi+0x0]

c0018d0c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018d0c:	83 ec 14             	sub    esp,0x14
c0018d0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d13:	88 04 24             	mov    BYTE PTR [esp],al
c0018d16:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018d19:	0f b6 c0             	movzx  eax,al
c0018d1c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018d20:	89 d1                	mov    ecx,edx
c0018d22:	83 e1 0f             	and    ecx,0xf
c0018d25:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018d29:	c1 e2 04             	shl    edx,0x4
c0018d2c:	0f b6 d2             	movzx  edx,dl
c0018d2f:	09 ca                	or     edx,ecx
c0018d31:	c1 e2 08             	shl    edx,0x8
c0018d34:	09 d0                	or     eax,edx
c0018d36:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018d3b:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018d43:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018d47:	89 d0                	mov    eax,edx
c0018d49:	c1 e0 02             	shl    eax,0x2
c0018d4c:	01 d0                	add    eax,edx
c0018d4e:	c1 e0 04             	shl    eax,0x4
c0018d51:	89 c2                	mov    edx,eax
c0018d53:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d57:	01 d0                	add    eax,edx
c0018d59:	d1 e0                	shl    eax,1
c0018d5b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018d5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018d63:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018d68:	66 89 10             	mov    WORD PTR [eax],dx
c0018d6b:	90                   	nop
c0018d6c:	83 c4 14             	add    esp,0x14
c0018d6f:	c3                   	ret    

c0018d70 <HalConsoleCursorUpdate(int, int)>:
c0018d70:	83 ec 20             	sub    esp,0x20
c0018d73:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d77:	89 c2                	mov    edx,eax
c0018d79:	c1 e2 02             	shl    edx,0x2
c0018d7c:	01 d0                	add    eax,edx
c0018d7e:	c1 e0 04             	shl    eax,0x4
c0018d81:	89 c2                	mov    edx,eax
c0018d83:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d87:	01 d0                	add    eax,edx
c0018d89:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018d8e:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018d95:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018d9a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018d9e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018da2:	ee                   	out    dx,al
c0018da3:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018da8:	0f b6 c0             	movzx  eax,al
c0018dab:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018db2:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018db6:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018dba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018dbe:	ee                   	out    dx,al
c0018dbf:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018dc6:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018dcb:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018dcf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018dd3:	ee                   	out    dx,al
c0018dd4:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018dd9:	c1 e8 08             	shr    eax,0x8
c0018ddc:	0f b6 c0             	movzx  eax,al
c0018ddf:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018de6:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018dea:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018dee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018df2:	ee                   	out    dx,al
c0018df3:	90                   	nop
c0018df4:	83 c4 20             	add    esp,0x20
c0018df7:	c3                   	ret    

c0018df8 <FAT::getName()>:
c0018df8:	b8 e0 2c 02 c0       	mov    eax,0xc0022ce0
c0018dfd:	c3                   	ret    
c0018dfe:	66 90                	xchg   ax,ax

c0018e00 <FAT::tell(void*, unsigned long long*)>:
c0018e00:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018e05:	75 09                	jne    c0018e10 <FAT::tell(void*, unsigned long long*)+0x10>
c0018e07:	b8 04 00 00 00       	mov    eax,0x4
c0018e0c:	c3                   	ret    
c0018e0d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e10:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018e15:	75 09                	jne    c0018e20 <FAT::tell(void*, unsigned long long*)+0x20>
c0018e17:	b8 04 00 00 00       	mov    eax,0x4
c0018e1c:	c3                   	ret    
c0018e1d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e24:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018e27:	ba 00 00 00 00       	mov    edx,0x0
c0018e2c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e30:	89 01                	mov    DWORD PTR [ecx],eax
c0018e32:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018e35:	b8 00 00 00 00       	mov    eax,0x0
c0018e3a:	c3                   	ret    
c0018e3b:	90                   	nop

c0018e3c <FAT::stat(void*, unsigned long long*)>:
c0018e3c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018e41:	75 09                	jne    c0018e4c <FAT::stat(void*, unsigned long long*)+0x10>
c0018e43:	b8 04 00 00 00       	mov    eax,0x4
c0018e48:	c3                   	ret    
c0018e49:	8d 76 00             	lea    esi,[esi+0x0]
c0018e4c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018e51:	75 09                	jne    c0018e5c <FAT::stat(void*, unsigned long long*)+0x20>
c0018e53:	b8 04 00 00 00       	mov    eax,0x4
c0018e58:	c3                   	ret    
c0018e59:	8d 76 00             	lea    esi,[esi+0x0]
c0018e5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e60:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018e63:	ba 00 00 00 00       	mov    edx,0x0
c0018e68:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e6c:	89 01                	mov    DWORD PTR [ecx],eax
c0018e6e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018e71:	b8 00 00 00 00       	mov    eax,0x0
c0018e76:	c3                   	ret    
c0018e77:	90                   	nop

c0018e78 <FAT::~FAT()>:
c0018e78:	83 ec 0c             	sub    esp,0xc
c0018e7b:	ba 2c 2d 02 c0       	mov    edx,0xc0022d2c
c0018e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e84:	89 10                	mov    DWORD PTR [eax],edx
c0018e86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e8a:	83 ec 0c             	sub    esp,0xc
c0018e8d:	50                   	push   eax
c0018e8e:	e8 ab 28 ff ff       	call   c000b73e <Filesystem::~Filesystem()>
c0018e93:	83 c4 10             	add    esp,0x10
c0018e96:	90                   	nop
c0018e97:	83 c4 0c             	add    esp,0xc
c0018e9a:	c3                   	ret    
c0018e9b:	90                   	nop

c0018e9c <FAT::~FAT()>:
c0018e9c:	83 ec 0c             	sub    esp,0xc
c0018e9f:	83 ec 0c             	sub    esp,0xc
c0018ea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ea6:	e8 cd ff ff ff       	call   c0018e78 <FAT::~FAT()>
c0018eab:	83 c4 10             	add    esp,0x10
c0018eae:	83 ec 08             	sub    esp,0x8
c0018eb1:	6a 08                	push   0x8
c0018eb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018eb7:	e8 50 19 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018ebc:	83 c4 10             	add    esp,0x10
c0018ebf:	83 c4 0c             	add    esp,0xc
c0018ec2:	c3                   	ret    
c0018ec3:	90                   	nop

c0018ec4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018ec4:	83 ec 1c             	sub    esp,0x1c
c0018ec7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018ece:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018ed3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ed7:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018ede:	83 f8 ff             	cmp    eax,0xffffffff
c0018ee1:	75 35                	jne    c0018f18 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018ee3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018ee7:	88 c2                	mov    dl,al
c0018ee9:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018eee:	01 d0                	add    eax,edx
c0018ef0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018ef4:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0018efa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018efe:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0018f05:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018f0a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018f0e:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0018f15:	eb 19                	jmp    c0018f30 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018f17:	90                   	nop
c0018f18:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018f1c:	88 c2                	mov    dl,al
c0018f1e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f22:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018f29:	01 d0                	add    eax,edx
c0018f2b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018f2f:	90                   	nop
c0018f30:	83 ec 04             	sub    esp,0x4
c0018f33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018f37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018f3b:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018f3f:	50                   	push   eax
c0018f40:	e8 ae c0 fe ff       	call   c0004ff3 <f_getlabel>
c0018f45:	83 c4 10             	add    esp,0x10
c0018f48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018f4c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018f51:	75 09                	jne    c0018f5c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018f53:	b8 00 00 00 00       	mov    eax,0x0
c0018f58:	eb 0a                	jmp    c0018f64 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018f5a:	66 90                	xchg   ax,ax
c0018f5c:	b8 01 00 00 00       	mov    eax,0x1
c0018f61:	8d 76 00             	lea    esi,[esi+0x0]
c0018f64:	83 c4 1c             	add    esp,0x1c
c0018f67:	c3                   	ret    

c0018f68 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018f68:	53                   	push   ebx
c0018f69:	83 ec 58             	sub    esp,0x58
c0018f6c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018f74:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018f78:	b9 00 00 00 00       	mov    ecx,0x0
c0018f7d:	b8 3c 00 00 00       	mov    eax,0x3c
c0018f82:	83 e0 f8             	and    eax,0xfffffff8
c0018f85:	89 c3                	mov    ebx,eax
c0018f87:	b8 00 00 00 00       	mov    eax,0x0
c0018f8c:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0018f90:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0018f94:	83 c0 08             	add    eax,0x8
c0018f97:	39 d8                	cmp    eax,ebx
c0018f99:	72 f1                	jb     c0018f8c <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0018f9b:	01 c2                	add    edx,eax
c0018f9d:	89 0a                	mov    DWORD PTR [edx],ecx
c0018f9f:	83 c2 04             	add    edx,0x4
c0018fa2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018fa6:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018fad:	83 f8 ff             	cmp    eax,0xffffffff
c0018fb0:	75 36                	jne    c0018fe8 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0018fb2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018fb6:	88 c2                	mov    dl,al
c0018fb8:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018fbd:	01 d0                	add    eax,edx
c0018fbf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018fc3:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0018fc9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018fcd:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0018fd4:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018fd9:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018fdd:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0018fe4:	eb 1a                	jmp    c0019000 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0018fe6:	66 90                	xchg   ax,ax
c0018fe8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018fec:	88 c2                	mov    dl,al
c0018fee:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018ff2:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018ff9:	01 d0                	add    eax,edx
c0018ffb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018fff:	90                   	nop
c0019000:	83 ec 08             	sub    esp,0x8
c0019003:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019007:	8d 44 24 18          	lea    eax,[esp+0x18]
c001900b:	50                   	push   eax
c001900c:	e8 5f 78 fe ff       	call   c0000870 <strcat>
c0019011:	83 c4 10             	add    esp,0x10
c0019014:	83 ec 0c             	sub    esp,0xc
c0019017:	8d 44 24 18          	lea    eax,[esp+0x18]
c001901b:	50                   	push   eax
c001901c:	e8 26 c1 fe ff       	call   c0005147 <f_setlabel>
c0019021:	83 c4 10             	add    esp,0x10
c0019024:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019028:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001902d:	75 09                	jne    c0019038 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c001902f:	b8 00 00 00 00       	mov    eax,0x0
c0019034:	eb 0a                	jmp    c0019040 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0019036:	66 90                	xchg   ax,ax
c0019038:	b8 01 00 00 00       	mov    eax,0x1
c001903d:	8d 76 00             	lea    esi,[esi+0x0]
c0019040:	83 c4 58             	add    esp,0x58
c0019043:	5b                   	pop    ebx
c0019044:	c3                   	ret    
c0019045:	90                   	nop
c0019046:	66 90                	xchg   ax,ax

c0019048 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019048:	83 ec 2c             	sub    esp,0x2c
c001904b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019053:	83 ec 08             	sub    esp,0x8
c0019056:	68 04 2d 02 c0       	push   0xc0022d04
c001905b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001905f:	e8 1c 77 fe ff       	call   c0000780 <strcmp>
c0019064:	83 c4 10             	add    esp,0x10
c0019067:	85 c0                	test   eax,eax
c0019069:	0f 94 c0             	sete   al
c001906c:	0f b6 c0             	movzx  eax,al
c001906f:	85 c0                	test   eax,eax
c0019071:	74 0d                	je     c0019080 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0019073:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001907b:	e9 c0 00 00 00       	jmp    c0019140 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019080:	83 ec 08             	sub    esp,0x8
c0019083:	68 f6 2c 02 c0       	push   0xc0022cf6
c0019088:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001908c:	e8 ef 76 fe ff       	call   c0000780 <strcmp>
c0019091:	83 c4 10             	add    esp,0x10
c0019094:	85 c0                	test   eax,eax
c0019096:	0f 94 c0             	sete   al
c0019099:	0f b6 c0             	movzx  eax,al
c001909c:	85 c0                	test   eax,eax
c001909e:	74 10                	je     c00190b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c00190a0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00190a8:	e9 93 00 00 00       	jmp    c0019140 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00190ad:	8d 76 00             	lea    esi,[esi+0x0]
c00190b0:	83 ec 08             	sub    esp,0x8
c00190b3:	68 fc 2c 02 c0       	push   0xc0022cfc
c00190b8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00190bc:	e8 bf 76 fe ff       	call   c0000780 <strcmp>
c00190c1:	83 c4 10             	add    esp,0x10
c00190c4:	85 c0                	test   eax,eax
c00190c6:	0f 94 c0             	sete   al
c00190c9:	0f b6 c0             	movzx  eax,al
c00190cc:	85 c0                	test   eax,eax
c00190ce:	74 0c                	je     c00190dc <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c00190d0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00190d8:	eb 66                	jmp    c0019140 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00190da:	66 90                	xchg   ax,ax
c00190dc:	83 ec 08             	sub    esp,0x8
c00190df:	68 7c 04 02 c0       	push   0xc002047c
c00190e4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00190e8:	e8 93 76 fe ff       	call   c0000780 <strcmp>
c00190ed:	83 c4 10             	add    esp,0x10
c00190f0:	85 c0                	test   eax,eax
c00190f2:	0f 94 c0             	sete   al
c00190f5:	0f b6 c0             	movzx  eax,al
c00190f8:	85 c0                	test   eax,eax
c00190fa:	74 0c                	je     c0019108 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00190fc:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019104:	eb 3a                	jmp    c0019140 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019106:	66 90                	xchg   ax,ax
c0019108:	83 ec 08             	sub    esp,0x8
c001910b:	68 02 2d 02 c0       	push   0xc0022d02
c0019110:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019114:	e8 67 76 fe ff       	call   c0000780 <strcmp>
c0019119:	83 c4 10             	add    esp,0x10
c001911c:	85 c0                	test   eax,eax
c001911e:	0f 94 c0             	sete   al
c0019121:	0f b6 c0             	movzx  eax,al
c0019124:	85 c0                	test   eax,eax
c0019126:	74 0c                	je     c0019134 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0019128:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019130:	eb 0e                	jmp    c0019140 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019132:	66 90                	xchg   ax,ax
c0019134:	b8 08 00 00 00       	mov    eax,0x8
c0019139:	e9 ea 00 00 00       	jmp    c0019228 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001913e:	66 90                	xchg   ax,ax
c0019140:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019147:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001914c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019150:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019157:	83 f8 ff             	cmp    eax,0xffffffff
c001915a:	75 34                	jne    c0019190 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001915c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019160:	88 c2                	mov    dl,al
c0019162:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019167:	01 d0                	add    eax,edx
c0019169:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001916d:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019173:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019177:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c001917e:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019183:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019187:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c001918e:	eb 18                	jmp    c00191a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0019190:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019194:	88 c2                	mov    dl,al
c0019196:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001919a:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00191a1:	01 d0                	add    eax,edx
c00191a3:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00191a7:	90                   	nop
c00191a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00191ac:	88 04 24             	mov    BYTE PTR [esp],al
c00191af:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00191b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00191b7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00191bf:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00191c4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00191cc:	83 ec 0c             	sub    esp,0xc
c00191cf:	68 00 20 00 00       	push   0x2000
c00191d4:	e8 fa e8 fe ff       	call   c0007ad3 <malloc>
c00191d9:	83 c4 10             	add    esp,0x10
c00191dc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00191e0:	68 00 20 00 00       	push   0x2000
c00191e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00191e9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00191ed:	50                   	push   eax
c00191ee:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00191f2:	50                   	push   eax
c00191f3:	e8 4c c2 fe ff       	call   c0005444 <f_mkfs>
c00191f8:	83 c4 10             	add    esp,0x10
c00191fb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00191ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019204:	75 0a                	jne    c0019210 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0019206:	b8 00 00 00 00       	mov    eax,0x0
c001920b:	eb 1b                	jmp    c0019228 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001920d:	8d 76 00             	lea    esi,[esi+0x0]
c0019210:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019215:	75 09                	jne    c0019220 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0019217:	b8 09 00 00 00       	mov    eax,0x9
c001921c:	eb 0a                	jmp    c0019228 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001921e:	66 90                	xchg   ax,ax
c0019220:	b8 01 00 00 00       	mov    eax,0x1
c0019225:	8d 76 00             	lea    esi,[esi+0x0]
c0019228:	83 c4 2c             	add    esp,0x2c
c001922b:	c3                   	ret    

c001922c <FAT::tryMount(LogicalDisk*, int)>:
c001922c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0019232:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019237:	83 f8 14             	cmp    eax,0x14
c001923a:	75 18                	jne    c0019254 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001923c:	83 ec 0c             	sub    esp,0xc
c001923f:	68 08 2d 02 c0       	push   0xc0022d08
c0019244:	e8 be 82 ff ff       	call   c0011507 <KePanic(char const*)>
c0019249:	83 c4 10             	add    esp,0x10
c001924c:	b0 00                	mov    al,0x0
c001924e:	e9 ed 01 00 00       	jmp    c0019440 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019253:	90                   	nop
c0019254:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001925b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019261:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019267:	3d 00 02 00 00       	cmp    eax,0x200
c001926c:	74 0a                	je     c0019278 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001926e:	b0 00                	mov    al,0x0
c0019270:	e9 cb 01 00 00       	jmp    c0019440 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019275:	8d 76 00             	lea    esi,[esi+0x0]
c0019278:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0019280:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019287:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001928e:	83 f8 ff             	cmp    eax,0xffffffff
c0019291:	74 09                	je     c001929c <FAT::tryMount(LogicalDisk*, int)+0x70>
c0019293:	b0 01                	mov    al,0x1
c0019295:	e9 a6 01 00 00       	jmp    c0019440 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001929a:	66 90                	xchg   ax,ax
c001929c:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00192a6:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00192ae:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00192b5:	88 c2                	mov    dl,al
c00192b7:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00192bc:	01 d0                	add    eax,edx
c00192be:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00192c5:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00192cb:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00192d2:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00192d9:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00192de:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00192e5:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00192ec:	83 ec 0c             	sub    esp,0xc
c00192ef:	68 34 02 00 00       	push   0x234
c00192f4:	e8 da e7 fe ff       	call   c0007ad3 <malloc>
c00192f9:	83 c4 10             	add    esp,0x10
c00192fc:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0019303:	83 ec 04             	sub    esp,0x4
c0019306:	6a 00                	push   0x0
c0019308:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001930f:	50                   	push   eax
c0019310:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019317:	e8 22 a9 fe ff       	call   c0003c3e <f_mount>
c001931c:	83 c4 10             	add    esp,0x10
c001931f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019326:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001932e:	74 1c                	je     c001934c <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019330:	83 ec 0c             	sub    esp,0xc
c0019333:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001933a:	e8 b4 e7 fe ff       	call   c0007af3 <rfree>
c001933f:	83 c4 10             	add    esp,0x10
c0019342:	b0 00                	mov    al,0x0
c0019344:	e9 f7 00 00 00       	jmp    c0019440 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019349:	8d 76 00             	lea    esi,[esi+0x0]
c001934c:	83 ec 04             	sub    esp,0x4
c001934f:	68 00 01 00 00       	push   0x100
c0019354:	6a 00                	push   0x0
c0019356:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001935d:	50                   	push   eax
c001935e:	e8 8d 71 fe ff       	call   c00004f0 <memset>
c0019363:	83 c4 10             	add    esp,0x10
c0019366:	83 ec 08             	sub    esp,0x8
c0019369:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019370:	50                   	push   eax
c0019371:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019378:	50                   	push   eax
c0019379:	e8 f2 74 fe ff       	call   c0000870 <strcat>
c001937e:	83 c4 10             	add    esp,0x10
c0019381:	83 ec 08             	sub    esp,0x8
c0019384:	68 16 2d 02 c0       	push   0xc0022d16
c0019389:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019390:	50                   	push   eax
c0019391:	e8 da 74 fe ff       	call   c0000870 <strcat>
c0019396:	83 c4 10             	add    esp,0x10
c0019399:	83 ec 04             	sub    esp,0x4
c001939c:	6a 01                	push   0x1
c001939e:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00193a5:	50                   	push   eax
c00193a6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00193aa:	50                   	push   eax
c00193ab:	e8 f0 a8 fe ff       	call   c0003ca0 <f_open>
c00193b0:	83 c4 10             	add    esp,0x10
c00193b3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00193ba:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00193c1:	85 c0                	test   eax,eax
c00193c3:	74 0b                	je     c00193d0 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00193c5:	78 31                	js     c00193f8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00193c7:	83 e8 04             	sub    eax,0x4
c00193ca:	83 f8 01             	cmp    eax,0x1
c00193cd:	77 29                	ja     c00193f8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00193cf:	90                   	nop
c00193d0:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00193d8:	83 ec 0c             	sub    esp,0xc
c00193db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00193df:	50                   	push   eax
c00193e0:	e8 6b b0 fe ff       	call   c0004450 <f_close>
c00193e5:	83 c4 10             	add    esp,0x10
c00193e8:	90                   	nop
c00193e9:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00193f1:	85 c0                	test   eax,eax
c00193f3:	74 43                	je     c0019438 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00193f5:	eb 31                	jmp    c0019428 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00193f7:	90                   	nop
c00193f8:	83 ec 0c             	sub    esp,0xc
c00193fb:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019402:	e8 ec e6 fe ff       	call   c0007af3 <rfree>
c0019407:	83 c4 10             	add    esp,0x10
c001940a:	83 ec 04             	sub    esp,0x4
c001940d:	6a 00                	push   0x0
c001940f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019416:	50                   	push   eax
c0019417:	6a 00                	push   0x0
c0019419:	e8 20 a8 fe ff       	call   c0003c3e <f_mount>
c001941e:	83 c4 10             	add    esp,0x10
c0019421:	b0 00                	mov    al,0x0
c0019423:	eb 1b                	jmp    c0019440 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019425:	8d 76 00             	lea    esi,[esi+0x0]
c0019428:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001942d:	83 c0 01             	add    eax,0x1
c0019430:	a3 80 c7 02 c0       	mov    ds:0xc002c780,eax
c0019435:	8d 76 00             	lea    esi,[esi+0x0]
c0019438:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001943f:	90                   	nop
c0019440:	81 c4 4c 03 00 00    	add    esp,0x34c
c0019446:	c3                   	ret    
c0019447:	90                   	nop

c0019448 <FAT::allocateSwapfile(char const*, int)>:
c0019448:	55                   	push   ebp
c0019449:	57                   	push   edi
c001944a:	56                   	push   esi
c001944b:	53                   	push   ebx
c001944c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0019452:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001945d:	83 ec 0c             	sub    esp,0xc
c0019460:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0019467:	e8 67 e6 fe ff       	call   c0007ad3 <malloc>
c001946c:	83 c4 10             	add    esp,0x10
c001946f:	89 c7                	mov    edi,eax
c0019471:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0019476:	83 ec 04             	sub    esp,0x4
c0019479:	50                   	push   eax
c001947a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019481:	57                   	push   edi
c0019482:	e8 39 26 ff ff       	call   c000bac0 <File::File(char const*, Process*)>
c0019487:	83 c4 10             	add    esp,0x10
c001948a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0019491:	83 ec 04             	sub    esp,0x4
c0019494:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019498:	50                   	push   eax
c0019499:	8d 44 24 18          	lea    eax,[esp+0x18]
c001949d:	50                   	push   eax
c001949e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00194a5:	e8 36 29 ff ff       	call   c000bde0 <File::stat(unsigned long long*, bool*)>
c00194aa:	83 c4 10             	add    esp,0x10
c00194ad:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00194b4:	c1 e0 14             	shl    eax,0x14
c00194b7:	89 c7                	mov    edi,eax
c00194b9:	89 c5                	mov    ebp,eax
c00194bb:	c1 fd 1f             	sar    ebp,0x1f
c00194be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00194c6:	89 f9                	mov    ecx,edi
c00194c8:	31 c1                	xor    ecx,eax
c00194ca:	89 cb                	mov    ebx,ecx
c00194cc:	89 e9                	mov    ecx,ebp
c00194ce:	31 d1                	xor    ecx,edx
c00194d0:	89 ce                	mov    esi,ecx
c00194d2:	89 f0                	mov    eax,esi
c00194d4:	09 d8                	or     eax,ebx
c00194d6:	0f 84 9c 00 00 00    	je     c0019578 <FAT::allocateSwapfile(char const*, int)+0x130>
c00194dc:	83 ec 0c             	sub    esp,0xc
c00194df:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00194e6:	e8 c1 27 ff ff       	call   c000bcac <File::unlink()>
c00194eb:	83 c4 10             	add    esp,0x10
c00194ee:	83 ec 08             	sub    esp,0x8
c00194f1:	6a 12                	push   0x12
c00194f3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00194fa:	e8 df 25 ff ff       	call   c000bade <File::open(FileOpenMode)>
c00194ff:	83 c4 10             	add    esp,0x10
c0019502:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019509:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001950f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019516:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001951d:	c1 e0 14             	shl    eax,0x14
c0019520:	83 ec 04             	sub    esp,0x4
c0019523:	6a 01                	push   0x1
c0019525:	50                   	push   eax
c0019526:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001952d:	e8 a5 bd fe ff       	call   c00052d7 <f_expand>
c0019532:	83 c4 10             	add    esp,0x10
c0019535:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001953c:	8b 00                	mov    eax,DWORD PTR [eax]
c001953e:	83 c0 10             	add    eax,0x10
c0019541:	8b 00                	mov    eax,DWORD PTR [eax]
c0019543:	83 ec 0c             	sub    esp,0xc
c0019546:	8d 54 24 24          	lea    edx,[esp+0x24]
c001954a:	52                   	push   edx
c001954b:	8d 54 24 30          	lea    edx,[esp+0x30]
c001954f:	52                   	push   edx
c0019550:	6a 00                	push   0x0
c0019552:	68 00 04 00 00       	push   0x400
c0019557:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001955e:	ff d0                	call   eax
c0019560:	83 c4 20             	add    esp,0x20
c0019563:	83 ec 0c             	sub    esp,0xc
c0019566:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001956d:	e8 ca 25 ff ff       	call   c000bb3c <File::close()>
c0019572:	83 c4 10             	add    esp,0x10
c0019575:	8d 76 00             	lea    esi,[esi+0x0]
c0019578:	83 ec 08             	sub    esp,0x8
c001957b:	6a 01                	push   0x1
c001957d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019584:	e8 55 25 ff ff       	call   c000bade <File::open(FileOpenMode)>
c0019589:	83 c4 10             	add    esp,0x10
c001958c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019593:	8b 00                	mov    eax,DWORD PTR [eax]
c0019595:	83 c0 0c             	add    eax,0xc
c0019598:	8b 00                	mov    eax,DWORD PTR [eax]
c001959a:	83 ec 0c             	sub    esp,0xc
c001959d:	8d 54 24 24          	lea    edx,[esp+0x24]
c00195a1:	52                   	push   edx
c00195a2:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00195a6:	52                   	push   edx
c00195a7:	6a 00                	push   0x0
c00195a9:	6a 04                	push   0x4
c00195ab:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00195b2:	ff d0                	call   eax
c00195b4:	83 c4 20             	add    esp,0x20
c00195b7:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00195be:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00195c4:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00195cb:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00195d2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00195d5:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00195dc:	83 ec 0c             	sub    esp,0xc
c00195df:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00195e6:	e8 51 25 ff ff       	call   c000bb3c <File::close()>
c00195eb:	83 c4 10             	add    esp,0x10
c00195ee:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00195f5:	ba 00 00 00 00       	mov    edx,0x0
c00195fa:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019600:	5b                   	pop    ebx
c0019601:	5e                   	pop    esi
c0019602:	5f                   	pop    edi
c0019603:	5d                   	pop    ebp
c0019604:	c3                   	ret    
c0019605:	90                   	nop
c0019606:	66 90                	xchg   ax,ax

c0019608 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019608:	57                   	push   edi
c0019609:	56                   	push   esi
c001960a:	53                   	push   ebx
c001960b:	81 ec 50 02 00 00    	sub    esp,0x250
c0019611:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019619:	74 0d                	je     c0019628 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001961b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0019623:	75 0f                	jne    c0019634 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019625:	8d 76 00             	lea    esi,[esi+0x0]
c0019628:	b8 04 00 00 00       	mov    eax,0x4
c001962d:	e9 3a 01 00 00       	jmp    c001976c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019632:	66 90                	xchg   ax,ax
c0019634:	83 ec 08             	sub    esp,0x8
c0019637:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001963e:	50                   	push   eax
c001963f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0019646:	e8 d1 b0 fe ff       	call   c000471c <f_readdir>
c001964b:	83 c4 10             	add    esp,0x10
c001964e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019655:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001965c:	83 ec 0c             	sub    esp,0xc
c001965f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019666:	83 c0 16             	add    eax,0x16
c0019669:	50                   	push   eax
c001966a:	e8 11 6f fe ff       	call   c0000580 <strlen>
c001966f:	83 c4 10             	add    esp,0x10
c0019672:	ba 00 00 00 00       	mov    edx,0x0
c0019677:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001967b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001967f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019686:	0f b6 c0             	movzx  eax,al
c0019689:	83 e0 10             	and    eax,0x10
c001968c:	74 0a                	je     c0019698 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001968e:	b8 02 00 00 00       	mov    eax,0x2
c0019693:	eb 0b                	jmp    c00196a0 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019695:	8d 76 00             	lea    esi,[esi+0x0]
c0019698:	b8 01 00 00 00       	mov    eax,0x1
c001969d:	8d 76 00             	lea    esi,[esi+0x0]
c00196a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00196a4:	83 ec 08             	sub    esp,0x8
c00196a7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00196ae:	83 c0 16             	add    eax,0x16
c00196b1:	50                   	push   eax
c00196b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00196b6:	83 c0 10             	add    eax,0x10
c00196b9:	50                   	push   eax
c00196ba:	e8 91 6f fe ff       	call   c0000650 <strcpy>
c00196bf:	83 c4 10             	add    esp,0x10
c00196c2:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00196c9:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00196d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00196d4:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00196db:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00196e2:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00196e9:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00196f0:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00196f7:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00196fe:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019705:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001970c:	89 c6                	mov    esi,eax
c001970e:	89 d7                	mov    edi,edx
c0019710:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019712:	89 c8                	mov    eax,ecx
c0019714:	89 fa                	mov    edx,edi
c0019716:	89 f3                	mov    ebx,esi
c0019718:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001971f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0019726:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001972d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019734:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001973a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019741:	0f be c0             	movsx  eax,al
c0019744:	85 c0                	test   eax,eax
c0019746:	75 08                	jne    c0019750 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019748:	b8 07 00 00 00       	mov    eax,0x7
c001974d:	eb 1d                	jmp    c001976c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001974f:	90                   	nop
c0019750:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0019757:	85 c0                	test   eax,eax
c0019759:	75 09                	jne    c0019764 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001975b:	b8 00 00 00 00       	mov    eax,0x0
c0019760:	eb 0a                	jmp    c001976c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019762:	66 90                	xchg   ax,ax
c0019764:	b8 01 00 00 00       	mov    eax,0x1
c0019769:	8d 76 00             	lea    esi,[esi+0x0]
c001976c:	81 c4 50 02 00 00    	add    esp,0x250
c0019772:	5b                   	pop    ebx
c0019773:	5e                   	pop    esi
c0019774:	5f                   	pop    edi
c0019775:	c3                   	ret    
c0019776:	66 90                	xchg   ax,ax

c0019778 <FAT::read(void*, unsigned long, void*, int*)>:
c0019778:	83 ec 1c             	sub    esp,0x1c
c001977b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019780:	74 0a                	je     c001978c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0019782:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019787:	75 0b                	jne    c0019794 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019789:	8d 76 00             	lea    esi,[esi+0x0]
c001978c:	b8 04 00 00 00       	mov    eax,0x4
c0019791:	eb 41                	jmp    c00197d4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019793:	90                   	nop
c0019794:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019798:	50                   	push   eax
c0019799:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001979d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00197a1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00197a5:	e8 b9 a7 fe ff       	call   c0003f63 <f_read>
c00197aa:	83 c4 10             	add    esp,0x10
c00197ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00197b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197b5:	89 c2                	mov    edx,eax
c00197b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00197bb:	89 10                	mov    DWORD PTR [eax],edx
c00197bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00197c1:	85 c0                	test   eax,eax
c00197c3:	75 07                	jne    c00197cc <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00197c5:	b8 00 00 00 00       	mov    eax,0x0
c00197ca:	eb 08                	jmp    c00197d4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00197cc:	b8 01 00 00 00       	mov    eax,0x1
c00197d1:	8d 76 00             	lea    esi,[esi+0x0]
c00197d4:	83 c4 1c             	add    esp,0x1c
c00197d7:	c3                   	ret    

c00197d8 <FAT::write(void*, unsigned long, void*, int*)>:
c00197d8:	83 ec 1c             	sub    esp,0x1c
c00197db:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00197e0:	74 0a                	je     c00197ec <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00197e2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00197e7:	75 0b                	jne    c00197f4 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00197e9:	8d 76 00             	lea    esi,[esi+0x0]
c00197ec:	b8 04 00 00 00       	mov    eax,0x4
c00197f1:	eb 41                	jmp    c0019834 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00197f3:	90                   	nop
c00197f4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00197f8:	50                   	push   eax
c00197f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00197fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019801:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019805:	e8 3a a9 fe ff       	call   c0004144 <f_write>
c001980a:	83 c4 10             	add    esp,0x10
c001980d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019815:	89 c2                	mov    edx,eax
c0019817:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001981b:	89 10                	mov    DWORD PTR [eax],edx
c001981d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019821:	85 c0                	test   eax,eax
c0019823:	75 07                	jne    c001982c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0019825:	b8 00 00 00 00       	mov    eax,0x0
c001982a:	eb 08                	jmp    c0019834 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001982c:	b8 01 00 00 00       	mov    eax,0x1
c0019831:	8d 76 00             	lea    esi,[esi+0x0]
c0019834:	83 c4 1c             	add    esp,0x1c
c0019837:	c3                   	ret    

c0019838 <FAT::close(void*)>:
c0019838:	83 ec 1c             	sub    esp,0x1c
c001983b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019840:	75 0a                	jne    c001984c <FAT::close(void*)+0x14>
c0019842:	b8 04 00 00 00       	mov    eax,0x4
c0019847:	eb 3f                	jmp    c0019888 <FAT::close(void*)+0x50>
c0019849:	8d 76 00             	lea    esi,[esi+0x0]
c001984c:	83 ec 0c             	sub    esp,0xc
c001984f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019853:	e8 f8 ab fe ff       	call   c0004450 <f_close>
c0019858:	83 c4 10             	add    esp,0x10
c001985b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001985f:	83 ec 0c             	sub    esp,0xc
c0019862:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019866:	e8 78 e2 fe ff       	call   c0007ae3 <free>
c001986b:	83 c4 10             	add    esp,0x10
c001986e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019872:	85 c0                	test   eax,eax
c0019874:	75 0a                	jne    c0019880 <FAT::close(void*)+0x48>
c0019876:	b8 00 00 00 00       	mov    eax,0x0
c001987b:	eb 0b                	jmp    c0019888 <FAT::close(void*)+0x50>
c001987d:	8d 76 00             	lea    esi,[esi+0x0]
c0019880:	b8 01 00 00 00       	mov    eax,0x1
c0019885:	8d 76 00             	lea    esi,[esi+0x0]
c0019888:	83 c4 1c             	add    esp,0x1c
c001988b:	c3                   	ret    

c001988c <FAT::closeDir(void*)>:
c001988c:	83 ec 1c             	sub    esp,0x1c
c001988f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019894:	75 0a                	jne    c00198a0 <FAT::closeDir(void*)+0x14>
c0019896:	b8 04 00 00 00       	mov    eax,0x4
c001989b:	eb 3f                	jmp    c00198dc <FAT::closeDir(void*)+0x50>
c001989d:	8d 76 00             	lea    esi,[esi+0x0]
c00198a0:	83 ec 0c             	sub    esp,0xc
c00198a3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198a7:	e8 4e ae fe ff       	call   c00046fa <f_closedir>
c00198ac:	83 c4 10             	add    esp,0x10
c00198af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00198b3:	83 ec 0c             	sub    esp,0xc
c00198b6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198ba:	e8 24 e2 fe ff       	call   c0007ae3 <free>
c00198bf:	83 c4 10             	add    esp,0x10
c00198c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00198c6:	85 c0                	test   eax,eax
c00198c8:	75 0a                	jne    c00198d4 <FAT::closeDir(void*)+0x48>
c00198ca:	b8 00 00 00 00       	mov    eax,0x0
c00198cf:	eb 0b                	jmp    c00198dc <FAT::closeDir(void*)+0x50>
c00198d1:	8d 76 00             	lea    esi,[esi+0x0]
c00198d4:	b8 01 00 00 00       	mov    eax,0x1
c00198d9:	8d 76 00             	lea    esi,[esi+0x0]
c00198dc:	83 c4 1c             	add    esp,0x1c
c00198df:	c3                   	ret    

c00198e0 <FAT::truncate(void*, unsigned long long)>:
c00198e0:	83 ec 2c             	sub    esp,0x2c
c00198e3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00198e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00198eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00198ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00198f3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00198f8:	75 0a                	jne    c0019904 <FAT::truncate(void*, unsigned long long)+0x24>
c00198fa:	b8 04 00 00 00       	mov    eax,0x4
c00198ff:	eb 47                	jmp    c0019948 <FAT::truncate(void*, unsigned long long)+0x68>
c0019901:	8d 76 00             	lea    esi,[esi+0x0]
c0019904:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019908:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001990b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001990f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019917:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001991b:	83 ec 08             	sub    esp,0x8
c001991e:	50                   	push   eax
c001991f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019923:	e8 57 ab fe ff       	call   c000447f <f_lseek>
c0019928:	83 c4 10             	add    esp,0x10
c001992b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001992f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019933:	85 c0                	test   eax,eax
c0019935:	75 09                	jne    c0019940 <FAT::truncate(void*, unsigned long long)+0x60>
c0019937:	b8 00 00 00 00       	mov    eax,0x0
c001993c:	eb 0a                	jmp    c0019948 <FAT::truncate(void*, unsigned long long)+0x68>
c001993e:	66 90                	xchg   ax,ax
c0019940:	b8 01 00 00 00       	mov    eax,0x1
c0019945:	8d 76 00             	lea    esi,[esi+0x0]
c0019948:	83 c4 2c             	add    esp,0x2c
c001994b:	c3                   	ret    

c001994c <FAT::seek(void*, unsigned long long)>:
c001994c:	83 ec 2c             	sub    esp,0x2c
c001994f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019953:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019957:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001995b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001995f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019964:	75 0a                	jne    c0019970 <FAT::seek(void*, unsigned long long)+0x24>
c0019966:	b8 04 00 00 00       	mov    eax,0x4
c001996b:	eb 33                	jmp    c00199a0 <FAT::seek(void*, unsigned long long)+0x54>
c001996d:	8d 76 00             	lea    esi,[esi+0x0]
c0019970:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019974:	83 ec 08             	sub    esp,0x8
c0019977:	50                   	push   eax
c0019978:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001997c:	e8 fe aa fe ff       	call   c000447f <f_lseek>
c0019981:	83 c4 10             	add    esp,0x10
c0019984:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019988:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001998c:	85 c0                	test   eax,eax
c001998e:	75 08                	jne    c0019998 <FAT::seek(void*, unsigned long long)+0x4c>
c0019990:	b8 00 00 00 00       	mov    eax,0x0
c0019995:	eb 09                	jmp    c00199a0 <FAT::seek(void*, unsigned long long)+0x54>
c0019997:	90                   	nop
c0019998:	b8 01 00 00 00       	mov    eax,0x1
c001999d:	8d 76 00             	lea    esi,[esi+0x0]
c00199a0:	83 c4 2c             	add    esp,0x2c
c00199a3:	c3                   	ret    

c00199a4 <fatWrapperReadDisk>:
c00199a4:	53                   	push   ebx
c00199a5:	83 ec 18             	sub    esp,0x18
c00199a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199ac:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00199b0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00199b5:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c00199bc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00199c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00199c4:	ba 00 00 00 00       	mov    edx,0x0
c00199c9:	83 ec 0c             	sub    esp,0xc
c00199cc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199d0:	53                   	push   ebx
c00199d1:	52                   	push   edx
c00199d2:	50                   	push   eax
c00199d3:	51                   	push   ecx
c00199d4:	e8 51 43 ff ff       	call   c000dd2a <LogicalDisk::read(unsigned long long, int, void*)>
c00199d9:	83 c4 20             	add    esp,0x20
c00199dc:	83 c4 18             	add    esp,0x18
c00199df:	5b                   	pop    ebx
c00199e0:	c3                   	ret    
c00199e1:	8d 76 00             	lea    esi,[esi+0x0]

c00199e4 <fatWrapperWriteDisk>:
c00199e4:	53                   	push   ebx
c00199e5:	83 ec 18             	sub    esp,0x18
c00199e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199ec:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00199f0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00199f5:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c00199fc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019a00:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019a04:	ba 00 00 00 00       	mov    edx,0x0
c0019a09:	83 ec 0c             	sub    esp,0xc
c0019a0c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a10:	53                   	push   ebx
c0019a11:	52                   	push   edx
c0019a12:	50                   	push   eax
c0019a13:	51                   	push   ecx
c0019a14:	e8 7d 43 ff ff       	call   c000dd96 <LogicalDisk::write(unsigned long long, int, void*)>
c0019a19:	83 c4 20             	add    esp,0x20
c0019a1c:	83 c4 18             	add    esp,0x18
c0019a1f:	5b                   	pop    ebx
c0019a20:	c3                   	ret    
c0019a21:	8d 76 00             	lea    esi,[esi+0x0]

c0019a24 <fatWrapperIoctl>:
c0019a24:	53                   	push   ebx
c0019a25:	83 ec 28             	sub    esp,0x28
c0019a28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019a2c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019a30:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019a34:	88 d0                	mov    al,dl
c0019a36:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019a3a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019a3f:	83 f8 02             	cmp    eax,0x2
c0019a42:	75 34                	jne    c0019a78 <fatWrapperIoctl+0x54>
c0019a44:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a48:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019a4c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019a51:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019a58:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019a5e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019a64:	89 c2                	mov    edx,eax
c0019a66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a6a:	66 89 10             	mov    WORD PTR [eax],dx
c0019a6d:	b8 00 00 00 00       	mov    eax,0x0
c0019a72:	e9 c5 00 00 00       	jmp    c0019b3c <fatWrapperIoctl+0x118>
c0019a77:	90                   	nop
c0019a78:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019a7d:	83 f8 01             	cmp    eax,0x1
c0019a80:	75 6a                	jne    c0019aec <fatWrapperIoctl+0xc8>
c0019a82:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a86:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019a8a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019a8f:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019a96:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019a9c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019aa2:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019aa8:	89 c8                	mov    eax,ecx
c0019aaa:	89 da                	mov    edx,ebx
c0019aac:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019ab0:	c1 e0 0a             	shl    eax,0xa
c0019ab3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019ab8:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0019abf:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019ac5:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019acb:	89 cb                	mov    ebx,ecx
c0019acd:	c1 fb 1f             	sar    ebx,0x1f
c0019ad0:	53                   	push   ebx
c0019ad1:	51                   	push   ecx
c0019ad2:	52                   	push   edx
c0019ad3:	50                   	push   eax
c0019ad4:	e8 b7 5b 00 00       	call   c001f690 <__udivdi3>
c0019ad9:	83 c4 10             	add    esp,0x10
c0019adc:	89 c2                	mov    edx,eax
c0019ade:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019ae2:	89 10                	mov    DWORD PTR [eax],edx
c0019ae4:	b8 00 00 00 00       	mov    eax,0x0
c0019ae9:	eb 51                	jmp    c0019b3c <fatWrapperIoctl+0x118>
c0019aeb:	90                   	nop
c0019aec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019af1:	85 c0                	test   eax,eax
c0019af3:	75 07                	jne    c0019afc <fatWrapperIoctl+0xd8>
c0019af5:	b8 00 00 00 00       	mov    eax,0x0
c0019afa:	eb 40                	jmp    c0019b3c <fatWrapperIoctl+0x118>
c0019afc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b01:	83 f8 03             	cmp    eax,0x3
c0019b04:	75 1a                	jne    c0019b20 <fatWrapperIoctl+0xfc>
c0019b06:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b0a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019b0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019b12:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019b18:	b8 00 00 00 00       	mov    eax,0x0
c0019b1d:	eb 1d                	jmp    c0019b3c <fatWrapperIoctl+0x118>
c0019b1f:	90                   	nop
c0019b20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b25:	83 f8 04             	cmp    eax,0x4
c0019b28:	75 0a                	jne    c0019b34 <fatWrapperIoctl+0x110>
c0019b2a:	b8 00 00 00 00       	mov    eax,0x0
c0019b2f:	eb 0b                	jmp    c0019b3c <fatWrapperIoctl+0x118>
c0019b31:	8d 76 00             	lea    esi,[esi+0x0]
c0019b34:	b8 04 00 00 00       	mov    eax,0x4
c0019b39:	8d 76 00             	lea    esi,[esi+0x0]
c0019b3c:	83 c4 28             	add    esp,0x28
c0019b3f:	5b                   	pop    ebx
c0019b40:	c3                   	ret    
c0019b41:	90                   	nop
c0019b42:	66 90                	xchg   ax,ax

c0019b44 <FAT::FAT()>:
c0019b44:	83 ec 1c             	sub    esp,0x1c
c0019b47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b4b:	83 ec 0c             	sub    esp,0xc
c0019b4e:	50                   	push   eax
c0019b4f:	e8 c6 1b ff ff       	call   c000b71a <Filesystem::Filesystem()>
c0019b54:	83 c4 10             	add    esp,0x10
c0019b57:	ba 2c 2d 02 c0       	mov    edx,0xc0022d2c
c0019b5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b60:	89 10                	mov    DWORD PTR [eax],edx
c0019b62:	c7 05 80 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c780,0x0
c0019b6c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019b74:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019b79:	7f 19                	jg     c0019b94 <FAT::FAT()+0x50>
c0019b7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b7f:	c7 04 85 a0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3860],0xffffffff
c0019b8a:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019b8f:	eb e3                	jmp    c0019b74 <FAT::FAT()+0x30>
c0019b91:	8d 76 00             	lea    esi,[esi+0x0]
c0019b94:	90                   	nop
c0019b95:	83 c4 1c             	add    esp,0x1c
c0019b98:	c3                   	ret    
c0019b99:	90                   	nop
c0019b9a:	66 90                	xchg   ax,ax

c0019b9c <FAT::fixFilepath(char*)>:
c0019b9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ba0:	8a 00                	mov    al,BYTE PTR [eax]
c0019ba2:	0f be c0             	movsx  eax,al
c0019ba5:	83 f8 40             	cmp    eax,0x40
c0019ba8:	7e 2e                	jle    c0019bd8 <FAT::fixFilepath(char*)+0x3c>
c0019baa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bae:	8a 00                	mov    al,BYTE PTR [eax]
c0019bb0:	83 e8 41             	sub    eax,0x41
c0019bb3:	88 c2                	mov    dl,al
c0019bb5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bb9:	88 10                	mov    BYTE PTR [eax],dl
c0019bbb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bbf:	8a 00                	mov    al,BYTE PTR [eax]
c0019bc1:	0f be c0             	movsx  eax,al
c0019bc4:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019bcb:	83 c0 30             	add    eax,0x30
c0019bce:	88 c2                	mov    dl,al
c0019bd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bd4:	88 10                	mov    BYTE PTR [eax],dl
c0019bd6:	66 90                	xchg   ax,ax
c0019bd8:	90                   	nop
c0019bd9:	c3                   	ret    
c0019bda:	66 90                	xchg   ax,ax

c0019bdc <FAT::open(char const*, void**, FileOpenMode)>:
c0019bdc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019be2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019bea:	74 0c                	je     c0019bf8 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019bec:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019bf4:	75 0e                	jne    c0019c04 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019bf6:	66 90                	xchg   ax,ax
c0019bf8:	b8 04 00 00 00       	mov    eax,0x4
c0019bfd:	e9 46 01 00 00       	jmp    c0019d48 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019c02:	66 90                	xchg   ax,ax
c0019c04:	83 ec 08             	sub    esp,0x8
c0019c07:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019c0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c12:	50                   	push   eax
c0019c13:	e8 38 6a fe ff       	call   c0000650 <strcpy>
c0019c18:	83 c4 10             	add    esp,0x10
c0019c1b:	83 ec 08             	sub    esp,0x8
c0019c1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019c22:	50                   	push   eax
c0019c23:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019c2a:	e8 6d ff ff ff       	call   c0019b9c <FAT::fixFilepath(char*)>
c0019c2f:	83 c4 10             	add    esp,0x10
c0019c32:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019c3a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019c41:	83 e0 01             	and    eax,0x1
c0019c44:	74 12                	je     c0019c58 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019c46:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019c4d:	83 c8 01             	or     eax,0x1
c0019c50:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019c57:	90                   	nop
c0019c58:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019c5f:	83 e0 04             	and    eax,0x4
c0019c62:	74 24                	je     c0019c88 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019c64:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019c6b:	83 c8 30             	or     eax,0x30
c0019c6e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019c75:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019c7c:	83 c8 02             	or     eax,0x2
c0019c7f:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019c86:	66 90                	xchg   ax,ax
c0019c88:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019c8f:	83 e0 02             	and    eax,0x2
c0019c92:	74 14                	je     c0019ca8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019c94:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019c9b:	83 c8 02             	or     eax,0x2
c0019c9e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ca8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019caf:	83 e0 08             	and    eax,0x8
c0019cb2:	74 14                	je     c0019cc8 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019cb4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019cbb:	83 c8 04             	or     eax,0x4
c0019cbe:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0019cc8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019ccf:	83 e0 10             	and    eax,0x10
c0019cd2:	74 14                	je     c0019ce8 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019cd4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019cdb:	83 c8 08             	or     eax,0x8
c0019cde:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ce8:	83 ec 0c             	sub    esp,0xc
c0019ceb:	68 28 02 00 00       	push   0x228
c0019cf0:	e8 de dd fe ff       	call   c0007ad3 <malloc>
c0019cf5:	83 c4 10             	add    esp,0x10
c0019cf8:	89 c2                	mov    edx,eax
c0019cfa:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019d01:	89 10                	mov    DWORD PTR [eax],edx
c0019d03:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019d0b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019d12:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d14:	83 ec 04             	sub    esp,0x4
c0019d17:	52                   	push   edx
c0019d18:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019d1c:	52                   	push   edx
c0019d1d:	50                   	push   eax
c0019d1e:	e8 7d 9f fe ff       	call   c0003ca0 <f_open>
c0019d23:	83 c4 10             	add    esp,0x10
c0019d26:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019d2d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019d35:	74 09                	je     c0019d40 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019d37:	b8 01 00 00 00       	mov    eax,0x1
c0019d3c:	eb 0a                	jmp    c0019d48 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019d3e:	66 90                	xchg   ax,ax
c0019d40:	b8 00 00 00 00       	mov    eax,0x0
c0019d45:	8d 76 00             	lea    esi,[esi+0x0]
c0019d48:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019d4e:	c3                   	ret    
c0019d4f:	90                   	nop

c0019d50 <FAT::openDir(char const*, void**)>:
c0019d50:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d56:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019d5e:	74 0c                	je     c0019d6c <FAT::openDir(char const*, void**)+0x1c>
c0019d60:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019d68:	75 0e                	jne    c0019d78 <FAT::openDir(char const*, void**)+0x28>
c0019d6a:	66 90                	xchg   ax,ax
c0019d6c:	b8 04 00 00 00       	mov    eax,0x4
c0019d71:	e9 82 00 00 00       	jmp    c0019df8 <FAT::openDir(char const*, void**)+0xa8>
c0019d76:	66 90                	xchg   ax,ax
c0019d78:	83 ec 08             	sub    esp,0x8
c0019d7b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d82:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d86:	50                   	push   eax
c0019d87:	e8 c4 68 fe ff       	call   c0000650 <strcpy>
c0019d8c:	83 c4 10             	add    esp,0x10
c0019d8f:	83 ec 08             	sub    esp,0x8
c0019d92:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d96:	50                   	push   eax
c0019d97:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d9e:	e8 f9 fd ff ff       	call   c0019b9c <FAT::fixFilepath(char*)>
c0019da3:	83 c4 10             	add    esp,0x10
c0019da6:	83 ec 0c             	sub    esp,0xc
c0019da9:	6a 30                	push   0x30
c0019dab:	e8 23 dd fe ff       	call   c0007ad3 <malloc>
c0019db0:	83 c4 10             	add    esp,0x10
c0019db3:	89 c2                	mov    edx,eax
c0019db5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019dbc:	89 10                	mov    DWORD PTR [eax],edx
c0019dbe:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019dc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0019dc7:	83 ec 08             	sub    esp,0x8
c0019dca:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019dce:	52                   	push   edx
c0019dcf:	50                   	push   eax
c0019dd0:	e8 5a a8 fe ff       	call   c000462f <f_opendir>
c0019dd5:	83 c4 10             	add    esp,0x10
c0019dd8:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019ddf:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019de7:	74 07                	je     c0019df0 <FAT::openDir(char const*, void**)+0xa0>
c0019de9:	b8 01 00 00 00       	mov    eax,0x1
c0019dee:	eb 08                	jmp    c0019df8 <FAT::openDir(char const*, void**)+0xa8>
c0019df0:	b8 00 00 00 00       	mov    eax,0x0
c0019df5:	8d 76 00             	lea    esi,[esi+0x0]
c0019df8:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019dfe:	c3                   	ret    
c0019dff:	90                   	nop

c0019e00 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019e00:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019e06:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019e0e:	75 0c                	jne    c0019e1c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019e10:	b8 04 00 00 00       	mov    eax,0x4
c0019e15:	e9 d6 00 00 00       	jmp    c0019ef0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019e1a:	66 90                	xchg   ax,ax
c0019e1c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019e24:	75 0a                	jne    c0019e30 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019e26:	b8 04 00 00 00       	mov    eax,0x4
c0019e2b:	e9 c0 00 00 00       	jmp    c0019ef0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019e30:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019e38:	75 0a                	jne    c0019e44 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019e3a:	b8 04 00 00 00       	mov    eax,0x4
c0019e3f:	e9 ac 00 00 00       	jmp    c0019ef0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019e44:	83 ec 08             	sub    esp,0x8
c0019e47:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019e4e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019e55:	50                   	push   eax
c0019e56:	e8 f5 67 fe ff       	call   c0000650 <strcpy>
c0019e5b:	83 c4 10             	add    esp,0x10
c0019e5e:	83 ec 08             	sub    esp,0x8
c0019e61:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019e68:	50                   	push   eax
c0019e69:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019e70:	e8 27 fd ff ff       	call   c0019b9c <FAT::fixFilepath(char*)>
c0019e75:	83 c4 10             	add    esp,0x10
c0019e78:	83 ec 08             	sub    esp,0x8
c0019e7b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019e7f:	50                   	push   eax
c0019e80:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019e87:	50                   	push   eax
c0019e88:	e8 21 a9 fe ff       	call   c00047ae <f_stat>
c0019e8d:	83 c4 10             	add    esp,0x10
c0019e90:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019e97:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019e9e:	85 c0                	test   eax,eax
c0019ea0:	74 0a                	je     c0019eac <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019ea2:	83 f8 04             	cmp    eax,0x4
c0019ea5:	74 39                	je     c0019ee0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019ea7:	eb 3f                	jmp    c0019ee8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019ea9:	8d 76 00             	lea    esi,[esi+0x0]
c0019eac:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019eb0:	0f b6 c0             	movzx  eax,al
c0019eb3:	83 e0 10             	and    eax,0x10
c0019eb6:	0f 95 c2             	setne  dl
c0019eb9:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019ec0:	88 10                	mov    BYTE PTR [eax],dl
c0019ec2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ec6:	ba 00 00 00 00       	mov    edx,0x0
c0019ecb:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019ed2:	89 01                	mov    DWORD PTR [ecx],eax
c0019ed4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019ed7:	b8 00 00 00 00       	mov    eax,0x0
c0019edc:	eb 12                	jmp    c0019ef0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019ede:	66 90                	xchg   ax,ax
c0019ee0:	b8 02 00 00 00       	mov    eax,0x2
c0019ee5:	eb 09                	jmp    c0019ef0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019ee7:	90                   	nop
c0019ee8:	b8 01 00 00 00       	mov    eax,0x1
c0019eed:	8d 76 00             	lea    esi,[esi+0x0]
c0019ef0:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019ef6:	c3                   	ret    
c0019ef7:	90                   	nop

c0019ef8 <FAT::unlink(char const*)>:
c0019ef8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019efe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019f06:	75 08                	jne    c0019f10 <FAT::unlink(char const*)+0x18>
c0019f08:	b8 04 00 00 00       	mov    eax,0x4
c0019f0d:	eb 61                	jmp    c0019f70 <FAT::unlink(char const*)+0x78>
c0019f0f:	90                   	nop
c0019f10:	83 ec 08             	sub    esp,0x8
c0019f13:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f1a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f1e:	50                   	push   eax
c0019f1f:	e8 2c 67 fe ff       	call   c0000650 <strcpy>
c0019f24:	83 c4 10             	add    esp,0x10
c0019f27:	83 ec 08             	sub    esp,0x8
c0019f2a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019f2e:	50                   	push   eax
c0019f2f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f36:	e8 61 fc ff ff       	call   c0019b9c <FAT::fixFilepath(char*)>
c0019f3b:	83 c4 10             	add    esp,0x10
c0019f3e:	83 ec 0c             	sub    esp,0xc
c0019f41:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f45:	50                   	push   eax
c0019f46:	e8 d5 aa fe ff       	call   c0004a20 <f_unlink>
c0019f4b:	83 c4 10             	add    esp,0x10
c0019f4e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019f55:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019f5c:	85 c0                	test   eax,eax
c0019f5e:	75 08                	jne    c0019f68 <FAT::unlink(char const*)+0x70>
c0019f60:	b8 00 00 00 00       	mov    eax,0x0
c0019f65:	eb 09                	jmp    c0019f70 <FAT::unlink(char const*)+0x78>
c0019f67:	90                   	nop
c0019f68:	b8 01 00 00 00       	mov    eax,0x1
c0019f6d:	8d 76 00             	lea    esi,[esi+0x0]
c0019f70:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019f76:	c3                   	ret    
c0019f77:	90                   	nop

c0019f78 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019f78:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019f7e:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0019f85:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0019f8c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019f90:	88 d0                	mov    al,dl
c0019f92:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019f96:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019f9e:	75 0c                	jne    c0019fac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0019fa0:	b8 04 00 00 00       	mov    eax,0x4
c0019fa5:	e9 7e 01 00 00       	jmp    c001a128 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019faa:	66 90                	xchg   ax,ax
c0019fac:	83 ec 08             	sub    esp,0x8
c0019faf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019fb6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019fba:	50                   	push   eax
c0019fbb:	e8 90 66 fe ff       	call   c0000650 <strcpy>
c0019fc0:	83 c4 10             	add    esp,0x10
c0019fc3:	83 ec 08             	sub    esp,0x8
c0019fc6:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019fca:	50                   	push   eax
c0019fcb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019fd2:	e8 c5 fb ff ff       	call   c0019b9c <FAT::fixFilepath(char*)>
c0019fd7:	83 c4 10             	add    esp,0x10
c0019fda:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019fe2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019fea:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019fef:	83 e0 01             	and    eax,0x1
c0019ff2:	74 14                	je     c001a008 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c0019ff4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019ffb:	83 c8 01             	or     eax,0x1
c0019ffe:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a005:	8d 76 00             	lea    esi,[esi+0x0]
c001a008:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a00d:	83 e0 02             	and    eax,0x2
c001a010:	74 12                	je     c001a024 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001a012:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a019:	83 c8 20             	or     eax,0x20
c001a01c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a023:	90                   	nop
c001a024:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a029:	83 e0 04             	and    eax,0x4
c001a02c:	74 12                	je     c001a040 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001a02e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a035:	83 c8 04             	or     eax,0x4
c001a038:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a03f:	90                   	nop
c001a040:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a045:	83 e0 08             	and    eax,0x8
c001a048:	74 12                	je     c001a05c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001a04a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a051:	83 c8 02             	or     eax,0x2
c001a054:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a05b:	90                   	nop
c001a05c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a061:	83 e0 01             	and    eax,0x1
c001a064:	74 12                	je     c001a078 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001a066:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a06d:	83 c8 01             	or     eax,0x1
c001a070:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a077:	90                   	nop
c001a078:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a07d:	83 e0 02             	and    eax,0x2
c001a080:	74 12                	je     c001a094 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001a082:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a089:	83 c8 20             	or     eax,0x20
c001a08c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a093:	90                   	nop
c001a094:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a099:	83 e0 04             	and    eax,0x4
c001a09c:	74 12                	je     c001a0b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001a09e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a0a5:	83 c8 04             	or     eax,0x4
c001a0a8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a0af:	90                   	nop
c001a0b0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a0b5:	83 e0 08             	and    eax,0x8
c001a0b8:	74 12                	je     c001a0cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001a0ba:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a0c1:	83 c8 02             	or     eax,0x2
c001a0c4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a0cb:	90                   	nop
c001a0cc:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a0d3:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a0da:	09 d0                	or     eax,edx
c001a0dc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a0e3:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a0eb:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a0f3:	83 ec 04             	sub    esp,0x4
c001a0f6:	52                   	push   edx
c001a0f7:	50                   	push   eax
c001a0f8:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a0fc:	50                   	push   eax
c001a0fd:	e8 91 ad fe ff       	call   c0004e93 <f_chmod>
c001a102:	83 c4 10             	add    esp,0x10
c001a105:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a10c:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a113:	85 c0                	test   eax,eax
c001a115:	75 09                	jne    c001a120 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001a117:	b8 00 00 00 00       	mov    eax,0x0
c001a11c:	eb 0a                	jmp    c001a128 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a11e:	66 90                	xchg   ax,ax
c001a120:	b8 01 00 00 00       	mov    eax,0x1
c001a125:	8d 76 00             	lea    esi,[esi+0x0]
c001a128:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a12e:	c3                   	ret    
c001a12f:	90                   	nop

c001a130 <FAT::rename(char const*, char const*)>:
c001a130:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a136:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a13e:	74 0c                	je     c001a14c <FAT::rename(char const*, char const*)+0x1c>
c001a140:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a148:	75 0e                	jne    c001a158 <FAT::rename(char const*, char const*)+0x28>
c001a14a:	66 90                	xchg   ax,ax
c001a14c:	b8 04 00 00 00       	mov    eax,0x4
c001a151:	e9 9e 00 00 00       	jmp    c001a1f4 <FAT::rename(char const*, char const*)+0xc4>
c001a156:	66 90                	xchg   ax,ax
c001a158:	83 ec 08             	sub    esp,0x8
c001a15b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a162:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a169:	50                   	push   eax
c001a16a:	e8 e1 64 fe ff       	call   c0000650 <strcpy>
c001a16f:	83 c4 10             	add    esp,0x10
c001a172:	83 ec 08             	sub    esp,0x8
c001a175:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a17c:	50                   	push   eax
c001a17d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a184:	e8 13 fa ff ff       	call   c0019b9c <FAT::fixFilepath(char*)>
c001a189:	83 c4 10             	add    esp,0x10
c001a18c:	83 ec 08             	sub    esp,0x8
c001a18f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a196:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a19a:	50                   	push   eax
c001a19b:	e8 b0 64 fe ff       	call   c0000650 <strcpy>
c001a1a0:	83 c4 10             	add    esp,0x10
c001a1a3:	83 ec 08             	sub    esp,0x8
c001a1a6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a1aa:	50                   	push   eax
c001a1ab:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a1b2:	e8 e5 f9 ff ff       	call   c0019b9c <FAT::fixFilepath(char*)>
c001a1b7:	83 c4 10             	add    esp,0x10
c001a1ba:	83 ec 08             	sub    esp,0x8
c001a1bd:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a1c1:	50                   	push   eax
c001a1c2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a1c9:	50                   	push   eax
c001a1ca:	e8 0c ab fe ff       	call   c0004cdb <f_rename>
c001a1cf:	83 c4 10             	add    esp,0x10
c001a1d2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a1d9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a1e0:	85 c0                	test   eax,eax
c001a1e2:	75 08                	jne    c001a1ec <FAT::rename(char const*, char const*)+0xbc>
c001a1e4:	b8 00 00 00 00       	mov    eax,0x0
c001a1e9:	eb 09                	jmp    c001a1f4 <FAT::rename(char const*, char const*)+0xc4>
c001a1eb:	90                   	nop
c001a1ec:	b8 01 00 00 00       	mov    eax,0x1
c001a1f1:	8d 76 00             	lea    esi,[esi+0x0]
c001a1f4:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a1fa:	c3                   	ret    
c001a1fb:	90                   	nop

c001a1fc <FAT::mkdir(char const*)>:
c001a1fc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a202:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a20a:	75 08                	jne    c001a214 <FAT::mkdir(char const*)+0x18>
c001a20c:	b8 04 00 00 00       	mov    eax,0x4
c001a211:	eb 61                	jmp    c001a274 <FAT::mkdir(char const*)+0x78>
c001a213:	90                   	nop
c001a214:	83 ec 08             	sub    esp,0x8
c001a217:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a21e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a222:	50                   	push   eax
c001a223:	e8 28 64 fe ff       	call   c0000650 <strcpy>
c001a228:	83 c4 10             	add    esp,0x10
c001a22b:	83 ec 08             	sub    esp,0x8
c001a22e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a232:	50                   	push   eax
c001a233:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a23a:	e8 5d f9 ff ff       	call   c0019b9c <FAT::fixFilepath(char*)>
c001a23f:	83 c4 10             	add    esp,0x10
c001a242:	83 ec 0c             	sub    esp,0xc
c001a245:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a249:	50                   	push   eax
c001a24a:	e8 f1 a8 fe ff       	call   c0004b40 <f_mkdir>
c001a24f:	83 c4 10             	add    esp,0x10
c001a252:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a259:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a260:	85 c0                	test   eax,eax
c001a262:	75 08                	jne    c001a26c <FAT::mkdir(char const*)+0x70>
c001a264:	b8 00 00 00 00       	mov    eax,0x0
c001a269:	eb 09                	jmp    c001a274 <FAT::mkdir(char const*)+0x78>
c001a26b:	90                   	nop
c001a26c:	b8 01 00 00 00       	mov    eax,0x1
c001a271:	8d 76 00             	lea    esi,[esi+0x0]
c001a274:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a27a:	c3                   	ret    
c001a27b:	90                   	nop

c001a27c <FAT::exists(char const*)>:
c001a27c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a282:	83 ec 08             	sub    esp,0x8
c001a285:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a28c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a290:	50                   	push   eax
c001a291:	e8 ba 63 fe ff       	call   c0000650 <strcpy>
c001a296:	83 c4 10             	add    esp,0x10
c001a299:	83 ec 08             	sub    esp,0x8
c001a29c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a2a0:	50                   	push   eax
c001a2a1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a2a8:	e8 ef f8 ff ff       	call   c0019b9c <FAT::fixFilepath(char*)>
c001a2ad:	83 c4 10             	add    esp,0x10
c001a2b0:	83 ec 08             	sub    esp,0x8
c001a2b3:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a2ba:	50                   	push   eax
c001a2bb:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a2bf:	50                   	push   eax
c001a2c0:	e8 e9 a4 fe ff       	call   c00047ae <f_stat>
c001a2c5:	83 c4 10             	add    esp,0x10
c001a2c8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a2cf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a2d6:	85 c0                	test   eax,eax
c001a2d8:	75 06                	jne    c001a2e0 <FAT::exists(char const*)+0x64>
c001a2da:	b0 01                	mov    al,0x1
c001a2dc:	eb 06                	jmp    c001a2e4 <FAT::exists(char const*)+0x68>
c001a2de:	66 90                	xchg   ax,ax
c001a2e0:	b0 00                	mov    al,0x0
c001a2e2:	66 90                	xchg   ax,ax
c001a2e4:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a2ea:	c3                   	ret    
c001a2eb:	90                   	nop

c001a2ec <isoReadDiscSectorHelper>:
c001a2ec:	83 ec 2c             	sub    esp,0x2c
c001a2ef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a2f3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a2f7:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a2fc:	83 e8 41             	sub    eax,0x41
c001a2ff:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c001a306:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a30a:	ba 00 00 00 00       	mov    edx,0x0
c001a30f:	83 ec 0c             	sub    esp,0xc
c001a312:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a316:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a31a:	52                   	push   edx
c001a31b:	50                   	push   eax
c001a31c:	51                   	push   ecx
c001a31d:	e8 08 3a ff ff       	call   c000dd2a <LogicalDisk::read(unsigned long long, int, void*)>
c001a322:	83 c4 20             	add    esp,0x20
c001a325:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a329:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a32e:	74 0c                	je     c001a33c <isoReadDiscSectorHelper+0x50>
c001a330:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a334:	c1 e0 0b             	shl    eax,0xb
c001a337:	eb 0b                	jmp    c001a344 <isoReadDiscSectorHelper+0x58>
c001a339:	8d 76 00             	lea    esi,[esi+0x0]
c001a33c:	b8 00 00 00 00       	mov    eax,0x0
c001a341:	8d 76 00             	lea    esi,[esi+0x0]
c001a344:	83 c4 2c             	add    esp,0x2c
c001a347:	c3                   	ret    

c001a348 <iso_kprintf>:
c001a348:	83 ec 0c             	sub    esp,0xc
c001a34b:	83 ec 08             	sub    esp,0x8
c001a34e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a352:	68 da 2a 02 c0       	push   0xc0022ada
c001a357:	e8 ae 05 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a35c:	83 c4 10             	add    esp,0x10
c001a35f:	90                   	nop
c001a360:	83 c4 0c             	add    esp,0xc
c001a363:	c3                   	ret    

c001a364 <iso_kprintfd>:
c001a364:	83 ec 0c             	sub    esp,0xc
c001a367:	83 ec 08             	sub    esp,0x8
c001a36a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a36e:	68 5a 12 02 c0       	push   0xc002125a
c001a373:	e8 92 05 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a378:	83 c4 10             	add    esp,0x10
c001a37b:	90                   	nop
c001a37c:	83 c4 0c             	add    esp,0xc
c001a37f:	c3                   	ret    

c001a380 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a380:	b8 08 00 00 00       	mov    eax,0x8
c001a385:	c3                   	ret    

c001a386 <ISO9660::truncate(void*, unsigned long long)>:
c001a386:	b8 01 00 00 00       	mov    eax,0x1
c001a38b:	c3                   	ret    

c001a38c <ISO9660::getName()>:
c001a38c:	b8 90 2d 02 c0       	mov    eax,0xc0022d90
c001a391:	c3                   	ret    

c001a392 <ISO9660::closeDir(void*)>:
c001a392:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a396:	8b 00                	mov    eax,DWORD PTR [eax]
c001a398:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a39b:	90                   	nop

c001a39c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a39c:	b8 01 00 00 00       	mov    eax,0x1
c001a3a1:	c3                   	ret    

c001a3a2 <ISO9660::unlink(char const*)>:
c001a3a2:	b8 01 00 00 00       	mov    eax,0x1
c001a3a7:	c3                   	ret    

c001a3a8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a3a8:	b8 03 00 00 00       	mov    eax,0x3
c001a3ad:	c3                   	ret    

c001a3ae <ISO9660::rename(char const*, char const*)>:
c001a3ae:	b8 01 00 00 00       	mov    eax,0x1
c001a3b3:	c3                   	ret    

c001a3b4 <ISO9660::mkdir(char const*)>:
c001a3b4:	b8 01 00 00 00       	mov    eax,0x1
c001a3b9:	c3                   	ret    

c001a3ba <ISO9660::~ISO9660()>:
c001a3ba:	83 ec 0c             	sub    esp,0xc
c001a3bd:	ba d0 2e 02 c0       	mov    edx,0xc0022ed0
c001a3c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3c6:	89 10                	mov    DWORD PTR [eax],edx
c001a3c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3cc:	83 ec 0c             	sub    esp,0xc
c001a3cf:	50                   	push   eax
c001a3d0:	e8 69 13 ff ff       	call   c000b73e <Filesystem::~Filesystem()>
c001a3d5:	83 c4 10             	add    esp,0x10
c001a3d8:	90                   	nop
c001a3d9:	83 c4 0c             	add    esp,0xc
c001a3dc:	c3                   	ret    
c001a3dd:	90                   	nop

c001a3de <ISO9660::~ISO9660()>:
c001a3de:	83 ec 0c             	sub    esp,0xc
c001a3e1:	83 ec 0c             	sub    esp,0xc
c001a3e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3e8:	e8 cd ff ff ff       	call   c001a3ba <ISO9660::~ISO9660()>
c001a3ed:	83 c4 10             	add    esp,0x10
c001a3f0:	83 ec 08             	sub    esp,0x8
c001a3f3:	6a 08                	push   0x8
c001a3f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3f9:	e8 0e 04 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001a3fe:	83 c4 10             	add    esp,0x10
c001a401:	83 c4 0c             	add    esp,0xc
c001a404:	c3                   	ret    
c001a405:	90                   	nop

c001a406 <ISO9660::exists(char const*)>:
c001a406:	83 ec 18             	sub    esp,0x18
c001a409:	68 ab 2d 02 c0       	push   0xc0022dab
c001a40e:	e8 f4 70 ff ff       	call   c0011507 <KePanic(char const*)>
c001a413:	31 c0                	xor    eax,eax
c001a415:	83 c4 1c             	add    esp,0x1c
c001a418:	c3                   	ret    
c001a419:	90                   	nop

c001a41a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a41a:	56                   	push   esi
c001a41b:	53                   	push   ebx
c001a41c:	53                   	push   ebx
c001a41d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a421:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a425:	85 db                	test   ebx,ebx
c001a427:	0f 84 ca 00 00 00    	je     c001a4f7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a42d:	85 f6                	test   esi,esi
c001a42f:	0f 84 c2 00 00 00    	je     c001a4f7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a435:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a43a:	b8 03 00 00 00       	mov    eax,0x3
c001a43f:	0f 85 b7 00 00 00    	jne    c001a4fc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a445:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a447:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a44d:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a454:	74 1b                	je     c001a471 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a456:	85 c0                	test   eax,eax
c001a458:	74 10                	je     c001a46a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a45a:	83 ec 0c             	sub    esp,0xc
c001a45d:	68 c9 2d 02 c0       	push   0xc0022dc9
c001a462:	e8 a0 70 ff ff       	call   c0011507 <KePanic(char const*)>
c001a467:	83 c4 10             	add    esp,0x10
c001a46a:	8a 03                	mov    al,BYTE PTR [ebx]
c001a46c:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a471:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a474:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a47b:	85 c0                	test   eax,eax
c001a47d:	74 09                	je     c001a488 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a47f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a486:	74 48                	je     c001a4d0 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a488:	83 ec 0c             	sub    esp,0xc
c001a48b:	68 d9 2d 02 c0       	push   0xc0022dd9
c001a490:	e8 75 04 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a495:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a498:	83 c4 10             	add    esp,0x10
c001a49b:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a4a2:	85 c0                	test   eax,eax
c001a4a4:	74 17                	je     c001a4bd <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a4a6:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a4ad:	83 ec 0c             	sub    esp,0xc
c001a4b0:	68 f9 2d 02 c0       	push   0xc0022df9
c001a4b5:	e8 50 04 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a4ba:	83 c4 10             	add    esp,0x10
c001a4bd:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a4c4:	83 ec 0c             	sub    esp,0xc
c001a4c7:	50                   	push   eax
c001a4c8:	e8 9a c5 fe ff       	call   c0006a67 <init_percd>
c001a4cd:	83 c4 10             	add    esp,0x10
c001a4d0:	51                   	push   ecx
c001a4d1:	83 c3 03             	add    ebx,0x3
c001a4d4:	51                   	push   ecx
c001a4d5:	6a 00                	push   0x0
c001a4d7:	53                   	push   ebx
c001a4d8:	e8 4d c0 fe ff       	call   c000652a <iso_open>
c001a4dd:	83 c4 10             	add    esp,0x10
c001a4e0:	89 c2                	mov    edx,eax
c001a4e2:	b8 01 00 00 00       	mov    eax,0x1
c001a4e7:	83 fa ff             	cmp    edx,0xffffffff
c001a4ea:	74 10                	je     c001a4fc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a4ec:	83 c2 32             	add    edx,0x32
c001a4ef:	31 c0                	xor    eax,eax
c001a4f1:	01 d2                	add    edx,edx
c001a4f3:	89 16                	mov    DWORD PTR [esi],edx
c001a4f5:	eb 05                	jmp    c001a4fc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a4f7:	b8 04 00 00 00       	mov    eax,0x4
c001a4fc:	5a                   	pop    edx
c001a4fd:	5b                   	pop    ebx
c001a4fe:	5e                   	pop    esi
c001a4ff:	c3                   	ret    

c001a500 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a500:	53                   	push   ebx
c001a501:	83 ec 08             	sub    esp,0x8
c001a504:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a508:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a50c:	85 c0                	test   eax,eax
c001a50e:	74 2d                	je     c001a53d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a510:	85 db                	test   ebx,ebx
c001a512:	74 29                	je     c001a53d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a514:	52                   	push   edx
c001a515:	b9 02 00 00 00       	mov    ecx,0x2
c001a51a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a51e:	99                   	cdq    
c001a51f:	f7 f9                	idiv   ecx
c001a521:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a525:	83 e8 32             	sub    eax,0x32
c001a528:	50                   	push   eax
c001a529:	e8 a4 c0 fe ff       	call   c00065d2 <iso_read>
c001a52e:	83 c4 10             	add    esp,0x10
c001a531:	89 03                	mov    DWORD PTR [ebx],eax
c001a533:	09 d0                	or     eax,edx
c001a535:	0f 94 c0             	sete   al
c001a538:	0f b6 c0             	movzx  eax,al
c001a53b:	eb 05                	jmp    c001a542 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a53d:	b8 04 00 00 00       	mov    eax,0x4
c001a542:	83 c4 08             	add    esp,0x8
c001a545:	5b                   	pop    ebx
c001a546:	c3                   	ret    
c001a547:	90                   	nop

c001a548 <ISO9660::seek(void*, unsigned long long)>:
c001a548:	57                   	push   edi
c001a549:	b8 04 00 00 00       	mov    eax,0x4
c001a54e:	56                   	push   esi
c001a54f:	51                   	push   ecx
c001a550:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a554:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a558:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a55c:	85 d2                	test   edx,edx
c001a55e:	74 26                	je     c001a586 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a560:	89 d0                	mov    eax,edx
c001a562:	b9 02 00 00 00       	mov    ecx,0x2
c001a567:	6a 00                	push   0x0
c001a569:	99                   	cdq    
c001a56a:	f7 f9                	idiv   ecx
c001a56c:	57                   	push   edi
c001a56d:	56                   	push   esi
c001a56e:	83 e8 32             	sub    eax,0x32
c001a571:	50                   	push   eax
c001a572:	e8 71 c1 fe ff       	call   c00066e8 <iso_seek>
c001a577:	83 c4 10             	add    esp,0x10
c001a57a:	31 f0                	xor    eax,esi
c001a57c:	31 fa                	xor    edx,edi
c001a57e:	09 d0                	or     eax,edx
c001a580:	0f 95 c0             	setne  al
c001a583:	0f b6 c0             	movzx  eax,al
c001a586:	5a                   	pop    edx
c001a587:	5e                   	pop    esi
c001a588:	5f                   	pop    edi
c001a589:	c3                   	ret    

c001a58a <ISO9660::tell(void*, unsigned long long*)>:
c001a58a:	53                   	push   ebx
c001a58b:	83 ec 08             	sub    esp,0x8
c001a58e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a592:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a596:	85 c0                	test   eax,eax
c001a598:	74 24                	je     c001a5be <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a59a:	85 db                	test   ebx,ebx
c001a59c:	74 20                	je     c001a5be <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a59e:	b9 02 00 00 00       	mov    ecx,0x2
c001a5a3:	99                   	cdq    
c001a5a4:	f7 f9                	idiv   ecx
c001a5a6:	83 ec 0c             	sub    esp,0xc
c001a5a9:	83 e8 32             	sub    eax,0x32
c001a5ac:	50                   	push   eax
c001a5ad:	e8 ba c1 fe ff       	call   c000676c <iso_tell>
c001a5b2:	83 c4 10             	add    esp,0x10
c001a5b5:	89 03                	mov    DWORD PTR [ebx],eax
c001a5b7:	31 c0                	xor    eax,eax
c001a5b9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a5bc:	eb 05                	jmp    c001a5c3 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a5be:	b8 04 00 00 00       	mov    eax,0x4
c001a5c3:	83 c4 08             	add    esp,0x8
c001a5c6:	5b                   	pop    ebx
c001a5c7:	c3                   	ret    

c001a5c8 <ISO9660::stat(void*, unsigned long long*)>:
c001a5c8:	56                   	push   esi
c001a5c9:	53                   	push   ebx
c001a5ca:	83 ec 10             	sub    esp,0x10
c001a5cd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a5d1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a5d5:	68 1d 2e 02 c0       	push   0xc0022e1d
c001a5da:	e8 2b 03 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a5df:	83 c4 10             	add    esp,0x10
c001a5e2:	85 db                	test   ebx,ebx
c001a5e4:	74 2a                	je     c001a610 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a5e6:	85 f6                	test   esi,esi
c001a5e8:	74 26                	je     c001a610 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a5ea:	89 d8                	mov    eax,ebx
c001a5ec:	b9 02 00 00 00       	mov    ecx,0x2
c001a5f1:	99                   	cdq    
c001a5f2:	83 ec 0c             	sub    esp,0xc
c001a5f5:	f7 f9                	idiv   ecx
c001a5f7:	83 e8 32             	sub    eax,0x32
c001a5fa:	50                   	push   eax
c001a5fb:	e8 9d c1 fe ff       	call   c000679d <iso_total>
c001a600:	83 c4 10             	add    esp,0x10
c001a603:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a60a:	89 06                	mov    DWORD PTR [esi],eax
c001a60c:	31 c0                	xor    eax,eax
c001a60e:	eb 05                	jmp    c001a615 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a610:	b8 04 00 00 00       	mov    eax,0x4
c001a615:	5a                   	pop    edx
c001a616:	5b                   	pop    ebx
c001a617:	5e                   	pop    esi
c001a618:	c3                   	ret    
c001a619:	90                   	nop

c001a61a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a61a:	55                   	push   ebp
c001a61b:	57                   	push   edi
c001a61c:	56                   	push   esi
c001a61d:	53                   	push   ebx
c001a61e:	83 ec 18             	sub    esp,0x18
c001a621:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a625:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a629:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a62d:	68 25 2e 02 c0       	push   0xc0022e25
c001a632:	e8 d3 02 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a637:	83 c4 10             	add    esp,0x10
c001a63a:	85 ff                	test   edi,edi
c001a63c:	0f 94 c0             	sete   al
c001a63f:	85 f6                	test   esi,esi
c001a641:	0f 94 c2             	sete   dl
c001a644:	09 d0                	or     eax,edx
c001a646:	a8 01                	test   al,0x1
c001a648:	0f 85 dd 00 00 00    	jne    c001a72b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a64e:	85 db                	test   ebx,ebx
c001a650:	0f 84 d5 00 00 00    	je     c001a72b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a656:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a659:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a65f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a666:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a66d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a66f:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a675:	74 1b                	je     c001a692 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a677:	85 c0                	test   eax,eax
c001a679:	74 10                	je     c001a68b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a67b:	83 ec 0c             	sub    esp,0xc
c001a67e:	68 c9 2d 02 c0       	push   0xc0022dc9
c001a683:	e8 7f 6e ff ff       	call   c0011507 <KePanic(char const*)>
c001a688:	83 c4 10             	add    esp,0x10
c001a68b:	8a 03                	mov    al,BYTE PTR [ebx]
c001a68d:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a692:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a695:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a69c:	85 c0                	test   eax,eax
c001a69e:	74 09                	je     c001a6a9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a6a0:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a6a7:	74 51                	je     c001a6fa <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a6a9:	83 ec 0c             	sub    esp,0xc
c001a6ac:	68 2d 2e 02 c0       	push   0xc0022e2d
c001a6b1:	e8 54 02 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a6b6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a6b9:	83 c4 10             	add    esp,0x10
c001a6bc:	83 3c 85 7c b7 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4884],0x0
c001a6c4:	74 21                	je     c001a6e7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a6c6:	83 ec 0c             	sub    esp,0xc
c001a6c9:	68 4d 2e 02 c0       	push   0xc0022e4d
c001a6ce:	e8 37 02 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a6d3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a6d6:	83 c4 10             	add    esp,0x10
c001a6d9:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a6e0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a6e7:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a6ee:	83 ec 0c             	sub    esp,0xc
c001a6f1:	50                   	push   eax
c001a6f2:	e8 70 c3 fe ff       	call   c0006a67 <init_percd>
c001a6f7:	83 c4 10             	add    esp,0x10
c001a6fa:	52                   	push   edx
c001a6fb:	83 c3 03             	add    ebx,0x3
c001a6fe:	52                   	push   edx
c001a6ff:	6a 00                	push   0x0
c001a701:	53                   	push   ebx
c001a702:	e8 23 be fe ff       	call   c000652a <iso_open>
c001a707:	83 c4 10             	add    esp,0x10
c001a70a:	83 f8 ff             	cmp    eax,0xffffffff
c001a70d:	89 c5                	mov    ebp,eax
c001a70f:	75 21                	jne    c001a732 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a711:	50                   	push   eax
c001a712:	50                   	push   eax
c001a713:	6a 01                	push   0x1
c001a715:	53                   	push   ebx
c001a716:	e8 0f be fe ff       	call   c000652a <iso_open>
c001a71b:	83 c4 10             	add    esp,0x10
c001a71e:	ba 02 00 00 00       	mov    edx,0x2
c001a723:	40                   	inc    eax
c001a724:	74 2b                	je     c001a751 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a726:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a729:	eb 24                	jmp    c001a74f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a72b:	ba 04 00 00 00       	mov    edx,0x4
c001a730:	eb 1f                	jmp    c001a751 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a732:	83 ec 0c             	sub    esp,0xc
c001a735:	50                   	push   eax
c001a736:	e8 62 c0 fe ff       	call   c000679d <iso_total>
c001a73b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a742:	89 07                	mov    DWORD PTR [edi],eax
c001a744:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a747:	e8 68 be fe ff       	call   c00065b4 <iso_close>
c001a74c:	83 c4 10             	add    esp,0x10
c001a74f:	31 d2                	xor    edx,edx
c001a751:	83 c4 0c             	add    esp,0xc
c001a754:	89 d0                	mov    eax,edx
c001a756:	5b                   	pop    ebx
c001a757:	5e                   	pop    esi
c001a758:	5f                   	pop    edi
c001a759:	5d                   	pop    ebp
c001a75a:	c3                   	ret    
c001a75b:	90                   	nop

c001a75c <ISO9660::close(void*)>:
c001a75c:	83 ec 0c             	sub    esp,0xc
c001a75f:	b8 04 00 00 00       	mov    eax,0x4
c001a764:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a768:	85 d2                	test   edx,edx
c001a76a:	74 1b                	je     c001a787 <ISO9660::close(void*)+0x2b>
c001a76c:	89 d0                	mov    eax,edx
c001a76e:	b9 02 00 00 00       	mov    ecx,0x2
c001a773:	99                   	cdq    
c001a774:	83 ec 0c             	sub    esp,0xc
c001a777:	f7 f9                	idiv   ecx
c001a779:	83 e8 32             	sub    eax,0x32
c001a77c:	50                   	push   eax
c001a77d:	e8 32 be fe ff       	call   c00065b4 <iso_close>
c001a782:	83 c4 10             	add    esp,0x10
c001a785:	31 c0                	xor    eax,eax
c001a787:	83 c4 0c             	add    esp,0xc
c001a78a:	c3                   	ret    
c001a78b:	90                   	nop

c001a78c <ISO9660::openDir(char const*, void**)>:
c001a78c:	56                   	push   esi
c001a78d:	53                   	push   ebx
c001a78e:	50                   	push   eax
c001a78f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a793:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a797:	85 db                	test   ebx,ebx
c001a799:	0f 84 bd 00 00 00    	je     c001a85c <ISO9660::openDir(char const*, void**)+0xd0>
c001a79f:	85 f6                	test   esi,esi
c001a7a1:	0f 84 b5 00 00 00    	je     c001a85c <ISO9660::openDir(char const*, void**)+0xd0>
c001a7a7:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a7a9:	38 15 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,dl
c001a7af:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a7b6:	74 1b                	je     c001a7d3 <ISO9660::openDir(char const*, void**)+0x47>
c001a7b8:	85 c0                	test   eax,eax
c001a7ba:	74 10                	je     c001a7cc <ISO9660::openDir(char const*, void**)+0x40>
c001a7bc:	83 ec 0c             	sub    esp,0xc
c001a7bf:	68 c9 2d 02 c0       	push   0xc0022dc9
c001a7c4:	e8 3e 6d ff ff       	call   c0011507 <KePanic(char const*)>
c001a7c9:	83 c4 10             	add    esp,0x10
c001a7cc:	8a 03                	mov    al,BYTE PTR [ebx]
c001a7ce:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a7d3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a7d6:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a7dd:	85 c0                	test   eax,eax
c001a7df:	74 10                	je     c001a7f1 <ISO9660::openDir(char const*, void**)+0x65>
c001a7e1:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a7e8:	74 1a                	je     c001a804 <ISO9660::openDir(char const*, void**)+0x78>
c001a7ea:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a7f1:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a7f8:	83 ec 0c             	sub    esp,0xc
c001a7fb:	50                   	push   eax
c001a7fc:	e8 66 c2 fe ff       	call   c0006a67 <init_percd>
c001a801:	83 c4 10             	add    esp,0x10
c001a804:	50                   	push   eax
c001a805:	83 c3 03             	add    ebx,0x3
c001a808:	50                   	push   eax
c001a809:	6a 01                	push   0x1
c001a80b:	53                   	push   ebx
c001a80c:	e8 19 bd fe ff       	call   c000652a <iso_open>
c001a811:	83 c4 10             	add    esp,0x10
c001a814:	83 f8 ff             	cmp    eax,0xffffffff
c001a817:	89 c3                	mov    ebx,eax
c001a819:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a81e:	75 1c                	jne    c001a83c <ISO9660::openDir(char const*, void**)+0xb0>
c001a820:	53                   	push   ebx
c001a821:	53                   	push   ebx
c001a822:	68 71 2e 02 c0       	push   0xc0022e71
c001a827:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a82d:	e8 7a e2 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a832:	83 c4 10             	add    esp,0x10
c001a835:	b8 01 00 00 00       	mov    eax,0x1
c001a83a:	eb 25                	jmp    c001a861 <ISO9660::openDir(char const*, void**)+0xd5>
c001a83c:	51                   	push   ecx
c001a83d:	01 db                	add    ebx,ebx
c001a83f:	51                   	push   ecx
c001a840:	83 c3 65             	add    ebx,0x65
c001a843:	68 84 2e 02 c0       	push   0xc0022e84
c001a848:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a84e:	e8 59 e2 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a853:	83 c4 10             	add    esp,0x10
c001a856:	31 c0                	xor    eax,eax
c001a858:	89 1e                	mov    DWORD PTR [esi],ebx
c001a85a:	eb 05                	jmp    c001a861 <ISO9660::openDir(char const*, void**)+0xd5>
c001a85c:	b8 04 00 00 00       	mov    eax,0x4
c001a861:	5a                   	pop    edx
c001a862:	5b                   	pop    ebx
c001a863:	5e                   	pop    esi
c001a864:	c3                   	ret    
c001a865:	90                   	nop

c001a866 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a866:	55                   	push   ebp
c001a867:	57                   	push   edi
c001a868:	56                   	push   esi
c001a869:	53                   	push   ebx
c001a86a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a870:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001a877:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a87e:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001a885:	85 db                	test   ebx,ebx
c001a887:	0f 84 e4 00 00 00    	je     c001a971 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a88d:	85 ed                	test   ebp,ebp
c001a88f:	0f 84 dc 00 00 00    	je     c001a971 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a895:	83 ec 0c             	sub    esp,0xc
c001a898:	68 97 2e 02 c0       	push   0xc0022e97
c001a89d:	e8 68 00 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a8a2:	89 d8                	mov    eax,ebx
c001a8a4:	b9 02 00 00 00       	mov    ecx,0x2
c001a8a9:	99                   	cdq    
c001a8aa:	f7 f9                	idiv   ecx
c001a8ac:	83 e8 32             	sub    eax,0x32
c001a8af:	89 04 24             	mov    DWORD PTR [esp],eax
c001a8b2:	e8 38 bf fe ff       	call   c00067ef <iso_readdir>
c001a8b7:	83 c4 10             	add    esp,0x10
c001a8ba:	85 c0                	test   eax,eax
c001a8bc:	89 c3                	mov    ebx,eax
c001a8be:	75 38                	jne    c001a8f8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001a8c0:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a8c5:	53                   	push   ebx
c001a8c6:	53                   	push   ebx
c001a8c7:	68 a2 2e 02 c0       	push   0xc0022ea2
c001a8cc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a8d2:	e8 d5 e1 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a8d7:	83 c4 0c             	add    esp,0xc
c001a8da:	68 10 01 00 00       	push   0x110
c001a8df:	6a 00                	push   0x0
c001a8e1:	57                   	push   edi
c001a8e2:	e8 09 5c fe ff       	call   c00004f0 <memset>
c001a8e7:	83 c4 10             	add    esp,0x10
c001a8ea:	b8 01 00 00 00       	mov    eax,0x1
c001a8ef:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001a8f6:	eb 7e                	jmp    c001a976 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a8f8:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a8fe:	8d 70 08             	lea    esi,[eax+0x8]
c001a901:	83 ec 0c             	sub    esp,0xc
c001a904:	56                   	push   esi
c001a905:	e8 76 5c fe ff       	call   c0000580 <strlen>
c001a90a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a912:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a916:	83 c4 10             	add    esp,0x10
c001a919:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001a91d:	75 0a                	jne    c001a929 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001a91f:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001a922:	b8 02 00 00 00       	mov    eax,0x2
c001a927:	74 05                	je     c001a92e <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001a929:	b8 01 00 00 00       	mov    eax,0x1
c001a92e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a932:	50                   	push   eax
c001a933:	50                   	push   eax
c001a934:	56                   	push   esi
c001a935:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a939:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a93d:	50                   	push   eax
c001a93e:	e8 0d 5d fe ff       	call   c0000650 <strcpy>
c001a943:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a94a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a94c:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001a953:	5a                   	pop    edx
c001a954:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a959:	59                   	pop    ecx
c001a95a:	68 b5 2e 02 c0       	push   0xc0022eb5
c001a95f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a965:	e8 42 e1 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a96a:	83 c4 10             	add    esp,0x10
c001a96d:	31 c0                	xor    eax,eax
c001a96f:	eb 05                	jmp    c001a976 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a971:	b8 04 00 00 00       	mov    eax,0x4
c001a976:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a97c:	5b                   	pop    ebx
c001a97d:	5e                   	pop    esi
c001a97e:	5f                   	pop    edi
c001a97f:	5d                   	pop    ebp
c001a980:	c3                   	ret    

c001a981 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a981:	57                   	push   edi
c001a982:	56                   	push   esi
c001a983:	53                   	push   ebx
c001a984:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a988:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a98c:	39 35 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,esi
c001a992:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a996:	0f be cb             	movsx  ecx,bl
c001a999:	75 0b                	jne    c001a9a6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a99b:	0f be 05 e0 40 02 c0 	movsx  eax,BYTE PTR ds:0xc00240e0
c001a9a2:	39 c8                	cmp    eax,ecx
c001a9a4:	74 47                	je     c001a9ed <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a9a6:	83 ec 0c             	sub    esp,0xc
c001a9a9:	31 d2                	xor    edx,edx
c001a9ab:	68 a0 c8 02 c0       	push   0xc002c8a0
c001a9b0:	6a 01                	push   0x1
c001a9b2:	52                   	push   edx
c001a9b3:	56                   	push   esi
c001a9b4:	ff 34 8d 7c b7 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4884]
c001a9bb:	e8 6a 33 ff ff       	call   c000dd2a <LogicalDisk::read(unsigned long long, int, void*)>
c001a9c0:	83 c4 20             	add    esp,0x20
c001a9c3:	85 c0                	test   eax,eax
c001a9c5:	75 0e                	jne    c001a9d5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001a9c7:	89 35 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,esi
c001a9cd:	88 1d e0 40 02 c0    	mov    BYTE PTR ds:0xc00240e0,bl
c001a9d3:	eb 18                	jmp    c001a9ed <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a9d5:	50                   	push   eax
c001a9d6:	68 00 08 00 00       	push   0x800
c001a9db:	6a 00                	push   0x0
c001a9dd:	57                   	push   edi
c001a9de:	e8 0d 5b fe ff       	call   c00004f0 <memset>
c001a9e3:	83 c4 10             	add    esp,0x10
c001a9e6:	b8 01 00 00 00       	mov    eax,0x1
c001a9eb:	eb 0e                	jmp    c001a9fb <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001a9ed:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c001a9f2:	b9 00 08 00 00       	mov    ecx,0x800
c001a9f7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a9f9:	31 c0                	xor    eax,eax
c001a9fb:	5b                   	pop    ebx
c001a9fc:	5e                   	pop    esi
c001a9fd:	5f                   	pop    edi
c001a9fe:	c3                   	ret    
c001a9ff:	90                   	nop

c001aa00 <ISO9660::tryMount(LogicalDisk*, int)>:
c001aa00:	53                   	push   ebx
c001aa01:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001aa07:	c7 05 84 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c884,0xdeadbeef
c001aa11:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001aa18:	8d 58 41             	lea    ebx,[eax+0x41]
c001aa1b:	0f be db             	movsx  ebx,bl
c001aa1e:	53                   	push   ebx
c001aa1f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aa23:	50                   	push   eax
c001aa24:	6a 10                	push   0x10
c001aa26:	e8 56 ff ff ff       	call   c001a981 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001aa2b:	83 c4 10             	add    esp,0x10
c001aa2e:	31 d2                	xor    edx,edx
c001aa30:	85 c0                	test   eax,eax
c001aa32:	75 33                	jne    c001aa67 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aa34:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001aa39:	75 2c                	jne    c001aa67 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aa3b:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001aa40:	75 25                	jne    c001aa67 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aa42:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001aa47:	75 1e                	jne    c001aa67 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aa49:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001aa4e:	75 17                	jne    c001aa67 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aa50:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001aa55:	75 10                	jne    c001aa67 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aa57:	83 ec 0c             	sub    esp,0xc
c001aa5a:	53                   	push   ebx
c001aa5b:	e8 07 c0 fe ff       	call   c0006a67 <init_percd>
c001aa60:	83 c4 10             	add    esp,0x10
c001aa63:	40                   	inc    eax
c001aa64:	0f 95 c2             	setne  dl
c001aa67:	81 c4 08 08 00 00    	add    esp,0x808
c001aa6d:	88 d0                	mov    al,dl
c001aa6f:	5b                   	pop    ebx
c001aa70:	c3                   	ret    
c001aa71:	90                   	nop

c001aa72 <ISO9660::ISO9660()>:
c001aa72:	83 ec 0c             	sub    esp,0xc
c001aa75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa79:	83 ec 0c             	sub    esp,0xc
c001aa7c:	50                   	push   eax
c001aa7d:	e8 98 0c ff ff       	call   c000b71a <Filesystem::Filesystem()>
c001aa82:	83 c4 10             	add    esp,0x10
c001aa85:	ba d0 2e 02 c0       	mov    edx,0xc0022ed0
c001aa8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa8e:	89 10                	mov    DWORD PTR [eax],edx
c001aa90:	e8 e4 c0 fe ff       	call   c0006b79 <fs_iso9660_init>
c001aa95:	90                   	nop
c001aa96:	83 c4 0c             	add    esp,0xc
c001aa99:	c3                   	ret    

c001aa9a <SoundCard::beginPlayback()>:
c001aa9a:	c7 44 24 04 34 2f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022f34
c001aaa2:	e9 60 6a ff ff       	jmp    c0011507 <KePanic(char const*)>
c001aaa7:	90                   	nop

c001aaa8 <SoundCard::stopPlayback()>:
c001aaa8:	c7 44 24 04 34 2f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022f34
c001aab0:	e9 52 6a ff ff       	jmp    c0011507 <KePanic(char const*)>
c001aab5:	90                   	nop

c001aab6 <SoundCard::SoundCard(char const*)>:
c001aab6:	83 ec 1c             	sub    esp,0x1c
c001aab9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aabd:	83 ec 08             	sub    esp,0x8
c001aac0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aac4:	50                   	push   eax
c001aac5:	e8 0e 20 ff ff       	call   c000cad8 <Device::Device(char const*)>
c001aaca:	83 c4 10             	add    esp,0x10
c001aacd:	ba 80 2f 02 c0       	mov    edx,0xc0022f80
c001aad2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aad6:	89 10                	mov    DWORD PTR [eax],edx
c001aad8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aadc:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001aae3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aae7:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001aaf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aaf5:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001aaff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab03:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001ab0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab11:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001ab1b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ab23:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ab28:	7f 1a                	jg     c001ab44 <SoundCard::SoundCard(char const*)+0x8e>
c001ab2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab2e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ab32:	83 c2 54             	add    edx,0x54
c001ab35:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001ab3d:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001ab42:	eb df                	jmp    c001ab23 <SoundCard::SoundCard(char const*)+0x6d>
c001ab44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab48:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ab4f:	90                   	nop
c001ab50:	83 c4 1c             	add    esp,0x1c
c001ab53:	c3                   	ret    

c001ab54 <SoundCard::~SoundCard()>:
c001ab54:	83 ec 0c             	sub    esp,0xc
c001ab57:	ba 80 2f 02 c0       	mov    edx,0xc0022f80
c001ab5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab60:	89 10                	mov    DWORD PTR [eax],edx
c001ab62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab66:	83 ec 0c             	sub    esp,0xc
c001ab69:	50                   	push   eax
c001ab6a:	e8 d3 1c ff ff       	call   c000c842 <Device::~Device()>
c001ab6f:	83 c4 10             	add    esp,0x10
c001ab72:	90                   	nop
c001ab73:	83 c4 0c             	add    esp,0xc
c001ab76:	c3                   	ret    
c001ab77:	90                   	nop

c001ab78 <SoundCard::~SoundCard()>:
c001ab78:	83 ec 0c             	sub    esp,0xc
c001ab7b:	83 ec 0c             	sub    esp,0xc
c001ab7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab82:	e8 cd ff ff ff       	call   c001ab54 <SoundCard::~SoundCard()>
c001ab87:	83 c4 10             	add    esp,0x10
c001ab8a:	83 ec 08             	sub    esp,0x8
c001ab8d:	68 e8 01 00 00       	push   0x1e8
c001ab92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab96:	e8 71 fc fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001ab9b:	83 c4 10             	add    esp,0x10
c001ab9e:	83 c4 0c             	add    esp,0xc
c001aba1:	c3                   	ret    

c001aba2 <SoundCard::configureRates(int, int, int)>:
c001aba2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aba6:	31 c0                	xor    eax,eax
c001aba8:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001abaf:	75 20                	jne    c001abd1 <SoundCard::configureRates(int, int, int)+0x2f>
c001abb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001abb5:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001abbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001abbf:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001abc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abc9:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001abcf:	b0 01                	mov    al,0x1
c001abd1:	c3                   	ret    

c001abd2 <SoundCard::getSamples16(int, short*)>:
c001abd2:	55                   	push   ebp
c001abd3:	57                   	push   edi
c001abd4:	31 ff                	xor    edi,edi
c001abd6:	56                   	push   esi
c001abd7:	53                   	push   ebx
c001abd8:	31 db                	xor    ebx,ebx
c001abda:	83 ec 10             	sub    esp,0x10
c001abdd:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001abe1:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001abe5:	8d 04 36             	lea    eax,[esi+esi*1]
c001abe8:	50                   	push   eax
c001abe9:	6a 00                	push   0x0
c001abeb:	55                   	push   ebp
c001abec:	e8 ff 58 fe ff       	call   c00004f0 <memset>
c001abf1:	83 c4 10             	add    esp,0x10
c001abf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abf8:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001abff:	85 c0                	test   eax,eax
c001ac01:	74 1a                	je     c001ac1d <SoundCard::getSamples16(int, short*)+0x4b>
c001ac03:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ac07:	75 14                	jne    c001ac1d <SoundCard::getSamples16(int, short*)+0x4b>
c001ac09:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ac0d:	55                   	push   ebp
c001ac0e:	56                   	push   esi
c001ac0f:	50                   	push   eax
c001ac10:	e8 f3 02 00 00       	call   c001af08 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001ac15:	83 c4 10             	add    esp,0x10
c001ac18:	39 c3                	cmp    ebx,eax
c001ac1a:	0f 4c d8             	cmovl  ebx,eax
c001ac1d:	47                   	inc    edi
c001ac1e:	83 ff 20             	cmp    edi,0x20
c001ac21:	75 d1                	jne    c001abf4 <SoundCard::getSamples16(int, short*)+0x22>
c001ac23:	83 c4 0c             	add    esp,0xc
c001ac26:	89 d8                	mov    eax,ebx
c001ac28:	5b                   	pop    ebx
c001ac29:	5e                   	pop    esi
c001ac2a:	5f                   	pop    edi
c001ac2b:	5d                   	pop    ebp
c001ac2c:	c3                   	ret    
c001ac2d:	90                   	nop

c001ac2e <SoundCard::getSamples32(int, int*)>:
c001ac2e:	55                   	push   ebp
c001ac2f:	57                   	push   edi
c001ac30:	31 ff                	xor    edi,edi
c001ac32:	56                   	push   esi
c001ac33:	31 f6                	xor    esi,esi
c001ac35:	53                   	push   ebx
c001ac36:	83 ec 10             	sub    esp,0x10
c001ac39:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ac3d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ac41:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ac45:	c1 e0 02             	shl    eax,0x2
c001ac48:	50                   	push   eax
c001ac49:	6a 00                	push   0x0
c001ac4b:	55                   	push   ebp
c001ac4c:	e8 9f 58 fe ff       	call   c00004f0 <memset>
c001ac51:	83 c4 10             	add    esp,0x10
c001ac54:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ac5b:	85 c0                	test   eax,eax
c001ac5d:	74 1a                	je     c001ac79 <SoundCard::getSamples32(int, int*)+0x4b>
c001ac5f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ac63:	75 14                	jne    c001ac79 <SoundCard::getSamples32(int, int*)+0x4b>
c001ac65:	53                   	push   ebx
c001ac66:	55                   	push   ebp
c001ac67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac6b:	50                   	push   eax
c001ac6c:	e8 67 03 00 00       	call   c001afd8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001ac71:	83 c4 10             	add    esp,0x10
c001ac74:	39 c6                	cmp    esi,eax
c001ac76:	0f 4c f0             	cmovl  esi,eax
c001ac79:	47                   	inc    edi
c001ac7a:	83 ff 20             	cmp    edi,0x20
c001ac7d:	75 d5                	jne    c001ac54 <SoundCard::getSamples32(int, int*)+0x26>
c001ac7f:	85 f6                	test   esi,esi
c001ac81:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001ac88:	75 0f                	jne    c001ac99 <SoundCard::getSamples32(int, int*)+0x6b>
c001ac8a:	85 c0                	test   eax,eax
c001ac8c:	74 1b                	je     c001aca9 <SoundCard::getSamples32(int, int*)+0x7b>
c001ac8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac90:	83 ec 0c             	sub    esp,0xc
c001ac93:	53                   	push   ebx
c001ac94:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ac97:	eb 0d                	jmp    c001aca6 <SoundCard::getSamples32(int, int*)+0x78>
c001ac99:	85 c0                	test   eax,eax
c001ac9b:	75 0c                	jne    c001aca9 <SoundCard::getSamples32(int, int*)+0x7b>
c001ac9d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac9f:	83 ec 0c             	sub    esp,0xc
c001aca2:	53                   	push   ebx
c001aca3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001aca6:	83 c4 10             	add    esp,0x10
c001aca9:	83 c4 0c             	add    esp,0xc
c001acac:	89 f0                	mov    eax,esi
c001acae:	5b                   	pop    ebx
c001acaf:	5e                   	pop    esi
c001acb0:	5f                   	pop    edi
c001acb1:	5d                   	pop    ebp
c001acb2:	c3                   	ret    
c001acb3:	90                   	nop

c001acb4 <SoundCard::addChannel(SoundPort*)>:
c001acb4:	83 ec 0c             	sub    esp,0xc
c001acb7:	31 c0                	xor    eax,eax
c001acb9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001acbd:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001acc5:	74 1b                	je     c001ace2 <SoundCard::addChannel(SoundPort*)+0x2e>
c001acc7:	40                   	inc    eax
c001acc8:	83 f8 20             	cmp    eax,0x20
c001accb:	75 f0                	jne    c001acbd <SoundCard::addChannel(SoundPort*)+0x9>
c001accd:	83 ec 0c             	sub    esp,0xc
c001acd0:	68 59 2f 02 c0       	push   0xc0022f59
c001acd5:	e8 2d 68 ff ff       	call   c0011507 <KePanic(char const*)>
c001acda:	83 c4 10             	add    esp,0x10
c001acdd:	83 c8 ff             	or     eax,0xffffffff
c001ace0:	eb 0b                	jmp    c001aced <SoundCard::addChannel(SoundPort*)+0x39>
c001ace2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ace6:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001aced:	83 c4 0c             	add    esp,0xc
c001acf0:	c3                   	ret    
c001acf1:	90                   	nop

c001acf2 <SoundCard::removeChannel(int)>:
c001acf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acf6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001acfa:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001ad05:	c3                   	ret    
c001ad06:	66 90                	xchg   ax,ax

c001ad08 <SoundPort::SoundPort(int, int, int, int)>:
c001ad08:	83 ec 0c             	sub    esp,0xc
c001ad0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad0f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ad16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad1a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ad1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad22:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ad26:	89 10                	mov    DWORD PTR [eax],edx
c001ad28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad2c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ad30:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ad33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad37:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad3b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ad3e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001ad43:	75 13                	jne    c001ad58 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001ad45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad49:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad4b:	05 a0 0f 00 00       	add    eax,0xfa0
c001ad50:	d1 e0                	shl    eax,1
c001ad52:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ad56:	66 90                	xchg   ax,ax
c001ad58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad5c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ad60:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001ad63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad67:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001ad6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad72:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ad75:	c1 e0 02             	shl    eax,0x2
c001ad78:	83 ec 0c             	sub    esp,0xc
c001ad7b:	50                   	push   eax
c001ad7c:	e8 52 cd fe ff       	call   c0007ad3 <malloc>
c001ad81:	83 c4 10             	add    esp,0x10
c001ad84:	89 c2                	mov    edx,eax
c001ad86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad8a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ad8d:	90                   	nop
c001ad8e:	83 c4 0c             	add    esp,0xc
c001ad91:	c3                   	ret    
c001ad92:	66 90                	xchg   ax,ax

c001ad94 <SoundPort::~SoundPort()>:
c001ad94:	83 ec 0c             	sub    esp,0xc
c001ad97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad9b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ad9e:	85 c0                	test   eax,eax
c001ada0:	74 1e                	je     c001adc0 <SoundPort::~SoundPort()+0x2c>
c001ada2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ada6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ada9:	83 ec 0c             	sub    esp,0xc
c001adac:	50                   	push   eax
c001adad:	e8 31 cd fe ff       	call   c0007ae3 <free>
c001adb2:	83 c4 10             	add    esp,0x10
c001adb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adb9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001adc0:	90                   	nop
c001adc1:	83 c4 0c             	add    esp,0xc
c001adc4:	c3                   	ret    
c001adc5:	90                   	nop
c001adc6:	66 90                	xchg   ax,ax

c001adc8 <SoundPort::unpause()>:
c001adc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001adcc:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001add0:	c3                   	ret    
c001add1:	90                   	nop
c001add2:	66 90                	xchg   ax,ax

c001add4 <SoundPort::pause()>:
c001add4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001add8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001addc:	c3                   	ret    
c001addd:	90                   	nop
c001adde:	66 90                	xchg   ax,ax

c001ade0 <SoundPort::getBufferUsed()>:
c001ade0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ade4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ade7:	c3                   	ret    

c001ade8 <SoundPort::getBufferSize()>:
c001ade8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001adec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001adef:	c3                   	ret    

c001adf0 <SoundPort::buffer16(short*, int)>:
c001adf0:	55                   	push   ebp
c001adf1:	57                   	push   edi
c001adf2:	56                   	push   esi
c001adf3:	53                   	push   ebx
c001adf4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001adf8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001adfc:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001adff:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001ae02:	74 68                	je     c001ae6c <SoundPort::buffer16(short*, int)+0x7c>
c001ae04:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ae08:	85 c9                	test   ecx,ecx
c001ae0a:	7e 60                	jle    c001ae6c <SoundPort::buffer16(short*, int)+0x7c>
c001ae0c:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001ae10:	8d 70 01             	lea    esi,[eax+0x1]
c001ae13:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001ae16:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001ae19:	c1 e1 0f             	shl    ecx,0xf
c001ae1c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001ae1f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ae22:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ae25:	74 4d                	je     c001ae74 <SoundPort::buffer16(short*, int)+0x84>
c001ae27:	31 f6                	xor    esi,esi
c001ae29:	eb 21                	jmp    c001ae4c <SoundPort::buffer16(short*, int)+0x5c>
c001ae2b:	90                   	nop
c001ae2c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001ae31:	8d 79 01             	lea    edi,[ecx+0x1]
c001ae34:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001ae37:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001ae3a:	c1 e3 0f             	shl    ebx,0xf
c001ae3d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001ae40:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ae43:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ae46:	74 1c                	je     c001ae64 <SoundPort::buffer16(short*, int)+0x74>
c001ae48:	89 c6                	mov    esi,eax
c001ae4a:	66 90                	xchg   ax,ax
c001ae4c:	8d 46 01             	lea    eax,[esi+0x1]
c001ae4f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001ae53:	75 d7                	jne    c001ae2c <SoundPort::buffer16(short*, int)+0x3c>
c001ae55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae59:	8d 76 00             	lea    esi,[esi+0x0]
c001ae5c:	5b                   	pop    ebx
c001ae5d:	5e                   	pop    esi
c001ae5e:	5f                   	pop    edi
c001ae5f:	5d                   	pop    ebp
c001ae60:	c3                   	ret    
c001ae61:	8d 76 00             	lea    esi,[esi+0x0]
c001ae64:	5b                   	pop    ebx
c001ae65:	8d 46 02             	lea    eax,[esi+0x2]
c001ae68:	5e                   	pop    esi
c001ae69:	5f                   	pop    edi
c001ae6a:	5d                   	pop    ebp
c001ae6b:	c3                   	ret    
c001ae6c:	5b                   	pop    ebx
c001ae6d:	31 c0                	xor    eax,eax
c001ae6f:	5e                   	pop    esi
c001ae70:	5f                   	pop    edi
c001ae71:	5d                   	pop    ebp
c001ae72:	c3                   	ret    
c001ae73:	90                   	nop
c001ae74:	b8 01 00 00 00       	mov    eax,0x1
c001ae79:	eb e1                	jmp    c001ae5c <SoundPort::buffer16(short*, int)+0x6c>
c001ae7b:	90                   	nop

c001ae7c <SoundPort::buffer32(int*, int)>:
c001ae7c:	55                   	push   ebp
c001ae7d:	57                   	push   edi
c001ae7e:	56                   	push   esi
c001ae7f:	53                   	push   ebx
c001ae80:	83 ec 04             	sub    esp,0x4
c001ae83:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ae87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ae8f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ae92:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ae95:	89 04 24             	mov    DWORD PTR [esp],eax
c001ae98:	74 5a                	je     c001aef4 <SoundPort::buffer32(int*, int)+0x78>
c001ae9a:	85 c0                	test   eax,eax
c001ae9c:	7e 56                	jle    c001aef4 <SoundPort::buffer32(int*, int)+0x78>
c001ae9e:	8d 71 01             	lea    esi,[ecx+0x1]
c001aea1:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001aea4:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001aea7:	8b 37                	mov    esi,DWORD PTR [edi]
c001aea9:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001aeac:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aeaf:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aeb2:	74 4c                	je     c001af00 <SoundPort::buffer32(int*, int)+0x84>
c001aeb4:	31 f6                	xor    esi,esi
c001aeb6:	eb 1c                	jmp    c001aed4 <SoundPort::buffer32(int*, int)+0x58>
c001aeb8:	8d 69 01             	lea    ebp,[ecx+0x1]
c001aebb:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001aebe:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001aec1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001aec4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001aec8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aecb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aece:	74 18                	je     c001aee8 <SoundPort::buffer32(int*, int)+0x6c>
c001aed0:	89 de                	mov    esi,ebx
c001aed2:	66 90                	xchg   ax,ax
c001aed4:	8d 5e 01             	lea    ebx,[esi+0x1]
c001aed7:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001aeda:	75 dc                	jne    c001aeb8 <SoundPort::buffer32(int*, int)+0x3c>
c001aedc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001aedf:	90                   	nop
c001aee0:	83 c4 04             	add    esp,0x4
c001aee3:	5b                   	pop    ebx
c001aee4:	5e                   	pop    esi
c001aee5:	5f                   	pop    edi
c001aee6:	5d                   	pop    ebp
c001aee7:	c3                   	ret    
c001aee8:	8d 46 02             	lea    eax,[esi+0x2]
c001aeeb:	83 c4 04             	add    esp,0x4
c001aeee:	5b                   	pop    ebx
c001aeef:	5e                   	pop    esi
c001aef0:	5f                   	pop    edi
c001aef1:	5d                   	pop    ebp
c001aef2:	c3                   	ret    
c001aef3:	90                   	nop
c001aef4:	83 c4 04             	add    esp,0x4
c001aef7:	31 c0                	xor    eax,eax
c001aef9:	5b                   	pop    ebx
c001aefa:	5e                   	pop    esi
c001aefb:	5f                   	pop    edi
c001aefc:	5d                   	pop    ebp
c001aefd:	c3                   	ret    
c001aefe:	66 90                	xchg   ax,ax
c001af00:	b8 01 00 00 00       	mov    eax,0x1
c001af05:	eb d9                	jmp    c001aee0 <SoundPort::buffer32(int*, int)+0x64>
c001af07:	90                   	nop

c001af08 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001af08:	55                   	push   ebp
c001af09:	57                   	push   edi
c001af0a:	56                   	push   esi
c001af0b:	53                   	push   ebx
c001af0c:	83 ec 0c             	sub    esp,0xc
c001af0f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001af13:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001af17:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001af1b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001af1f:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001af25:	39 03                	cmp    DWORD PTR [ebx],eax
c001af27:	74 13                	je     c001af3c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001af29:	83 ec 0c             	sub    esp,0xc
c001af2c:	68 ac 2f 02 c0       	push   0xc0022fac
c001af31:	e8 d1 65 ff ff       	call   c0011507 <KePanic(char const*)>
c001af36:	83 c4 10             	add    esp,0x10
c001af39:	8d 76 00             	lea    esi,[esi+0x0]
c001af3c:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001af42:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001af45:	74 11                	je     c001af58 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001af47:	83 ec 0c             	sub    esp,0xc
c001af4a:	68 eb 2f 02 c0       	push   0xc0022feb
c001af4f:	e8 b3 65 ff ff       	call   c0011507 <KePanic(char const*)>
c001af54:	83 c4 10             	add    esp,0x10
c001af57:	90                   	nop
c001af58:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001af5e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001af61:	74 11                	je     c001af74 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001af63:	83 ec 0c             	sub    esp,0xc
c001af66:	68 eb 2f 02 c0       	push   0xc0022feb
c001af6b:	e8 97 65 ff ff       	call   c0011507 <KePanic(char const*)>
c001af70:	83 c4 10             	add    esp,0x10
c001af73:	90                   	nop
c001af74:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001af77:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001af7b:	85 f6                	test   esi,esi
c001af7d:	7e 2d                	jle    c001afac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001af7f:	31 c0                	xor    eax,eax
c001af81:	8d 76 00             	lea    esi,[esi+0x0]
c001af84:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001af87:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001af8a:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001af90:	85 c9                	test   ecx,ecx
c001af92:	0f 49 d1             	cmovns edx,ecx
c001af95:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001af99:	c1 fa 0f             	sar    edx,0xf
c001af9c:	01 d1                	add    ecx,edx
c001af9e:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001afa2:	83 c0 01             	add    eax,0x1
c001afa5:	39 f0                	cmp    eax,esi
c001afa7:	75 db                	jne    c001af84 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001afa9:	8d 76 00             	lea    esi,[esi+0x0]
c001afac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001afaf:	83 ec 04             	sub    esp,0x4
c001afb2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001afb5:	29 f0                	sub    eax,esi
c001afb7:	c1 e0 02             	shl    eax,0x2
c001afba:	50                   	push   eax
c001afbb:	8d 04 b2             	lea    eax,[edx+esi*4]
c001afbe:	50                   	push   eax
c001afbf:	52                   	push   edx
c001afc0:	e8 0b 54 fe ff       	call   c00003d0 <memmove>
c001afc5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001afc8:	29 f0                	sub    eax,esi
c001afca:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001afcd:	83 c4 1c             	add    esp,0x1c
c001afd0:	89 f0                	mov    eax,esi
c001afd2:	5b                   	pop    ebx
c001afd3:	5e                   	pop    esi
c001afd4:	5f                   	pop    edi
c001afd5:	5d                   	pop    ebp
c001afd6:	c3                   	ret    
c001afd7:	90                   	nop

c001afd8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001afd8:	55                   	push   ebp
c001afd9:	57                   	push   edi
c001afda:	56                   	push   esi
c001afdb:	53                   	push   ebx
c001afdc:	83 ec 0c             	sub    esp,0xc
c001afdf:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001afe3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001afe7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001afeb:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001afef:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001aff5:	39 03                	cmp    DWORD PTR [ebx],eax
c001aff7:	74 13                	je     c001b00c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001aff9:	83 ec 0c             	sub    esp,0xc
c001affc:	68 cc 2f 02 c0       	push   0xc0022fcc
c001b001:	e8 01 65 ff ff       	call   c0011507 <KePanic(char const*)>
c001b006:	83 c4 10             	add    esp,0x10
c001b009:	8d 76 00             	lea    esi,[esi+0x0]
c001b00c:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b012:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b015:	74 11                	je     c001b028 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001b017:	83 ec 0c             	sub    esp,0xc
c001b01a:	68 07 30 02 c0       	push   0xc0023007
c001b01f:	e8 e3 64 ff ff       	call   c0011507 <KePanic(char const*)>
c001b024:	83 c4 10             	add    esp,0x10
c001b027:	90                   	nop
c001b028:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b02e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b031:	74 11                	je     c001b044 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001b033:	83 ec 0c             	sub    esp,0xc
c001b036:	68 07 30 02 c0       	push   0xc0023007
c001b03b:	e8 c7 64 ff ff       	call   c0011507 <KePanic(char const*)>
c001b040:	83 c4 10             	add    esp,0x10
c001b043:	90                   	nop
c001b044:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001b047:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001b04b:	85 ff                	test   edi,edi
c001b04d:	7e 21                	jle    c001b070 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001b04f:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b056:	31 c0                	xor    eax,eax
c001b058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b05b:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001b05e:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b061:	01 d5                	add    ebp,edx
c001b063:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001b066:	83 c0 04             	add    eax,0x4
c001b069:	39 c1                	cmp    ecx,eax
c001b06b:	75 eb                	jne    c001b058 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001b06d:	8d 76 00             	lea    esi,[esi+0x0]
c001b070:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b073:	83 ec 04             	sub    esp,0x4
c001b076:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b079:	29 f8                	sub    eax,edi
c001b07b:	c1 e0 02             	shl    eax,0x2
c001b07e:	50                   	push   eax
c001b07f:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b082:	50                   	push   eax
c001b083:	52                   	push   edx
c001b084:	e8 47 53 fe ff       	call   c00003d0 <memmove>
c001b089:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b08c:	29 f8                	sub    eax,edi
c001b08e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b091:	83 c4 1c             	add    esp,0x1c
c001b094:	89 f8                	mov    eax,edi
c001b096:	5b                   	pop    ebx
c001b097:	5e                   	pop    esi
c001b098:	5f                   	pop    edi
c001b099:	5d                   	pop    ebp
c001b09a:	c3                   	ret    
c001b09b:	90                   	nop

c001b09c <PCI::open(int, int, void*)>:
c001b09c:	83 ec 18             	sub    esp,0x18
c001b09f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b0a3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b0a7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b0ad:	8b 10                	mov    edx,DWORD PTR [eax]
c001b0af:	50                   	push   eax
c001b0b0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b0b3:	31 c0                	xor    eax,eax
c001b0b5:	83 c4 1c             	add    esp,0x1c
c001b0b8:	c3                   	ret    
c001b0b9:	90                   	nop

c001b0ba <PCI::close(int, int, void*)>:
c001b0ba:	31 c0                	xor    eax,eax
c001b0bc:	c3                   	ret    
c001b0bd:	90                   	nop

c001b0be <PCI::PCI()>:
c001b0be:	83 ec 0c             	sub    esp,0xc
c001b0c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0c5:	83 ec 08             	sub    esp,0x8
c001b0c8:	68 23 30 02 c0       	push   0xc0023023
c001b0cd:	50                   	push   eax
c001b0ce:	e8 c9 11 ff ff       	call   c000c29c <Bus::Bus(char const*)>
c001b0d3:	83 c4 10             	add    esp,0x10
c001b0d6:	ba cc 30 02 c0       	mov    edx,0xc00230cc
c001b0db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0df:	89 10                	mov    DWORD PTR [eax],edx
c001b0e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0e5:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b0ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0f3:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001b0f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0fc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b102:	0f b6 d0             	movzx  edx,al
c001b105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b109:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b114:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b11a:	0f b6 d0             	movzx  edx,al
c001b11d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b121:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b12a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b130:	8d 50 01             	lea    edx,[eax+0x1]
c001b133:	88 d1                	mov    cl,dl
c001b135:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b139:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b13f:	0f b6 d0             	movzx  edx,al
c001b142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b146:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b14a:	83 c9 c0             	or     ecx,0xffffffc0
c001b14d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b151:	90                   	nop
c001b152:	83 c4 0c             	add    esp,0xc
c001b155:	c3                   	ret    

c001b156 <PCI::readBAR8(unsigned int, int)>:
c001b156:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b15a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b15e:	f6 c2 01             	test   dl,0x1
c001b161:	74 07                	je     c001b16a <PCI::readBAR8(unsigned int, int)+0x14>
c001b163:	83 e2 fc             	and    edx,0xfffffffc
c001b166:	01 c2                	add    edx,eax
c001b168:	ec                   	in     al,dx
c001b169:	c3                   	ret    
c001b16a:	83 e2 f0             	and    edx,0xfffffff0
c001b16d:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b170:	c3                   	ret    
c001b171:	90                   	nop

c001b172 <PCI::readBAR16(unsigned int, int)>:
c001b172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b176:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b17a:	f6 c2 01             	test   dl,0x1
c001b17d:	74 08                	je     c001b187 <PCI::readBAR16(unsigned int, int)+0x15>
c001b17f:	83 e2 fc             	and    edx,0xfffffffc
c001b182:	01 c2                	add    edx,eax
c001b184:	66 ed                	in     ax,dx
c001b186:	c3                   	ret    
c001b187:	83 e2 f0             	and    edx,0xfffffff0
c001b18a:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b18e:	c3                   	ret    
c001b18f:	90                   	nop

c001b190 <PCI::readBAR32(unsigned int, int)>:
c001b190:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b194:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b198:	f6 c2 01             	test   dl,0x1
c001b19b:	74 07                	je     c001b1a4 <PCI::readBAR32(unsigned int, int)+0x14>
c001b19d:	83 e2 fc             	and    edx,0xfffffffc
c001b1a0:	01 c2                	add    edx,eax
c001b1a2:	ed                   	in     eax,dx
c001b1a3:	c3                   	ret    
c001b1a4:	83 e2 f0             	and    edx,0xfffffff0
c001b1a7:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b1aa:	c3                   	ret    
c001b1ab:	90                   	nop

c001b1ac <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b1ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b1b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b1b4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b1b8:	f6 c2 01             	test   dl,0x1
c001b1bb:	74 07                	je     c001b1c4 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b1bd:	83 e2 fc             	and    edx,0xfffffffc
c001b1c0:	01 ca                	add    edx,ecx
c001b1c2:	ee                   	out    dx,al
c001b1c3:	c3                   	ret    
c001b1c4:	83 e2 f0             	and    edx,0xfffffff0
c001b1c7:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b1ca:	c3                   	ret    
c001b1cb:	90                   	nop

c001b1cc <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b1cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b1d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b1d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b1d8:	f6 c2 01             	test   dl,0x1
c001b1db:	74 08                	je     c001b1e5 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b1dd:	83 e2 fc             	and    edx,0xfffffffc
c001b1e0:	01 ca                	add    edx,ecx
c001b1e2:	66 ef                	out    dx,ax
c001b1e4:	c3                   	ret    
c001b1e5:	83 e2 f0             	and    edx,0xfffffff0
c001b1e8:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b1ec:	c3                   	ret    
c001b1ed:	90                   	nop

c001b1ee <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b1ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b1f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b1f6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b1fa:	f6 c2 01             	test   dl,0x1
c001b1fd:	74 07                	je     c001b206 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b1ff:	83 e2 fc             	and    edx,0xfffffffc
c001b202:	01 ca                	add    edx,ecx
c001b204:	ef                   	out    dx,eax
c001b205:	c3                   	ret    
c001b206:	83 e2 f0             	and    edx,0xfffffff0
c001b209:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b20c:	c3                   	ret    
c001b20d:	90                   	nop

c001b20e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b20e:	55                   	push   ebp
c001b20f:	57                   	push   edi
c001b210:	56                   	push   esi
c001b211:	53                   	push   ebx
c001b212:	83 ec 0c             	sub    esp,0xc
c001b215:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b21a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b21e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b222:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b226:	83 fe 07             	cmp    esi,0x7
c001b229:	76 10                	jbe    c001b23b <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b22b:	83 ec 0c             	sub    esp,0xc
c001b22e:	68 2b 30 02 c0       	push   0xc002302b
c001b233:	e8 cf 62 ff ff       	call   c0011507 <KePanic(char const*)>
c001b238:	83 c4 10             	add    esp,0x10
c001b23b:	0f b6 db             	movzx  ebx,bl
c001b23e:	83 fb 0f             	cmp    ebx,0xf
c001b241:	76 10                	jbe    c001b253 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001b243:	83 ec 0c             	sub    esp,0xc
c001b246:	68 5b 30 02 c0       	push   0xc002305b
c001b24b:	e8 b7 62 ff ff       	call   c0011507 <KePanic(char const*)>
c001b250:	83 c4 10             	add    esp,0x10
c001b253:	8d 04 36             	lea    eax,[esi+esi*1]
c001b256:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b25b:	83 c8 f0             	or     eax,0xfffffff0
c001b25e:	ee                   	out    dx,al
c001b25f:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b264:	89 e8                	mov    eax,ebp
c001b266:	ee                   	out    dx,al
c001b267:	89 f9                	mov    ecx,edi
c001b269:	89 d8                	mov    eax,ebx
c001b26b:	0f b6 d9             	movzx  ebx,cl
c001b26e:	83 c4 0c             	add    esp,0xc
c001b271:	c1 e0 08             	shl    eax,0x8
c001b274:	83 e3 fc             	and    ebx,0xfffffffc
c001b277:	09 d8                	or     eax,ebx
c001b279:	5b                   	pop    ebx
c001b27a:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b27f:	5e                   	pop    esi
c001b280:	5f                   	pop    edi
c001b281:	5d                   	pop    ebp
c001b282:	c3                   	ret    
c001b283:	90                   	nop

c001b284 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b284:	57                   	push   edi
c001b285:	56                   	push   esi
c001b286:	53                   	push   ebx
c001b287:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b28b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b28f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b293:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b297:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b29d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b2a1:	83 ff 01             	cmp    edi,0x1
c001b2a4:	75 3f                	jne    c001b2e5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b2a6:	89 de                	mov    esi,ebx
c001b2a8:	0f b6 c0             	movzx  eax,al
c001b2ab:	c1 e0 10             	shl    eax,0x10
c001b2ae:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b2b4:	0f b6 c9             	movzx  ecx,cl
c001b2b7:	09 f0                	or     eax,esi
c001b2b9:	c1 e1 08             	shl    ecx,0x8
c001b2bc:	0f b6 d2             	movzx  edx,dl
c001b2bf:	c1 e2 0b             	shl    edx,0xb
c001b2c2:	09 c8                	or     eax,ecx
c001b2c4:	09 d0                	or     eax,edx
c001b2c6:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b2cb:	0d 00 00 00 80       	or     eax,0x80000000
c001b2d0:	ef                   	out    dx,eax
c001b2d1:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b2d6:	ed                   	in     eax,dx
c001b2d7:	83 e3 02             	and    ebx,0x2
c001b2da:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b2e1:	d3 e8                	shr    eax,cl
c001b2e3:	eb 44                	jmp    c001b329 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b2e5:	83 ff 02             	cmp    edi,0x2
c001b2e8:	75 2d                	jne    c001b317 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b2ea:	83 ec 0c             	sub    esp,0xc
c001b2ed:	0f b6 fb             	movzx  edi,bl
c001b2f0:	57                   	push   edi
c001b2f1:	0f b6 c9             	movzx  ecx,cl
c001b2f4:	51                   	push   ecx
c001b2f5:	0f b6 d2             	movzx  edx,dl
c001b2f8:	52                   	push   edx
c001b2f9:	0f b6 c0             	movzx  eax,al
c001b2fc:	50                   	push   eax
c001b2fd:	56                   	push   esi
c001b2fe:	e8 0b ff ff ff       	call   c001b20e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b303:	89 c2                	mov    edx,eax
c001b305:	ed                   	in     eax,dx
c001b306:	83 e3 02             	and    ebx,0x2
c001b309:	83 c4 20             	add    esp,0x20
c001b30c:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b313:	d3 e8                	shr    eax,cl
c001b315:	eb 12                	jmp    c001b329 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b317:	83 ec 0c             	sub    esp,0xc
c001b31a:	68 8b 30 02 c0       	push   0xc002308b
c001b31f:	e8 e3 61 ff ff       	call   c0011507 <KePanic(char const*)>
c001b324:	83 c4 10             	add    esp,0x10
c001b327:	31 c0                	xor    eax,eax
c001b329:	5b                   	pop    ebx
c001b32a:	5e                   	pop    esi
c001b32b:	5f                   	pop    edi
c001b32c:	c3                   	ret    
c001b32d:	90                   	nop

c001b32e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b32e:	83 ec 18             	sub    esp,0x18
c001b331:	6a 00                	push   0x0
c001b333:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b338:	50                   	push   eax
c001b339:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b33e:	50                   	push   eax
c001b33f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b344:	50                   	push   eax
c001b345:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b349:	e8 36 ff ff ff       	call   c001b284 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b34e:	83 c4 2c             	add    esp,0x2c
c001b351:	c3                   	ret    

c001b352 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b352:	83 ec 18             	sub    esp,0x18
c001b355:	6a 0e                	push   0xe
c001b357:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b35c:	50                   	push   eax
c001b35d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b362:	50                   	push   eax
c001b363:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b368:	50                   	push   eax
c001b369:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b36d:	e8 12 ff ff ff       	call   c001b284 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b372:	83 c4 2c             	add    esp,0x2c
c001b375:	0f b6 c0             	movzx  eax,al
c001b378:	c3                   	ret    
c001b379:	90                   	nop

c001b37a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b37a:	55                   	push   ebp
c001b37b:	57                   	push   edi
c001b37c:	56                   	push   esi
c001b37d:	53                   	push   ebx
c001b37e:	83 ec 18             	sub    esp,0x18
c001b381:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b386:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b38b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b390:	6a 0a                	push   0xa
c001b392:	56                   	push   esi
c001b393:	55                   	push   ebp
c001b394:	57                   	push   edi
c001b395:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b399:	e8 e6 fe ff ff       	call   c001b284 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b39e:	83 c4 14             	add    esp,0x14
c001b3a1:	6a 0a                	push   0xa
c001b3a3:	56                   	push   esi
c001b3a4:	55                   	push   ebp
c001b3a5:	57                   	push   edi
c001b3a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b3aa:	89 c3                	mov    ebx,eax
c001b3ac:	0f b6 db             	movzx  ebx,bl
c001b3af:	e8 d0 fe ff ff       	call   c001b284 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b3b4:	83 c4 2c             	add    esp,0x2c
c001b3b7:	25 00 ff 00 00       	and    eax,0xff00
c001b3bc:	09 d8                	or     eax,ebx
c001b3be:	5b                   	pop    ebx
c001b3bf:	5e                   	pop    esi
c001b3c0:	5f                   	pop    edi
c001b3c1:	5d                   	pop    ebp
c001b3c2:	c3                   	ret    
c001b3c3:	90                   	nop

c001b3c4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b3c4:	83 ec 18             	sub    esp,0x18
c001b3c7:	6a 08                	push   0x8
c001b3c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3ce:	50                   	push   eax
c001b3cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3d4:	50                   	push   eax
c001b3d5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3da:	50                   	push   eax
c001b3db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3df:	e8 a0 fe ff ff       	call   c001b284 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b3e4:	83 c4 2c             	add    esp,0x2c
c001b3e7:	0f b6 c4             	movzx  eax,ah
c001b3ea:	c3                   	ret    
c001b3eb:	90                   	nop

c001b3ec <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b3ec:	83 ec 18             	sub    esp,0x18
c001b3ef:	6a 08                	push   0x8
c001b3f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3f6:	50                   	push   eax
c001b3f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3fc:	50                   	push   eax
c001b3fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b402:	50                   	push   eax
c001b403:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b407:	e8 78 fe ff ff       	call   c001b284 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b40c:	83 c4 2c             	add    esp,0x2c
c001b40f:	c3                   	ret    

c001b410 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b410:	83 ec 18             	sub    esp,0x18
c001b413:	6a 3c                	push   0x3c
c001b415:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b41a:	50                   	push   eax
c001b41b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b420:	50                   	push   eax
c001b421:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b426:	50                   	push   eax
c001b427:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b42b:	e8 54 fe ff ff       	call   c001b284 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b430:	83 c4 2c             	add    esp,0x2c
c001b433:	c3                   	ret    

c001b434 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b434:	83 ec 18             	sub    esp,0x18
c001b437:	6a 18                	push   0x18
c001b439:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b43e:	50                   	push   eax
c001b43f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b444:	50                   	push   eax
c001b445:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b44a:	50                   	push   eax
c001b44b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b44f:	e8 30 fe ff ff       	call   c001b284 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b454:	83 c4 2c             	add    esp,0x2c
c001b457:	0f b6 c4             	movzx  eax,ah
c001b45a:	c3                   	ret    
c001b45b:	90                   	nop

c001b45c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b45c:	55                   	push   ebp
c001b45d:	57                   	push   edi
c001b45e:	56                   	push   esi
c001b45f:	53                   	push   ebx
c001b460:	83 ec 28             	sub    esp,0x28
c001b463:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b467:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b46c:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b471:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b476:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b47d:	8d 43 12             	lea    eax,[ebx+0x12]
c001b480:	83 c3 10             	add    ebx,0x10
c001b483:	0f b6 c0             	movzx  eax,al
c001b486:	0f b6 db             	movzx  ebx,bl
c001b489:	50                   	push   eax
c001b48a:	51                   	push   ecx
c001b48b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b48f:	57                   	push   edi
c001b490:	55                   	push   ebp
c001b491:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b495:	e8 ea fd ff ff       	call   c001b284 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b49a:	83 c4 14             	add    esp,0x14
c001b49d:	53                   	push   ebx
c001b49e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b4a2:	51                   	push   ecx
c001b4a3:	89 c6                	mov    esi,eax
c001b4a5:	57                   	push   edi
c001b4a6:	55                   	push   ebp
c001b4a7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b4ab:	c1 e6 10             	shl    esi,0x10
c001b4ae:	e8 d1 fd ff ff       	call   c001b284 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4b3:	83 c4 3c             	add    esp,0x3c
c001b4b6:	5b                   	pop    ebx
c001b4b7:	0f b7 c0             	movzx  eax,ax
c001b4ba:	09 f0                	or     eax,esi
c001b4bc:	5e                   	pop    esi
c001b4bd:	5f                   	pop    edi
c001b4be:	5d                   	pop    ebp
c001b4bf:	c3                   	ret    

c001b4c0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b4c0:	55                   	push   ebp
c001b4c1:	57                   	push   edi
c001b4c2:	56                   	push   esi
c001b4c3:	53                   	push   ebx
c001b4c4:	83 ec 0c             	sub    esp,0xc
c001b4c7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b4cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b4cf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b4d3:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001b4d7:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001b4dd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b4e1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b4e5:	83 f9 01             	cmp    ecx,0x1
c001b4e8:	75 5d                	jne    c001b547 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001b4ea:	0f b6 c8             	movzx  ecx,al
c001b4ed:	89 f0                	mov    eax,esi
c001b4ef:	25 fc 00 00 00       	and    eax,0xfc
c001b4f4:	0f b6 d2             	movzx  edx,dl
c001b4f7:	c1 e1 10             	shl    ecx,0x10
c001b4fa:	c1 e2 0b             	shl    edx,0xb
c001b4fd:	09 c1                	or     ecx,eax
c001b4ff:	89 f8                	mov    eax,edi
c001b501:	0f b6 f8             	movzx  edi,al
c001b504:	c1 e7 08             	shl    edi,0x8
c001b507:	09 f9                	or     ecx,edi
c001b509:	09 d1                	or     ecx,edx
c001b50b:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b510:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b516:	89 c8                	mov    eax,ecx
c001b518:	ef                   	out    dx,eax
c001b519:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b51e:	ed                   	in     eax,dx
c001b51f:	83 e6 02             	and    esi,0x2
c001b522:	0f b7 db             	movzx  ebx,bx
c001b525:	74 0a                	je     c001b531 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001b527:	c1 e3 10             	shl    ebx,0x10
c001b52a:	0f b7 d0             	movzx  edx,ax
c001b52d:	09 d3                	or     ebx,edx
c001b52f:	eb 05                	jmp    c001b536 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001b531:	66 31 c0             	xor    ax,ax
c001b534:	09 c3                	or     ebx,eax
c001b536:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b53b:	89 c8                	mov    eax,ecx
c001b53d:	ef                   	out    dx,eax
c001b53e:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b543:	89 d8                	mov    eax,ebx
c001b545:	eb 41                	jmp    c001b588 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b547:	83 f9 02             	cmp    ecx,0x2
c001b54a:	75 45                	jne    c001b591 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001b54c:	89 f1                	mov    ecx,esi
c001b54e:	83 ec 0c             	sub    esp,0xc
c001b551:	0f b6 f1             	movzx  esi,cl
c001b554:	89 f9                	mov    ecx,edi
c001b556:	56                   	push   esi
c001b557:	0f b6 f9             	movzx  edi,cl
c001b55a:	57                   	push   edi
c001b55b:	0f b6 d2             	movzx  edx,dl
c001b55e:	52                   	push   edx
c001b55f:	0f b6 c0             	movzx  eax,al
c001b562:	50                   	push   eax
c001b563:	55                   	push   ebp
c001b564:	e8 a5 fc ff ff       	call   c001b20e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b569:	89 c2                	mov    edx,eax
c001b56b:	ed                   	in     eax,dx
c001b56c:	83 c4 20             	add    esp,0x20
c001b56f:	f6 c2 02             	test   dl,0x2
c001b572:	0f b7 db             	movzx  ebx,bx
c001b575:	74 0c                	je     c001b583 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001b577:	0f b7 c8             	movzx  ecx,ax
c001b57a:	89 d8                	mov    eax,ebx
c001b57c:	c1 e0 10             	shl    eax,0x10
c001b57f:	09 c8                	or     eax,ecx
c001b581:	eb 05                	jmp    c001b588 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b583:	66 31 c0             	xor    ax,ax
c001b586:	09 d8                	or     eax,ebx
c001b588:	ef                   	out    dx,eax
c001b589:	83 c4 0c             	add    esp,0xc
c001b58c:	5b                   	pop    ebx
c001b58d:	5e                   	pop    esi
c001b58e:	5f                   	pop    edi
c001b58f:	5d                   	pop    ebp
c001b590:	c3                   	ret    
c001b591:	c7 44 24 20 8b 30 02 c0 	mov    DWORD PTR [esp+0x20],0xc002308b
c001b599:	83 c4 0c             	add    esp,0xc
c001b59c:	5b                   	pop    ebx
c001b59d:	5e                   	pop    esi
c001b59e:	5f                   	pop    edi
c001b59f:	5d                   	pop    ebp
c001b5a0:	e9 62 5f ff ff       	jmp    c0011507 <KePanic(char const*)>
c001b5a5:	90                   	nop

c001b5a6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b5a6:	55                   	push   ebp
c001b5a7:	57                   	push   edi
c001b5a8:	56                   	push   esi
c001b5a9:	53                   	push   ebx
c001b5aa:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b5b0:	80 3d ac d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ac,0x0
c001b5b7:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001b5be:	0f 85 bd 00 00 00    	jne    c001b681 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b5c4:	83 ec 0c             	sub    esp,0xc
c001b5c7:	68 14 01 00 00       	push   0x114
c001b5cc:	e8 02 c5 fe ff       	call   c0007ad3 <malloc>
c001b5d1:	83 c4 0c             	add    esp,0xc
c001b5d4:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001b5da:	68 91 30 02 c0       	push   0xc0023091
c001b5df:	50                   	push   eax
c001b5e0:	89 c3                	mov    ebx,eax
c001b5e2:	e8 d9 04 ff ff       	call   c000bac0 <File::File(char const*, Process*)>
c001b5e7:	83 c4 10             	add    esp,0x10
c001b5ea:	85 db                	test   ebx,ebx
c001b5ec:	0f 84 6b 02 00 00    	je     c001b85d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b5f2:	57                   	push   edi
c001b5f3:	57                   	push   edi
c001b5f4:	6a 01                	push   0x1
c001b5f6:	53                   	push   ebx
c001b5f7:	e8 e2 04 ff ff       	call   c000bade <File::open(FileOpenMode)>
c001b5fc:	83 c4 10             	add    esp,0x10
c001b5ff:	85 c0                	test   eax,eax
c001b601:	0f 85 56 02 00 00    	jne    c001b85d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b607:	52                   	push   edx
c001b608:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b60c:	50                   	push   eax
c001b60d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b611:	50                   	push   eax
c001b612:	53                   	push   ebx
c001b613:	e8 c8 07 ff ff       	call   c000bde0 <File::stat(unsigned long long*, bool*)>
c001b618:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b61c:	40                   	inc    eax
c001b61d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b620:	e8 ae c4 fe ff       	call   c0007ad3 <malloc>
c001b625:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b629:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b62d:	59                   	pop    ecx
c001b62e:	a3 a8 d0 02 c0       	mov    ds:0xc002d0a8,eax
c001b633:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b635:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b639:	51                   	push   ecx
c001b63a:	50                   	push   eax
c001b63b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b63f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b643:	53                   	push   ebx
c001b644:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b647:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b64b:	83 c4 20             	add    esp,0x20
c001b64e:	89 c8                	mov    eax,ecx
c001b650:	99                   	cdq    
c001b651:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b655:	0f 85 02 02 00 00    	jne    c001b85d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b65b:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b65f:	0f 85 f8 01 00 00    	jne    c001b85d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b665:	83 ec 0c             	sub    esp,0xc
c001b668:	53                   	push   ebx
c001b669:	e8 ce 04 ff ff       	call   c000bb3c <File::close()>
c001b66e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b672:	83 c4 10             	add    esp,0x10
c001b675:	c6 05 ac d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0ac,0x1
c001b67c:	a3 a4 d0 02 c0       	mov    ds:0xc002d0a4,eax
c001b681:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b689:	31 c9                	xor    ecx,ecx
c001b68b:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001b692:	8b 2d a4 d0 02 c0    	mov    ebp,DWORD PTR ds:0xc002d0a4
c001b698:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b69f:	8b 15 a8 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0a8
c001b6a5:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b6aa:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b6b2:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b6b7:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b6bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b6c3:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b6cb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b6cf:	39 cd                	cmp    ebp,ecx
c001b6d1:	0f 8e 86 01 00 00    	jle    c001b85d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b6d7:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001b6da:	d4 40                	aam    0x40
c001b6dc:	d5 39                	aad    0x39
c001b6de:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b6e2:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001b6e6:	d4 40                	aam    0x40
c001b6e8:	d5 39                	aad    0x39
c001b6ea:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b6ee:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001b6f2:	d4 40                	aam    0x40
c001b6f4:	d5 39                	aad    0x39
c001b6f6:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b6fa:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001b6fe:	d4 40                	aam    0x40
c001b700:	d5 39                	aad    0x39
c001b702:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b706:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001b70a:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b70e:	3c 56                	cmp    al,0x56
c001b710:	74 47                	je     c001b759 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001b712:	d4 40                	aam    0x40
c001b714:	d5 39                	aad    0x39
c001b716:	8d 58 d0             	lea    ebx,[eax-0x30]
c001b719:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001b71d:	0f b6 db             	movzx  ebx,bl
c001b720:	c1 e3 04             	shl    ebx,0x4
c001b723:	d4 40                	aam    0x40
c001b725:	d5 39                	aad    0x39
c001b727:	83 e8 30             	sub    eax,0x30
c001b72a:	0f b6 c0             	movzx  eax,al
c001b72d:	09 c3                	or     ebx,eax
c001b72f:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001b733:	c1 e3 04             	shl    ebx,0x4
c001b736:	d4 40                	aam    0x40
c001b738:	d5 39                	aad    0x39
c001b73a:	83 e8 30             	sub    eax,0x30
c001b73d:	0f b6 c0             	movzx  eax,al
c001b740:	09 c3                	or     ebx,eax
c001b742:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001b746:	c1 e3 04             	shl    ebx,0x4
c001b749:	d4 40                	aam    0x40
c001b74b:	d5 39                	aad    0x39
c001b74d:	83 e8 30             	sub    eax,0x30
c001b750:	0f b6 c0             	movzx  eax,al
c001b753:	09 c3                	or     ebx,eax
c001b755:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b759:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001b75d:	80 fb 58             	cmp    bl,0x58
c001b760:	74 49                	je     c001b7ab <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001b762:	88 d8                	mov    al,bl
c001b764:	d4 40                	aam    0x40
c001b766:	d5 39                	aad    0x39
c001b768:	83 e8 30             	sub    eax,0x30
c001b76b:	0f b6 f8             	movzx  edi,al
c001b76e:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001b772:	c1 e7 04             	shl    edi,0x4
c001b775:	d4 40                	aam    0x40
c001b777:	d5 39                	aad    0x39
c001b779:	83 e8 30             	sub    eax,0x30
c001b77c:	0f b6 c0             	movzx  eax,al
c001b77f:	09 c7                	or     edi,eax
c001b781:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001b785:	c1 e7 04             	shl    edi,0x4
c001b788:	d4 40                	aam    0x40
c001b78a:	d5 39                	aad    0x39
c001b78c:	83 e8 30             	sub    eax,0x30
c001b78f:	0f b6 c0             	movzx  eax,al
c001b792:	09 c7                	or     edi,eax
c001b794:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001b798:	c1 e7 04             	shl    edi,0x4
c001b79b:	d4 40                	aam    0x40
c001b79d:	d5 39                	aad    0x39
c001b79f:	83 e8 30             	sub    eax,0x30
c001b7a2:	0f b6 c0             	movzx  eax,al
c001b7a5:	09 c7                	or     edi,eax
c001b7a7:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001b7ab:	8d 41 10             	lea    eax,[ecx+0x10]
c001b7ae:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b7b2:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001b7b6:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b7ba:	83 f9 0a             	cmp    ecx,0xa
c001b7bd:	74 07                	je     c001b7c6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001b7bf:	47                   	inc    edi
c001b7c0:	39 c5                	cmp    ebp,eax
c001b7c2:	75 16                	jne    c001b7da <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001b7c4:	89 e8                	mov    eax,ebp
c001b7c6:	83 f9 0a             	cmp    ecx,0xa
c001b7c9:	0f 94 c1             	sete   cl
c001b7cc:	0f b6 c9             	movzx  ecx,cl
c001b7cf:	01 c1                	add    ecx,eax
c001b7d1:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b7d6:	75 0f                	jne    c001b7e7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001b7d8:	eb 1c                	jmp    c001b7f6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001b7da:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b7dd:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001b7e1:	40                   	inc    eax
c001b7e2:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001b7e5:	eb cb                	jmp    c001b7b2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001b7e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b7eb:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b7f0:	0f 85 d9 fe ff ff    	jne    c001b6cf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b7f6:	80 fb 58             	cmp    bl,0x58
c001b7f9:	74 10                	je     c001b80b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001b7fb:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b800:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001b805:	0f 85 c4 fe ff ff    	jne    c001b6cf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b80b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b80f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b813:	83 e8 30             	sub    eax,0x30
c001b816:	c1 e0 04             	shl    eax,0x4
c001b819:	83 eb 30             	sub    ebx,0x30
c001b81c:	09 d8                	or     eax,ebx
c001b81e:	0f b6 c0             	movzx  eax,al
c001b821:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b825:	0f 85 a4 fe ff ff    	jne    c001b6cf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b82b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b82f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b833:	83 e8 30             	sub    eax,0x30
c001b836:	c1 e0 04             	shl    eax,0x4
c001b839:	83 eb 30             	sub    ebx,0x30
c001b83c:	09 d8                	or     eax,ebx
c001b83e:	0f b6 c0             	movzx  eax,al
c001b841:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b845:	0f 85 84 fe ff ff    	jne    c001b6cf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b84b:	50                   	push   eax
c001b84c:	50                   	push   eax
c001b84d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b851:	50                   	push   eax
c001b852:	56                   	push   esi
c001b853:	e8 f8 4d fe ff       	call   c0000650 <strcpy>
c001b858:	83 c4 10             	add    esp,0x10
c001b85b:	eb 05                	jmp    c001b862 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001b85d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b860:	31 f6                	xor    esi,esi
c001b862:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b868:	89 f0                	mov    eax,esi
c001b86a:	5b                   	pop    ebx
c001b86b:	5e                   	pop    esi
c001b86c:	5f                   	pop    edi
c001b86d:	5d                   	pop    ebp
c001b86e:	c3                   	ret    
c001b86f:	90                   	nop

c001b870 <PCI::checkBus(unsigned char)>:
c001b870:	56                   	push   esi
c001b871:	53                   	push   ebx
c001b872:	31 db                	xor    ebx,ebx
c001b874:	51                   	push   ecx
c001b875:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b87a:	52                   	push   edx
c001b87b:	53                   	push   ebx
c001b87c:	43                   	inc    ebx
c001b87d:	56                   	push   esi
c001b87e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b882:	e8 0f 03 00 00       	call   c001bb96 <PCI::checkDevice(unsigned char, unsigned char)>
c001b887:	83 c4 10             	add    esp,0x10
c001b88a:	83 fb 20             	cmp    ebx,0x20
c001b88d:	75 eb                	jne    c001b87a <PCI::checkBus(unsigned char)+0xa>
c001b88f:	58                   	pop    eax
c001b890:	5b                   	pop    ebx
c001b891:	5e                   	pop    esi
c001b892:	c3                   	ret    
c001b893:	90                   	nop

c001b894 <PCI::foundDevice(PCIDeviceInfo)>:
c001b894:	55                   	push   ebp
c001b895:	57                   	push   edi
c001b896:	56                   	push   esi
c001b897:	53                   	push   ebx
c001b898:	83 ec 1c             	sub    esp,0x1c
c001b89b:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b8a0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b8a4:	3d ff ff 00 00       	cmp    eax,0xffff
c001b8a9:	0f 84 63 01 00 00    	je     c001ba12 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b8af:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b8b4:	66 3d 06 04          	cmp    ax,0x406
c001b8b8:	75 2c                	jne    c001b8e6 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b8ba:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b8bf:	50                   	push   eax
c001b8c0:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b8c5:	50                   	push   eax
c001b8c6:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b8cb:	50                   	push   eax
c001b8cc:	53                   	push   ebx
c001b8cd:	e8 62 fb ff ff       	call   c001b434 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b8d2:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b8d6:	0f b6 c0             	movzx  eax,al
c001b8d9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b8dd:	83 c4 2c             	add    esp,0x2c
c001b8e0:	5b                   	pop    ebx
c001b8e1:	5e                   	pop    esi
c001b8e2:	5f                   	pop    edi
c001b8e3:	5d                   	pop    ebp
c001b8e4:	eb 8a                	jmp    c001b870 <PCI::checkBus(unsigned char)>
c001b8e6:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001b8eb:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b8f1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b8f5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b8f9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b8fd:	85 d2                	test   edx,edx
c001b8ff:	74 34                	je     c001b935 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001b901:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b904:	85 c9                	test   ecx,ecx
c001b906:	74 29                	je     c001b931 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b908:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001b90e:	31 f5                	xor    ebp,esi
c001b910:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001b916:	75 19                	jne    c001b931 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b918:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001b91e:	75 11                	jne    c001b931 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b920:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b927:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001b92b:	0f 84 e1 00 00 00    	je     c001ba12 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b931:	8b 12                	mov    edx,DWORD PTR [edx]
c001b933:	eb c8                	jmp    c001b8fd <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b935:	3d 01 06 00 00       	cmp    eax,0x601
c001b93a:	75 19                	jne    c001b955 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001b93c:	83 ec 0c             	sub    esp,0xc
c001b93f:	68 64 01 00 00       	push   0x164
c001b944:	e8 8a c1 fe ff       	call   c0007ad3 <malloc>
c001b949:	89 04 24             	mov    DWORD PTR [esp],eax
c001b94c:	89 c5                	mov    ebp,eax
c001b94e:	e8 ab 0e 00 00       	call   c001c7fe <SATABus::SATABus()>
c001b953:	eb 1e                	jmp    c001b973 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001b955:	3d 01 01 00 00       	cmp    eax,0x101
c001b95a:	75 62                	jne    c001b9be <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001b95c:	83 ec 0c             	sub    esp,0xc
c001b95f:	68 70 02 00 00       	push   0x270
c001b964:	e8 6a c1 fe ff       	call   c0007ad3 <malloc>
c001b969:	89 04 24             	mov    DWORD PTR [esp],eax
c001b96c:	89 c5                	mov    ebp,eax
c001b96e:	e8 f3 02 00 00       	call   c001bc66 <IDE::IDE()>
c001b973:	58                   	pop    eax
c001b974:	5a                   	pop    edx
c001b975:	55                   	push   ebp
c001b976:	53                   	push   ebx
c001b977:	e8 c4 0f ff ff       	call   c000c940 <Device::addChild(Device*)>
c001b97c:	83 ec 1c             	sub    esp,0x1c
c001b97f:	b9 09 00 00 00       	mov    ecx,0x9
c001b984:	fc                   	cld    
c001b985:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b989:	89 e7                	mov    edi,esp
c001b98b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b98d:	55                   	push   ebp
c001b98e:	e8 f3 0e ff ff       	call   c000c886 <Device::preOpenPCI(PCIDeviceInfo)>
c001b993:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b996:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b99a:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b9a2:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b9aa:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b9b2:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b9b5:	83 c4 4c             	add    esp,0x4c
c001b9b8:	5b                   	pop    ebx
c001b9b9:	5e                   	pop    esi
c001b9ba:	5f                   	pop    edi
c001b9bb:	5d                   	pop    ebp
c001b9bc:	ff e0                	jmp    eax
c001b9be:	83 ec 0c             	sub    esp,0xc
c001b9c1:	68 58 01 00 00       	push   0x158
c001b9c6:	e8 08 c1 fe ff       	call   c0007ad3 <malloc>
c001b9cb:	5a                   	pop    edx
c001b9cc:	59                   	pop    ecx
c001b9cd:	68 aa 30 02 c0       	push   0xc00230aa
c001b9d2:	50                   	push   eax
c001b9d3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b9d7:	e8 02 12 ff ff       	call   c000cbde <DriverlessDevice::DriverlessDevice(char const*)>
c001b9dc:	5e                   	pop    esi
c001b9dd:	5f                   	pop    edi
c001b9de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b9e2:	50                   	push   eax
c001b9e3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b9e7:	53                   	push   ebx
c001b9e8:	e8 53 0f ff ff       	call   c000c940 <Device::addChild(Device*)>
c001b9ed:	83 c4 10             	add    esp,0x10
c001b9f0:	b9 09 00 00 00       	mov    ecx,0x9
c001b9f5:	fc                   	cld    
c001b9f6:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001b9fa:	89 fe                	mov    esi,edi
c001b9fc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b9fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba02:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ba06:	83 c4 1c             	add    esp,0x1c
c001ba09:	5b                   	pop    ebx
c001ba0a:	5e                   	pop    esi
c001ba0b:	5f                   	pop    edi
c001ba0c:	5d                   	pop    ebp
c001ba0d:	e9 74 0e ff ff       	jmp    c000c886 <Device::preOpenPCI(PCIDeviceInfo)>
c001ba12:	83 c4 1c             	add    esp,0x1c
c001ba15:	5b                   	pop    ebx
c001ba16:	5e                   	pop    esi
c001ba17:	5f                   	pop    edi
c001ba18:	5d                   	pop    ebp
c001ba19:	c3                   	ret    

c001ba1a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001ba1a:	55                   	push   ebp
c001ba1b:	57                   	push   edi
c001ba1c:	56                   	push   esi
c001ba1d:	53                   	push   ebx
c001ba1e:	83 ec 68             	sub    esp,0x68
c001ba21:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ba28:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001ba2c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ba30:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ba37:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001ba3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ba40:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ba47:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001ba4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ba50:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001ba55:	6a 0c                	push   0xc
c001ba57:	57                   	push   edi
c001ba58:	53                   	push   ebx
c001ba59:	56                   	push   esi
c001ba5a:	55                   	push   ebp
c001ba5b:	e8 24 f8 ff ff       	call   c001b284 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ba60:	83 c4 20             	add    esp,0x20
c001ba63:	57                   	push   edi
c001ba64:	53                   	push   ebx
c001ba65:	56                   	push   esi
c001ba66:	55                   	push   ebp
c001ba67:	e8 0e f9 ff ff       	call   c001b37a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001ba6c:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001ba71:	57                   	push   edi
c001ba72:	53                   	push   ebx
c001ba73:	56                   	push   esi
c001ba74:	55                   	push   ebp
c001ba75:	e8 96 f9 ff ff       	call   c001b410 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001ba7a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001ba7e:	83 c4 14             	add    esp,0x14
c001ba81:	6a 3c                	push   0x3c
c001ba83:	57                   	push   edi
c001ba84:	53                   	push   ebx
c001ba85:	56                   	push   esi
c001ba86:	55                   	push   ebp
c001ba87:	e8 f8 f7 ff ff       	call   c001b284 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ba8c:	0f b6 c4             	movzx  eax,ah
c001ba8f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ba93:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001ba97:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001ba9b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001baa0:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001baa6:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001baac:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bab0:	83 c4 20             	add    esp,0x20
c001bab3:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001bab8:	74 30                	je     c001baea <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001baba:	31 c0                	xor    eax,eax
c001babc:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001bac0:	7e 28                	jle    c001baea <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bac2:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001baca:	39 cb                	cmp    ebx,ecx
c001bacc:	75 19                	jne    c001bae7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bace:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001bad6:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001bada:	75 0b                	jne    c001bae7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001badc:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001bae3:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bae7:	40                   	inc    eax
c001bae8:	eb d2                	jmp    c001babc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001baea:	31 d2                	xor    edx,edx
c001baec:	83 ec 0c             	sub    esp,0xc
c001baef:	57                   	push   edi
c001baf0:	53                   	push   ebx
c001baf1:	56                   	push   esi
c001baf2:	52                   	push   edx
c001baf3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001baf7:	55                   	push   ebp
c001baf8:	e8 5f f9 ff ff       	call   c001b45c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bafd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bb01:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001bb05:	42                   	inc    edx
c001bb06:	83 c4 20             	add    esp,0x20
c001bb09:	83 fa 06             	cmp    edx,0x6
c001bb0c:	75 de                	jne    c001baec <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001bb0e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bb12:	83 ec 0c             	sub    esp,0xc
c001bb15:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bb19:	c1 e2 08             	shl    edx,0x8
c001bb1c:	0f b6 c4             	movzx  eax,ah
c001bb1f:	09 d0                	or     eax,edx
c001bb21:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001bb26:	6a 02                	push   0x2
c001bb28:	57                   	push   edi
c001bb29:	53                   	push   ebx
c001bb2a:	56                   	push   esi
c001bb2b:	55                   	push   ebp
c001bb2c:	e8 53 f7 ff ff       	call   c001b284 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb31:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001bb36:	83 c4 20             	add    esp,0x20
c001bb39:	57                   	push   edi
c001bb3a:	53                   	push   ebx
c001bb3b:	56                   	push   esi
c001bb3c:	55                   	push   ebp
c001bb3d:	e8 82 f8 ff ff       	call   c001b3c4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001bb42:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bb46:	57                   	push   edi
c001bb47:	53                   	push   ebx
c001bb48:	56                   	push   esi
c001bb49:	55                   	push   ebp
c001bb4a:	e8 df f7 ff ff       	call   c001b32e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bb4f:	b9 09 00 00 00       	mov    ecx,0x9
c001bb54:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001bb59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bb5d:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001bb61:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001bb65:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001bb69:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001bb6d:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001bb71:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001bb75:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001bb79:	83 ec 0c             	sub    esp,0xc
c001bb7c:	fc                   	cld    
c001bb7d:	8d 74 24 58          	lea    esi,[esp+0x58]
c001bb81:	89 e7                	mov    edi,esp
c001bb83:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bb85:	55                   	push   ebp
c001bb86:	e8 09 fd ff ff       	call   c001b894 <PCI::foundDevice(PCIDeviceInfo)>
c001bb8b:	81 c4 8c 00 00 00    	add    esp,0x8c
c001bb91:	5b                   	pop    ebx
c001bb92:	5e                   	pop    esi
c001bb93:	5f                   	pop    edi
c001bb94:	5d                   	pop    ebp
c001bb95:	c3                   	ret    

c001bb96 <PCI::checkDevice(unsigned char, unsigned char)>:
c001bb96:	55                   	push   ebp
c001bb97:	57                   	push   edi
c001bb98:	56                   	push   esi
c001bb99:	53                   	push   ebx
c001bb9a:	83 ec 0c             	sub    esp,0xc
c001bb9d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bba2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bba7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bbab:	6a 00                	push   0x0
c001bbad:	56                   	push   esi
c001bbae:	57                   	push   edi
c001bbaf:	55                   	push   ebp
c001bbb0:	e8 79 f7 ff ff       	call   c001b32e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bbb5:	6a 00                	push   0x0
c001bbb7:	56                   	push   esi
c001bbb8:	57                   	push   edi
c001bbb9:	55                   	push   ebp
c001bbba:	e8 5b fe ff ff       	call   c001ba1a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bbbf:	83 c4 20             	add    esp,0x20
c001bbc2:	6a 00                	push   0x0
c001bbc4:	56                   	push   esi
c001bbc5:	57                   	push   edi
c001bbc6:	55                   	push   ebp
c001bbc7:	e8 86 f7 ff ff       	call   c001b352 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bbcc:	83 c4 10             	add    esp,0x10
c001bbcf:	a8 80                	test   al,0x80
c001bbd1:	74 2d                	je     c001bc00 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001bbd3:	bb 01 00 00 00       	mov    ebx,0x1
c001bbd8:	53                   	push   ebx
c001bbd9:	56                   	push   esi
c001bbda:	57                   	push   edi
c001bbdb:	55                   	push   ebp
c001bbdc:	e8 4d f7 ff ff       	call   c001b32e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bbe1:	83 c4 10             	add    esp,0x10
c001bbe4:	0f b7 c0             	movzx  eax,ax
c001bbe7:	3d ff ff 00 00       	cmp    eax,0xffff
c001bbec:	74 0c                	je     c001bbfa <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bbee:	53                   	push   ebx
c001bbef:	56                   	push   esi
c001bbf0:	57                   	push   edi
c001bbf1:	55                   	push   ebp
c001bbf2:	e8 23 fe ff ff       	call   c001ba1a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bbf7:	83 c4 10             	add    esp,0x10
c001bbfa:	43                   	inc    ebx
c001bbfb:	83 fb 08             	cmp    ebx,0x8
c001bbfe:	75 d8                	jne    c001bbd8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bc00:	83 c4 0c             	add    esp,0xc
c001bc03:	5b                   	pop    ebx
c001bc04:	5e                   	pop    esi
c001bc05:	5f                   	pop    edi
c001bc06:	5d                   	pop    ebp
c001bc07:	c3                   	ret    

c001bc08 <PCI::detect()>:
c001bc08:	56                   	push   esi
c001bc09:	53                   	push   ebx
c001bc0a:	53                   	push   ebx
c001bc0b:	31 db                	xor    ebx,ebx
c001bc0d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bc11:	6a 00                	push   0x0
c001bc13:	6a 00                	push   0x0
c001bc15:	6a 00                	push   0x0
c001bc17:	56                   	push   esi
c001bc18:	e8 35 f7 ff ff       	call   c001b352 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bc1d:	83 c4 10             	add    esp,0x10
c001bc20:	a8 80                	test   al,0x80
c001bc22:	75 21                	jne    c001bc45 <PCI::detect()+0x3d>
c001bc24:	51                   	push   ecx
c001bc25:	51                   	push   ecx
c001bc26:	6a 00                	push   0x0
c001bc28:	56                   	push   esi
c001bc29:	e8 42 fc ff ff       	call   c001b870 <PCI::checkBus(unsigned char)>
c001bc2e:	83 c4 10             	add    esp,0x10
c001bc31:	eb 2a                	jmp    c001bc5d <PCI::detect()+0x55>
c001bc33:	52                   	push   edx
c001bc34:	52                   	push   edx
c001bc35:	53                   	push   ebx
c001bc36:	43                   	inc    ebx
c001bc37:	56                   	push   esi
c001bc38:	e8 33 fc ff ff       	call   c001b870 <PCI::checkBus(unsigned char)>
c001bc3d:	83 c4 10             	add    esp,0x10
c001bc40:	83 fb 08             	cmp    ebx,0x8
c001bc43:	74 18                	je     c001bc5d <PCI::detect()+0x55>
c001bc45:	53                   	push   ebx
c001bc46:	6a 00                	push   0x0
c001bc48:	6a 00                	push   0x0
c001bc4a:	56                   	push   esi
c001bc4b:	e8 de f6 ff ff       	call   c001b32e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bc50:	83 c4 10             	add    esp,0x10
c001bc53:	0f b7 c0             	movzx  eax,ax
c001bc56:	3d ff ff 00 00       	cmp    eax,0xffff
c001bc5b:	74 d6                	je     c001bc33 <PCI::detect()+0x2b>
c001bc5d:	58                   	pop    eax
c001bc5e:	5b                   	pop    ebx
c001bc5f:	5e                   	pop    esi
c001bc60:	c3                   	ret    
c001bc61:	90                   	nop

c001bc62 <IDE::close(int, int, void*)>:
c001bc62:	83 c8 ff             	or     eax,0xffffffff
c001bc65:	c3                   	ret    

c001bc66 <IDE::IDE()>:
c001bc66:	83 ec 0c             	sub    esp,0xc
c001bc69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc6d:	83 ec 08             	sub    esp,0x8
c001bc70:	68 f0 30 02 c0       	push   0xc00230f0
c001bc75:	50                   	push   eax
c001bc76:	e8 09 10 ff ff       	call   c000cc84 <HardDiskController::HardDiskController(char const*)>
c001bc7b:	83 c4 10             	add    esp,0x10
c001bc7e:	ba 80 31 02 c0       	mov    edx,0xc0023180
c001bc83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc87:	89 10                	mov    DWORD PTR [eax],edx
c001bc89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc8d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bc94:	90                   	nop
c001bc95:	83 c4 0c             	add    esp,0xc
c001bc98:	c3                   	ret    
c001bc99:	90                   	nop

c001bc9a <IDE::prepareInterrupt(unsigned char)>:
c001bc9a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bc9f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bca3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bcab:	c3                   	ret    

c001bcac <selectDrive(unsigned char, unsigned char)>:
c001bcac:	c3                   	ret    
c001bcad:	90                   	nop

c001bcae <IDE::getBase(unsigned char)>:
c001bcae:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001bcb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcb7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bcbf:	c3                   	ret    

c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bcc0:	55                   	push   ebp
c001bcc1:	57                   	push   edi
c001bcc2:	56                   	push   esi
c001bcc3:	53                   	push   ebx
c001bcc4:	83 ec 1c             	sub    esp,0x1c
c001bcc7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bccb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bccf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bcd3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bcd7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bcda:	80 f9 03             	cmp    cl,0x3
c001bcdd:	77 4f                	ja     c001bd2e <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001bcdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bce3:	0f b6 f2             	movzx  esi,dl
c001bce6:	0f b6 db             	movzx  ebx,bl
c001bce9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bcec:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001bcf1:	80 ca 80             	or     dl,0x80
c001bcf4:	52                   	push   edx
c001bcf5:	6a 0c                	push   0xc
c001bcf7:	56                   	push   esi
c001bcf8:	57                   	push   edi
c001bcf9:	e8 c2 ff ff ff       	call   c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcfe:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001bd03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd07:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bd0b:	ee                   	out    dx,al
c001bd0c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001bd11:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001bd15:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001bd19:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bd21:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bd25:	83 c4 2c             	add    esp,0x2c
c001bd28:	5b                   	pop    ebx
c001bd29:	5e                   	pop    esi
c001bd2a:	5f                   	pop    edi
c001bd2b:	5d                   	pop    ebp
c001bd2c:	eb 92                	jmp    c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd2e:	0f b6 cb             	movzx  ecx,bl
c001bd31:	83 f9 07             	cmp    ecx,0x7
c001bd34:	77 12                	ja     c001bd48 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001bd36:	0f b6 d2             	movzx  edx,dl
c001bd39:	0f b6 db             	movzx  ebx,bl
c001bd3c:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001bd44:	01 da                	add    edx,ebx
c001bd46:	eb 2f                	jmp    c001bd77 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bd48:	83 f9 0d             	cmp    ecx,0xd
c001bd4b:	77 13                	ja     c001bd60 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001bd4d:	0f b6 d2             	movzx  edx,dl
c001bd50:	0f b6 db             	movzx  ebx,bl
c001bd53:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001bd5a:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bd5e:	eb 17                	jmp    c001bd77 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bd60:	83 f9 15             	cmp    ecx,0x15
c001bd63:	77 13                	ja     c001bd78 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001bd65:	0f b6 d2             	movzx  edx,dl
c001bd68:	0f b6 db             	movzx  ebx,bl
c001bd6b:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001bd73:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bd77:	ee                   	out    dx,al
c001bd78:	83 c4 1c             	add    esp,0x1c
c001bd7b:	5b                   	pop    ebx
c001bd7c:	5e                   	pop    esi
c001bd7d:	5f                   	pop    edi
c001bd7e:	5d                   	pop    ebp
c001bd7f:	c3                   	ret    

c001bd80 <IDE::read(unsigned char, unsigned char)>:
c001bd80:	57                   	push   edi
c001bd81:	56                   	push   esi
c001bd82:	53                   	push   ebx
c001bd83:	83 ec 10             	sub    esp,0x10
c001bd86:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bd8a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bd8e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001bd92:	8d 42 f8             	lea    eax,[edx-0x8]
c001bd95:	3c 03                	cmp    al,0x3
c001bd97:	77 48                	ja     c001bde1 <IDE::read(unsigned char, unsigned char)+0x61>
c001bd99:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bd9d:	0f b6 f1             	movzx  esi,cl
c001bda0:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001bda3:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001bda8:	0c 80                	or     al,0x80
c001bdaa:	50                   	push   eax
c001bdab:	6a 0c                	push   0xc
c001bdad:	56                   	push   esi
c001bdae:	53                   	push   ebx
c001bdaf:	e8 0c ff ff ff       	call   c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdb4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bdb8:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001bdbd:	0f b6 d2             	movzx  edx,dl
c001bdc0:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bdc4:	ec                   	in     al,dx
c001bdc5:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bdc9:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001bdce:	52                   	push   edx
c001bdcf:	6a 0c                	push   0xc
c001bdd1:	56                   	push   esi
c001bdd2:	53                   	push   ebx
c001bdd3:	e8 e8 fe ff ff       	call   c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdd8:	83 c4 20             	add    esp,0x20
c001bddb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bddf:	eb 4c                	jmp    c001be2d <IDE::read(unsigned char, unsigned char)+0xad>
c001bde1:	0f b6 f2             	movzx  esi,dl
c001bde4:	83 fe 07             	cmp    esi,0x7
c001bde7:	77 12                	ja     c001bdfb <IDE::read(unsigned char, unsigned char)+0x7b>
c001bde9:	0f b6 c9             	movzx  ecx,cl
c001bdec:	0f b6 d2             	movzx  edx,dl
c001bdef:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001bdf7:	01 c2                	add    edx,eax
c001bdf9:	eb 31                	jmp    c001be2c <IDE::read(unsigned char, unsigned char)+0xac>
c001bdfb:	83 fe 0d             	cmp    esi,0xd
c001bdfe:	77 13                	ja     c001be13 <IDE::read(unsigned char, unsigned char)+0x93>
c001be00:	0f b6 c9             	movzx  ecx,cl
c001be03:	0f b6 d2             	movzx  edx,dl
c001be06:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001be0d:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001be11:	eb 19                	jmp    c001be2c <IDE::read(unsigned char, unsigned char)+0xac>
c001be13:	31 c0                	xor    eax,eax
c001be15:	83 fe 15             	cmp    esi,0x15
c001be18:	77 13                	ja     c001be2d <IDE::read(unsigned char, unsigned char)+0xad>
c001be1a:	0f b6 c9             	movzx  ecx,cl
c001be1d:	0f b6 d2             	movzx  edx,dl
c001be20:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001be28:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001be2c:	ec                   	in     al,dx
c001be2d:	83 c4 10             	add    esp,0x10
c001be30:	5b                   	pop    ebx
c001be31:	5e                   	pop    esi
c001be32:	5f                   	pop    edi
c001be33:	c3                   	ret    

c001be34 <IDE::waitInterrupt(unsigned char)>:
c001be34:	55                   	push   ebp
c001be35:	57                   	push   edi
c001be36:	56                   	push   esi
c001be37:	53                   	push   ebx
c001be38:	31 db                	xor    ebx,ebx
c001be3a:	83 ec 0c             	sub    esp,0xc
c001be3d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001be41:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001be46:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001be4e:	89 e8                	mov    eax,ebp
c001be50:	84 c0                	test   al,al
c001be52:	75 30                	jne    c001be84 <IDE::waitInterrupt(unsigned char)+0x50>
c001be54:	50                   	push   eax
c001be55:	6a 0c                	push   0xc
c001be57:	56                   	push   esi
c001be58:	57                   	push   edi
c001be59:	e8 22 ff ff ff       	call   c001bd80 <IDE::read(unsigned char, unsigned char)>
c001be5e:	83 c4 10             	add    esp,0x10
c001be61:	a8 01                	test   al,0x1
c001be63:	75 27                	jne    c001be8c <IDE::waitInterrupt(unsigned char)+0x58>
c001be65:	f6 c3 04             	test   bl,0x4
c001be68:	75 12                	jne    c001be7c <IDE::waitInterrupt(unsigned char)+0x48>
c001be6a:	83 fb 32             	cmp    ebx,0x32
c001be6d:	7e 0d                	jle    c001be7c <IDE::waitInterrupt(unsigned char)+0x48>
c001be6f:	83 ec 0c             	sub    esp,0xc
c001be72:	6a 64                	push   0x64
c001be74:	e8 73 a4 ff ff       	call   c00162ec <milliTenthSleep(unsigned int)>
c001be79:	83 c4 10             	add    esp,0x10
c001be7c:	83 fb 3c             	cmp    ebx,0x3c
c001be7f:	74 0b                	je     c001be8c <IDE::waitInterrupt(unsigned char)+0x58>
c001be81:	43                   	inc    ebx
c001be82:	eb c2                	jmp    c001be46 <IDE::waitInterrupt(unsigned char)+0x12>
c001be84:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001be8c:	83 c4 0c             	add    esp,0xc
c001be8f:	89 e8                	mov    eax,ebp
c001be91:	5b                   	pop    ebx
c001be92:	5e                   	pop    esi
c001be93:	5f                   	pop    edi
c001be94:	5d                   	pop    ebp
c001be95:	c3                   	ret    

c001be96 <ideChannel0IRQHandler(regs*, void*)>:
c001be96:	83 ec 10             	sub    esp,0x10
c001be99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001be9d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bea4:	6a 07                	push   0x7
c001bea6:	6a 00                	push   0x0
c001bea8:	50                   	push   eax
c001bea9:	e8 d2 fe ff ff       	call   c001bd80 <IDE::read(unsigned char, unsigned char)>
c001beae:	83 c4 1c             	add    esp,0x1c
c001beb1:	c3                   	ret    

c001beb2 <ideChannel1IRQHandler(regs*, void*)>:
c001beb2:	83 ec 10             	sub    esp,0x10
c001beb5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001beb9:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bec0:	6a 07                	push   0x7
c001bec2:	6a 01                	push   0x1
c001bec4:	50                   	push   eax
c001bec5:	e8 b6 fe ff ff       	call   c001bd80 <IDE::read(unsigned char, unsigned char)>
c001beca:	83 c4 1c             	add    esp,0x1c
c001becd:	c3                   	ret    

c001bece <IDE::enableIRQs(unsigned char, bool)>:
c001bece:	57                   	push   edi
c001becf:	b8 02 00 00 00       	mov    eax,0x2
c001bed4:	56                   	push   esi
c001bed5:	53                   	push   ebx
c001bed6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bedb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bedf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bee3:	74 02                	je     c001bee7 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001bee5:	31 c0                	xor    eax,eax
c001bee7:	0f b6 db             	movzx  ebx,bl
c001beea:	bf 04 00 00 00       	mov    edi,0x4
c001beef:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001bef6:	50                   	push   eax
c001bef7:	6a 0c                	push   0xc
c001bef9:	53                   	push   ebx
c001befa:	56                   	push   esi
c001befb:	e8 c0 fd ff ff       	call   c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf00:	83 c4 10             	add    esp,0x10
c001bf03:	50                   	push   eax
c001bf04:	6a 0c                	push   0xc
c001bf06:	53                   	push   ebx
c001bf07:	56                   	push   esi
c001bf08:	e8 73 fe ff ff       	call   c001bd80 <IDE::read(unsigned char, unsigned char)>
c001bf0d:	83 c4 10             	add    esp,0x10
c001bf10:	4f                   	dec    edi
c001bf11:	75 f0                	jne    c001bf03 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001bf13:	5b                   	pop    ebx
c001bf14:	5e                   	pop    esi
c001bf15:	5f                   	pop    edi
c001bf16:	c3                   	ret    
c001bf17:	90                   	nop

c001bf18 <IDE::open(int, int, void*)>:
c001bf18:	55                   	push   ebp
c001bf19:	57                   	push   edi
c001bf1a:	56                   	push   esi
c001bf1b:	53                   	push   ebx
c001bf1c:	83 ec 1c             	sub    esp,0x1c
c001bf1f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bf23:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bf2a:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bf33:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bf3c:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bf43:	0f 85 da 02 00 00    	jne    c001c223 <IDE::open(int, int, void*)+0x30b>
c001bf49:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bf4f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001bf53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf57:	83 e0 7f             	and    eax,0x7f
c001bf5a:	83 f8 05             	cmp    eax,0x5
c001bf5d:	74 05                	je     c001bf64 <IDE::open(int, int, void*)+0x4c>
c001bf5f:	83 f8 0f             	cmp    eax,0xf
c001bf62:	75 32                	jne    c001bf96 <IDE::open(int, int, void*)+0x7e>
c001bf64:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bf6a:	83 e0 fc             	and    eax,0xfffffffc
c001bf6d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bf74:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bf7a:	83 e0 fc             	and    eax,0xfffffffc
c001bf7d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bf84:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bf8a:	83 e0 fc             	and    eax,0xfffffffc
c001bf8d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bf94:	eb 14                	jmp    c001bfaa <IDE::open(int, int, void*)+0x92>
c001bf96:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bfa0:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bfaa:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001bfb1:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bfb6:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bfbd:	89 fa                	mov    edx,edi
c001bfbf:	89 f1                	mov    ecx,esi
c001bfc1:	c1 e1 10             	shl    ecx,0x10
c001bfc4:	89 e8                	mov    eax,ebp
c001bfc6:	c1 e0 0b             	shl    eax,0xb
c001bfc9:	09 c1                	or     ecx,eax
c001bfcb:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bfd2:	c1 e0 08             	shl    eax,0x8
c001bfd5:	09 c1                	or     ecx,eax
c001bfd7:	89 c8                	mov    eax,ecx
c001bfd9:	0d 08 00 00 80       	or     eax,0x80000008
c001bfde:	ef                   	out    dx,eax
c001bfdf:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bfe4:	ed                   	in     eax,dx
c001bfe5:	c1 e8 10             	shr    eax,0x10
c001bfe8:	3d ff ff 00 00       	cmp    eax,0xffff
c001bfed:	0f 84 f9 00 00 00    	je     c001c0ec <IDE::open(int, int, void*)+0x1d4>
c001bff3:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bff9:	89 fa                	mov    edx,edi
c001bffb:	89 c8                	mov    eax,ecx
c001bffd:	ef                   	out    dx,eax
c001bffe:	b0 fe                	mov    al,0xfe
c001c000:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c005:	ee                   	out    dx,al
c001c006:	89 c8                	mov    eax,ecx
c001c008:	89 fa                	mov    edx,edi
c001c00a:	ef                   	out    dx,eax
c001c00b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c010:	ed                   	in     eax,dx
c001c011:	3c fe                	cmp    al,0xfe
c001c013:	0f 85 a4 00 00 00    	jne    c001c0bd <IDE::open(int, int, void*)+0x1a5>
c001c019:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c001c01f:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001c026:	74 30                	je     c001c058 <IDE::open(int, int, void*)+0x140>
c001c028:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c02e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c032:	83 ec 0c             	sub    esp,0xc
c001c035:	40                   	inc    eax
c001c036:	0f b6 c0             	movzx  eax,al
c001c039:	50                   	push   eax
c001c03a:	55                   	push   ebp
c001c03b:	56                   	push   esi
c001c03c:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001c042:	51                   	push   ecx
c001c043:	e8 94 38 ff ff       	call   c000f8dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c048:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c04d:	83 c4 1c             	add    esp,0x1c
c001c050:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c056:	eb 0a                	jmp    c001c062 <IDE::open(int, int, void*)+0x14a>
c001c058:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c062:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c069:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001c06e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c075:	89 ea                	mov    edx,ebp
c001c077:	c1 e1 10             	shl    ecx,0x10
c001c07a:	c1 e0 08             	shl    eax,0x8
c001c07d:	09 c1                	or     ecx,eax
c001c07f:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c086:	c1 e0 0b             	shl    eax,0xb
c001c089:	09 c1                	or     ecx,eax
c001c08b:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c091:	89 c8                	mov    eax,ecx
c001c093:	ef                   	out    dx,eax
c001c094:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001c09a:	be fc 0c 00 00       	mov    esi,0xcfc
c001c09f:	89 f2                	mov    edx,esi
c001c0a1:	89 f8                	mov    eax,edi
c001c0a3:	ee                   	out    dx,al
c001c0a4:	89 c8                	mov    eax,ecx
c001c0a6:	89 ea                	mov    edx,ebp
c001c0a8:	ef                   	out    dx,eax
c001c0a9:	89 f2                	mov    edx,esi
c001c0ab:	ed                   	in     eax,dx
c001c0ac:	0f b6 c0             	movzx  eax,al
c001c0af:	39 f8                	cmp    eax,edi
c001c0b1:	74 49                	je     c001c0fc <IDE::open(int, int, void*)+0x1e4>
c001c0b3:	83 ec 0c             	sub    esp,0xc
c001c0b6:	68 08 31 02 c0       	push   0xc0023108
c001c0bb:	eb 37                	jmp    c001c0f4 <IDE::open(int, int, void*)+0x1dc>
c001c0bd:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c0c6:	75 1a                	jne    c001c0e2 <IDE::open(int, int, void*)+0x1ca>
c001c0c8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c0cd:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c0d2:	74 05                	je     c001c0d9 <IDE::open(int, int, void*)+0x1c1>
c001c0d4:	83 c0 80             	add    eax,0xffffff80
c001c0d7:	75 09                	jne    c001c0e2 <IDE::open(int, int, void*)+0x1ca>
c001c0d9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c0e0:	eb 1a                	jmp    c001c0fc <IDE::open(int, int, void*)+0x1e4>
c001c0e2:	83 ec 0c             	sub    esp,0xc
c001c0e5:	68 10 31 02 c0       	push   0xc0023110
c001c0ea:	eb 08                	jmp    c001c0f4 <IDE::open(int, int, void*)+0x1dc>
c001c0ec:	83 ec 0c             	sub    esp,0xc
c001c0ef:	68 41 31 02 c0       	push   0xc0023141
c001c0f4:	e8 0e 54 ff ff       	call   c0011507 <KePanic(char const*)>
c001c0f9:	83 c4 10             	add    esp,0x10
c001c0fc:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c103:	74 1a                	je     c001c11f <IDE::open(int, int, void*)+0x207>
c001c105:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c10b:	83 e0 fc             	and    eax,0xfffffffc
c001c10e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c115:	83 c0 08             	add    eax,0x8
c001c118:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c11f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c125:	89 c2                	mov    edx,eax
c001c127:	83 e2 0f             	and    edx,0xf
c001c12a:	83 fa 08             	cmp    edx,0x8
c001c12d:	75 0a                	jne    c001c139 <IDE::open(int, int, void*)+0x221>
c001c12f:	83 e8 02             	sub    eax,0x2
c001c132:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c139:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c13f:	89 c2                	mov    edx,eax
c001c141:	83 e2 0f             	and    edx,0xf
c001c144:	83 fa 08             	cmp    edx,0x8
c001c147:	75 0a                	jne    c001c153 <IDE::open(int, int, void*)+0x23b>
c001c149:	83 e8 02             	sub    eax,0x2
c001c14c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c153:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c15a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c161:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c164:	89 d0                	mov    eax,edx
c001c166:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c16a:	8d 7a 01             	lea    edi,[edx+0x1]
c001c16d:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c171:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c175:	83 e1 3f             	and    ecx,0x3f
c001c178:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c17c:	89 f9                	mov    ecx,edi
c001c17e:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c185:	8d 78 02             	lea    edi,[eax+0x2]
c001c188:	0f b6 c9             	movzx  ecx,cl
c001c18b:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c18e:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c192:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c196:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c19a:	83 e2 3f             	and    edx,0x3f
c001c19d:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c1a1:	89 f9                	mov    ecx,edi
c001c1a3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c1a9:	8d 78 03             	lea    edi,[eax+0x3]
c001c1ac:	0f b6 d1             	movzx  edx,cl
c001c1af:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c1b2:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c1b6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c1ba:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c1be:	83 e1 3f             	and    ecx,0x3f
c001c1c1:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c1c5:	89 f9                	mov    ecx,edi
c001c1c7:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c1cd:	8d 78 04             	lea    edi,[eax+0x4]
c001c1d0:	0f b6 c9             	movzx  ecx,cl
c001c1d3:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c1d6:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c1da:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c1de:	89 fa                	mov    edx,edi
c001c1e0:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c1e6:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c1ea:	83 e2 3f             	and    edx,0x3f
c001c1ed:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c1f1:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c1f8:	66 85 f6             	test   si,si
c001c1fb:	74 65                	je     c001c262 <IDE::open(int, int, void*)+0x34a>
c001c1fd:	89 f9                	mov    ecx,edi
c001c1ff:	83 c0 05             	add    eax,0x5
c001c202:	0f b6 d1             	movzx  edx,cl
c001c205:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c208:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c20c:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c210:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c216:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001c21a:	83 e0 3f             	and    eax,0x3f
c001c21d:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001c221:	eb 3f                	jmp    c001c262 <IDE::open(int, int, void*)+0x34a>
c001c223:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c22a:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c230:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c237:	05 06 02 00 00       	add    eax,0x206
c001c23c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c243:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c24a:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c251:	05 06 02 00 00       	add    eax,0x206
c001c256:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c25d:	e9 bd fe ff ff       	jmp    c001c11f <IDE::open(int, int, void*)+0x207>
c001c262:	50                   	push   eax
c001c263:	50                   	push   eax
c001c264:	6a 00                	push   0x0
c001c266:	53                   	push   ebx
c001c267:	e8 2e fa ff ff       	call   c001bc9a <IDE::prepareInterrupt(unsigned char)>
c001c26c:	5a                   	pop    edx
c001c26d:	59                   	pop    ecx
c001c26e:	6a 01                	push   0x1
c001c270:	53                   	push   ebx
c001c271:	e8 24 fa ff ff       	call   c001bc9a <IDE::prepareInterrupt(unsigned char)>
c001c276:	83 c4 0c             	add    esp,0xc
c001c279:	6a 00                	push   0x0
c001c27b:	6a 00                	push   0x0
c001c27d:	53                   	push   ebx
c001c27e:	e8 4b fc ff ff       	call   c001bece <IDE::enableIRQs(unsigned char, bool)>
c001c283:	83 c4 0c             	add    esp,0xc
c001c286:	6a 00                	push   0x0
c001c288:	6a 01                	push   0x1
c001c28a:	53                   	push   ebx
c001c28b:	e8 3e fc ff ff       	call   c001bece <IDE::enableIRQs(unsigned char, bool)>
c001c290:	83 c4 10             	add    esp,0x10
c001c293:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c29a:	74 34                	je     c001c2d0 <IDE::open(int, int, void*)+0x3b8>
c001c29c:	83 ec 0c             	sub    esp,0xc
c001c29f:	53                   	push   ebx
c001c2a0:	6a 01                	push   0x1
c001c2a2:	68 96 be 01 c0       	push   0xc001be96
c001c2a7:	6a 0e                	push   0xe
c001c2a9:	53                   	push   ebx
c001c2aa:	e8 3d 06 ff ff       	call   c000c8ec <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c2af:	83 c4 14             	add    esp,0x14
c001c2b2:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c2b8:	53                   	push   ebx
c001c2b9:	6a 01                	push   0x1
c001c2bb:	68 b2 be 01 c0       	push   0xc001beb2
c001c2c0:	6a 0f                	push   0xf
c001c2c2:	53                   	push   ebx
c001c2c3:	e8 24 06 ff ff       	call   c000c8ec <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c2c8:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c2ce:	eb 38                	jmp    c001c308 <IDE::open(int, int, void*)+0x3f0>
c001c2d0:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c2da:	83 ec 0c             	sub    esp,0xc
c001c2dd:	53                   	push   ebx
c001c2de:	6a 00                	push   0x0
c001c2e0:	68 96 be 01 c0       	push   0xc001be96
c001c2e5:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c2eb:	53                   	push   ebx
c001c2ec:	e8 fb 05 ff ff       	call   c000c8ec <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c2f1:	83 c4 14             	add    esp,0x14
c001c2f4:	53                   	push   ebx
c001c2f5:	6a 00                	push   0x0
c001c2f7:	68 b2 be 01 c0       	push   0xc001beb2
c001c2fc:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c302:	53                   	push   ebx
c001c303:	e8 e4 05 ff ff       	call   c000c8ec <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c308:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c30a:	83 c4 20             	add    esp,0x20
c001c30d:	83 ec 0c             	sub    esp,0xc
c001c310:	53                   	push   ebx
c001c311:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c314:	83 c4 0c             	add    esp,0xc
c001c317:	6a 07                	push   0x7
c001c319:	6a 00                	push   0x0
c001c31b:	53                   	push   ebx
c001c31c:	e8 5f fa ff ff       	call   c001bd80 <IDE::read(unsigned char, unsigned char)>
c001c321:	83 c4 0c             	add    esp,0xc
c001c324:	6a 07                	push   0x7
c001c326:	6a 01                	push   0x1
c001c328:	53                   	push   ebx
c001c329:	e8 52 fa ff ff       	call   c001bd80 <IDE::read(unsigned char, unsigned char)>
c001c32e:	83 c4 0c             	add    esp,0xc
c001c331:	6a 01                	push   0x1
c001c333:	6a 00                	push   0x0
c001c335:	53                   	push   ebx
c001c336:	e8 93 fb ff ff       	call   c001bece <IDE::enableIRQs(unsigned char, bool)>
c001c33b:	83 c4 0c             	add    esp,0xc
c001c33e:	6a 01                	push   0x1
c001c340:	6a 01                	push   0x1
c001c342:	53                   	push   ebx
c001c343:	e8 86 fb ff ff       	call   c001bece <IDE::enableIRQs(unsigned char, bool)>
c001c348:	83 c4 2c             	add    esp,0x2c
c001c34b:	31 c0                	xor    eax,eax
c001c34d:	5b                   	pop    ebx
c001c34e:	5e                   	pop    esi
c001c34f:	5f                   	pop    edi
c001c350:	5d                   	pop    ebp
c001c351:	c3                   	ret    

c001c352 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c352:	55                   	push   ebp
c001c353:	57                   	push   edi
c001c354:	56                   	push   esi
c001c355:	53                   	push   ebx
c001c356:	83 ec 1c             	sub    esp,0x1c
c001c359:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c35d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c361:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c365:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c369:	8d 42 f8             	lea    eax,[edx-0x8]
c001c36c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c370:	3c 03                	cmp    al,0x3
c001c372:	77 5a                	ja     c001c3ce <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c374:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c378:	0f b6 db             	movzx  ebx,bl
c001c37b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c37f:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c382:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c387:	0c 80                	or     al,0x80
c001c389:	50                   	push   eax
c001c38a:	6a 0c                	push   0xc
c001c38c:	53                   	push   ebx
c001c38d:	56                   	push   esi
c001c38e:	e8 2d f9 ff ff       	call   c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c393:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c397:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c39c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c3a0:	0f b6 d2             	movzx  edx,dl
c001c3a3:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c3a7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c3a9:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c3ae:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c3b2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c3b6:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c3be:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c3c2:	83 c4 2c             	add    esp,0x2c
c001c3c5:	5b                   	pop    ebx
c001c3c6:	5e                   	pop    esi
c001c3c7:	5f                   	pop    edi
c001c3c8:	5d                   	pop    ebp
c001c3c9:	e9 f2 f8 ff ff       	jmp    c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3ce:	0f b6 c2             	movzx  eax,dl
c001c3d1:	83 f8 07             	cmp    eax,0x7
c001c3d4:	77 12                	ja     c001c3e8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c3d6:	0f b6 db             	movzx  ebx,bl
c001c3d9:	0f b6 c2             	movzx  eax,dl
c001c3dc:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c3e4:	01 c2                	add    edx,eax
c001c3e6:	eb 2f                	jmp    c001c417 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c3e8:	83 f8 0d             	cmp    eax,0xd
c001c3eb:	77 13                	ja     c001c400 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c3ed:	0f b6 db             	movzx  ebx,bl
c001c3f0:	0f b6 d2             	movzx  edx,dl
c001c3f3:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c3fa:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c3fe:	eb 17                	jmp    c001c417 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c400:	83 f8 15             	cmp    eax,0x15
c001c403:	77 14                	ja     c001c419 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c405:	0f b6 db             	movzx  ebx,bl
c001c408:	0f b6 d2             	movzx  edx,dl
c001c40b:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c413:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c417:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c419:	83 c4 1c             	add    esp,0x1c
c001c41c:	5b                   	pop    ebx
c001c41d:	5e                   	pop    esi
c001c41e:	5f                   	pop    edi
c001c41f:	5d                   	pop    ebp
c001c420:	c3                   	ret    
c001c421:	90                   	nop

c001c422 <IDE::detect()>:
c001c422:	55                   	push   ebp
c001c423:	57                   	push   edi
c001c424:	56                   	push   esi
c001c425:	53                   	push   ebx
c001c426:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c42c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c433:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c43a:	0f 85 9e 02 00 00    	jne    c001c6de <IDE::detect()+0x2bc>
c001c440:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c447:	31 f6                	xor    esi,esi
c001c449:	31 ff                	xor    edi,edi
c001c44b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c453:	89 f8                	mov    eax,edi
c001c455:	c1 e0 06             	shl    eax,0x6
c001c458:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c460:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c464:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c468:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c46c:	c1 e0 04             	shl    eax,0x4
c001c46f:	83 c8 a0             	or     eax,0xffffffa0
c001c472:	0f b6 c0             	movzx  eax,al
c001c475:	50                   	push   eax
c001c476:	6a 06                	push   0x6
c001c478:	56                   	push   esi
c001c479:	53                   	push   ebx
c001c47a:	e8 41 f8 ff ff       	call   c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c47f:	83 c4 0c             	add    esp,0xc
c001c482:	6a 0c                	push   0xc
c001c484:	56                   	push   esi
c001c485:	53                   	push   ebx
c001c486:	e8 f5 f8 ff ff       	call   c001bd80 <IDE::read(unsigned char, unsigned char)>
c001c48b:	83 c4 0c             	add    esp,0xc
c001c48e:	6a 0c                	push   0xc
c001c490:	56                   	push   esi
c001c491:	53                   	push   ebx
c001c492:	e8 e9 f8 ff ff       	call   c001bd80 <IDE::read(unsigned char, unsigned char)>
c001c497:	83 c4 0c             	add    esp,0xc
c001c49a:	6a 0c                	push   0xc
c001c49c:	56                   	push   esi
c001c49d:	53                   	push   ebx
c001c49e:	e8 dd f8 ff ff       	call   c001bd80 <IDE::read(unsigned char, unsigned char)>
c001c4a3:	83 c4 0c             	add    esp,0xc
c001c4a6:	6a 0c                	push   0xc
c001c4a8:	56                   	push   esi
c001c4a9:	53                   	push   ebx
c001c4aa:	e8 d1 f8 ff ff       	call   c001bd80 <IDE::read(unsigned char, unsigned char)>
c001c4af:	68 ec 00 00 00       	push   0xec
c001c4b4:	6a 07                	push   0x7
c001c4b6:	56                   	push   esi
c001c4b7:	53                   	push   ebx
c001c4b8:	e8 03 f8 ff ff       	call   c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4bd:	83 c4 1c             	add    esp,0x1c
c001c4c0:	6a 0c                	push   0xc
c001c4c2:	56                   	push   esi
c001c4c3:	53                   	push   ebx
c001c4c4:	e8 b7 f8 ff ff       	call   c001bd80 <IDE::read(unsigned char, unsigned char)>
c001c4c9:	83 c4 0c             	add    esp,0xc
c001c4cc:	6a 0c                	push   0xc
c001c4ce:	56                   	push   esi
c001c4cf:	53                   	push   ebx
c001c4d0:	e8 ab f8 ff ff       	call   c001bd80 <IDE::read(unsigned char, unsigned char)>
c001c4d5:	83 c4 0c             	add    esp,0xc
c001c4d8:	6a 0c                	push   0xc
c001c4da:	56                   	push   esi
c001c4db:	53                   	push   ebx
c001c4dc:	e8 9f f8 ff ff       	call   c001bd80 <IDE::read(unsigned char, unsigned char)>
c001c4e1:	83 c4 0c             	add    esp,0xc
c001c4e4:	6a 0c                	push   0xc
c001c4e6:	56                   	push   esi
c001c4e7:	53                   	push   ebx
c001c4e8:	e8 93 f8 ff ff       	call   c001bd80 <IDE::read(unsigned char, unsigned char)>
c001c4ed:	83 c4 0c             	add    esp,0xc
c001c4f0:	6a 0c                	push   0xc
c001c4f2:	56                   	push   esi
c001c4f3:	53                   	push   ebx
c001c4f4:	e8 87 f8 ff ff       	call   c001bd80 <IDE::read(unsigned char, unsigned char)>
c001c4f9:	83 c4 10             	add    esp,0x10
c001c4fc:	84 c0                	test   al,al
c001c4fe:	0f 84 61 01 00 00    	je     c001c665 <IDE::detect()+0x243>
c001c504:	31 ed                	xor    ebp,ebp
c001c506:	50                   	push   eax
c001c507:	6a 0c                	push   0xc
c001c509:	56                   	push   esi
c001c50a:	53                   	push   ebx
c001c50b:	e8 70 f8 ff ff       	call   c001bd80 <IDE::read(unsigned char, unsigned char)>
c001c510:	83 c4 10             	add    esp,0x10
c001c513:	a8 01                	test   al,0x1
c001c515:	0f 85 6b 01 00 00    	jne    c001c686 <IDE::detect()+0x264>
c001c51b:	a8 80                	test   al,0x80
c001c51d:	75 04                	jne    c001c523 <IDE::detect()+0x101>
c001c51f:	a8 08                	test   al,0x8
c001c521:	75 23                	jne    c001c546 <IDE::detect()+0x124>
c001c523:	45                   	inc    ebp
c001c524:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001c52a:	7e da                	jle    c001c506 <IDE::detect()+0xe4>
c001c52c:	83 ec 0c             	sub    esp,0xc
c001c52f:	6a 32                	push   0x32
c001c531:	e8 b6 9d ff ff       	call   c00162ec <milliTenthSleep(unsigned int)>
c001c536:	83 c4 10             	add    esp,0x10
c001c539:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001c53f:	75 c5                	jne    c001c506 <IDE::detect()+0xe4>
c001c541:	e9 40 01 00 00       	jmp    c001c686 <IDE::detect()+0x264>
c001c546:	31 c9                	xor    ecx,ecx
c001c548:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c54c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001c550:	83 ec 0c             	sub    esp,0xc
c001c553:	68 80 00 00 00       	push   0x80
c001c558:	55                   	push   ebp
c001c559:	6a 00                	push   0x0
c001c55b:	56                   	push   esi
c001c55c:	53                   	push   ebx
c001c55d:	e8 f0 fd ff ff       	call   c001c352 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c562:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c567:	89 f8                	mov    eax,edi
c001c569:	c1 e0 06             	shl    eax,0x6
c001c56c:	01 d8                	add    eax,ebx
c001c56e:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c575:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c57c:	89 d1                	mov    ecx,edx
c001c57e:	89 f2                	mov    edx,esi
c001c580:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c586:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c58a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c590:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c594:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c59b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c5a3:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c5aa:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c5b2:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c5b8:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c5bf:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c5c5:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c5c9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c5cd:	83 c4 20             	add    esp,0x20
c001c5d0:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001c5d3:	83 c5 02             	add    ebp,0x2
c001c5d6:	83 c0 02             	add    eax,0x2
c001c5d9:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c5df:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001c5e2:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c5e8:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001c5ec:	75 e2                	jne    c001c5d0 <IDE::detect()+0x1ae>
c001c5ee:	89 f8                	mov    eax,edi
c001c5f0:	c1 e0 06             	shl    eax,0x6
c001c5f3:	01 d8                	add    eax,ebx
c001c5f5:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c5fc:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c603:	c1 ea 09             	shr    edx,0x9
c001c606:	83 e2 01             	and    edx,0x1
c001c609:	80 e1 01             	and    cl,0x1
c001c60c:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c612:	75 22                	jne    c001c636 <IDE::detect()+0x214>
c001c614:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c61b:	74 47                	je     c001c664 <IDE::detect()+0x242>
c001c61d:	83 ec 0c             	sub    esp,0xc
c001c620:	68 7c 01 00 00       	push   0x17c
c001c625:	e8 a9 b4 fe ff       	call   c0007ad3 <malloc>
c001c62a:	89 04 24             	mov    DWORD PTR [esp],eax
c001c62d:	89 c5                	mov    ebp,eax
c001c62f:	e8 16 05 00 00       	call   c001cb4a <ATA::ATA()>
c001c634:	eb 17                	jmp    c001c64d <IDE::detect()+0x22b>
c001c636:	83 ec 0c             	sub    esp,0xc
c001c639:	68 84 01 00 00       	push   0x184
c001c63e:	e8 90 b4 fe ff       	call   c0007ad3 <malloc>
c001c643:	89 04 24             	mov    DWORD PTR [esp],eax
c001c646:	89 c5                	mov    ebp,eax
c001c648:	e8 6f 0e 00 00       	call   c001d4bc <ATAPI::ATAPI()>
c001c64d:	5a                   	pop    edx
c001c64e:	59                   	pop    ecx
c001c64f:	55                   	push   ebp
c001c650:	53                   	push   ebx
c001c651:	e8 ea 02 ff ff       	call   c000c940 <Device::addChild(Device*)>
c001c656:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c659:	53                   	push   ebx
c001c65a:	57                   	push   edi
c001c65b:	6a 00                	push   0x0
c001c65d:	55                   	push   ebp
c001c65e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c661:	83 c4 20             	add    esp,0x20
c001c664:	47                   	inc    edi
c001c665:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c66a:	74 0d                	je     c001c679 <IDE::detect()+0x257>
c001c66c:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c674:	e9 da fd ff ff       	jmp    c001c453 <IDE::detect()+0x31>
c001c679:	4e                   	dec    esi
c001c67a:	74 62                	je     c001c6de <IDE::detect()+0x2bc>
c001c67c:	be 01 00 00 00       	mov    esi,0x1
c001c681:	e9 c5 fd ff ff       	jmp    c001c44b <IDE::detect()+0x29>
c001c686:	50                   	push   eax
c001c687:	6a 04                	push   0x4
c001c689:	56                   	push   esi
c001c68a:	53                   	push   ebx
c001c68b:	e8 f0 f6 ff ff       	call   c001bd80 <IDE::read(unsigned char, unsigned char)>
c001c690:	83 c4 0c             	add    esp,0xc
c001c693:	6a 05                	push   0x5
c001c695:	56                   	push   esi
c001c696:	53                   	push   ebx
c001c697:	89 c5                	mov    ebp,eax
c001c699:	e8 e2 f6 ff ff       	call   c001bd80 <IDE::read(unsigned char, unsigned char)>
c001c69e:	89 e9                	mov    ecx,ebp
c001c6a0:	83 c4 10             	add    esp,0x10
c001c6a3:	0f b6 e9             	movzx  ebp,cl
c001c6a6:	83 fd 14             	cmp    ebp,0x14
c001c6a9:	74 2d                	je     c001c6d8 <IDE::detect()+0x2b6>
c001c6ab:	83 fd 69             	cmp    ebp,0x69
c001c6ae:	75 b5                	jne    c001c665 <IDE::detect()+0x243>
c001c6b0:	3c 96                	cmp    al,0x96
c001c6b2:	75 b1                	jne    c001c665 <IDE::detect()+0x243>
c001c6b4:	68 a1 00 00 00       	push   0xa1
c001c6b9:	6a 07                	push   0x7
c001c6bb:	56                   	push   esi
c001c6bc:	53                   	push   ebx
c001c6bd:	e8 fe f5 ff ff       	call   c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6c2:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c6c9:	e8 1e 9c ff ff       	call   c00162ec <milliTenthSleep(unsigned int)>
c001c6ce:	83 c4 10             	add    esp,0x10
c001c6d1:	b1 01                	mov    cl,0x1
c001c6d3:	e9 70 fe ff ff       	jmp    c001c548 <IDE::detect()+0x126>
c001c6d8:	3c eb                	cmp    al,0xeb
c001c6da:	75 cf                	jne    c001c6ab <IDE::detect()+0x289>
c001c6dc:	eb d6                	jmp    c001c6b4 <IDE::detect()+0x292>
c001c6de:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c6e4:	5b                   	pop    ebx
c001c6e5:	5e                   	pop    esi
c001c6e6:	5f                   	pop    edi
c001c6e7:	5d                   	pop    ebp
c001c6e8:	c3                   	ret    
c001c6e9:	90                   	nop

c001c6ea <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c6ea:	55                   	push   ebp
c001c6eb:	57                   	push   edi
c001c6ec:	56                   	push   esi
c001c6ed:	53                   	push   ebx
c001c6ee:	83 ec 1c             	sub    esp,0x1c
c001c6f1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c6f5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c6f9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c6fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c701:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c705:	88 c3                	mov    bl,al
c001c707:	25 ff 00 00 00       	and    eax,0xff
c001c70c:	0f 84 88 00 00 00    	je     c001c79a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c712:	83 ec 0c             	sub    esp,0xc
c001c715:	89 c7                	mov    edi,eax
c001c717:	68 6b 31 02 c0       	push   0xc002316b
c001c71c:	e8 e9 e1 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001c721:	83 c4 10             	add    esp,0x10
c001c724:	83 ff 01             	cmp    edi,0x1
c001c727:	74 6b                	je     c001c794 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c729:	83 ff 02             	cmp    edi,0x2
c001c72c:	75 58                	jne    c001c786 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c72e:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c733:	50                   	push   eax
c001c734:	6a 01                	push   0x1
c001c736:	01 ff                	add    edi,edi
c001c738:	09 fe                	or     esi,edi
c001c73a:	89 f0                	mov    eax,esi
c001c73c:	0f b6 f0             	movzx  esi,al
c001c73f:	c1 e6 06             	shl    esi,0x6
c001c742:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c74a:	50                   	push   eax
c001c74b:	55                   	push   ebp
c001c74c:	e8 2f f6 ff ff       	call   c001bd80 <IDE::read(unsigned char, unsigned char)>
c001c751:	83 c4 10             	add    esp,0x10
c001c754:	a8 01                	test   al,0x1
c001c756:	74 02                	je     c001c75a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c758:	b3 07                	mov    bl,0x7
c001c75a:	a8 02                	test   al,0x2
c001c75c:	74 02                	je     c001c760 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c75e:	b3 03                	mov    bl,0x3
c001c760:	a8 04                	test   al,0x4
c001c762:	74 02                	je     c001c766 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c764:	b3 14                	mov    bl,0x14
c001c766:	a8 08                	test   al,0x8
c001c768:	74 02                	je     c001c76c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c76a:	b3 03                	mov    bl,0x3
c001c76c:	a8 10                	test   al,0x10
c001c76e:	74 02                	je     c001c772 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c770:	b3 15                	mov    bl,0x15
c001c772:	a8 20                	test   al,0x20
c001c774:	74 02                	je     c001c778 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c776:	b3 03                	mov    bl,0x3
c001c778:	a8 40                	test   al,0x40
c001c77a:	74 02                	je     c001c77e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c77c:	b3 16                	mov    bl,0x16
c001c77e:	a8 80                	test   al,0x80
c001c780:	74 18                	je     c001c79a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c782:	b3 0d                	mov    bl,0xd
c001c784:	eb 14                	jmp    c001c79a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c786:	83 ff 03             	cmp    edi,0x3
c001c789:	74 0d                	je     c001c798 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c78b:	83 ff 04             	cmp    edi,0x4
c001c78e:	75 0a                	jne    c001c79a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c790:	b3 08                	mov    bl,0x8
c001c792:	eb 06                	jmp    c001c79a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c794:	b3 13                	mov    bl,0x13
c001c796:	eb 02                	jmp    c001c79a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c798:	b3 17                	mov    bl,0x17
c001c79a:	83 c4 1c             	add    esp,0x1c
c001c79d:	88 d8                	mov    al,bl
c001c79f:	5b                   	pop    ebx
c001c7a0:	5e                   	pop    esi
c001c7a1:	5f                   	pop    edi
c001c7a2:	5d                   	pop    ebp
c001c7a3:	c3                   	ret    

c001c7a4 <IDE::polling(unsigned char, unsigned int)>:
c001c7a4:	57                   	push   edi
c001c7a5:	56                   	push   esi
c001c7a6:	53                   	push   ebx
c001c7a7:	bb 04 00 00 00       	mov    ebx,0x4
c001c7ac:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c7b0:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c7b5:	52                   	push   edx
c001c7b6:	6a 0c                	push   0xc
c001c7b8:	56                   	push   esi
c001c7b9:	57                   	push   edi
c001c7ba:	e8 c1 f5 ff ff       	call   c001bd80 <IDE::read(unsigned char, unsigned char)>
c001c7bf:	83 c4 10             	add    esp,0x10
c001c7c2:	4b                   	dec    ebx
c001c7c3:	75 f0                	jne    c001c7b5 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c7c5:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c7ca:	50                   	push   eax
c001c7cb:	6a 0c                	push   0xc
c001c7cd:	56                   	push   esi
c001c7ce:	57                   	push   edi
c001c7cf:	e8 ac f5 ff ff       	call   c001bd80 <IDE::read(unsigned char, unsigned char)>
c001c7d4:	83 c4 10             	add    esp,0x10
c001c7d7:	a8 01                	test   al,0x1
c001c7d9:	75 17                	jne    c001c7f2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c7db:	a8 20                	test   al,0x20
c001c7dd:	75 0f                	jne    c001c7ee <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c7df:	4b                   	dec    ebx
c001c7e0:	74 10                	je     c001c7f2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c7e2:	a8 80                	test   al,0x80
c001c7e4:	75 e4                	jne    c001c7ca <IDE::polling(unsigned char, unsigned int)+0x26>
c001c7e6:	a8 08                	test   al,0x8
c001c7e8:	74 e0                	je     c001c7ca <IDE::polling(unsigned char, unsigned int)+0x26>
c001c7ea:	31 c0                	xor    eax,eax
c001c7ec:	eb 06                	jmp    c001c7f4 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c7ee:	b0 01                	mov    al,0x1
c001c7f0:	eb 02                	jmp    c001c7f4 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c7f2:	b0 02                	mov    al,0x2
c001c7f4:	5b                   	pop    ebx
c001c7f5:	5e                   	pop    esi
c001c7f6:	5f                   	pop    edi
c001c7f7:	c3                   	ret    

c001c7f8 <SATABus::close(int, int, void*)>:
c001c7f8:	31 c0                	xor    eax,eax
c001c7fa:	c3                   	ret    
c001c7fb:	90                   	nop

c001c7fc <SATABus::detect()>:
c001c7fc:	c3                   	ret    
c001c7fd:	90                   	nop

c001c7fe <SATABus::SATABus()>:
c001c7fe:	83 ec 0c             	sub    esp,0xc
c001c801:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c805:	83 ec 08             	sub    esp,0x8
c001c808:	68 a4 31 02 c0       	push   0xc00231a4
c001c80d:	50                   	push   eax
c001c80e:	e8 71 04 ff ff       	call   c000cc84 <HardDiskController::HardDiskController(char const*)>
c001c813:	83 c4 10             	add    esp,0x10
c001c816:	ba d0 31 02 c0       	mov    edx,0xc00231d0
c001c81b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c81f:	89 10                	mov    DWORD PTR [eax],edx
c001c821:	83 ec 0c             	sub    esp,0xc
c001c824:	6a 50                	push   0x50
c001c826:	e8 86 b6 fe ff       	call   c0007eb1 <Phys::allocateContiguousPages(int)>
c001c82b:	83 c4 10             	add    esp,0x10
c001c82e:	89 c2                	mov    edx,eax
c001c830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c834:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c83a:	83 ec 0c             	sub    esp,0xc
c001c83d:	6a 50                	push   0x50
c001c83f:	e8 b1 cd fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001c844:	83 c4 10             	add    esp,0x10
c001c847:	89 c2                	mov    edx,eax
c001c849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c84d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c853:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001c858:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c85c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c862:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c866:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c86c:	83 ec 0c             	sub    esp,0xc
c001c86f:	6a 03                	push   0x3
c001c871:	6a 50                	push   0x50
c001c873:	51                   	push   ecx
c001c874:	52                   	push   edx
c001c875:	50                   	push   eax
c001c876:	e8 8d d6 fe ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c87b:	83 c4 20             	add    esp,0x20
c001c87e:	90                   	nop
c001c87f:	83 c4 0c             	add    esp,0xc
c001c882:	c3                   	ret    
c001c883:	90                   	nop

c001c884 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c884:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c888:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c88b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c88e:	09 c2                	or     edx,eax
c001c890:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c894:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c89a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c89c:	31 c0                	xor    eax,eax
c001c89e:	c1 e9 08             	shr    ecx,0x8
c001c8a1:	83 e1 0f             	and    ecx,0xf
c001c8a4:	39 c8                	cmp    eax,ecx
c001c8a6:	74 0a                	je     c001c8b2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c8a8:	f6 c2 01             	test   dl,0x1
c001c8ab:	74 08                	je     c001c8b5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c8ad:	d1 ea                	shr    edx,1
c001c8af:	40                   	inc    eax
c001c8b0:	eb f2                	jmp    c001c8a4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c8b2:	83 c8 ff             	or     eax,0xffffffff
c001c8b5:	c3                   	ret    

c001c8b6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c8b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c8ba:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c8bd:	89 c2                	mov    edx,eax
c001c8bf:	c1 ea 08             	shr    edx,0x8
c001c8c2:	83 e2 0f             	and    edx,0xf
c001c8c5:	4a                   	dec    edx
c001c8c6:	75 32                	jne    c001c8fa <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c8c8:	83 e0 0f             	and    eax,0xf
c001c8cb:	83 f8 03             	cmp    eax,0x3
c001c8ce:	75 2a                	jne    c001c8fa <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c8d0:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c8d3:	b8 02 00 00 00       	mov    eax,0x2
c001c8d8:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c8de:	74 1c                	je     c001c8fc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c8e0:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c8e6:	b8 04 00 00 00       	mov    eax,0x4
c001c8eb:	74 0f                	je     c001c8fc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c8ed:	31 c0                	xor    eax,eax
c001c8ef:	83 fa 03             	cmp    edx,0x3
c001c8f2:	0f 94 c0             	sete   al
c001c8f5:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c8f9:	c3                   	ret    
c001c8fa:	31 c0                	xor    eax,eax
c001c8fc:	c3                   	ret    
c001c8fd:	90                   	nop

c001c8fe <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c8fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c902:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c905:	0f ba e2 0f          	bt     edx,0xf
c001c909:	72 f7                	jb     c001c902 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c90b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c90e:	83 ca 10             	or     edx,0x10
c001c911:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c914:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c917:	83 ca 01             	or     edx,0x1
c001c91a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c91d:	c3                   	ret    

c001c91e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c91e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c922:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c925:	83 e2 fe             	and    edx,0xfffffffe
c001c928:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c92b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c92e:	83 e2 ef             	and    edx,0xffffffef
c001c931:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c934:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c937:	0f ba e2 0e          	bt     edx,0xe
c001c93b:	72 f7                	jb     c001c934 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c93d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c940:	0f ba e2 0f          	bt     edx,0xf
c001c944:	72 ee                	jb     c001c934 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c946:	c3                   	ret    
c001c947:	90                   	nop

c001c948 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c948:	55                   	push   ebp
c001c949:	57                   	push   edi
c001c94a:	56                   	push   esi
c001c94b:	53                   	push   ebx
c001c94c:	83 ec 1c             	sub    esp,0x1c
c001c94f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c953:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c957:	53                   	push   ebx
c001c958:	57                   	push   edi
c001c959:	e8 c0 ff ff ff       	call   c001c91e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c95e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c962:	83 ec 0c             	sub    esp,0xc
c001c965:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c96b:	c1 e5 0a             	shl    ebp,0xa
c001c96e:	01 e8                	add    eax,ebp
c001c970:	89 03                	mov    DWORD PTR [ebx],eax
c001c972:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c974:	68 00 04 00 00       	push   0x400
c001c979:	6a 00                	push   0x0
c001c97b:	50                   	push   eax
c001c97c:	e8 6f 3b fe ff       	call   c00004f0 <memset>
c001c981:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c987:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001c98b:	83 c4 1c             	add    esp,0x1c
c001c98e:	01 e8                	add    eax,ebp
c001c990:	89 03                	mov    DWORD PTR [ebx],eax
c001c992:	c1 e6 08             	shl    esi,0x8
c001c995:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c99c:	81 c6 00 80 00 00    	add    esi,0x8000
c001c9a2:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c9a8:	01 f0                	add    eax,esi
c001c9aa:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c9ad:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c9b0:	68 00 01 00 00       	push   0x100
c001c9b5:	6a 00                	push   0x0
c001c9b7:	50                   	push   eax
c001c9b8:	e8 33 3b fe ff       	call   c00004f0 <memset>
c001c9bd:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c9c3:	31 d2                	xor    edx,edx
c001c9c5:	01 f0                	add    eax,esi
c001c9c7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c9ca:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c9d1:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001c9d7:	01 ee                	add    esi,ebp
c001c9d9:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001c9dd:	83 c4 10             	add    esp,0x10
c001c9e0:	c1 e5 0d             	shl    ebp,0xd
c001c9e3:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001c9e9:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001c9ef:	83 c6 20             	add    esi,0x20
c001c9f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c9f6:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c9fc:	01 e8                	add    eax,ebp
c001c9fe:	01 d0                	add    eax,edx
c001ca00:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001ca03:	52                   	push   edx
c001ca04:	68 00 01 00 00       	push   0x100
c001ca09:	6a 00                	push   0x0
c001ca0b:	50                   	push   eax
c001ca0c:	e8 df 3a fe ff       	call   c00004f0 <memset>
c001ca11:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001ca17:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001ca1e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ca22:	83 c4 10             	add    esp,0x10
c001ca25:	01 e8                	add    eax,ebp
c001ca27:	01 d0                	add    eax,edx
c001ca29:	81 c2 00 01 00 00    	add    edx,0x100
c001ca2f:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001ca32:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001ca38:	75 af                	jne    c001c9e9 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001ca3a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001ca41:	50                   	push   eax
c001ca42:	50                   	push   eax
c001ca43:	53                   	push   ebx
c001ca44:	57                   	push   edi
c001ca45:	e8 b4 fe ff ff       	call   c001c8fe <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001ca4a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001ca51:	83 c4 2c             	add    esp,0x2c
c001ca54:	5b                   	pop    ebx
c001ca55:	5e                   	pop    esi
c001ca56:	5f                   	pop    edi
c001ca57:	5d                   	pop    ebp
c001ca58:	c3                   	ret    
c001ca59:	90                   	nop

c001ca5a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001ca5a:	55                   	push   ebp
c001ca5b:	57                   	push   edi
c001ca5c:	56                   	push   esi
c001ca5d:	53                   	push   ebx
c001ca5e:	31 db                	xor    ebx,ebx
c001ca60:	83 ec 0c             	sub    esp,0xc
c001ca63:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ca67:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ca6b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001ca6e:	f7 c7 01 00 00 00    	test   edi,0x1
c001ca74:	74 7a                	je     c001caf0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001ca76:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ca7a:	89 d8                	mov    eax,ebx
c001ca7c:	c1 e0 07             	shl    eax,0x7
c001ca7f:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001ca86:	55                   	push   ebp
c001ca87:	56                   	push   esi
c001ca88:	e8 29 fe ff ff       	call   c001c8b6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001ca8d:	5a                   	pop    edx
c001ca8e:	59                   	pop    ecx
c001ca8f:	83 f8 01             	cmp    eax,0x1
c001ca92:	75 21                	jne    c001cab5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001ca94:	50                   	push   eax
c001ca95:	53                   	push   ebx
c001ca96:	55                   	push   ebp
c001ca97:	56                   	push   esi
c001ca98:	e8 ab fe ff ff       	call   c001c948 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ca9d:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001caa4:	e8 2a b0 fe ff       	call   c0007ad3 <malloc>
c001caa9:	89 04 24             	mov    DWORD PTR [esp],eax
c001caac:	89 c5                	mov    ebp,eax
c001caae:	e8 c1 10 00 00       	call   c001db74 <SATA::SATA()>
c001cab3:	eb 24                	jmp    c001cad9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001cab5:	83 f8 04             	cmp    eax,0x4
c001cab8:	75 36                	jne    c001caf0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001caba:	51                   	push   ecx
c001cabb:	53                   	push   ebx
c001cabc:	55                   	push   ebp
c001cabd:	56                   	push   esi
c001cabe:	e8 85 fe ff ff       	call   c001c948 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cac3:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001caca:	e8 04 b0 fe ff       	call   c0007ad3 <malloc>
c001cacf:	89 04 24             	mov    DWORD PTR [esp],eax
c001cad2:	89 c5                	mov    ebp,eax
c001cad4:	e8 f5 17 00 00       	call   c001e2ce <SATAPI::SATAPI()>
c001cad9:	58                   	pop    eax
c001cada:	5a                   	pop    edx
c001cadb:	55                   	push   ebp
c001cadc:	56                   	push   esi
c001cadd:	e8 5e fe fe ff       	call   c000c940 <Device::addChild(Device*)>
c001cae2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001cae5:	56                   	push   esi
c001cae6:	6a 00                	push   0x0
c001cae8:	53                   	push   ebx
c001cae9:	55                   	push   ebp
c001caea:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001caed:	83 c4 20             	add    esp,0x20
c001caf0:	d1 ef                	shr    edi,1
c001caf2:	43                   	inc    ebx
c001caf3:	83 fb 20             	cmp    ebx,0x20
c001caf6:	0f 85 72 ff ff ff    	jne    c001ca6e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001cafc:	83 c4 0c             	add    esp,0xc
c001caff:	5b                   	pop    ebx
c001cb00:	5e                   	pop    esi
c001cb01:	5f                   	pop    edi
c001cb02:	5d                   	pop    ebp
c001cb03:	c3                   	ret    

c001cb04 <SATABus::open(int, int, void*)>:
c001cb04:	83 ec 14             	sub    esp,0x14
c001cb07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cb0b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001cb11:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cb17:	52                   	push   edx
c001cb18:	50                   	push   eax
c001cb19:	e8 3c ff ff ff       	call   c001ca5a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001cb1e:	31 c0                	xor    eax,eax
c001cb20:	83 c4 1c             	add    esp,0x1c
c001cb23:	c3                   	ret    

c001cb24 <ATA::close(int, int, void*)>:
c001cb24:	83 ec 0c             	sub    esp,0xc
c001cb27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb2b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cb31:	85 c0                	test   eax,eax
c001cb33:	74 0c                	je     c001cb41 <ATA::close(int, int, void*)+0x1d>
c001cb35:	8b 10                	mov    edx,DWORD PTR [eax]
c001cb37:	83 ec 0c             	sub    esp,0xc
c001cb3a:	50                   	push   eax
c001cb3b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cb3e:	83 c4 10             	add    esp,0x10
c001cb41:	31 c0                	xor    eax,eax
c001cb43:	83 c4 0c             	add    esp,0xc
c001cb46:	c3                   	ret    
c001cb47:	90                   	nop

c001cb48 <ATA::powerSaving(PowerSavingLevel)>:
c001cb48:	c3                   	ret    
c001cb49:	90                   	nop

c001cb4a <ATA::ATA()>:
c001cb4a:	83 ec 0c             	sub    esp,0xc
c001cb4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb51:	83 ec 04             	sub    esp,0x4
c001cb54:	68 00 02 00 00       	push   0x200
c001cb59:	68 9d 32 02 c0       	push   0xc002329d
c001cb5e:	50                   	push   eax
c001cb5f:	e8 aa 01 ff ff       	call   c000cd0e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cb64:	83 c4 10             	add    esp,0x10
c001cb67:	ba 10 32 02 c0       	mov    edx,0xc0023210
c001cb6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb70:	89 10                	mov    DWORD PTR [eax],edx
c001cb72:	90                   	nop
c001cb73:	83 c4 0c             	add    esp,0xc
c001cb76:	c3                   	ret    
c001cb77:	90                   	nop

c001cb78 <ATA::flush(bool)>:
c001cb78:	53                   	push   ebx
c001cb79:	83 ec 08             	sub    esp,0x8
c001cb7c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001cb81:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cb85:	83 f8 01             	cmp    eax,0x1
c001cb88:	19 c0                	sbb    eax,eax
c001cb8a:	83 e0 fd             	and    eax,0xfffffffd
c001cb8d:	05 ea 00 00 00       	add    eax,0xea
c001cb92:	50                   	push   eax
c001cb93:	6a 07                	push   0x7
c001cb95:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb9c:	50                   	push   eax
c001cb9d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cba3:	e8 18 f1 ff ff       	call   c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cba8:	83 c4 0c             	add    esp,0xc
c001cbab:	6a 00                	push   0x0
c001cbad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbb4:	50                   	push   eax
c001cbb5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbbb:	e8 e4 fb ff ff       	call   c001c7a4 <IDE::polling(unsigned char, unsigned int)>
c001cbc0:	83 c4 18             	add    esp,0x18
c001cbc3:	5b                   	pop    ebx
c001cbc4:	c3                   	ret    
c001cbc5:	90                   	nop

c001cbc6 <ATA::readyForCommand()>:
c001cbc6:	56                   	push   esi
c001cbc7:	53                   	push   ebx
c001cbc8:	53                   	push   ebx
c001cbc9:	31 db                	xor    ebx,ebx
c001cbcb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cbcf:	51                   	push   ecx
c001cbd0:	6a 0c                	push   0xc
c001cbd2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cbd9:	50                   	push   eax
c001cbda:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cbe0:	e8 9b f1 ff ff       	call   c001bd80 <IDE::read(unsigned char, unsigned char)>
c001cbe5:	83 c4 10             	add    esp,0x10
c001cbe8:	a8 88                	test   al,0x88
c001cbea:	74 1f                	je     c001cc0b <ATA::readyForCommand()+0x45>
c001cbec:	43                   	inc    ebx
c001cbed:	83 fb 63             	cmp    ebx,0x63
c001cbf0:	7e dd                	jle    c001cbcf <ATA::readyForCommand()+0x9>
c001cbf2:	83 ec 0c             	sub    esp,0xc
c001cbf5:	6a 0a                	push   0xa
c001cbf7:	e8 f0 96 ff ff       	call   c00162ec <milliTenthSleep(unsigned int)>
c001cbfc:	83 c4 10             	add    esp,0x10
c001cbff:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cc05:	75 c8                	jne    c001cbcf <ATA::readyForCommand()+0x9>
c001cc07:	31 c0                	xor    eax,eax
c001cc09:	eb 02                	jmp    c001cc0d <ATA::readyForCommand()+0x47>
c001cc0b:	b0 01                	mov    al,0x1
c001cc0d:	5a                   	pop    edx
c001cc0e:	5b                   	pop    ebx
c001cc0f:	5e                   	pop    esi
c001cc10:	c3                   	ret    
c001cc11:	90                   	nop

c001cc12 <ATA::access(unsigned long long, int, void*, bool)>:
c001cc12:	55                   	push   ebp
c001cc13:	57                   	push   edi
c001cc14:	56                   	push   esi
c001cc15:	53                   	push   ebx
c001cc16:	83 ec 2c             	sub    esp,0x2c
c001cc19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cc1d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cc21:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cc25:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cc29:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cc2d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001cc31:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001cc35:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001cc3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc3f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cc45:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cc49:	c1 e0 06             	shl    eax,0x6
c001cc4c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001cc54:	74 5b                	je     c001ccb1 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001cc56:	89 fa                	mov    edx,edi
c001cc58:	89 f0                	mov    eax,esi
c001cc5a:	c1 ea 1c             	shr    edx,0x1c
c001cc5d:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001cc61:	89 d1                	mov    ecx,edx
c001cc63:	09 c1                	or     ecx,eax
c001cc65:	74 25                	je     c001cc8c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001cc67:	31 ed                	xor    ebp,ebp
c001cc69:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001cc70:	89 fa                	mov    edx,edi
c001cc72:	89 f0                	mov    eax,esi
c001cc74:	0f ad d0             	shrd   eax,edx,cl
c001cc77:	d3 ea                	shr    edx,cl
c001cc79:	f6 c1 20             	test   cl,0x20
c001cc7c:	74 02                	je     c001cc80 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001cc7e:	89 d0                	mov    eax,edx
c001cc80:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001cc84:	45                   	inc    ebp
c001cc85:	83 fd 06             	cmp    ebp,0x6
c001cc88:	75 df                	jne    c001cc69 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001cc8a:	eb 71                	jmp    c001ccfd <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001cc8c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001cc91:	89 f0                	mov    eax,esi
c001cc93:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cc9a:	0f ac f8 10          	shrd   eax,edi,0x10
c001cc9e:	bf 01 00 00 00       	mov    edi,0x1
c001cca3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001cca7:	c1 ee 18             	shr    esi,0x18
c001ccaa:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ccaf:	eb 53                	jmp    c001cd04 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001ccb1:	6a 00                	push   0x0
c001ccb3:	6a 3f                	push   0x3f
c001ccb5:	57                   	push   edi
c001ccb6:	56                   	push   esi
c001ccb7:	e8 d4 2a 00 00       	call   c001f790 <__umoddi3>
c001ccbc:	83 c4 10             	add    esp,0x10
c001ccbf:	40                   	inc    eax
c001ccc0:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001ccc4:	6a 00                	push   0x0
c001ccc6:	68 f0 03 00 00       	push   0x3f0
c001cccb:	57                   	push   edi
c001cccc:	56                   	push   esi
c001cccd:	e8 be 29 00 00       	call   c001f690 <__udivdi3>
c001ccd2:	83 c4 10             	add    esp,0x10
c001ccd5:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001ccda:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cce1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cce6:	6a 00                	push   0x0
c001cce8:	6a 3f                	push   0x3f
c001ccea:	57                   	push   edi
c001cceb:	31 ff                	xor    edi,edi
c001cced:	56                   	push   esi
c001ccee:	e8 9d 29 00 00       	call   c001f690 <__udivdi3>
c001ccf3:	83 c4 10             	add    esp,0x10
c001ccf6:	83 e0 0f             	and    eax,0xf
c001ccf9:	89 c6                	mov    esi,eax
c001ccfb:	eb 07                	jmp    c001cd04 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001ccfd:	31 f6                	xor    esi,esi
c001ccff:	bf 02 00 00 00       	mov    edi,0x2
c001cd04:	50                   	push   eax
c001cd05:	6a 00                	push   0x0
c001cd07:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd0e:	50                   	push   eax
c001cd0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cd13:	e8 b6 f1 ff ff       	call   c001bece <IDE::enableIRQs(unsigned char, bool)>
c001cd18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd1b:	e8 a6 fe ff ff       	call   c001cbc6 <ATA::readyForCommand()>
c001cd20:	83 c4 10             	add    esp,0x10
c001cd23:	84 c0                	test   al,al
c001cd25:	75 0a                	jne    c001cd31 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001cd27:	be 01 00 00 00       	mov    esi,0x1
c001cd2c:	e9 9b 02 00 00       	jmp    c001cfcc <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001cd31:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cd37:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cd3d:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001cd44:	c1 e0 04             	shl    eax,0x4
c001cd47:	09 c6                	or     esi,eax
c001cd49:	f7 c7 03 00 00 00    	test   edi,0x3
c001cd4f:	75 05                	jne    c001cd56 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001cd51:	83 ce a0             	or     esi,0xffffffa0
c001cd54:	eb 03                	jmp    c001cd59 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001cd56:	83 ce e0             	or     esi,0xffffffe0
c001cd59:	89 f0                	mov    eax,esi
c001cd5b:	0f b6 f0             	movzx  esi,al
c001cd5e:	56                   	push   esi
c001cd5f:	6a 06                	push   0x6
c001cd61:	51                   	push   ecx
c001cd62:	52                   	push   edx
c001cd63:	e8 58 ef ff ff       	call   c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd68:	83 c4 10             	add    esp,0x10
c001cd6b:	6a 00                	push   0x0
c001cd6d:	6a 01                	push   0x1
c001cd6f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd76:	50                   	push   eax
c001cd77:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd7d:	e8 3e ef ff ff       	call   c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd82:	89 f8                	mov    eax,edi
c001cd84:	83 c4 10             	add    esp,0x10
c001cd87:	0f b6 f0             	movzx  esi,al
c001cd8a:	83 fe 02             	cmp    esi,0x2
c001cd8d:	75 6e                	jne    c001cdfd <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001cd8f:	6a 00                	push   0x0
c001cd91:	6a 08                	push   0x8
c001cd93:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd9a:	50                   	push   eax
c001cd9b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cda1:	e8 1a ef ff ff       	call   c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cda6:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001cdab:	50                   	push   eax
c001cdac:	6a 09                	push   0x9
c001cdae:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cdb5:	50                   	push   eax
c001cdb6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cdbc:	e8 ff ee ff ff       	call   c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdc1:	83 c4 20             	add    esp,0x20
c001cdc4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001cdc9:	50                   	push   eax
c001cdca:	6a 0a                	push   0xa
c001cdcc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cdd3:	50                   	push   eax
c001cdd4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cdda:	e8 e1 ee ff ff       	call   c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cddf:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001cde4:	50                   	push   eax
c001cde5:	6a 0b                	push   0xb
c001cde7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cdee:	50                   	push   eax
c001cdef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cdf5:	e8 c6 ee ff ff       	call   c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdfa:	83 c4 20             	add    esp,0x20
c001cdfd:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ce02:	50                   	push   eax
c001ce03:	6a 02                	push   0x2
c001ce05:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce0c:	50                   	push   eax
c001ce0d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce13:	e8 a8 ee ff ff       	call   c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce18:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001ce1d:	50                   	push   eax
c001ce1e:	6a 03                	push   0x3
c001ce20:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce27:	50                   	push   eax
c001ce28:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce2e:	e8 8d ee ff ff       	call   c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce33:	83 c4 20             	add    esp,0x20
c001ce36:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001ce3b:	50                   	push   eax
c001ce3c:	6a 04                	push   0x4
c001ce3e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce45:	50                   	push   eax
c001ce46:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce4c:	e8 6f ee ff ff       	call   c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce51:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce56:	50                   	push   eax
c001ce57:	6a 05                	push   0x5
c001ce59:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce60:	50                   	push   eax
c001ce61:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce67:	e8 54 ee ff ff       	call   c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce6c:	83 c4 20             	add    esp,0x20
c001ce6f:	83 fe 02             	cmp    esi,0x2
c001ce72:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001ce77:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001ce7c:	85 c9                	test   ecx,ecx
c001ce7e:	74 07                	je     c001ce87 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001ce80:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ce85:	75 47                	jne    c001cece <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001ce87:	89 f8                	mov    eax,edi
c001ce89:	0f b6 f8             	movzx  edi,al
c001ce8c:	31 c0                	xor    eax,eax
c001ce8e:	83 ff 02             	cmp    edi,0x2
c001ce91:	0f 95 c0             	setne  al
c001ce94:	89 c6                	mov    esi,eax
c001ce96:	74 0c                	je     c001cea4 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001ce98:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ce9d:	b8 30 00 00 00       	mov    eax,0x30
c001cea2:	75 2f                	jne    c001ced3 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cea4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cea8:	83 f2 01             	xor    edx,0x1
c001ceab:	85 c9                	test   ecx,ecx
c001cead:	74 09                	je     c001ceb8 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001ceaf:	84 d2                	test   dl,dl
c001ceb1:	b8 24 00 00 00       	mov    eax,0x24
c001ceb6:	75 1b                	jne    c001ced3 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001ceb8:	85 f6                	test   esi,esi
c001ceba:	0f 84 67 fe ff ff    	je     c001cd27 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001cec0:	84 d2                	test   dl,dl
c001cec2:	b8 20 00 00 00       	mov    eax,0x20
c001cec7:	75 0a                	jne    c001ced3 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001cec9:	e9 59 fe ff ff       	jmp    c001cd27 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001cece:	b8 34 00 00 00       	mov    eax,0x34
c001ced3:	50                   	push   eax
c001ced4:	6a 07                	push   0x7
c001ced6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cedd:	50                   	push   eax
c001cede:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cee4:	e8 d7 ed ff ff       	call   c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cee9:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001ceed:	83 c4 10             	add    esp,0x10
c001cef0:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001cef5:	85 f6                	test   esi,esi
c001cef7:	0f 84 b5 00 00 00    	je     c001cfb2 <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001cefd:	50                   	push   eax
c001cefe:	6a 01                	push   0x1
c001cf00:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf07:	50                   	push   eax
c001cf08:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf0e:	e8 91 f8 ff ff       	call   c001c7a4 <IDE::polling(unsigned char, unsigned int)>
c001cf13:	83 c4 10             	add    esp,0x10
c001cf16:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cf1c:	0f b6 c0             	movzx  eax,al
c001cf1f:	85 c0                	test   eax,eax
c001cf21:	74 1f                	je     c001cf42 <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001cf23:	50                   	push   eax
c001cf24:	89 c6                	mov    esi,eax
c001cf26:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cf2d:	0f b6 d2             	movzx  edx,dl
c001cf30:	50                   	push   eax
c001cf31:	52                   	push   edx
c001cf32:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf38:	e8 ad f7 ff ff       	call   c001c6ea <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cf3d:	e9 87 00 00 00       	jmp    c001cfc9 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001cf42:	85 ed                	test   ebp,ebp
c001cf44:	74 3b                	je     c001cf81 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001cf46:	31 ff                	xor    edi,edi
c001cf48:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cf4c:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001cf50:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001cf55:	50                   	push   eax
c001cf56:	50                   	push   eax
c001cf57:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf5e:	50                   	push   eax
c001cf5f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf65:	e8 44 ed ff ff       	call   c001bcae <IDE::getBase(unsigned char)>
c001cf6a:	89 c2                	mov    edx,eax
c001cf6c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001cf71:	66 ef                	out    dx,ax
c001cf73:	47                   	inc    edi
c001cf74:	83 c4 10             	add    esp,0x10
c001cf77:	81 ff 00 01 00 00    	cmp    edi,0x100
c001cf7d:	75 c9                	jne    c001cf48 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001cf7f:	eb 23                	jmp    c001cfa4 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001cf81:	51                   	push   ecx
c001cf82:	0f b6 d2             	movzx  edx,dl
c001cf85:	51                   	push   ecx
c001cf86:	52                   	push   edx
c001cf87:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf8d:	e8 1c ed ff ff       	call   c001bcae <IDE::getBase(unsigned char)>
c001cf92:	b9 00 01 00 00       	mov    ecx,0x100
c001cf97:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cf9b:	89 c2                	mov    edx,eax
c001cf9d:	fc                   	cld    
c001cf9e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cfa1:	83 c4 10             	add    esp,0x10
c001cfa4:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001cfac:	4e                   	dec    esi
c001cfad:	e9 43 ff ff ff       	jmp    c001cef5 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001cfb2:	31 f6                	xor    esi,esi
c001cfb4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cfb9:	74 11                	je     c001cfcc <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001cfbb:	50                   	push   eax
c001cfbc:	50                   	push   eax
c001cfbd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001cfc2:	50                   	push   eax
c001cfc3:	53                   	push   ebx
c001cfc4:	e8 af fb ff ff       	call   c001cb78 <ATA::flush(bool)>
c001cfc9:	83 c4 10             	add    esp,0x10
c001cfcc:	83 c4 2c             	add    esp,0x2c
c001cfcf:	89 f0                	mov    eax,esi
c001cfd1:	5b                   	pop    ebx
c001cfd2:	5e                   	pop    esi
c001cfd3:	5f                   	pop    edi
c001cfd4:	5d                   	pop    ebp
c001cfd5:	c3                   	ret    

c001cfd6 <ATA::detectCHS()>:
c001cfd6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cfda:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001cfe0:	c1 e0 06             	shl    eax,0x6
c001cfe3:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001cfe9:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cff3:	c7 44 24 04 f4 31 02 c0 	mov    DWORD PTR [esp+0x4],0xc00231f4
c001cffb:	e9 07 45 ff ff       	jmp    c0011507 <KePanic(char const*)>

c001d000 <ATA::open(int, int, void*)>:
c001d000:	53                   	push   ebx
c001d001:	83 ec 08             	sub    esp,0x8
c001d004:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d008:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d00c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d010:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d016:	c1 e0 06             	shl    eax,0x6
c001d019:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d01f:	01 d0                	add    eax,edx
c001d021:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d028:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d02e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d035:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d03f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d046:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d04c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d053:	75 0c                	jne    c001d061 <ATA::open(int, int, void*)+0x61>
c001d055:	83 ec 0c             	sub    esp,0xc
c001d058:	53                   	push   ebx
c001d059:	e8 78 ff ff ff       	call   c001cfd6 <ATA::detectCHS()>
c001d05e:	83 c4 10             	add    esp,0x10
c001d061:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d067:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d06d:	c1 e0 06             	shl    eax,0x6
c001d070:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d077:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d081:	d1 e8                	shr    eax,1
c001d083:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d089:	6a 04                	push   0x4
c001d08b:	6a 0c                	push   0xc
c001d08d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d094:	50                   	push   eax
c001d095:	52                   	push   edx
c001d096:	e8 25 ec ff ff       	call   c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d09b:	90                   	nop
c001d09c:	90                   	nop
c001d09d:	6a 00                	push   0x0
c001d09f:	6a 0c                	push   0xc
c001d0a1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d0a8:	50                   	push   eax
c001d0a9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0af:	e8 0c ec ff ff       	call   c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0b4:	83 c4 14             	add    esp,0x14
c001d0b7:	53                   	push   ebx
c001d0b8:	e8 b9 fc fe ff       	call   c000cd76 <PhysicalDisk::startCache()>
c001d0bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0c0:	e8 fd 0e ff ff       	call   c000dfc2 <createPartitionsForDisk(PhysicalDisk*)>
c001d0c5:	83 c4 18             	add    esp,0x18
c001d0c8:	31 c0                	xor    eax,eax
c001d0ca:	5b                   	pop    ebx
c001d0cb:	c3                   	ret    

c001d0cc <combineCharAndColour(char, unsigned char)>:
c001d0cc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d0d1:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001d0d7:	c1 e0 08             	shl    eax,0x8
c001d0da:	09 d0                	or     eax,edx
c001d0dc:	c3                   	ret    

c001d0dd <combineColours(unsigned char, unsigned char)>:
c001d0dd:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d0e2:	c1 e0 04             	shl    eax,0x4
c001d0e5:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001d0e9:	c3                   	ret    

c001d0ea <ATA::read(unsigned long long, int, void*)>:
c001d0ea:	55                   	push   ebp
c001d0eb:	57                   	push   edi
c001d0ec:	56                   	push   esi
c001d0ed:	be 04 00 00 00       	mov    esi,0x4
c001d0f2:	53                   	push   ebx
c001d0f3:	83 ec 0c             	sub    esp,0xc
c001d0f6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d0fa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d0fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d102:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d106:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d109:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d10f:	0f 87 a1 01 00 00    	ja     c001d2b6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d115:	85 c9                	test   ecx,ecx
c001d117:	be 06 00 00 00       	mov    esi,0x6
c001d11c:	0f 84 94 01 00 00    	je     c001d2b6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d122:	55                   	push   ebp
c001d123:	55                   	push   ebp
c001d124:	6a 00                	push   0x0
c001d126:	51                   	push   ecx
c001d127:	53                   	push   ebx
c001d128:	52                   	push   edx
c001d129:	50                   	push   eax
c001d12a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d12e:	e8 df fa ff ff       	call   c001cc12 <ATA::access(unsigned long long, int, void*, bool)>
c001d133:	83 c4 20             	add    esp,0x20
c001d136:	85 c0                	test   eax,eax
c001d138:	89 c6                	mov    esi,eax
c001d13a:	0f 85 71 01 00 00    	jne    c001d2b1 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001d140:	50                   	push   eax
c001d141:	bd 10 27 00 00       	mov    ebp,0x2710
c001d146:	50                   	push   eax
c001d147:	03 1d b4 d0 02 c0    	add    ebx,DWORD PTR ds:0xc002d0b4
c001d14d:	6a 0f                	push   0xf
c001d14f:	6a 00                	push   0x0
c001d151:	89 da                	mov    edx,ebx
c001d153:	89 1d b4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0b4,ebx
c001d159:	e8 7f ff ff ff       	call   c001d0dd <combineColours(unsigned char, unsigned char)>
c001d15e:	59                   	pop    ecx
c001d15f:	b9 0a 00 00 00       	mov    ecx,0xa
c001d164:	5b                   	pop    ebx
c001d165:	0f b6 d8             	movzx  ebx,al
c001d168:	89 d0                	mov    eax,edx
c001d16a:	53                   	push   ebx
c001d16b:	99                   	cdq    
c001d16c:	f7 fd                	idiv   ebp
c001d16e:	99                   	cdq    
c001d16f:	f7 f9                	idiv   ecx
c001d171:	83 c2 30             	add    edx,0x30
c001d174:	0f b6 d2             	movzx  edx,dl
c001d177:	52                   	push   edx
c001d178:	e8 4f ff ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001d17d:	5f                   	pop    edi
c001d17e:	bf e8 03 00 00       	mov    edi,0x3e8
c001d183:	5a                   	pop    edx
c001d184:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d18a:	53                   	push   ebx
c001d18b:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d190:	99                   	cdq    
c001d191:	f7 ff                	idiv   edi
c001d193:	99                   	cdq    
c001d194:	f7 f9                	idiv   ecx
c001d196:	8d 42 30             	lea    eax,[edx+0x30]
c001d199:	0f b6 c0             	movzx  eax,al
c001d19c:	50                   	push   eax
c001d19d:	e8 2a ff ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001d1a2:	5f                   	pop    edi
c001d1a3:	bf 64 00 00 00       	mov    edi,0x64
c001d1a8:	5a                   	pop    edx
c001d1a9:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d1af:	53                   	push   ebx
c001d1b0:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d1b5:	99                   	cdq    
c001d1b6:	f7 ff                	idiv   edi
c001d1b8:	99                   	cdq    
c001d1b9:	f7 f9                	idiv   ecx
c001d1bb:	8d 42 30             	lea    eax,[edx+0x30]
c001d1be:	0f b6 c0             	movzx  eax,al
c001d1c1:	50                   	push   eax
c001d1c2:	e8 05 ff ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001d1c7:	5a                   	pop    edx
c001d1c8:	5a                   	pop    edx
c001d1c9:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d1cf:	53                   	push   ebx
c001d1d0:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d1d5:	99                   	cdq    
c001d1d6:	f7 f9                	idiv   ecx
c001d1d8:	99                   	cdq    
c001d1d9:	f7 f9                	idiv   ecx
c001d1db:	8d 42 30             	lea    eax,[edx+0x30]
c001d1de:	0f b6 c0             	movzx  eax,al
c001d1e1:	50                   	push   eax
c001d1e2:	e8 e5 fe ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001d1e7:	5a                   	pop    edx
c001d1e8:	5a                   	pop    edx
c001d1e9:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d1ef:	53                   	push   ebx
c001d1f0:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d1f5:	99                   	cdq    
c001d1f6:	f7 f9                	idiv   ecx
c001d1f8:	83 c2 30             	add    edx,0x30
c001d1fb:	0f b6 d2             	movzx  edx,dl
c001d1fe:	52                   	push   edx
c001d1ff:	e8 c8 fe ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001d204:	5a                   	pop    edx
c001d205:	5a                   	pop    edx
c001d206:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d20c:	53                   	push   ebx
c001d20d:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d212:	99                   	cdq    
c001d213:	f7 fd                	idiv   ebp
c001d215:	99                   	cdq    
c001d216:	f7 f9                	idiv   ecx
c001d218:	8d 42 30             	lea    eax,[edx+0x30]
c001d21b:	0f b6 c0             	movzx  eax,al
c001d21e:	50                   	push   eax
c001d21f:	e8 a8 fe ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001d224:	5d                   	pop    ebp
c001d225:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d22a:	5a                   	pop    edx
c001d22b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d231:	53                   	push   ebx
c001d232:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d237:	99                   	cdq    
c001d238:	f7 fd                	idiv   ebp
c001d23a:	99                   	cdq    
c001d23b:	f7 f9                	idiv   ecx
c001d23d:	8d 42 30             	lea    eax,[edx+0x30]
c001d240:	0f b6 c0             	movzx  eax,al
c001d243:	50                   	push   eax
c001d244:	e8 83 fe ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001d249:	5d                   	pop    ebp
c001d24a:	5a                   	pop    edx
c001d24b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d251:	53                   	push   ebx
c001d252:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d257:	99                   	cdq    
c001d258:	f7 ff                	idiv   edi
c001d25a:	99                   	cdq    
c001d25b:	f7 f9                	idiv   ecx
c001d25d:	8d 42 30             	lea    eax,[edx+0x30]
c001d260:	0f b6 c0             	movzx  eax,al
c001d263:	50                   	push   eax
c001d264:	e8 63 fe ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001d269:	5f                   	pop    edi
c001d26a:	5d                   	pop    ebp
c001d26b:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d271:	53                   	push   ebx
c001d272:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d277:	99                   	cdq    
c001d278:	f7 f9                	idiv   ecx
c001d27a:	99                   	cdq    
c001d27b:	f7 f9                	idiv   ecx
c001d27d:	8d 42 30             	lea    eax,[edx+0x30]
c001d280:	0f b6 c0             	movzx  eax,al
c001d283:	50                   	push   eax
c001d284:	e8 43 fe ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001d289:	5a                   	pop    edx
c001d28a:	5f                   	pop    edi
c001d28b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d291:	53                   	push   ebx
c001d292:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d297:	99                   	cdq    
c001d298:	f7 f9                	idiv   ecx
c001d29a:	83 c2 30             	add    edx,0x30
c001d29d:	0f b6 d2             	movzx  edx,dl
c001d2a0:	52                   	push   edx
c001d2a1:	e8 26 fe ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001d2a6:	83 c4 10             	add    esp,0x10
c001d2a9:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d2af:	eb 05                	jmp    c001d2b6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d2b1:	be 01 00 00 00       	mov    esi,0x1
c001d2b6:	83 c4 0c             	add    esp,0xc
c001d2b9:	89 f0                	mov    eax,esi
c001d2bb:	5b                   	pop    ebx
c001d2bc:	5e                   	pop    esi
c001d2bd:	5f                   	pop    edi
c001d2be:	5d                   	pop    ebp
c001d2bf:	c3                   	ret    

c001d2c0 <ATA::write(unsigned long long, int, void*)>:
c001d2c0:	55                   	push   ebp
c001d2c1:	57                   	push   edi
c001d2c2:	56                   	push   esi
c001d2c3:	be 04 00 00 00       	mov    esi,0x4
c001d2c8:	53                   	push   ebx
c001d2c9:	83 ec 0c             	sub    esp,0xc
c001d2cc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d2d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d2d4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d2d8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d2dc:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d2df:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d2e5:	0f 87 9c 01 00 00    	ja     c001d487 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d2eb:	85 c9                	test   ecx,ecx
c001d2ed:	be 06 00 00 00       	mov    esi,0x6
c001d2f2:	0f 84 8f 01 00 00    	je     c001d487 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d2f8:	55                   	push   ebp
c001d2f9:	55                   	push   ebp
c001d2fa:	6a 01                	push   0x1
c001d2fc:	51                   	push   ecx
c001d2fd:	53                   	push   ebx
c001d2fe:	52                   	push   edx
c001d2ff:	50                   	push   eax
c001d300:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d304:	e8 09 f9 ff ff       	call   c001cc12 <ATA::access(unsigned long long, int, void*, bool)>
c001d309:	83 c4 20             	add    esp,0x20
c001d30c:	85 c0                	test   eax,eax
c001d30e:	89 c6                	mov    esi,eax
c001d310:	0f 85 6c 01 00 00    	jne    c001d482 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d316:	50                   	push   eax
c001d317:	bd 10 27 00 00       	mov    ebp,0x2710
c001d31c:	50                   	push   eax
c001d31d:	6a 0f                	push   0xf
c001d31f:	6a 00                	push   0x0
c001d321:	01 1d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebx
c001d327:	e8 b1 fd ff ff       	call   c001d0dd <combineColours(unsigned char, unsigned char)>
c001d32c:	5a                   	pop    edx
c001d32d:	59                   	pop    ecx
c001d32e:	b9 0a 00 00 00       	mov    ecx,0xa
c001d333:	0f b6 d8             	movzx  ebx,al
c001d336:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d33b:	53                   	push   ebx
c001d33c:	99                   	cdq    
c001d33d:	f7 fd                	idiv   ebp
c001d33f:	99                   	cdq    
c001d340:	f7 f9                	idiv   ecx
c001d342:	8d 42 30             	lea    eax,[edx+0x30]
c001d345:	0f b6 c0             	movzx  eax,al
c001d348:	50                   	push   eax
c001d349:	e8 7e fd ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001d34e:	5f                   	pop    edi
c001d34f:	bf e8 03 00 00       	mov    edi,0x3e8
c001d354:	5a                   	pop    edx
c001d355:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d35b:	53                   	push   ebx
c001d35c:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d361:	99                   	cdq    
c001d362:	f7 ff                	idiv   edi
c001d364:	99                   	cdq    
c001d365:	f7 f9                	idiv   ecx
c001d367:	8d 42 30             	lea    eax,[edx+0x30]
c001d36a:	0f b6 c0             	movzx  eax,al
c001d36d:	50                   	push   eax
c001d36e:	e8 59 fd ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001d373:	5f                   	pop    edi
c001d374:	bf 64 00 00 00       	mov    edi,0x64
c001d379:	5a                   	pop    edx
c001d37a:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d380:	53                   	push   ebx
c001d381:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d386:	99                   	cdq    
c001d387:	f7 ff                	idiv   edi
c001d389:	99                   	cdq    
c001d38a:	f7 f9                	idiv   ecx
c001d38c:	8d 42 30             	lea    eax,[edx+0x30]
c001d38f:	0f b6 c0             	movzx  eax,al
c001d392:	50                   	push   eax
c001d393:	e8 34 fd ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001d398:	5a                   	pop    edx
c001d399:	5a                   	pop    edx
c001d39a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d3a0:	53                   	push   ebx
c001d3a1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3a6:	99                   	cdq    
c001d3a7:	f7 f9                	idiv   ecx
c001d3a9:	99                   	cdq    
c001d3aa:	f7 f9                	idiv   ecx
c001d3ac:	8d 42 30             	lea    eax,[edx+0x30]
c001d3af:	0f b6 c0             	movzx  eax,al
c001d3b2:	50                   	push   eax
c001d3b3:	e8 14 fd ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001d3b8:	5a                   	pop    edx
c001d3b9:	5a                   	pop    edx
c001d3ba:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d3c0:	53                   	push   ebx
c001d3c1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3c6:	99                   	cdq    
c001d3c7:	f7 f9                	idiv   ecx
c001d3c9:	83 c2 30             	add    edx,0x30
c001d3cc:	0f b6 d2             	movzx  edx,dl
c001d3cf:	52                   	push   edx
c001d3d0:	e8 f7 fc ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001d3d5:	5a                   	pop    edx
c001d3d6:	5a                   	pop    edx
c001d3d7:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d3dd:	53                   	push   ebx
c001d3de:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d3e3:	99                   	cdq    
c001d3e4:	f7 fd                	idiv   ebp
c001d3e6:	99                   	cdq    
c001d3e7:	f7 f9                	idiv   ecx
c001d3e9:	8d 42 30             	lea    eax,[edx+0x30]
c001d3ec:	0f b6 c0             	movzx  eax,al
c001d3ef:	50                   	push   eax
c001d3f0:	e8 d7 fc ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001d3f5:	5d                   	pop    ebp
c001d3f6:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d3fb:	5a                   	pop    edx
c001d3fc:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d402:	53                   	push   ebx
c001d403:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d408:	99                   	cdq    
c001d409:	f7 fd                	idiv   ebp
c001d40b:	99                   	cdq    
c001d40c:	f7 f9                	idiv   ecx
c001d40e:	8d 42 30             	lea    eax,[edx+0x30]
c001d411:	0f b6 c0             	movzx  eax,al
c001d414:	50                   	push   eax
c001d415:	e8 b2 fc ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001d41a:	5d                   	pop    ebp
c001d41b:	5a                   	pop    edx
c001d41c:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d422:	53                   	push   ebx
c001d423:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d428:	99                   	cdq    
c001d429:	f7 ff                	idiv   edi
c001d42b:	99                   	cdq    
c001d42c:	f7 f9                	idiv   ecx
c001d42e:	8d 42 30             	lea    eax,[edx+0x30]
c001d431:	0f b6 c0             	movzx  eax,al
c001d434:	50                   	push   eax
c001d435:	e8 92 fc ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001d43a:	5f                   	pop    edi
c001d43b:	5d                   	pop    ebp
c001d43c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d442:	53                   	push   ebx
c001d443:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d448:	99                   	cdq    
c001d449:	f7 f9                	idiv   ecx
c001d44b:	99                   	cdq    
c001d44c:	f7 f9                	idiv   ecx
c001d44e:	8d 42 30             	lea    eax,[edx+0x30]
c001d451:	0f b6 c0             	movzx  eax,al
c001d454:	50                   	push   eax
c001d455:	e8 72 fc ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001d45a:	5a                   	pop    edx
c001d45b:	5f                   	pop    edi
c001d45c:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d462:	53                   	push   ebx
c001d463:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d468:	99                   	cdq    
c001d469:	f7 f9                	idiv   ecx
c001d46b:	83 c2 30             	add    edx,0x30
c001d46e:	0f b6 d2             	movzx  edx,dl
c001d471:	52                   	push   edx
c001d472:	e8 55 fc ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001d477:	83 c4 10             	add    esp,0x10
c001d47a:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d480:	eb 05                	jmp    c001d487 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d482:	be 01 00 00 00       	mov    esi,0x1
c001d487:	83 c4 0c             	add    esp,0xc
c001d48a:	89 f0                	mov    eax,esi
c001d48c:	5b                   	pop    ebx
c001d48d:	5e                   	pop    esi
c001d48e:	5f                   	pop    edi
c001d48f:	5d                   	pop    ebp
c001d490:	c3                   	ret    
c001d491:	90                   	nop

c001d492 <ATAPI::write(unsigned long long, int, void*)>:
c001d492:	b8 03 00 00 00       	mov    eax,0x3
c001d497:	c3                   	ret    

c001d498 <ATAPI::close(int, int, void*)>:
c001d498:	83 ec 0c             	sub    esp,0xc
c001d49b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d49f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d4a5:	85 c0                	test   eax,eax
c001d4a7:	74 0c                	je     c001d4b5 <ATAPI::close(int, int, void*)+0x1d>
c001d4a9:	8b 10                	mov    edx,DWORD PTR [eax]
c001d4ab:	83 ec 0c             	sub    esp,0xc
c001d4ae:	50                   	push   eax
c001d4af:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d4b2:	83 c4 10             	add    esp,0x10
c001d4b5:	31 c0                	xor    eax,eax
c001d4b7:	83 c4 0c             	add    esp,0xc
c001d4ba:	c3                   	ret    
c001d4bb:	90                   	nop

c001d4bc <ATAPI::ATAPI()>:
c001d4bc:	83 ec 0c             	sub    esp,0xc
c001d4bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4c3:	83 ec 04             	sub    esp,0x4
c001d4c6:	68 00 08 00 00       	push   0x800
c001d4cb:	68 3d 33 02 c0       	push   0xc002333d
c001d4d0:	50                   	push   eax
c001d4d1:	e8 38 f8 fe ff       	call   c000cd0e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d4d6:	83 c4 10             	add    esp,0x10
c001d4d9:	ba 58 32 02 c0       	mov    edx,0xc0023258
c001d4de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4e2:	89 10                	mov    DWORD PTR [eax],edx
c001d4e4:	90                   	nop
c001d4e5:	83 c4 0c             	add    esp,0xc
c001d4e8:	c3                   	ret    
c001d4e9:	90                   	nop

c001d4ea <ATAPI::readyForCommand()>:
c001d4ea:	56                   	push   esi
c001d4eb:	53                   	push   ebx
c001d4ec:	53                   	push   ebx
c001d4ed:	31 db                	xor    ebx,ebx
c001d4ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d4f3:	51                   	push   ecx
c001d4f4:	6a 0c                	push   0xc
c001d4f6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d4fd:	50                   	push   eax
c001d4fe:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d504:	e8 77 e8 ff ff       	call   c001bd80 <IDE::read(unsigned char, unsigned char)>
c001d509:	83 c4 10             	add    esp,0x10
c001d50c:	a8 88                	test   al,0x88
c001d50e:	74 25                	je     c001d535 <ATAPI::readyForCommand()+0x4b>
c001d510:	43                   	inc    ebx
c001d511:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d517:	7e da                	jle    c001d4f3 <ATAPI::readyForCommand()+0x9>
c001d519:	83 ec 0c             	sub    esp,0xc
c001d51c:	68 5e 01 00 00       	push   0x15e
c001d521:	e8 c6 8d ff ff       	call   c00162ec <milliTenthSleep(unsigned int)>
c001d526:	83 c4 10             	add    esp,0x10
c001d529:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d52f:	75 c2                	jne    c001d4f3 <ATAPI::readyForCommand()+0x9>
c001d531:	31 c0                	xor    eax,eax
c001d533:	eb 02                	jmp    c001d537 <ATAPI::readyForCommand()+0x4d>
c001d535:	b0 01                	mov    al,0x1
c001d537:	5a                   	pop    edx
c001d538:	5b                   	pop    ebx
c001d539:	5e                   	pop    esi
c001d53a:	c3                   	ret    
c001d53b:	90                   	nop

c001d53c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d53c:	55                   	push   ebp
c001d53d:	57                   	push   edi
c001d53e:	56                   	push   esi
c001d53f:	53                   	push   ebx
c001d540:	83 ec 20             	sub    esp,0x20
c001d543:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d547:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d54b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d54f:	6a 01                	push   0x1
c001d551:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d558:	50                   	push   eax
c001d559:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d55f:	e8 6a e9 ff ff       	call   c001bece <IDE::enableIRQs(unsigned char, bool)>
c001d564:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d56b:	59                   	pop    ecx
c001d56c:	5e                   	pop    esi
c001d56d:	50                   	push   eax
c001d56e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d574:	e8 21 e7 ff ff       	call   c001bc9a <IDE::prepareInterrupt(unsigned char)>
c001d579:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d57c:	e8 69 ff ff ff       	call   c001d4ea <ATAPI::readyForCommand()>
c001d581:	83 c4 10             	add    esp,0x10
c001d584:	84 c0                	test   al,al
c001d586:	75 0a                	jne    c001d592 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001d588:	bb 01 00 00 00       	mov    ebx,0x1
c001d58d:	e9 5f 02 00 00       	jmp    c001d7f1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d592:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d598:	c1 e0 04             	shl    eax,0x4
c001d59b:	0f b6 c0             	movzx  eax,al
c001d59e:	50                   	push   eax
c001d59f:	6a 06                	push   0x6
c001d5a1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d5a8:	50                   	push   eax
c001d5a9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d5af:	e8 0c e7 ff ff       	call   c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5b4:	6a 00                	push   0x0
c001d5b6:	6a 01                	push   0x1
c001d5b8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d5bf:	50                   	push   eax
c001d5c0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d5c6:	e8 f5 e6 ff ff       	call   c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5cb:	83 c4 20             	add    esp,0x20
c001d5ce:	0f b6 c3             	movzx  eax,bl
c001d5d1:	50                   	push   eax
c001d5d2:	0f b6 df             	movzx  ebx,bh
c001d5d5:	6a 04                	push   0x4
c001d5d7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d5de:	50                   	push   eax
c001d5df:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d5e5:	e8 d6 e6 ff ff       	call   c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5ea:	53                   	push   ebx
c001d5eb:	6a 05                	push   0x5
c001d5ed:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d5f4:	50                   	push   eax
c001d5f5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d5fb:	e8 c0 e6 ff ff       	call   c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d600:	83 c4 20             	add    esp,0x20
c001d603:	68 a0 00 00 00       	push   0xa0
c001d608:	6a 07                	push   0x7
c001d60a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d611:	50                   	push   eax
c001d612:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d618:	e8 a3 e6 ff ff       	call   c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d61d:	83 c4 0c             	add    esp,0xc
c001d620:	6a 01                	push   0x1
c001d622:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d629:	50                   	push   eax
c001d62a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d630:	e8 6f f1 ff ff       	call   c001c7a4 <IDE::polling(unsigned char, unsigned int)>
c001d635:	83 c4 10             	add    esp,0x10
c001d638:	0f b6 d8             	movzx  ebx,al
c001d63b:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d641:	85 db                	test   ebx,ebx
c001d643:	74 20                	je     c001d665 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001d645:	53                   	push   ebx
c001d646:	0f b6 c0             	movzx  eax,al
c001d649:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d650:	52                   	push   edx
c001d651:	50                   	push   eax
c001d652:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d658:	e8 8d f0 ff ff       	call   c001c6ea <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d65d:	83 c4 10             	add    esp,0x10
c001d660:	e9 8c 01 00 00       	jmp    c001d7f1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d665:	52                   	push   edx
c001d666:	0f b6 c0             	movzx  eax,al
c001d669:	52                   	push   edx
c001d66a:	50                   	push   eax
c001d66b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d671:	e8 38 e6 ff ff       	call   c001bcae <IDE::getBase(unsigned char)>
c001d676:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d67a:	b9 06 00 00 00       	mov    ecx,0x6
c001d67f:	89 c2                	mov    edx,eax
c001d681:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d684:	89 e8                	mov    eax,ebp
c001d686:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d68a:	83 c4 10             	add    esp,0x10
c001d68d:	0f b6 c0             	movzx  eax,al
c001d690:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d694:	85 db                	test   ebx,ebx
c001d696:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d69c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d6a3:	0f 84 eb 00 00 00    	je     c001d794 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d6a9:	55                   	push   ebp
c001d6aa:	55                   	push   ebp
c001d6ab:	52                   	push   edx
c001d6ac:	50                   	push   eax
c001d6ad:	e8 82 e7 ff ff       	call   c001be34 <IDE::waitInterrupt(unsigned char)>
c001d6b2:	83 c4 10             	add    esp,0x10
c001d6b5:	84 c0                	test   al,al
c001d6b7:	0f 84 cb fe ff ff    	je     c001d588 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d6bd:	56                   	push   esi
c001d6be:	56                   	push   esi
c001d6bf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6c6:	50                   	push   eax
c001d6c7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6cd:	e8 c8 e5 ff ff       	call   c001bc9a <IDE::prepareInterrupt(unsigned char)>
c001d6d2:	83 c4 0c             	add    esp,0xc
c001d6d5:	6a 04                	push   0x4
c001d6d7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6de:	50                   	push   eax
c001d6df:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6e5:	e8 96 e6 ff ff       	call   c001bd80 <IDE::read(unsigned char, unsigned char)>
c001d6ea:	83 c4 0c             	add    esp,0xc
c001d6ed:	6a 05                	push   0x5
c001d6ef:	89 c6                	mov    esi,eax
c001d6f1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6f8:	50                   	push   eax
c001d6f9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6ff:	e8 7c e6 ff ff       	call   c001bd80 <IDE::read(unsigned char, unsigned char)>
c001d704:	83 c4 10             	add    esp,0x10
c001d707:	0f b6 e8             	movzx  ebp,al
c001d70a:	89 f0                	mov    eax,esi
c001d70c:	c1 e5 08             	shl    ebp,0x8
c001d70f:	0f b6 f0             	movzx  esi,al
c001d712:	09 f5                	or     ebp,esi
c001d714:	31 f6                	xor    esi,esi
c001d716:	d1 fd                	sar    ebp,1
c001d718:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d71d:	74 5c                	je     c001d77b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001d71f:	39 ee                	cmp    esi,ebp
c001d721:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d727:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d72e:	75 0d                	jne    c001d73d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001d730:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001d733:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001d737:	4b                   	dec    ebx
c001d738:	e9 57 ff ff ff       	jmp    c001d694 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001d73d:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d741:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001d745:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001d74a:	51                   	push   ecx
c001d74b:	51                   	push   ecx
c001d74c:	52                   	push   edx
c001d74d:	50                   	push   eax
c001d74e:	e8 5b e5 ff ff       	call   c001bcae <IDE::getBase(unsigned char)>
c001d753:	89 c2                	mov    edx,eax
c001d755:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d75a:	66 ef                	out    dx,ax
c001d75c:	46                   	inc    esi
c001d75d:	83 c4 10             	add    esp,0x10
c001d760:	eb bd                	jmp    c001d71f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001d762:	51                   	push   ecx
c001d763:	51                   	push   ecx
c001d764:	52                   	push   edx
c001d765:	50                   	push   eax
c001d766:	e8 43 e5 ff ff       	call   c001bcae <IDE::getBase(unsigned char)>
c001d76b:	89 c2                	mov    edx,eax
c001d76d:	66 ed                	in     ax,dx
c001d76f:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d773:	83 c4 10             	add    esp,0x10
c001d776:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001d77a:	46                   	inc    esi
c001d77b:	39 ee                	cmp    esi,ebp
c001d77d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d783:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d78a:	75 d6                	jne    c001d762 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001d78c:	01 f6                	add    esi,esi
c001d78e:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001d792:	eb a3                	jmp    c001d737 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001d794:	51                   	push   ecx
c001d795:	51                   	push   ecx
c001d796:	52                   	push   edx
c001d797:	50                   	push   eax
c001d798:	e8 97 e6 ff ff       	call   c001be34 <IDE::waitInterrupt(unsigned char)>
c001d79d:	83 c4 10             	add    esp,0x10
c001d7a0:	84 c0                	test   al,al
c001d7a2:	0f 84 e0 fd ff ff    	je     c001d588 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d7a8:	52                   	push   edx
c001d7a9:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d7ae:	52                   	push   edx
c001d7af:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7b6:	50                   	push   eax
c001d7b7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7bd:	e8 d8 e4 ff ff       	call   c001bc9a <IDE::prepareInterrupt(unsigned char)>
c001d7c2:	83 c4 10             	add    esp,0x10
c001d7c5:	50                   	push   eax
c001d7c6:	50                   	push   eax
c001d7c7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7ce:	50                   	push   eax
c001d7cf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7d5:	e8 d4 e4 ff ff       	call   c001bcae <IDE::getBase(unsigned char)>
c001d7da:	8d 50 07             	lea    edx,[eax+0x7]
c001d7dd:	ec                   	in     al,dx
c001d7de:	83 c4 10             	add    esp,0x10
c001d7e1:	a8 88                	test   al,0x88
c001d7e3:	74 0a                	je     c001d7ef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d7e5:	4b                   	dec    ebx
c001d7e6:	75 dd                	jne    c001d7c5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d7e8:	bb 02 00 00 00       	mov    ebx,0x2
c001d7ed:	eb 02                	jmp    c001d7f1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d7ef:	31 db                	xor    ebx,ebx
c001d7f1:	83 c4 1c             	add    esp,0x1c
c001d7f4:	89 d8                	mov    eax,ebx
c001d7f6:	5b                   	pop    ebx
c001d7f7:	5e                   	pop    esi
c001d7f8:	5f                   	pop    edi
c001d7f9:	5d                   	pop    ebp
c001d7fa:	c3                   	ret    
c001d7fb:	90                   	nop

c001d7fc <ATAPI::diskRemoved()>:
c001d7fc:	53                   	push   ebx
c001d7fd:	83 ec 14             	sub    esp,0x14
c001d800:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d804:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d80b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d811:	e8 9a 04 ff ff       	call   c000dcb0 <LogicalDisk::unmount()>
c001d816:	58                   	pop    eax
c001d817:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d81d:	e8 72 0e ff ff       	call   c000e694 <VCache::writeWriteBuffer()>
c001d822:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d828:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d82c:	83 c4 18             	add    esp,0x18
c001d82f:	5b                   	pop    ebx
c001d830:	e9 4f 0e ff ff       	jmp    c000e684 <VCache::invalidateReadBuffer()>
c001d835:	90                   	nop

c001d836 <ATAPI::eject()>:
c001d836:	57                   	push   edi
c001d837:	b9 03 00 00 00       	mov    ecx,0x3
c001d83c:	53                   	push   ebx
c001d83d:	83 ec 14             	sub    esp,0x14
c001d840:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d844:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d848:	fc                   	cld    
c001d849:	31 c0                	xor    eax,eax
c001d84b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d84d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d852:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d857:	50                   	push   eax
c001d858:	50                   	push   eax
c001d859:	6a 00                	push   0x0
c001d85b:	6a 00                	push   0x0
c001d85d:	6a 00                	push   0x0
c001d85f:	6a 02                	push   0x2
c001d861:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d865:	50                   	push   eax
c001d866:	53                   	push   ebx
c001d867:	e8 d0 fc ff ff       	call   c001d53c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d86c:	83 c4 14             	add    esp,0x14
c001d86f:	53                   	push   ebx
c001d870:	e8 87 ff ff ff       	call   c001d7fc <ATAPI::diskRemoved()>
c001d875:	83 c4 24             	add    esp,0x24
c001d878:	31 c0                	xor    eax,eax
c001d87a:	5b                   	pop    ebx
c001d87b:	5f                   	pop    edi
c001d87c:	c3                   	ret    
c001d87d:	90                   	nop

c001d87e <ATAPI::diskInserted()>:
c001d87e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d882:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d889:	c3                   	ret    

c001d88a <ATAPI::detectMedia()>:
c001d88a:	56                   	push   esi
c001d88b:	53                   	push   ebx
c001d88c:	83 ec 28             	sub    esp,0x28
c001d88f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d893:	6a 0c                	push   0xc
c001d895:	6a 00                	push   0x0
c001d897:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d89b:	56                   	push   esi
c001d89c:	e8 4f 2c fe ff       	call   c00004f0 <memset>
c001d8a1:	58                   	pop    eax
c001d8a2:	5a                   	pop    edx
c001d8a3:	6a 00                	push   0x0
c001d8a5:	6a 00                	push   0x0
c001d8a7:	6a 00                	push   0x0
c001d8a9:	6a 00                	push   0x0
c001d8ab:	56                   	push   esi
c001d8ac:	53                   	push   ebx
c001d8ad:	e8 8a fc ff ff       	call   c001d53c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d8b2:	83 c4 1c             	add    esp,0x1c
c001d8b5:	6a 0c                	push   0xc
c001d8b7:	6a 00                	push   0x0
c001d8b9:	56                   	push   esi
c001d8ba:	e8 31 2c fe ff       	call   c00004f0 <memset>
c001d8bf:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d8c4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d8c9:	59                   	pop    ecx
c001d8ca:	58                   	pop    eax
c001d8cb:	6a 01                	push   0x1
c001d8cd:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d8d1:	50                   	push   eax
c001d8d2:	6a 00                	push   0x0
c001d8d4:	6a 12                	push   0x12
c001d8d6:	56                   	push   esi
c001d8d7:	53                   	push   ebx
c001d8d8:	e8 5f fc ff ff       	call   c001d53c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d8dd:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d8e1:	83 c4 20             	add    esp,0x20
c001d8e4:	83 e0 7f             	and    eax,0x7f
c001d8e7:	83 f8 70             	cmp    eax,0x70
c001d8ea:	74 15                	je     c001d901 <ATAPI::detectMedia()+0x77>
c001d8ec:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d8f3:	75 0c                	jne    c001d901 <ATAPI::detectMedia()+0x77>
c001d8f5:	83 ec 0c             	sub    esp,0xc
c001d8f8:	53                   	push   ebx
c001d8f9:	e8 80 ff ff ff       	call   c001d87e <ATAPI::diskInserted()>
c001d8fe:	83 c4 10             	add    esp,0x10
c001d901:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d905:	83 e0 0f             	and    eax,0xf
c001d908:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d90d:	0f b6 c0             	movzx  eax,al
c001d910:	75 19                	jne    c001d92b <ATAPI::detectMedia()+0xa1>
c001d912:	83 f8 02             	cmp    eax,0x2
c001d915:	75 14                	jne    c001d92b <ATAPI::detectMedia()+0xa1>
c001d917:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d91e:	74 24                	je     c001d944 <ATAPI::detectMedia()+0xba>
c001d920:	83 ec 0c             	sub    esp,0xc
c001d923:	53                   	push   ebx
c001d924:	e8 d3 fe ff ff       	call   c001d7fc <ATAPI::diskRemoved()>
c001d929:	eb 16                	jmp    c001d941 <ATAPI::detectMedia()+0xb7>
c001d92b:	85 c0                	test   eax,eax
c001d92d:	75 15                	jne    c001d944 <ATAPI::detectMedia()+0xba>
c001d92f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d936:	75 0c                	jne    c001d944 <ATAPI::detectMedia()+0xba>
c001d938:	83 ec 0c             	sub    esp,0xc
c001d93b:	53                   	push   ebx
c001d93c:	e8 3d ff ff ff       	call   c001d87e <ATAPI::diskInserted()>
c001d941:	83 c4 10             	add    esp,0x10
c001d944:	83 c4 24             	add    esp,0x24
c001d947:	5b                   	pop    ebx
c001d948:	5e                   	pop    esi
c001d949:	c3                   	ret    

c001d94a <ATAPI::open(int, int, void*)>:
c001d94a:	56                   	push   esi
c001d94b:	53                   	push   ebx
c001d94c:	50                   	push   eax
c001d94d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d951:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d955:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d959:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d95f:	c1 e0 06             	shl    eax,0x6
c001d962:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d968:	01 d0                	add    eax,edx
c001d96a:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d971:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d977:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d97e:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d988:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d98f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d995:	6a 04                	push   0x4
c001d997:	6a 0c                	push   0xc
c001d999:	51                   	push   ecx
c001d99a:	52                   	push   edx
c001d99b:	e8 20 e3 ff ff       	call   c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9a0:	90                   	nop
c001d9a1:	90                   	nop
c001d9a2:	6a 00                	push   0x0
c001d9a4:	6a 0c                	push   0xc
c001d9a6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9ad:	50                   	push   eax
c001d9ae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d9b4:	e8 07 e3 ff ff       	call   c001bcc0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9b9:	83 c4 14             	add    esp,0x14
c001d9bc:	68 78 01 00 00       	push   0x178
c001d9c1:	e8 0d a1 fe ff       	call   c0007ad3 <malloc>
c001d9c6:	83 c4 0c             	add    esp,0xc
c001d9c9:	6a 00                	push   0x0
c001d9cb:	68 ff ff ff 7f       	push   0x7fffffff
c001d9d0:	6a 00                	push   0x0
c001d9d2:	6a 00                	push   0x0
c001d9d4:	53                   	push   ebx
c001d9d5:	68 ef 33 02 c0       	push   0xc00233ef
c001d9da:	89 c6                	mov    esi,eax
c001d9dc:	50                   	push   eax
c001d9dd:	e8 0c 01 ff ff       	call   c000daee <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d9e2:	83 c4 14             	add    esp,0x14
c001d9e5:	56                   	push   esi
c001d9e6:	e8 c3 01 ff ff       	call   c000dbae <LogicalDisk::assignDriveLetter()>
c001d9eb:	5a                   	pop    edx
c001d9ec:	59                   	pop    ecx
c001d9ed:	0f be c0             	movsx  eax,al
c001d9f0:	50                   	push   eax
c001d9f1:	68 40 32 02 c0       	push   0xc0023240
c001d9f6:	e8 0f cf fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001d9fb:	58                   	pop    eax
c001d9fc:	5a                   	pop    edx
c001d9fd:	56                   	push   esi
c001d9fe:	53                   	push   ebx
c001d9ff:	e8 3c ef fe ff       	call   c000c940 <Device::addChild(Device*)>
c001da04:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001da0a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da0d:	e8 64 f3 fe ff       	call   c000cd76 <PhysicalDisk::startCache()>
c001da12:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001da19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da1c:	e8 69 fe ff ff       	call   c001d88a <ATAPI::detectMedia()>
c001da21:	83 c4 14             	add    esp,0x14
c001da24:	31 c0                	xor    eax,eax
c001da26:	5b                   	pop    ebx
c001da27:	5e                   	pop    esi
c001da28:	c3                   	ret    
c001da29:	90                   	nop

c001da2a <ATAPI::read(unsigned long long, int, void*)>:
c001da2a:	55                   	push   ebp
c001da2b:	57                   	push   edi
c001da2c:	56                   	push   esi
c001da2d:	53                   	push   ebx
c001da2e:	83 ec 1c             	sub    esp,0x1c
c001da31:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001da35:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001da39:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001da3d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da44:	74 3c                	je     c001da82 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001da46:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001da4a:	b9 03 00 00 00       	mov    ecx,0x3
c001da4f:	fc                   	cld    
c001da50:	31 c0                	xor    eax,eax
c001da52:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001da54:	89 e8                	mov    eax,ebp
c001da56:	0f ce                	bswap  esi
c001da58:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001da5c:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001da61:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001da65:	50                   	push   eax
c001da66:	50                   	push   eax
c001da67:	55                   	push   ebp
c001da68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001da6c:	c1 e5 0b             	shl    ebp,0xb
c001da6f:	6a 00                	push   0x0
c001da71:	55                   	push   ebp
c001da72:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001da76:	50                   	push   eax
c001da77:	53                   	push   ebx
c001da78:	e8 bf fa ff ff       	call   c001d53c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001da7d:	83 c4 20             	add    esp,0x20
c001da80:	eb 1a                	jmp    c001da9c <ATAPI::read(unsigned long long, int, void*)+0x72>
c001da82:	83 ec 0c             	sub    esp,0xc
c001da85:	53                   	push   ebx
c001da86:	e8 ff fd ff ff       	call   c001d88a <ATAPI::detectMedia()>
c001da8b:	83 c4 10             	add    esp,0x10
c001da8e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da95:	75 af                	jne    c001da46 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001da97:	b8 02 00 00 00       	mov    eax,0x2
c001da9c:	83 c4 1c             	add    esp,0x1c
c001da9f:	5b                   	pop    ebx
c001daa0:	5e                   	pop    esi
c001daa1:	5f                   	pop    edi
c001daa2:	5d                   	pop    ebp
c001daa3:	c3                   	ret    

c001daa4 <SATA::close(int, int, void*)>:
c001daa4:	83 ec 0c             	sub    esp,0xc
c001daa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001daab:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dab1:	85 c0                	test   eax,eax
c001dab3:	74 0c                	je     c001dac1 <SATA::close(int, int, void*)+0x1d>
c001dab5:	8b 10                	mov    edx,DWORD PTR [eax]
c001dab7:	83 ec 0c             	sub    esp,0xc
c001daba:	50                   	push   eax
c001dabb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dabe:	83 c4 10             	add    esp,0x10
c001dac1:	31 c0                	xor    eax,eax
c001dac3:	83 c4 0c             	add    esp,0xc
c001dac6:	c3                   	ret    
c001dac7:	90                   	nop

c001dac8 <SATA::powerSaving(PowerSavingLevel)>:
c001dac8:	c3                   	ret    
c001dac9:	90                   	nop

c001daca <SATA::open(int, int, void*)>:
c001daca:	56                   	push   esi
c001dacb:	53                   	push   ebx
c001dacc:	50                   	push   eax
c001dacd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dad1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dad5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dadf:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001dae5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dae9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001daf3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dafd:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001db04:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001db0a:	e8 d3 a2 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001db0f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001db15:	89 c6                	mov    esi,eax
c001db17:	e8 c6 a2 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001db1c:	81 c6 00 10 00 00    	add    esi,0x1000
c001db22:	39 c6                	cmp    esi,eax
c001db24:	74 10                	je     c001db36 <SATA::open(int, int, void*)+0x6c>
c001db26:	83 ec 0c             	sub    esp,0xc
c001db29:	68 88 32 02 c0       	push   0xc0023288
c001db2e:	e8 d4 39 ff ff       	call   c0011507 <KePanic(char const*)>
c001db33:	83 c4 10             	add    esp,0x10
c001db36:	83 ec 0c             	sub    esp,0xc
c001db39:	6a 02                	push   0x2
c001db3b:	e8 b5 ba fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001db40:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001db46:	6a 03                	push   0x3
c001db48:	50                   	push   eax
c001db49:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001db4f:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001db55:	e8 a4 c1 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001db5a:	83 c4 14             	add    esp,0x14
c001db5d:	53                   	push   ebx
c001db5e:	e8 13 f2 fe ff       	call   c000cd76 <PhysicalDisk::startCache()>
c001db63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db66:	e8 57 04 ff ff       	call   c000dfc2 <createPartitionsForDisk(PhysicalDisk*)>
c001db6b:	83 c4 14             	add    esp,0x14
c001db6e:	31 c0                	xor    eax,eax
c001db70:	5b                   	pop    ebx
c001db71:	5e                   	pop    esi
c001db72:	c3                   	ret    
c001db73:	90                   	nop

c001db74 <SATA::SATA()>:
c001db74:	83 ec 0c             	sub    esp,0xc
c001db77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db7b:	83 ec 04             	sub    esp,0x4
c001db7e:	68 00 02 00 00       	push   0x200
c001db83:	68 9c 32 02 c0       	push   0xc002329c
c001db88:	50                   	push   eax
c001db89:	e8 80 f1 fe ff       	call   c000cd0e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001db8e:	83 c4 10             	add    esp,0x10
c001db91:	ba 0c 33 02 c0       	mov    edx,0xc002330c
c001db96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db9a:	89 10                	mov    DWORD PTR [eax],edx
c001db9c:	90                   	nop
c001db9d:	83 c4 0c             	add    esp,0xc
c001dba0:	c3                   	ret    
c001dba1:	90                   	nop

c001dba2 <SATA::access(unsigned long long, int, void*, bool)>:
c001dba2:	55                   	push   ebp
c001dba3:	57                   	push   edi
c001dba4:	56                   	push   esi
c001dba5:	53                   	push   ebx
c001dba6:	83 ec 2c             	sub    esp,0x2c
c001dba9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001dbad:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001dbb2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dbb6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dbba:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dbbe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dbc2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dbc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dbca:	7e 10                	jle    c001dbdc <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001dbcc:	83 ec 0c             	sub    esp,0xc
c001dbcf:	68 ac 32 02 c0       	push   0xc00232ac
c001dbd4:	e8 2e 39 ff ff       	call   c0011507 <KePanic(char const*)>
c001dbd9:	83 c4 10             	add    esp,0x10
c001dbdc:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001dbe2:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001dbe8:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001dbee:	89 e8                	mov    eax,ebp
c001dbf0:	c1 e0 07             	shl    eax,0x7
c001dbf3:	01 d0                	add    eax,edx
c001dbf5:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dbff:	8d 45 02             	lea    eax,[ebp+0x2]
c001dc02:	51                   	push   ecx
c001dc03:	c1 e0 07             	shl    eax,0x7
c001dc06:	51                   	push   ecx
c001dc07:	01 d0                	add    eax,edx
c001dc09:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001dc0d:	50                   	push   eax
c001dc0e:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001dc14:	e8 6b ec ff ff       	call   c001c884 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001dc19:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dc1d:	83 c4 10             	add    esp,0x10
c001dc20:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001dc25:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc29:	0f 84 5b 01 00 00    	je     c001dd8a <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001dc2f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dc33:	c1 e0 09             	shl    eax,0x9
c001dc36:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001dc3b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dc3f:	74 0e                	je     c001dc4f <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001dc41:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001dc47:	89 c1                	mov    ecx,eax
c001dc49:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001dc4d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dc4f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dc53:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dc59:	8d 45 02             	lea    eax,[ebp+0x2]
c001dc5c:	c1 e0 07             	shl    eax,0x7
c001dc5f:	01 d0                	add    eax,edx
c001dc61:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc63:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001dc69:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001dc6f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dc73:	c1 e1 05             	shl    ecx,0x5
c001dc76:	01 c8                	add    eax,ecx
c001dc78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dc7c:	83 e1 01             	and    ecx,0x1
c001dc7f:	89 ce                	mov    esi,ecx
c001dc81:	8a 08                	mov    cl,BYTE PTR [eax]
c001dc83:	c1 e6 06             	shl    esi,0x6
c001dc86:	83 e1 bf             	and    ecx,0xffffffbf
c001dc89:	09 f1                	or     ecx,esi
c001dc8b:	88 08                	mov    BYTE PTR [eax],cl
c001dc8d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dc8f:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001dc95:	81 c9 05 00 01 00    	or     ecx,0x10005
c001dc9b:	89 08                	mov    DWORD PTR [eax],ecx
c001dc9d:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dca3:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001dca9:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001dcaf:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001dcb2:	50                   	push   eax
c001dcb3:	68 90 00 00 00       	push   0x90
c001dcb8:	6a 00                	push   0x0
c001dcba:	56                   	push   esi
c001dcbb:	e8 30 28 fe ff       	call   c00004f0 <memset>
c001dcc0:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001dcc6:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001dccc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcd0:	83 c4 10             	add    esp,0x10
c001dcd3:	48                   	dec    eax
c001dcd4:	25 ff ff 3f 00       	and    eax,0x3fffff
c001dcd9:	89 c1                	mov    ecx,eax
c001dcdb:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001dce1:	25 00 00 c0 ff       	and    eax,0xffc00000
c001dce6:	09 c8                	or     eax,ecx
c001dce8:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001dcee:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001dcf4:	83 c8 80             	or     eax,0xffffff80
c001dcf7:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001dcfd:	66 8b 06             	mov    ax,WORD PTR [esi]
c001dd00:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dd04:	25 00 7f 00 00       	and    eax,0x7f00
c001dd09:	0d 27 80 ff ff       	or     eax,0xffff8027
c001dd0e:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001dd13:	66 89 06             	mov    WORD PTR [esi],ax
c001dd16:	b0 35                	mov    al,0x35
c001dd18:	75 02                	jne    c001dd1c <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001dd1a:	b0 25                	mov    al,0x25
c001dd1c:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001dd1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dd23:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001dd27:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001dd2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dd2f:	c1 e8 10             	shr    eax,0x10
c001dd32:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001dd35:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dd39:	c1 e8 18             	shr    eax,0x18
c001dd3c:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001dd3f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001dd43:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001dd46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd4a:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001dd4d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dd51:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001dd55:	89 ee                	mov    esi,ebp
c001dd57:	31 c0                	xor    eax,eax
c001dd59:	c1 e6 07             	shl    esi,0x7
c001dd5c:	01 d6                	add    esi,edx
c001dd5e:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001dd64:	80 e1 88             	and    cl,0x88
c001dd67:	74 0a                	je     c001dd73 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001dd69:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001dd6e:	74 0a                	je     c001dd7a <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001dd70:	40                   	inc    eax
c001dd71:	eb eb                	jmp    c001dd5e <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001dd73:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001dd78:	75 17                	jne    c001dd91 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001dd7a:	83 ec 0c             	sub    esp,0xc
c001dd7d:	68 e5 32 02 c0       	push   0xc00232e5
c001dd82:	e8 83 cb fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001dd87:	83 c4 10             	add    esp,0x10
c001dd8a:	b8 01 00 00 00       	mov    eax,0x1
c001dd8f:	eb 5b                	jmp    c001ddec <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001dd91:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001dd95:	c1 e5 07             	shl    ebp,0x7
c001dd98:	b8 01 00 00 00       	mov    eax,0x1
c001dd9d:	01 ea                	add    edx,ebp
c001dd9f:	d3 e0                	shl    eax,cl
c001dda1:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001dda7:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001ddad:	85 c8                	test   eax,ecx
c001ddaf:	74 16                	je     c001ddc7 <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001ddb1:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001ddb7:	0f ba e1 1e          	bt     ecx,0x1e
c001ddbb:	73 ea                	jae    c001dda7 <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001ddbd:	83 ec 0c             	sub    esp,0xc
c001ddc0:	68 f3 32 02 c0       	push   0xc00232f3
c001ddc5:	eb bb                	jmp    c001dd82 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ddc7:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ddcd:	0f ba e0 1e          	bt     eax,0x1e
c001ddd1:	72 b7                	jb     c001dd8a <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001ddd3:	31 c0                	xor    eax,eax
c001ddd5:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001ddda:	75 10                	jne    c001ddec <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001dddc:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001dde2:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001dde6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ddea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ddec:	83 c4 2c             	add    esp,0x2c
c001ddef:	5b                   	pop    ebx
c001ddf0:	5e                   	pop    esi
c001ddf1:	5f                   	pop    edi
c001ddf2:	5d                   	pop    ebp
c001ddf3:	c3                   	ret    

c001ddf4 <SATA::read(unsigned long long, int, void*)>:
c001ddf4:	55                   	push   ebp
c001ddf5:	57                   	push   edi
c001ddf6:	56                   	push   esi
c001ddf7:	be 04 00 00 00       	mov    esi,0x4
c001ddfc:	53                   	push   ebx
c001ddfd:	83 ec 0c             	sub    esp,0xc
c001de00:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001de04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001de08:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001de0c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001de10:	8d 7b ff             	lea    edi,[ebx-0x1]
c001de13:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001de19:	0f 87 1a 02 00 00    	ja     c001e039 <SATA::read(unsigned long long, int, void*)+0x245>
c001de1f:	85 c9                	test   ecx,ecx
c001de21:	be 06 00 00 00       	mov    esi,0x6
c001de26:	0f 84 0d 02 00 00    	je     c001e039 <SATA::read(unsigned long long, int, void*)+0x245>
c001de2c:	56                   	push   esi
c001de2d:	56                   	push   esi
c001de2e:	6a 00                	push   0x0
c001de30:	51                   	push   ecx
c001de31:	53                   	push   ebx
c001de32:	52                   	push   edx
c001de33:	50                   	push   eax
c001de34:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de38:	e8 65 fd ff ff       	call   c001dba2 <SATA::access(unsigned long long, int, void*, bool)>
c001de3d:	83 c4 20             	add    esp,0x20
c001de40:	85 c0                	test   eax,eax
c001de42:	89 c6                	mov    esi,eax
c001de44:	0f 85 ea 01 00 00    	jne    c001e034 <SATA::read(unsigned long long, int, void*)+0x240>
c001de4a:	50                   	push   eax
c001de4b:	50                   	push   eax
c001de4c:	6a 0f                	push   0xf
c001de4e:	6a 00                	push   0x0
c001de50:	01 1d b4 d0 02 c0    	add    DWORD PTR ds:0xc002d0b4,ebx
c001de56:	bb 0a 00 00 00       	mov    ebx,0xa
c001de5b:	e8 7d f2 ff ff       	call   c001d0dd <combineColours(unsigned char, unsigned char)>
c001de60:	5a                   	pop    edx
c001de61:	59                   	pop    ecx
c001de62:	b9 10 27 00 00       	mov    ecx,0x2710
c001de67:	0f b6 c0             	movzx  eax,al
c001de6a:	50                   	push   eax
c001de6b:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001de70:	99                   	cdq    
c001de71:	f7 f9                	idiv   ecx
c001de73:	99                   	cdq    
c001de74:	f7 fb                	idiv   ebx
c001de76:	8d 42 30             	lea    eax,[edx+0x30]
c001de79:	0f b6 c0             	movzx  eax,al
c001de7c:	50                   	push   eax
c001de7d:	e8 4a f2 ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001de82:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001de88:	5f                   	pop    edi
c001de89:	5d                   	pop    ebp
c001de8a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001de8f:	6a 0f                	push   0xf
c001de91:	6a 00                	push   0x0
c001de93:	e8 45 f2 ff ff       	call   c001d0dd <combineColours(unsigned char, unsigned char)>
c001de98:	5a                   	pop    edx
c001de99:	59                   	pop    ecx
c001de9a:	0f b6 c0             	movzx  eax,al
c001de9d:	50                   	push   eax
c001de9e:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dea3:	99                   	cdq    
c001dea4:	f7 fd                	idiv   ebp
c001dea6:	99                   	cdq    
c001dea7:	f7 fb                	idiv   ebx
c001dea9:	8d 42 30             	lea    eax,[edx+0x30]
c001deac:	0f b6 c0             	movzx  eax,al
c001deaf:	50                   	push   eax
c001deb0:	e8 17 f2 ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001deb5:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001debb:	5f                   	pop    edi
c001debc:	bf 64 00 00 00       	mov    edi,0x64
c001dec1:	58                   	pop    eax
c001dec2:	6a 0f                	push   0xf
c001dec4:	6a 00                	push   0x0
c001dec6:	e8 12 f2 ff ff       	call   c001d0dd <combineColours(unsigned char, unsigned char)>
c001decb:	5a                   	pop    edx
c001decc:	59                   	pop    ecx
c001decd:	0f b6 c0             	movzx  eax,al
c001ded0:	50                   	push   eax
c001ded1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001ded6:	99                   	cdq    
c001ded7:	f7 ff                	idiv   edi
c001ded9:	99                   	cdq    
c001deda:	f7 fb                	idiv   ebx
c001dedc:	8d 42 30             	lea    eax,[edx+0x30]
c001dedf:	0f b6 c0             	movzx  eax,al
c001dee2:	50                   	push   eax
c001dee3:	e8 e4 f1 ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001dee8:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001deee:	58                   	pop    eax
c001deef:	5a                   	pop    edx
c001def0:	6a 0f                	push   0xf
c001def2:	6a 00                	push   0x0
c001def4:	e8 e4 f1 ff ff       	call   c001d0dd <combineColours(unsigned char, unsigned char)>
c001def9:	59                   	pop    ecx
c001defa:	5a                   	pop    edx
c001defb:	0f b6 c0             	movzx  eax,al
c001defe:	50                   	push   eax
c001deff:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df04:	99                   	cdq    
c001df05:	f7 fb                	idiv   ebx
c001df07:	99                   	cdq    
c001df08:	f7 fb                	idiv   ebx
c001df0a:	8d 42 30             	lea    eax,[edx+0x30]
c001df0d:	0f b6 c0             	movzx  eax,al
c001df10:	50                   	push   eax
c001df11:	e8 b6 f1 ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001df16:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001df1c:	59                   	pop    ecx
c001df1d:	58                   	pop    eax
c001df1e:	6a 0f                	push   0xf
c001df20:	6a 00                	push   0x0
c001df22:	e8 b6 f1 ff ff       	call   c001d0dd <combineColours(unsigned char, unsigned char)>
c001df27:	5a                   	pop    edx
c001df28:	59                   	pop    ecx
c001df29:	0f b6 c0             	movzx  eax,al
c001df2c:	50                   	push   eax
c001df2d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df32:	99                   	cdq    
c001df33:	f7 fb                	idiv   ebx
c001df35:	83 c2 30             	add    edx,0x30
c001df38:	0f b6 d2             	movzx  edx,dl
c001df3b:	52                   	push   edx
c001df3c:	e8 8b f1 ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001df41:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001df47:	58                   	pop    eax
c001df48:	5a                   	pop    edx
c001df49:	6a 0f                	push   0xf
c001df4b:	6a 00                	push   0x0
c001df4d:	e8 8b f1 ff ff       	call   c001d0dd <combineColours(unsigned char, unsigned char)>
c001df52:	59                   	pop    ecx
c001df53:	b9 10 27 00 00       	mov    ecx,0x2710
c001df58:	5a                   	pop    edx
c001df59:	0f b6 c0             	movzx  eax,al
c001df5c:	50                   	push   eax
c001df5d:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001df62:	99                   	cdq    
c001df63:	f7 f9                	idiv   ecx
c001df65:	99                   	cdq    
c001df66:	f7 fb                	idiv   ebx
c001df68:	8d 42 30             	lea    eax,[edx+0x30]
c001df6b:	0f b6 c0             	movzx  eax,al
c001df6e:	50                   	push   eax
c001df6f:	e8 58 f1 ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001df74:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001df7a:	59                   	pop    ecx
c001df7b:	58                   	pop    eax
c001df7c:	6a 0f                	push   0xf
c001df7e:	6a 00                	push   0x0
c001df80:	e8 58 f1 ff ff       	call   c001d0dd <combineColours(unsigned char, unsigned char)>
c001df85:	5a                   	pop    edx
c001df86:	59                   	pop    ecx
c001df87:	0f b6 c0             	movzx  eax,al
c001df8a:	50                   	push   eax
c001df8b:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001df90:	99                   	cdq    
c001df91:	f7 fd                	idiv   ebp
c001df93:	99                   	cdq    
c001df94:	f7 fb                	idiv   ebx
c001df96:	8d 42 30             	lea    eax,[edx+0x30]
c001df99:	0f b6 c0             	movzx  eax,al
c001df9c:	50                   	push   eax
c001df9d:	e8 2a f1 ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001dfa2:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dfa8:	5d                   	pop    ebp
c001dfa9:	58                   	pop    eax
c001dfaa:	6a 0f                	push   0xf
c001dfac:	6a 00                	push   0x0
c001dfae:	e8 2a f1 ff ff       	call   c001d0dd <combineColours(unsigned char, unsigned char)>
c001dfb3:	5a                   	pop    edx
c001dfb4:	59                   	pop    ecx
c001dfb5:	0f b6 c0             	movzx  eax,al
c001dfb8:	50                   	push   eax
c001dfb9:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001dfbe:	99                   	cdq    
c001dfbf:	f7 ff                	idiv   edi
c001dfc1:	99                   	cdq    
c001dfc2:	f7 fb                	idiv   ebx
c001dfc4:	8d 42 30             	lea    eax,[edx+0x30]
c001dfc7:	0f b6 c0             	movzx  eax,al
c001dfca:	50                   	push   eax
c001dfcb:	e8 fc f0 ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001dfd0:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dfd6:	5f                   	pop    edi
c001dfd7:	5d                   	pop    ebp
c001dfd8:	6a 0f                	push   0xf
c001dfda:	6a 00                	push   0x0
c001dfdc:	e8 fc f0 ff ff       	call   c001d0dd <combineColours(unsigned char, unsigned char)>
c001dfe1:	5a                   	pop    edx
c001dfe2:	59                   	pop    ecx
c001dfe3:	0f b6 c0             	movzx  eax,al
c001dfe6:	50                   	push   eax
c001dfe7:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001dfec:	99                   	cdq    
c001dfed:	f7 fb                	idiv   ebx
c001dfef:	99                   	cdq    
c001dff0:	f7 fb                	idiv   ebx
c001dff2:	8d 42 30             	lea    eax,[edx+0x30]
c001dff5:	0f b6 c0             	movzx  eax,al
c001dff8:	50                   	push   eax
c001dff9:	e8 ce f0 ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001dffe:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e004:	5f                   	pop    edi
c001e005:	5d                   	pop    ebp
c001e006:	6a 0f                	push   0xf
c001e008:	6a 00                	push   0x0
c001e00a:	e8 ce f0 ff ff       	call   c001d0dd <combineColours(unsigned char, unsigned char)>
c001e00f:	5a                   	pop    edx
c001e010:	59                   	pop    ecx
c001e011:	0f b6 c0             	movzx  eax,al
c001e014:	50                   	push   eax
c001e015:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e01a:	99                   	cdq    
c001e01b:	f7 fb                	idiv   ebx
c001e01d:	83 c2 30             	add    edx,0x30
c001e020:	0f b6 d2             	movzx  edx,dl
c001e023:	52                   	push   edx
c001e024:	e8 a3 f0 ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001e029:	83 c4 10             	add    esp,0x10
c001e02c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e032:	eb 05                	jmp    c001e039 <SATA::read(unsigned long long, int, void*)+0x245>
c001e034:	be 01 00 00 00       	mov    esi,0x1
c001e039:	83 c4 0c             	add    esp,0xc
c001e03c:	89 f0                	mov    eax,esi
c001e03e:	5b                   	pop    ebx
c001e03f:	5e                   	pop    esi
c001e040:	5f                   	pop    edi
c001e041:	5d                   	pop    ebp
c001e042:	c3                   	ret    
c001e043:	90                   	nop

c001e044 <SATA::write(unsigned long long, int, void*)>:
c001e044:	55                   	push   ebp
c001e045:	57                   	push   edi
c001e046:	56                   	push   esi
c001e047:	53                   	push   ebx
c001e048:	83 ec 0c             	sub    esp,0xc
c001e04b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e04f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e053:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e057:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e05b:	8d 70 ff             	lea    esi,[eax-0x1]
c001e05e:	b8 04 00 00 00       	mov    eax,0x4
c001e063:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e069:	0f 87 2c 02 00 00    	ja     c001e29b <SATA::write(unsigned long long, int, void*)+0x257>
c001e06f:	85 db                	test   ebx,ebx
c001e071:	b8 06 00 00 00       	mov    eax,0x6
c001e076:	0f 84 1f 02 00 00    	je     c001e29b <SATA::write(unsigned long long, int, void*)+0x257>
c001e07c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001e080:	c1 e6 09             	shl    esi,0x9
c001e083:	01 de                	add    esi,ebx
c001e085:	50                   	push   eax
c001e086:	89 d7                	mov    edi,edx
c001e088:	50                   	push   eax
c001e089:	83 c7 01             	add    edi,0x1
c001e08c:	6a 01                	push   0x1
c001e08e:	89 cd                	mov    ebp,ecx
c001e090:	53                   	push   ebx
c001e091:	83 d5 00             	adc    ebp,0x0
c001e094:	6a 01                	push   0x1
c001e096:	81 c3 00 02 00 00    	add    ebx,0x200
c001e09c:	51                   	push   ecx
c001e09d:	52                   	push   edx
c001e09e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e0a2:	e8 fb fa ff ff       	call   c001dba2 <SATA::access(unsigned long long, int, void*, bool)>
c001e0a7:	83 c4 20             	add    esp,0x20
c001e0aa:	39 f3                	cmp    ebx,esi
c001e0ac:	89 fa                	mov    edx,edi
c001e0ae:	89 e9                	mov    ecx,ebp
c001e0b0:	75 d3                	jne    c001e085 <SATA::write(unsigned long long, int, void*)+0x41>
c001e0b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e0b6:	bd 10 27 00 00       	mov    ebp,0x2710
c001e0bb:	bb 0a 00 00 00       	mov    ebx,0xa
c001e0c0:	01 05 b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,eax
c001e0c6:	50                   	push   eax
c001e0c7:	50                   	push   eax
c001e0c8:	6a 0f                	push   0xf
c001e0ca:	6a 00                	push   0x0
c001e0cc:	e8 0c f0 ff ff       	call   c001d0dd <combineColours(unsigned char, unsigned char)>
c001e0d1:	5a                   	pop    edx
c001e0d2:	59                   	pop    ecx
c001e0d3:	0f b6 c0             	movzx  eax,al
c001e0d6:	50                   	push   eax
c001e0d7:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e0dc:	99                   	cdq    
c001e0dd:	f7 fd                	idiv   ebp
c001e0df:	99                   	cdq    
c001e0e0:	f7 fb                	idiv   ebx
c001e0e2:	8d 42 30             	lea    eax,[edx+0x30]
c001e0e5:	0f b6 c0             	movzx  eax,al
c001e0e8:	50                   	push   eax
c001e0e9:	e8 de ef ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001e0ee:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e0f4:	5e                   	pop    esi
c001e0f5:	5f                   	pop    edi
c001e0f6:	bf e8 03 00 00       	mov    edi,0x3e8
c001e0fb:	6a 0f                	push   0xf
c001e0fd:	6a 00                	push   0x0
c001e0ff:	e8 d9 ef ff ff       	call   c001d0dd <combineColours(unsigned char, unsigned char)>
c001e104:	5a                   	pop    edx
c001e105:	59                   	pop    ecx
c001e106:	0f b6 c0             	movzx  eax,al
c001e109:	50                   	push   eax
c001e10a:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e10f:	99                   	cdq    
c001e110:	f7 ff                	idiv   edi
c001e112:	99                   	cdq    
c001e113:	f7 fb                	idiv   ebx
c001e115:	8d 42 30             	lea    eax,[edx+0x30]
c001e118:	0f b6 c0             	movzx  eax,al
c001e11b:	50                   	push   eax
c001e11c:	e8 ab ef ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001e121:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e127:	5e                   	pop    esi
c001e128:	be 64 00 00 00       	mov    esi,0x64
c001e12d:	58                   	pop    eax
c001e12e:	6a 0f                	push   0xf
c001e130:	6a 00                	push   0x0
c001e132:	e8 a6 ef ff ff       	call   c001d0dd <combineColours(unsigned char, unsigned char)>
c001e137:	5a                   	pop    edx
c001e138:	59                   	pop    ecx
c001e139:	0f b6 c0             	movzx  eax,al
c001e13c:	50                   	push   eax
c001e13d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e142:	99                   	cdq    
c001e143:	f7 fe                	idiv   esi
c001e145:	99                   	cdq    
c001e146:	f7 fb                	idiv   ebx
c001e148:	8d 42 30             	lea    eax,[edx+0x30]
c001e14b:	0f b6 c0             	movzx  eax,al
c001e14e:	50                   	push   eax
c001e14f:	e8 78 ef ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001e154:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e15a:	58                   	pop    eax
c001e15b:	5a                   	pop    edx
c001e15c:	6a 0f                	push   0xf
c001e15e:	6a 00                	push   0x0
c001e160:	e8 78 ef ff ff       	call   c001d0dd <combineColours(unsigned char, unsigned char)>
c001e165:	59                   	pop    ecx
c001e166:	5a                   	pop    edx
c001e167:	0f b6 c0             	movzx  eax,al
c001e16a:	50                   	push   eax
c001e16b:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e170:	99                   	cdq    
c001e171:	f7 fb                	idiv   ebx
c001e173:	99                   	cdq    
c001e174:	f7 fb                	idiv   ebx
c001e176:	8d 42 30             	lea    eax,[edx+0x30]
c001e179:	0f b6 c0             	movzx  eax,al
c001e17c:	50                   	push   eax
c001e17d:	e8 4a ef ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001e182:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e188:	59                   	pop    ecx
c001e189:	58                   	pop    eax
c001e18a:	6a 0f                	push   0xf
c001e18c:	6a 00                	push   0x0
c001e18e:	e8 4a ef ff ff       	call   c001d0dd <combineColours(unsigned char, unsigned char)>
c001e193:	5a                   	pop    edx
c001e194:	59                   	pop    ecx
c001e195:	0f b6 c0             	movzx  eax,al
c001e198:	50                   	push   eax
c001e199:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e19e:	99                   	cdq    
c001e19f:	f7 fb                	idiv   ebx
c001e1a1:	83 c2 30             	add    edx,0x30
c001e1a4:	0f b6 d2             	movzx  edx,dl
c001e1a7:	52                   	push   edx
c001e1a8:	e8 1f ef ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001e1ad:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e1b3:	58                   	pop    eax
c001e1b4:	5a                   	pop    edx
c001e1b5:	6a 0f                	push   0xf
c001e1b7:	6a 00                	push   0x0
c001e1b9:	e8 1f ef ff ff       	call   c001d0dd <combineColours(unsigned char, unsigned char)>
c001e1be:	59                   	pop    ecx
c001e1bf:	5a                   	pop    edx
c001e1c0:	0f b6 c0             	movzx  eax,al
c001e1c3:	50                   	push   eax
c001e1c4:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e1c9:	99                   	cdq    
c001e1ca:	f7 fd                	idiv   ebp
c001e1cc:	99                   	cdq    
c001e1cd:	f7 fb                	idiv   ebx
c001e1cf:	8d 42 30             	lea    eax,[edx+0x30]
c001e1d2:	0f b6 c0             	movzx  eax,al
c001e1d5:	50                   	push   eax
c001e1d6:	e8 f1 ee ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001e1db:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e1e1:	59                   	pop    ecx
c001e1e2:	5d                   	pop    ebp
c001e1e3:	6a 0f                	push   0xf
c001e1e5:	6a 00                	push   0x0
c001e1e7:	e8 f1 ee ff ff       	call   c001d0dd <combineColours(unsigned char, unsigned char)>
c001e1ec:	5a                   	pop    edx
c001e1ed:	59                   	pop    ecx
c001e1ee:	0f b6 c0             	movzx  eax,al
c001e1f1:	50                   	push   eax
c001e1f2:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e1f7:	99                   	cdq    
c001e1f8:	f7 ff                	idiv   edi
c001e1fa:	99                   	cdq    
c001e1fb:	f7 fb                	idiv   ebx
c001e1fd:	8d 42 30             	lea    eax,[edx+0x30]
c001e200:	0f b6 c0             	movzx  eax,al
c001e203:	50                   	push   eax
c001e204:	e8 c3 ee ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001e209:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e20f:	5f                   	pop    edi
c001e210:	5d                   	pop    ebp
c001e211:	6a 0f                	push   0xf
c001e213:	6a 00                	push   0x0
c001e215:	e8 c3 ee ff ff       	call   c001d0dd <combineColours(unsigned char, unsigned char)>
c001e21a:	5a                   	pop    edx
c001e21b:	59                   	pop    ecx
c001e21c:	0f b6 c0             	movzx  eax,al
c001e21f:	50                   	push   eax
c001e220:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e225:	99                   	cdq    
c001e226:	f7 fe                	idiv   esi
c001e228:	99                   	cdq    
c001e229:	f7 fb                	idiv   ebx
c001e22b:	8d 42 30             	lea    eax,[edx+0x30]
c001e22e:	0f b6 c0             	movzx  eax,al
c001e231:	50                   	push   eax
c001e232:	e8 95 ee ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001e237:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e23d:	5e                   	pop    esi
c001e23e:	5f                   	pop    edi
c001e23f:	6a 0f                	push   0xf
c001e241:	6a 00                	push   0x0
c001e243:	e8 95 ee ff ff       	call   c001d0dd <combineColours(unsigned char, unsigned char)>
c001e248:	5d                   	pop    ebp
c001e249:	5a                   	pop    edx
c001e24a:	0f b6 c0             	movzx  eax,al
c001e24d:	50                   	push   eax
c001e24e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e253:	99                   	cdq    
c001e254:	f7 fb                	idiv   ebx
c001e256:	99                   	cdq    
c001e257:	f7 fb                	idiv   ebx
c001e259:	8d 42 30             	lea    eax,[edx+0x30]
c001e25c:	0f b6 c0             	movzx  eax,al
c001e25f:	50                   	push   eax
c001e260:	e8 67 ee ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001e265:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e26b:	59                   	pop    ecx
c001e26c:	5e                   	pop    esi
c001e26d:	6a 0f                	push   0xf
c001e26f:	6a 00                	push   0x0
c001e271:	e8 67 ee ff ff       	call   c001d0dd <combineColours(unsigned char, unsigned char)>
c001e276:	5f                   	pop    edi
c001e277:	5d                   	pop    ebp
c001e278:	0f b6 c0             	movzx  eax,al
c001e27b:	50                   	push   eax
c001e27c:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e281:	99                   	cdq    
c001e282:	f7 fb                	idiv   ebx
c001e284:	83 c2 30             	add    edx,0x30
c001e287:	0f b6 d2             	movzx  edx,dl
c001e28a:	52                   	push   edx
c001e28b:	e8 3c ee ff ff       	call   c001d0cc <combineCharAndColour(char, unsigned char)>
c001e290:	83 c4 10             	add    esp,0x10
c001e293:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e299:	31 c0                	xor    eax,eax
c001e29b:	83 c4 0c             	add    esp,0xc
c001e29e:	5b                   	pop    ebx
c001e29f:	5e                   	pop    esi
c001e2a0:	5f                   	pop    edi
c001e2a1:	5d                   	pop    ebp
c001e2a2:	c3                   	ret    
c001e2a3:	90                   	nop

c001e2a4 <SATAPI::write(unsigned long long, int, void*)>:
c001e2a4:	b8 03 00 00 00       	mov    eax,0x3
c001e2a9:	c3                   	ret    

c001e2aa <SATAPI::close(int, int, void*)>:
c001e2aa:	83 ec 0c             	sub    esp,0xc
c001e2ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2b1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e2b7:	85 c0                	test   eax,eax
c001e2b9:	74 0c                	je     c001e2c7 <SATAPI::close(int, int, void*)+0x1d>
c001e2bb:	8b 10                	mov    edx,DWORD PTR [eax]
c001e2bd:	83 ec 0c             	sub    esp,0xc
c001e2c0:	50                   	push   eax
c001e2c1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e2c4:	83 c4 10             	add    esp,0x10
c001e2c7:	31 c0                	xor    eax,eax
c001e2c9:	83 c4 0c             	add    esp,0xc
c001e2cc:	c3                   	ret    
c001e2cd:	90                   	nop

c001e2ce <SATAPI::SATAPI()>:
c001e2ce:	83 ec 0c             	sub    esp,0xc
c001e2d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2d5:	83 ec 04             	sub    esp,0x4
c001e2d8:	68 00 08 00 00       	push   0x800
c001e2dd:	68 3c 33 02 c0       	push   0xc002333c
c001e2e2:	50                   	push   eax
c001e2e3:	e8 26 ea fe ff       	call   c000cd0e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e2e8:	83 c4 10             	add    esp,0x10
c001e2eb:	ba 30 34 02 c0       	mov    edx,0xc0023430
c001e2f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2f4:	89 10                	mov    DWORD PTR [eax],edx
c001e2f6:	90                   	nop
c001e2f7:	83 c4 0c             	add    esp,0xc
c001e2fa:	c3                   	ret    
c001e2fb:	90                   	nop

c001e2fc <SATAPI::diskRemoved()>:
c001e2fc:	c3                   	ret    
c001e2fd:	90                   	nop

c001e2fe <SATAPI::diskInserted()>:
c001e2fe:	83 ec 18             	sub    esp,0x18
c001e301:	68 48 33 02 c0       	push   0xc0023348
c001e306:	e8 ff c5 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e30b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e30f:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e316:	83 c4 1c             	add    esp,0x1c
c001e319:	c3                   	ret    

c001e31a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e31a:	55                   	push   ebp
c001e31b:	57                   	push   edi
c001e31c:	56                   	push   esi
c001e31d:	53                   	push   ebx
c001e31e:	83 ec 34             	sub    esp,0x34
c001e321:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e325:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e329:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e32d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e331:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e335:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e33b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e341:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e345:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e34b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e34f:	83 c0 02             	add    eax,0x2
c001e352:	c1 e0 07             	shl    eax,0x7
c001e355:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e359:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e35d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e361:	c1 e0 07             	shl    eax,0x7
c001e364:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e368:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e36c:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e376:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e37a:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e380:	e8 ff e4 ff ff       	call   c001c884 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e385:	83 c4 10             	add    esp,0x10
c001e388:	89 c2                	mov    edx,eax
c001e38a:	b8 01 00 00 00       	mov    eax,0x1
c001e38f:	83 fa ff             	cmp    edx,0xffffffff
c001e392:	0f 84 5f 02 00 00    	je     c001e5f7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e398:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e39c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3a0:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e3a6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e3a8:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e3ae:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e3b4:	89 d1                	mov    ecx,edx
c001e3b6:	c1 e1 05             	shl    ecx,0x5
c001e3b9:	01 c8                	add    eax,ecx
c001e3bb:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e3bd:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e3c3:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e3c9:	89 08                	mov    DWORD PTR [eax],ecx
c001e3cb:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e3d1:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e3d7:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e3dd:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e3e0:	50                   	push   eax
c001e3e1:	68 90 00 00 00       	push   0x90
c001e3e6:	6a 00                	push   0x0
c001e3e8:	53                   	push   ebx
c001e3e9:	e8 02 21 fe ff       	call   c00004f0 <memset>
c001e3ee:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e3f1:	b9 0c 00 00 00       	mov    ecx,0xc
c001e3f6:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e3fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e3fc:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e402:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e406:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e40a:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e410:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e414:	48                   	dec    eax
c001e415:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e41a:	89 c1                	mov    ecx,eax
c001e41c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e422:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e427:	09 c8                	or     eax,ecx
c001e429:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e42f:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e435:	83 c8 80             	or     eax,0xffffff80
c001e438:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e43e:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e441:	25 00 7f 00 00       	and    eax,0x7f00
c001e446:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e44b:	66 89 03             	mov    WORD PTR [ebx],ax
c001e44e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e452:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001e456:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e45a:	c1 e8 10             	shr    eax,0x10
c001e45d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e460:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e464:	c1 e8 18             	shr    eax,0x18
c001e467:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001e46a:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e46e:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e471:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e475:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e478:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e47c:	83 c4 10             	add    esp,0x10
c001e47f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e483:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e48b:	31 c0                	xor    eax,eax
c001e48d:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001e493:	80 e1 88             	and    cl,0x88
c001e496:	74 0a                	je     c001e4a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001e498:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e49d:	74 0a                	je     c001e4a9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001e49f:	40                   	inc    eax
c001e4a0:	eb eb                	jmp    c001e48d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001e4a2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e4a7:	75 43                	jne    c001e4ec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001e4a9:	83 ec 0c             	sub    esp,0xc
c001e4ac:	68 60 33 02 c0       	push   0xc0023360
c001e4b1:	e8 54 c4 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e4b6:	58                   	pop    eax
c001e4b7:	5a                   	pop    edx
c001e4b8:	68 75 33 02 c0       	push   0xc0023375
c001e4bd:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001e4c3:	e8 e4 a5 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001e4c8:	59                   	pop    ecx
c001e4c9:	5b                   	pop    ebx
c001e4ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e4ce:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e4d4:	e8 45 e4 ff ff       	call   c001c91e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e4d9:	5e                   	pop    esi
c001e4da:	5f                   	pop    edi
c001e4db:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e4df:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e4e5:	e8 14 e4 ff ff       	call   c001c8fe <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e4ea:	eb 48                	jmp    c001e534 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001e4ec:	b8 01 00 00 00       	mov    eax,0x1
c001e4f1:	88 d1                	mov    cl,dl
c001e4f3:	d3 e0                	shl    eax,cl
c001e4f5:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001e4fa:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001e500:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e504:	89 c7                	mov    edi,eax
c001e506:	c1 e3 07             	shl    ebx,0x7
c001e509:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001e50d:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001e513:	85 c7                	test   edi,eax
c001e515:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001e51b:	0f 84 a3 00 00 00    	je     c001e5c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001e521:	0f ba e0 1e          	bt     eax,0x1e
c001e525:	73 1a                	jae    c001e541 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001e527:	83 ec 0c             	sub    esp,0xc
c001e52a:	68 87 33 02 c0       	push   0xc0023387
c001e52f:	e8 d6 c3 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e534:	83 c4 10             	add    esp,0x10
c001e537:	b8 01 00 00 00       	mov    eax,0x1
c001e53c:	e9 b6 00 00 00       	jmp    c001e5f7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e541:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001e547:	83 f8 0d             	cmp    eax,0xd
c001e54a:	77 0a                	ja     c001e556 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001e54c:	83 ec 0c             	sub    esp,0xc
c001e54f:	68 c8 00 00 00       	push   0xc8
c001e554:	eb 28                	jmp    c001e57e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e556:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001e55c:	83 f8 0d             	cmp    eax,0xd
c001e55f:	77 0a                	ja     c001e56b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001e561:	83 ec 0c             	sub    esp,0xc
c001e564:	68 58 02 00 00       	push   0x258
c001e569:	eb 13                	jmp    c001e57e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e56b:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001e571:	83 f8 06             	cmp    eax,0x6
c001e574:	77 10                	ja     c001e586 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001e576:	83 ec 0c             	sub    esp,0xc
c001e579:	68 dc 05 00 00       	push   0x5dc
c001e57e:	e8 69 7d ff ff       	call   c00162ec <milliTenthSleep(unsigned int)>
c001e583:	83 c4 10             	add    esp,0x10
c001e586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e58a:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e58d:	75 06                	jne    c001e595 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001e58f:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e593:	74 15                	je     c001e5aa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e595:	83 fe 06             	cmp    esi,0x6
c001e598:	77 10                	ja     c001e5aa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e59a:	83 ec 0c             	sub    esp,0xc
c001e59d:	68 c4 09 00 00       	push   0x9c4
c001e5a2:	e8 45 7d ff ff       	call   c00162ec <milliTenthSleep(unsigned int)>
c001e5a7:	83 c4 10             	add    esp,0x10
c001e5aa:	46                   	inc    esi
c001e5ab:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001e5b1:	0f 85 56 ff ff ff    	jne    c001e50d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001e5b7:	83 ec 0c             	sub    esp,0xc
c001e5ba:	68 9a 33 02 c0       	push   0xc002339a
c001e5bf:	e9 6b ff ff ff       	jmp    c001e52f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e5c4:	0f ba e0 1e          	bt     eax,0x1e
c001e5c8:	73 0d                	jae    c001e5d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001e5ca:	83 ec 0c             	sub    esp,0xc
c001e5cd:	68 ae 33 02 c0       	push   0xc00233ae
c001e5d2:	e9 58 ff ff ff       	jmp    c001e52f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e5d7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e5dc:	74 17                	je     c001e5f5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e5de:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e5e3:	74 10                	je     c001e5f5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e5e5:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e5eb:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e5ef:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e5f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e5f5:	31 c0                	xor    eax,eax
c001e5f7:	83 c4 2c             	add    esp,0x2c
c001e5fa:	5b                   	pop    ebx
c001e5fb:	5e                   	pop    esi
c001e5fc:	5f                   	pop    edi
c001e5fd:	5d                   	pop    ebp
c001e5fe:	c3                   	ret    
c001e5ff:	90                   	nop

c001e600 <SATAPI::eject()>:
c001e600:	57                   	push   edi
c001e601:	b9 03 00 00 00       	mov    ecx,0x3
c001e606:	83 ec 18             	sub    esp,0x18
c001e609:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e60d:	fc                   	cld    
c001e60e:	31 c0                	xor    eax,eax
c001e610:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e612:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e617:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e61c:	50                   	push   eax
c001e61d:	6a 00                	push   0x0
c001e61f:	6a 00                	push   0x0
c001e621:	6a 00                	push   0x0
c001e623:	6a 00                	push   0x0
c001e625:	6a 02                	push   0x2
c001e627:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e62b:	50                   	push   eax
c001e62c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e630:	e8 e5 fc ff ff       	call   c001e31a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e635:	83 c4 38             	add    esp,0x38
c001e638:	31 c0                	xor    eax,eax
c001e63a:	5f                   	pop    edi
c001e63b:	c3                   	ret    

c001e63c <SATAPI::detectMedia()>:
c001e63c:	53                   	push   ebx
c001e63d:	83 ec 14             	sub    esp,0x14
c001e640:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e644:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e64a:	e8 45 00 ff ff       	call   c000e694 <VCache::writeWriteBuffer()>
c001e64f:	59                   	pop    ecx
c001e650:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e656:	e8 29 00 ff ff       	call   c000e684 <VCache::invalidateReadBuffer()>
c001e65b:	c7 04 24 c3 33 02 c0 	mov    DWORD PTR [esp],0xc00233c3
c001e662:	e8 a3 c2 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e667:	83 c4 10             	add    esp,0x10
c001e66a:	31 c0                	xor    eax,eax
c001e66c:	8b 14 85 80 b8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4780]
c001e673:	85 d2                	test   edx,edx
c001e675:	74 0f                	je     c001e686 <SATAPI::detectMedia()+0x4a>
c001e677:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e67d:	75 07                	jne    c001e686 <SATAPI::detectMedia()+0x4a>
c001e67f:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e686:	40                   	inc    eax
c001e687:	83 f8 1a             	cmp    eax,0x1a
c001e68a:	75 e0                	jne    c001e66c <SATAPI::detectMedia()+0x30>
c001e68c:	83 c4 08             	add    esp,0x8
c001e68f:	5b                   	pop    ebx
c001e690:	c3                   	ret    
c001e691:	90                   	nop

c001e692 <SATAPI::open(int, int, void*)>:
c001e692:	56                   	push   esi
c001e693:	53                   	push   ebx
c001e694:	51                   	push   ecx
c001e695:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e699:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e69d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e6a7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e6ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e6b1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e6bb:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e6c5:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e6cc:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e6d2:	e8 0b 97 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e6d7:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e6dd:	89 c6                	mov    esi,eax
c001e6df:	e8 fe 96 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e6e4:	81 c6 00 10 00 00    	add    esi,0x1000
c001e6ea:	39 c6                	cmp    esi,eax
c001e6ec:	74 10                	je     c001e6fe <SATAPI::open(int, int, void*)+0x6c>
c001e6ee:	83 ec 0c             	sub    esp,0xc
c001e6f1:	68 d8 33 02 c0       	push   0xc00233d8
c001e6f6:	e8 0c 2e ff ff       	call   c0011507 <KePanic(char const*)>
c001e6fb:	83 c4 10             	add    esp,0x10
c001e6fe:	83 ec 0c             	sub    esp,0xc
c001e701:	6a 02                	push   0x2
c001e703:	e8 ed ae fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001e708:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e70e:	6a 03                	push   0x3
c001e710:	50                   	push   eax
c001e711:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e717:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001e71d:	e8 dc b5 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001e722:	83 c4 14             	add    esp,0x14
c001e725:	68 78 01 00 00       	push   0x178
c001e72a:	e8 a4 93 fe ff       	call   c0007ad3 <malloc>
c001e72f:	83 c4 0c             	add    esp,0xc
c001e732:	6a 00                	push   0x0
c001e734:	68 ff ff ff 7f       	push   0x7fffffff
c001e739:	6a 00                	push   0x0
c001e73b:	6a 00                	push   0x0
c001e73d:	53                   	push   ebx
c001e73e:	68 ee 33 02 c0       	push   0xc00233ee
c001e743:	89 c6                	mov    esi,eax
c001e745:	50                   	push   eax
c001e746:	e8 a3 f3 fe ff       	call   c000daee <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e74b:	83 c4 14             	add    esp,0x14
c001e74e:	56                   	push   esi
c001e74f:	e8 5a f4 fe ff       	call   c000dbae <LogicalDisk::assignDriveLetter()>
c001e754:	5a                   	pop    edx
c001e755:	59                   	pop    ecx
c001e756:	0f be c0             	movsx  eax,al
c001e759:	50                   	push   eax
c001e75a:	68 40 32 02 c0       	push   0xc0023240
c001e75f:	e8 a6 c1 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e764:	58                   	pop    eax
c001e765:	5a                   	pop    edx
c001e766:	56                   	push   esi
c001e767:	53                   	push   ebx
c001e768:	e8 d3 e1 fe ff       	call   c000c940 <Device::addChild(Device*)>
c001e76d:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e773:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e776:	e8 fb e5 fe ff       	call   c000cd76 <PhysicalDisk::startCache()>
c001e77b:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e785:	e8 b2 fe ff ff       	call   c001e63c <SATAPI::detectMedia()>
c001e78a:	83 c4 14             	add    esp,0x14
c001e78d:	31 c0                	xor    eax,eax
c001e78f:	5b                   	pop    ebx
c001e790:	5e                   	pop    esi
c001e791:	c3                   	ret    

c001e792 <SATAPI::read(unsigned long long, int, void*)>:
c001e792:	55                   	push   ebp
c001e793:	57                   	push   edi
c001e794:	56                   	push   esi
c001e795:	53                   	push   ebx
c001e796:	83 ec 3c             	sub    esp,0x3c
c001e799:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001e79d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e7a1:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e7a5:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e7a9:	83 fd 04             	cmp    ebp,0x4
c001e7ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e7b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e7b4:	7e 10                	jle    c001e7c6 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001e7b6:	83 ec 0c             	sub    esp,0xc
c001e7b9:	68 fc 33 02 c0       	push   0xc00233fc
c001e7be:	e8 44 2d ff ff       	call   c0011507 <KePanic(char const*)>
c001e7c3:	83 c4 10             	add    esp,0x10
c001e7c6:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e7cc:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e7d2:	51                   	push   ecx
c001e7d3:	50                   	push   eax
c001e7d4:	83 c0 02             	add    eax,0x2
c001e7d7:	c1 e0 07             	shl    eax,0x7
c001e7da:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e7e0:	50                   	push   eax
c001e7e1:	52                   	push   edx
c001e7e2:	e8 61 e1 ff ff       	call   c001c948 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e7e7:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e7eb:	b9 03 00 00 00       	mov    ecx,0x3
c001e7f0:	fc                   	cld    
c001e7f1:	31 c0                	xor    eax,eax
c001e7f3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e7f5:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e7fa:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e7ff:	83 c4 0c             	add    esp,0xc
c001e802:	6a 00                	push   0x0
c001e804:	6a 00                	push   0x0
c001e806:	6a 00                	push   0x0
c001e808:	6a 00                	push   0x0
c001e80a:	6a 02                	push   0x2
c001e80c:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e810:	50                   	push   eax
c001e811:	53                   	push   ebx
c001e812:	e8 03 fb ff ff       	call   c001e31a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e817:	83 c4 20             	add    esp,0x20
c001e81a:	85 c0                	test   eax,eax
c001e81c:	89 c6                	mov    esi,eax
c001e81e:	75 46                	jne    c001e866 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001e820:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e824:	b9 03 00 00 00       	mov    ecx,0x3
c001e829:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e82b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e82f:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e834:	0f c8                	bswap  eax
c001e836:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e83a:	89 e8                	mov    eax,ebp
c001e83c:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e840:	50                   	push   eax
c001e841:	55                   	push   ebp
c001e842:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001e846:	c1 e5 0b             	shl    ebp,0xb
c001e849:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e84d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e851:	55                   	push   ebp
c001e852:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e856:	50                   	push   eax
c001e857:	53                   	push   ebx
c001e858:	e8 bd fa ff ff       	call   c001e31a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e85d:	83 c4 20             	add    esp,0x20
c001e860:	85 c0                	test   eax,eax
c001e862:	89 c6                	mov    esi,eax
c001e864:	74 0c                	je     c001e872 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001e866:	83 ec 0c             	sub    esp,0xc
c001e869:	53                   	push   ebx
c001e86a:	e8 cd fd ff ff       	call   c001e63c <SATAPI::detectMedia()>
c001e86f:	83 c4 10             	add    esp,0x10
c001e872:	83 c4 3c             	add    esp,0x3c
c001e875:	89 f0                	mov    eax,esi
c001e877:	5b                   	pop    ebx
c001e878:	5e                   	pop    esi
c001e879:	5f                   	pop    edi
c001e87a:	5d                   	pop    ebp
c001e87b:	c3                   	ret    

c001e87c <IOAPIC::close(int, int, void*)>:
c001e87c:	b8 00 00 00 00       	mov    eax,0x0
c001e881:	c3                   	ret    

c001e882 <apicGetBase()>:
c001e882:	55                   	push   ebp
c001e883:	89 e5                	mov    ebp,esp
c001e885:	83 ec 18             	sub    esp,0x18
c001e888:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e88d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e893:	83 e0 08             	and    eax,0x8
c001e896:	0f b6 c0             	movzx  eax,al
c001e899:	85 c0                	test   eax,eax
c001e89b:	75 07                	jne    c001e8a4 <apicGetBase()+0x22>
c001e89d:	b8 00 00 00 00       	mov    eax,0x0
c001e8a2:	eb 21                	jmp    c001e8c5 <apicGetBase()+0x43>
c001e8a4:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e8a9:	83 ec 08             	sub    esp,0x8
c001e8ac:	6a 1b                	push   0x1b
c001e8ae:	50                   	push   eax
c001e8af:	e8 2e 88 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c001e8b4:	83 c4 10             	add    esp,0x10
c001e8b7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e8ba:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e8bd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e8c0:	25 00 00 ff ff       	and    eax,0xffff0000
c001e8c5:	c9                   	leave  
c001e8c6:	c3                   	ret    
c001e8c7:	90                   	nop

c001e8c8 <IOAPIC::IOAPIC()>:
c001e8c8:	83 ec 0c             	sub    esp,0xc
c001e8cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8cf:	83 ec 08             	sub    esp,0x8
c001e8d2:	68 60 34 02 c0       	push   0xc0023460
c001e8d7:	50                   	push   eax
c001e8d8:	e8 fb e1 fe ff       	call   c000cad8 <Device::Device(char const*)>
c001e8dd:	83 c4 10             	add    esp,0x10
c001e8e0:	ba 70 34 02 c0       	mov    edx,0xc0023470
c001e8e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8e9:	89 10                	mov    DWORD PTR [eax],edx
c001e8eb:	90                   	nop
c001e8ec:	83 c4 0c             	add    esp,0xc
c001e8ef:	c3                   	ret    

c001e8f0 <apicOpen()>:
c001e8f0:	55                   	push   ebp
c001e8f1:	89 e5                	mov    ebp,esp
c001e8f3:	53                   	push   ebx
c001e8f4:	83 ec 34             	sub    esp,0x34
c001e8f7:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c001e8fc:	83 f0 01             	xor    eax,0x1
c001e8ff:	0f b6 c0             	movzx  eax,al
c001e902:	85 c0                	test   eax,eax
c001e904:	0f 84 a3 00 00 00    	je     c001e9ad <apicOpen()+0xbd>
c001e90a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e90e:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c001e913:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e917:	0f b6 c0             	movzx  eax,al
c001e91a:	39 c2                	cmp    edx,eax
c001e91c:	0f 83 84 00 00 00    	jae    c001e9a6 <apicOpen()+0xb6>
c001e922:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e929:	83 ec 0c             	sub    esp,0xc
c001e92c:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e92f:	e8 9f 91 fe ff       	call   c0007ad3 <malloc>
c001e934:	83 c4 10             	add    esp,0x10
c001e937:	89 c3                	mov    ebx,eax
c001e939:	83 ec 0c             	sub    esp,0xc
c001e93c:	53                   	push   ebx
c001e93d:	e8 86 ff ff ff       	call   c001e8c8 <IOAPIC::IOAPIC()>
c001e942:	83 c4 10             	add    esp,0x10
c001e945:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e948:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e94c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e94f:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001e956:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c001e95b:	83 c0 01             	add    eax,0x1
c001e95e:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001e963:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e968:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e96e:	83 ec 08             	sub    esp,0x8
c001e971:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e974:	50                   	push   eax
c001e975:	e8 c6 df fe ff       	call   c000c940 <Device::addChild(Device*)>
c001e97a:	83 c4 10             	add    esp,0x10
c001e97d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e980:	8b 00                	mov    eax,DWORD PTR [eax]
c001e982:	83 c0 08             	add    eax,0x8
c001e985:	8b 00                	mov    eax,DWORD PTR [eax]
c001e987:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e98b:	6a 00                	push   0x0
c001e98d:	6a 00                	push   0x0
c001e98f:	52                   	push   edx
c001e990:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e993:	ff d0                	call   eax
c001e995:	83 c4 10             	add    esp,0x10
c001e998:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e99b:	83 c0 01             	add    eax,0x1
c001e99e:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e9a1:	e9 68 ff ff ff       	jmp    c001e90e <apicOpen()+0x1e>
c001e9a6:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c001e9ad:	e8 d0 fe ff ff       	call   c001e882 <apicGetBase()>
c001e9b2:	05 f0 00 00 00       	add    eax,0xf0
c001e9b7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e9ba:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e9bd:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9bf:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e9c2:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e9c9:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e9d0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e9d3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e9d6:	89 10                	mov    DWORD PTR [eax],edx
c001e9d8:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e9df:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c001e9e4:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e9e7:	7d 7c                	jge    c001ea65 <apicOpen()+0x175>
c001e9e9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e9ec:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001e9f3:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001e9f6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e9f9:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ea00:	c1 e8 08             	shr    eax,0x8
c001ea03:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001ea07:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea0a:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ea11:	c1 e8 18             	shr    eax,0x18
c001ea14:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001ea17:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001ea1b:	3d ff 00 00 00       	cmp    eax,0xff
c001ea20:	75 3a                	jne    c001ea5c <apicOpen()+0x16c>
c001ea22:	e8 5b fe ff ff       	call   c001e882 <apicGetBase()>
c001ea27:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001ea2b:	83 fa 01             	cmp    edx,0x1
c001ea2e:	75 07                	jne    c001ea37 <apicOpen()+0x147>
c001ea30:	ba 60 03 00 00       	mov    edx,0x360
c001ea35:	eb 05                	jmp    c001ea3c <apicOpen()+0x14c>
c001ea37:	ba 50 03 00 00       	mov    edx,0x350
c001ea3c:	01 d0                	add    eax,edx
c001ea3e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ea41:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ea44:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea46:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001ea49:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001ea50:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001ea54:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ea57:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ea5a:	89 10                	mov    DWORD PTR [eax],edx
c001ea5c:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001ea60:	e9 7a ff ff ff       	jmp    c001e9df <apicOpen()+0xef>
c001ea65:	90                   	nop
c001ea66:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ea69:	c9                   	leave  
c001ea6a:	c3                   	ret    
c001ea6b:	90                   	nop

c001ea6c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ea6c:	55                   	push   ebp
c001ea6d:	89 e5                	mov    ebp,esp
c001ea6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ea72:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ea78:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ea7b:	72 1d                	jb     c001ea9a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ea7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ea80:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ea86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ea89:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ea8f:	01 d0                	add    eax,edx
c001ea91:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ea94:	73 04                	jae    c001ea9a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ea96:	b0 01                	mov    al,0x1
c001ea98:	eb 02                	jmp    c001ea9c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ea9a:	b0 00                	mov    al,0x0
c001ea9c:	5d                   	pop    ebp
c001ea9d:	c3                   	ret    

c001ea9e <IOAPIC::read(int)>:
c001ea9e:	55                   	push   ebp
c001ea9f:	89 e5                	mov    ebp,esp
c001eaa1:	83 ec 10             	sub    esp,0x10
c001eaa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eaa7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001eaad:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001eab0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eab3:	0f b6 d0             	movzx  edx,al
c001eab6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eab9:	89 10                	mov    DWORD PTR [eax],edx
c001eabb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eabe:	83 c0 10             	add    eax,0x10
c001eac1:	8b 00                	mov    eax,DWORD PTR [eax]
c001eac3:	c9                   	leave  
c001eac4:	c3                   	ret    
c001eac5:	90                   	nop

c001eac6 <IOAPIC::open(int, int, void*)>:
c001eac6:	55                   	push   ebp
c001eac7:	89 e5                	mov    ebp,esp
c001eac9:	57                   	push   edi
c001eaca:	56                   	push   esi
c001eacb:	53                   	push   ebx
c001eacc:	83 ec 04             	sub    esp,0x4
c001eacf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ead2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ead5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eadb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eade:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eae4:	8b 14 85 20 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd43e0]
c001eaeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eaee:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001eaf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eaf7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eafd:	8b 14 85 a0 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4360]
c001eb04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb07:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001eb0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb10:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001eb16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb19:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001eb1f:	0f b6 f0             	movzx  esi,al
c001eb22:	89 d0                	mov    eax,edx
c001eb24:	ba 00 00 00 00       	mov    edx,0x0
c001eb29:	89 c7                	mov    edi,eax
c001eb2b:	83 e7 ff             	and    edi,0xffffffff
c001eb2e:	89 f9                	mov    ecx,edi
c001eb30:	0f b6 da             	movzx  ebx,dl
c001eb33:	89 c8                	mov    eax,ecx
c001eb35:	89 da                	mov    edx,ebx
c001eb37:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001eb3a:	8d 5e 08             	lea    ebx,[esi+0x8]
c001eb3d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001eb41:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001eb45:	83 e0 00             	and    eax,0x0
c001eb48:	09 d0                	or     eax,edx
c001eb4a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001eb4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb51:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001eb57:	8d 50 01             	lea    edx,[eax+0x1]
c001eb5a:	88 d1                	mov    cl,dl
c001eb5c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001eb5f:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001eb65:	0f b6 d0             	movzx  edx,al
c001eb68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb6b:	83 c2 08             	add    edx,0x8
c001eb6e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001eb72:	0f b6 c9             	movzx  ecx,cl
c001eb75:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001eb7b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001eb7f:	6a 01                	push   0x1
c001eb81:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb84:	e8 15 ff ff ff       	call   c001ea9e <IOAPIC::read(int)>
c001eb89:	83 c4 08             	add    esp,0x8
c001eb8c:	c1 f8 10             	sar    eax,0x10
c001eb8f:	0f b6 c0             	movzx  eax,al
c001eb92:	8d 50 01             	lea    edx,[eax+0x1]
c001eb95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb98:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001eb9e:	b8 00 00 00 00       	mov    eax,0x0
c001eba3:	8d 65 f4             	lea    esp,[ebp-0xc]
c001eba6:	5b                   	pop    ebx
c001eba7:	5e                   	pop    esi
c001eba8:	5f                   	pop    edi
c001eba9:	5d                   	pop    ebp
c001ebaa:	c3                   	ret    
c001ebab:	90                   	nop

c001ebac <IOAPIC::write(int, int)>:
c001ebac:	55                   	push   ebp
c001ebad:	89 e5                	mov    ebp,esp
c001ebaf:	83 ec 10             	sub    esp,0x10
c001ebb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebb5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ebbb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ebbe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ebc1:	0f b6 d0             	movzx  edx,al
c001ebc4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ebc7:	89 10                	mov    DWORD PTR [eax],edx
c001ebc9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ebcc:	8d 50 10             	lea    edx,[eax+0x10]
c001ebcf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ebd2:	89 02                	mov    DWORD PTR [edx],eax
c001ebd4:	90                   	nop
c001ebd5:	c9                   	leave  
c001ebd6:	c3                   	ret    
c001ebd7:	90                   	nop

c001ebd8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ebd8:	55                   	push   ebp
c001ebd9:	89 e5                	mov    ebp,esp
c001ebdb:	53                   	push   ebx
c001ebdc:	83 ec 2c             	sub    esp,0x2c
c001ebdf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ebe2:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ebe5:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ebe8:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ebeb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ebee:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ebf1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ebf4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ebf7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ebfa:	88 d8                	mov    al,bl
c001ebfc:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001ebff:	88 c8                	mov    al,cl
c001ec01:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ec04:	88 d0                	mov    al,dl
c001ec06:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ec09:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ec0d:	83 c0 08             	add    eax,0x8
c001ec10:	d1 e0                	shl    eax,1
c001ec12:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ec15:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ec19:	83 c0 08             	add    eax,0x8
c001ec1c:	d1 e0                	shl    eax,1
c001ec1e:	83 c0 01             	add    eax,0x1
c001ec21:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ec24:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ec27:	50                   	push   eax
c001ec28:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec2b:	e8 6e fe ff ff       	call   c001ea9e <IOAPIC::read(int)>
c001ec30:	83 c4 08             	add    esp,0x8
c001ec33:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ec36:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001ec3d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ec40:	c1 e0 18             	shl    eax,0x18
c001ec43:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ec46:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ec49:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ec4c:	52                   	push   edx
c001ec4d:	50                   	push   eax
c001ec4e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec51:	e8 56 ff ff ff       	call   c001ebac <IOAPIC::write(int, int)>
c001ec56:	83 c4 0c             	add    esp,0xc
c001ec59:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ec5c:	50                   	push   eax
c001ec5d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec60:	e8 39 fe ff ff       	call   c001ea9e <IOAPIC::read(int)>
c001ec65:	83 c4 08             	add    esp,0x8
c001ec68:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001ec6b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001ec72:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001ec79:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001ec80:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001ec84:	85 c0                	test   eax,eax
c001ec86:	74 09                	je     c001ec91 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001ec88:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001ec8f:	eb 07                	jmp    c001ec98 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001ec91:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001ec98:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001ec9c:	85 c0                	test   eax,eax
c001ec9e:	74 09                	je     c001eca9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001eca0:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001eca7:	eb 07                	jmp    c001ecb0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001eca9:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001ecb0:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001ecb7:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001ecbb:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ecbe:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ecc1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ecc4:	52                   	push   edx
c001ecc5:	50                   	push   eax
c001ecc6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecc9:	e8 de fe ff ff       	call   c001ebac <IOAPIC::write(int, int)>
c001ecce:	83 c4 0c             	add    esp,0xc
c001ecd1:	90                   	nop
c001ecd2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ecd5:	c9                   	leave  
c001ecd6:	c3                   	ret    
c001ecd7:	90                   	nop

c001ecd8 <APICTimer::close(int, int, void*)>:
c001ecd8:	b8 00 00 00 00       	mov    eax,0x0
c001ecdd:	c3                   	ret    
c001ecde:	66 90                	xchg   ax,ax

c001ece0 <apicTimerHandler(regs*, void*)>:
c001ece0:	83 ec 0c             	sub    esp,0xc
c001ece3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ece7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ece9:	b8 10 27 00 00       	mov    eax,0x2710
c001ecee:	ba 00 00 00 00       	mov    edx,0x0
c001ecf3:	f7 f1                	div    ecx
c001ecf5:	83 ec 0c             	sub    esp,0xc
c001ecf8:	50                   	push   eax
c001ecf9:	e8 ae f6 fe ff       	call   c000e3ac <timerHandler(unsigned int)>
c001ecfe:	83 c4 10             	add    esp,0x10
c001ed01:	90                   	nop
c001ed02:	83 c4 0c             	add    esp,0xc
c001ed05:	c3                   	ret    
c001ed06:	66 90                	xchg   ax,ax

c001ed08 <APICTimer::open(int, int, void*)>:
c001ed08:	83 ec 0c             	sub    esp,0xc
c001ed0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed0f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed11:	83 c0 24             	add    eax,0x24
c001ed14:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed16:	83 ec 08             	sub    esp,0x8
c001ed19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed21:	ff d0                	call   eax
c001ed23:	83 c4 10             	add    esp,0x10
c001ed26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed2a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ed2e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ed34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed38:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ed3c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ed42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ed46:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ed4c:	83 ec 0c             	sub    esp,0xc
c001ed4f:	51                   	push   ecx
c001ed50:	6a 01                	push   0x1
c001ed52:	68 e0 ec 01 c0       	push   0xc001ece0
c001ed57:	52                   	push   edx
c001ed58:	50                   	push   eax
c001ed59:	e8 8e db fe ff       	call   c000c8ec <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ed5e:	83 c4 20             	add    esp,0x20
c001ed61:	89 c2                	mov    edx,eax
c001ed63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed67:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ed6d:	b8 00 00 00 00       	mov    eax,0x0
c001ed72:	83 c4 0c             	add    esp,0xc
c001ed75:	c3                   	ret    
c001ed76:	66 90                	xchg   ax,ax

c001ed78 <APICTimer::write(int)>:
c001ed78:	83 ec 0c             	sub    esp,0xc
c001ed7b:	83 ec 0c             	sub    esp,0xc
c001ed7e:	68 94 34 02 c0       	push   0xc0023494
c001ed83:	e8 7f 27 ff ff       	call   c0011507 <KePanic(char const*)>
c001ed88:	83 c4 10             	add    esp,0x10
c001ed8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed8f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed93:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ed99:	90                   	nop
c001ed9a:	83 c4 0c             	add    esp,0xc
c001ed9d:	c3                   	ret    
c001ed9e:	66 90                	xchg   ax,ax

c001eda0 <APICTimer::APICTimer()>:
c001eda0:	83 ec 0c             	sub    esp,0xc
c001eda3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eda7:	83 ec 08             	sub    esp,0x8
c001edaa:	68 a4 34 02 c0       	push   0xc00234a4
c001edaf:	50                   	push   eax
c001edb0:	e8 2b f5 fe ff       	call   c000e2e0 <Timer::Timer(char const*)>
c001edb5:	83 c4 10             	add    esp,0x10
c001edb8:	ba b8 34 02 c0       	mov    edx,0xc00234b8
c001edbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edc1:	89 10                	mov    DWORD PTR [eax],edx
c001edc3:	90                   	nop
c001edc4:	83 c4 0c             	add    esp,0xc
c001edc7:	c3                   	ret    

c001edc8 <PIT::write(int)>:
c001edc8:	83 ec 10             	sub    esp,0x10
c001edcb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001edcf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001edd3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001edd9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eddd:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c001ede2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ede7:	89 c2                	mov    edx,eax
c001ede9:	c1 fa 1f             	sar    edx,0x1f
c001edec:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001edf0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001edf4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001edfb:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ee00:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ee04:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ee09:	ee                   	out    dx,al
c001ee0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee0e:	0f b6 c0             	movzx  eax,al
c001ee11:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ee18:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ee1c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ee20:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ee25:	ee                   	out    dx,al
c001ee26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee2a:	c1 f8 08             	sar    eax,0x8
c001ee2d:	0f b6 c0             	movzx  eax,al
c001ee30:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ee37:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ee3b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ee3f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ee44:	ee                   	out    dx,al
c001ee45:	90                   	nop
c001ee46:	83 c4 10             	add    esp,0x10
c001ee49:	c3                   	ret    
c001ee4a:	66 90                	xchg   ax,ax

c001ee4c <pitHandler(regs*, void*)>:
c001ee4c:	83 ec 0c             	sub    esp,0xc
c001ee4f:	8b 0d 04 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d104
c001ee55:	b8 10 27 00 00       	mov    eax,0x2710
c001ee5a:	89 c2                	mov    edx,eax
c001ee5c:	c1 fa 1f             	sar    edx,0x1f
c001ee5f:	f7 f9                	idiv   ecx
c001ee61:	83 ec 0c             	sub    esp,0xc
c001ee64:	50                   	push   eax
c001ee65:	e8 42 f5 fe ff       	call   c000e3ac <timerHandler(unsigned int)>
c001ee6a:	83 c4 10             	add    esp,0x10
c001ee6d:	90                   	nop
c001ee6e:	83 c4 0c             	add    esp,0xc
c001ee71:	c3                   	ret    
c001ee72:	66 90                	xchg   ax,ax

c001ee74 <PIT::open(int, int, void*)>:
c001ee74:	83 ec 0c             	sub    esp,0xc
c001ee77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee7b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee7d:	83 c0 24             	add    eax,0x24
c001ee80:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee82:	83 ec 08             	sub    esp,0x8
c001ee85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee8d:	ff d0                	call   eax
c001ee8f:	83 c4 10             	add    esp,0x10
c001ee92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee96:	83 ec 0c             	sub    esp,0xc
c001ee99:	6a 00                	push   0x0
c001ee9b:	6a 01                	push   0x1
c001ee9d:	68 4c ee 01 c0       	push   0xc001ee4c
c001eea2:	6a 00                	push   0x0
c001eea4:	50                   	push   eax
c001eea5:	e8 42 da fe ff       	call   c000c8ec <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eeaa:	83 c4 20             	add    esp,0x20
c001eead:	89 c2                	mov    edx,eax
c001eeaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeb3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001eeb9:	b8 00 00 00 00       	mov    eax,0x0
c001eebe:	83 c4 0c             	add    esp,0xc
c001eec1:	c3                   	ret    
c001eec2:	66 90                	xchg   ax,ax

c001eec4 <PIT::close(int, int, void*)>:
c001eec4:	83 ec 0c             	sub    esp,0xc
c001eec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eecb:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001eed5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed9:	6a 01                	push   0x1
c001eedb:	68 4c ee 01 c0       	push   0xc001ee4c
c001eee0:	6a 00                	push   0x0
c001eee2:	50                   	push   eax
c001eee3:	e8 3a da fe ff       	call   c000c922 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001eee8:	83 c4 10             	add    esp,0x10
c001eeeb:	b8 00 00 00 00       	mov    eax,0x0
c001eef0:	83 c4 0c             	add    esp,0xc
c001eef3:	c3                   	ret    

c001eef4 <PIT::PIT()>:
c001eef4:	83 ec 0c             	sub    esp,0xc
c001eef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eefb:	83 ec 08             	sub    esp,0x8
c001eefe:	68 e0 34 02 c0       	push   0xc00234e0
c001ef03:	50                   	push   eax
c001ef04:	e8 d7 f3 fe ff       	call   c000e2e0 <Timer::Timer(char const*)>
c001ef09:	83 c4 10             	add    esp,0x10
c001ef0c:	ba 08 35 02 c0       	mov    edx,0xc0023508
c001ef11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef15:	89 10                	mov    DWORD PTR [eax],edx
c001ef17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef1b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ef21:	0f b6 d0             	movzx  edx,al
c001ef24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef28:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ef2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef33:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ef39:	0f b6 d0             	movzx  edx,al
c001ef3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef40:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ef45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef49:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ef4f:	8d 50 01             	lea    edx,[eax+0x1]
c001ef52:	88 d1                	mov    cl,dl
c001ef54:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef58:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ef5e:	0f b6 d0             	movzx  edx,al
c001ef61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef65:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ef69:	83 e1 3f             	and    ecx,0x3f
c001ef6c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ef70:	90                   	nop
c001ef71:	83 c4 0c             	add    esp,0xc
c001ef74:	c3                   	ret    
c001ef75:	66 90                	xchg   ax,ax
c001ef77:	66 90                	xchg   ax,ax
c001ef79:	66 90                	xchg   ax,ax
c001ef7b:	66 90                	xchg   ax,ax
c001ef7d:	66 90                	xchg   ax,ax
c001ef7f:	90                   	nop

c001ef80 <avxDetect>:
c001ef80:	b8 01 00 00 00       	mov    eax,0x1
c001ef85:	0f a2                	cpuid  
c001ef87:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001ef8d:	74 15                	je     c001efa4 <avxDetect.noAVX>
c001ef8f:	b8 01 00 00 00       	mov    eax,0x1
c001ef94:	0f a2                	cpuid  
c001ef96:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001ef9c:	74 06                	je     c001efa4 <avxDetect.noAVX>
c001ef9e:	b8 01 00 00 00       	mov    eax,0x1
c001efa3:	c3                   	ret    

c001efa4 <avxDetect.noAVX>:
c001efa4:	b8 00 00 00 00       	mov    eax,0x0
c001efa9:	c3                   	ret    

c001efaa <avxSave>:
c001efaa:	53                   	push   ebx
c001efab:	52                   	push   edx
c001efac:	31 c0                	xor    eax,eax
c001efae:	48                   	dec    eax
c001efaf:	89 c2                	mov    edx,eax
c001efb1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001efb5:	0f ae 23             	xsave  [ebx]
c001efb8:	5a                   	pop    edx
c001efb9:	5b                   	pop    ebx
c001efba:	c3                   	ret    

c001efbb <avxLoad>:
c001efbb:	53                   	push   ebx
c001efbc:	52                   	push   edx
c001efbd:	31 c0                	xor    eax,eax
c001efbf:	48                   	dec    eax
c001efc0:	89 c2                	mov    edx,eax
c001efc2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001efc6:	0f ae 2b             	xrstor [ebx]
c001efc9:	5a                   	pop    edx
c001efca:	5b                   	pop    ebx
c001efcb:	c3                   	ret    

c001efcc <avxInit>:
c001efcc:	e8 67 03 00 00       	call   c001f338 <sseInit>
c001efd1:	50                   	push   eax
c001efd2:	51                   	push   ecx
c001efd3:	0f 20 e0             	mov    eax,cr4
c001efd6:	0d 00 00 04 00       	or     eax,0x40000
c001efdb:	0f 22 e0             	mov    cr4,eax
c001efde:	31 c9                	xor    ecx,ecx
c001efe0:	0f 01 d0             	xgetbv 
c001efe3:	0d 07 00 00 00       	or     eax,0x7
c001efe8:	0f 01 d1             	xsetbv 
c001efeb:	59                   	pop    ecx
c001efec:	58                   	pop    eax
c001efed:	c3                   	ret    

c001efee <avxClose>:
c001efee:	c3                   	ret    

c001efef <wouldSheSayYes>:
c001efef:	c3                   	ret    
c001eff0:	49                   	dec    ecx
c001eff1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001eff5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001eff9:	75 20                	jne    c001f01b <isr0+0xb>
c001effb:	4e                   	dec    esi
c001effc:	79 61                	jns    c001f05f <isr7+0x3>
c001effe:	68 2e 2e 2e 00       	push   0x2e2e2e
c001f003:	66 90                	xchg   ax,ax
c001f005:	66 90                	xchg   ax,ax
c001f007:	66 90                	xchg   ax,ax
c001f009:	66 90                	xchg   ax,ax
c001f00b:	66 90                	xchg   ax,ax
c001f00d:	66 90                	xchg   ax,ax
c001f00f:	90                   	nop

c001f010 <isr0>:
c001f010:	fa                   	cli    
c001f011:	68 00 00 00 00       	push   0x0
c001f016:	68 00 00 00 00       	push   0x0
c001f01b:	e9 56 01 00 00       	jmp    c001f176 <int_common_stub>

c001f020 <isr1>:
c001f020:	fa                   	cli    
c001f021:	6a 00                	push   0x0
c001f023:	6a 01                	push   0x1
c001f025:	e9 4c 01 00 00       	jmp    c001f176 <int_common_stub>

c001f02a <isr2>:
c001f02a:	fa                   	cli    
c001f02b:	6a 00                	push   0x0
c001f02d:	6a 02                	push   0x2
c001f02f:	e9 42 01 00 00       	jmp    c001f176 <int_common_stub>

c001f034 <isr3>:
c001f034:	fa                   	cli    
c001f035:	6a 00                	push   0x0
c001f037:	6a 03                	push   0x3
c001f039:	e9 38 01 00 00       	jmp    c001f176 <int_common_stub>

c001f03e <isr4>:
c001f03e:	fa                   	cli    
c001f03f:	6a 00                	push   0x0
c001f041:	6a 04                	push   0x4
c001f043:	e9 2e 01 00 00       	jmp    c001f176 <int_common_stub>

c001f048 <isr5>:
c001f048:	fa                   	cli    
c001f049:	6a 00                	push   0x0
c001f04b:	6a 05                	push   0x5
c001f04d:	e9 24 01 00 00       	jmp    c001f176 <int_common_stub>

c001f052 <isr6>:
c001f052:	fa                   	cli    
c001f053:	6a 00                	push   0x0
c001f055:	6a 06                	push   0x6
c001f057:	e9 1a 01 00 00       	jmp    c001f176 <int_common_stub>

c001f05c <isr7>:
c001f05c:	fa                   	cli    
c001f05d:	6a 00                	push   0x0
c001f05f:	6a 07                	push   0x7
c001f061:	e9 10 01 00 00       	jmp    c001f176 <int_common_stub>

c001f066 <isr8>:
c001f066:	fa                   	cli    
c001f067:	6a 08                	push   0x8
c001f069:	e9 08 01 00 00       	jmp    c001f176 <int_common_stub>

c001f06e <isr9>:
c001f06e:	fa                   	cli    
c001f06f:	6a 00                	push   0x0
c001f071:	6a 09                	push   0x9
c001f073:	e9 fe 00 00 00       	jmp    c001f176 <int_common_stub>

c001f078 <isr10>:
c001f078:	fa                   	cli    
c001f079:	6a 0a                	push   0xa
c001f07b:	e9 f6 00 00 00       	jmp    c001f176 <int_common_stub>

c001f080 <isr11>:
c001f080:	fa                   	cli    
c001f081:	6a 0b                	push   0xb
c001f083:	e9 ee 00 00 00       	jmp    c001f176 <int_common_stub>

c001f088 <isr12>:
c001f088:	fa                   	cli    
c001f089:	6a 0c                	push   0xc
c001f08b:	e9 e6 00 00 00       	jmp    c001f176 <int_common_stub>

c001f090 <isr13>:
c001f090:	fa                   	cli    
c001f091:	6a 0d                	push   0xd
c001f093:	53                   	push   ebx
c001f094:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f098:	81 fb 66 f2 01 c0    	cmp    ebx,0xc001f266
c001f09e:	5b                   	pop    ebx
c001f09f:	0f 84 c3 01 00 00    	je     c001f268 <finishSignal2>
c001f0a5:	e9 cc 00 00 00       	jmp    c001f176 <int_common_stub>

c001f0aa <isr14>:
c001f0aa:	fa                   	cli    
c001f0ab:	6a 0e                	push   0xe
c001f0ad:	e9 c4 00 00 00       	jmp    c001f176 <int_common_stub>

c001f0b2 <isr15>:
c001f0b2:	fa                   	cli    
c001f0b3:	6a 00                	push   0x0
c001f0b5:	6a 0f                	push   0xf
c001f0b7:	e9 ba 00 00 00       	jmp    c001f176 <int_common_stub>

c001f0bc <isr16>:
c001f0bc:	fa                   	cli    
c001f0bd:	6a 00                	push   0x0
c001f0bf:	6a 10                	push   0x10
c001f0c1:	e9 b0 00 00 00       	jmp    c001f176 <int_common_stub>

c001f0c6 <isr17>:
c001f0c6:	fa                   	cli    
c001f0c7:	6a 00                	push   0x0
c001f0c9:	6a 11                	push   0x11
c001f0cb:	e9 a6 00 00 00       	jmp    c001f176 <int_common_stub>

c001f0d0 <isr18>:
c001f0d0:	fa                   	cli    
c001f0d1:	6a 00                	push   0x0
c001f0d3:	6a 12                	push   0x12
c001f0d5:	e9 9c 00 00 00       	jmp    c001f176 <int_common_stub>

c001f0da <irq3>:
c001f0da:	fa                   	cli    
c001f0db:	6a 00                	push   0x0
c001f0dd:	6a 23                	push   0x23
c001f0df:	e9 92 00 00 00       	jmp    c001f176 <int_common_stub>

c001f0e4 <irq4>:
c001f0e4:	fa                   	cli    
c001f0e5:	6a 00                	push   0x0
c001f0e7:	6a 24                	push   0x24
c001f0e9:	e9 88 00 00 00       	jmp    c001f176 <int_common_stub>

c001f0ee <irq5>:
c001f0ee:	fa                   	cli    
c001f0ef:	6a 00                	push   0x0
c001f0f1:	6a 25                	push   0x25
c001f0f3:	e9 7e 00 00 00       	jmp    c001f176 <int_common_stub>

c001f0f8 <irq6>:
c001f0f8:	fa                   	cli    
c001f0f9:	6a 00                	push   0x0
c001f0fb:	6a 26                	push   0x26
c001f0fd:	e9 74 00 00 00       	jmp    c001f176 <int_common_stub>

c001f102 <irq7>:
c001f102:	fa                   	cli    
c001f103:	6a 00                	push   0x0
c001f105:	6a 27                	push   0x27
c001f107:	e9 6a 00 00 00       	jmp    c001f176 <int_common_stub>

c001f10c <irq8>:
c001f10c:	fa                   	cli    
c001f10d:	6a 00                	push   0x0
c001f10f:	6a 28                	push   0x28
c001f111:	e9 60 00 00 00       	jmp    c001f176 <int_common_stub>

c001f116 <irq9>:
c001f116:	fa                   	cli    
c001f117:	6a 00                	push   0x0
c001f119:	6a 29                	push   0x29
c001f11b:	e9 56 00 00 00       	jmp    c001f176 <int_common_stub>

c001f120 <irq10>:
c001f120:	fa                   	cli    
c001f121:	6a 00                	push   0x0
c001f123:	6a 2a                	push   0x2a
c001f125:	e9 4c 00 00 00       	jmp    c001f176 <int_common_stub>

c001f12a <irq11>:
c001f12a:	fa                   	cli    
c001f12b:	6a 00                	push   0x0
c001f12d:	6a 2b                	push   0x2b
c001f12f:	e9 42 00 00 00       	jmp    c001f176 <int_common_stub>

c001f134 <irq12>:
c001f134:	fa                   	cli    
c001f135:	6a 00                	push   0x0
c001f137:	6a 2c                	push   0x2c
c001f139:	e9 38 00 00 00       	jmp    c001f176 <int_common_stub>

c001f13e <irq13>:
c001f13e:	fa                   	cli    
c001f13f:	6a 00                	push   0x0
c001f141:	6a 2d                	push   0x2d
c001f143:	e9 2e 00 00 00       	jmp    c001f176 <int_common_stub>

c001f148 <irq14>:
c001f148:	fa                   	cli    
c001f149:	6a 00                	push   0x0
c001f14b:	6a 2e                	push   0x2e
c001f14d:	e9 24 00 00 00       	jmp    c001f176 <int_common_stub>

c001f152 <irq15>:
c001f152:	fa                   	cli    
c001f153:	6a 00                	push   0x0
c001f155:	6a 2f                	push   0x2f
c001f157:	e9 1a 00 00 00       	jmp    c001f176 <int_common_stub>

c001f15c <irq1>:
c001f15c:	fa                   	cli    
c001f15d:	6a 00                	push   0x0
c001f15f:	6a 21                	push   0x21
c001f161:	eb 13                	jmp    c001f176 <int_common_stub>

c001f163 <irq2>:
c001f163:	fa                   	cli    
c001f164:	6a 00                	push   0x0
c001f166:	6a 22                	push   0x22
c001f168:	eb 0c                	jmp    c001f176 <int_common_stub>

c001f16a <isr96>:
c001f16a:	6a 00                	push   0x0
c001f16c:	6a 60                	push   0x60
c001f16e:	fb                   	sti    
c001f16f:	eb 37                	jmp    c001f1a8 <syscall_common_stub>

c001f171 <irq0>:
c001f171:	fa                   	cli    
c001f172:	6a 00                	push   0x0
c001f174:	6a 20                	push   0x20

c001f176 <int_common_stub>:
c001f176:	60                   	pusha  
c001f177:	1e                   	push   ds
c001f178:	06                   	push   es
c001f179:	0f a0                	push   fs
c001f17b:	0f a8                	push   gs
c001f17d:	66 b8 10 00          	mov    ax,0x10
c001f181:	66 8e d8             	mov    ds,ax
c001f184:	66 8e c0             	mov    es,ax
c001f187:	66 8e e0             	mov    fs,ax
c001f18a:	66 8e e8             	mov    gs,ax
c001f18d:	54                   	push   esp
c001f18e:	fc                   	cld    
c001f18f:	e8 58 dc fe ff       	call   c000cdec <int_handler>
c001f194:	81 c4 04 00 00 00    	add    esp,0x4
c001f19a:	0f a9                	pop    gs
c001f19c:	0f a1                	pop    fs
c001f19e:	07                   	pop    es
c001f19f:	1f                   	pop    ds
c001f1a0:	61                   	popa   
c001f1a1:	81 c4 08 00 00 00    	add    esp,0x8
c001f1a7:	cf                   	iret   

c001f1a8 <syscall_common_stub>:
c001f1a8:	60                   	pusha  
c001f1a9:	1e                   	push   ds
c001f1aa:	06                   	push   es
c001f1ab:	0f a0                	push   fs
c001f1ad:	0f a8                	push   gs
c001f1af:	66 b8 10 00          	mov    ax,0x10
c001f1b3:	66 8e d8             	mov    ds,ax
c001f1b6:	66 8e c0             	mov    es,ax
c001f1b9:	66 8e e0             	mov    fs,ax
c001f1bc:	66 8e e8             	mov    gs,ax
c001f1bf:	54                   	push   esp
c001f1c0:	fc                   	cld    
c001f1c1:	e8 26 dc fe ff       	call   c000cdec <int_handler>
c001f1c6:	81 c4 04 00 00 00    	add    esp,0x4
c001f1cc:	0f a9                	pop    gs
c001f1ce:	0f a1                	pop    fs
c001f1d0:	07                   	pop    es
c001f1d1:	1f                   	pop    ds
c001f1d2:	e8 40 29 ff ff       	call   c0011b17 <KiCheckSignalZ>
c001f1d7:	3d 00 00 00 00       	cmp    eax,0x0
c001f1dc:	0f 84 c0 00 00 00    	je     c001f2a2 <skipSignals>
c001f1e2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f1e7:	61                   	popa   
c001f1e8:	53                   	push   ebx
c001f1e9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f1ef:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f1f2:	5b                   	pop    ebx
c001f1f3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f1f8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f1fb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f1fe:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f201:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f204:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f207:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f20a:	81 c4 08 00 00 00    	add    esp,0x8
c001f210:	5e                   	pop    esi
c001f211:	5b                   	pop    ebx
c001f212:	59                   	pop    ecx
c001f213:	5a                   	pop    edx
c001f214:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f217:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f21a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f21d:	52                   	push   edx
c001f21e:	51                   	push   ecx
c001f21f:	53                   	push   ebx
c001f220:	56                   	push   esi
c001f221:	81 ec 08 00 00 00    	sub    esp,0x8
c001f227:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f22a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f22d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f230:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f233:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f236:	60                   	pusha  
c001f237:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f23d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f240:	89 e3                	mov    ebx,esp
c001f242:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f245:	52                   	push   edx
c001f246:	68 66 f2 01 c0       	push   0xc001f266
c001f24b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f24e:	89 dc                	mov    esp,ebx
c001f250:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f253:	68 23 00 00 00       	push   0x23
c001f258:	51                   	push   ecx
c001f259:	68 02 02 00 00       	push   0x202
c001f25e:	68 1b 00 00 00       	push   0x1b
c001f263:	ff 36                	push   DWORD PTR [esi]
c001f265:	cf                   	iret   

c001f266 <finishSignal>:
c001f266:	cd 0f                	int    0xf

c001f268 <finishSignal2>:
c001f268:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f26e:	e8 21 29 ff ff       	call   c0011b94 <KiFinishSignalZ>
c001f273:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f279:	68 23 00 00 00       	push   0x23
c001f27e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f281:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f284:	68 1b 00 00 00       	push   0x1b
c001f289:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f28c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f28f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f292:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f295:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f298:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f29b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f29e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f2a1:	cf                   	iret   

c001f2a2 <skipSignals>:
c001f2a2:	61                   	popa   
c001f2a3:	81 c4 08 00 00 00    	add    esp,0x8
c001f2a9:	cf                   	iret   
c001f2aa:	90                   	nop
c001f2ab:	90                   	nop

c001f2ac <irq16>:
c001f2ac:	fa                   	cli    
c001f2ad:	6a 00                	push   0x0
c001f2af:	6a 30                	push   0x30
c001f2b1:	e9 c0 fe ff ff       	jmp    c001f176 <int_common_stub>

c001f2b6 <irq17>:
c001f2b6:	fa                   	cli    
c001f2b7:	6a 00                	push   0x0
c001f2b9:	6a 31                	push   0x31
c001f2bb:	e9 b6 fe ff ff       	jmp    c001f176 <int_common_stub>

c001f2c0 <irq18>:
c001f2c0:	fa                   	cli    
c001f2c1:	6a 00                	push   0x0
c001f2c3:	6a 32                	push   0x32
c001f2c5:	e9 ac fe ff ff       	jmp    c001f176 <int_common_stub>

c001f2ca <irq19>:
c001f2ca:	fa                   	cli    
c001f2cb:	6a 00                	push   0x0
c001f2cd:	6a 33                	push   0x33
c001f2cf:	e9 a2 fe ff ff       	jmp    c001f176 <int_common_stub>

c001f2d4 <irq20>:
c001f2d4:	fa                   	cli    
c001f2d5:	6a 00                	push   0x0
c001f2d7:	6a 34                	push   0x34
c001f2d9:	e9 98 fe ff ff       	jmp    c001f176 <int_common_stub>

c001f2de <irq21>:
c001f2de:	fa                   	cli    
c001f2df:	6a 00                	push   0x0
c001f2e1:	6a 35                	push   0x35
c001f2e3:	e9 8e fe ff ff       	jmp    c001f176 <int_common_stub>

c001f2e8 <irq22>:
c001f2e8:	fa                   	cli    
c001f2e9:	6a 00                	push   0x0
c001f2eb:	6a 36                	push   0x36
c001f2ed:	e9 84 fe ff ff       	jmp    c001f176 <int_common_stub>

c001f2f2 <irq23>:
c001f2f2:	fa                   	cli    
c001f2f3:	6a 00                	push   0x0
c001f2f5:	6a 37                	push   0x37
c001f2f7:	e9 7a fe ff ff       	jmp    c001f176 <int_common_stub>
c001f2fc:	66 90                	xchg   ax,ax
c001f2fe:	66 90                	xchg   ax,ax

c001f300 <i386GetRDRAND>:
c001f300:	b9 64 00 00 00       	mov    ecx,0x64

c001f305 <retry>:
c001f305:	0f c7 f0             	rdrand eax
c001f308:	72 05                	jb     c001f30f <retry.done>
c001f30a:	e2 f9                	loop   c001f305 <retry>

c001f30c <retry.fail>:
c001f30c:	31 c0                	xor    eax,eax
c001f30e:	c3                   	ret    

c001f30f <retry.done>:
c001f30f:	c3                   	ret    

c001f310 <absolutelyNoChanceInHell>:
c001f310:	b8 01 00 00 00       	mov    eax,0x1
c001f315:	0f a2                	cpuid  
c001f317:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f31d:	74 06                	je     c001f325 <sseDetect.noSSE>
c001f31f:	b8 01 00 00 00       	mov    eax,0x1
c001f324:	c3                   	ret    

c001f325 <sseDetect.noSSE>:
c001f325:	31 c0                	xor    eax,eax
c001f327:	c3                   	ret    

c001f328 <sseSave>:
c001f328:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f32c:	0f ae 00             	fxsave [eax]
c001f32f:	c3                   	ret    

c001f330 <sseLoad>:
c001f330:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f334:	0f ae 08             	fxrstor [eax]
c001f337:	c3                   	ret    

c001f338 <sseInit>:
c001f338:	e8 42 00 00 00       	call   c001f37f <x87Init>
c001f33d:	0f 20 e0             	mov    eax,cr4
c001f340:	66 0d 00 06          	or     ax,0x600
c001f344:	0f 22 e0             	mov    cr4,eax
c001f347:	c3                   	ret    

c001f348 <sseClose>:
c001f348:	c3                   	ret    
c001f349:	66 90                	xchg   ax,ax
c001f34b:	66 90                	xchg   ax,ax
c001f34d:	66 90                	xchg   ax,ax
c001f34f:	90                   	nop

c001f350 <value_37F>:
c001f350:	7f 03                	jg     c001f355 <value_37A+0x1>

c001f352 <value_37E>:
c001f352:	7e 03                	jle    c001f357 <x87Detect+0x1>

c001f354 <value_37A>:
c001f354:	7a 03                	jp     c001f359 <x87Detect+0x3>

c001f356 <x87Detect>:
c001f356:	b8 01 00 00 00       	mov    eax,0x1
c001f35b:	0f a2                	cpuid  
c001f35d:	f7 c2 01 00 00 00    	test   edx,0x1
c001f363:	74 06                	je     c001f36b <x87Detect.nox87>
c001f365:	b8 01 00 00 00       	mov    eax,0x1
c001f36a:	c3                   	ret    

c001f36b <x87Detect.nox87>:
c001f36b:	b8 00 00 00 00       	mov    eax,0x0
c001f370:	c3                   	ret    

c001f371 <x87Save>:
c001f371:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f375:	dd 30                	fnsave [eax]
c001f377:	c3                   	ret    

c001f378 <x87Load>:
c001f378:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f37c:	dd 20                	frstor [eax]
c001f37e:	c3                   	ret    

c001f37f <x87Init>:
c001f37f:	0f 20 c0             	mov    eax,cr0
c001f382:	66 25 fb ff          	and    ax,0xfffb
c001f386:	66 0d 22 00          	or     ax,0x22
c001f38a:	0f 22 c0             	mov    cr0,eax
c001f38d:	db e3                	fninit 
c001f38f:	0f 06                	clts   
c001f391:	d9 2d 54 f3 01 c0    	fldcw  WORD PTR ds:0xc001f354
c001f397:	c3                   	ret    

c001f398 <x87Close>:
c001f398:	c3                   	ret    
c001f399:	66 90                	xchg   ax,ax
c001f39b:	90                   	nop

c001f39c <__do_global_ctors_aux>:
c001f39c:	a1 50 03 02 c0       	mov    eax,ds:0xc0020350
c001f3a1:	83 f8 ff             	cmp    eax,0xffffffff
c001f3a4:	74 1a                	je     c001f3c0 <__do_global_ctors_aux+0x24>
c001f3a6:	55                   	push   ebp
c001f3a7:	89 e5                	mov    ebp,esp
c001f3a9:	53                   	push   ebx
c001f3aa:	52                   	push   edx
c001f3ab:	bb 50 03 02 c0       	mov    ebx,0xc0020350
c001f3b0:	ff d0                	call   eax
c001f3b2:	83 eb 04             	sub    ebx,0x4
c001f3b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f3b7:	83 f8 ff             	cmp    eax,0xffffffff
c001f3ba:	75 f4                	jne    c001f3b0 <__do_global_ctors_aux+0x14>
c001f3bc:	58                   	pop    eax
c001f3bd:	5b                   	pop    ebx
c001f3be:	5d                   	pop    ebp
c001f3bf:	c3                   	ret    
c001f3c0:	c3                   	ret    
c001f3c1:	66 90                	xchg   ax,ax
c001f3c3:	90                   	nop

c001f3c4 <__divdi3>:
c001f3c4:	55                   	push   ebp
c001f3c5:	57                   	push   edi
c001f3c6:	56                   	push   esi
c001f3c7:	53                   	push   ebx
c001f3c8:	83 ec 1c             	sub    esp,0x1c
c001f3cb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f3cf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f3d3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f3d6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f3da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f3de:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f3e2:	85 db                	test   ebx,ebx
c001f3e4:	0f 88 8e 00 00 00    	js     c001f478 <__divdi3+0xb4>
c001f3ea:	89 dd                	mov    ebp,ebx
c001f3ec:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f3f4:	89 d3                	mov    ebx,edx
c001f3f6:	85 d2                	test   edx,edx
c001f3f8:	79 0d                	jns    c001f407 <__divdi3+0x43>
c001f3fa:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f3fe:	f7 d8                	neg    eax
c001f400:	83 d2 00             	adc    edx,0x0
c001f403:	f7 da                	neg    edx
c001f405:	89 d3                	mov    ebx,edx
c001f407:	89 c7                	mov    edi,eax
c001f409:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f40c:	85 db                	test   ebx,ebx
c001f40e:	75 48                	jne    c001f458 <__divdi3+0x94>
c001f410:	39 ef                	cmp    edi,ebp
c001f412:	76 24                	jbe    c001f438 <__divdi3+0x74>
c001f414:	89 ea                	mov    edx,ebp
c001f416:	f7 f7                	div    edi
c001f418:	89 c1                	mov    ecx,eax
c001f41a:	31 f6                	xor    esi,esi
c001f41c:	89 c8                	mov    eax,ecx
c001f41e:	89 f2                	mov    edx,esi
c001f420:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f424:	85 c9                	test   ecx,ecx
c001f426:	74 07                	je     c001f42f <__divdi3+0x6b>
c001f428:	f7 d8                	neg    eax
c001f42a:	83 d2 00             	adc    edx,0x0
c001f42d:	f7 da                	neg    edx
c001f42f:	83 c4 1c             	add    esp,0x1c
c001f432:	5b                   	pop    ebx
c001f433:	5e                   	pop    esi
c001f434:	5f                   	pop    edi
c001f435:	5d                   	pop    ebp
c001f436:	c3                   	ret    
c001f437:	90                   	nop
c001f438:	85 ff                	test   edi,edi
c001f43a:	75 0b                	jne    c001f447 <__divdi3+0x83>
c001f43c:	b8 01 00 00 00       	mov    eax,0x1
c001f441:	31 d2                	xor    edx,edx
c001f443:	f7 f3                	div    ebx
c001f445:	89 c7                	mov    edi,eax
c001f447:	31 d2                	xor    edx,edx
c001f449:	89 e8                	mov    eax,ebp
c001f44b:	f7 f7                	div    edi
c001f44d:	89 c6                	mov    esi,eax
c001f44f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f452:	f7 f7                	div    edi
c001f454:	89 c1                	mov    ecx,eax
c001f456:	eb c4                	jmp    c001f41c <__divdi3+0x58>
c001f458:	39 eb                	cmp    ebx,ebp
c001f45a:	77 3c                	ja     c001f498 <__divdi3+0xd4>
c001f45c:	0f bd f3             	bsr    esi,ebx
c001f45f:	83 f6 1f             	xor    esi,0x1f
c001f462:	75 40                	jne    c001f4a4 <__divdi3+0xe0>
c001f464:	39 eb                	cmp    ebx,ebp
c001f466:	72 09                	jb     c001f471 <__divdi3+0xad>
c001f468:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f46b:	0f 87 97 00 00 00    	ja     c001f508 <__divdi3+0x144>
c001f471:	b9 01 00 00 00       	mov    ecx,0x1
c001f476:	eb a4                	jmp    c001f41c <__divdi3+0x58>
c001f478:	f7 d9                	neg    ecx
c001f47a:	83 d3 00             	adc    ebx,0x0
c001f47d:	f7 db                	neg    ebx
c001f47f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f482:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f486:	89 dd                	mov    ebp,ebx
c001f488:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f490:	e9 5f ff ff ff       	jmp    c001f3f4 <__divdi3+0x30>
c001f495:	8d 76 00             	lea    esi,[esi+0x0]
c001f498:	31 f6                	xor    esi,esi
c001f49a:	31 c9                	xor    ecx,ecx
c001f49c:	e9 7b ff ff ff       	jmp    c001f41c <__divdi3+0x58>
c001f4a1:	8d 76 00             	lea    esi,[esi+0x0]
c001f4a4:	b8 20 00 00 00       	mov    eax,0x20
c001f4a9:	29 f0                	sub    eax,esi
c001f4ab:	89 f1                	mov    ecx,esi
c001f4ad:	d3 e3                	shl    ebx,cl
c001f4af:	89 fa                	mov    edx,edi
c001f4b1:	88 c1                	mov    cl,al
c001f4b3:	d3 ea                	shr    edx,cl
c001f4b5:	09 da                	or     edx,ebx
c001f4b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f4bb:	89 f1                	mov    ecx,esi
c001f4bd:	d3 e7                	shl    edi,cl
c001f4bf:	89 eb                	mov    ebx,ebp
c001f4c1:	88 c1                	mov    cl,al
c001f4c3:	d3 eb                	shr    ebx,cl
c001f4c5:	89 f1                	mov    ecx,esi
c001f4c7:	d3 e5                	shl    ebp,cl
c001f4c9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f4cc:	88 c1                	mov    cl,al
c001f4ce:	d3 ea                	shr    edx,cl
c001f4d0:	09 d5                	or     ebp,edx
c001f4d2:	89 e8                	mov    eax,ebp
c001f4d4:	89 da                	mov    edx,ebx
c001f4d6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f4da:	89 d3                	mov    ebx,edx
c001f4dc:	89 c5                	mov    ebp,eax
c001f4de:	f7 e7                	mul    edi
c001f4e0:	39 d3                	cmp    ebx,edx
c001f4e2:	72 18                	jb     c001f4fc <__divdi3+0x138>
c001f4e4:	74 0a                	je     c001f4f0 <__divdi3+0x12c>
c001f4e6:	89 e9                	mov    ecx,ebp
c001f4e8:	31 f6                	xor    esi,esi
c001f4ea:	e9 2d ff ff ff       	jmp    c001f41c <__divdi3+0x58>
c001f4ef:	90                   	nop
c001f4f0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f4f3:	89 f1                	mov    ecx,esi
c001f4f5:	d3 e7                	shl    edi,cl
c001f4f7:	39 c7                	cmp    edi,eax
c001f4f9:	73 eb                	jae    c001f4e6 <__divdi3+0x122>
c001f4fb:	90                   	nop
c001f4fc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f4ff:	31 f6                	xor    esi,esi
c001f501:	e9 16 ff ff ff       	jmp    c001f41c <__divdi3+0x58>
c001f506:	66 90                	xchg   ax,ax
c001f508:	31 c9                	xor    ecx,ecx
c001f50a:	e9 0d ff ff ff       	jmp    c001f41c <__divdi3+0x58>
c001f50f:	90                   	nop

c001f510 <__moddi3>:
c001f510:	55                   	push   ebp
c001f511:	57                   	push   edi
c001f512:	56                   	push   esi
c001f513:	53                   	push   ebx
c001f514:	83 ec 2c             	sub    esp,0x2c
c001f517:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f51b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f51f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f523:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f527:	85 db                	test   ebx,ebx
c001f529:	0f 88 85 00 00 00    	js     c001f5b4 <__moddi3+0xa4>
c001f52f:	89 de                	mov    esi,ebx
c001f531:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f539:	89 d7                	mov    edi,edx
c001f53b:	85 d2                	test   edx,edx
c001f53d:	79 09                	jns    c001f548 <__moddi3+0x38>
c001f53f:	f7 d8                	neg    eax
c001f541:	83 d2 00             	adc    edx,0x0
c001f544:	f7 da                	neg    edx
c001f546:	89 d7                	mov    edi,edx
c001f548:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f54c:	89 cd                	mov    ebp,ecx
c001f54e:	85 ff                	test   edi,edi
c001f550:	75 52                	jne    c001f5a4 <__moddi3+0x94>
c001f552:	89 c3                	mov    ebx,eax
c001f554:	39 f0                	cmp    eax,esi
c001f556:	76 24                	jbe    c001f57c <__moddi3+0x6c>
c001f558:	89 c8                	mov    eax,ecx
c001f55a:	89 f2                	mov    edx,esi
c001f55c:	f7 f3                	div    ebx
c001f55e:	89 d6                	mov    esi,edx
c001f560:	89 f0                	mov    eax,esi
c001f562:	31 d2                	xor    edx,edx
c001f564:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f568:	85 c9                	test   ecx,ecx
c001f56a:	74 07                	je     c001f573 <__moddi3+0x63>
c001f56c:	f7 d8                	neg    eax
c001f56e:	83 d2 00             	adc    edx,0x0
c001f571:	f7 da                	neg    edx
c001f573:	83 c4 2c             	add    esp,0x2c
c001f576:	5b                   	pop    ebx
c001f577:	5e                   	pop    esi
c001f578:	5f                   	pop    edi
c001f579:	5d                   	pop    ebp
c001f57a:	c3                   	ret    
c001f57b:	90                   	nop
c001f57c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f580:	85 db                	test   ebx,ebx
c001f582:	75 0d                	jne    c001f591 <__moddi3+0x81>
c001f584:	b8 01 00 00 00       	mov    eax,0x1
c001f589:	31 d2                	xor    edx,edx
c001f58b:	f7 f7                	div    edi
c001f58d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f591:	89 f0                	mov    eax,esi
c001f593:	31 d2                	xor    edx,edx
c001f595:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f599:	f7 f7                	div    edi
c001f59b:	89 e8                	mov    eax,ebp
c001f59d:	f7 f7                	div    edi
c001f59f:	89 d6                	mov    esi,edx
c001f5a1:	eb bd                	jmp    c001f560 <__moddi3+0x50>
c001f5a3:	90                   	nop
c001f5a4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f5a8:	39 f7                	cmp    edi,esi
c001f5aa:	76 20                	jbe    c001f5cc <__moddi3+0xbc>
c001f5ac:	89 c8                	mov    eax,ecx
c001f5ae:	89 f2                	mov    edx,esi
c001f5b0:	eb b2                	jmp    c001f564 <__moddi3+0x54>
c001f5b2:	66 90                	xchg   ax,ax
c001f5b4:	f7 d9                	neg    ecx
c001f5b6:	83 d3 00             	adc    ebx,0x0
c001f5b9:	f7 db                	neg    ebx
c001f5bb:	89 de                	mov    esi,ebx
c001f5bd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f5c5:	e9 6f ff ff ff       	jmp    c001f539 <__moddi3+0x29>
c001f5ca:	66 90                	xchg   ax,ax
c001f5cc:	0f bd c7             	bsr    eax,edi
c001f5cf:	83 f0 1f             	xor    eax,0x1f
c001f5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f5d6:	75 24                	jne    c001f5fc <__moddi3+0xec>
c001f5d8:	39 f7                	cmp    edi,esi
c001f5da:	72 06                	jb     c001f5e2 <__moddi3+0xd2>
c001f5dc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f5e0:	77 0c                	ja     c001f5ee <__moddi3+0xde>
c001f5e2:	89 e9                	mov    ecx,ebp
c001f5e4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f5e8:	19 fe                	sbb    esi,edi
c001f5ea:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f5ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f5f2:	89 f2                	mov    edx,esi
c001f5f4:	e9 6b ff ff ff       	jmp    c001f564 <__moddi3+0x54>
c001f5f9:	8d 76 00             	lea    esi,[esi+0x0]
c001f5fc:	b8 20 00 00 00       	mov    eax,0x20
c001f601:	89 c2                	mov    edx,eax
c001f603:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f607:	29 da                	sub    edx,ebx
c001f609:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f60d:	88 d9                	mov    cl,bl
c001f60f:	d3 e7                	shl    edi,cl
c001f611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f615:	88 d1                	mov    cl,dl
c001f617:	d3 e8                	shr    eax,cl
c001f619:	09 c7                	or     edi,eax
c001f61b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f61f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f623:	89 d8                	mov    eax,ebx
c001f625:	88 d9                	mov    cl,bl
c001f627:	d3 e7                	shl    edi,cl
c001f629:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f62d:	89 f3                	mov    ebx,esi
c001f62f:	88 d1                	mov    cl,dl
c001f631:	d3 eb                	shr    ebx,cl
c001f633:	89 c7                	mov    edi,eax
c001f635:	88 c1                	mov    cl,al
c001f637:	d3 e6                	shl    esi,cl
c001f639:	89 e8                	mov    eax,ebp
c001f63b:	88 d1                	mov    cl,dl
c001f63d:	d3 e8                	shr    eax,cl
c001f63f:	09 f0                	or     eax,esi
c001f641:	89 f9                	mov    ecx,edi
c001f643:	d3 e5                	shl    ebp,cl
c001f645:	89 da                	mov    edx,ebx
c001f647:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f64b:	89 d3                	mov    ebx,edx
c001f64d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f651:	89 c6                	mov    esi,eax
c001f653:	89 d1                	mov    ecx,edx
c001f655:	39 d3                	cmp    ebx,edx
c001f657:	72 27                	jb     c001f680 <__moddi3+0x170>
c001f659:	74 21                	je     c001f67c <__moddi3+0x16c>
c001f65b:	29 f5                	sub    ebp,esi
c001f65d:	19 cb                	sbb    ebx,ecx
c001f65f:	89 de                	mov    esi,ebx
c001f661:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f665:	d3 e6                	shl    esi,cl
c001f667:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f66b:	89 f9                	mov    ecx,edi
c001f66d:	d3 ed                	shr    ebp,cl
c001f66f:	09 ee                	or     esi,ebp
c001f671:	89 f0                	mov    eax,esi
c001f673:	d3 eb                	shr    ebx,cl
c001f675:	89 da                	mov    edx,ebx
c001f677:	e9 e8 fe ff ff       	jmp    c001f564 <__moddi3+0x54>
c001f67c:	39 c5                	cmp    ebp,eax
c001f67e:	73 db                	jae    c001f65b <__moddi3+0x14b>
c001f680:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f684:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f688:	89 d1                	mov    ecx,edx
c001f68a:	89 c6                	mov    esi,eax
c001f68c:	eb cd                	jmp    c001f65b <__moddi3+0x14b>
c001f68e:	66 90                	xchg   ax,ax

c001f690 <__udivdi3>:
c001f690:	55                   	push   ebp
c001f691:	57                   	push   edi
c001f692:	56                   	push   esi
c001f693:	53                   	push   ebx
c001f694:	83 ec 1c             	sub    esp,0x1c
c001f697:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f69b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f69f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f6a3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f6a7:	85 d2                	test   edx,edx
c001f6a9:	75 41                	jne    c001f6ec <__udivdi3+0x5c>
c001f6ab:	39 f7                	cmp    edi,esi
c001f6ad:	76 15                	jbe    c001f6c4 <__udivdi3+0x34>
c001f6af:	89 e8                	mov    eax,ebp
c001f6b1:	89 f2                	mov    edx,esi
c001f6b3:	f7 f7                	div    edi
c001f6b5:	31 db                	xor    ebx,ebx
c001f6b7:	89 da                	mov    edx,ebx
c001f6b9:	83 c4 1c             	add    esp,0x1c
c001f6bc:	5b                   	pop    ebx
c001f6bd:	5e                   	pop    esi
c001f6be:	5f                   	pop    edi
c001f6bf:	5d                   	pop    ebp
c001f6c0:	c3                   	ret    
c001f6c1:	8d 76 00             	lea    esi,[esi+0x0]
c001f6c4:	89 f9                	mov    ecx,edi
c001f6c6:	85 ff                	test   edi,edi
c001f6c8:	75 0b                	jne    c001f6d5 <__udivdi3+0x45>
c001f6ca:	b8 01 00 00 00       	mov    eax,0x1
c001f6cf:	31 d2                	xor    edx,edx
c001f6d1:	f7 f7                	div    edi
c001f6d3:	89 c1                	mov    ecx,eax
c001f6d5:	31 d2                	xor    edx,edx
c001f6d7:	89 f0                	mov    eax,esi
c001f6d9:	f7 f1                	div    ecx
c001f6db:	89 c3                	mov    ebx,eax
c001f6dd:	89 e8                	mov    eax,ebp
c001f6df:	f7 f1                	div    ecx
c001f6e1:	89 da                	mov    edx,ebx
c001f6e3:	83 c4 1c             	add    esp,0x1c
c001f6e6:	5b                   	pop    ebx
c001f6e7:	5e                   	pop    esi
c001f6e8:	5f                   	pop    edi
c001f6e9:	5d                   	pop    ebp
c001f6ea:	c3                   	ret    
c001f6eb:	90                   	nop
c001f6ec:	39 f2                	cmp    edx,esi
c001f6ee:	77 1c                	ja     c001f70c <__udivdi3+0x7c>
c001f6f0:	0f bd da             	bsr    ebx,edx
c001f6f3:	83 f3 1f             	xor    ebx,0x1f
c001f6f6:	75 24                	jne    c001f71c <__udivdi3+0x8c>
c001f6f8:	39 f2                	cmp    edx,esi
c001f6fa:	72 08                	jb     c001f704 <__udivdi3+0x74>
c001f6fc:	39 ef                	cmp    edi,ebp
c001f6fe:	0f 87 84 00 00 00    	ja     c001f788 <__udivdi3+0xf8>
c001f704:	b8 01 00 00 00       	mov    eax,0x1
c001f709:	eb ac                	jmp    c001f6b7 <__udivdi3+0x27>
c001f70b:	90                   	nop
c001f70c:	31 db                	xor    ebx,ebx
c001f70e:	31 c0                	xor    eax,eax
c001f710:	89 da                	mov    edx,ebx
c001f712:	83 c4 1c             	add    esp,0x1c
c001f715:	5b                   	pop    ebx
c001f716:	5e                   	pop    esi
c001f717:	5f                   	pop    edi
c001f718:	5d                   	pop    ebp
c001f719:	c3                   	ret    
c001f71a:	66 90                	xchg   ax,ax
c001f71c:	b8 20 00 00 00       	mov    eax,0x20
c001f721:	29 d8                	sub    eax,ebx
c001f723:	88 d9                	mov    cl,bl
c001f725:	d3 e2                	shl    edx,cl
c001f727:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f72b:	89 fa                	mov    edx,edi
c001f72d:	88 c1                	mov    cl,al
c001f72f:	d3 ea                	shr    edx,cl
c001f731:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f735:	09 d1                	or     ecx,edx
c001f737:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f73b:	88 d9                	mov    cl,bl
c001f73d:	d3 e7                	shl    edi,cl
c001f73f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f743:	89 f7                	mov    edi,esi
c001f745:	88 c1                	mov    cl,al
c001f747:	d3 ef                	shr    edi,cl
c001f749:	88 d9                	mov    cl,bl
c001f74b:	d3 e6                	shl    esi,cl
c001f74d:	89 ea                	mov    edx,ebp
c001f74f:	88 c1                	mov    cl,al
c001f751:	d3 ea                	shr    edx,cl
c001f753:	09 d6                	or     esi,edx
c001f755:	89 f0                	mov    eax,esi
c001f757:	89 fa                	mov    edx,edi
c001f759:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f75d:	89 d7                	mov    edi,edx
c001f75f:	89 c6                	mov    esi,eax
c001f761:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f765:	39 d7                	cmp    edi,edx
c001f767:	72 13                	jb     c001f77c <__udivdi3+0xec>
c001f769:	74 09                	je     c001f774 <__udivdi3+0xe4>
c001f76b:	89 f0                	mov    eax,esi
c001f76d:	31 db                	xor    ebx,ebx
c001f76f:	e9 43 ff ff ff       	jmp    c001f6b7 <__udivdi3+0x27>
c001f774:	88 d9                	mov    cl,bl
c001f776:	d3 e5                	shl    ebp,cl
c001f778:	39 c5                	cmp    ebp,eax
c001f77a:	73 ef                	jae    c001f76b <__udivdi3+0xdb>
c001f77c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f77f:	31 db                	xor    ebx,ebx
c001f781:	e9 31 ff ff ff       	jmp    c001f6b7 <__udivdi3+0x27>
c001f786:	66 90                	xchg   ax,ax
c001f788:	31 c0                	xor    eax,eax
c001f78a:	e9 28 ff ff ff       	jmp    c001f6b7 <__udivdi3+0x27>
c001f78f:	90                   	nop

c001f790 <__umoddi3>:
c001f790:	55                   	push   ebp
c001f791:	57                   	push   edi
c001f792:	56                   	push   esi
c001f793:	53                   	push   ebx
c001f794:	83 ec 1c             	sub    esp,0x1c
c001f797:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f79b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f79f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f7a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f7a7:	89 da                	mov    edx,ebx
c001f7a9:	85 c0                	test   eax,eax
c001f7ab:	75 37                	jne    c001f7e4 <__umoddi3+0x54>
c001f7ad:	39 df                	cmp    edi,ebx
c001f7af:	76 13                	jbe    c001f7c4 <__umoddi3+0x34>
c001f7b1:	89 f0                	mov    eax,esi
c001f7b3:	f7 f7                	div    edi
c001f7b5:	89 d0                	mov    eax,edx
c001f7b7:	31 d2                	xor    edx,edx
c001f7b9:	83 c4 1c             	add    esp,0x1c
c001f7bc:	5b                   	pop    ebx
c001f7bd:	5e                   	pop    esi
c001f7be:	5f                   	pop    edi
c001f7bf:	5d                   	pop    ebp
c001f7c0:	c3                   	ret    
c001f7c1:	8d 76 00             	lea    esi,[esi+0x0]
c001f7c4:	89 fd                	mov    ebp,edi
c001f7c6:	85 ff                	test   edi,edi
c001f7c8:	75 0b                	jne    c001f7d5 <__umoddi3+0x45>
c001f7ca:	b8 01 00 00 00       	mov    eax,0x1
c001f7cf:	31 d2                	xor    edx,edx
c001f7d1:	f7 f7                	div    edi
c001f7d3:	89 c5                	mov    ebp,eax
c001f7d5:	89 d8                	mov    eax,ebx
c001f7d7:	31 d2                	xor    edx,edx
c001f7d9:	f7 f5                	div    ebp
c001f7db:	89 f0                	mov    eax,esi
c001f7dd:	f7 f5                	div    ebp
c001f7df:	89 d0                	mov    eax,edx
c001f7e1:	eb d4                	jmp    c001f7b7 <__umoddi3+0x27>
c001f7e3:	90                   	nop
c001f7e4:	89 f1                	mov    ecx,esi
c001f7e6:	39 d8                	cmp    eax,ebx
c001f7e8:	76 0a                	jbe    c001f7f4 <__umoddi3+0x64>
c001f7ea:	89 f0                	mov    eax,esi
c001f7ec:	83 c4 1c             	add    esp,0x1c
c001f7ef:	5b                   	pop    ebx
c001f7f0:	5e                   	pop    esi
c001f7f1:	5f                   	pop    edi
c001f7f2:	5d                   	pop    ebp
c001f7f3:	c3                   	ret    
c001f7f4:	0f bd e8             	bsr    ebp,eax
c001f7f7:	83 f5 1f             	xor    ebp,0x1f
c001f7fa:	75 1c                	jne    c001f818 <__umoddi3+0x88>
c001f7fc:	39 d8                	cmp    eax,ebx
c001f7fe:	72 04                	jb     c001f804 <__umoddi3+0x74>
c001f800:	39 f7                	cmp    edi,esi
c001f802:	77 08                	ja     c001f80c <__umoddi3+0x7c>
c001f804:	89 da                	mov    edx,ebx
c001f806:	29 fe                	sub    esi,edi
c001f808:	19 c2                	sbb    edx,eax
c001f80a:	89 f1                	mov    ecx,esi
c001f80c:	89 c8                	mov    eax,ecx
c001f80e:	83 c4 1c             	add    esp,0x1c
c001f811:	5b                   	pop    ebx
c001f812:	5e                   	pop    esi
c001f813:	5f                   	pop    edi
c001f814:	5d                   	pop    ebp
c001f815:	c3                   	ret    
c001f816:	66 90                	xchg   ax,ax
c001f818:	ba 20 00 00 00       	mov    edx,0x20
c001f81d:	29 ea                	sub    edx,ebp
c001f81f:	89 e9                	mov    ecx,ebp
c001f821:	d3 e0                	shl    eax,cl
c001f823:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f827:	89 f8                	mov    eax,edi
c001f829:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f82d:	88 d1                	mov    cl,dl
c001f82f:	d3 e8                	shr    eax,cl
c001f831:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f835:	09 c1                	or     ecx,eax
c001f837:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f83b:	89 e9                	mov    ecx,ebp
c001f83d:	d3 e7                	shl    edi,cl
c001f83f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f843:	89 d8                	mov    eax,ebx
c001f845:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f849:	88 d1                	mov    cl,dl
c001f84b:	d3 e8                	shr    eax,cl
c001f84d:	89 c7                	mov    edi,eax
c001f84f:	89 e9                	mov    ecx,ebp
c001f851:	d3 e3                	shl    ebx,cl
c001f853:	89 f0                	mov    eax,esi
c001f855:	88 d1                	mov    cl,dl
c001f857:	d3 e8                	shr    eax,cl
c001f859:	09 d8                	or     eax,ebx
c001f85b:	89 e9                	mov    ecx,ebp
c001f85d:	d3 e6                	shl    esi,cl
c001f85f:	89 f3                	mov    ebx,esi
c001f861:	89 fa                	mov    edx,edi
c001f863:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f867:	89 d1                	mov    ecx,edx
c001f869:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f86d:	89 c6                	mov    esi,eax
c001f86f:	89 d7                	mov    edi,edx
c001f871:	39 d1                	cmp    ecx,edx
c001f873:	72 27                	jb     c001f89c <__umoddi3+0x10c>
c001f875:	74 21                	je     c001f898 <__umoddi3+0x108>
c001f877:	89 ca                	mov    edx,ecx
c001f879:	29 f3                	sub    ebx,esi
c001f87b:	19 fa                	sbb    edx,edi
c001f87d:	89 d0                	mov    eax,edx
c001f87f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f883:	d3 e0                	shl    eax,cl
c001f885:	89 e9                	mov    ecx,ebp
c001f887:	d3 eb                	shr    ebx,cl
c001f889:	09 d8                	or     eax,ebx
c001f88b:	d3 ea                	shr    edx,cl
c001f88d:	83 c4 1c             	add    esp,0x1c
c001f890:	5b                   	pop    ebx
c001f891:	5e                   	pop    esi
c001f892:	5f                   	pop    edi
c001f893:	5d                   	pop    ebp
c001f894:	c3                   	ret    
c001f895:	8d 76 00             	lea    esi,[esi+0x0]
c001f898:	39 c3                	cmp    ebx,eax
c001f89a:	73 db                	jae    c001f877 <__umoddi3+0xe7>
c001f89c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f8a0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f8a4:	89 d7                	mov    edi,edx
c001f8a6:	89 c6                	mov    esi,eax
c001f8a8:	eb cd                	jmp    c001f877 <__umoddi3+0xe7>

Disassembly of section .init:

c001f8aa <_init>:
c001f8aa:	55                   	push   ebp
c001f8ab:	89 e5                	mov    ebp,esp
c001f8ad:	e8 42 08 fe ff       	call   c00000f4 <frame_dummy>
c001f8b2:	e8 e5 fa ff ff       	call   c001f39c <__do_global_ctors_aux>
c001f8b7:	5d                   	pop    ebp
c001f8b8:	c3                   	ret    

Disassembly of section .fini:

c001f8b9 <_fini>:
c001f8b9:	55                   	push   ebp
c001f8ba:	89 e5                	mov    ebp,esp
c001f8bc:	e8 c3 07 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f8c1:	5d                   	pop    ebp
c001f8c2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f8c4 <Computer::~Computer()>:
c001f8c4:	83 ec 0c             	sub    esp,0xc
c001f8c7:	ba d4 0b 02 c0       	mov    edx,0xc0020bd4
c001f8cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8d0:	89 10                	mov    DWORD PTR [eax],edx
c001f8d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8d6:	83 ec 0c             	sub    esp,0xc
c001f8d9:	50                   	push   eax
c001f8da:	e8 63 cf fe ff       	call   c000c842 <Device::~Device()>
c001f8df:	83 c4 10             	add    esp,0x10
c001f8e2:	90                   	nop
c001f8e3:	83 c4 0c             	add    esp,0xc
c001f8e6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f8e8 <Computer::~Computer()>:
c001f8e8:	83 ec 0c             	sub    esp,0xc
c001f8eb:	83 ec 0c             	sub    esp,0xc
c001f8ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8f2:	e8 cd ff ff ff       	call   c001f8c4 <Computer::~Computer()>
c001f8f7:	83 c4 10             	add    esp,0x10
c001f8fa:	83 ec 08             	sub    esp,0x8
c001f8fd:	68 70 01 00 00       	push   0x170
c001f902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f906:	e8 01 af fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f90b:	83 c4 10             	add    esp,0x10
c001f90e:	83 c4 0c             	add    esp,0xc
c001f911:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f912 <idleCommon()>:
c001f912:	83 ec 0c             	sub    esp,0xc
c001f915:	fa                   	cli    
c001f916:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001f91c:	e8 af 66 ff ff       	call   c0015fd0 <schedule()>
c001f921:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001f926:	48                   	dec    eax
c001f927:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001f92c:	75 01                	jne    c001f92f <idleCommon()+0x1d>
c001f92e:	fb                   	sti    
c001f92f:	83 c4 0c             	add    esp,0xc
c001f932:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f934 <LinkedList<UnixFile>::~LinkedList()>:
c001f934:	90                   	nop
c001f935:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f936 <LinkedList<UnixFile>::LinkedList()>:
c001f936:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f93a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f944:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f94b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f94f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f956:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f95a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f964:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f96b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f96f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f976:	90                   	nop
c001f977:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f978 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f978:	83 ec 0c             	sub    esp,0xc
c001f97b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f980:	75 10                	jne    c001f992 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f982:	83 ec 0c             	sub    esp,0xc
c001f985:	68 e8 0d 02 c0       	push   0xc0020de8
c001f98a:	e8 78 1b ff ff       	call   c0011507 <KePanic(char const*)>
c001f98f:	83 c4 10             	add    esp,0x10
c001f992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f996:	8b 00                	mov    eax,DWORD PTR [eax]
c001f998:	85 c0                	test   eax,eax
c001f99a:	74 34                	je     c001f9d0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f99c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9a3:	85 c0                	test   eax,eax
c001f9a5:	74 29                	je     c001f9d0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f9a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9b2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f9b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9bd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f9c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9c7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f9ce:	eb 65                	jmp    c001fa35 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f9d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9d6:	85 c0                	test   eax,eax
c001f9d8:	75 4b                	jne    c001fa25 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f9da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9e1:	85 c0                	test   eax,eax
c001f9e3:	75 40                	jne    c001fa25 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f9e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9ed:	89 10                	mov    DWORD PTR [eax],edx
c001f9ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9f3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9f7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f9fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa01:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa0c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa0f:	85 c0                	test   eax,eax
c001fa11:	74 22                	je     c001fa35 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fa13:	83 ec 0c             	sub    esp,0xc
c001fa16:	68 0a 0e 02 c0       	push   0xc0020e0a
c001fa1b:	e8 e7 1a ff ff       	call   c0011507 <KePanic(char const*)>
c001fa20:	83 c4 10             	add    esp,0x10
c001fa23:	eb 10                	jmp    c001fa35 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fa25:	83 ec 0c             	sub    esp,0xc
c001fa28:	68 14 0e 02 c0       	push   0xc0020e14
c001fa2d:	e8 d5 1a ff ff       	call   c0011507 <KePanic(char const*)>
c001fa32:	83 c4 10             	add    esp,0x10
c001fa35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa39:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa3c:	8d 50 01             	lea    edx,[eax+0x1]
c001fa3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa43:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa46:	90                   	nop
c001fa47:	83 c4 0c             	add    esp,0xc
c001fa4a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001fa4c <LinkedList<UnixFile>::getFirstElement()>:
c001fa4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa50:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa52:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001fa54 <LinkedList<UnixFile>::removeFirst()>:
c001fa54:	83 ec 0c             	sub    esp,0xc
c001fa57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa5b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa5d:	85 c0                	test   eax,eax
c001fa5f:	75 12                	jne    c001fa73 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001fa61:	83 ec 0c             	sub    esp,0xc
c001fa64:	68 20 0e 02 c0       	push   0xc0020e20
c001fa69:	e8 99 1a ff ff       	call   c0011507 <KePanic(char const*)>
c001fa6e:	83 c4 10             	add    esp,0x10
c001fa71:	eb 7e                	jmp    c001faf1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001fa73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa7a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa7d:	85 c0                	test   eax,eax
c001fa7f:	74 10                	je     c001fa91 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001fa81:	83 ec 0c             	sub    esp,0xc
c001fa84:	68 6b 0e 02 c0       	push   0xc0020e6b
c001fa89:	e8 79 1a ff ff       	call   c0011507 <KePanic(char const*)>
c001fa8e:	83 c4 10             	add    esp,0x10
c001fa91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa95:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa97:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa9a:	85 c0                	test   eax,eax
c001fa9c:	75 33                	jne    c001fad1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001fa9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faa2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001faa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001faba:	83 f8 01             	cmp    eax,0x1
c001fabd:	74 21                	je     c001fae0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fabf:	83 ec 0c             	sub    esp,0xc
c001fac2:	68 44 0e 02 c0       	push   0xc0020e44
c001fac7:	e8 3b 1a ff ff       	call   c0011507 <KePanic(char const*)>
c001facc:	83 c4 10             	add    esp,0x10
c001facf:	eb 0f                	jmp    c001fae0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fad1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad5:	8b 00                	mov    eax,DWORD PTR [eax]
c001fad7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001fada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fade:	89 10                	mov    DWORD PTR [eax],edx
c001fae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fae7:	8d 50 ff             	lea    edx,[eax-0x1]
c001faea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001faf1:	83 c4 0c             	add    esp,0xc
c001faf4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001faf6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001faf6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fafa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fafd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fafe <DriverlessDevice::~DriverlessDevice()>:
c001fafe:	ba 5c 1a 02 c0       	mov    edx,0xc0021a5c
c001fb03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb07:	89 10                	mov    DWORD PTR [eax],edx
c001fb09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb0d:	50                   	push   eax
c001fb0e:	e8 2f cd fe ff       	call   c000c842 <Device::~Device()>
c001fb13:	83 c4 04             	add    esp,0x4
c001fb16:	90                   	nop
c001fb17:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fb18 <DriverlessDevice::~DriverlessDevice()>:
c001fb18:	83 ec 0c             	sub    esp,0xc
c001fb1b:	83 ec 0c             	sub    esp,0xc
c001fb1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb22:	e8 d7 ff ff ff       	call   c001fafe <DriverlessDevice::~DriverlessDevice()>
c001fb27:	83 c4 10             	add    esp,0x10
c001fb2a:	83 ec 08             	sub    esp,0x8
c001fb2d:	68 58 01 00 00       	push   0x158
c001fb32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb36:	e8 d1 ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fb3b:	83 c4 10             	add    esp,0x10
c001fb3e:	83 c4 0c             	add    esp,0xc
c001fb41:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fb42 <LinkedList<Device>::addElement(Device*)>:
c001fb42:	83 ec 0c             	sub    esp,0xc
c001fb45:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fb4a:	75 10                	jne    c001fb5c <LinkedList<Device>::addElement(Device*)+0x1a>
c001fb4c:	83 ec 0c             	sub    esp,0xc
c001fb4f:	68 e8 0d 02 c0       	push   0xc0020de8
c001fb54:	e8 ae 19 ff ff       	call   c0011507 <KePanic(char const*)>
c001fb59:	83 c4 10             	add    esp,0x10
c001fb5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb60:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb62:	85 c0                	test   eax,eax
c001fb64:	74 3a                	je     c001fba0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fb66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb6d:	85 c0                	test   eax,eax
c001fb6f:	74 2f                	je     c001fba0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fb71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb75:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb7c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fb82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb86:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb8a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fb8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb94:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fb9e:	eb 68                	jmp    c001fc08 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fba6:	85 c0                	test   eax,eax
c001fba8:	75 4e                	jne    c001fbf8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fbaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbb1:	85 c0                	test   eax,eax
c001fbb3:	75 43                	jne    c001fbf8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fbb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbb9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbbd:	89 10                	mov    DWORD PTR [eax],edx
c001fbbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbc3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbc7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fbca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbd1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fbdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbdf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbe2:	85 c0                	test   eax,eax
c001fbe4:	74 22                	je     c001fc08 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fbe6:	83 ec 0c             	sub    esp,0xc
c001fbe9:	68 0a 0e 02 c0       	push   0xc0020e0a
c001fbee:	e8 14 19 ff ff       	call   c0011507 <KePanic(char const*)>
c001fbf3:	83 c4 10             	add    esp,0x10
c001fbf6:	eb 10                	jmp    c001fc08 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fbf8:	83 ec 0c             	sub    esp,0xc
c001fbfb:	68 14 0e 02 c0       	push   0xc0020e14
c001fc00:	e8 02 19 ff ff       	call   c0011507 <KePanic(char const*)>
c001fc05:	83 c4 10             	add    esp,0x10
c001fc08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc0c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc0f:	8d 50 01             	lea    edx,[eax+0x1]
c001fc12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc16:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc19:	90                   	nop
c001fc1a:	83 c4 0c             	add    esp,0xc
c001fc1d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fc1e <LinkedList<Device>::LinkedList()>:
c001fc1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc22:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc37:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fc3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc4c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc57:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fc5e:	90                   	nop
c001fc5f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fc60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fc60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc64:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc66:	85 c0                	test   eax,eax
c001fc68:	75 0e                	jne    c001fc78 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fc6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc71:	85 c0                	test   eax,eax
c001fc73:	75 03                	jne    c001fc78 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fc75:	b0 01                	mov    al,0x1
c001fc77:	c3                   	ret    
c001fc78:	b0 00                	mov    al,0x0
c001fc7a:	90                   	nop
c001fc7b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fc7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fc7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc80:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc82:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fc84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fc84:	83 ec 0c             	sub    esp,0xc
c001fc87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc8b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc8d:	85 c0                	test   eax,eax
c001fc8f:	75 17                	jne    c001fca8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fc91:	83 ec 0c             	sub    esp,0xc
c001fc94:	68 20 0e 02 c0       	push   0xc0020e20
c001fc99:	e8 69 18 ff ff       	call   c0011507 <KePanic(char const*)>
c001fc9e:	83 c4 10             	add    esp,0x10
c001fca1:	e9 96 00 00 00       	jmp    c001fd3c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fca6:	66 90                	xchg   ax,ax
c001fca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcaf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fcb2:	85 c0                	test   eax,eax
c001fcb4:	0f 95 c0             	setne  al
c001fcb7:	0f b6 c0             	movzx  eax,al
c001fcba:	85 c0                	test   eax,eax
c001fcbc:	74 12                	je     c001fcd0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fcbe:	83 ec 0c             	sub    esp,0xc
c001fcc1:	68 6b 0e 02 c0       	push   0xc0020e6b
c001fcc6:	e8 3c 18 ff ff       	call   c0011507 <KePanic(char const*)>
c001fccb:	83 c4 10             	add    esp,0x10
c001fcce:	66 90                	xchg   ax,ax
c001fcd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcd6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fcd9:	85 c0                	test   eax,eax
c001fcdb:	0f 94 c0             	sete   al
c001fcde:	0f b6 c0             	movzx  eax,al
c001fce1:	85 c0                	test   eax,eax
c001fce3:	74 33                	je     c001fd18 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fcef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fcfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcfe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd01:	83 f8 01             	cmp    eax,0x1
c001fd04:	74 22                	je     c001fd28 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fd06:	83 ec 0c             	sub    esp,0xc
c001fd09:	68 44 0e 02 c0       	push   0xc0020e44
c001fd0e:	e8 f4 17 ff ff       	call   c0011507 <KePanic(char const*)>
c001fd13:	83 c4 10             	add    esp,0x10
c001fd16:	eb 10                	jmp    c001fd28 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fd18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd1c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd1e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fd21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd25:	89 10                	mov    DWORD PTR [eax],edx
c001fd27:	90                   	nop
c001fd28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd2c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd2f:	8d 50 ff             	lea    edx,[eax-0x1]
c001fd32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd36:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fd39:	8d 76 00             	lea    esi,[esi+0x0]
c001fd3c:	83 c4 0c             	add    esp,0xc
c001fd3f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fd40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fd40:	83 ec 0c             	sub    esp,0xc
c001fd43:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fd48:	75 12                	jne    c001fd5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001fd4a:	83 ec 0c             	sub    esp,0xc
c001fd4d:	68 e8 0d 02 c0       	push   0xc0020de8
c001fd52:	e8 b0 17 ff ff       	call   c0011507 <KePanic(char const*)>
c001fd57:	83 c4 10             	add    esp,0x10
c001fd5a:	66 90                	xchg   ax,ax
c001fd5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd60:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd62:	85 c0                	test   eax,eax
c001fd64:	74 36                	je     c001fd9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fd66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd6d:	85 c0                	test   eax,eax
c001fd6f:	74 2b                	je     c001fd9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fd71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd75:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd7c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fd7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd83:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd87:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd91:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fd98:	eb 6a                	jmp    c001fe04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fd9a:	66 90                	xchg   ax,ax
c001fd9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fda2:	85 c0                	test   eax,eax
c001fda4:	75 4e                	jne    c001fdf4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fda6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdad:	85 c0                	test   eax,eax
c001fdaf:	75 43                	jne    c001fdf4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fdb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdb5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fdb9:	89 10                	mov    DWORD PTR [eax],edx
c001fdbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdbf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fdc3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fdc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdcd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fdd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdd8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fddb:	85 c0                	test   eax,eax
c001fddd:	74 25                	je     c001fe04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fddf:	83 ec 0c             	sub    esp,0xc
c001fde2:	68 0a 0e 02 c0       	push   0xc0020e0a
c001fde7:	e8 1b 17 ff ff       	call   c0011507 <KePanic(char const*)>
c001fdec:	83 c4 10             	add    esp,0x10
c001fdef:	eb 13                	jmp    c001fe04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fdf1:	8d 76 00             	lea    esi,[esi+0x0]
c001fdf4:	83 ec 0c             	sub    esp,0xc
c001fdf7:	68 14 0e 02 c0       	push   0xc0020e14
c001fdfc:	e8 06 17 ff ff       	call   c0011507 <KePanic(char const*)>
c001fe01:	83 c4 10             	add    esp,0x10
c001fe04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe08:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe0b:	8d 50 01             	lea    edx,[eax+0x1]
c001fe0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe12:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fe15:	90                   	nop
c001fe16:	83 c4 0c             	add    esp,0xc
c001fe19:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fe1c <ACPI::~ACPI()>:
c001fe1c:	83 ec 0c             	sub    esp,0xc
c001fe1f:	ba 44 20 02 c0       	mov    edx,0xc0022044
c001fe24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe28:	89 10                	mov    DWORD PTR [eax],edx
c001fe2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe2e:	83 ec 0c             	sub    esp,0xc
c001fe31:	50                   	push   eax
c001fe32:	e8 0b ca fe ff       	call   c000c842 <Device::~Device()>
c001fe37:	83 c4 10             	add    esp,0x10
c001fe3a:	90                   	nop
c001fe3b:	83 c4 0c             	add    esp,0xc
c001fe3e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fe40 <ACPI::~ACPI()>:
c001fe40:	83 ec 0c             	sub    esp,0xc
c001fe43:	83 ec 0c             	sub    esp,0xc
c001fe46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe4a:	e8 cd ff ff ff       	call   c001fe1c <ACPI::~ACPI()>
c001fe4f:	83 c4 10             	add    esp,0x10
c001fe52:	83 ec 08             	sub    esp,0x8
c001fe55:	68 64 12 00 00       	push   0x1264
c001fe5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe5e:	e8 a9 a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fe63:	83 c4 10             	add    esp,0x10
c001fe66:	83 c4 0c             	add    esp,0xc
c001fe69:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001fe6c <LinkedList<Device>::~LinkedList()>:
c001fe6c:	90                   	nop
c001fe6d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001fe70 <LinkedList<Device>::isEmpty()>:
c001fe70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe74:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe76:	85 c0                	test   eax,eax
c001fe78:	75 0e                	jne    c001fe88 <LinkedList<Device>::isEmpty()+0x18>
c001fe7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe81:	85 c0                	test   eax,eax
c001fe83:	75 03                	jne    c001fe88 <LinkedList<Device>::isEmpty()+0x18>
c001fe85:	b0 01                	mov    al,0x1
c001fe87:	c3                   	ret    
c001fe88:	b0 00                	mov    al,0x0
c001fe8a:	90                   	nop
c001fe8b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001fe8c <LinkedList<Device>::getFirstElement()>:
c001fe8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe90:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe92:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001fe94 <LinkedList<Device>::removeFirst()>:
c001fe94:	83 ec 0c             	sub    esp,0xc
c001fe97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe9b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe9d:	85 c0                	test   eax,eax
c001fe9f:	75 17                	jne    c001feb8 <LinkedList<Device>::removeFirst()+0x24>
c001fea1:	83 ec 0c             	sub    esp,0xc
c001fea4:	68 20 0e 02 c0       	push   0xc0020e20
c001fea9:	e8 59 16 ff ff       	call   c0011507 <KePanic(char const*)>
c001feae:	83 c4 10             	add    esp,0x10
c001feb1:	e9 92 00 00 00       	jmp    c001ff48 <LinkedList<Device>::removeFirst()+0xb4>
c001feb6:	66 90                	xchg   ax,ax
c001feb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001febc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001febf:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fec5:	85 c0                	test   eax,eax
c001fec7:	74 13                	je     c001fedc <LinkedList<Device>::removeFirst()+0x48>
c001fec9:	83 ec 0c             	sub    esp,0xc
c001fecc:	68 6b 0e 02 c0       	push   0xc0020e6b
c001fed1:	e8 31 16 ff ff       	call   c0011507 <KePanic(char const*)>
c001fed6:	83 c4 10             	add    esp,0x10
c001fed9:	8d 76 00             	lea    esi,[esi+0x0]
c001fedc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fee0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fee2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fee8:	85 c0                	test   eax,eax
c001feea:	75 34                	jne    c001ff20 <LinkedList<Device>::removeFirst()+0x8c>
c001feec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fefa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ff01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff05:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff08:	83 f8 01             	cmp    eax,0x1
c001ff0b:	74 27                	je     c001ff34 <LinkedList<Device>::removeFirst()+0xa0>
c001ff0d:	83 ec 0c             	sub    esp,0xc
c001ff10:	68 44 0e 02 c0       	push   0xc0020e44
c001ff15:	e8 ed 15 ff ff       	call   c0011507 <KePanic(char const*)>
c001ff1a:	83 c4 10             	add    esp,0x10
c001ff1d:	eb 15                	jmp    c001ff34 <LinkedList<Device>::removeFirst()+0xa0>
c001ff1f:	90                   	nop
c001ff20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff24:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff26:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ff2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff30:	89 10                	mov    DWORD PTR [eax],edx
c001ff32:	66 90                	xchg   ax,ax
c001ff34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff38:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff3b:	8d 50 ff             	lea    edx,[eax-0x1]
c001ff3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff42:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ff45:	8d 76 00             	lea    esi,[esi+0x0]
c001ff48:	83 c4 0c             	add    esp,0xc
c001ff4b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ff4c <CPU::~CPU()>:
c001ff4c:	83 ec 0c             	sub    esp,0xc
c001ff4f:	ba ec 21 02 c0       	mov    edx,0xc00221ec
c001ff54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff58:	89 10                	mov    DWORD PTR [eax],edx
c001ff5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff5e:	83 ec 0c             	sub    esp,0xc
c001ff61:	50                   	push   eax
c001ff62:	e8 db c8 fe ff       	call   c000c842 <Device::~Device()>
c001ff67:	83 c4 10             	add    esp,0x10
c001ff6a:	90                   	nop
c001ff6b:	83 c4 0c             	add    esp,0xc
c001ff6e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ff70 <CPU::~CPU()>:
c001ff70:	83 ec 0c             	sub    esp,0xc
c001ff73:	83 ec 0c             	sub    esp,0xc
c001ff76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff7a:	e8 cd ff ff ff       	call   c001ff4c <CPU::~CPU()>
c001ff7f:	83 c4 10             	add    esp,0x10
c001ff82:	83 ec 08             	sub    esp,0x8
c001ff85:	68 94 11 00 00       	push   0x1194
c001ff8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff8e:	e8 79 a8 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001ff93:	83 c4 10             	add    esp,0x10
c001ff96:	83 c4 0c             	add    esp,0xc
c001ff99:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ff9c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ff9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ffa0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ffa3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ffa4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ffa4:	90                   	nop
c001ffa5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ffa8 <ThreadControlBlock::ThreadControlBlock()>:
c001ffa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffac:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ffb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffb7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ffbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffc2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ffc9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffcd:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001ffd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffd8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001ffdf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffe3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001ffe7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ffeb:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001ffef:	90                   	nop
c001fff0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fff4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fff4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fff8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fffe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020002:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020009:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002000d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020014:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020018:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002001e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020022:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020029:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002002d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020034:	90                   	nop
c0020035:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0020036 <PCI::~PCI()>:
c0020036:	83 ec 0c             	sub    esp,0xc
c0020039:	ba cc 30 02 c0       	mov    edx,0xc00230cc
c002003e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020042:	89 10                	mov    DWORD PTR [eax],edx
c0020044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020048:	83 ec 0c             	sub    esp,0xc
c002004b:	50                   	push   eax
c002004c:	e8 83 c2 fe ff       	call   c000c2d4 <Bus::~Bus()>
c0020051:	83 c4 10             	add    esp,0x10
c0020054:	90                   	nop
c0020055:	83 c4 0c             	add    esp,0xc
c0020058:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002005a <PCI::~PCI()>:
c002005a:	83 ec 0c             	sub    esp,0xc
c002005d:	83 ec 0c             	sub    esp,0xc
c0020060:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020064:	e8 cd ff ff ff       	call   c0020036 <PCI::~PCI()>
c0020069:	83 c4 10             	add    esp,0x10
c002006c:	83 ec 08             	sub    esp,0x8
c002006f:	68 5c 01 00 00       	push   0x15c
c0020074:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020078:	e8 8f a7 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c002007d:	83 c4 10             	add    esp,0x10
c0020080:	83 c4 0c             	add    esp,0xc
c0020083:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0020084 <IDE::~IDE()>:
c0020084:	83 ec 0c             	sub    esp,0xc
c0020087:	ba 80 31 02 c0       	mov    edx,0xc0023180
c002008c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020090:	89 10                	mov    DWORD PTR [eax],edx
c0020092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020096:	83 ec 0c             	sub    esp,0xc
c0020099:	50                   	push   eax
c002009a:	e8 1d cc fe ff       	call   c000ccbc <HardDiskController::~HardDiskController()>
c002009f:	83 c4 10             	add    esp,0x10
c00200a2:	90                   	nop
c00200a3:	83 c4 0c             	add    esp,0xc
c00200a6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00200a8 <IDE::~IDE()>:
c00200a8:	83 ec 0c             	sub    esp,0xc
c00200ab:	83 ec 0c             	sub    esp,0xc
c00200ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200b2:	e8 cd ff ff ff       	call   c0020084 <IDE::~IDE()>
c00200b7:	83 c4 10             	add    esp,0x10
c00200ba:	83 ec 08             	sub    esp,0x8
c00200bd:	68 70 02 00 00       	push   0x270
c00200c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200c6:	e8 41 a7 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00200cb:	83 c4 10             	add    esp,0x10
c00200ce:	83 c4 0c             	add    esp,0xc
c00200d1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00200d2 <SATABus::~SATABus()>:
c00200d2:	83 ec 0c             	sub    esp,0xc
c00200d5:	ba d0 31 02 c0       	mov    edx,0xc00231d0
c00200da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200de:	89 10                	mov    DWORD PTR [eax],edx
c00200e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200e4:	83 ec 0c             	sub    esp,0xc
c00200e7:	50                   	push   eax
c00200e8:	e8 cf cb fe ff       	call   c000ccbc <HardDiskController::~HardDiskController()>
c00200ed:	83 c4 10             	add    esp,0x10
c00200f0:	90                   	nop
c00200f1:	83 c4 0c             	add    esp,0xc
c00200f4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00200f6 <SATABus::~SATABus()>:
c00200f6:	83 ec 0c             	sub    esp,0xc
c00200f9:	83 ec 0c             	sub    esp,0xc
c00200fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020100:	e8 cd ff ff ff       	call   c00200d2 <SATABus::~SATABus()>
c0020105:	83 c4 10             	add    esp,0x10
c0020108:	83 ec 08             	sub    esp,0x8
c002010b:	68 64 01 00 00       	push   0x164
c0020110:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020114:	e8 f3 a6 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020119:	83 c4 10             	add    esp,0x10
c002011c:	83 c4 0c             	add    esp,0xc
c002011f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0020120 <ATA::~ATA()>:
c0020120:	83 ec 0c             	sub    esp,0xc
c0020123:	ba 10 32 02 c0       	mov    edx,0xc0023210
c0020128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002012c:	89 10                	mov    DWORD PTR [eax],edx
c002012e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020132:	83 ec 0c             	sub    esp,0xc
c0020135:	50                   	push   eax
c0020136:	e8 63 cc fe ff       	call   c000cd9e <PhysicalDisk::~PhysicalDisk()>
c002013b:	83 c4 10             	add    esp,0x10
c002013e:	90                   	nop
c002013f:	83 c4 0c             	add    esp,0xc
c0020142:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0020144 <ATA::~ATA()>:
c0020144:	83 ec 0c             	sub    esp,0xc
c0020147:	83 ec 0c             	sub    esp,0xc
c002014a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002014e:	e8 cd ff ff ff       	call   c0020120 <ATA::~ATA()>
c0020153:	83 c4 10             	add    esp,0x10
c0020156:	83 ec 08             	sub    esp,0x8
c0020159:	68 7c 01 00 00       	push   0x17c
c002015e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020162:	e8 a5 a6 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020167:	83 c4 10             	add    esp,0x10
c002016a:	83 c4 0c             	add    esp,0xc
c002016d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002016e <ATAPI::~ATAPI()>:
c002016e:	83 ec 0c             	sub    esp,0xc
c0020171:	ba 58 32 02 c0       	mov    edx,0xc0023258
c0020176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002017a:	89 10                	mov    DWORD PTR [eax],edx
c002017c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020180:	83 ec 0c             	sub    esp,0xc
c0020183:	50                   	push   eax
c0020184:	e8 15 cc fe ff       	call   c000cd9e <PhysicalDisk::~PhysicalDisk()>
c0020189:	83 c4 10             	add    esp,0x10
c002018c:	90                   	nop
c002018d:	83 c4 0c             	add    esp,0xc
c0020190:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020192 <ATAPI::~ATAPI()>:
c0020192:	83 ec 0c             	sub    esp,0xc
c0020195:	83 ec 0c             	sub    esp,0xc
c0020198:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002019c:	e8 cd ff ff ff       	call   c002016e <ATAPI::~ATAPI()>
c00201a1:	83 c4 10             	add    esp,0x10
c00201a4:	83 ec 08             	sub    esp,0x8
c00201a7:	68 84 01 00 00       	push   0x184
c00201ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201b0:	e8 57 a6 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00201b5:	83 c4 10             	add    esp,0x10
c00201b8:	83 c4 0c             	add    esp,0xc
c00201bb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00201bc <SATA::~SATA()>:
c00201bc:	83 ec 0c             	sub    esp,0xc
c00201bf:	ba 0c 33 02 c0       	mov    edx,0xc002330c
c00201c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201c8:	89 10                	mov    DWORD PTR [eax],edx
c00201ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201ce:	83 ec 0c             	sub    esp,0xc
c00201d1:	50                   	push   eax
c00201d2:	e8 c7 cb fe ff       	call   c000cd9e <PhysicalDisk::~PhysicalDisk()>
c00201d7:	83 c4 10             	add    esp,0x10
c00201da:	90                   	nop
c00201db:	83 c4 0c             	add    esp,0xc
c00201de:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00201e0 <SATA::~SATA()>:
c00201e0:	83 ec 0c             	sub    esp,0xc
c00201e3:	83 ec 0c             	sub    esp,0xc
c00201e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201ea:	e8 cd ff ff ff       	call   c00201bc <SATA::~SATA()>
c00201ef:	83 c4 10             	add    esp,0x10
c00201f2:	83 ec 08             	sub    esp,0x8
c00201f5:	68 7c 01 00 00       	push   0x17c
c00201fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201fe:	e8 09 a6 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020203:	83 c4 10             	add    esp,0x10
c0020206:	83 c4 0c             	add    esp,0xc
c0020209:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002020a <SATAPI::~SATAPI()>:
c002020a:	83 ec 0c             	sub    esp,0xc
c002020d:	ba 30 34 02 c0       	mov    edx,0xc0023430
c0020212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020216:	89 10                	mov    DWORD PTR [eax],edx
c0020218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002021c:	83 ec 0c             	sub    esp,0xc
c002021f:	50                   	push   eax
c0020220:	e8 79 cb fe ff       	call   c000cd9e <PhysicalDisk::~PhysicalDisk()>
c0020225:	83 c4 10             	add    esp,0x10
c0020228:	90                   	nop
c0020229:	83 c4 0c             	add    esp,0xc
c002022c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002022e <SATAPI::~SATAPI()>:
c002022e:	83 ec 0c             	sub    esp,0xc
c0020231:	83 ec 0c             	sub    esp,0xc
c0020234:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020238:	e8 cd ff ff ff       	call   c002020a <SATAPI::~SATAPI()>
c002023d:	83 c4 10             	add    esp,0x10
c0020240:	83 ec 08             	sub    esp,0x8
c0020243:	68 84 01 00 00       	push   0x184
c0020248:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002024c:	e8 bb a5 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0020251:	83 c4 10             	add    esp,0x10
c0020254:	83 c4 0c             	add    esp,0xc
c0020257:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020258 <IOAPIC::~IOAPIC()>:
c0020258:	83 ec 0c             	sub    esp,0xc
c002025b:	ba 70 34 02 c0       	mov    edx,0xc0023470
c0020260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020264:	89 10                	mov    DWORD PTR [eax],edx
c0020266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002026a:	83 ec 0c             	sub    esp,0xc
c002026d:	50                   	push   eax
c002026e:	e8 cf c5 fe ff       	call   c000c842 <Device::~Device()>
c0020273:	83 c4 10             	add    esp,0x10
c0020276:	90                   	nop
c0020277:	83 c4 0c             	add    esp,0xc
c002027a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002027c <IOAPIC::~IOAPIC()>:
c002027c:	83 ec 0c             	sub    esp,0xc
c002027f:	83 ec 0c             	sub    esp,0xc
c0020282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020286:	e8 cd ff ff ff       	call   c0020258 <IOAPIC::~IOAPIC()>
c002028b:	83 c4 10             	add    esp,0x10
c002028e:	83 ec 08             	sub    esp,0x8
c0020291:	68 68 01 00 00       	push   0x168
c0020296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002029a:	e8 6d a5 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c002029f:	83 c4 10             	add    esp,0x10
c00202a2:	83 c4 0c             	add    esp,0xc
c00202a5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00202a8 <APICTimer::~APICTimer()>:
c00202a8:	83 ec 0c             	sub    esp,0xc
c00202ab:	ba b8 34 02 c0       	mov    edx,0xc00234b8
c00202b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202b4:	89 10                	mov    DWORD PTR [eax],edx
c00202b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ba:	83 ec 0c             	sub    esp,0xc
c00202bd:	50                   	push   eax
c00202be:	e8 55 e0 fe ff       	call   c000e318 <Timer::~Timer()>
c00202c3:	83 c4 10             	add    esp,0x10
c00202c6:	90                   	nop
c00202c7:	83 c4 0c             	add    esp,0xc
c00202ca:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00202cc <APICTimer::~APICTimer()>:
c00202cc:	83 ec 0c             	sub    esp,0xc
c00202cf:	83 ec 0c             	sub    esp,0xc
c00202d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202d6:	e8 cd ff ff ff       	call   c00202a8 <APICTimer::~APICTimer()>
c00202db:	83 c4 10             	add    esp,0x10
c00202de:	83 ec 08             	sub    esp,0x8
c00202e1:	68 60 01 00 00       	push   0x160
c00202e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202ea:	e8 1d a5 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00202ef:	83 c4 10             	add    esp,0x10
c00202f2:	83 c4 0c             	add    esp,0xc
c00202f5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00202f8 <PIT::~PIT()>:
c00202f8:	83 ec 0c             	sub    esp,0xc
c00202fb:	ba 08 35 02 c0       	mov    edx,0xc0023508
c0020300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020304:	89 10                	mov    DWORD PTR [eax],edx
c0020306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002030a:	83 ec 0c             	sub    esp,0xc
c002030d:	50                   	push   eax
c002030e:	e8 05 e0 fe ff       	call   c000e318 <Timer::~Timer()>
c0020313:	83 c4 10             	add    esp,0x10
c0020316:	90                   	nop
c0020317:	83 c4 0c             	add    esp,0xc
c002031a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002031c <PIT::~PIT()>:
c002031c:	83 ec 0c             	sub    esp,0xc
c002031f:	83 ec 0c             	sub    esp,0xc
c0020322:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020326:	e8 cd ff ff ff       	call   c00202f8 <PIT::~PIT()>
c002032b:	83 c4 10             	add    esp,0x10
c002032e:	83 ec 08             	sub    esp,0x8
c0020331:	68 5c 01 00 00       	push   0x15c
c0020336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002033a:	e8 cd a4 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c002033f:	83 c4 10             	add    esp,0x10
c0020342:	83 c4 0c             	add    esp,0xc
c0020345:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be 1d 23 02 c0       	mov    esi,0xc002231d
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be 39 23 02 c0       	mov    esi,0xc0022339
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
