
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3d 7b 00 00       	call   c0007b5d <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 44 44 02 c0       	mov    eax,0xc0024444
c0000025:	3d 44 44 02 c0       	cmp    eax,0xc0024444
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 44 44 02 c0       	push   0xc0024444
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 44 44 02 c0       	mov    eax,0xc0024444
c0000051:	2d 44 44 02 c0       	sub    eax,0xc0024444
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 44 44 02 c0       	push   0xc0024444
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 0c 05 02 c0       	mov    ebx,0xc002050c
c0000097:	81 eb 08 05 02 c0    	sub    ebx,0xc0020508
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 08 05 02 c0       	mov    esi,0xc0020508
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 44 44 02 c0       	push   0xc0024444
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 44 44 02 c0       	push   0xc0024444
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 0f 57 01 00       	call   c00159bc <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 2c a4 00 00       	call   c000a6f1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 ed 56 01 00       	call   c00159bc <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 fa 5b 01 00       	call   c0015ee8 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 95 62 01 00       	call   c001658c <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 6e 02 c0 	lgdtd  ds:0xc0026ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 c3 12 01 00       	jmp    c0011642 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 20 05 02 c0 02 	test   BYTE PTR [edx-0x3ffdfae0],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 20 05 02 c0 01 	test   BYTE PTR [edx-0x3ffdfae0],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 20 05 02 c0 08 	test   BYTE PTR [edx-0x3ffdfae0],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 20 05 02 c0 08 	test   BYTE PTR [edx-0x3ffdfae0],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 20 05 02 c0 04 	test   BYTE PTR [ecx-0x3ffdfae0],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 20 05 02 c0 01 	test   BYTE PTR [edx-0x3ffdfae0],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 61 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9efc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000e2a:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 d3 6a 00 00       	call   c00079d8 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 2e 6a 00 00       	call   c00079d8 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 18 6a 00 00       	call   c00079d8 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 16 69 00 00       	call   c00079d8 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c00011af:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001206:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c000124f:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c000126a:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c0001324:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c000132a:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c0001331:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c00013f7:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c00013fd:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c0001404:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001552:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 24 06 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf9dc]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 7e 7d 01 00       	jmp    c0019b58 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 a8 7d 01 00       	jmp    c0019b98 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 c9 7d 01 00       	jmp    c0019bd8 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 80 07 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf880]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 80 07 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf880]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba 50 30 02 c0       	mov    edx,0xc0023050
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba 3c 06 02 c0       	mov    edx,0xc002063c
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 42 06 02 c0       	mov    eax,0xc0020642
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf 00 07 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdf900]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 4b 06 02 c0       	mov    eax,0xc002064b
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 80 07 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdf880]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 d0 06 02 c0       	mov    eax,0xc00206d0
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb c0 06 02 c0       	mov    ebx,0xc00206c0
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 a0 06 02 c0       	mov    eax,0xc00206a0
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 b0 06 02 c0       	mov    eax,0xc00206b0
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba 52 06 02 c0       	mov    edx,0xc0020652
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba 5e 06 02 c0       	mov    edx,0xc002065e
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba 72 06 02 c0       	mov    edx,0xc0020672
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 a0 1e 00 00       	call   c0007b03 <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 98 1e 00 00       	call   c0007b13 <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c a0 0a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020aa0
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 a0 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020aa0
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 a0 08 02 c0       	mov    eax,0xc00208a0
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 e0 07 02 c0       	mov    eax,0xc00207e0
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 a0 07 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf860]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 a0 0b 02 c0       	push   0xc0020ba0
c0006147:	e8 b0 43 01 00       	call   c001a4fc <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 ae 0b 02 c0       	push   0xc0020bae
c000617f:	e8 78 43 01 00       	call   c001a4fc <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 e1 42 01 00       	call   c001a4a0 <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 60 02 c0       	mov    eax,0xc0026020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 bd 0b 02 c0       	push   0xc0020bbd
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000657b:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c0006585:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c000659d:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c0006616:	8b 9d 4c 65 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd9ab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c00066ad:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c000670f:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000674c:	05 40 65 02 c0       	add    eax,0xc0026540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c000680c:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 c0 0b 02 c0       	push   0xc0020bc0
c000682f:	e8 c8 3c 01 00       	call   c001a4fc <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 d6 3c 01 00       	call   c001a518 <iso_kprintfd>
c0006842:	c7 04 24 c5 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bc5
c0006849:	e8 ae 3c 01 00       	call   c001a4fc <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006855:	e8 be 3c 01 00       	call   c001a518 <iso_kprintfd>
c000685a:	c7 04 24 cb 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bcb
c0006861:	e8 96 3c 01 00       	call   c001a4fc <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c000686d:	e8 a6 3c 01 00       	call   c001a518 <iso_kprintfd>
c0006872:	c7 04 24 d1 0b 02 c0 	mov    DWORD PTR [esp],0xc0020bd1
c0006879:	e8 7e 3c 01 00       	call   c001a4fc <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006885:	e8 8e 3c 01 00       	call   c001a518 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c00068eb:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 65 02 c0    	lea    ebp,[edi-0x3ffd9aa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 65 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd9aa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 bd 0b 02 c0       	push   0xc0020bbd
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006a2a:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006a30:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 65 02 c0    	lea    eax,[edi-0x3ffd9ab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 da 0b 02 c0       	push   0xc0020bda
c0006a52:	e8 a5 3a 01 00       	call   c001a4fc <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006a87:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 e5 0b 02 c0       	push   0xc0020be5
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 ec 0b 02 c0       	push   0xc0020bec
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006b25:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006b48:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 f3 0b 02 c0       	push   0xc0020bf3
c0006b69:	e8 8e 39 01 00       	call   c001a4fc <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 fe 0b 02 c0       	push   0xc0020bfe
c0006b84:	e8 73 39 01 00       	call   c001a4fc <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 65 02 c0       	push   0xc0026540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 50 0f 00 00       	call   c0007b03 <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006bbf:	e8 3f 0f 00 00       	call   c0007b03 <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 2a 0f 00 00       	call   c0007b03 <malloc>
c0006bd9:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 11 0f 00 00       	call   c0007b03 <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006c1f:	e8 ef 0e 00 00       	call   c0007b13 <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 e1 0e 00 00       	call   c0007b13 <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 c7 0e 00 00       	call   c0007b13 <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 b2 0e 00 00       	call   c0007b13 <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	56                   	push   esi
c0006c81:	53                   	push   ebx
c0006c82:	83 ec 20             	sub    esp,0x20
c0006c85:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006c89:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0006c8d:	68 0f 0c 02 c0       	push   0xc0020c0f
c0006c92:	e8 a3 3c 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0006c97:	e8 de a1 00 00       	call   c0010e7a <KeExecuteAtexit()>
c0006c9c:	c7 04 24 1d 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c1d
c0006ca3:	e8 92 3c 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0006ca8:	c7 04 24 2a 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c2a
c0006caf:	e8 86 3c 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0006cb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0006cb8:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006cbe:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cc0:	56                   	push   esi
c0006cc1:	68 0f 27 00 00       	push   0x270f
c0006cc6:	53                   	push   ebx
c0006cc7:	50                   	push   eax
c0006cc8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006ccb:	83 c4 14             	add    esp,0x14
c0006cce:	56                   	push   esi
c0006ccf:	68 0f 27 00 00       	push   0x270f
c0006cd4:	53                   	push   ebx
c0006cd5:	50                   	push   eax
c0006cd6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006cda:	68 64 0d 02 c0       	push   0xc0020d64
c0006cdf:	e8 56 3c 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0006ce4:	83 c4 14             	add    esp,0x14
c0006ce7:	68 39 0c 02 c0       	push   0xc0020c39
c0006cec:	e8 66 a9 00 00       	call   c0011657 <KePanic(char const*)>
c0006cf1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006cf5:	83 c4 24             	add    esp,0x24
c0006cf8:	5b                   	pop    ebx
c0006cf9:	5e                   	pop    esi
c0006cfa:	c3                   	ret    

c0006cfb <Krnl::firstTask()>:
c0006cfb:	53                   	push   ebx
c0006cfc:	83 ec 14             	sub    esp,0x14
c0006cff:	fb                   	sti    
c0006d00:	68 4f 0c 02 c0       	push   0xc0020c4f
c0006d05:	e8 4f a2 00 00       	call   c0010f59 <KeSetBootMessage(char const*)>
c0006d0a:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006d11:	e8 ed 0d 00 00       	call   c0007b03 <malloc>
c0006d16:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006d1d:	89 c3                	mov    ebx,eax
c0006d1f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0006d24:	50                   	push   eax
c0006d25:	68 68 0c 02 c0       	push   0xc0020c68
c0006d2a:	6a 01                	push   0x1
c0006d2c:	53                   	push   ebx
c0006d2d:	e8 e2 ef 00 00       	call   c0015d14 <Process::Process(bool, char const*, Process*, char**)>
c0006d32:	83 c4 20             	add    esp,0x20
c0006d35:	68 ff 00 00 00       	push   0xff
c0006d3a:	6a 00                	push   0x0
c0006d3c:	68 4d 75 00 c0       	push   0xc000754d
c0006d41:	53                   	push   ebx
c0006d42:	e8 f1 f1 00 00       	call   c0015f38 <Process::createThread(void (*)(void*), void*, int)>
c0006d47:	8b 15 f0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6f0
c0006d4d:	6a 7a                	push   0x7a
c0006d4f:	6a 00                	push   0x0
c0006d51:	68 fc 69 01 c0       	push   0xc00169fc
c0006d56:	52                   	push   edx
c0006d57:	e8 dc f1 00 00       	call   c0015f38 <Process::createThread(void (*)(void*), void*, int)>
c0006d5c:	83 c4 14             	add    esp,0x14
c0006d5f:	68 8c 0d 02 c0       	push   0xc0020d8c
c0006d64:	a3 a8 c6 02 c0       	mov    ds:0xc002c6a8,eax
c0006d69:	e8 eb a1 00 00       	call   c0010f59 <KeSetBootMessage(char const*)>
c0006d6e:	c6 05 bd 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ebd,0x1
c0006d75:	e8 94 aa 00 00       	call   c001180e <KeInitRand()>
c0006d7a:	e8 a0 00 01 00       	call   c0016e1f <Vm::initialise8086()>
c0006d7f:	e8 98 4a 00 00       	call   c000b81c <Fs::initVFS()>
c0006d84:	c7 04 24 75 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c75
c0006d8b:	e8 c9 a1 00 00       	call   c0010f59 <KeSetBootMessage(char const*)>
c0006d90:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d95:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d9b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d9d:	6a 00                	push   0x0
c0006d9f:	6a 00                	push   0x0
c0006da1:	6a 00                	push   0x0
c0006da3:	50                   	push   eax
c0006da4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006da7:	83 c4 14             	add    esp,0x14
c0006daa:	68 8c 0d 02 c0       	push   0xc0020d8c
c0006daf:	e8 a5 a1 00 00       	call   c0010f59 <KeSetBootMessage(char const*)>
c0006db4:	e8 fd 41 00 00       	call   c000afb6 <KeInitialiseSymlinks()>
c0006db9:	e8 fc a6 00 00       	call   c00114ba <KeLoadSystemEnv()>
c0006dbe:	e8 59 a9 00 00       	call   c001171c <KeSetupPowerManager()>
c0006dc3:	83 c4 0c             	add    esp,0xc
c0006dc6:	6a 3a                	push   0x3a
c0006dc8:	68 8f 0c 02 c0       	push   0xc0020c8f
c0006dcd:	68 98 0c 02 c0       	push   0xc0020c98
c0006dd2:	e8 fb d0 00 00       	call   c0013ed2 <Reg::readIntWithDefault(char*, char*, int)>
c0006dd7:	89 04 24             	mov    DWORD PTR [esp],eax
c0006dda:	e8 69 56 00 00       	call   c000c448 <User::loadClockSettings(int)>
c0006ddf:	c7 04 24 b0 0d 02 c0 	mov    DWORD PTR [esp],0xc0020db0
c0006de6:	e8 6e a1 00 00       	call   c0010f59 <KeSetBootMessage(char const*)>
c0006deb:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006df0:	59                   	pop    ecx
c0006df1:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006df7:	53                   	push   ebx
c0006df8:	e8 ef 5c 00 00       	call   c000caec <Device::loadDriversForAll()>
c0006dfd:	c7 04 24 a0 0c 02 c0 	mov    DWORD PTR [esp],0xc0020ca0
c0006e04:	e8 50 a1 00 00       	call   c0010f59 <KeSetBootMessage(char const*)>
c0006e09:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0006e0f:	58                   	pop    eax
c0006e10:	5a                   	pop    edx
c0006e11:	6a 01                	push   0x1
c0006e13:	68 b1 0c 02 c0       	push   0xc0020cb1
c0006e18:	e8 fe e8 00 00       	call   c001571b <Thr::loadDLL(char const*, bool)>
c0006e1d:	59                   	pop    ecx
c0006e1e:	5a                   	pop    edx
c0006e1f:	53                   	push   ebx
c0006e20:	50                   	push   eax
c0006e21:	e8 35 eb 00 00       	call   c001595b <Thr::executeDLL(unsigned long, void*)>
c0006e26:	83 c4 10             	add    esp,0x10
c0006e29:	83 ec 0c             	sub    esp,0xc
c0006e2c:	6a 02                	push   0x2
c0006e2e:	e8 51 f5 00 00       	call   c0016384 <blockTask(TaskState)>
c0006e33:	83 c4 10             	add    esp,0x10
c0006e36:	eb f1                	jmp    c0006e29 <Krnl::firstTask()+0x12e>

c0006e38 <Computer::Computer()>:
c0006e38:	83 ec 0c             	sub    esp,0xc
c0006e3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3f:	83 ec 08             	sub    esp,0x8
c0006e42:	68 cd 0c 02 c0       	push   0xc0020ccd
c0006e47:	50                   	push   eax
c0006e48:	e8 55 5d 00 00       	call   c000cba2 <Device::Device(char const*)>
c0006e4d:	83 c4 10             	add    esp,0x10
c0006e50:	ba fc 0d 02 c0       	mov    edx,0xc0020dfc
c0006e55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e59:	89 10                	mov    DWORD PTR [eax],edx
c0006e5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e7b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e81:	83 ca 04             	or     edx,0x4
c0006e84:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e8e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e94:	0f b6 d0             	movzx  edx,al
c0006e97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006ea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006eac:	0f b6 d0             	movzx  edx,al
c0006eaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006eb3:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006eb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ebc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ec2:	8d 50 01             	lea    edx,[eax+0x1]
c0006ec5:	88 d1                	mov    cl,dl
c0006ec7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ecb:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006ed1:	0f b6 d0             	movzx  edx,al
c0006ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006edc:	83 e1 3f             	and    ecx,0x3f
c0006edf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006ee3:	90                   	nop
c0006ee4:	83 c4 0c             	add    esp,0xc
c0006ee7:	c3                   	ret    

c0006ee8 <Computer::setBootMessage(char const*)>:
c0006ee8:	c3                   	ret    
c0006ee9:	90                   	nop

c0006eea <Computer::detectFeatures()>:
c0006eea:	55                   	push   ebp
c0006eeb:	57                   	push   edi
c0006eec:	56                   	push   esi
c0006eed:	53                   	push   ebx
c0006eee:	83 ec 1c             	sub    esp,0x1c
c0006ef1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ef5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006efb:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006f01:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006f07:	e8 ed 92 ff ff       	call   c00001f9 <detectCPUID>
c0006f0c:	31 d2                	xor    edx,edx
c0006f0e:	85 c0                	test   eax,eax
c0006f10:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f16:	0f 95 c2             	setne  dl
c0006f19:	d1 e2                	shl    edx,1
c0006f1b:	83 e0 fd             	and    eax,0xfffffffd
c0006f1e:	09 d0                	or     eax,edx
c0006f20:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f26:	a8 02                	test   al,0x2
c0006f28:	75 51                	jne    c0006f7b <Computer::detectFeatures()+0x91>
c0006f2a:	f6 05 d1 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed1,0x4
c0006f31:	74 0f                	je     c0006f42 <Computer::detectFeatures()+0x58>
c0006f33:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f39:	83 e0 fb             	and    eax,0xfffffffb
c0006f3c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f42:	e8 bf 85 01 00       	call   c001f506 <x87Detect>
c0006f47:	83 e0 01             	and    eax,0x1
c0006f4a:	c1 e0 04             	shl    eax,0x4
c0006f4d:	89 c2                	mov    edx,eax
c0006f4f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f55:	83 e0 ef             	and    eax,0xffffffef
c0006f58:	09 d0                	or     eax,edx
c0006f5a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f60:	a8 10                	test   al,0x10
c0006f62:	88 c2                	mov    dl,al
c0006f64:	0f 85 33 01 00 00    	jne    c000709d <Computer::detectFeatures()+0x1b3>
c0006f6a:	80 e2 80             	and    dl,0x80
c0006f6d:	0f 85 4c 01 00 00    	jne    c00070bf <Computer::detectFeatures()+0x1d5>
c0006f73:	83 c4 1c             	add    esp,0x1c
c0006f76:	5b                   	pop    ebx
c0006f77:	5e                   	pop    esi
c0006f78:	5f                   	pop    edi
c0006f79:	5d                   	pop    ebp
c0006f7a:	c3                   	ret    
c0006f7b:	83 ec 0c             	sub    esp,0xc
c0006f7e:	6a 20                	push   0x20
c0006f80:	e8 0d 94 00 00       	call   c0010392 <CPU::cpuidCheckEDX(unsigned int)>
c0006f85:	83 e0 01             	and    eax,0x1
c0006f88:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f8f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f95:	83 e0 f7             	and    eax,0xfffffff7
c0006f98:	09 d0                	or     eax,edx
c0006f9a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fa0:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006fa7:	e8 e6 93 00 00       	call   c0010392 <CPU::cpuidCheckEDX(unsigned int)>
c0006fac:	89 c2                	mov    edx,eax
c0006fae:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fb4:	83 e2 01             	and    edx,0x1
c0006fb7:	83 e0 fe             	and    eax,0xfffffffe
c0006fba:	09 d0                	or     eax,edx
c0006fbc:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fc2:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006fc9:	e8 c4 93 00 00       	call   c0010392 <CPU::cpuidCheckEDX(unsigned int)>
c0006fce:	89 c2                	mov    edx,eax
c0006fd0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fd6:	c1 e2 07             	shl    edx,0x7
c0006fd9:	83 e0 7f             	and    eax,0x7f
c0006fdc:	09 d0                	or     eax,edx
c0006fde:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fe4:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006feb:	e8 a2 93 00 00       	call   c0010392 <CPU::cpuidCheckEDX(unsigned int)>
c0006ff0:	83 c4 10             	add    esp,0x10
c0006ff3:	83 e0 01             	and    eax,0x1
c0006ff6:	c1 e0 05             	shl    eax,0x5
c0006ff9:	89 c2                	mov    edx,eax
c0006ffb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007001:	83 e0 df             	and    eax,0xffffffdf
c0007004:	09 d0                	or     eax,edx
c0007006:	f7 05 d0 6e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026ed0,0x401
c0007010:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007016:	0f 84 c9 00 00 00    	je     c00070e5 <Computer::detectFeatures()+0x1fb>
c000701c:	83 e0 fe             	and    eax,0xfffffffe
c000701f:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007025:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c000702b:	89 c2                	mov    edx,eax
c000702d:	83 e2 09             	and    edx,0x9
c0007030:	83 fa 01             	cmp    edx,0x1
c0007033:	75 09                	jne    c000703e <Computer::detectFeatures()+0x154>
c0007035:	83 e0 fe             	and    eax,0xfffffffe
c0007038:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000703e:	83 ec 0c             	sub    esp,0xc
c0007041:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007045:	50                   	push   eax
c0007046:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000704a:	55                   	push   ebp
c000704b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000704f:	57                   	push   edi
c0007050:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007054:	56                   	push   esi
c0007055:	68 00 00 00 80       	push   0x80000000
c000705a:	e8 af 92 00 00       	call   c001030e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000705f:	83 c4 20             	add    esp,0x20
c0007062:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007069:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000706d:	0f 86 b7 fe ff ff    	jbe    c0006f2a <Computer::detectFeatures()+0x40>
c0007073:	83 ec 0c             	sub    esp,0xc
c0007076:	50                   	push   eax
c0007077:	55                   	push   ebp
c0007078:	57                   	push   edi
c0007079:	56                   	push   esi
c000707a:	68 01 00 00 80       	push   0x80000001
c000707f:	e8 8a 92 00 00       	call   c001030e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007084:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000708a:	83 c4 20             	add    esp,0x20
c000708d:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007092:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007098:	e9 8d fe ff ff       	jmp    c0006f2a <Computer::detectFeatures()+0x40>
c000709d:	e8 1e 84 01 00       	call   c001f4c0 <absolutelyNoChanceInHell>
c00070a2:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c00070a8:	83 e2 7f             	and    edx,0x7f
c00070ab:	c1 e0 07             	shl    eax,0x7
c00070ae:	09 c2                	or     edx,eax
c00070b0:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c00070b6:	80 e2 80             	and    dl,0x80
c00070b9:	0f 84 b4 fe ff ff    	je     c0006f73 <Computer::detectFeatures()+0x89>
c00070bf:	e8 6c 80 01 00       	call   c001f130 <avxDetect>
c00070c4:	83 e0 01             	and    eax,0x1
c00070c7:	c1 e0 05             	shl    eax,0x5
c00070ca:	89 c2                	mov    edx,eax
c00070cc:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00070d2:	83 e0 df             	and    eax,0xffffffdf
c00070d5:	09 d0                	or     eax,edx
c00070d7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070dd:	83 c4 1c             	add    esp,0x1c
c00070e0:	5b                   	pop    ebx
c00070e1:	5e                   	pop    esi
c00070e2:	5f                   	pop    edi
c00070e3:	5d                   	pop    ebp
c00070e4:	c3                   	ret    
c00070e5:	83 ec 0c             	sub    esp,0xc
c00070e8:	68 00 02 00 00       	push   0x200
c00070ed:	e8 a0 92 00 00       	call   c0010392 <CPU::cpuidCheckEDX(unsigned int)>
c00070f2:	83 c4 10             	add    esp,0x10
c00070f5:	89 c2                	mov    edx,eax
c00070f7:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070fd:	83 e2 01             	and    edx,0x1
c0007100:	83 e0 fe             	and    eax,0xfffffffe
c0007103:	09 d0                	or     eax,edx
c0007105:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000710b:	e9 15 ff ff ff       	jmp    c0007025 <Computer::detectFeatures()+0x13b>

c0007110 <Computer::displayFeatures()>:
c0007110:	c3                   	ret    
c0007111:	90                   	nop

c0007112 <Computer::rdmsr(unsigned int)>:
c0007112:	83 ec 0c             	sub    esp,0xc
c0007115:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007119:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007120:	74 0a                	je     c000712c <Computer::rdmsr(unsigned int)+0x1a>
c0007122:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007126:	0f 32                	rdmsr  
c0007128:	83 c4 0c             	add    esp,0xc
c000712b:	c3                   	ret    
c000712c:	83 ec 0c             	sub    esp,0xc
c000712f:	68 d6 0c 02 c0       	push   0xc0020cd6
c0007134:	e8 1e a5 00 00       	call   c0011657 <KePanic(char const*)>
c0007139:	83 c4 10             	add    esp,0x10
c000713c:	eb e4                	jmp    c0007122 <Computer::rdmsr(unsigned int)+0x10>

c000713e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000713e:	57                   	push   edi
c000713f:	56                   	push   esi
c0007140:	83 ec 04             	sub    esp,0x4
c0007143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007147:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000714b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000714f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007156:	74 10                	je     c0007168 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007158:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000715c:	89 f0                	mov    eax,esi
c000715e:	89 fa                	mov    edx,edi
c0007160:	0f 30                	wrmsr  
c0007162:	83 c4 04             	add    esp,0x4
c0007165:	5e                   	pop    esi
c0007166:	5f                   	pop    edi
c0007167:	c3                   	ret    
c0007168:	83 ec 0c             	sub    esp,0xc
c000716b:	68 dc 0c 02 c0       	push   0xc0020cdc
c0007170:	e8 e2 a4 00 00       	call   c0011657 <KePanic(char const*)>
c0007175:	83 c4 10             	add    esp,0x10
c0007178:	eb de                	jmp    c0007158 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000717a <Computer::shutdown()>:
c000717a:	83 ec 0c             	sub    esp,0xc
c000717d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007181:	8b 10                	mov    edx,DWORD PTR [eax]
c0007183:	6a 00                	push   0x0
c0007185:	6a 00                	push   0x0
c0007187:	6a 00                	push   0x0
c0007189:	50                   	push   eax
c000718a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000718d:	83 c4 1c             	add    esp,0x1c
c0007190:	c3                   	ret    
c0007191:	90                   	nop

c0007192 <Computer::restart()>:
c0007192:	83 ec 0c             	sub    esp,0xc
c0007195:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007199:	8b 10                	mov    edx,DWORD PTR [eax]
c000719b:	6a 00                	push   0x0
c000719d:	6a 00                	push   0x0
c000719f:	6a 01                	push   0x1
c00071a1:	50                   	push   eax
c00071a2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00071a5:	83 c4 1c             	add    esp,0x1c
c00071a8:	c3                   	ret    
c00071a9:	90                   	nop

c00071aa <Computer::sleep()>:
c00071aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071ae:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c00071b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00071b8:	e9 a7 8c 00 00       	jmp    c000fe64 <ACPI::sleep()>
c00071bd:	90                   	nop

c00071be <Computer::nmiEnabled()>:
c00071be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071c2:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c00071c8:	c3                   	ret    
c00071c9:	90                   	nop

c00071ca <Computer::readCMOS(unsigned char)>:
c00071ca:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00071ce:	31 d2                	xor    edx,edx
c00071d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071d4:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071db:	75 02                	jne    c00071df <Computer::readCMOS(unsigned char)+0x15>
c00071dd:	b2 80                	mov    dl,0x80
c00071df:	09 d0                	or     eax,edx
c00071e1:	e6 70                	out    0x70,al
c00071e3:	e4 71                	in     al,0x71
c00071e5:	c3                   	ret    

c00071e6 <Computer::enableNMI(bool)>:
c00071e6:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071ee:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071f4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071fc:	eb cc                	jmp    c00071ca <Computer::readCMOS(unsigned char)>

c00071fe <Computer::open(int, int, void*)>:
c00071fe:	56                   	push   esi
c00071ff:	53                   	push   ebx
c0007200:	83 ec 10             	sub    esp,0x10
c0007203:	f6 05 d0 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed0,0x4
c000720a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000720e:	68 e2 0c 02 c0       	push   0xc0020ce2
c0007213:	0f 94 05 a0 38 02 c0 	sete   BYTE PTR ds:0xc00238a0
c000721a:	e8 3a 9d 00 00       	call   c0010f59 <KeSetBootMessage(char const*)>
c000721f:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0007226:	e8 d8 08 00 00       	call   c0007b03 <malloc>
c000722b:	89 04 24             	mov    DWORD PTR [esp],eax
c000722e:	89 c6                	mov    esi,eax
c0007230:	e8 a3 87 00 00       	call   c000f9d8 <ACPI::ACPI()>
c0007235:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000723b:	58                   	pop    eax
c000723c:	5a                   	pop    edx
c000723d:	56                   	push   esi
c000723e:	53                   	push   ebx
c000723f:	e8 8c 57 00 00       	call   c000c9d0 <Device::addChild(Device*)>
c0007244:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007247:	e8 9e fc ff ff       	call   c0006eea <Computer::detectFeatures()>
c000724c:	59                   	pop    ecx
c000724d:	5e                   	pop    esi
c000724e:	6a 01                	push   0x1
c0007250:	53                   	push   ebx
c0007251:	e8 90 ff ff ff       	call   c00071e6 <Computer::enableNMI(bool)>
c0007256:	c7 04 24 fa 0c 02 c0 	mov    DWORD PTR [esp],0xc0020cfa
c000725d:	e8 f7 9c 00 00       	call   c0010f59 <KeSetBootMessage(char const*)>
c0007262:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007269:	e8 95 08 00 00       	call   c0007b03 <malloc>
c000726e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007271:	89 c6                	mov    esi,eax
c0007273:	e8 d2 91 00 00       	call   c001044a <CPU::CPU()>
c0007278:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000727e:	58                   	pop    eax
c000727f:	5a                   	pop    edx
c0007280:	56                   	push   esi
c0007281:	53                   	push   ebx
c0007282:	e8 49 57 00 00       	call   c000c9d0 <Device::addChild(Device*)>
c0007287:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000728d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007291:	8b 10                	mov    edx,DWORD PTR [eax]
c0007293:	51                   	push   ecx
c0007294:	6a 00                	push   0x0
c0007296:	6a 00                	push   0x0
c0007298:	50                   	push   eax
c0007299:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000729c:	83 c4 14             	add    esp,0x14
c000729f:	68 d0 0d 02 c0       	push   0xc0020dd0
c00072a4:	e8 b0 9c 00 00       	call   c0010f59 <KeSetBootMessage(char const*)>
c00072a9:	e8 b8 0d 01 00       	call   c0018066 <HalInitialiseCoprocessor()>
c00072ae:	c7 04 24 14 0d 02 c0 	mov    DWORD PTR [esp],0xc0020d14
c00072b5:	e8 9f 9c 00 00       	call   c0010f59 <KeSetBootMessage(char const*)>
c00072ba:	c7 04 24 fb 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cfb
c00072c1:	e8 9a ed 00 00       	call   c0016060 <setupMultitasking(void (*)())>
c00072c6:	83 c4 14             	add    esp,0x14
c00072c9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00072ce:	5b                   	pop    ebx
c00072cf:	5e                   	pop    esi
c00072d0:	c3                   	ret    
c00072d1:	90                   	nop

c00072d2 <Computer::disableNMI()>:
c00072d2:	6a 00                	push   0x0
c00072d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072d8:	50                   	push   eax
c00072d9:	e8 08 ff ff ff       	call   c00071e6 <Computer::enableNMI(bool)>
c00072de:	5a                   	pop    edx
c00072df:	59                   	pop    ecx
c00072e0:	c3                   	ret    
c00072e1:	90                   	nop

c00072e2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072e2:	53                   	push   ebx
c00072e3:	b2 80                	mov    dl,0x80
c00072e5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072ed:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072f1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072f8:	74 02                	je     c00072fc <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072fa:	31 d2                	xor    edx,edx
c00072fc:	09 d0                	or     eax,edx
c00072fe:	e6 70                	out    0x70,al
c0007300:	88 c8                	mov    al,cl
c0007302:	e6 71                	out    0x71,al
c0007304:	5b                   	pop    ebx
c0007305:	c3                   	ret    

c0007306 <Computer::handleNMI()>:
c0007306:	56                   	push   esi
c0007307:	53                   	push   ebx
c0007308:	83 ec 10             	sub    esp,0x10
c000730b:	e4 92                	in     al,0x92
c000730d:	89 c6                	mov    esi,eax
c000730f:	e4 61                	in     al,0x61
c0007311:	68 2f 0d 02 c0       	push   0xc0020d2f
c0007316:	88 c3                	mov    bl,al
c0007318:	e8 1d 36 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000731d:	83 c4 10             	add    esp,0x10
c0007320:	83 e6 10             	and    esi,0x10
c0007323:	75 10                	jne    c0007335 <Computer::handleNMI()+0x2f>
c0007325:	f6 c3 40             	test   bl,0x40
c0007328:	75 20                	jne    c000734a <Computer::handleNMI()+0x44>
c000732a:	80 e3 80             	and    bl,0x80
c000732d:	75 30                	jne    c000735f <Computer::handleNMI()+0x59>
c000732f:	83 c4 04             	add    esp,0x4
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	c3                   	ret    
c0007335:	83 ec 0c             	sub    esp,0xc
c0007338:	68 40 0d 02 c0       	push   0xc0020d40
c000733d:	e8 15 a3 00 00       	call   c0011657 <KePanic(char const*)>
c0007342:	83 c4 10             	add    esp,0x10
c0007345:	f6 c3 40             	test   bl,0x40
c0007348:	74 e0                	je     c000732a <Computer::handleNMI()+0x24>
c000734a:	83 ec 0c             	sub    esp,0xc
c000734d:	68 4d 0d 02 c0       	push   0xc0020d4d
c0007352:	e8 00 a3 00 00       	call   c0011657 <KePanic(char const*)>
c0007357:	83 c4 10             	add    esp,0x10
c000735a:	80 e3 80             	and    bl,0x80
c000735d:	74 d0                	je     c000732f <Computer::handleNMI()+0x29>
c000735f:	c7 44 24 10 57 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020d57
c0007367:	83 c4 04             	add    esp,0x4
c000736a:	5b                   	pop    ebx
c000736b:	5e                   	pop    esi
c000736c:	e9 e6 a2 00 00       	jmp    c0011657 <KePanic(char const*)>
c0007371:	90                   	nop

c0007372 <GDTEntry::setBase(unsigned int)>:
c0007372:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007376:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000737a:	89 c1                	mov    ecx,eax
c000737c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007380:	c1 e9 10             	shr    ecx,0x10
c0007383:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007386:	c1 e8 18             	shr    eax,0x18
c0007389:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000738c:	c3                   	ret    
c000738d:	90                   	nop

c000738e <GDTEntry::setLimit(unsigned int)>:
c000738e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007392:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007396:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007399:	66 89 01             	mov    WORD PTR [ecx],ax
c000739c:	c1 e8 10             	shr    eax,0x10
c000739f:	83 e0 0f             	and    eax,0xf
c00073a2:	83 e2 f0             	and    edx,0xfffffff0
c00073a5:	09 d0                	or     eax,edx
c00073a7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00073aa:	c3                   	ret    
c00073ab:	90                   	nop

c00073ac <GDT::GDT()>:
c00073ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00073b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073ba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00073c0:	90                   	nop
c00073c1:	c3                   	ret    

c00073c2 <GDT::addEntry(GDTEntry)>:
c00073c2:	53                   	push   ebx
c00073c3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00073c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00073cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00073cf:	8b 02                	mov    eax,DWORD PTR [edx]
c00073d1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073d5:	8d 48 01             	lea    ecx,[eax+0x1]
c00073d8:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073dc:	c1 e0 03             	shl    eax,0x3
c00073df:	89 0a                	mov    DWORD PTR [edx],ecx
c00073e1:	5b                   	pop    ebx
c00073e2:	c3                   	ret    
c00073e3:	90                   	nop

c00073e4 <GDT::getNumberOfEntries()>:
c00073e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00073ea:	c3                   	ret    
c00073eb:	90                   	nop

c00073ec <GDT::flush()>:
c00073ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073f0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073f2:	83 c0 04             	add    eax,0x4
c00073f5:	a3 c2 6e 02 c0       	mov    ds:0xc0026ec2,eax
c00073fa:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0007401:	66 89 15 c0 6e 02 c0 	mov    WORD PTR ds:0xc0026ec0,dx
c0007408:	e9 4d 8f ff ff       	jmp    c000035a <loadGDT>
c000740d:	90                   	nop

c000740e <GDT::setup()>:
c000740e:	57                   	push   edi
c000740f:	56                   	push   esi
c0007410:	53                   	push   ebx
c0007411:	83 ec 30             	sub    esp,0x30
c0007414:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007418:	6a 00                	push   0x0
c000741a:	8d 74 24 14          	lea    esi,[esp+0x14]
c000741e:	56                   	push   esi
c000741f:	e8 4e ff ff ff       	call   c0007372 <GDTEntry::setBase(unsigned int)>
c0007424:	6a 00                	push   0x0
c0007426:	56                   	push   esi
c0007427:	e8 62 ff ff ff       	call   c000738e <GDTEntry::setLimit(unsigned int)>
c000742c:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007434:	6a 00                	push   0x0
c0007436:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000743a:	56                   	push   esi
c000743b:	e8 32 ff ff ff       	call   c0007372 <GDTEntry::setBase(unsigned int)>
c0007440:	68 ff ff ff 00       	push   0xffffff
c0007445:	56                   	push   esi
c0007446:	e8 43 ff ff ff       	call   c000738e <GDTEntry::setLimit(unsigned int)>
c000744b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000744f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007453:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007458:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000745c:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007461:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007465:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007469:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000746d:	89 f8                	mov    eax,edi
c000746f:	89 fa                	mov    edx,edi
c0007471:	80 e4 f7             	and    ah,0xf7
c0007474:	80 ce 60             	or     dh,0x60
c0007477:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000747b:	89 c7                	mov    edi,eax
c000747d:	80 cc 60             	or     ah,0x60
c0007480:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007484:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007488:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000748c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007490:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007494:	83 c4 20             	add    esp,0x20
c0007497:	6a 00                	push   0x0
c0007499:	8d 44 24 24          	lea    eax,[esp+0x24]
c000749d:	50                   	push   eax
c000749e:	e8 cf fe ff ff       	call   c0007372 <GDTEntry::setBase(unsigned int)>
c00074a3:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00074a7:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00074ab:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c00074af:	83 e0 3f             	and    eax,0x3f
c00074b2:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c00074b6:	6a 00                	push   0x0
c00074b8:	8d 44 24 34          	lea    eax,[esp+0x34]
c00074bc:	50                   	push   eax
c00074bd:	e8 b0 fe ff ff       	call   c0007372 <GDTEntry::setBase(unsigned int)>
c00074c2:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c00074c6:	83 e0 3f             	and    eax,0x3f
c00074c9:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c00074cd:	83 c4 0c             	add    esp,0xc
c00074d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074d8:	53                   	push   ebx
c00074d9:	e8 e4 fe ff ff       	call   c00073c2 <GDT::addEntry(GDTEntry)>
c00074de:	83 c4 0c             	add    esp,0xc
c00074e1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074e5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074e9:	53                   	push   ebx
c00074ea:	e8 d3 fe ff ff       	call   c00073c2 <GDT::addEntry(GDTEntry)>
c00074ef:	83 c4 0c             	add    esp,0xc
c00074f2:	57                   	push   edi
c00074f3:	56                   	push   esi
c00074f4:	53                   	push   ebx
c00074f5:	e8 c8 fe ff ff       	call   c00073c2 <GDT::addEntry(GDTEntry)>
c00074fa:	83 c4 0c             	add    esp,0xc
c00074fd:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007501:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007505:	53                   	push   ebx
c0007506:	e8 b7 fe ff ff       	call   c00073c2 <GDT::addEntry(GDTEntry)>
c000750b:	83 c4 0c             	add    esp,0xc
c000750e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007512:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007516:	53                   	push   ebx
c0007517:	e8 a6 fe ff ff       	call   c00073c2 <GDT::addEntry(GDTEntry)>
c000751c:	83 c4 0c             	add    esp,0xc
c000751f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007523:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007527:	53                   	push   ebx
c0007528:	e8 95 fe ff ff       	call   c00073c2 <GDT::addEntry(GDTEntry)>
c000752d:	83 c4 0c             	add    esp,0xc
c0007530:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007534:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007538:	53                   	push   ebx
c0007539:	e8 84 fe ff ff       	call   c00073c2 <GDT::addEntry(GDTEntry)>
c000753e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007541:	e8 a6 fe ff ff       	call   c00073ec <GDT::flush()>
c0007546:	83 c4 40             	add    esp,0x40
c0007549:	5b                   	pop    ebx
c000754a:	5e                   	pop    esi
c000754b:	5f                   	pop    edi
c000754c:	c3                   	ret    

c000754d <idleFunction(void*)>:
c000754d:	83 ec 0c             	sub    esp,0xc
c0007550:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007555:	48                   	dec    eax
c0007556:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000755b:	75 01                	jne    c000755e <idleFunction(void*)+0x11>
c000755d:	fb                   	sti    
c000755e:	e8 cf 07 01 00       	call   c0017d32 <HalSystemIdle()>
c0007563:	e8 5a 85 01 00       	call   c001fac2 <idleCommon()>
c0007568:	eb f4                	jmp    c000755e <idleFunction(void*)+0x11>
c000756a:	66 90                	xchg   ax,ax

c000756c <IDTEntry::IDTEntry(bool)>:
c000756c:	53                   	push   ebx
c000756d:	83 ec 04             	sub    esp,0x4
c0007570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007574:	88 04 24             	mov    BYTE PTR [esp],al
c0007577:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000757b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007581:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007585:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007589:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000758d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007590:	83 e2 f0             	and    edx,0xfffffff0
c0007593:	83 ca 0e             	or     edx,0xe
c0007596:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007599:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000759d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075a0:	83 e2 ef             	and    edx,0xffffffef
c00075a3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a6:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c00075aa:	85 c0                	test   eax,eax
c00075ac:	74 06                	je     c00075b4 <IDTEntry::IDTEntry(bool)+0x48>
c00075ae:	b2 03                	mov    dl,0x3
c00075b0:	eb 06                	jmp    c00075b8 <IDTEntry::IDTEntry(bool)+0x4c>
c00075b2:	66 90                	xchg   ax,ax
c00075b4:	b2 00                	mov    dl,0x0
c00075b6:	66 90                	xchg   ax,ax
c00075b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075bc:	83 e2 03             	and    edx,0x3
c00075bf:	89 d3                	mov    ebx,edx
c00075c1:	c1 e3 05             	shl    ebx,0x5
c00075c4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075c7:	83 e2 9f             	and    edx,0xffffff9f
c00075ca:	88 d1                	mov    cl,dl
c00075cc:	88 da                	mov    dl,bl
c00075ce:	09 ca                	or     edx,ecx
c00075d0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075d7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075da:	83 ca 80             	or     edx,0xffffff80
c00075dd:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075e0:	90                   	nop
c00075e1:	83 c4 04             	add    esp,0x4
c00075e4:	5b                   	pop    ebx
c00075e5:	c3                   	ret    

c00075e6 <IDTEntry::setOffset(unsigned int)>:
c00075e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075ee:	66 89 02             	mov    WORD PTR [edx],ax
c00075f1:	c1 e8 10             	shr    eax,0x10
c00075f4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075f8:	c3                   	ret    
c00075f9:	90                   	nop
c00075fa:	66 90                	xchg   ax,ax

c00075fc <IDT::IDT()>:
c00075fc:	90                   	nop
c00075fd:	c3                   	ret    

c00075fe <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007602:	83 c0 30             	add    eax,0x30
c0007605:	c3                   	ret    

c0007606 <IDT::addEntry(IDTEntry, int)>:
c0007606:	53                   	push   ebx
c0007607:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000760b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000760f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007613:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007617:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000761a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000761e:	5b                   	pop    ebx
c000761f:	c3                   	ret    

c0007620 <IDT::addEntry(int, void (*)(), bool)>:
c0007620:	53                   	push   ebx
c0007621:	83 ec 10             	sub    esp,0x10
c0007624:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0007629:	50                   	push   eax
c000762a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000762e:	53                   	push   ebx
c000762f:	e8 38 ff ff ff       	call   c000756c <IDTEntry::IDTEntry(bool)>
c0007634:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007638:	53                   	push   ebx
c0007639:	e8 a8 ff ff ff       	call   c00075e6 <IDTEntry::setOffset(unsigned int)>
c000763e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007642:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007646:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000764a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000764e:	e8 b3 ff ff ff       	call   c0007606 <IDT::addEntry(IDTEntry, int)>
c0007653:	83 c4 30             	add    esp,0x30
c0007656:	5b                   	pop    ebx
c0007657:	c3                   	ret    

c0007658 <IDT::flush()>:
c0007658:	66 c7 05 c8 6e 02 c0 ff 07 	mov    WORD PTR ds:0xc0026ec8,0x7ff
c0007661:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007665:	a3 ca 6e 02 c0       	mov    ds:0xc0026eca,eax
c000766a:	0f 01 1d c8 6e 02 c0 	lidtd  ds:0xc0026ec8
c0007671:	c3                   	ret    

c0007672 <IDT::setup()>:
c0007672:	57                   	push   edi
c0007673:	56                   	push   esi
c0007674:	53                   	push   ebx
c0007675:	83 ec 10             	sub    esp,0x10
c0007678:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000767c:	6a 00                	push   0x0
c000767e:	68 c0 f1 01 c0       	push   0xc001f1c0
c0007683:	6a 00                	push   0x0
c0007685:	53                   	push   ebx
c0007686:	e8 95 ff ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c000768b:	6a 00                	push   0x0
c000768d:	68 d0 f1 01 c0       	push   0xc001f1d0
c0007692:	6a 01                	push   0x1
c0007694:	53                   	push   ebx
c0007695:	e8 86 ff ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c000769a:	83 c4 20             	add    esp,0x20
c000769d:	6a 00                	push   0x0
c000769f:	68 da f1 01 c0       	push   0xc001f1da
c00076a4:	6a 02                	push   0x2
c00076a6:	53                   	push   ebx
c00076a7:	e8 74 ff ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00076ac:	6a 00                	push   0x0
c00076ae:	68 e4 f1 01 c0       	push   0xc001f1e4
c00076b3:	6a 03                	push   0x3
c00076b5:	53                   	push   ebx
c00076b6:	e8 65 ff ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00076bb:	83 c4 20             	add    esp,0x20
c00076be:	6a 00                	push   0x0
c00076c0:	68 ee f1 01 c0       	push   0xc001f1ee
c00076c5:	6a 04                	push   0x4
c00076c7:	53                   	push   ebx
c00076c8:	e8 53 ff ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00076cd:	6a 00                	push   0x0
c00076cf:	68 f8 f1 01 c0       	push   0xc001f1f8
c00076d4:	6a 05                	push   0x5
c00076d6:	53                   	push   ebx
c00076d7:	e8 44 ff ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00076dc:	83 c4 20             	add    esp,0x20
c00076df:	6a 00                	push   0x0
c00076e1:	68 02 f2 01 c0       	push   0xc001f202
c00076e6:	6a 06                	push   0x6
c00076e8:	53                   	push   ebx
c00076e9:	e8 32 ff ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00076ee:	6a 00                	push   0x0
c00076f0:	68 0c f2 01 c0       	push   0xc001f20c
c00076f5:	6a 07                	push   0x7
c00076f7:	53                   	push   ebx
c00076f8:	e8 23 ff ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00076fd:	83 c4 20             	add    esp,0x20
c0007700:	6a 00                	push   0x0
c0007702:	68 16 f2 01 c0       	push   0xc001f216
c0007707:	6a 08                	push   0x8
c0007709:	53                   	push   ebx
c000770a:	e8 11 ff ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c000770f:	6a 00                	push   0x0
c0007711:	68 1e f2 01 c0       	push   0xc001f21e
c0007716:	6a 09                	push   0x9
c0007718:	53                   	push   ebx
c0007719:	e8 02 ff ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c000771e:	83 c4 20             	add    esp,0x20
c0007721:	6a 00                	push   0x0
c0007723:	68 28 f2 01 c0       	push   0xc001f228
c0007728:	6a 0a                	push   0xa
c000772a:	53                   	push   ebx
c000772b:	e8 f0 fe ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c0007730:	6a 00                	push   0x0
c0007732:	68 30 f2 01 c0       	push   0xc001f230
c0007737:	6a 0b                	push   0xb
c0007739:	53                   	push   ebx
c000773a:	e8 e1 fe ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c000773f:	83 c4 20             	add    esp,0x20
c0007742:	6a 00                	push   0x0
c0007744:	68 38 f2 01 c0       	push   0xc001f238
c0007749:	6a 0c                	push   0xc
c000774b:	53                   	push   ebx
c000774c:	e8 cf fe ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c0007751:	6a 00                	push   0x0
c0007753:	68 40 f2 01 c0       	push   0xc001f240
c0007758:	6a 0d                	push   0xd
c000775a:	53                   	push   ebx
c000775b:	e8 c0 fe ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c0007760:	83 c4 20             	add    esp,0x20
c0007763:	6a 00                	push   0x0
c0007765:	68 5a f2 01 c0       	push   0xc001f25a
c000776a:	6a 0e                	push   0xe
c000776c:	53                   	push   ebx
c000776d:	e8 ae fe ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c0007772:	6a 00                	push   0x0
c0007774:	68 62 f2 01 c0       	push   0xc001f262
c0007779:	6a 0f                	push   0xf
c000777b:	53                   	push   ebx
c000777c:	e8 9f fe ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c0007781:	83 c4 20             	add    esp,0x20
c0007784:	6a 00                	push   0x0
c0007786:	68 6c f2 01 c0       	push   0xc001f26c
c000778b:	6a 10                	push   0x10
c000778d:	53                   	push   ebx
c000778e:	e8 8d fe ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c0007793:	6a 00                	push   0x0
c0007795:	68 76 f2 01 c0       	push   0xc001f276
c000779a:	6a 11                	push   0x11
c000779c:	53                   	push   ebx
c000779d:	e8 7e fe ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00077a2:	83 c4 20             	add    esp,0x20
c00077a5:	6a 00                	push   0x0
c00077a7:	68 80 f2 01 c0       	push   0xc001f280
c00077ac:	6a 12                	push   0x12
c00077ae:	53                   	push   ebx
c00077af:	e8 6c fe ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00077b4:	6a 01                	push   0x1
c00077b6:	68 1a f3 01 c0       	push   0xc001f31a
c00077bb:	6a 60                	push   0x60
c00077bd:	53                   	push   ebx
c00077be:	e8 5d fe ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00077c3:	83 c4 20             	add    esp,0x20
c00077c6:	6a 00                	push   0x0
c00077c8:	68 21 f3 01 c0       	push   0xc001f321
c00077cd:	6a 20                	push   0x20
c00077cf:	53                   	push   ebx
c00077d0:	e8 4b fe ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00077d5:	6a 00                	push   0x0
c00077d7:	68 0c f3 01 c0       	push   0xc001f30c
c00077dc:	6a 21                	push   0x21
c00077de:	53                   	push   ebx
c00077df:	e8 3c fe ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00077e4:	83 c4 20             	add    esp,0x20
c00077e7:	6a 00                	push   0x0
c00077e9:	68 13 f3 01 c0       	push   0xc001f313
c00077ee:	6a 22                	push   0x22
c00077f0:	53                   	push   ebx
c00077f1:	e8 2a fe ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00077f6:	6a 00                	push   0x0
c00077f8:	68 8a f2 01 c0       	push   0xc001f28a
c00077fd:	6a 23                	push   0x23
c00077ff:	53                   	push   ebx
c0007800:	e8 1b fe ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c0007805:	83 c4 20             	add    esp,0x20
c0007808:	6a 00                	push   0x0
c000780a:	68 94 f2 01 c0       	push   0xc001f294
c000780f:	6a 24                	push   0x24
c0007811:	53                   	push   ebx
c0007812:	e8 09 fe ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c0007817:	6a 00                	push   0x0
c0007819:	68 9e f2 01 c0       	push   0xc001f29e
c000781e:	6a 25                	push   0x25
c0007820:	53                   	push   ebx
c0007821:	e8 fa fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c0007826:	83 c4 20             	add    esp,0x20
c0007829:	6a 00                	push   0x0
c000782b:	68 a8 f2 01 c0       	push   0xc001f2a8
c0007830:	6a 26                	push   0x26
c0007832:	53                   	push   ebx
c0007833:	e8 e8 fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c0007838:	6a 00                	push   0x0
c000783a:	68 b2 f2 01 c0       	push   0xc001f2b2
c000783f:	6a 27                	push   0x27
c0007841:	53                   	push   ebx
c0007842:	e8 d9 fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c0007847:	83 c4 20             	add    esp,0x20
c000784a:	6a 00                	push   0x0
c000784c:	68 bc f2 01 c0       	push   0xc001f2bc
c0007851:	6a 28                	push   0x28
c0007853:	53                   	push   ebx
c0007854:	e8 c7 fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c0007859:	6a 00                	push   0x0
c000785b:	68 c6 f2 01 c0       	push   0xc001f2c6
c0007860:	6a 29                	push   0x29
c0007862:	53                   	push   ebx
c0007863:	e8 b8 fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c0007868:	83 c4 20             	add    esp,0x20
c000786b:	6a 00                	push   0x0
c000786d:	68 d0 f2 01 c0       	push   0xc001f2d0
c0007872:	6a 2a                	push   0x2a
c0007874:	53                   	push   ebx
c0007875:	e8 a6 fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c000787a:	6a 00                	push   0x0
c000787c:	68 da f2 01 c0       	push   0xc001f2da
c0007881:	6a 2b                	push   0x2b
c0007883:	53                   	push   ebx
c0007884:	e8 97 fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	6a 00                	push   0x0
c000788e:	68 e4 f2 01 c0       	push   0xc001f2e4
c0007893:	6a 2c                	push   0x2c
c0007895:	53                   	push   ebx
c0007896:	e8 85 fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c000789b:	6a 00                	push   0x0
c000789d:	68 ee f2 01 c0       	push   0xc001f2ee
c00078a2:	6a 2d                	push   0x2d
c00078a4:	53                   	push   ebx
c00078a5:	e8 76 fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00078aa:	83 c4 20             	add    esp,0x20
c00078ad:	6a 00                	push   0x0
c00078af:	68 f8 f2 01 c0       	push   0xc001f2f8
c00078b4:	6a 2e                	push   0x2e
c00078b6:	53                   	push   ebx
c00078b7:	e8 64 fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00078bc:	6a 00                	push   0x0
c00078be:	68 02 f3 01 c0       	push   0xc001f302
c00078c3:	6a 2f                	push   0x2f
c00078c5:	53                   	push   ebx
c00078c6:	e8 55 fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00078cb:	83 c4 20             	add    esp,0x20
c00078ce:	6a 00                	push   0x0
c00078d0:	68 5c f4 01 c0       	push   0xc001f45c
c00078d5:	6a 30                	push   0x30
c00078d7:	53                   	push   ebx
c00078d8:	e8 43 fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00078dd:	6a 00                	push   0x0
c00078df:	68 66 f4 01 c0       	push   0xc001f466
c00078e4:	6a 31                	push   0x31
c00078e6:	53                   	push   ebx
c00078e7:	e8 34 fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00078ec:	83 c4 20             	add    esp,0x20
c00078ef:	6a 00                	push   0x0
c00078f1:	68 70 f4 01 c0       	push   0xc001f470
c00078f6:	6a 32                	push   0x32
c00078f8:	53                   	push   ebx
c00078f9:	e8 22 fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c00078fe:	6a 00                	push   0x0
c0007900:	68 7a f4 01 c0       	push   0xc001f47a
c0007905:	6a 33                	push   0x33
c0007907:	53                   	push   ebx
c0007908:	e8 13 fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c000790d:	83 c4 20             	add    esp,0x20
c0007910:	6a 00                	push   0x0
c0007912:	68 84 f4 01 c0       	push   0xc001f484
c0007917:	6a 34                	push   0x34
c0007919:	53                   	push   ebx
c000791a:	e8 01 fd ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c000791f:	6a 00                	push   0x0
c0007921:	68 8e f4 01 c0       	push   0xc001f48e
c0007926:	6a 35                	push   0x35
c0007928:	53                   	push   ebx
c0007929:	e8 f2 fc ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c000792e:	83 c4 20             	add    esp,0x20
c0007931:	6a 00                	push   0x0
c0007933:	68 98 f4 01 c0       	push   0xc001f498
c0007938:	6a 36                	push   0x36
c000793a:	53                   	push   ebx
c000793b:	e8 e0 fc ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c0007940:	6a 00                	push   0x0
c0007942:	68 a2 f4 01 c0       	push   0xc001f4a2
c0007947:	6a 37                	push   0x37
c0007949:	53                   	push   ebx
c000794a:	e8 d1 fc ff ff       	call   c0007620 <IDT::addEntry(int, void (*)(), bool)>
c000794f:	83 c4 1c             	add    esp,0x1c
c0007952:	6a 03                	push   0x3
c0007954:	6a 02                	push   0x2
c0007956:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c000795c:	e8 d5 24 00 00       	call   c0009e36 <VAS::allocatePages(int, int)>
c0007961:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007968:	89 c6                	mov    esi,eax
c000796a:	e8 94 01 00 00       	call   c0007b03 <malloc>
c000796f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007975:	89 04 24             	mov    DWORD PTR [esp],eax
c0007978:	89 c7                	mov    edi,eax
c000797a:	e8 dd 15 00 00       	call   c0008f5c <TSS::TSS()>
c000797f:	83 c4 0c             	add    esp,0xc
c0007982:	68 16 f2 01 c0       	push   0xc001f216
c0007987:	56                   	push   esi
c0007988:	57                   	push   edi
c0007989:	e8 12 16 00 00       	call   c0008fa0 <TSS::setup(unsigned long, unsigned long)>
c000798e:	89 c6                	mov    esi,eax
c0007990:	58                   	pop    eax
c0007991:	5a                   	pop    edx
c0007992:	6a 00                	push   0x0
c0007994:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007998:	50                   	push   eax
c0007999:	e8 ce fb ff ff       	call   c000756c <IDTEntry::IDTEntry(bool)>
c000799e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079a2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00079a7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00079ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00079b2:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c00079b8:	80 ce 05             	or     dh,0x5
c00079bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079bf:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c00079c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079c6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00079c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00079cc:	e8 87 fc ff ff       	call   c0007658 <IDT::flush()>
c00079d1:	83 c4 20             	add    esp,0x20
c00079d4:	5b                   	pop    ebx
c00079d5:	5e                   	pop    esi
c00079d6:	5f                   	pop    edi
c00079d7:	c3                   	ret    

c00079d8 <sbrk>:
c00079d8:	55                   	push   ebp
c00079d9:	57                   	push   edi
c00079da:	56                   	push   esi
c00079db:	53                   	push   ebx
c00079dc:	83 ec 1c             	sub    esp,0x1c
c00079df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079e3:	85 c0                	test   eax,eax
c00079e5:	74 66                	je     c0007a4d <sbrk+0x75>
c00079e7:	78 6b                	js     c0007a54 <sbrk+0x7c>
c00079e9:	8b 15 80 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023880
c00079ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079f3:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079f9:	05 ff 0f 00 00       	add    eax,0xfff
c00079fe:	0f 49 e8             	cmovns ebp,eax
c0007a01:	c1 fd 0c             	sar    ebp,0xc
c0007a04:	bb 00 00 00 00       	mov    ebx,0x0
c0007a09:	8b 35 b0 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fb0
c0007a0f:	8b 3d 80 38 02 c0    	mov    edi,DWORD PTR ds:0xc0023880
c0007a15:	e8 f8 03 00 00       	call   c0007e12 <Phys::allocatePage()>
c0007a1a:	68 01 04 00 00       	push   0x401
c0007a1f:	57                   	push   edi
c0007a20:	50                   	push   eax
c0007a21:	56                   	push   esi
c0007a22:	e8 07 23 00 00       	call   c0009d2e <VAS::mapPage(unsigned long, unsigned long, int)>
c0007a27:	81 05 80 38 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023880,0x1000
c0007a31:	83 c3 01             	add    ebx,0x1
c0007a34:	83 c4 10             	add    esp,0x10
c0007a37:	39 dd                	cmp    ebp,ebx
c0007a39:	75 ce                	jne    c0007a09 <sbrk+0x31>
c0007a3b:	0f 20 d8             	mov    eax,cr3
c0007a3e:	0f 22 d8             	mov    cr3,eax
c0007a41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a45:	83 c4 1c             	add    esp,0x1c
c0007a48:	5b                   	pop    ebx
c0007a49:	5e                   	pop    esi
c0007a4a:	5f                   	pop    edi
c0007a4b:	5d                   	pop    ebp
c0007a4c:	c3                   	ret    
c0007a4d:	a1 80 38 02 c0       	mov    eax,ds:0xc0023880
c0007a52:	eb f1                	jmp    c0007a45 <sbrk+0x6d>
c0007a54:	83 ec 08             	sub    esp,0x8
c0007a57:	50                   	push   eax
c0007a58:	68 20 0e 02 c0       	push   0xc0020e20
c0007a5d:	e8 d8 2e 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0007a62:	83 c4 10             	add    esp,0x10
c0007a65:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a6a:	eb d9                	jmp    c0007a45 <sbrk+0x6d>

c0007a6c <mmap>:
c0007a6c:	83 ec 18             	sub    esp,0x18
c0007a6f:	68 50 0e 02 c0       	push   0xc0020e50
c0007a74:	e8 de 9b 00 00       	call   c0011657 <KePanic(char const*)>
c0007a79:	b8 00 00 00 00       	mov    eax,0x0
c0007a7e:	83 c4 1c             	add    esp,0x1c
c0007a81:	c3                   	ret    

c0007a82 <munmap>:
c0007a82:	83 ec 18             	sub    esp,0x18
c0007a85:	68 55 0e 02 c0       	push   0xc0020e55
c0007a8a:	e8 c8 9b 00 00       	call   c0011657 <KePanic(char const*)>
c0007a8f:	b8 00 00 00 00       	mov    eax,0x0
c0007a94:	83 c4 1c             	add    esp,0x1c
c0007a97:	c3                   	ret    

c0007a98 <liballoc_lock()>:
c0007a98:	fa                   	cli    
c0007a99:	83 05 c8 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6c8,0x1
c0007aa0:	b8 00 00 00 00       	mov    eax,0x0
c0007aa5:	c3                   	ret    

c0007aa6 <liballoc_unlock()>:
c0007aa6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007aab:	83 e8 01             	sub    eax,0x1
c0007aae:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ab3:	75 01                	jne    c0007ab6 <liballoc_unlock()+0x10>
c0007ab5:	fb                   	sti    
c0007ab6:	b8 00 00 00 00       	mov    eax,0x0
c0007abb:	c3                   	ret    

c0007abc <liballoc_alloc(int)>:
c0007abc:	83 ec 10             	sub    esp,0x10
c0007abf:	6a 01                	push   0x1
c0007ac1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007ac5:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007acb:	e8 66 23 00 00       	call   c0009e36 <VAS::allocatePages(int, int)>
c0007ad0:	83 c4 1c             	add    esp,0x1c
c0007ad3:	c3                   	ret    

c0007ad4 <liballoc_free(void*, int)>:
c0007ad4:	83 ec 14             	sub    esp,0x14
c0007ad7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007adb:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007ae1:	e8 90 1f 00 00       	call   c0009a76 <VAS::freeAllocatedPages(unsigned long)>
c0007ae6:	b8 00 00 00 00       	mov    eax,0x0
c0007aeb:	83 c4 1c             	add    esp,0x1c
c0007aee:	c3                   	ret    

c0007aef <realloc>:
c0007aef:	83 ec 14             	sub    esp,0x14
c0007af2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007afa:	e8 22 9b ff ff       	call   c0001621 <dlrealloc>
c0007aff:	83 c4 1c             	add    esp,0x1c
c0007b02:	c3                   	ret    

c0007b03 <malloc>:
c0007b03:	83 ec 18             	sub    esp,0x18
c0007b06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007b0a:	e8 d5 95 ff ff       	call   c00010e4 <dlmalloc>
c0007b0f:	83 c4 1c             	add    esp,0x1c
c0007b12:	c3                   	ret    

c0007b13 <free>:
c0007b13:	83 ec 18             	sub    esp,0x18
c0007b16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007b1a:	e8 67 92 ff ff       	call   c0000d86 <dlfree>
c0007b1f:	83 c4 1c             	add    esp,0x1c
c0007b22:	c3                   	ret    

c0007b23 <rfree>:
c0007b23:	83 ec 18             	sub    esp,0x18
c0007b26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007b2a:	e8 57 92 ff ff       	call   c0000d86 <dlfree>
c0007b2f:	83 c4 1c             	add    esp,0x1c
c0007b32:	c3                   	ret    

c0007b33 <calloc>:
c0007b33:	56                   	push   esi
c0007b34:	53                   	push   ebx
c0007b35:	83 ec 10             	sub    esp,0x10
c0007b38:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b3c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b41:	53                   	push   ebx
c0007b42:	e8 bc ff ff ff       	call   c0007b03 <malloc>
c0007b47:	89 c6                	mov    esi,eax
c0007b49:	83 c4 0c             	add    esp,0xc
c0007b4c:	53                   	push   ebx
c0007b4d:	6a 00                	push   0x0
c0007b4f:	50                   	push   eax
c0007b50:	e8 9b 89 ff ff       	call   c00004f0 <memset>
c0007b55:	89 f0                	mov    eax,esi
c0007b57:	83 c4 14             	add    esp,0x14
c0007b5a:	5b                   	pop    ebx
c0007b5b:	5e                   	pop    esi
c0007b5c:	c3                   	ret    

c0007b5d <KeEntryPoint>:
c0007b5d:	57                   	push   edi
c0007b5e:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b63:	56                   	push   esi
c0007b64:	31 f6                	xor    esi,esi
c0007b66:	53                   	push   ebx
c0007b67:	89 fa                	mov    edx,edi
c0007b69:	83 ec 2c             	sub    esp,0x2c
c0007b6c:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b71:	a3 d0 6e 02 c0       	mov    ds:0xc0026ed0,eax
c0007b76:	89 f0                	mov    eax,esi
c0007b78:	ee                   	out    dx,al
c0007b79:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b7e:	b0 80                	mov    al,0x80
c0007b80:	89 da                	mov    edx,ebx
c0007b82:	ee                   	out    dx,al
c0007b83:	b1 03                	mov    cl,0x3
c0007b85:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b8a:	88 c8                	mov    al,cl
c0007b8c:	ee                   	out    dx,al
c0007b8d:	89 f0                	mov    eax,esi
c0007b8f:	89 fa                	mov    edx,edi
c0007b91:	ee                   	out    dx,al
c0007b92:	88 c8                	mov    al,cl
c0007b94:	89 da                	mov    edx,ebx
c0007b96:	ee                   	out    dx,al
c0007b97:	b0 c7                	mov    al,0xc7
c0007b99:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b9e:	ee                   	out    dx,al
c0007b9f:	b0 0b                	mov    al,0xb
c0007ba1:	ba fc 03 00 00       	mov    edx,0x3fc
c0007ba6:	ee                   	out    dx,al
c0007ba7:	68 5c 0e 02 c0       	push   0xc0020e5c
c0007bac:	e8 89 2d 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0007bb1:	e8 27 93 00 00       	call   c0010edd <KeDisplaySplashScreen()>
c0007bb6:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007bbb:	05 ff 0f 00 00       	add    eax,0xfff
c0007bc0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007bc5:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc8:	e8 b3 03 00 00       	call   c0007f80 <Phys::physicalMemorySetup(unsigned int)>
c0007bcd:	e8 27 1c 00 00       	call   c00097f9 <Virt::virtualMemorySetup()>
c0007bd2:	e8 50 92 00 00       	call   c0010e27 <KeInitialiseAtexit()>
c0007bd7:	58                   	pop    eax
c0007bd8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007bdc:	53                   	push   ebx
c0007bdd:	e8 14 1f 00 00       	call   c0009af6 <VAS::VAS()>
c0007be2:	89 1d b0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fb0,ebx
c0007be8:	e8 6d 7e 01 00       	call   c001fa5a <_init>
c0007bed:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bf4:	e8 0a ff ff ff       	call   c0007b03 <malloc>
c0007bf9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfc:	89 c6                	mov    esi,eax
c0007bfe:	e8 35 f2 ff ff       	call   c0006e38 <Computer::Computer()>
c0007c03:	53                   	push   ebx
c0007c04:	6a 00                	push   0x0
c0007c06:	6a 00                	push   0x0
c0007c08:	56                   	push   esi
c0007c09:	89 35 b8 6e 02 c0    	mov    DWORD PTR ds:0xc0026eb8,esi
c0007c0f:	e8 ea f5 ff ff       	call   c00071fe <Computer::open(int, int, void*)>
c0007c14:	83 c4 14             	add    esp,0x14
c0007c17:	53                   	push   ebx
c0007c18:	e8 a3 1f 00 00       	call   c0009bc0 <VAS::~VAS()>
c0007c1d:	83 c4 30             	add    esp,0x30
c0007c20:	5b                   	pop    ebx
c0007c21:	5e                   	pop    esi
c0007c22:	5f                   	pop    edi
c0007c23:	c3                   	ret    

c0007c24 <Phys::allocateDMA(unsigned long)>:
c0007c24:	55                   	push   ebp
c0007c25:	31 ed                	xor    ebp,ebp
c0007c27:	57                   	push   edi
c0007c28:	56                   	push   esi
c0007c29:	31 f6                	xor    esi,esi
c0007c2b:	53                   	push   ebx
c0007c2c:	31 db                	xor    ebx,ebx
c0007c2e:	83 ec 1c             	sub    esp,0x1c
c0007c31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c35:	05 ff 0f 00 00       	add    eax,0xfff
c0007c3a:	c1 e8 0c             	shr    eax,0xc
c0007c3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c41:	31 c0                	xor    eax,eax
c0007c43:	eb 1b                	jmp    c0007c60 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c45:	8d 78 01             	lea    edi,[eax+0x1]
c0007c48:	85 c0                	test   eax,eax
c0007c4a:	0f 44 eb             	cmove  ebp,ebx
c0007c4d:	0f 44 f3             	cmove  esi,ebx
c0007c50:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c54:	74 37                	je     c0007c8d <Phys::allocateDMA(unsigned long)+0x69>
c0007c56:	89 f8                	mov    eax,edi
c0007c58:	83 c3 01             	add    ebx,0x1
c0007c5b:	83 fb 0f             	cmp    ebx,0xf
c0007c5e:	7f 13                	jg     c0007c73 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c60:	80 bb ec 6e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9114],0x0
c0007c67:	74 dc                	je     c0007c45 <Phys::allocateDMA(unsigned long)+0x21>
c0007c69:	31 c0                	xor    eax,eax
c0007c6b:	83 c3 01             	add    ebx,0x1
c0007c6e:	83 fb 0f             	cmp    ebx,0xf
c0007c71:	7e ed                	jle    c0007c60 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c73:	83 ec 0c             	sub    esp,0xc
c0007c76:	68 74 0e 02 c0       	push   0xc0020e74
c0007c7b:	e8 d7 99 00 00       	call   c0011657 <KePanic(char const*)>
c0007c80:	83 c4 10             	add    esp,0x10
c0007c83:	31 c0                	xor    eax,eax
c0007c85:	83 c4 1c             	add    esp,0x1c
c0007c88:	5b                   	pop    ebx
c0007c89:	5e                   	pop    esi
c0007c8a:	5f                   	pop    edi
c0007c8b:	5d                   	pop    ebp
c0007c8c:	c3                   	ret    
c0007c8d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c91:	89 f2                	mov    edx,esi
c0007c93:	c1 fa 04             	sar    edx,0x4
c0007c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c9a:	01 f1                	add    ecx,esi
c0007c9c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c9f:	83 e9 01             	sub    ecx,0x1
c0007ca2:	0f 48 ca             	cmovs  ecx,edx
c0007ca5:	c1 f9 04             	sar    ecx,0x4
c0007ca8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007cac:	74 06                	je     c0007cb4 <Phys::allocateDMA(unsigned long)+0x90>
c0007cae:	89 eb                	mov    ebx,ebp
c0007cb0:	31 c0                	xor    eax,eax
c0007cb2:	eb b7                	jmp    c0007c6b <Phys::allocateDMA(unsigned long)+0x47>
c0007cb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007cb8:	85 d2                	test   edx,edx
c0007cba:	74 17                	je     c0007cd3 <Phys::allocateDMA(unsigned long)+0xaf>
c0007cbc:	8d 96 ec 6e 02 c0    	lea    edx,[esi-0x3ffd9114]
c0007cc2:	8d 84 06 ed 6e 02 c0 	lea    eax,[esi+eax*1-0x3ffd9113]
c0007cc9:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007ccc:	83 c2 01             	add    edx,0x1
c0007ccf:	39 d0                	cmp    eax,edx
c0007cd1:	75 f6                	jne    c0007cc9 <Phys::allocateDMA(unsigned long)+0xa5>
c0007cd3:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007cd9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cdd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ce1:	01 c2                	add    edx,eax
c0007ce3:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007ce9:	85 c9                	test   ecx,ecx
c0007ceb:	74 17                	je     c0007d04 <Phys::allocateDMA(unsigned long)+0xe0>
c0007ced:	83 ec 0c             	sub    esp,0xc
c0007cf0:	68 74 0e 02 c0       	push   0xc0020e74
c0007cf5:	e8 5d 99 00 00       	call   c0011657 <KePanic(char const*)>
c0007cfa:	83 c4 10             	add    esp,0x10
c0007cfd:	89 f8                	mov    eax,edi
c0007cff:	e9 54 ff ff ff       	jmp    c0007c58 <Phys::allocateDMA(unsigned long)+0x34>
c0007d04:	c1 e6 0c             	shl    esi,0xc
c0007d07:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007d0d:	e9 73 ff ff ff       	jmp    c0007c85 <Phys::allocateDMA(unsigned long)+0x61>

c0007d12 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007d12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007d16:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007d1c:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007d21:	c1 ea 0c             	shr    edx,0xc
c0007d24:	29 d0                	sub    eax,edx
c0007d26:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007d2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d2f:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d34:	c1 e8 0c             	shr    eax,0xc
c0007d37:	85 d2                	test   edx,edx
c0007d39:	74 11                	je     c0007d4c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d3b:	05 ec 6e 02 c0       	add    eax,0xc0026eec
c0007d40:	01 c2                	add    edx,eax
c0007d42:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d45:	83 c0 01             	add    eax,0x1
c0007d48:	39 d0                	cmp    eax,edx
c0007d4a:	75 f6                	jne    c0007d42 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d4c:	c3                   	ret    

c0007d4d <Phys::setPageState(unsigned long, bool)>:
c0007d4d:	57                   	push   edi
c0007d4e:	56                   	push   esi
c0007d4f:	8b 35 84 38 02 c0    	mov    esi,DWORD PTR ds:0xc0023884
c0007d55:	53                   	push   ebx
c0007d56:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d5b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d63:	89 ca                	mov    edx,ecx
c0007d65:	83 e1 07             	and    ecx,0x7
c0007d68:	c1 ea 03             	shr    edx,0x3
c0007d6b:	0f b6 c0             	movzx  eax,al
c0007d6e:	d3 c3                	rol    ebx,cl
c0007d70:	01 d6                	add    esi,edx
c0007d72:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d75:	d3 e0                	shl    eax,cl
c0007d77:	21 fb                	and    ebx,edi
c0007d79:	88 1e                	mov    BYTE PTR [esi],bl
c0007d7b:	8b 1d 84 38 02 c0    	mov    ebx,DWORD PTR ds:0xc0023884
c0007d81:	01 da                	add    edx,ebx
c0007d83:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d85:	09 c8                	or     eax,ecx
c0007d87:	88 02                	mov    BYTE PTR [edx],al
c0007d89:	5b                   	pop    ebx
c0007d8a:	5e                   	pop    esi
c0007d8b:	5f                   	pop    edi
c0007d8c:	c3                   	ret    

c0007d8d <Phys::getPageState(unsigned long)>:
c0007d8d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d91:	8b 15 84 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023884
c0007d97:	89 c8                	mov    eax,ecx
c0007d99:	83 e1 07             	and    ecx,0x7
c0007d9c:	c1 e8 03             	shr    eax,0x3
c0007d9f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007da3:	d3 f8                	sar    eax,cl
c0007da5:	83 e0 01             	and    eax,0x1
c0007da8:	c3                   	ret    

c0007da9 <Phys::freePage(unsigned long)>:
c0007da9:	53                   	push   ebx
c0007daa:	83 ec 08             	sub    esp,0x8
c0007dad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007db1:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007db7:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007dbd:	76 41                	jbe    c0007e00 <Phys::freePage(unsigned long)+0x57>
c0007dbf:	c1 e8 0c             	shr    eax,0xc
c0007dc2:	50                   	push   eax
c0007dc3:	89 c3                	mov    ebx,eax
c0007dc5:	e8 c3 ff ff ff       	call   c0007d8d <Phys::getPageState(unsigned long)>
c0007dca:	5a                   	pop    edx
c0007dcb:	84 c0                	test   al,al
c0007dcd:	74 20                	je     c0007def <Phys::freePage(unsigned long)+0x46>
c0007dcf:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007dd4:	83 ec 08             	sub    esp,0x8
c0007dd7:	6a 00                	push   0x0
c0007dd9:	53                   	push   ebx
c0007dda:	83 e8 01             	sub    eax,0x1
c0007ddd:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007de2:	e8 66 ff ff ff       	call   c0007d4d <Phys::setPageState(unsigned long, bool)>
c0007de7:	83 c4 10             	add    esp,0x10
c0007dea:	83 c4 08             	add    esp,0x8
c0007ded:	5b                   	pop    ebx
c0007dee:	c3                   	ret    
c0007def:	c7 44 24 10 19 0f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020f19
c0007df7:	83 c4 08             	add    esp,0x8
c0007dfa:	5b                   	pop    ebx
c0007dfb:	e9 57 98 00 00       	jmp    c0011657 <KePanic(char const*)>
c0007e00:	68 00 10 00 00       	push   0x1000
c0007e05:	50                   	push   eax
c0007e06:	e8 07 ff ff ff       	call   c0007d12 <Phys::freeDMA(unsigned long, unsigned long)>
c0007e0b:	59                   	pop    ecx
c0007e0c:	5b                   	pop    ebx
c0007e0d:	83 c4 08             	add    esp,0x8
c0007e10:	5b                   	pop    ebx
c0007e11:	c3                   	ret    

c0007e12 <Phys::allocatePage()>:
c0007e12:	56                   	push   esi
c0007e13:	53                   	push   ebx
c0007e14:	83 ec 14             	sub    esp,0x14
c0007e17:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c0007e1d:	89 f3                	mov    ebx,esi
c0007e1f:	eb 0a                	jmp    c0007e2b <Phys::allocatePage()+0x19>
c0007e21:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0007e27:	39 de                	cmp    esi,ebx
c0007e29:	74 26                	je     c0007e51 <Phys::allocatePage()+0x3f>
c0007e2b:	53                   	push   ebx
c0007e2c:	e8 5c ff ff ff       	call   c0007d8d <Phys::getPageState(unsigned long)>
c0007e31:	5a                   	pop    edx
c0007e32:	84 c0                	test   al,al
c0007e34:	74 67                	je     c0007e9d <Phys::allocatePage()+0x8b>
c0007e36:	83 c3 01             	add    ebx,0x1
c0007e39:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e3f:	75 e0                	jne    c0007e21 <Phys::allocatePage()+0xf>
c0007e41:	c7 05 d8 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ed8,0x0
c0007e4b:	31 db                	xor    ebx,ebx
c0007e4d:	39 de                	cmp    esi,ebx
c0007e4f:	75 da                	jne    c0007e2b <Phys::allocatePage()+0x19>
c0007e51:	a0 fc 6e 02 c0       	mov    al,ds:0xc0026efc
c0007e56:	83 ec 0c             	sub    esp,0xc
c0007e59:	83 f0 01             	xor    eax,0x1
c0007e5c:	a2 fc 6e 02 c0       	mov    ds:0xc0026efc,al
c0007e61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e66:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e69:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e6f:	50                   	push   eax
c0007e70:	e8 79 27 00 00       	call   c000a5ee <VAS::scanForEviction()>
c0007e75:	83 c4 10             	add    esp,0x10
c0007e78:	85 c0                	test   eax,eax
c0007e7a:	75 48                	jne    c0007ec4 <Phys::allocatePage()+0xb2>
c0007e7c:	83 ec 0c             	sub    esp,0xc
c0007e7f:	68 9c 0e 02 c0       	push   0xc0020e9c
c0007e84:	e8 ce 97 00 00       	call   c0011657 <KePanic(char const*)>
c0007e89:	8b 1d d8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ed8
c0007e8f:	83 c4 10             	add    esp,0x10
c0007e92:	53                   	push   ebx
c0007e93:	e8 f5 fe ff ff       	call   c0007d8d <Phys::getPageState(unsigned long)>
c0007e98:	5a                   	pop    edx
c0007e99:	84 c0                	test   al,al
c0007e9b:	75 99                	jne    c0007e36 <Phys::allocatePage()+0x24>
c0007e9d:	6a 01                	push   0x1
c0007e9f:	53                   	push   ebx
c0007ea0:	e8 a8 fe ff ff       	call   c0007d4d <Phys::setPageState(unsigned long, bool)>
c0007ea5:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007eab:	59                   	pop    ecx
c0007eac:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0007eb1:	5b                   	pop    ebx
c0007eb2:	83 c2 01             	add    edx,0x1
c0007eb5:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007ebb:	c1 e0 0c             	shl    eax,0xc
c0007ebe:	83 c4 14             	add    esp,0x14
c0007ec1:	5b                   	pop    ebx
c0007ec2:	5e                   	pop    esi
c0007ec3:	c3                   	ret    
c0007ec4:	83 ec 08             	sub    esp,0x8
c0007ec7:	89 c2                	mov    edx,eax
c0007ec9:	6a 01                	push   0x1
c0007ecb:	c1 ea 0c             	shr    edx,0xc
c0007ece:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ed2:	52                   	push   edx
c0007ed3:	e8 75 fe ff ff       	call   c0007d4d <Phys::setPageState(unsigned long, bool)>
c0007ed8:	83 c4 10             	add    esp,0x10
c0007edb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007edf:	eb dd                	jmp    c0007ebe <Phys::allocatePage()+0xac>

c0007ee1 <Phys::allocateContiguousPages(int)>:
c0007ee1:	57                   	push   edi
c0007ee2:	56                   	push   esi
c0007ee3:	53                   	push   ebx
c0007ee4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007ee8:	fa                   	cli    
c0007ee9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007eee:	31 db                	xor    ebx,ebx
c0007ef0:	83 c0 01             	add    eax,0x1
c0007ef3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ef8:	85 db                	test   ebx,ebx
c0007efa:	75 11                	jne    c0007f0d <Phys::allocateContiguousPages(int)+0x2c>
c0007efc:	e8 11 ff ff ff       	call   c0007e12 <Phys::allocatePage()>
c0007f01:	83 fe 01             	cmp    esi,0x1
c0007f04:	89 c7                	mov    edi,eax
c0007f06:	74 21                	je     c0007f29 <Phys::allocateContiguousPages(int)+0x48>
c0007f08:	bb 01 00 00 00       	mov    ebx,0x1
c0007f0d:	e8 00 ff ff ff       	call   c0007e12 <Phys::allocatePage()>
c0007f12:	89 da                	mov    edx,ebx
c0007f14:	c1 e2 0c             	shl    edx,0xc
c0007f17:	01 fa                	add    edx,edi
c0007f19:	39 c2                	cmp    edx,eax
c0007f1b:	74 22                	je     c0007f3f <Phys::allocateContiguousPages(int)+0x5e>
c0007f1d:	83 fe 01             	cmp    esi,0x1
c0007f20:	bb 01 00 00 00       	mov    ebx,0x1
c0007f25:	89 c7                	mov    edi,eax
c0007f27:	75 e4                	jne    c0007f0d <Phys::allocateContiguousPages(int)+0x2c>
c0007f29:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007f2e:	83 e8 01             	sub    eax,0x1
c0007f31:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007f36:	75 01                	jne    c0007f39 <Phys::allocateContiguousPages(int)+0x58>
c0007f38:	fb                   	sti    
c0007f39:	5b                   	pop    ebx
c0007f3a:	89 f8                	mov    eax,edi
c0007f3c:	5e                   	pop    esi
c0007f3d:	5f                   	pop    edi
c0007f3e:	c3                   	ret    
c0007f3f:	83 c3 01             	add    ebx,0x1
c0007f42:	39 f3                	cmp    ebx,esi
c0007f44:	75 b2                	jne    c0007ef8 <Phys::allocateContiguousPages(int)+0x17>
c0007f46:	eb e1                	jmp    c0007f29 <Phys::allocateContiguousPages(int)+0x48>

c0007f48 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f48:	56                   	push   esi
c0007f49:	53                   	push   ebx
c0007f4a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f4e:	39 1d dc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026edc,ebx
c0007f54:	73 06                	jae    c0007f5c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f56:	89 1d dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,ebx
c0007f5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f60:	c1 eb 0c             	shr    ebx,0xc
c0007f63:	c1 e8 0c             	shr    eax,0xc
c0007f66:	39 d8                	cmp    eax,ebx
c0007f68:	73 13                	jae    c0007f7d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f6a:	6a 00                	push   0x0
c0007f6c:	50                   	push   eax
c0007f6d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f70:	e8 d8 fd ff ff       	call   c0007d4d <Phys::setPageState(unsigned long, bool)>
c0007f75:	39 f3                	cmp    ebx,esi
c0007f77:	89 f0                	mov    eax,esi
c0007f79:	5a                   	pop    edx
c0007f7a:	59                   	pop    ecx
c0007f7b:	75 ed                	jne    c0007f6a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f7d:	5b                   	pop    ebx
c0007f7e:	5e                   	pop    esi
c0007f7f:	c3                   	ret    

c0007f80 <Phys::physicalMemorySetup(unsigned int)>:
c0007f80:	55                   	push   ebp
c0007f81:	57                   	push   edi
c0007f82:	56                   	push   esi
c0007f83:	53                   	push   ebx
c0007f84:	31 db                	xor    ebx,ebx
c0007f86:	83 ec 40             	sub    esp,0x40
c0007f89:	6a 10                	push   0x10
c0007f8b:	6a 00                	push   0x0
c0007f8d:	68 ec 6e 02 c0       	push   0xc0026eec
c0007f92:	e8 59 85 ff ff       	call   c00004f0 <memset>
c0007f97:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f9b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007fa0:	05 00 10 00 00       	add    eax,0x1000
c0007fa5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007fa9:	5a                   	pop    edx
c0007faa:	59                   	pop    ecx
c0007fab:	50                   	push   eax
c0007fac:	68 2f 0f 02 c0       	push   0xc0020f2f
c0007fb1:	e8 84 29 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0007fb6:	83 c4 10             	add    esp,0x10
c0007fb9:	83 ec 08             	sub    esp,0x8
c0007fbc:	6a 01                	push   0x1
c0007fbe:	53                   	push   ebx
c0007fbf:	83 c3 01             	add    ebx,0x1
c0007fc2:	e8 86 fd ff ff       	call   c0007d4d <Phys::setPageState(unsigned long, bool)>
c0007fc7:	83 c4 10             	add    esp,0x10
c0007fca:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fd0:	75 e7                	jne    c0007fb9 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007fd2:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007fd9:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fe0:	c1 e0 08             	shl    eax,0x8
c0007fe3:	09 c2                	or     edx,eax
c0007fe5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007fe9:	0f 84 43 01 00 00    	je     c0008132 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0007fef:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007ff7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007ffc:	e9 82 00 00 00       	jmp    c0008083 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0008001:	ba 00 00 08 00       	mov    edx,0x80000
c0008006:	89 c1                	mov    ecx,eax
c0008008:	39 f2                	cmp    edx,esi
c000800a:	19 f9                	sbb    ecx,edi
c000800c:	0f 82 c0 00 00 00    	jb     c00080d2 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0008012:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008016:	89 c5                	mov    ebp,eax
c0008018:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000801c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008020:	19 cd                	sbb    ebp,ecx
c0008022:	0f 83 af 00 00 00    	jae    c00080d7 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0008028:	89 d6                	mov    esi,edx
c000802a:	ba 00 00 0a 00       	mov    edx,0xa0000
c000802f:	39 f2                	cmp    edx,esi
c0008031:	89 cf                	mov    edi,ecx
c0008033:	19 c8                	sbb    eax,ecx
c0008035:	73 07                	jae    c000803e <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0008037:	be 00 00 0a 00       	mov    esi,0xa0000
c000803c:	31 ff                	xor    edi,edi
c000803e:	89 f2                	mov    edx,esi
c0008040:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0008045:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000804b:	89 f9                	mov    ecx,edi
c000804d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008051:	83 d1 ff             	adc    ecx,0xffffffff
c0008054:	39 d0                	cmp    eax,edx
c0008056:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000805a:	b8 00 00 00 00       	mov    eax,0x0
c000805f:	19 c8                	sbb    eax,ecx
c0008061:	0f 82 9d 01 00 00    	jb     c0008204 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0008067:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000806b:	83 c3 18             	add    ebx,0x18
c000806e:	83 c6 01             	add    esi,0x1
c0008071:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008075:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008079:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000807d:	0f 84 bf 00 00 00    	je     c0008142 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008083:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008085:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008088:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000808b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000808e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008092:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008095:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008099:	01 f0                	add    eax,esi
c000809b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000809f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00080a3:	55                   	push   ebp
c00080a4:	11 fa                	adc    edx,edi
c00080a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00080aa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00080ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00080b2:	50                   	push   eax
c00080b3:	56                   	push   esi
c00080b4:	68 cc 0e 02 c0       	push   0xc0020ecc
c00080b9:	e8 7c 28 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c00080be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00080c2:	83 c4 10             	add    esp,0x10
c00080c5:	09 f8                	or     eax,edi
c00080c7:	75 79                	jne    c0008142 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c00080c9:	83 fd 01             	cmp    ebp,0x1
c00080cc:	0f 84 2f ff ff ff    	je     c0008001 <Phys::physicalMemorySetup(unsigned int)+0x81>
c00080d2:	83 fd 01             	cmp    ebp,0x1
c00080d5:	75 90                	jne    c0008067 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080d7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00080db:	31 d2                	xor    edx,edx
c00080dd:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00080e1:	89 c8                	mov    eax,ecx
c00080e3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080e7:	19 d1                	sbb    ecx,edx
c00080e9:	0f 82 78 ff ff ff    	jb     c0008067 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080ef:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080f4:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080f8:	b9 00 00 00 00       	mov    ecx,0x0
c00080fd:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c0008101:	0f 83 60 ff ff ff    	jae    c0008067 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0008107:	39 c6                	cmp    esi,eax
c0008109:	19 d7                	sbb    edi,edx
c000810b:	0f 83 ff 00 00 00    	jae    c0008210 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008111:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008115:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0008119:	29 c7                	sub    edi,eax
c000811b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000811f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008123:	19 d5                	sbb    ebp,edx
c0008125:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008129:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000812d:	e9 de 00 00 00       	jmp    c0008210 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008132:	83 ec 0c             	sub    esp,0xc
c0008135:	68 47 0f 02 c0       	push   0xc0020f47
c000813a:	e8 18 95 00 00       	call   c0011657 <KePanic(char const*)>
c000813f:	83 c4 10             	add    esp,0x10
c0008142:	83 ec 08             	sub    esp,0x8
c0008145:	bb 60 00 00 00       	mov    ebx,0x60
c000814a:	6a 00                	push   0x0
c000814c:	6a 06                	push   0x6
c000814e:	e8 fa fb ff ff       	call   c0007d4d <Phys::setPageState(unsigned long, bool)>
c0008153:	58                   	pop    eax
c0008154:	5a                   	pop    edx
c0008155:	6a 00                	push   0x0
c0008157:	6a 07                	push   0x7
c0008159:	e8 ef fb ff ff       	call   c0007d4d <Phys::setPageState(unsigned long, bool)>
c000815e:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0008164:	83 c4 10             	add    esp,0x10
c0008167:	83 c1 02             	add    ecx,0x2
c000816a:	89 0d e8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee8,ecx
c0008170:	83 ec 08             	sub    esp,0x8
c0008173:	6a 00                	push   0x0
c0008175:	53                   	push   ebx
c0008176:	83 c3 01             	add    ebx,0x1
c0008179:	e8 cf fb ff ff       	call   c0007d4d <Phys::setPageState(unsigned long, bool)>
c000817e:	83 c4 10             	add    esp,0x10
c0008181:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008187:	75 e7                	jne    c0008170 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0008189:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000818e:	bb 40 01 00 00       	mov    ebx,0x140
c0008193:	83 c0 20             	add    eax,0x20
c0008196:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000819b:	eb 26                	jmp    c00081c3 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000819d:	83 ec 08             	sub    esp,0x8
c00081a0:	6a 00                	push   0x0
c00081a2:	53                   	push   ebx
c00081a3:	83 c3 01             	add    ebx,0x1
c00081a6:	e8 a2 fb ff ff       	call   c0007d4d <Phys::setPageState(unsigned long, bool)>
c00081ab:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081b0:	83 c4 10             	add    esp,0x10
c00081b3:	83 c0 01             	add    eax,0x1
c00081b6:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081bc:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081c1:	74 07                	je     c00081ca <Phys::physicalMemorySetup(unsigned int)+0x24a>
c00081c3:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081c8:	7e d3                	jle    c000819d <Phys::physicalMemorySetup(unsigned int)+0x21d>
c00081ca:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081cf:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081d4:	7f 26                	jg     c00081fc <Phys::physicalMemorySetup(unsigned int)+0x27c>
c00081d6:	83 ec 08             	sub    esp,0x8
c00081d9:	6a 00                	push   0x0
c00081db:	53                   	push   ebx
c00081dc:	83 c3 01             	add    ebx,0x1
c00081df:	e8 69 fb ff ff       	call   c0007d4d <Phys::setPageState(unsigned long, bool)>
c00081e4:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081e9:	83 c4 10             	add    esp,0x10
c00081ec:	83 c0 01             	add    eax,0x1
c00081ef:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081f5:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081fa:	75 d3                	jne    c00081cf <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00081fc:	83 c4 3c             	add    esp,0x3c
c00081ff:	5b                   	pop    ebx
c0008200:	5e                   	pop    esi
c0008201:	5f                   	pop    edi
c0008202:	5d                   	pop    ebp
c0008203:	c3                   	ret    
c0008204:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0008208:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c0008210:	83 ec 04             	sub    esp,0x4
c0008213:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0008217:	56                   	push   esi
c0008218:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000821c:	57                   	push   edi
c000821d:	68 f0 0e 02 c0       	push   0xc0020ef0
c0008222:	e8 13 27 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0008227:	5d                   	pop    ebp
c0008228:	58                   	pop    eax
c0008229:	56                   	push   esi
c000822a:	57                   	push   edi
c000822b:	e8 18 fd ff ff       	call   c0007f48 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008230:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008234:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008238:	83 c4 0c             	add    esp,0xc
c000823b:	8b 35 e8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ee8
c0008241:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008245:	01 f0                	add    eax,esi
c0008247:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000824c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008253:	52                   	push   edx
c0008254:	50                   	push   eax
c0008255:	68 55 0f 02 c0       	push   0xc0020f55
c000825a:	e8 db 26 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000825f:	83 c4 10             	add    esp,0x10
c0008262:	e9 00 fe ff ff       	jmp    c0008067 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0008267:	90                   	nop

c0008268 <Pipe::isAtty()>:
c0008268:	31 c0                	xor    eax,eax
c000826a:	c3                   	ret    
c000826b:	90                   	nop

c000826c <Pipe::~Pipe()>:
c000826c:	83 ec 0c             	sub    esp,0xc
c000826f:	ba b4 0f 02 c0       	mov    edx,0xc0020fb4
c0008274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008278:	89 10                	mov    DWORD PTR [eax],edx
c000827a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000827e:	83 ec 0c             	sub    esp,0xc
c0008281:	50                   	push   eax
c0008282:	e8 35 11 00 00       	call   c00093bc <UnixFile::~UnixFile()>
c0008287:	83 c4 10             	add    esp,0x10
c000828a:	90                   	nop
c000828b:	83 c4 0c             	add    esp,0xc
c000828e:	c3                   	ret    
c000828f:	90                   	nop

c0008290 <Pipe::~Pipe()>:
c0008290:	83 ec 0c             	sub    esp,0xc
c0008293:	83 ec 0c             	sub    esp,0xc
c0008296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000829a:	e8 cd ff ff ff       	call   c000826c <Pipe::~Pipe()>
c000829f:	83 c4 10             	add    esp,0x10
c00082a2:	83 ec 08             	sub    esp,0x8
c00082a5:	6a 20                	push   0x20
c00082a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082ab:	e8 8c 25 00 00       	call   c000a83c <operator delete(void*, unsigned long)>
c00082b0:	83 c4 10             	add    esp,0x10
c00082b3:	83 c4 0c             	add    esp,0xc
c00082b6:	c3                   	ret    
c00082b7:	90                   	nop

c00082b8 <Pipe::write(unsigned long long, void*, int*)>:
c00082b8:	55                   	push   ebp
c00082b9:	57                   	push   edi
c00082ba:	56                   	push   esi
c00082bb:	53                   	push   ebx
c00082bc:	83 ec 1c             	sub    esp,0x1c
c00082bf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00082c3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00082c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00082cb:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00082ce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082d2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00082d8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082dc:	89 d8                	mov    eax,ebx
c00082de:	89 d6                	mov    esi,edx
c00082e0:	89 d7                	mov    edi,edx
c00082e2:	c1 ff 1f             	sar    edi,0x1f
c00082e5:	03 34 24             	add    esi,DWORD PTR [esp]
c00082e8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082ec:	c1 f8 1f             	sar    eax,0x1f
c00082ef:	39 f3                	cmp    ebx,esi
c00082f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082f9:	19 f8                	sbb    eax,edi
c00082fb:	b8 01 00 00 00       	mov    eax,0x1
c0008300:	72 72                	jb     c0008374 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c0008302:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0008305:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0008309:	01 d0                	add    eax,edx
c000830b:	99                   	cdq    
c000830c:	f7 fb                	idiv   ebx
c000830e:	89 d8                	mov    eax,ebx
c0008310:	29 d0                	sub    eax,edx
c0008312:	89 d6                	mov    esi,edx
c0008314:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008317:	89 c3                	mov    ebx,eax
c0008319:	c1 fb 1f             	sar    ebx,0x1f
c000831c:	39 c2                	cmp    edx,eax
c000831e:	19 df                	sbb    edi,ebx
c0008320:	bb 00 00 00 00       	mov    ebx,0x0
c0008325:	72 04                	jb     c000832b <Pipe::write(unsigned long long, void*, int*)+0x73>
c0008327:	89 d3                	mov    ebx,edx
c0008329:	29 c3                	sub    ebx,eax
c000832b:	89 d0                	mov    eax,edx
c000832d:	29 d8                	sub    eax,ebx
c000832f:	74 0d                	je     c000833e <Pipe::write(unsigned long long, void*, int*)+0x86>
c0008331:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008334:	89 c1                	mov    ecx,eax
c0008336:	01 f7                	add    edi,esi
c0008338:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000833c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000833e:	85 db                	test   ebx,ebx
c0008340:	74 0d                	je     c000834f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008342:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008346:	89 d9                	mov    ecx,ebx
c0008348:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000834b:	89 c6                	mov    esi,eax
c000834d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000834f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008352:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008357:	75 10                	jne    c0008369 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008359:	83 ec 0c             	sub    esp,0xc
c000835c:	68 71 0f 02 c0       	push   0xc0020f71
c0008361:	e8 f1 92 00 00       	call   c0011657 <KePanic(char const*)>
c0008366:	83 c4 10             	add    esp,0x10
c0008369:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000836d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008370:	89 08                	mov    DWORD PTR [eax],ecx
c0008372:	31 c0                	xor    eax,eax
c0008374:	83 c4 1c             	add    esp,0x1c
c0008377:	5b                   	pop    ebx
c0008378:	5e                   	pop    esi
c0008379:	5f                   	pop    edi
c000837a:	5d                   	pop    ebp
c000837b:	c3                   	ret    

c000837c <Pipe::read(unsigned long long, void*, int*)>:
c000837c:	55                   	push   ebp
c000837d:	57                   	push   edi
c000837e:	56                   	push   esi
c000837f:	53                   	push   ebx
c0008380:	83 ec 1c             	sub    esp,0x1c
c0008383:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008387:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000838b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000838f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008392:	89 c8                	mov    eax,ecx
c0008394:	99                   	cdq    
c0008395:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008399:	74 24                	je     c00083bf <Pipe::read(unsigned long long, void*, int*)+0x43>
c000839b:	39 f9                	cmp    ecx,edi
c000839d:	89 d1                	mov    ecx,edx
c000839f:	19 f1                	sbb    ecx,esi
c00083a1:	73 1c                	jae    c00083bf <Pipe::read(unsigned long long, void*, int*)+0x43>
c00083a3:	fa                   	cli    
c00083a4:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00083aa:	e8 d5 dd 00 00       	call   c0016184 <schedule()>
c00083af:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00083b4:	48                   	dec    eax
c00083b5:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00083ba:	75 d3                	jne    c000838f <Pipe::read(unsigned long long, void*, int*)+0x13>
c00083bc:	fb                   	sti    
c00083bd:	eb d0                	jmp    c000838f <Pipe::read(unsigned long long, void*, int*)+0x13>
c00083bf:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00083c3:	39 f8                	cmp    eax,edi
c00083c5:	89 d1                	mov    ecx,edx
c00083c7:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00083cb:	19 f1                	sbb    ecx,esi
c00083cd:	73 08                	jae    c00083d7 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c00083cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083d7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083da:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083dd:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083e1:	29 f7                	sub    edi,esi
c00083e3:	89 f8                	mov    eax,edi
c00083e5:	99                   	cdq    
c00083e6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083ea:	89 d0                	mov    eax,edx
c00083ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083f0:	19 c2                	sbb    edx,eax
c00083f2:	89 f8                	mov    eax,edi
c00083f4:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083f9:	89 ea                	mov    edx,ebp
c00083fb:	29 c2                	sub    edx,eax
c00083fd:	85 c0                	test   eax,eax
c00083ff:	74 0b                	je     c000840c <Pipe::read(unsigned long long, void*, int*)+0x90>
c0008401:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008404:	89 c1                	mov    ecx,eax
c0008406:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000840a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000840c:	85 d2                	test   edx,edx
c000840e:	74 0d                	je     c000841d <Pipe::read(unsigned long long, void*, int*)+0xa1>
c0008410:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008414:	89 d1                	mov    ecx,edx
c0008416:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008419:	89 c7                	mov    edi,eax
c000841b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000841d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008420:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008423:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008426:	99                   	cdq    
c0008427:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000842b:	89 f7                	mov    edi,esi
c000842d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008431:	c1 ff 1f             	sar    edi,0x1f
c0008434:	57                   	push   edi
c0008435:	56                   	push   esi
c0008436:	52                   	push   edx
c0008437:	50                   	push   eax
c0008438:	e8 03 75 01 00       	call   c001f940 <__umoddi3>
c000843d:	83 c4 10             	add    esp,0x10
c0008440:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008445:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008448:	75 10                	jne    c000845a <Pipe::read(unsigned long long, void*, int*)+0xde>
c000844a:	83 ec 0c             	sub    esp,0xc
c000844d:	68 8e 0f 02 c0       	push   0xc0020f8e
c0008452:	e8 00 92 00 00       	call   c0011657 <KePanic(char const*)>
c0008457:	83 c4 10             	add    esp,0x10
c000845a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000845e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008462:	89 10                	mov    DWORD PTR [eax],edx
c0008464:	83 c4 1c             	add    esp,0x1c
c0008467:	31 c0                	xor    eax,eax
c0008469:	5b                   	pop    ebx
c000846a:	5e                   	pop    esi
c000846b:	5f                   	pop    edi
c000846c:	5d                   	pop    ebp
c000846d:	c3                   	ret    

c000846e <Pipe::Pipe(int)>:
c000846e:	83 ec 0c             	sub    esp,0xc
c0008471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008475:	83 ec 08             	sub    esp,0x8
c0008478:	6a 00                	push   0x0
c000847a:	50                   	push   eax
c000847b:	e8 56 0d 00 00       	call   c00091d6 <UnixFile::UnixFile(int)>
c0008480:	83 c4 10             	add    esp,0x10
c0008483:	ba b4 0f 02 c0       	mov    edx,0xc0020fb4
c0008488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000848c:	89 10                	mov    DWORD PTR [eax],edx
c000848e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008492:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008496:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000849d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00084a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00084af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084b3:	83 ec 0c             	sub    esp,0xc
c00084b6:	50                   	push   eax
c00084b7:	e8 47 f6 ff ff       	call   c0007b03 <malloc>
c00084bc:	83 c4 10             	add    esp,0x10
c00084bf:	89 c2                	mov    edx,eax
c00084c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084c5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00084c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084cc:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084d0:	90                   	nop
c00084d1:	83 c4 0c             	add    esp,0xc
c00084d4:	c3                   	ret    
c00084d5:	90                   	nop

c00084d6 <VgaText::isAtty()>:
c00084d6:	b0 01                	mov    al,0x1
c00084d8:	c3                   	ret    
c00084d9:	90                   	nop

c00084da <VgaText::~VgaText()>:
c00084da:	83 ec 0c             	sub    esp,0xc
c00084dd:	ba fc 0f 02 c0       	mov    edx,0xc0020ffc
c00084e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084e6:	89 10                	mov    DWORD PTR [eax],edx
c00084e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084ec:	83 ec 0c             	sub    esp,0xc
c00084ef:	50                   	push   eax
c00084f0:	e8 c7 0e 00 00       	call   c00093bc <UnixFile::~UnixFile()>
c00084f5:	83 c4 10             	add    esp,0x10
c00084f8:	90                   	nop
c00084f9:	83 c4 0c             	add    esp,0xc
c00084fc:	c3                   	ret    
c00084fd:	90                   	nop

c00084fe <VgaText::~VgaText()>:
c00084fe:	83 ec 0c             	sub    esp,0xc
c0008501:	83 ec 0c             	sub    esp,0xc
c0008504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008508:	e8 cd ff ff ff       	call   c00084da <VgaText::~VgaText()>
c000850d:	83 c4 10             	add    esp,0x10
c0008510:	83 ec 08             	sub    esp,0x8
c0008513:	68 84 01 00 00       	push   0x184
c0008518:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000851c:	e8 1b 23 00 00       	call   c000a83c <operator delete(void*, unsigned long)>
c0008521:	83 c4 10             	add    esp,0x10
c0008524:	83 c4 0c             	add    esp,0xc
c0008527:	c3                   	ret    

c0008528 <VgaText::read(unsigned long long, void*, int*)>:
c0008528:	83 ec 10             	sub    esp,0x10
c000852b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000852f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008533:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008537:	e8 ae 53 00 00       	call   c000d8ea <readKeyboard(VgaText*, char*, unsigned long)>
c000853c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008540:	89 02                	mov    DWORD PTR [edx],eax
c0008542:	31 c0                	xor    eax,eax
c0008544:	83 c4 1c             	add    esp,0x1c
c0008547:	c3                   	ret    

c0008548 <setTerminalScrollLock(bool)>:
c0008548:	c3                   	ret    

c0008549 <doTerminalCycle()>:
c0008549:	c3                   	ret    

c000854a <addToTerminalCycle(VgaText*)>:
c000854a:	c3                   	ret    

c000854b <scrollTerminalScrollLock(int)>:
c000854b:	c3                   	ret    

c000854c <VgaText::updateTitle()>:
c000854c:	c3                   	ret    
c000854d:	90                   	nop

c000854e <VgaText::load()>:
c000854e:	c3                   	ret    
c000854f:	90                   	nop

c0008550 <VgaText::updateCursor()>:
c0008550:	83 ec 14             	sub    esp,0x14
c0008553:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008557:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000855a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000855d:	e8 c2 09 01 00       	call   c0018f24 <HalConsoleCursorUpdate(int, int)>
c0008562:	83 c4 1c             	add    esp,0x1c
c0008565:	c3                   	ret    

c0008566 <VgaText::doANSI_SGR(int)>:
c0008566:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000856a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000856e:	85 d2                	test   edx,edx
c0008570:	75 0b                	jne    c000857d <VgaText::doANSI_SGR(int)+0x17>
c0008572:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008575:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008578:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000857b:	eb 59                	jmp    c00085d6 <VgaText::doANSI_SGR(int)+0x70>
c000857d:	83 fa 07             	cmp    edx,0x7
c0008580:	75 0b                	jne    c000858d <VgaText::doANSI_SGR(int)+0x27>
c0008582:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008585:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008588:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000858b:	eb 49                	jmp    c00085d6 <VgaText::doANSI_SGR(int)+0x70>
c000858d:	83 fa 1b             	cmp    edx,0x1b
c0008590:	74 e0                	je     c0008572 <VgaText::doANSI_SGR(int)+0xc>
c0008592:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008595:	83 f9 07             	cmp    ecx,0x7
c0008598:	77 09                	ja     c00085a3 <VgaText::doANSI_SGR(int)+0x3d>
c000859a:	8b 14 8d c0 38 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc740]
c00085a1:	eb 20                	jmp    c00085c3 <VgaText::doANSI_SGR(int)+0x5d>
c00085a3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00085a6:	83 f9 07             	cmp    ecx,0x7
c00085a9:	77 09                	ja     c00085b4 <VgaText::doANSI_SGR(int)+0x4e>
c00085ab:	8b 14 8d c0 38 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc740]
c00085b2:	eb 22                	jmp    c00085d6 <VgaText::doANSI_SGR(int)+0x70>
c00085b4:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00085b7:	83 f9 07             	cmp    ecx,0x7
c00085ba:	77 0b                	ja     c00085c7 <VgaText::doANSI_SGR(int)+0x61>
c00085bc:	8b 14 95 78 37 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc888]
c00085c3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085c6:	c3                   	ret    
c00085c7:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00085ca:	83 f9 07             	cmp    ecx,0x7
c00085cd:	77 0a                	ja     c00085d9 <VgaText::doANSI_SGR(int)+0x73>
c00085cf:	8b 14 95 50 37 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc8b0]
c00085d6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085d9:	c3                   	ret    

c00085da <VgaText::setDefaultBgColour(VgaColour)>:
c00085da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085e5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085e8:	c3                   	ret    
c00085e9:	90                   	nop

c00085ea <VgaText::setDefaultFgColour(VgaColour)>:
c00085ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085f5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085f8:	c3                   	ret    
c00085f9:	90                   	nop

c00085fa <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085fa:	53                   	push   ebx
c00085fb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085ff:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008603:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008607:	51                   	push   ecx
c0008608:	e8 cd ff ff ff       	call   c00085da <VgaText::setDefaultBgColour(VgaColour)>
c000860d:	58                   	pop    eax
c000860e:	5a                   	pop    edx
c000860f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008613:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008617:	5b                   	pop    ebx
c0008618:	eb d0                	jmp    c00085ea <VgaText::setDefaultFgColour(VgaColour)>

c000861a <VgaText::setTitleTextColour(VgaColour)>:
c000861a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000861e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008622:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008625:	c3                   	ret    

c0008626 <VgaText::setTitleColour(VgaColour)>:
c0008626:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000862a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000862e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008631:	c3                   	ret    

c0008632 <VgaText::setTitle(char*)>:
c0008632:	c3                   	ret    
c0008633:	90                   	nop

c0008634 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008638:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000863d:	83 e0 0f             	and    eax,0xf
c0008640:	c1 e2 04             	shl    edx,0x4
c0008643:	09 d0                	or     eax,edx
c0008645:	c3                   	ret    

c0008646 <VgaText::scrollScreen()>:
c0008646:	55                   	push   ebp
c0008647:	57                   	push   edi
c0008648:	56                   	push   esi
c0008649:	be 01 00 00 00       	mov    esi,0x1
c000864e:	53                   	push   ebx
c000864f:	83 ec 0c             	sub    esp,0xc
c0008652:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008656:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008659:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000865f:	31 ff                	xor    edi,edi
c0008661:	01 e9                	add    ecx,ebp
c0008663:	8a 01                	mov    al,BYTE PTR [ecx]
c0008665:	83 fe 18             	cmp    esi,0x18
c0008668:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000866e:	75 20                	jne    c0008690 <VgaText::scrollScreen()+0x4a>
c0008670:	f7 c7 01 00 00 00    	test   edi,0x1
c0008676:	74 15                	je     c000868d <VgaText::scrollScreen()+0x47>
c0008678:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000867c:	50                   	push   eax
c000867d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008681:	50                   	push   eax
c0008682:	e8 ad ff ff ff       	call   c0008634 <VgaText::combineColours(unsigned char, unsigned char)>
c0008687:	5a                   	pop    edx
c0008688:	5a                   	pop    edx
c0008689:	88 01                	mov    BYTE PTR [ecx],al
c000868b:	eb 03                	jmp    c0008690 <VgaText::scrollScreen()+0x4a>
c000868d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008690:	47                   	inc    edi
c0008691:	41                   	inc    ecx
c0008692:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008698:	75 c9                	jne    c0008663 <VgaText::scrollScreen()+0x1d>
c000869a:	46                   	inc    esi
c000869b:	83 fe 19             	cmp    esi,0x19
c000869e:	75 b9                	jne    c0008659 <VgaText::scrollScreen()+0x13>
c00086a0:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c00086a6:	75 1f                	jne    c00086c7 <VgaText::scrollScreen()+0x81>
c00086a8:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00086ac:	74 05                	je     c00086b3 <VgaText::scrollScreen()+0x6d>
c00086ae:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00086b1:	eb 14                	jmp    c00086c7 <VgaText::scrollScreen()+0x81>
c00086b3:	50                   	push   eax
c00086b4:	50                   	push   eax
c00086b5:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00086b9:	50                   	push   eax
c00086ba:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00086be:	50                   	push   eax
c00086bf:	e8 f4 06 01 00       	call   c0018db8 <HalConsoleScroll(int, int)>
c00086c4:	83 c4 10             	add    esp,0x10
c00086c7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00086cb:	83 c4 0c             	add    esp,0xc
c00086ce:	5b                   	pop    ebx
c00086cf:	5e                   	pop    esi
c00086d0:	5f                   	pop    edi
c00086d1:	5d                   	pop    ebp
c00086d2:	e9 79 fe ff ff       	jmp    c0008550 <VgaText::updateCursor()>
c00086d7:	90                   	nop

c00086d8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086d8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086dd:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086e2:	c1 e0 08             	shl    eax,0x8
c00086e5:	09 d0                	or     eax,edx
c00086e7:	c3                   	ret    

c00086e8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086e8:	55                   	push   ebp
c00086e9:	57                   	push   edi
c00086ea:	56                   	push   esi
c00086eb:	53                   	push   ebx
c00086ec:	83 ec 1c             	sub    esp,0x1c
c00086ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086f3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086f7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086fb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008703:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008707:	0f b6 c3             	movzx  eax,bl
c000870a:	50                   	push   eax
c000870b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008710:	50                   	push   eax
c0008711:	e8 1e ff ff ff       	call   c0008634 <VgaText::combineColours(unsigned char, unsigned char)>
c0008716:	5a                   	pop    edx
c0008717:	59                   	pop    ecx
c0008718:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c000871d:	0f b6 c0             	movzx  eax,al
c0008720:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008724:	50                   	push   eax
c0008725:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008729:	e8 aa ff ff ff       	call   c00086d8 <VgaText::combineCharAndColour(char, unsigned char)>
c000872e:	5a                   	pop    edx
c000872f:	6b d7 50             	imul   edx,edi,0x50
c0008732:	59                   	pop    ecx
c0008733:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008736:	01 f2                	add    edx,esi
c0008738:	0f b7 d2             	movzx  edx,dx
c000873b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000873f:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c0008745:	75 28                	jne    c000876f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008747:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000874b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000874f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008753:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008757:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000875b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000875f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008763:	83 c4 1c             	add    esp,0x1c
c0008766:	5b                   	pop    ebx
c0008767:	5e                   	pop    esi
c0008768:	5f                   	pop    edi
c0008769:	5d                   	pop    ebp
c000876a:	e9 51 07 01 00       	jmp    c0018ec0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000876f:	83 c4 1c             	add    esp,0x1c
c0008772:	5b                   	pop    ebx
c0008773:	5e                   	pop    esi
c0008774:	5f                   	pop    edi
c0008775:	5d                   	pop    ebp
c0008776:	c3                   	ret    
c0008777:	90                   	nop

c0008778 <VgaText::getCursorX()>:
c0008778:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000877c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000877f:	c3                   	ret    

c0008780 <VgaText::getCursorY()>:
c0008780:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008784:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008787:	c3                   	ret    

c0008788 <VgaText::setCursor(int, int)>:
c0008788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000878c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008790:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008793:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008797:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000879a:	e9 b1 fd ff ff       	jmp    c0008550 <VgaText::updateCursor()>

c000879f <setActiveTerminal(VgaText*)>:
c000879f:	53                   	push   ebx
c00087a0:	83 ec 08             	sub    esp,0x8
c00087a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087a7:	85 db                	test   ebx,ebx
c00087a9:	75 11                	jne    c00087bc <setActiveTerminal(VgaText*)+0x1d>
c00087ab:	c7 44 24 10 c8 0f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020fc8
c00087b3:	83 c4 08             	add    esp,0x8
c00087b6:	5b                   	pop    ebx
c00087b7:	e9 9b 8e 00 00       	jmp    c0011657 <KePanic(char const*)>
c00087bc:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c00087c1:	85 c0                	test   eax,eax
c00087c3:	74 0c                	je     c00087d1 <setActiveTerminal(VgaText*)+0x32>
c00087c5:	83 ec 0c             	sub    esp,0xc
c00087c8:	50                   	push   eax
c00087c9:	e8 82 fd ff ff       	call   c0008550 <VgaText::updateCursor()>
c00087ce:	83 c4 10             	add    esp,0x10
c00087d1:	50                   	push   eax
c00087d2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087d5:	89 1d 04 6f 02 c0    	mov    DWORD PTR ds:0xc0026f04,ebx
c00087db:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087de:	53                   	push   ebx
c00087df:	e8 a4 ff ff ff       	call   c0008788 <VgaText::setCursor(int, int)>
c00087e4:	83 c4 18             	add    esp,0x18
c00087e7:	5b                   	pop    ebx
c00087e8:	c3                   	ret    
c00087e9:	90                   	nop

c00087ea <VgaText::clearScreen()>:
c00087ea:	57                   	push   edi
c00087eb:	56                   	push   esi
c00087ec:	31 f6                	xor    esi,esi
c00087ee:	53                   	push   ebx
c00087ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087f3:	52                   	push   edx
c00087f4:	6a 00                	push   0x0
c00087f6:	6a 00                	push   0x0
c00087f8:	53                   	push   ebx
c00087f9:	e8 8a ff ff ff       	call   c0008788 <VgaText::setCursor(int, int)>
c00087fe:	83 c4 10             	add    esp,0x10
c0008801:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008808:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000880b:	7e 20                	jle    c000882d <VgaText::clearScreen()+0x43>
c000880d:	31 ff                	xor    edi,edi
c000880f:	50                   	push   eax
c0008810:	50                   	push   eax
c0008811:	56                   	push   esi
c0008812:	57                   	push   edi
c0008813:	47                   	inc    edi
c0008814:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008817:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000881a:	6a 20                	push   0x20
c000881c:	53                   	push   ebx
c000881d:	e8 c6 fe ff ff       	call   c00086e8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008822:	83 c4 20             	add    esp,0x20
c0008825:	83 ff 50             	cmp    edi,0x50
c0008828:	75 e5                	jne    c000880f <VgaText::clearScreen()+0x25>
c000882a:	46                   	inc    esi
c000882b:	eb db                	jmp    c0008808 <VgaText::clearScreen()+0x1e>
c000882d:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008834:	5b                   	pop    ebx
c0008835:	5e                   	pop    esi
c0008836:	5f                   	pop    edi
c0008837:	c3                   	ret    

c0008838 <VgaText::setCursorX(int)>:
c0008838:	83 ec 10             	sub    esp,0x10
c000883b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000883f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008846:	50                   	push   eax
c0008847:	e8 3c ff ff ff       	call   c0008788 <VgaText::setCursor(int, int)>
c000884c:	83 c4 1c             	add    esp,0x1c
c000884f:	c3                   	ret    

c0008850 <VgaText::setCursorY(int)>:
c0008850:	83 ec 10             	sub    esp,0x10
c0008853:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008857:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000885b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000885e:	50                   	push   eax
c000885f:	e8 24 ff ff ff       	call   c0008788 <VgaText::setCursor(int, int)>
c0008864:	83 c4 1c             	add    esp,0x1c
c0008867:	c3                   	ret    

c0008868 <VgaText::incrementCursor(bool)>:
c0008868:	56                   	push   esi
c0008869:	53                   	push   ebx
c000886a:	51                   	push   ecx
c000886b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000886f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008873:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008876:	40                   	inc    eax
c0008877:	83 f8 50             	cmp    eax,0x50
c000887a:	74 05                	je     c0008881 <VgaText::incrementCursor(bool)+0x19>
c000887c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000887f:	eb 24                	jmp    c00088a5 <VgaText::incrementCursor(bool)+0x3d>
c0008881:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008888:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000888b:	8d 50 01             	lea    edx,[eax+0x1]
c000888e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008891:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008894:	75 0f                	jne    c00088a5 <VgaText::incrementCursor(bool)+0x3d>
c0008896:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008899:	83 ec 0c             	sub    esp,0xc
c000889c:	53                   	push   ebx
c000889d:	e8 a4 fd ff ff       	call   c0008646 <VgaText::scrollScreen()>
c00088a2:	83 c4 10             	add    esp,0x10
c00088a5:	89 f0                	mov    eax,esi
c00088a7:	84 c0                	test   al,al
c00088a9:	74 0c                	je     c00088b7 <VgaText::incrementCursor(bool)+0x4f>
c00088ab:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00088af:	5a                   	pop    edx
c00088b0:	5b                   	pop    ebx
c00088b1:	5e                   	pop    esi
c00088b2:	e9 99 fc ff ff       	jmp    c0008550 <VgaText::updateCursor()>
c00088b7:	58                   	pop    eax
c00088b8:	5b                   	pop    ebx
c00088b9:	5e                   	pop    esi
c00088ba:	c3                   	ret    
c00088bb:	90                   	nop

c00088bc <VgaText::decrementCursor(bool)>:
c00088bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00088c4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00088c7:	85 c0                	test   eax,eax
c00088c9:	74 04                	je     c00088cf <VgaText::decrementCursor(bool)+0x13>
c00088cb:	48                   	dec    eax
c00088cc:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00088cf:	84 c9                	test   cl,cl
c00088d1:	74 09                	je     c00088dc <VgaText::decrementCursor(bool)+0x20>
c00088d3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088d7:	e9 74 fc ff ff       	jmp    c0008550 <VgaText::updateCursor()>
c00088dc:	c3                   	ret    
c00088dd:	90                   	nop

c00088de <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088de:	53                   	push   ebx
c00088df:	83 ec 08             	sub    esp,0x8
c00088e2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088ef:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088f3:	83 f8 07             	cmp    eax,0x7
c00088f6:	75 21                	jne    c0008919 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088f8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008900:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0008908:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008910:	83 c4 08             	add    esp,0x8
c0008913:	5b                   	pop    ebx
c0008914:	e9 d6 3a 00 00       	jmp    c000c3ef <Krnl::beep(int, int, bool)>
c0008919:	83 f8 0d             	cmp    eax,0xd
c000891c:	75 09                	jne    c0008927 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c000891e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008925:	eb 2d                	jmp    c0008954 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0008927:	83 f8 0a             	cmp    eax,0xa
c000892a:	75 31                	jne    c000895d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c000892c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008933:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008936:	8d 50 01             	lea    edx,[eax+0x1]
c0008939:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000893c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000893f:	75 0f                	jne    c0008950 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008941:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008944:	83 ec 0c             	sub    esp,0xc
c0008947:	53                   	push   ebx
c0008948:	e8 f9 fc ff ff       	call   c0008646 <VgaText::scrollScreen()>
c000894d:	83 c4 10             	add    esp,0x10
c0008950:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008954:	83 c4 08             	add    esp,0x8
c0008957:	5b                   	pop    ebx
c0008958:	e9 f3 fb ff ff       	jmp    c0008550 <VgaText::updateCursor()>
c000895d:	83 f8 08             	cmp    eax,0x8
c0008960:	75 25                	jne    c0008987 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008962:	50                   	push   eax
c0008963:	50                   	push   eax
c0008964:	6a 01                	push   0x1
c0008966:	53                   	push   ebx
c0008967:	e8 50 ff ff ff       	call   c00088bc <VgaText::decrementCursor(bool)>
c000896c:	5a                   	pop    edx
c000896d:	59                   	pop    ecx
c000896e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008971:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008974:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008977:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000897a:	6a 20                	push   0x20
c000897c:	53                   	push   ebx
c000897d:	e8 66 fd ff ff       	call   c00086e8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008982:	83 c4 28             	add    esp,0x28
c0008985:	5b                   	pop    ebx
c0008986:	c3                   	ret    
c0008987:	83 ec 08             	sub    esp,0x8
c000898a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000898d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008990:	51                   	push   ecx
c0008991:	52                   	push   edx
c0008992:	50                   	push   eax
c0008993:	53                   	push   ebx
c0008994:	e8 4f fd ff ff       	call   c00086e8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008999:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000899d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00089a5:	83 c4 28             	add    esp,0x28
c00089a8:	5b                   	pop    ebx
c00089a9:	e9 ba fe ff ff       	jmp    c0008868 <VgaText::incrementCursor(bool)>

c00089ae <VgaText::putchar(char)>:
c00089ae:	57                   	push   edi
c00089af:	56                   	push   esi
c00089b0:	53                   	push   ebx
c00089b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00089b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00089b9:	0f be c2             	movsx  eax,dl
c00089bc:	83 f8 5b             	cmp    eax,0x5b
c00089bf:	75 18                	jne    c00089d9 <VgaText::putchar(char)+0x2b>
c00089c1:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00089c5:	74 20                	je     c00089e7 <VgaText::putchar(char)+0x39>
c00089c7:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00089cd:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089d4:	e9 b8 00 00 00       	jmp    c0008a91 <VgaText::putchar(char)+0xe3>
c00089d9:	83 f8 1b             	cmp    eax,0x1b
c00089dc:	75 09                	jne    c00089e7 <VgaText::putchar(char)+0x39>
c00089de:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089e2:	e9 aa 00 00 00       	jmp    c0008a91 <VgaText::putchar(char)+0xe3>
c00089e7:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089eb:	89 f9                	mov    ecx,edi
c00089ed:	84 c9                	test   cl,cl
c00089ef:	0f 84 8c 00 00 00    	je     c0008a81 <VgaText::putchar(char)+0xd3>
c00089f5:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089f8:	80 f9 3e             	cmp    cl,0x3e
c00089fb:	77 70                	ja     c0008a6d <VgaText::putchar(char)+0xbf>
c00089fd:	83 f8 6d             	cmp    eax,0x6d
c0008a00:	75 3f                	jne    c0008a41 <VgaText::putchar(char)+0x93>
c0008a02:	31 f6                	xor    esi,esi
c0008a04:	31 d2                	xor    edx,edx
c0008a06:	31 c0                	xor    eax,eax
c0008a08:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0008a0b:	7e 25                	jle    c0008a32 <VgaText::putchar(char)+0x84>
c0008a0d:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008a12:	83 fa 3b             	cmp    edx,0x3b
c0008a15:	75 0f                	jne    c0008a26 <VgaText::putchar(char)+0x78>
c0008a17:	50                   	push   eax
c0008a18:	53                   	push   ebx
c0008a19:	e8 48 fb ff ff       	call   c0008566 <VgaText::doANSI_SGR(int)>
c0008a1e:	31 d2                	xor    edx,edx
c0008a20:	59                   	pop    ecx
c0008a21:	58                   	pop    eax
c0008a22:	31 c0                	xor    eax,eax
c0008a24:	eb 09                	jmp    c0008a2f <VgaText::putchar(char)+0x81>
c0008a26:	6b c0 0a             	imul   eax,eax,0xa
c0008a29:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008a2d:	89 fa                	mov    edx,edi
c0008a2f:	46                   	inc    esi
c0008a30:	eb d6                	jmp    c0008a08 <VgaText::putchar(char)+0x5a>
c0008a32:	84 d2                	test   dl,dl
c0008a34:	74 2f                	je     c0008a65 <VgaText::putchar(char)+0xb7>
c0008a36:	50                   	push   eax
c0008a37:	53                   	push   ebx
c0008a38:	e8 29 fb ff ff       	call   c0008566 <VgaText::doANSI_SGR(int)>
c0008a3d:	58                   	pop    eax
c0008a3e:	5a                   	pop    edx
c0008a3f:	eb 24                	jmp    c0008a65 <VgaText::putchar(char)+0xb7>
c0008a41:	83 f8 4a             	cmp    eax,0x4a
c0008a44:	75 1f                	jne    c0008a65 <VgaText::putchar(char)+0xb7>
c0008a46:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a4a:	75 19                	jne    c0008a65 <VgaText::putchar(char)+0xb7>
c0008a4c:	83 ec 0c             	sub    esp,0xc
c0008a4f:	53                   	push   ebx
c0008a50:	e8 95 fd ff ff       	call   c00087ea <VgaText::clearScreen()>
c0008a55:	83 c4 0c             	add    esp,0xc
c0008a58:	6a 00                	push   0x0
c0008a5a:	6a 00                	push   0x0
c0008a5c:	53                   	push   ebx
c0008a5d:	e8 26 fd ff ff       	call   c0008788 <VgaText::setCursor(int, int)>
c0008a62:	83 c4 10             	add    esp,0x10
c0008a65:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a6b:	eb 24                	jmp    c0008a91 <VgaText::putchar(char)+0xe3>
c0008a6d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a70:	83 f8 0e             	cmp    eax,0xe
c0008a73:	7f 1c                	jg     c0008a91 <VgaText::putchar(char)+0xe3>
c0008a75:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a78:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a7b:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a7f:	eb 10                	jmp    c0008a91 <VgaText::putchar(char)+0xe3>
c0008a81:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a84:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a87:	50                   	push   eax
c0008a88:	53                   	push   ebx
c0008a89:	e8 50 fe ff ff       	call   c00088de <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a8e:	83 c4 10             	add    esp,0x10
c0008a91:	5b                   	pop    ebx
c0008a92:	5e                   	pop    esi
c0008a93:	5f                   	pop    edi
c0008a94:	c3                   	ret    
c0008a95:	90                   	nop

c0008a96 <VgaText::putx(unsigned int)>:
c0008a96:	57                   	push   edi
c0008a97:	b9 11 00 00 00       	mov    ecx,0x11
c0008a9c:	56                   	push   esi
c0008a9d:	be d6 0f 02 c0       	mov    esi,0xc0020fd6
c0008aa2:	53                   	push   ebx
c0008aa3:	83 ec 20             	sub    esp,0x20
c0008aa6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008aaa:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008aae:	fc                   	cld    
c0008aaf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008ab1:	be 08 00 00 00       	mov    esi,0x8
c0008ab6:	50                   	push   eax
c0008ab7:	50                   	push   eax
c0008ab8:	89 d8                	mov    eax,ebx
c0008aba:	c1 e8 1c             	shr    eax,0x1c
c0008abd:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008ac2:	c1 e3 04             	shl    ebx,0x4
c0008ac5:	50                   	push   eax
c0008ac6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008aca:	e8 df fe ff ff       	call   c00089ae <VgaText::putchar(char)>
c0008acf:	83 c4 10             	add    esp,0x10
c0008ad2:	4e                   	dec    esi
c0008ad3:	75 e1                	jne    c0008ab6 <VgaText::putx(unsigned int)+0x20>
c0008ad5:	83 c4 20             	add    esp,0x20
c0008ad8:	5b                   	pop    ebx
c0008ad9:	5e                   	pop    esi
c0008ada:	5f                   	pop    edi
c0008adb:	c3                   	ret    

c0008adc <VgaText::puts(char const*)>:
c0008adc:	53                   	push   ebx
c0008add:	83 ec 08             	sub    esp,0x8
c0008ae0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ae4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ae7:	85 c0                	test   eax,eax
c0008ae9:	74 12                	je     c0008afd <VgaText::puts(char const*)+0x21>
c0008aeb:	51                   	push   ecx
c0008aec:	43                   	inc    ebx
c0008aed:	51                   	push   ecx
c0008aee:	50                   	push   eax
c0008aef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008af3:	e8 b6 fe ff ff       	call   c00089ae <VgaText::putchar(char)>
c0008af8:	83 c4 10             	add    esp,0x10
c0008afb:	eb e7                	jmp    c0008ae4 <VgaText::puts(char const*)+0x8>
c0008afd:	83 c4 08             	add    esp,0x8
c0008b00:	5b                   	pop    ebx
c0008b01:	c3                   	ret    

c0008b02 <VgaText::write(unsigned long long, void*, int*)>:
c0008b02:	55                   	push   ebp
c0008b03:	57                   	push   edi
c0008b04:	56                   	push   esi
c0008b05:	53                   	push   ebx
c0008b06:	83 ec 0c             	sub    esp,0xc
c0008b09:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008b0d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b11:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008b15:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008b1c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008b1f:	39 eb                	cmp    ebx,ebp
c0008b21:	74 13                	je     c0008b36 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008b23:	50                   	push   eax
c0008b24:	43                   	inc    ebx
c0008b25:	50                   	push   eax
c0008b26:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008b2a:	50                   	push   eax
c0008b2b:	56                   	push   esi
c0008b2c:	e8 7d fe ff ff       	call   c00089ae <VgaText::putchar(char)>
c0008b31:	83 c4 10             	add    esp,0x10
c0008b34:	eb e9                	jmp    c0008b1f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b36:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b41:	89 38                	mov    DWORD PTR [eax],edi
c0008b43:	83 c4 0c             	add    esp,0xc
c0008b46:	31 c0                	xor    eax,eax
c0008b48:	5b                   	pop    ebx
c0008b49:	5e                   	pop    esi
c0008b4a:	5f                   	pop    edi
c0008b4b:	5d                   	pop    ebp
c0008b4c:	c3                   	ret    
c0008b4d:	90                   	nop

c0008b4e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b4e:	55                   	push   ebp
c0008b4f:	57                   	push   edi
c0008b50:	56                   	push   esi
c0008b51:	53                   	push   ebx
c0008b52:	83 ec 0c             	sub    esp,0xc
c0008b55:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b59:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b5e:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b65:	50                   	push   eax
c0008b66:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b6b:	50                   	push   eax
c0008b6c:	e8 c3 fa ff ff       	call   c0008634 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b71:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b75:	5a                   	pop    edx
c0008b76:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b79:	59                   	pop    ecx
c0008b7a:	0f b6 f8             	movzx  edi,al
c0008b7d:	0f b7 db             	movzx  ebx,bx
c0008b80:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b84:	01 db                	add    ebx,ebx
c0008b86:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b89:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b8c:	85 c0                	test   eax,eax
c0008b8e:	0f 84 ef 00 00 00    	je     c0008c83 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b94:	83 f8 0d             	cmp    eax,0xd
c0008b97:	75 0c                	jne    c0008ba5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b99:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008ba0:	e9 d8 00 00 00       	jmp    c0008c7d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008ba5:	83 f8 0a             	cmp    eax,0xa
c0008ba8:	75 44                	jne    c0008bee <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008baa:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008bb1:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008bb4:	8d 48 01             	lea    ecx,[eax+0x1]
c0008bb7:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008bba:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008bbd:	75 0f                	jne    c0008bce <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008bbf:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008bc2:	83 ec 0c             	sub    esp,0xc
c0008bc5:	55                   	push   ebp
c0008bc6:	e8 7b fa ff ff       	call   c0008646 <VgaText::scrollScreen()>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	83 ec 0c             	sub    esp,0xc
c0008bd1:	55                   	push   ebp
c0008bd2:	e8 79 f9 ff ff       	call   c0008550 <VgaText::updateCursor()>
c0008bd7:	83 c4 10             	add    esp,0x10
c0008bda:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bde:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008be1:	0f b7 db             	movzx  ebx,bx
c0008be4:	01 db                	add    ebx,ebx
c0008be6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008be9:	e9 8f 00 00 00       	jmp    c0008c7d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bee:	83 f8 08             	cmp    eax,0x8
c0008bf1:	75 34                	jne    c0008c27 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bf3:	51                   	push   ecx
c0008bf4:	51                   	push   ecx
c0008bf5:	6a 01                	push   0x1
c0008bf7:	55                   	push   ebp
c0008bf8:	e8 bf fc ff ff       	call   c00088bc <VgaText::decrementCursor(bool)>
c0008bfd:	5b                   	pop    ebx
c0008bfe:	58                   	pop    eax
c0008bff:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c02:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c05:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008c08:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008c0b:	6a 20                	push   0x20
c0008c0d:	55                   	push   ebp
c0008c0e:	e8 d5 fa ff ff       	call   c00086e8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008c13:	83 c4 20             	add    esp,0x20
c0008c16:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c1a:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008c1d:	0f b7 db             	movzx  ebx,bx
c0008c20:	01 db                	add    ebx,ebx
c0008c22:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c25:	eb 56                	jmp    c0008c7d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c27:	52                   	push   edx
c0008c28:	52                   	push   edx
c0008c29:	57                   	push   edi
c0008c2a:	50                   	push   eax
c0008c2b:	e8 a8 fa ff ff       	call   c00086d8 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c30:	83 c4 10             	add    esp,0x10
c0008c33:	66 89 03             	mov    WORD PTR [ebx],ax
c0008c36:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c0008c3c:	75 1d                	jne    c0008c5b <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c3e:	83 ec 0c             	sub    esp,0xc
c0008c41:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c44:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c47:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c4b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c4f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c52:	50                   	push   eax
c0008c53:	e8 68 02 01 00       	call   c0018ec0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c58:	83 c4 20             	add    esp,0x20
c0008c5b:	50                   	push   eax
c0008c5c:	83 c3 02             	add    ebx,0x2
c0008c5f:	50                   	push   eax
c0008c60:	6a 00                	push   0x0
c0008c62:	55                   	push   ebp
c0008c63:	e8 00 fc ff ff       	call   c0008868 <VgaText::incrementCursor(bool)>
c0008c68:	83 c4 10             	add    esp,0x10
c0008c6b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c6f:	75 0c                	jne    c0008c7d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c71:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c75:	0f b7 db             	movzx  ebx,bx
c0008c78:	01 db                	add    ebx,ebx
c0008c7a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c7d:	46                   	inc    esi
c0008c7e:	e9 06 ff ff ff       	jmp    c0008b89 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c83:	83 ec 0c             	sub    esp,0xc
c0008c86:	55                   	push   ebp
c0008c87:	e8 c4 f8 ff ff       	call   c0008550 <VgaText::updateCursor()>
c0008c8c:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c93:	83 c4 1c             	add    esp,0x1c
c0008c96:	5b                   	pop    ebx
c0008c97:	5e                   	pop    esi
c0008c98:	5f                   	pop    edi
c0008c99:	5d                   	pop    ebp
c0008c9a:	c3                   	ret    
c0008c9b:	90                   	nop

c0008c9c <VgaText::VgaText(char const*)>:
c0008c9c:	56                   	push   esi
c0008c9d:	53                   	push   ebx
c0008c9e:	83 ec 04             	sub    esp,0x4
c0008ca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca5:	83 ec 08             	sub    esp,0x8
c0008ca8:	6a 00                	push   0x0
c0008caa:	50                   	push   eax
c0008cab:	e8 26 05 00 00       	call   c00091d6 <UnixFile::UnixFile(int)>
c0008cb0:	83 c4 10             	add    esp,0x10
c0008cb3:	ba fc 0f 02 c0       	mov    edx,0xc0020ffc
c0008cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbc:	89 10                	mov    DWORD PTR [eax],edx
c0008cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc2:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008cc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ccd:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008cd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfe:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008d05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d09:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d14:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008d1b:	83 ec 0c             	sub    esp,0xc
c0008d1e:	6a 01                	push   0x1
c0008d20:	e8 00 09 00 00       	call   c0009625 <Virt::allocateKernelVirtualPages(int)>
c0008d25:	83 c4 10             	add    esp,0x10
c0008d28:	89 c2                	mov    edx,eax
c0008d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d2e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d31:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c0008d37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d3b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d3e:	89 c6                	mov    esi,eax
c0008d40:	e8 cd f0 ff ff       	call   c0007e12 <Phys::allocatePage()>
c0008d45:	68 05 0c 00 00       	push   0xc05
c0008d4a:	56                   	push   esi
c0008d4b:	50                   	push   eax
c0008d4c:	53                   	push   ebx
c0008d4d:	e8 dc 0f 00 00       	call   c0009d2e <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d52:	83 c4 10             	add    esp,0x10
c0008d55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d59:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d5c:	83 ec 04             	sub    esp,0x4
c0008d5f:	68 a0 0f 00 00       	push   0xfa0
c0008d64:	6a 00                	push   0x0
c0008d66:	50                   	push   eax
c0008d67:	e8 84 77 ff ff       	call   c00004f0 <memset>
c0008d6c:	83 c4 10             	add    esp,0x10
c0008d6f:	83 ec 04             	sub    esp,0x4
c0008d72:	6a 00                	push   0x0
c0008d74:	6a 07                	push   0x7
c0008d76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d7a:	e8 7b f8 ff ff       	call   c00085fa <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d7f:	83 c4 10             	add    esp,0x10
c0008d82:	83 ec 04             	sub    esp,0x4
c0008d85:	6a 00                	push   0x0
c0008d87:	6a 00                	push   0x0
c0008d89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d8d:	e8 f6 f9 ff ff       	call   c0008788 <VgaText::setCursor(int, int)>
c0008d92:	83 c4 10             	add    esp,0x10
c0008d95:	83 ec 0c             	sub    esp,0xc
c0008d98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d9c:	e8 49 fa ff ff       	call   c00087ea <VgaText::clearScreen()>
c0008da1:	83 c4 10             	add    esp,0x10
c0008da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008da8:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008dac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008db0:	05 82 00 00 00       	add    eax,0x82
c0008db5:	83 ec 04             	sub    esp,0x4
c0008db8:	68 80 00 00 00       	push   0x80
c0008dbd:	6a 00                	push   0x0
c0008dbf:	50                   	push   eax
c0008dc0:	e8 2b 77 ff ff       	call   c00004f0 <memset>
c0008dc5:	83 c4 10             	add    esp,0x10
c0008dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008dcc:	05 02 01 00 00       	add    eax,0x102
c0008dd1:	83 ec 04             	sub    esp,0x4
c0008dd4:	68 80 00 00 00       	push   0x80
c0008dd9:	6a 00                	push   0x0
c0008ddb:	50                   	push   eax
c0008ddc:	e8 0f 77 ff ff       	call   c00004f0 <memset>
c0008de1:	83 c4 10             	add    esp,0x10
c0008de4:	90                   	nop
c0008de5:	83 c4 04             	add    esp,0x4
c0008de8:	5b                   	pop    ebx
c0008de9:	5e                   	pop    esi
c0008dea:	c3                   	ret    
c0008deb:	90                   	nop

c0008dec <VgaText::receiveKey(unsigned char)>:
c0008dec:	55                   	push   ebp
c0008ded:	57                   	push   edi
c0008dee:	56                   	push   esi
c0008def:	53                   	push   ebx
c0008df0:	83 ec 2c             	sub    esp,0x2c
c0008df3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008df7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dfb:	89 fd                	mov    ebp,edi
c0008dfd:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008e03:	0f 84 48 01 00 00    	je     c0008f51 <VgaText::receiveKey(unsigned char)+0x165>
c0008e09:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008e0f:	83 fd 08             	cmp    ebp,0x8
c0008e12:	75 6a                	jne    c0008e7e <VgaText::receiveKey(unsigned char)+0x92>
c0008e14:	83 ec 0c             	sub    esp,0xc
c0008e17:	56                   	push   esi
c0008e18:	e8 63 77 ff ff       	call   c0000580 <strlen>
c0008e1d:	83 c4 10             	add    esp,0x10
c0008e20:	85 c0                	test   eax,eax
c0008e22:	0f 84 ef 00 00 00    	je     c0008f17 <VgaText::receiveKey(unsigned char)+0x12b>
c0008e28:	50                   	push   eax
c0008e29:	50                   	push   eax
c0008e2a:	6a 08                	push   0x8
c0008e2c:	53                   	push   ebx
c0008e2d:	e8 7c fb ff ff       	call   c00089ae <VgaText::putchar(char)>
c0008e32:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e35:	e8 46 77 ff ff       	call   c0000580 <strlen>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e45:	83 fa 1f             	cmp    edx,0x1f
c0008e48:	89 d0                	mov    eax,edx
c0008e4a:	7f 1c                	jg     c0008e68 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e4c:	83 e8 08             	sub    eax,0x8
c0008e4f:	3c 02                	cmp    al,0x2
c0008e51:	76 15                	jbe    c0008e68 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e53:	83 fa 0d             	cmp    edx,0xd
c0008e56:	74 10                	je     c0008e68 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e58:	57                   	push   edi
c0008e59:	57                   	push   edi
c0008e5a:	68 e7 0f 02 c0       	push   0xc0020fe7
c0008e5f:	53                   	push   ebx
c0008e60:	e8 77 fc ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0008e65:	83 c4 10             	add    esp,0x10
c0008e68:	83 ec 0c             	sub    esp,0xc
c0008e6b:	56                   	push   esi
c0008e6c:	e8 0f 77 ff ff       	call   c0000580 <strlen>
c0008e71:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e79:	e9 96 00 00 00       	jmp    c0008f14 <VgaText::receiveKey(unsigned char)+0x128>
c0008e7e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e84:	83 ec 0c             	sub    esp,0xc
c0008e87:	50                   	push   eax
c0008e88:	e8 f3 76 ff ff       	call   c0000580 <strlen>
c0008e8d:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e90:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e94:	e8 e7 76 ff ff       	call   c0000580 <strlen>
c0008e99:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e9d:	83 c4 10             	add    esp,0x10
c0008ea0:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008ea4:	3d 80 00 00 00       	cmp    eax,0x80
c0008ea9:	0f 87 a2 00 00 00    	ja     c0008f51 <VgaText::receiveKey(unsigned char)+0x165>
c0008eaf:	8d 47 ff             	lea    eax,[edi-0x1]
c0008eb2:	3c 1e                	cmp    al,0x1e
c0008eb4:	77 35                	ja     c0008eeb <VgaText::receiveKey(unsigned char)+0xff>
c0008eb6:	8d 47 f7             	lea    eax,[edi-0x9]
c0008eb9:	3c 01                	cmp    al,0x1
c0008ebb:	76 2e                	jbe    c0008eeb <VgaText::receiveKey(unsigned char)+0xff>
c0008ebd:	83 fd 0d             	cmp    ebp,0xd
c0008ec0:	74 29                	je     c0008eeb <VgaText::receiveKey(unsigned char)+0xff>
c0008ec2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ec5:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ec8:	68 ed 0f 02 c0       	push   0xc0020fed
c0008ecd:	53                   	push   ebx
c0008ece:	e8 7b fc ff ff       	call   c0008b4e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ed3:	8d 47 40             	lea    eax,[edi+0x40]
c0008ed6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ed9:	0f b6 c0             	movzx  eax,al
c0008edc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008edf:	50                   	push   eax
c0008ee0:	53                   	push   ebx
c0008ee1:	e8 f8 f9 ff ff       	call   c00088de <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ee6:	83 c4 20             	add    esp,0x20
c0008ee9:	eb 11                	jmp    c0008efc <VgaText::receiveKey(unsigned char)+0x110>
c0008eeb:	51                   	push   ecx
c0008eec:	89 f8                	mov    eax,edi
c0008eee:	51                   	push   ecx
c0008eef:	0f be c0             	movsx  eax,al
c0008ef2:	50                   	push   eax
c0008ef3:	53                   	push   ebx
c0008ef4:	e8 b5 fa ff ff       	call   c00089ae <VgaText::putchar(char)>
c0008ef9:	83 c4 10             	add    esp,0x10
c0008efc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008f01:	89 f8                	mov    eax,edi
c0008f03:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008f07:	52                   	push   edx
c0008f08:	52                   	push   edx
c0008f09:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008f0d:	50                   	push   eax
c0008f0e:	56                   	push   esi
c0008f0f:	e8 5c 79 ff ff       	call   c0000870 <strcat>
c0008f14:	83 c4 10             	add    esp,0x10
c0008f17:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008f1e:	75 0f                	jne    c0008f2f <VgaText::receiveKey(unsigned char)+0x143>
c0008f20:	83 fd 1c             	cmp    ebp,0x1c
c0008f23:	77 2c                	ja     c0008f51 <VgaText::receiveKey(unsigned char)+0x165>
c0008f25:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f2a:	0f a3 e8             	bt     eax,ebp
c0008f2d:	73 22                	jae    c0008f51 <VgaText::receiveKey(unsigned char)+0x165>
c0008f2f:	50                   	push   eax
c0008f30:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f36:	50                   	push   eax
c0008f37:	56                   	push   esi
c0008f38:	53                   	push   ebx
c0008f39:	e8 32 79 ff ff       	call   c0000870 <strcat>
c0008f3e:	83 c4 0c             	add    esp,0xc
c0008f41:	68 80 00 00 00       	push   0x80
c0008f46:	6a 00                	push   0x0
c0008f48:	56                   	push   esi
c0008f49:	e8 a2 75 ff ff       	call   c00004f0 <memset>
c0008f4e:	83 c4 10             	add    esp,0x10
c0008f51:	83 c4 2c             	add    esp,0x2c
c0008f54:	5b                   	pop    ebx
c0008f55:	5e                   	pop    esi
c0008f56:	5f                   	pop    edi
c0008f57:	5d                   	pop    ebp
c0008f58:	c3                   	ret    
c0008f59:	90                   	nop

c0008f5a <VgaText::doUpdate()>:
c0008f5a:	c3                   	ret    
c0008f5b:	90                   	nop

c0008f5c <TSS::TSS()>:
c0008f5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f60:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f67:	90                   	nop
c0008f68:	c3                   	ret    
c0008f69:	90                   	nop
c0008f6a:	66 90                	xchg   ax,ax

c0008f6c <TSS::setESP(unsigned long)>:
c0008f6c:	55                   	push   ebp
c0008f6d:	89 e5                	mov    ebp,esp
c0008f6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f75:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f78:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f7b:	90                   	nop
c0008f7c:	5d                   	pop    ebp
c0008f7d:	c3                   	ret    
c0008f7e:	66 90                	xchg   ax,ax

c0008f80 <TSS::flush()>:
c0008f80:	55                   	push   ebp
c0008f81:	89 e5                	mov    ebp,esp
c0008f83:	83 ec 10             	sub    esp,0x10
c0008f86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f89:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f8b:	83 c8 03             	or     eax,0x3
c0008f8e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f92:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f96:	66 89 d0             	mov    ax,dx
c0008f99:	0f 00 d8             	ltr    ax
c0008f9c:	90                   	nop
c0008f9d:	c9                   	leave  
c0008f9e:	c3                   	ret    
c0008f9f:	90                   	nop

c0008fa0 <TSS::setup(unsigned long, unsigned long)>:
c0008fa0:	55                   	push   ebp
c0008fa1:	89 e5                	mov    ebp,esp
c0008fa3:	83 ec 18             	sub    esp,0x18
c0008fa6:	83 ec 0c             	sub    esp,0xc
c0008fa9:	6a 68                	push   0x68
c0008fab:	e8 53 eb ff ff       	call   c0007b03 <malloc>
c0008fb0:	83 c4 10             	add    esp,0x10
c0008fb3:	89 c2                	mov    edx,eax
c0008fb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fc1:	83 ec 04             	sub    esp,0x4
c0008fc4:	6a 68                	push   0x68
c0008fc6:	6a 00                	push   0x0
c0008fc8:	50                   	push   eax
c0008fc9:	e8 22 75 ff ff       	call   c00004f0 <memset>
c0008fce:	83 c4 10             	add    esp,0x10
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008ff2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000903d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009043:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009046:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009049:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009052:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009055:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009058:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000905b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009062:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009065:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009068:	0f 20 da             	mov    edx,cr3
c000906b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000906e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009071:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009074:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009077:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000907a:	83 ec 08             	sub    esp,0x8
c000907d:	50                   	push   eax
c000907e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009081:	50                   	push   eax
c0009082:	e8 eb e2 ff ff       	call   c0007372 <GDTEntry::setBase(unsigned int)>
c0009087:	83 c4 10             	add    esp,0x10
c000908a:	83 ec 08             	sub    esp,0x8
c000908d:	6a 68                	push   0x68
c000908f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009092:	50                   	push   eax
c0009093:	e8 f6 e2 ff ff       	call   c000738e <GDTEntry::setLimit(unsigned int)>
c0009098:	83 c4 10             	add    esp,0x10
c000909b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000909f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00090a2:	83 e0 0f             	and    eax,0xf
c00090a5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090a8:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00090ab:	83 c8 40             	or     eax,0x40
c00090ae:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090b1:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090b6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090bc:	05 78 01 00 00       	add    eax,0x178
c00090c1:	83 ec 04             	sub    esp,0x4
c00090c4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090c7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090ca:	50                   	push   eax
c00090cb:	e8 f2 e2 ff ff       	call   c00073c2 <GDT::addEntry(GDTEntry)>
c00090d0:	83 c4 10             	add    esp,0x10
c00090d3:	89 c2                	mov    edx,eax
c00090d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090d8:	89 10                	mov    DWORD PTR [eax],edx
c00090da:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090e5:	05 78 01 00 00       	add    eax,0x178
c00090ea:	83 ec 0c             	sub    esp,0xc
c00090ed:	50                   	push   eax
c00090ee:	e8 f9 e2 ff ff       	call   c00073ec <GDT::flush()>
c00090f3:	83 c4 10             	add    esp,0x10
c00090f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090fb:	c9                   	leave  
c00090fc:	c3                   	ret    
c00090fd:	90                   	nop

c00090fe <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009102:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009106:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009109:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000910e:	75 08                	jne    c0009118 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0009110:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009116:	eb 38                	jmp    c0009150 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009118:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000911d:	75 17                	jne    c0009136 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000911f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009124:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009127:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000912d:	8b 10                	mov    edx,DWORD PTR [eax]
c000912f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009133:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009136:	89 c1                	mov    ecx,eax
c0009138:	83 e1 fd             	and    ecx,0xfffffffd
c000913b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009141:	74 cd                	je     c0009110 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009143:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009148:	83 e0 ef             	and    eax,0xffffffef
c000914b:	83 f8 08             	cmp    eax,0x8
c000914e:	76 c0                	jbe    c0009110 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009150:	31 c0                	xor    eax,eax
c0009152:	c3                   	ret    
c0009153:	90                   	nop

c0009154 <ReservedFilename::isAtty()>:
c0009154:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009158:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000915b:	31 c0                	xor    eax,eax
c000915d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009163:	74 09                	je     c000916e <ReservedFilename::isAtty()+0x1a>
c0009165:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000916b:	0f 94 c0             	sete   al
c000916e:	c3                   	ret    
c000916f:	90                   	nop

c0009170 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009174:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009178:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000917c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000917f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009184:	75 08                	jne    c000918e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009186:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000918c:	eb 3d                	jmp    c00091cb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000918e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009193:	75 17                	jne    c00091ac <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009195:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000919a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000919d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00091a3:	8b 10                	mov    edx,DWORD PTR [eax]
c00091a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00091a9:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00091ac:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00091b1:	75 04                	jne    c00091b7 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00091b3:	89 0a                	mov    DWORD PTR [edx],ecx
c00091b5:	eb 14                	jmp    c00091cb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00091b7:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091bc:	74 c8                	je     c0009186 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091be:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091c3:	83 e0 ef             	and    eax,0xffffffef
c00091c6:	83 f8 08             	cmp    eax,0x8
c00091c9:	76 bb                	jbe    c0009186 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091cb:	31 c0                	xor    eax,eax
c00091cd:	c3                   	ret    

c00091ce <UnixFile::getFileDescriptor()>:
c00091ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091d5:	c3                   	ret    

c00091d6 <UnixFile::UnixFile(int)>:
c00091d6:	53                   	push   ebx
c00091d7:	83 ec 28             	sub    esp,0x28
c00091da:	ba c4 10 02 c0       	mov    edx,0xc00210c4
c00091df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091e3:	89 10                	mov    DWORD PTR [eax],edx
c00091e5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091ed:	0f 8f 90 01 00 00    	jg     c0009383 <UnixFile::UnixFile(int)+0x1ad>
c00091f3:	a1 00 39 02 c0       	mov    eax,ds:0xc0023900
c00091f8:	8d 50 01             	lea    edx,[eax+0x1]
c00091fb:	89 15 00 39 02 c0    	mov    DWORD PTR ds:0xc0023900,edx
c0009201:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009205:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009208:	83 ec 08             	sub    esp,0x8
c000920b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000920f:	68 98 6f 02 c0       	push   0xc0026f98
c0009214:	e8 0f 69 01 00       	call   c001fb28 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009219:	83 c4 10             	add    esp,0x10
c000921c:	a0 94 6f 02 c0       	mov    al,ds:0xc0026f94
c0009221:	83 f0 01             	xor    eax,0x1
c0009224:	0f b6 c0             	movzx  eax,al
c0009227:	85 c0                	test   eax,eax
c0009229:	0f 84 55 01 00 00    	je     c0009384 <UnixFile::UnixFile(int)+0x1ae>
c000922f:	c6 05 94 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f94,0x1
c0009236:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000923e:	83 ec 0c             	sub    esp,0xc
c0009241:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009245:	e8 b9 e8 ff ff       	call   c0007b03 <malloc>
c000924a:	83 c4 10             	add    esp,0x10
c000924d:	89 c3                	mov    ebx,eax
c000924f:	83 ec 08             	sub    esp,0x8
c0009252:	68 03 ff ff 0f       	push   0xfffff03
c0009257:	53                   	push   ebx
c0009258:	e8 2d 01 00 00       	call   c000938a <ReservedFilename::ReservedFilename(int)>
c000925d:	83 c4 10             	add    esp,0x10
c0009260:	89 1d 8c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f8c,ebx
c0009266:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000926e:	83 ec 0c             	sub    esp,0xc
c0009271:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009275:	e8 89 e8 ff ff       	call   c0007b03 <malloc>
c000927a:	83 c4 10             	add    esp,0x10
c000927d:	89 c3                	mov    ebx,eax
c000927f:	83 ec 08             	sub    esp,0x8
c0009282:	68 01 ff ff 0f       	push   0xfffff01
c0009287:	53                   	push   ebx
c0009288:	e8 fd 00 00 00       	call   c000938a <ReservedFilename::ReservedFilename(int)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c0009296:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000929e:	83 ec 0c             	sub    esp,0xc
c00092a1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00092a5:	e8 59 e8 ff ff       	call   c0007b03 <malloc>
c00092aa:	83 c4 10             	add    esp,0x10
c00092ad:	89 c3                	mov    ebx,eax
c00092af:	83 ec 08             	sub    esp,0x8
c00092b2:	68 00 ff ff 0f       	push   0xfffff00
c00092b7:	53                   	push   ebx
c00092b8:	e8 cd 00 00 00       	call   c000938a <ReservedFilename::ReservedFilename(int)>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	89 1d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebx
c00092c6:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092ce:	83 ec 0c             	sub    esp,0xc
c00092d1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092d5:	e8 29 e8 ff ff       	call   c0007b03 <malloc>
c00092da:	83 c4 10             	add    esp,0x10
c00092dd:	89 c3                	mov    ebx,eax
c00092df:	83 ec 08             	sub    esp,0x8
c00092e2:	68 02 ff ff 0f       	push   0xfffff02
c00092e7:	53                   	push   ebx
c00092e8:	e8 9d 00 00 00       	call   c000938a <ReservedFilename::ReservedFilename(int)>
c00092ed:	83 c4 10             	add    esp,0x10
c00092f0:	89 1d 88 6f 02 c0    	mov    DWORD PTR ds:0xc0026f88,ebx
c00092f6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092fe:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0009303:	7f 7f                	jg     c0009384 <UnixFile::UnixFile(int)+0x1ae>
c0009305:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000930d:	83 ec 0c             	sub    esp,0xc
c0009310:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009314:	e8 ea e7 ff ff       	call   c0007b03 <malloc>
c0009319:	83 c4 10             	add    esp,0x10
c000931c:	89 c3                	mov    ebx,eax
c000931e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009322:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009327:	83 ec 08             	sub    esp,0x8
c000932a:	50                   	push   eax
c000932b:	53                   	push   ebx
c000932c:	e8 59 00 00 00       	call   c000938a <ReservedFilename::ReservedFilename(int)>
c0009331:	83 c4 10             	add    esp,0x10
c0009334:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009338:	89 1c 85 60 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90a0],ebx
c000933f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009347:	83 ec 0c             	sub    esp,0xc
c000934a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000934e:	e8 b0 e7 ff ff       	call   c0007b03 <malloc>
c0009353:	83 c4 10             	add    esp,0x10
c0009356:	89 c3                	mov    ebx,eax
c0009358:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000935c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009361:	83 ec 08             	sub    esp,0x8
c0009364:	50                   	push   eax
c0009365:	53                   	push   ebx
c0009366:	e8 1f 00 00 00       	call   c000938a <ReservedFilename::ReservedFilename(int)>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009372:	89 1c 85 20 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90e0],ebx
c0009379:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000937e:	e9 7b ff ff ff       	jmp    c00092fe <UnixFile::UnixFile(int)+0x128>
c0009383:	90                   	nop
c0009384:	83 c4 28             	add    esp,0x28
c0009387:	5b                   	pop    ebx
c0009388:	c3                   	ret    
c0009389:	90                   	nop

c000938a <ReservedFilename::ReservedFilename(int)>:
c000938a:	83 ec 0c             	sub    esp,0xc
c000938d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009391:	83 ec 08             	sub    esp,0x8
c0009394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009398:	50                   	push   eax
c0009399:	e8 38 fe ff ff       	call   c00091d6 <UnixFile::UnixFile(int)>
c000939e:	83 c4 10             	add    esp,0x10
c00093a1:	ba e0 10 02 c0       	mov    edx,0xc00210e0
c00093a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093aa:	89 10                	mov    DWORD PTR [eax],edx
c00093ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00093b4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00093b7:	90                   	nop
c00093b8:	83 c4 0c             	add    esp,0xc
c00093bb:	c3                   	ret    

c00093bc <UnixFile::~UnixFile()>:
c00093bc:	83 ec 1c             	sub    esp,0x1c
c00093bf:	ba c4 10 02 c0       	mov    edx,0xc00210c4
c00093c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093c8:	89 10                	mov    DWORD PTR [eax],edx
c00093ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093d1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093d6:	7f 76                	jg     c000944e <UnixFile::~UnixFile()+0x92>
c00093d8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093e0:	83 ec 0c             	sub    esp,0xc
c00093e3:	68 98 6f 02 c0       	push   0xc0026f98
c00093e8:	e8 0f 68 01 00       	call   c001fbfc <LinkedList<UnixFile>::getFirstElement()>
c00093ed:	83 c4 10             	add    esp,0x10
c00093f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093f4:	83 ec 0c             	sub    esp,0xc
c00093f7:	68 98 6f 02 c0       	push   0xc0026f98
c00093fc:	e8 03 68 01 00       	call   c001fc04 <LinkedList<UnixFile>::removeFirst()>
c0009401:	83 c4 10             	add    esp,0x10
c0009404:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009408:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000940c:	74 43                	je     c0009451 <UnixFile::~UnixFile()+0x95>
c000940e:	83 ec 08             	sub    esp,0x8
c0009411:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009415:	68 98 6f 02 c0       	push   0xc0026f98
c000941a:	e8 09 67 01 00       	call   c001fb28 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000941f:	83 c4 10             	add    esp,0x10
c0009422:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009426:	8d 50 01             	lea    edx,[eax+0x1]
c0009429:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000942d:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009432:	0f 94 c0             	sete   al
c0009435:	0f b6 c0             	movzx  eax,al
c0009438:	85 c0                	test   eax,eax
c000943a:	74 a4                	je     c00093e0 <UnixFile::~UnixFile()+0x24>
c000943c:	83 ec 0c             	sub    esp,0xc
c000943f:	68 9c 10 02 c0       	push   0xc002109c
c0009444:	e8 0e 82 00 00       	call   c0011657 <KePanic(char const*)>
c0009449:	83 c4 10             	add    esp,0x10
c000944c:	eb 92                	jmp    c00093e0 <UnixFile::~UnixFile()+0x24>
c000944e:	90                   	nop
c000944f:	eb 01                	jmp    c0009452 <UnixFile::~UnixFile()+0x96>
c0009451:	90                   	nop
c0009452:	90                   	nop
c0009453:	83 c4 1c             	add    esp,0x1c
c0009456:	c3                   	ret    
c0009457:	90                   	nop

c0009458 <UnixFile::~UnixFile()>:
c0009458:	83 ec 0c             	sub    esp,0xc
c000945b:	83 ec 0c             	sub    esp,0xc
c000945e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009462:	e8 55 ff ff ff       	call   c00093bc <UnixFile::~UnixFile()>
c0009467:	83 c4 10             	add    esp,0x10
c000946a:	83 ec 08             	sub    esp,0x8
c000946d:	6a 0c                	push   0xc
c000946f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009473:	e8 c4 13 00 00       	call   c000a83c <operator delete(void*, unsigned long)>
c0009478:	83 c4 10             	add    esp,0x10
c000947b:	83 c4 0c             	add    esp,0xc
c000947e:	c3                   	ret    
c000947f:	90                   	nop

c0009480 <ReservedFilename::~ReservedFilename()>:
c0009480:	83 ec 0c             	sub    esp,0xc
c0009483:	ba e0 10 02 c0       	mov    edx,0xc00210e0
c0009488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000948c:	89 10                	mov    DWORD PTR [eax],edx
c000948e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009492:	83 ec 0c             	sub    esp,0xc
c0009495:	50                   	push   eax
c0009496:	e8 21 ff ff ff       	call   c00093bc <UnixFile::~UnixFile()>
c000949b:	83 c4 10             	add    esp,0x10
c000949e:	90                   	nop
c000949f:	83 c4 0c             	add    esp,0xc
c00094a2:	c3                   	ret    
c00094a3:	90                   	nop

c00094a4 <ReservedFilename::~ReservedFilename()>:
c00094a4:	83 ec 0c             	sub    esp,0xc
c00094a7:	83 ec 0c             	sub    esp,0xc
c00094aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094ae:	e8 cd ff ff ff       	call   c0009480 <ReservedFilename::~ReservedFilename()>
c00094b3:	83 c4 10             	add    esp,0x10
c00094b6:	83 ec 08             	sub    esp,0x8
c00094b9:	6a 0c                	push   0xc
c00094bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094bf:	e8 78 13 00 00       	call   c000a83c <operator delete(void*, unsigned long)>
c00094c4:	83 c4 10             	add    esp,0x10
c00094c7:	83 c4 0c             	add    esp,0xc
c00094ca:	c3                   	ret    

c00094cb <KeGetFileFromDescriptor(int)>:
c00094cb:	53                   	push   ebx
c00094cc:	83 ec 08             	sub    esp,0x8
c00094cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094d3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094d9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094df:	7f 2c                	jg     c000950d <KeGetFileFromDescriptor(int)+0x42>
c00094e1:	83 ec 0c             	sub    esp,0xc
c00094e4:	68 98 6f 02 c0       	push   0xc0026f98
c00094e9:	e8 0e 67 01 00       	call   c001fbfc <LinkedList<UnixFile>::getFirstElement()>
c00094ee:	83 c4 10             	add    esp,0x10
c00094f1:	85 c0                	test   eax,eax
c00094f3:	75 04                	jne    c00094f9 <KeGetFileFromDescriptor(int)+0x2e>
c00094f5:	31 c0                	xor    eax,eax
c00094f7:	eb 6e                	jmp    c0009567 <KeGetFileFromDescriptor(int)+0x9c>
c00094f9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094fc:	74 69                	je     c0009567 <KeGetFileFromDescriptor(int)+0x9c>
c00094fe:	52                   	push   edx
c00094ff:	52                   	push   edx
c0009500:	50                   	push   eax
c0009501:	68 98 6f 02 c0       	push   0xc0026f98
c0009506:	e8 9b 67 01 00       	call   c001fca6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000950b:	eb e1                	jmp    c00094ee <KeGetFileFromDescriptor(int)+0x23>
c000950d:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009513:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c0009518:	74 4d                	je     c0009567 <KeGetFileFromDescriptor(int)+0x9c>
c000951a:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009520:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c0009525:	74 40                	je     c0009567 <KeGetFileFromDescriptor(int)+0x9c>
c0009527:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000952d:	a1 88 6f 02 c0       	mov    eax,ds:0xc0026f88
c0009532:	74 33                	je     c0009567 <KeGetFileFromDescriptor(int)+0x9c>
c0009534:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000953a:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c000953f:	74 26                	je     c0009567 <KeGetFileFromDescriptor(int)+0x9c>
c0009541:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009547:	83 f8 08             	cmp    eax,0x8
c000954a:	77 09                	ja     c0009555 <KeGetFileFromDescriptor(int)+0x8a>
c000954c:	8b 04 85 60 6f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd90a0]
c0009553:	eb 12                	jmp    c0009567 <KeGetFileFromDescriptor(int)+0x9c>
c0009555:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000955b:	83 fb 08             	cmp    ebx,0x8
c000955e:	77 95                	ja     c00094f5 <KeGetFileFromDescriptor(int)+0x2a>
c0009560:	8b 04 9d 20 6f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd90e0]
c0009567:	83 c4 08             	add    esp,0x8
c000956a:	5b                   	pop    ebx
c000956b:	c3                   	ret    

c000956c <__static_initialization_and_destruction_0(int, int)>:
c000956c:	83 ec 0c             	sub    esp,0xc
c000956f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009574:	75 34                	jne    c00095aa <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009576:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000957e:	75 2a                	jne    c00095aa <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009580:	83 ec 0c             	sub    esp,0xc
c0009583:	68 98 6f 02 c0       	push   0xc0026f98
c0009588:	e8 59 65 01 00       	call   c001fae6 <LinkedList<UnixFile>::LinkedList()>
c000958d:	83 c4 10             	add    esp,0x10
c0009590:	83 ec 04             	sub    esp,0x4
c0009593:	68 7c 38 02 c0       	push   0xc002387c
c0009598:	68 98 6f 02 c0       	push   0xc0026f98
c000959d:	68 e4 fa 01 c0       	push   0xc001fae4
c00095a2:	e8 45 12 00 00       	call   c000a7ec <__cxa_atexit>
c00095a7:	83 c4 10             	add    esp,0x10
c00095aa:	90                   	nop
c00095ab:	83 c4 0c             	add    esp,0xc
c00095ae:	c3                   	ret    

c00095af <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00095af:	83 ec 0c             	sub    esp,0xc
c00095b2:	83 ec 08             	sub    esp,0x8
c00095b5:	68 ff ff 00 00       	push   0xffff
c00095ba:	6a 01                	push   0x1
c00095bc:	e8 ab ff ff ff       	call   c000956c <__static_initialization_and_destruction_0(int, int)>
c00095c1:	83 c4 10             	add    esp,0x10
c00095c4:	83 c4 0c             	add    esp,0xc
c00095c7:	c3                   	ret    

c00095c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095c8:	53                   	push   ebx
c00095c9:	8b 15 08 39 02 c0    	mov    edx,DWORD PTR ds:0xc0023908
c00095cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095d7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095dd:	89 d8                	mov    eax,ebx
c00095df:	d1 e8                	shr    eax,1
c00095e1:	01 d0                	add    eax,edx
c00095e3:	80 e3 01             	and    bl,0x1
c00095e6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095e8:	75 09                	jne    c00095f3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ea:	83 e2 f0             	and    edx,0xfffffff0
c00095ed:	09 ca                	or     edx,ecx
c00095ef:	88 10                	mov    BYTE PTR [eax],dl
c00095f1:	5b                   	pop    ebx
c00095f2:	c3                   	ret    
c00095f3:	0f b6 c9             	movzx  ecx,cl
c00095f6:	83 e2 0f             	and    edx,0xf
c00095f9:	c1 e1 04             	shl    ecx,0x4
c00095fc:	09 ca                	or     edx,ecx
c00095fe:	88 10                	mov    BYTE PTR [eax],dl
c0009600:	5b                   	pop    ebx
c0009601:	c3                   	ret    

c0009602 <Virt::getPageState(unsigned long)>:
c0009602:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009606:	8b 0d 08 39 02 c0    	mov    ecx,DWORD PTR ds:0xc0023908
c000960c:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009612:	89 d0                	mov    eax,edx
c0009614:	d1 e8                	shr    eax,1
c0009616:	80 e2 01             	and    dl,0x1
c0009619:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000961c:	74 03                	je     c0009621 <Virt::getPageState(unsigned long)+0x1f>
c000961e:	c1 e8 04             	shr    eax,0x4
c0009621:	83 e0 0f             	and    eax,0xf
c0009624:	c3                   	ret    

c0009625 <Virt::allocateKernelVirtualPages(int)>:
c0009625:	55                   	push   ebp
c0009626:	57                   	push   edi
c0009627:	56                   	push   esi
c0009628:	31 f6                	xor    esi,esi
c000962a:	53                   	push   ebx
c000962b:	31 db                	xor    ebx,ebx
c000962d:	83 ec 1c             	sub    esp,0x1c
c0009630:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009635:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009639:	8b 2d 04 39 02 c0    	mov    ebp,DWORD PTR ds:0xc0023904
c000963f:	55                   	push   ebp
c0009640:	e8 bd ff ff ff       	call   c0009602 <Virt::getPageState(unsigned long)>
c0009645:	5a                   	pop    edx
c0009646:	84 c0                	test   al,al
c0009648:	75 3d                	jne    c0009687 <Virt::allocateKernelVirtualPages(int)+0x62>
c000964a:	85 db                	test   ebx,ebx
c000964c:	0f 44 f5             	cmove  esi,ebp
c000964f:	83 c3 01             	add    ebx,0x1
c0009652:	39 fb                	cmp    ebx,edi
c0009654:	74 5e                	je     c00096b4 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009656:	83 c5 01             	add    ebp,0x1
c0009659:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000965f:	76 33                	jbe    c0009694 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009661:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009666:	c7 05 04 39 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023904,0xc8000
c0009670:	75 2a                	jne    c000969c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009672:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009677:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000967c:	55                   	push   ebp
c000967d:	e8 80 ff ff ff       	call   c0009602 <Virt::getPageState(unsigned long)>
c0009682:	5a                   	pop    edx
c0009683:	84 c0                	test   al,al
c0009685:	74 c3                	je     c000964a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009687:	83 c5 01             	add    ebp,0x1
c000968a:	31 db                	xor    ebx,ebx
c000968c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009692:	77 cd                	ja     c0009661 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009694:	89 2d 04 39 02 c0    	mov    DWORD PTR ds:0xc0023904,ebp
c000969a:	eb a3                	jmp    c000963f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000969c:	83 ec 0c             	sub    esp,0xc
c000969f:	68 f4 10 02 c0       	push   0xc00210f4
c00096a4:	e8 ae 7f 00 00       	call   c0011657 <KePanic(char const*)>
c00096a9:	8b 2d 04 39 02 c0    	mov    ebp,DWORD PTR ds:0xc0023904
c00096af:	83 c4 10             	add    esp,0x10
c00096b2:	eb 8b                	jmp    c000963f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00096b4:	89 35 04 39 02 c0    	mov    DWORD PTR ds:0xc0023904,esi
c00096ba:	83 fb 01             	cmp    ebx,0x1
c00096bd:	74 63                	je     c0009722 <Virt::allocateKernelVirtualPages(int)+0xfd>
c00096bf:	85 ff                	test   edi,edi
c00096c1:	74 41                	je     c0009704 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096c3:	89 f0                	mov    eax,esi
c00096c5:	31 db                	xor    ebx,ebx
c00096c7:	8d 6f ff             	lea    ebp,[edi-0x1]
c00096ca:	eb 16                	jmp    c00096e2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c00096cc:	6a 01                	push   0x1
c00096ce:	83 c3 01             	add    ebx,0x1
c00096d1:	50                   	push   eax
c00096d2:	e8 f1 fe ff ff       	call   c00095c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096d7:	39 fb                	cmp    ebx,edi
c00096d9:	58                   	pop    eax
c00096da:	5a                   	pop    edx
c00096db:	74 27                	je     c0009704 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096dd:	a1 04 39 02 c0       	mov    eax,ds:0xc0023904
c00096e2:	8d 50 01             	lea    edx,[eax+0x1]
c00096e5:	85 db                	test   ebx,ebx
c00096e7:	89 15 04 39 02 c0    	mov    DWORD PTR ds:0xc0023904,edx
c00096ed:	74 22                	je     c0009711 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096ef:	39 dd                	cmp    ebp,ebx
c00096f1:	75 d9                	jne    c00096cc <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096f3:	6a 03                	push   0x3
c00096f5:	83 c3 01             	add    ebx,0x1
c00096f8:	50                   	push   eax
c00096f9:	e8 ca fe ff ff       	call   c00095c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096fe:	39 fb                	cmp    ebx,edi
c0009700:	59                   	pop    ecx
c0009701:	58                   	pop    eax
c0009702:	75 d9                	jne    c00096dd <Virt::allocateKernelVirtualPages(int)+0xb8>
c0009704:	83 c4 1c             	add    esp,0x1c
c0009707:	89 f0                	mov    eax,esi
c0009709:	5b                   	pop    ebx
c000970a:	c1 e0 0c             	shl    eax,0xc
c000970d:	5e                   	pop    esi
c000970e:	5f                   	pop    edi
c000970f:	5d                   	pop    ebp
c0009710:	c3                   	ret    
c0009711:	6a 02                	push   0x2
c0009713:	bb 01 00 00 00       	mov    ebx,0x1
c0009718:	50                   	push   eax
c0009719:	e8 aa fe ff ff       	call   c00095c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000971e:	58                   	pop    eax
c000971f:	5a                   	pop    edx
c0009720:	eb bb                	jmp    c00096dd <Virt::allocateKernelVirtualPages(int)+0xb8>
c0009722:	6a 04                	push   0x4
c0009724:	56                   	push   esi
c0009725:	8d 46 01             	lea    eax,[esi+0x1]
c0009728:	a3 04 39 02 c0       	mov    ds:0xc0023904,eax
c000972d:	e8 96 fe ff ff       	call   c00095c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009732:	89 f0                	mov    eax,esi
c0009734:	59                   	pop    ecx
c0009735:	c1 e0 0c             	shl    eax,0xc
c0009738:	5b                   	pop    ebx
c0009739:	83 c4 1c             	add    esp,0x1c
c000973c:	5b                   	pop    ebx
c000973d:	5e                   	pop    esi
c000973e:	5f                   	pop    edi
c000973f:	5d                   	pop    ebp
c0009740:	c3                   	ret    

c0009741 <Virt::freeSwapfilePage(unsigned long)>:
c0009741:	53                   	push   ebx
c0009742:	8b 15 ac 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fac
c0009748:	b8 01 00 00 00       	mov    eax,0x1
c000974d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009751:	d3 e0                	shl    eax,cl
c0009753:	89 cb                	mov    ebx,ecx
c0009755:	c1 eb 05             	shr    ebx,0x5
c0009758:	f7 d0                	not    eax
c000975a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000975d:	21 c1                	and    ecx,eax
c000975f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009762:	5b                   	pop    ebx
c0009763:	c3                   	ret    

c0009764 <Virt::swapIDToSector(unsigned long)>:
c0009764:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009768:	8b 15 0c 39 02 c0    	mov    edx,DWORD PTR ds:0xc002390c
c000976e:	8b 0d 14 39 02 c0    	mov    ecx,DWORD PTR ds:0xc0023914
c0009774:	0f af c2             	imul   eax,edx
c0009777:	01 c8                	add    eax,ecx
c0009779:	c3                   	ret    

c000977a <Virt::allocateSwapfilePage()>:
c000977a:	55                   	push   ebp
c000977b:	31 d2                	xor    edx,edx
c000977d:	57                   	push   edi
c000977e:	56                   	push   esi
c000977f:	53                   	push   ebx
c0009780:	83 ec 0c             	sub    esp,0xc
c0009783:	8b 1d 10 39 02 c0    	mov    ebx,DWORD PTR ds:0xc0023910
c0009789:	8b 0d 0c 39 02 c0    	mov    ecx,DWORD PTR ds:0xc002390c
c000978f:	89 d8                	mov    eax,ebx
c0009791:	f7 f1                	div    ecx
c0009793:	39 cb                	cmp    ebx,ecx
c0009795:	72 2f                	jb     c00097c6 <Virt::allocateSwapfilePage()+0x4c>
c0009797:	8b 35 ac 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fac
c000979d:	8b 16                	mov    edx,DWORD PTR [esi]
c000979f:	f6 c2 01             	test   dl,0x1
c00097a2:	74 3e                	je     c00097e2 <Virt::allocateSwapfilePage()+0x68>
c00097a4:	31 c9                	xor    ecx,ecx
c00097a6:	bf 01 00 00 00       	mov    edi,0x1
c00097ab:	eb 12                	jmp    c00097bf <Virt::allocateSwapfilePage()+0x45>
c00097ad:	89 ca                	mov    edx,ecx
c00097af:	89 fd                	mov    ebp,edi
c00097b1:	c1 ea 05             	shr    edx,0x5
c00097b4:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097b7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097b9:	d3 e5                	shl    ebp,cl
c00097bb:	85 ea                	test   edx,ebp
c00097bd:	74 2c                	je     c00097eb <Virt::allocateSwapfilePage()+0x71>
c00097bf:	83 c1 01             	add    ecx,0x1
c00097c2:	39 c8                	cmp    eax,ecx
c00097c4:	77 e7                	ja     c00097ad <Virt::allocateSwapfilePage()+0x33>
c00097c6:	83 ec 0c             	sub    esp,0xc
c00097c9:	68 88 13 02 c0       	push   0xc0021388
c00097ce:	e8 84 7e 00 00       	call   c0011657 <KePanic(char const*)>
c00097d3:	83 c4 10             	add    esp,0x10
c00097d6:	31 c9                	xor    ecx,ecx
c00097d8:	83 c4 0c             	add    esp,0xc
c00097db:	89 c8                	mov    eax,ecx
c00097dd:	5b                   	pop    ebx
c00097de:	5e                   	pop    esi
c00097df:	5f                   	pop    edi
c00097e0:	5d                   	pop    ebp
c00097e1:	c3                   	ret    
c00097e2:	89 f3                	mov    ebx,esi
c00097e4:	bd 01 00 00 00       	mov    ebp,0x1
c00097e9:	31 c9                	xor    ecx,ecx
c00097eb:	09 ea                	or     edx,ebp
c00097ed:	89 c8                	mov    eax,ecx
c00097ef:	89 13                	mov    DWORD PTR [ebx],edx
c00097f1:	83 c4 0c             	add    esp,0xc
c00097f4:	5b                   	pop    ebx
c00097f5:	5e                   	pop    esi
c00097f6:	5f                   	pop    edi
c00097f7:	5d                   	pop    ebp
c00097f8:	c3                   	ret    

c00097f9 <Virt::virtualMemorySetup()>:
c00097f9:	53                   	push   ebx
c00097fa:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097ff:	6a 0f                	push   0xf
c0009801:	53                   	push   ebx
c0009802:	83 c3 01             	add    ebx,0x1
c0009805:	e8 be fd ff ff       	call   c00095c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980a:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009810:	58                   	pop    eax
c0009811:	5a                   	pop    edx
c0009812:	75 eb                	jne    c00097ff <Virt::virtualMemorySetup()+0x6>
c0009814:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009819:	6a 00                	push   0x0
c000981b:	53                   	push   ebx
c000981c:	83 c3 01             	add    ebx,0x1
c000981f:	e8 a4 fd ff ff       	call   c00095c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009824:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000982a:	59                   	pop    ecx
c000982b:	58                   	pop    eax
c000982c:	75 eb                	jne    c0009819 <Virt::virtualMemorySetup()+0x20>
c000982e:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009833:	6a 0f                	push   0xf
c0009835:	53                   	push   ebx
c0009836:	83 c3 01             	add    ebx,0x1
c0009839:	e8 8a fd ff ff       	call   c00095c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000983e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009844:	58                   	pop    eax
c0009845:	5a                   	pop    edx
c0009846:	75 eb                	jne    c0009833 <Virt::virtualMemorySetup()+0x3a>
c0009848:	5b                   	pop    ebx
c0009849:	c3                   	ret    

c000984a <Virt::setupPageSwapping(int)>:
c000984a:	53                   	push   ebx
c000984b:	83 ec 0c             	sub    esp,0xc
c000984e:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c0009853:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009857:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000985d:	8b 10                	mov    edx,DWORD PTR [eax]
c000985f:	53                   	push   ebx
c0009860:	68 9f 13 02 c0       	push   0xc002139f
c0009865:	50                   	push   eax
c0009866:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0009869:	c1 e3 0b             	shl    ebx,0xb
c000986c:	89 1d 10 39 02 c0    	mov    DWORD PTR ds:0xc0023910,ebx
c0009872:	c1 eb 08             	shr    ebx,0x8
c0009875:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009878:	c6 05 18 39 02 c0 43 	mov    BYTE PTR ds:0xc0023918,0x43
c000987f:	c7 05 0c 39 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002390c,0x8
c0009889:	a3 14 39 02 c0       	mov    ds:0xc0023914,eax
c000988e:	e8 70 e2 ff ff       	call   c0007b03 <malloc>
c0009893:	31 d2                	xor    edx,edx
c0009895:	83 c4 0c             	add    esp,0xc
c0009898:	a3 ac 6f 02 c0       	mov    ds:0xc0026fac,eax
c000989d:	89 c1                	mov    ecx,eax
c000989f:	a1 10 39 02 c0       	mov    eax,ds:0xc0023910
c00098a4:	f7 35 0c 39 02 c0    	div    DWORD PTR ds:0xc002390c
c00098aa:	c1 e8 05             	shr    eax,0x5
c00098ad:	50                   	push   eax
c00098ae:	6a 00                	push   0x0
c00098b0:	51                   	push   ecx
c00098b1:	e8 3a 6c ff ff       	call   c00004f0 <memset>
c00098b6:	83 c4 18             	add    esp,0x18
c00098b9:	5b                   	pop    ebx
c00098ba:	c3                   	ret    
c00098bb:	90                   	nop

c00098bc <VAS::setCPUSpecific(unsigned long)>:
c00098bc:	c3                   	ret    
c00098bd:	90                   	nop

c00098be <VAS::VAS(VAS*)>:
c00098be:	83 ec 0c             	sub    esp,0xc
c00098c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098d0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098d7:	83 ec 0c             	sub    esp,0xc
c00098da:	68 14 11 02 c0       	push   0xc0021114
c00098df:	e8 73 7d 00 00       	call   c0011657 <KePanic(char const*)>
c00098e4:	83 c4 10             	add    esp,0x10
c00098e7:	90                   	nop
c00098e8:	83 c4 0c             	add    esp,0xc
c00098eb:	c3                   	ret    

c00098ec <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098f0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098f5:	89 c2                	mov    edx,eax
c00098f7:	c1 ea 16             	shr    edx,0x16
c00098fa:	c1 e8 0a             	shr    eax,0xa
c00098fd:	83 f9 01             	cmp    ecx,0x1
c0009900:	19 c9                	sbb    ecx,ecx
c0009902:	25 fc 0f 00 00       	and    eax,0xffc
c0009907:	c1 e2 0c             	shl    edx,0xc
c000990a:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009910:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009917:	01 d0                	add    eax,edx
c0009919:	c3                   	ret    

c000991a <VAS::getPageTableEntry(unsigned long)>:
c000991a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000991e:	89 ca                	mov    edx,ecx
c0009920:	c1 ea 16             	shr    edx,0x16
c0009923:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009929:	c1 e9 0a             	shr    ecx,0xa
c000992c:	c1 e0 0c             	shl    eax,0xc
c000992f:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009935:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009938:	c3                   	ret    

c0009939 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009939:	55                   	push   ebp
c000993a:	57                   	push   edi
c000993b:	bf 01 00 00 00       	mov    edi,0x1
c0009940:	56                   	push   esi
c0009941:	53                   	push   ebx
c0009942:	83 ec 1c             	sub    esp,0x1c
c0009945:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009949:	c1 ee 0c             	shr    esi,0xc
c000994c:	eb 48                	jmp    c0009996 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c000994e:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0009953:	83 ec 08             	sub    esp,0x8
c0009956:	55                   	push   ebp
c0009957:	50                   	push   eax
c0009958:	e8 bd ff ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000995d:	83 c4 10             	add    esp,0x10
c0009960:	8b 10                	mov    edx,DWORD PTR [eax]
c0009962:	f6 c6 04             	test   dh,0x4
c0009965:	75 70                	jne    c00099d7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009967:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000996d:	83 fb 04             	cmp    ebx,0x4
c0009970:	0f 84 8a 00 00 00    	je     c0009a00 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009976:	83 fb 02             	cmp    ebx,0x2
c0009979:	0f 84 9a 00 00 00    	je     c0009a19 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c000997f:	83 fb 03             	cmp    ebx,0x3
c0009982:	0f 84 be 00 00 00    	je     c0009a46 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0009988:	83 fb 01             	cmp    ebx,0x1
c000998b:	0f 84 a2 00 00 00    	je     c0009a33 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009991:	83 c6 01             	add    esi,0x1
c0009994:	31 ff                	xor    edi,edi
c0009996:	56                   	push   esi
c0009997:	89 f5                	mov    ebp,esi
c0009999:	e8 64 fc ff ff       	call   c0009602 <Virt::getPageState(unsigned long)>
c000999e:	c1 e5 0c             	shl    ebp,0xc
c00099a1:	5a                   	pop    edx
c00099a2:	0f b6 d8             	movzx  ebx,al
c00099a5:	85 db                	test   ebx,ebx
c00099a7:	75 a5                	jne    c000994e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00099a9:	83 ec 0c             	sub    esp,0xc
c00099ac:	68 b6 13 02 c0       	push   0xc00213b6
c00099b1:	e8 a1 7c 00 00       	call   c0011657 <KePanic(char const*)>
c00099b6:	5a                   	pop    edx
c00099b7:	59                   	pop    ecx
c00099b8:	55                   	push   ebp
c00099b9:	8b 2d b0 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026fb0
c00099bf:	55                   	push   ebp
c00099c0:	e8 55 ff ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c00099c5:	83 c4 10             	add    esp,0x10
c00099c8:	8b 10                	mov    edx,DWORD PTR [eax]
c00099ca:	f6 c6 04             	test   dh,0x4
c00099cd:	75 08                	jne    c00099d7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099d5:	eb ba                	jmp    c0009991 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099db:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099e1:	83 ec 0c             	sub    esp,0xc
c00099e4:	52                   	push   edx
c00099e5:	e8 bf e3 ff ff       	call   c0007da9 <Phys::freePage(unsigned long)>
c00099ea:	83 c4 10             	add    esp,0x10
c00099ed:	83 fb 04             	cmp    ebx,0x4
c00099f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099f4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099fa:	0f 85 76 ff ff ff    	jne    c0009976 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0009a00:	83 e7 01             	and    edi,0x1
c0009a03:	75 46                	jne    c0009a4b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0009a05:	c7 44 24 30 38 11 02 c0 	mov    DWORD PTR [esp+0x30],0xc0021138
c0009a0d:	83 c4 1c             	add    esp,0x1c
c0009a10:	5b                   	pop    ebx
c0009a11:	5e                   	pop    esi
c0009a12:	5f                   	pop    edi
c0009a13:	5d                   	pop    ebp
c0009a14:	e9 3e 7c 00 00       	jmp    c0011657 <KePanic(char const*)>
c0009a19:	83 e7 01             	and    edi,0x1
c0009a1c:	75 15                	jne    c0009a33 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a1e:	83 ec 0c             	sub    esp,0xc
c0009a21:	68 d2 13 02 c0       	push   0xc00213d2
c0009a26:	e8 2c 7c 00 00       	call   c0011657 <KePanic(char const*)>
c0009a2b:	83 c4 10             	add    esp,0x10
c0009a2e:	e9 5e ff ff ff       	jmp    c0009991 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a33:	83 ec 08             	sub    esp,0x8
c0009a36:	6a 00                	push   0x0
c0009a38:	56                   	push   esi
c0009a39:	e8 8a fb ff ff       	call   c00095c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a3e:	83 c4 10             	add    esp,0x10
c0009a41:	e9 4b ff ff ff       	jmp    c0009991 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a46:	83 e7 01             	and    edi,0x1
c0009a49:	75 16                	jne    c0009a61 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a4b:	83 ec 08             	sub    esp,0x8
c0009a4e:	6a 00                	push   0x0
c0009a50:	56                   	push   esi
c0009a51:	e8 72 fb ff ff       	call   c00095c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a56:	83 c4 10             	add    esp,0x10
c0009a59:	83 c4 1c             	add    esp,0x1c
c0009a5c:	5b                   	pop    ebx
c0009a5d:	5e                   	pop    esi
c0009a5e:	5f                   	pop    edi
c0009a5f:	5d                   	pop    ebp
c0009a60:	c3                   	ret    
c0009a61:	c7 44 24 30 ee 13 02 c0 	mov    DWORD PTR [esp+0x30],0xc00213ee
c0009a69:	83 c4 1c             	add    esp,0x1c
c0009a6c:	5b                   	pop    ebx
c0009a6d:	5e                   	pop    esi
c0009a6e:	5f                   	pop    edi
c0009a6f:	5d                   	pop    ebp
c0009a70:	e9 e2 7b 00 00       	jmp    c0011657 <KePanic(char const*)>
c0009a75:	90                   	nop

c0009a76 <VAS::freeAllocatedPages(unsigned long)>:
c0009a76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a7e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a82:	74 09                	je     c0009a8d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a88:	e9 ac fe ff ff       	jmp    c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a8d:	c7 44 24 04 5c 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc002115c
c0009a95:	e9 a0 0e 00 00       	jmp    c000a93a <Dbg::kprintf(char const*, ...)>

c0009a9a <VAS::virtualToPhysical(unsigned long)>:
c0009a9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a9e:	50                   	push   eax
c0009a9f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009aa3:	52                   	push   edx
c0009aa4:	e8 71 fe ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c0009aa9:	59                   	pop    ecx
c0009aaa:	5a                   	pop    edx
c0009aab:	8b 00                	mov    eax,DWORD PTR [eax]
c0009aad:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ab2:	c3                   	ret    
c0009ab3:	90                   	nop

c0009ab4 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009ab4:	55                   	push   ebp
c0009ab5:	57                   	push   edi
c0009ab6:	56                   	push   esi
c0009ab7:	53                   	push   ebx
c0009ab8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009abc:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ac0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ac4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009ac8:	85 db                	test   ebx,ebx
c0009aca:	7e 24                	jle    c0009af0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009acc:	c1 e3 0c             	shl    ebx,0xc
c0009acf:	01 f3                	add    ebx,esi
c0009ad1:	56                   	push   esi
c0009ad2:	81 c6 00 10 00 00    	add    esi,0x1000
c0009ad8:	55                   	push   ebp
c0009ad9:	e8 3c fe ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c0009ade:	5a                   	pop    edx
c0009adf:	59                   	pop    ecx
c0009ae0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ae2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ae6:	21 f9                	and    ecx,edi
c0009ae8:	09 d1                	or     ecx,edx
c0009aea:	39 f3                	cmp    ebx,esi
c0009aec:	89 08                	mov    DWORD PTR [eax],ecx
c0009aee:	75 e1                	jne    c0009ad1 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009af0:	5b                   	pop    ebx
c0009af1:	5e                   	pop    esi
c0009af2:	5f                   	pop    edi
c0009af3:	5d                   	pop    ebp
c0009af4:	c3                   	ret    
c0009af5:	90                   	nop

c0009af6 <VAS::VAS()>:
c0009af6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009afa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009b01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b05:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009b0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b10:	a3 b0 6f 02 c0       	mov    ds:0xc0026fb0,eax
c0009b15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b19:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b21:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b28:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b2f:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0009b34:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b39:	29 c2                	sub    edx,eax
c0009b3b:	89 d0                	mov    eax,edx
c0009b3d:	05 ff 0f 00 00       	add    eax,0xfff
c0009b42:	c1 e8 0c             	shr    eax,0xc
c0009b45:	89 c2                	mov    edx,eax
c0009b47:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b4c:	6a 04                	push   0x4
c0009b4e:	6a ff                	push   0xffffffff
c0009b50:	52                   	push   edx
c0009b51:	50                   	push   eax
c0009b52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b56:	e8 59 ff ff ff       	call   c0009ab4 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b5b:	83 c4 14             	add    esp,0x14
c0009b5e:	90                   	nop
c0009b5f:	c3                   	ret    

c0009b60 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b60:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009b65:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b6b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b72:	75 01                	jne    c0009b75 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b74:	c3                   	ret    
c0009b75:	68 80 00 00 00       	push   0x80
c0009b7a:	6a ff                	push   0xffffffff
c0009b7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b80:	50                   	push   eax
c0009b81:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b85:	52                   	push   edx
c0009b86:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b8a:	51                   	push   ecx
c0009b8b:	e8 24 ff ff ff       	call   c0009ab4 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b90:	83 c4 14             	add    esp,0x14
c0009b93:	c3                   	ret    

c0009b94 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b98:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b9f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009ba2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009ba7:	83 f8 01             	cmp    eax,0x1
c0009baa:	19 c0                	sbb    eax,eax
c0009bac:	83 ca 03             	or     edx,0x3
c0009baf:	83 e0 fc             	and    eax,0xfffffffc
c0009bb2:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bb9:	0f 20 d8             	mov    eax,cr3
c0009bbc:	0f 22 d8             	mov    cr3,eax
c0009bbf:	c3                   	ret    

c0009bc0 <VAS::~VAS()>:
c0009bc0:	83 ec 2c             	sub    esp,0x2c
c0009bc3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bcb:	fa                   	cli    
c0009bcc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009bd1:	83 c0 01             	add    eax,0x1
c0009bd4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009bd9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bde:	8b 00                	mov    eax,DWORD PTR [eax]
c0009be0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009be3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009be9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bed:	6a 01                	push   0x1
c0009bef:	50                   	push   eax
c0009bf0:	e8 9f ff ff ff       	call   c0009b94 <VAS::mapOtherVASIn(bool, VAS*)>
c0009bf5:	83 c4 0c             	add    esp,0xc
c0009bf8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009c00:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009c08:	0f 8f d8 00 00 00    	jg     c0009ce6 <VAS::~VAS()+0x126>
c0009c0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c12:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c15:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c19:	c1 e2 02             	shl    edx,0x2
c0009c1c:	01 d0                	add    eax,edx
c0009c1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c20:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c28:	83 e0 01             	and    eax,0x1
c0009c2b:	0f 84 ab 00 00 00    	je     c0009cdc <VAS::~VAS()+0x11c>
c0009c31:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c39:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c41:	7f 74                	jg     c0009cb7 <VAS::~VAS()+0xf7>
c0009c43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c47:	c1 e0 0a             	shl    eax,0xa
c0009c4a:	89 c2                	mov    edx,eax
c0009c4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c50:	01 d0                	add    eax,edx
c0009c52:	c1 e0 0c             	shl    eax,0xc
c0009c55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c59:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c60:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c63:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c69:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c6d:	6a 01                	push   0x1
c0009c6f:	50                   	push   eax
c0009c70:	e8 77 fc ff ff       	call   c00098ec <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c75:	83 c4 0c             	add    esp,0xc
c0009c78:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c80:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c8a:	25 01 04 00 00       	and    eax,0x401
c0009c8f:	3d 01 04 00 00       	cmp    eax,0x401
c0009c94:	75 1a                	jne    c0009cb0 <VAS::~VAS()+0xf0>
c0009c96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c9a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c9f:	83 ec 0c             	sub    esp,0xc
c0009ca2:	50                   	push   eax
c0009ca3:	e8 01 e1 ff ff       	call   c0007da9 <Phys::freePage(unsigned long)>
c0009ca8:	83 c4 10             	add    esp,0x10
c0009cab:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cb0:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009cb5:	eb 82                	jmp    c0009c39 <VAS::~VAS()+0x79>
c0009cb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cbb:	25 00 04 00 00       	and    eax,0x400
c0009cc0:	74 1a                	je     c0009cdc <VAS::~VAS()+0x11c>
c0009cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cc6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ccb:	83 ec 0c             	sub    esp,0xc
c0009cce:	50                   	push   eax
c0009ccf:	e8 d5 e0 ff ff       	call   c0007da9 <Phys::freePage(unsigned long)>
c0009cd4:	83 c4 10             	add    esp,0x10
c0009cd7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cdc:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009ce1:	e9 1a ff ff ff       	jmp    c0009c00 <VAS::~VAS()+0x40>
c0009ce6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cea:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ced:	83 ec 0c             	sub    esp,0xc
c0009cf0:	50                   	push   eax
c0009cf1:	e8 43 fc ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cf6:	83 c4 10             	add    esp,0x10
c0009cf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cfd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009d00:	83 ec 0c             	sub    esp,0xc
c0009d03:	50                   	push   eax
c0009d04:	e8 a0 e0 ff ff       	call   c0007da9 <Phys::freePage(unsigned long)>
c0009d09:	83 c4 10             	add    esp,0x10
c0009d0c:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d11:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d16:	83 e8 01             	sub    eax,0x1
c0009d19:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009d1e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d23:	85 c0                	test   eax,eax
c0009d25:	75 01                	jne    c0009d28 <VAS::~VAS()+0x168>
c0009d27:	fb                   	sti    
c0009d28:	90                   	nop
c0009d29:	83 c4 2c             	add    esp,0x2c
c0009d2c:	c3                   	ret    
c0009d2d:	90                   	nop

c0009d2e <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d2e:	55                   	push   ebp
c0009d2f:	57                   	push   edi
c0009d30:	56                   	push   esi
c0009d31:	53                   	push   ebx
c0009d32:	83 ec 1c             	sub    esp,0x1c
c0009d35:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d39:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009d3d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009d41:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d47:	77 08                	ja     c0009d51 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0009d49:	0f 20 d8             	mov    eax,cr3
c0009d4c:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d4f:	75 43                	jne    c0009d94 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0009d51:	89 d8                	mov    eax,ebx
c0009d53:	09 f8                	or     eax,edi
c0009d55:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d5a:	75 53                	jne    c0009daf <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d5c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d5f:	89 de                	mov    esi,ebx
c0009d61:	c1 ee 16             	shr    esi,0x16
c0009d64:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d6b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d6f:	74 50                	je     c0009dc1 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0009d71:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d75:	c1 eb 0a             	shr    ebx,0xa
c0009d78:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d7e:	c1 e6 0c             	shl    esi,0xc
c0009d81:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d87:	09 c7                	or     edi,eax
c0009d89:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d8c:	83 c4 1c             	add    esp,0x1c
c0009d8f:	5b                   	pop    ebx
c0009d90:	5e                   	pop    esi
c0009d91:	5f                   	pop    edi
c0009d92:	5d                   	pop    ebp
c0009d93:	c3                   	ret    
c0009d94:	83 ec 0c             	sub    esp,0xc
c0009d97:	68 80 11 02 c0       	push   0xc0021180
c0009d9c:	e8 99 0b 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0009da1:	89 d8                	mov    eax,ebx
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	09 f8                	or     eax,edi
c0009da8:	a9 ff 0f 00 00       	test   eax,0xfff
c0009dad:	74 ad                	je     c0009d5c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009daf:	83 ec 0c             	sub    esp,0xc
c0009db2:	68 e8 11 02 c0       	push   0xc00211e8
c0009db7:	e8 9b 78 00 00       	call   c0011657 <KePanic(char const*)>
c0009dbc:	83 c4 10             	add    esp,0x10
c0009dbf:	eb 9b                	jmp    c0009d5c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009dc1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009dc5:	e8 48 e0 ff ff       	call   c0007e12 <Phys::allocatePage()>
c0009dca:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009dd0:	83 ec 0c             	sub    esp,0xc
c0009dd3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dd7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ddb:	6a 01                	push   0x1
c0009ddd:	e8 43 f8 ff ff       	call   c0009625 <Virt::allocateKernelVirtualPages(int)>
c0009de2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009de9:	6a 01                	push   0x1
c0009deb:	50                   	push   eax
c0009dec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009df0:	52                   	push   edx
c0009df1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009df5:	51                   	push   ecx
c0009df6:	e8 3d 01 00 00       	call   c0009f38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dfb:	83 c4 1c             	add    esp,0x1c
c0009dfe:	68 00 10 00 00       	push   0x1000
c0009e03:	6a 00                	push   0x0
c0009e05:	50                   	push   eax
c0009e06:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e0a:	e8 e1 66 ff ff       	call   c00004f0 <memset>
c0009e0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e13:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e16:	e8 1e fb ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0009e1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009e1f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e23:	83 c4 10             	add    esp,0x10
c0009e26:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009e29:	0d 07 04 00 00       	or     eax,0x407
c0009e2e:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e31:	e9 3b ff ff ff       	jmp    c0009d71 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0009e36 <VAS::allocatePages(int, int)>:
c0009e36:	55                   	push   ebp
c0009e37:	57                   	push   edi
c0009e38:	56                   	push   esi
c0009e39:	53                   	push   ebx
c0009e3a:	83 ec 1c             	sub    esp,0x1c
c0009e3d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e41:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e45:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e49:	75 75                	jne    c0009ec0 <VAS::allocatePages(int, int)+0x8a>
c0009e4b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e52:	85 c0                	test   eax,eax
c0009e54:	74 49                	je     c0009e9f <VAS::allocatePages(int, int)+0x69>
c0009e56:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e5a:	89 d5                	mov    ebp,edx
c0009e5c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e60:	c1 e5 0c             	shl    ebp,0xc
c0009e63:	01 dd                	add    ebp,ebx
c0009e65:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e68:	81 cf 00 04 00 00    	or     edi,0x400
c0009e6e:	85 d2                	test   edx,edx
c0009e70:	7e 1b                	jle    c0009e8d <VAS::allocatePages(int, int)+0x57>
c0009e72:	e8 9b df ff ff       	call   c0007e12 <Phys::allocatePage()>
c0009e77:	57                   	push   edi
c0009e78:	53                   	push   ebx
c0009e79:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e7f:	50                   	push   eax
c0009e80:	56                   	push   esi
c0009e81:	e8 a8 fe ff ff       	call   c0009d2e <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e86:	83 c4 10             	add    esp,0x10
c0009e89:	39 dd                	cmp    ebp,ebx
c0009e8b:	75 e5                	jne    c0009e72 <VAS::allocatePages(int, int)+0x3c>
c0009e8d:	0f 20 d8             	mov    eax,cr3
c0009e90:	0f 22 d8             	mov    cr3,eax
c0009e93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e97:	83 c4 1c             	add    esp,0x1c
c0009e9a:	5b                   	pop    ebx
c0009e9b:	5e                   	pop    esi
c0009e9c:	5f                   	pop    edi
c0009e9d:	5d                   	pop    ebp
c0009e9e:	c3                   	ret    
c0009e9f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009ea3:	83 ec 0c             	sub    esp,0xc
c0009ea6:	68 0c 12 02 c0       	push   0xc002120c
c0009eab:	e8 a7 77 00 00       	call   c0011657 <KePanic(char const*)>
c0009eb0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009eb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ebe:	eb 96                	jmp    c0009e56 <VAS::allocatePages(int, int)+0x20>
c0009ec0:	83 ec 0c             	sub    esp,0xc
c0009ec3:	52                   	push   edx
c0009ec4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009ec8:	e8 58 f7 ff ff       	call   c0009625 <Virt::allocateKernelVirtualPages(int)>
c0009ecd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ed1:	83 c4 10             	add    esp,0x10
c0009ed4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ed9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009edd:	77 38                	ja     c0009f17 <VAS::allocatePages(int, int)+0xe1>
c0009edf:	85 d2                	test   edx,edx
c0009ee1:	7e aa                	jle    c0009e8d <VAS::allocatePages(int, int)+0x57>
c0009ee3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ee7:	c1 e2 0c             	shl    edx,0xc
c0009eea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009eee:	81 cf 00 04 00 00    	or     edi,0x400
c0009ef4:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0009ef7:	e8 16 df ff ff       	call   c0007e12 <Phys::allocatePage()>
c0009efc:	57                   	push   edi
c0009efd:	53                   	push   ebx
c0009efe:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f04:	50                   	push   eax
c0009f05:	56                   	push   esi
c0009f06:	e8 23 fe ff ff       	call   c0009d2e <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f0b:	83 c4 10             	add    esp,0x10
c0009f0e:	39 dd                	cmp    ebp,ebx
c0009f10:	75 e5                	jne    c0009ef7 <VAS::allocatePages(int, int)+0xc1>
c0009f12:	e9 76 ff ff ff       	jmp    c0009e8d <VAS::allocatePages(int, int)+0x57>
c0009f17:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009f1c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f22:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f29:	74 b4                	je     c0009edf <VAS::allocatePages(int, int)+0xa9>
c0009f2b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f2f:	80 cc 01             	or     ah,0x1
c0009f32:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f36:	eb a7                	jmp    c0009edf <VAS::allocatePages(int, int)+0xa9>

c0009f38 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f38:	55                   	push   ebp
c0009f39:	57                   	push   edi
c0009f3a:	56                   	push   esi
c0009f3b:	53                   	push   ebx
c0009f3c:	83 ec 1c             	sub    esp,0x1c
c0009f3f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f43:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f47:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009f4b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009f4f:	85 db                	test   ebx,ebx
c0009f51:	7e 2c                	jle    c0009f7f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0009f53:	c1 e3 0c             	shl    ebx,0xc
c0009f56:	8d 04 33             	lea    eax,[ebx+esi*1]
c0009f59:	89 f3                	mov    ebx,esi
c0009f5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f5f:	55                   	push   ebp
c0009f60:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0009f64:	29 f2                	sub    edx,esi
c0009f66:	01 da                	add    edx,ebx
c0009f68:	52                   	push   edx
c0009f69:	53                   	push   ebx
c0009f6a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f70:	57                   	push   edi
c0009f71:	e8 b8 fd ff ff       	call   c0009d2e <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f76:	83 c4 10             	add    esp,0x10
c0009f79:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0009f7d:	75 e0                	jne    c0009f5f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0009f7f:	0f 20 d8             	mov    eax,cr3
c0009f82:	0f 22 d8             	mov    cr3,eax
c0009f85:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f89:	83 c4 1c             	add    esp,0x1c
c0009f8c:	5b                   	pop    ebx
c0009f8d:	5e                   	pop    esi
c0009f8e:	5f                   	pop    edi
c0009f8f:	5d                   	pop    ebp
c0009f90:	c3                   	ret    
c0009f91:	90                   	nop

c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f92:	55                   	push   ebp
c0009f93:	57                   	push   edi
c0009f94:	56                   	push   esi
c0009f95:	53                   	push   ebx
c0009f96:	83 ec 1c             	sub    esp,0x1c
c0009f99:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f9d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009fa1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009fa5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009fa9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009fad:	09 d8                	or     eax,ebx
c0009faf:	a9 ff 0f 00 00       	test   eax,0xfff
c0009fb4:	75 4b                	jne    c000a001 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009fb6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009fb9:	89 de                	mov    esi,ebx
c0009fbb:	c1 ee 16             	shr    esi,0x16
c0009fbe:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0009fc5:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0009fc9:	74 48                	je     c000a013 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0009fcb:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0009fd0:	c1 eb 0a             	shr    ebx,0xa
c0009fd3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009fd7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009fdb:	83 ff 01             	cmp    edi,0x1
c0009fde:	19 c0                	sbb    eax,eax
c0009fe0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009fe6:	c1 e6 0c             	shl    esi,0xc
c0009fe9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0009fee:	01 f3                	add    ebx,esi
c0009ff0:	09 ca                	or     edx,ecx
c0009ff2:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0009ff9:	83 c4 1c             	add    esp,0x1c
c0009ffc:	5b                   	pop    ebx
c0009ffd:	5e                   	pop    esi
c0009ffe:	5f                   	pop    edi
c0009fff:	5d                   	pop    ebp
c000a000:	c3                   	ret    
c000a001:	83 ec 0c             	sub    esp,0xc
c000a004:	68 38 12 02 c0       	push   0xc0021238
c000a009:	e8 49 76 00 00       	call   c0011657 <KePanic(char const*)>
c000a00e:	83 c4 10             	add    esp,0x10
c000a011:	eb a3                	jmp    c0009fb6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c000a013:	e8 fa dd ff ff       	call   c0007e12 <Phys::allocatePage()>
c000a018:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c000a01e:	83 ec 0c             	sub    esp,0xc
c000a021:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000a025:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a029:	6a 01                	push   0x1
c000a02b:	e8 f5 f5 ff ff       	call   c0009625 <Virt::allocateKernelVirtualPages(int)>
c000a030:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a037:	6a 01                	push   0x1
c000a039:	50                   	push   eax
c000a03a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a03e:	50                   	push   eax
c000a03f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a043:	51                   	push   ecx
c000a044:	e8 ef fe ff ff       	call   c0009f38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a049:	83 c4 1c             	add    esp,0x1c
c000a04c:	68 00 10 00 00       	push   0x1000
c000a051:	6a 00                	push   0x0
c000a053:	50                   	push   eax
c000a054:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a058:	e8 93 64 ff ff       	call   c00004f0 <memset>
c000a05d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a061:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a064:	e8 d0 f8 ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c000a069:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a06d:	83 c4 10             	add    esp,0x10
c000a070:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a073:	81 ca 07 04 00 00    	or     edx,0x407
c000a079:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a07c:	e9 4a ff ff ff       	jmp    c0009fcb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a081:	90                   	nop

c000a082 <VAS::VAS(bool)>:
c000a082:	53                   	push   ebx
c000a083:	83 ec 28             	sub    esp,0x28
c000a086:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a08a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a08e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a092:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a099:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a09d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a0a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a8:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a0ac:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a0af:	e8 5e dd ff ff       	call   c0007e12 <Phys::allocatePage()>
c000a0b4:	89 c2                	mov    edx,eax
c000a0b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0ba:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0bd:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000a0c3:	83 ec 0c             	sub    esp,0xc
c000a0c6:	6a 01                	push   0x1
c000a0c8:	e8 58 f5 ff ff       	call   c0009625 <Virt::allocateKernelVirtualPages(int)>
c000a0cd:	83 c4 10             	add    esp,0x10
c000a0d0:	89 c2                	mov    edx,eax
c000a0d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0d9:	83 ec 0c             	sub    esp,0xc
c000a0dc:	6a 03                	push   0x3
c000a0de:	6a 01                	push   0x1
c000a0e0:	52                   	push   edx
c000a0e1:	50                   	push   eax
c000a0e2:	53                   	push   ebx
c000a0e3:	e8 50 fe ff ff       	call   c0009f38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0e8:	83 c4 20             	add    esp,0x20
c000a0eb:	89 c2                	mov    edx,eax
c000a0ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0f1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0f4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0fc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a104:	7f 1d                	jg     c000a123 <VAS::VAS(bool)+0xa1>
c000a106:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a10a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a10d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a111:	c1 e2 02             	shl    edx,0x2
c000a114:	01 d0                	add    eax,edx
c000a116:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a11c:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a121:	eb d9                	jmp    c000a0fc <VAS::VAS(bool)+0x7a>
c000a123:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a12b:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a133:	7f 7e                	jg     c000a1b3 <VAS::VAS(bool)+0x131>
c000a135:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a139:	2d 00 02 00 00       	sub    eax,0x200
c000a13e:	c1 e0 0c             	shl    eax,0xc
c000a141:	83 c8 05             	or     eax,0x5
c000a144:	89 c2                	mov    edx,eax
c000a146:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a14b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a151:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a157:	83 e0 10             	and    eax,0x10
c000a15a:	0f b6 c0             	movzx  eax,al
c000a15d:	85 c0                	test   eax,eax
c000a15f:	74 07                	je     c000a168 <VAS::VAS(bool)+0xe6>
c000a161:	b8 00 01 00 00       	mov    eax,0x100
c000a166:	eb 05                	jmp    c000a16d <VAS::VAS(bool)+0xeb>
c000a168:	b8 00 00 00 00       	mov    eax,0x0
c000a16d:	09 d0                	or     eax,edx
c000a16f:	89 c1                	mov    ecx,eax
c000a171:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a175:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a178:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a17c:	c1 e2 02             	shl    edx,0x2
c000a17f:	01 d0                	add    eax,edx
c000a181:	89 ca                	mov    edx,ecx
c000a183:	89 10                	mov    DWORD PTR [eax],edx
c000a185:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a189:	2d 40 03 00 00       	sub    eax,0x340
c000a18e:	83 f8 7f             	cmp    eax,0x7f
c000a191:	77 16                	ja     c000a1a9 <VAS::VAS(bool)+0x127>
c000a193:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a197:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a19a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a19e:	c1 e2 02             	shl    edx,0x2
c000a1a1:	01 d0                	add    eax,edx
c000a1a3:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a1a9:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a1ae:	e9 78 ff ff ff       	jmp    c000a12b <VAS::VAS(bool)+0xa9>
c000a1b3:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1b8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1be:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1c4:	83 e0 10             	and    eax,0x10
c000a1c7:	0f b6 c0             	movzx  eax,al
c000a1ca:	85 c0                	test   eax,eax
c000a1cc:	74 07                	je     c000a1d5 <VAS::VAS(bool)+0x153>
c000a1ce:	b8 03 41 00 00       	mov    eax,0x4103
c000a1d3:	eb 05                	jmp    c000a1da <VAS::VAS(bool)+0x158>
c000a1d5:	b8 03 40 00 00       	mov    eax,0x4003
c000a1da:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1de:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1e1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1e7:	89 02                	mov    DWORD PTR [edx],eax
c000a1e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ed:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1f0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1f5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1fb:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a201:	83 e0 10             	and    eax,0x10
c000a204:	0f b6 c0             	movzx  eax,al
c000a207:	85 c0                	test   eax,eax
c000a209:	74 07                	je     c000a212 <VAS::VAS(bool)+0x190>
c000a20b:	b8 00 01 00 00       	mov    eax,0x100
c000a210:	eb 05                	jmp    c000a217 <VAS::VAS(bool)+0x195>
c000a212:	b8 00 00 00 00       	mov    eax,0x0
c000a217:	09 c2                	or     edx,eax
c000a219:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a21d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a220:	05 fc 0f 00 00       	add    eax,0xffc
c000a225:	83 ca 03             	or     edx,0x3
c000a228:	89 10                	mov    DWORD PTR [eax],edx
c000a22a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a22f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a235:	83 ec 0c             	sub    esp,0xc
c000a238:	50                   	push   eax
c000a239:	e8 60 2a 00 00       	call   c000cc9e <Device::getName()>
c000a23e:	83 c4 10             	add    esp,0x10
c000a241:	83 ec 08             	sub    esp,0x8
c000a244:	68 08 14 02 c0       	push   0xc0021408
c000a249:	50                   	push   eax
c000a24a:	e8 31 65 ff ff       	call   c0000780 <strcmp>
c000a24f:	83 c4 10             	add    esp,0x10
c000a252:	85 c0                	test   eax,eax
c000a254:	0f 94 c0             	sete   al
c000a257:	0f b6 c0             	movzx  eax,al
c000a25a:	85 c0                	test   eax,eax
c000a25c:	74 68                	je     c000a2c6 <VAS::VAS(bool)+0x244>
c000a25e:	fa                   	cli    
c000a25f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a264:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a26a:	05 7c 09 00 00       	add    eax,0x97c
c000a26f:	83 ec 0c             	sub    esp,0xc
c000a272:	50                   	push   eax
c000a273:	e8 86 d3 ff ff       	call   c00075fe <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a278:	83 c4 10             	add    esp,0x10
c000a27b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a280:	89 c3                	mov    ebx,eax
c000a282:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a287:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a28d:	05 7c 09 00 00       	add    eax,0x97c
c000a292:	83 ec 0c             	sub    esp,0xc
c000a295:	50                   	push   eax
c000a296:	e8 63 d3 ff ff       	call   c00075fe <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a29b:	83 c4 10             	add    esp,0x10
c000a29e:	83 ec 08             	sub    esp,0x8
c000a2a1:	50                   	push   eax
c000a2a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a6:	e8 6f f6 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a2ab:	83 c4 10             	add    esp,0x10
c000a2ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000a2b0:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2b5:	6a 11                	push   0x11
c000a2b7:	53                   	push   ebx
c000a2b8:	50                   	push   eax
c000a2b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2bd:	e8 6c fa ff ff       	call   c0009d2e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2c2:	83 c4 10             	add    esp,0x10
c000a2c5:	fb                   	sti    
c000a2c6:	90                   	nop
c000a2c7:	83 c4 28             	add    esp,0x28
c000a2ca:	5b                   	pop    ebx
c000a2cb:	c3                   	ret    

c000a2cc <VAS::evict(unsigned long)>:
c000a2cc:	55                   	push   ebp
c000a2cd:	57                   	push   edi
c000a2ce:	56                   	push   esi
c000a2cf:	53                   	push   ebx
c000a2d0:	83 ec 1c             	sub    esp,0x1c
c000a2d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2d7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2df:	e8 96 f4 ff ff       	call   c000977a <Virt::allocateSwapfilePage()>
c000a2e4:	89 c7                	mov    edi,eax
c000a2e6:	a1 0c 39 02 c0       	mov    eax,ds:0xc002390c
c000a2eb:	85 c0                	test   eax,eax
c000a2ed:	7e 40                	jle    c000a32f <VAS::evict(unsigned long)+0x63>
c000a2ef:	89 ee                	mov    esi,ebp
c000a2f1:	31 db                	xor    ebx,ebx
c000a2f3:	83 ec 0c             	sub    esp,0xc
c000a2f6:	57                   	push   edi
c000a2f7:	e8 68 f4 ff ff       	call   c0009764 <Virt::swapIDToSector(unsigned long)>
c000a2fc:	31 d2                	xor    edx,edx
c000a2fe:	89 34 24             	mov    DWORD PTR [esp],esi
c000a301:	81 c6 00 02 00 00    	add    esi,0x200
c000a307:	6a 01                	push   0x1
c000a309:	52                   	push   edx
c000a30a:	01 d8                	add    eax,ebx
c000a30c:	83 c3 01             	add    ebx,0x1
c000a30f:	50                   	push   eax
c000a310:	0f be 05 18 39 02 c0 	movsx  eax,BYTE PTR ds:0xc0023918
c000a317:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a31e:	50                   	push   eax
c000a31f:	e8 3a 3b 00 00       	call   c000de5e <LogicalDisk::write(unsigned long long, int, void*)>
c000a324:	83 c4 20             	add    esp,0x20
c000a327:	39 1d 0c 39 02 c0    	cmp    DWORD PTR ds:0xc002390c,ebx
c000a32d:	7f c4                	jg     c000a2f3 <VAS::evict(unsigned long)+0x27>
c000a32f:	c1 e7 0c             	shl    edi,0xc
c000a332:	83 ec 08             	sub    esp,0x8
c000a335:	55                   	push   ebp
c000a336:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a33a:	50                   	push   eax
c000a33b:	e8 da f5 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a340:	8b 10                	mov    edx,DWORD PTR [eax]
c000a342:	89 d3                	mov    ebx,edx
c000a344:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a34a:	09 d7                	or     edi,edx
c000a34c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a352:	89 38                	mov    DWORD PTR [eax],edi
c000a354:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a357:	8b 15 a8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fa8
c000a35d:	83 c2 01             	add    edx,0x1
c000a360:	89 15 a8 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa8,edx
c000a366:	e8 3e da ff ff       	call   c0007da9 <Phys::freePage(unsigned long)>
c000a36b:	0f 20 d8             	mov    eax,cr3
c000a36e:	0f 22 d8             	mov    cr3,eax
c000a371:	8b 0d a8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fa8
c000a377:	51                   	push   ecx
c000a378:	55                   	push   ebp
c000a379:	53                   	push   ebx
c000a37a:	68 5c 12 02 c0       	push   0xc002125c
c000a37f:	e8 b6 05 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000a384:	a1 a4 6f 02 c0       	mov    eax,ds:0xc0026fa4
c000a389:	c7 44 24 50 16 14 02 c0 	mov    DWORD PTR [esp+0x50],0xc0021416
c000a391:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a395:	8d 50 01             	lea    edx,[eax+0x1]
c000a398:	89 15 a4 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa4,edx
c000a39e:	83 c4 3c             	add    esp,0x3c
c000a3a1:	5b                   	pop    ebx
c000a3a2:	5e                   	pop    esi
c000a3a3:	5f                   	pop    edi
c000a3a4:	5d                   	pop    ebp
c000a3a5:	e9 90 05 00 00       	jmp    c000a93a <Dbg::kprintf(char const*, ...)>

c000a3aa <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a3aa:	55                   	push   ebp
c000a3ab:	57                   	push   edi
c000a3ac:	56                   	push   esi
c000a3ad:	53                   	push   ebx
c000a3ae:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a3b4:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c000a3bb:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a3c1:	77 78                	ja     c000a43b <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c000a3c3:	83 ec 08             	sub    esp,0x8
c000a3c6:	53                   	push   ebx
c000a3c7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3cd:	68 39 14 02 c0       	push   0xc0021439
c000a3d2:	e8 63 05 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000a3d7:	58                   	pop    eax
c000a3d8:	5a                   	pop    edx
c000a3d9:	53                   	push   ebx
c000a3da:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3e1:	51                   	push   ecx
c000a3e2:	e8 33 f5 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a3e7:	83 c4 10             	add    esp,0x10
c000a3ea:	85 c0                	test   eax,eax
c000a3ec:	89 c5                	mov    ebp,eax
c000a3ee:	0f 95 c0             	setne  al
c000a3f1:	85 db                	test   ebx,ebx
c000a3f3:	0f 95 c2             	setne  dl
c000a3f6:	21 d0                	and    eax,edx
c000a3f8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a3fc:	a8 01                	test   al,0x1
c000a3fe:	75 0f                	jne    c000a40f <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c000a400:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a404:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a40a:	5b                   	pop    ebx
c000a40b:	5e                   	pop    esi
c000a40c:	5f                   	pop    edi
c000a40d:	5d                   	pop    ebp
c000a40e:	c3                   	ret    
c000a40f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a412:	f6 c4 02             	test   ah,0x2
c000a415:	75 39                	jne    c000a450 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a417:	89 c2                	mov    edx,eax
c000a419:	81 e2 01 04 00 00    	and    edx,0x401
c000a41f:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a425:	74 73                	je     c000a49a <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a427:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c000a42c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a430:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a436:	5b                   	pop    ebx
c000a437:	5e                   	pop    esi
c000a438:	5f                   	pop    edi
c000a439:	5d                   	pop    ebp
c000a43a:	c3                   	ret    
c000a43b:	83 ec 0c             	sub    esp,0xc
c000a43e:	68 27 14 02 c0       	push   0xc0021427
c000a443:	e8 0f 72 00 00       	call   c0011657 <KePanic(char const*)>
c000a448:	83 c4 10             	add    esp,0x10
c000a44b:	e9 73 ff ff ff       	jmp    c000a3c3 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c000a450:	83 ec 0c             	sub    esp,0xc
c000a453:	89 de                	mov    esi,ebx
c000a455:	68 8c 12 02 c0       	push   0xc002128c
c000a45a:	e8 db 04 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000a45f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a463:	e8 aa d9 ff ff       	call   c0007e12 <Phys::allocatePage()>
c000a468:	ba 00 10 00 00       	mov    edx,0x1000
c000a46d:	89 d1                	mov    ecx,edx
c000a46f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a471:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000a474:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a47a:	09 c8                	or     eax,ecx
c000a47c:	83 c8 02             	or     eax,0x2
c000a47f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000a482:	0f 20 d8             	mov    eax,cr3
c000a485:	0f 22 d8             	mov    cr3,eax
c000a488:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a48c:	89 df                	mov    edi,ebx
c000a48e:	89 d1                	mov    ecx,edx
c000a490:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a492:	83 c4 10             	add    esp,0x10
c000a495:	e9 66 ff ff ff       	jmp    c000a400 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c000a49a:	c1 e8 0c             	shr    eax,0xc
c000a49d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4a1:	e8 6c d9 ff ff       	call   c0007e12 <Phys::allocatePage()>
c000a4a6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000a4a9:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a4af:	09 c2                	or     edx,eax
c000a4b1:	81 ca 01 08 00 00    	or     edx,0x801
c000a4b7:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c000a4ba:	a1 0c 39 02 c0       	mov    eax,ds:0xc002390c
c000a4bf:	85 c0                	test   eax,eax
c000a4c1:	7e 44                	jle    c000a507 <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c000a4c3:	89 df                	mov    edi,ebx
c000a4c5:	31 f6                	xor    esi,esi
c000a4c7:	83 ec 0c             	sub    esp,0xc
c000a4ca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a4ce:	51                   	push   ecx
c000a4cf:	e8 90 f2 ff ff       	call   c0009764 <Virt::swapIDToSector(unsigned long)>
c000a4d4:	31 d2                	xor    edx,edx
c000a4d6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a4d9:	81 c7 00 02 00 00    	add    edi,0x200
c000a4df:	6a 01                	push   0x1
c000a4e1:	52                   	push   edx
c000a4e2:	01 f0                	add    eax,esi
c000a4e4:	83 c6 01             	add    esi,0x1
c000a4e7:	50                   	push   eax
c000a4e8:	0f be 05 18 39 02 c0 	movsx  eax,BYTE PTR ds:0xc0023918
c000a4ef:	8b 2c 85 7c b7 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd4884]
c000a4f6:	55                   	push   ebp
c000a4f7:	e8 f6 38 00 00       	call   c000ddf2 <LogicalDisk::read(unsigned long long, int, void*)>
c000a4fc:	83 c4 20             	add    esp,0x20
c000a4ff:	39 35 0c 39 02 c0    	cmp    DWORD PTR ds:0xc002390c,esi
c000a505:	7f c0                	jg     c000a4c7 <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c000a507:	a1 a8 6f 02 c0       	mov    eax,ds:0xc0026fa8
c000a50c:	83 ec 04             	sub    esp,0x4
c000a50f:	83 e8 01             	sub    eax,0x1
c000a512:	50                   	push   eax
c000a513:	53                   	push   ebx
c000a514:	68 4c 14 02 c0       	push   0xc002144c
c000a519:	a3 a8 6f 02 c0       	mov    ds:0xc0026fa8,eax
c000a51e:	e8 17 04 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000a523:	58                   	pop    eax
c000a524:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a528:	52                   	push   edx
c000a529:	e8 13 f2 ff ff       	call   c0009741 <Virt::freeSwapfilePage(unsigned long)>
c000a52e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000a533:	83 c4 10             	add    esp,0x10
c000a536:	83 e8 01             	sub    eax,0x1
c000a539:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000a53e:	85 c0                	test   eax,eax
c000a540:	75 01                	jne    c000a543 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c000a542:	fb                   	sti    
c000a543:	0f 20 d8             	mov    eax,cr3
c000a546:	0f 22 d8             	mov    cr3,eax
c000a549:	e9 b2 fe ff ff       	jmp    c000a400 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c000a54e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a54e:	55                   	push   ebp
c000a54f:	57                   	push   edi
c000a550:	56                   	push   esi
c000a551:	53                   	push   ebx
c000a552:	83 ec 28             	sub    esp,0x28
c000a555:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a559:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a55d:	50                   	push   eax
c000a55e:	e8 c2 f0 ff ff       	call   c0009625 <Virt::allocateKernelVirtualPages(int)>
c000a563:	83 c4 0c             	add    esp,0xc
c000a566:	6a 07                	push   0x7
c000a568:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a56c:	52                   	push   edx
c000a56d:	89 c5                	mov    ebp,eax
c000a56f:	53                   	push   ebx
c000a570:	e8 c1 f8 ff ff       	call   c0009e36 <VAS::allocatePages(int, int)>
c000a575:	83 c4 10             	add    esp,0x10
c000a578:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a57c:	89 c7                	mov    edi,eax
c000a57e:	85 c9                	test   ecx,ecx
c000a580:	74 2f                	je     c000a5b1 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a582:	31 f6                	xor    esi,esi
c000a584:	e8 89 d8 ff ff       	call   c0007e12 <Phys::allocatePage()>
c000a589:	83 c6 01             	add    esi,0x1
c000a58c:	6a 03                	push   0x3
c000a58e:	55                   	push   ebp
c000a58f:	50                   	push   eax
c000a590:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a594:	53                   	push   ebx
c000a595:	e8 94 f7 ff ff       	call   c0009d2e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a59a:	6a 07                	push   0x7
c000a59c:	57                   	push   edi
c000a59d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a5a1:	50                   	push   eax
c000a5a2:	53                   	push   ebx
c000a5a3:	e8 86 f7 ff ff       	call   c0009d2e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a5a8:	83 c4 20             	add    esp,0x20
c000a5ab:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c000a5af:	75 d3                	jne    c000a584 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a5b1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a5b5:	89 28                	mov    DWORD PTR [eax],ebp
c000a5b7:	83 c4 1c             	add    esp,0x1c
c000a5ba:	89 f8                	mov    eax,edi
c000a5bc:	5b                   	pop    ebx
c000a5bd:	5e                   	pop    esi
c000a5be:	5f                   	pop    edi
c000a5bf:	5d                   	pop    ebp
c000a5c0:	c3                   	ret    
c000a5c1:	90                   	nop

c000a5c2 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a5c2:	53                   	push   ebx
c000a5c3:	83 ec 14             	sub    esp,0x14
c000a5c6:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5ca:	68 ac 12 02 c0       	push   0xc00212ac
c000a5cf:	e8 66 03 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000a5d4:	c7 04 24 0c 13 02 c0 	mov    DWORD PTR [esp],0xc002130c
c000a5db:	e8 5a 03 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000a5e0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5e4:	83 c4 18             	add    esp,0x18
c000a5e7:	5b                   	pop    ebx
c000a5e8:	e9 4c f3 ff ff       	jmp    c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c000a5ed:	90                   	nop

c000a5ee <VAS::scanForEviction()>:
c000a5ee:	57                   	push   edi
c000a5ef:	56                   	push   esi
c000a5f0:	31 f6                	xor    esi,esi
c000a5f2:	53                   	push   ebx
c000a5f3:	83 ec 10             	sub    esp,0x10
c000a5f6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5fa:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5fd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a603:	75 0e                	jne    c000a613 <VAS::scanForEviction()+0x25>
c000a605:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a608:	89 da                	mov    edx,ebx
c000a60a:	c1 ea 16             	shr    edx,0x16
c000a60d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a611:	74 57                	je     c000a66a <VAS::scanForEviction()+0x7c>
c000a613:	53                   	push   ebx
c000a614:	57                   	push   edi
c000a615:	e8 00 f3 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a61a:	5a                   	pop    edx
c000a61b:	59                   	pop    ecx
c000a61c:	8b 10                	mov    edx,DWORD PTR [eax]
c000a61e:	89 d1                	mov    ecx,edx
c000a620:	c1 e9 0c             	shr    ecx,0xc
c000a623:	74 10                	je     c000a635 <VAS::scanForEviction()+0x47>
c000a625:	89 d1                	mov    ecx,edx
c000a627:	81 e1 01 08 00 00    	and    ecx,0x801
c000a62d:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a633:	74 40                	je     c000a675 <VAS::scanForEviction()+0x87>
c000a635:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a63b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a641:	76 2d                	jbe    c000a670 <VAS::scanForEviction()+0x82>
c000a643:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a64a:	83 c6 01             	add    esi,0x1
c000a64d:	83 fe 03             	cmp    esi,0x3
c000a650:	74 32                	je     c000a684 <VAS::scanForEviction()+0x96>
c000a652:	31 db                	xor    ebx,ebx
c000a654:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a65a:	75 b7                	jne    c000a613 <VAS::scanForEviction()+0x25>
c000a65c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a65f:	89 da                	mov    edx,ebx
c000a661:	c1 ea 16             	shr    edx,0x16
c000a664:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a668:	75 a9                	jne    c000a613 <VAS::scanForEviction()+0x25>
c000a66a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a670:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a673:	eb 88                	jmp    c000a5fd <VAS::scanForEviction()+0xf>
c000a675:	f6 c2 20             	test   dl,0x20
c000a678:	74 13                	je     c000a68d <VAS::scanForEviction()+0x9f>
c000a67a:	83 e2 df             	and    edx,0xffffffdf
c000a67d:	89 10                	mov    DWORD PTR [eax],edx
c000a67f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a682:	eb b1                	jmp    c000a635 <VAS::scanForEviction()+0x47>
c000a684:	83 c4 10             	add    esp,0x10
c000a687:	31 c0                	xor    eax,eax
c000a689:	5b                   	pop    ebx
c000a68a:	5e                   	pop    esi
c000a68b:	5f                   	pop    edi
c000a68c:	c3                   	ret    
c000a68d:	89 d0                	mov    eax,edx
c000a68f:	83 ec 08             	sub    esp,0x8
c000a692:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a697:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a69b:	53                   	push   ebx
c000a69c:	68 61 14 02 c0       	push   0xc0021461
c000a6a1:	e8 94 02 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000a6a6:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6a9:	58                   	pop    eax
c000a6aa:	5a                   	pop    edx
c000a6ab:	51                   	push   ecx
c000a6ac:	57                   	push   edi
c000a6ad:	e8 1a fc ff ff       	call   c000a2cc <VAS::evict(unsigned long)>
c000a6b2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a6b5:	5b                   	pop    ebx
c000a6b6:	5e                   	pop    esi
c000a6b7:	50                   	push   eax
c000a6b8:	68 75 14 02 c0       	push   0xc0021475
c000a6bd:	e8 78 02 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000a6c2:	58                   	pop    eax
c000a6c3:	5a                   	pop    edx
c000a6c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6c8:	50                   	push   eax
c000a6c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6cd:	68 88 14 02 c0       	push   0xc0021488
c000a6d2:	e8 63 02 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000a6d7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6e3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6ea:	83 c4 10             	add    esp,0x10
c000a6ed:	5b                   	pop    ebx
c000a6ee:	5e                   	pop    esi
c000a6ef:	5f                   	pop    edi
c000a6f0:	c3                   	ret    

c000a6f1 <mapVASFirstTime>:
c000a6f1:	55                   	push   ebp
c000a6f2:	57                   	push   edi
c000a6f3:	56                   	push   esi
c000a6f4:	53                   	push   ebx
c000a6f5:	83 ec 0c             	sub    esp,0xc
c000a6f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6fd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a700:	83 fa 01             	cmp    edx,0x1
c000a703:	0f 84 cb 00 00 00    	je     c000a7d4 <mapVASFirstTime+0xe3>
c000a709:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a70c:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a711:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a716:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a719:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a71f:	c1 e5 15             	shl    ebp,0x15
c000a722:	29 eb                	sub    ebx,ebp
c000a724:	29 ef                	sub    edi,ebp
c000a726:	e8 e7 d6 ff ff       	call   c0007e12 <Phys::allocatePage()>
c000a72b:	83 ec 0c             	sub    esp,0xc
c000a72e:	68 03 04 00 00       	push   0x403
c000a733:	6a 01                	push   0x1
c000a735:	53                   	push   ebx
c000a736:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a73c:	50                   	push   eax
c000a73d:	56                   	push   esi
c000a73e:	e8 f5 f7 ff ff       	call   c0009f38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a743:	83 c4 20             	add    esp,0x20
c000a746:	39 fb                	cmp    ebx,edi
c000a748:	75 dc                	jne    c000a726 <mapVASFirstTime+0x35>
c000a74a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a74f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a754:	29 eb                	sub    ebx,ebp
c000a756:	29 ef                	sub    edi,ebp
c000a758:	e8 b5 d6 ff ff       	call   c0007e12 <Phys::allocatePage()>
c000a75d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a761:	83 fa 01             	cmp    edx,0x1
c000a764:	19 d2                	sbb    edx,edx
c000a766:	83 ec 0c             	sub    esp,0xc
c000a769:	83 e2 04             	and    edx,0x4
c000a76c:	81 c2 03 04 00 00    	add    edx,0x403
c000a772:	52                   	push   edx
c000a773:	6a 01                	push   0x1
c000a775:	53                   	push   ebx
c000a776:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a77c:	50                   	push   eax
c000a77d:	56                   	push   esi
c000a77e:	e8 b5 f7 ff ff       	call   c0009f38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a783:	83 c4 20             	add    esp,0x20
c000a786:	39 df                	cmp    edi,ebx
c000a788:	75 ce                	jne    c000a758 <mapVASFirstTime+0x67>
c000a78a:	83 ec 0c             	sub    esp,0xc
c000a78d:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c000a792:	6a 04                	push   0x4
c000a794:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c000a79a:	6a ff                	push   0xffffffff
c000a79c:	c1 eb 0c             	shr    ebx,0xc
c000a79f:	53                   	push   ebx
c000a7a0:	68 00 50 02 c0       	push   0xc0025000
c000a7a5:	56                   	push   esi
c000a7a6:	e8 09 f3 ff ff       	call   c0009ab4 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a7ab:	83 c4 14             	add    esp,0x14
c000a7ae:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c000a7b3:	6a 04                	push   0x4
c000a7b5:	6a ff                	push   0xffffffff
c000a7b7:	53                   	push   ebx
c000a7b8:	68 00 50 02 c0       	push   0xc0025000
c000a7bd:	50                   	push   eax
c000a7be:	e8 f1 f2 ff ff       	call   c0009ab4 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a7c3:	0f 20 d8             	mov    eax,cr3
c000a7c6:	0f 22 d8             	mov    cr3,eax
c000a7c9:	83 c4 20             	add    esp,0x20
c000a7cc:	83 c4 0c             	add    esp,0xc
c000a7cf:	5b                   	pop    ebx
c000a7d0:	5e                   	pop    esi
c000a7d1:	5f                   	pop    edi
c000a7d2:	5d                   	pop    ebp
c000a7d3:	c3                   	ret    
c000a7d4:	83 ec 0c             	sub    esp,0xc
c000a7d7:	68 95 14 02 c0       	push   0xc0021495
c000a7dc:	e8 59 01 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000a7e1:	83 c4 10             	add    esp,0x10
c000a7e4:	83 c4 0c             	add    esp,0xc
c000a7e7:	5b                   	pop    ebx
c000a7e8:	5e                   	pop    esi
c000a7e9:	5f                   	pop    edi
c000a7ea:	5d                   	pop    ebp
c000a7eb:	c3                   	ret    

c000a7ec <__cxa_atexit>:
c000a7ec:	31 c0                	xor    eax,eax
c000a7ee:	c3                   	ret    

c000a7ef <__cxa_finalize>:
c000a7ef:	c3                   	ret    

c000a7f0 <__stack_chk_fail>:
c000a7f0:	55                   	push   ebp
c000a7f1:	89 e5                	mov    ebp,esp
c000a7f3:	83 ec 10             	sub    esp,0x10
c000a7f6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7f9:	68 ae 14 02 c0       	push   0xc00214ae
c000a7fe:	e8 37 01 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000a803:	58                   	pop    eax
c000a804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a807:	5a                   	pop    edx
c000a808:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a80b:	68 ae 14 02 c0       	push   0xc00214ae
c000a810:	e8 25 01 00 00       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000a815:	c7 04 24 b6 14 02 c0 	mov    DWORD PTR [esp],0xc00214b6
c000a81c:	e8 36 6e 00 00       	call   c0011657 <KePanic(char const*)>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	c9                   	leave  
c000a825:	c3                   	ret    

c000a826 <__cxa_pure_virtual>:
c000a826:	83 ec 18             	sub    esp,0x18
c000a829:	68 ce 14 02 c0       	push   0xc00214ce
c000a82e:	e8 24 6e 00 00       	call   c0011657 <KePanic(char const*)>
c000a833:	83 c4 1c             	add    esp,0x1c
c000a836:	c3                   	ret    

c000a837 <operator new[](unsigned long)>:
c000a837:	e9 c7 d2 ff ff       	jmp    c0007b03 <malloc>

c000a83c <operator delete(void*, unsigned long)>:
c000a83c:	e9 e2 d2 ff ff       	jmp    c0007b23 <rfree>

c000a841 <operator delete[](void*)>:
c000a841:	e9 dd d2 ff ff       	jmp    c0007b23 <rfree>

c000a846 <operator delete[](void*, unsigned long)>:
c000a846:	e9 d8 d2 ff ff       	jmp    c0007b23 <rfree>

c000a84b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a84b:	55                   	push   ebp
c000a84c:	57                   	push   edi
c000a84d:	56                   	push   esi
c000a84e:	53                   	push   ebx
c000a84f:	83 ec 20             	sub    esp,0x20
c000a852:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a856:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a85e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a862:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a86a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a86e:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a876:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a87e:	89 f7                	mov    edi,esi
c000a880:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a885:	89 eb                	mov    ebx,ebp
c000a887:	eb 02                	jmp    c000a88b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a889:	89 c7                	mov    edi,eax
c000a88b:	31 d2                	xor    edx,edx
c000a88d:	89 f8                	mov    eax,edi
c000a88f:	f7 f1                	div    ecx
c000a891:	83 c3 01             	add    ebx,0x1
c000a894:	39 cf                	cmp    edi,ecx
c000a896:	73 f1                	jae    c000a889 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a898:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a89b:	eb 02                	jmp    c000a89f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a89d:	89 c6                	mov    esi,eax
c000a89f:	31 d2                	xor    edx,edx
c000a8a1:	89 f0                	mov    eax,esi
c000a8a3:	f7 f1                	div    ecx
c000a8a5:	83 eb 01             	sub    ebx,0x1
c000a8a8:	39 ce                	cmp    esi,ecx
c000a8aa:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8ae:	88 13                	mov    BYTE PTR [ebx],dl
c000a8b0:	73 eb                	jae    c000a89d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a8b2:	83 c4 20             	add    esp,0x20
c000a8b5:	89 e8                	mov    eax,ebp
c000a8b7:	5b                   	pop    ebx
c000a8b8:	5e                   	pop    esi
c000a8b9:	5f                   	pop    edi
c000a8ba:	5d                   	pop    ebp
c000a8bb:	c3                   	ret    

c000a8bc <Dbg::logc(char)>:
c000a8bc:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a8c3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8c7:	75 12                	jne    c000a8db <Dbg::logc(char)+0x1f>
c000a8c9:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8ce:	ec                   	in     al,dx
c000a8cf:	a8 20                	test   al,0x20
c000a8d1:	74 fb                	je     c000a8ce <Dbg::logc(char)+0x12>
c000a8d3:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8d8:	88 c8                	mov    al,cl
c000a8da:	ee                   	out    dx,al
c000a8db:	c3                   	ret    

c000a8dc <Dbg::logs(char*)>:
c000a8dc:	53                   	push   ebx
c000a8dd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8e1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8e4:	85 c0                	test   eax,eax
c000a8e6:	74 11                	je     c000a8f9 <Dbg::logs(char*)+0x1d>
c000a8e8:	50                   	push   eax
c000a8e9:	83 c3 01             	add    ebx,0x1
c000a8ec:	e8 cb ff ff ff       	call   c000a8bc <Dbg::logc(char)>
c000a8f1:	58                   	pop    eax
c000a8f2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8f5:	85 c0                	test   eax,eax
c000a8f7:	75 ef                	jne    c000a8e8 <Dbg::logs(char*)+0xc>
c000a8f9:	5b                   	pop    ebx
c000a8fa:	c3                   	ret    

c000a8fb <Dbg::logWriteInt(unsigned int)>:
c000a8fb:	83 ec 10             	sub    esp,0x10
c000a8fe:	6a 0a                	push   0xa
c000a900:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a904:	50                   	push   eax
c000a905:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a909:	50                   	push   eax
c000a90a:	e8 3c ff ff ff       	call   c000a84b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a90f:	50                   	push   eax
c000a910:	e8 c7 ff ff ff       	call   c000a8dc <Dbg::logs(char*)>
c000a915:	83 c4 20             	add    esp,0x20
c000a918:	c3                   	ret    

c000a919 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a919:	83 ec 10             	sub    esp,0x10
c000a91c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a920:	50                   	push   eax
c000a921:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a925:	50                   	push   eax
c000a926:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a92a:	52                   	push   edx
c000a92b:	e8 1b ff ff ff       	call   c000a84b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a930:	50                   	push   eax
c000a931:	e8 a6 ff ff ff       	call   c000a8dc <Dbg::logs(char*)>
c000a936:	83 c4 20             	add    esp,0x20
c000a939:	c3                   	ret    

c000a93a <Dbg::kprintf(char const*, ...)>:
c000a93a:	55                   	push   ebp
c000a93b:	57                   	push   edi
c000a93c:	56                   	push   esi
c000a93d:	53                   	push   ebx
c000a93e:	83 ec 0c             	sub    esp,0xc
c000a941:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a948:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a94c:	74 08                	je     c000a956 <Dbg::kprintf(char const*, ...)+0x1c>
c000a94e:	83 c4 0c             	add    esp,0xc
c000a951:	5b                   	pop    ebx
c000a952:	5e                   	pop    esi
c000a953:	5f                   	pop    edi
c000a954:	5d                   	pop    ebp
c000a955:	c3                   	ret    
c000a956:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a95a:	31 ff                	xor    edi,edi
c000a95c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a960:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a963:	85 c0                	test   eax,eax
c000a965:	74 e7                	je     c000a94e <Dbg::kprintf(char const*, ...)+0x14>
c000a967:	8d 77 01             	lea    esi,[edi+0x1]
c000a96a:	83 f8 25             	cmp    eax,0x25
c000a96d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a970:	75 47                	jne    c000a9b9 <Dbg::kprintf(char const*, ...)+0x7f>
c000a972:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a975:	83 c7 02             	add    edi,0x2
c000a978:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a97b:	83 e8 25             	sub    eax,0x25
c000a97e:	0f b6 c0             	movzx  eax,al
c000a981:	83 f8 53             	cmp    eax,0x53
c000a984:	0f 87 ce 00 00 00    	ja     c000aa58 <Dbg::kprintf(char const*, ...)+0x11e>
c000a98a:	ff 24 85 e4 14 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdeb1c]
c000a991:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a995:	89 c8                	mov    eax,ecx
c000a997:	83 c1 04             	add    ecx,0x4
c000a99a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a99e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9a0:	55                   	push   ebp
c000a9a1:	e8 55 ff ff ff       	call   c000a8fb <Dbg::logWriteInt(unsigned int)>
c000a9a6:	58                   	pop    eax
c000a9a7:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9aa:	85 c0                	test   eax,eax
c000a9ac:	74 a0                	je     c000a94e <Dbg::kprintf(char const*, ...)+0x14>
c000a9ae:	8d 77 01             	lea    esi,[edi+0x1]
c000a9b1:	83 f8 25             	cmp    eax,0x25
c000a9b4:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9b7:	74 b9                	je     c000a972 <Dbg::kprintf(char const*, ...)+0x38>
c000a9b9:	50                   	push   eax
c000a9ba:	89 f7                	mov    edi,esi
c000a9bc:	e8 fb fe ff ff       	call   c000a8bc <Dbg::logc(char)>
c000a9c1:	89 ee                	mov    esi,ebp
c000a9c3:	58                   	pop    eax
c000a9c4:	eb e1                	jmp    c000a9a7 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9c6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9ca:	89 c8                	mov    eax,ecx
c000a9cc:	83 c1 04             	add    ecx,0x4
c000a9cf:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9d3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9d5:	50                   	push   eax
c000a9d6:	e8 01 ff ff ff       	call   c000a8dc <Dbg::logs(char*)>
c000a9db:	58                   	pop    eax
c000a9dc:	eb c9                	jmp    c000a9a7 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9de:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9e2:	89 d0                	mov    eax,edx
c000a9e4:	83 c2 04             	add    edx,0x4
c000a9e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9eb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9ed:	50                   	push   eax
c000a9ee:	e8 08 ff ff ff       	call   c000a8fb <Dbg::logWriteInt(unsigned int)>
c000a9f3:	58                   	pop    eax
c000a9f4:	eb b1                	jmp    c000a9a7 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9f6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9fa:	89 d0                	mov    eax,edx
c000a9fc:	83 c2 04             	add    edx,0x4
c000a9ff:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa03:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa06:	50                   	push   eax
c000aa07:	e8 b0 fe ff ff       	call   c000a8bc <Dbg::logc(char)>
c000aa0c:	58                   	pop    eax
c000aa0d:	eb 98                	jmp    c000a9a7 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa0f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa13:	89 c8                	mov    eax,ecx
c000aa15:	83 c1 04             	add    ecx,0x4
c000aa18:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa1c:	6a 10                	push   0x10
c000aa1e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa20:	51                   	push   ecx
c000aa21:	e8 f3 fe ff ff       	call   c000a919 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa26:	5d                   	pop    ebp
c000aa27:	58                   	pop    eax
c000aa28:	e9 7a ff ff ff       	jmp    c000a9a7 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa2d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa31:	89 d0                	mov    eax,edx
c000aa33:	83 c2 08             	add    edx,0x8
c000aa36:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa3a:	6a 10                	push   0x10
c000aa3c:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa3e:	50                   	push   eax
c000aa3f:	e8 d5 fe ff ff       	call   c000a919 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa44:	58                   	pop    eax
c000aa45:	5a                   	pop    edx
c000aa46:	e9 5c ff ff ff       	jmp    c000a9a7 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa4b:	6a 25                	push   0x25
c000aa4d:	e8 6a fe ff ff       	call   c000a8bc <Dbg::logc(char)>
c000aa52:	5a                   	pop    edx
c000aa53:	e9 4f ff ff ff       	jmp    c000a9a7 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa58:	6a 25                	push   0x25
c000aa5a:	e8 5d fe ff ff       	call   c000a8bc <Dbg::logc(char)>
c000aa5f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa63:	50                   	push   eax
c000aa64:	e8 53 fe ff ff       	call   c000a8bc <Dbg::logc(char)>
c000aa69:	5a                   	pop    edx
c000aa6a:	59                   	pop    ecx
c000aa6b:	e9 37 ff ff ff       	jmp    c000a9a7 <Dbg::kprintf(char const*, ...)+0x6d>

c000aa70 <KiUbsanPrintDetails(char const*, void*)>:
c000aa70:	83 ec 1c             	sub    esp,0x1c
c000aa73:	83 ec 08             	sub    esp,0x8
c000aa76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa7a:	68 34 16 02 c0       	push   0xc0021634
c000aa7f:	e8 b6 fe ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000aa84:	83 c4 10             	add    esp,0x10
c000aa87:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa93:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa95:	83 ec 08             	sub    esp,0x8
c000aa98:	50                   	push   eax
c000aa99:	68 48 16 02 c0       	push   0xc0021648
c000aa9e:	e8 97 fe ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aaaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aaad:	83 ec 08             	sub    esp,0x8
c000aab0:	50                   	push   eax
c000aab1:	68 52 16 02 c0       	push   0xc0021652
c000aab6:	e8 7f fe ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000aabb:	83 c4 10             	add    esp,0x10
c000aabe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aac2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aac5:	83 ec 08             	sub    esp,0x8
c000aac8:	50                   	push   eax
c000aac9:	68 5c 16 02 c0       	push   0xc002165c
c000aace:	e8 67 fe ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000aad3:	83 c4 10             	add    esp,0x10
c000aad6:	90                   	nop
c000aad7:	83 c4 1c             	add    esp,0x1c
c000aada:	c3                   	ret    
c000aadb:	90                   	nop

c000aadc <__ubsan_handle_type_mismatch_v1>:
c000aadc:	83 ec 0c             	sub    esp,0xc
c000aadf:	83 ec 08             	sub    esp,0x8
c000aae2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aae6:	68 a0 17 02 c0       	push   0xc00217a0
c000aaeb:	e8 80 ff ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000aaf0:	83 c4 10             	add    esp,0x10
c000aaf3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aaf8:	75 16                	jne    c000ab10 <__ubsan_handle_type_mismatch_v1+0x34>
c000aafa:	83 ec 0c             	sub    esp,0xc
c000aafd:	68 66 16 02 c0       	push   0xc0021666
c000ab02:	e8 33 fe ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000ab07:	83 c4 10             	add    esp,0x10
c000ab0a:	e9 91 00 00 00       	jmp    c000aba0 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab0f:	90                   	nop
c000ab10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab14:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab17:	85 c0                	test   eax,eax
c000ab19:	74 29                	je     c000ab44 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab1f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab22:	83 e8 01             	sub    eax,0x1
c000ab25:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab29:	75 19                	jne    c000ab44 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab2b:	83 ec 08             	sub    esp,0x8
c000ab2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab32:	68 c0 17 02 c0       	push   0xc00217c0
c000ab37:	e8 fe fd ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	eb 5f                	jmp    c000aba0 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab41:	8d 76 00             	lea    esi,[esi+0x0]
c000ab44:	83 ec 0c             	sub    esp,0xc
c000ab47:	68 7b 16 02 c0       	push   0xc002167b
c000ab4c:	e8 e9 fd ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000ab51:	83 c4 10             	add    esp,0x10
c000ab54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab58:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab5b:	0f b6 c0             	movzx  eax,al
c000ab5e:	83 ec 08             	sub    esp,0x8
c000ab61:	50                   	push   eax
c000ab62:	68 95 16 02 c0       	push   0xc0021695
c000ab67:	e8 ce fd ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000ab6c:	83 c4 10             	add    esp,0x10
c000ab6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab73:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab76:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab79:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab81:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab84:	0f b6 c0             	movzx  eax,al
c000ab87:	8b 04 85 20 39 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc6e0]
c000ab8e:	51                   	push   ecx
c000ab8f:	52                   	push   edx
c000ab90:	50                   	push   eax
c000ab91:	68 e8 17 02 c0       	push   0xc00217e8
c000ab96:	e8 9f fd ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000ab9b:	83 c4 10             	add    esp,0x10
c000ab9e:	66 90                	xchg   ax,ax
c000aba0:	83 ec 0c             	sub    esp,0xc
c000aba3:	68 a0 17 02 c0       	push   0xc00217a0
c000aba8:	e8 aa 6a 00 00       	call   c0011657 <KePanic(char const*)>
c000abad:	83 c4 10             	add    esp,0x10
c000abb0:	90                   	nop
c000abb1:	83 c4 0c             	add    esp,0xc
c000abb4:	c3                   	ret    
c000abb5:	8d 76 00             	lea    esi,[esi+0x0]

c000abb8 <__ubsan_handle_pointer_overflow>:
c000abb8:	83 ec 0c             	sub    esp,0xc
c000abbb:	83 ec 08             	sub    esp,0x8
c000abbe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abc2:	68 30 18 02 c0       	push   0xc0021830
c000abc7:	e8 a4 fe ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000abcc:	83 c4 10             	add    esp,0x10
c000abcf:	83 ec 0c             	sub    esp,0xc
c000abd2:	68 30 18 02 c0       	push   0xc0021830
c000abd7:	e8 7b 6a 00 00       	call   c0011657 <KePanic(char const*)>
c000abdc:	83 c4 10             	add    esp,0x10
c000abdf:	90                   	nop
c000abe0:	83 c4 0c             	add    esp,0xc
c000abe3:	c3                   	ret    

c000abe4 <__ubsan_handle_out_of_bounds>:
c000abe4:	83 ec 0c             	sub    esp,0xc
c000abe7:	83 ec 08             	sub    esp,0x8
c000abea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abee:	68 a0 16 02 c0       	push   0xc00216a0
c000abf3:	e8 78 fe ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000abf8:	83 c4 10             	add    esp,0x10
c000abfb:	83 ec 0c             	sub    esp,0xc
c000abfe:	68 a0 16 02 c0       	push   0xc00216a0
c000ac03:	e8 4f 6a 00 00       	call   c0011657 <KePanic(char const*)>
c000ac08:	83 c4 10             	add    esp,0x10
c000ac0b:	90                   	nop
c000ac0c:	83 c4 0c             	add    esp,0xc
c000ac0f:	c3                   	ret    

c000ac10 <__ubsan_handle_add_overflow>:
c000ac10:	83 ec 0c             	sub    esp,0xc
c000ac13:	83 ec 08             	sub    esp,0x8
c000ac16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac1a:	68 bd 16 02 c0       	push   0xc00216bd
c000ac1f:	e8 4c fe ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000ac24:	83 c4 10             	add    esp,0x10
c000ac27:	83 ec 0c             	sub    esp,0xc
c000ac2a:	68 bd 16 02 c0       	push   0xc00216bd
c000ac2f:	e8 23 6a 00 00       	call   c0011657 <KePanic(char const*)>
c000ac34:	83 c4 10             	add    esp,0x10
c000ac37:	90                   	nop
c000ac38:	83 c4 0c             	add    esp,0xc
c000ac3b:	c3                   	ret    

c000ac3c <__ubsan_handle_load_invalid_value>:
c000ac3c:	83 ec 0c             	sub    esp,0xc
c000ac3f:	83 ec 08             	sub    esp,0x8
c000ac42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac46:	68 50 18 02 c0       	push   0xc0021850
c000ac4b:	e8 20 fe ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000ac50:	83 c4 10             	add    esp,0x10
c000ac53:	83 ec 0c             	sub    esp,0xc
c000ac56:	68 50 18 02 c0       	push   0xc0021850
c000ac5b:	e8 f7 69 00 00       	call   c0011657 <KePanic(char const*)>
c000ac60:	83 c4 10             	add    esp,0x10
c000ac63:	90                   	nop
c000ac64:	83 c4 0c             	add    esp,0xc
c000ac67:	c3                   	ret    

c000ac68 <__ubsan_handle_divrem_overflow>:
c000ac68:	83 ec 0c             	sub    esp,0xc
c000ac6b:	83 ec 08             	sub    esp,0x8
c000ac6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac72:	68 74 18 02 c0       	push   0xc0021874
c000ac77:	e8 f4 fd ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000ac7c:	83 c4 10             	add    esp,0x10
c000ac7f:	83 ec 0c             	sub    esp,0xc
c000ac82:	68 74 18 02 c0       	push   0xc0021874
c000ac87:	e8 cb 69 00 00       	call   c0011657 <KePanic(char const*)>
c000ac8c:	83 c4 10             	add    esp,0x10
c000ac8f:	90                   	nop
c000ac90:	83 c4 0c             	add    esp,0xc
c000ac93:	c3                   	ret    

c000ac94 <__ubsan_handle_mul_overflow>:
c000ac94:	83 ec 0c             	sub    esp,0xc
c000ac97:	83 ec 08             	sub    esp,0x8
c000ac9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac9e:	68 d9 16 02 c0       	push   0xc00216d9
c000aca3:	e8 c8 fd ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000aca8:	83 c4 10             	add    esp,0x10
c000acab:	83 ec 0c             	sub    esp,0xc
c000acae:	68 d9 16 02 c0       	push   0xc00216d9
c000acb3:	e8 9f 69 00 00       	call   c0011657 <KePanic(char const*)>
c000acb8:	83 c4 10             	add    esp,0x10
c000acbb:	90                   	nop
c000acbc:	83 c4 0c             	add    esp,0xc
c000acbf:	c3                   	ret    

c000acc0 <__ubsan_handle_sub_overflow>:
c000acc0:	83 ec 0c             	sub    esp,0xc
c000acc3:	83 ec 08             	sub    esp,0x8
c000acc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acca:	68 f5 16 02 c0       	push   0xc00216f5
c000accf:	e8 9c fd ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000acd4:	83 c4 10             	add    esp,0x10
c000acd7:	83 ec 0c             	sub    esp,0xc
c000acda:	68 f5 16 02 c0       	push   0xc00216f5
c000acdf:	e8 73 69 00 00       	call   c0011657 <KePanic(char const*)>
c000ace4:	83 c4 10             	add    esp,0x10
c000ace7:	90                   	nop
c000ace8:	83 c4 0c             	add    esp,0xc
c000aceb:	c3                   	ret    

c000acec <__ubsan_handle_shift_out_of_bounds>:
c000acec:	83 ec 0c             	sub    esp,0xc
c000acef:	83 ec 08             	sub    esp,0x8
c000acf2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acf6:	68 94 18 02 c0       	push   0xc0021894
c000acfb:	e8 70 fd ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	83 ec 0c             	sub    esp,0xc
c000ad06:	68 94 18 02 c0       	push   0xc0021894
c000ad0b:	e8 47 69 00 00       	call   c0011657 <KePanic(char const*)>
c000ad10:	83 c4 10             	add    esp,0x10
c000ad13:	90                   	nop
c000ad14:	83 c4 0c             	add    esp,0xc
c000ad17:	c3                   	ret    

c000ad18 <__ubsan_handle_negate_overflow>:
c000ad18:	83 ec 0c             	sub    esp,0xc
c000ad1b:	83 ec 08             	sub    esp,0x8
c000ad1e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad22:	68 b8 18 02 c0       	push   0xc00218b8
c000ad27:	e8 44 fd ff ff       	call   c000aa70 <KiUbsanPrintDetails(char const*, void*)>
c000ad2c:	83 c4 10             	add    esp,0x10
c000ad2f:	83 ec 0c             	sub    esp,0xc
c000ad32:	68 b8 18 02 c0       	push   0xc00218b8
c000ad37:	e8 1b 69 00 00       	call   c0011657 <KePanic(char const*)>
c000ad3c:	83 c4 10             	add    esp,0x10
c000ad3f:	90                   	nop
c000ad40:	83 c4 0c             	add    esp,0xc
c000ad43:	c3                   	ret    

c000ad44 <KiIsHashInTable(unsigned short)>:
c000ad44:	0f b7 d0             	movzx  edx,ax
c000ad47:	83 e0 07             	and    eax,0x7
c000ad4a:	c1 fa 03             	sar    edx,0x3
c000ad4d:	88 c1                	mov    cl,al
c000ad4f:	0f b6 92 00 74 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8c00]
c000ad56:	d3 fa                	sar    edx,cl
c000ad58:	89 d0                	mov    eax,edx
c000ad5a:	83 e0 01             	and    eax,0x1
c000ad5d:	c3                   	ret    

c000ad5e <KiSetHashInTable(unsigned short, bool)>:
c000ad5e:	56                   	push   esi
c000ad5f:	53                   	push   ebx
c000ad60:	0f b7 d8             	movzx  ebx,ax
c000ad63:	c1 fb 03             	sar    ebx,0x3
c000ad66:	83 e0 07             	and    eax,0x7
c000ad69:	89 c1                	mov    ecx,eax
c000ad6b:	b8 01 00 00 00       	mov    eax,0x1
c000ad70:	0f b6 b3 00 74 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8c00]
c000ad77:	d3 e0                	shl    eax,cl
c000ad79:	84 d2                	test   dl,dl
c000ad7b:	74 04                	je     c000ad81 <KiSetHashInTable(unsigned short, bool)+0x23>
c000ad7d:	09 f0                	or     eax,esi
c000ad7f:	eb 04                	jmp    c000ad85 <KiSetHashInTable(unsigned short, bool)+0x27>
c000ad81:	f7 d0                	not    eax
c000ad83:	21 f0                	and    eax,esi
c000ad85:	88 83 00 74 02 c0    	mov    BYTE PTR [ebx-0x3ffd8c00],al
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <KiFlushSymlinkChanges()>:
c000ad8e:	57                   	push   edi
c000ad8f:	56                   	push   esi
c000ad90:	53                   	push   ebx
c000ad91:	83 ec 1c             	sub    esp,0x1c
c000ad94:	68 14 01 00 00       	push   0x114
c000ad99:	e8 65 cd ff ff       	call   c0007b03 <malloc>
c000ad9e:	83 c4 0c             	add    esp,0xc
c000ada1:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000ada7:	68 d7 18 02 c0       	push   0xc00218d7
c000adac:	50                   	push   eax
c000adad:	89 c3                	mov    ebx,eax
c000adaf:	e8 9e 0d 00 00       	call   c000bb52 <File::File(char const*, Process*)>
c000adb4:	83 c4 10             	add    esp,0x10
c000adb7:	85 db                	test   ebx,ebx
c000adb9:	75 10                	jne    c000adcb <KiFlushSymlinkChanges()+0x3d>
c000adbb:	83 ec 0c             	sub    esp,0xc
c000adbe:	68 f5 18 02 c0       	push   0xc00218f5
c000adc3:	e8 8f 68 00 00       	call   c0011657 <KePanic(char const*)>
c000adc8:	83 c4 10             	add    esp,0x10
c000adcb:	50                   	push   eax
c000adcc:	50                   	push   eax
c000adcd:	6a 06                	push   0x6
c000adcf:	53                   	push   ebx
c000add0:	e8 9b 0d 00 00       	call   c000bb70 <File::open(FileOpenMode)>
c000add5:	83 c4 10             	add    esp,0x10
c000add8:	85 c0                	test   eax,eax
c000adda:	74 10                	je     c000adec <KiFlushSymlinkChanges()+0x5e>
c000addc:	83 ec 0c             	sub    esp,0xc
c000addf:	68 0f 19 02 c0       	push   0xc002190f
c000ade4:	e8 6e 68 00 00       	call   c0011657 <KePanic(char const*)>
c000ade9:	83 c4 10             	add    esp,0x10
c000adec:	31 f6                	xor    esi,esi
c000adee:	39 35 c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,esi
c000adf4:	7e 70                	jle    c000ae66 <KiFlushSymlinkChanges()+0xd8>
c000adf6:	83 ec 0c             	sub    esp,0xc
c000adf9:	89 f0                	mov    eax,esi
c000adfb:	8b 13                	mov    edx,DWORD PTR [ebx]
c000adfd:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ae01:	c1 e0 08             	shl    eax,0x8
c000ae04:	57                   	push   edi
c000ae05:	05 00 70 02 c0       	add    eax,0xc0027000
c000ae0a:	50                   	push   eax
c000ae0b:	6a 00                	push   0x0
c000ae0d:	68 00 01 00 00       	push   0x100
c000ae12:	53                   	push   ebx
c000ae13:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae16:	83 c4 20             	add    esp,0x20
c000ae19:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae21:	74 10                	je     c000ae33 <KiFlushSymlinkChanges()+0xa5>
c000ae23:	83 ec 0c             	sub    esp,0xc
c000ae26:	68 29 19 02 c0       	push   0xc0021929
c000ae2b:	e8 27 68 00 00       	call   c0011657 <KePanic(char const*)>
c000ae30:	83 c4 10             	add    esp,0x10
c000ae33:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae35:	8d 14 f5 e0 6f 02 c0 	lea    edx,[esi*8-0x3ffd9020]
c000ae3c:	83 ec 0c             	sub    esp,0xc
c000ae3f:	57                   	push   edi
c000ae40:	52                   	push   edx
c000ae41:	6a 00                	push   0x0
c000ae43:	6a 08                	push   0x8
c000ae45:	53                   	push   ebx
c000ae46:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ae49:	83 c4 20             	add    esp,0x20
c000ae4c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000ae51:	74 10                	je     c000ae63 <KiFlushSymlinkChanges()+0xd5>
c000ae53:	83 ec 0c             	sub    esp,0xc
c000ae56:	68 43 19 02 c0       	push   0xc0021943
c000ae5b:	e8 f7 67 00 00       	call   c0011657 <KePanic(char const*)>
c000ae60:	83 c4 10             	add    esp,0x10
c000ae63:	46                   	inc    esi
c000ae64:	eb 88                	jmp    c000adee <KiFlushSymlinkChanges()+0x60>
c000ae66:	83 ec 0c             	sub    esp,0xc
c000ae69:	53                   	push   ebx
c000ae6a:	e8 5f 0d 00 00       	call   c000bbce <File::close()>
c000ae6f:	83 c4 10             	add    esp,0x10
c000ae72:	85 db                	test   ebx,ebx
c000ae74:	74 0c                	je     c000ae82 <KiFlushSymlinkChanges()+0xf4>
c000ae76:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae78:	83 ec 0c             	sub    esp,0xc
c000ae7b:	53                   	push   ebx
c000ae7c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae7f:	83 c4 10             	add    esp,0x10
c000ae82:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000ae8c:	83 c4 10             	add    esp,0x10
c000ae8f:	5b                   	pop    ebx
c000ae90:	5e                   	pop    esi
c000ae91:	5f                   	pop    edi
c000ae92:	c3                   	ret    

c000ae93 <KiDeinitialiseSymlinks(void*)>:
c000ae93:	e9 f6 fe ff ff       	jmp    c000ad8e <KiFlushSymlinkChanges()>

c000ae98 <KiGetSymlinkHash(char const*)>:
c000ae98:	53                   	push   ebx
c000ae99:	89 c3                	mov    ebx,eax
c000ae9b:	83 ec 14             	sub    esp,0x14
c000ae9e:	50                   	push   eax
c000ae9f:	e8 dc 56 ff ff       	call   c0000580 <strlen>
c000aea4:	5a                   	pop    edx
c000aea5:	59                   	pop    ecx
c000aea6:	50                   	push   eax
c000aea7:	53                   	push   ebx
c000aea8:	e8 2c 61 00 00       	call   c0010fd9 <KeCalculateCRC32(unsigned char*, int)>
c000aead:	83 c4 18             	add    esp,0x18
c000aeb0:	5b                   	pop    ebx
c000aeb1:	89 c2                	mov    edx,eax
c000aeb3:	c1 ea 10             	shr    edx,0x10
c000aeb6:	31 d0                	xor    eax,edx
c000aeb8:	c3                   	ret    

c000aeb9 <KiCreateSymlinkID()>:
c000aeb9:	55                   	push   ebp
c000aeba:	57                   	push   edi
c000aebb:	56                   	push   esi
c000aebc:	53                   	push   ebx
c000aebd:	31 db                	xor    ebx,ebx
c000aebf:	83 ec 1c             	sub    esp,0x1c
c000aec2:	e8 de 68 00 00       	call   c00117a5 <KeRand()>
c000aec7:	8b 2d 00 94 02 c0    	mov    ebp,DWORD PTR ds:0xc0029400
c000aecd:	31 d2                	xor    edx,edx
c000aecf:	43                   	inc    ebx
c000aed0:	31 ff                	xor    edi,edi
c000aed2:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000aed5:	89 ee                	mov    esi,ebp
c000aed7:	89 0d 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,ecx
c000aedd:	0f a4 c2 1f          	shld   edx,eax,0x1f
c000aee1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aee5:	c1 e0 1f             	shl    eax,0x1f
c000aee8:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000aeee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aef2:	75 10                	jne    c000af04 <KiCreateSymlinkID()+0x4b>
c000aef4:	83 ec 0c             	sub    esp,0xc
c000aef7:	68 5d 19 02 c0       	push   0xc002195d
c000aefc:	e8 56 67 00 00       	call   c0011657 <KePanic(char const*)>
c000af01:	83 c4 10             	add    esp,0x10
c000af04:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000af08:	75 06                	jne    c000af10 <KiCreateSymlinkID()+0x57>
c000af0a:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000af0e:	74 b2                	je     c000aec2 <KiCreateSymlinkID()+0x9>
c000af10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af14:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af18:	83 c4 1c             	add    esp,0x1c
c000af1b:	5b                   	pop    ebx
c000af1c:	31 f0                	xor    eax,esi
c000af1e:	5e                   	pop    esi
c000af1f:	31 fa                	xor    edx,edi
c000af21:	5f                   	pop    edi
c000af22:	5d                   	pop    ebp
c000af23:	c3                   	ret    

c000af24 <KeRegisterSymlink(char const*, unsigned long long)>:
c000af24:	53                   	push   ebx
c000af25:	83 ec 0c             	sub    esp,0xc
c000af28:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000af2c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af30:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af35:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000af39:	68 00 01 00 00       	push   0x100
c000af3e:	6a 00                	push   0x0
c000af40:	89 0c c5 e4 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd901c],ecx
c000af47:	89 14 c5 e0 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9020],edx
c000af4e:	c1 e0 08             	shl    eax,0x8
c000af51:	05 00 70 02 c0       	add    eax,0xc0027000
c000af56:	50                   	push   eax
c000af57:	e8 94 55 ff ff       	call   c00004f0 <memset>
c000af5c:	58                   	pop    eax
c000af5d:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af62:	5a                   	pop    edx
c000af63:	c1 e0 08             	shl    eax,0x8
c000af66:	53                   	push   ebx
c000af67:	05 00 70 02 c0       	add    eax,0xc0027000
c000af6c:	50                   	push   eax
c000af6d:	e8 de 56 ff ff       	call   c0000650 <strcpy>
c000af72:	89 d8                	mov    eax,ebx
c000af74:	e8 1f ff ff ff       	call   c000ae98 <KiGetSymlinkHash(char const*)>
c000af79:	59                   	pop    ecx
c000af7a:	0f b7 d8             	movzx  ebx,ax
c000af7d:	58                   	pop    eax
c000af7e:	53                   	push   ebx
c000af7f:	68 66 19 02 c0       	push   0xc0021966
c000af84:	e8 b1 f9 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000af89:	89 d8                	mov    eax,ebx
c000af8b:	ba 01 00 00 00       	mov    edx,0x1
c000af90:	e8 c9 fd ff ff       	call   c000ad5e <KiSetHashInTable(unsigned short, bool)>
c000af95:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af9a:	83 c4 10             	add    esp,0x10
c000af9d:	40                   	inc    eax
c000af9e:	a3 c0 6f 02 c0       	mov    ds:0xc0026fc0,eax
c000afa3:	83 f8 03             	cmp    eax,0x3
c000afa6:	7e 09                	jle    c000afb1 <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c000afa8:	83 c4 08             	add    esp,0x8
c000afab:	5b                   	pop    ebx
c000afac:	e9 dd fd ff ff       	jmp    c000ad8e <KiFlushSymlinkChanges()>
c000afb1:	83 c4 08             	add    esp,0x8
c000afb4:	5b                   	pop    ebx
c000afb5:	c3                   	ret    

c000afb6 <KeInitialiseSymlinks()>:
c000afb6:	57                   	push   edi
c000afb7:	56                   	push   esi
c000afb8:	53                   	push   ebx
c000afb9:	81 ec 14 01 00 00    	sub    esp,0x114
c000afbf:	68 00 20 00 00       	push   0x2000
c000afc4:	6a 00                	push   0x0
c000afc6:	68 00 74 02 c0       	push   0xc0027400
c000afcb:	c7 05 00 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029400,0x0
c000afd5:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000afdf:	e8 0c 55 ff ff       	call   c00004f0 <memset>
c000afe4:	59                   	pop    ecx
c000afe5:	5b                   	pop    ebx
c000afe6:	ff 35 00 94 02 c0    	push   DWORD PTR ds:0xc0029400
c000afec:	68 7a 19 02 c0       	push   0xc002197a
c000aff1:	e8 44 f9 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000aff6:	5e                   	pop    esi
c000aff7:	5f                   	pop    edi
c000aff8:	6a 00                	push   0x0
c000affa:	68 93 ae 00 c0       	push   0xc000ae93
c000afff:	e8 42 5e 00 00       	call   c0010e46 <KeRegisterAtexit(void (*)(void*), void*)>
c000b004:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b00b:	e8 f3 ca ff ff       	call   c0007b03 <malloc>
c000b010:	83 c4 0c             	add    esp,0xc
c000b013:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b019:	68 d7 18 02 c0       	push   0xc00218d7
c000b01e:	50                   	push   eax
c000b01f:	89 c3                	mov    ebx,eax
c000b021:	e8 2c 0b 00 00       	call   c000bb52 <File::File(char const*, Process*)>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	85 db                	test   ebx,ebx
c000b02b:	75 10                	jne    c000b03d <KeInitialiseSymlinks()+0x87>
c000b02d:	83 ec 0c             	sub    esp,0xc
c000b030:	68 97 19 02 c0       	push   0xc0021997
c000b035:	e8 1d 66 00 00       	call   c0011657 <KePanic(char const*)>
c000b03a:	83 c4 10             	add    esp,0x10
c000b03d:	83 ec 0c             	sub    esp,0xc
c000b040:	53                   	push   ebx
c000b041:	e8 ee 0d 00 00       	call   c000be34 <File::exists()>
c000b046:	83 c4 10             	add    esp,0x10
c000b049:	84 c0                	test   al,al
c000b04b:	75 3a                	jne    c000b087 <KeInitialiseSymlinks()+0xd1>
c000b04d:	52                   	push   edx
c000b04e:	52                   	push   edx
c000b04f:	6a 12                	push   0x12
c000b051:	53                   	push   ebx
c000b052:	e8 19 0b 00 00       	call   c000bb70 <File::open(FileOpenMode)>
c000b057:	83 c4 10             	add    esp,0x10
c000b05a:	85 c0                	test   eax,eax
c000b05c:	74 10                	je     c000b06e <KeInitialiseSymlinks()+0xb8>
c000b05e:	83 ec 0c             	sub    esp,0xc
c000b061:	68 b4 19 02 c0       	push   0xc00219b4
c000b066:	e8 ec 65 00 00       	call   c0011657 <KePanic(char const*)>
c000b06b:	83 c4 10             	add    esp,0x10
c000b06e:	83 ec 0c             	sub    esp,0xc
c000b071:	53                   	push   ebx
c000b072:	e8 57 0b 00 00       	call   c000bbce <File::close()>
c000b077:	83 c4 10             	add    esp,0x10
c000b07a:	85 db                	test   ebx,ebx
c000b07c:	0f 84 9e 00 00 00    	je     c000b120 <KeInitialiseSymlinks()+0x16a>
c000b082:	e9 8d 00 00 00       	jmp    c000b114 <KeInitialiseSymlinks()+0x15e>
c000b087:	50                   	push   eax
c000b088:	50                   	push   eax
c000b089:	6a 01                	push   0x1
c000b08b:	53                   	push   ebx
c000b08c:	e8 df 0a 00 00       	call   c000bb70 <File::open(FileOpenMode)>
c000b091:	83 c4 10             	add    esp,0x10
c000b094:	85 c0                	test   eax,eax
c000b096:	74 10                	je     c000b0a8 <KeInitialiseSymlinks()+0xf2>
c000b098:	83 ec 0c             	sub    esp,0xc
c000b09b:	68 d1 19 02 c0       	push   0xc00219d1
c000b0a0:	e8 b2 65 00 00       	call   c0011657 <KePanic(char const*)>
c000b0a5:	83 c4 10             	add    esp,0x10
c000b0a8:	ff 05 00 94 02 c0    	inc    DWORD PTR ds:0xc0029400
c000b0ae:	83 ec 0c             	sub    esp,0xc
c000b0b1:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000b0b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0b7:	57                   	push   edi
c000b0b8:	8d 74 24 20          	lea    esi,[esp+0x20]
c000b0bc:	56                   	push   esi
c000b0bd:	6a 00                	push   0x0
c000b0bf:	68 00 01 00 00       	push   0x100
c000b0c4:	53                   	push   ebx
c000b0c5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0c8:	83 c4 20             	add    esp,0x20
c000b0cb:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b0d3:	75 33                	jne    c000b108 <KeInitialiseSymlinks()+0x152>
c000b0d5:	83 ec 0c             	sub    esp,0xc
c000b0d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0da:	57                   	push   edi
c000b0db:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b0df:	52                   	push   edx
c000b0e0:	6a 00                	push   0x0
c000b0e2:	6a 08                	push   0x8
c000b0e4:	53                   	push   ebx
c000b0e5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0e8:	83 c4 20             	add    esp,0x20
c000b0eb:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b0f0:	75 16                	jne    c000b108 <KeInitialiseSymlinks()+0x152>
c000b0f2:	89 f0                	mov    eax,esi
c000b0f4:	e8 9f fd ff ff       	call   c000ae98 <KiGetSymlinkHash(char const*)>
c000b0f9:	ba 01 00 00 00       	mov    edx,0x1
c000b0fe:	0f b7 c0             	movzx  eax,ax
c000b101:	e8 58 fc ff ff       	call   c000ad5e <KiSetHashInTable(unsigned short, bool)>
c000b106:	eb a0                	jmp    c000b0a8 <KeInitialiseSymlinks()+0xf2>
c000b108:	83 ec 0c             	sub    esp,0xc
c000b10b:	53                   	push   ebx
c000b10c:	e8 bd 0a 00 00       	call   c000bbce <File::close()>
c000b111:	83 c4 10             	add    esp,0x10
c000b114:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	53                   	push   ebx
c000b11a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b11d:	83 c4 10             	add    esp,0x10
c000b120:	81 c4 10 01 00 00    	add    esp,0x110
c000b126:	5b                   	pop    ebx
c000b127:	5e                   	pop    esi
c000b128:	5f                   	pop    edi
c000b129:	c3                   	ret    

c000b12a <KiIsSymlinkRegistered(char const*)>:
c000b12a:	55                   	push   ebp
c000b12b:	57                   	push   edi
c000b12c:	56                   	push   esi
c000b12d:	53                   	push   ebx
c000b12e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c000b134:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000b13b:	89 f0                	mov    eax,esi
c000b13d:	e8 56 fd ff ff       	call   c000ae98 <KiGetSymlinkHash(char const*)>
c000b142:	53                   	push   ebx
c000b143:	56                   	push   esi
c000b144:	0f b7 c0             	movzx  eax,ax
c000b147:	50                   	push   eax
c000b148:	68 ec 19 02 c0       	push   0xc00219ec
c000b14d:	e8 e8 f7 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000b152:	89 f0                	mov    eax,esi
c000b154:	e8 3f fd ff ff       	call   c000ae98 <KiGetSymlinkHash(char const*)>
c000b159:	0f b7 c0             	movzx  eax,ax
c000b15c:	e8 e3 fb ff ff       	call   c000ad44 <KiIsHashInTable(unsigned short)>
c000b161:	83 c4 10             	add    esp,0x10
c000b164:	31 d2                	xor    edx,edx
c000b166:	88 c1                	mov    cl,al
c000b168:	31 c0                	xor    eax,eax
c000b16a:	84 c9                	test   cl,cl
c000b16c:	0f 84 31 01 00 00    	je     c000b2a3 <KiIsSymlinkRegistered(char const*)+0x179>
c000b172:	31 db                	xor    ebx,ebx
c000b174:	39 1d c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,ebx
c000b17a:	7e 30                	jle    c000b1ac <KiIsSymlinkRegistered(char const*)+0x82>
c000b17c:	89 d8                	mov    eax,ebx
c000b17e:	c1 e0 08             	shl    eax,0x8
c000b181:	51                   	push   ecx
c000b182:	05 00 70 02 c0       	add    eax,0xc0027000
c000b187:	51                   	push   ecx
c000b188:	50                   	push   eax
c000b189:	56                   	push   esi
c000b18a:	e8 f1 55 ff ff       	call   c0000780 <strcmp>
c000b18f:	83 c4 10             	add    esp,0x10
c000b192:	85 c0                	test   eax,eax
c000b194:	75 13                	jne    c000b1a9 <KiIsSymlinkRegistered(char const*)+0x7f>
c000b196:	8b 04 dd e0 6f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9020]
c000b19d:	8b 14 dd e4 6f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd901c]
c000b1a4:	e9 fa 00 00 00       	jmp    c000b2a3 <KiIsSymlinkRegistered(char const*)+0x179>
c000b1a9:	43                   	inc    ebx
c000b1aa:	eb c8                	jmp    c000b174 <KiIsSymlinkRegistered(char const*)+0x4a>
c000b1ac:	83 ec 0c             	sub    esp,0xc
c000b1af:	68 14 01 00 00       	push   0x114
c000b1b4:	e8 4a c9 ff ff       	call   c0007b03 <malloc>
c000b1b9:	83 c4 0c             	add    esp,0xc
c000b1bc:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b1c2:	68 d7 18 02 c0       	push   0xc00218d7
c000b1c7:	50                   	push   eax
c000b1c8:	89 c3                	mov    ebx,eax
c000b1ca:	e8 83 09 00 00       	call   c000bb52 <File::File(char const*, Process*)>
c000b1cf:	83 c4 10             	add    esp,0x10
c000b1d2:	85 db                	test   ebx,ebx
c000b1d4:	75 12                	jne    c000b1e8 <KiIsSymlinkRegistered(char const*)+0xbe>
c000b1d6:	83 ec 0c             	sub    esp,0xc
c000b1d9:	68 01 1a 02 c0       	push   0xc0021a01
c000b1de:	e8 74 64 00 00       	call   c0011657 <KePanic(char const*)>
c000b1e3:	83 c4 10             	add    esp,0x10
c000b1e6:	eb 10                	jmp    c000b1f8 <KiIsSymlinkRegistered(char const*)+0xce>
c000b1e8:	83 ec 0c             	sub    esp,0xc
c000b1eb:	53                   	push   ebx
c000b1ec:	e8 43 0c 00 00       	call   c000be34 <File::exists()>
c000b1f1:	83 c4 10             	add    esp,0x10
c000b1f4:	84 c0                	test   al,al
c000b1f6:	74 de                	je     c000b1d6 <KiIsSymlinkRegistered(char const*)+0xac>
c000b1f8:	52                   	push   edx
c000b1f9:	52                   	push   edx
c000b1fa:	6a 01                	push   0x1
c000b1fc:	53                   	push   ebx
c000b1fd:	e8 6e 09 00 00       	call   c000bb70 <File::open(FileOpenMode)>
c000b202:	83 c4 10             	add    esp,0x10
c000b205:	85 c0                	test   eax,eax
c000b207:	74 10                	je     c000b219 <KiIsSymlinkRegistered(char const*)+0xef>
c000b209:	83 ec 0c             	sub    esp,0xc
c000b20c:	68 1c 1a 02 c0       	push   0xc0021a1c
c000b211:	e8 41 64 00 00       	call   c0011657 <KePanic(char const*)>
c000b216:	83 c4 10             	add    esp,0x10
c000b219:	83 ec 0c             	sub    esp,0xc
c000b21c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b21e:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000b222:	55                   	push   ebp
c000b223:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000b227:	57                   	push   edi
c000b228:	6a 00                	push   0x0
c000b22a:	68 00 01 00 00       	push   0x100
c000b22f:	53                   	push   ebx
c000b230:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b233:	83 c4 20             	add    esp,0x20
c000b236:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b23e:	75 4b                	jne    c000b28b <KiIsSymlinkRegistered(char const*)+0x161>
c000b240:	83 ec 0c             	sub    esp,0xc
c000b243:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b245:	55                   	push   ebp
c000b246:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b24a:	52                   	push   edx
c000b24b:	6a 00                	push   0x0
c000b24d:	6a 08                	push   0x8
c000b24f:	53                   	push   ebx
c000b250:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b253:	83 c4 20             	add    esp,0x20
c000b256:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b25b:	75 2e                	jne    c000b28b <KiIsSymlinkRegistered(char const*)+0x161>
c000b25d:	50                   	push   eax
c000b25e:	50                   	push   eax
c000b25f:	57                   	push   edi
c000b260:	56                   	push   esi
c000b261:	e8 1a 55 ff ff       	call   c0000780 <strcmp>
c000b266:	83 c4 10             	add    esp,0x10
c000b269:	85 c0                	test   eax,eax
c000b26b:	75 ac                	jne    c000b219 <KiIsSymlinkRegistered(char const*)+0xef>
c000b26d:	83 ec 0c             	sub    esp,0xc
c000b270:	53                   	push   ebx
c000b271:	e8 58 09 00 00       	call   c000bbce <File::close()>
c000b276:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b278:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b27b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b27e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b282:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	eb 18                	jmp    c000b2a3 <KiIsSymlinkRegistered(char const*)+0x179>
c000b28b:	83 ec 0c             	sub    esp,0xc
c000b28e:	53                   	push   ebx
c000b28f:	e8 3a 09 00 00       	call   c000bbce <File::close()>
c000b294:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b296:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b299:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b29c:	83 c4 10             	add    esp,0x10
c000b29f:	31 c0                	xor    eax,eax
c000b2a1:	31 d2                	xor    edx,edx
c000b2a3:	81 c4 1c 01 00 00    	add    esp,0x11c
c000b2a9:	5b                   	pop    ebx
c000b2aa:	5e                   	pop    esi
c000b2ab:	5f                   	pop    edi
c000b2ac:	5d                   	pop    ebp
c000b2ad:	c3                   	ret    

c000b2ae <KeDereferenceSymlink(char const*, char*)>:
c000b2ae:	55                   	push   ebp
c000b2af:	57                   	push   edi
c000b2b0:	56                   	push   esi
c000b2b1:	53                   	push   ebx
c000b2b2:	83 ec 48             	sub    esp,0x48
c000b2b5:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c000b2b9:	56                   	push   esi
c000b2ba:	e8 6b fe ff ff       	call   c000b12a <KiIsSymlinkRegistered(char const*)>
c000b2bf:	83 c4 10             	add    esp,0x10
c000b2c2:	89 c7                	mov    edi,eax
c000b2c4:	89 d0                	mov    eax,edx
c000b2c6:	09 f8                	or     eax,edi
c000b2c8:	75 07                	jne    c000b2d1 <KeDereferenceSymlink(char const*, char*)+0x23>
c000b2ca:	31 c0                	xor    eax,eax
c000b2cc:	e9 7c 01 00 00       	jmp    c000b44d <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b2d1:	83 ec 0c             	sub    esp,0xc
c000b2d4:	89 d5                	mov    ebp,edx
c000b2d6:	68 14 01 00 00       	push   0x114
c000b2db:	e8 23 c8 ff ff       	call   c0007b03 <malloc>
c000b2e0:	83 c4 0c             	add    esp,0xc
c000b2e3:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b2e9:	56                   	push   esi
c000b2ea:	50                   	push   eax
c000b2eb:	89 c3                	mov    ebx,eax
c000b2ed:	e8 60 08 00 00       	call   c000bb52 <File::File(char const*, Process*)>
c000b2f2:	83 c4 10             	add    esp,0x10
c000b2f5:	85 db                	test   ebx,ebx
c000b2f7:	0f 84 32 01 00 00    	je     c000b42f <KeDereferenceSymlink(char const*, char*)+0x181>
c000b2fd:	56                   	push   esi
c000b2fe:	56                   	push   esi
c000b2ff:	6a 01                	push   0x1
c000b301:	53                   	push   ebx
c000b302:	e8 69 08 00 00       	call   c000bb70 <File::open(FileOpenMode)>
c000b307:	83 c4 10             	add    esp,0x10
c000b30a:	85 c0                	test   eax,eax
c000b30c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b30e:	74 09                	je     c000b319 <KeDereferenceSymlink(char const*, char*)+0x6b>
c000b310:	83 ec 0c             	sub    esp,0xc
c000b313:	53                   	push   ebx
c000b314:	e9 10 01 00 00       	jmp    c000b429 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b319:	83 ec 0c             	sub    esp,0xc
c000b31c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b320:	56                   	push   esi
c000b321:	8d 54 24 37          	lea    edx,[esp+0x37]
c000b325:	52                   	push   edx
c000b326:	6a 00                	push   0x0
c000b328:	6a 08                	push   0x8
c000b32a:	53                   	push   ebx
c000b32b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b32e:	83 c4 20             	add    esp,0x20
c000b331:	85 c0                	test   eax,eax
c000b333:	0f 85 e2 00 00 00    	jne    c000b41b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b339:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b33e:	0f 85 d7 00 00 00    	jne    c000b41b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b344:	83 ec 0c             	sub    esp,0xc
c000b347:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b349:	56                   	push   esi
c000b34a:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b34e:	52                   	push   edx
c000b34f:	6a 00                	push   0x0
c000b351:	6a 08                	push   0x8
c000b353:	53                   	push   ebx
c000b354:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b357:	83 c4 20             	add    esp,0x20
c000b35a:	85 c0                	test   eax,eax
c000b35c:	0f 85 b9 00 00 00    	jne    c000b41b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b362:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b367:	0f 85 ae 00 00 00    	jne    c000b41b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b36d:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b371:	0f 85 53 ff ff ff    	jne    c000b2ca <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b377:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b37b:	0f 85 49 ff ff ff    	jne    c000b2ca <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b381:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b389:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b391:	51                   	push   ecx
c000b392:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b396:	50                   	push   eax
c000b397:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b39b:	50                   	push   eax
c000b39c:	53                   	push   ebx
c000b39d:	e8 d0 0a 00 00       	call   c000be72 <File::stat(unsigned long long*, bool*)>
c000b3a2:	83 c4 10             	add    esp,0x10
c000b3a5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b3aa:	75 6f                	jne    c000b41b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b3ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b3b0:	31 c9                	xor    ecx,ecx
c000b3b2:	bf 0f 00 00 00       	mov    edi,0xf
c000b3b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b3bb:	39 c7                	cmp    edi,eax
c000b3bd:	89 cf                	mov    edi,ecx
c000b3bf:	19 d7                	sbb    edi,edx
c000b3c1:	73 58                	jae    c000b41b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b3c3:	83 c0 f0             	add    eax,0xfffffff0
c000b3c6:	bf ff 00 00 00       	mov    edi,0xff
c000b3cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b3cf:	83 d2 ff             	adc    edx,0xffffffff
c000b3d2:	39 c7                	cmp    edi,eax
c000b3d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b3d8:	19 d1                	sbb    ecx,edx
c000b3da:	72 53                	jb     c000b42f <KeDereferenceSymlink(char const*, char*)+0x181>
c000b3dc:	40                   	inc    eax
c000b3dd:	52                   	push   edx
c000b3de:	50                   	push   eax
c000b3df:	6a 00                	push   0x0
c000b3e1:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000b3e5:	e8 06 51 ff ff       	call   c00004f0 <memset>
c000b3ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3ec:	89 34 24             	mov    DWORD PTR [esp],esi
c000b3ef:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b3f3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b3f7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b3fb:	53                   	push   ebx
c000b3fc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b3ff:	83 c4 20             	add    esp,0x20
c000b402:	85 c0                	test   eax,eax
c000b404:	75 15                	jne    c000b41b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b406:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b40a:	89 c7                	mov    edi,eax
c000b40c:	c1 ff 1f             	sar    edi,0x1f
c000b40f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b413:	75 06                	jne    c000b41b <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b415:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b419:	74 19                	je     c000b434 <KeDereferenceSymlink(char const*, char*)+0x186>
c000b41b:	83 ec 0c             	sub    esp,0xc
c000b41e:	53                   	push   ebx
c000b41f:	e8 aa 07 00 00       	call   c000bbce <File::close()>
c000b424:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b426:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b429:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b42c:	83 c4 10             	add    esp,0x10
c000b42f:	83 c8 ff             	or     eax,0xffffffff
c000b432:	eb 19                	jmp    c000b44d <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b434:	83 ec 0c             	sub    esp,0xc
c000b437:	53                   	push   ebx
c000b438:	e8 91 07 00 00       	call   c000bbce <File::close()>
c000b43d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b43f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b442:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b445:	83 c4 10             	add    esp,0x10
c000b448:	b8 01 00 00 00       	mov    eax,0x1
c000b44d:	83 c4 3c             	add    esp,0x3c
c000b450:	5b                   	pop    ebx
c000b451:	5e                   	pop    esi
c000b452:	5f                   	pop    edi
c000b453:	5d                   	pop    ebp
c000b454:	c3                   	ret    

c000b455 <KeCreateSymlink(char const*, char const*)>:
c000b455:	55                   	push   ebp
c000b456:	57                   	push   edi
c000b457:	56                   	push   esi
c000b458:	53                   	push   ebx
c000b459:	83 ec 38             	sub    esp,0x38
c000b45c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b460:	68 14 01 00 00       	push   0x114
c000b465:	e8 99 c6 ff ff       	call   c0007b03 <malloc>
c000b46a:	6a 00                	push   0x0
c000b46c:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b472:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b476:	89 c3                	mov    ebx,eax
c000b478:	50                   	push   eax
c000b479:	e8 f6 05 00 00       	call   c000ba74 <File::File(char const*, Process*, bool)>
c000b47e:	83 c4 20             	add    esp,0x20
c000b481:	85 db                	test   ebx,ebx
c000b483:	b8 01 00 00 00       	mov    eax,0x1
c000b488:	0f 84 19 01 00 00    	je     c000b5a7 <KeCreateSymlink(char const*, char const*)+0x152>
c000b48e:	52                   	push   edx
c000b48f:	52                   	push   edx
c000b490:	6a 12                	push   0x12
c000b492:	53                   	push   ebx
c000b493:	e8 d8 06 00 00       	call   c000bb70 <File::open(FileOpenMode)>
c000b498:	83 c4 10             	add    esp,0x10
c000b49b:	85 c0                	test   eax,eax
c000b49d:	74 0b                	je     c000b4aa <KeCreateSymlink(char const*, char const*)+0x55>
c000b49f:	83 ec 0c             	sub    esp,0xc
c000b4a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4a4:	53                   	push   ebx
c000b4a5:	e9 f2 00 00 00       	jmp    c000b59c <KeCreateSymlink(char const*, char const*)+0x147>
c000b4aa:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b4ae:	be 69 1a 02 c0       	mov    esi,0xc0021a69
c000b4b3:	b9 09 00 00 00       	mov    ecx,0x9
c000b4b8:	fc                   	cld    
c000b4b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b4bb:	83 ec 0c             	sub    esp,0xc
c000b4be:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b4c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4c4:	56                   	push   esi
c000b4c5:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b4c9:	52                   	push   edx
c000b4ca:	6a 00                	push   0x0
c000b4cc:	6a 08                	push   0x8
c000b4ce:	53                   	push   ebx
c000b4cf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b4d2:	83 c4 20             	add    esp,0x20
c000b4d5:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b4da:	0f 85 ae 00 00 00    	jne    c000b58e <KeCreateSymlink(char const*, char const*)+0x139>
c000b4e0:	85 c0                	test   eax,eax
c000b4e2:	0f 85 a6 00 00 00    	jne    c000b58e <KeCreateSymlink(char const*, char const*)+0x139>
c000b4e8:	e8 cc f9 ff ff       	call   c000aeb9 <KiCreateSymlinkID()>
c000b4ed:	83 ec 0c             	sub    esp,0xc
c000b4f0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b4f4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b4f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4fa:	56                   	push   esi
c000b4fb:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b4ff:	52                   	push   edx
c000b500:	6a 00                	push   0x0
c000b502:	6a 08                	push   0x8
c000b504:	53                   	push   ebx
c000b505:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b508:	83 c4 20             	add    esp,0x20
c000b50b:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b510:	75 7c                	jne    c000b58e <KeCreateSymlink(char const*, char const*)+0x139>
c000b512:	85 c0                	test   eax,eax
c000b514:	75 78                	jne    c000b58e <KeCreateSymlink(char const*, char const*)+0x139>
c000b516:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b518:	83 ec 0c             	sub    esp,0xc
c000b51b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b51e:	55                   	push   ebp
c000b51f:	e8 5c 50 ff ff       	call   c0000580 <strlen>
c000b524:	31 d2                	xor    edx,edx
c000b526:	89 34 24             	mov    DWORD PTR [esp],esi
c000b529:	55                   	push   ebp
c000b52a:	52                   	push   edx
c000b52b:	50                   	push   eax
c000b52c:	53                   	push   ebx
c000b52d:	ff d7                	call   edi
c000b52f:	83 c4 14             	add    esp,0x14
c000b532:	55                   	push   ebp
c000b533:	89 c6                	mov    esi,eax
c000b535:	e8 46 50 ff ff       	call   c0000580 <strlen>
c000b53a:	83 c4 10             	add    esp,0x10
c000b53d:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b541:	75 4b                	jne    c000b58e <KeCreateSymlink(char const*, char const*)+0x139>
c000b543:	85 f6                	test   esi,esi
c000b545:	75 47                	jne    c000b58e <KeCreateSymlink(char const*, char const*)+0x139>
c000b547:	50                   	push   eax
c000b548:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b54c:	55                   	push   ebp
c000b54d:	68 37 1a 02 c0       	push   0xc0021a37
c000b552:	e8 e3 f3 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000b557:	83 c4 0c             	add    esp,0xc
c000b55a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b55e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b562:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b566:	e8 b9 f9 ff ff       	call   c000af24 <KeRegisterSymlink(char const*, unsigned long long)>
c000b56b:	c7 04 24 5c 1a 02 c0 	mov    DWORD PTR [esp],0xc0021a5c
c000b572:	e8 c3 f3 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000b577:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b57a:	e8 4f 06 00 00       	call   c000bbce <File::close()>
c000b57f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b581:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b584:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b587:	83 c4 10             	add    esp,0x10
c000b58a:	31 c0                	xor    eax,eax
c000b58c:	eb 19                	jmp    c000b5a7 <KeCreateSymlink(char const*, char const*)+0x152>
c000b58e:	83 ec 0c             	sub    esp,0xc
c000b591:	53                   	push   ebx
c000b592:	e8 37 06 00 00       	call   c000bbce <File::close()>
c000b597:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b599:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b59c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b59f:	83 c4 10             	add    esp,0x10
c000b5a2:	b8 01 00 00 00       	mov    eax,0x1
c000b5a7:	83 c4 2c             	add    esp,0x2c
c000b5aa:	5b                   	pop    ebx
c000b5ab:	5e                   	pop    esi
c000b5ac:	5f                   	pop    edi
c000b5ad:	5d                   	pop    ebp
c000b5ae:	c3                   	ret    
c000b5af:	90                   	nop

c000b5b0 <File::read(unsigned long long, void*, int*)>:
c000b5b0:	53                   	push   ebx
c000b5b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b5b5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b5b9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b5c0:	83 f8 19             	cmp    eax,0x19
c000b5c3:	77 35                	ja     c000b5fa <File::read(unsigned long long, void*, int*)+0x4a>
c000b5c5:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b5cc:	85 c0                	test   eax,eax
c000b5ce:	74 2a                	je     c000b5fa <File::read(unsigned long long, void*, int*)+0x4a>
c000b5d0:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b5d6:	85 c0                	test   eax,eax
c000b5d8:	74 20                	je     c000b5fa <File::read(unsigned long long, void*, int*)+0x4a>
c000b5da:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5de:	74 21                	je     c000b601 <File::read(unsigned long long, void*, int*)+0x51>
c000b5e0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b5e2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b5e6:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b5ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5f0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5f4:	5b                   	pop    ebx
c000b5f5:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b5f8:	ff e0                	jmp    eax
c000b5fa:	b8 0b 00 00 00       	mov    eax,0xb
c000b5ff:	eb 05                	jmp    c000b606 <File::read(unsigned long long, void*, int*)+0x56>
c000b601:	b8 05 00 00 00       	mov    eax,0x5
c000b606:	5b                   	pop    ebx
c000b607:	c3                   	ret    

c000b608 <File::write(unsigned long long, void*, int*)>:
c000b608:	53                   	push   ebx
c000b609:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b60d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b611:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b618:	83 f8 19             	cmp    eax,0x19
c000b61b:	77 35                	ja     c000b652 <File::write(unsigned long long, void*, int*)+0x4a>
c000b61d:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b624:	85 c0                	test   eax,eax
c000b626:	74 2a                	je     c000b652 <File::write(unsigned long long, void*, int*)+0x4a>
c000b628:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b62e:	85 c0                	test   eax,eax
c000b630:	74 20                	je     c000b652 <File::write(unsigned long long, void*, int*)+0x4a>
c000b632:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b636:	74 21                	je     c000b659 <File::write(unsigned long long, void*, int*)+0x51>
c000b638:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b63a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b63e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b644:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b648:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b64c:	5b                   	pop    ebx
c000b64d:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b650:	ff e0                	jmp    eax
c000b652:	b8 0b 00 00 00       	mov    eax,0xb
c000b657:	eb 05                	jmp    c000b65e <File::write(unsigned long long, void*, int*)+0x56>
c000b659:	b8 05 00 00 00       	mov    eax,0x5
c000b65e:	5b                   	pop    ebx
c000b65f:	c3                   	ret    

c000b660 <Directory::read(unsigned long long, void*, int*)>:
c000b660:	53                   	push   ebx
c000b661:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b665:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b669:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b670:	83 f8 19             	cmp    eax,0x19
c000b673:	77 35                	ja     c000b6aa <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b675:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b67c:	85 c0                	test   eax,eax
c000b67e:	74 2a                	je     c000b6aa <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b680:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b686:	85 c0                	test   eax,eax
c000b688:	74 20                	je     c000b6aa <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b68a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b68e:	74 21                	je     c000b6b1 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b690:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b692:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b696:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b69c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6a4:	5b                   	pop    ebx
c000b6a5:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b6a8:	ff e0                	jmp    eax
c000b6aa:	b8 0b 00 00 00       	mov    eax,0xb
c000b6af:	eb 05                	jmp    c000b6b6 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b6b1:	b8 05 00 00 00       	mov    eax,0x5
c000b6b6:	5b                   	pop    ebx
c000b6b7:	c3                   	ret    

c000b6b8 <Directory::write(unsigned long long, void*, int*)>:
c000b6b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6bc:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b6c3:	b8 0b 00 00 00       	mov    eax,0xb
c000b6c8:	83 fa 19             	cmp    edx,0x19
c000b6cb:	77 18                	ja     c000b6e5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b6cd:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000b6d4:	85 d2                	test   edx,edx
c000b6d6:	74 0d                	je     c000b6e5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b6d8:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b6df:	19 c0                	sbb    eax,eax
c000b6e1:	83 e0 0a             	and    eax,0xa
c000b6e4:	40                   	inc    eax
c000b6e5:	c3                   	ret    

c000b6e6 <File::isAtty()>:
c000b6e6:	31 c0                	xor    eax,eax
c000b6e8:	c3                   	ret    
c000b6e9:	90                   	nop

c000b6ea <Directory::isAtty()>:
c000b6ea:	31 c0                	xor    eax,eax
c000b6ec:	c3                   	ret    
c000b6ed:	90                   	nop

c000b6ee <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b6ee:	b8 0a 00 00 00       	mov    eax,0xa
c000b6f3:	c3                   	ret    

c000b6f4 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b6f4:	b8 0a 00 00 00       	mov    eax,0xa
c000b6f9:	c3                   	ret    

c000b6fa <Filesystem::allocateSwapfile(char const*, int)>:
c000b6fa:	31 c0                	xor    eax,eax
c000b6fc:	31 d2                	xor    edx,edx
c000b6fe:	c3                   	ret    
c000b6ff:	90                   	nop

c000b700 <File::~File()>:
c000b700:	83 ec 0c             	sub    esp,0xc
c000b703:	ba 28 1b 02 c0       	mov    edx,0xc0021b28
c000b708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b70c:	89 10                	mov    DWORD PTR [eax],edx
c000b70e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b712:	83 ec 0c             	sub    esp,0xc
c000b715:	50                   	push   eax
c000b716:	e8 a1 dc ff ff       	call   c00093bc <UnixFile::~UnixFile()>
c000b71b:	83 c4 10             	add    esp,0x10
c000b71e:	90                   	nop
c000b71f:	83 c4 0c             	add    esp,0xc
c000b722:	c3                   	ret    
c000b723:	90                   	nop

c000b724 <File::~File()>:
c000b724:	83 ec 0c             	sub    esp,0xc
c000b727:	83 ec 0c             	sub    esp,0xc
c000b72a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b72e:	e8 cd ff ff ff       	call   c000b700 <File::~File()>
c000b733:	83 c4 10             	add    esp,0x10
c000b736:	83 ec 08             	sub    esp,0x8
c000b739:	68 14 01 00 00       	push   0x114
c000b73e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b742:	e8 f5 f0 ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000b747:	83 c4 10             	add    esp,0x10
c000b74a:	83 c4 0c             	add    esp,0xc
c000b74d:	c3                   	ret    

c000b74e <Directory::~Directory()>:
c000b74e:	83 ec 0c             	sub    esp,0xc
c000b751:	ba 44 1b 02 c0       	mov    edx,0xc0021b44
c000b756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b75a:	89 10                	mov    DWORD PTR [eax],edx
c000b75c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b760:	83 ec 0c             	sub    esp,0xc
c000b763:	50                   	push   eax
c000b764:	e8 53 dc ff ff       	call   c00093bc <UnixFile::~UnixFile()>
c000b769:	83 c4 10             	add    esp,0x10
c000b76c:	90                   	nop
c000b76d:	83 c4 0c             	add    esp,0xc
c000b770:	c3                   	ret    
c000b771:	90                   	nop

c000b772 <Directory::~Directory()>:
c000b772:	83 ec 0c             	sub    esp,0xc
c000b775:	83 ec 0c             	sub    esp,0xc
c000b778:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77c:	e8 cd ff ff ff       	call   c000b74e <Directory::~Directory()>
c000b781:	83 c4 10             	add    esp,0x10
c000b784:	83 ec 08             	sub    esp,0x8
c000b787:	68 14 01 00 00       	push   0x114
c000b78c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b790:	e8 a7 f0 ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000b795:	83 c4 10             	add    esp,0x10
c000b798:	83 c4 0c             	add    esp,0xc
c000b79b:	c3                   	ret    

c000b79c <Filesystem::Filesystem()>:
c000b79c:	ba bc 1a 02 c0       	mov    edx,0xc0021abc
c000b7a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7a5:	89 10                	mov    DWORD PTR [eax],edx
c000b7a7:	8b 15 04 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029404
c000b7ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7b1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b7b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7b8:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000b7bd:	90                   	nop
c000b7be:	c3                   	ret    
c000b7bf:	90                   	nop

c000b7c0 <Filesystem::~Filesystem()>:
c000b7c0:	ba bc 1a 02 c0       	mov    edx,0xc0021abc
c000b7c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7c9:	89 10                	mov    DWORD PTR [eax],edx
c000b7cb:	90                   	nop
c000b7cc:	c3                   	ret    
c000b7cd:	90                   	nop

c000b7ce <Filesystem::~Filesystem()>:
c000b7ce:	83 ec 0c             	sub    esp,0xc
c000b7d1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b7d5:	e8 e6 ff ff ff       	call   c000b7c0 <Filesystem::~Filesystem()>
c000b7da:	83 c4 04             	add    esp,0x4
c000b7dd:	83 ec 08             	sub    esp,0x8
c000b7e0:	6a 08                	push   0x8
c000b7e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7e6:	e8 51 f0 ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000b7eb:	83 c4 10             	add    esp,0x10
c000b7ee:	83 c4 0c             	add    esp,0xc
c000b7f1:	c3                   	ret    

c000b7f2 <Fs::getcwd(Process*, char*, int)>:
c000b7f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b7f6:	31 c0                	xor    eax,eax
c000b7f8:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b7fc:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b7ff:	7d 15                	jge    c000b816 <Fs::getcwd(Process*, char*, int)+0x24>
c000b801:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b805:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b80c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b80f:	84 c9                	test   cl,cl
c000b811:	74 06                	je     c000b819 <Fs::getcwd(Process*, char*, int)+0x27>
c000b813:	40                   	inc    eax
c000b814:	eb e2                	jmp    c000b7f8 <Fs::getcwd(Process*, char*, int)+0x6>
c000b816:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b819:	31 c0                	xor    eax,eax
c000b81b:	c3                   	ret    

c000b81c <Fs::initVFS()>:
c000b81c:	83 ec 18             	sub    esp,0x18
c000b81f:	6a 08                	push   0x8
c000b821:	e8 dd c2 ff ff       	call   c0007b03 <malloc>
c000b826:	89 04 24             	mov    DWORD PTR [esp],eax
c000b829:	e8 ca e4 00 00       	call   c0019cf8 <FAT::FAT()>
c000b82e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b835:	e8 c9 c2 ff ff       	call   c0007b03 <malloc>
c000b83a:	89 04 24             	mov    DWORD PTR [esp],eax
c000b83d:	e8 e4 f3 00 00       	call   c001ac26 <ISO9660::ISO9660()>
c000b842:	83 c4 1c             	add    esp,0x1c
c000b845:	c3                   	ret    

c000b846 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b846:	55                   	push   ebp
c000b847:	57                   	push   edi
c000b848:	56                   	push   esi
c000b849:	53                   	push   ebx
c000b84a:	81 ec 20 04 00 00    	sub    esp,0x420
c000b850:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c000b857:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c000b85e:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000b865:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000b86c:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b870:	68 00 04 00 00       	push   0x400
c000b875:	6a 00                	push   0x0
c000b877:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000b87b:	57                   	push   edi
c000b87c:	e8 6f 4c ff ff       	call   c00004f0 <memset>
c000b881:	83 c4 10             	add    esp,0x10
c000b884:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c000b888:	75 0b                	jne    c000b895 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c000b88a:	50                   	push   eax
c000b88b:	50                   	push   eax
c000b88c:	56                   	push   esi
c000b88d:	57                   	push   edi
c000b88e:	e8 bd 4d ff ff       	call   c0000650 <strcpy>
c000b893:	eb 45                	jmp    c000b8da <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c000b895:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000b898:	83 f8 2f             	cmp    eax,0x2f
c000b89b:	74 05                	je     c000b8a2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c000b89d:	83 f8 5c             	cmp    eax,0x5c
c000b8a0:	75 19                	jne    c000b8bb <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c000b8a2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b8a5:	3c 60                	cmp    al,0x60
c000b8a7:	7e 03                	jle    c000b8ac <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c000b8a9:	83 e8 20             	sub    eax,0x20
c000b8ac:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b8b0:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b8b7:	50                   	push   eax
c000b8b8:	50                   	push   eax
c000b8b9:	eb 18                	jmp    c000b8d3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c000b8bb:	50                   	push   eax
c000b8bc:	50                   	push   eax
c000b8bd:	55                   	push   ebp
c000b8be:	57                   	push   edi
c000b8bf:	e8 8c 4d ff ff       	call   c0000650 <strcpy>
c000b8c4:	58                   	pop    eax
c000b8c5:	5a                   	pop    edx
c000b8c6:	68 6f 2b 02 c0       	push   0xc0022b6f
c000b8cb:	57                   	push   edi
c000b8cc:	e8 9f 4f ff ff       	call   c0000870 <strcat>
c000b8d1:	59                   	pop    ecx
c000b8d2:	5d                   	pop    ebp
c000b8d3:	56                   	push   esi
c000b8d4:	57                   	push   edi
c000b8d5:	e8 96 4f ff ff       	call   c0000870 <strcat>
c000b8da:	83 c4 10             	add    esp,0x10
c000b8dd:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000b8e1:	3c 60                	cmp    al,0x60
c000b8e3:	7e 03                	jle    c000b8e8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c000b8e5:	83 e8 20             	sub    eax,0x20
c000b8e8:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b8ec:	be 03 00 00 00       	mov    esi,0x3
c000b8f1:	88 03                	mov    BYTE PTR [ebx],al
c000b8f3:	b8 03 00 00 00       	mov    eax,0x3
c000b8f8:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b8ff:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b905:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b909:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c000b90e:	89 fa                	mov    edx,edi
c000b910:	0f be ea             	movsx  ebp,dl
c000b913:	85 ed                	test   ebp,ebp
c000b915:	0f 84 a1 00 00 00    	je     c000b9bc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c000b91b:	8d 56 01             	lea    edx,[esi+0x1]
c000b91e:	83 fd 2f             	cmp    ebp,0x2f
c000b921:	74 05                	je     c000b928 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c000b923:	83 fd 5c             	cmp    ebp,0x5c
c000b926:	75 12                	jne    c000b93a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b928:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b92d:	89 c5                	mov    ebp,eax
c000b92f:	74 09                	je     c000b93a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c000b931:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b935:	40                   	inc    eax
c000b936:	89 d6                	mov    esi,edx
c000b938:	eb cf                	jmp    c000b909 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b93a:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c000b93f:	89 f9                	mov    ecx,edi
c000b941:	0f be e9             	movsx  ebp,cl
c000b944:	75 61                	jne    c000b9a7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b946:	83 fd 2e             	cmp    ebp,0x2e
c000b949:	75 5c                	jne    c000b9a7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c000b94b:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000b950:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c000b955:	74 19                	je     c000b970 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c000b957:	83 fd 2e             	cmp    ebp,0x2e
c000b95a:	74 55                	je     c000b9b1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b95c:	89 f2                	mov    edx,esi
c000b95e:	42                   	inc    edx
c000b95f:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b964:	83 f9 2f             	cmp    ecx,0x2f
c000b967:	74 f5                	je     c000b95e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b969:	83 f9 5c             	cmp    ecx,0x5c
c000b96c:	74 f0                	je     c000b95e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c000b96e:	eb c6                	jmp    c000b936 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b970:	83 fd 2e             	cmp    ebp,0x2e
c000b973:	74 3c                	je     c000b9b1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c000b975:	83 f8 03             	cmp    eax,0x3
c000b978:	74 bc                	je     c000b936 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b97a:	42                   	inc    edx
c000b97b:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c000b980:	83 f9 2f             	cmp    ecx,0x2f
c000b983:	74 f5                	je     c000b97a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b985:	83 f9 5c             	cmp    ecx,0x5c
c000b988:	74 f0                	je     c000b97a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c000b98a:	48                   	dec    eax
c000b98b:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b98f:	75 06                	jne    c000b997 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b991:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b995:	eb f3                	jmp    c000b98a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c000b997:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b99b:	74 07                	je     c000b9a4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c000b99d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b9a1:	48                   	dec    eax
c000b9a2:	eb f3                	jmp    c000b997 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c000b9a4:	40                   	inc    eax
c000b9a5:	eb 8f                	jmp    c000b936 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9a7:	83 fd 2f             	cmp    ebp,0x2f
c000b9aa:	74 8a                	je     c000b936 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9ac:	83 fd 5c             	cmp    ebp,0x5c
c000b9af:	74 85                	je     c000b936 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9b1:	89 f9                	mov    ecx,edi
c000b9b3:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000b9b6:	40                   	inc    eax
c000b9b7:	e9 7a ff ff ff       	jmp    c000b936 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b9bc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b9c0:	83 ec 0c             	sub    esp,0xc
c000b9c3:	53                   	push   ebx
c000b9c4:	e8 b7 4b ff ff       	call   c0000580 <strlen>
c000b9c9:	83 c4 10             	add    esp,0x10
c000b9cc:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b9d1:	74 1c                	je     c000b9ef <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000b9d3:	83 ec 0c             	sub    esp,0xc
c000b9d6:	53                   	push   ebx
c000b9d7:	e8 a4 4b ff ff       	call   c0000580 <strlen>
c000b9dc:	83 c4 10             	add    esp,0x10
c000b9df:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b9e4:	74 09                	je     c000b9ef <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c000b9e6:	31 ff                	xor    edi,edi
c000b9e8:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c000b9ed:	eb 5c                	jmp    c000ba4b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c000b9ef:	83 ec 0c             	sub    esp,0xc
c000b9f2:	53                   	push   ebx
c000b9f3:	e8 88 4b ff ff       	call   c0000580 <strlen>
c000b9f8:	83 c4 10             	add    esp,0x10
c000b9fb:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000ba00:	74 e4                	je     c000b9e6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c000ba02:	83 ec 0c             	sub    esp,0xc
c000ba05:	53                   	push   ebx
c000ba06:	e8 75 4b ff ff       	call   c0000580 <strlen>
c000ba0b:	83 c4 10             	add    esp,0x10
c000ba0e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000ba13:	eb ab                	jmp    c000b9c0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c000ba15:	52                   	push   edx
c000ba16:	52                   	push   edx
c000ba17:	53                   	push   ebx
c000ba18:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ba1c:	55                   	push   ebp
c000ba1d:	e8 2e 4c ff ff       	call   c0000650 <strcpy>
c000ba22:	59                   	pop    ecx
c000ba23:	58                   	pop    eax
c000ba24:	53                   	push   ebx
c000ba25:	55                   	push   ebp
c000ba26:	e8 83 f8 ff ff       	call   c000b2ae <KeDereferenceSymlink(char const*, char*)>
c000ba2b:	83 c4 10             	add    esp,0x10
c000ba2e:	48                   	dec    eax
c000ba2f:	75 37                	jne    c000ba68 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000ba31:	50                   	push   eax
c000ba32:	53                   	push   ebx
c000ba33:	55                   	push   ebp
c000ba34:	68 72 1a 02 c0       	push   0xc0021a72
c000ba39:	e8 fc ee ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000ba3e:	8d 47 01             	lea    eax,[edi+0x1]
c000ba41:	83 c4 10             	add    esp,0x10
c000ba44:	83 ff 14             	cmp    edi,0x14
c000ba47:	74 08                	je     c000ba51 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c000ba49:	89 c7                	mov    edi,eax
c000ba4b:	85 f6                	test   esi,esi
c000ba4d:	75 c6                	jne    c000ba15 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c000ba4f:	eb 17                	jmp    c000ba68 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000ba51:	83 ec 0c             	sub    esp,0xc
c000ba54:	bf 15 00 00 00       	mov    edi,0x15
c000ba59:	68 8d 1a 02 c0       	push   0xc0021a8d
c000ba5e:	e8 f4 5b 00 00       	call   c0011657 <KePanic(char const*)>
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	eb e3                	jmp    c000ba4b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c000ba68:	81 c4 1c 04 00 00    	add    esp,0x41c
c000ba6e:	5b                   	pop    ebx
c000ba6f:	5e                   	pop    esi
c000ba70:	5f                   	pop    edi
c000ba71:	5d                   	pop    ebp
c000ba72:	c3                   	ret    
c000ba73:	90                   	nop

c000ba74 <File::File(char const*, Process*, bool)>:
c000ba74:	83 ec 1c             	sub    esp,0x1c
c000ba77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba7b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ba7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba83:	83 ec 08             	sub    esp,0x8
c000ba86:	6a 00                	push   0x0
c000ba88:	50                   	push   eax
c000ba89:	e8 48 d7 ff ff       	call   c00091d6 <UnixFile::UnixFile(int)>
c000ba8e:	83 c4 10             	add    esp,0x10
c000ba91:	ba 28 1b 02 c0       	mov    edx,0xc0021b28
c000ba96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba9a:	89 10                	mov    DWORD PTR [eax],edx
c000ba9c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000baa1:	85 c0                	test   eax,eax
c000baa3:	74 0f                	je     c000bab4 <File::File(char const*, Process*, bool)+0x40>
c000baa5:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000baaa:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000baae:	74 04                	je     c000bab4 <File::File(char const*, Process*, bool)+0x40>
c000bab0:	b0 01                	mov    al,0x1
c000bab2:	eb 02                	jmp    c000bab6 <File::File(char const*, Process*, bool)+0x42>
c000bab4:	b0 00                	mov    al,0x0
c000bab6:	0f b6 c0             	movzx  eax,al
c000bab9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000babd:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000bac3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bac7:	83 c2 0d             	add    edx,0xd
c000baca:	50                   	push   eax
c000bacb:	51                   	push   ecx
c000bacc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bad0:	52                   	push   edx
c000bad1:	e8 70 fd ff ff       	call   c000b846 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bad6:	83 c4 10             	add    esp,0x10
c000bad9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000badd:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bae0:	83 e8 41             	sub    eax,0x41
c000bae3:	88 c2                	mov    dl,al
c000bae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bae9:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000baef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baf3:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000baf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bafb:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb01:	0f b6 c0             	movzx  eax,al
c000bb04:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb0b:	85 c0                	test   eax,eax
c000bb0d:	74 3e                	je     c000bb4d <File::File(char const*, Process*, bool)+0xd9>
c000bb0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb13:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb19:	0f b6 c0             	movzx  eax,al
c000bb1c:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb23:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bb29:	85 c0                	test   eax,eax
c000bb2b:	75 20                	jne    c000bb4d <File::File(char const*, Process*, bool)+0xd9>
c000bb2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb31:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb37:	0f b6 c0             	movzx  eax,al
c000bb3a:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb41:	83 ec 0c             	sub    esp,0xc
c000bb44:	50                   	push   eax
c000bb45:	e8 e6 21 00 00       	call   c000dd30 <LogicalDisk::mount()>
c000bb4a:	83 c4 10             	add    esp,0x10
c000bb4d:	90                   	nop
c000bb4e:	83 c4 1c             	add    esp,0x1c
c000bb51:	c3                   	ret    

c000bb52 <File::File(char const*, Process*)>:
c000bb52:	83 ec 0c             	sub    esp,0xc
c000bb55:	6a 01                	push   0x1
c000bb57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb63:	e8 0c ff ff ff       	call   c000ba74 <File::File(char const*, Process*, bool)>
c000bb68:	83 c4 10             	add    esp,0x10
c000bb6b:	90                   	nop
c000bb6c:	83 c4 0c             	add    esp,0xc
c000bb6f:	c3                   	ret    

c000bb70 <File::open(FileOpenMode)>:
c000bb70:	53                   	push   ebx
c000bb71:	b8 0b 00 00 00       	mov    eax,0xb
c000bb76:	83 ec 08             	sub    esp,0x8
c000bb79:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb7d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bb84:	83 fa 19             	cmp    edx,0x19
c000bb87:	77 40                	ja     c000bbc9 <File::open(FileOpenMode)+0x59>
c000bb89:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bb90:	85 d2                	test   edx,edx
c000bb92:	74 35                	je     c000bbc9 <File::open(FileOpenMode)+0x59>
c000bb94:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bb9a:	85 d2                	test   edx,edx
c000bb9c:	74 2b                	je     c000bbc9 <File::open(FileOpenMode)+0x59>
c000bb9e:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bba2:	b8 06 00 00 00       	mov    eax,0x6
c000bba7:	75 20                	jne    c000bbc9 <File::open(FileOpenMode)+0x59>
c000bba9:	8b 02                	mov    eax,DWORD PTR [edx]
c000bbab:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bbb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbb5:	51                   	push   ecx
c000bbb6:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bbb9:	51                   	push   ecx
c000bbba:	52                   	push   edx
c000bbbb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bbbe:	83 c4 10             	add    esp,0x10
c000bbc1:	85 c0                	test   eax,eax
c000bbc3:	75 04                	jne    c000bbc9 <File::open(FileOpenMode)+0x59>
c000bbc5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bbc9:	83 c4 08             	add    esp,0x8
c000bbcc:	5b                   	pop    ebx
c000bbcd:	c3                   	ret    

c000bbce <File::close()>:
c000bbce:	53                   	push   ebx
c000bbcf:	b8 0b 00 00 00       	mov    eax,0xb
c000bbd4:	83 ec 08             	sub    esp,0x8
c000bbd7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bbdb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bbe2:	83 f9 19             	cmp    ecx,0x19
c000bbe5:	77 41                	ja     c000bc28 <File::close()+0x5a>
c000bbe7:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000bbee:	85 db                	test   ebx,ebx
c000bbf0:	74 36                	je     c000bc28 <File::close()+0x5a>
c000bbf2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bbf9:	74 2d                	je     c000bc28 <File::close()+0x5a>
c000bbfb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bbff:	b8 05 00 00 00       	mov    eax,0x5
c000bc04:	74 22                	je     c000bc28 <File::close()+0x5a>
c000bc06:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bc0a:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000bc11:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bc17:	53                   	push   ebx
c000bc18:	53                   	push   ebx
c000bc19:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bc1b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bc21:	50                   	push   eax
c000bc22:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000bc25:	83 c4 10             	add    esp,0x10
c000bc28:	83 c4 08             	add    esp,0x8
c000bc2b:	5b                   	pop    ebx
c000bc2c:	c3                   	ret    
c000bc2d:	90                   	nop

c000bc2e <File::seek(unsigned long long)>:
c000bc2e:	56                   	push   esi
c000bc2f:	b8 0b 00 00 00       	mov    eax,0xb
c000bc34:	53                   	push   ebx
c000bc35:	51                   	push   ecx
c000bc36:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc3a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc3e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc42:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc49:	83 fa 19             	cmp    edx,0x19
c000bc4c:	77 31                	ja     c000bc7f <File::seek(unsigned long long)+0x51>
c000bc4e:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc55:	85 d2                	test   edx,edx
c000bc57:	74 26                	je     c000bc7f <File::seek(unsigned long long)+0x51>
c000bc59:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc5f:	85 d2                	test   edx,edx
c000bc61:	74 1c                	je     c000bc7f <File::seek(unsigned long long)+0x51>
c000bc63:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bc67:	b8 05 00 00 00       	mov    eax,0x5
c000bc6c:	74 11                	je     c000bc7f <File::seek(unsigned long long)+0x51>
c000bc6e:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc70:	53                   	push   ebx
c000bc71:	51                   	push   ecx
c000bc72:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bc78:	52                   	push   edx
c000bc79:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bc7c:	83 c4 10             	add    esp,0x10
c000bc7f:	5a                   	pop    edx
c000bc80:	5b                   	pop    ebx
c000bc81:	5e                   	pop    esi
c000bc82:	c3                   	ret    
c000bc83:	90                   	nop

c000bc84 <File::truncate(unsigned long long)>:
c000bc84:	56                   	push   esi
c000bc85:	b8 0b 00 00 00       	mov    eax,0xb
c000bc8a:	53                   	push   ebx
c000bc8b:	51                   	push   ecx
c000bc8c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc90:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc94:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc98:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc9f:	83 fa 19             	cmp    edx,0x19
c000bca2:	77 31                	ja     c000bcd5 <File::truncate(unsigned long long)+0x51>
c000bca4:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bcab:	85 d2                	test   edx,edx
c000bcad:	74 26                	je     c000bcd5 <File::truncate(unsigned long long)+0x51>
c000bcaf:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bcb5:	85 d2                	test   edx,edx
c000bcb7:	74 1c                	je     c000bcd5 <File::truncate(unsigned long long)+0x51>
c000bcb9:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bcbd:	b8 05 00 00 00       	mov    eax,0x5
c000bcc2:	74 11                	je     c000bcd5 <File::truncate(unsigned long long)+0x51>
c000bcc4:	8b 02                	mov    eax,DWORD PTR [edx]
c000bcc6:	53                   	push   ebx
c000bcc7:	51                   	push   ecx
c000bcc8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bcce:	52                   	push   edx
c000bccf:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000bcd2:	83 c4 10             	add    esp,0x10
c000bcd5:	5a                   	pop    edx
c000bcd6:	5b                   	pop    ebx
c000bcd7:	5e                   	pop    esi
c000bcd8:	c3                   	ret    
c000bcd9:	90                   	nop

c000bcda <File::tell(unsigned long long*)>:
c000bcda:	83 ec 0c             	sub    esp,0xc
c000bcdd:	b8 0b 00 00 00       	mov    eax,0xb
c000bce2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bce6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bced:	83 fa 19             	cmp    edx,0x19
c000bcf0:	77 34                	ja     c000bd26 <File::tell(unsigned long long*)+0x4c>
c000bcf2:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bcf9:	85 d2                	test   edx,edx
c000bcfb:	74 29                	je     c000bd26 <File::tell(unsigned long long*)+0x4c>
c000bcfd:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd03:	85 d2                	test   edx,edx
c000bd05:	74 1f                	je     c000bd26 <File::tell(unsigned long long*)+0x4c>
c000bd07:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bd0b:	b8 05 00 00 00       	mov    eax,0x5
c000bd10:	74 14                	je     c000bd26 <File::tell(unsigned long long*)+0x4c>
c000bd12:	50                   	push   eax
c000bd13:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd15:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd19:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bd1f:	52                   	push   edx
c000bd20:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bd23:	83 c4 10             	add    esp,0x10
c000bd26:	83 c4 0c             	add    esp,0xc
c000bd29:	c3                   	ret    

c000bd2a <File::rewind()>:
c000bd2a:	83 ec 10             	sub    esp,0x10
c000bd2d:	6a 00                	push   0x0
c000bd2f:	6a 00                	push   0x0
c000bd31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd35:	e8 f4 fe ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c000bd3a:	83 c4 1c             	add    esp,0x1c
c000bd3d:	c3                   	ret    

c000bd3e <File::unlink()>:
c000bd3e:	83 ec 0c             	sub    esp,0xc
c000bd41:	b8 0b 00 00 00       	mov    eax,0xb
c000bd46:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd4a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd51:	83 f9 19             	cmp    ecx,0x19
c000bd54:	77 2f                	ja     c000bd85 <File::unlink()+0x47>
c000bd56:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd5d:	85 c9                	test   ecx,ecx
c000bd5f:	74 24                	je     c000bd85 <File::unlink()+0x47>
c000bd61:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bd67:	85 c9                	test   ecx,ecx
c000bd69:	74 1a                	je     c000bd85 <File::unlink()+0x47>
c000bd6b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bd6f:	b8 06 00 00 00       	mov    eax,0x6
c000bd74:	75 0f                	jne    c000bd85 <File::unlink()+0x47>
c000bd76:	50                   	push   eax
c000bd77:	83 c2 0d             	add    edx,0xd
c000bd7a:	50                   	push   eax
c000bd7b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bd7d:	52                   	push   edx
c000bd7e:	51                   	push   ecx
c000bd7f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bd82:	83 c4 10             	add    esp,0x10
c000bd85:	83 c4 0c             	add    esp,0xc
c000bd88:	c3                   	ret    
c000bd89:	90                   	nop

c000bd8a <File::rename(char const*)>:
c000bd8a:	83 ec 0c             	sub    esp,0xc
c000bd8d:	b8 0b 00 00 00       	mov    eax,0xb
c000bd92:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd96:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd9d:	83 f9 19             	cmp    ecx,0x19
c000bda0:	77 32                	ja     c000bdd4 <File::rename(char const*)+0x4a>
c000bda2:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bda9:	85 c9                	test   ecx,ecx
c000bdab:	74 27                	je     c000bdd4 <File::rename(char const*)+0x4a>
c000bdad:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bdb3:	85 c9                	test   ecx,ecx
c000bdb5:	74 1d                	je     c000bdd4 <File::rename(char const*)+0x4a>
c000bdb7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bdbb:	b8 06 00 00 00       	mov    eax,0x6
c000bdc0:	75 12                	jne    c000bdd4 <File::rename(char const*)+0x4a>
c000bdc2:	50                   	push   eax
c000bdc3:	83 c2 0d             	add    edx,0xd
c000bdc6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bdc8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bdcc:	52                   	push   edx
c000bdcd:	51                   	push   ecx
c000bdce:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bdd1:	83 c4 10             	add    esp,0x10
c000bdd4:	83 c4 0c             	add    esp,0xc
c000bdd7:	c3                   	ret    

c000bdd8 <File::chfatattr(unsigned char, unsigned char)>:
c000bdd8:	57                   	push   edi
c000bdd9:	b8 0b 00 00 00       	mov    eax,0xb
c000bdde:	56                   	push   esi
c000bddf:	53                   	push   ebx
c000bde0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bde4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bde8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bdec:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdf3:	83 f9 19             	cmp    ecx,0x19
c000bdf6:	77 37                	ja     c000be2f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bdf8:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bdff:	85 c9                	test   ecx,ecx
c000be01:	74 2c                	je     c000be2f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be03:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be09:	85 c9                	test   ecx,ecx
c000be0b:	74 22                	je     c000be2f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be0d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be11:	b8 06 00 00 00       	mov    eax,0x6
c000be16:	75 17                	jne    c000be2f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be18:	89 f0                	mov    eax,esi
c000be1a:	8b 39                	mov    edi,DWORD PTR [ecx]
c000be1c:	0f b6 db             	movzx  ebx,bl
c000be1f:	0f b6 f0             	movzx  esi,al
c000be22:	83 c2 0d             	add    edx,0xd
c000be25:	56                   	push   esi
c000be26:	53                   	push   ebx
c000be27:	52                   	push   edx
c000be28:	51                   	push   ecx
c000be29:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000be2c:	83 c4 10             	add    esp,0x10
c000be2f:	5b                   	pop    ebx
c000be30:	5e                   	pop    esi
c000be31:	5f                   	pop    edi
c000be32:	c3                   	ret    
c000be33:	90                   	nop

c000be34 <File::exists()>:
c000be34:	83 ec 0c             	sub    esp,0xc
c000be37:	31 c0                	xor    eax,eax
c000be39:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be3d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be44:	83 f9 19             	cmp    ecx,0x19
c000be47:	77 24                	ja     c000be6d <File::exists()+0x39>
c000be49:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be50:	85 c9                	test   ecx,ecx
c000be52:	74 19                	je     c000be6d <File::exists()+0x39>
c000be54:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be5a:	85 c9                	test   ecx,ecx
c000be5c:	74 0f                	je     c000be6d <File::exists()+0x39>
c000be5e:	50                   	push   eax
c000be5f:	83 c2 0d             	add    edx,0xd
c000be62:	50                   	push   eax
c000be63:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be65:	52                   	push   edx
c000be66:	51                   	push   ecx
c000be67:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000be6a:	83 c4 10             	add    esp,0x10
c000be6d:	83 c4 0c             	add    esp,0xc
c000be70:	c3                   	ret    
c000be71:	90                   	nop

c000be72 <File::stat(unsigned long long*, bool*)>:
c000be72:	56                   	push   esi
c000be73:	53                   	push   ebx
c000be74:	50                   	push   eax
c000be75:	b8 0b 00 00 00       	mov    eax,0xb
c000be7a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be7e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be82:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000be86:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be8d:	83 f9 19             	cmp    ecx,0x19
c000be90:	77 3d                	ja     c000becf <File::stat(unsigned long long*, bool*)+0x5d>
c000be92:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be99:	85 c9                	test   ecx,ecx
c000be9b:	74 32                	je     c000becf <File::stat(unsigned long long*, bool*)+0x5d>
c000be9d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bea3:	85 c9                	test   ecx,ecx
c000bea5:	74 28                	je     c000becf <File::stat(unsigned long long*, bool*)+0x5d>
c000bea7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000beab:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bead:	74 13                	je     c000bec2 <File::stat(unsigned long long*, bool*)+0x50>
c000beaf:	83 ec 04             	sub    esp,0x4
c000beb2:	56                   	push   esi
c000beb3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000beb9:	51                   	push   ecx
c000beba:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bebd:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bec0:	eb 0a                	jmp    c000becc <File::stat(unsigned long long*, bool*)+0x5a>
c000bec2:	53                   	push   ebx
c000bec3:	83 c2 0d             	add    edx,0xd
c000bec6:	56                   	push   esi
c000bec7:	52                   	push   edx
c000bec8:	51                   	push   ecx
c000bec9:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000becc:	83 c4 10             	add    esp,0x10
c000becf:	5a                   	pop    edx
c000bed0:	5b                   	pop    ebx
c000bed1:	5e                   	pop    esi
c000bed2:	c3                   	ret    

c000bed3 <Fs::setcwd(Process*, char*)>:
c000bed3:	55                   	push   ebp
c000bed4:	57                   	push   edi
c000bed5:	56                   	push   esi
c000bed6:	53                   	push   ebx
c000bed7:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bedd:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bee4:	6a 00                	push   0x0
c000bee6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000beec:	57                   	push   edi
c000beed:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bef4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bef8:	56                   	push   esi
c000bef9:	e8 48 f9 ff ff       	call   c000b846 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000befe:	89 34 24             	mov    DWORD PTR [esp],esi
c000bf01:	e8 7a 46 ff ff       	call   c0000580 <strlen>
c000bf06:	83 c4 10             	add    esp,0x10
c000bf09:	83 f8 02             	cmp    eax,0x2
c000bf0c:	77 15                	ja     c000bf23 <Fs::setcwd(Process*, char*)+0x50>
c000bf0e:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bf13:	83 eb 41             	sub    ebx,0x41
c000bf16:	8b 04 9d 80 b8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4780]
c000bf1d:	85 c0                	test   eax,eax
c000bf1f:	75 1c                	jne    c000bf3d <Fs::setcwd(Process*, char*)+0x6a>
c000bf21:	eb 2f                	jmp    c000bf52 <Fs::setcwd(Process*, char*)+0x7f>
c000bf23:	83 ec 0c             	sub    esp,0xc
c000bf26:	56                   	push   esi
c000bf27:	e8 54 46 ff ff       	call   c0000580 <strlen>
c000bf2c:	83 c4 10             	add    esp,0x10
c000bf2f:	83 f8 03             	cmp    eax,0x3
c000bf32:	75 57                	jne    c000bf8b <Fs::setcwd(Process*, char*)+0xb8>
c000bf34:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bf39:	75 50                	jne    c000bf8b <Fs::setcwd(Process*, char*)+0xb8>
c000bf3b:	eb d1                	jmp    c000bf0e <Fs::setcwd(Process*, char*)+0x3b>
c000bf3d:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bf44:	75 0c                	jne    c000bf52 <Fs::setcwd(Process*, char*)+0x7f>
c000bf46:	83 ec 0c             	sub    esp,0xc
c000bf49:	50                   	push   eax
c000bf4a:	e8 e1 1d 00 00       	call   c000dd30 <LogicalDisk::mount()>
c000bf4f:	83 c4 10             	add    esp,0x10
c000bf52:	83 fb 19             	cmp    ebx,0x19
c000bf55:	b8 03 00 00 00       	mov    eax,0x3
c000bf5a:	0f 87 c6 00 00 00    	ja     c000c026 <Fs::setcwd(Process*, char*)+0x153>
c000bf60:	8b 14 9d 80 b8 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4780]
c000bf67:	b8 05 00 00 00       	mov    eax,0x5
c000bf6c:	85 d2                	test   edx,edx
c000bf6e:	0f 84 b2 00 00 00    	je     c000c026 <Fs::setcwd(Process*, char*)+0x153>
c000bf74:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bf7b:	b8 06 00 00 00       	mov    eax,0x6
c000bf80:	0f 85 92 00 00 00    	jne    c000c018 <Fs::setcwd(Process*, char*)+0x145>
c000bf86:	e9 9b 00 00 00       	jmp    c000c026 <Fs::setcwd(Process*, char*)+0x153>
c000bf8b:	83 ec 0c             	sub    esp,0xc
c000bf8e:	68 14 01 00 00       	push   0x114
c000bf93:	e8 6b bb ff ff       	call   c0007b03 <malloc>
c000bf98:	83 c4 0c             	add    esp,0xc
c000bf9b:	55                   	push   ebp
c000bf9c:	56                   	push   esi
c000bf9d:	50                   	push   eax
c000bf9e:	89 c3                	mov    ebx,eax
c000bfa0:	e8 ad fb ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c000bfa5:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bfaa:	83 c4 0c             	add    esp,0xc
c000bfad:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bfb1:	50                   	push   eax
c000bfb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bfb6:	50                   	push   eax
c000bfb7:	53                   	push   ebx
c000bfb8:	e8 b5 fe ff ff       	call   c000be72 <File::stat(unsigned long long*, bool*)>
c000bfbd:	83 c4 10             	add    esp,0x10
c000bfc0:	83 f8 02             	cmp    eax,0x2
c000bfc3:	74 27                	je     c000bfec <Fs::setcwd(Process*, char*)+0x119>
c000bfc5:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bfca:	75 1c                	jne    c000bfe8 <Fs::setcwd(Process*, char*)+0x115>
c000bfcc:	85 db                	test   ebx,ebx
c000bfce:	b8 02 00 00 00       	mov    eax,0x2
c000bfd3:	74 51                	je     c000c026 <Fs::setcwd(Process*, char*)+0x153>
c000bfd5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bfd7:	83 ec 0c             	sub    esp,0xc
c000bfda:	53                   	push   ebx
c000bfdb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bfde:	83 c4 10             	add    esp,0x10
c000bfe1:	b8 02 00 00 00       	mov    eax,0x2
c000bfe6:	eb 3e                	jmp    c000c026 <Fs::setcwd(Process*, char*)+0x153>
c000bfe8:	85 c0                	test   eax,eax
c000bfea:	74 1c                	je     c000c008 <Fs::setcwd(Process*, char*)+0x135>
c000bfec:	85 db                	test   ebx,ebx
c000bfee:	b8 01 00 00 00       	mov    eax,0x1
c000bff3:	74 31                	je     c000c026 <Fs::setcwd(Process*, char*)+0x153>
c000bff5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bff7:	83 ec 0c             	sub    esp,0xc
c000bffa:	53                   	push   ebx
c000bffb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bffe:	83 c4 10             	add    esp,0x10
c000c001:	b8 01 00 00 00       	mov    eax,0x1
c000c006:	eb 1e                	jmp    c000c026 <Fs::setcwd(Process*, char*)+0x153>
c000c008:	85 db                	test   ebx,ebx
c000c00a:	74 0c                	je     c000c018 <Fs::setcwd(Process*, char*)+0x145>
c000c00c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c00e:	83 ec 0c             	sub    esp,0xc
c000c011:	53                   	push   ebx
c000c012:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c015:	83 c4 10             	add    esp,0x10
c000c018:	50                   	push   eax
c000c019:	50                   	push   eax
c000c01a:	56                   	push   esi
c000c01b:	57                   	push   edi
c000c01c:	e8 2f 46 ff ff       	call   c0000650 <strcpy>
c000c021:	83 c4 10             	add    esp,0x10
c000c024:	31 c0                	xor    eax,eax
c000c026:	81 c4 1c 02 00 00    	add    esp,0x21c
c000c02c:	5b                   	pop    ebx
c000c02d:	5e                   	pop    esi
c000c02e:	5f                   	pop    edi
c000c02f:	5d                   	pop    ebp
c000c030:	c3                   	ret    
c000c031:	90                   	nop

c000c032 <Directory::Directory(char const*, Process*)>:
c000c032:	83 ec 0c             	sub    esp,0xc
c000c035:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c039:	83 ec 08             	sub    esp,0x8
c000c03c:	6a 00                	push   0x0
c000c03e:	50                   	push   eax
c000c03f:	e8 92 d1 ff ff       	call   c00091d6 <UnixFile::UnixFile(int)>
c000c044:	83 c4 10             	add    esp,0x10
c000c047:	ba 44 1b 02 c0       	mov    edx,0xc0021b44
c000c04c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c050:	89 10                	mov    DWORD PTR [eax],edx
c000c052:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000c057:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c05b:	0f 95 c0             	setne  al
c000c05e:	0f b6 c0             	movzx  eax,al
c000c061:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c065:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000c06b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c06f:	83 c2 0d             	add    edx,0xd
c000c072:	50                   	push   eax
c000c073:	51                   	push   ecx
c000c074:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c078:	52                   	push   edx
c000c079:	e8 c8 f7 ff ff       	call   c000b846 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000c07e:	83 c4 10             	add    esp,0x10
c000c081:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c085:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000c088:	83 e8 41             	sub    eax,0x41
c000c08b:	88 c2                	mov    dl,al
c000c08d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c091:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000c097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c09b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000c09f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0a3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0a9:	0f b6 c0             	movzx  eax,al
c000c0ac:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0b3:	85 c0                	test   eax,eax
c000c0b5:	74 3e                	je     c000c0f5 <Directory::Directory(char const*, Process*)+0xc3>
c000c0b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0bb:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0c1:	0f b6 c0             	movzx  eax,al
c000c0c4:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0cb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c0d1:	85 c0                	test   eax,eax
c000c0d3:	75 20                	jne    c000c0f5 <Directory::Directory(char const*, Process*)+0xc3>
c000c0d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0d9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0df:	0f b6 c0             	movzx  eax,al
c000c0e2:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0e9:	83 ec 0c             	sub    esp,0xc
c000c0ec:	50                   	push   eax
c000c0ed:	e8 3e 1c 00 00       	call   c000dd30 <LogicalDisk::mount()>
c000c0f2:	83 c4 10             	add    esp,0x10
c000c0f5:	90                   	nop
c000c0f6:	83 c4 0c             	add    esp,0xc
c000c0f9:	c3                   	ret    

c000c0fa <Directory::open()>:
c000c0fa:	53                   	push   ebx
c000c0fb:	b8 0b 00 00 00       	mov    eax,0xb
c000c100:	83 ec 08             	sub    esp,0x8
c000c103:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c107:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000c10e:	83 fa 19             	cmp    edx,0x19
c000c111:	77 3d                	ja     c000c150 <Directory::open()+0x56>
c000c113:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000c11a:	85 d2                	test   edx,edx
c000c11c:	74 32                	je     c000c150 <Directory::open()+0x56>
c000c11e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000c124:	85 d2                	test   edx,edx
c000c126:	74 28                	je     c000c150 <Directory::open()+0x56>
c000c128:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000c12c:	b8 06 00 00 00       	mov    eax,0x6
c000c131:	75 1d                	jne    c000c150 <Directory::open()+0x56>
c000c133:	50                   	push   eax
c000c134:	8b 02                	mov    eax,DWORD PTR [edx]
c000c136:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000c13c:	51                   	push   ecx
c000c13d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000c140:	51                   	push   ecx
c000c141:	52                   	push   edx
c000c142:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000c145:	83 c4 10             	add    esp,0x10
c000c148:	85 c0                	test   eax,eax
c000c14a:	75 04                	jne    c000c150 <Directory::open()+0x56>
c000c14c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000c150:	83 c4 08             	add    esp,0x8
c000c153:	5b                   	pop    ebx
c000c154:	c3                   	ret    
c000c155:	90                   	nop

c000c156 <Directory::close()>:
c000c156:	53                   	push   ebx
c000c157:	b8 0b 00 00 00       	mov    eax,0xb
c000c15c:	83 ec 08             	sub    esp,0x8
c000c15f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c163:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c16a:	83 f9 19             	cmp    ecx,0x19
c000c16d:	77 41                	ja     c000c1b0 <Directory::close()+0x5a>
c000c16f:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000c176:	85 db                	test   ebx,ebx
c000c178:	74 36                	je     c000c1b0 <Directory::close()+0x5a>
c000c17a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000c181:	74 2d                	je     c000c1b0 <Directory::close()+0x5a>
c000c183:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c187:	b8 05 00 00 00       	mov    eax,0x5
c000c18c:	74 22                	je     c000c1b0 <Directory::close()+0x5a>
c000c18e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000c192:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000c199:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c19f:	53                   	push   ebx
c000c1a0:	53                   	push   ebx
c000c1a1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c1a3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000c1a9:	50                   	push   eax
c000c1aa:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000c1ad:	83 c4 10             	add    esp,0x10
c000c1b0:	83 c4 08             	add    esp,0x8
c000c1b3:	5b                   	pop    ebx
c000c1b4:	c3                   	ret    
c000c1b5:	90                   	nop

c000c1b6 <Directory::unlink()>:
c000c1b6:	83 ec 0c             	sub    esp,0xc
c000c1b9:	b8 0b 00 00 00       	mov    eax,0xb
c000c1be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1c2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1c9:	83 f9 19             	cmp    ecx,0x19
c000c1cc:	77 2f                	ja     c000c1fd <Directory::unlink()+0x47>
c000c1ce:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1d5:	85 c9                	test   ecx,ecx
c000c1d7:	74 24                	je     c000c1fd <Directory::unlink()+0x47>
c000c1d9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c1df:	85 c9                	test   ecx,ecx
c000c1e1:	74 1a                	je     c000c1fd <Directory::unlink()+0x47>
c000c1e3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c1e7:	b8 06 00 00 00       	mov    eax,0x6
c000c1ec:	75 0f                	jne    c000c1fd <Directory::unlink()+0x47>
c000c1ee:	50                   	push   eax
c000c1ef:	83 c2 0d             	add    edx,0xd
c000c1f2:	50                   	push   eax
c000c1f3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c1f5:	52                   	push   edx
c000c1f6:	51                   	push   ecx
c000c1f7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000c1fa:	83 c4 10             	add    esp,0x10
c000c1fd:	83 c4 0c             	add    esp,0xc
c000c200:	c3                   	ret    
c000c201:	90                   	nop

c000c202 <Directory::rename(char const*)>:
c000c202:	83 ec 0c             	sub    esp,0xc
c000c205:	b8 0b 00 00 00       	mov    eax,0xb
c000c20a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c20e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c215:	83 f9 19             	cmp    ecx,0x19
c000c218:	77 32                	ja     c000c24c <Directory::rename(char const*)+0x4a>
c000c21a:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c221:	85 c9                	test   ecx,ecx
c000c223:	74 27                	je     c000c24c <Directory::rename(char const*)+0x4a>
c000c225:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c22b:	85 c9                	test   ecx,ecx
c000c22d:	74 1d                	je     c000c24c <Directory::rename(char const*)+0x4a>
c000c22f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c233:	b8 06 00 00 00       	mov    eax,0x6
c000c238:	75 12                	jne    c000c24c <Directory::rename(char const*)+0x4a>
c000c23a:	50                   	push   eax
c000c23b:	83 c2 0d             	add    edx,0xd
c000c23e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c240:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c244:	52                   	push   edx
c000c245:	51                   	push   ecx
c000c246:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c249:	83 c4 10             	add    esp,0x10
c000c24c:	83 c4 0c             	add    esp,0xc
c000c24f:	c3                   	ret    

c000c250 <Directory::exists()>:
c000c250:	83 ec 0c             	sub    esp,0xc
c000c253:	31 c0                	xor    eax,eax
c000c255:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c259:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c260:	83 f9 19             	cmp    ecx,0x19
c000c263:	77 24                	ja     c000c289 <Directory::exists()+0x39>
c000c265:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c26c:	85 c9                	test   ecx,ecx
c000c26e:	74 19                	je     c000c289 <Directory::exists()+0x39>
c000c270:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c276:	85 c9                	test   ecx,ecx
c000c278:	74 0f                	je     c000c289 <Directory::exists()+0x39>
c000c27a:	50                   	push   eax
c000c27b:	83 c2 0d             	add    edx,0xd
c000c27e:	50                   	push   eax
c000c27f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c281:	52                   	push   edx
c000c282:	51                   	push   ecx
c000c283:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c286:	83 c4 10             	add    esp,0x10
c000c289:	83 c4 0c             	add    esp,0xc
c000c28c:	c3                   	ret    
c000c28d:	90                   	nop

c000c28e <Directory::read(dirent*)>:
c000c28e:	83 ec 1c             	sub    esp,0x1c
c000c291:	b8 0b 00 00 00       	mov    eax,0xb
c000c296:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c29a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2a1:	83 f9 19             	cmp    ecx,0x19
c000c2a4:	77 30                	ja     c000c2d6 <Directory::read(dirent*)+0x48>
c000c2a6:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2ad:	85 c9                	test   ecx,ecx
c000c2af:	74 25                	je     c000c2d6 <Directory::read(dirent*)+0x48>
c000c2b1:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c2b8:	74 1c                	je     c000c2d6 <Directory::read(dirent*)+0x48>
c000c2ba:	83 ec 0c             	sub    esp,0xc
c000c2bd:	8b 02                	mov    eax,DWORD PTR [edx]
c000c2bf:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c2c3:	51                   	push   ecx
c000c2c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2c8:	6a 00                	push   0x0
c000c2ca:	68 10 01 00 00       	push   0x110
c000c2cf:	52                   	push   edx
c000c2d0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c2d3:	83 c4 20             	add    esp,0x20
c000c2d6:	83 c4 1c             	add    esp,0x1c
c000c2d9:	c3                   	ret    

c000c2da <Directory::create()>:
c000c2da:	83 ec 0c             	sub    esp,0xc
c000c2dd:	b8 0b 00 00 00       	mov    eax,0xb
c000c2e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c2e6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2ed:	83 f9 19             	cmp    ecx,0x19
c000c2f0:	77 2f                	ja     c000c321 <Directory::create()+0x47>
c000c2f2:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2f9:	85 c9                	test   ecx,ecx
c000c2fb:	74 24                	je     c000c321 <Directory::create()+0x47>
c000c2fd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c303:	85 c9                	test   ecx,ecx
c000c305:	74 1a                	je     c000c321 <Directory::create()+0x47>
c000c307:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c30b:	b8 06 00 00 00       	mov    eax,0x6
c000c310:	75 0f                	jne    c000c321 <Directory::create()+0x47>
c000c312:	50                   	push   eax
c000c313:	83 c2 0d             	add    edx,0xd
c000c316:	50                   	push   eax
c000c317:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c319:	52                   	push   edx
c000c31a:	51                   	push   ecx
c000c31b:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c31e:	83 c4 10             	add    esp,0x10
c000c321:	83 c4 0c             	add    esp,0xc
c000c324:	c3                   	ret    
c000c325:	90                   	nop

c000c326 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c326:	b8 0a 00 00 00       	mov    eax,0xa
c000c32b:	c3                   	ret    

c000c32c <Bus::Bus(char const*)>:
c000c32c:	83 ec 0c             	sub    esp,0xc
c000c32f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c333:	83 ec 08             	sub    esp,0x8
c000c336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c33a:	50                   	push   eax
c000c33b:	e8 62 08 00 00       	call   c000cba2 <Device::Device(char const*)>
c000c340:	83 c4 10             	add    esp,0x10
c000c343:	ba 60 1b 02 c0       	mov    edx,0xc0021b60
c000c348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c34c:	89 10                	mov    DWORD PTR [eax],edx
c000c34e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c352:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c35c:	90                   	nop
c000c35d:	83 c4 0c             	add    esp,0xc
c000c360:	c3                   	ret    
c000c361:	90                   	nop
c000c362:	66 90                	xchg   ax,ax

c000c364 <Bus::~Bus()>:
c000c364:	83 ec 0c             	sub    esp,0xc
c000c367:	ba 60 1b 02 c0       	mov    edx,0xc0021b60
c000c36c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c370:	89 10                	mov    DWORD PTR [eax],edx
c000c372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c376:	83 ec 0c             	sub    esp,0xc
c000c379:	50                   	push   eax
c000c37a:	e8 53 05 00 00       	call   c000c8d2 <Device::~Device()>
c000c37f:	83 c4 10             	add    esp,0x10
c000c382:	90                   	nop
c000c383:	83 c4 0c             	add    esp,0xc
c000c386:	c3                   	ret    
c000c387:	90                   	nop

c000c388 <Bus::~Bus()>:
c000c388:	83 ec 0c             	sub    esp,0xc
c000c38b:	83 ec 0c             	sub    esp,0xc
c000c38e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c392:	e8 cd ff ff ff       	call   c000c364 <Bus::~Bus()>
c000c397:	83 c4 10             	add    esp,0x10
c000c39a:	83 ec 08             	sub    esp,0x8
c000c39d:	68 58 01 00 00       	push   0x158
c000c3a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3a6:	e8 91 e4 ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000c3ab:	83 c4 10             	add    esp,0x10
c000c3ae:	83 c4 0c             	add    esp,0xc
c000c3b1:	c3                   	ret    

c000c3b2 <beepThread(void*)>:
c000c3b2:	83 ec 0c             	sub    esp,0xc
c000c3b5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000c3ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3be:	48                   	dec    eax
c000c3bf:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000c3c4:	75 01                	jne    c000c3c7 <beepThread(void*)+0x15>
c000c3c6:	fb                   	sti    
c000c3c7:	6b c2 0a             	imul   eax,edx,0xa
c000c3ca:	83 ec 0c             	sub    esp,0xc
c000c3cd:	50                   	push   eax
c000c3ce:	e8 cd a0 00 00       	call   c00164a0 <milliTenthSleep(unsigned int)>
c000c3d3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c3da:	e8 1a c0 00 00       	call   c00183f9 <HalMakeBeep(int)>
c000c3df:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c3e7:	83 c4 1c             	add    esp,0x1c
c000c3ea:	e9 95 9f 00 00       	jmp    c0016384 <blockTask(TaskState)>

c000c3ef <Krnl::beep(int, int, bool)>:
c000c3ef:	56                   	push   esi
c000c3f0:	53                   	push   ebx
c000c3f1:	83 ec 10             	sub    esp,0x10
c000c3f4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c3f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c3fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c400:	e8 f4 bf 00 00       	call   c00183f9 <HalMakeBeep(int)>
c000c405:	89 f0                	mov    eax,esi
c000c407:	83 c4 10             	add    esp,0x10
c000c40a:	84 c0                	test   al,al
c000c40c:	74 1e                	je     c000c42c <Krnl::beep(int, int, bool)+0x3d>
c000c40e:	6b db 0a             	imul   ebx,ebx,0xa
c000c411:	83 ec 0c             	sub    esp,0xc
c000c414:	53                   	push   ebx
c000c415:	e8 86 a0 00 00       	call   c00164a0 <milliTenthSleep(unsigned int)>
c000c41a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c422:	83 c4 14             	add    esp,0x14
c000c425:	5b                   	pop    ebx
c000c426:	5e                   	pop    esi
c000c427:	e9 cd bf 00 00       	jmp    c00183f9 <HalMakeBeep(int)>
c000c42c:	68 e6 00 00 00       	push   0xe6
c000c431:	53                   	push   ebx
c000c432:	68 b2 c3 00 c0       	push   0xc000c3b2
c000c437:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c43d:	e8 f6 9a 00 00       	call   c0015f38 <Process::createThread(void (*)(void*), void*, int)>
c000c442:	83 c4 14             	add    esp,0x14
c000c445:	5b                   	pop    ebx
c000c446:	5e                   	pop    esi
c000c447:	c3                   	ret    

c000c448 <User::loadClockSettings(int)>:
c000c448:	53                   	push   ebx
c000c449:	83 ec 14             	sub    esp,0x14
c000c44c:	68 14 01 00 00       	push   0x114
c000c451:	e8 ad b6 ff ff       	call   c0007b03 <malloc>
c000c456:	83 c4 0c             	add    esp,0xc
c000c459:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c45f:	68 84 1b 02 c0       	push   0xc0021b84
c000c464:	50                   	push   eax
c000c465:	89 c3                	mov    ebx,eax
c000c467:	e8 e6 f6 ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c000c46c:	58                   	pop    eax
c000c46d:	5a                   	pop    edx
c000c46e:	6a 01                	push   0x1
c000c470:	53                   	push   ebx
c000c471:	e8 fa f6 ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c000c476:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c479:	e8 50 f7 ff ff       	call   c000bbce <File::close()>
c000c47e:	83 c4 10             	add    esp,0x10
c000c481:	85 db                	test   ebx,ebx
c000c483:	74 0f                	je     c000c494 <User::loadClockSettings(int)+0x4c>
c000c485:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c487:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c48b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c48e:	83 c4 08             	add    esp,0x8
c000c491:	5b                   	pop    ebx
c000c492:	ff e0                	jmp    eax
c000c494:	83 c4 08             	add    esp,0x8
c000c497:	5b                   	pop    ebx
c000c498:	c3                   	ret    
c000c499:	90                   	nop

c000c49a <Clock::Clock(char const*)>:
c000c49a:	83 ec 0c             	sub    esp,0xc
c000c49d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4a1:	83 ec 08             	sub    esp,0x8
c000c4a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4a8:	50                   	push   eax
c000c4a9:	e8 f4 06 00 00       	call   c000cba2 <Device::Device(char const*)>
c000c4ae:	83 c4 10             	add    esp,0x10
c000c4b1:	ba ac 1b 02 c0       	mov    edx,0xc0021bac
c000c4b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4ba:	89 10                	mov    DWORD PTR [eax],edx
c000c4bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4c0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c4ca:	90                   	nop
c000c4cb:	83 c4 0c             	add    esp,0xc
c000c4ce:	c3                   	ret    
c000c4cf:	90                   	nop

c000c4d0 <Clock::~Clock()>:
c000c4d0:	83 ec 0c             	sub    esp,0xc
c000c4d3:	ba ac 1b 02 c0       	mov    edx,0xc0021bac
c000c4d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4dc:	89 10                	mov    DWORD PTR [eax],edx
c000c4de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4e2:	83 ec 0c             	sub    esp,0xc
c000c4e5:	50                   	push   eax
c000c4e6:	e8 e7 03 00 00       	call   c000c8d2 <Device::~Device()>
c000c4eb:	83 c4 10             	add    esp,0x10
c000c4ee:	90                   	nop
c000c4ef:	83 c4 0c             	add    esp,0xc
c000c4f2:	c3                   	ret    
c000c4f3:	90                   	nop

c000c4f4 <Clock::~Clock()>:
c000c4f4:	83 ec 0c             	sub    esp,0xc
c000c4f7:	83 ec 0c             	sub    esp,0xc
c000c4fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4fe:	e8 cd ff ff ff       	call   c000c4d0 <Clock::~Clock()>
c000c503:	83 c4 10             	add    esp,0x10
c000c506:	83 ec 08             	sub    esp,0x8
c000c509:	68 58 01 00 00       	push   0x158
c000c50e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c512:	e8 25 e3 ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000c517:	83 c4 10             	add    esp,0x10
c000c51a:	83 c4 0c             	add    esp,0xc
c000c51d:	c3                   	ret    

c000c51e <Clock::timeInSecondsLocal()>:
c000c51e:	53                   	push   ebx
c000c51f:	83 ec 14             	sub    esp,0x14
c000c522:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c526:	8b 10                	mov    edx,DWORD PTR [eax]
c000c528:	50                   	push   eax
c000c529:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c52c:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c533:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c539:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c53f:	89 cb                	mov    ebx,ecx
c000c541:	c1 fb 1f             	sar    ebx,0x1f
c000c544:	01 c8                	add    eax,ecx
c000c546:	11 da                	adc    edx,ebx
c000c548:	83 c4 10             	add    esp,0x10
c000c54b:	31 c9                	xor    ecx,ecx
c000c54d:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c554:	74 05                	je     c000c55b <Clock::timeInSecondsLocal()+0x3d>
c000c556:	b9 08 07 00 00       	mov    ecx,0x708
c000c55b:	31 db                	xor    ebx,ebx
c000c55d:	01 c8                	add    eax,ecx
c000c55f:	11 da                	adc    edx,ebx
c000c561:	83 c4 08             	add    esp,0x8
c000c564:	5b                   	pop    ebx
c000c565:	c3                   	ret    

c000c566 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c566:	57                   	push   edi
c000c567:	56                   	push   esi
c000c568:	53                   	push   ebx
c000c569:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c56d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c571:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c575:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c577:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c57a:	0f b6 05 08 94 02 c0 	movzx  eax,BYTE PTR ds:0xc0029408
c000c581:	03 05 0c 94 02 c0    	add    eax,DWORD PTR ds:0xc002940c
c000c587:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c58d:	99                   	cdq    
c000c58e:	29 c6                	sub    esi,eax
c000c590:	19 d7                	sbb    edi,edx
c000c592:	89 f0                	mov    eax,esi
c000c594:	31 f6                	xor    esi,esi
c000c596:	89 fa                	mov    edx,edi
c000c598:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c59f:	74 05                	je     c000c5a6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c5a1:	be 08 07 00 00       	mov    esi,0x708
c000c5a6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c5aa:	31 ff                	xor    edi,edi
c000c5ac:	29 f0                	sub    eax,esi
c000c5ae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c5b2:	19 fa                	sbb    edx,edi
c000c5b4:	89 d8                	mov    eax,ebx
c000c5b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c5ba:	5b                   	pop    ebx
c000c5bb:	5e                   	pop    esi
c000c5bc:	5f                   	pop    edi
c000c5bd:	ff e0                	jmp    eax

c000c5bf <datetimeToSeconds(datetime_t)>:
c000c5bf:	55                   	push   ebp
c000c5c0:	57                   	push   edi
c000c5c1:	56                   	push   esi
c000c5c2:	53                   	push   ebx
c000c5c3:	83 ec 0c             	sub    esp,0xc
c000c5c6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c5ca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c5ce:	89 f7                	mov    edi,esi
c000c5d0:	89 f0                	mov    eax,esi
c000c5d2:	0f b6 cf             	movzx  ecx,bh
c000c5d5:	0f b6 c4             	movzx  eax,ah
c000c5d8:	c1 ef 10             	shr    edi,0x10
c000c5db:	89 da                	mov    edx,ebx
c000c5dd:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000c5e0:	89 f9                	mov    ecx,edi
c000c5e2:	0f b6 f9             	movzx  edi,cl
c000c5e5:	89 f1                	mov    ecx,esi
c000c5e7:	6b c0 3c             	imul   eax,eax,0x3c
c000c5ea:	0f b6 f1             	movzx  esi,cl
c000c5ed:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000c5f3:	0f b6 db             	movzx  ebx,bl
c000c5f6:	c1 ea 10             	shr    edx,0x10
c000c5f9:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000c5ff:	01 f8                	add    eax,edi
c000c601:	01 f0                	add    eax,esi
c000c603:	89 04 24             	mov    DWORD PTR [esp],eax
c000c606:	c1 f8 1f             	sar    eax,0x1f
c000c609:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c60d:	89 e8                	mov    eax,ebp
c000c60f:	0f b6 c0             	movzx  eax,al
c000c612:	8b 0c 85 e0 1b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde420]
c000c619:	83 f8 01             	cmp    eax,0x1
c000c61c:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000c620:	0f b7 da             	movzx  ebx,dx
c000c623:	76 27                	jbe    c000c64c <datetimeToSeconds(datetime_t)+0x8d>
c000c625:	80 e2 03             	and    dl,0x3
c000c628:	75 22                	jne    c000c64c <datetimeToSeconds(datetime_t)+0x8d>
c000c62a:	31 d2                	xor    edx,edx
c000c62c:	be 64 00 00 00       	mov    esi,0x64
c000c631:	89 d8                	mov    eax,ebx
c000c633:	f7 f6                	div    esi
c000c635:	85 d2                	test   edx,edx
c000c637:	75 12                	jne    c000c64b <datetimeToSeconds(datetime_t)+0x8c>
c000c639:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c63f:	be 90 01 00 00       	mov    esi,0x190
c000c644:	99                   	cdq    
c000c645:	f7 fe                	idiv   esi
c000c647:	85 d2                	test   edx,edx
c000c649:	75 01                	jne    c000c64c <datetimeToSeconds(datetime_t)+0x8d>
c000c64b:	41                   	inc    ecx
c000c64c:	83 fb 46             	cmp    ebx,0x46
c000c64f:	76 48                	jbe    c000c699 <datetimeToSeconds(datetime_t)+0xda>
c000c651:	be 46 00 00 00       	mov    esi,0x46
c000c656:	bf 64 00 00 00       	mov    edi,0x64
c000c65b:	bd 90 01 00 00       	mov    ebp,0x190
c000c660:	f7 c6 03 00 00 00    	test   esi,0x3
c000c666:	b8 6d 01 00 00       	mov    eax,0x16d
c000c66b:	75 23                	jne    c000c690 <datetimeToSeconds(datetime_t)+0xd1>
c000c66d:	89 f0                	mov    eax,esi
c000c66f:	99                   	cdq    
c000c670:	f7 ff                	idiv   edi
c000c672:	b8 6e 01 00 00       	mov    eax,0x16e
c000c677:	85 d2                	test   edx,edx
c000c679:	75 15                	jne    c000c690 <datetimeToSeconds(datetime_t)+0xd1>
c000c67b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c681:	99                   	cdq    
c000c682:	f7 fd                	idiv   ebp
c000c684:	83 fa 01             	cmp    edx,0x1
c000c687:	19 c0                	sbb    eax,eax
c000c689:	f7 d0                	not    eax
c000c68b:	05 6e 01 00 00       	add    eax,0x16e
c000c690:	46                   	inc    esi
c000c691:	01 c1                	add    ecx,eax
c000c693:	39 de                	cmp    esi,ebx
c000c695:	7c c9                	jl     c000c660 <datetimeToSeconds(datetime_t)+0xa1>
c000c697:	eb 34                	jmp    c000c6cd <datetimeToSeconds(datetime_t)+0x10e>
c000c699:	74 32                	je     c000c6cd <datetimeToSeconds(datetime_t)+0x10e>
c000c69b:	b8 45 00 00 00       	mov    eax,0x45
c000c6a0:	89 c2                	mov    edx,eax
c000c6a2:	83 e2 03             	and    edx,0x3
c000c6a5:	39 d8                	cmp    eax,ebx
c000c6a7:	7e 0f                	jle    c000c6b8 <datetimeToSeconds(datetime_t)+0xf9>
c000c6a9:	83 fa 01             	cmp    edx,0x1
c000c6ac:	19 d2                	sbb    edx,edx
c000c6ae:	48                   	dec    eax
c000c6af:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c6b6:	eb e8                	jmp    c000c6a0 <datetimeToSeconds(datetime_t)+0xe1>
c000c6b8:	85 d2                	test   edx,edx
c000c6ba:	b8 6d 01 00 00       	mov    eax,0x16d
c000c6bf:	75 0a                	jne    c000c6cb <datetimeToSeconds(datetime_t)+0x10c>
c000c6c1:	83 fb 01             	cmp    ebx,0x1
c000c6c4:	19 c0                	sbb    eax,eax
c000c6c6:	05 6e 01 00 00       	add    eax,0x16e
c000c6cb:	29 c1                	sub    ecx,eax
c000c6cd:	b8 80 51 01 00       	mov    eax,0x15180
c000c6d2:	f7 e9                	imul   ecx
c000c6d4:	03 04 24             	add    eax,DWORD PTR [esp]
c000c6d7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c6db:	83 c4 0c             	add    esp,0xc
c000c6de:	5b                   	pop    ebx
c000c6df:	5e                   	pop    esi
c000c6e0:	5f                   	pop    edi
c000c6e1:	5d                   	pop    ebp
c000c6e2:	c3                   	ret    
c000c6e3:	90                   	nop

c000c6e4 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c6e4:	57                   	push   edi
c000c6e5:	56                   	push   esi
c000c6e6:	53                   	push   ebx
c000c6e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c6eb:	8b 06                	mov    eax,DWORD PTR [esi]
c000c6ed:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c6f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6f8:	e8 c2 fe ff ff       	call   c000c5bf <datetimeToSeconds(datetime_t)>
c000c6fd:	59                   	pop    ecx
c000c6fe:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c705:	5b                   	pop    ebx
c000c706:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c70c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c712:	89 cb                	mov    ebx,ecx
c000c714:	c1 fb 1f             	sar    ebx,0x1f
c000c717:	29 c8                	sub    eax,ecx
c000c719:	19 da                	sbb    edx,ebx
c000c71b:	31 c9                	xor    ecx,ecx
c000c71d:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c724:	74 05                	je     c000c72b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c726:	b9 08 07 00 00       	mov    ecx,0x708
c000c72b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c72f:	31 db                	xor    ebx,ebx
c000c731:	29 c8                	sub    eax,ecx
c000c733:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c737:	19 da                	sbb    edx,ebx
c000c739:	89 f8                	mov    eax,edi
c000c73b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c73f:	5b                   	pop    ebx
c000c740:	5e                   	pop    esi
c000c741:	5f                   	pop    edi
c000c742:	ff e0                	jmp    eax

c000c744 <secondsToDatetime(unsigned long long)>:
c000c744:	55                   	push   ebp
c000c745:	57                   	push   edi
c000c746:	56                   	push   esi
c000c747:	53                   	push   ebx
c000c748:	83 ec 1c             	sub    esp,0x1c
c000c74b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c74f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c753:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c757:	6a 00                	push   0x0
c000c759:	68 80 51 01 00       	push   0x15180
c000c75e:	55                   	push   ebp
c000c75f:	57                   	push   edi
c000c760:	e8 db 30 01 00       	call   c001f840 <__udivdi3>
c000c765:	83 c4 10             	add    esp,0x10
c000c768:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c76c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c772:	6a 00                	push   0x0
c000c774:	68 80 51 01 00       	push   0x15180
c000c779:	55                   	push   ebp
c000c77a:	57                   	push   edi
c000c77b:	bf 10 0e 00 00       	mov    edi,0xe10
c000c780:	e8 bb 31 01 00       	call   c001f940 <__umoddi3>
c000c785:	83 c4 10             	add    esp,0x10
c000c788:	99                   	cdq    
c000c789:	f7 ff                	idiv   edi
c000c78b:	bf 3c 00 00 00       	mov    edi,0x3c
c000c790:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c793:	89 d0                	mov    eax,edx
c000c795:	99                   	cdq    
c000c796:	f7 ff                	idiv   edi
c000c798:	85 db                	test   ebx,ebx
c000c79a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c79d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c7a0:	79 11                	jns    c000c7b3 <secondsToDatetime(unsigned long long)+0x6f>
c000c7a2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c7a6:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c7ac:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c7b1:	eb 07                	jmp    c000c7ba <secondsToDatetime(unsigned long long)+0x76>
c000c7b3:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c7b8:	89 d8                	mov    eax,ebx
c000c7ba:	99                   	cdq    
c000c7bb:	bf b4 05 00 00       	mov    edi,0x5b4
c000c7c0:	f7 f9                	idiv   ecx
c000c7c2:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c7c7:	31 d2                	xor    edx,edx
c000c7c9:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c7ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7d2:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c7da:	01 c3                	add    ebx,eax
c000c7dc:	89 d8                	mov    eax,ebx
c000c7de:	f7 f1                	div    ecx
c000c7e0:	31 d2                	xor    edx,edx
c000c7e2:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c7e5:	89 d8                	mov    eax,ebx
c000c7e7:	f7 f7                	div    edi
c000c7e9:	31 d2                	xor    edx,edx
c000c7eb:	29 c1                	sub    ecx,eax
c000c7ed:	89 d8                	mov    eax,ebx
c000c7ef:	f7 f5                	div    ebp
c000c7f1:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c7f6:	31 d2                	xor    edx,edx
c000c7f8:	29 c1                	sub    ecx,eax
c000c7fa:	89 c8                	mov    eax,ecx
c000c7fc:	f7 f5                	div    ebp
c000c7fe:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c803:	31 d2                	xor    edx,edx
c000c805:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c809:	89 c8                	mov    eax,ecx
c000c80b:	f7 f5                	div    ebp
c000c80d:	31 d2                	xor    edx,edx
c000c80f:	01 c3                	add    ebx,eax
c000c811:	89 c8                	mov    eax,ecx
c000c813:	f7 f7                	div    edi
c000c815:	bf 99 00 00 00       	mov    edi,0x99
c000c81a:	31 d2                	xor    edx,edx
c000c81c:	29 c3                	sub    ebx,eax
c000c81e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c826:	29 c3                	sub    ebx,eax
c000c828:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c82b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c82e:	83 c1 02             	add    ecx,0x2
c000c831:	89 c8                	mov    eax,ecx
c000c833:	bb 05 00 00 00       	mov    ebx,0x5
c000c838:	f7 f7                	div    edi
c000c83a:	31 d2                	xor    edx,edx
c000c83c:	89 c7                	mov    edi,eax
c000c83e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c844:	83 c0 02             	add    eax,0x2
c000c847:	f7 f3                	div    ebx
c000c849:	89 eb                	mov    ebx,ebp
c000c84b:	29 c3                	sub    ebx,eax
c000c84d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c853:	88 1e                	mov    BYTE PTR [esi],bl
c000c855:	19 c0                	sbb    eax,eax
c000c857:	31 d2                	xor    edx,edx
c000c859:	83 e0 0c             	and    eax,0xc
c000c85c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c860:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c868:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c86c:	83 f9 01             	cmp    ecx,0x1
c000c86f:	0f 96 c2             	setbe  dl
c000c872:	41                   	inc    ecx
c000c873:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c876:	01 d0                	add    eax,edx
c000c878:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c87c:	83 c4 1c             	add    esp,0x1c
c000c87f:	89 f0                	mov    eax,esi
c000c881:	5b                   	pop    ebx
c000c882:	5e                   	pop    esi
c000c883:	5f                   	pop    edi
c000c884:	5d                   	pop    ebp
c000c885:	c2 04 00             	ret    0x4

c000c888 <Clock::timeInDatetimeLocal()>:
c000c888:	53                   	push   ebx
c000c889:	83 ec 14             	sub    esp,0x14
c000c88c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c890:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c894:	e8 85 fc ff ff       	call   c000c51e <Clock::timeInSecondsLocal()>
c000c899:	83 c4 0c             	add    esp,0xc
c000c89c:	52                   	push   edx
c000c89d:	50                   	push   eax
c000c89e:	53                   	push   ebx
c000c89f:	e8 a0 fe ff ff       	call   c000c744 <secondsToDatetime(unsigned long long)>
c000c8a4:	89 d8                	mov    eax,ebx
c000c8a6:	83 c4 14             	add    esp,0x14
c000c8a9:	5b                   	pop    ebx
c000c8aa:	c2 04 00             	ret    0x4
c000c8ad:	90                   	nop

c000c8ae <Device::hibernate()>:
c000c8ae:	c3                   	ret    
c000c8af:	90                   	nop

c000c8b0 <Device::wake()>:
c000c8b0:	c3                   	ret    
c000c8b1:	90                   	nop

c000c8b2 <Device::detect()>:
c000c8b2:	c3                   	ret    
c000c8b3:	90                   	nop

c000c8b4 <Device::disableLegacy()>:
c000c8b4:	c3                   	ret    
c000c8b5:	90                   	nop

c000c8b6 <Device::powerSaving(PowerSavingLevel)>:
c000c8b6:	c3                   	ret    
c000c8b7:	90                   	nop

c000c8b8 <DriverlessDevice::close(int, int, void*)>:
c000c8b8:	31 c0                	xor    eax,eax
c000c8ba:	c3                   	ret    
c000c8bb:	90                   	nop

c000c8bc <DriverlessDevice::detect()>:
c000c8bc:	c3                   	ret    
c000c8bd:	90                   	nop

c000c8be <DriverlessDevice::open(int, int, void*)>:
c000c8be:	83 ec 18             	sub    esp,0x18
c000c8c1:	68 10 1c 02 c0       	push   0xc0021c10
c000c8c6:	e8 8c 4d 00 00       	call   c0011657 <KePanic(char const*)>
c000c8cb:	83 c8 ff             	or     eax,0xffffffff
c000c8ce:	83 c4 1c             	add    esp,0x1c
c000c8d1:	c3                   	ret    

c000c8d2 <Device::~Device()>:
c000c8d2:	ba d4 1c 02 c0       	mov    edx,0xc0021cd4
c000c8d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8db:	89 10                	mov    DWORD PTR [eax],edx
c000c8dd:	90                   	nop
c000c8de:	c3                   	ret    
c000c8df:	90                   	nop

c000c8e0 <Device::~Device()>:
c000c8e0:	83 ec 0c             	sub    esp,0xc
c000c8e3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c8e7:	e8 e6 ff ff ff       	call   c000c8d2 <Device::~Device()>
c000c8ec:	83 c4 04             	add    esp,0x4
c000c8ef:	83 ec 08             	sub    esp,0x8
c000c8f2:	68 58 01 00 00       	push   0x158
c000c8f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8fb:	e8 3c df ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000c900:	83 c4 10             	add    esp,0x10
c000c903:	83 c4 0c             	add    esp,0xc
c000c906:	c3                   	ret    
c000c907:	90                   	nop

c000c908 <Device::findAndLoadDriver()>:
c000c908:	c7 44 24 04 2e 1c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021c2e
c000c910:	e9 25 e0 ff ff       	jmp    c000a93a <Dbg::kprintf(char const*, ...)>
c000c915:	90                   	nop

c000c916 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c916:	57                   	push   edi
c000c917:	b9 09 00 00 00       	mov    ecx,0x9
c000c91c:	56                   	push   esi
c000c91d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c921:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c925:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c92f:	81 c7 18 01 00 00    	add    edi,0x118
c000c935:	fc                   	cld    
c000c936:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c938:	5e                   	pop    esi
c000c939:	5f                   	pop    edi
c000c93a:	c3                   	ret    
c000c93b:	90                   	nop

c000c93c <Device::preOpenACPI(void*, char*, char*)>:
c000c93c:	57                   	push   edi
c000c93d:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c942:	56                   	push   esi
c000c943:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c947:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c94b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c94f:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c959:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c95f:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c965:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c967:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c96d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c971:	b9 0e 00 00 00       	mov    ecx,0xe
c000c976:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c978:	5e                   	pop    esi
c000c979:	5f                   	pop    edi
c000c97a:	c3                   	ret    
c000c97b:	90                   	nop

c000c97c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c97c:	53                   	push   ebx
c000c97d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c981:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c985:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c989:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c98d:	0f b6 c0             	movzx  eax,al
c000c990:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c994:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c998:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c99c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c9a0:	5b                   	pop    ebx
c000c9a1:	e9 e2 05 00 00       	jmp    c000cf88 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c9a6 <Device::getParent()>:
c000c9a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c9aa:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c9b0:	c3                   	ret    
c000c9b1:	90                   	nop

c000c9b2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c9b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9ba:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c9bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c9c3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c9c7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c9cb:	e9 2f 07 00 00       	jmp    c000d0ff <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c9d0 <Device::addChild(Device*)>:
c000c9d0:	53                   	push   ebx
c000c9d1:	83 ec 08             	sub    esp,0x8
c000c9d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c9d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c9dc:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c9e2:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c9e8:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c9ea:	85 d2                	test   edx,edx
c000c9ec:	74 04                	je     c000c9f2 <Device::addChild(Device*)+0x22>
c000c9ee:	89 d3                	mov    ebx,edx
c000c9f0:	eb f6                	jmp    c000c9e8 <Device::addChild(Device*)+0x18>
c000c9f2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c9f5:	83 ec 0c             	sub    esp,0xc
c000c9f8:	6a 08                	push   0x8
c000c9fa:	e8 04 b1 ff ff       	call   c0007b03 <malloc>
c000c9ff:	89 03                	mov    DWORD PTR [ebx],eax
c000ca01:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca07:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca0e:	83 c4 18             	add    esp,0x18
c000ca11:	5b                   	pop    ebx
c000ca12:	c3                   	ret    
c000ca13:	90                   	nop

c000ca14 <Device::removeAllChildren()>:
c000ca14:	56                   	push   esi
c000ca15:	53                   	push   ebx
c000ca16:	52                   	push   edx
c000ca17:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ca1b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ca21:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca24:	74 17                	je     c000ca3d <Device::removeAllChildren()+0x29>
c000ca26:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ca29:	85 c0                	test   eax,eax
c000ca2b:	74 0c                	je     c000ca39 <Device::removeAllChildren()+0x25>
c000ca2d:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca2f:	83 ec 0c             	sub    esp,0xc
c000ca32:	50                   	push   eax
c000ca33:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ca36:	83 c4 10             	add    esp,0x10
c000ca39:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca3b:	eb e4                	jmp    c000ca21 <Device::removeAllChildren()+0xd>
c000ca3d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca43:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca49:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca4f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca56:	58                   	pop    eax
c000ca57:	5b                   	pop    ebx
c000ca58:	5e                   	pop    esi
c000ca59:	c3                   	ret    

c000ca5a <Device::hibernateAll()>:
c000ca5a:	53                   	push   ebx
c000ca5b:	83 ec 14             	sub    esp,0x14
c000ca5e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca62:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca64:	53                   	push   ebx
c000ca65:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ca68:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca6e:	83 c4 10             	add    esp,0x10
c000ca71:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca74:	74 0f                	je     c000ca85 <Device::hibernateAll()+0x2b>
c000ca76:	83 ec 0c             	sub    esp,0xc
c000ca79:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca7c:	e8 d9 ff ff ff       	call   c000ca5a <Device::hibernateAll()>
c000ca81:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca83:	eb e9                	jmp    c000ca6e <Device::hibernateAll()+0x14>
c000ca85:	83 c4 08             	add    esp,0x8
c000ca88:	5b                   	pop    ebx
c000ca89:	c3                   	ret    

c000ca8a <Device::wakeAll()>:
c000ca8a:	53                   	push   ebx
c000ca8b:	83 ec 14             	sub    esp,0x14
c000ca8e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca92:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca94:	53                   	push   ebx
c000ca95:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000ca98:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca9e:	83 c4 10             	add    esp,0x10
c000caa1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000caa4:	74 0f                	je     c000cab5 <Device::wakeAll()+0x2b>
c000caa6:	83 ec 0c             	sub    esp,0xc
c000caa9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000caac:	e8 d9 ff ff ff       	call   c000ca8a <Device::wakeAll()>
c000cab1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cab3:	eb e9                	jmp    c000ca9e <Device::wakeAll()+0x14>
c000cab5:	83 c4 08             	add    esp,0x8
c000cab8:	5b                   	pop    ebx
c000cab9:	c3                   	ret    

c000caba <Device::detectAll()>:
c000caba:	53                   	push   ebx
c000cabb:	83 ec 14             	sub    esp,0x14
c000cabe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cac2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cac4:	53                   	push   ebx
c000cac5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000cac8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cace:	83 c4 10             	add    esp,0x10
c000cad1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cad4:	74 0f                	je     c000cae5 <Device::detectAll()+0x2b>
c000cad6:	83 ec 0c             	sub    esp,0xc
c000cad9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cadc:	e8 d9 ff ff ff       	call   c000caba <Device::detectAll()>
c000cae1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cae3:	eb e9                	jmp    c000cace <Device::detectAll()+0x14>
c000cae5:	83 c4 08             	add    esp,0x8
c000cae8:	5b                   	pop    ebx
c000cae9:	c3                   	ret    

c000caea <Device::disableLegacyAll()>:
c000caea:	c3                   	ret    
c000caeb:	90                   	nop

c000caec <Device::loadDriversForAll()>:
c000caec:	c3                   	ret    
c000caed:	90                   	nop

c000caee <Device::closeAll()>:
c000caee:	53                   	push   ebx
c000caef:	83 ec 14             	sub    esp,0x14
c000caf2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000caf6:	68 68 1c 02 c0       	push   0xc0021c68
c000cafb:	e8 3a de ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000cb00:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb02:	6a 00                	push   0x0
c000cb04:	6a 00                	push   0x0
c000cb06:	6a 00                	push   0x0
c000cb08:	53                   	push   ebx
c000cb09:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000cb0c:	83 c4 14             	add    esp,0x14
c000cb0f:	68 7c 1c 02 c0       	push   0xc0021c7c
c000cb14:	e8 21 de ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000cb19:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb1f:	83 c4 10             	add    esp,0x10
c000cb22:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb25:	74 26                	je     c000cb4d <Device::closeAll()+0x5f>
c000cb27:	83 ec 0c             	sub    esp,0xc
c000cb2a:	68 90 1c 02 c0       	push   0xc0021c90
c000cb2f:	e8 06 de ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000cb34:	59                   	pop    ecx
c000cb35:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb38:	e8 b1 ff ff ff       	call   c000caee <Device::closeAll()>
c000cb3d:	c7 04 24 a4 1c 02 c0 	mov    DWORD PTR [esp],0xc0021ca4
c000cb44:	e8 f1 dd ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000cb49:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb4b:	eb d2                	jmp    c000cb1f <Device::closeAll()+0x31>
c000cb4d:	c7 44 24 10 b8 1c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021cb8
c000cb55:	83 c4 08             	add    esp,0x8
c000cb58:	5b                   	pop    ebx
c000cb59:	e9 dc dd ff ff       	jmp    c000a93a <Dbg::kprintf(char const*, ...)>

c000cb5e <Device::powerSavingAll(PowerSavingLevel)>:
c000cb5e:	56                   	push   esi
c000cb5f:	53                   	push   ebx
c000cb60:	83 ec 0c             	sub    esp,0xc
c000cb63:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cb67:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cb6b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb6d:	56                   	push   esi
c000cb6e:	53                   	push   ebx
c000cb6f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000cb72:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb78:	83 c4 10             	add    esp,0x10
c000cb7b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb7e:	74 0f                	je     c000cb8f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000cb80:	52                   	push   edx
c000cb81:	52                   	push   edx
c000cb82:	56                   	push   esi
c000cb83:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb86:	e8 d3 ff ff ff       	call   c000cb5e <Device::powerSavingAll(PowerSavingLevel)>
c000cb8b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb8d:	eb e9                	jmp    c000cb78 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000cb8f:	58                   	pop    eax
c000cb90:	5b                   	pop    ebx
c000cb91:	5e                   	pop    esi
c000cb92:	c3                   	ret    
c000cb93:	90                   	nop

c000cb94 <Device::setName(char const*)>:
c000cb94:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000cb9c:	e9 af 3a ff ff       	jmp    c0000650 <strcpy>
c000cba1:	90                   	nop

c000cba2 <Device::Device(char const*)>:
c000cba2:	83 ec 1c             	sub    esp,0x1c
c000cba5:	ba d4 1c 02 c0       	mov    edx,0xc0021cd4
c000cbaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbae:	89 10                	mov    DWORD PTR [eax],edx
c000cbb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbb4:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000cbbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbc2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cbcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbd0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cbda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbde:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cbe8:	83 ec 08             	sub    esp,0x8
c000cbeb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbf3:	e8 9c ff ff ff       	call   c000cb94 <Device::setName(char const*)>
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000cc03:	83 ec 0c             	sub    esp,0xc
c000cc06:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cc0a:	e8 f4 ae ff ff       	call   c0007b03 <malloc>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cc18:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc1f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000cc23:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000cc29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc2d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cc33:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cc39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc3d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cc43:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc4e:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000cc55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc59:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000cc60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc64:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cc6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc72:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cc7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc80:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cc8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc8e:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000cc98:	90                   	nop
c000cc99:	83 c4 1c             	add    esp,0x1c
c000cc9c:	c3                   	ret    
c000cc9d:	90                   	nop

c000cc9e <Device::getName()>:
c000cc9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cca2:	05 d0 00 00 00       	add    eax,0xd0
c000cca7:	c3                   	ret    

c000cca8 <DriverlessDevice::DriverlessDevice(char const*)>:
c000cca8:	83 ec 0c             	sub    esp,0xc
c000ccab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccaf:	83 ec 08             	sub    esp,0x8
c000ccb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccb6:	50                   	push   eax
c000ccb7:	e8 e6 fe ff ff       	call   c000cba2 <Device::Device(char const*)>
c000ccbc:	83 c4 10             	add    esp,0x10
c000ccbf:	ba 00 1d 02 c0       	mov    edx,0xc0021d00
c000ccc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccc8:	89 10                	mov    DWORD PTR [eax],edx
c000ccca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccce:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000ccd8:	90                   	nop
c000ccd9:	83 c4 0c             	add    esp,0xc
c000ccdc:	c3                   	ret    
c000ccdd:	90                   	nop

c000ccde <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000ccde:	57                   	push   edi
c000ccdf:	56                   	push   esi
c000cce0:	53                   	push   ebx
c000cce1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cce5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000cce9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cced:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000ccf3:	75 0c                	jne    c000cd01 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000ccf5:	52                   	push   edx
c000ccf6:	52                   	push   edx
c000ccf7:	53                   	push   ebx
c000ccf8:	56                   	push   esi
c000ccf9:	e8 f4 2f 01 00       	call   c001fcf2 <LinkedList<Device>::addElement(Device*)>
c000ccfe:	83 c4 10             	add    esp,0x10
c000cd01:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cd07:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cd0a:	74 12                	je     c000cd1e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000cd0c:	50                   	push   eax
c000cd0d:	57                   	push   edi
c000cd0e:	56                   	push   esi
c000cd0f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cd12:	e8 c7 ff ff ff       	call   c000ccde <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cd17:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cd19:	83 c4 10             	add    esp,0x10
c000cd1c:	eb e9                	jmp    c000cd07 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000cd1e:	5b                   	pop    ebx
c000cd1f:	5e                   	pop    esi
c000cd20:	5f                   	pop    edi
c000cd21:	c3                   	ret    

c000cd22 <getDevicesOfType(DeviceType)>:
c000cd22:	53                   	push   ebx
c000cd23:	83 ec 14             	sub    esp,0x14
c000cd26:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cd2a:	53                   	push   ebx
c000cd2b:	e8 9e 30 01 00       	call   c001fdce <LinkedList<Device>::LinkedList()>
c000cd30:	83 c4 0c             	add    esp,0xc
c000cd33:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd37:	53                   	push   ebx
c000cd38:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000cd3e:	e8 9b ff ff ff       	call   c000ccde <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cd43:	83 c4 18             	add    esp,0x18
c000cd46:	89 d8                	mov    eax,ebx
c000cd48:	5b                   	pop    ebx
c000cd49:	c2 04 00             	ret    0x4

c000cd4c <HardDiskController::HardDiskController(char const*)>:
c000cd4c:	83 ec 0c             	sub    esp,0xc
c000cd4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd53:	83 ec 08             	sub    esp,0x8
c000cd56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd5a:	50                   	push   eax
c000cd5b:	e8 42 fe ff ff       	call   c000cba2 <Device::Device(char const*)>
c000cd60:	83 c4 10             	add    esp,0x10
c000cd63:	ba 2c 1d 02 c0       	mov    edx,0xc0021d2c
c000cd68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd6c:	89 10                	mov    DWORD PTR [eax],edx
c000cd6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd72:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cd7c:	90                   	nop
c000cd7d:	83 c4 0c             	add    esp,0xc
c000cd80:	c3                   	ret    
c000cd81:	90                   	nop
c000cd82:	66 90                	xchg   ax,ax

c000cd84 <HardDiskController::~HardDiskController()>:
c000cd84:	83 ec 0c             	sub    esp,0xc
c000cd87:	ba 2c 1d 02 c0       	mov    edx,0xc0021d2c
c000cd8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd90:	89 10                	mov    DWORD PTR [eax],edx
c000cd92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd96:	83 ec 0c             	sub    esp,0xc
c000cd99:	50                   	push   eax
c000cd9a:	e8 33 fb ff ff       	call   c000c8d2 <Device::~Device()>
c000cd9f:	83 c4 10             	add    esp,0x10
c000cda2:	90                   	nop
c000cda3:	83 c4 0c             	add    esp,0xc
c000cda6:	c3                   	ret    
c000cda7:	90                   	nop

c000cda8 <HardDiskController::~HardDiskController()>:
c000cda8:	83 ec 0c             	sub    esp,0xc
c000cdab:	83 ec 0c             	sub    esp,0xc
c000cdae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdb2:	e8 cd ff ff ff       	call   c000cd84 <HardDiskController::~HardDiskController()>
c000cdb7:	83 c4 10             	add    esp,0x10
c000cdba:	83 ec 08             	sub    esp,0x8
c000cdbd:	68 58 01 00 00       	push   0x158
c000cdc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdc6:	e8 71 da ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000cdcb:	83 c4 10             	add    esp,0x10
c000cdce:	83 c4 0c             	add    esp,0xc
c000cdd1:	c3                   	ret    

c000cdd2 <PhysicalDisk::eject()>:
c000cdd2:	83 c8 ff             	or     eax,0xffffffff
c000cdd5:	c3                   	ret    

c000cdd6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cdd6:	83 ec 0c             	sub    esp,0xc
c000cdd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cddd:	83 ec 08             	sub    esp,0x8
c000cde0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cde4:	50                   	push   eax
c000cde5:	e8 b8 fd ff ff       	call   c000cba2 <Device::Device(char const*)>
c000cdea:	83 c4 10             	add    esp,0x10
c000cded:	ba 58 1d 02 c0       	mov    edx,0xc0021d58
c000cdf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdf6:	89 10                	mov    DWORD PTR [eax],edx
c000cdf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdfc:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ce03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce07:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000ce0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce12:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000ce1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce20:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ce24:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ce2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce2e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ce38:	90                   	nop
c000ce39:	83 c4 0c             	add    esp,0xc
c000ce3c:	c3                   	ret    
c000ce3d:	90                   	nop

c000ce3e <PhysicalDisk::startCache()>:
c000ce3e:	56                   	push   esi
c000ce3f:	53                   	push   ebx
c000ce40:	83 ec 10             	sub    esp,0x10
c000ce43:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ce47:	6a 44                	push   0x44
c000ce49:	e8 b5 ac ff ff       	call   c0007b03 <malloc>
c000ce4e:	89 c6                	mov    esi,eax
c000ce50:	58                   	pop    eax
c000ce51:	5a                   	pop    edx
c000ce52:	53                   	push   ebx
c000ce53:	56                   	push   esi
c000ce54:	e8 83 17 00 00       	call   c000e5dc <VCache::VCache(PhysicalDisk*)>
c000ce59:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ce5f:	83 c4 14             	add    esp,0x14
c000ce62:	5b                   	pop    ebx
c000ce63:	5e                   	pop    esi
c000ce64:	c3                   	ret    
c000ce65:	90                   	nop

c000ce66 <PhysicalDisk::~PhysicalDisk()>:
c000ce66:	83 ec 0c             	sub    esp,0xc
c000ce69:	ba 58 1d 02 c0       	mov    edx,0xc0021d58
c000ce6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce72:	89 10                	mov    DWORD PTR [eax],edx
c000ce74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce78:	83 ec 0c             	sub    esp,0xc
c000ce7b:	50                   	push   eax
c000ce7c:	e8 51 fa ff ff       	call   c000c8d2 <Device::~Device()>
c000ce81:	83 c4 10             	add    esp,0x10
c000ce84:	90                   	nop
c000ce85:	83 c4 0c             	add    esp,0xc
c000ce88:	c3                   	ret    
c000ce89:	90                   	nop

c000ce8a <PhysicalDisk::~PhysicalDisk()>:
c000ce8a:	83 ec 0c             	sub    esp,0xc
c000ce8d:	83 ec 0c             	sub    esp,0xc
c000ce90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce94:	e8 cd ff ff ff       	call   c000ce66 <PhysicalDisk::~PhysicalDisk()>
c000ce99:	83 c4 10             	add    esp,0x10
c000ce9c:	83 ec 08             	sub    esp,0x8
c000ce9f:	68 6c 01 00 00       	push   0x16c
c000cea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea8:	e8 8f d9 ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000cead:	83 c4 10             	add    esp,0x10
c000ceb0:	83 c4 0c             	add    esp,0xc
c000ceb3:	c3                   	ret    

c000ceb4 <int_handler>:
c000ceb4:	55                   	push   ebp
c000ceb5:	57                   	push   edi
c000ceb6:	56                   	push   esi
c000ceb7:	53                   	push   ebx
c000ceb8:	83 ec 0c             	sub    esp,0xc
c000cebb:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000cec2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000cec6:	74 0b                	je     c000ced3 <int_handler+0x1f>
c000cec8:	fa                   	cli    
c000cec9:	f4                   	hlt    
c000ceca:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ced1:	75 f5                	jne    c000cec8 <int_handler+0x14>
c000ced3:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000ced6:	8d 46 e0             	lea    eax,[esi-0x20]
c000ced9:	83 f8 17             	cmp    eax,0x17
c000cedc:	76 40                	jbe    c000cf1e <int_handler+0x6a>
c000cede:	c1 e6 04             	shl    esi,0x4
c000cee1:	31 db                	xor    ebx,ebx
c000cee3:	8d ae 20 a4 02 c0    	lea    ebp,[esi-0x3ffd5be0]
c000cee9:	81 c6 20 94 02 c0    	add    esi,0xc0029420
c000ceef:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cef3:	85 c0                	test   eax,eax
c000cef5:	74 13                	je     c000cf0a <int_handler+0x56>
c000cef7:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cefb:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cefe:	74 2c                	je     c000cf2c <int_handler+0x78>
c000cf00:	83 ec 08             	sub    esp,0x8
c000cf03:	52                   	push   edx
c000cf04:	57                   	push   edi
c000cf05:	ff d0                	call   eax
c000cf07:	83 c4 10             	add    esp,0x10
c000cf0a:	83 c3 01             	add    ebx,0x1
c000cf0d:	83 fb 04             	cmp    ebx,0x4
c000cf10:	75 dd                	jne    c000ceef <int_handler+0x3b>
c000cf12:	83 c4 0c             	add    esp,0xc
c000cf15:	31 c0                	xor    eax,eax
c000cf17:	5b                   	pop    ebx
c000cf18:	31 d2                	xor    edx,edx
c000cf1a:	5e                   	pop    esi
c000cf1b:	5f                   	pop    edi
c000cf1c:	5d                   	pop    ebp
c000cf1d:	c3                   	ret    
c000cf1e:	83 ec 0c             	sub    esp,0xc
c000cf21:	50                   	push   eax
c000cf22:	e8 0f b5 00 00       	call   c0018436 <HalEndOfInterrupt(int)>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	eb b2                	jmp    c000cede <int_handler+0x2a>
c000cf2c:	83 ec 08             	sub    esp,0x8
c000cf2f:	52                   	push   edx
c000cf30:	57                   	push   edi
c000cf31:	ff d0                	call   eax
c000cf33:	83 c4 10             	add    esp,0x10
c000cf36:	83 c4 0c             	add    esp,0xc
c000cf39:	5b                   	pop    ebx
c000cf3a:	5e                   	pop    esi
c000cf3b:	5f                   	pop    edi
c000cf3c:	5d                   	pop    ebp
c000cf3d:	c3                   	ret    

c000cf3e <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cf3e:	56                   	push   esi
c000cf3f:	31 c0                	xor    eax,eax
c000cf41:	53                   	push   ebx
c000cf42:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cf46:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf4a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf4e:	89 ca                	mov    edx,ecx
c000cf50:	c1 e2 04             	shl    edx,0x4
c000cf53:	83 bc 82 20 a4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5be0],0x0
c000cf5b:	74 17                	je     c000cf74 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cf5d:	83 c0 01             	add    eax,0x1
c000cf60:	83 f8 04             	cmp    eax,0x4
c000cf63:	75 ee                	jne    c000cf53 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cf65:	c7 44 24 0c 88 1d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021d88
c000cf6d:	5b                   	pop    ebx
c000cf6e:	5e                   	pop    esi
c000cf6f:	e9 e3 46 00 00       	jmp    c0011657 <KePanic(char const*)>
c000cf74:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cf77:	89 1c 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],ebx
c000cf7e:	5b                   	pop    ebx
c000cf7f:	89 34 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],esi
c000cf86:	5e                   	pop    esi
c000cf87:	c3                   	ret    

c000cf88 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cf88:	55                   	push   ebp
c000cf89:	57                   	push   edi
c000cf8a:	56                   	push   esi
c000cf8b:	53                   	push   ebx
c000cf8c:	83 ec 0c             	sub    esp,0xc
c000cf8f:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000cf95:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cf99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cf9d:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cfa4:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cfa7:	74 57                	je     c000d000 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cfa9:	84 c0                	test   al,al
c000cfab:	89 c7                	mov    edi,eax
c000cfad:	74 1d                	je     c000cfcc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cfaf:	83 fe 0f             	cmp    esi,0xf
c000cfb2:	0f 8f d9 00 00 00    	jg     c000d091 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000cfb8:	0f b6 b6 48 39 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc6b8]
c000cfbf:	0f b7 bc 36 c0 bb 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd4440]
c000cfc7:	d1 ef                	shr    edi,1
c000cfc9:	83 e7 01             	and    edi,0x1
c000cfcc:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cfd1:	83 ec 08             	sub    esp,0x8
c000cfd4:	31 db                	xor    ebx,ebx
c000cfd6:	50                   	push   eax
c000cfd7:	68 95 1d 02 c0       	push   0xc0021d95
c000cfdc:	e8 59 d9 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000cfe1:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cfe6:	83 c4 10             	add    esp,0x10
c000cfe9:	85 c0                	test   eax,eax
c000cfeb:	7f 59                	jg     c000d046 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000cfed:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cff0:	83 ec 0c             	sub    esp,0xc
c000cff3:	68 ac 1d 02 c0       	push   0xc0021dac
c000cff8:	e8 5a 46 00 00       	call   c0011657 <KePanic(char const*)>
c000cffd:	83 c4 10             	add    esp,0x10
c000d000:	89 e8                	mov    eax,ebp
c000d002:	31 d2                	xor    edx,edx
c000d004:	c1 e0 04             	shl    eax,0x4
c000d007:	8b 8c 90 20 a4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5be0]
c000d00e:	85 c9                	test   ecx,ecx
c000d010:	0f 84 92 00 00 00    	je     c000d0a8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000d016:	83 c2 01             	add    edx,0x1
c000d019:	83 fa 04             	cmp    edx,0x4
c000d01c:	75 e9                	jne    c000d007 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000d01e:	83 ec 0c             	sub    esp,0xc
c000d021:	68 00 1e 02 c0       	push   0xc0021e00
c000d026:	e8 2c 46 00 00       	call   c0011657 <KePanic(char const*)>
c000d02b:	83 c4 10             	add    esp,0x10
c000d02e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d033:	83 c4 0c             	add    esp,0xc
c000d036:	5b                   	pop    ebx
c000d037:	5e                   	pop    esi
c000d038:	5f                   	pop    edi
c000d039:	5d                   	pop    ebp
c000d03a:	c3                   	ret    
c000d03b:	83 c3 01             	add    ebx,0x1
c000d03e:	39 1d c0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c0,ebx
c000d044:	7e a7                	jle    c000cfed <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000d046:	8b 2c 9d e0 d0 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd2f20]
c000d04d:	83 ec 08             	sub    esp,0x8
c000d050:	56                   	push   esi
c000d051:	55                   	push   ebp
c000d052:	e8 c9 1b 01 00       	call   c001ec20 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000d057:	83 c4 10             	add    esp,0x10
c000d05a:	84 c0                	test   al,al
c000d05c:	74 dd                	je     c000d03b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000d05e:	89 f8                	mov    eax,edi
c000d060:	83 ec 04             	sub    esp,0x4
c000d063:	8b 1c 9d e0 d0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f20]
c000d06a:	8d 6e 20             	lea    ebp,[esi+0x20]
c000d06d:	0f b6 f8             	movzx  edi,al
c000d070:	57                   	push   edi
c000d071:	89 e8                	mov    eax,ebp
c000d073:	6a 00                	push   0x0
c000d075:	0f b6 c0             	movzx  eax,al
c000d078:	50                   	push   eax
c000d079:	89 f0                	mov    eax,esi
c000d07b:	6a 00                	push   0x0
c000d07d:	0f b6 c0             	movzx  eax,al
c000d080:	6a 00                	push   0x0
c000d082:	50                   	push   eax
c000d083:	53                   	push   ebx
c000d084:	e8 03 1d 01 00       	call   c001ed8c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000d089:	83 c4 20             	add    esp,0x20
c000d08c:	e9 6f ff ff ff       	jmp    c000d000 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000d091:	83 ec 0c             	sub    esp,0xc
c000d094:	31 ff                	xor    edi,edi
c000d096:	68 c8 1d 02 c0       	push   0xc0021dc8
c000d09b:	e8 b7 45 00 00       	call   c0011657 <KePanic(char const*)>
c000d0a0:	83 c4 10             	add    esp,0x10
c000d0a3:	e9 24 ff ff ff       	jmp    c000cfcc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000d0a8:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000d0ab:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d0af:	89 14 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],edx
c000d0b6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d0ba:	89 14 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],edx
c000d0c1:	83 c4 0c             	add    esp,0xc
c000d0c4:	89 f0                	mov    eax,esi
c000d0c6:	5b                   	pop    ebx
c000d0c7:	5e                   	pop    esi
c000d0c8:	5f                   	pop    edi
c000d0c9:	5d                   	pop    ebp
c000d0ca:	c3                   	ret    

c000d0cb <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000d0cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d0cf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d0d3:	c1 e0 04             	shl    eax,0x4
c000d0d6:	8d 50 10             	lea    edx,[eax+0x10]
c000d0d9:	39 88 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ecx
c000d0df:	74 08                	je     c000d0e9 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000d0e1:	83 c0 04             	add    eax,0x4
c000d0e4:	39 d0                	cmp    eax,edx
c000d0e6:	75 f1                	jne    c000d0d9 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000d0e8:	c3                   	ret    
c000d0e9:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d0f3:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d0fd:	eb e2                	jmp    c000d0e1 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000d0ff <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000d0ff:	56                   	push   esi
c000d100:	53                   	push   ebx
c000d101:	83 ec 04             	sub    esp,0x4
c000d104:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d109:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d10d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d111:	74 0e                	je     c000d121 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000d113:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000d118:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000d11f:	75 34                	jne    c000d155 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000d121:	8d 43 20             	lea    eax,[ebx+0x20]
c000d124:	c1 e0 04             	shl    eax,0x4
c000d127:	8d 50 10             	lea    edx,[eax+0x10]
c000d12a:	39 b0 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],esi
c000d130:	74 0d                	je     c000d13f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000d132:	83 c0 04             	add    eax,0x4
c000d135:	39 d0                	cmp    eax,edx
c000d137:	75 f1                	jne    c000d12a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000d139:	83 c4 04             	add    esp,0x4
c000d13c:	5b                   	pop    ebx
c000d13d:	5e                   	pop    esi
c000d13e:	c3                   	ret    
c000d13f:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d149:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d153:	eb dd                	jmp    c000d132 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000d155:	83 fb 0f             	cmp    ebx,0xf
c000d158:	7f 09                	jg     c000d163 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000d15a:	0f b6 9b 48 39 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc6b8]
c000d161:	eb be                	jmp    c000d121 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000d163:	83 ec 0c             	sub    esp,0xc
c000d166:	68 b9 1d 02 c0       	push   0xc0021db9
c000d16b:	e8 e7 44 00 00       	call   c0011657 <KePanic(char const*)>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	eb ac                	jmp    c000d121 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000d175 <setupINTS()>:
c000d175:	31 c0                	xor    eax,eax
c000d177:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d181:	83 c0 10             	add    eax,0x10
c000d184:	c7 80 10 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bf0],0x0
c000d18e:	c7 80 14 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bec],0x0
c000d198:	c7 80 14 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bec],0x0
c000d1a2:	c7 80 18 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be8],0x0
c000d1ac:	c7 80 18 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be8],0x0
c000d1b6:	c7 80 1c a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be4],0x0
c000d1c0:	c7 80 1c 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be4],0x0
c000d1ca:	3d 00 10 00 00       	cmp    eax,0x1000
c000d1cf:	75 a6                	jne    c000d177 <setupINTS()+0x2>
c000d1d1:	c3                   	ret    

c000d1d2 <convertLegacyIRQNumber(int)>:
c000d1d2:	83 ec 0c             	sub    esp,0xc
c000d1d5:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000d1db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1df:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000d1e6:	74 0c                	je     c000d1f4 <convertLegacyIRQNumber(int)+0x22>
c000d1e8:	83 f8 0f             	cmp    eax,0xf
c000d1eb:	7f 0b                	jg     c000d1f8 <convertLegacyIRQNumber(int)+0x26>
c000d1ed:	0f b6 80 48 39 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc6b8]
c000d1f4:	83 c4 0c             	add    esp,0xc
c000d1f7:	c3                   	ret    
c000d1f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1fc:	83 ec 0c             	sub    esp,0xc
c000d1ff:	68 c8 1d 02 c0       	push   0xc0021dc8
c000d204:	e8 4e 44 00 00       	call   c0011657 <KePanic(char const*)>
c000d209:	83 c4 10             	add    esp,0x10
c000d20c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d210:	83 c4 0c             	add    esp,0xc
c000d213:	c3                   	ret    

c000d214 <startGUI(void*)>:
c000d214:	55                   	push   ebp
c000d215:	89 e5                	mov    ebp,esp
c000d217:	53                   	push   ebx
c000d218:	83 ec 04             	sub    esp,0x4
c000d21b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d220:	83 e8 01             	sub    eax,0x1
c000d223:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d228:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d22d:	85 c0                	test   eax,eax
c000d22f:	75 01                	jne    c000d232 <startGUI(void*)+0x1e>
c000d231:	fb                   	sti    
c000d232:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d238:	83 ec 08             	sub    esp,0x8
c000d23b:	6a 01                	push   0x1
c000d23d:	68 25 1e 02 c0       	push   0xc0021e25
c000d242:	e8 d4 84 00 00       	call   c001571b <Thr::loadDLL(char const*, bool)>
c000d247:	83 c4 10             	add    esp,0x10
c000d24a:	83 ec 08             	sub    esp,0x8
c000d24d:	53                   	push   ebx
c000d24e:	50                   	push   eax
c000d24f:	e8 07 87 00 00       	call   c001595b <Thr::executeDLL(unsigned long, void*)>
c000d254:	83 c4 10             	add    esp,0x10
c000d257:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d25d:	83 ec 08             	sub    esp,0x8
c000d260:	6a 01                	push   0x1
c000d262:	68 3f 1e 02 c0       	push   0xc0021e3f
c000d267:	e8 af 84 00 00       	call   c001571b <Thr::loadDLL(char const*, bool)>
c000d26c:	83 c4 10             	add    esp,0x10
c000d26f:	83 ec 08             	sub    esp,0x8
c000d272:	53                   	push   ebx
c000d273:	50                   	push   eax
c000d274:	e8 e2 86 00 00       	call   c001595b <Thr::executeDLL(unsigned long, void*)>
c000d279:	83 c4 10             	add    esp,0x10
c000d27c:	90                   	nop
c000d27d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d280:	c9                   	leave  
c000d281:	c3                   	ret    

c000d282 <startGUIVESA(void*)>:
c000d282:	55                   	push   ebp
c000d283:	89 e5                	mov    ebp,esp
c000d285:	53                   	push   ebx
c000d286:	83 ec 04             	sub    esp,0x4
c000d289:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d28e:	83 e8 01             	sub    eax,0x1
c000d291:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d296:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d29b:	85 c0                	test   eax,eax
c000d29d:	75 01                	jne    c000d2a0 <startGUIVESA(void*)+0x1e>
c000d29f:	fb                   	sti    
c000d2a0:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d2a6:	83 ec 08             	sub    esp,0x8
c000d2a9:	6a 01                	push   0x1
c000d2ab:	68 5d 1e 02 c0       	push   0xc0021e5d
c000d2b0:	e8 66 84 00 00       	call   c001571b <Thr::loadDLL(char const*, bool)>
c000d2b5:	83 c4 10             	add    esp,0x10
c000d2b8:	83 ec 08             	sub    esp,0x8
c000d2bb:	53                   	push   ebx
c000d2bc:	50                   	push   eax
c000d2bd:	e8 99 86 00 00       	call   c001595b <Thr::executeDLL(unsigned long, void*)>
c000d2c2:	83 c4 10             	add    esp,0x10
c000d2c5:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d2cb:	83 ec 08             	sub    esp,0x8
c000d2ce:	6a 01                	push   0x1
c000d2d0:	68 3f 1e 02 c0       	push   0xc0021e3f
c000d2d5:	e8 41 84 00 00       	call   c001571b <Thr::loadDLL(char const*, bool)>
c000d2da:	83 c4 10             	add    esp,0x10
c000d2dd:	83 ec 08             	sub    esp,0x8
c000d2e0:	53                   	push   ebx
c000d2e1:	50                   	push   eax
c000d2e2:	e8 74 86 00 00       	call   c001595b <Thr::executeDLL(unsigned long, void*)>
c000d2e7:	83 c4 10             	add    esp,0x10
c000d2ea:	90                   	nop
c000d2eb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d2ee:	c9                   	leave  
c000d2ef:	c3                   	ret    

c000d2f0 <sendKeyToTerminal(unsigned char)>:
c000d2f0:	55                   	push   ebp
c000d2f1:	89 e5                	mov    ebp,esp
c000d2f3:	83 ec 28             	sub    esp,0x28
c000d2f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2f9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d2fc:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000d301:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d305:	83 ec 08             	sub    esp,0x8
c000d308:	52                   	push   edx
c000d309:	50                   	push   eax
c000d30a:	e8 dd ba ff ff       	call   c0008dec <VgaText::receiveKey(unsigned char)>
c000d30f:	83 c4 10             	add    esp,0x10
c000d312:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d316:	83 f8 0a             	cmp    eax,0xa
c000d319:	74 16                	je     c000d331 <sendKeyToTerminal(unsigned char)+0x41>
c000d31b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d31f:	83 f8 03             	cmp    eax,0x3
c000d322:	74 0d                	je     c000d331 <sendKeyToTerminal(unsigned char)+0x41>
c000d324:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d328:	83 f8 1c             	cmp    eax,0x1c
c000d32b:	0f 85 97 00 00 00    	jne    c000d3c8 <sendKeyToTerminal(unsigned char)+0xd8>
c000d331:	fa                   	cli    
c000d332:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d337:	83 c0 01             	add    eax,0x1
c000d33a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d33f:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d344:	83 c0 01             	add    eax,0x1
c000d347:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d34c:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c000d351:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d354:	c7 05 20 b4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b420,0x0
c000d35e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d362:	74 1f                	je     c000d383 <sendKeyToTerminal(unsigned char)+0x93>
c000d364:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d367:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d36a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d36d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d370:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d373:	83 ec 0c             	sub    esp,0xc
c000d376:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d379:	e8 fe 92 00 00       	call   c001667c <unblockTask(ThreadControlBlock*)>
c000d37e:	83 c4 10             	add    esp,0x10
c000d381:	eb db                	jmp    c000d35e <sendKeyToTerminal(unsigned char)+0x6e>
c000d383:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d388:	83 e8 01             	sub    eax,0x1
c000d38b:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d390:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d395:	85 c0                	test   eax,eax
c000d397:	75 18                	jne    c000d3b1 <sendKeyToTerminal(unsigned char)+0xc1>
c000d399:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c000d39e:	85 c0                	test   eax,eax
c000d3a0:	74 0f                	je     c000d3b1 <sendKeyToTerminal(unsigned char)+0xc1>
c000d3a2:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000d3ac:	e8 d3 8d 00 00       	call   c0016184 <schedule()>
c000d3b1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d3b6:	83 e8 01             	sub    eax,0x1
c000d3b9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d3be:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d3c3:	85 c0                	test   eax,eax
c000d3c5:	75 01                	jne    c000d3c8 <sendKeyToTerminal(unsigned char)+0xd8>
c000d3c7:	fb                   	sti    
c000d3c8:	90                   	nop
c000d3c9:	c9                   	leave  
c000d3ca:	c3                   	ret    

c000d3cb <sendKeyboardToken(KeyboardToken)>:
c000d3cb:	55                   	push   ebp
c000d3cc:	89 e5                	mov    ebp,esp
c000d3ce:	83 ec 18             	sub    esp,0x18
c000d3d1:	e8 d1 42 00 00       	call   c00116a7 <KeUserIOReceived()>
c000d3d6:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d3d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3dc:	0f b7 c0             	movzx  eax,ax
c000d3df:	83 f2 01             	xor    edx,0x1
c000d3e2:	88 90 40 b4 02 c0    	mov    BYTE PTR [eax-0x3ffd4bc0],dl
c000d3e8:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d3ed:	85 c0                	test   eax,eax
c000d3ef:	74 24                	je     c000d415 <sendKeyboardToken(KeyboardToken)+0x4a>
c000d3f1:	8b 15 28 b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b428
c000d3f7:	83 ec 04             	sub    esp,0x4
c000d3fa:	68 40 b4 02 c0       	push   0xc002b440
c000d3ff:	83 ec 08             	sub    esp,0x8
c000d402:	89 e0                	mov    eax,esp
c000d404:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000d407:	89 08                	mov    DWORD PTR [eax],ecx
c000d409:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000d40c:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d410:	ff d2                	call   edx
c000d412:	83 c4 10             	add    esp,0x10
c000d415:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d419:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d41c:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d421:	0f b6 d2             	movzx  edx,dl
c000d424:	0f b6 c0             	movzx  eax,al
c000d427:	39 c2                	cmp    edx,eax
c000d429:	74 1c                	je     c000d447 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d42b:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d42e:	a2 48 b8 02 c0       	mov    ds:0xc002b848,al
c000d433:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d438:	0f b6 c0             	movzx  eax,al
c000d43b:	83 ec 0c             	sub    esp,0xc
c000d43e:	50                   	push   eax
c000d43f:	e8 04 b1 ff ff       	call   c0008548 <setTerminalScrollLock(bool)>
c000d444:	83 c4 10             	add    esp,0x10
c000d447:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d44a:	0f b6 c0             	movzx  eax,al
c000d44d:	85 c0                	test   eax,eax
c000d44f:	0f 84 da 00 00 00    	je     c000d52f <sendKeyboardToken(KeyboardToken)+0x164>
c000d455:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d458:	0f b7 c0             	movzx  eax,ax
c000d45b:	3d 18 03 00 00       	cmp    eax,0x318
c000d460:	75 06                	jne    c000d468 <sendKeyboardToken(KeyboardToken)+0x9d>
c000d462:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d468:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d46b:	0f b7 c0             	movzx  eax,ax
c000d46e:	3d 19 03 00 00       	cmp    eax,0x319
c000d473:	75 06                	jne    c000d47b <sendKeyboardToken(KeyboardToken)+0xb0>
c000d475:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d47b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d47e:	0f b7 c0             	movzx  eax,ax
c000d481:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d486:	75 06                	jne    c000d48e <sendKeyboardToken(KeyboardToken)+0xc3>
c000d488:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d48e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d491:	0f b7 c0             	movzx  eax,ax
c000d494:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d499:	75 06                	jne    c000d4a1 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d49b:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d4a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4a4:	0f b7 c0             	movzx  eax,ax
c000d4a7:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d4ac:	75 06                	jne    c000d4b4 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d4ae:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d4b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4b7:	0f b7 c0             	movzx  eax,ax
c000d4ba:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d4bf:	75 06                	jne    c000d4c7 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d4c1:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d4c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4ca:	0f b7 c0             	movzx  eax,ax
c000d4cd:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d4d2:	75 06                	jne    c000d4da <sendKeyboardToken(KeyboardToken)+0x10f>
c000d4d4:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d4da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4dd:	0f b7 c0             	movzx  eax,ax
c000d4e0:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d4e5:	75 06                	jne    c000d4ed <sendKeyboardToken(KeyboardToken)+0x122>
c000d4e7:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d4ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4f0:	0f b7 c0             	movzx  eax,ax
c000d4f3:	3d 20 03 00 00       	cmp    eax,0x320
c000d4f8:	75 06                	jne    c000d500 <sendKeyboardToken(KeyboardToken)+0x135>
c000d4fa:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d500:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d503:	0f b7 c0             	movzx  eax,ax
c000d506:	3d 21 03 00 00       	cmp    eax,0x321
c000d50b:	75 06                	jne    c000d513 <sendKeyboardToken(KeyboardToken)+0x148>
c000d50d:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d513:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d516:	0f b7 c0             	movzx  eax,ax
c000d519:	3d 22 03 00 00       	cmp    eax,0x322
c000d51e:	0f 85 f1 00 00 00    	jne    c000d615 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d524:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d52a:	e9 e6 00 00 00       	jmp    c000d615 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d52f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d532:	0f b7 c0             	movzx  eax,ax
c000d535:	3d 18 03 00 00       	cmp    eax,0x318
c000d53a:	75 0a                	jne    c000d546 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d53c:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d542:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d546:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d549:	0f b7 c0             	movzx  eax,ax
c000d54c:	3d 19 03 00 00       	cmp    eax,0x319
c000d551:	75 0a                	jne    c000d55d <sendKeyboardToken(KeyboardToken)+0x192>
c000d553:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d559:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d55d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d560:	0f b7 c0             	movzx  eax,ax
c000d563:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d568:	75 0a                	jne    c000d574 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d56a:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d570:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d574:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d577:	0f b7 c0             	movzx  eax,ax
c000d57a:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d57f:	75 0a                	jne    c000d58b <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d581:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d587:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d58b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d58e:	0f b7 c0             	movzx  eax,ax
c000d591:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d596:	75 0a                	jne    c000d5a2 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d598:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d59e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5a5:	0f b7 c0             	movzx  eax,ax
c000d5a8:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d5ad:	75 0a                	jne    c000d5b9 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d5af:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d5b5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5bc:	0f b7 c0             	movzx  eax,ax
c000d5bf:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d5c4:	75 0a                	jne    c000d5d0 <sendKeyboardToken(KeyboardToken)+0x205>
c000d5c6:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d5cc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5d3:	0f b7 c0             	movzx  eax,ax
c000d5d6:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d5db:	75 0a                	jne    c000d5e7 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d5dd:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d5e3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5ea:	0f b7 c0             	movzx  eax,ax
c000d5ed:	3d 20 03 00 00       	cmp    eax,0x320
c000d5f2:	75 0a                	jne    c000d5fe <sendKeyboardToken(KeyboardToken)+0x233>
c000d5f4:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d5fa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d601:	0f b7 c0             	movzx  eax,ax
c000d604:	3d 21 03 00 00       	cmp    eax,0x321
c000d609:	75 0a                	jne    c000d615 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d60b:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d611:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d615:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d618:	0f b7 c0             	movzx  eax,ax
c000d61b:	3d 00 02 00 00       	cmp    eax,0x200
c000d620:	75 2f                	jne    c000d651 <sendKeyboardToken(KeyboardToken)+0x286>
c000d622:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d627:	83 f0 01             	xor    eax,0x1
c000d62a:	0f b6 c0             	movzx  eax,al
c000d62d:	85 c0                	test   eax,eax
c000d62f:	74 20                	je     c000d651 <sendKeyboardToken(KeyboardToken)+0x286>
c000d631:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d636:	6a 01                	push   0x1
c000d638:	6a 00                	push   0x0
c000d63a:	68 14 d2 00 c0       	push   0xc000d214
c000d63f:	50                   	push   eax
c000d640:	e8 f3 88 00 00       	call   c0015f38 <Process::createThread(void (*)(void*), void*, int)>
c000d645:	83 c4 10             	add    esp,0x10
c000d648:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d64f:	eb 3a                	jmp    c000d68b <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d651:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d654:	0f b7 c0             	movzx  eax,ax
c000d657:	3d 01 02 00 00       	cmp    eax,0x201
c000d65c:	75 2d                	jne    c000d68b <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d65e:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d663:	83 f0 01             	xor    eax,0x1
c000d666:	0f b6 c0             	movzx  eax,al
c000d669:	85 c0                	test   eax,eax
c000d66b:	74 1e                	je     c000d68b <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d66d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d672:	6a 01                	push   0x1
c000d674:	6a 00                	push   0x0
c000d676:	68 82 d2 00 c0       	push   0xc000d282
c000d67b:	50                   	push   eax
c000d67c:	e8 b7 88 00 00       	call   c0015f38 <Process::createThread(void (*)(void*), void*, int)>
c000d681:	83 c4 10             	add    esp,0x10
c000d684:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d68b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d68e:	0f b7 c0             	movzx  eax,ax
c000d691:	3d 25 03 00 00       	cmp    eax,0x325
c000d696:	75 06                	jne    c000d69e <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d698:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d69e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6a1:	0f b7 c0             	movzx  eax,ax
c000d6a4:	3d 24 03 00 00       	cmp    eax,0x324
c000d6a9:	75 06                	jne    c000d6b1 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d6ab:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d6b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6b4:	0f b7 c0             	movzx  eax,ax
c000d6b7:	3d 23 03 00 00       	cmp    eax,0x323
c000d6bc:	75 06                	jne    c000d6c4 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d6be:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d6c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6c7:	0f b7 c0             	movzx  eax,ax
c000d6ca:	3d 26 03 00 00       	cmp    eax,0x326
c000d6cf:	75 06                	jne    c000d6d7 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d6d1:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d6d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6da:	0f b7 c0             	movzx  eax,ax
c000d6dd:	3d 27 03 00 00       	cmp    eax,0x327
c000d6e2:	75 06                	jne    c000d6ea <sendKeyboardToken(KeyboardToken)+0x31f>
c000d6e4:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d6ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6ed:	0f b7 c0             	movzx  eax,ax
c000d6f0:	3d 22 03 00 00       	cmp    eax,0x322
c000d6f5:	75 06                	jne    c000d6fd <sendKeyboardToken(KeyboardToken)+0x332>
c000d6f7:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d6fd:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d701:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d704:	83 f0 01             	xor    eax,0x1
c000d707:	0f b6 c0             	movzx  eax,al
c000d70a:	85 c0                	test   eax,eax
c000d70c:	74 7c                	je     c000d78a <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d70e:	a0 41 b5 02 c0       	mov    al,ds:0xc002b541
c000d713:	0f b6 c0             	movzx  eax,al
c000d716:	85 c0                	test   eax,eax
c000d718:	74 43                	je     c000d75d <sendKeyboardToken(KeyboardToken)+0x392>
c000d71a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d71e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d722:	85 c0                	test   eax,eax
c000d724:	74 2b                	je     c000d751 <sendKeyboardToken(KeyboardToken)+0x386>
c000d726:	8b 15 44 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b844
c000d72c:	89 d0                	mov    eax,edx
c000d72e:	c1 e0 02             	shl    eax,0x2
c000d731:	01 d0                	add    eax,edx
c000d733:	d1 e0                	shl    eax,1
c000d735:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d73a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d73d:	0f b7 c0             	movzx  eax,ax
c000d740:	8d 50 d0             	lea    edx,[eax-0x30]
c000d743:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d748:	01 d0                	add    eax,edx
c000d74a:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d74f:	eb 71                	jmp    c000d7c2 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d751:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d75b:	eb 65                	jmp    c000d7c2 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d75d:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d762:	85 c0                	test   eax,eax
c000d764:	74 18                	je     c000d77e <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d766:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d76b:	0f b6 c0             	movzx  eax,al
c000d76e:	83 ec 0c             	sub    esp,0xc
c000d771:	50                   	push   eax
c000d772:	e8 79 fb ff ff       	call   c000d2f0 <sendKeyToTerminal(unsigned char)>
c000d777:	83 c4 10             	add    esp,0x10
c000d77a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d77e:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d788:	eb 38                	jmp    c000d7c2 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d78a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d78d:	0f b7 c0             	movzx  eax,ax
c000d790:	3d 01 01 00 00       	cmp    eax,0x101
c000d795:	75 2b                	jne    c000d7c2 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d797:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d79c:	85 c0                	test   eax,eax
c000d79e:	74 18                	je     c000d7b8 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d7a0:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d7a5:	0f b6 c0             	movzx  eax,al
c000d7a8:	83 ec 0c             	sub    esp,0xc
c000d7ab:	50                   	push   eax
c000d7ac:	e8 3f fb ff ff       	call   c000d2f0 <sendKeyToTerminal(unsigned char)>
c000d7b1:	83 c4 10             	add    esp,0x10
c000d7b4:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d7b8:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d7c2:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d7c5:	83 f0 01             	xor    eax,0x1
c000d7c8:	0f b6 c0             	movzx  eax,al
c000d7cb:	85 c0                	test   eax,eax
c000d7cd:	74 5a                	je     c000d829 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7cf:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d7d2:	83 f0 01             	xor    eax,0x1
c000d7d5:	0f b6 c0             	movzx  eax,al
c000d7d8:	85 c0                	test   eax,eax
c000d7da:	74 4d                	je     c000d829 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7dc:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d7e1:	83 f0 01             	xor    eax,0x1
c000d7e4:	0f b6 c0             	movzx  eax,al
c000d7e7:	85 c0                	test   eax,eax
c000d7e9:	74 3e                	je     c000d829 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7ee:	0f b7 c0             	movzx  eax,ax
c000d7f1:	83 f8 1f             	cmp    eax,0x1f
c000d7f4:	76 0b                	jbe    c000d801 <sendKeyboardToken(KeyboardToken)+0x436>
c000d7f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7f9:	0f b7 c0             	movzx  eax,ax
c000d7fc:	83 f8 7e             	cmp    eax,0x7e
c000d7ff:	76 16                	jbe    c000d817 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d801:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d804:	0f b7 c0             	movzx  eax,ax
c000d807:	83 f8 0a             	cmp    eax,0xa
c000d80a:	74 0b                	je     c000d817 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d80c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d80f:	0f b7 c0             	movzx  eax,ax
c000d812:	83 f8 08             	cmp    eax,0x8
c000d815:	75 12                	jne    c000d829 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d817:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d81a:	0f b6 c0             	movzx  eax,al
c000d81d:	83 ec 0c             	sub    esp,0xc
c000d820:	50                   	push   eax
c000d821:	e8 ca fa ff ff       	call   c000d2f0 <sendKeyToTerminal(unsigned char)>
c000d826:	83 c4 10             	add    esp,0x10
c000d829:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d82c:	83 f0 01             	xor    eax,0x1
c000d82f:	0f b6 c0             	movzx  eax,al
c000d832:	85 c0                	test   eax,eax
c000d834:	74 5d                	je     c000d893 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d836:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d839:	83 f0 01             	xor    eax,0x1
c000d83c:	0f b6 c0             	movzx  eax,al
c000d83f:	85 c0                	test   eax,eax
c000d841:	74 50                	je     c000d893 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d843:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d848:	0f b6 c0             	movzx  eax,al
c000d84b:	85 c0                	test   eax,eax
c000d84d:	74 44                	je     c000d893 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d84f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d852:	0f b7 c0             	movzx  eax,ax
c000d855:	83 f8 3f             	cmp    eax,0x3f
c000d858:	76 39                	jbe    c000d893 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d85a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d85d:	0f b7 c0             	movzx  eax,ax
c000d860:	83 f8 7f             	cmp    eax,0x7f
c000d863:	77 2e                	ja     c000d893 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d865:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d868:	88 c2                	mov    dl,al
c000d86a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d86d:	0f b7 c0             	movzx  eax,ax
c000d870:	83 f8 5f             	cmp    eax,0x5f
c000d873:	76 04                	jbe    c000d879 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d875:	b0 20                	mov    al,0x20
c000d877:	eb 02                	jmp    c000d87b <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d879:	b0 00                	mov    al,0x0
c000d87b:	89 d1                	mov    ecx,edx
c000d87d:	29 c1                	sub    ecx,eax
c000d87f:	89 c8                	mov    eax,ecx
c000d881:	83 e8 40             	sub    eax,0x40
c000d884:	0f b6 c0             	movzx  eax,al
c000d887:	83 ec 0c             	sub    esp,0xc
c000d88a:	50                   	push   eax
c000d88b:	e8 60 fa ff ff       	call   c000d2f0 <sendKeyToTerminal(unsigned char)>
c000d890:	83 c4 10             	add    esp,0x10
c000d893:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d896:	0f b7 c0             	movzx  eax,ax
c000d899:	3d 00 03 00 00       	cmp    eax,0x300
c000d89e:	75 12                	jne    c000d8b2 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d8a0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d8a3:	83 f0 01             	xor    eax,0x1
c000d8a6:	0f b6 c0             	movzx  eax,al
c000d8a9:	85 c0                	test   eax,eax
c000d8ab:	74 05                	je     c000d8b2 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d8ad:	e8 97 ac ff ff       	call   c0008549 <doTerminalCycle()>
c000d8b2:	90                   	nop
c000d8b3:	c9                   	leave  
c000d8b4:	c3                   	ret    

c000d8b5 <clearInternalKeybuffer(VgaText*)>:
c000d8b5:	55                   	push   ebp
c000d8b6:	89 e5                	mov    ebp,esp
c000d8b8:	83 ec 08             	sub    esp,0x8
c000d8bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8be:	05 02 01 00 00       	add    eax,0x102
c000d8c3:	83 ec 0c             	sub    esp,0xc
c000d8c6:	50                   	push   eax
c000d8c7:	e8 b4 2c ff ff       	call   c0000580 <strlen>
c000d8cc:	83 c4 10             	add    esp,0x10
c000d8cf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d8d2:	81 c2 02 01 00 00    	add    edx,0x102
c000d8d8:	83 ec 04             	sub    esp,0x4
c000d8db:	50                   	push   eax
c000d8dc:	6a 00                	push   0x0
c000d8de:	52                   	push   edx
c000d8df:	e8 0c 2c ff ff       	call   c00004f0 <memset>
c000d8e4:	83 c4 10             	add    esp,0x10
c000d8e7:	90                   	nop
c000d8e8:	c9                   	leave  
c000d8e9:	c3                   	ret    

c000d8ea <readKeyboard(VgaText*, char*, unsigned long)>:
c000d8ea:	55                   	push   ebp
c000d8eb:	89 e5                	mov    ebp,esp
c000d8ed:	83 ec 18             	sub    esp,0x18
c000d8f0:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d8f5:	85 c0                	test   eax,eax
c000d8f7:	74 2a                	je     c000d923 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d8f9:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d8ff:	8b 15 28 b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b428
c000d905:	83 ec 04             	sub    esp,0x4
c000d908:	68 40 b4 02 c0       	push   0xc002b440
c000d90d:	83 ec 08             	sub    esp,0x8
c000d910:	89 e0                	mov    eax,esp
c000d912:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000d915:	89 08                	mov    DWORD PTR [eax],ecx
c000d917:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000d91a:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d91e:	ff d2                	call   edx
c000d920:	83 c4 10             	add    esp,0x10
c000d923:	fb                   	sti    
c000d924:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d92b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d92f:	0f 84 0d 01 00 00    	je     c000da42 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d935:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d938:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d93e:	0f be c0             	movsx  eax,al
c000d941:	85 c0                	test   eax,eax
c000d943:	75 2c                	jne    c000d971 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d945:	fa                   	cli    
c000d946:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d94b:	83 c0 01             	add    eax,0x1
c000d94e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d953:	e8 2c 88 00 00       	call   c0016184 <schedule()>
c000d958:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d95d:	83 e8 01             	sub    eax,0x1
c000d960:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d965:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d96a:	85 c0                	test   eax,eax
c000d96c:	75 c7                	jne    c000d935 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d96e:	fb                   	sti    
c000d96f:	eb c4                	jmp    c000d935 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d971:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d974:	8d 50 01             	lea    edx,[eax+0x1]
c000d977:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d97a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d97d:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d983:	88 10                	mov    BYTE PTR [eax],dl
c000d985:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d988:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d98e:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d991:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d995:	83 f8 03             	cmp    eax,0x3
c000d998:	75 1e                	jne    c000d9b8 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d99a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d99f:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9a1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9a4:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d9aa:	83 ec 08             	sub    esp,0x8
c000d9ad:	6a 02                	push   0x2
c000d9af:	50                   	push   eax
c000d9b0:	e8 3e 41 00 00       	call   c0011af3 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d9b5:	83 c4 10             	add    esp,0x10
c000d9b8:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9bc:	83 f8 1c             	cmp    eax,0x1c
c000d9bf:	75 1e                	jne    c000d9df <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d9c1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d9c6:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9c8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9cb:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d9d1:	83 ec 08             	sub    esp,0x8
c000d9d4:	6a 09                	push   0x9
c000d9d6:	50                   	push   eax
c000d9d7:	e8 17 41 00 00       	call   c0011af3 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d9dc:	83 c4 10             	add    esp,0x10
c000d9df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d9e2:	05 02 01 00 00       	add    eax,0x102
c000d9e7:	83 ec 0c             	sub    esp,0xc
c000d9ea:	50                   	push   eax
c000d9eb:	e8 90 2b ff ff       	call   c0000580 <strlen>
c000d9f0:	83 c4 10             	add    esp,0x10
c000d9f3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d9f6:	81 c2 02 01 00 00    	add    edx,0x102
c000d9fc:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d9ff:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000da02:	81 c2 02 01 00 00    	add    edx,0x102
c000da08:	83 ec 04             	sub    esp,0x4
c000da0b:	50                   	push   eax
c000da0c:	51                   	push   ecx
c000da0d:	52                   	push   edx
c000da0e:	e8 bd 29 ff ff       	call   c00003d0 <memmove>
c000da13:	83 c4 10             	add    esp,0x10
c000da16:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000da1a:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000da1e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da22:	83 f8 0a             	cmp    eax,0xa
c000da25:	74 16                	je     c000da3d <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000da27:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da2b:	83 f8 03             	cmp    eax,0x3
c000da2e:	74 0d                	je     c000da3d <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000da30:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000da34:	83 f8 1c             	cmp    eax,0x1c
c000da37:	0f 85 ee fe ff ff    	jne    c000d92b <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000da3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da40:	eb 03                	jmp    c000da45 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000da42:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da45:	c9                   	leave  
c000da46:	c3                   	ret    
c000da47:	90                   	nop

c000da48 <Keyboard::Keyboard(char const*)>:
c000da48:	83 ec 0c             	sub    esp,0xc
c000da4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da4f:	83 ec 08             	sub    esp,0x8
c000da52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da56:	50                   	push   eax
c000da57:	e8 46 f1 ff ff       	call   c000cba2 <Device::Device(char const*)>
c000da5c:	83 c4 10             	add    esp,0x10
c000da5f:	ba 80 1e 02 c0       	mov    edx,0xc0021e80
c000da64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da68:	89 10                	mov    DWORD PTR [eax],edx
c000da6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da6e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000da78:	c6 05 24 b4 02 c0 01 	mov    BYTE PTR ds:0xc002b424,0x1
c000da7f:	90                   	nop
c000da80:	83 c4 0c             	add    esp,0xc
c000da83:	c3                   	ret    

c000da84 <Keyboard::~Keyboard()>:
c000da84:	83 ec 0c             	sub    esp,0xc
c000da87:	ba 80 1e 02 c0       	mov    edx,0xc0021e80
c000da8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da90:	89 10                	mov    DWORD PTR [eax],edx
c000da92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da96:	83 ec 0c             	sub    esp,0xc
c000da99:	50                   	push   eax
c000da9a:	e8 33 ee ff ff       	call   c000c8d2 <Device::~Device()>
c000da9f:	83 c4 10             	add    esp,0x10
c000daa2:	90                   	nop
c000daa3:	83 c4 0c             	add    esp,0xc
c000daa6:	c3                   	ret    
c000daa7:	90                   	nop

c000daa8 <Keyboard::~Keyboard()>:
c000daa8:	83 ec 0c             	sub    esp,0xc
c000daab:	83 ec 0c             	sub    esp,0xc
c000daae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dab2:	e8 cd ff ff ff       	call   c000da84 <Keyboard::~Keyboard()>
c000dab7:	83 c4 10             	add    esp,0x10
c000daba:	83 ec 08             	sub    esp,0x8
c000dabd:	68 5c 01 00 00       	push   0x15c
c000dac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dac6:	e8 71 cd ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000dacb:	83 c4 10             	add    esp,0x10
c000dace:	83 c4 0c             	add    esp,0xc
c000dad1:	c3                   	ret    

c000dad2 <LogicalDisk::close(int, int, void*)>:
c000dad2:	83 c8 ff             	or     eax,0xffffffff
c000dad5:	c3                   	ret    

c000dad6 <LogicalDisk::~LogicalDisk()>:
c000dad6:	83 ec 0c             	sub    esp,0xc
c000dad9:	ba f8 1e 02 c0       	mov    edx,0xc0021ef8
c000dade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dae2:	89 10                	mov    DWORD PTR [eax],edx
c000dae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dae8:	83 ec 0c             	sub    esp,0xc
c000daeb:	50                   	push   eax
c000daec:	e8 e1 ed ff ff       	call   c000c8d2 <Device::~Device()>
c000daf1:	83 c4 10             	add    esp,0x10
c000daf4:	90                   	nop
c000daf5:	83 c4 0c             	add    esp,0xc
c000daf8:	c3                   	ret    
c000daf9:	90                   	nop

c000dafa <LogicalDisk::~LogicalDisk()>:
c000dafa:	83 ec 0c             	sub    esp,0xc
c000dafd:	83 ec 0c             	sub    esp,0xc
c000db00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db04:	e8 cd ff ff ff       	call   c000dad6 <LogicalDisk::~LogicalDisk()>
c000db09:	83 c4 10             	add    esp,0x10
c000db0c:	83 ec 08             	sub    esp,0x8
c000db0f:	68 78 01 00 00       	push   0x178
c000db14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db18:	e8 1f cd ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000db1d:	83 c4 10             	add    esp,0x10
c000db20:	83 c4 0c             	add    esp,0xc
c000db23:	c3                   	ret    

c000db24 <LogicalDisk::open(int, int, void*)>:
c000db24:	83 ec 18             	sub    esp,0x18
c000db27:	68 ac 1e 02 c0       	push   0xc0021eac
c000db2c:	e8 26 3b 00 00       	call   c0011657 <KePanic(char const*)>
c000db31:	83 c8 ff             	or     eax,0xffffffff
c000db34:	83 c4 1c             	add    esp,0x1c
c000db37:	c3                   	ret    

c000db38 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000db38:	53                   	push   ebx
c000db39:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000db3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db41:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000db45:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000db4b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000db51:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000db57:	77 10                	ja     c000db69 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000db59:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000db5f:	89 d3                	mov    ebx,edx
c000db61:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000db67:	72 05                	jb     c000db6e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000db69:	83 c8 ff             	or     eax,0xffffffff
c000db6c:	89 c2                	mov    edx,eax
c000db6e:	5b                   	pop    ebx
c000db6f:	c3                   	ret    

c000db70 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000db70:	56                   	push   esi
c000db71:	83 c8 ff             	or     eax,0xffffffff
c000db74:	53                   	push   ebx
c000db75:	89 c2                	mov    edx,eax
c000db77:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000db7b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000db7f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000db83:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db89:	77 27                	ja     c000dbb2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db8b:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000db91:	89 d8                	mov    eax,ebx
c000db93:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000db99:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000db9e:	89 c2                	mov    edx,eax
c000dba0:	73 10                	jae    c000dbb2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000dba2:	89 c8                	mov    eax,ecx
c000dba4:	89 da                	mov    edx,ebx
c000dba6:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000dbac:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000dbb2:	5b                   	pop    ebx
c000dbb3:	5e                   	pop    esi
c000dbb4:	c3                   	ret    
c000dbb5:	90                   	nop

c000dbb6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dbb6:	83 ec 1c             	sub    esp,0x1c
c000dbb9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000dbbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dbc5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dbc9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dbcd:	89 04 24             	mov    DWORD PTR [esp],eax
c000dbd0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dbd4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dbd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbdc:	83 ec 08             	sub    esp,0x8
c000dbdf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dbe3:	50                   	push   eax
c000dbe4:	e8 b9 ef ff ff       	call   c000cba2 <Device::Device(char const*)>
c000dbe9:	83 c4 10             	add    esp,0x10
c000dbec:	ba f8 1e 02 c0       	mov    edx,0xc0021ef8
c000dbf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbf5:	89 10                	mov    DWORD PTR [eax],edx
c000dbf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbfb:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dc02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc06:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000dc0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc11:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dc18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc1c:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000dc26:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dc2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dc2e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dc32:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000dc38:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000dc3e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dc42:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000dc45:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc49:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000dc4f:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000dc55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc59:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dc5d:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000dc63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc67:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dc71:	90                   	nop
c000dc72:	83 c4 1c             	add    esp,0x1c
c000dc75:	c3                   	ret    

c000dc76 <LogicalDisk::assignDriveLetter()>:
c000dc76:	55                   	push   ebp
c000dc77:	57                   	push   edi
c000dc78:	56                   	push   esi
c000dc79:	53                   	push   ebx
c000dc7a:	83 ec 14             	sub    esp,0x14
c000dc7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dc81:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000dc87:	b0 41                	mov    al,0x41
c000dc89:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000dc8f:	84 d2                	test   dl,dl
c000dc91:	75 02                	jne    c000dc95 <LogicalDisk::assignDriveLetter()+0x1f>
c000dc93:	b0 43                	mov    al,0x43
c000dc95:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c000dc9b:	0f b6 ca             	movzx  ecx,dl
c000dc9e:	0f be e8             	movsx  ebp,al
c000dca1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dca5:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000dca9:	8b 3d 64 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b864
c000dcaf:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dcb3:	3c 43                	cmp    al,0x43
c000dcb5:	75 10                	jne    c000dcc7 <LogicalDisk::assignDriveLetter()+0x51>
c000dcb7:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000dcbe:	75 5a                	jne    c000dd1a <LogicalDisk::assignDriveLetter()+0xa4>
c000dcc0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000dcc5:	75 53                	jne    c000dd1a <LogicalDisk::assignDriveLetter()+0xa4>
c000dcc7:	8d 75 bf             	lea    esi,[ebp-0x41]
c000dcca:	ba 01 00 00 00       	mov    edx,0x1
c000dccf:	89 34 24             	mov    DWORD PTR [esp],esi
c000dcd2:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000dcd5:	d3 e2                	shl    edx,cl
c000dcd7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dcdb:	89 d7                	mov    edi,edx
c000dcdd:	89 d6                	mov    esi,edx
c000dcdf:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000dce3:	c1 ff 1f             	sar    edi,0x1f
c000dce6:	21 f9                	and    ecx,edi
c000dce8:	09 d1                	or     ecx,edx
c000dcea:	75 2e                	jne    c000dd1a <LogicalDisk::assignDriveLetter()+0xa4>
c000dcec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dcf0:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000dcf4:	09 f2                	or     edx,esi
c000dcf6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dcf9:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c000dcff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dd03:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000dd09:	89 1c b5 80 b8 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4780],ebx
c000dd10:	09 fa                	or     edx,edi
c000dd12:	89 15 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,edx
c000dd18:	eb 0d                	jmp    c000dd27 <LogicalDisk::assignDriveLetter()+0xb1>
c000dd1a:	8d 50 01             	lea    edx,[eax+0x1]
c000dd1d:	45                   	inc    ebp
c000dd1e:	80 fa 5b             	cmp    dl,0x5b
c000dd21:	88 d0                	mov    al,dl
c000dd23:	75 8e                	jne    c000dcb3 <LogicalDisk::assignDriveLetter()+0x3d>
c000dd25:	31 c0                	xor    eax,eax
c000dd27:	83 c4 14             	add    esp,0x14
c000dd2a:	5b                   	pop    ebx
c000dd2b:	5e                   	pop    esi
c000dd2c:	5f                   	pop    edi
c000dd2d:	5d                   	pop    ebp
c000dd2e:	c3                   	ret    
c000dd2f:	90                   	nop

c000dd30 <LogicalDisk::mount()>:
c000dd30:	56                   	push   esi
c000dd31:	53                   	push   ebx
c000dd32:	53                   	push   ebx
c000dd33:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dd37:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c000dd3d:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000dd47:	85 db                	test   ebx,ebx
c000dd49:	74 27                	je     c000dd72 <LogicalDisk::mount()+0x42>
c000dd4b:	51                   	push   ecx
c000dd4c:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dd53:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dd55:	83 e8 41             	sub    eax,0x41
c000dd58:	50                   	push   eax
c000dd59:	56                   	push   esi
c000dd5a:	53                   	push   ebx
c000dd5b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dd5e:	83 c4 10             	add    esp,0x10
c000dd61:	84 c0                	test   al,al
c000dd63:	74 08                	je     c000dd6d <LogicalDisk::mount()+0x3d>
c000dd65:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000dd6b:	eb 07                	jmp    c000dd74 <LogicalDisk::mount()+0x44>
c000dd6d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000dd70:	eb d5                	jmp    c000dd47 <LogicalDisk::mount()+0x17>
c000dd72:	31 c0                	xor    eax,eax
c000dd74:	5a                   	pop    edx
c000dd75:	5b                   	pop    ebx
c000dd76:	5e                   	pop    esi
c000dd77:	c3                   	ret    

c000dd78 <LogicalDisk::unmount()>:
c000dd78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd7c:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dd86:	c3                   	ret    
c000dd87:	90                   	nop

c000dd88 <LogicalDisk::eject()>:
c000dd88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd8c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000dd92:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd94:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd98:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000dd9b:	90                   	nop

c000dd9c <LogicalDisk::unassignDriveLetter()>:
c000dd9c:	57                   	push   edi
c000dd9d:	56                   	push   esi
c000dd9e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dda2:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000dda9:	85 c9                	test   ecx,ecx
c000ddab:	75 0f                	jne    c000ddbc <LogicalDisk::unassignDriveLetter()+0x20>
c000ddad:	c7 44 24 0c d0 1e 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021ed0
c000ddb5:	5e                   	pop    esi
c000ddb6:	5f                   	pop    edi
c000ddb7:	e9 9b 38 00 00       	jmp    c0011657 <KePanic(char const*)>
c000ddbc:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000ddc3:	83 e9 41             	sub    ecx,0x41
c000ddc6:	b8 01 00 00 00       	mov    eax,0x1
c000ddcb:	c7 04 8d 80 b8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4780],0x0
c000ddd6:	d3 e0                	shl    eax,cl
c000ddd8:	89 c7                	mov    edi,eax
c000ddda:	f7 d0                	not    eax
c000dddc:	c1 ff 1f             	sar    edi,0x1f
c000dddf:	21 05 60 b8 02 c0    	and    DWORD PTR ds:0xc002b860,eax
c000dde5:	89 fe                	mov    esi,edi
c000dde7:	f7 d6                	not    esi
c000dde9:	21 35 64 b8 02 c0    	and    DWORD PTR ds:0xc002b864,esi
c000ddef:	5e                   	pop    esi
c000ddf0:	5f                   	pop    edi
c000ddf1:	c3                   	ret    

c000ddf2 <LogicalDisk::read(unsigned long long, int, void*)>:
c000ddf2:	57                   	push   edi
c000ddf3:	56                   	push   esi
c000ddf4:	53                   	push   ebx
c000ddf5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ddf9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ddfd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de05:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000de0b:	77 41                	ja     c000de4e <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000de0d:	99                   	cdq    
c000de0e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000de14:	01 c8                	add    eax,ecx
c000de16:	11 da                	adc    edx,ebx
c000de18:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000de1e:	19 d7                	sbb    edi,edx
c000de20:	72 33                	jb     c000de55 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000de22:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000de28:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000de2e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de32:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000de36:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de3c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de46:	5b                   	pop    ebx
c000de47:	5e                   	pop    esi
c000de48:	5f                   	pop    edi
c000de49:	e9 d4 0a 00 00       	jmp    c000e922 <VCache::read(unsigned long long, int, void*)>
c000de4e:	b8 05 00 00 00       	mov    eax,0x5
c000de53:	eb 05                	jmp    c000de5a <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000de55:	b8 07 00 00 00       	mov    eax,0x7
c000de5a:	5b                   	pop    ebx
c000de5b:	5e                   	pop    esi
c000de5c:	5f                   	pop    edi
c000de5d:	c3                   	ret    

c000de5e <LogicalDisk::write(unsigned long long, int, void*)>:
c000de5e:	57                   	push   edi
c000de5f:	56                   	push   esi
c000de60:	53                   	push   ebx
c000de61:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de69:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de71:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000de77:	77 41                	ja     c000deba <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000de79:	99                   	cdq    
c000de7a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000de80:	01 c8                	add    eax,ecx
c000de82:	11 da                	adc    edx,ebx
c000de84:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000de8a:	19 d7                	sbb    edi,edx
c000de8c:	72 33                	jb     c000dec1 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000de8e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000de94:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000de9a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de9e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dea2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dea8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000deae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000deb2:	5b                   	pop    ebx
c000deb3:	5e                   	pop    esi
c000deb4:	5f                   	pop    edi
c000deb5:	e9 6e 09 00 00       	jmp    c000e828 <VCache::write(unsigned long long, int, void*)>
c000deba:	b8 05 00 00 00       	mov    eax,0x5
c000debf:	eb 05                	jmp    c000dec6 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000dec1:	b8 07 00 00 00       	mov    eax,0x7
c000dec6:	5b                   	pop    ebx
c000dec7:	5e                   	pop    esi
c000dec8:	5f                   	pop    edi
c000dec9:	c3                   	ret    
c000deca:	66 90                	xchg   ax,ax

c000decc <Mouse::Mouse(char const*)>:
c000decc:	83 ec 0c             	sub    esp,0xc
c000decf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ded3:	83 ec 08             	sub    esp,0x8
c000ded6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000deda:	50                   	push   eax
c000dedb:	e8 c2 ec ff ff       	call   c000cba2 <Device::Device(char const*)>
c000dee0:	83 c4 10             	add    esp,0x10
c000dee3:	ba 24 1f 02 c0       	mov    edx,0xc0021f24
c000dee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deec:	89 10                	mov    DWORD PTR [eax],edx
c000deee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000def2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000defc:	90                   	nop
c000defd:	83 c4 0c             	add    esp,0xc
c000df00:	c3                   	ret    
c000df01:	90                   	nop
c000df02:	66 90                	xchg   ax,ax

c000df04 <Mouse::~Mouse()>:
c000df04:	83 ec 0c             	sub    esp,0xc
c000df07:	ba 24 1f 02 c0       	mov    edx,0xc0021f24
c000df0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df10:	89 10                	mov    DWORD PTR [eax],edx
c000df12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df16:	83 ec 0c             	sub    esp,0xc
c000df19:	50                   	push   eax
c000df1a:	e8 b3 e9 ff ff       	call   c000c8d2 <Device::~Device()>
c000df1f:	83 c4 10             	add    esp,0x10
c000df22:	90                   	nop
c000df23:	83 c4 0c             	add    esp,0xc
c000df26:	c3                   	ret    
c000df27:	90                   	nop

c000df28 <Mouse::~Mouse()>:
c000df28:	83 ec 0c             	sub    esp,0xc
c000df2b:	83 ec 0c             	sub    esp,0xc
c000df2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df32:	e8 cd ff ff ff       	call   c000df04 <Mouse::~Mouse()>
c000df37:	83 c4 10             	add    esp,0x10
c000df3a:	83 ec 08             	sub    esp,0x8
c000df3d:	68 58 01 00 00       	push   0x158
c000df42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df46:	e8 f1 c8 ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000df4b:	83 c4 10             	add    esp,0x10
c000df4e:	83 c4 0c             	add    esp,0xc
c000df51:	c3                   	ret    

c000df52 <NIC::getMAC()>:
c000df52:	31 c0                	xor    eax,eax
c000df54:	31 d2                	xor    edx,edx
c000df56:	c3                   	ret    
c000df57:	90                   	nop

c000df58 <NIC::write(int, unsigned char*, int*)>:
c000df58:	b8 01 00 00 00       	mov    eax,0x1
c000df5d:	c3                   	ret    

c000df5e <NIC::NIC(char const*)>:
c000df5e:	83 ec 0c             	sub    esp,0xc
c000df61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df65:	83 ec 08             	sub    esp,0x8
c000df68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df6c:	50                   	push   eax
c000df6d:	e8 30 ec ff ff       	call   c000cba2 <Device::Device(char const*)>
c000df72:	83 c4 10             	add    esp,0x10
c000df75:	ba 50 1f 02 c0       	mov    edx,0xc0021f50
c000df7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df7e:	89 10                	mov    DWORD PTR [eax],edx
c000df80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df84:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000df8e:	90                   	nop
c000df8f:	83 c4 0c             	add    esp,0xc
c000df92:	c3                   	ret    
c000df93:	90                   	nop

c000df94 <NIC::~NIC()>:
c000df94:	83 ec 0c             	sub    esp,0xc
c000df97:	ba 50 1f 02 c0       	mov    edx,0xc0021f50
c000df9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfa0:	89 10                	mov    DWORD PTR [eax],edx
c000dfa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfa6:	83 ec 0c             	sub    esp,0xc
c000dfa9:	50                   	push   eax
c000dfaa:	e8 23 e9 ff ff       	call   c000c8d2 <Device::~Device()>
c000dfaf:	83 c4 10             	add    esp,0x10
c000dfb2:	90                   	nop
c000dfb3:	83 c4 0c             	add    esp,0xc
c000dfb6:	c3                   	ret    
c000dfb7:	90                   	nop

c000dfb8 <NIC::~NIC()>:
c000dfb8:	83 ec 0c             	sub    esp,0xc
c000dfbb:	83 ec 0c             	sub    esp,0xc
c000dfbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfc2:	e8 cd ff ff ff       	call   c000df94 <NIC::~NIC()>
c000dfc7:	83 c4 10             	add    esp,0x10
c000dfca:	83 ec 08             	sub    esp,0x8
c000dfcd:	68 58 01 00 00       	push   0x158
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 61 c8 ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	83 c4 0c             	add    esp,0xc
c000dfe1:	c3                   	ret    

c000dfe2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dfe2:	55                   	push   ebp
c000dfe3:	57                   	push   edi
c000dfe4:	56                   	push   esi
c000dfe5:	53                   	push   ebx
c000dfe6:	81 ec 28 01 00 00    	sub    esp,0x128
c000dfec:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000dff3:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000dffa:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000e001:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000e008:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e00c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e010:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e017:	e8 82 ec ff ff       	call   c000cc9e <Device::getName()>
c000e01c:	5a                   	pop    edx
c000e01d:	59                   	pop    ecx
c000e01e:	50                   	push   eax
c000e01f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000e023:	55                   	push   ebp
c000e024:	e8 27 26 ff ff       	call   c0000650 <strcpy>
c000e029:	5b                   	pop    ebx
c000e02a:	58                   	pop    eax
c000e02b:	68 7c 1f 02 c0       	push   0xc0021f7c
c000e030:	55                   	push   ebp
c000e031:	e8 3a 28 ff ff       	call   c0000870 <strcat>
c000e036:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000e03d:	e8 c1 9a ff ff       	call   c0007b03 <malloc>
c000e042:	83 c4 0c             	add    esp,0xc
c000e045:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e049:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e04d:	89 c3                	mov    ebx,eax
c000e04f:	57                   	push   edi
c000e050:	56                   	push   esi
c000e051:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000e058:	55                   	push   ebp
c000e059:	50                   	push   eax
c000e05a:	e8 57 fb ff ff       	call   c000dbb6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000e05f:	83 c4 14             	add    esp,0x14
c000e062:	53                   	push   ebx
c000e063:	e8 0e fc ff ff       	call   c000dc76 <LogicalDisk::assignDriveLetter()>
c000e068:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e06b:	e8 c0 fc ff ff       	call   c000dd30 <LogicalDisk::mount()>
c000e070:	58                   	pop    eax
c000e071:	5a                   	pop    edx
c000e072:	53                   	push   ebx
c000e073:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e07a:	e8 51 e9 ff ff       	call   c000c9d0 <Device::addChild(Device*)>
c000e07f:	81 c4 2c 01 00 00    	add    esp,0x12c
c000e085:	5b                   	pop    ebx
c000e086:	5e                   	pop    esi
c000e087:	5f                   	pop    edi
c000e088:	5d                   	pop    ebp
c000e089:	c3                   	ret    

c000e08a <createPartitionsForDisk(PhysicalDisk*)>:
c000e08a:	55                   	push   ebp
c000e08b:	57                   	push   edi
c000e08c:	56                   	push   esi
c000e08d:	53                   	push   ebx
c000e08e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000e094:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000e09b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e0a1:	3d 00 02 00 00       	cmp    eax,0x200
c000e0a6:	74 27                	je     c000e0cf <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000e0a8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000e0ae:	83 ec 10             	sub    esp,0x10
c000e0b1:	99                   	cdq    
c000e0b2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000e0b8:	52                   	push   edx
c000e0b9:	50                   	push   eax
c000e0ba:	0f a4 f7 0a          	shld   edi,esi,0xa
c000e0be:	c1 e6 0a             	shl    esi,0xa
c000e0c1:	89 fd                	mov    ebp,edi
c000e0c3:	55                   	push   ebp
c000e0c4:	56                   	push   esi
c000e0c5:	e8 76 17 01 00       	call   c001f840 <__udivdi3>
c000e0ca:	e9 b9 00 00 00       	jmp    c000e188 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e0cf:	83 ec 0c             	sub    esp,0xc
c000e0d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e0d4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000e0d8:	56                   	push   esi
c000e0d9:	6a 01                	push   0x1
c000e0db:	6a 00                	push   0x0
c000e0dd:	6a 00                	push   0x0
c000e0df:	53                   	push   ebx
c000e0e0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000e0e3:	83 c4 20             	add    esp,0x20
c000e0e6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000e0ee:	75 0a                	jne    c000e0fa <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000e0f0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000e0f8:	74 2c                	je     c000e126 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000e0fa:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e100:	83 ec 10             	sub    esp,0x10
c000e103:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e109:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e10f:	89 f7                	mov    edi,esi
c000e111:	c1 ff 1f             	sar    edi,0x1f
c000e114:	57                   	push   edi
c000e115:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e119:	56                   	push   esi
c000e11a:	c1 e0 0a             	shl    eax,0xa
c000e11d:	52                   	push   edx
c000e11e:	50                   	push   eax
c000e11f:	e8 1c 17 01 00       	call   c001f840 <__udivdi3>
c000e124:	eb 62                	jmp    c000e188 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e126:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000e12d:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000e134:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000e13b:	89 cf                	mov    edi,ecx
c000e13d:	83 e2 7f             	and    edx,0x7f
c000e140:	83 e7 7f             	and    edi,0x7f
c000e143:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000e146:	83 e0 7f             	and    eax,0x7f
c000e149:	8d 14 01             	lea    edx,[ecx+eax*1]
c000e14c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000e153:	83 e0 7f             	and    eax,0x7f
c000e156:	01 d0                	add    eax,edx
c000e158:	84 c0                	test   al,al
c000e15a:	89 c5                	mov    ebp,eax
c000e15c:	74 41                	je     c000e19f <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000e15e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e164:	83 ec 10             	sub    esp,0x10
c000e167:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e16d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e173:	89 f7                	mov    edi,esi
c000e175:	c1 ff 1f             	sar    edi,0x1f
c000e178:	57                   	push   edi
c000e179:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e17d:	56                   	push   esi
c000e17e:	c1 e0 0a             	shl    eax,0xa
c000e181:	52                   	push   edx
c000e182:	50                   	push   eax
c000e183:	e8 b8 16 01 00       	call   c001f840 <__udivdi3>
c000e188:	83 c4 14             	add    esp,0x14
c000e18b:	52                   	push   edx
c000e18c:	50                   	push   eax
c000e18d:	6a 00                	push   0x0
c000e18f:	6a 00                	push   0x0
c000e191:	53                   	push   ebx
c000e192:	e8 4b fe ff ff       	call   c000dfe2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e197:	83 c4 20             	add    esp,0x20
c000e19a:	e9 73 01 00 00       	jmp    c000e312 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000e19f:	89 f0                	mov    eax,esi
c000e1a1:	31 c9                	xor    ecx,ecx
c000e1a3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000e1aa:	75 02                	jne    c000e1ae <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000e1ac:	89 cd                	mov    ebp,ecx
c000e1ae:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000e1b6:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000e1bd:	83 c0 10             	add    eax,0x10
c000e1c0:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000e1c8:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000e1cf:	c1 e2 08             	shl    edx,0x8
c000e1d2:	c1 e6 10             	shl    esi,0x10
c000e1d5:	09 f2                	or     edx,esi
c000e1d7:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000e1de:	09 f2                	or     edx,esi
c000e1e0:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000e1e7:	c1 e6 18             	shl    esi,0x18
c000e1ea:	09 f2                	or     edx,esi
c000e1ec:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000e1f3:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000e1f7:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000e1fe:	c1 e6 10             	shl    esi,0x10
c000e201:	c1 e2 08             	shl    edx,0x8
c000e204:	09 f2                	or     edx,esi
c000e206:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000e20d:	09 f2                	or     edx,esi
c000e20f:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000e216:	c1 e6 18             	shl    esi,0x18
c000e219:	09 f2                	or     edx,esi
c000e21b:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000e21f:	41                   	inc    ecx
c000e220:	83 f9 04             	cmp    ecx,0x4
c000e223:	0f 85 7a ff ff ff    	jne    c000e1a3 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000e229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e22d:	83 f0 01             	xor    eax,0x1
c000e230:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e234:	75 4f                	jne    c000e285 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e236:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e23a:	83 f0 01             	xor    eax,0x1
c000e23d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e241:	75 42                	jne    c000e285 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e243:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e249:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e251:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e257:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e25f:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e265:	89 f7                	mov    edi,esi
c000e267:	c1 ff 1f             	sar    edi,0x1f
c000e26a:	57                   	push   edi
c000e26b:	56                   	push   esi
c000e26c:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e270:	52                   	push   edx
c000e271:	c1 e0 0a             	shl    eax,0xa
c000e274:	50                   	push   eax
c000e275:	e8 c6 15 01 00       	call   c001f840 <__udivdi3>
c000e27a:	83 c4 10             	add    esp,0x10
c000e27d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e281:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e285:	89 e8                	mov    eax,ebp
c000e287:	0f b6 e8             	movzx  ebp,al
c000e28a:	85 ed                	test   ebp,ebp
c000e28c:	74 50                	je     c000e2de <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e28e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e292:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e296:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e29a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e29e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e2a2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e2a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e2aa:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e2b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e2be:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e2c2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e2c6:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e2ca:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e2ce:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e2d2:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e2d6:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e2da:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e2de:	31 ed                	xor    ebp,ebp
c000e2e0:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e2e4:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e2e8:	89 f8                	mov    eax,edi
c000e2ea:	09 f0                	or     eax,esi
c000e2ec:	74 1e                	je     c000e30c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e2ee:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e2f2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e2f6:	89 d1                	mov    ecx,edx
c000e2f8:	09 c1                	or     ecx,eax
c000e2fa:	74 10                	je     c000e30c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e2fc:	83 ec 0c             	sub    esp,0xc
c000e2ff:	57                   	push   edi
c000e300:	56                   	push   esi
c000e301:	52                   	push   edx
c000e302:	50                   	push   eax
c000e303:	53                   	push   ebx
c000e304:	e8 d9 fc ff ff       	call   c000dfe2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e309:	83 c4 20             	add    esp,0x20
c000e30c:	45                   	inc    ebp
c000e30d:	83 fd 04             	cmp    ebp,0x4
c000e310:	75 ce                	jne    c000e2e0 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e312:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e318:	5b                   	pop    ebx
c000e319:	5e                   	pop    esi
c000e31a:	5f                   	pop    edi
c000e31b:	5d                   	pop    ebp
c000e31c:	c3                   	ret    
c000e31d:	66 90                	xchg   ax,ax
c000e31f:	90                   	nop

c000e320 <Serial::Serial(char const*)>:
c000e320:	83 ec 0c             	sub    esp,0xc
c000e323:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e327:	83 ec 08             	sub    esp,0x8
c000e32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e32e:	50                   	push   eax
c000e32f:	e8 6e e8 ff ff       	call   c000cba2 <Device::Device(char const*)>
c000e334:	83 c4 10             	add    esp,0x10
c000e337:	ba 90 1f 02 c0       	mov    edx,0xc0021f90
c000e33c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e340:	89 10                	mov    DWORD PTR [eax],edx
c000e342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e346:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e350:	90                   	nop
c000e351:	83 c4 0c             	add    esp,0xc
c000e354:	c3                   	ret    
c000e355:	90                   	nop
c000e356:	66 90                	xchg   ax,ax

c000e358 <Serial::~Serial()>:
c000e358:	83 ec 0c             	sub    esp,0xc
c000e35b:	ba 90 1f 02 c0       	mov    edx,0xc0021f90
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	89 10                	mov    DWORD PTR [eax],edx
c000e366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36a:	83 ec 0c             	sub    esp,0xc
c000e36d:	50                   	push   eax
c000e36e:	e8 5f e5 ff ff       	call   c000c8d2 <Device::~Device()>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	90                   	nop
c000e377:	83 c4 0c             	add    esp,0xc
c000e37a:	c3                   	ret    
c000e37b:	90                   	nop

c000e37c <Serial::~Serial()>:
c000e37c:	83 ec 0c             	sub    esp,0xc
c000e37f:	83 ec 0c             	sub    esp,0xc
c000e382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e386:	e8 cd ff ff ff       	call   c000e358 <Serial::~Serial()>
c000e38b:	83 c4 10             	add    esp,0x10
c000e38e:	83 ec 08             	sub    esp,0x8
c000e391:	68 58 01 00 00       	push   0x158
c000e396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e39a:	e8 9d c4 ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000e39f:	83 c4 10             	add    esp,0x10
c000e3a2:	83 c4 0c             	add    esp,0xc
c000e3a5:	c3                   	ret    
c000e3a6:	66 90                	xchg   ax,ax

c000e3a8 <Timer::Timer(char const*)>:
c000e3a8:	83 ec 0c             	sub    esp,0xc
c000e3ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3af:	83 ec 08             	sub    esp,0x8
c000e3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3b6:	50                   	push   eax
c000e3b7:	e8 e6 e7 ff ff       	call   c000cba2 <Device::Device(char const*)>
c000e3bc:	83 c4 10             	add    esp,0x10
c000e3bf:	ba d4 1f 02 c0       	mov    edx,0xc0021fd4
c000e3c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c8:	89 10                	mov    DWORD PTR [eax],edx
c000e3ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ce:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e3d8:	90                   	nop
c000e3d9:	83 c4 0c             	add    esp,0xc
c000e3dc:	c3                   	ret    
c000e3dd:	90                   	nop
c000e3de:	66 90                	xchg   ax,ax

c000e3e0 <Timer::~Timer()>:
c000e3e0:	83 ec 0c             	sub    esp,0xc
c000e3e3:	ba d4 1f 02 c0       	mov    edx,0xc0021fd4
c000e3e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ec:	89 10                	mov    DWORD PTR [eax],edx
c000e3ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3f2:	83 ec 0c             	sub    esp,0xc
c000e3f5:	50                   	push   eax
c000e3f6:	e8 d7 e4 ff ff       	call   c000c8d2 <Device::~Device()>
c000e3fb:	83 c4 10             	add    esp,0x10
c000e3fe:	90                   	nop
c000e3ff:	83 c4 0c             	add    esp,0xc
c000e402:	c3                   	ret    
c000e403:	90                   	nop

c000e404 <Timer::~Timer()>:
c000e404:	83 ec 0c             	sub    esp,0xc
c000e407:	83 ec 0c             	sub    esp,0xc
c000e40a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e40e:	e8 cd ff ff ff       	call   c000e3e0 <Timer::~Timer()>
c000e413:	83 c4 10             	add    esp,0x10
c000e416:	83 ec 08             	sub    esp,0x8
c000e419:	68 5c 01 00 00       	push   0x15c
c000e41e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e422:	e8 15 c4 ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000e427:	83 c4 10             	add    esp,0x10
c000e42a:	83 c4 0c             	add    esp,0xc
c000e42d:	c3                   	ret    

c000e42e <Timer::read()>:
c000e42e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e432:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e438:	c3                   	ret    

c000e439 <setupTimer(int)>:
c000e439:	53                   	push   ebx
c000e43a:	83 ec 14             	sub    esp,0x14
c000e43d:	68 5c 01 00 00       	push   0x15c
c000e442:	e8 bc 96 ff ff       	call   c0007b03 <malloc>
c000e447:	89 04 24             	mov    DWORD PTR [esp],eax
c000e44a:	89 c3                	mov    ebx,eax
c000e44c:	e8 57 0c 01 00       	call   c001f0a8 <PIT::PIT()>
c000e451:	58                   	pop    eax
c000e452:	5a                   	pop    edx
c000e453:	53                   	push   ebx
c000e454:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000e45a:	e8 71 e5 ff ff       	call   c000c9d0 <Device::addChild(Device*)>
c000e45f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e461:	6a 00                	push   0x0
c000e463:	6a 00                	push   0x0
c000e465:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e469:	53                   	push   ebx
c000e46a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e46d:	83 c4 28             	add    esp,0x28
c000e470:	89 d8                	mov    eax,ebx
c000e472:	5b                   	pop    ebx
c000e473:	c3                   	ret    

c000e474 <timerHandler(unsigned int)>:
c000e474:	56                   	push   esi
c000e475:	53                   	push   ebx
c000e476:	51                   	push   ecx
c000e477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e47b:	01 05 ec b8 02 c0    	add    DWORD PTR ds:0xc002b8ec,eax
c000e481:	80 3d bd 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebd,0x0
c000e488:	0f 84 4a 01 00 00    	je     c000e5d8 <timerHandler(unsigned int)+0x164>
c000e48e:	fa                   	cli    
c000e48f:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e495:	83 ec 0c             	sub    esp,0xc
c000e498:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e49d:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c000e4a3:	e8 68 19 01 00       	call   c001fe10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e4a8:	83 c4 10             	add    esp,0x10
c000e4ab:	84 c0                	test   al,al
c000e4ad:	0f 85 a1 00 00 00    	jne    c000e554 <timerHandler(unsigned int)+0xe0>
c000e4b3:	83 ec 0c             	sub    esp,0xc
c000e4b6:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4bb:	e8 6c 19 01 00       	call   c001fe2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4c0:	83 c4 10             	add    esp,0x10
c000e4c3:	89 c6                	mov    esi,eax
c000e4c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e4c8:	83 ec 0c             	sub    esp,0xc
c000e4cb:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4d0:	e8 57 19 01 00       	call   c001fe2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4d5:	c7 04 24 d8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6d8
c000e4dc:	89 c3                	mov    ebx,eax
c000e4de:	e8 51 19 01 00       	call   c001fe34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e4e3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e4e6:	83 c4 10             	add    esp,0x10
c000e4e9:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c000e4ef:	77 23                	ja     c000e514 <timerHandler(unsigned int)+0xa0>
c000e4f1:	83 ec 0c             	sub    esp,0xc
c000e4f4:	53                   	push   ebx
c000e4f5:	e8 82 81 00 00       	call   c001667c <unblockTask(ThreadControlBlock*)>
c000e4fa:	83 c4 10             	add    esp,0x10
c000e4fd:	39 de                	cmp    esi,ebx
c000e4ff:	75 27                	jne    c000e528 <timerHandler(unsigned int)+0xb4>
c000e501:	83 ec 0c             	sub    esp,0xc
c000e504:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e509:	e8 1e 19 01 00       	call   c001fe2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e50e:	89 c6                	mov    esi,eax
c000e510:	eb 12                	jmp    c000e524 <timerHandler(unsigned int)+0xb0>
c000e512:	66 90                	xchg   ax,ax
c000e514:	52                   	push   edx
c000e515:	52                   	push   edx
c000e516:	53                   	push   ebx
c000e517:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e51c:	e8 cf 19 01 00       	call   c001fef0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e521:	8d 76 00             	lea    esi,[esi+0x0]
c000e524:	83 c4 10             	add    esp,0x10
c000e527:	90                   	nop
c000e528:	83 ec 0c             	sub    esp,0xc
c000e52b:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e530:	e8 db 18 01 00       	call   c001fe10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e535:	83 c4 10             	add    esp,0x10
c000e538:	84 c0                	test   al,al
c000e53a:	75 18                	jne    c000e554 <timerHandler(unsigned int)+0xe0>
c000e53c:	83 ec 0c             	sub    esp,0xc
c000e53f:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e544:	e8 e3 18 01 00       	call   c001fe2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e549:	83 c4 10             	add    esp,0x10
c000e54c:	39 f0                	cmp    eax,esi
c000e54e:	0f 85 74 ff ff ff    	jne    c000e4c8 <timerHandler(unsigned int)+0x54>
c000e554:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e559:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e55d:	74 41                	je     c000e5a0 <timerHandler(unsigned int)+0x12c>
c000e55f:	80 3d bc 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebc,0x0
c000e566:	74 38                	je     c000e5a0 <timerHandler(unsigned int)+0x12c>
c000e568:	fa                   	cli    
c000e569:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e56f:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c000e574:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e57a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e57d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e583:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e586:	72 08                	jb     c000e590 <timerHandler(unsigned int)+0x11c>
c000e588:	e8 f7 7b 00 00       	call   c0016184 <schedule()>
c000e58d:	8d 76 00             	lea    esi,[esi+0x0]
c000e590:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e595:	48                   	dec    eax
c000e596:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e59b:	75 03                	jne    c000e5a0 <timerHandler(unsigned int)+0x12c>
c000e59d:	fb                   	sti    
c000e59e:	66 90                	xchg   ax,ax
c000e5a0:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000e5a5:	48                   	dec    eax
c000e5a6:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000e5ab:	75 1b                	jne    c000e5c8 <timerHandler(unsigned int)+0x154>
c000e5ad:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c000e5b4:	74 12                	je     c000e5c8 <timerHandler(unsigned int)+0x154>
c000e5b6:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000e5c0:	e8 bf 7b 00 00       	call   c0016184 <schedule()>
c000e5c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e5c8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e5cd:	48                   	dec    eax
c000e5ce:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e5d3:	75 03                	jne    c000e5d8 <timerHandler(unsigned int)+0x164>
c000e5d5:	fb                   	sti    
c000e5d6:	66 90                	xchg   ax,ax
c000e5d8:	58                   	pop    eax
c000e5d9:	5b                   	pop    ebx
c000e5da:	5e                   	pop    esi
c000e5db:	c3                   	ret    

c000e5dc <VCache::VCache(PhysicalDisk*)>:
c000e5dc:	53                   	push   ebx
c000e5dd:	83 ec 18             	sub    esp,0x18
c000e5e0:	ba 04 20 02 c0       	mov    edx,0xc0022004
c000e5e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5e9:	89 10                	mov    DWORD PTR [eax],edx
c000e5eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5ef:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e5f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5fa:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e601:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e605:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e60c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e613:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e617:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e61e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e625:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e629:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e630:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e634:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e638:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e63c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e643:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e64a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e64e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e652:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e656:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e65a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e65e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e662:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e666:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e66d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e675:	83 ec 0c             	sub    esp,0xc
c000e678:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e67c:	e8 82 94 ff ff       	call   c0007b03 <malloc>
c000e681:	83 c4 10             	add    esp,0x10
c000e684:	89 c3                	mov    ebx,eax
c000e686:	83 ec 0c             	sub    esp,0xc
c000e689:	53                   	push   ebx
c000e68a:	e8 95 78 00 00       	call   c0015f24 <Mutex::Mutex()>
c000e68f:	83 c4 10             	add    esp,0x10
c000e692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e696:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e699:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e69d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e6a1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e6a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6a8:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e6af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6b3:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e6b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6bd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e6c0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6c4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e6ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e6d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e6d4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e6d7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e6da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6de:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e6e2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6e6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e6ec:	05 00 02 00 00       	add    eax,0x200
c000e6f1:	c1 e0 03             	shl    eax,0x3
c000e6f4:	83 ec 0c             	sub    esp,0xc
c000e6f7:	50                   	push   eax
c000e6f8:	e8 06 94 ff ff       	call   c0007b03 <malloc>
c000e6fd:	83 c4 10             	add    esp,0x10
c000e700:	89 c2                	mov    edx,eax
c000e702:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e706:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e709:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e70d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e714:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e718:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e71c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e720:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e726:	89 d0                	mov    eax,edx
c000e728:	c1 e0 02             	shl    eax,0x2
c000e72b:	01 d0                	add    eax,edx
c000e72d:	c1 e0 04             	shl    eax,0x4
c000e730:	83 ec 0c             	sub    esp,0xc
c000e733:	50                   	push   eax
c000e734:	e8 ca 93 ff ff       	call   c0007b03 <malloc>
c000e739:	83 c4 10             	add    esp,0x10
c000e73c:	89 c2                	mov    edx,eax
c000e73e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e742:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e745:	90                   	nop
c000e746:	83 c4 18             	add    esp,0x18
c000e749:	5b                   	pop    ebx
c000e74a:	c3                   	ret    
c000e74b:	90                   	nop

c000e74c <VCache::invalidateReadBuffer()>:
c000e74c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e750:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e756:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e75a:	c3                   	ret    
c000e75b:	90                   	nop

c000e75c <VCache::writeWriteBuffer()>:
c000e75c:	53                   	push   ebx
c000e75d:	83 ec 08             	sub    esp,0x8
c000e760:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e764:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e768:	74 1e                	je     c000e788 <VCache::writeWriteBuffer()+0x2c>
c000e76a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e76d:	83 ec 0c             	sub    esp,0xc
c000e770:	8b 10                	mov    edx,DWORD PTR [eax]
c000e772:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e775:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e778:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e77b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e77e:	50                   	push   eax
c000e77f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e782:	83 c4 20             	add    esp,0x20
c000e785:	8d 76 00             	lea    esi,[esi+0x0]
c000e788:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e78f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e796:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e79a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e7a1:	83 c4 08             	add    esp,0x8
c000e7a4:	5b                   	pop    ebx
c000e7a5:	c3                   	ret    
c000e7a6:	66 90                	xchg   ax,ax

c000e7a8 <VCache::~VCache()>:
c000e7a8:	83 ec 0c             	sub    esp,0xc
c000e7ab:	ba 04 20 02 c0       	mov    edx,0xc0022004
c000e7b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b4:	89 10                	mov    DWORD PTR [eax],edx
c000e7b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ba:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e7bd:	0f b6 c0             	movzx  eax,al
c000e7c0:	85 c0                	test   eax,eax
c000e7c2:	74 10                	je     c000e7d4 <VCache::~VCache()+0x2c>
c000e7c4:	83 ec 0c             	sub    esp,0xc
c000e7c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7cb:	e8 8c ff ff ff       	call   c000e75c <VCache::writeWriteBuffer()>
c000e7d0:	83 c4 10             	add    esp,0x10
c000e7d3:	90                   	nop
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e7db:	83 ec 0c             	sub    esp,0xc
c000e7de:	50                   	push   eax
c000e7df:	e8 2f 93 ff ff       	call   c0007b13 <free>
c000e7e4:	83 c4 10             	add    esp,0x10
c000e7e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7eb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e7ee:	83 ec 0c             	sub    esp,0xc
c000e7f1:	50                   	push   eax
c000e7f2:	e8 1c 93 ff ff       	call   c0007b13 <free>
c000e7f7:	83 c4 10             	add    esp,0x10
c000e7fa:	90                   	nop
c000e7fb:	83 c4 0c             	add    esp,0xc
c000e7fe:	c3                   	ret    
c000e7ff:	90                   	nop

c000e800 <VCache::~VCache()>:
c000e800:	83 ec 0c             	sub    esp,0xc
c000e803:	83 ec 0c             	sub    esp,0xc
c000e806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e80a:	e8 99 ff ff ff       	call   c000e7a8 <VCache::~VCache()>
c000e80f:	83 c4 10             	add    esp,0x10
c000e812:	83 ec 08             	sub    esp,0x8
c000e815:	6a 44                	push   0x44
c000e817:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e81b:	e8 1c c0 ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000e820:	83 c4 10             	add    esp,0x10
c000e823:	83 c4 0c             	add    esp,0xc
c000e826:	c3                   	ret    
c000e827:	90                   	nop

c000e828 <VCache::write(unsigned long long, int, void*)>:
c000e828:	55                   	push   ebp
c000e829:	57                   	push   edi
c000e82a:	56                   	push   esi
c000e82b:	53                   	push   ebx
c000e82c:	83 ec 1c             	sub    esp,0x1c
c000e82f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e833:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e837:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e83b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e83f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e843:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e847:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e84b:	74 0f                	je     c000e85c <VCache::write(unsigned long long, int, void*)+0x34>
c000e84d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e851:	53                   	push   ebx
c000e852:	e8 f5 fe ff ff       	call   c000e74c <VCache::invalidateReadBuffer()>
c000e857:	58                   	pop    eax
c000e858:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e85c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e860:	74 66                	je     c000e8c8 <VCache::write(unsigned long long, int, void*)+0xa0>
c000e862:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e865:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e869:	99                   	cdq    
c000e86a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e86d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e870:	89 c6                	mov    esi,eax
c000e872:	31 ce                	xor    esi,ecx
c000e874:	89 d0                	mov    eax,edx
c000e876:	31 e8                	xor    eax,ebp
c000e878:	09 c6                	or     esi,eax
c000e87a:	75 38                	jne    c000e8b4 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e87c:	83 ff 01             	cmp    edi,0x1
c000e87f:	75 33                	jne    c000e8b4 <VCache::write(unsigned long long, int, void*)+0x8c>
c000e881:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e884:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e888:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e88c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e892:	0f af f9             	imul   edi,ecx
c000e895:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000e898:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e89a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e89d:	40                   	inc    eax
c000e89e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e8a1:	83 f8 50             	cmp    eax,0x50
c000e8a4:	75 72                	jne    c000e918 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e8a6:	83 ec 0c             	sub    esp,0xc
c000e8a9:	53                   	push   ebx
c000e8aa:	e8 ad fe ff ff       	call   c000e75c <VCache::writeWriteBuffer()>
c000e8af:	83 c4 10             	add    esp,0x10
c000e8b2:	eb 64                	jmp    c000e918 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e8b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e8b8:	83 ec 0c             	sub    esp,0xc
c000e8bb:	53                   	push   ebx
c000e8bc:	e8 9b fe ff ff       	call   c000e75c <VCache::writeWriteBuffer()>
c000e8c1:	83 c4 10             	add    esp,0x10
c000e8c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e8c8:	83 ff 4f             	cmp    edi,0x4f
c000e8cb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e8ce:	7f 20                	jg     c000e8f0 <VCache::write(unsigned long long, int, void*)+0xc8>
c000e8d0:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e8d3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e8d7:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000e8da:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e8dd:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e8e0:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e8e4:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e8ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e8ec:	eb 2a                	jmp    c000e918 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e8ee:	66 90                	xchg   ax,ax
c000e8f0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e8f4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e8f6:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e8fa:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e8fe:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e902:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000e906:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e90a:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e90d:	83 c4 1c             	add    esp,0x1c
c000e910:	5b                   	pop    ebx
c000e911:	5e                   	pop    esi
c000e912:	5f                   	pop    edi
c000e913:	5d                   	pop    ebp
c000e914:	ff e0                	jmp    eax
c000e916:	66 90                	xchg   ax,ax
c000e918:	83 c4 1c             	add    esp,0x1c
c000e91b:	31 c0                	xor    eax,eax
c000e91d:	5b                   	pop    ebx
c000e91e:	5e                   	pop    esi
c000e91f:	5f                   	pop    edi
c000e920:	5d                   	pop    ebp
c000e921:	c3                   	ret    

c000e922 <VCache::read(unsigned long long, int, void*)>:
c000e922:	55                   	push   ebp
c000e923:	57                   	push   edi
c000e924:	56                   	push   esi
c000e925:	53                   	push   ebx
c000e926:	83 ec 1c             	sub    esp,0x1c
c000e929:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e92d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e931:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e935:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e939:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e93d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e941:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e945:	74 0d                	je     c000e954 <VCache::read(unsigned long long, int, void*)+0x32>
c000e947:	83 ec 0c             	sub    esp,0xc
c000e94a:	57                   	push   edi
c000e94b:	e8 0c fe ff ff       	call   c000e75c <VCache::writeWriteBuffer()>
c000e950:	83 c4 10             	add    esp,0x10
c000e953:	90                   	nop
c000e954:	83 fd 01             	cmp    ebp,0x1
c000e957:	0f 85 93 00 00 00    	jne    c000e9f0 <VCache::read(unsigned long long, int, void*)+0xce>
c000e95d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e960:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e967:	89 04 24             	mov    DWORD PTR [esp],eax
c000e96a:	0f 85 80 00 00 00    	jne    c000e9f0 <VCache::read(unsigned long long, int, void*)+0xce>
c000e970:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000e973:	89 cd                	mov    ebp,ecx
c000e975:	f7 dd                	neg    ebp
c000e977:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000e97b:	89 e8                	mov    eax,ebp
c000e97d:	21 dd                	and    ebp,ebx
c000e97f:	c1 f8 1f             	sar    eax,0x1f
c000e982:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e986:	89 e8                	mov    eax,ebp
c000e988:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000e98c:	21 f5                	and    ebp,esi
c000e98e:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e992:	89 ea                	mov    edx,ebp
c000e994:	74 2e                	je     c000e9c4 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e996:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000e999:	75 29                	jne    c000e9c4 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e99b:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e99e:	75 24                	jne    c000e9c4 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e9a0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9a3:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e9a9:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e9ac:	8d 70 ff             	lea    esi,[eax-0x1]
c000e9af:	21 f3                	and    ebx,esi
c000e9b1:	0f af d9             	imul   ebx,ecx
c000e9b4:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e9b7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e9bb:	89 de                	mov    esi,ebx
c000e9bd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e9bf:	31 c0                	xor    eax,eax
c000e9c1:	eb 61                	jmp    c000ea24 <VCache::read(unsigned long long, int, void*)+0x102>
c000e9c3:	90                   	nop
c000e9c4:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e9c8:	83 ec 0c             	sub    esp,0xc
c000e9cb:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e9ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e9d2:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e9d5:	8b 36                	mov    esi,DWORD PTR [esi]
c000e9d7:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e9da:	51                   	push   ecx
c000e9db:	52                   	push   edx
c000e9dc:	50                   	push   eax
c000e9dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9e1:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000e9e4:	83 c4 20             	add    esp,0x20
c000e9e7:	85 c0                	test   eax,eax
c000e9e9:	75 39                	jne    c000ea24 <VCache::read(unsigned long long, int, void*)+0x102>
c000e9eb:	eb b3                	jmp    c000e9a0 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e9ed:	8d 76 00             	lea    esi,[esi+0x0]
c000e9f0:	83 ec 0c             	sub    esp,0xc
c000e9f3:	57                   	push   edi
c000e9f4:	e8 53 fd ff ff       	call   c000e74c <VCache::invalidateReadBuffer()>
c000e9f9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ea00:	8b 10                	mov    edx,DWORD PTR [eax]
c000ea02:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000ea06:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000ea0a:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000ea0e:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000ea12:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ea16:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000ea19:	83 c4 2c             	add    esp,0x2c
c000ea1c:	5b                   	pop    ebx
c000ea1d:	5e                   	pop    esi
c000ea1e:	5f                   	pop    edi
c000ea1f:	5d                   	pop    ebp
c000ea20:	ff e0                	jmp    eax
c000ea22:	66 90                	xchg   ax,ax
c000ea24:	83 c4 1c             	add    esp,0x1c
c000ea27:	5b                   	pop    ebx
c000ea28:	5e                   	pop    esi
c000ea29:	5f                   	pop    edi
c000ea2a:	5d                   	pop    ebp
c000ea2b:	c3                   	ret    

c000ea2c <Video::putrect(int, int, int, int, unsigned int)>:
c000ea2c:	55                   	push   ebp
c000ea2d:	57                   	push   edi
c000ea2e:	56                   	push   esi
c000ea2f:	53                   	push   ebx
c000ea30:	83 ec 1c             	sub    esp,0x1c
c000ea33:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ea37:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea3b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ea3f:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ea43:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ea47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea4b:	01 df                	add    edi,ebx
c000ea4d:	39 fb                	cmp    ebx,edi
c000ea4f:	7d 1f                	jge    c000ea70 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ea51:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea55:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ea59:	7d 12                	jge    c000ea6d <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ea5b:	8b 16                	mov    edx,DWORD PTR [esi]
c000ea5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ea61:	53                   	push   ebx
c000ea62:	55                   	push   ebp
c000ea63:	45                   	inc    ebp
c000ea64:	56                   	push   esi
c000ea65:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ea68:	83 c4 10             	add    esp,0x10
c000ea6b:	eb e8                	jmp    c000ea55 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ea6d:	43                   	inc    ebx
c000ea6e:	eb dd                	jmp    c000ea4d <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ea70:	83 c4 1c             	add    esp,0x1c
c000ea73:	5b                   	pop    ebx
c000ea74:	5e                   	pop    esi
c000ea75:	5f                   	pop    edi
c000ea76:	5d                   	pop    ebp
c000ea77:	c3                   	ret    

c000ea78 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ea78:	55                   	push   ebp
c000ea79:	57                   	push   edi
c000ea7a:	31 ff                	xor    edi,edi
c000ea7c:	56                   	push   esi
c000ea7d:	53                   	push   ebx
c000ea7e:	83 ec 1c             	sub    esp,0x1c
c000ea81:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ea85:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ea89:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ea90:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ea95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ea99:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ea9d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000eaa1:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000eaa4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eaa8:	01 f9                	add    ecx,edi
c000eaaa:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000eaae:	7d 2f                	jge    c000eadf <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000eab0:	31 f6                	xor    esi,esi
c000eab2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eab6:	01 f2                	add    edx,esi
c000eab8:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000eabc:	7d 1a                	jge    c000ead8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000eabe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000eac1:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000eac4:	46                   	inc    esi
c000eac5:	51                   	push   ecx
c000eac6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000eaca:	52                   	push   edx
c000eacb:	55                   	push   ebp
c000eacc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eacf:	83 c4 10             	add    esp,0x10
c000ead2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ead6:	eb da                	jmp    c000eab2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000ead8:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000eadc:	47                   	inc    edi
c000eadd:	eb c5                	jmp    c000eaa4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000eadf:	83 c4 1c             	add    esp,0x1c
c000eae2:	5b                   	pop    ebx
c000eae3:	5e                   	pop    esi
c000eae4:	5f                   	pop    edi
c000eae5:	5d                   	pop    ebp
c000eae6:	c3                   	ret    
c000eae7:	90                   	nop

c000eae8 <Video::blit(unsigned int*, int, int, int, int)>:
c000eae8:	55                   	push   ebp
c000eae9:	ba 00 00 00 00       	mov    edx,0x0
c000eaee:	57                   	push   edi
c000eaef:	56                   	push   esi
c000eaf0:	53                   	push   ebx
c000eaf1:	83 ec 1c             	sub    esp,0x1c
c000eaf4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eaf8:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000eafc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000eb00:	85 c0                	test   eax,eax
c000eb02:	0f 49 d0             	cmovns edx,eax
c000eb05:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000eb0c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000eb10:	89 eb                	mov    ebx,ebp
c000eb12:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000eb16:	01 ea                	add    edx,ebp
c000eb18:	39 da                	cmp    edx,ebx
c000eb1a:	7e 54                	jle    c000eb70 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000eb1c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eb22:	7c 4c                	jl     c000eb70 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000eb24:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000eb28:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eb2c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eb30:	01 c1                	add    ecx,eax
c000eb32:	39 f9                	cmp    ecx,edi
c000eb34:	7e 2f                	jle    c000eb65 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000eb36:	83 c2 04             	add    edx,0x4
c000eb39:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb3f:	7c 21                	jl     c000eb62 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000eb41:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000eb45:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000eb47:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000eb4a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000eb4e:	55                   	push   ebp
c000eb4f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb53:	56                   	push   esi
c000eb54:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eb57:	83 c4 10             	add    esp,0x10
c000eb5a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eb5e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb62:	47                   	inc    edi
c000eb63:	eb c7                	jmp    c000eb2c <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000eb65:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000eb69:	43                   	inc    ebx
c000eb6a:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000eb6e:	eb a2                	jmp    c000eb12 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000eb70:	83 c4 1c             	add    esp,0x1c
c000eb73:	5b                   	pop    ebx
c000eb74:	5e                   	pop    esi
c000eb75:	5f                   	pop    edi
c000eb76:	5d                   	pop    ebp
c000eb77:	c3                   	ret    

c000eb78 <Video::clearScreen(unsigned int)>:
c000eb78:	57                   	push   edi
c000eb79:	56                   	push   esi
c000eb7a:	53                   	push   ebx
c000eb7b:	31 db                	xor    ebx,ebx
c000eb7d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eb81:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eb87:	7e 1f                	jle    c000eba8 <Video::clearScreen(unsigned int)+0x30>
c000eb89:	31 ff                	xor    edi,edi
c000eb8b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb91:	7e 12                	jle    c000eba5 <Video::clearScreen(unsigned int)+0x2d>
c000eb93:	8b 06                	mov    eax,DWORD PTR [esi]
c000eb95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eb99:	53                   	push   ebx
c000eb9a:	57                   	push   edi
c000eb9b:	47                   	inc    edi
c000eb9c:	56                   	push   esi
c000eb9d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eba0:	83 c4 10             	add    esp,0x10
c000eba3:	eb e6                	jmp    c000eb8b <Video::clearScreen(unsigned int)+0x13>
c000eba5:	43                   	inc    ebx
c000eba6:	eb d9                	jmp    c000eb81 <Video::clearScreen(unsigned int)+0x9>
c000eba8:	5b                   	pop    ebx
c000eba9:	5e                   	pop    esi
c000ebaa:	5f                   	pop    edi
c000ebab:	c3                   	ret    

c000ebac <Video::putpixel(int, int, unsigned int)>:
c000ebac:	c7 44 24 04 0c 20 02 c0 	mov    DWORD PTR [esp+0x4],0xc002200c
c000ebb4:	e9 9e 2a 00 00       	jmp    c0011657 <KePanic(char const*)>
c000ebb9:	90                   	nop

c000ebba <Video::readPixelApprox(int, int)>:
c000ebba:	83 ec 18             	sub    esp,0x18
c000ebbd:	68 2d 20 02 c0       	push   0xc002202d
c000ebc2:	e8 90 2a 00 00       	call   c0011657 <KePanic(char const*)>
c000ebc7:	31 c0                	xor    eax,eax
c000ebc9:	83 c4 1c             	add    esp,0x1c
c000ebcc:	c3                   	ret    
c000ebcd:	90                   	nop

c000ebce <Video::Video(char const*)>:
c000ebce:	83 ec 0c             	sub    esp,0xc
c000ebd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebd5:	83 ec 08             	sub    esp,0x8
c000ebd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebdc:	50                   	push   eax
c000ebdd:	e8 c0 df ff ff       	call   c000cba2 <Device::Device(char const*)>
c000ebe2:	83 c4 10             	add    esp,0x10
c000ebe5:	ba a8 20 02 c0       	mov    edx,0xc00220a8
c000ebea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebee:	89 10                	mov    DWORD PTR [eax],edx
c000ebf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebf4:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ebfe:	90                   	nop
c000ebff:	83 c4 0c             	add    esp,0xc
c000ec02:	c3                   	ret    
c000ec03:	90                   	nop

c000ec04 <Video::~Video()>:
c000ec04:	83 ec 0c             	sub    esp,0xc
c000ec07:	ba a8 20 02 c0       	mov    edx,0xc00220a8
c000ec0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec10:	89 10                	mov    DWORD PTR [eax],edx
c000ec12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec16:	83 ec 0c             	sub    esp,0xc
c000ec19:	50                   	push   eax
c000ec1a:	e8 b3 dc ff ff       	call   c000c8d2 <Device::~Device()>
c000ec1f:	83 c4 10             	add    esp,0x10
c000ec22:	90                   	nop
c000ec23:	83 c4 0c             	add    esp,0xc
c000ec26:	c3                   	ret    
c000ec27:	90                   	nop

c000ec28 <Video::~Video()>:
c000ec28:	83 ec 0c             	sub    esp,0xc
c000ec2b:	83 ec 0c             	sub    esp,0xc
c000ec2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec32:	e8 cd ff ff ff       	call   c000ec04 <Video::~Video()>
c000ec37:	83 c4 10             	add    esp,0x10
c000ec3a:	83 ec 08             	sub    esp,0x8
c000ec3d:	68 64 01 00 00       	push   0x164
c000ec42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec46:	e8 f1 bb ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c000ec4b:	83 c4 10             	add    esp,0x10
c000ec4e:	83 c4 0c             	add    esp,0xc
c000ec51:	c3                   	ret    

c000ec52 <Video::isMonochrome()>:
c000ec52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec56:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ec5c:	c3                   	ret    
c000ec5d:	90                   	nop

c000ec5e <Video::getWidth()>:
c000ec5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec62:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ec68:	c3                   	ret    
c000ec69:	90                   	nop

c000ec6a <Video::getHeight()>:
c000ec6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec6e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ec74:	c3                   	ret    
c000ec75:	90                   	nop

c000ec76 <Video::drawCursor(int, int, unsigned int*, int)>:
c000ec76:	55                   	push   ebp
c000ec77:	57                   	push   edi
c000ec78:	56                   	push   esi
c000ec79:	53                   	push   ebx
c000ec7a:	83 ec 2c             	sub    esp,0x2c
c000ec7d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ec81:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ec85:	83 f8 01             	cmp    eax,0x1
c000ec88:	19 c9                	sbb    ecx,ecx
c000ec8a:	31 db                	xor    ebx,ebx
c000ec8c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ec90:	89 ce                	mov    esi,ecx
c000ec92:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ec9a:	f7 d6                	not    esi
c000ec9c:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000eca2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000eca6:	01 d8                	add    eax,ebx
c000eca8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ecac:	57                   	push   edi
c000ecad:	e8 b8 ff ff ff       	call   c000ec6a <Video::getHeight()>
c000ecb2:	59                   	pop    ecx
c000ecb3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ecb7:	7e 70                	jle    c000ed29 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ecb9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ecbd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000ecc1:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ecc4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ecc8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000eccc:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ecd3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ecd7:	89 e8                	mov    eax,ebp
c000ecd9:	83 c0 20             	add    eax,0x20
c000ecdc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ece0:	57                   	push   edi
c000ece1:	e8 78 ff ff ff       	call   c000ec5e <Video::getWidth()>
c000ece6:	5a                   	pop    edx
c000ece7:	39 c5                	cmp    ebp,eax
c000ece9:	7d 34                	jge    c000ed1f <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000eceb:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ecf0:	74 05                	je     c000ecf7 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ecf2:	8b 07                	mov    eax,DWORD PTR [edi]
c000ecf4:	56                   	push   esi
c000ecf5:	eb 0d                	jmp    c000ed04 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ecf7:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ecfc:	74 12                	je     c000ed10 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ecfe:	8b 07                	mov    eax,DWORD PTR [edi]
c000ed00:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed04:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ed08:	55                   	push   ebp
c000ed09:	57                   	push   edi
c000ed0a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ed0d:	83 c4 10             	add    esp,0x10
c000ed10:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ed14:	45                   	inc    ebp
c000ed15:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ed19:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000ed1d:	75 c1                	jne    c000ece0 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ed1f:	43                   	inc    ebx
c000ed20:	83 fb 20             	cmp    ebx,0x20
c000ed23:	0f 85 79 ff ff ff    	jne    c000eca2 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ed29:	83 c4 2c             	add    esp,0x2c
c000ed2c:	5b                   	pop    ebx
c000ed2d:	5e                   	pop    esi
c000ed2e:	5f                   	pop    edi
c000ed2f:	5d                   	pop    ebp
c000ed30:	c3                   	ret    
c000ed31:	90                   	nop

c000ed32 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ed32:	55                   	push   ebp
c000ed33:	57                   	push   edi
c000ed34:	56                   	push   esi
c000ed35:	53                   	push   ebx
c000ed36:	83 ec 28             	sub    esp,0x28
c000ed39:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ed3d:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000ed41:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ed45:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000ed49:	c1 e7 08             	shl    edi,0x8
c000ed4c:	01 c7                	add    edi,eax
c000ed4e:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000ed52:	c1 e6 08             	shl    esi,0x8
c000ed55:	01 f0                	add    eax,esi
c000ed57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ed5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed5f:	0f af c7             	imul   eax,edi
c000ed62:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ed69:	50                   	push   eax
c000ed6a:	e8 94 8d ff ff       	call   c0007b03 <malloc>
c000ed6f:	83 c4 10             	add    esp,0x10
c000ed72:	85 c0                	test   eax,eax
c000ed74:	89 c5                	mov    ebp,eax
c000ed76:	75 10                	jne    c000ed88 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ed78:	83 ec 0c             	sub    esp,0xc
c000ed7b:	68 58 20 02 c0       	push   0xc0022058
c000ed80:	e8 d2 28 00 00       	call   c0011657 <KePanic(char const*)>
c000ed85:	83 c4 10             	add    esp,0x10
c000ed88:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ed8c:	ba 12 00 00 00       	mov    edx,0x12
c000ed91:	85 c0                	test   eax,eax
c000ed93:	74 11                	je     c000eda6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000ed95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ed99:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ed9d:	c1 fa 03             	sar    edx,0x3
c000eda0:	0f af d1             	imul   edx,ecx
c000eda3:	83 c2 12             	add    edx,0x12
c000eda6:	85 ff                	test   edi,edi
c000eda8:	74 06                	je     c000edb0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000edaa:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000edae:	75 12                	jne    c000edc2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000edb0:	83 ec 0c             	sub    esp,0xc
c000edb3:	68 68 20 02 c0       	push   0xc0022068
c000edb8:	e8 7d bb ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000edbd:	e9 b8 00 00 00       	jmp    c000ee7a <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000edc2:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000edc6:	83 f9 02             	cmp    ecx,0x2
c000edc9:	0f 85 96 00 00 00    	jne    c000ee65 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000edcf:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000edd4:	75 0e                	jne    c000ede4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000edd6:	85 c0                	test   eax,eax
c000edd8:	75 0a                	jne    c000ede4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000edda:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000eddd:	83 e8 18             	sub    eax,0x18
c000ede0:	a8 f7                	test   al,0xf7
c000ede2:	74 0a                	je     c000edee <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000ede4:	83 ec 0c             	sub    esp,0xc
c000ede7:	68 7d 20 02 c0       	push   0xc002207d
c000edec:	eb 7f                	jmp    c000ee6d <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000edee:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000edf6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000edfe:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000ee02:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000ee06:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ee0e:	75 0c                	jne    c000ee1c <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000ee10:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000ee15:	c1 e1 18             	shl    ecx,0x18
c000ee18:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ee1c:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000ee21:	46                   	inc    esi
c000ee22:	89 c8                	mov    eax,ecx
c000ee24:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ee29:	c1 e0 10             	shl    eax,0x10
c000ee2c:	c1 e1 08             	shl    ecx,0x8
c000ee2f:	09 c1                	or     ecx,eax
c000ee31:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ee35:	09 c1                	or     ecx,eax
c000ee37:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ee3b:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000ee3f:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ee43:	c1 f8 03             	sar    eax,0x3
c000ee46:	01 c2                	add    edx,eax
c000ee48:	89 f0                	mov    eax,esi
c000ee4a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ee4e:	39 c7                	cmp    edi,eax
c000ee50:	7f b0                	jg     c000ee02 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ee52:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ee56:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee5a:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ee5d:	7e 22                	jle    c000ee81 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ee5f:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ee63:	eb 99                	jmp    c000edfe <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ee65:	50                   	push   eax
c000ee66:	50                   	push   eax
c000ee67:	51                   	push   ecx
c000ee68:	68 8b 20 02 c0       	push   0xc002208b
c000ee6d:	e8 c8 ba ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000ee72:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ee75:	e8 99 8c ff ff       	call   c0007b13 <free>
c000ee7a:	83 c4 10             	add    esp,0x10
c000ee7d:	31 ed                	xor    ebp,ebp
c000ee7f:	eb 0f                	jmp    c000ee90 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ee81:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ee85:	89 38                	mov    DWORD PTR [eax],edi
c000ee87:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee8b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000ee8e:	89 38                	mov    DWORD PTR [eax],edi
c000ee90:	83 c4 1c             	add    esp,0x1c
c000ee93:	89 e8                	mov    eax,ebp
c000ee95:	5b                   	pop    ebx
c000ee96:	5e                   	pop    esi
c000ee97:	5f                   	pop    edi
c000ee98:	5d                   	pop    ebp
c000ee99:	c3                   	ret    

c000ee9a <Video::putTGA(int, int, unsigned char*, int)>:
c000ee9a:	55                   	push   ebp
c000ee9b:	57                   	push   edi
c000ee9c:	56                   	push   esi
c000ee9d:	53                   	push   ebx
c000ee9e:	83 ec 28             	sub    esp,0x28
c000eea1:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eea5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eea9:	50                   	push   eax
c000eeaa:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eeae:	50                   	push   eax
c000eeaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eeb3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eeb7:	57                   	push   edi
c000eeb8:	e8 75 fe ff ff       	call   c000ed32 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000eebd:	83 c4 20             	add    esp,0x20
c000eec0:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000eec4:	85 c0                	test   eax,eax
c000eec6:	74 35                	je     c000eefd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eec8:	89 c6                	mov    esi,eax
c000eeca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eece:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000eed2:	39 d8                	cmp    eax,ebx
c000eed4:	7e 27                	jle    c000eefd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eed6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eeda:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000eede:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000eee2:	39 e9                	cmp    ecx,ebp
c000eee4:	7e 14                	jle    c000eefa <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000eee6:	83 c6 04             	add    esi,0x4
c000eee9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000eeeb:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000eeee:	53                   	push   ebx
c000eeef:	55                   	push   ebp
c000eef0:	45                   	inc    ebp
c000eef1:	57                   	push   edi
c000eef2:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eef5:	83 c4 10             	add    esp,0x10
c000eef8:	eb e0                	jmp    c000eeda <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000eefa:	43                   	inc    ebx
c000eefb:	eb cd                	jmp    c000eeca <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000eefd:	83 c4 1c             	add    esp,0x1c
c000ef00:	5b                   	pop    ebx
c000ef01:	5e                   	pop    esi
c000ef02:	5f                   	pop    edi
c000ef03:	5d                   	pop    ebp
c000ef04:	c3                   	ret    
c000ef05:	66 90                	xchg   ax,ax
c000ef07:	90                   	nop

c000ef08 <ACPI::close(int, int, void*)>:
c000ef08:	83 ec 1c             	sub    esp,0x1c
c000ef0b:	83 ec 0c             	sub    esp,0xc
c000ef0e:	68 ec 20 02 c0       	push   0xc00220ec
c000ef13:	e8 22 ba ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000ef18:	83 c4 10             	add    esp,0x10
c000ef1b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ef23:	74 1b                	je     c000ef40 <ACPI::close(int, int, void*)+0x38>
c000ef25:	83 ec 0c             	sub    esp,0xc
c000ef28:	68 fb 20 02 c0       	push   0xc00220fb
c000ef2d:	e8 08 ba ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000ef32:	83 c4 10             	add    esp,0x10
c000ef35:	b8 00 00 00 00       	mov    eax,0x0
c000ef3a:	e9 01 01 00 00       	jmp    c000f040 <ACPI::close(int, int, void*)+0x138>
c000ef3f:	90                   	nop
c000ef40:	83 ec 0c             	sub    esp,0xc
c000ef43:	68 0c 21 02 c0       	push   0xc002210c
c000ef48:	e8 ed b9 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000ef4d:	83 c4 10             	add    esp,0x10
c000ef50:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ef55:	75 45                	jne    c000ef9c <ACPI::close(int, int, void*)+0x94>
c000ef57:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef5c:	83 ec 08             	sub    esp,0x8
c000ef5f:	50                   	push   eax
c000ef60:	68 1b 21 02 c0       	push   0xc002211b
c000ef65:	e8 d0 b9 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000ef6a:	83 c4 10             	add    esp,0x10
c000ef6d:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef72:	85 c0                	test   eax,eax
c000ef74:	74 0a                	je     c000ef80 <ACPI::close(int, int, void*)+0x78>
c000ef76:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ef7b:	ff d0                	call   eax
c000ef7d:	8d 76 00             	lea    esi,[esi+0x0]
c000ef80:	83 ec 0c             	sub    esp,0xc
c000ef83:	68 ec 22 02 c0       	push   0xc00222ec
c000ef88:	e8 ca 26 00 00       	call   c0011657 <KePanic(char const*)>
c000ef8d:	83 c4 10             	add    esp,0x10
c000ef90:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef95:	e9 a6 00 00 00       	jmp    c000f040 <ACPI::close(int, int, void*)+0x138>
c000ef9a:	66 90                	xchg   ax,ax
c000ef9c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000efa1:	0f 85 81 00 00 00    	jne    c000f028 <ACPI::close(int, int, void*)+0x120>
c000efa7:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000efac:	83 ec 08             	sub    esp,0x8
c000efaf:	50                   	push   eax
c000efb0:	68 39 21 02 c0       	push   0xc0022139
c000efb5:	e8 80 b9 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000efba:	83 c4 10             	add    esp,0x10
c000efbd:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000efc2:	85 c0                	test   eax,eax
c000efc4:	74 0a                	je     c000efd0 <ACPI::close(int, int, void*)+0xc8>
c000efc6:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000efcb:	ff d0                	call   eax
c000efcd:	8d 76 00             	lea    esi,[esi+0x0]
c000efd0:	83 ec 0c             	sub    esp,0xc
c000efd3:	68 54 21 02 c0       	push   0xc0022154
c000efd8:	e8 5d b9 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000efdd:	83 c4 10             	add    esp,0x10
c000efe0:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000efe5:	8d 76 00             	lea    esi,[esi+0x0]
c000efe8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000efed:	83 e0 02             	and    eax,0x2
c000eff0:	74 1e                	je     c000f010 <ACPI::close(int, int, void*)+0x108>
c000eff2:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000eff9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000effd:	89 c2                	mov    edx,eax
c000efff:	ec                   	in     al,dx
c000f000:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000f004:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000f008:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f00c:	eb da                	jmp    c000efe8 <ACPI::close(int, int, void*)+0xe0>
c000f00e:	66 90                	xchg   ax,ax
c000f010:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000f017:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000f01c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000f020:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f024:	ee                   	out    dx,al
c000f025:	8d 76 00             	lea    esi,[esi+0x0]
c000f028:	83 ec 0c             	sub    esp,0xc
c000f02b:	68 66 21 02 c0       	push   0xc0022166
c000f030:	e8 05 b9 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c000f035:	83 c4 10             	add    esp,0x10
c000f038:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f03d:	8d 76 00             	lea    esi,[esi+0x0]
c000f040:	83 c4 1c             	add    esp,0x1c
c000f043:	c3                   	ret    

c000f044 <findRSDP()>:
c000f044:	83 ec 1c             	sub    esp,0x1c
c000f047:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f04c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f052:	83 e0 04             	and    eax,0x4
c000f055:	0f b6 c0             	movzx  eax,al
c000f058:	85 c0                	test   eax,eax
c000f05a:	75 08                	jne    c000f064 <findRSDP()+0x20>
c000f05c:	b8 00 00 00 00       	mov    eax,0x0
c000f061:	eb 75                	jmp    c000f0d8 <findRSDP()+0x94>
c000f063:	90                   	nop
c000f064:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000f069:	3d ff 07 00 00       	cmp    eax,0x7ff
c000f06e:	7f 1c                	jg     c000f08c <findRSDP()+0x48>
c000f070:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f075:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f07b:	83 e2 fb             	and    edx,0xfffffffb
c000f07e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f084:	b8 00 00 00 00       	mov    eax,0x0
c000f089:	eb 4d                	jmp    c000f0d8 <findRSDP()+0x94>
c000f08b:	90                   	nop
c000f08c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000f094:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000f09c:	77 32                	ja     c000f0d0 <findRSDP()+0x8c>
c000f09e:	83 ec 04             	sub    esp,0x4
c000f0a1:	6a 08                	push   0x8
c000f0a3:	68 75 21 02 c0       	push   0xc0022175
c000f0a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f0ac:	e8 cf 12 ff ff       	call   c0000380 <memcmp>
c000f0b1:	83 c4 10             	add    esp,0x10
c000f0b4:	85 c0                	test   eax,eax
c000f0b6:	0f 94 c0             	sete   al
c000f0b9:	0f b6 c0             	movzx  eax,al
c000f0bc:	85 c0                	test   eax,eax
c000f0be:	74 08                	je     c000f0c8 <findRSDP()+0x84>
c000f0c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0c4:	eb 12                	jmp    c000f0d8 <findRSDP()+0x94>
c000f0c6:	66 90                	xchg   ax,ax
c000f0c8:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000f0cd:	eb c5                	jmp    c000f094 <findRSDP()+0x50>
c000f0cf:	90                   	nop
c000f0d0:	b8 00 00 00 00       	mov    eax,0x0
c000f0d5:	8d 76 00             	lea    esi,[esi+0x0]
c000f0d8:	83 c4 1c             	add    esp,0x1c
c000f0db:	c3                   	ret    

c000f0dc <loadACPITables(unsigned char*)>:
c000f0dc:	57                   	push   edi
c000f0dd:	56                   	push   esi
c000f0de:	53                   	push   ebx
c000f0df:	83 ec 60             	sub    esp,0x60
c000f0e2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f0e7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f0ed:	83 e0 04             	and    eax,0x4
c000f0f0:	0f b6 c0             	movzx  eax,al
c000f0f3:	85 c0                	test   eax,eax
c000f0f5:	0f 84 41 02 00 00    	je     c000f33c <loadACPITables(unsigned char*)+0x260>
c000f0fb:	a0 20 bb 02 c0       	mov    al,ds:0xc002bb20
c000f100:	0f b6 c0             	movzx  eax,al
c000f103:	85 c0                	test   eax,eax
c000f105:	74 79                	je     c000f180 <loadACPITables(unsigned char*)+0xa4>
c000f107:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f10b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000f10f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000f113:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f116:	83 e8 24             	sub    eax,0x24
c000f119:	c1 e8 03             	shr    eax,0x3
c000f11c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f120:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000f128:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f12c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000f130:	0f 8d ba 00 00 00    	jge    c000f1f0 <loadACPITables(unsigned char*)+0x114>
c000f136:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f13a:	83 c0 24             	add    eax,0x24
c000f13d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f141:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f145:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f149:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f14d:	c1 e0 03             	shl    eax,0x3
c000f150:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000f154:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f158:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f15b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f15d:	89 c1                	mov    ecx,eax
c000f15f:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f164:	8d 50 01             	lea    edx,[eax+0x1]
c000f167:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f16d:	89 ca                	mov    edx,ecx
c000f16f:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f176:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000f17b:	eb ab                	jmp    c000f128 <loadACPITables(unsigned char*)+0x4c>
c000f17d:	8d 76 00             	lea    esi,[esi+0x0]
c000f180:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f184:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f188:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f18c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f18f:	83 e8 24             	sub    eax,0x24
c000f192:	c1 e8 02             	shr    eax,0x2
c000f195:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f199:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000f1a1:	8d 76 00             	lea    esi,[esi+0x0]
c000f1a4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f1a8:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000f1ac:	7d 42                	jge    c000f1f0 <loadACPITables(unsigned char*)+0x114>
c000f1ae:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f1b2:	83 c0 24             	add    eax,0x24
c000f1b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f1b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f1bd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f1c1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f1c5:	c1 e0 02             	shl    eax,0x2
c000f1c8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000f1cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f1d0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f1d2:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f1d7:	8d 50 01             	lea    edx,[eax+0x1]
c000f1da:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f1e0:	89 ca                	mov    edx,ecx
c000f1e2:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f1e9:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000f1ee:	eb b4                	jmp    c000f1a4 <loadACPITables(unsigned char*)+0xc8>
c000f1f0:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000f1f8:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f1fd:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000f201:	0f 8d 39 01 00 00    	jge    c000f340 <loadACPITables(unsigned char*)+0x264>
c000f207:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f20b:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f212:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f216:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f21a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f21e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f222:	25 ff 0f 00 00       	and    eax,0xfff
c000f227:	89 c6                	mov    esi,eax
c000f229:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f22f:	83 ec 0c             	sub    esp,0xc
c000f232:	6a 01                	push   0x1
c000f234:	e8 ec a3 ff ff       	call   c0009625 <Virt::allocateKernelVirtualPages(int)>
c000f239:	83 c4 10             	add    esp,0x10
c000f23c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f240:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f246:	83 ec 0c             	sub    esp,0xc
c000f249:	6a 01                	push   0x1
c000f24b:	6a 01                	push   0x1
c000f24d:	50                   	push   eax
c000f24e:	52                   	push   edx
c000f24f:	53                   	push   ebx
c000f250:	e8 e3 ac ff ff       	call   c0009f38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f255:	83 c4 20             	add    esp,0x20
c000f258:	09 f0                	or     eax,esi
c000f25a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f25e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f262:	c1 e0 03             	shl    eax,0x3
c000f265:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f26a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f26e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f272:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f276:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000f27e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f286:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f28a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f28e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f292:	89 c6                	mov    esi,eax
c000f294:	89 d7                	mov    edi,edx
c000f296:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f298:	89 c8                	mov    eax,ecx
c000f29a:	89 fa                	mov    edx,edi
c000f29c:	89 f3                	mov    ebx,esi
c000f29e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f2a2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000f2a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f2aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f2ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f2b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f2b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2b9:	05 00 10 00 00       	add    eax,0x1000
c000f2be:	c1 e8 0c             	shr    eax,0xc
c000f2c1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f2c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f2c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f2cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f2d1:	25 ff 0f 00 00       	and    eax,0xfff
c000f2d6:	89 c6                	mov    esi,eax
c000f2d8:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f2de:	83 ec 0c             	sub    esp,0xc
c000f2e1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f2e5:	e8 3b a3 ff ff       	call   c0009625 <Virt::allocateKernelVirtualPages(int)>
c000f2ea:	83 c4 10             	add    esp,0x10
c000f2ed:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f2f1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f2f7:	83 ec 0c             	sub    esp,0xc
c000f2fa:	6a 01                	push   0x1
c000f2fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f300:	50                   	push   eax
c000f301:	52                   	push   edx
c000f302:	53                   	push   ebx
c000f303:	e8 30 ac ff ff       	call   c0009f38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f308:	83 c4 20             	add    esp,0x20
c000f30b:	09 f0                	or     eax,esi
c000f30d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f311:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f315:	83 ec 0c             	sub    esp,0xc
c000f318:	50                   	push   eax
c000f319:	e8 1b a6 ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c000f31e:	83 c4 10             	add    esp,0x10
c000f321:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f325:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f329:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f330:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f335:	e9 be fe ff ff       	jmp    c000f1f8 <loadACPITables(unsigned char*)+0x11c>
c000f33a:	66 90                	xchg   ax,ax
c000f33c:	90                   	nop
c000f33d:	8d 76 00             	lea    esi,[esi+0x0]
c000f340:	83 c4 60             	add    esp,0x60
c000f343:	5b                   	pop    ebx
c000f344:	5e                   	pop    esi
c000f345:	5f                   	pop    edi
c000f346:	c3                   	ret    
c000f347:	90                   	nop

c000f348 <findRSDT(unsigned char*)>:
c000f348:	57                   	push   edi
c000f349:	56                   	push   esi
c000f34a:	53                   	push   ebx
c000f34b:	83 ec 50             	sub    esp,0x50
c000f34e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f353:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f359:	83 e0 04             	and    eax,0x4
c000f35c:	0f b6 c0             	movzx  eax,al
c000f35f:	85 c0                	test   eax,eax
c000f361:	75 0d                	jne    c000f370 <findRSDT(unsigned char*)+0x28>
c000f363:	b8 00 00 00 00       	mov    eax,0x0
c000f368:	e9 2b 01 00 00       	jmp    c000f498 <findRSDT(unsigned char*)+0x150>
c000f36d:	8d 76 00             	lea    esi,[esi+0x0]
c000f370:	89 e0                	mov    eax,esp
c000f372:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f376:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f37a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f37e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f386:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f38a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f38e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f392:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f396:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f39a:	89 c6                	mov    esi,eax
c000f39c:	89 d7                	mov    edi,edx
c000f39e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f3a0:	89 c8                	mov    eax,ecx
c000f3a2:	89 fa                	mov    edx,edi
c000f3a4:	89 f3                	mov    ebx,esi
c000f3a6:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f3aa:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f3ae:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f3b2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f3b6:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f3ba:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f3c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3ca:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f3ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3d2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f3d6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f3da:	25 ff 0f 00 00       	and    eax,0xfff
c000f3df:	89 c6                	mov    esi,eax
c000f3e1:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f3e7:	83 ec 0c             	sub    esp,0xc
c000f3ea:	6a 02                	push   0x2
c000f3ec:	e8 34 a2 ff ff       	call   c0009625 <Virt::allocateKernelVirtualPages(int)>
c000f3f1:	83 c4 10             	add    esp,0x10
c000f3f4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f3f8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f3fe:	83 ec 0c             	sub    esp,0xc
c000f401:	6a 01                	push   0x1
c000f403:	6a 02                	push   0x2
c000f405:	50                   	push   eax
c000f406:	52                   	push   edx
c000f407:	53                   	push   ebx
c000f408:	e8 2b ab ff ff       	call   c0009f38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f40d:	83 c4 20             	add    esp,0x20
c000f410:	09 f0                	or     eax,esi
c000f412:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f416:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f41a:	25 ff 0f 00 00       	and    eax,0xfff
c000f41f:	89 c6                	mov    esi,eax
c000f421:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f427:	83 ec 0c             	sub    esp,0xc
c000f42a:	6a 02                	push   0x2
c000f42c:	e8 f4 a1 ff ff       	call   c0009625 <Virt::allocateKernelVirtualPages(int)>
c000f431:	83 c4 10             	add    esp,0x10
c000f434:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f438:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f43e:	83 ec 0c             	sub    esp,0xc
c000f441:	6a 01                	push   0x1
c000f443:	6a 02                	push   0x2
c000f445:	50                   	push   eax
c000f446:	52                   	push   edx
c000f447:	53                   	push   ebx
c000f448:	e8 eb aa ff ff       	call   c0009f38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f44d:	83 c4 20             	add    esp,0x20
c000f450:	09 f0                	or     eax,esi
c000f452:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f456:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f45b:	85 c0                	test   eax,eax
c000f45d:	75 11                	jne    c000f470 <findRSDT(unsigned char*)+0x128>
c000f45f:	c6 05 20 bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb20,0x0
c000f466:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f46a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f46e:	eb 24                	jmp    c000f494 <findRSDT(unsigned char*)+0x14c>
c000f470:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f475:	83 f8 02             	cmp    eax,0x2
c000f478:	75 12                	jne    c000f48c <findRSDT(unsigned char*)+0x144>
c000f47a:	c6 05 20 bb 02 c0 01 	mov    BYTE PTR ds:0xc002bb20,0x1
c000f481:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f485:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f489:	eb 09                	jmp    c000f494 <findRSDT(unsigned char*)+0x14c>
c000f48b:	90                   	nop
c000f48c:	b8 00 00 00 00       	mov    eax,0x0
c000f491:	eb 05                	jmp    c000f498 <findRSDT(unsigned char*)+0x150>
c000f493:	90                   	nop
c000f494:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f498:	83 c4 50             	add    esp,0x50
c000f49b:	5b                   	pop    ebx
c000f49c:	5e                   	pop    esi
c000f49d:	5f                   	pop    edi
c000f49e:	c3                   	ret    
c000f49f:	90                   	nop

c000f4a0 <findDataTable(unsigned char*, char*)>:
c000f4a0:	83 ec 1c             	sub    esp,0x1c
c000f4a3:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4a8:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f4ae:	83 e0 04             	and    eax,0x4
c000f4b1:	0f b6 c0             	movzx  eax,al
c000f4b4:	85 c0                	test   eax,eax
c000f4b6:	75 08                	jne    c000f4c0 <findDataTable(unsigned char*, char*)+0x20>
c000f4b8:	b8 00 00 00 00       	mov    eax,0x0
c000f4bd:	eb 5d                	jmp    c000f51c <findDataTable(unsigned char*, char*)+0x7c>
c000f4bf:	90                   	nop
c000f4c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f4c8:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f4cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f4d1:	7d 41                	jge    c000f514 <findDataTable(unsigned char*, char*)+0x74>
c000f4d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4d7:	c1 e0 03             	shl    eax,0x3
c000f4da:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f4df:	83 ec 04             	sub    esp,0x4
c000f4e2:	6a 04                	push   0x4
c000f4e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4e8:	50                   	push   eax
c000f4e9:	e8 92 0e ff ff       	call   c0000380 <memcmp>
c000f4ee:	83 c4 10             	add    esp,0x10
c000f4f1:	85 c0                	test   eax,eax
c000f4f3:	0f 94 c0             	sete   al
c000f4f6:	0f b6 c0             	movzx  eax,al
c000f4f9:	85 c0                	test   eax,eax
c000f4fb:	74 0f                	je     c000f50c <findDataTable(unsigned char*, char*)+0x6c>
c000f4fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f501:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f508:	eb 12                	jmp    c000f51c <findDataTable(unsigned char*, char*)+0x7c>
c000f50a:	66 90                	xchg   ax,ax
c000f50c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f511:	eb b5                	jmp    c000f4c8 <findDataTable(unsigned char*, char*)+0x28>
c000f513:	90                   	nop
c000f514:	b8 00 00 00 00       	mov    eax,0x0
c000f519:	8d 76 00             	lea    esi,[esi+0x0]
c000f51c:	83 c4 1c             	add    esp,0x1c
c000f51f:	c3                   	ret    

c000f520 <scanMADT()>:
c000f520:	53                   	push   ebx
c000f521:	83 ec 38             	sub    esp,0x38
c000f524:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c000f529:	25 00 04 00 00       	and    eax,0x400
c000f52e:	74 14                	je     c000f544 <scanMADT()+0x24>
c000f530:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f535:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f53b:	83 e2 fb             	and    edx,0xfffffffb
c000f53e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f544:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f549:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f54f:	83 e0 04             	and    eax,0x4
c000f552:	0f b6 c0             	movzx  eax,al
c000f555:	85 c0                	test   eax,eax
c000f557:	0f 84 6b 04 00 00    	je     c000f9c8 <scanMADT()+0x4a8>
c000f55d:	e8 e2 fa ff ff       	call   c000f044 <findRSDP()>
c000f562:	a3 2c bb 02 c0       	mov    ds:0xc002bb2c,eax
c000f567:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f56c:	85 c0                	test   eax,eax
c000f56e:	75 1c                	jne    c000f58c <scanMADT()+0x6c>
c000f570:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f575:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f57b:	83 e2 fb             	and    edx,0xfffffffb
c000f57e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f584:	e9 47 04 00 00       	jmp    c000f9d0 <scanMADT()+0x4b0>
c000f589:	8d 76 00             	lea    esi,[esi+0x0]
c000f58c:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f591:	83 ec 0c             	sub    esp,0xc
c000f594:	50                   	push   eax
c000f595:	e8 ae fd ff ff       	call   c000f348 <findRSDT(unsigned char*)>
c000f59a:	83 c4 10             	add    esp,0x10
c000f59d:	a3 28 bb 02 c0       	mov    ds:0xc002bb28,eax
c000f5a2:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f5a7:	85 c0                	test   eax,eax
c000f5a9:	75 19                	jne    c000f5c4 <scanMADT()+0xa4>
c000f5ab:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f5b0:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f5b6:	83 e2 fb             	and    edx,0xfffffffb
c000f5b9:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f5bf:	e9 0c 04 00 00       	jmp    c000f9d0 <scanMADT()+0x4b0>
c000f5c4:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f5c9:	83 ec 0c             	sub    esp,0xc
c000f5cc:	50                   	push   eax
c000f5cd:	e8 0a fb ff ff       	call   c000f0dc <loadACPITables(unsigned char*)>
c000f5d2:	83 c4 10             	add    esp,0x10
c000f5d5:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f5da:	83 ec 08             	sub    esp,0x8
c000f5dd:	68 7e 21 02 c0       	push   0xc002217e
c000f5e2:	50                   	push   eax
c000f5e3:	e8 b8 fe ff ff       	call   c000f4a0 <findDataTable(unsigned char*, char*)>
c000f5e8:	83 c4 10             	add    esp,0x10
c000f5eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f5ef:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f5f4:	75 1a                	jne    c000f610 <scanMADT()+0xf0>
c000f5f6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f5fb:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f601:	83 e2 fe             	and    edx,0xfffffffe
c000f604:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f60a:	e9 c1 03 00 00       	jmp    c000f9d0 <scanMADT()+0x4b0>
c000f60f:	90                   	nop
c000f610:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f618:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f61c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f61f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f623:	0f 87 a7 03 00 00    	ja     c000f9d0 <scanMADT()+0x4b0>
c000f629:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f631:	0f 87 99 03 00 00    	ja     c000f9d0 <scanMADT()+0x4b0>
c000f637:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f63b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f63f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f643:	8d 50 01             	lea    edx,[eax+0x1]
c000f646:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f64a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f64e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f652:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f656:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f65a:	8d 50 01             	lea    edx,[eax+0x1]
c000f65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f661:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f665:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f669:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f66d:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f672:	83 f8 02             	cmp    eax,0x2
c000f675:	0f 86 51 03 00 00    	jbe    c000f9cc <scanMADT()+0x4ac>
c000f67b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f680:	85 c0                	test   eax,eax
c000f682:	75 58                	jne    c000f6dc <scanMADT()+0x1bc>
c000f684:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f688:	8d 50 01             	lea    edx,[eax+0x1]
c000f68b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f68f:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f695:	0f b6 d2             	movzx  edx,dl
c000f698:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f69c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f6a0:	88 82 60 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42a0],al
c000f6a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6aa:	8d 50 01             	lea    edx,[eax+0x1]
c000f6ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f6b1:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f6b7:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f6ba:	88 0d 20 bd 02 c0    	mov    BYTE PTR ds:0xc002bd20,cl
c000f6c0:	0f b6 d2             	movzx  edx,dl
c000f6c3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f6c7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f6cb:	88 82 40 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42c0],al
c000f6d1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f6d6:	e9 d9 02 00 00       	jmp    c000f9b4 <scanMADT()+0x494>
c000f6db:	90                   	nop
c000f6dc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f6e1:	83 f8 01             	cmp    eax,0x1
c000f6e4:	0f 85 1a 01 00 00    	jne    c000f804 <scanMADT()+0x2e4>
c000f6ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6ee:	8d 50 01             	lea    edx,[eax+0x1]
c000f6f1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f6f5:	8a 15 e0 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bbe0
c000f6fb:	0f b6 d2             	movzx  edx,dl
c000f6fe:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f702:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f706:	88 82 00 bc 02 c0    	mov    BYTE PTR [edx-0x3ffd4400],al
c000f70c:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f711:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f715:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f719:	01 d0                	add    eax,edx
c000f71b:	83 c0 2c             	add    eax,0x2c
c000f71e:	8a 00                	mov    al,BYTE PTR [eax]
c000f720:	0f b6 d0             	movzx  edx,al
c000f723:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f727:	8d 48 01             	lea    ecx,[eax+0x1]
c000f72a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f72e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f732:	0f b6 c0             	movzx  eax,al
c000f735:	c1 e0 08             	shl    eax,0x8
c000f738:	89 d1                	mov    ecx,edx
c000f73a:	09 c1                	or     ecx,eax
c000f73c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f740:	8d 50 02             	lea    edx,[eax+0x2]
c000f743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f747:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f74b:	0f b6 c0             	movzx  eax,al
c000f74e:	c1 e0 10             	shl    eax,0x10
c000f751:	09 c1                	or     ecx,eax
c000f753:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f757:	8d 50 03             	lea    edx,[eax+0x3]
c000f75a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f75e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f762:	0f b6 c0             	movzx  eax,al
c000f765:	c1 e0 18             	shl    eax,0x18
c000f768:	09 c1                	or     ecx,eax
c000f76a:	89 ca                	mov    edx,ecx
c000f76c:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f771:	0f b6 c0             	movzx  eax,al
c000f774:	89 14 85 20 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43e0],edx
c000f77b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f780:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f784:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f788:	01 d0                	add    eax,edx
c000f78a:	83 c0 2c             	add    eax,0x2c
c000f78d:	8a 00                	mov    al,BYTE PTR [eax]
c000f78f:	0f b6 d0             	movzx  edx,al
c000f792:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f796:	8d 48 01             	lea    ecx,[eax+0x1]
c000f799:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f79d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f7a1:	0f b6 c0             	movzx  eax,al
c000f7a4:	c1 e0 08             	shl    eax,0x8
c000f7a7:	89 d1                	mov    ecx,edx
c000f7a9:	09 c1                	or     ecx,eax
c000f7ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7af:	8d 50 02             	lea    edx,[eax+0x2]
c000f7b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7b6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f7ba:	0f b6 c0             	movzx  eax,al
c000f7bd:	c1 e0 10             	shl    eax,0x10
c000f7c0:	09 c1                	or     ecx,eax
c000f7c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7c6:	8d 50 03             	lea    edx,[eax+0x3]
c000f7c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7cd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f7d1:	0f b6 c0             	movzx  eax,al
c000f7d4:	c1 e0 18             	shl    eax,0x18
c000f7d7:	09 c1                	or     ecx,eax
c000f7d9:	89 ca                	mov    edx,ecx
c000f7db:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f7e0:	0f b6 c0             	movzx  eax,al
c000f7e3:	89 14 85 a0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4360],edx
c000f7ea:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f7ef:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f7f4:	83 c0 01             	add    eax,0x1
c000f7f7:	a2 e0 bb 02 c0       	mov    ds:0xc002bbe0,al
c000f7fc:	e9 b3 01 00 00       	jmp    c000f9b4 <scanMADT()+0x494>
c000f801:	8d 76 00             	lea    esi,[esi+0x0]
c000f804:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f809:	83 f8 02             	cmp    eax,0x2
c000f80c:	0f 85 ea 00 00 00    	jne    c000f8fc <scanMADT()+0x3dc>
c000f812:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f816:	8d 50 01             	lea    edx,[eax+0x1]
c000f819:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f81d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f821:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f825:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f829:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f82d:	8d 50 01             	lea    edx,[eax+0x1]
c000f830:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f834:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f838:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f83c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f840:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f844:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f848:	01 d0                	add    eax,edx
c000f84a:	83 c0 2c             	add    eax,0x2c
c000f84d:	8a 00                	mov    al,BYTE PTR [eax]
c000f84f:	0f b6 d0             	movzx  edx,al
c000f852:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f856:	8d 48 01             	lea    ecx,[eax+0x1]
c000f859:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f85d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f861:	0f b6 c0             	movzx  eax,al
c000f864:	c1 e0 08             	shl    eax,0x8
c000f867:	89 d1                	mov    ecx,edx
c000f869:	09 c1                	or     ecx,eax
c000f86b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f86f:	8d 50 02             	lea    edx,[eax+0x2]
c000f872:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f876:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f87a:	0f b6 c0             	movzx  eax,al
c000f87d:	c1 e0 10             	shl    eax,0x10
c000f880:	09 c1                	or     ecx,eax
c000f882:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f886:	8d 50 03             	lea    edx,[eax+0x3]
c000f889:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f88d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f891:	0f b6 c0             	movzx  eax,al
c000f894:	c1 e0 18             	shl    eax,0x18
c000f897:	09 c8                	or     eax,ecx
c000f899:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f89d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f8a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f8a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8aa:	01 d0                	add    eax,edx
c000f8ac:	83 c0 2c             	add    eax,0x2c
c000f8af:	8a 00                	mov    al,BYTE PTR [eax]
c000f8b1:	0f b6 d0             	movzx  edx,al
c000f8b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f8b8:	8d 48 01             	lea    ecx,[eax+0x1]
c000f8bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f8bf:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f8c3:	0f b6 c0             	movzx  eax,al
c000f8c6:	c1 e0 08             	shl    eax,0x8
c000f8c9:	09 d0                	or     eax,edx
c000f8cb:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f8d0:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f8d5:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f8da:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f8de:	88 90 48 39 02 c0    	mov    BYTE PTR [eax-0x3ffdc6b8],dl
c000f8e4:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f8e9:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000f8ee:	66 89 94 00 c0 bb 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd4440],dx
c000f8f6:	e9 b9 00 00 00       	jmp    c000f9b4 <scanMADT()+0x494>
c000f8fb:	90                   	nop
c000f8fc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f901:	83 f8 04             	cmp    eax,0x4
c000f904:	0f 85 9a 00 00 00    	jne    c000f9a4 <scanMADT()+0x484>
c000f90a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f90e:	8d 50 01             	lea    edx,[eax+0x1]
c000f911:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f915:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f919:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f91d:	0f b6 c0             	movzx  eax,al
c000f920:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f924:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f928:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f92c:	01 d0                	add    eax,edx
c000f92e:	83 c0 2c             	add    eax,0x2c
c000f931:	8a 00                	mov    al,BYTE PTR [eax]
c000f933:	0f b6 d0             	movzx  edx,al
c000f936:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f93a:	8d 48 01             	lea    ecx,[eax+0x1]
c000f93d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f941:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f945:	0f b6 c0             	movzx  eax,al
c000f948:	c1 e0 08             	shl    eax,0x8
c000f94b:	09 d0                	or     eax,edx
c000f94d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f951:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f956:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f95a:	8d 50 01             	lea    edx,[eax+0x1]
c000f95d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f961:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f965:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f969:	0f b6 c0             	movzx  eax,al
c000f96c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f974:	c1 e0 08             	shl    eax,0x8
c000f977:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f97b:	89 c1                	mov    ecx,eax
c000f97d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f981:	c1 e0 18             	shl    eax,0x18
c000f984:	89 c3                	mov    ebx,eax
c000f986:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c000f98b:	8d 50 01             	lea    edx,[eax+0x1]
c000f98e:	89 15 30 bb 02 c0    	mov    DWORD PTR ds:0xc002bb30,edx
c000f994:	09 d9                	or     ecx,ebx
c000f996:	89 ca                	mov    edx,ecx
c000f998:	89 14 85 40 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd44c0],edx
c000f99f:	eb 13                	jmp    c000f9b4 <scanMADT()+0x494>
c000f9a1:	8d 76 00             	lea    esi,[esi+0x0]
c000f9a4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f9a9:	83 f8 05             	cmp    eax,0x5
c000f9ac:	75 06                	jne    c000f9b4 <scanMADT()+0x494>
c000f9ae:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f9b3:	90                   	nop
c000f9b4:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f9b9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f9bd:	01 d0                	add    eax,edx
c000f9bf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f9c3:	e9 50 fc ff ff       	jmp    c000f618 <scanMADT()+0xf8>
c000f9c8:	90                   	nop
c000f9c9:	eb 05                	jmp    c000f9d0 <scanMADT()+0x4b0>
c000f9cb:	90                   	nop
c000f9cc:	90                   	nop
c000f9cd:	8d 76 00             	lea    esi,[esi+0x0]
c000f9d0:	83 c4 38             	add    esp,0x38
c000f9d3:	5b                   	pop    ebx
c000f9d4:	c3                   	ret    
c000f9d5:	90                   	nop
c000f9d6:	66 90                	xchg   ax,ax

c000f9d8 <ACPI::ACPI()>:
c000f9d8:	83 ec 0c             	sub    esp,0xc
c000f9db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9df:	83 ec 08             	sub    esp,0x8
c000f9e2:	68 83 21 02 c0       	push   0xc0022183
c000f9e7:	50                   	push   eax
c000f9e8:	e8 b5 d1 ff ff       	call   c000cba2 <Device::Device(char const*)>
c000f9ed:	83 c4 10             	add    esp,0x10
c000f9f0:	ba 90 23 02 c0       	mov    edx,0xc0022390
c000f9f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9f9:	89 10                	mov    DWORD PTR [eax],edx
c000f9fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9ff:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000fa06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa0a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000fa14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa18:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000fa22:	e8 f9 fa ff ff       	call   c000f520 <scanMADT()>
c000fa27:	90                   	nop
c000fa28:	83 c4 0c             	add    esp,0xc
c000fa2b:	c3                   	ret    

c000fa2c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000fa2c:	83 ec 2c             	sub    esp,0x2c
c000fa2f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fa33:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000fa37:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000fa3b:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000fa3f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000fa44:	88 c8                	mov    al,cl
c000fa46:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fa4a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fa4f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000fa57:	90                   	nop
c000fa58:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa5c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fa62:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000fa66:	0f 8d b0 00 00 00    	jge    c000fb1c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000fa6c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa70:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa74:	83 c2 2a             	add    edx,0x2a
c000fa77:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000fa7b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000fa80:	0f b7 c0             	movzx  eax,ax
c000fa83:	39 c2                	cmp    edx,eax
c000fa85:	0f 85 85 00 00 00    	jne    c000fb10 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000fa8b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa8f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa93:	83 c2 2a             	add    edx,0x2a
c000fa96:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000fa9a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000fa9f:	0f b6 c0             	movzx  eax,al
c000faa2:	39 c2                	cmp    edx,eax
c000faa4:	75 6a                	jne    c000fb10 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000faa6:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000faab:	85 c0                	test   eax,eax
c000faad:	74 3d                	je     c000faec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000faaf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fab3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fab7:	83 c2 2a             	add    edx,0x2a
c000faba:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000fabe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fac2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fac5:	39 c2                	cmp    edx,eax
c000fac7:	74 13                	je     c000fadc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000fac9:	83 ec 0c             	sub    esp,0xc
c000facc:	68 10 23 02 c0       	push   0xc0022310
c000fad1:	e8 81 1b 00 00       	call   c0011657 <KePanic(char const*)>
c000fad6:	83 c4 10             	add    esp,0x10
c000fad9:	8d 76 00             	lea    esi,[esi+0x0]
c000fadc:	83 ec 0c             	sub    esp,0xc
c000fadf:	68 88 21 02 c0       	push   0xc0022188
c000fae4:	e8 6e 1b 00 00       	call   c0011657 <KePanic(char const*)>
c000fae9:	83 c4 10             	add    esp,0x10
c000faec:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000faf4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000faf8:	83 c2 2a             	add    edx,0x2a
c000fafb:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000faff:	8b 02                	mov    eax,DWORD PTR [edx]
c000fb01:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000fb04:	89 01                	mov    DWORD PTR [ecx],eax
c000fb06:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000fb09:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb0e:	66 90                	xchg   ax,ax
c000fb10:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000fb15:	e9 3e ff ff ff       	jmp    c000fa58 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000fb1a:	66 90                	xchg   ax,ax
c000fb1c:	90                   	nop
c000fb1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fb21:	83 c4 2c             	add    esp,0x2c
c000fb24:	c2 04 00             	ret    0x4
c000fb27:	90                   	nop

c000fb28 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000fb28:	83 ec 1c             	sub    esp,0x1c
c000fb2b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fb2f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000fb33:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fb37:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000fb3c:	88 c8                	mov    al,cl
c000fb3e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000fb42:	88 d0                	mov    al,dl
c000fb44:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fb48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb4c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb56:	83 c2 2a             	add    edx,0x2a
c000fb59:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000fb5d:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000fb61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb65:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb6f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fb72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fb76:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000fb7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb7f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fb85:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000fb89:	83 c0 01             	add    eax,0x1
c000fb8c:	88 c1                	mov    cl,al
c000fb8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb92:	83 c2 2a             	add    edx,0x2a
c000fb95:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000fb99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb9d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fba3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fba7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fbaa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fbae:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000fbb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbb6:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fbbc:	8d 50 01             	lea    edx,[eax+0x1]
c000fbbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbc3:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000fbc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbcd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fbd3:	3d 00 02 00 00       	cmp    eax,0x200
c000fbd8:	75 12                	jne    c000fbec <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000fbda:	83 ec 0c             	sub    esp,0xc
c000fbdd:	68 97 21 02 c0       	push   0xc0022197
c000fbe2:	e8 70 1a 00 00       	call   c0011657 <KePanic(char const*)>
c000fbe7:	83 c4 10             	add    esp,0x10
c000fbea:	66 90                	xchg   ax,ax
c000fbec:	90                   	nop
c000fbed:	83 c4 1c             	add    esp,0x1c
c000fbf0:	c3                   	ret    
c000fbf1:	90                   	nop
c000fbf2:	66 90                	xchg   ax,ax

c000fbf4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000fbf4:	b8 00 00 00 00       	mov    eax,0x0
c000fbf9:	c3                   	ret    
c000fbfa:	66 90                	xchg   ax,ax

c000fbfc <ACPI::detectPCI()>:
c000fbfc:	53                   	push   ebx
c000fbfd:	83 ec 28             	sub    esp,0x28
c000fc00:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fc05:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000fc0a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fc0f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fc15:	83 e0 04             	and    eax,0x4
c000fc18:	0f b6 c0             	movzx  eax,al
c000fc1b:	85 c0                	test   eax,eax
c000fc1d:	74 2d                	je     c000fc4c <ACPI::detectPCI()+0x50>
c000fc1f:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000fc24:	83 ec 08             	sub    esp,0x8
c000fc27:	68 b4 21 02 c0       	push   0xc00221b4
c000fc2c:	50                   	push   eax
c000fc2d:	e8 6e f8 ff ff       	call   c000f4a0 <findDataTable(unsigned char*, char*)>
c000fc32:	83 c4 10             	add    esp,0x10
c000fc35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fc39:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fc3e:	74 0c                	je     c000fc4c <ACPI::detectPCI()+0x50>
c000fc40:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc45:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fc4a:	66 90                	xchg   ax,ax
c000fc4c:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000fc54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc58:	8a 00                	mov    al,BYTE PTR [eax]
c000fc5a:	0f b6 c0             	movzx  eax,al
c000fc5d:	83 f8 01             	cmp    eax,0x1
c000fc60:	75 0e                	jne    c000fc70 <ACPI::detectPCI()+0x74>
c000fc62:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc67:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fc6c:	eb 2e                	jmp    c000fc9c <ACPI::detectPCI()+0xa0>
c000fc6e:	66 90                	xchg   ax,ax
c000fc70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc74:	8a 00                	mov    al,BYTE PTR [eax]
c000fc76:	0f b6 c0             	movzx  eax,al
c000fc79:	83 f8 02             	cmp    eax,0x2
c000fc7c:	75 1e                	jne    c000fc9c <ACPI::detectPCI()+0xa0>
c000fc7e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fc83:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fc88:	85 c0                	test   eax,eax
c000fc8a:	74 10                	je     c000fc9c <ACPI::detectPCI()+0xa0>
c000fc8c:	83 ec 0c             	sub    esp,0xc
c000fc8f:	68 40 23 02 c0       	push   0xc0022340
c000fc94:	e8 be 19 00 00       	call   c0011657 <KePanic(char const*)>
c000fc99:	83 c4 10             	add    esp,0x10
c000fc9c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000fca0:	83 f0 01             	xor    eax,0x1
c000fca3:	0f b6 c0             	movzx  eax,al
c000fca6:	85 c0                	test   eax,eax
c000fca8:	74 46                	je     c000fcf0 <ACPI::detectPCI()+0xf4>
c000fcaa:	e8 81 04 ff ff       	call   c0000130 <manualPCIProbe>
c000fcaf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fcb3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000fcb8:	75 0e                	jne    c000fcc8 <ACPI::detectPCI()+0xcc>
c000fcba:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fcbf:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fcc4:	eb 2a                	jmp    c000fcf0 <ACPI::detectPCI()+0xf4>
c000fcc6:	66 90                	xchg   ax,ax
c000fcc8:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000fccd:	75 21                	jne    c000fcf0 <ACPI::detectPCI()+0xf4>
c000fccf:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fcd4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fcd9:	85 c0                	test   eax,eax
c000fcdb:	74 13                	je     c000fcf0 <ACPI::detectPCI()+0xf4>
c000fcdd:	83 ec 0c             	sub    esp,0xc
c000fce0:	68 40 23 02 c0       	push   0xc0022340
c000fce5:	e8 6d 19 00 00       	call   c0011657 <KePanic(char const*)>
c000fcea:	83 c4 10             	add    esp,0x10
c000fced:	8d 76 00             	lea    esi,[esi+0x0]
c000fcf0:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fcf5:	85 c0                	test   eax,eax
c000fcf7:	0f 84 87 00 00 00    	je     c000fd84 <ACPI::detectPCI()+0x188>
c000fcfd:	83 ec 0c             	sub    esp,0xc
c000fd00:	68 b9 21 02 c0       	push   0xc00221b9
c000fd05:	e8 4f 12 00 00       	call   c0010f59 <KeSetBootMessage(char const*)>
c000fd0a:	83 c4 10             	add    esp,0x10
c000fd0d:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000fd15:	83 ec 0c             	sub    esp,0xc
c000fd18:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fd1c:	e8 e2 7d ff ff       	call   c0007b03 <malloc>
c000fd21:	83 c4 10             	add    esp,0x10
c000fd24:	89 c3                	mov    ebx,eax
c000fd26:	83 ec 0c             	sub    esp,0xc
c000fd29:	53                   	push   ebx
c000fd2a:	e8 43 b5 00 00       	call   c001b272 <PCI::PCI()>
c000fd2f:	83 c4 10             	add    esp,0x10
c000fd32:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fd36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fd3a:	83 ec 08             	sub    esp,0x8
c000fd3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fd41:	50                   	push   eax
c000fd42:	e8 89 cc ff ff       	call   c000c9d0 <Device::addChild(Device*)>
c000fd47:	83 c4 10             	add    esp,0x10
c000fd4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd4e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd50:	83 c0 08             	add    eax,0x8
c000fd53:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd55:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fd5a:	85 d2                	test   edx,edx
c000fd5c:	74 0a                	je     c000fd68 <ACPI::detectPCI()+0x16c>
c000fd5e:	ba 01 00 00 00       	mov    edx,0x1
c000fd63:	eb 0b                	jmp    c000fd70 <ACPI::detectPCI()+0x174>
c000fd65:	8d 76 00             	lea    esi,[esi+0x0]
c000fd68:	ba 02 00 00 00       	mov    edx,0x2
c000fd6d:	8d 76 00             	lea    esi,[esi+0x0]
c000fd70:	6a 00                	push   0x0
c000fd72:	6a 00                	push   0x0
c000fd74:	52                   	push   edx
c000fd75:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd79:	ff d0                	call   eax
c000fd7b:	83 c4 10             	add    esp,0x10
c000fd7e:	e9 91 00 00 00       	jmp    c000fe14 <ACPI::detectPCI()+0x218>
c000fd83:	90                   	nop
c000fd84:	83 ec 0c             	sub    esp,0xc
c000fd87:	68 d1 21 02 c0       	push   0xc00221d1
c000fd8c:	e8 c8 11 00 00       	call   c0010f59 <KeSetBootMessage(char const*)>
c000fd91:	83 c4 10             	add    esp,0x10
c000fd94:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fd9b:	83 ec 0c             	sub    esp,0xc
c000fd9e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fda2:	e8 5c 7d ff ff       	call   c0007b03 <malloc>
c000fda7:	83 c4 10             	add    esp,0x10
c000fdaa:	89 c3                	mov    ebx,eax
c000fdac:	83 ec 0c             	sub    esp,0xc
c000fdaf:	53                   	push   ebx
c000fdb0:	e8 65 c0 00 00       	call   c001be1a <IDE::IDE()>
c000fdb5:	83 c4 10             	add    esp,0x10
c000fdb8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fdbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fdc0:	83 ec 08             	sub    esp,0x8
c000fdc3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fdc7:	50                   	push   eax
c000fdc8:	e8 03 cc ff ff       	call   c000c9d0 <Device::addChild(Device*)>
c000fdcd:	83 c4 10             	add    esp,0x10
c000fdd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdd4:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fdde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fde2:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fdeb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdef:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fdf8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdfc:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdfe:	83 c0 08             	add    eax,0x8
c000fe01:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe03:	6a 00                	push   0x0
c000fe05:	6a 00                	push   0x0
c000fe07:	6a 00                	push   0x0
c000fe09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fe0d:	ff d0                	call   eax
c000fe0f:	83 c4 10             	add    esp,0x10
c000fe12:	66 90                	xchg   ax,ax
c000fe14:	90                   	nop
c000fe15:	83 c4 28             	add    esp,0x28
c000fe18:	5b                   	pop    ebx
c000fe19:	c3                   	ret    
c000fe1a:	66 90                	xchg   ax,ax

c000fe1c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fe1c:	83 ec 1c             	sub    esp,0x1c
c000fe1f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe23:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fe26:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fe2a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fe2f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fe34:	83 ec 08             	sub    esp,0x8
c000fe37:	52                   	push   edx
c000fe38:	50                   	push   eax
c000fe39:	e8 8c 73 ff ff       	call   c00071ca <Computer::readCMOS(unsigned char)>
c000fe3e:	83 c4 10             	add    esp,0x10
c000fe41:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fe45:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fe4a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fe4f:	83 ec 04             	sub    esp,0x4
c000fe52:	6a 01                	push   0x1
c000fe54:	52                   	push   edx
c000fe55:	50                   	push   eax
c000fe56:	e8 87 74 ff ff       	call   c00072e2 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fe5b:	83 c4 10             	add    esp,0x10
c000fe5e:	90                   	nop
c000fe5f:	83 c4 1c             	add    esp,0x1c
c000fe62:	c3                   	ret    
c000fe63:	90                   	nop

c000fe64 <ACPI::sleep()>:
c000fe64:	83 ec 0c             	sub    esp,0xc
c000fe67:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fe6c:	85 c0                	test   eax,eax
c000fe6e:	74 08                	je     c000fe78 <ACPI::sleep()+0x14>
c000fe70:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fe75:	ff d0                	call   eax
c000fe77:	90                   	nop
c000fe78:	90                   	nop
c000fe79:	83 c4 0c             	add    esp,0xc
c000fe7c:	c3                   	ret    
c000fe7d:	90                   	nop
c000fe7e:	66 90                	xchg   ax,ax

c000fe80 <ACPI::open(int, int, void*)>:
c000fe80:	55                   	push   ebp
c000fe81:	89 e5                	mov    ebp,esp
c000fe83:	53                   	push   ebx
c000fe84:	81 ec 74 01 00 00    	sub    esp,0x174
c000fe8a:	83 ec 0c             	sub    esp,0xc
c000fe8d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fe90:	e8 67 fd ff ff       	call   c000fbfc <ACPI::detectPCI()>
c000fe95:	83 c4 10             	add    esp,0x10
c000fe98:	83 ec 0c             	sub    esp,0xc
c000fe9b:	68 68 23 02 c0       	push   0xc0022368
c000fea0:	e8 b4 10 00 00       	call   c0010f59 <KeSetBootMessage(char const*)>
c000fea5:	83 c4 10             	add    esp,0x10
c000fea8:	b8 4c 05 00 00       	mov    eax,0x54c
c000fead:	8a 00                	mov    al,BYTE PTR [eax]
c000feaf:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000feb2:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000feb6:	83 f8 01             	cmp    eax,0x1
c000feb9:	75 15                	jne    c000fed0 <ACPI::open(int, int, void*)+0x50>
c000febb:	83 ec 0c             	sub    esp,0xc
c000febe:	68 e6 21 02 c0       	push   0xc00221e6
c000fec3:	e8 d1 4d 00 00       	call   c0014c99 <Thr::loadKernelSymbolTable(char const*)>
c000fec8:	83 c4 10             	add    esp,0x10
c000fecb:	eb 33                	jmp    c000ff00 <ACPI::open(int, int, void*)+0x80>
c000fecd:	8d 76 00             	lea    esi,[esi+0x0]
c000fed0:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fed4:	3d bb 00 00 00       	cmp    eax,0xbb
c000fed9:	75 15                	jne    c000fef0 <ACPI::open(int, int, void*)+0x70>
c000fedb:	83 ec 0c             	sub    esp,0xc
c000fede:	68 04 22 02 c0       	push   0xc0022204
c000fee3:	e8 b1 4d 00 00       	call   c0014c99 <Thr::loadKernelSymbolTable(char const*)>
c000fee8:	83 c4 10             	add    esp,0x10
c000feeb:	eb 13                	jmp    c000ff00 <ACPI::open(int, int, void*)+0x80>
c000feed:	8d 76 00             	lea    esi,[esi+0x0]
c000fef0:	83 ec 0c             	sub    esp,0xc
c000fef3:	68 22 22 02 c0       	push   0xc0022222
c000fef8:	e8 5a 17 00 00       	call   c0011657 <KePanic(char const*)>
c000fefd:	83 c4 10             	add    esp,0x10
c000ff00:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000ff04:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000ff0b:	83 ec 0c             	sub    esp,0xc
c000ff0e:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000ff11:	e8 ed 7b ff ff       	call   c0007b03 <malloc>
c000ff16:	83 c4 10             	add    esp,0x10
c000ff19:	89 c3                	mov    ebx,eax
c000ff1b:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000ff20:	83 ec 04             	sub    esp,0x4
c000ff23:	50                   	push   eax
c000ff24:	68 3c 22 02 c0       	push   0xc002223c
c000ff29:	53                   	push   ebx
c000ff2a:	e8 23 bc ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c000ff2f:	83 c4 10             	add    esp,0x10
c000ff32:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000ff35:	83 ec 08             	sub    esp,0x8
c000ff38:	6a 01                	push   0x1
c000ff3a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ff3d:	e8 2e bc ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c000ff42:	83 c4 10             	add    esp,0x10
c000ff45:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000ff48:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000ff4c:	75 12                	jne    c000ff60 <ACPI::open(int, int, void*)+0xe0>
c000ff4e:	83 ec 0c             	sub    esp,0xc
c000ff51:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ff54:	e8 75 bc ff ff       	call   c000bbce <File::close()>
c000ff59:	83 c4 10             	add    esp,0x10
c000ff5c:	eb 06                	jmp    c000ff64 <ACPI::open(int, int, void*)+0xe4>
c000ff5e:	66 90                	xchg   ax,ax
c000ff60:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ff64:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000ff68:	74 16                	je     c000ff80 <ACPI::open(int, int, void*)+0x100>
c000ff6a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ff6d:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff6f:	83 c0 08             	add    eax,0x8
c000ff72:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff74:	83 ec 0c             	sub    esp,0xc
c000ff77:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000ff7a:	ff d0                	call   eax
c000ff7c:	83 c4 10             	add    esp,0x10
c000ff7f:	90                   	nop
c000ff80:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000ff83:	83 f0 01             	xor    eax,0x1
c000ff86:	0f b6 c0             	movzx  eax,al
c000ff89:	85 c0                	test   eax,eax
c000ff8b:	74 3b                	je     c000ffc8 <ACPI::open(int, int, void*)+0x148>
c000ff8d:	83 ec 0c             	sub    esp,0xc
c000ff90:	68 5a 22 02 c0       	push   0xc002225a
c000ff95:	e8 bf 0f 00 00       	call   c0010f59 <KeSetBootMessage(char const*)>
c000ff9a:	83 c4 10             	add    esp,0x10
c000ff9d:	83 ec 04             	sub    esp,0x4
c000ffa0:	6a 0c                	push   0xc
c000ffa2:	68 75 22 02 c0       	push   0xc0022275
c000ffa7:	68 86 22 02 c0       	push   0xc0022286
c000ffac:	e8 21 3f 00 00       	call   c0013ed2 <Reg::readIntWithDefault(char*, char*, int)>
c000ffb1:	83 c4 10             	add    esp,0x10
c000ffb4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000ffb7:	83 ec 0c             	sub    esp,0xc
c000ffba:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000ffbd:	e8 88 98 ff ff       	call   c000984a <Virt::setupPageSwapping(int)>
c000ffc2:	83 c4 10             	add    esp,0x10
c000ffc5:	8d 76 00             	lea    esi,[esi+0x0]
c000ffc8:	83 ec 0c             	sub    esp,0xc
c000ffcb:	68 75 0c 02 c0       	push   0xc0020c75
c000ffd0:	e8 84 0f 00 00       	call   c0010f59 <KeSetBootMessage(char const*)>
c000ffd5:	83 c4 10             	add    esp,0x10
c000ffd8:	8d 45 b8             	lea    eax,[ebp-0x48]
c000ffdb:	83 ec 08             	sub    esp,0x8
c000ffde:	6a 13                	push   0x13
c000ffe0:	50                   	push   eax
c000ffe1:	e8 3c cd ff ff       	call   c000cd22 <getDevicesOfType(DeviceType)>
c000ffe6:	83 c4 0c             	add    esp,0xc
c000ffe9:	8d 76 00             	lea    esi,[esi+0x0]
c000ffec:	83 ec 0c             	sub    esp,0xc
c000ffef:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fff2:	50                   	push   eax
c000fff3:	e8 28 00 01 00       	call   c0020020 <LinkedList<Device>::isEmpty()>
c000fff8:	83 c4 10             	add    esp,0x10
c000fffb:	83 f0 01             	xor    eax,0x1
c000fffe:	0f b6 c0             	movzx  eax,al
c0010001:	85 c0                	test   eax,eax
c0010003:	0f 84 1f 01 00 00    	je     c0010128 <ACPI::open(int, int, void*)+0x2a8>
c0010009:	83 ec 0c             	sub    esp,0xc
c001000c:	8d 45 b8             	lea    eax,[ebp-0x48]
c001000f:	50                   	push   eax
c0010010:	e8 27 00 01 00       	call   c002003c <LinkedList<Device>::getFirstElement()>
c0010015:	83 c4 10             	add    esp,0x10
c0010018:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001001b:	83 ec 0c             	sub    esp,0xc
c001001e:	8d 45 b8             	lea    eax,[ebp-0x48]
c0010021:	50                   	push   eax
c0010022:	e8 1d 00 01 00       	call   c0020044 <LinkedList<Device>::removeFirst()>
c0010027:	83 c4 10             	add    esp,0x10
c001002a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001002d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0010030:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0010033:	b8 24 00 00 00       	mov    eax,0x24
c0010038:	83 e0 fc             	and    eax,0xfffffffc
c001003b:	89 c3                	mov    ebx,eax
c001003d:	b8 00 00 00 00       	mov    eax,0x0
c0010042:	66 90                	xchg   ax,ax
c0010044:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c001004b:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c0010052:	83 c0 04             	add    eax,0x4
c0010055:	39 d8                	cmp    eax,ebx
c0010057:	72 eb                	jb     c0010044 <ACPI::open(int, int, void*)+0x1c4>
c0010059:	83 ec 08             	sub    esp,0x8
c001005c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c0010062:	50                   	push   eax
c0010063:	83 ec 24             	sub    esp,0x24
c0010066:	89 e1                	mov    ecx,esp
c0010068:	b8 24 00 00 00       	mov    eax,0x24
c001006d:	83 e0 fc             	and    eax,0xfffffffc
c0010070:	89 c3                	mov    ebx,eax
c0010072:	b8 00 00 00 00       	mov    eax,0x0
c0010077:	90                   	nop
c0010078:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c001007f:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c0010082:	83 c0 04             	add    eax,0x4
c0010085:	39 d8                	cmp    eax,ebx
c0010087:	72 ef                	jb     c0010078 <ACPI::open(int, int, void*)+0x1f8>
c0010089:	e8 cc b6 00 00       	call   c001b75a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001008e:	83 c4 30             	add    esp,0x30
c0010091:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0010094:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0010098:	0f 84 4e ff ff ff    	je     c000ffec <ACPI::open(int, int, void*)+0x16c>
c001009e:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c00100a5:	83 ec 0c             	sub    esp,0xc
c00100a8:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c00100ab:	e8 53 7a ff ff       	call   c0007b03 <malloc>
c00100b0:	83 c4 10             	add    esp,0x10
c00100b3:	89 c3                	mov    ebx,eax
c00100b5:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00100ba:	83 ec 04             	sub    esp,0x4
c00100bd:	50                   	push   eax
c00100be:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c00100c1:	53                   	push   ebx
c00100c2:	e8 8b ba ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c00100c7:	83 c4 10             	add    esp,0x10
c00100ca:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c00100cd:	83 ec 0c             	sub    esp,0xc
c00100d0:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c00100d3:	e8 5c bd ff ff       	call   c000be34 <File::exists()>
c00100d8:	83 c4 10             	add    esp,0x10
c00100db:	0f b6 c0             	movzx  eax,al
c00100de:	85 c0                	test   eax,eax
c00100e0:	74 22                	je     c0010104 <ACPI::open(int, int, void*)+0x284>
c00100e2:	83 ec 08             	sub    esp,0x8
c00100e5:	6a 01                	push   0x1
c00100e7:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c00100ea:	e8 2c 56 00 00       	call   c001571b <Thr::loadDLL(char const*, bool)>
c00100ef:	83 c4 10             	add    esp,0x10
c00100f2:	83 ec 08             	sub    esp,0x8
c00100f5:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00100f8:	50                   	push   eax
c00100f9:	e8 5d 58 00 00       	call   c001595b <Thr::executeDLL(unsigned long, void*)>
c00100fe:	83 c4 10             	add    esp,0x10
c0010101:	8d 76 00             	lea    esi,[esi+0x0]
c0010104:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0010108:	0f 84 de fe ff ff    	je     c000ffec <ACPI::open(int, int, void*)+0x16c>
c001010e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0010111:	8b 00                	mov    eax,DWORD PTR [eax]
c0010113:	83 c0 08             	add    eax,0x8
c0010116:	8b 00                	mov    eax,DWORD PTR [eax]
c0010118:	83 ec 0c             	sub    esp,0xc
c001011b:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c001011e:	ff d0                	call   eax
c0010120:	83 c4 10             	add    esp,0x10
c0010123:	e9 c4 fe ff ff       	jmp    c000ffec <ACPI::open(int, int, void*)+0x16c>
c0010128:	83 ec 0c             	sub    esp,0xc
c001012b:	8d 45 b8             	lea    eax,[ebp-0x48]
c001012e:	50                   	push   eax
c001012f:	e8 e8 fe 00 00       	call   c002001c <LinkedList<Device>::~LinkedList()>
c0010134:	83 c4 10             	add    esp,0x10
c0010137:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c001013d:	83 ec 08             	sub    esp,0x8
c0010140:	6a 01                	push   0x1
c0010142:	68 8d 22 02 c0       	push   0xc002228d
c0010147:	e8 cf 55 00 00       	call   c001571b <Thr::loadDLL(char const*, bool)>
c001014c:	83 c4 10             	add    esp,0x10
c001014f:	83 ec 08             	sub    esp,0x8
c0010152:	53                   	push   ebx
c0010153:	50                   	push   eax
c0010154:	e8 02 58 00 00       	call   c001595b <Thr::executeDLL(unsigned long, void*)>
c0010159:	83 c4 10             	add    esp,0x10
c001015c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010161:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c0010167:	83 e0 04             	and    eax,0x4
c001016a:	0f b6 c0             	movzx  eax,al
c001016d:	85 c0                	test   eax,eax
c001016f:	0f 84 e3 00 00 00    	je     c0010258 <ACPI::open(int, int, void*)+0x3d8>
c0010175:	83 ec 0c             	sub    esp,0xc
c0010178:	68 aa 22 02 c0       	push   0xc00222aa
c001017d:	e8 d7 0d 00 00       	call   c0010f59 <KeSetBootMessage(char const*)>
c0010182:	83 c4 10             	add    esp,0x10
c0010185:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c001018c:	83 ec 0c             	sub    esp,0xc
c001018f:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c0010192:	e8 6c 79 ff ff       	call   c0007b03 <malloc>
c0010197:	83 c4 10             	add    esp,0x10
c001019a:	89 c3                	mov    ebx,eax
c001019c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00101a1:	83 ec 04             	sub    esp,0x4
c00101a4:	50                   	push   eax
c00101a5:	68 c7 22 02 c0       	push   0xc00222c7
c00101aa:	53                   	push   ebx
c00101ab:	e8 a2 b9 ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c00101b0:	83 c4 10             	add    esp,0x10
c00101b3:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00101b6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00101ba:	74 1c                	je     c00101d8 <ACPI::open(int, int, void*)+0x358>
c00101bc:	83 ec 0c             	sub    esp,0xc
c00101bf:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c00101c2:	e8 6d bc ff ff       	call   c000be34 <File::exists()>
c00101c7:	83 c4 10             	add    esp,0x10
c00101ca:	0f b6 c0             	movzx  eax,al
c00101cd:	85 c0                	test   eax,eax
c00101cf:	74 07                	je     c00101d8 <ACPI::open(int, int, void*)+0x358>
c00101d1:	b0 01                	mov    al,0x1
c00101d3:	eb 07                	jmp    c00101dc <ACPI::open(int, int, void*)+0x35c>
c00101d5:	8d 76 00             	lea    esi,[esi+0x0]
c00101d8:	b0 00                	mov    al,0x0
c00101da:	66 90                	xchg   ax,ax
c00101dc:	0f b6 c0             	movzx  eax,al
c00101df:	85 c0                	test   eax,eax
c00101e1:	74 21                	je     c0010204 <ACPI::open(int, int, void*)+0x384>
c00101e3:	83 ec 08             	sub    esp,0x8
c00101e6:	6a 01                	push   0x1
c00101e8:	68 c7 22 02 c0       	push   0xc00222c7
c00101ed:	e8 29 55 00 00       	call   c001571b <Thr::loadDLL(char const*, bool)>
c00101f2:	83 c4 10             	add    esp,0x10
c00101f5:	83 ec 08             	sub    esp,0x8
c00101f8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00101fb:	50                   	push   eax
c00101fc:	e8 5a 57 00 00       	call   c001595b <Thr::executeDLL(unsigned long, void*)>
c0010201:	83 c4 10             	add    esp,0x10
c0010204:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0010208:	74 1e                	je     c0010228 <ACPI::open(int, int, void*)+0x3a8>
c001020a:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001020e:	74 18                	je     c0010228 <ACPI::open(int, int, void*)+0x3a8>
c0010210:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0010213:	8b 00                	mov    eax,DWORD PTR [eax]
c0010215:	83 c0 08             	add    eax,0x8
c0010218:	8b 00                	mov    eax,DWORD PTR [eax]
c001021a:	83 ec 0c             	sub    esp,0xc
c001021d:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c0010220:	ff d0                	call   eax
c0010222:	83 c4 10             	add    esp,0x10
c0010225:	8d 76 00             	lea    esi,[esi+0x0]
c0010228:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c001022d:	83 ec 08             	sub    esp,0x8
c0010230:	68 e4 22 02 c0       	push   0xc00222e4
c0010235:	50                   	push   eax
c0010236:	e8 65 f2 ff ff       	call   c000f4a0 <findDataTable(unsigned char*, char*)>
c001023b:	83 c4 10             	add    esp,0x10
c001023e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0010241:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0010245:	74 11                	je     c0010258 <ACPI::open(int, int, void*)+0x3d8>
c0010247:	83 ec 08             	sub    esp,0x8
c001024a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001024d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010250:	e8 c7 fb ff ff       	call   c000fe1c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0010255:	83 c4 10             	add    esp,0x10
c0010258:	b8 00 00 00 00       	mov    eax,0x0
c001025d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010260:	c9                   	leave  
c0010261:	c3                   	ret    

c0010262 <CPU::close(int, int, void*)>:
c0010262:	31 c0                	xor    eax,eax
c0010264:	c3                   	ret    
c0010265:	90                   	nop

c0010266 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0010266:	60                   	pusha  
c0010267:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001026b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001026f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010273:	9c                   	pushf  
c0010274:	fa                   	cli    
c0010275:	0f 09                	wbinvd 
c0010277:	0f 30                	wrmsr  
c0010279:	9d                   	popf   
c001027a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001027e:	89 02                	mov    DWORD PTR [edx],eax
c0010280:	61                   	popa   
c0010281:	c3                   	ret    

c0010282 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0010282:	60                   	pusha  
c0010283:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010287:	9c                   	pushf  
c0010288:	fa                   	cli    
c0010289:	0f 09                	wbinvd 
c001028b:	31 c0                	xor    eax,eax
c001028d:	31 d2                	xor    edx,edx
c001028f:	0f 32                	rdmsr  
c0010291:	9d                   	popf   
c0010292:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010296:	89 02                	mov    DWORD PTR [edx],eax
c0010298:	61                   	popa   
c0010299:	c3                   	ret    

c001029a <CPU::AMD_K6_writeback(int, int, int)>:
c001029a:	56                   	push   esi
c001029b:	53                   	push   ebx
c001029c:	83 ec 10             	sub    esp,0x10
c001029f:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00102a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00102a8:	75 5d                	jne    c0010307 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00102aa:	83 f8 08             	cmp    eax,0x8
c00102ad:	75 09                	jne    c00102b8 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00102af:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00102b4:	7e 13                	jle    c00102c9 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00102b6:	eb 30                	jmp    c00102e8 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00102b8:	83 f8 06             	cmp    eax,0x6
c00102bb:	7c 4a                	jl     c0010307 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00102bd:	83 f8 07             	cmp    eax,0x7
c00102c0:	7e 07                	jle    c00102c9 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00102c2:	83 f8 09             	cmp    eax,0x9
c00102c5:	74 21                	je     c00102e8 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00102c7:	eb 3e                	jmp    c0010307 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00102c9:	8b 1d dc 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026edc
c00102cf:	89 e6                	mov    esi,esp
c00102d1:	56                   	push   esi
c00102d2:	68 82 00 00 c0       	push   0xc0000082
c00102d7:	e8 a6 ff ff ff       	call   c0010282 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00102dc:	c1 eb 15             	shr    ebx,0x15
c00102df:	56                   	push   esi
c00102e0:	83 e3 7e             	and    ebx,0x7e
c00102e3:	6a 00                	push   0x0
c00102e5:	53                   	push   ebx
c00102e6:	eb 12                	jmp    c00102fa <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00102e8:	89 e3                	mov    ebx,esp
c00102ea:	53                   	push   ebx
c00102eb:	68 82 00 00 c0       	push   0xc0000082
c00102f0:	e8 8d ff ff ff       	call   c0010282 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00102f5:	53                   	push   ebx
c00102f6:	6a 00                	push   0x0
c00102f8:	6a 00                	push   0x0
c00102fa:	68 82 00 00 c0       	push   0xc0000082
c00102ff:	e8 62 ff ff ff       	call   c0010266 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0010304:	83 c4 18             	add    esp,0x18
c0010307:	83 c4 10             	add    esp,0x10
c001030a:	5b                   	pop    ebx
c001030b:	5e                   	pop    esi
c001030c:	c3                   	ret    
c001030d:	90                   	nop

c001030e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001030e:	55                   	push   ebp
c001030f:	57                   	push   edi
c0010310:	56                   	push   esi
c0010311:	53                   	push   ebx
c0010312:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010316:	39 05 58 39 02 c0    	cmp    DWORD PTR ds:0xc0023958,eax
c001031c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010320:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010324:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0010328:	75 23                	jne    c001034d <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001032a:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c001032f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010333:	89 06                	mov    DWORD PTR [esi],eax
c0010335:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c001033a:	89 07                	mov    DWORD PTR [edi],eax
c001033c:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c0010341:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010344:	a1 80 bd 02 c0       	mov    eax,ds:0xc002bd80
c0010349:	89 02                	mov    DWORD PTR [edx],eax
c001034b:	eb 3f                	jmp    c001038c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001034d:	31 c9                	xor    ecx,ecx
c001034f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010353:	0f a2                	cpuid  
c0010355:	89 06                	mov    DWORD PTR [esi],eax
c0010357:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001035b:	89 1f                	mov    DWORD PTR [edi],ebx
c001035d:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0010360:	89 10                	mov    DWORD PTR [eax],edx
c0010362:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010366:	a3 58 39 02 c0       	mov    ds:0xc0023958,eax
c001036b:	8b 06                	mov    eax,DWORD PTR [esi]
c001036d:	a3 8c bd 02 c0       	mov    ds:0xc002bd8c,eax
c0010372:	8b 07                	mov    eax,DWORD PTR [edi]
c0010374:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c0010379:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001037c:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c0010381:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010385:	8b 00                	mov    eax,DWORD PTR [eax]
c0010387:	a3 80 bd 02 c0       	mov    ds:0xc002bd80,eax
c001038c:	5b                   	pop    ebx
c001038d:	5e                   	pop    esi
c001038e:	5f                   	pop    edi
c001038f:	5d                   	pop    ebp
c0010390:	c3                   	ret    
c0010391:	90                   	nop

c0010392 <CPU::cpuidCheckEDX(unsigned int)>:
c0010392:	83 ec 10             	sub    esp,0x10
c0010395:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010399:	50                   	push   eax
c001039a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001039e:	50                   	push   eax
c001039f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103a3:	50                   	push   eax
c00103a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103a8:	50                   	push   eax
c00103a9:	6a 01                	push   0x1
c00103ab:	e8 5e ff ff ff       	call   c001030e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00103b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103b4:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00103b8:	0f 95 c0             	setne  al
c00103bb:	83 c4 24             	add    esp,0x24
c00103be:	c3                   	ret    
c00103bf:	90                   	nop

c00103c0 <CPU::cpuidCheckECX(unsigned int)>:
c00103c0:	83 ec 10             	sub    esp,0x10
c00103c3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103c7:	50                   	push   eax
c00103c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103cc:	50                   	push   eax
c00103cd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103d1:	50                   	push   eax
c00103d2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103d6:	50                   	push   eax
c00103d7:	6a 01                	push   0x1
c00103d9:	e8 30 ff ff ff       	call   c001030e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00103de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103e2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00103e6:	0f 95 c0             	setne  al
c00103e9:	83 c4 24             	add    esp,0x24
c00103ec:	c3                   	ret    
c00103ed:	90                   	nop

c00103ee <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00103ee:	83 ec 10             	sub    esp,0x10
c00103f1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103f5:	50                   	push   eax
c00103f6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103fa:	50                   	push   eax
c00103fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103ff:	50                   	push   eax
c0010400:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010404:	50                   	push   eax
c0010405:	6a 07                	push   0x7
c0010407:	e8 02 ff ff ff       	call   c001030e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001040c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010410:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0010414:	0f 95 c0             	setne  al
c0010417:	83 c4 24             	add    esp,0x24
c001041a:	c3                   	ret    
c001041b:	90                   	nop

c001041c <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001041c:	83 ec 10             	sub    esp,0x10
c001041f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010423:	50                   	push   eax
c0010424:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010428:	50                   	push   eax
c0010429:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001042d:	50                   	push   eax
c001042e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010432:	50                   	push   eax
c0010433:	6a 07                	push   0x7
c0010435:	e8 d4 fe ff ff       	call   c001030e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001043a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001043e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010442:	0f 95 c0             	setne  al
c0010445:	83 c4 24             	add    esp,0x24
c0010448:	c3                   	ret    
c0010449:	90                   	nop

c001044a <CPU::CPU()>:
c001044a:	83 ec 0c             	sub    esp,0xc
c001044d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010451:	83 ec 08             	sub    esp,0x8
c0010454:	68 a5 24 02 c0       	push   0xc00224a5
c0010459:	50                   	push   eax
c001045a:	e8 43 c7 ff ff       	call   c000cba2 <Device::Device(char const*)>
c001045f:	83 c4 10             	add    esp,0x10
c0010462:	ba 38 25 02 c0       	mov    edx,0xc0022538
c0010467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001046b:	89 10                	mov    DWORD PTR [eax],edx
c001046d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010471:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001047b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001047f:	05 78 01 00 00       	add    eax,0x178
c0010484:	83 ec 0c             	sub    esp,0xc
c0010487:	50                   	push   eax
c0010488:	e8 1f 6f ff ff       	call   c00073ac <GDT::GDT()>
c001048d:	83 c4 10             	add    esp,0x10
c0010490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010494:	05 7c 09 00 00       	add    eax,0x97c
c0010499:	83 ec 0c             	sub    esp,0xc
c001049c:	50                   	push   eax
c001049d:	e8 5a 71 ff ff       	call   c00075fc <IDT::IDT()>
c00104a2:	83 c4 10             	add    esp,0x10
c00104a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a9:	05 7c 11 00 00       	add    eax,0x117c
c00104ae:	83 ec 0c             	sub    esp,0xc
c00104b1:	50                   	push   eax
c00104b2:	e8 a5 8a ff ff       	call   c0008f5c <TSS::TSS()>
c00104b7:	83 c4 10             	add    esp,0x10
c00104ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104be:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c00104c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c9:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c00104d3:	90                   	nop
c00104d4:	83 c4 0c             	add    esp,0xc
c00104d7:	c3                   	ret    

c00104d8 <CPU::displayFeatures()>:
c00104d8:	c3                   	ret    
c00104d9:	90                   	nop

c00104da <CPU::detectFeatures()>:
c00104da:	55                   	push   ebp
c00104db:	57                   	push   edi
c00104dc:	56                   	push   esi
c00104dd:	53                   	push   ebx
c00104de:	83 ec 30             	sub    esp,0x30
c00104e1:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00104e5:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c00104ef:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00104f5:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c00104fc:	6a 0d                	push   0xd
c00104fe:	6a 00                	push   0x0
c0010500:	55                   	push   ebp
c0010501:	e8 ea ff fe ff       	call   c00004f0 <memset>
c0010506:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001050b:	83 c4 10             	add    esp,0x10
c001050e:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c0010515:	0f 84 db 05 00 00    	je     c0010af6 <CPU::detectFeatures()+0x61c>
c001051b:	83 ec 0c             	sub    esp,0xc
c001051e:	89 ef                	mov    edi,ebp
c0010520:	6a 10                	push   0x10
c0010522:	e8 6b fe ff ff       	call   c0010392 <CPU::cpuidCheckEDX(unsigned int)>
c0010527:	83 e0 01             	and    eax,0x1
c001052a:	8d 14 00             	lea    edx,[eax+eax*1]
c001052d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010533:	83 e0 fd             	and    eax,0xfffffffd
c0010536:	09 d0                	or     eax,edx
c0010538:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001053e:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0010545:	e8 48 fe ff ff       	call   c0010392 <CPU::cpuidCheckEDX(unsigned int)>
c001054a:	83 e0 01             	and    eax,0x1
c001054d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010554:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001055a:	83 e0 fb             	and    eax,0xfffffffb
c001055d:	09 d0                	or     eax,edx
c001055f:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010565:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001056c:	e8 21 fe ff ff       	call   c0010392 <CPU::cpuidCheckEDX(unsigned int)>
c0010571:	83 e0 01             	and    eax,0x1
c0010574:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001057b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010581:	83 e0 f7             	and    eax,0xfffffff7
c0010584:	09 d0                	or     eax,edx
c0010586:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001058c:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0010593:	e8 fa fd ff ff       	call   c0010392 <CPU::cpuidCheckEDX(unsigned int)>
c0010598:	83 e0 01             	and    eax,0x1
c001059b:	c1 e0 04             	shl    eax,0x4
c001059e:	89 c2                	mov    edx,eax
c00105a0:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105a6:	83 e0 ef             	and    eax,0xffffffef
c00105a9:	09 d0                	or     eax,edx
c00105ab:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105b1:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00105b8:	e8 d5 fd ff ff       	call   c0010392 <CPU::cpuidCheckEDX(unsigned int)>
c00105bd:	83 e0 01             	and    eax,0x1
c00105c0:	c1 e0 05             	shl    eax,0x5
c00105c3:	89 c2                	mov    edx,eax
c00105c5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105cb:	83 e0 df             	and    eax,0xffffffdf
c00105ce:	09 d0                	or     eax,edx
c00105d0:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105d6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00105dd:	e8 b0 fd ff ff       	call   c0010392 <CPU::cpuidCheckEDX(unsigned int)>
c00105e2:	83 e0 01             	and    eax,0x1
c00105e5:	8d 14 00             	lea    edx,[eax+eax*1]
c00105e8:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00105ee:	83 e0 fd             	and    eax,0xfffffffd
c00105f1:	09 d0                	or     eax,edx
c00105f3:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00105f9:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0010600:	e8 8d fd ff ff       	call   c0010392 <CPU::cpuidCheckEDX(unsigned int)>
c0010605:	83 e0 01             	and    eax,0x1
c0010608:	c1 e0 06             	shl    eax,0x6
c001060b:	89 c2                	mov    edx,eax
c001060d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010613:	83 e0 bf             	and    eax,0xffffffbf
c0010616:	09 d0                	or     eax,edx
c0010618:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001061e:	58                   	pop    eax
c001061f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010623:	50                   	push   eax
c0010624:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010628:	50                   	push   eax
c0010629:	8d 74 24 28          	lea    esi,[esp+0x28]
c001062d:	56                   	push   esi
c001062e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010632:	50                   	push   eax
c0010633:	6a 00                	push   0x0
c0010635:	e8 d4 fc ff ff       	call   c001030e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001063a:	b8 04 00 00 00       	mov    eax,0x4
c001063f:	89 c1                	mov    ecx,eax
c0010641:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010643:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0010649:	89 c1                	mov    ecx,eax
c001064b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001064f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010651:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0010657:	89 c1                	mov    ecx,eax
c0010659:	8d 74 24 38          	lea    esi,[esp+0x38]
c001065d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001065f:	83 c4 18             	add    esp,0x18
c0010662:	68 b4 23 02 c0       	push   0xc00223b4
c0010667:	55                   	push   ebp
c0010668:	e8 13 01 ff ff       	call   c0000780 <strcmp>
c001066d:	83 c4 10             	add    esp,0x10
c0010670:	85 c0                	test   eax,eax
c0010672:	75 0f                	jne    c0010683 <CPU::detectFeatures()+0x1a9>
c0010674:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001067e:	e9 22 02 00 00       	jmp    c00108a5 <CPU::detectFeatures()+0x3cb>
c0010683:	50                   	push   eax
c0010684:	50                   	push   eax
c0010685:	68 c1 23 02 c0       	push   0xc00223c1
c001068a:	55                   	push   ebp
c001068b:	e8 f0 00 ff ff       	call   c0000780 <strcmp>
c0010690:	83 c4 10             	add    esp,0x10
c0010693:	85 c0                	test   eax,eax
c0010695:	74 dd                	je     c0010674 <CPU::detectFeatures()+0x19a>
c0010697:	50                   	push   eax
c0010698:	50                   	push   eax
c0010699:	68 ce 23 02 c0       	push   0xc00223ce
c001069e:	55                   	push   ebp
c001069f:	e8 dc 00 ff ff       	call   c0000780 <strcmp>
c00106a4:	83 c4 10             	add    esp,0x10
c00106a7:	85 c0                	test   eax,eax
c00106a9:	74 2a                	je     c00106d5 <CPU::detectFeatures()+0x1fb>
c00106ab:	50                   	push   eax
c00106ac:	50                   	push   eax
c00106ad:	68 db 23 02 c0       	push   0xc00223db
c00106b2:	55                   	push   ebp
c00106b3:	e8 c8 00 ff ff       	call   c0000780 <strcmp>
c00106b8:	83 c4 10             	add    esp,0x10
c00106bb:	85 c0                	test   eax,eax
c00106bd:	74 16                	je     c00106d5 <CPU::detectFeatures()+0x1fb>
c00106bf:	50                   	push   eax
c00106c0:	50                   	push   eax
c00106c1:	68 e8 23 02 c0       	push   0xc00223e8
c00106c6:	55                   	push   ebp
c00106c7:	e8 b4 00 ff ff       	call   c0000780 <strcmp>
c00106cc:	83 c4 10             	add    esp,0x10
c00106cf:	85 c0                	test   eax,eax
c00106d1:	74 48                	je     c001071b <CPU::detectFeatures()+0x241>
c00106d3:	eb 0f                	jmp    c00106e4 <CPU::detectFeatures()+0x20a>
c00106d5:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00106df:	e9 c1 01 00 00       	jmp    c00108a5 <CPU::detectFeatures()+0x3cb>
c00106e4:	50                   	push   eax
c00106e5:	50                   	push   eax
c00106e6:	68 f5 23 02 c0       	push   0xc00223f5
c00106eb:	55                   	push   ebp
c00106ec:	e8 8f 00 ff ff       	call   c0000780 <strcmp>
c00106f1:	83 c4 10             	add    esp,0x10
c00106f4:	85 c0                	test   eax,eax
c00106f6:	74 23                	je     c001071b <CPU::detectFeatures()+0x241>
c00106f8:	57                   	push   edi
c00106f9:	57                   	push   edi
c00106fa:	68 02 24 02 c0       	push   0xc0022402
c00106ff:	55                   	push   ebp
c0010700:	e8 7b 00 ff ff       	call   c0000780 <strcmp>
c0010705:	83 c4 10             	add    esp,0x10
c0010708:	85 c0                	test   eax,eax
c001070a:	75 1e                	jne    c001072a <CPU::detectFeatures()+0x250>
c001070c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010716:	e9 8a 01 00 00       	jmp    c00108a5 <CPU::detectFeatures()+0x3cb>
c001071b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0010725:	e9 7b 01 00 00       	jmp    c00108a5 <CPU::detectFeatures()+0x3cb>
c001072a:	56                   	push   esi
c001072b:	56                   	push   esi
c001072c:	68 0f 24 02 c0       	push   0xc002240f
c0010731:	55                   	push   ebp
c0010732:	e8 49 00 ff ff       	call   c0000780 <strcmp>
c0010737:	83 c4 10             	add    esp,0x10
c001073a:	85 c0                	test   eax,eax
c001073c:	75 0f                	jne    c001074d <CPU::detectFeatures()+0x273>
c001073e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0010748:	e9 58 01 00 00       	jmp    c00108a5 <CPU::detectFeatures()+0x3cb>
c001074d:	51                   	push   ecx
c001074e:	51                   	push   ecx
c001074f:	68 ce 23 02 c0       	push   0xc00223ce
c0010754:	55                   	push   ebp
c0010755:	e8 26 00 ff ff       	call   c0000780 <strcmp>
c001075a:	83 c4 10             	add    esp,0x10
c001075d:	85 c0                	test   eax,eax
c001075f:	75 0f                	jne    c0010770 <CPU::detectFeatures()+0x296>
c0010761:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001076b:	e9 35 01 00 00       	jmp    c00108a5 <CPU::detectFeatures()+0x3cb>
c0010770:	52                   	push   edx
c0010771:	52                   	push   edx
c0010772:	68 1c 24 02 c0       	push   0xc002241c
c0010777:	55                   	push   ebp
c0010778:	e8 03 00 ff ff       	call   c0000780 <strcmp>
c001077d:	83 c4 10             	add    esp,0x10
c0010780:	85 c0                	test   eax,eax
c0010782:	75 0f                	jne    c0010793 <CPU::detectFeatures()+0x2b9>
c0010784:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001078e:	e9 12 01 00 00       	jmp    c00108a5 <CPU::detectFeatures()+0x3cb>
c0010793:	50                   	push   eax
c0010794:	50                   	push   eax
c0010795:	68 29 24 02 c0       	push   0xc0022429
c001079a:	55                   	push   ebp
c001079b:	e8 e0 ff fe ff       	call   c0000780 <strcmp>
c00107a0:	83 c4 10             	add    esp,0x10
c00107a3:	85 c0                	test   eax,eax
c00107a5:	75 0f                	jne    c00107b6 <CPU::detectFeatures()+0x2dc>
c00107a7:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00107b1:	e9 ef 00 00 00       	jmp    c00108a5 <CPU::detectFeatures()+0x3cb>
c00107b6:	50                   	push   eax
c00107b7:	50                   	push   eax
c00107b8:	68 36 24 02 c0       	push   0xc0022436
c00107bd:	55                   	push   ebp
c00107be:	e8 bd ff fe ff       	call   c0000780 <strcmp>
c00107c3:	83 c4 10             	add    esp,0x10
c00107c6:	85 c0                	test   eax,eax
c00107c8:	75 0f                	jne    c00107d9 <CPU::detectFeatures()+0x2ff>
c00107ca:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00107d4:	e9 cc 00 00 00       	jmp    c00108a5 <CPU::detectFeatures()+0x3cb>
c00107d9:	50                   	push   eax
c00107da:	50                   	push   eax
c00107db:	68 43 24 02 c0       	push   0xc0022443
c00107e0:	55                   	push   ebp
c00107e1:	e8 9a ff fe ff       	call   c0000780 <strcmp>
c00107e6:	83 c4 10             	add    esp,0x10
c00107e9:	85 c0                	test   eax,eax
c00107eb:	75 0f                	jne    c00107fc <CPU::detectFeatures()+0x322>
c00107ed:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00107f7:	e9 a9 00 00 00       	jmp    c00108a5 <CPU::detectFeatures()+0x3cb>
c00107fc:	50                   	push   eax
c00107fd:	50                   	push   eax
c00107fe:	68 50 24 02 c0       	push   0xc0022450
c0010803:	55                   	push   ebp
c0010804:	e8 77 ff fe ff       	call   c0000780 <strcmp>
c0010809:	83 c4 10             	add    esp,0x10
c001080c:	85 c0                	test   eax,eax
c001080e:	75 0f                	jne    c001081f <CPU::detectFeatures()+0x345>
c0010810:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001081a:	e9 86 00 00 00       	jmp    c00108a5 <CPU::detectFeatures()+0x3cb>
c001081f:	50                   	push   eax
c0010820:	50                   	push   eax
c0010821:	68 5d 24 02 c0       	push   0xc002245d
c0010826:	55                   	push   ebp
c0010827:	e8 54 ff fe ff       	call   c0000780 <strcmp>
c001082c:	83 c4 10             	add    esp,0x10
c001082f:	85 c0                	test   eax,eax
c0010831:	75 0c                	jne    c001083f <CPU::detectFeatures()+0x365>
c0010833:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001083d:	eb 66                	jmp    c00108a5 <CPU::detectFeatures()+0x3cb>
c001083f:	50                   	push   eax
c0010840:	50                   	push   eax
c0010841:	68 6a 24 02 c0       	push   0xc002246a
c0010846:	55                   	push   ebp
c0010847:	e8 34 ff fe ff       	call   c0000780 <strcmp>
c001084c:	83 c4 10             	add    esp,0x10
c001084f:	85 c0                	test   eax,eax
c0010851:	75 0c                	jne    c001085f <CPU::detectFeatures()+0x385>
c0010853:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001085d:	eb 46                	jmp    c00108a5 <CPU::detectFeatures()+0x3cb>
c001085f:	57                   	push   edi
c0010860:	57                   	push   edi
c0010861:	68 77 24 02 c0       	push   0xc0022477
c0010866:	55                   	push   ebp
c0010867:	e8 14 ff fe ff       	call   c0000780 <strcmp>
c001086c:	83 c4 10             	add    esp,0x10
c001086f:	85 c0                	test   eax,eax
c0010871:	74 e0                	je     c0010853 <CPU::detectFeatures()+0x379>
c0010873:	56                   	push   esi
c0010874:	56                   	push   esi
c0010875:	68 84 24 02 c0       	push   0xc0022484
c001087a:	55                   	push   ebp
c001087b:	e8 00 ff fe ff       	call   c0000780 <strcmp>
c0010880:	83 c4 10             	add    esp,0x10
c0010883:	85 c0                	test   eax,eax
c0010885:	74 cc                	je     c0010853 <CPU::detectFeatures()+0x379>
c0010887:	51                   	push   ecx
c0010888:	51                   	push   ecx
c0010889:	68 91 24 02 c0       	push   0xc0022491
c001088e:	55                   	push   ebp
c001088f:	e8 ec fe fe ff       	call   c0000780 <strcmp>
c0010894:	83 c4 10             	add    esp,0x10
c0010897:	85 c0                	test   eax,eax
c0010899:	74 b8                	je     c0010853 <CPU::detectFeatures()+0x379>
c001089b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00108a5:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00108aa:	0f 86 be 00 00 00    	jbe    c001096e <CPU::detectFeatures()+0x494>
c00108b0:	83 ec 0c             	sub    esp,0xc
c00108b3:	68 80 00 00 00       	push   0x80
c00108b8:	e8 31 fb ff ff       	call   c00103ee <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00108bd:	83 e0 01             	and    eax,0x1
c00108c0:	c1 e0 06             	shl    eax,0x6
c00108c3:	89 c2                	mov    edx,eax
c00108c5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00108cb:	83 e0 bf             	and    eax,0xffffffbf
c00108ce:	09 d0                	or     eax,edx
c00108d0:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00108d6:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00108dd:	e8 0c fb ff ff       	call   c00103ee <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00108e2:	83 e0 01             	and    eax,0x1
c00108e5:	c1 e0 04             	shl    eax,0x4
c00108e8:	89 c2                	mov    edx,eax
c00108ea:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00108f0:	83 e0 ef             	and    eax,0xffffffef
c00108f3:	09 d0                	or     eax,edx
c00108f5:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00108fb:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0010902:	e8 e7 fa ff ff       	call   c00103ee <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010907:	89 c2                	mov    edx,eax
c0010909:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001090f:	c1 e2 07             	shl    edx,0x7
c0010912:	83 e0 7f             	and    eax,0x7f
c0010915:	09 d0                	or     eax,edx
c0010917:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001091d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0010924:	e8 f3 fa ff ff       	call   c001041c <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010929:	83 e0 01             	and    eax,0x1
c001092c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010933:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010939:	83 e0 f7             	and    eax,0xfffffff7
c001093c:	09 d0                	or     eax,edx
c001093e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010944:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001094b:	e8 cc fa ff ff       	call   c001041c <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010950:	83 c4 10             	add    esp,0x10
c0010953:	83 e0 01             	and    eax,0x1
c0010956:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001095d:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010963:	83 e0 fb             	and    eax,0xfffffffb
c0010966:	09 d0                	or     eax,edx
c0010968:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001096e:	83 ec 0c             	sub    esp,0xc
c0010971:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010975:	50                   	push   eax
c0010976:	8d 44 24 28          	lea    eax,[esp+0x28]
c001097a:	50                   	push   eax
c001097b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001097f:	57                   	push   edi
c0010980:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010984:	56                   	push   esi
c0010985:	6a 01                	push   0x1
c0010987:	e8 82 f9 ff ff       	call   c001030e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001098c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010990:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0010996:	89 c1                	mov    ecx,eax
c0010998:	83 e1 0f             	and    ecx,0xf
c001099b:	83 e2 f0             	and    edx,0xfffffff0
c001099e:	09 ca                	or     edx,ecx
c00109a0:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00109a6:	89 c2                	mov    edx,eax
c00109a8:	c1 ea 04             	shr    edx,0x4
c00109ab:	83 e2 0f             	and    edx,0xf
c00109ae:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00109b2:	89 d1                	mov    ecx,edx
c00109b4:	83 c4 20             	add    esp,0x20
c00109b7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00109bd:	c1 e1 06             	shl    ecx,0x6
c00109c0:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c00109c6:	09 ca                	or     edx,ecx
c00109c8:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00109cf:	89 c2                	mov    edx,eax
c00109d1:	c1 ea 08             	shr    edx,0x8
c00109d4:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c00109da:	83 e2 0f             	and    edx,0xf
c00109dd:	89 d5                	mov    ebp,edx
c00109df:	83 e5 03             	and    ebp,0x3
c00109e2:	c1 e5 06             	shl    ebp,0x6
c00109e5:	83 e1 3f             	and    ecx,0x3f
c00109e8:	09 e9                	or     ecx,ebp
c00109ea:	89 d5                	mov    ebp,edx
c00109ec:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c00109f2:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c00109f8:	c1 ed 02             	shr    ebp,0x2
c00109fb:	83 e1 c0             	and    ecx,0xffffffc0
c00109fe:	09 e9                	or     ecx,ebp
c0010a00:	89 c5                	mov    ebp,eax
c0010a02:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0010a08:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0010a0e:	c1 ed 08             	shr    ebp,0x8
c0010a11:	83 e5 30             	and    ebp,0x30
c0010a14:	83 e1 cf             	and    ecx,0xffffffcf
c0010a17:	09 e9                	or     ecx,ebp
c0010a19:	83 fa 06             	cmp    edx,0x6
c0010a1c:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0010a22:	74 05                	je     c0010a29 <CPU::detectFeatures()+0x54f>
c0010a24:	83 fa 0f             	cmp    edx,0xf
c0010a27:	75 64                	jne    c0010a8d <CPU::detectFeatures()+0x5b3>
c0010a29:	89 c1                	mov    ecx,eax
c0010a2b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010a31:	c1 e9 10             	shr    ecx,0x10
c0010a34:	c1 e1 04             	shl    ecx,0x4
c0010a37:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0010a3b:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010a41:	0f b6 c9             	movzx  ecx,cl
c0010a44:	c1 e1 06             	shl    ecx,0x6
c0010a47:	09 e9                	or     ecx,ebp
c0010a49:	83 fa 0f             	cmp    edx,0xf
c0010a4c:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010a53:	75 38                	jne    c0010a8d <CPU::detectFeatures()+0x5b3>
c0010a55:	c1 e8 14             	shr    eax,0x14
c0010a58:	83 c0 0f             	add    eax,0xf
c0010a5b:	0f b6 c0             	movzx  eax,al
c0010a5e:	89 c2                	mov    edx,eax
c0010a60:	c1 e8 02             	shr    eax,0x2
c0010a63:	83 e2 03             	and    edx,0x3
c0010a66:	89 d1                	mov    ecx,edx
c0010a68:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010a6e:	c1 e1 06             	shl    ecx,0x6
c0010a71:	83 e2 3f             	and    edx,0x3f
c0010a74:	09 ca                	or     edx,ecx
c0010a76:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010a7c:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010a82:	83 e2 c0             	and    edx,0xffffffc0
c0010a85:	09 d0                	or     eax,edx
c0010a87:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010a8d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010a93:	83 ec 0c             	sub    esp,0xc
c0010a96:	83 c8 07             	or     eax,0x7
c0010a99:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010a9f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010aa3:	50                   	push   eax
c0010aa4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010aa8:	55                   	push   ebp
c0010aa9:	57                   	push   edi
c0010aaa:	56                   	push   esi
c0010aab:	68 00 00 00 80       	push   0x80000000
c0010ab0:	e8 59 f8 ff ff       	call   c001030e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010ab5:	83 c4 20             	add    esp,0x20
c0010ab8:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010ac0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010ac4:	76 1e                	jbe    c0010ae4 <CPU::detectFeatures()+0x60a>
c0010ac6:	83 ec 0c             	sub    esp,0xc
c0010ac9:	50                   	push   eax
c0010aca:	55                   	push   ebp
c0010acb:	57                   	push   edi
c0010acc:	56                   	push   esi
c0010acd:	68 01 00 00 80       	push   0x80000001
c0010ad2:	e8 37 f8 ff ff       	call   c001030e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010ad7:	83 c4 20             	add    esp,0x20
c0010ada:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010ae4:	52                   	push   edx
c0010ae5:	52                   	push   edx
c0010ae6:	68 9d 24 02 c0       	push   0xc002249d
c0010aeb:	53                   	push   ebx
c0010aec:	e8 a3 c0 ff ff       	call   c000cb94 <Device::setName(char const*)>
c0010af1:	83 c4 10             	add    esp,0x10
c0010af4:	eb 69                	jmp    c0010b5f <CPU::detectFeatures()+0x685>
c0010af6:	50                   	push   eax
c0010af7:	50                   	push   eax
c0010af8:	68 02 24 02 c0       	push   0xc0022402
c0010afd:	55                   	push   ebp
c0010afe:	e8 4d fb fe ff       	call   c0000650 <strcpy>
c0010b03:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010b0d:	e8 b1 f6 fe ff       	call   c00001c3 <is486>
c0010b12:	83 c4 10             	add    esp,0x10
c0010b15:	85 c0                	test   eax,eax
c0010b17:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010b1d:	74 1f                	je     c0010b3e <CPU::detectFeatures()+0x664>
c0010b1f:	83 c8 07             	or     eax,0x7
c0010b22:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010b28:	0f 20 c0             	mov    eax,cr0
c0010b2b:	83 e0 14             	and    eax,0x14
c0010b2e:	83 f8 04             	cmp    eax,0x4
c0010b31:	75 10                	jne    c0010b43 <CPU::detectFeatures()+0x669>
c0010b33:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b39:	83 e0 fd             	and    eax,0xfffffffd
c0010b3c:	eb 1b                	jmp    c0010b59 <CPU::detectFeatures()+0x67f>
c0010b3e:	83 e0 f8             	and    eax,0xfffffff8
c0010b41:	eb df                	jmp    c0010b22 <CPU::detectFeatures()+0x648>
c0010b43:	e8 56 f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010b48:	83 e0 01             	and    eax,0x1
c0010b4b:	8d 14 00             	lea    edx,[eax+eax*1]
c0010b4e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b54:	83 e0 fd             	and    eax,0xfffffffd
c0010b57:	09 d0                	or     eax,edx
c0010b59:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010b5f:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010b66:	74 17                	je     c0010b7f <CPU::detectFeatures()+0x6a5>
c0010b68:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c0010b6e:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010b74:	83 c8 10             	or     eax,0x10
c0010b77:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010b7d:	eb 20                	jmp    c0010b9f <CPU::detectFeatures()+0x6c5>
c0010b7f:	e8 1a f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010b84:	83 e0 01             	and    eax,0x1
c0010b87:	8d 14 00             	lea    edx,[eax+eax*1]
c0010b8a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b90:	83 e0 fd             	and    eax,0xfffffffd
c0010b93:	09 d0                	or     eax,edx
c0010b95:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010b9b:	a8 02                	test   al,0x2
c0010b9d:	75 c9                	jne    c0010b68 <CPU::detectFeatures()+0x68e>
c0010b9f:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010ba6:	83 c4 2c             	add    esp,0x2c
c0010ba9:	5b                   	pop    ebx
c0010baa:	5e                   	pop    esi
c0010bab:	5f                   	pop    edi
c0010bac:	5d                   	pop    ebp
c0010bad:	c3                   	ret    

c0010bae <CPU::setupSMEP()>:
c0010bae:	0f 20 e0             	mov    eax,cr4
c0010bb1:	0d 00 00 10 00       	or     eax,0x100000
c0010bb6:	0f 22 e0             	mov    cr4,eax
c0010bb9:	c3                   	ret    

c0010bba <CPU::setupUMIP()>:
c0010bba:	0f 20 e0             	mov    eax,cr4
c0010bbd:	80 cc 08             	or     ah,0x8
c0010bc0:	0f 22 e0             	mov    cr4,eax
c0010bc3:	c3                   	ret    

c0010bc4 <CPU::setupTSC()>:
c0010bc4:	0f 20 e0             	mov    eax,cr4
c0010bc7:	83 c8 04             	or     eax,0x4
c0010bca:	0f 22 e0             	mov    cr4,eax
c0010bcd:	c3                   	ret    

c0010bce <CPU::setupLargePages()>:
c0010bce:	0f 20 e0             	mov    eax,cr4
c0010bd1:	83 c8 10             	or     eax,0x10
c0010bd4:	0f 22 e0             	mov    cr4,eax
c0010bd7:	c3                   	ret    

c0010bd8 <CPU::setupPAT()>:
c0010bd8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010bdd:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010be4:	74 2c                	je     c0010c12 <CPU::setupPAT()+0x3a>
c0010be6:	53                   	push   ebx
c0010be7:	83 ec 10             	sub    esp,0x10
c0010bea:	68 77 02 00 00       	push   0x277
c0010bef:	50                   	push   eax
c0010bf0:	e8 1d 65 ff ff       	call   c0007112 <Computer::rdmsr(unsigned int)>
c0010bf5:	83 e2 f8             	and    edx,0xfffffff8
c0010bf8:	83 ca 01             	or     edx,0x1
c0010bfb:	52                   	push   edx
c0010bfc:	50                   	push   eax
c0010bfd:	68 77 02 00 00       	push   0x277
c0010c02:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0010c08:	e8 31 65 ff ff       	call   c000713e <Computer::wrmsr(unsigned int, unsigned long long)>
c0010c0d:	83 c4 28             	add    esp,0x28
c0010c10:	5b                   	pop    ebx
c0010c11:	c3                   	ret    
c0010c12:	c3                   	ret    
c0010c13:	90                   	nop

c0010c14 <CPU::setupMTRR()>:
c0010c14:	c3                   	ret    
c0010c15:	90                   	nop

c0010c16 <CPU::setupGlobalPages()>:
c0010c16:	0f 20 e0             	mov    eax,cr4
c0010c19:	0c 80                	or     al,0x80
c0010c1b:	0f 22 e0             	mov    cr4,eax
c0010c1e:	c3                   	ret    
c0010c1f:	90                   	nop

c0010c20 <CPU::allowUsermodeDataAccess()>:
c0010c20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c24:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010c2b:	74 03                	je     c0010c30 <CPU::allowUsermodeDataAccess()+0x10>
c0010c2d:	0f 01 cb             	stac   
c0010c30:	c3                   	ret    
c0010c31:	90                   	nop

c0010c32 <CPU::prohibitUsermodeDataAccess()>:
c0010c32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c36:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010c3d:	74 03                	je     c0010c42 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010c3f:	0f 01 ca             	clac   
c0010c42:	c3                   	ret    
c0010c43:	90                   	nop

c0010c44 <CPU::setupSMAP()>:
c0010c44:	0f 20 e0             	mov    eax,cr4
c0010c47:	0d 00 00 20 00       	or     eax,0x200000
c0010c4c:	0f 22 e0             	mov    cr4,eax
c0010c4f:	eb e1                	jmp    c0010c32 <CPU::prohibitUsermodeDataAccess()>
c0010c51:	90                   	nop

c0010c52 <CPU::setupFeatures()>:
c0010c52:	53                   	push   ebx
c0010c53:	83 ec 08             	sub    esp,0x8
c0010c56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c5a:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010c61:	74 18                	je     c0010c7b <CPU::setupFeatures()+0x29>
c0010c63:	83 ec 0c             	sub    esp,0xc
c0010c66:	68 a9 24 02 c0       	push   0xc00224a9
c0010c6b:	e8 ca 9c ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0010c70:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c73:	e8 42 ff ff ff       	call   c0010bba <CPU::setupUMIP()>
c0010c78:	83 c4 10             	add    esp,0x10
c0010c7b:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010c82:	74 18                	je     c0010c9c <CPU::setupFeatures()+0x4a>
c0010c84:	83 ec 0c             	sub    esp,0xc
c0010c87:	68 b3 24 02 c0       	push   0xc00224b3
c0010c8c:	e8 a9 9c ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0010c91:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c94:	e8 2b ff ff ff       	call   c0010bc4 <CPU::setupTSC()>
c0010c99:	83 c4 10             	add    esp,0x10
c0010c9c:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010ca3:	74 18                	je     c0010cbd <CPU::setupFeatures()+0x6b>
c0010ca5:	83 ec 0c             	sub    esp,0xc
c0010ca8:	68 bc 24 02 c0       	push   0xc00224bc
c0010cad:	e8 88 9c ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0010cb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cb5:	e8 14 ff ff ff       	call   c0010bce <CPU::setupLargePages()>
c0010cba:	83 c4 10             	add    esp,0x10
c0010cbd:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010cc4:	74 18                	je     c0010cde <CPU::setupFeatures()+0x8c>
c0010cc6:	83 ec 0c             	sub    esp,0xc
c0010cc9:	68 c5 24 02 c0       	push   0xc00224c5
c0010cce:	e8 67 9c ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0010cd3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cd6:	e8 3b ff ff ff       	call   c0010c16 <CPU::setupGlobalPages()>
c0010cdb:	83 c4 10             	add    esp,0x10
c0010cde:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010ce5:	74 18                	je     c0010cff <CPU::setupFeatures()+0xad>
c0010ce7:	83 ec 0c             	sub    esp,0xc
c0010cea:	68 d7 24 02 c0       	push   0xc00224d7
c0010cef:	e8 46 9c ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0010cf4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cf7:	e8 dc fe ff ff       	call   c0010bd8 <CPU::setupPAT()>
c0010cfc:	83 c4 10             	add    esp,0x10
c0010cff:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010d06:	74 11                	je     c0010d19 <CPU::setupFeatures()+0xc7>
c0010d08:	c7 44 24 10 e0 24 02 c0 	mov    DWORD PTR [esp+0x10],0xc00224e0
c0010d10:	83 c4 08             	add    esp,0x8
c0010d13:	5b                   	pop    ebx
c0010d14:	e9 21 9c ff ff       	jmp    c000a93a <Dbg::kprintf(char const*, ...)>
c0010d19:	83 c4 08             	add    esp,0x8
c0010d1c:	5b                   	pop    ebx
c0010d1d:	c3                   	ret    

c0010d1e <CPU::open(int, int, void*)>:
c0010d1e:	55                   	push   ebp
c0010d1f:	57                   	push   edi
c0010d20:	56                   	push   esi
c0010d21:	53                   	push   ebx
c0010d22:	83 ec 18             	sub    esp,0x18
c0010d25:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010d29:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010d2d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010d31:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010d37:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010d3d:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010d43:	50                   	push   eax
c0010d44:	e8 c5 66 ff ff       	call   c000740e <GDT::setup()>
c0010d49:	83 c4 0c             	add    esp,0xc
c0010d4c:	6a 00                	push   0x0
c0010d4e:	68 ef be ad de       	push   0xdeadbeef
c0010d53:	55                   	push   ebp
c0010d54:	e8 47 82 ff ff       	call   c0008fa0 <TSS::setup(unsigned long, unsigned long)>
c0010d59:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010d5c:	e8 1f 82 ff ff       	call   c0008f80 <TSS::flush()>
c0010d61:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010d67:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d6a:	e8 03 69 ff ff       	call   c0007672 <IDT::setup()>
c0010d6f:	b8 00 04 00 00       	mov    eax,0x400
c0010d74:	0f 23 f8             	mov    db7,eax
c0010d77:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010d81:	e8 8c 70 ff ff       	call   c0007e12 <Phys::allocatePage()>
c0010d86:	83 c4 10             	add    esp,0x10
c0010d89:	85 f6                	test   esi,esi
c0010d8b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010d91:	89 38                	mov    DWORD PTR [eax],edi
c0010d93:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010d99:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010d9c:	74 10                	je     c0010dae <CPU::open(int, int, void*)+0x90>
c0010d9e:	50                   	push   eax
c0010d9f:	50                   	push   eax
c0010da0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010da6:	56                   	push   esi
c0010da7:	e8 10 8b ff ff       	call   c00098bc <VAS::setCPUSpecific(unsigned long)>
c0010dac:	eb 0d                	jmp    c0010dbb <CPU::open(int, int, void*)+0x9d>
c0010dae:	83 ec 0c             	sub    esp,0xc
c0010db1:	68 ea 24 02 c0       	push   0xc00224ea
c0010db6:	e8 9c 08 00 00       	call   c0011657 <KePanic(char const*)>
c0010dbb:	83 c4 10             	add    esp,0x10
c0010dbe:	83 ec 0c             	sub    esp,0xc
c0010dc1:	68 f8 24 02 c0       	push   0xc00224f8
c0010dc6:	e8 8e 01 00 00       	call   c0010f59 <KeSetBootMessage(char const*)>
c0010dcb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dce:	e8 07 f7 ff ff       	call   c00104da <CPU::detectFeatures()>
c0010dd3:	c7 04 24 1b 25 02 c0 	mov    DWORD PTR [esp],0xc002251b
c0010dda:	e8 7a 01 00 00       	call   c0010f59 <KeSetBootMessage(char const*)>
c0010ddf:	e8 5f 74 00 00       	call   c0018243 <HalInitialise()>
c0010de4:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0010de9:	83 e0 10             	and    eax,0x10
c0010dec:	83 f8 01             	cmp    eax,0x1
c0010def:	19 c0                	sbb    eax,eax
c0010df1:	83 e0 46             	and    eax,0x46
c0010df4:	83 c0 1e             	add    eax,0x1e
c0010df7:	89 04 24             	mov    DWORD PTR [esp],eax
c0010dfa:	e8 3a d6 ff ff       	call   c000e439 <setupTimer(int)>
c0010dff:	83 c4 10             	add    esp,0x10
c0010e02:	f6 05 d0 6e 02 c0 20 	test   BYTE PTR ds:0xc0026ed0,0x20
c0010e09:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010e0f:	74 0c                	je     c0010e1d <CPU::open(int, int, void*)+0xff>
c0010e11:	83 ec 0c             	sub    esp,0xc
c0010e14:	53                   	push   ebx
c0010e15:	e8 38 fe ff ff       	call   c0010c52 <CPU::setupFeatures()>
c0010e1a:	83 c4 10             	add    esp,0x10
c0010e1d:	83 c4 0c             	add    esp,0xc
c0010e20:	31 c0                	xor    eax,eax
c0010e22:	5b                   	pop    ebx
c0010e23:	5e                   	pop    esi
c0010e24:	5f                   	pop    edi
c0010e25:	5d                   	pop    ebp
c0010e26:	c3                   	ret    

c0010e27 <KeInitialiseAtexit()>:
c0010e27:	83 ec 10             	sub    esp,0x10
c0010e2a:	6a 60                	push   0x60
c0010e2c:	6a 00                	push   0x0
c0010e2e:	68 20 be 02 c0       	push   0xc002be20
c0010e33:	c7 05 a0 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bda0,0x0
c0010e3d:	e8 ae f6 fe ff       	call   c00004f0 <memset>
c0010e42:	83 c4 1c             	add    esp,0x1c
c0010e45:	c3                   	ret    

c0010e46 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010e46:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0010e4b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010e4f:	89 14 85 20 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41e0],edx
c0010e56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010e5a:	89 14 85 c0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4240],edx
c0010e61:	40                   	inc    eax
c0010e62:	a3 a0 bd 02 c0       	mov    ds:0xc002bda0,eax
c0010e67:	83 f8 17             	cmp    eax,0x17
c0010e6a:	7e 0d                	jle    c0010e79 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010e6c:	c7 44 24 04 5c 25 02 c0 	mov    DWORD PTR [esp+0x4],0xc002255c
c0010e74:	e9 de 07 00 00       	jmp    c0011657 <KePanic(char const*)>
c0010e79:	c3                   	ret    

c0010e7a <KeExecuteAtexit()>:
c0010e7a:	53                   	push   ebx
c0010e7b:	31 db                	xor    ebx,ebx
c0010e7d:	83 ec 08             	sub    esp,0x8
c0010e80:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c0010e86:	7e 50                	jle    c0010ed8 <KeExecuteAtexit()+0x5e>
c0010e88:	8b 04 9d 20 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41e0]
c0010e8f:	85 c0                	test   eax,eax
c0010e91:	74 42                	je     c0010ed5 <KeExecuteAtexit()+0x5b>
c0010e93:	51                   	push   ecx
c0010e94:	50                   	push   eax
c0010e95:	53                   	push   ebx
c0010e96:	68 75 25 02 c0       	push   0xc0022575
c0010e9b:	e8 9a 9a ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0010ea0:	58                   	pop    eax
c0010ea1:	ff 34 9d c0 bd 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4240]
c0010ea8:	ff 14 9d 20 be 02 c0 	call   DWORD PTR [ebx*4-0x3ffd41e0]
c0010eaf:	c7 04 24 97 25 02 c0 	mov    DWORD PTR [esp],0xc0022597
c0010eb6:	e8 7f 9a ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0010ebb:	c7 04 24 f7 36 02 c0 	mov    DWORD PTR [esp],0xc00236f7
c0010ec2:	c7 04 9d 20 be 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd41e0],0x0
c0010ecd:	e8 68 9a ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0010ed2:	83 c4 10             	add    esp,0x10
c0010ed5:	43                   	inc    ebx
c0010ed6:	eb a8                	jmp    c0010e80 <KeExecuteAtexit()+0x6>
c0010ed8:	83 c4 08             	add    esp,0x8
c0010edb:	5b                   	pop    ebx
c0010edc:	c3                   	ret    

c0010edd <KeDisplaySplashScreen()>:
c0010edd:	55                   	push   ebp
c0010ede:	bd 05 00 00 00       	mov    ebp,0x5
c0010ee3:	57                   	push   edi
c0010ee4:	bf 0a 00 00 00       	mov    edi,0xa
c0010ee9:	56                   	push   esi
c0010eea:	31 f6                	xor    esi,esi
c0010eec:	53                   	push   ebx
c0010eed:	31 db                	xor    ebx,ebx
c0010eef:	83 ec 0c             	sub    esp,0xc
c0010ef2:	0f b6 96 60 39 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdc6a0]
c0010ef9:	85 d2                	test   edx,edx
c0010efb:	89 d0                	mov    eax,edx
c0010efd:	74 52                	je     c0010f51 <KeDisplaySplashScreen()+0x74>
c0010eff:	80 bb 96 39 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdc66a],0xdb
c0010f06:	75 13                	jne    c0010f1b <KeDisplaySplashScreen()+0x3e>
c0010f08:	0f b6 8b 95 39 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdc66b]
c0010f0f:	83 e1 fe             	and    ecx,0xfffffffe
c0010f12:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010f18:	75 01                	jne    c0010f1b <KeDisplaySplashScreen()+0x3e>
c0010f1a:	47                   	inc    edi
c0010f1b:	83 fa 0d             	cmp    edx,0xd
c0010f1e:	74 28                	je     c0010f48 <KeDisplaySplashScreen()+0x6b>
c0010f20:	83 fa 0a             	cmp    edx,0xa
c0010f23:	75 0a                	jne    c0010f2f <KeDisplaySplashScreen()+0x52>
c0010f25:	45                   	inc    ebp
c0010f26:	bf 0a 00 00 00       	mov    edi,0xa
c0010f2b:	31 db                	xor    ebx,ebx
c0010f2d:	eb 19                	jmp    c0010f48 <KeDisplaySplashScreen()+0x6b>
c0010f2f:	83 ec 0c             	sub    esp,0xc
c0010f32:	0f be c0             	movsx  eax,al
c0010f35:	55                   	push   ebp
c0010f36:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010f39:	43                   	inc    ebx
c0010f3a:	52                   	push   edx
c0010f3b:	6a 00                	push   0x0
c0010f3d:	6a 0e                	push   0xe
c0010f3f:	50                   	push   eax
c0010f40:	e8 7b 7f 00 00       	call   c0018ec0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010f45:	83 c4 20             	add    esp,0x20
c0010f48:	46                   	inc    esi
c0010f49:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010f4f:	75 a1                	jne    c0010ef2 <KeDisplaySplashScreen()+0x15>
c0010f51:	83 c4 0c             	add    esp,0xc
c0010f54:	5b                   	pop    ebx
c0010f55:	5e                   	pop    esi
c0010f56:	5f                   	pop    edi
c0010f57:	5d                   	pop    ebp
c0010f58:	c3                   	ret    

c0010f59 <KeSetBootMessage(char const*)>:
c0010f59:	57                   	push   edi
c0010f5a:	56                   	push   esi
c0010f5b:	53                   	push   ebx
c0010f5c:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010f62:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010f69:	68 9e 00 00 00       	push   0x9e
c0010f6e:	6a 00                	push   0x0
c0010f70:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010f74:	56                   	push   esi
c0010f75:	e8 76 f5 fe ff       	call   c00004f0 <memset>
c0010f7a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f7d:	e8 fe f5 fe ff       	call   c0000580 <strlen>
c0010f82:	ba 50 00 00 00       	mov    edx,0x50
c0010f87:	83 c4 10             	add    esp,0x10
c0010f8a:	31 c9                	xor    ecx,ecx
c0010f8c:	29 c2                	sub    edx,eax
c0010f8e:	83 e2 fe             	and    edx,0xfffffffe
c0010f91:	01 f2                	add    edx,esi
c0010f93:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010f98:	84 c0                	test   al,al
c0010f9a:	74 0a                	je     c0010fa6 <KeSetBootMessage(char const*)+0x4d>
c0010f9c:	80 cc 0f             	or     ah,0xf
c0010f9f:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010fa3:	41                   	inc    ecx
c0010fa4:	eb ed                	jmp    c0010f93 <KeSetBootMessage(char const*)+0x3a>
c0010fa6:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010fab:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010fb0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fb2:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010fb8:	5b                   	pop    ebx
c0010fb9:	5e                   	pop    esi
c0010fba:	5f                   	pop    edi
c0010fbb:	c3                   	ret    

c0010fbc <Krnl::handlePowerButton()>:
c0010fbc:	83 ec 0c             	sub    esp,0xc
c0010fbf:	e8 ee 06 00 00       	call   c00116b2 <KeHandlePowerButton()>
c0010fc4:	90                   	nop
c0010fc5:	83 c4 0c             	add    esp,0xc
c0010fc8:	c3                   	ret    
c0010fc9:	8d 76 00             	lea    esi,[esi+0x0]

c0010fcc <Krnl::handleSleepButton()>:
c0010fcc:	83 ec 0c             	sub    esp,0xc
c0010fcf:	e8 13 07 00 00       	call   c00116e7 <KeHandleSleepButton()>
c0010fd4:	90                   	nop
c0010fd5:	83 c4 0c             	add    esp,0xc
c0010fd8:	c3                   	ret    

c0010fd9 <KeCalculateCRC32(unsigned char*, int)>:
c0010fd9:	53                   	push   ebx
c0010fda:	83 c8 ff             	or     eax,0xffffffff
c0010fdd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010fe1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010fe5:	01 cb                	add    ebx,ecx
c0010fe7:	39 d9                	cmp    ecx,ebx
c0010fe9:	74 15                	je     c0011000 <KeCalculateCRC32(unsigned char*, int)+0x27>
c0010feb:	41                   	inc    ecx
c0010fec:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c0010fef:	31 c2                	xor    edx,eax
c0010ff1:	c1 e8 08             	shr    eax,0x8
c0010ff4:	0f b6 d2             	movzx  edx,dl
c0010ff7:	33 04 95 c0 3a 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc540]
c0010ffe:	eb e7                	jmp    c0010fe7 <KeCalculateCRC32(unsigned char*, int)+0xe>
c0011000:	5b                   	pop    ebx
c0011001:	f7 d0                	not    eax
c0011003:	c3                   	ret    

c0011004 <EnvVarContainer::getEnv(char const*)>:
c0011004:	57                   	push   edi
c0011005:	56                   	push   esi
c0011006:	53                   	push   ebx
c0011007:	31 db                	xor    ebx,ebx
c0011009:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001100d:	39 1e                	cmp    DWORD PTR [esi],ebx
c001100f:	7e 2b                	jle    c001103c <EnvVarContainer::getEnv(char const*)+0x38>
c0011011:	50                   	push   eax
c0011012:	50                   	push   eax
c0011013:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011016:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001101d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0011020:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011024:	e8 57 f7 fe ff       	call   c0000780 <strcmp>
c0011029:	83 c4 10             	add    esp,0x10
c001102c:	85 c0                	test   eax,eax
c001102e:	75 09                	jne    c0011039 <EnvVarContainer::getEnv(char const*)+0x35>
c0011030:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011033:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0011037:	eb 05                	jmp    c001103e <EnvVarContainer::getEnv(char const*)+0x3a>
c0011039:	43                   	inc    ebx
c001103a:	eb d1                	jmp    c001100d <EnvVarContainer::getEnv(char const*)+0x9>
c001103c:	31 c0                	xor    eax,eax
c001103e:	5b                   	pop    ebx
c001103f:	5e                   	pop    esi
c0011040:	5f                   	pop    edi
c0011041:	c3                   	ret    

c0011042 <EnvVarContainer::setEnv(char const*, char const*)>:
c0011042:	55                   	push   ebp
c0011043:	57                   	push   edi
c0011044:	56                   	push   esi
c0011045:	53                   	push   ebx
c0011046:	83 ec 28             	sub    esp,0x28
c0011049:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001104d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0011051:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0011055:	56                   	push   esi
c0011056:	e8 25 f5 fe ff       	call   c0000580 <strlen>
c001105b:	40                   	inc    eax
c001105c:	89 04 24             	mov    DWORD PTR [esp],eax
c001105f:	e8 9f 6a ff ff       	call   c0007b03 <malloc>
c0011064:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011067:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001106b:	e8 10 f5 fe ff       	call   c0000580 <strlen>
c0011070:	40                   	inc    eax
c0011071:	89 04 24             	mov    DWORD PTR [esp],eax
c0011074:	e8 8a 6a ff ff       	call   c0007b03 <malloc>
c0011079:	89 34 24             	mov    DWORD PTR [esp],esi
c001107c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011080:	e8 fb f4 fe ff       	call   c0000580 <strlen>
c0011085:	83 c4 0c             	add    esp,0xc
c0011088:	40                   	inc    eax
c0011089:	50                   	push   eax
c001108a:	6a 00                	push   0x0
c001108c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011090:	e8 5b f4 fe ff       	call   c00004f0 <memset>
c0011095:	89 34 24             	mov    DWORD PTR [esp],esi
c0011098:	e8 e3 f4 fe ff       	call   c0000580 <strlen>
c001109d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00110a1:	8d 48 01             	lea    ecx,[eax+0x1]
c00110a4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110a9:	89 de                	mov    esi,ebx
c00110ab:	e8 d0 f4 fe ff       	call   c0000580 <strlen>
c00110b0:	83 c4 0c             	add    esp,0xc
c00110b3:	40                   	inc    eax
c00110b4:	50                   	push   eax
c00110b5:	6a 00                	push   0x0
c00110b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110bb:	e8 30 f4 fe ff       	call   c00004f0 <memset>
c00110c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110c3:	e8 b8 f4 fe ff       	call   c0000580 <strlen>
c00110c8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00110cc:	8d 48 01             	lea    ecx,[eax+0x1]
c00110cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110d1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00110d4:	40                   	inc    eax
c00110d5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00110d8:	c1 e0 03             	shl    eax,0x3
c00110db:	5a                   	pop    edx
c00110dc:	59                   	pop    ecx
c00110dd:	50                   	push   eax
c00110de:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00110e1:	e8 09 6a ff ff       	call   c0007aef <realloc>
c00110e6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00110e9:	8d 74 24 18          	lea    esi,[esp+0x18]
c00110ed:	b9 08 00 00 00       	mov    ecx,0x8
c00110f2:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00110f5:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00110f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110fb:	83 c4 2c             	add    esp,0x2c
c00110fe:	5b                   	pop    ebx
c00110ff:	5e                   	pop    esi
c0011100:	5f                   	pop    edi
c0011101:	5d                   	pop    ebp
c0011102:	c3                   	ret    
c0011103:	90                   	nop

c0011104 <EnvVarContainer::deleteEnv(char const*)>:
c0011104:	c3                   	ret    
c0011105:	90                   	nop

c0011106 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0011106:	55                   	push   ebp
c0011107:	57                   	push   edi
c0011108:	56                   	push   esi
c0011109:	53                   	push   ebx
c001110a:	81 ec 38 01 00 00    	sub    esp,0x138
c0011110:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0011117:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001111e:	68 14 01 00 00       	push   0x114
c0011123:	e8 db 69 ff ff       	call   c0007b03 <malloc>
c0011128:	83 c4 0c             	add    esp,0xc
c001112b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001112e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0011135:	89 c3                	mov    ebx,eax
c0011137:	50                   	push   eax
c0011138:	e8 15 aa ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c001113d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011140:	e8 ef ac ff ff       	call   c000be34 <File::exists()>
c0011145:	83 c4 10             	add    esp,0x10
c0011148:	84 c0                	test   al,al
c001114a:	75 31                	jne    c001117d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001114c:	50                   	push   eax
c001114d:	50                   	push   eax
c001114e:	6a 12                	push   0x12
c0011150:	53                   	push   ebx
c0011151:	e8 1a aa ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c0011156:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011158:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001115b:	89 34 24             	mov    DWORD PTR [esp],esi
c001115e:	e8 1d f4 fe ff       	call   c0000580 <strlen>
c0011163:	5a                   	pop    edx
c0011164:	8d 54 24 20          	lea    edx,[esp+0x20]
c0011168:	52                   	push   edx
c0011169:	31 d2                	xor    edx,edx
c001116b:	56                   	push   esi
c001116c:	52                   	push   edx
c001116d:	50                   	push   eax
c001116e:	53                   	push   ebx
c001116f:	ff d7                	call   edi
c0011171:	83 c4 14             	add    esp,0x14
c0011174:	53                   	push   ebx
c0011175:	e8 54 aa ff ff       	call   c000bbce <File::close()>
c001117a:	83 c4 10             	add    esp,0x10
c001117d:	56                   	push   esi
c001117e:	31 f6                	xor    esi,esi
c0011180:	68 00 01 00 00       	push   0x100
c0011185:	6a 00                	push   0x0
c0011187:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001118b:	50                   	push   eax
c001118c:	e8 5f f3 fe ff       	call   c00004f0 <memset>
c0011191:	5f                   	pop    edi
c0011192:	58                   	pop    eax
c0011193:	6a 01                	push   0x1
c0011195:	53                   	push   ebx
c0011196:	e8 d5 a9 ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c001119b:	83 c4 10             	add    esp,0x10
c001119e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00111a6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00111ae:	83 ec 0c             	sub    esp,0xc
c00111b1:	8d 54 24 20          	lea    edx,[esp+0x20]
c00111b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111b7:	52                   	push   edx
c00111b8:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c00111bc:	51                   	push   ecx
c00111bd:	6a 00                	push   0x0
c00111bf:	6a 01                	push   0x1
c00111c1:	53                   	push   ebx
c00111c2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00111c5:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c00111ca:	83 c4 20             	add    esp,0x20
c00111cd:	85 c0                	test   eax,eax
c00111cf:	89 c1                	mov    ecx,eax
c00111d1:	0f 84 36 01 00 00    	je     c001130d <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c00111d7:	83 f8 0d             	cmp    eax,0xd
c00111da:	0f 84 22 01 00 00    	je     c0011302 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00111e0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00111e5:	0f 84 f0 00 00 00    	je     c00112db <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c00111eb:	83 f8 0a             	cmp    eax,0xa
c00111ee:	74 13                	je     c0011203 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00111f0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00111f5:	74 0c                	je     c0011203 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00111f7:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00111fd:	0f 8e f6 00 00 00    	jle    c00112f9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0011203:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011207:	83 ec 0c             	sub    esp,0xc
c001120a:	8d 78 01             	lea    edi,[eax+0x1]
c001120d:	57                   	push   edi
c001120e:	e8 f0 68 ff ff       	call   c0007b03 <malloc>
c0011213:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0011217:	8d 56 04             	lea    edx,[esi+0x4]
c001121a:	89 14 24             	mov    DWORD PTR [esp],edx
c001121d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0011221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011225:	e8 d9 68 ff ff       	call   c0007b03 <malloc>
c001122a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001122e:	83 c4 0c             	add    esp,0xc
c0011231:	57                   	push   edi
c0011232:	6a 00                	push   0x0
c0011234:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011238:	e8 b3 f2 fe ff       	call   c00004f0 <memset>
c001123d:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011241:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011245:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011249:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001124b:	83 c4 0c             	add    esp,0xc
c001124e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011252:	52                   	push   edx
c0011253:	6a 00                	push   0x0
c0011255:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011259:	e8 92 f2 fe ff       	call   c00004f0 <memset>
c001125e:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011262:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0011266:	89 34 24             	mov    DWORD PTR [esp],esi
c0011269:	e8 12 f3 fe ff       	call   c0000580 <strlen>
c001126e:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0011272:	89 c1                	mov    ecx,eax
c0011274:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011276:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011279:	83 c4 10             	add    esp,0x10
c001127c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001127f:	40                   	inc    eax
c0011280:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011283:	85 d2                	test   edx,edx
c0011285:	75 0c                	jne    c0011293 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0011287:	83 ec 0c             	sub    esp,0xc
c001128a:	6a 08                	push   0x8
c001128c:	e8 72 68 ff ff       	call   c0007b03 <malloc>
c0011291:	eb 0c                	jmp    c001129f <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0011293:	51                   	push   ecx
c0011294:	51                   	push   ecx
c0011295:	c1 e0 03             	shl    eax,0x3
c0011298:	50                   	push   eax
c0011299:	52                   	push   edx
c001129a:	e8 50 68 ff ff       	call   c0007aef <realloc>
c001129f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00112a2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00112a5:	83 c4 10             	add    esp,0x10
c00112a8:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00112ab:	8d 74 24 18          	lea    esi,[esp+0x18]
c00112af:	b9 08 00 00 00       	mov    ecx,0x8
c00112b4:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00112b8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00112ba:	50                   	push   eax
c00112bb:	31 f6                	xor    esi,esi
c00112bd:	68 00 01 00 00       	push   0x100
c00112c2:	6a 00                	push   0x0
c00112c4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00112c8:	50                   	push   eax
c00112c9:	e8 22 f2 fe ff       	call   c00004f0 <memset>
c00112ce:	83 c4 10             	add    esp,0x10
c00112d1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00112d9:	eb 27                	jmp    c0011302 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00112db:	83 f8 3d             	cmp    eax,0x3d
c00112de:	74 1e                	je     c00112fe <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c00112e0:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00112e6:	7f 07                	jg     c00112ef <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c00112e8:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c00112ec:	46                   	inc    esi
c00112ed:	eb 13                	jmp    c0011302 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00112ef:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00112f7:	eb 09                	jmp    c0011302 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00112f9:	83 f8 3d             	cmp    eax,0x3d
c00112fc:	75 ea                	jne    c00112e8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c00112fe:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0011302:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011307:	0f 85 99 fe ff ff    	jne    c00111a6 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001130d:	83 ec 0c             	sub    esp,0xc
c0011310:	53                   	push   ebx
c0011311:	e8 b8 a8 ff ff       	call   c000bbce <File::close()>
c0011316:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011318:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001131b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001131e:	81 c4 3c 01 00 00    	add    esp,0x13c
c0011324:	5b                   	pop    ebx
c0011325:	5e                   	pop    esi
c0011326:	5f                   	pop    edi
c0011327:	5d                   	pop    ebp
c0011328:	c3                   	ret    
c0011329:	90                   	nop

c001132a <EnvVarContainer::__loadSystem()>:
c001132a:	83 ec 10             	sub    esp,0x10
c001132d:	68 c0 3e 02 c0       	push   0xc0023ec0
c0011332:	68 9c 25 02 c0       	push   0xc002259c
c0011337:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001133b:	e8 c6 fd ff ff       	call   c0011106 <EnvVarContainer::loadFrom(char const*, char const*)>
c0011340:	83 c4 1c             	add    esp,0x1c
c0011343:	c3                   	ret    

c0011344 <EnvVarContainer::__loadUser()>:
c0011344:	c3                   	ret    
c0011345:	90                   	nop

c0011346 <EnvVarContainer::EnvVarContainer(Process*)>:
c0011346:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001134a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011350:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011354:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011358:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001135b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001135f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011366:	90                   	nop
c0011367:	c3                   	ret    

c0011368 <EnvVarContainer::~EnvVarContainer()>:
c0011368:	83 ec 0c             	sub    esp,0xc
c001136b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001136f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011372:	85 c0                	test   eax,eax
c0011374:	74 1d                	je     c0011393 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001137a:	8b 00                	mov    eax,DWORD PTR [eax]
c001137c:	85 c0                	test   eax,eax
c001137e:	74 13                	je     c0011393 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011384:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011387:	83 ec 0c             	sub    esp,0xc
c001138a:	50                   	push   eax
c001138b:	e8 83 67 ff ff       	call   c0007b13 <free>
c0011390:	83 c4 10             	add    esp,0x10
c0011393:	90                   	nop
c0011394:	83 c4 0c             	add    esp,0xc
c0011397:	c3                   	ret    

c0011398 <KeGetEnv(Process*, char const*)>:
c0011398:	53                   	push   ebx
c0011399:	83 ec 08             	sub    esp,0x8
c001139c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113a0:	39 05 f0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6f0,eax
c00113a6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00113aa:	74 04                	je     c00113b0 <KeGetEnv(Process*, char const*)+0x18>
c00113ac:	85 c0                	test   eax,eax
c00113ae:	75 0b                	jne    c00113bb <KeGetEnv(Process*, char const*)+0x23>
c00113b0:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c00113b5:	85 c0                	test   eax,eax
c00113b7:	75 19                	jne    c00113d2 <KeGetEnv(Process*, char const*)+0x3a>
c00113b9:	eb 27                	jmp    c00113e2 <KeGetEnv(Process*, char const*)+0x4a>
c00113bb:	52                   	push   edx
c00113bc:	52                   	push   edx
c00113bd:	53                   	push   ebx
c00113be:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00113c4:	e8 3b fc ff ff       	call   c0011004 <EnvVarContainer::getEnv(char const*)>
c00113c9:	83 c4 10             	add    esp,0x10
c00113cc:	85 c0                	test   eax,eax
c00113ce:	75 28                	jne    c00113f8 <KeGetEnv(Process*, char const*)+0x60>
c00113d0:	eb de                	jmp    c00113b0 <KeGetEnv(Process*, char const*)+0x18>
c00113d2:	52                   	push   edx
c00113d3:	52                   	push   edx
c00113d4:	53                   	push   ebx
c00113d5:	50                   	push   eax
c00113d6:	e8 29 fc ff ff       	call   c0011004 <EnvVarContainer::getEnv(char const*)>
c00113db:	83 c4 10             	add    esp,0x10
c00113de:	85 c0                	test   eax,eax
c00113e0:	75 16                	jne    c00113f8 <KeGetEnv(Process*, char const*)+0x60>
c00113e2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00113e6:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c00113eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00113ef:	83 c4 08             	add    esp,0x8
c00113f2:	5b                   	pop    ebx
c00113f3:	e9 0c fc ff ff       	jmp    c0011004 <EnvVarContainer::getEnv(char const*)>
c00113f8:	83 c4 08             	add    esp,0x8
c00113fb:	5b                   	pop    ebx
c00113fc:	c3                   	ret    

c00113fd <KeSetEnvSystem(char const*, char const*)>:
c00113fd:	83 ec 10             	sub    esp,0x10
c0011400:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011404:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011408:	ff 35 84 be 02 c0    	push   DWORD PTR ds:0xc002be84
c001140e:	e8 2f fc ff ff       	call   c0011042 <EnvVarContainer::setEnv(char const*, char const*)>
c0011413:	83 c4 1c             	add    esp,0x1c
c0011416:	c3                   	ret    

c0011417 <KeSetEnvUser(char const*, char const*)>:
c0011417:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c001141c:	85 c0                	test   eax,eax
c001141e:	74 15                	je     c0011435 <KeSetEnvUser(char const*, char const*)+0x1e>
c0011420:	83 ec 10             	sub    esp,0x10
c0011423:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011427:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001142b:	50                   	push   eax
c001142c:	e8 11 fc ff ff       	call   c0011042 <EnvVarContainer::setEnv(char const*, char const*)>
c0011431:	83 c4 1c             	add    esp,0x1c
c0011434:	c3                   	ret    
c0011435:	c3                   	ret    

c0011436 <KeSetEnvProcess(Process*, char const*, char const*)>:
c0011436:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001143a:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0011440:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011444:	e9 f9 fb ff ff       	jmp    c0011042 <EnvVarContainer::setEnv(char const*, char const*)>

c0011449 <KeDeleteEnvSystem(char const*)>:
c0011449:	c3                   	ret    

c001144a <KeDeleteEnvUser(char const*)>:
c001144a:	c3                   	ret    

c001144b <KeDeleteEnvProcess(Process*, char const*)>:
c001144b:	c3                   	ret    

c001144c <KeNewProcessEnv(Process*)>:
c001144c:	83 ec 28             	sub    esp,0x28
c001144f:	6a 0c                	push   0xc
c0011451:	e8 ad 66 ff ff       	call   c0007b03 <malloc>
c0011456:	5a                   	pop    edx
c0011457:	59                   	pop    ecx
c0011458:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001145c:	50                   	push   eax
c001145d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011461:	e8 e0 fe ff ff       	call   c0011346 <EnvVarContainer::EnvVarContainer(Process*)>
c0011466:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001146a:	83 c4 2c             	add    esp,0x2c
c001146d:	c3                   	ret    

c001146e <KeCopyProcessEnv(Process*, Process*)>:
c001146e:	57                   	push   edi
c001146f:	56                   	push   esi
c0011470:	53                   	push   ebx
c0011471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011475:	83 ec 0c             	sub    esp,0xc
c0011478:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001147e:	6a 0c                	push   0xc
c0011480:	e8 7e 66 ff ff       	call   c0007b03 <malloc>
c0011485:	89 c3                	mov    ebx,eax
c0011487:	58                   	pop    eax
c0011488:	5a                   	pop    edx
c0011489:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001148d:	53                   	push   ebx
c001148e:	e8 b3 fe ff ff       	call   c0011346 <EnvVarContainer::EnvVarContainer(Process*)>
c0011493:	8b 07                	mov    eax,DWORD PTR [edi]
c0011495:	89 03                	mov    DWORD PTR [ebx],eax
c0011497:	c1 e0 03             	shl    eax,0x3
c001149a:	89 04 24             	mov    DWORD PTR [esp],eax
c001149d:	e8 61 66 ff ff       	call   c0007b03 <malloc>
c00114a2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00114a5:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00114a7:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00114aa:	89 c7                	mov    edi,eax
c00114ac:	c1 e1 03             	shl    ecx,0x3
c00114af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00114b1:	83 c4 10             	add    esp,0x10
c00114b4:	89 d8                	mov    eax,ebx
c00114b6:	5b                   	pop    ebx
c00114b7:	5e                   	pop    esi
c00114b8:	5f                   	pop    edi
c00114b9:	c3                   	ret    

c00114ba <KeLoadSystemEnv()>:
c00114ba:	53                   	push   ebx
c00114bb:	83 ec 14             	sub    esp,0x14
c00114be:	6a 0c                	push   0xc
c00114c0:	e8 3e 66 ff ff       	call   c0007b03 <malloc>
c00114c5:	89 c3                	mov    ebx,eax
c00114c7:	58                   	pop    eax
c00114c8:	5a                   	pop    edx
c00114c9:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00114cf:	53                   	push   ebx
c00114d0:	e8 71 fe ff ff       	call   c0011346 <EnvVarContainer::EnvVarContainer(Process*)>
c00114d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00114d8:	89 1d 84 be 02 c0    	mov    DWORD PTR ds:0xc002be84,ebx
c00114de:	e8 47 fe ff ff       	call   c001132a <EnvVarContainer::__loadSystem()>
c00114e3:	83 c4 18             	add    esp,0x18
c00114e6:	5b                   	pop    ebx
c00114e7:	c3                   	ret    

c00114e8 <KeLoadUserEnv()>:
c00114e8:	53                   	push   ebx
c00114e9:	83 ec 14             	sub    esp,0x14
c00114ec:	6a 0c                	push   0xc
c00114ee:	e8 10 66 ff ff       	call   c0007b03 <malloc>
c00114f3:	89 c3                	mov    ebx,eax
c00114f5:	58                   	pop    eax
c00114f6:	5a                   	pop    edx
c00114f7:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00114fd:	53                   	push   ebx
c00114fe:	e8 43 fe ff ff       	call   c0011346 <EnvVarContainer::EnvVarContainer(Process*)>
c0011503:	89 1d 80 be 02 c0    	mov    DWORD PTR ds:0xc002be80,ebx
c0011509:	83 c4 18             	add    esp,0x18
c001150c:	5b                   	pop    ebx
c001150d:	c3                   	ret    

c001150e <KeFlushEnv()>:
c001150e:	c3                   	ret    

c001150f <KeGetProcessTotalEnvCount(Process*)>:
c001150f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011513:	8b 15 80 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be80
c0011519:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001151f:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c0011524:	8b 00                	mov    eax,DWORD PTR [eax]
c0011526:	03 01                	add    eax,DWORD PTR [ecx]
c0011528:	85 d2                	test   edx,edx
c001152a:	74 02                	je     c001152e <KeGetProcessTotalEnvCount(Process*)+0x1f>
c001152c:	03 02                	add    eax,DWORD PTR [edx]
c001152e:	c3                   	ret    

c001152f <KeGetProcessEnvPair(Process*, int)>:
c001152f:	57                   	push   edi
c0011530:	56                   	push   esi
c0011531:	8b 35 80 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be80
c0011537:	53                   	push   ebx
c0011538:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001153c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011540:	85 f6                	test   esi,esi
c0011542:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011546:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001154c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001154e:	75 16                	jne    c0011566 <KeGetProcessEnvPair(Process*, int)+0x37>
c0011550:	39 c2                	cmp    edx,eax
c0011552:	7c 16                	jl     c001156a <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011554:	8b 0d 84 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be84
c001155a:	8b 31                	mov    esi,DWORD PTR [ecx]
c001155c:	01 c6                	add    esi,eax
c001155e:	39 d6                	cmp    esi,edx
c0011560:	7e 3c                	jle    c001159e <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011562:	29 c2                	sub    edx,eax
c0011564:	eb 04                	jmp    c001156a <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011566:	39 c2                	cmp    edx,eax
c0011568:	7d 05                	jge    c001156f <KeGetProcessEnvPair(Process*, int)+0x40>
c001156a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001156d:	eb 20                	jmp    c001158f <KeGetProcessEnvPair(Process*, int)+0x60>
c001156f:	8b 3e                	mov    edi,DWORD PTR [esi]
c0011571:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0011574:	39 d1                	cmp    ecx,edx
c0011576:	7e 04                	jle    c001157c <KeGetProcessEnvPair(Process*, int)+0x4d>
c0011578:	29 c2                	sub    edx,eax
c001157a:	eb 10                	jmp    c001158c <KeGetProcessEnvPair(Process*, int)+0x5d>
c001157c:	8b 35 84 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be84
c0011582:	03 0e                	add    ecx,DWORD PTR [esi]
c0011584:	39 d1                	cmp    ecx,edx
c0011586:	7e 16                	jle    c001159e <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011588:	29 c2                	sub    edx,eax
c001158a:	29 fa                	sub    edx,edi
c001158c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001158f:	8d 14 d0             	lea    edx,[eax+edx*8]
c0011592:	8b 02                	mov    eax,DWORD PTR [edx]
c0011594:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011597:	89 03                	mov    DWORD PTR [ebx],eax
c0011599:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001159c:	eb 1d                	jmp    c00115bb <KeGetProcessEnvPair(Process*, int)+0x8c>
c001159e:	83 ec 0c             	sub    esp,0xc
c00115a1:	68 be 25 02 c0       	push   0xc00225be
c00115a6:	e8 ac 00 00 00       	call   c0011657 <KePanic(char const*)>
c00115ab:	83 c4 10             	add    esp,0x10
c00115ae:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00115b4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00115bb:	89 d8                	mov    eax,ebx
c00115bd:	5b                   	pop    ebx
c00115be:	5e                   	pop    esi
c00115bf:	5f                   	pop    edi
c00115c0:	c2 04 00             	ret    0x4

c00115c3 <CPU::current()>:
c00115c3:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00115c8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115ce:	c3                   	ret    

c00115cf <operator new(unsigned long)>:
c00115cf:	e9 2f 65 ff ff       	jmp    c0007b03 <malloc>

c00115d4 <operator delete(void*)>:
c00115d4:	e9 4a 65 ff ff       	jmp    c0007b23 <rfree>

c00115d9 <disableIRQs()>:
c00115d9:	fa                   	cli    
c00115da:	c3                   	ret    

c00115db <enableIRQs()>:
c00115db:	fb                   	sti    
c00115dc:	c3                   	ret    

c00115dd <lockScheduler()>:
c00115dd:	fa                   	cli    
c00115de:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00115e4:	c3                   	ret    

c00115e5 <unlockScheduler()>:
c00115e5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00115ea:	48                   	dec    eax
c00115eb:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00115f0:	75 01                	jne    c00115f3 <unlockScheduler()+0xe>
c00115f2:	fb                   	sti    
c00115f3:	c3                   	ret    

c00115f4 <lockStuff()>:
c00115f4:	fa                   	cli    
c00115f5:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00115fb:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c0011601:	c3                   	ret    

c0011602 <unlockStuff()>:
c0011602:	83 ec 0c             	sub    esp,0xc
c0011605:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001160a:	48                   	dec    eax
c001160b:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0011610:	75 18                	jne    c001162a <unlockStuff()+0x28>
c0011612:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0011619:	74 0f                	je     c001162a <unlockStuff()+0x28>
c001161b:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0011625:	e8 5a 4b 00 00       	call   c0016184 <schedule()>
c001162a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001162f:	48                   	dec    eax
c0011630:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011635:	75 01                	jne    c0011638 <unlockStuff()+0x36>
c0011637:	fb                   	sti    
c0011638:	83 c4 0c             	add    esp,0xc
c001163b:	c3                   	ret    

c001163c <Virt::getAKernelVAS()>:
c001163c:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0011641:	c3                   	ret    

c0011642 <__not_memcpy>:
c0011642:	57                   	push   edi
c0011643:	56                   	push   esi
c0011644:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011648:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001164c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011650:	89 c7                	mov    edi,eax
c0011652:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011654:	5e                   	pop    esi
c0011655:	5f                   	pop    edi
c0011656:	c3                   	ret    

c0011657 <KePanic(char const*)>:
c0011657:	c6 05 88 be 02 c0 01 	mov    BYTE PTR ds:0xc002be88,0x1
c001165e:	e9 b1 6a 00 00       	jmp    c0018114 <HalPanic(char const*)>

c0011663 <KePowerThread(void*)>:
c0011663:	83 ec 0c             	sub    esp,0xc
c0011666:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001166b:	48                   	dec    eax
c001166c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011671:	75 01                	jne    c0011674 <KePowerThread(void*)+0x11>
c0011673:	fb                   	sti    
c0011674:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c001167b:	83 ec 0c             	sub    esp,0xc
c001167e:	6a 0a                	push   0xa
c0011680:	e8 2f 4e 00 00       	call   c00164b4 <sleep(unsigned int)>
c0011685:	83 c4 10             	add    esp,0x10
c0011688:	83 05 e4 be 02 c0 0a 	add    DWORD PTR ds:0xc002bee4,0xa
c001168f:	eb e3                	jmp    c0011674 <KePowerThread(void*)+0x11>

c0011691 <KeChangePowerSettings(PowerSettings)>:
c0011691:	57                   	push   edi
c0011692:	b9 09 00 00 00       	mov    ecx,0x9
c0011697:	56                   	push   esi
c0011698:	bf c0 be 02 c0       	mov    edi,0xc002bec0
c001169d:	fc                   	cld    
c001169e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00116a2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00116a4:	5e                   	pop    esi
c00116a5:	5f                   	pop    edi
c00116a6:	c3                   	ret    

c00116a7 <KeUserIOReceived()>:
c00116a7:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c00116b1:	c3                   	ret    

c00116b2 <KeHandlePowerButton()>:
c00116b2:	83 ec 0c             	sub    esp,0xc
c00116b5:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c00116ba:	83 f8 02             	cmp    eax,0x2
c00116bd:	75 10                	jne    c00116cf <KeHandlePowerButton()+0x1d>
c00116bf:	83 ec 0c             	sub    esp,0xc
c00116c2:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00116c8:	e8 ad 5a ff ff       	call   c000717a <Computer::shutdown()>
c00116cd:	eb 11                	jmp    c00116e0 <KeHandlePowerButton()+0x2e>
c00116cf:	48                   	dec    eax
c00116d0:	75 11                	jne    c00116e3 <KeHandlePowerButton()+0x31>
c00116d2:	83 ec 0c             	sub    esp,0xc
c00116d5:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00116db:	e8 ca 5a ff ff       	call   c00071aa <Computer::sleep()>
c00116e0:	83 c4 10             	add    esp,0x10
c00116e3:	83 c4 0c             	add    esp,0xc
c00116e6:	c3                   	ret    

c00116e7 <KeHandleSleepButton()>:
c00116e7:	83 ec 0c             	sub    esp,0xc
c00116ea:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c00116ef:	83 f8 02             	cmp    eax,0x2
c00116f2:	75 10                	jne    c0011704 <KeHandleSleepButton()+0x1d>
c00116f4:	83 ec 0c             	sub    esp,0xc
c00116f7:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00116fd:	e8 78 5a ff ff       	call   c000717a <Computer::shutdown()>
c0011702:	eb 11                	jmp    c0011715 <KeHandleSleepButton()+0x2e>
c0011704:	48                   	dec    eax
c0011705:	75 11                	jne    c0011718 <KeHandleSleepButton()+0x31>
c0011707:	83 ec 0c             	sub    esp,0xc
c001170a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011710:	e8 95 5a ff ff       	call   c00071aa <Computer::sleep()>
c0011715:	83 c4 10             	add    esp,0x10
c0011718:	83 c4 0c             	add    esp,0xc
c001171b:	c3                   	ret    

c001171c <KeSetupPowerManager()>:
c001171c:	83 ec 0c             	sub    esp,0xc
c001171f:	68 f0 00 00 00       	push   0xf0
c0011724:	6a 00                	push   0x0
c0011726:	68 63 16 01 c0       	push   0xc0011663
c001172b:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0011731:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c001173b:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c0011742:	e8 f1 47 00 00       	call   c0015f38 <Process::createThread(void (*)(void*), void*, int)>
c0011747:	c7 05 c0 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002bec0,0x2
c0011751:	c7 05 c4 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bec4,0x1
c001175b:	c7 05 c8 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002bec8,0x3
c0011765:	c7 05 cc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002becc,0x0
c001176f:	c7 05 d8 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed8,0x0
c0011779:	c7 05 d0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed0,0x0
c0011783:	c7 05 dc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bedc,0x0
c001178d:	c7 05 d4 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bed4,0x3c
c0011797:	c7 05 e0 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bee0,0x3c
c00117a1:	83 c4 1c             	add    esp,0x1c
c00117a4:	c3                   	ret    

c00117a5 <KeRand()>:
c00117a5:	69 05 e8 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002bee8,0x2875
c00117af:	69 0d ec be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002beec,0xa2e7b175
c00117b9:	53                   	push   ebx
c00117ba:	01 c1                	add    ecx,eax
c00117bc:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00117c1:	f7 25 e8 be 02 c0    	mul    DWORD PTR ds:0xc002bee8
c00117c7:	01 ca                	add    edx,ecx
c00117c9:	05 ef 04 b5 00       	add    eax,0xb504ef
c00117ce:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c00117d3:	83 d2 00             	adc    edx,0x0
c00117d6:	0f b7 da             	movzx  ebx,dx
c00117d9:	89 1d ec be 02 c0    	mov    DWORD PTR ds:0xc002beec,ebx
c00117df:	0f ac d8 0e          	shrd   eax,ebx,0xe
c00117e3:	5b                   	pop    ebx
c00117e4:	c3                   	ret    

c00117e5 <KeSeedRand(unsigned int)>:
c00117e5:	53                   	push   ebx
c00117e6:	83 ec 08             	sub    esp,0x8
c00117e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117ed:	e8 41 6c 00 00       	call   c0018433 <HalGetRand()>
c00117f2:	c7 05 ec be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002beec,0x0
c00117fc:	31 d8                	xor    eax,ebx
c00117fe:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c0011803:	e8 9d ff ff ff       	call   c00117a5 <KeRand()>
c0011808:	83 c4 08             	add    esp,0x8
c001180b:	5b                   	pop    ebx
c001180c:	eb 97                	jmp    c00117a5 <KeRand()>

c001180e <KeInitRand()>:
c001180e:	83 ec 0c             	sub    esp,0xc
c0011811:	e8 12 6a 00 00       	call   c0018228 <HalQueryPerformanceCounter()>
c0011816:	0f 20 da             	mov    edx,cr3
c0011819:	0f 22 da             	mov    cr3,edx
c001181c:	0f 20 da             	mov    edx,cr3
c001181f:	0f 22 da             	mov    cr3,edx
c0011822:	0f 20 da             	mov    edx,cr3
c0011825:	0f 22 da             	mov    cr3,edx
c0011828:	0f 20 da             	mov    edx,cr3
c001182b:	0f 22 da             	mov    cr3,edx
c001182e:	83 ec 0c             	sub    esp,0xc
c0011831:	35 03 8a 95 38       	xor    eax,0x38958a03
c0011836:	50                   	push   eax
c0011837:	e8 a9 ff ff ff       	call   c00117e5 <KeSeedRand(unsigned int)>
c001183c:	83 c4 1c             	add    esp,0x1c
c001183f:	c3                   	ret    

c0011840 <KeResolveCompatibilitySymbol(char*)>:
c0011840:	83 ec 0c             	sub    esp,0xc
c0011843:	83 ec 08             	sub    esp,0x8
c0011846:	68 d8 25 02 c0       	push   0xc00225d8
c001184b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001184f:	e8 2c ef fe ff       	call   c0000780 <strcmp>
c0011854:	83 c4 10             	add    esp,0x10
c0011857:	85 c0                	test   eax,eax
c0011859:	0f 94 c0             	sete   al
c001185c:	0f b6 c0             	movzx  eax,al
c001185f:	85 c0                	test   eax,eax
c0011861:	74 0d                	je     c0011870 <KeResolveCompatibilitySymbol(char*)+0x30>
c0011863:	b8 b8 6e 02 c0       	mov    eax,0xc0026eb8
c0011868:	e9 8b 01 00 00       	jmp    c00119f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001186d:	8d 76 00             	lea    esi,[esi+0x0]
c0011870:	83 ec 08             	sub    esp,0x8
c0011873:	68 e1 25 02 c0       	push   0xc00225e1
c0011878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001187c:	e8 ff ee fe ff       	call   c0000780 <strcmp>
c0011881:	83 c4 10             	add    esp,0x10
c0011884:	85 c0                	test   eax,eax
c0011886:	0f 94 c0             	sete   al
c0011889:	0f b6 c0             	movzx  eax,al
c001188c:	85 c0                	test   eax,eax
c001188e:	74 0c                	je     c001189c <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011890:	b8 40 f8 01 c0       	mov    eax,0xc001f840
c0011895:	e9 5e 01 00 00       	jmp    c00119f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001189a:	66 90                	xchg   ax,ax
c001189c:	83 ec 08             	sub    esp,0x8
c001189f:	68 eb 25 02 c0       	push   0xc00225eb
c00118a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118a8:	e8 d3 ee fe ff       	call   c0000780 <strcmp>
c00118ad:	83 c4 10             	add    esp,0x10
c00118b0:	85 c0                	test   eax,eax
c00118b2:	0f 94 c0             	sete   al
c00118b5:	0f b6 c0             	movzx  eax,al
c00118b8:	85 c0                	test   eax,eax
c00118ba:	74 0c                	je     c00118c8 <KeResolveCompatibilitySymbol(char*)+0x88>
c00118bc:	b8 74 f5 01 c0       	mov    eax,0xc001f574
c00118c1:	e9 32 01 00 00       	jmp    c00119f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118c6:	66 90                	xchg   ax,ax
c00118c8:	83 ec 08             	sub    esp,0x8
c00118cb:	68 f4 25 02 c0       	push   0xc00225f4
c00118d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118d4:	e8 a7 ee fe ff       	call   c0000780 <strcmp>
c00118d9:	83 c4 10             	add    esp,0x10
c00118dc:	85 c0                	test   eax,eax
c00118de:	0f 94 c0             	sete   al
c00118e1:	0f b6 c0             	movzx  eax,al
c00118e4:	85 c0                	test   eax,eax
c00118e6:	74 0c                	je     c00118f4 <KeResolveCompatibilitySymbol(char*)+0xb4>
c00118e8:	b8 57 16 01 c0       	mov    eax,0xc0011657
c00118ed:	e9 06 01 00 00       	jmp    c00119f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118f2:	66 90                	xchg   ax,ax
c00118f4:	83 ec 08             	sub    esp,0x8
c00118f7:	68 07 26 02 c0       	push   0xc0022607
c00118fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011900:	e8 7b ee fe ff       	call   c0000780 <strcmp>
c0011905:	83 c4 10             	add    esp,0x10
c0011908:	85 c0                	test   eax,eax
c001190a:	0f 94 c0             	sete   al
c001190d:	0f b6 c0             	movzx  eax,al
c0011910:	85 c0                	test   eax,eax
c0011912:	74 0c                	je     c0011920 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0011914:	b8 59 0f 01 c0       	mov    eax,0xc0010f59
c0011919:	e9 da 00 00 00       	jmp    c00119f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001191e:	66 90                	xchg   ax,ax
c0011920:	83 ec 08             	sub    esp,0x8
c0011923:	68 24 26 02 c0       	push   0xc0022624
c0011928:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001192c:	e8 4f ee fe ff       	call   c0000780 <strcmp>
c0011931:	83 c4 10             	add    esp,0x10
c0011934:	85 c0                	test   eax,eax
c0011936:	0f 94 c0             	sete   al
c0011939:	0f b6 c0             	movzx  eax,al
c001193c:	85 c0                	test   eax,eax
c001193e:	74 0c                	je     c001194c <KeResolveCompatibilitySymbol(char*)+0x10c>
c0011940:	b8 40 f9 01 c0       	mov    eax,0xc001f940
c0011945:	e9 ae 00 00 00       	jmp    c00119f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001194a:	66 90                	xchg   ax,ax
c001194c:	83 ec 08             	sub    esp,0x8
c001194f:	68 2e 26 02 c0       	push   0xc002262e
c0011954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011958:	e8 23 ee fe ff       	call   c0000780 <strcmp>
c001195d:	83 c4 10             	add    esp,0x10
c0011960:	85 c0                	test   eax,eax
c0011962:	0f 94 c0             	sete   al
c0011965:	0f b6 c0             	movzx  eax,al
c0011968:	85 c0                	test   eax,eax
c001196a:	74 0c                	je     c0011978 <KeResolveCompatibilitySymbol(char*)+0x138>
c001196c:	b8 c0 f6 01 c0       	mov    eax,0xc001f6c0
c0011971:	e9 82 00 00 00       	jmp    c00119f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011976:	66 90                	xchg   ax,ax
c0011978:	83 ec 08             	sub    esp,0x8
c001197b:	68 37 26 02 c0       	push   0xc0022637
c0011980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011984:	e8 f7 ed fe ff       	call   c0000780 <strcmp>
c0011989:	83 c4 10             	add    esp,0x10
c001198c:	85 c0                	test   eax,eax
c001198e:	0f 94 c0             	sete   al
c0011991:	0f b6 c0             	movzx  eax,al
c0011994:	85 c0                	test   eax,eax
c0011996:	74 08                	je     c00119a0 <KeResolveCompatibilitySymbol(char*)+0x160>
c0011998:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c001199d:	eb 59                	jmp    c00119f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001199f:	90                   	nop
c00119a0:	83 ec 08             	sub    esp,0x8
c00119a3:	68 4f 26 02 c0       	push   0xc002264f
c00119a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119ac:	e8 cf ed fe ff       	call   c0000780 <strcmp>
c00119b1:	83 c4 10             	add    esp,0x10
c00119b4:	85 c0                	test   eax,eax
c00119b6:	0f 94 c0             	sete   al
c00119b9:	0f b6 c0             	movzx  eax,al
c00119bc:	85 c0                	test   eax,eax
c00119be:	74 08                	je     c00119c8 <KeResolveCompatibilitySymbol(char*)+0x188>
c00119c0:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c00119c5:	eb 31                	jmp    c00119f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00119c7:	90                   	nop
c00119c8:	83 ec 08             	sub    esp,0x8
c00119cb:	68 5c 26 02 c0       	push   0xc002265c
c00119d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119d4:	e8 a7 ed fe ff       	call   c0000780 <strcmp>
c00119d9:	83 c4 10             	add    esp,0x10
c00119dc:	85 c0                	test   eax,eax
c00119de:	0f 94 c0             	sete   al
c00119e1:	0f b6 c0             	movzx  eax,al
c00119e4:	85 c0                	test   eax,eax
c00119e6:	74 08                	je     c00119f0 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c00119e8:	b8 bd 6e 02 c0       	mov    eax,0xc0026ebd
c00119ed:	eb 09                	jmp    c00119f8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00119ef:	90                   	nop
c00119f0:	b8 00 00 00 00       	mov    eax,0x0
c00119f5:	8d 76 00             	lea    esi,[esi+0x0]
c00119f8:	83 c4 0c             	add    esp,0xc
c00119fb:	c3                   	ret    

c00119fc <KiSigKill(int)>:
c00119fc:	83 ec 0c             	sub    esp,0xc
c00119ff:	6a 00                	push   0x0
c0011a01:	6a 00                	push   0x0
c0011a03:	6a ff                	push   0xffffffff
c0011a05:	6a 01                	push   0x1
c0011a07:	e8 46 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011a0c:	83 c4 1c             	add    esp,0x1c
c0011a0f:	c3                   	ret    

c0011a10 <KiDefaultSignalHandlerIgnore(int)>:
c0011a10:	c3                   	ret    

c0011a11 <KiDefaultSignalHandlerPause(int)>:
c0011a11:	57                   	push   edi
c0011a12:	b9 07 00 00 00       	mov    ecx,0x7
c0011a17:	56                   	push   esi
c0011a18:	be a5 26 02 c0       	mov    esi,0xc00226a5
c0011a1d:	83 ec 24             	sub    esp,0x24
c0011a20:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011a24:	fc                   	cld    
c0011a25:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011a27:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011a2b:	50                   	push   eax
c0011a2c:	6a 00                	push   0x0
c0011a2e:	6a 00                	push   0x0
c0011a30:	6a 27                	push   0x27
c0011a32:	e8 1b 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011a37:	83 c4 34             	add    esp,0x34
c0011a3a:	5e                   	pop    esi
c0011a3b:	5f                   	pop    edi
c0011a3c:	c3                   	ret    

c0011a3d <KiDefaultSignalHandlerResume(int)>:
c0011a3d:	57                   	push   edi
c0011a3e:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011a43:	56                   	push   esi
c0011a44:	be c1 26 02 c0       	mov    esi,0xc00226c1
c0011a49:	83 ec 24             	sub    esp,0x24
c0011a4c:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011a50:	fc                   	cld    
c0011a51:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a53:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011a57:	50                   	push   eax
c0011a58:	6a 00                	push   0x0
c0011a5a:	6a 00                	push   0x0
c0011a5c:	6a 27                	push   0x27
c0011a5e:	e8 ef 35 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011a63:	83 c4 34             	add    esp,0x34
c0011a66:	5e                   	pop    esi
c0011a67:	5f                   	pop    edi
c0011a68:	c3                   	ret    

c0011a69 <KeDeinitSignals(SigHandlerBlock*)>:
c0011a69:	e9 a5 60 ff ff       	jmp    c0007b13 <free>

c0011a6e <KeInitSignals()>:
c0011a6e:	53                   	push   ebx
c0011a6f:	83 ec 14             	sub    esp,0x14
c0011a72:	68 c8 00 00 00       	push   0xc8
c0011a77:	e8 87 60 ff ff       	call   c0007b03 <malloc>
c0011a7c:	83 c4 0c             	add    esp,0xc
c0011a7f:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011a89:	89 c3                	mov    ebx,eax
c0011a8b:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011a95:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011a9b:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c0011a9f:	6a 20                	push   0x20
c0011aa1:	6a 00                	push   0x0
c0011aa3:	50                   	push   eax
c0011aa4:	e8 47 ea fe ff       	call   c00004f0 <memset>
c0011aa9:	83 c4 0c             	add    esp,0xc
c0011aac:	6a 44                	push   0x44
c0011aae:	6a 00                	push   0x0
c0011ab0:	53                   	push   ebx
c0011ab1:	e8 3a ea fe ff       	call   c00004f0 <memset>
c0011ab6:	83 c4 18             	add    esp,0x18
c0011ab9:	89 d8                	mov    eax,ebx
c0011abb:	5b                   	pop    ebx
c0011abc:	c3                   	ret    

c0011abd <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011abd:	53                   	push   ebx
c0011abe:	b8 01 00 00 00       	mov    eax,0x1
c0011ac3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011ac7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011acb:	83 f9 10             	cmp    ecx,0x10
c0011ace:	7f 21                	jg     c0011af1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ad4:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011ad7:	89 03                	mov    DWORD PTR [ebx],eax
c0011ad9:	b8 01 00 00 00       	mov    eax,0x1
c0011ade:	d3 e0                	shl    eax,cl
c0011ae0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011ae4:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011ae7:	31 c0                	xor    eax,eax
c0011ae9:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011af1:	5b                   	pop    ebx
c0011af2:	c3                   	ret    

c0011af3 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011af3:	55                   	push   ebp
c0011af4:	57                   	push   edi
c0011af5:	bf 08 00 00 00       	mov    edi,0x8
c0011afa:	56                   	push   esi
c0011afb:	53                   	push   ebx
c0011afc:	83 ec 18             	sub    esp,0x18
c0011aff:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011b03:	68 de 26 02 c0       	push   0xc00226de
c0011b08:	e8 2d 8e ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0011b0d:	83 c4 10             	add    esp,0x10
c0011b10:	31 c9                	xor    ecx,ecx
c0011b12:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011b19:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011b1f:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011b23:	99                   	cdq    
c0011b24:	f7 ff                	idiv   edi
c0011b26:	8d 42 24             	lea    eax,[edx+0x24]
c0011b29:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011b2d:	85 f6                	test   esi,esi
c0011b2f:	75 1a                	jne    c0011b4b <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011b31:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011b35:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011b39:	50                   	push   eax
c0011b3a:	50                   	push   eax
c0011b3b:	52                   	push   edx
c0011b3c:	68 ef 26 02 c0       	push   0xc00226ef
c0011b41:	e8 f4 8d ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0011b46:	83 c4 10             	add    esp,0x10
c0011b49:	eb 1b                	jmp    c0011b66 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011b4b:	41                   	inc    ecx
c0011b4c:	83 f9 08             	cmp    ecx,0x8
c0011b4f:	75 ce                	jne    c0011b1f <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011b51:	83 ec 0c             	sub    esp,0xc
c0011b54:	be 01 00 00 00       	mov    esi,0x1
c0011b59:	68 10 27 02 c0       	push   0xc0022710
c0011b5e:	e8 d7 8d ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0011b63:	83 c4 10             	add    esp,0x10
c0011b66:	83 c4 0c             	add    esp,0xc
c0011b69:	89 f0                	mov    eax,esi
c0011b6b:	5b                   	pop    ebx
c0011b6c:	5e                   	pop    esi
c0011b6d:	5f                   	pop    edi
c0011b6e:	5d                   	pop    ebp
c0011b6f:	c3                   	ret    

c0011b70 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011b70:	55                   	push   ebp
c0011b71:	57                   	push   edi
c0011b72:	56                   	push   esi
c0011b73:	53                   	push   ebx
c0011b74:	51                   	push   ecx
c0011b75:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011b79:	85 db                	test   ebx,ebx
c0011b7b:	0f 84 bc 00 00 00    	je     c0011c3d <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b81:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011b88:	0f 84 af 00 00 00    	je     c0011c3d <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b8e:	31 c9                	xor    ecx,ecx
c0011b90:	bf 08 00 00 00       	mov    edi,0x8
c0011b95:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011b9b:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011b9e:	99                   	cdq    
c0011b9f:	f7 ff                	idiv   edi
c0011ba1:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011ba8:	85 ed                	test   ebp,ebp
c0011baa:	0f 84 9e 00 00 00    	je     c0011c4e <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011bb0:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011bb6:	89 e9                	mov    ecx,ebp
c0011bb8:	bf 01 00 00 00       	mov    edi,0x1
c0011bbd:	d3 e7                	shl    edi,cl
c0011bbf:	31 c9                	xor    ecx,ecx
c0011bc1:	89 04 24             	mov    DWORD PTR [esp],eax
c0011bc4:	b8 01 00 00 00       	mov    eax,0x1
c0011bc9:	d3 e0                	shl    eax,cl
c0011bcb:	85 04 24             	test   DWORD PTR [esp],eax
c0011bce:	74 06                	je     c0011bd6 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011bd0:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011bd4:	75 67                	jne    c0011c3d <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011bd6:	41                   	inc    ecx
c0011bd7:	83 f9 11             	cmp    ecx,0x11
c0011bda:	75 e8                	jne    c0011bc4 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011bdc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011bdf:	46                   	inc    esi
c0011be0:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011be6:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011bf1:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011bf8:	09 f8                	or     eax,edi
c0011bfa:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011c00:	31 c0                	xor    eax,eax
c0011c02:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011c0a:	74 09                	je     c0011c15 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011c0c:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011c13:	eb 06                	jmp    c0011c1b <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011c15:	40                   	inc    eax
c0011c16:	83 f8 08             	cmp    eax,0x8
c0011c19:	75 e7                	jne    c0011c02 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011c1b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011c1f:	83 fd 09             	cmp    ebp,0x9
c0011c22:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011c25:	89 2a                	mov    DWORD PTR [edx],ebp
c0011c27:	75 07                	jne    c0011c30 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011c29:	b8 fc 19 01 c0       	mov    eax,0xc00119fc
c0011c2e:	eb 31                	jmp    c0011c61 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c30:	83 f8 01             	cmp    eax,0x1
c0011c33:	75 0c                	jne    c0011c41 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011c35:	f7 d7                	not    edi
c0011c37:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011c3d:	31 c0                	xor    eax,eax
c0011c3f:	eb 20                	jmp    c0011c61 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c41:	85 c0                	test   eax,eax
c0011c43:	75 1c                	jne    c0011c61 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c45:	8b 04 ad 20 3f 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdc0e0]
c0011c4c:	eb 13                	jmp    c0011c61 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c4e:	41                   	inc    ecx
c0011c4f:	46                   	inc    esi
c0011c50:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011c56:	83 f9 08             	cmp    ecx,0x8
c0011c59:	0f 85 36 ff ff ff    	jne    c0011b95 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011c5f:	eb dc                	jmp    c0011c3d <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011c61:	5a                   	pop    edx
c0011c62:	5b                   	pop    ebx
c0011c63:	5e                   	pop    esi
c0011c64:	5f                   	pop    edi
c0011c65:	5d                   	pop    ebp
c0011c66:	c3                   	ret    

c0011c67 <KiCheckSignalZ>:
c0011c67:	83 ec 10             	sub    esp,0x10
c0011c6a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011c6e:	50                   	push   eax
c0011c6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c74:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c77:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011c7d:	e8 ee fe ff ff       	call   c0011b70 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011c82:	5a                   	pop    edx
c0011c83:	31 d2                	xor    edx,edx
c0011c85:	59                   	pop    ecx
c0011c86:	85 c0                	test   eax,eax
c0011c88:	74 19                	je     c0011ca3 <KiCheckSignalZ+0x3c>
c0011c8a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011c90:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011c93:	89 02                	mov    DWORD PTR [edx],eax
c0011c95:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011c9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ca0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011ca3:	89 d0                	mov    eax,edx
c0011ca5:	83 c4 10             	add    esp,0x10
c0011ca8:	c3                   	ret    

c0011ca9 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011ca9:	56                   	push   esi
c0011caa:	53                   	push   ebx
c0011cab:	bb 01 00 00 00       	mov    ebx,0x1
c0011cb0:	52                   	push   edx
c0011cb1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011cb5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011cb9:	d3 e3                	shl    ebx,cl
c0011cbb:	83 f9 10             	cmp    ecx,0x10
c0011cbe:	7f 08                	jg     c0011cc8 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011cc0:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011cc6:	75 10                	jne    c0011cd8 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011cc8:	83 ec 0c             	sub    esp,0xc
c0011ccb:	68 21 27 02 c0       	push   0xc0022721
c0011cd0:	e8 82 f9 ff ff       	call   c0011657 <KePanic(char const*)>
c0011cd5:	83 c4 10             	add    esp,0x10
c0011cd8:	f7 d3                	not    ebx
c0011cda:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011ce0:	58                   	pop    eax
c0011ce1:	5b                   	pop    ebx
c0011ce2:	5e                   	pop    esi
c0011ce3:	c3                   	ret    

c0011ce4 <KiFinishSignalZ>:
c0011ce4:	53                   	push   ebx
c0011ce5:	83 ec 10             	sub    esp,0x10
c0011ce8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011cec:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011cef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cf4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cf7:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011cfd:	e8 a7 ff ff ff       	call   c0011ca9 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011d02:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011d08:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011d0f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011d16:	83 c4 18             	add    esp,0x18
c0011d19:	5b                   	pop    ebx
c0011d1a:	c3                   	ret    

c0011d1b <SysSeekDir(regs*)>:
c0011d1b:	31 c0                	xor    eax,eax
c0011d1d:	31 d2                	xor    edx,edx
c0011d1f:	c3                   	ret    

c0011d20 <SysTellDir(regs*)>:
c0011d20:	31 c0                	xor    eax,eax
c0011d22:	31 d2                	xor    edx,edx
c0011d24:	c3                   	ret    

c0011d25 <SysVerify(regs*)>:
c0011d25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d29:	31 d2                	xor    edx,edx
c0011d2b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011d2e:	c3                   	ret    

c0011d2f <SysGetArgc(regs*)>:
c0011d2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d34:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d37:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011d3d:	89 c2                	mov    edx,eax
c0011d3f:	c1 fa 1f             	sar    edx,0x1f
c0011d42:	c3                   	ret    

c0011d43 <SysTTYName(regs*)>:
c0011d43:	b8 01 00 00 00       	mov    eax,0x1
c0011d48:	31 d2                	xor    edx,edx
c0011d4a:	c3                   	ret    

c0011d4b <SysFormatDisk(regs*)>:
c0011d4b:	56                   	push   esi
c0011d4c:	53                   	push   ebx
c0011d4d:	83 ec 04             	sub    esp,0x4
c0011d50:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011d54:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c0011d5a:	eb 2a                	jmp    c0011d86 <SysFormatDisk(regs*)+0x3b>
c0011d5c:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011d5f:	83 ec 0c             	sub    esp,0xc
c0011d62:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011d65:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d67:	51                   	push   ecx
c0011d68:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011d6b:	51                   	push   ecx
c0011d6c:	50                   	push   eax
c0011d6d:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0011d74:	50                   	push   eax
c0011d75:	53                   	push   ebx
c0011d76:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011d79:	83 c4 20             	add    esp,0x20
c0011d7c:	83 f8 08             	cmp    eax,0x8
c0011d7f:	89 c1                	mov    ecx,eax
c0011d81:	75 14                	jne    c0011d97 <SysFormatDisk(regs*)+0x4c>
c0011d83:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011d86:	85 db                	test   ebx,ebx
c0011d88:	75 d2                	jne    c0011d5c <SysFormatDisk(regs*)+0x11>
c0011d8a:	b8 03 00 00 00       	mov    eax,0x3
c0011d8f:	31 d2                	xor    edx,edx
c0011d91:	83 c4 04             	add    esp,0x4
c0011d94:	5b                   	pop    ebx
c0011d95:	5e                   	pop    esi
c0011d96:	c3                   	ret    
c0011d97:	85 c0                	test   eax,eax
c0011d99:	74 13                	je     c0011dae <SysFormatDisk(regs*)+0x63>
c0011d9b:	31 d2                	xor    edx,edx
c0011d9d:	83 f9 09             	cmp    ecx,0x9
c0011da0:	b8 01 00 00 00       	mov    eax,0x1
c0011da5:	74 ea                	je     c0011d91 <SysFormatDisk(regs*)+0x46>
c0011da7:	b8 02 00 00 00       	mov    eax,0x2
c0011dac:	eb e1                	jmp    c0011d8f <SysFormatDisk(regs*)+0x44>
c0011dae:	31 c0                	xor    eax,eax
c0011db0:	eb dd                	jmp    c0011d8f <SysFormatDisk(regs*)+0x44>

c0011db2 <SysSetDiskVolumeLabel(regs*)>:
c0011db2:	56                   	push   esi
c0011db3:	53                   	push   ebx
c0011db4:	83 ec 04             	sub    esp,0x4
c0011db7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011dbb:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011dbe:	83 f8 19             	cmp    eax,0x19
c0011dc1:	77 33                	ja     c0011df6 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011dc3:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0011dca:	85 c9                	test   ecx,ecx
c0011dcc:	74 28                	je     c0011df6 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011dce:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011dd1:	85 db                	test   ebx,ebx
c0011dd3:	74 21                	je     c0011df6 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011dd5:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011ddb:	85 d2                	test   edx,edx
c0011ddd:	74 17                	je     c0011df6 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011ddf:	8b 32                	mov    esi,DWORD PTR [edx]
c0011de1:	53                   	push   ebx
c0011de2:	50                   	push   eax
c0011de3:	51                   	push   ecx
c0011de4:	52                   	push   edx
c0011de5:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011de8:	83 c4 10             	add    esp,0x10
c0011deb:	83 c4 04             	add    esp,0x4
c0011dee:	5b                   	pop    ebx
c0011def:	5e                   	pop    esi
c0011df0:	89 c2                	mov    edx,eax
c0011df2:	c1 fa 1f             	sar    edx,0x1f
c0011df5:	c3                   	ret    
c0011df6:	83 c4 04             	add    esp,0x4
c0011df9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011dfe:	5b                   	pop    ebx
c0011dff:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e04:	5e                   	pop    esi
c0011e05:	c3                   	ret    

c0011e06 <SysGetDiskVolumeLabel(regs*)>:
c0011e06:	57                   	push   edi
c0011e07:	56                   	push   esi
c0011e08:	53                   	push   ebx
c0011e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e0d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011e10:	83 fa 19             	cmp    edx,0x19
c0011e13:	77 3c                	ja     c0011e51 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e15:	8b 0c 95 80 b8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4780]
c0011e1c:	85 c9                	test   ecx,ecx
c0011e1e:	74 31                	je     c0011e51 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e20:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011e23:	85 db                	test   ebx,ebx
c0011e25:	74 2a                	je     c0011e51 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e27:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011e2a:	85 f6                	test   esi,esi
c0011e2c:	74 23                	je     c0011e51 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e2e:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011e34:	85 c0                	test   eax,eax
c0011e36:	74 19                	je     c0011e51 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e38:	83 ec 0c             	sub    esp,0xc
c0011e3b:	8b 38                	mov    edi,DWORD PTR [eax]
c0011e3d:	56                   	push   esi
c0011e3e:	53                   	push   ebx
c0011e3f:	52                   	push   edx
c0011e40:	51                   	push   ecx
c0011e41:	50                   	push   eax
c0011e42:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011e45:	83 c4 20             	add    esp,0x20
c0011e48:	5b                   	pop    ebx
c0011e49:	5e                   	pop    esi
c0011e4a:	89 c2                	mov    edx,eax
c0011e4c:	c1 fa 1f             	sar    edx,0x1f
c0011e4f:	5f                   	pop    edi
c0011e50:	c3                   	ret    
c0011e51:	5b                   	pop    ebx
c0011e52:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011e57:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e5c:	5e                   	pop    esi
c0011e5d:	5f                   	pop    edi
c0011e5e:	c3                   	ret    

c0011e5f <SysShutdown(regs*)>:
c0011e5f:	57                   	push   edi
c0011e60:	56                   	push   esi
c0011e61:	83 ec 04             	sub    esp,0x4
c0011e64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e68:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011e6b:	85 c0                	test   eax,eax
c0011e6d:	74 1e                	je     c0011e8d <SysShutdown(regs*)+0x2e>
c0011e6f:	83 f8 01             	cmp    eax,0x1
c0011e72:	74 5f                	je     c0011ed3 <SysShutdown(regs*)+0x74>
c0011e74:	83 f8 02             	cmp    eax,0x2
c0011e77:	be ff ff ff ff       	mov    esi,0xffffffff
c0011e7c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011e81:	74 32                	je     c0011eb5 <SysShutdown(regs*)+0x56>
c0011e83:	83 c4 04             	add    esp,0x4
c0011e86:	89 f0                	mov    eax,esi
c0011e88:	5e                   	pop    esi
c0011e89:	89 fa                	mov    edx,edi
c0011e8b:	5f                   	pop    edi
c0011e8c:	c3                   	ret    
c0011e8d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011e92:	be ff ff ff ff       	mov    esi,0xffffffff
c0011e97:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011e9c:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e9e:	6a 00                	push   0x0
c0011ea0:	6a 00                	push   0x0
c0011ea2:	6a 00                	push   0x0
c0011ea4:	50                   	push   eax
c0011ea5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011ea8:	83 c4 10             	add    esp,0x10
c0011eab:	89 f0                	mov    eax,esi
c0011ead:	83 c4 04             	add    esp,0x4
c0011eb0:	89 fa                	mov    edx,edi
c0011eb2:	5e                   	pop    esi
c0011eb3:	5f                   	pop    edi
c0011eb4:	c3                   	ret    
c0011eb5:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011eba:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ebc:	6a 00                	push   0x0
c0011ebe:	6a 00                	push   0x0
c0011ec0:	6a 01                	push   0x1
c0011ec2:	50                   	push   eax
c0011ec3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011ec6:	83 c4 10             	add    esp,0x10
c0011ec9:	89 f0                	mov    eax,esi
c0011ecb:	83 c4 04             	add    esp,0x4
c0011ece:	89 fa                	mov    edx,edi
c0011ed0:	5e                   	pop    esi
c0011ed1:	5f                   	pop    edi
c0011ed2:	c3                   	ret    
c0011ed3:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011ed8:	85 c0                	test   eax,eax
c0011eda:	74 02                	je     c0011ede <SysShutdown(regs*)+0x7f>
c0011edc:	ff d0                	call   eax
c0011ede:	31 f6                	xor    esi,esi
c0011ee0:	83 c4 04             	add    esp,0x4
c0011ee3:	89 f0                	mov    eax,esi
c0011ee5:	31 ff                	xor    edi,edi
c0011ee7:	5e                   	pop    esi
c0011ee8:	89 fa                	mov    edx,edi
c0011eea:	5f                   	pop    edi
c0011eeb:	c3                   	ret    

c0011eec <SysRealpath(regs*)>:
c0011eec:	53                   	push   ebx
c0011eed:	83 ec 08             	sub    esp,0x8
c0011ef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ef4:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011ef7:	85 c9                	test   ecx,ecx
c0011ef9:	74 36                	je     c0011f31 <SysRealpath(regs*)+0x45>
c0011efb:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011efe:	31 d2                	xor    edx,edx
c0011f00:	b8 01 00 00 00       	mov    eax,0x1
c0011f05:	85 db                	test   ebx,ebx
c0011f07:	75 05                	jne    c0011f0e <SysRealpath(regs*)+0x22>
c0011f09:	83 c4 08             	add    esp,0x8
c0011f0c:	5b                   	pop    ebx
c0011f0d:	c3                   	ret    
c0011f0e:	6a 00                	push   0x0
c0011f10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f15:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f18:	05 0c 01 00 00       	add    eax,0x10c
c0011f1d:	50                   	push   eax
c0011f1e:	51                   	push   ecx
c0011f1f:	53                   	push   ebx
c0011f20:	e8 21 99 ff ff       	call   c000b846 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011f25:	83 c4 10             	add    esp,0x10
c0011f28:	31 c0                	xor    eax,eax
c0011f2a:	31 d2                	xor    edx,edx
c0011f2c:	83 c4 08             	add    esp,0x8
c0011f2f:	5b                   	pop    ebx
c0011f30:	c3                   	ret    
c0011f31:	b8 01 00 00 00       	mov    eax,0x1
c0011f36:	31 d2                	xor    edx,edx
c0011f38:	eb f2                	jmp    c0011f2c <SysRealpath(regs*)+0x40>

c0011f3a <SysReadDir(regs*)>:
c0011f3a:	53                   	push   ebx
c0011f3b:	83 ec 18             	sub    esp,0x18
c0011f3e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f42:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011f45:	83 f8 02             	cmp    eax,0x2
c0011f48:	76 4f                	jbe    c0011f99 <SysReadDir(regs*)+0x5f>
c0011f4a:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011f51:	77 52                	ja     c0011fa5 <SysReadDir(regs*)+0x6b>
c0011f53:	83 ec 0c             	sub    esp,0xc
c0011f56:	50                   	push   eax
c0011f57:	e8 6f 75 ff ff       	call   c00094cb <KeGetFileFromDescriptor(int)>
c0011f5c:	83 c4 10             	add    esp,0x10
c0011f5f:	85 c0                	test   eax,eax
c0011f61:	74 42                	je     c0011fa5 <SysReadDir(regs*)+0x6b>
c0011f63:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f6b:	83 ec 0c             	sub    esp,0xc
c0011f6e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011f72:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f74:	51                   	push   ecx
c0011f75:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011f78:	51                   	push   ecx
c0011f79:	6a 00                	push   0x0
c0011f7b:	68 10 01 00 00       	push   0x110
c0011f80:	50                   	push   eax
c0011f81:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011f84:	83 c4 20             	add    esp,0x20
c0011f87:	85 c0                	test   eax,eax
c0011f89:	89 c1                	mov    ecx,eax
c0011f8b:	74 27                	je     c0011fb4 <SysReadDir(regs*)+0x7a>
c0011f8d:	31 d2                	xor    edx,edx
c0011f8f:	83 f9 07             	cmp    ecx,0x7
c0011f92:	b8 02 00 00 00       	mov    eax,0x2
c0011f97:	75 16                	jne    c0011faf <SysReadDir(regs*)+0x75>
c0011f99:	b8 01 00 00 00       	mov    eax,0x1
c0011f9e:	31 d2                	xor    edx,edx
c0011fa0:	83 c4 18             	add    esp,0x18
c0011fa3:	5b                   	pop    ebx
c0011fa4:	c3                   	ret    
c0011fa5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011faa:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011faf:	83 c4 18             	add    esp,0x18
c0011fb2:	5b                   	pop    ebx
c0011fb3:	c3                   	ret    
c0011fb4:	31 c0                	xor    eax,eax
c0011fb6:	31 d2                	xor    edx,edx
c0011fb8:	eb e6                	jmp    c0011fa0 <SysReadDir(regs*)+0x66>

c0011fba <SysIsATTY(regs*)>:
c0011fba:	83 ec 0c             	sub    esp,0xc
c0011fbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fc1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011fc4:	83 f8 02             	cmp    eax,0x2
c0011fc7:	76 07                	jbe    c0011fd0 <SysIsATTY(regs*)+0x16>
c0011fc9:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011fce:	75 26                	jne    c0011ff6 <SysIsATTY(regs*)+0x3c>
c0011fd0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fd5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fd8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011fde:	85 c0                	test   eax,eax
c0011fe0:	74 24                	je     c0012006 <SysIsATTY(regs*)+0x4c>
c0011fe2:	8b 10                	mov    edx,DWORD PTR [eax]
c0011fe4:	83 ec 0c             	sub    esp,0xc
c0011fe7:	50                   	push   eax
c0011fe8:	ff 12                	call   DWORD PTR [edx]
c0011fea:	83 c4 10             	add    esp,0x10
c0011fed:	31 d2                	xor    edx,edx
c0011fef:	83 c4 0c             	add    esp,0xc
c0011ff2:	0f b6 c0             	movzx  eax,al
c0011ff5:	c3                   	ret    
c0011ff6:	83 ec 0c             	sub    esp,0xc
c0011ff9:	50                   	push   eax
c0011ffa:	e8 cc 74 ff ff       	call   c00094cb <KeGetFileFromDescriptor(int)>
c0011fff:	83 c4 10             	add    esp,0x10
c0012002:	85 c0                	test   eax,eax
c0012004:	75 dc                	jne    c0011fe2 <SysIsATTY(regs*)+0x28>
c0012006:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001200b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012010:	83 c4 0c             	add    esp,0xc
c0012013:	c3                   	ret    

c0012014 <SysSeek(regs*)>:
c0012014:	56                   	push   esi
c0012015:	53                   	push   ebx
c0012016:	83 ec 04             	sub    esp,0x4
c0012019:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001201d:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012020:	8d 71 fd             	lea    esi,[ecx-0x3]
c0012023:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0012029:	77 33                	ja     c001205e <SysSeek(regs*)+0x4a>
c001202b:	83 ec 0c             	sub    esp,0xc
c001202e:	51                   	push   ecx
c001202f:	e8 97 74 ff ff       	call   c00094cb <KeGetFileFromDescriptor(int)>
c0012034:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0012037:	83 c4 0c             	add    esp,0xc
c001203a:	31 db                	xor    ebx,ebx
c001203c:	53                   	push   ebx
c001203d:	51                   	push   ecx
c001203e:	50                   	push   eax
c001203f:	e8 ea 9b ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0012044:	83 c4 10             	add    esp,0x10
c0012047:	85 c0                	test   eax,eax
c0012049:	0f 95 c0             	setne  al
c001204c:	31 d2                	xor    edx,edx
c001204e:	0f b6 c0             	movzx  eax,al
c0012051:	f7 d8                	neg    eax
c0012053:	83 d2 00             	adc    edx,0x0
c0012056:	83 c4 04             	add    esp,0x4
c0012059:	5b                   	pop    ebx
c001205a:	f7 da                	neg    edx
c001205c:	5e                   	pop    esi
c001205d:	c3                   	ret    
c001205e:	83 c4 04             	add    esp,0x4
c0012061:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012066:	5b                   	pop    ebx
c0012067:	ba ff ff ff ff       	mov    edx,0xffffffff
c001206c:	5e                   	pop    esi
c001206d:	c3                   	ret    

c001206e <SysTell(regs*)>:
c001206e:	53                   	push   ebx
c001206f:	83 ec 08             	sub    esp,0x8
c0012072:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012076:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012079:	83 f8 02             	cmp    eax,0x2
c001207c:	76 4e                	jbe    c00120cc <SysTell(regs*)+0x5e>
c001207e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012083:	76 19                	jbe    c001209e <SysTell(regs*)+0x30>
c0012085:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012088:	31 d2                	xor    edx,edx
c001208a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012090:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012097:	83 c4 08             	add    esp,0x8
c001209a:	31 c0                	xor    eax,eax
c001209c:	5b                   	pop    ebx
c001209d:	c3                   	ret    
c001209e:	83 ec 0c             	sub    esp,0xc
c00120a1:	50                   	push   eax
c00120a2:	e8 24 74 ff ff       	call   c00094cb <KeGetFileFromDescriptor(int)>
c00120a7:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00120aa:	5a                   	pop    edx
c00120ab:	59                   	pop    ecx
c00120ac:	53                   	push   ebx
c00120ad:	50                   	push   eax
c00120ae:	e8 27 9c ff ff       	call   c000bcda <File::tell(unsigned long long*)>
c00120b3:	83 c4 10             	add    esp,0x10
c00120b6:	85 c0                	test   eax,eax
c00120b8:	0f 95 c0             	setne  al
c00120bb:	31 d2                	xor    edx,edx
c00120bd:	0f b6 c0             	movzx  eax,al
c00120c0:	f7 d8                	neg    eax
c00120c2:	83 d2 00             	adc    edx,0x0
c00120c5:	83 c4 08             	add    esp,0x8
c00120c8:	5b                   	pop    ebx
c00120c9:	f7 da                	neg    edx
c00120cb:	c3                   	ret    
c00120cc:	83 c4 08             	add    esp,0x8
c00120cf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120d4:	5b                   	pop    ebx
c00120d5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120da:	c3                   	ret    

c00120db <SysSize(regs*)>:
c00120db:	53                   	push   ebx
c00120dc:	83 ec 18             	sub    esp,0x18
c00120df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00120e3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00120e6:	83 f8 02             	cmp    eax,0x2
c00120e9:	76 54                	jbe    c001213f <SysSize(regs*)+0x64>
c00120eb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00120f0:	76 19                	jbe    c001210b <SysSize(regs*)+0x30>
c00120f2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00120f5:	31 d2                	xor    edx,edx
c00120f7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00120fd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012104:	83 c4 18             	add    esp,0x18
c0012107:	31 c0                	xor    eax,eax
c0012109:	5b                   	pop    ebx
c001210a:	c3                   	ret    
c001210b:	83 ec 0c             	sub    esp,0xc
c001210e:	50                   	push   eax
c001210f:	e8 b7 73 ff ff       	call   c00094cb <KeGetFileFromDescriptor(int)>
c0012114:	83 c4 0c             	add    esp,0xc
c0012117:	8d 54 24 13          	lea    edx,[esp+0x13]
c001211b:	52                   	push   edx
c001211c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001211f:	52                   	push   edx
c0012120:	50                   	push   eax
c0012121:	e8 4c 9d ff ff       	call   c000be72 <File::stat(unsigned long long*, bool*)>
c0012126:	83 c4 10             	add    esp,0x10
c0012129:	85 c0                	test   eax,eax
c001212b:	0f 95 c0             	setne  al
c001212e:	31 d2                	xor    edx,edx
c0012130:	0f b6 c0             	movzx  eax,al
c0012133:	f7 d8                	neg    eax
c0012135:	83 d2 00             	adc    edx,0x0
c0012138:	83 c4 18             	add    esp,0x18
c001213b:	5b                   	pop    ebx
c001213c:	f7 da                	neg    edx
c001213e:	c3                   	ret    
c001213f:	83 c4 18             	add    esp,0x18
c0012142:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012147:	5b                   	pop    ebx
c0012148:	ba ff ff ff ff       	mov    edx,0xffffffff
c001214d:	c3                   	ret    

c001214e <SysSizeFromFilename(regs*)>:
c001214e:	55                   	push   ebp
c001214f:	57                   	push   edi
c0012150:	56                   	push   esi
c0012151:	53                   	push   ebx
c0012152:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0012158:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c001215f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012162:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012165:	85 f6                	test   esi,esi
c0012167:	89 f8                	mov    eax,edi
c0012169:	74 09                	je     c0012174 <SysSizeFromFilename(regs*)+0x26>
c001216b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012171:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012174:	83 f8 02             	cmp    eax,0x2
c0012177:	0f 86 ca 00 00 00    	jbe    c0012247 <SysSizeFromFilename(regs*)+0xf9>
c001217d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012182:	76 1f                	jbe    c00121a3 <SysSizeFromFilename(regs*)+0x55>
c0012184:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012187:	31 d2                	xor    edx,edx
c0012189:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001218f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012196:	31 c0                	xor    eax,eax
c0012198:	81 c4 4c 02 00 00    	add    esp,0x24c
c001219e:	5b                   	pop    ebx
c001219f:	5e                   	pop    esi
c00121a0:	5f                   	pop    edi
c00121a1:	5d                   	pop    ebp
c00121a2:	c3                   	ret    
c00121a3:	83 ec 0c             	sub    esp,0xc
c00121a6:	68 14 01 00 00       	push   0x114
c00121ab:	e8 53 59 ff ff       	call   c0007b03 <malloc>
c00121b0:	6a 01                	push   0x1
c00121b2:	89 c5                	mov    ebp,eax
c00121b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121b9:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00121bc:	51                   	push   ecx
c00121bd:	57                   	push   edi
c00121be:	55                   	push   ebp
c00121bf:	e8 b0 98 ff ff       	call   c000ba74 <File::File(char const*, Process*, bool)>
c00121c4:	83 c4 1c             	add    esp,0x1c
c00121c7:	8d 44 24 13          	lea    eax,[esp+0x13]
c00121cb:	50                   	push   eax
c00121cc:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00121cf:	53                   	push   ebx
c00121d0:	55                   	push   ebp
c00121d1:	e8 9c 9c ff ff       	call   c000be72 <File::stat(unsigned long long*, bool*)>
c00121d6:	83 c4 10             	add    esp,0x10
c00121d9:	85 ed                	test   ebp,ebp
c00121db:	89 c3                	mov    ebx,eax
c00121dd:	74 0d                	je     c00121ec <SysSizeFromFilename(regs*)+0x9e>
c00121df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00121e2:	83 ec 0c             	sub    esp,0xc
c00121e5:	55                   	push   ebp
c00121e6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00121e9:	83 c4 10             	add    esp,0x10
c00121ec:	85 db                	test   ebx,ebx
c00121ee:	75 57                	jne    c0012247 <SysSizeFromFilename(regs*)+0xf9>
c00121f0:	6a 00                	push   0x0
c00121f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121f7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121fa:	05 0c 01 00 00       	add    eax,0x10c
c00121ff:	50                   	push   eax
c0012200:	57                   	push   edi
c0012201:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0012208:	53                   	push   ebx
c0012209:	e8 38 96 ff ff       	call   c000b846 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001220e:	58                   	pop    eax
c001220f:	5a                   	pop    edx
c0012210:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012214:	50                   	push   eax
c0012215:	53                   	push   ebx
c0012216:	e8 93 90 ff ff       	call   c000b2ae <KeDereferenceSymlink(char const*, char*)>
c001221b:	83 c4 10             	add    esp,0x10
c001221e:	ba 00 00 00 00       	mov    edx,0x0
c0012223:	83 f8 01             	cmp    eax,0x1
c0012226:	b8 00 00 00 00       	mov    eax,0x0
c001222b:	74 2f                	je     c001225c <SysSizeFromFilename(regs*)+0x10e>
c001222d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012232:	74 3b                	je     c001226f <SysSizeFromFilename(regs*)+0x121>
c0012234:	85 f6                	test   esi,esi
c0012236:	0f 84 5c ff ff ff    	je     c0012198 <SysSizeFromFilename(regs*)+0x4a>
c001223c:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0012242:	e9 51 ff ff ff       	jmp    c0012198 <SysSizeFromFilename(regs*)+0x4a>
c0012247:	81 c4 4c 02 00 00    	add    esp,0x24c
c001224d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012252:	5b                   	pop    ebx
c0012253:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012258:	5e                   	pop    esi
c0012259:	5f                   	pop    edi
c001225a:	5d                   	pop    ebp
c001225b:	c3                   	ret    
c001225c:	85 f6                	test   esi,esi
c001225e:	0f 84 34 ff ff ff    	je     c0012198 <SysSizeFromFilename(regs*)+0x4a>
c0012264:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001226a:	e9 29 ff ff ff       	jmp    c0012198 <SysSizeFromFilename(regs*)+0x4a>
c001226f:	85 f6                	test   esi,esi
c0012271:	0f 84 21 ff ff ff    	je     c0012198 <SysSizeFromFilename(regs*)+0x4a>
c0012277:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001227d:	e9 16 ff ff ff       	jmp    c0012198 <SysSizeFromFilename(regs*)+0x4a>

c0012282 <SysSizeFromFilenameNoSymlink(regs*)>:
c0012282:	55                   	push   ebp
c0012283:	57                   	push   edi
c0012284:	56                   	push   esi
c0012285:	53                   	push   ebx
c0012286:	81 ec 4c 02 00 00    	sub    esp,0x24c
c001228c:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0012293:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012296:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012299:	85 f6                	test   esi,esi
c001229b:	89 f8                	mov    eax,edi
c001229d:	74 09                	je     c00122a8 <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c001229f:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00122a5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00122a8:	83 f8 02             	cmp    eax,0x2
c00122ab:	0f 86 ca 00 00 00    	jbe    c001237b <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c00122b1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00122b6:	76 1f                	jbe    c00122d7 <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c00122b8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00122bb:	31 d2                	xor    edx,edx
c00122bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00122c3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00122ca:	31 c0                	xor    eax,eax
c00122cc:	81 c4 4c 02 00 00    	add    esp,0x24c
c00122d2:	5b                   	pop    ebx
c00122d3:	5e                   	pop    esi
c00122d4:	5f                   	pop    edi
c00122d5:	5d                   	pop    ebp
c00122d6:	c3                   	ret    
c00122d7:	83 ec 0c             	sub    esp,0xc
c00122da:	68 14 01 00 00       	push   0x114
c00122df:	e8 1f 58 ff ff       	call   c0007b03 <malloc>
c00122e4:	6a 00                	push   0x0
c00122e6:	89 c5                	mov    ebp,eax
c00122e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122ed:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00122f0:	51                   	push   ecx
c00122f1:	57                   	push   edi
c00122f2:	55                   	push   ebp
c00122f3:	e8 7c 97 ff ff       	call   c000ba74 <File::File(char const*, Process*, bool)>
c00122f8:	83 c4 1c             	add    esp,0x1c
c00122fb:	8d 44 24 13          	lea    eax,[esp+0x13]
c00122ff:	50                   	push   eax
c0012300:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012303:	53                   	push   ebx
c0012304:	55                   	push   ebp
c0012305:	e8 68 9b ff ff       	call   c000be72 <File::stat(unsigned long long*, bool*)>
c001230a:	83 c4 10             	add    esp,0x10
c001230d:	85 ed                	test   ebp,ebp
c001230f:	89 c3                	mov    ebx,eax
c0012311:	74 0d                	je     c0012320 <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c0012313:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012316:	83 ec 0c             	sub    esp,0xc
c0012319:	55                   	push   ebp
c001231a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001231d:	83 c4 10             	add    esp,0x10
c0012320:	85 db                	test   ebx,ebx
c0012322:	75 57                	jne    c001237b <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c0012324:	6a 00                	push   0x0
c0012326:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001232b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001232e:	05 0c 01 00 00       	add    eax,0x10c
c0012333:	50                   	push   eax
c0012334:	57                   	push   edi
c0012335:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c001233c:	53                   	push   ebx
c001233d:	e8 04 95 ff ff       	call   c000b846 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012342:	58                   	pop    eax
c0012343:	5a                   	pop    edx
c0012344:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012348:	50                   	push   eax
c0012349:	53                   	push   ebx
c001234a:	e8 5f 8f ff ff       	call   c000b2ae <KeDereferenceSymlink(char const*, char*)>
c001234f:	83 c4 10             	add    esp,0x10
c0012352:	ba 00 00 00 00       	mov    edx,0x0
c0012357:	83 f8 01             	cmp    eax,0x1
c001235a:	b8 00 00 00 00       	mov    eax,0x0
c001235f:	74 2f                	je     c0012390 <SysSizeFromFilenameNoSymlink(regs*)+0x10e>
c0012361:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012366:	74 3b                	je     c00123a3 <SysSizeFromFilenameNoSymlink(regs*)+0x121>
c0012368:	85 f6                	test   esi,esi
c001236a:	0f 84 5c ff ff ff    	je     c00122cc <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012370:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0012376:	e9 51 ff ff ff       	jmp    c00122cc <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001237b:	81 c4 4c 02 00 00    	add    esp,0x24c
c0012381:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012386:	5b                   	pop    ebx
c0012387:	ba ff ff ff ff       	mov    edx,0xffffffff
c001238c:	5e                   	pop    esi
c001238d:	5f                   	pop    edi
c001238e:	5d                   	pop    ebp
c001238f:	c3                   	ret    
c0012390:	85 f6                	test   esi,esi
c0012392:	0f 84 34 ff ff ff    	je     c00122cc <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0012398:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001239e:	e9 29 ff ff ff       	jmp    c00122cc <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00123a3:	85 f6                	test   esi,esi
c00123a5:	0f 84 21 ff ff ff    	je     c00122cc <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00123ab:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00123b1:	e9 16 ff ff ff       	jmp    c00122cc <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c00123b6 <SysClose(regs*)>:
c00123b6:	53                   	push   ebx
c00123b7:	83 ec 08             	sub    esp,0x8
c00123ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123be:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00123c1:	83 f8 02             	cmp    eax,0x2
c00123c4:	76 41                	jbe    c0012407 <SysClose(regs*)+0x51>
c00123c6:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00123cc:	83 fa 01             	cmp    edx,0x1
c00123cf:	76 2d                	jbe    c00123fe <SysClose(regs*)+0x48>
c00123d1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00123d6:	77 2f                	ja     c0012407 <SysClose(regs*)+0x51>
c00123d8:	83 ec 0c             	sub    esp,0xc
c00123db:	50                   	push   eax
c00123dc:	e8 ea 70 ff ff       	call   c00094cb <KeGetFileFromDescriptor(int)>
c00123e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00123e4:	89 c3                	mov    ebx,eax
c00123e6:	e8 e3 97 ff ff       	call   c000bbce <File::close()>
c00123eb:	83 c4 10             	add    esp,0x10
c00123ee:	85 db                	test   ebx,ebx
c00123f0:	74 0c                	je     c00123fe <SysClose(regs*)+0x48>
c00123f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00123f4:	83 ec 0c             	sub    esp,0xc
c00123f7:	53                   	push   ebx
c00123f8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00123fb:	83 c4 10             	add    esp,0x10
c00123fe:	83 c4 08             	add    esp,0x8
c0012401:	31 c0                	xor    eax,eax
c0012403:	5b                   	pop    ebx
c0012404:	31 d2                	xor    edx,edx
c0012406:	c3                   	ret    
c0012407:	83 c4 08             	add    esp,0x8
c001240a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001240f:	5b                   	pop    ebx
c0012410:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012415:	c3                   	ret    

c0012416 <SysOpenDir(regs*)>:
c0012416:	56                   	push   esi
c0012417:	53                   	push   ebx
c0012418:	83 ec 04             	sub    esp,0x4
c001241b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001241f:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012422:	85 c9                	test   ecx,ecx
c0012424:	74 5d                	je     c0012483 <SysOpenDir(regs*)+0x6d>
c0012426:	83 ec 0c             	sub    esp,0xc
c0012429:	68 14 01 00 00       	push   0x114
c001242e:	e8 d0 56 ff ff       	call   c0007b03 <malloc>
c0012433:	83 c4 0c             	add    esp,0xc
c0012436:	89 c6                	mov    esi,eax
c0012438:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001243d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012440:	50                   	push   eax
c0012441:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012444:	52                   	push   edx
c0012445:	56                   	push   esi
c0012446:	e8 e7 9b ff ff       	call   c000c032 <Directory::Directory(char const*, Process*)>
c001244b:	83 c4 10             	add    esp,0x10
c001244e:	85 f6                	test   esi,esi
c0012450:	74 31                	je     c0012483 <SysOpenDir(regs*)+0x6d>
c0012452:	83 ec 0c             	sub    esp,0xc
c0012455:	56                   	push   esi
c0012456:	e8 9f 9c ff ff       	call   c000c0fa <Directory::open()>
c001245b:	83 c4 10             	add    esp,0x10
c001245e:	85 c0                	test   eax,eax
c0012460:	75 21                	jne    c0012483 <SysOpenDir(regs*)+0x6d>
c0012462:	83 ec 0c             	sub    esp,0xc
c0012465:	56                   	push   esi
c0012466:	e8 63 6d ff ff       	call   c00091ce <UnixFile::getFileDescriptor()>
c001246b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001246e:	83 c4 10             	add    esp,0x10
c0012471:	89 02                	mov    DWORD PTR [edx],eax
c0012473:	c1 f8 1f             	sar    eax,0x1f
c0012476:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012479:	83 c4 04             	add    esp,0x4
c001247c:	31 c0                	xor    eax,eax
c001247e:	5b                   	pop    ebx
c001247f:	31 d2                	xor    edx,edx
c0012481:	5e                   	pop    esi
c0012482:	c3                   	ret    
c0012483:	83 c4 04             	add    esp,0x4
c0012486:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001248b:	5b                   	pop    ebx
c001248c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012491:	5e                   	pop    esi
c0012492:	c3                   	ret    

c0012493 <SysMakeDir(regs*)>:
c0012493:	56                   	push   esi
c0012494:	53                   	push   ebx
c0012495:	83 ec 10             	sub    esp,0x10
c0012498:	68 14 01 00 00       	push   0x114
c001249d:	e8 61 56 ff ff       	call   c0007b03 <malloc>
c00124a2:	83 c4 0c             	add    esp,0xc
c00124a5:	89 c3                	mov    ebx,eax
c00124a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00124ac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00124af:	50                   	push   eax
c00124b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124b4:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00124b7:	52                   	push   edx
c00124b8:	53                   	push   ebx
c00124b9:	e8 74 9b ff ff       	call   c000c032 <Directory::Directory(char const*, Process*)>
c00124be:	83 c4 10             	add    esp,0x10
c00124c1:	85 db                	test   ebx,ebx
c00124c3:	74 2c                	je     c00124f1 <SysMakeDir(regs*)+0x5e>
c00124c5:	83 ec 0c             	sub    esp,0xc
c00124c8:	53                   	push   ebx
c00124c9:	e8 0c 9e ff ff       	call   c000c2da <Directory::create()>
c00124ce:	89 c6                	mov    esi,eax
c00124d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00124d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00124d8:	83 c4 10             	add    esp,0x10
c00124db:	31 c0                	xor    eax,eax
c00124dd:	85 f6                	test   esi,esi
c00124df:	0f 95 c0             	setne  al
c00124e2:	31 d2                	xor    edx,edx
c00124e4:	f7 d8                	neg    eax
c00124e6:	83 d2 00             	adc    edx,0x0
c00124e9:	83 c4 04             	add    esp,0x4
c00124ec:	5b                   	pop    ebx
c00124ed:	f7 da                	neg    edx
c00124ef:	5e                   	pop    esi
c00124f0:	c3                   	ret    
c00124f1:	83 c4 04             	add    esp,0x4
c00124f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124f9:	5b                   	pop    ebx
c00124fa:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124ff:	5e                   	pop    esi
c0012500:	c3                   	ret    

c0012501 <SysCloseDir(regs*)>:
c0012501:	53                   	push   ebx
c0012502:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012507:	83 ec 08             	sub    esp,0x8
c001250a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001250e:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0012511:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012516:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0012519:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c001251f:	77 2a                	ja     c001254b <SysCloseDir(regs*)+0x4a>
c0012521:	83 ec 0c             	sub    esp,0xc
c0012524:	51                   	push   ecx
c0012525:	e8 a1 6f ff ff       	call   c00094cb <KeGetFileFromDescriptor(int)>
c001252a:	89 04 24             	mov    DWORD PTR [esp],eax
c001252d:	89 c3                	mov    ebx,eax
c001252f:	e8 22 9c ff ff       	call   c000c156 <Directory::close()>
c0012534:	83 c4 10             	add    esp,0x10
c0012537:	85 db                	test   ebx,ebx
c0012539:	74 0c                	je     c0012547 <SysCloseDir(regs*)+0x46>
c001253b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001253d:	83 ec 0c             	sub    esp,0xc
c0012540:	53                   	push   ebx
c0012541:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012544:	83 c4 10             	add    esp,0x10
c0012547:	31 c0                	xor    eax,eax
c0012549:	31 d2                	xor    edx,edx
c001254b:	83 c4 08             	add    esp,0x8
c001254e:	5b                   	pop    ebx
c001254f:	c3                   	ret    

c0012550 <SysWait(regs*)>:
c0012550:	83 ec 10             	sub    esp,0x10
c0012553:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012557:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001255a:	52                   	push   edx
c001255b:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c001255e:	51                   	push   ecx
c001255f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012562:	50                   	push   eax
c0012563:	e8 54 3e 00 00       	call   c00163bc <waitTask(int, int*, int)>
c0012568:	83 c4 1c             	add    esp,0x1c
c001256b:	89 c2                	mov    edx,eax
c001256d:	c1 fa 1f             	sar    edx,0x1f
c0012570:	c3                   	ret    

c0012571 <SysNotImpl(regs*)>:
c0012571:	83 ec 18             	sub    esp,0x18
c0012574:	68 32 27 02 c0       	push   0xc0022732
c0012579:	e8 d9 f0 ff ff       	call   c0011657 <KePanic(char const*)>
c001257e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012583:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012588:	83 c4 1c             	add    esp,0x1c
c001258b:	c3                   	ret    

c001258c <SysPanic(regs*)>:
c001258c:	83 ec 18             	sub    esp,0x18
c001258f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012593:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0012596:	50                   	push   eax
c0012597:	e8 bb f0 ff ff       	call   c0011657 <KePanic(char const*)>
c001259c:	b8 01 00 00 00       	mov    eax,0x1
c00125a1:	31 d2                	xor    edx,edx
c00125a3:	83 c4 1c             	add    esp,0x1c
c00125a6:	c3                   	ret    

c00125a7 <SysRmdir(regs*)>:
c00125a7:	56                   	push   esi
c00125a8:	53                   	push   ebx
c00125a9:	83 ec 10             	sub    esp,0x10
c00125ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00125b0:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00125b3:	68 14 01 00 00       	push   0x114
c00125b8:	e8 46 55 ff ff       	call   c0007b03 <malloc>
c00125bd:	6a 00                	push   0x0
c00125bf:	89 c3                	mov    ebx,eax
c00125c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125c6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00125c9:	50                   	push   eax
c00125ca:	56                   	push   esi
c00125cb:	53                   	push   ebx
c00125cc:	e8 a3 94 ff ff       	call   c000ba74 <File::File(char const*, Process*, bool)>
c00125d1:	83 c4 14             	add    esp,0x14
c00125d4:	53                   	push   ebx
c00125d5:	e8 64 97 ff ff       	call   c000bd3e <File::unlink()>
c00125da:	83 c4 10             	add    esp,0x10
c00125dd:	85 db                	test   ebx,ebx
c00125df:	89 c6                	mov    esi,eax
c00125e1:	74 0c                	je     c00125ef <SysRmdir(regs*)+0x48>
c00125e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00125e5:	83 ec 0c             	sub    esp,0xc
c00125e8:	53                   	push   ebx
c00125e9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00125ec:	83 c4 10             	add    esp,0x10
c00125ef:	31 c0                	xor    eax,eax
c00125f1:	85 f6                	test   esi,esi
c00125f3:	0f 95 c0             	setne  al
c00125f6:	31 d2                	xor    edx,edx
c00125f8:	f7 d8                	neg    eax
c00125fa:	83 d2 00             	adc    edx,0x0
c00125fd:	83 c4 04             	add    esp,0x4
c0012600:	5b                   	pop    ebx
c0012601:	f7 da                	neg    edx
c0012603:	5e                   	pop    esi
c0012604:	c3                   	ret    

c0012605 <SysUnlink(regs*)>:
c0012605:	56                   	push   esi
c0012606:	53                   	push   ebx
c0012607:	83 ec 10             	sub    esp,0x10
c001260a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001260e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012611:	68 14 01 00 00       	push   0x114
c0012616:	e8 e8 54 ff ff       	call   c0007b03 <malloc>
c001261b:	6a 00                	push   0x0
c001261d:	89 c3                	mov    ebx,eax
c001261f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012624:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012627:	50                   	push   eax
c0012628:	56                   	push   esi
c0012629:	53                   	push   ebx
c001262a:	e8 45 94 ff ff       	call   c000ba74 <File::File(char const*, Process*, bool)>
c001262f:	83 c4 14             	add    esp,0x14
c0012632:	53                   	push   ebx
c0012633:	e8 06 97 ff ff       	call   c000bd3e <File::unlink()>
c0012638:	83 c4 10             	add    esp,0x10
c001263b:	85 db                	test   ebx,ebx
c001263d:	89 c6                	mov    esi,eax
c001263f:	74 0c                	je     c001264d <SysUnlink(regs*)+0x48>
c0012641:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012643:	83 ec 0c             	sub    esp,0xc
c0012646:	53                   	push   ebx
c0012647:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001264a:	83 c4 10             	add    esp,0x10
c001264d:	31 c0                	xor    eax,eax
c001264f:	85 f6                	test   esi,esi
c0012651:	0f 95 c0             	setne  al
c0012654:	31 d2                	xor    edx,edx
c0012656:	f7 d8                	neg    eax
c0012658:	83 d2 00             	adc    edx,0x0
c001265b:	83 c4 04             	add    esp,0x4
c001265e:	5b                   	pop    ebx
c001265f:	f7 da                	neg    edx
c0012661:	5e                   	pop    esi
c0012662:	c3                   	ret    

c0012663 <SysGetArgv(regs*)>:
c0012663:	83 ec 0c             	sub    esp,0xc
c0012666:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001266a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001266d:	85 c0                	test   eax,eax
c001266f:	78 2c                	js     c001269d <SysGetArgv(regs*)+0x3a>
c0012671:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012677:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001267a:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0012680:	7d 1b                	jge    c001269d <SysGetArgv(regs*)+0x3a>
c0012682:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0012689:	85 c0                	test   eax,eax
c001268b:	74 18                	je     c00126a5 <SysGetArgv(regs*)+0x42>
c001268d:	83 ec 08             	sub    esp,0x8
c0012690:	50                   	push   eax
c0012691:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0012694:	50                   	push   eax
c0012695:	e8 b6 df fe ff       	call   c0000650 <strcpy>
c001269a:	83 c4 10             	add    esp,0x10
c001269d:	31 c0                	xor    eax,eax
c001269f:	31 d2                	xor    edx,edx
c00126a1:	83 c4 0c             	add    esp,0xc
c00126a4:	c3                   	ret    
c00126a5:	b8 01 00 00 00       	mov    eax,0x1
c00126aa:	31 d2                	xor    edx,edx
c00126ac:	83 c4 0c             	add    esp,0xc
c00126af:	c3                   	ret    

c00126b0 <SysUSleep(regs*)>:
c00126b0:	83 ec 1c             	sub    esp,0x1c
c00126b3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00126b7:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00126ba:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00126bd:	6a 00                	push   0x0
c00126bf:	6a 64                	push   0x64
c00126c1:	52                   	push   edx
c00126c2:	50                   	push   eax
c00126c3:	e8 78 d1 00 00       	call   c001f840 <__udivdi3>
c00126c8:	83 c4 14             	add    esp,0x14
c00126cb:	50                   	push   eax
c00126cc:	e8 cf 3d 00 00       	call   c00164a0 <milliTenthSleep(unsigned int)>
c00126d1:	31 c0                	xor    eax,eax
c00126d3:	31 d2                	xor    edx,edx
c00126d5:	83 c4 1c             	add    esp,0x1c
c00126d8:	c3                   	ret    

c00126d9 <SysSpawn(regs*)>:
c00126d9:	56                   	push   esi
c00126da:	53                   	push   ebx
c00126db:	83 ec 04             	sub    esp,0x4
c00126de:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00126e2:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00126e5:	85 f6                	test   esi,esi
c00126e7:	75 0a                	jne    c00126f3 <SysSpawn(regs*)+0x1a>
c00126e9:	83 c4 04             	add    esp,0x4
c00126ec:	31 c0                	xor    eax,eax
c00126ee:	5b                   	pop    ebx
c00126ef:	31 d2                	xor    edx,edx
c00126f1:	5e                   	pop    esi
c00126f2:	c3                   	ret    
c00126f3:	83 ec 0c             	sub    esp,0xc
c00126f6:	68 24 07 00 00       	push   0x724
c00126fb:	e8 03 54 ff ff       	call   c0007b03 <malloc>
c0012700:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012703:	83 c4 10             	add    esp,0x10
c0012706:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012709:	89 c6                	mov    esi,eax
c001270b:	31 c0                	xor    eax,eax
c001270d:	85 c9                	test   ecx,ecx
c001270f:	75 08                	jne    c0012719 <SysSpawn(regs*)+0x40>
c0012711:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012716:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012719:	52                   	push   edx
c001271a:	50                   	push   eax
c001271b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001271e:	50                   	push   eax
c001271f:	56                   	push   esi
c0012720:	e8 e3 33 00 00       	call   c0015b08 <Process::Process(char const*, Process*, char**)>
c0012725:	83 c4 10             	add    esp,0x10
c0012728:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001272f:	75 b8                	jne    c00126e9 <SysSpawn(regs*)+0x10>
c0012731:	83 ec 0c             	sub    esp,0xc
c0012734:	56                   	push   esi
c0012735:	e8 06 39 00 00       	call   c0016040 <Process::createUserThread()>
c001273a:	8b 06                	mov    eax,DWORD PTR [esi]
c001273c:	83 c4 10             	add    esp,0x10
c001273f:	83 c4 04             	add    esp,0x4
c0012742:	5b                   	pop    ebx
c0012743:	89 c2                	mov    edx,eax
c0012745:	c1 fa 1f             	sar    edx,0x1f
c0012748:	5e                   	pop    esi
c0012749:	c3                   	ret    

c001274a <SysGetEnv(regs*)>:
c001274a:	57                   	push   edi
c001274b:	56                   	push   esi
c001274c:	53                   	push   ebx
c001274d:	83 ec 1c             	sub    esp,0x1c
c0012750:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012755:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012759:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001275c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001275f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012762:	51                   	push   ecx
c0012763:	e8 a7 ed ff ff       	call   c001150f <KeGetProcessTotalEnvCount(Process*)>
c0012768:	83 c4 10             	add    esp,0x10
c001276b:	39 c7                	cmp    edi,eax
c001276d:	7c 12                	jl     c0012781 <SysGetEnv(regs*)+0x37>
c001276f:	31 c0                	xor    eax,eax
c0012771:	31 d2                	xor    edx,edx
c0012773:	85 f6                	test   esi,esi
c0012775:	74 03                	je     c001277a <SysGetEnv(regs*)+0x30>
c0012777:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001277a:	83 c4 10             	add    esp,0x10
c001277d:	5b                   	pop    ebx
c001277e:	5e                   	pop    esi
c001277f:	5f                   	pop    edi
c0012780:	c3                   	ret    
c0012781:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012785:	83 ec 04             	sub    esp,0x4
c0012788:	57                   	push   edi
c0012789:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001278f:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0012792:	57                   	push   edi
c0012793:	50                   	push   eax
c0012794:	e8 96 ed ff ff       	call   c001152f <KeGetProcessEnvPair(Process*, int)>
c0012799:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001279c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00127a0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00127a4:	83 c4 0c             	add    esp,0xc
c00127a7:	85 d2                	test   edx,edx
c00127a9:	75 23                	jne    c00127ce <SysGetEnv(regs*)+0x84>
c00127ab:	83 ec 0c             	sub    esp,0xc
c00127ae:	50                   	push   eax
c00127af:	e8 cc dd fe ff       	call   c0000580 <strlen>
c00127b4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00127b7:	89 c3                	mov    ebx,eax
c00127b9:	e8 c2 dd fe ff       	call   c0000580 <strlen>
c00127be:	83 c4 10             	add    esp,0x10
c00127c1:	31 d2                	xor    edx,edx
c00127c3:	83 c4 10             	add    esp,0x10
c00127c6:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00127ca:	5b                   	pop    ebx
c00127cb:	5e                   	pop    esi
c00127cc:	5f                   	pop    edi
c00127cd:	c3                   	ret    
c00127ce:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00127d1:	83 ec 08             	sub    esp,0x8
c00127d4:	50                   	push   eax
c00127d5:	56                   	push   esi
c00127d6:	e8 75 de fe ff       	call   c0000650 <strcpy>
c00127db:	58                   	pop    eax
c00127dc:	5a                   	pop    edx
c00127dd:	68 4c 27 02 c0       	push   0xc002274c
c00127e2:	56                   	push   esi
c00127e3:	e8 88 e0 fe ff       	call   c0000870 <strcat>
c00127e8:	59                   	pop    ecx
c00127e9:	5b                   	pop    ebx
c00127ea:	57                   	push   edi
c00127eb:	56                   	push   esi
c00127ec:	e8 7f e0 fe ff       	call   c0000870 <strcat>
c00127f1:	83 c4 10             	add    esp,0x10
c00127f4:	31 c0                	xor    eax,eax
c00127f6:	83 c4 10             	add    esp,0x10
c00127f9:	31 d2                	xor    edx,edx
c00127fb:	5b                   	pop    ebx
c00127fc:	5e                   	pop    esi
c00127fd:	5f                   	pop    edi
c00127fe:	c3                   	ret    

c00127ff <SysSetFatAttrib(regs*)>:
c00127ff:	57                   	push   edi
c0012800:	56                   	push   esi
c0012801:	53                   	push   ebx
c0012802:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012806:	83 ec 0c             	sub    esp,0xc
c0012809:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001280c:	68 14 01 00 00       	push   0x114
c0012811:	e8 ed 52 ff ff       	call   c0007b03 <malloc>
c0012816:	83 c4 0c             	add    esp,0xc
c0012819:	89 c3                	mov    ebx,eax
c001281b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012820:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012823:	50                   	push   eax
c0012824:	57                   	push   edi
c0012825:	53                   	push   ebx
c0012826:	e8 27 93 ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c001282b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001282e:	83 c4 0c             	add    esp,0xc
c0012831:	0f b6 d4             	movzx  edx,ah
c0012834:	0f b6 c0             	movzx  eax,al
c0012837:	52                   	push   edx
c0012838:	50                   	push   eax
c0012839:	53                   	push   ebx
c001283a:	e8 99 95 ff ff       	call   c000bdd8 <File::chfatattr(unsigned char, unsigned char)>
c001283f:	83 c4 10             	add    esp,0x10
c0012842:	85 db                	test   ebx,ebx
c0012844:	89 c6                	mov    esi,eax
c0012846:	74 0c                	je     c0012854 <SysSetFatAttrib(regs*)+0x55>
c0012848:	8b 03                	mov    eax,DWORD PTR [ebx]
c001284a:	83 ec 0c             	sub    esp,0xc
c001284d:	53                   	push   ebx
c001284e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012851:	83 c4 10             	add    esp,0x10
c0012854:	5b                   	pop    ebx
c0012855:	31 c0                	xor    eax,eax
c0012857:	85 f6                	test   esi,esi
c0012859:	0f 95 c0             	setne  al
c001285c:	31 d2                	xor    edx,edx
c001285e:	5e                   	pop    esi
c001285f:	f7 d8                	neg    eax
c0012861:	83 d2 00             	adc    edx,0x0
c0012864:	f7 da                	neg    edx
c0012866:	5f                   	pop    edi
c0012867:	c3                   	ret    

c0012868 <SysPipe(regs*)>:
c0012868:	57                   	push   edi
c0012869:	56                   	push   esi
c001286a:	53                   	push   ebx
c001286b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001286f:	83 ec 0c             	sub    esp,0xc
c0012872:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0012875:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0012878:	6a 20                	push   0x20
c001287a:	e8 84 52 ff ff       	call   c0007b03 <malloc>
c001287f:	89 c3                	mov    ebx,eax
c0012881:	58                   	pop    eax
c0012882:	5a                   	pop    edx
c0012883:	68 00 50 00 00       	push   0x5000
c0012888:	53                   	push   ebx
c0012889:	e8 e0 5b ff ff       	call   c000846e <Pipe::Pipe(int)>
c001288e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012891:	e8 38 69 ff ff       	call   c00091ce <UnixFile::getFileDescriptor()>
c0012896:	89 07                	mov    DWORD PTR [edi],eax
c0012898:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001289b:	e8 2e 69 ff ff       	call   c00091ce <UnixFile::getFileDescriptor()>
c00128a0:	83 c4 10             	add    esp,0x10
c00128a3:	31 d2                	xor    edx,edx
c00128a5:	89 06                	mov    DWORD PTR [esi],eax
c00128a7:	31 c0                	xor    eax,eax
c00128a9:	5b                   	pop    ebx
c00128aa:	5e                   	pop    esi
c00128ab:	5f                   	pop    edi
c00128ac:	c3                   	ret    

c00128ad <SysGetUnixTime(regs*)>:
c00128ad:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00128b2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00128b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128bc:	e9 5d 9c ff ff       	jmp    c000c51e <Clock::timeInSecondsLocal()>

c00128c1 <string_ends_with(char const*, char const*)>:
c00128c1:	57                   	push   edi
c00128c2:	56                   	push   esi
c00128c3:	53                   	push   ebx
c00128c4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00128c8:	83 ec 0c             	sub    esp,0xc
c00128cb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00128cf:	53                   	push   ebx
c00128d0:	e8 ab dc fe ff       	call   c0000580 <strlen>
c00128d5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00128d8:	89 c6                	mov    esi,eax
c00128da:	e8 a1 dc fe ff       	call   c0000580 <strlen>
c00128df:	83 c4 10             	add    esp,0x10
c00128e2:	31 d2                	xor    edx,edx
c00128e4:	39 c6                	cmp    esi,eax
c00128e6:	7d 06                	jge    c00128ee <string_ends_with(char const*, char const*)+0x2d>
c00128e8:	5b                   	pop    ebx
c00128e9:	89 d0                	mov    eax,edx
c00128eb:	5e                   	pop    esi
c00128ec:	5f                   	pop    edi
c00128ed:	c3                   	ret    
c00128ee:	83 ec 08             	sub    esp,0x8
c00128f1:	29 c6                	sub    esi,eax
c00128f3:	57                   	push   edi
c00128f4:	01 f3                	add    ebx,esi
c00128f6:	53                   	push   ebx
c00128f7:	e8 84 de fe ff       	call   c0000780 <strcmp>
c00128fc:	83 c4 10             	add    esp,0x10
c00128ff:	31 d2                	xor    edx,edx
c0012901:	5b                   	pop    ebx
c0012902:	5e                   	pop    esi
c0012903:	85 c0                	test   eax,eax
c0012905:	5f                   	pop    edi
c0012906:	0f 94 c2             	sete   dl
c0012909:	89 d0                	mov    eax,edx
c001290b:	c3                   	ret    

c001290c <SysOpen(regs*)>:
c001290c:	56                   	push   esi
c001290d:	53                   	push   ebx
c001290e:	81 ec 04 01 00 00    	sub    esp,0x104
c0012914:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001291b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001291e:	85 c0                	test   eax,eax
c0012920:	0f 84 c4 01 00 00    	je     c0012aea <SysOpen(regs*)+0x1de>
c0012926:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012929:	85 c0                	test   eax,eax
c001292b:	0f 84 b9 01 00 00    	je     c0012aea <SysOpen(regs*)+0x1de>
c0012931:	6a 00                	push   0x0
c0012933:	68 4e 27 02 c0       	push   0xc002274e
c0012938:	50                   	push   eax
c0012939:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001293d:	56                   	push   esi
c001293e:	e8 03 8f ff ff       	call   c000b846 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012943:	89 34 24             	mov    DWORD PTR [esp],esi
c0012946:	e8 35 dc fe ff       	call   c0000580 <strlen>
c001294b:	83 c4 10             	add    esp,0x10
c001294e:	83 e8 01             	sub    eax,0x1
c0012951:	74 29                	je     c001297c <SysOpen(regs*)+0x70>
c0012953:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0012957:	83 fa 2e             	cmp    edx,0x2e
c001295a:	74 1c                	je     c0012978 <SysOpen(regs*)+0x6c>
c001295c:	83 fa 3a             	cmp    edx,0x3a
c001295f:	74 17                	je     c0012978 <SysOpen(regs*)+0x6c>
c0012961:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0012965:	83 e8 01             	sub    eax,0x1
c0012968:	74 12                	je     c001297c <SysOpen(regs*)+0x70>
c001296a:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c001296e:	83 fa 3a             	cmp    edx,0x3a
c0012971:	74 05                	je     c0012978 <SysOpen(regs*)+0x6c>
c0012973:	83 fa 2e             	cmp    edx,0x2e
c0012976:	75 e9                	jne    c0012961 <SysOpen(regs*)+0x55>
c0012978:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001297c:	83 ec 08             	sub    esp,0x8
c001297f:	68 52 27 02 c0       	push   0xc0022752
c0012984:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012987:	50                   	push   eax
c0012988:	e8 34 ff ff ff       	call   c00128c1 <string_ends_with(char const*, char const*)>
c001298d:	83 c4 10             	add    esp,0x10
c0012990:	85 c0                	test   eax,eax
c0012992:	74 1d                	je     c00129b1 <SysOpen(regs*)+0xa5>
c0012994:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012997:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001299d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00129a4:	81 c4 04 01 00 00    	add    esp,0x104
c00129aa:	31 c0                	xor    eax,eax
c00129ac:	5b                   	pop    ebx
c00129ad:	31 d2                	xor    edx,edx
c00129af:	5e                   	pop    esi
c00129b0:	c3                   	ret    
c00129b1:	83 ec 08             	sub    esp,0x8
c00129b4:	68 57 27 02 c0       	push   0xc0022757
c00129b9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129bc:	50                   	push   eax
c00129bd:	e8 ff fe ff ff       	call   c00128c1 <string_ends_with(char const*, char const*)>
c00129c2:	83 c4 10             	add    esp,0x10
c00129c5:	85 c0                	test   eax,eax
c00129c7:	75 cb                	jne    c0012994 <SysOpen(regs*)+0x88>
c00129c9:	83 ec 08             	sub    esp,0x8
c00129cc:	68 53 27 02 c0       	push   0xc0022753
c00129d1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00129d4:	50                   	push   eax
c00129d5:	e8 a6 dd fe ff       	call   c0000780 <strcmp>
c00129da:	83 c4 10             	add    esp,0x10
c00129dd:	85 c0                	test   eax,eax
c00129df:	74 b3                	je     c0012994 <SysOpen(regs*)+0x88>
c00129e1:	83 ec 08             	sub    esp,0x8
c00129e4:	68 52 27 02 c0       	push   0xc0022752
c00129e9:	56                   	push   esi
c00129ea:	e8 d2 fe ff ff       	call   c00128c1 <string_ends_with(char const*, char const*)>
c00129ef:	83 c4 10             	add    esp,0x10
c00129f2:	85 c0                	test   eax,eax
c00129f4:	75 9e                	jne    c0012994 <SysOpen(regs*)+0x88>
c00129f6:	83 ec 08             	sub    esp,0x8
c00129f9:	68 5c 27 02 c0       	push   0xc002275c
c00129fe:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a01:	50                   	push   eax
c0012a02:	e8 ba fe ff ff       	call   c00128c1 <string_ends_with(char const*, char const*)>
c0012a07:	83 c4 10             	add    esp,0x10
c0012a0a:	85 c0                	test   eax,eax
c0012a0c:	0f 85 eb 00 00 00    	jne    c0012afd <SysOpen(regs*)+0x1f1>
c0012a12:	83 ec 08             	sub    esp,0x8
c0012a15:	68 61 27 02 c0       	push   0xc0022761
c0012a1a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012a1d:	50                   	push   eax
c0012a1e:	e8 9e fe ff ff       	call   c00128c1 <string_ends_with(char const*, char const*)>
c0012a23:	83 c4 10             	add    esp,0x10
c0012a26:	85 c0                	test   eax,eax
c0012a28:	0f 85 cf 00 00 00    	jne    c0012afd <SysOpen(regs*)+0x1f1>
c0012a2e:	83 ec 08             	sub    esp,0x8
c0012a31:	68 5d 27 02 c0       	push   0xc002275d
c0012a36:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012a39:	51                   	push   ecx
c0012a3a:	e8 41 dd fe ff       	call   c0000780 <strcmp>
c0012a3f:	83 c4 10             	add    esp,0x10
c0012a42:	85 c0                	test   eax,eax
c0012a44:	0f 84 b3 00 00 00    	je     c0012afd <SysOpen(regs*)+0x1f1>
c0012a4a:	83 ec 08             	sub    esp,0x8
c0012a4d:	68 5c 27 02 c0       	push   0xc002275c
c0012a52:	56                   	push   esi
c0012a53:	e8 69 fe ff ff       	call   c00128c1 <string_ends_with(char const*, char const*)>
c0012a58:	83 c4 10             	add    esp,0x10
c0012a5b:	85 c0                	test   eax,eax
c0012a5d:	0f 85 9a 00 00 00    	jne    c0012afd <SysOpen(regs*)+0x1f1>
c0012a63:	83 ec 0c             	sub    esp,0xc
c0012a66:	68 14 01 00 00       	push   0x114
c0012a6b:	e8 93 50 ff ff       	call   c0007b03 <malloc>
c0012a70:	83 c4 0c             	add    esp,0xc
c0012a73:	89 c6                	mov    esi,eax
c0012a75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012a7a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012a7d:	50                   	push   eax
c0012a7e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012a81:	52                   	push   edx
c0012a82:	56                   	push   esi
c0012a83:	e8 ca 90 ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c0012a88:	83 c4 10             	add    esp,0x10
c0012a8b:	85 f6                	test   esi,esi
c0012a8d:	74 5b                	je     c0012aea <SysOpen(regs*)+0x1de>
c0012a8f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012a92:	0f b6 c2             	movzx  eax,dl
c0012a95:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012a98:	89 d0                	mov    eax,edx
c0012a9a:	83 e0 01             	and    eax,0x1
c0012a9d:	f6 c2 02             	test   dl,0x2
c0012aa0:	74 03                	je     c0012aa5 <SysOpen(regs*)+0x199>
c0012aa2:	83 c8 02             	or     eax,0x2
c0012aa5:	f6 c2 04             	test   dl,0x4
c0012aa8:	74 03                	je     c0012aad <SysOpen(regs*)+0x1a1>
c0012aaa:	83 c8 04             	or     eax,0x4
c0012aad:	f6 c2 08             	test   dl,0x8
c0012ab0:	74 03                	je     c0012ab5 <SysOpen(regs*)+0x1a9>
c0012ab2:	83 c8 0a             	or     eax,0xa
c0012ab5:	80 e2 10             	and    dl,0x10
c0012ab8:	74 03                	je     c0012abd <SysOpen(regs*)+0x1b1>
c0012aba:	83 c8 12             	or     eax,0x12
c0012abd:	83 ec 08             	sub    esp,0x8
c0012ac0:	50                   	push   eax
c0012ac1:	56                   	push   esi
c0012ac2:	e8 a9 90 ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c0012ac7:	83 c4 10             	add    esp,0x10
c0012aca:	85 c0                	test   eax,eax
c0012acc:	75 1c                	jne    c0012aea <SysOpen(regs*)+0x1de>
c0012ace:	83 ec 0c             	sub    esp,0xc
c0012ad1:	56                   	push   esi
c0012ad2:	e8 f7 66 ff ff       	call   c00091ce <UnixFile::getFileDescriptor()>
c0012ad7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012ada:	83 c4 10             	add    esp,0x10
c0012add:	89 02                	mov    DWORD PTR [edx],eax
c0012adf:	c1 f8 1f             	sar    eax,0x1f
c0012ae2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012ae5:	e9 ba fe ff ff       	jmp    c00129a4 <SysOpen(regs*)+0x98>
c0012aea:	81 c4 04 01 00 00    	add    esp,0x104
c0012af0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012af5:	5b                   	pop    ebx
c0012af6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012afb:	5e                   	pop    esi
c0012afc:	c3                   	ret    
c0012afd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012b00:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012b06:	e9 92 fe ff ff       	jmp    c001299d <SysOpen(regs*)+0x91>

c0012b0b <KeSystemCall(regs*, void*)>:
c0012b0b:	53                   	push   ebx
c0012b0c:	83 ec 08             	sub    esp,0x8
c0012b0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012b13:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012b16:	83 f8 3e             	cmp    eax,0x3e
c0012b19:	77 16                	ja     c0012b31 <KeSystemCall(regs*, void*)+0x26>
c0012b1b:	8b 14 85 80 3f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc080]
c0012b22:	85 d2                	test   edx,edx
c0012b24:	74 0b                	je     c0012b31 <KeSystemCall(regs*, void*)+0x26>
c0012b26:	83 ec 0c             	sub    esp,0xc
c0012b29:	53                   	push   ebx
c0012b2a:	ff d2                	call   edx
c0012b2c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012b2f:	eb 0d                	jmp    c0012b3e <KeSystemCall(regs*, void*)+0x33>
c0012b31:	52                   	push   edx
c0012b32:	52                   	push   edx
c0012b33:	50                   	push   eax
c0012b34:	68 66 27 02 c0       	push   0xc0022766
c0012b39:	e8 fc 7d ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0012b3e:	83 c4 10             	add    esp,0x10
c0012b41:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012b46:	83 c4 08             	add    esp,0x8
c0012b49:	31 d2                	xor    edx,edx
c0012b4b:	5b                   	pop    ebx
c0012b4c:	c3                   	ret    
c0012b4d:	66 90                	xchg   ax,ax
c0012b4f:	90                   	nop

c0012b50 <KeSwitchEndian16(unsigned short)>:
c0012b50:	83 ec 04             	sub    esp,0x4
c0012b53:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012b5b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012b5f:	c1 f8 08             	sar    eax,0x8
c0012b62:	89 c2                	mov    edx,eax
c0012b64:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012b68:	c1 e0 08             	shl    eax,0x8
c0012b6b:	09 d0                	or     eax,edx
c0012b6d:	83 c4 04             	add    esp,0x4
c0012b70:	c3                   	ret    
c0012b71:	8d 76 00             	lea    esi,[esi+0x0]

c0012b74 <KeSwitchEndian32(unsigned int)>:
c0012b74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b78:	c1 e8 18             	shr    eax,0x18
c0012b7b:	89 c2                	mov    edx,eax
c0012b7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b81:	c1 e0 08             	shl    eax,0x8
c0012b84:	25 00 00 ff 00       	and    eax,0xff0000
c0012b89:	09 c2                	or     edx,eax
c0012b8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b8f:	c1 e8 08             	shr    eax,0x8
c0012b92:	25 00 ff 00 00       	and    eax,0xff00
c0012b97:	09 c2                	or     edx,eax
c0012b99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b9d:	c1 e0 18             	shl    eax,0x18
c0012ba0:	09 d0                	or     eax,edx
c0012ba2:	c3                   	ret    
c0012ba3:	90                   	nop

c0012ba4 <EthernetCRC32(unsigned char*, int)>:
c0012ba4:	83 ec 10             	sub    esp,0x10
c0012ba7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012bac:	75 0a                	jne    c0012bb8 <EthernetCRC32(unsigned char*, int)+0x14>
c0012bae:	b8 00 00 00 00       	mov    eax,0x0
c0012bb3:	e9 8c 00 00 00       	jmp    c0012c44 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012bb8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012bbd:	7f 09                	jg     c0012bc8 <EthernetCRC32(unsigned char*, int)+0x24>
c0012bbf:	b8 00 00 00 00       	mov    eax,0x0
c0012bc4:	eb 7e                	jmp    c0012c44 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012bc6:	66 90                	xchg   ax,ax
c0012bc8:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012bd0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012bd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012bdc:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012be0:	7d 5a                	jge    c0012c3c <EthernetCRC32(unsigned char*, int)+0x98>
c0012be2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012be6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012bea:	01 d0                	add    eax,edx
c0012bec:	8a 00                	mov    al,BYTE PTR [eax]
c0012bee:	0f b6 c0             	movzx  eax,al
c0012bf1:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012bf5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012bfd:	8d 76 00             	lea    esi,[esi+0x0]
c0012c00:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012c05:	7f 2d                	jg     c0012c34 <EthernetCRC32(unsigned char*, int)+0x90>
c0012c07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c0b:	83 e0 01             	and    eax,0x1
c0012c0e:	74 10                	je     c0012c20 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012c10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c14:	d1 e8                	shr    eax,1
c0012c16:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012c1b:	eb 0b                	jmp    c0012c28 <EthernetCRC32(unsigned char*, int)+0x84>
c0012c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0012c20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c24:	d1 e8                	shr    eax,1
c0012c26:	66 90                	xchg   ax,ax
c0012c28:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012c2c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012c31:	eb cd                	jmp    c0012c00 <EthernetCRC32(unsigned char*, int)+0x5c>
c0012c33:	90                   	nop
c0012c34:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012c39:	eb 9d                	jmp    c0012bd8 <EthernetCRC32(unsigned char*, int)+0x34>
c0012c3b:	90                   	nop
c0012c3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c40:	f7 d0                	not    eax
c0012c42:	66 90                	xchg   ax,ax
c0012c44:	83 c4 10             	add    esp,0x10
c0012c47:	c3                   	ret    

c0012c48 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012c48:	83 ec 2c             	sub    esp,0x2c
c0012c4b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012c4f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012c54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c58:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c60:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c63:	0f b7 c0             	movzx  eax,ax
c0012c66:	3d 06 08 00 00       	cmp    eax,0x806
c0012c6b:	75 13                	jne    c0012c80 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012c6d:	83 ec 0c             	sub    esp,0xc
c0012c70:	68 7a 27 02 c0       	push   0xc002277a
c0012c75:	e8 c0 7c ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0012c7a:	83 c4 10             	add    esp,0x10
c0012c7d:	eb 25                	jmp    c0012ca4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012c7f:	90                   	nop
c0012c80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c84:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c87:	0f b7 c0             	movzx  eax,ax
c0012c8a:	3d 00 08 00 00       	cmp    eax,0x800
c0012c8f:	75 13                	jne    c0012ca4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012c91:	83 ec 0c             	sub    esp,0xc
c0012c94:	68 90 27 02 c0       	push   0xc0022790
c0012c99:	e8 9c 7c ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0012c9e:	83 c4 10             	add    esp,0x10
c0012ca1:	8d 76 00             	lea    esi,[esi+0x0]
c0012ca4:	90                   	nop
c0012ca5:	83 c4 2c             	add    esp,0x2c
c0012ca8:	c3                   	ret    

c0012ca9 <CmOpen(char const*)>:
c0012ca9:	57                   	push   edi
c0012caa:	56                   	push   esi
c0012cab:	53                   	push   ebx
c0012cac:	83 ec 1c             	sub    esp,0x1c
c0012caf:	6a 30                	push   0x30
c0012cb1:	e8 4d 4e ff ff       	call   c0007b03 <malloc>
c0012cb6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012cbd:	89 c3                	mov    ebx,eax
c0012cbf:	e8 3f 4e ff ff       	call   c0007b03 <malloc>
c0012cc4:	83 c4 0c             	add    esp,0xc
c0012cc7:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0012ccd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012cd1:	89 c6                	mov    esi,eax
c0012cd3:	50                   	push   eax
c0012cd4:	e8 79 8e ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c0012cd9:	83 c4 0c             	add    esp,0xc
c0012cdc:	89 33                	mov    DWORD PTR [ebx],esi
c0012cde:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012ce2:	50                   	push   eax
c0012ce3:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012ce7:	50                   	push   eax
c0012ce8:	56                   	push   esi
c0012ce9:	e8 84 91 ff ff       	call   c000be72 <File::stat(unsigned long long*, bool*)>
c0012cee:	5a                   	pop    edx
c0012cef:	59                   	pop    ecx
c0012cf0:	6a 01                	push   0x1
c0012cf2:	ff 33                	push   DWORD PTR [ebx]
c0012cf4:	e8 77 8e ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c0012cf9:	5e                   	pop    esi
c0012cfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012cfe:	e8 00 4e ff ff       	call   c0007b03 <malloc>
c0012d03:	5a                   	pop    edx
c0012d04:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012d08:	89 c7                	mov    edi,eax
c0012d0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d0c:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d0e:	56                   	push   esi
c0012d0f:	57                   	push   edi
c0012d10:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d14:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d18:	50                   	push   eax
c0012d19:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012d1c:	83 c4 14             	add    esp,0x14
c0012d1f:	ff 33                	push   DWORD PTR [ebx]
c0012d21:	e8 a8 8e ff ff       	call   c000bbce <File::close()>
c0012d26:	59                   	pop    ecx
c0012d27:	58                   	pop    eax
c0012d28:	6a 13                	push   0x13
c0012d2a:	ff 33                	push   DWORD PTR [ebx]
c0012d2c:	e8 3f 8e ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c0012d31:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d33:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d35:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d38:	57                   	push   edi
c0012d39:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d3d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d41:	50                   	push   eax
c0012d42:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012d45:	83 c4 14             	add    esp,0x14
c0012d48:	57                   	push   edi
c0012d49:	e8 c5 4d ff ff       	call   c0007b13 <free>
c0012d4e:	83 c4 10             	add    esp,0x10
c0012d51:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012d54:	75 10                	jne    c0012d66 <CmOpen(char const*)+0xbd>
c0012d56:	83 ec 0c             	sub    esp,0xc
c0012d59:	68 a5 27 02 c0       	push   0xc00227a5
c0012d5e:	e8 f4 e8 ff ff       	call   c0011657 <KePanic(char const*)>
c0012d63:	83 c4 10             	add    esp,0x10
c0012d66:	50                   	push   eax
c0012d67:	6a 00                	push   0x0
c0012d69:	6a 00                	push   0x0
c0012d6b:	ff 33                	push   DWORD PTR [ebx]
c0012d6d:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012d70:	e8 b9 8e ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0012d75:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d77:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d79:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d7c:	57                   	push   edi
c0012d7d:	6a 00                	push   0x0
c0012d7f:	6a 2b                	push   0x2b
c0012d81:	50                   	push   eax
c0012d82:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012d85:	83 c4 1c             	add    esp,0x1c
c0012d88:	6a 00                	push   0x0
c0012d8a:	6a 00                	push   0x0
c0012d8c:	ff 33                	push   DWORD PTR [ebx]
c0012d8e:	e8 9b 8e ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0012d93:	83 c4 0c             	add    esp,0xc
c0012d96:	6a 08                	push   0x8
c0012d98:	68 b6 27 02 c0       	push   0xc00227b6
c0012d9d:	57                   	push   edi
c0012d9e:	e8 dd d5 fe ff       	call   c0000380 <memcmp>
c0012da3:	83 c4 10             	add    esp,0x10
c0012da6:	85 c0                	test   eax,eax
c0012da8:	74 10                	je     c0012dba <CmOpen(char const*)+0x111>
c0012daa:	83 ec 0c             	sub    esp,0xc
c0012dad:	68 bf 27 02 c0       	push   0xc00227bf
c0012db2:	e8 a0 e8 ff ff       	call   c0011657 <KePanic(char const*)>
c0012db7:	83 c4 10             	add    esp,0x10
c0012dba:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012dbe:	83 c4 10             	add    esp,0x10
c0012dc1:	89 d8                	mov    eax,ebx
c0012dc3:	5b                   	pop    ebx
c0012dc4:	5e                   	pop    esi
c0012dc5:	5f                   	pop    edi
c0012dc6:	c3                   	ret    

c0012dc7 <CmClose(Reghive_Tag*)>:
c0012dc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012dcb:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012dcf:	74 0b                	je     c0012ddc <CmClose(Reghive_Tag*)+0x15>
c0012dd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0012dd3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012dd7:	e9 f2 8d ff ff       	jmp    c000bbce <File::close()>
c0012ddc:	c3                   	ret    

c0012ddd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012ddd:	53                   	push   ebx
c0012dde:	83 ec 18             	sub    esp,0x18
c0012de1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012de5:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012de9:	74 29                	je     c0012e14 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012deb:	50                   	push   eax
c0012dec:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012df1:	99                   	cdq    
c0012df2:	52                   	push   edx
c0012df3:	50                   	push   eax
c0012df4:	ff 33                	push   DWORD PTR [ebx]
c0012df6:	e8 33 8e ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0012dfb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012dfd:	5a                   	pop    edx
c0012dfe:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012e02:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e04:	51                   	push   ecx
c0012e05:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012e09:	6a 00                	push   0x0
c0012e0b:	6a 2b                	push   0x2b
c0012e0d:	50                   	push   eax
c0012e0e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012e11:	83 c4 20             	add    esp,0x20
c0012e14:	83 c4 18             	add    esp,0x18
c0012e17:	5b                   	pop    ebx
c0012e18:	c3                   	ret    

c0012e19 <CmGetString(Reghive_Tag*, int, char*)>:
c0012e19:	55                   	push   ebp
c0012e1a:	57                   	push   edi
c0012e1b:	56                   	push   esi
c0012e1c:	53                   	push   ebx
c0012e1d:	31 db                	xor    ebx,ebx
c0012e1f:	83 ec 70             	sub    esp,0x70
c0012e22:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012e26:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012e2d:	50                   	push   eax
c0012e2e:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012e35:	55                   	push   ebp
c0012e36:	e8 a2 ff ff ff       	call   c0012ddd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e3b:	83 c4 10             	add    esp,0x10
c0012e3e:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012e43:	c1 e0 08             	shl    eax,0x8
c0012e46:	89 c2                	mov    edx,eax
c0012e48:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012e4d:	09 d0                	or     eax,edx
c0012e4f:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012e54:	c1 e0 08             	shl    eax,0x8
c0012e57:	09 d0                	or     eax,edx
c0012e59:	74 25                	je     c0012e80 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012e5b:	52                   	push   edx
c0012e5c:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012e60:	52                   	push   edx
c0012e61:	6b fb 0d             	imul   edi,ebx,0xd
c0012e64:	50                   	push   eax
c0012e65:	55                   	push   ebp
c0012e66:	e8 72 ff ff ff       	call   c0012ddd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e6b:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012e6f:	b9 27 00 00 00       	mov    ecx,0x27
c0012e74:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012e7b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e7d:	83 c4 10             	add    esp,0x10
c0012e80:	83 c3 03             	add    ebx,0x3
c0012e83:	83 fb 15             	cmp    ebx,0x15
c0012e86:	75 b6                	jne    c0012e3e <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012e88:	83 c4 6c             	add    esp,0x6c
c0012e8b:	5b                   	pop    ebx
c0012e8c:	5e                   	pop    esi
c0012e8d:	5f                   	pop    edi
c0012e8e:	5d                   	pop    ebp
c0012e8f:	c3                   	ret    

c0012e90 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012e90:	83 ec 40             	sub    esp,0x40
c0012e93:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e97:	50                   	push   eax
c0012e98:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e9c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ea0:	e8 38 ff ff ff       	call   c0012ddd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ea5:	83 c4 10             	add    esp,0x10
c0012ea8:	83 c8 ff             	or     eax,0xffffffff
c0012eab:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012eb0:	75 19                	jne    c0012ecb <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012eb2:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012eb7:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012ebc:	c1 e0 08             	shl    eax,0x8
c0012ebf:	09 c2                	or     edx,eax
c0012ec1:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012ec6:	c1 e0 10             	shl    eax,0x10
c0012ec9:	09 d0                	or     eax,edx
c0012ecb:	83 c4 3c             	add    esp,0x3c
c0012ece:	c3                   	ret    

c0012ecf <CmGetNext(Reghive_Tag*, int)>:
c0012ecf:	83 ec 40             	sub    esp,0x40
c0012ed2:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012ed6:	50                   	push   eax
c0012ed7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012edb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012edf:	e8 f9 fe ff ff       	call   c0012ddd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ee4:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012ee9:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012eee:	c1 e0 08             	shl    eax,0x8
c0012ef1:	09 c2                	or     edx,eax
c0012ef3:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012ef8:	83 c4 4c             	add    esp,0x4c
c0012efb:	c1 e0 10             	shl    eax,0x10
c0012efe:	09 d0                	or     eax,edx
c0012f00:	c3                   	ret    

c0012f01 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012f01:	53                   	push   ebx
c0012f02:	83 ec 18             	sub    esp,0x18
c0012f05:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012f09:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012f0d:	74 29                	je     c0012f38 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012f0f:	50                   	push   eax
c0012f10:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012f15:	99                   	cdq    
c0012f16:	52                   	push   edx
c0012f17:	50                   	push   eax
c0012f18:	ff 33                	push   DWORD PTR [ebx]
c0012f1a:	e8 0f 8d ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0012f1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f21:	5a                   	pop    edx
c0012f22:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012f26:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f28:	51                   	push   ecx
c0012f29:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012f2d:	6a 00                	push   0x0
c0012f2f:	6a 2b                	push   0x2b
c0012f31:	50                   	push   eax
c0012f32:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012f35:	83 c4 20             	add    esp,0x20
c0012f38:	83 c4 18             	add    esp,0x18
c0012f3b:	5b                   	pop    ebx
c0012f3c:	c3                   	ret    

c0012f3d <CmFreeExtent(Reghive_Tag*, int)>:
c0012f3d:	53                   	push   ebx
c0012f3e:	83 ec 3c             	sub    esp,0x3c
c0012f41:	6a 2b                	push   0x2b
c0012f43:	6a 00                	push   0x0
c0012f45:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012f49:	53                   	push   ebx
c0012f4a:	e8 a1 d5 fe ff       	call   c00004f0 <memset>
c0012f4f:	83 c4 0c             	add    esp,0xc
c0012f52:	53                   	push   ebx
c0012f53:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f57:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f5b:	e8 a1 ff ff ff       	call   c0012f01 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f60:	83 c4 48             	add    esp,0x48
c0012f63:	5b                   	pop    ebx
c0012f64:	c3                   	ret    

c0012f65 <CmUpdateHeader(Reghive_Tag*)>:
c0012f65:	83 ec 0c             	sub    esp,0xc
c0012f68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f6c:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012f70:	74 10                	je     c0012f82 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012f72:	52                   	push   edx
c0012f73:	8d 50 05             	lea    edx,[eax+0x5]
c0012f76:	52                   	push   edx
c0012f77:	6a 00                	push   0x0
c0012f79:	50                   	push   eax
c0012f7a:	e8 82 ff ff ff       	call   c0012f01 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f7f:	83 c4 10             	add    esp,0x10
c0012f82:	83 c4 0c             	add    esp,0xc
c0012f85:	c3                   	ret    

c0012f86 <CmExpand(Reghive_Tag*, int)>:
c0012f86:	55                   	push   ebp
c0012f87:	57                   	push   edi
c0012f88:	83 cf ff             	or     edi,0xffffffff
c0012f8b:	56                   	push   esi
c0012f8c:	53                   	push   ebx
c0012f8d:	83 ec 3c             	sub    esp,0x3c
c0012f90:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012f94:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012f98:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012f9c:	74 59                	je     c0012ff7 <CmExpand(Reghive_Tag*, int)+0x71>
c0012f9e:	50                   	push   eax
c0012f9f:	31 d2                	xor    edx,edx
c0012fa1:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012fa5:	31 ff                	xor    edi,edi
c0012fa7:	52                   	push   edx
c0012fa8:	50                   	push   eax
c0012fa9:	ff 33                	push   DWORD PTR [ebx]
c0012fab:	e8 7e 8c ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0012fb0:	83 c4 0c             	add    esp,0xc
c0012fb3:	6a 2b                	push   0x2b
c0012fb5:	6a 00                	push   0x0
c0012fb7:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0012fbb:	55                   	push   ebp
c0012fbc:	e8 2f d5 fe ff       	call   c00004f0 <memset>
c0012fc1:	83 c4 10             	add    esp,0x10
c0012fc4:	39 f7                	cmp    edi,esi
c0012fc6:	7d 1b                	jge    c0012fe3 <CmExpand(Reghive_Tag*, int)+0x5d>
c0012fc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fca:	83 ec 0c             	sub    esp,0xc
c0012fcd:	47                   	inc    edi
c0012fce:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012fd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0012fd4:	51                   	push   ecx
c0012fd5:	55                   	push   ebp
c0012fd6:	6a 00                	push   0x0
c0012fd8:	6a 2b                	push   0x2b
c0012fda:	50                   	push   eax
c0012fdb:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012fde:	83 c4 20             	add    esp,0x20
c0012fe1:	eb e1                	jmp    c0012fc4 <CmExpand(Reghive_Tag*, int)+0x3e>
c0012fe3:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0012fe6:	83 ec 0c             	sub    esp,0xc
c0012fe9:	01 fe                	add    esi,edi
c0012feb:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0012fee:	53                   	push   ebx
c0012fef:	e8 71 ff ff ff       	call   c0012f65 <CmUpdateHeader(Reghive_Tag*)>
c0012ff4:	83 c4 10             	add    esp,0x10
c0012ff7:	83 c4 3c             	add    esp,0x3c
c0012ffa:	89 f8                	mov    eax,edi
c0012ffc:	5b                   	pop    ebx
c0012ffd:	5e                   	pop    esi
c0012ffe:	5f                   	pop    edi
c0012fff:	5d                   	pop    ebp
c0013000:	c3                   	ret    

c0013001 <CmFindUnusedExtent(Reghive_Tag*)>:
c0013001:	55                   	push   ebp
c0013002:	57                   	push   edi
c0013003:	56                   	push   esi
c0013004:	53                   	push   ebx
c0013005:	83 cb ff             	or     ebx,0xffffffff
c0013008:	83 ec 1c             	sub    esp,0x1c
c001300b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001300f:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0013013:	74 68                	je     c001307d <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0013015:	51                   	push   ecx
c0013016:	be 2b 00 00 00       	mov    esi,0x2b
c001301b:	6a 00                	push   0x0
c001301d:	31 ff                	xor    edi,edi
c001301f:	6a 00                	push   0x0
c0013021:	31 db                	xor    ebx,ebx
c0013023:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0013026:	e8 03 8c ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c001302b:	83 c4 10             	add    esp,0x10
c001302e:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0013031:	76 3b                	jbe    c001306e <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0013033:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013036:	83 ec 0c             	sub    esp,0xc
c0013039:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001303d:	8b 10                	mov    edx,DWORD PTR [eax]
c001303f:	51                   	push   ecx
c0013040:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0013044:	51                   	push   ecx
c0013045:	6a 00                	push   0x0
c0013047:	6a 01                	push   0x1
c0013049:	50                   	push   eax
c001304a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001304d:	83 c4 20             	add    esp,0x20
c0013050:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0013055:	74 26                	je     c001307d <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0013057:	52                   	push   edx
c0013058:	43                   	inc    ebx
c0013059:	57                   	push   edi
c001305a:	56                   	push   esi
c001305b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c001305e:	e8 cb 8b ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0013063:	83 c6 2b             	add    esi,0x2b
c0013066:	83 d7 00             	adc    edi,0x0
c0013069:	83 c4 10             	add    esp,0x10
c001306c:	eb c0                	jmp    c001302e <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c001306e:	50                   	push   eax
c001306f:	50                   	push   eax
c0013070:	6a 40                	push   0x40
c0013072:	55                   	push   ebp
c0013073:	e8 0e ff ff ff       	call   c0012f86 <CmExpand(Reghive_Tag*, int)>
c0013078:	83 c4 10             	add    esp,0x10
c001307b:	89 c3                	mov    ebx,eax
c001307d:	83 c4 1c             	add    esp,0x1c
c0013080:	89 d8                	mov    eax,ebx
c0013082:	5b                   	pop    ebx
c0013083:	5e                   	pop    esi
c0013084:	5f                   	pop    edi
c0013085:	5d                   	pop    ebp
c0013086:	c3                   	ret    

c0013087 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0013087:	55                   	push   ebp
c0013088:	57                   	push   edi
c0013089:	56                   	push   esi
c001308a:	53                   	push   ebx
c001308b:	81 ec 88 00 00 00    	sub    esp,0x88
c0013091:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0013098:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001309f:	e8 5d ff ff ff       	call   c0013001 <CmFindUnusedExtent(Reghive_Tag*)>
c00130a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00130a8:	83 c4 0c             	add    esp,0xc
c00130ab:	6a 2b                	push   0x2b
c00130ad:	6a 00                	push   0x0
c00130af:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00130b3:	55                   	push   ebp
c00130b4:	e8 37 d4 fe ff       	call   c00004f0 <memset>
c00130b9:	83 c4 10             	add    esp,0x10
c00130bc:	85 db                	test   ebx,ebx
c00130be:	74 12                	je     c00130d2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00130c0:	51                   	push   ecx
c00130c1:	55                   	push   ebp
c00130c2:	53                   	push   ebx
c00130c3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00130ca:	e8 0e fd ff ff       	call   c0012ddd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00130cf:	83 c4 10             	add    esp,0x10
c00130d2:	8d 7c 24 45          	lea    edi,[esp+0x45]
c00130d6:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00130dd:	b9 2b 00 00 00       	mov    ecx,0x2b
c00130e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00130e4:	85 db                	test   ebx,ebx
c00130e6:	74 49                	je     c0013131 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c00130e8:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00130ed:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c00130f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00130f6:	c1 e0 08             	shl    eax,0x8
c00130f9:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00130ff:	09 c8                	or     eax,ecx
c0013101:	74 11                	je     c0013114 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0013103:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0013107:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c001310b:	c1 e8 10             	shr    eax,0x10
c001310e:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0013112:	eb 0f                	jmp    c0013123 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0013114:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0013119:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001311e:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0013123:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0013127:	c1 ea 08             	shr    edx,0x8
c001312a:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c001312f:	eb 0f                	jmp    c0013140 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0013131:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0013136:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001313b:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0013140:	52                   	push   edx
c0013141:	8d 44 24 49          	lea    eax,[esp+0x49]
c0013145:	50                   	push   eax
c0013146:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001314a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013151:	e8 ab fd ff ff       	call   c0012f01 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013156:	83 c4 10             	add    esp,0x10
c0013159:	85 db                	test   ebx,ebx
c001315b:	74 12                	je     c001316f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c001315d:	50                   	push   eax
c001315e:	55                   	push   ebp
c001315f:	53                   	push   ebx
c0013160:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013167:	e8 95 fd ff ff       	call   c0012f01 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001316c:	83 c4 10             	add    esp,0x10
c001316f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013173:	83 c4 7c             	add    esp,0x7c
c0013176:	5b                   	pop    ebx
c0013177:	5e                   	pop    esi
c0013178:	5f                   	pop    edi
c0013179:	5d                   	pop    ebp
c001317a:	c3                   	ret    

c001317b <CmSetString(Reghive_Tag*, int, char const*)>:
c001317b:	55                   	push   ebp
c001317c:	57                   	push   edi
c001317d:	56                   	push   esi
c001317e:	53                   	push   ebx
c001317f:	bb 27 00 00 00       	mov    ebx,0x27
c0013184:	81 ec 88 00 00 00    	sub    esp,0x88
c001318a:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0013191:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0013198:	e8 e3 d3 fe ff       	call   c0000580 <strlen>
c001319d:	8d 48 26             	lea    ecx,[eax+0x26]
c00131a0:	89 c8                	mov    eax,ecx
c00131a2:	99                   	cdq    
c00131a3:	f7 fb                	idiv   ebx
c00131a5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00131a9:	83 c4 10             	add    esp,0x10
c00131ac:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00131b2:	7e 10                	jle    c00131c4 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00131b4:	83 ec 0c             	sub    esp,0xc
c00131b7:	68 d0 27 02 c0       	push   0xc00227d0
c00131bc:	e8 96 e4 ff ff       	call   c0011657 <KePanic(char const*)>
c00131c1:	83 c4 10             	add    esp,0x10
c00131c4:	53                   	push   ebx
c00131c5:	31 ed                	xor    ebp,ebp
c00131c7:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00131cb:	53                   	push   ebx
c00131cc:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00131d3:	57                   	push   edi
c00131d4:	e8 04 fc ff ff       	call   c0012ddd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00131d9:	83 c4 10             	add    esp,0x10
c00131dc:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c00131e0:	89 f0                	mov    eax,esi
c00131e2:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c00131e6:	c1 e0 08             	shl    eax,0x8
c00131e9:	09 c6                	or     esi,eax
c00131eb:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00131ef:	c1 e6 08             	shl    esi,0x8
c00131f2:	09 c6                	or     esi,eax
c00131f4:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c00131f8:	7e 72                	jle    c001326c <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c00131fa:	85 f6                	test   esi,esi
c00131fc:	75 25                	jne    c0013223 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c00131fe:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0013203:	8d 44 24 45          	lea    eax,[esp+0x45]
c0013207:	50                   	push   eax
c0013208:	6a 00                	push   0x0
c001320a:	6a 00                	push   0x0
c001320c:	57                   	push   edi
c001320d:	e8 75 fe ff ff       	call   c0013087 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013212:	83 c4 10             	add    esp,0x10
c0013215:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0013218:	89 c6                	mov    esi,eax
c001321a:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c001321d:	c1 f8 10             	sar    eax,0x10
c0013220:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0013223:	51                   	push   ecx
c0013224:	8d 54 24 49          	lea    edx,[esp+0x49]
c0013228:	52                   	push   edx
c0013229:	56                   	push   esi
c001322a:	57                   	push   edi
c001322b:	e8 ad fb ff ff       	call   c0012ddd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013230:	83 c4 0c             	add    esp,0xc
c0013233:	6a 27                	push   0x27
c0013235:	6a 00                	push   0x0
c0013237:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c001323b:	51                   	push   ecx
c001323c:	e8 af d2 fe ff       	call   c00004f0 <memset>
c0013241:	6b c5 27             	imul   eax,ebp,0x27
c0013244:	83 c4 0c             	add    esp,0xc
c0013247:	6a 27                	push   0x27
c0013249:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0013250:	50                   	push   eax
c0013251:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0013255:	51                   	push   ecx
c0013256:	e8 35 d4 fe ff       	call   c0000690 <strncpy>
c001325b:	83 c4 0c             	add    esp,0xc
c001325e:	8d 54 24 49          	lea    edx,[esp+0x49]
c0013262:	52                   	push   edx
c0013263:	56                   	push   esi
c0013264:	57                   	push   edi
c0013265:	e8 97 fc ff ff       	call   c0012f01 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001326a:	eb 19                	jmp    c0013285 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c001326c:	85 f6                	test   esi,esi
c001326e:	74 18                	je     c0013288 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0013270:	52                   	push   edx
c0013271:	52                   	push   edx
c0013272:	56                   	push   esi
c0013273:	57                   	push   edi
c0013274:	e8 c4 fc ff ff       	call   c0012f3d <CmFreeExtent(Reghive_Tag*, int)>
c0013279:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c001327d:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0013281:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0013285:	83 c4 10             	add    esp,0x10
c0013288:	45                   	inc    ebp
c0013289:	83 c3 03             	add    ebx,0x3
c001328c:	83 fd 07             	cmp    ebp,0x7
c001328f:	0f 85 47 ff ff ff    	jne    c00131dc <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0013295:	50                   	push   eax
c0013296:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c001329a:	50                   	push   eax
c001329b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00132a2:	57                   	push   edi
c00132a3:	e8 59 fc ff ff       	call   c0012f01 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00132a8:	81 c4 8c 00 00 00    	add    esp,0x8c
c00132ae:	5b                   	pop    ebx
c00132af:	5e                   	pop    esi
c00132b0:	5f                   	pop    edi
c00132b1:	5d                   	pop    ebp
c00132b2:	c3                   	ret    

c00132b3 <CmGetMatch(char*, char*, bool, bool*)>:
c00132b3:	56                   	push   esi
c00132b4:	53                   	push   ebx
c00132b5:	50                   	push   eax
c00132b6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00132bb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00132bf:	74 25                	je     c00132e6 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00132c1:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00132c4:	31 db                	xor    ebx,ebx
c00132c6:	50                   	push   eax
c00132c7:	50                   	push   eax
c00132c8:	8d 04 9d 80 40 02 c0 	lea    eax,[ebx*4-0x3ffdbf80]
c00132cf:	50                   	push   eax
c00132d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132d4:	e8 a7 d4 fe ff       	call   c0000780 <strcmp>
c00132d9:	83 c4 10             	add    esp,0x10
c00132dc:	85 c0                	test   eax,eax
c00132de:	74 2e                	je     c001330e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00132e0:	43                   	inc    ebx
c00132e1:	83 fb 3f             	cmp    ebx,0x3f
c00132e4:	75 e0                	jne    c00132c6 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c00132e6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00132e9:	31 db                	xor    ebx,ebx
c00132eb:	51                   	push   ecx
c00132ec:	51                   	push   ecx
c00132ed:	8d 04 9d 80 40 02 c0 	lea    eax,[ebx*4-0x3ffdbf80]
c00132f4:	50                   	push   eax
c00132f5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00132f9:	e8 82 d4 fe ff       	call   c0000780 <strcmp>
c00132fe:	83 c4 10             	add    esp,0x10
c0013301:	85 c0                	test   eax,eax
c0013303:	74 09                	je     c001330e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0013305:	43                   	inc    ebx
c0013306:	83 fb 3f             	cmp    ebx,0x3f
c0013309:	75 e0                	jne    c00132eb <CmGetMatch(char*, char*, bool, bool*)+0x38>
c001330b:	83 cb ff             	or     ebx,0xffffffff
c001330e:	5a                   	pop    edx
c001330f:	89 d8                	mov    eax,ebx
c0013311:	5b                   	pop    ebx
c0013312:	5e                   	pop    esi
c0013313:	c3                   	ret    

c0013314 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0013314:	55                   	push   ebp
c0013315:	31 c0                	xor    eax,eax
c0013317:	57                   	push   edi
c0013318:	56                   	push   esi
c0013319:	53                   	push   ebx
c001331a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001331e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013322:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0013326:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001332a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001332c:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c001332f:	83 fd 1f             	cmp    ebp,0x1f
c0013332:	7f 0b                	jg     c001333f <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0013334:	0f b6 c2             	movzx  eax,dl
c0013337:	d3 e0                	shl    eax,cl
c0013339:	09 07                	or     DWORD PTR [edi],eax
c001333b:	b0 01                	mov    al,0x1
c001333d:	01 33                	add    DWORD PTR [ebx],esi
c001333f:	5b                   	pop    ebx
c0013340:	5e                   	pop    esi
c0013341:	5f                   	pop    edi
c0013342:	5d                   	pop    ebp
c0013343:	c3                   	ret    

c0013344 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0013344:	57                   	push   edi
c0013345:	56                   	push   esi
c0013346:	53                   	push   ebx
c0013347:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001334b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001334f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0013353:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013357:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0013359:	7c 17                	jl     c0013372 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c001335b:	8b 17                	mov    edx,DWORD PTR [edi]
c001335d:	b8 01 00 00 00       	mov    eax,0x1
c0013362:	d3 e0                	shl    eax,cl
c0013364:	48                   	dec    eax
c0013365:	21 d0                	and    eax,edx
c0013367:	d3 ea                	shr    edx,cl
c0013369:	89 17                	mov    DWORD PTR [edi],edx
c001336b:	29 0b                	sub    DWORD PTR [ebx],ecx
c001336d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013370:	eb 05                	jmp    c0013377 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0013372:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013375:	31 c0                	xor    eax,eax
c0013377:	5b                   	pop    ebx
c0013378:	5e                   	pop    esi
c0013379:	5f                   	pop    edi
c001337a:	c3                   	ret    

c001337b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c001337b:	83 ec 40             	sub    esp,0x40
c001337e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013382:	50                   	push   eax
c0013383:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013387:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001338b:	e8 4d fa ff ff       	call   c0012ddd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013390:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0013394:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0013398:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c001339c:	89 10                	mov    DWORD PTR [eax],edx
c001339e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00133a1:	83 c4 4c             	add    esp,0x4c
c00133a4:	c3                   	ret    

c00133a5 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00133a5:	55                   	push   ebp
c00133a6:	57                   	push   edi
c00133a7:	56                   	push   esi
c00133a8:	53                   	push   ebx
c00133a9:	83 ec 40             	sub    esp,0x40
c00133ac:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00133b0:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00133b4:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00133b8:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00133bc:	53                   	push   ebx
c00133bd:	56                   	push   esi
c00133be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00133c2:	e8 16 fa ff ff       	call   c0012ddd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00133c7:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00133cb:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00133cf:	83 c4 0c             	add    esp,0xc
c00133d2:	53                   	push   ebx
c00133d3:	56                   	push   esi
c00133d4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00133d8:	e8 24 fb ff ff       	call   c0012f01 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00133dd:	83 c4 4c             	add    esp,0x4c
c00133e0:	5b                   	pop    ebx
c00133e1:	5e                   	pop    esi
c00133e2:	5f                   	pop    edi
c00133e3:	5d                   	pop    ebp
c00133e4:	c3                   	ret    

c00133e5 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c00133e5:	55                   	push   ebp
c00133e6:	57                   	push   edi
c00133e7:	56                   	push   esi
c00133e8:	31 f6                	xor    esi,esi
c00133ea:	53                   	push   ebx
c00133eb:	31 db                	xor    ebx,ebx
c00133ed:	83 ec 40             	sub    esp,0x40
c00133f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00133f8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013400:	6a 12                	push   0x12
c0013402:	68 ee 00 00 00       	push   0xee
c0013407:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001340b:	e8 e0 d0 fe ff       	call   c00004f0 <memset>
c0013410:	83 c4 10             	add    esp,0x10
c0013413:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013417:	6a 08                	push   0x8
c0013419:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001341d:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0013421:	50                   	push   eax
c0013422:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013426:	55                   	push   ebp
c0013427:	57                   	push   edi
c0013428:	e8 e7 fe ff ff       	call   c0013314 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001342d:	83 c4 10             	add    esp,0x10
c0013430:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013434:	50                   	push   eax
c0013435:	6a 06                	push   0x6
c0013437:	55                   	push   ebp
c0013438:	57                   	push   edi
c0013439:	e8 06 ff ff ff       	call   c0013344 <CmGetShift(unsigned int*, int*, int, bool*)>
c001343e:	83 c4 10             	add    esp,0x10
c0013441:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013446:	74 07                	je     c001344f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0013448:	46                   	inc    esi
c0013449:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c001344d:	eb e1                	jmp    c0013430 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c001344f:	43                   	inc    ebx
c0013450:	83 fb 12             	cmp    ebx,0x12
c0013453:	75 c2                	jne    c0013417 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0013455:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0013459:	31 f6                	xor    esi,esi
c001345b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001345e:	50                   	push   eax
c001345f:	50                   	push   eax
c0013460:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0013465:	46                   	inc    esi
c0013466:	8d 04 85 80 40 02 c0 	lea    eax,[eax*4-0x3ffdbf80]
c001346d:	50                   	push   eax
c001346e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0013472:	e8 f9 d3 fe ff       	call   c0000870 <strcat>
c0013477:	83 c4 10             	add    esp,0x10
c001347a:	83 fe 18             	cmp    esi,0x18
c001347d:	75 df                	jne    c001345e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c001347f:	83 c4 3c             	add    esp,0x3c
c0013482:	31 c0                	xor    eax,eax
c0013484:	5b                   	pop    ebx
c0013485:	5e                   	pop    esi
c0013486:	5f                   	pop    edi
c0013487:	5d                   	pop    ebp
c0013488:	c3                   	ret    

c0013489 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0013489:	83 ec 40             	sub    esp,0x40
c001348c:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013490:	50                   	push   eax
c0013491:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013495:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013499:	e8 3f f9 ff ff       	call   c0012ddd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001349e:	58                   	pop    eax
c001349f:	5a                   	pop    edx
c00134a0:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00134a4:	8d 44 24 15          	lea    eax,[esp+0x15]
c00134a8:	50                   	push   eax
c00134a9:	e8 37 ff ff ff       	call   c00133e5 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00134ae:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00134b3:	83 c4 4c             	add    esp,0x4c
c00134b6:	c3                   	ret    

c00134b7 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00134b7:	55                   	push   ebp
c00134b8:	57                   	push   edi
c00134b9:	56                   	push   esi
c00134ba:	53                   	push   ebx
c00134bb:	31 db                	xor    ebx,ebx
c00134bd:	83 ec 70             	sub    esp,0x70
c00134c0:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00134c7:	6a 30                	push   0x30
c00134c9:	6a 00                	push   0x0
c00134cb:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00134cf:	56                   	push   esi
c00134d0:	e8 1b d0 fe ff       	call   c00004f0 <memset>
c00134d5:	83 c4 10             	add    esp,0x10
c00134d8:	83 ec 0c             	sub    esp,0xc
c00134db:	57                   	push   edi
c00134dc:	e8 9f d0 fe ff       	call   c0000580 <strlen>
c00134e1:	83 c4 10             	add    esp,0x10
c00134e4:	39 d8                	cmp    eax,ebx
c00134e6:	76 16                	jbe    c00134fe <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00134e8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00134ec:	83 ec 0c             	sub    esp,0xc
c00134ef:	50                   	push   eax
c00134f0:	e8 6b d4 fe ff       	call   c0000960 <toupper>
c00134f5:	83 c4 10             	add    esp,0x10
c00134f8:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00134fb:	43                   	inc    ebx
c00134fc:	eb da                	jmp    c00134d8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00134fe:	52                   	push   edx
c00134ff:	31 db                	xor    ebx,ebx
c0013501:	6a 18                	push   0x18
c0013503:	31 ff                	xor    edi,edi
c0013505:	6a 3f                	push   0x3f
c0013507:	8d 44 24 24          	lea    eax,[esp+0x24]
c001350b:	50                   	push   eax
c001350c:	e8 df cf fe ff       	call   c00004f0 <memset>
c0013511:	83 c4 10             	add    esp,0x10
c0013514:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0013518:	8d 74 24 10          	lea    esi,[esp+0x10]
c001351c:	84 c0                	test   al,al
c001351e:	0f 84 af 00 00 00    	je     c00135d3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0013524:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0013528:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001352b:	83 ec 0c             	sub    esp,0xc
c001352e:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c0013533:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0013537:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001353b:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c0013540:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0013544:	56                   	push   esi
c0013545:	e8 36 d0 fe ff       	call   c0000580 <strlen>
c001354a:	83 c4 10             	add    esp,0x10
c001354d:	85 c0                	test   eax,eax
c001354f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013553:	74 0b                	je     c0013560 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0013555:	50                   	push   eax
c0013556:	6a 01                	push   0x1
c0013558:	56                   	push   esi
c0013559:	8d 44 24 20          	lea    eax,[esp+0x20]
c001355d:	50                   	push   eax
c001355e:	eb 0a                	jmp    c001356a <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0013560:	50                   	push   eax
c0013561:	6a 00                	push   0x0
c0013563:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0013567:	50                   	push   eax
c0013568:	6a 00                	push   0x0
c001356a:	e8 44 fd ff ff       	call   c00132b3 <CmGetMatch(char*, char*, bool, bool*)>
c001356f:	83 c4 10             	add    esp,0x10
c0013572:	83 f8 ff             	cmp    eax,0xffffffff
c0013575:	75 1a                	jne    c0013591 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0013577:	83 ec 0c             	sub    esp,0xc
c001357a:	68 e5 27 02 c0       	push   0xc00227e5
c001357f:	e8 d3 e0 ff ff       	call   c0011657 <KePanic(char const*)>
c0013584:	83 c4 10             	add    esp,0x10
c0013587:	b8 02 00 00 00       	mov    eax,0x2
c001358c:	e9 bb 00 00 00       	jmp    c001364c <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013591:	83 ff 18             	cmp    edi,0x18
c0013594:	75 1a                	jne    c00135b0 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0013596:	83 ec 0c             	sub    esp,0xc
c0013599:	68 fa 27 02 c0       	push   0xc00227fa
c001359e:	e8 b4 e0 ff ff       	call   c0011657 <KePanic(char const*)>
c00135a3:	83 c4 10             	add    esp,0x10
c00135a6:	b8 01 00 00 00       	mov    eax,0x1
c00135ab:	e9 9c 00 00 00       	jmp    c001364c <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00135b0:	47                   	inc    edi
c00135b1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00135b6:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00135ba:	0f 45 dd             	cmovne ebx,ebp
c00135bd:	83 ec 0c             	sub    esp,0xc
c00135c0:	56                   	push   esi
c00135c1:	e8 ba cf fe ff       	call   c0000580 <strlen>
c00135c6:	83 c4 10             	add    esp,0x10
c00135c9:	85 c0                	test   eax,eax
c00135cb:	74 06                	je     c00135d3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00135cd:	43                   	inc    ebx
c00135ce:	e9 41 ff ff ff       	jmp    c0013514 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00135d3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00135db:	31 db                	xor    ebx,ebx
c00135dd:	31 ff                	xor    edi,edi
c00135df:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00135e7:	50                   	push   eax
c00135e8:	6a 12                	push   0x12
c00135ea:	68 ee 00 00 00       	push   0xee
c00135ef:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00135f6:	e8 f5 ce fe ff       	call   c00004f0 <memset>
c00135fb:	83 c4 10             	add    esp,0x10
c00135fe:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0013602:	83 fb 17             	cmp    ebx,0x17
c0013605:	7e 26                	jle    c001362d <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c0013607:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001360b:	50                   	push   eax
c001360c:	6a 08                	push   0x8
c001360e:	55                   	push   ebp
c001360f:	56                   	push   esi
c0013610:	e8 2f fd ff ff       	call   c0013344 <CmGetShift(unsigned int*, int*, int, bool*)>
c0013615:	83 c4 10             	add    esp,0x10
c0013618:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001361d:	74 26                	je     c0013645 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c001361f:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0013626:	4b                   	dec    ebx
c0013627:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c001362a:	47                   	inc    edi
c001362b:	eb 1c                	jmp    c0013649 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c001362d:	6a 06                	push   0x6
c001362f:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0013634:	50                   	push   eax
c0013635:	55                   	push   ebp
c0013636:	56                   	push   esi
c0013637:	e8 d8 fc ff ff       	call   c0013314 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001363c:	83 c4 10             	add    esp,0x10
c001363f:	84 c0                	test   al,al
c0013641:	75 06                	jne    c0013649 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0013643:	eb c2                	jmp    c0013607 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0013645:	31 c0                	xor    eax,eax
c0013647:	eb 03                	jmp    c001364c <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013649:	43                   	inc    ebx
c001364a:	eb b2                	jmp    c00135fe <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c001364c:	83 c4 6c             	add    esp,0x6c
c001364f:	5b                   	pop    ebx
c0013650:	5e                   	pop    esi
c0013651:	5f                   	pop    edi
c0013652:	5d                   	pop    ebp
c0013653:	c3                   	ret    

c0013654 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0013654:	53                   	push   ebx
c0013655:	83 ec 3c             	sub    esp,0x3c
c0013658:	6a 2b                	push   0x2b
c001365a:	6a 00                	push   0x0
c001365c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013660:	53                   	push   ebx
c0013661:	e8 8a ce fe ff       	call   c00004f0 <memset>
c0013666:	58                   	pop    eax
c0013667:	5a                   	pop    edx
c0013668:	8d 44 24 11          	lea    eax,[esp+0x11]
c001366c:	50                   	push   eax
c001366d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013671:	e8 41 fe ff ff       	call   c00134b7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013676:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c001367b:	83 c4 0c             	add    esp,0xc
c001367e:	6a 15                	push   0x15
c0013680:	6a 00                	push   0x0
c0013682:	8d 44 24 27          	lea    eax,[esp+0x27]
c0013686:	50                   	push   eax
c0013687:	e8 64 ce fe ff       	call   c00004f0 <memset>
c001368c:	53                   	push   ebx
c001368d:	6a 00                	push   0x0
c001368f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013693:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013697:	e8 eb f9 ff ff       	call   c0013087 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001369c:	83 c4 58             	add    esp,0x58
c001369f:	5b                   	pop    ebx
c00136a0:	c3                   	ret    

c00136a1 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00136a1:	56                   	push   esi
c00136a2:	53                   	push   ebx
c00136a3:	83 ec 48             	sub    esp,0x48
c00136a6:	6a 12                	push   0x12
c00136a8:	68 ff 00 00 00       	push   0xff
c00136ad:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00136b1:	56                   	push   esi
c00136b2:	e8 39 ce fe ff       	call   c00004f0 <memset>
c00136b7:	5a                   	pop    edx
c00136b8:	59                   	pop    ecx
c00136b9:	56                   	push   esi
c00136ba:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00136be:	e8 f4 fd ff ff       	call   c00134b7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00136c3:	83 c4 10             	add    esp,0x10
c00136c6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00136ca:	85 db                	test   ebx,ebx
c00136cc:	74 42                	je     c0013710 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00136ce:	50                   	push   eax
c00136cf:	8d 44 24 19          	lea    eax,[esp+0x19]
c00136d3:	50                   	push   eax
c00136d4:	53                   	push   ebx
c00136d5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00136d9:	e8 ff f6 ff ff       	call   c0012ddd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00136de:	83 c4 0c             	add    esp,0xc
c00136e1:	6a 12                	push   0x12
c00136e3:	8d 44 24 21          	lea    eax,[esp+0x21]
c00136e7:	50                   	push   eax
c00136e8:	56                   	push   esi
c00136e9:	e8 92 cc fe ff       	call   c0000380 <memcmp>
c00136ee:	83 c4 10             	add    esp,0x10
c00136f1:	85 c0                	test   eax,eax
c00136f3:	74 1e                	je     c0013713 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00136f5:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00136fa:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00136ff:	c1 e3 08             	shl    ebx,0x8
c0013702:	09 d8                	or     eax,ebx
c0013704:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0013709:	c1 e3 10             	shl    ebx,0x10
c001370c:	09 c3                	or     ebx,eax
c001370e:	eb ba                	jmp    c00136ca <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0013710:	83 cb ff             	or     ebx,0xffffffff
c0013713:	83 c4 44             	add    esp,0x44
c0013716:	89 d8                	mov    eax,ebx
c0013718:	5b                   	pop    ebx
c0013719:	5e                   	pop    esi
c001371a:	c3                   	ret    

c001371b <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c001371b:	57                   	push   edi
c001371c:	56                   	push   esi
c001371d:	53                   	push   ebx
c001371e:	83 ec 34             	sub    esp,0x34
c0013721:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0013725:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0013729:	6a 2b                	push   0x2b
c001372b:	6a 00                	push   0x0
c001372d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013731:	53                   	push   ebx
c0013732:	e8 b9 cd fe ff       	call   c00004f0 <memset>
c0013737:	58                   	pop    eax
c0013738:	5a                   	pop    edx
c0013739:	8d 44 24 11          	lea    eax,[esp+0x11]
c001373d:	50                   	push   eax
c001373e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013742:	e8 70 fd ff ff       	call   c00134b7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013747:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c001374b:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c001374f:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0013753:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0013757:	53                   	push   ebx
c0013758:	6a 00                	push   0x0
c001375a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001375e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013762:	e8 20 f9 ff ff       	call   c0013087 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013767:	83 c4 50             	add    esp,0x50
c001376a:	5b                   	pop    ebx
c001376b:	5e                   	pop    esi
c001376c:	5f                   	pop    edi
c001376d:	c3                   	ret    

c001376e <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001376e:	55                   	push   ebp
c001376f:	57                   	push   edi
c0013770:	56                   	push   esi
c0013771:	53                   	push   ebx
c0013772:	83 ec 40             	sub    esp,0x40
c0013775:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0013779:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001377d:	6a 2b                	push   0x2b
c001377f:	6a 00                	push   0x0
c0013781:	8d 74 24 11          	lea    esi,[esp+0x11]
c0013785:	56                   	push   esi
c0013786:	e8 65 cd fe ff       	call   c00004f0 <memset>
c001378b:	5f                   	pop    edi
c001378c:	89 ef                	mov    edi,ebp
c001378e:	58                   	pop    eax
c001378f:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013793:	50                   	push   eax
c0013794:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013798:	e8 1a fd ff ff       	call   c00134b7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001379d:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00137a2:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00137a7:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00137ac:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00137b1:	83 c4 10             	add    esp,0x10
c00137b4:	85 ed                	test   ebp,ebp
c00137b6:	74 14                	je     c00137cc <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00137b8:	51                   	push   ecx
c00137b9:	51                   	push   ecx
c00137ba:	57                   	push   edi
c00137bb:	53                   	push   ebx
c00137bc:	e8 0e f7 ff ff       	call   c0012ecf <CmGetNext(Reghive_Tag*, int)>
c00137c1:	83 c4 10             	add    esp,0x10
c00137c4:	85 c0                	test   eax,eax
c00137c6:	74 04                	je     c00137cc <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00137c8:	89 c7                	mov    edi,eax
c00137ca:	eb e8                	jmp    c00137b4 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00137cc:	56                   	push   esi
c00137cd:	6a 00                	push   0x0
c00137cf:	57                   	push   edi
c00137d0:	53                   	push   ebx
c00137d1:	e8 b1 f8 ff ff       	call   c0013087 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00137d6:	83 c4 0c             	add    esp,0xc
c00137d9:	56                   	push   esi
c00137da:	50                   	push   eax
c00137db:	89 c7                	mov    edi,eax
c00137dd:	53                   	push   ebx
c00137de:	e8 fa f5 ff ff       	call   c0012ddd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00137e3:	58                   	pop    eax
c00137e4:	5a                   	pop    edx
c00137e5:	6a 6c                	push   0x6c
c00137e7:	6a 00                	push   0x0
c00137e9:	6a 00                	push   0x0
c00137eb:	68 0b 28 02 c0       	push   0xc002280b
c00137f0:	57                   	push   edi
c00137f1:	53                   	push   ebx
c00137f2:	e8 24 ff ff ff       	call   c001371b <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00137f7:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00137fb:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00137ff:	c1 e8 10             	shr    eax,0x10
c0013802:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0013806:	83 c4 1c             	add    esp,0x1c
c0013809:	56                   	push   esi
c001380a:	57                   	push   edi
c001380b:	53                   	push   ebx
c001380c:	e8 f0 f6 ff ff       	call   c0012f01 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013811:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0013816:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c001381b:	c1 e0 08             	shl    eax,0x8
c001381e:	09 c2                	or     edx,eax
c0013820:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0013825:	83 c4 4c             	add    esp,0x4c
c0013828:	5b                   	pop    ebx
c0013829:	5e                   	pop    esi
c001382a:	c1 e0 10             	shl    eax,0x10
c001382d:	09 d0                	or     eax,edx
c001382f:	5f                   	pop    edi
c0013830:	5d                   	pop    ebp
c0013831:	c3                   	ret    

c0013832 <zStrtok(char*, char const*)>:
c0013832:	55                   	push   ebp
c0013833:	57                   	push   edi
c0013834:	56                   	push   esi
c0013835:	53                   	push   ebx
c0013836:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001383a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001383e:	85 db                	test   ebx,ebx
c0013840:	74 2f                	je     c0013871 <zStrtok(char*, char const*)+0x3f>
c0013842:	85 c0                	test   eax,eax
c0013844:	75 09                	jne    c001384f <zStrtok(char*, char const*)+0x1d>
c0013846:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c001384b:	85 c0                	test   eax,eax
c001384d:	74 50                	je     c001389f <zStrtok(char*, char const*)+0x6d>
c001384f:	31 c9                	xor    ecx,ecx
c0013851:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0013855:	74 03                	je     c001385a <zStrtok(char*, char const*)+0x28>
c0013857:	41                   	inc    ecx
c0013858:	eb f7                	jmp    c0013851 <zStrtok(char*, char const*)+0x1f>
c001385a:	31 d2                	xor    edx,edx
c001385c:	39 ca                	cmp    edx,ecx
c001385e:	74 15                	je     c0013875 <zStrtok(char*, char const*)+0x43>
c0013860:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0013864:	8d 3c 10             	lea    edi,[eax+edx*1]
c0013867:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c001386a:	39 ee                	cmp    esi,ebp
c001386c:	74 13                	je     c0013881 <zStrtok(char*, char const*)+0x4f>
c001386e:	42                   	inc    edx
c001386f:	eb eb                	jmp    c001385c <zStrtok(char*, char const*)+0x2a>
c0013871:	31 c0                	xor    eax,eax
c0013873:	eb 2a                	jmp    c001389f <zStrtok(char*, char const*)+0x6d>
c0013875:	c7 05 f0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bef0,0x0
c001387f:	eb 1e                	jmp    c001389f <zStrtok(char*, char const*)+0x6d>
c0013881:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013884:	39 ce                	cmp    esi,ecx
c0013886:	75 0a                	jne    c0013892 <zStrtok(char*, char const*)+0x60>
c0013888:	40                   	inc    eax
c0013889:	a3 f0 be 02 c0       	mov    ds:0xc002bef0,eax
c001388e:	89 d8                	mov    eax,ebx
c0013890:	eb 0d                	jmp    c001389f <zStrtok(char*, char const*)+0x6d>
c0013892:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0013895:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0013899:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c001389f:	5b                   	pop    ebx
c00138a0:	5e                   	pop    esi
c00138a1:	5f                   	pop    edi
c00138a2:	5d                   	pop    ebp
c00138a3:	c3                   	ret    

c00138a4 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00138a4:	57                   	push   edi
c00138a5:	56                   	push   esi
c00138a6:	53                   	push   ebx
c00138a7:	81 ec 08 01 00 00    	sub    esp,0x108
c00138ad:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00138b4:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00138bb:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00138bf:	53                   	push   ebx
c00138c0:	e8 8b cd fe ff       	call   c0000650 <strcpy>
c00138c5:	59                   	pop    ecx
c00138c6:	5e                   	pop    esi
c00138c7:	68 6f 2b 02 c0       	push   0xc0022b6f
c00138cc:	53                   	push   ebx
c00138cd:	bb 01 00 00 00       	mov    ebx,0x1
c00138d2:	e8 5b ff ff ff       	call   c0013832 <zStrtok(char*, char const*)>
c00138d7:	83 c4 10             	add    esp,0x10
c00138da:	85 c0                	test   eax,eax
c00138dc:	74 3b                	je     c0013919 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00138de:	52                   	push   edx
c00138df:	50                   	push   eax
c00138e0:	6a 01                	push   0x1
c00138e2:	57                   	push   edi
c00138e3:	e8 b9 fd ff ff       	call   c00136a1 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00138e8:	59                   	pop    ecx
c00138e9:	5e                   	pop    esi
c00138ea:	89 c3                	mov    ebx,eax
c00138ec:	68 6f 2b 02 c0       	push   0xc0022b6f
c00138f1:	6a 00                	push   0x0
c00138f3:	e8 3a ff ff ff       	call   c0013832 <zStrtok(char*, char const*)>
c00138f8:	83 c4 10             	add    esp,0x10
c00138fb:	85 c0                	test   eax,eax
c00138fd:	89 c6                	mov    esi,eax
c00138ff:	74 18                	je     c0013919 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013901:	52                   	push   edx
c0013902:	52                   	push   edx
c0013903:	53                   	push   ebx
c0013904:	57                   	push   edi
c0013905:	e8 86 f5 ff ff       	call   c0012e90 <CmEnterDirectory(Reghive_Tag*, int)>
c001390a:	83 c4 10             	add    esp,0x10
c001390d:	83 f8 ff             	cmp    eax,0xffffffff
c0013910:	89 c3                	mov    ebx,eax
c0013912:	74 05                	je     c0013919 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013914:	50                   	push   eax
c0013915:	56                   	push   esi
c0013916:	53                   	push   ebx
c0013917:	eb c9                	jmp    c00138e2 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0013919:	81 c4 00 01 00 00    	add    esp,0x100
c001391f:	89 d8                	mov    eax,ebx
c0013921:	5b                   	pop    ebx
c0013922:	5e                   	pop    esi
c0013923:	5f                   	pop    edi
c0013924:	c3                   	ret    

c0013925 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0013925:	55                   	push   ebp
c0013926:	57                   	push   edi
c0013927:	56                   	push   esi
c0013928:	53                   	push   ebx
c0013929:	83 ec 5c             	sub    esp,0x5c
c001392c:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0013930:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0013934:	85 db                	test   ebx,ebx
c0013936:	0f 8e 84 00 00 00    	jle    c00139c0 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c001393c:	57                   	push   edi
c001393d:	31 ed                	xor    ebp,ebp
c001393f:	6a 32                	push   0x32
c0013941:	6a 00                	push   0x0
c0013943:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0013947:	57                   	push   edi
c0013948:	e8 a3 cb fe ff       	call   c00004f0 <memset>
c001394d:	83 c4 0c             	add    esp,0xc
c0013950:	57                   	push   edi
c0013951:	53                   	push   ebx
c0013952:	56                   	push   esi
c0013953:	e8 31 fb ff ff       	call   c0013489 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013958:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001395c:	83 c4 10             	add    esp,0x10
c001395f:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0013963:	7d 13                	jge    c0013978 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0013965:	83 ec 0c             	sub    esp,0xc
c0013968:	45                   	inc    ebp
c0013969:	68 13 2f 02 c0       	push   0xc0022f13
c001396e:	e8 c7 6f ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0013973:	83 c4 10             	add    esp,0x10
c0013976:	eb e7                	jmp    c001395f <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0013978:	51                   	push   ecx
c0013979:	57                   	push   edi
c001397a:	53                   	push   ebx
c001397b:	68 11 28 02 c0       	push   0xc0022811
c0013980:	e8 b5 6f ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0013985:	83 c4 10             	add    esp,0x10
c0013988:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c001398d:	75 1e                	jne    c00139ad <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c001398f:	52                   	push   edx
c0013990:	52                   	push   edx
c0013991:	53                   	push   ebx
c0013992:	56                   	push   esi
c0013993:	e8 f8 f4 ff ff       	call   c0012e90 <CmEnterDirectory(Reghive_Tag*, int)>
c0013998:	83 c4 0c             	add    esp,0xc
c001399b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c001399f:	8d 51 04             	lea    edx,[ecx+0x4]
c00139a2:	52                   	push   edx
c00139a3:	50                   	push   eax
c00139a4:	56                   	push   esi
c00139a5:	e8 7b ff ff ff       	call   c0013925 <CmDisplayTree(Reghive_Tag*, int, int)>
c00139aa:	83 c4 10             	add    esp,0x10
c00139ad:	50                   	push   eax
c00139ae:	50                   	push   eax
c00139af:	53                   	push   ebx
c00139b0:	56                   	push   esi
c00139b1:	e8 19 f5 ff ff       	call   c0012ecf <CmGetNext(Reghive_Tag*, int)>
c00139b6:	83 c4 10             	add    esp,0x10
c00139b9:	89 c3                	mov    ebx,eax
c00139bb:	e9 74 ff ff ff       	jmp    c0013934 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c00139c0:	83 c4 5c             	add    esp,0x5c
c00139c3:	5b                   	pop    ebx
c00139c4:	5e                   	pop    esi
c00139c5:	5f                   	pop    edi
c00139c6:	5d                   	pop    ebp
c00139c7:	c3                   	ret    

c00139c8 <CmSplitFinalSlashInPlace(char*)>:
c00139c8:	53                   	push   ebx
c00139c9:	83 ec 14             	sub    esp,0x14
c00139cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00139d0:	53                   	push   ebx
c00139d1:	e8 aa cb fe ff       	call   c0000580 <strlen>
c00139d6:	83 c4 10             	add    esp,0x10
c00139d9:	48                   	dec    eax
c00139da:	85 c0                	test   eax,eax
c00139dc:	74 15                	je     c00139f3 <CmSplitFinalSlashInPlace(char*)+0x2b>
c00139de:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00139e2:	8d 14 03             	lea    edx,[ebx+eax*1]
c00139e5:	75 09                	jne    c00139f0 <CmSplitFinalSlashInPlace(char*)+0x28>
c00139e7:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00139ea:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00139ee:	eb 05                	jmp    c00139f5 <CmSplitFinalSlashInPlace(char*)+0x2d>
c00139f0:	48                   	dec    eax
c00139f1:	eb e7                	jmp    c00139da <CmSplitFinalSlashInPlace(char*)+0x12>
c00139f3:	31 c0                	xor    eax,eax
c00139f5:	83 c4 08             	add    esp,0x8
c00139f8:	5b                   	pop    ebx
c00139f9:	c3                   	ret    

c00139fa <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00139fa:	55                   	push   ebp
c00139fb:	57                   	push   edi
c00139fc:	56                   	push   esi
c00139fd:	53                   	push   ebx
c00139fe:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013a04:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0013a0b:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0013a0e:	8d 43 01             	lea    eax,[ebx+0x1]
c0013a11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a15:	89 f0                	mov    eax,esi
c0013a17:	3c 40                	cmp    al,0x40
c0013a19:	75 1b                	jne    c0013a36 <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c0013a1b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0013a1e:	85 c0                	test   eax,eax
c0013a20:	74 08                	je     c0013a2a <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0013a22:	83 f8 3a             	cmp    eax,0x3a
c0013a25:	74 03                	je     c0013a2a <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0013a27:	43                   	inc    ebx
c0013a28:	eb f1                	jmp    c0013a1b <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c0013a2a:	85 c0                	test   eax,eax
c0013a2c:	0f 84 45 01 00 00    	je     c0013b77 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013a32:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013a35:	43                   	inc    ebx
c0013a36:	50                   	push   eax
c0013a37:	6a 40                	push   0x40
c0013a39:	6a 00                	push   0x0
c0013a3b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013a3f:	50                   	push   eax
c0013a40:	e8 ab ca fe ff       	call   c00004f0 <memset>
c0013a45:	89 f1                	mov    ecx,esi
c0013a47:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0013a4e:	31 c0                	xor    eax,eax
c0013a50:	83 c4 10             	add    esp,0x10
c0013a53:	0f be f1             	movsx  esi,cl
c0013a56:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013a59:	85 d2                	test   edx,edx
c0013a5b:	89 d1                	mov    ecx,edx
c0013a5d:	0f 84 14 01 00 00    	je     c0013b77 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013a63:	3d c7 00 00 00       	cmp    eax,0xc7
c0013a68:	0f 8f 09 01 00 00    	jg     c0013b77 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013a6e:	83 fa 0a             	cmp    edx,0xa
c0013a71:	0f 85 f1 00 00 00    	jne    c0013b68 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0013a77:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0013a7c:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013a81:	89 c8                	mov    eax,ecx
c0013a83:	a8 df                	test   al,0xdf
c0013a85:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013a8a:	83 f9 23             	cmp    ecx,0x23
c0013a8d:	0f 94 c2             	sete   dl
c0013a90:	89 d5                	mov    ebp,edx
c0013a92:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013a96:	09 ea                	or     edx,ebp
c0013a98:	80 e2 01             	and    dl,0x1
c0013a9b:	75 47                	jne    c0013ae4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013a9d:	83 e8 09             	sub    eax,0x9
c0013aa0:	3c 01                	cmp    al,0x1
c0013aa2:	76 40                	jbe    c0013ae4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013aa4:	83 f9 5b             	cmp    ecx,0x5b
c0013aa7:	75 42                	jne    c0013aeb <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013aa9:	83 fe 40             	cmp    esi,0x40
c0013aac:	75 36                	jne    c0013ae4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013aae:	83 ec 0c             	sub    esp,0xc
c0013ab1:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0013ab5:	55                   	push   ebp
c0013ab6:	e8 c5 ca fe ff       	call   c0000580 <strlen>
c0013abb:	83 c4 10             	add    esp,0x10
c0013abe:	83 f8 3f             	cmp    eax,0x3f
c0013ac1:	0f 87 b0 00 00 00    	ja     c0013b77 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013ac7:	50                   	push   eax
c0013ac8:	50                   	push   eax
c0013ac9:	55                   	push   ebp
c0013aca:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0013ace:	55                   	push   ebp
c0013acf:	e8 7c cb fe ff       	call   c0000650 <strcpy>
c0013ad4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013ad7:	e8 a4 ca fe ff       	call   c0000580 <strlen>
c0013adc:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013ae1:	83 c4 10             	add    esp,0x10
c0013ae4:	31 d2                	xor    edx,edx
c0013ae6:	e9 84 00 00 00       	jmp    c0013b6f <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0013aeb:	83 fe 40             	cmp    esi,0x40
c0013aee:	74 06                	je     c0013af6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c0013af0:	8d 54 24 58          	lea    edx,[esp+0x58]
c0013af4:	eb 19                	jmp    c0013b0f <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013af6:	51                   	push   ecx
c0013af7:	51                   	push   ecx
c0013af8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013afc:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013b00:	50                   	push   eax
c0013b01:	e8 7a cc fe ff       	call   c0000780 <strcmp>
c0013b06:	83 c4 10             	add    esp,0x10
c0013b09:	85 c0                	test   eax,eax
c0013b0b:	75 d7                	jne    c0013ae4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013b0d:	eb e1                	jmp    c0013af0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c0013b0f:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0013b12:	85 c9                	test   ecx,ecx
c0013b14:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013b19:	83 f9 3d             	cmp    ecx,0x3d
c0013b1c:	0f 94 c0             	sete   al
c0013b1f:	89 c5                	mov    ebp,eax
c0013b21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013b25:	09 e8                	or     eax,ebp
c0013b27:	a8 01                	test   al,0x1
c0013b29:	89 c5                	mov    ebp,eax
c0013b2b:	75 03                	jne    c0013b30 <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0013b2d:	42                   	inc    edx
c0013b2e:	eb df                	jmp    c0013b0f <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013b30:	85 c9                	test   ecx,ecx
c0013b32:	74 43                	je     c0013b77 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013b34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013b38:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013b3b:	52                   	push   edx
c0013b3c:	52                   	push   edx
c0013b3d:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013b41:	50                   	push   eax
c0013b42:	53                   	push   ebx
c0013b43:	e8 38 cc fe ff       	call   c0000780 <strcmp>
c0013b48:	83 c4 10             	add    esp,0x10
c0013b4b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013b4f:	85 c0                	test   eax,eax
c0013b51:	75 91                	jne    c0013ae4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013b53:	50                   	push   eax
c0013b54:	42                   	inc    edx
c0013b55:	50                   	push   eax
c0013b56:	52                   	push   edx
c0013b57:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013b5e:	e8 ed ca fe ff       	call   c0000650 <strcpy>
c0013b63:	83 c4 10             	add    esp,0x10
c0013b66:	eb 11                	jmp    c0013b79 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0013b68:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013b6c:	8d 50 01             	lea    edx,[eax+0x1]
c0013b6f:	47                   	inc    edi
c0013b70:	89 d0                	mov    eax,edx
c0013b72:	e9 df fe ff ff       	jmp    c0013a56 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0013b77:	31 ed                	xor    ebp,ebp
c0013b79:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013b7f:	89 e8                	mov    eax,ebp
c0013b81:	5b                   	pop    ebx
c0013b82:	5e                   	pop    esi
c0013b83:	5f                   	pop    edi
c0013b84:	5d                   	pop    ebp
c0013b85:	c3                   	ret    

c0013b86 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013b86:	57                   	push   edi
c0013b87:	56                   	push   esi
c0013b88:	53                   	push   ebx
c0013b89:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013b8f:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013b96:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013b9d:	53                   	push   ebx
c0013b9e:	e8 dd c9 fe ff       	call   c0000580 <strlen>
c0013ba3:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ba6:	89 c7                	mov    edi,eax
c0013ba8:	e8 d3 c9 fe ff       	call   c0000580 <strlen>
c0013bad:	83 c4 10             	add    esp,0x10
c0013bb0:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013bb4:	3d ff 00 00 00       	cmp    eax,0xff
c0013bb9:	0f 87 d3 00 00 00    	ja     c0013c92 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013bbf:	57                   	push   edi
c0013bc0:	57                   	push   edi
c0013bc1:	56                   	push   esi
c0013bc2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013bc6:	56                   	push   esi
c0013bc7:	e8 84 ca fe ff       	call   c0000650 <strcpy>
c0013bcc:	58                   	pop    eax
c0013bcd:	5a                   	pop    edx
c0013bce:	68 6f 2b 02 c0       	push   0xc0022b6f
c0013bd3:	56                   	push   esi
c0013bd4:	e8 97 cc fe ff       	call   c0000870 <strcat>
c0013bd9:	59                   	pop    ecx
c0013bda:	5f                   	pop    edi
c0013bdb:	53                   	push   ebx
c0013bdc:	56                   	push   esi
c0013bdd:	e8 8e cc fe ff       	call   c0000870 <strcat>
c0013be2:	58                   	pop    eax
c0013be3:	5a                   	pop    edx
c0013be4:	68 1b 28 02 c0       	push   0xc002281b
c0013be9:	56                   	push   esi
c0013bea:	e8 81 cc fe ff       	call   c0000870 <strcat>
c0013bef:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013bf6:	e8 08 3f ff ff       	call   c0007b03 <malloc>
c0013bfb:	83 c4 0c             	add    esp,0xc
c0013bfe:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0013c04:	56                   	push   esi
c0013c05:	50                   	push   eax
c0013c06:	89 c3                	mov    ebx,eax
c0013c08:	e8 45 7f ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c0013c0d:	83 c4 10             	add    esp,0x10
c0013c10:	85 db                	test   ebx,ebx
c0013c12:	74 7e                	je     c0013c92 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013c14:	51                   	push   ecx
c0013c15:	51                   	push   ecx
c0013c16:	6a 01                	push   0x1
c0013c18:	53                   	push   ebx
c0013c19:	e8 52 7f ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c0013c1e:	83 c4 10             	add    esp,0x10
c0013c21:	85 c0                	test   eax,eax
c0013c23:	74 08                	je     c0013c2d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013c25:	83 ec 0c             	sub    esp,0xc
c0013c28:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c2a:	53                   	push   ebx
c0013c2b:	eb 5f                	jmp    c0013c8c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013c2d:	52                   	push   edx
c0013c2e:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013c32:	50                   	push   eax
c0013c33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013c37:	50                   	push   eax
c0013c38:	53                   	push   ebx
c0013c39:	e8 34 82 ff ff       	call   c000be72 <File::stat(unsigned long long*, bool*)>
c0013c3e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013c42:	83 c4 10             	add    esp,0x10
c0013c45:	89 c1                	mov    ecx,eax
c0013c47:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013c4b:	74 31                	je     c0013c7e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013c4d:	83 ec 0c             	sub    esp,0xc
c0013c50:	50                   	push   eax
c0013c51:	e8 ad 3e ff ff       	call   c0007b03 <malloc>
c0013c56:	89 c6                	mov    esi,eax
c0013c58:	58                   	pop    eax
c0013c59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c5b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013c5f:	52                   	push   edx
c0013c60:	56                   	push   esi
c0013c61:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013c65:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013c69:	53                   	push   ebx
c0013c6a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c6d:	83 c4 20             	add    esp,0x20
c0013c70:	85 c0                	test   eax,eax
c0013c72:	75 0a                	jne    c0013c7e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013c74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c78:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013c7c:	74 18                	je     c0013c96 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013c7e:	83 ec 0c             	sub    esp,0xc
c0013c81:	53                   	push   ebx
c0013c82:	e8 47 7f ff ff       	call   c000bbce <File::close()>
c0013c87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c8c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c8f:	83 c4 10             	add    esp,0x10
c0013c92:	31 c0                	xor    eax,eax
c0013c94:	eb 3b                	jmp    c0013cd1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013c96:	83 ec 0c             	sub    esp,0xc
c0013c99:	53                   	push   ebx
c0013c9a:	e8 2f 7f ff ff       	call   c000bbce <File::close()>
c0013c9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ca1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ca4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013ca7:	83 c4 0c             	add    esp,0xc
c0013caa:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013cb1:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013cb8:	56                   	push   esi
c0013cb9:	e8 3c fd ff ff       	call   c00139fa <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013cbe:	89 34 24             	mov    DWORD PTR [esp],esi
c0013cc1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013cc5:	e8 49 3e ff ff       	call   c0007b13 <free>
c0013cca:	83 c4 10             	add    esp,0x10
c0013ccd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013cd1:	81 c4 20 01 00 00    	add    esp,0x120
c0013cd7:	5b                   	pop    ebx
c0013cd8:	5e                   	pop    esi
c0013cd9:	5f                   	pop    edi
c0013cda:	c3                   	ret    

c0013cdb <Reg::getLine(char*, char*, char*)>:
c0013cdb:	57                   	push   edi
c0013cdc:	56                   	push   esi
c0013cdd:	53                   	push   ebx
c0013cde:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ce2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013ce6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cea:	57                   	push   edi
c0013ceb:	56                   	push   esi
c0013cec:	53                   	push   ebx
c0013ced:	68 20 28 02 c0       	push   0xc0022820
c0013cf2:	e8 8f fe ff ff       	call   c0013b86 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013cf7:	83 c4 10             	add    esp,0x10
c0013cfa:	84 c0                	test   al,al
c0013cfc:	75 10                	jne    c0013d0e <Reg::getLine(char*, char*, char*)+0x33>
c0013cfe:	57                   	push   edi
c0013cff:	56                   	push   esi
c0013d00:	53                   	push   ebx
c0013d01:	68 45 28 02 c0       	push   0xc0022845
c0013d06:	e8 7b fe ff ff       	call   c0013b86 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013d0b:	83 c4 10             	add    esp,0x10
c0013d0e:	5b                   	pop    ebx
c0013d0f:	5e                   	pop    esi
c0013d10:	5f                   	pop    edi
c0013d11:	c3                   	ret    

c0013d12 <Reg::readInt(char*, char*, int*)>:
c0013d12:	55                   	push   ebp
c0013d13:	57                   	push   edi
c0013d14:	56                   	push   esi
c0013d15:	53                   	push   ebx
c0013d16:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013d1c:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013d20:	55                   	push   ebp
c0013d21:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013d28:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013d2f:	e8 a7 ff ff ff       	call   c0013cdb <Reg::getLine(char*, char*, char*)>
c0013d34:	83 c4 10             	add    esp,0x10
c0013d37:	84 c0                	test   al,al
c0013d39:	0f 84 b6 00 00 00    	je     c0013df5 <Reg::readInt(char*, char*, int*)+0xe3>
c0013d3f:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013d44:	83 fa 2b             	cmp    edx,0x2b
c0013d47:	74 0c                	je     c0013d55 <Reg::readInt(char*, char*, int*)+0x43>
c0013d49:	83 fa 2d             	cmp    edx,0x2d
c0013d4c:	75 0e                	jne    c0013d5c <Reg::readInt(char*, char*, int*)+0x4a>
c0013d4e:	ba 01 00 00 00       	mov    edx,0x1
c0013d53:	eb 0b                	jmp    c0013d60 <Reg::readInt(char*, char*, int*)+0x4e>
c0013d55:	ba 01 00 00 00       	mov    edx,0x1
c0013d5a:	eb 02                	jmp    c0013d5e <Reg::readInt(char*, char*, int*)+0x4c>
c0013d5c:	31 d2                	xor    edx,edx
c0013d5e:	31 c0                	xor    eax,eax
c0013d60:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013d65:	be 0a 00 00 00       	mov    esi,0xa
c0013d6a:	75 21                	jne    c0013d8d <Reg::readInt(char*, char*, int*)+0x7b>
c0013d6c:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013d71:	83 f9 78             	cmp    ecx,0x78
c0013d74:	75 0a                	jne    c0013d80 <Reg::readInt(char*, char*, int*)+0x6e>
c0013d76:	83 c2 02             	add    edx,0x2
c0013d79:	be 10 00 00 00       	mov    esi,0x10
c0013d7e:	eb 0d                	jmp    c0013d8d <Reg::readInt(char*, char*, int*)+0x7b>
c0013d80:	83 f9 62             	cmp    ecx,0x62
c0013d83:	75 08                	jne    c0013d8d <Reg::readInt(char*, char*, int*)+0x7b>
c0013d85:	83 c2 02             	add    edx,0x2
c0013d88:	be 02 00 00 00       	mov    esi,0x2
c0013d8d:	01 d5                	add    ebp,edx
c0013d8f:	31 d2                	xor    edx,edx
c0013d91:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013d95:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013d99:	85 c9                	test   ecx,ecx
c0013d9b:	0f 94 c3             	sete   bl
c0013d9e:	83 f9 0d             	cmp    ecx,0xd
c0013da1:	89 df                	mov    edi,ebx
c0013da3:	0f 94 c3             	sete   bl
c0013da6:	09 df                	or     edi,ebx
c0013da8:	89 fb                	mov    ebx,edi
c0013daa:	83 e7 01             	and    edi,0x1
c0013dad:	75 35                	jne    c0013de4 <Reg::readInt(char*, char*, int*)+0xd2>
c0013daf:	0f af d6             	imul   edx,esi
c0013db2:	83 fe 10             	cmp    esi,0x10
c0013db5:	75 26                	jne    c0013ddd <Reg::readInt(char*, char*, int*)+0xcb>
c0013db7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013dbb:	83 ef 41             	sub    edi,0x41
c0013dbe:	89 fb                	mov    ebx,edi
c0013dc0:	80 fb 05             	cmp    bl,0x5
c0013dc3:	77 06                	ja     c0013dcb <Reg::readInt(char*, char*, int*)+0xb9>
c0013dc5:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013dc9:	eb 16                	jmp    c0013de1 <Reg::readInt(char*, char*, int*)+0xcf>
c0013dcb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013dcf:	83 eb 61             	sub    ebx,0x61
c0013dd2:	80 fb 05             	cmp    bl,0x5
c0013dd5:	77 06                	ja     c0013ddd <Reg::readInt(char*, char*, int*)+0xcb>
c0013dd7:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013ddb:	eb 04                	jmp    c0013de1 <Reg::readInt(char*, char*, int*)+0xcf>
c0013ddd:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013de1:	45                   	inc    ebp
c0013de2:	eb ad                	jmp    c0013d91 <Reg::readInt(char*, char*, int*)+0x7f>
c0013de4:	84 c0                	test   al,al
c0013de6:	74 02                	je     c0013dea <Reg::readInt(char*, char*, int*)+0xd8>
c0013de8:	f7 da                	neg    edx
c0013dea:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013df1:	89 10                	mov    DWORD PTR [eax],edx
c0013df3:	88 d8                	mov    al,bl
c0013df5:	81 c4 ec 00 00 00    	add    esp,0xec
c0013dfb:	5b                   	pop    ebx
c0013dfc:	5e                   	pop    esi
c0013dfd:	5f                   	pop    edi
c0013dfe:	5d                   	pop    ebp
c0013dff:	c3                   	ret    

c0013e00 <Reg::readString(char*, char*, char*, int)>:
c0013e00:	57                   	push   edi
c0013e01:	56                   	push   esi
c0013e02:	53                   	push   ebx
c0013e03:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013e09:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013e0d:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013e14:	57                   	push   edi
c0013e15:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013e1c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013e23:	e8 b3 fe ff ff       	call   c0013cdb <Reg::getLine(char*, char*, char*)>
c0013e28:	83 c4 10             	add    esp,0x10
c0013e2b:	84 c0                	test   al,al
c0013e2d:	89 c6                	mov    esi,eax
c0013e2f:	74 44                	je     c0013e75 <Reg::readString(char*, char*, char*, int)+0x75>
c0013e31:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013e38:	31 c0                	xor    eax,eax
c0013e3a:	4a                   	dec    edx
c0013e3b:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013e3e:	84 c9                	test   cl,cl
c0013e40:	74 0f                	je     c0013e51 <Reg::readString(char*, char*, char*, int)+0x51>
c0013e42:	39 c2                	cmp    edx,eax
c0013e44:	7e 0b                	jle    c0013e51 <Reg::readString(char*, char*, char*, int)+0x51>
c0013e46:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013e49:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013e4e:	40                   	inc    eax
c0013e4f:	eb ea                	jmp    c0013e3b <Reg::readString(char*, char*, char*, int)+0x3b>
c0013e51:	83 ec 0c             	sub    esp,0xc
c0013e54:	53                   	push   ebx
c0013e55:	e8 26 c7 fe ff       	call   c0000580 <strlen>
c0013e5a:	83 c4 10             	add    esp,0x10
c0013e5d:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013e62:	75 11                	jne    c0013e75 <Reg::readString(char*, char*, char*, int)+0x75>
c0013e64:	83 ec 0c             	sub    esp,0xc
c0013e67:	53                   	push   ebx
c0013e68:	e8 13 c7 fe ff       	call   c0000580 <strlen>
c0013e6d:	83 c4 10             	add    esp,0x10
c0013e70:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013e75:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013e7b:	89 f0                	mov    eax,esi
c0013e7d:	5b                   	pop    ebx
c0013e7e:	5e                   	pop    esi
c0013e7f:	5f                   	pop    edi
c0013e80:	c3                   	ret    

c0013e81 <Reg::readBool(char*, char*, bool*)>:
c0013e81:	83 ec 20             	sub    esp,0x20
c0013e84:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013e88:	50                   	push   eax
c0013e89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e91:	e8 7c fe ff ff       	call   c0013d12 <Reg::readInt(char*, char*, int*)>
c0013e96:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013e9a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013e9f:	0f 95 02             	setne  BYTE PTR [edx]
c0013ea2:	83 c4 2c             	add    esp,0x2c
c0013ea5:	c3                   	ret    

c0013ea6 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013ea6:	53                   	push   ebx
c0013ea7:	83 ec 1c             	sub    esp,0x1c
c0013eaa:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013eae:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013eb2:	50                   	push   eax
c0013eb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013eb7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ebb:	e8 c1 ff ff ff       	call   c0013e81 <Reg::readBool(char*, char*, bool*)>
c0013ec0:	83 c4 10             	add    esp,0x10
c0013ec3:	84 c0                	test   al,al
c0013ec5:	74 04                	je     c0013ecb <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013ec7:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013ecb:	83 c4 18             	add    esp,0x18
c0013ece:	88 d8                	mov    al,bl
c0013ed0:	5b                   	pop    ebx
c0013ed1:	c3                   	ret    

c0013ed2 <Reg::readIntWithDefault(char*, char*, int)>:
c0013ed2:	53                   	push   ebx
c0013ed3:	83 ec 1c             	sub    esp,0x1c
c0013ed6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013eda:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013ede:	50                   	push   eax
c0013edf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ee3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ee7:	e8 26 fe ff ff       	call   c0013d12 <Reg::readInt(char*, char*, int*)>
c0013eec:	83 c4 10             	add    esp,0x10
c0013eef:	84 c0                	test   al,al
c0013ef1:	74 04                	je     c0013ef7 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013ef3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013ef7:	83 c4 18             	add    esp,0x18
c0013efa:	89 d8                	mov    eax,ebx
c0013efc:	5b                   	pop    ebx
c0013efd:	c3                   	ret    

c0013efe <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013efe:	57                   	push   edi
c0013eff:	56                   	push   esi
c0013f00:	53                   	push   ebx
c0013f01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013f05:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013f09:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013f0d:	56                   	push   esi
c0013f0e:	57                   	push   edi
c0013f0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f17:	e8 e4 fe ff ff       	call   c0013e00 <Reg::readString(char*, char*, char*, int)>
c0013f1c:	83 c4 10             	add    esp,0x10
c0013f1f:	84 c0                	test   al,al
c0013f21:	75 16                	jne    c0013f39 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013f23:	50                   	push   eax
c0013f24:	56                   	push   esi
c0013f25:	6a 00                	push   0x0
c0013f27:	57                   	push   edi
c0013f28:	e8 c3 c5 fe ff       	call   c00004f0 <memset>
c0013f2d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013f30:	89 de                	mov    esi,ebx
c0013f32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013f34:	83 c4 10             	add    esp,0x10
c0013f37:	89 df                	mov    edi,ebx
c0013f39:	5b                   	pop    ebx
c0013f3a:	89 f8                	mov    eax,edi
c0013f3c:	5e                   	pop    esi
c0013f3d:	5f                   	pop    edi
c0013f3e:	c3                   	ret    

c0013f3f <SysEject(regs*)>:
c0013f3f:	83 ec 0c             	sub    esp,0xc
c0013f42:	83 ca ff             	or     edx,0xffffffff
c0013f45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f49:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013f4c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013f51:	83 e9 41             	sub    ecx,0x41
c0013f54:	83 f9 19             	cmp    ecx,0x19
c0013f57:	77 18                	ja     c0013f71 <SysEject(regs*)+0x32>
c0013f59:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0013f60:	85 c9                	test   ecx,ecx
c0013f62:	74 0d                	je     c0013f71 <SysEject(regs*)+0x32>
c0013f64:	83 ec 0c             	sub    esp,0xc
c0013f67:	51                   	push   ecx
c0013f68:	e8 1b 9e ff ff       	call   c000dd88 <LogicalDisk::eject()>
c0013f6d:	83 c4 10             	add    esp,0x10
c0013f70:	99                   	cdq    
c0013f71:	83 c4 0c             	add    esp,0xc
c0013f74:	c3                   	ret    

c0013f75 <SysExit(regs*)>:
c0013f75:	83 ec 18             	sub    esp,0x18
c0013f78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f7c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f7f:	e8 80 2b 00 00       	call   c0016b04 <terminateTask(int)>
c0013f84:	83 c8 ff             	or     eax,0xffffffff
c0013f87:	83 c4 1c             	add    esp,0x1c
c0013f8a:	89 c2                	mov    edx,eax
c0013f8c:	c3                   	ret    

c0013f8d <SysGetCwd(regs*)>:
c0013f8d:	83 ec 10             	sub    esp,0x10
c0013f90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f94:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013f97:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f9f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013fa2:	e8 4b 78 ff ff       	call   c000b7f2 <Fs::getcwd(Process*, char*, int)>
c0013fa7:	83 c4 1c             	add    esp,0x1c
c0013faa:	99                   	cdq    
c0013fab:	c3                   	ret    

c0013fac <SysGetPID(regs*)>:
c0013fac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fb1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013fb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0013fb6:	99                   	cdq    
c0013fb7:	c3                   	ret    

c0013fb8 <SysGetRAMData(regs*)>:
c0013fb8:	69 05 e4 6e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026ee4,0xc8
c0013fc2:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0013fc8:	99                   	cdq    
c0013fc9:	f7 f9                	idiv   ecx
c0013fcb:	c1 e0 18             	shl    eax,0x18
c0013fce:	09 c8                	or     eax,ecx
c0013fd0:	99                   	cdq    
c0013fd1:	c3                   	ret    

c0013fd2 <SysGetVGAPtr(regs*)>:
c0013fd2:	55                   	push   ebp
c0013fd3:	57                   	push   edi
c0013fd4:	56                   	push   esi
c0013fd5:	53                   	push   ebx
c0013fd6:	83 ec 18             	sub    esp,0x18
c0013fd9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013fdd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013fe0:	e8 eb 25 00 00       	call   c00165d0 <Thr::processFromPID(int)>
c0013fe5:	83 c4 10             	add    esp,0x10
c0013fe8:	89 c1                	mov    ecx,eax
c0013fea:	b8 01 00 00 00       	mov    eax,0x1
c0013fef:	85 c9                	test   ecx,ecx
c0013ff1:	74 57                	je     c001404a <SysGetVGAPtr(regs*)+0x78>
c0013ff3:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013ff7:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013ffd:	74 0c                	je     c001400b <SysGetVGAPtr(regs*)+0x39>
c0013fff:	83 ec 0c             	sub    esp,0xc
c0014002:	55                   	push   ebp
c0014003:	e8 97 47 ff ff       	call   c000879f <setActiveTerminal(VgaText*)>
c0014008:	83 c4 10             	add    esp,0x10
c001400b:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c001400e:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0014013:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0014016:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014018:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001401b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001401e:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0014024:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014027:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001402a:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0014030:	50                   	push   eax
c0014031:	50                   	push   eax
c0014032:	68 60 28 02 c0       	push   0xc0022860
c0014037:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001403a:	05 a8 0f 00 00       	add    eax,0xfa8
c001403f:	50                   	push   eax
c0014040:	e8 0b c6 fe ff       	call   c0000650 <strcpy>
c0014045:	83 c4 10             	add    esp,0x10
c0014048:	31 c0                	xor    eax,eax
c001404a:	83 c4 0c             	add    esp,0xc
c001404d:	31 d2                	xor    edx,edx
c001404f:	5b                   	pop    ebx
c0014050:	5e                   	pop    esi
c0014051:	5f                   	pop    edi
c0014052:	5d                   	pop    ebp
c0014053:	c3                   	ret    

c0014054 <SysKill(regs*)>:
c0014054:	53                   	push   ebx
c0014055:	83 ec 08             	sub    esp,0x8
c0014058:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001405c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0014060:	75 16                	jne    c0014078 <SysKill(regs*)+0x24>
c0014062:	83 ec 0c             	sub    esp,0xc
c0014065:	68 6a 28 02 c0       	push   0xc002286a
c001406a:	e8 e8 d5 ff ff       	call   c0011657 <KePanic(char const*)>
c001406f:	83 c4 10             	add    esp,0x10
c0014072:	e9 89 00 00 00       	jmp    c0014100 <SysKill(regs*)+0xac>
c0014077:	90                   	nop
c0014078:	83 ec 0c             	sub    esp,0xc
c001407b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0014080:	e8 a7 bd 00 00       	call   c001fe2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014085:	8d 76 00             	lea    esi,[esi+0x0]
c0014088:	83 c4 10             	add    esp,0x10
c001408b:	85 c0                	test   eax,eax
c001408d:	74 19                	je     c00140a8 <SysKill(regs*)+0x54>
c001408f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0014092:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014095:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014097:	74 33                	je     c00140cc <SysKill(regs*)+0x78>
c0014099:	52                   	push   edx
c001409a:	52                   	push   edx
c001409b:	50                   	push   eax
c001409c:	68 e4 c6 02 c0       	push   0xc002c6e4
c00140a1:	e8 a6 c0 00 00       	call   c002014c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00140a6:	eb e0                	jmp    c0014088 <SysKill(regs*)+0x34>
c00140a8:	83 ec 0c             	sub    esp,0xc
c00140ab:	68 d8 c6 02 c0       	push   0xc002c6d8
c00140b0:	e8 77 bd 00 00       	call   c001fe2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00140b5:	8d 76 00             	lea    esi,[esi+0x0]
c00140b8:	83 c4 10             	add    esp,0x10
c00140bb:	85 c0                	test   eax,eax
c00140bd:	74 41                	je     c0014100 <SysKill(regs*)+0xac>
c00140bf:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00140c2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00140c5:	39 0a                	cmp    DWORD PTR [edx],ecx
c00140c7:	75 27                	jne    c00140f0 <SysKill(regs*)+0x9c>
c00140c9:	8d 76 00             	lea    esi,[esi+0x0]
c00140cc:	51                   	push   ecx
c00140cd:	51                   	push   ecx
c00140ce:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00140d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140d6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00140d9:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00140df:	e8 0f da ff ff       	call   c0011af3 <KeRaiseSignal(SigHandlerBlock*, int)>
c00140e4:	83 c4 10             	add    esp,0x10
c00140e7:	31 c0                	xor    eax,eax
c00140e9:	31 d2                	xor    edx,edx
c00140eb:	eb 1b                	jmp    c0014108 <SysKill(regs*)+0xb4>
c00140ed:	8d 76 00             	lea    esi,[esi+0x0]
c00140f0:	52                   	push   edx
c00140f1:	52                   	push   edx
c00140f2:	50                   	push   eax
c00140f3:	68 d8 c6 02 c0       	push   0xc002c6d8
c00140f8:	e8 4f c0 00 00       	call   c002014c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00140fd:	eb b9                	jmp    c00140b8 <SysKill(regs*)+0x64>
c00140ff:	90                   	nop
c0014100:	83 c8 ff             	or     eax,0xffffffff
c0014103:	89 c2                	mov    edx,eax
c0014105:	8d 76 00             	lea    esi,[esi+0x0]
c0014108:	83 c4 08             	add    esp,0x8
c001410b:	5b                   	pop    ebx
c001410c:	c3                   	ret    

c001410d <SysLoadDLL(regs*)>:
c001410d:	56                   	push   esi
c001410e:	31 d2                	xor    edx,edx
c0014110:	53                   	push   ebx
c0014111:	b8 01 00 00 00       	mov    eax,0x1
c0014116:	51                   	push   ecx
c0014117:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001411b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001411f:	0f 84 8c 00 00 00    	je     c00141b1 <SysLoadDLL(regs*)+0xa4>
c0014125:	83 ec 0c             	sub    esp,0xc
c0014128:	68 14 01 00 00       	push   0x114
c001412d:	e8 d1 39 ff ff       	call   c0007b03 <malloc>
c0014132:	83 c4 0c             	add    esp,0xc
c0014135:	89 c3                	mov    ebx,eax
c0014137:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001413c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001413f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014142:	53                   	push   ebx
c0014143:	e8 0a 7a ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c0014148:	83 c4 10             	add    esp,0x10
c001414b:	31 d2                	xor    edx,edx
c001414d:	85 db                	test   ebx,ebx
c001414f:	b8 02 00 00 00       	mov    eax,0x2
c0014154:	74 5b                	je     c00141b1 <SysLoadDLL(regs*)+0xa4>
c0014156:	83 ec 0c             	sub    esp,0xc
c0014159:	53                   	push   ebx
c001415a:	e8 d5 7c ff ff       	call   c000be34 <File::exists()>
c001415f:	83 c4 10             	add    esp,0x10
c0014162:	84 c0                	test   al,al
c0014164:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014166:	75 11                	jne    c0014179 <SysLoadDLL(regs*)+0x6c>
c0014168:	83 ec 0c             	sub    esp,0xc
c001416b:	53                   	push   ebx
c001416c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001416f:	83 c4 10             	add    esp,0x10
c0014172:	b8 03 00 00 00       	mov    eax,0x3
c0014177:	eb 36                	jmp    c00141af <SysLoadDLL(regs*)+0xa2>
c0014179:	83 ec 0c             	sub    esp,0xc
c001417c:	53                   	push   ebx
c001417d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014180:	58                   	pop    eax
c0014181:	5a                   	pop    edx
c0014182:	6a 00                	push   0x0
c0014184:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014187:	e8 8f 15 00 00       	call   c001571b <Thr::loadDLL(char const*, bool)>
c001418c:	83 c4 10             	add    esp,0x10
c001418f:	31 d2                	xor    edx,edx
c0014191:	89 c1                	mov    ecx,eax
c0014193:	b8 04 00 00 00       	mov    eax,0x4
c0014198:	85 c9                	test   ecx,ecx
c001419a:	74 15                	je     c00141b1 <SysLoadDLL(regs*)+0xa4>
c001419c:	53                   	push   ebx
c001419d:	53                   	push   ebx
c001419e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00141a4:	51                   	push   ecx
c00141a5:	e8 b1 17 00 00       	call   c001595b <Thr::executeDLL(unsigned long, void*)>
c00141aa:	83 c4 10             	add    esp,0x10
c00141ad:	31 c0                	xor    eax,eax
c00141af:	31 d2                	xor    edx,edx
c00141b1:	59                   	pop    ecx
c00141b2:	5b                   	pop    ebx
c00141b3:	5e                   	pop    esi
c00141b4:	c3                   	ret    

c00141b5 <SysRead(regs*)>:
c00141b5:	57                   	push   edi
c00141b6:	56                   	push   esi
c00141b7:	53                   	push   ebx
c00141b8:	83 ec 10             	sub    esp,0x10
c00141bb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00141bf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00141c2:	83 f8 02             	cmp    eax,0x2
c00141c5:	77 10                	ja     c00141d7 <SysRead(regs*)+0x22>
c00141c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141cc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141cf:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00141d5:	eb 0e                	jmp    c00141e5 <SysRead(regs*)+0x30>
c00141d7:	83 ec 0c             	sub    esp,0xc
c00141da:	50                   	push   eax
c00141db:	e8 eb 52 ff ff       	call   c00094cb <KeGetFileFromDescriptor(int)>
c00141e0:	83 c4 10             	add    esp,0x10
c00141e3:	89 c1                	mov    ecx,eax
c00141e5:	83 c8 ff             	or     eax,0xffffffff
c00141e8:	85 c9                	test   ecx,ecx
c00141ea:	89 c2                	mov    edx,eax
c00141ec:	74 28                	je     c0014216 <SysRead(regs*)+0x61>
c00141ee:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00141f6:	83 ec 0c             	sub    esp,0xc
c00141f9:	31 ff                	xor    edi,edi
c00141fb:	8d 54 24 18          	lea    edx,[esp+0x18]
c00141ff:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014201:	52                   	push   edx
c0014202:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014205:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014208:	57                   	push   edi
c0014209:	56                   	push   esi
c001420a:	51                   	push   ecx
c001420b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001420e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014212:	83 c4 20             	add    esp,0x20
c0014215:	99                   	cdq    
c0014216:	83 c4 10             	add    esp,0x10
c0014219:	5b                   	pop    ebx
c001421a:	5e                   	pop    esi
c001421b:	5f                   	pop    edi
c001421c:	c3                   	ret    

c001421d <SysRegisterSignal(regs*)>:
c001421d:	83 ec 18             	sub    esp,0x18
c0014220:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014224:	6a 00                	push   0x0
c0014226:	6a 00                	push   0x0
c0014228:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001422b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001422e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014233:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014236:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001423c:	e8 7c d8 ff ff       	call   c0011abd <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014241:	83 c4 2c             	add    esp,0x2c
c0014244:	99                   	cdq    
c0014245:	c3                   	ret    

c0014246 <SysRegistryGetTypeFromPath(regs*)>:
c0014246:	57                   	push   edi
c0014247:	56                   	push   esi
c0014248:	53                   	push   ebx
c0014249:	81 ec 38 01 00 00    	sub    esp,0x138
c001424f:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014256:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014259:	68 8b 28 02 c0       	push   0xc002288b
c001425e:	e8 d7 66 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0014263:	5a                   	pop    edx
c0014264:	59                   	pop    ecx
c0014265:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014268:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001426b:	e8 34 f6 ff ff       	call   c00138a4 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014270:	5f                   	pop    edi
c0014271:	5a                   	pop    edx
c0014272:	89 c6                	mov    esi,eax
c0014274:	50                   	push   eax
c0014275:	68 ab 28 02 c0       	push   0xc00228ab
c001427a:	e8 bb 66 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001427f:	83 c4 10             	add    esp,0x10
c0014282:	85 f6                	test   esi,esi
c0014284:	74 28                	je     c00142ae <SysRegistryGetTypeFromPath(regs*)+0x68>
c0014286:	50                   	push   eax
c0014287:	8d 7c 24 08          	lea    edi,[esp+0x8]
c001428b:	57                   	push   edi
c001428c:	56                   	push   esi
c001428d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014290:	e8 f4 f1 ff ff       	call   c0013489 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014295:	83 c4 0c             	add    esp,0xc
c0014298:	57                   	push   edi
c0014299:	50                   	push   eax
c001429a:	89 c3                	mov    ebx,eax
c001429c:	68 b3 28 02 c0       	push   0xc00228b3
c00142a1:	e8 94 66 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c00142a6:	89 d8                	mov    eax,ebx
c00142a8:	83 c4 10             	add    esp,0x10
c00142ab:	99                   	cdq    
c00142ac:	eb 05                	jmp    c00142b3 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c00142ae:	83 c8 ff             	or     eax,0xffffffff
c00142b1:	89 c2                	mov    edx,eax
c00142b3:	81 c4 30 01 00 00    	add    esp,0x130
c00142b9:	5b                   	pop    ebx
c00142ba:	5e                   	pop    esi
c00142bb:	5f                   	pop    edi
c00142bc:	c3                   	ret    

c00142bd <SysRegistryReadExtent(regs*)>:
c00142bd:	83 ec 1c             	sub    esp,0x1c
c00142c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00142c4:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00142c7:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00142ca:	85 c0                	test   eax,eax
c00142cc:	79 1f                	jns    c00142ed <SysRegistryReadExtent(regs*)+0x30>
c00142ce:	52                   	push   edx
c00142cf:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00142d4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00142d8:	52                   	push   edx
c00142d9:	50                   	push   eax
c00142da:	51                   	push   ecx
c00142db:	e8 9b f0 ff ff       	call   c001337b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00142e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00142e8:	83 c4 10             	add    esp,0x10
c00142eb:	eb 14                	jmp    c0014301 <SysRegistryReadExtent(regs*)+0x44>
c00142ed:	83 ec 04             	sub    esp,0x4
c00142f0:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00142f3:	50                   	push   eax
c00142f4:	51                   	push   ecx
c00142f5:	e8 1f eb ff ff       	call   c0012e19 <CmGetString(Reghive_Tag*, int, char*)>
c00142fa:	83 c4 10             	add    esp,0x10
c00142fd:	31 c0                	xor    eax,eax
c00142ff:	31 d2                	xor    edx,edx
c0014301:	83 c4 1c             	add    esp,0x1c
c0014304:	c3                   	ret    

c0014305 <SysRegistryPathToExtentLookup(regs*)>:
c0014305:	53                   	push   ebx
c0014306:	83 ec 10             	sub    esp,0x10
c0014309:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001430d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014310:	68 c9 28 02 c0       	push   0xc00228c9
c0014315:	e8 20 66 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001431a:	58                   	pop    eax
c001431b:	5a                   	pop    edx
c001431c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001431f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014322:	e8 7d f5 ff ff       	call   c00138a4 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014327:	83 c4 18             	add    esp,0x18
c001432a:	5b                   	pop    ebx
c001432b:	99                   	cdq    
c001432c:	c3                   	ret    

c001432d <SysRegistryEnterDirectory(regs*)>:
c001432d:	53                   	push   ebx
c001432e:	83 ec 10             	sub    esp,0x10
c0014331:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014335:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014338:	68 ec 28 02 c0       	push   0xc00228ec
c001433d:	e8 f8 65 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0014342:	58                   	pop    eax
c0014343:	5a                   	pop    edx
c0014344:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014347:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001434a:	e8 41 eb ff ff       	call   c0012e90 <CmEnterDirectory(Reghive_Tag*, int)>
c001434f:	83 c4 18             	add    esp,0x18
c0014352:	5b                   	pop    ebx
c0014353:	99                   	cdq    
c0014354:	c3                   	ret    

c0014355 <SysRegistryGetNext(regs*)>:
c0014355:	53                   	push   ebx
c0014356:	83 ec 10             	sub    esp,0x10
c0014359:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001435d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014360:	68 0a 29 02 c0       	push   0xc002290a
c0014365:	e8 d0 65 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001436a:	58                   	pop    eax
c001436b:	5a                   	pop    edx
c001436c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001436f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014372:	e8 58 eb ff ff       	call   c0012ecf <CmGetNext(Reghive_Tag*, int)>
c0014377:	83 c4 18             	add    esp,0x18
c001437a:	5b                   	pop    ebx
c001437b:	99                   	cdq    
c001437c:	c3                   	ret    

c001437d <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c001437d:	57                   	push   edi
c001437e:	56                   	push   esi
c001437f:	53                   	push   ebx
c0014380:	81 ec 34 01 00 00    	sub    esp,0x134
c0014386:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001438d:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014391:	57                   	push   edi
c0014392:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014395:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014398:	e8 ec f0 ff ff       	call   c0013489 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001439d:	89 c3                	mov    ebx,eax
c001439f:	58                   	pop    eax
c00143a0:	5a                   	pop    edx
c00143a1:	57                   	push   edi
c00143a2:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00143a5:	e8 a6 c2 fe ff       	call   c0000650 <strcpy>
c00143aa:	81 c4 40 01 00 00    	add    esp,0x140
c00143b0:	89 d8                	mov    eax,ebx
c00143b2:	5b                   	pop    ebx
c00143b3:	99                   	cdq    
c00143b4:	5e                   	pop    esi
c00143b5:	5f                   	pop    edi
c00143b6:	c3                   	ret    

c00143b7 <SysRegistryOpen(regs*)>:
c00143b7:	83 ec 18             	sub    esp,0x18
c00143ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00143be:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00143c1:	e8 e3 e8 ff ff       	call   c0012ca9 <CmOpen(char const*)>
c00143c6:	83 c4 1c             	add    esp,0x1c
c00143c9:	99                   	cdq    
c00143ca:	c3                   	ret    

c00143cb <SysRegistryClose(regs*)>:
c00143cb:	83 ec 18             	sub    esp,0x18
c00143ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00143d2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00143d5:	e8 ed e9 ff ff       	call   c0012dc7 <CmClose(Reghive_Tag*)>
c00143da:	31 c0                	xor    eax,eax
c00143dc:	31 d2                	xor    edx,edx
c00143de:	83 c4 1c             	add    esp,0x1c
c00143e1:	c3                   	ret    

c00143e2 <SysSbrk(regs*)>:
c00143e2:	56                   	push   esi
c00143e3:	53                   	push   ebx
c00143e4:	50                   	push   eax
c00143e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00143ee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143f1:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00143f4:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00143fa:	85 db                	test   ebx,ebx
c00143fc:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00143ff:	74 02                	je     c0014403 <SysSbrk(regs*)+0x21>
c0014401:	79 06                	jns    c0014409 <SysSbrk(regs*)+0x27>
c0014403:	89 f0                	mov    eax,esi
c0014405:	31 d2                	xor    edx,edx
c0014407:	eb 2a                	jmp    c0014433 <SysSbrk(regs*)+0x51>
c0014409:	83 c8 ff             	or     eax,0xffffffff
c001440c:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014412:	89 c2                	mov    edx,eax
c0014414:	77 1d                	ja     c0014433 <SysSbrk(regs*)+0x51>
c0014416:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001441c:	50                   	push   eax
c001441d:	68 07 0c 00 00       	push   0xc07
c0014422:	c1 ea 0c             	shr    edx,0xc
c0014425:	52                   	push   edx
c0014426:	51                   	push   ecx
c0014427:	e8 0a 5a ff ff       	call   c0009e36 <VAS::allocatePages(int, int)>
c001442c:	89 f0                	mov    eax,esi
c001442e:	31 d2                	xor    edx,edx
c0014430:	83 c4 10             	add    esp,0x10
c0014433:	59                   	pop    ecx
c0014434:	5b                   	pop    ebx
c0014435:	5e                   	pop    esi
c0014436:	c3                   	ret    

c0014437 <SysSetCwd(regs*)>:
c0014437:	83 ec 14             	sub    esp,0x14
c001443a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001443e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014441:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014446:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014449:	e8 85 7a ff ff       	call   c000bed3 <Fs::setcwd(Process*, char*)>
c001444e:	83 c4 1c             	add    esp,0x1c
c0014451:	99                   	cdq    
c0014452:	c3                   	ret    

c0014453 <SysSetTime(regs*)>:
c0014453:	55                   	push   ebp
c0014454:	31 c9                	xor    ecx,ecx
c0014456:	57                   	push   edi
c0014457:	bd 0c 00 00 00       	mov    ebp,0xc
c001445c:	56                   	push   esi
c001445d:	53                   	push   ebx
c001445e:	31 db                	xor    ebx,ebx
c0014460:	83 ec 10             	sub    esp,0x10
c0014463:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014467:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001446a:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001446d:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0014470:	89 c2                	mov    edx,eax
c0014472:	c1 e8 05             	shr    eax,0x5
c0014475:	83 e2 1f             	and    edx,0x1f
c0014478:	42                   	inc    edx
c0014479:	81 ef 6c 07 00 00    	sub    edi,0x76c
c001447f:	c1 e7 10             	shl    edi,0x10
c0014482:	88 d1                	mov    cl,dl
c0014484:	31 d2                	xor    edx,edx
c0014486:	f7 f5                	div    ebp
c0014488:	89 dd                	mov    ebp,ebx
c001448a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0014490:	88 d5                	mov    ch,dl
c0014492:	31 d2                	xor    edx,edx
c0014494:	0f b7 c1             	movzx  eax,cx
c0014497:	09 f8                	or     eax,edi
c0014499:	bf 3c 00 00 00       	mov    edi,0x3c
c001449e:	89 c1                	mov    ecx,eax
c00144a0:	89 f0                	mov    eax,esi
c00144a2:	f7 f7                	div    edi
c00144a4:	c1 e2 10             	shl    edx,0x10
c00144a7:	09 d5                	or     ebp,edx
c00144a9:	31 d2                	xor    edx,edx
c00144ab:	f7 f7                	div    edi
c00144ad:	89 eb                	mov    ebx,ebp
c00144af:	bf 10 0e 00 00       	mov    edi,0xe10
c00144b4:	89 f0                	mov    eax,esi
c00144b6:	88 d7                	mov    bh,dl
c00144b8:	31 d2                	xor    edx,edx
c00144ba:	f7 f7                	div    edi
c00144bc:	bf 18 00 00 00       	mov    edi,0x18
c00144c1:	31 d2                	xor    edx,edx
c00144c3:	f7 f7                	div    edi
c00144c5:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00144ca:	88 d3                	mov    bl,dl
c00144cc:	53                   	push   ebx
c00144cd:	51                   	push   ecx
c00144ce:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00144d4:	e8 0b 82 ff ff       	call   c000c6e4 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00144d9:	83 c4 1c             	add    esp,0x1c
c00144dc:	31 d2                	xor    edx,edx
c00144de:	5b                   	pop    ebx
c00144df:	5e                   	pop    esi
c00144e0:	83 f0 01             	xor    eax,0x1
c00144e3:	5f                   	pop    edi
c00144e4:	0f b6 c0             	movzx  eax,al
c00144e7:	5d                   	pop    ebp
c00144e8:	c3                   	ret    

c00144e9 <SysSymlink(regs*)>:
c00144e9:	56                   	push   esi
c00144ea:	83 c8 ff             	or     eax,0xffffffff
c00144ed:	53                   	push   ebx
c00144ee:	89 c2                	mov    edx,eax
c00144f0:	81 ec 34 02 00 00    	sub    esp,0x234
c00144f6:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c00144fd:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014501:	74 50                	je     c0014553 <SysSymlink(regs*)+0x6a>
c0014503:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0014506:	85 c9                	test   ecx,ecx
c0014508:	74 49                	je     c0014553 <SysSymlink(regs*)+0x6a>
c001450a:	6a 01                	push   0x1
c001450c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014511:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014514:	05 0c 01 00 00       	add    eax,0x10c
c0014519:	50                   	push   eax
c001451a:	51                   	push   ecx
c001451b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001451f:	56                   	push   esi
c0014520:	e8 21 73 ff ff       	call   c000b846 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014525:	6a 01                	push   0x1
c0014527:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001452c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001452f:	05 0c 01 00 00       	add    eax,0x10c
c0014534:	50                   	push   eax
c0014535:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014538:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c001453f:	53                   	push   ebx
c0014540:	e8 01 73 ff ff       	call   c000b846 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014545:	83 c4 18             	add    esp,0x18
c0014548:	56                   	push   esi
c0014549:	53                   	push   ebx
c001454a:	e8 06 6f ff ff       	call   c000b455 <KeCreateSymlink(char const*, char const*)>
c001454f:	83 c4 10             	add    esp,0x10
c0014552:	99                   	cdq    
c0014553:	81 c4 34 02 00 00    	add    esp,0x234
c0014559:	5b                   	pop    ebx
c001455a:	5e                   	pop    esi
c001455b:	c3                   	ret    

c001455c <SysTimezone(regs*)>:
c001455c:	53                   	push   ebx
c001455d:	83 ec 08             	sub    esp,0x8
c0014560:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014564:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014568:	75 17                	jne    c0014581 <SysTimezone(regs*)+0x25>
c001456a:	83 ec 0c             	sub    esp,0xc
c001456d:	68 21 29 02 c0       	push   0xc0022921
c0014572:	e8 c3 63 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0014577:	83 c8 ff             	or     eax,0xffffffff
c001457a:	83 c4 10             	add    esp,0x10
c001457d:	89 c2                	mov    edx,eax
c001457f:	eb 20                	jmp    c00145a1 <SysTimezone(regs*)+0x45>
c0014581:	83 ec 0c             	sub    esp,0xc
c0014584:	68 36 29 02 c0       	push   0xc0022936
c0014589:	e8 ac 63 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001458e:	58                   	pop    eax
c001458f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014592:	e8 b1 7e ff ff       	call   c000c448 <User::loadClockSettings(int)>
c0014597:	83 c4 10             	add    esp,0x10
c001459a:	b8 01 00 00 00       	mov    eax,0x1
c001459f:	31 d2                	xor    edx,edx
c00145a1:	83 c4 08             	add    esp,0x8
c00145a4:	5b                   	pop    ebx
c00145a5:	c3                   	ret    

c00145a6 <SysTruncate(regs*)>:
c00145a6:	55                   	push   ebp
c00145a7:	57                   	push   edi
c00145a8:	31 ff                	xor    edi,edi
c00145aa:	56                   	push   esi
c00145ab:	53                   	push   ebx
c00145ac:	83 ec 0c             	sub    esp,0xc
c00145af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145b3:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00145b6:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00145ba:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00145bd:	89 ce                	mov    esi,ecx
c00145bf:	0f 84 9a 00 00 00    	je     c001465f <SysTruncate(regs*)+0xb9>
c00145c5:	83 ec 0c             	sub    esp,0xc
c00145c8:	68 14 01 00 00       	push   0x114
c00145cd:	e8 31 35 ff ff       	call   c0007b03 <malloc>
c00145d2:	83 c4 0c             	add    esp,0xc
c00145d5:	89 c3                	mov    ebx,eax
c00145d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145dc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00145df:	55                   	push   ebp
c00145e0:	53                   	push   ebx
c00145e1:	e8 6c 75 ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c00145e6:	83 c4 10             	add    esp,0x10
c00145e9:	31 d2                	xor    edx,edx
c00145eb:	85 db                	test   ebx,ebx
c00145ed:	b8 03 00 00 00       	mov    eax,0x3
c00145f2:	0f 84 a2 00 00 00    	je     c001469a <SysTruncate(regs*)+0xf4>
c00145f8:	51                   	push   ecx
c00145f9:	51                   	push   ecx
c00145fa:	6a 02                	push   0x2
c00145fc:	53                   	push   ebx
c00145fd:	e8 6e 75 ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c0014602:	83 c4 10             	add    esp,0x10
c0014605:	85 c0                	test   eax,eax
c0014607:	74 13                	je     c001461c <SysTruncate(regs*)+0x76>
c0014609:	8b 03                	mov    eax,DWORD PTR [ebx]
c001460b:	83 ec 0c             	sub    esp,0xc
c001460e:	53                   	push   ebx
c001460f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014612:	83 c4 10             	add    esp,0x10
c0014615:	b8 04 00 00 00       	mov    eax,0x4
c001461a:	eb 7c                	jmp    c0014698 <SysTruncate(regs*)+0xf2>
c001461c:	52                   	push   edx
c001461d:	57                   	push   edi
c001461e:	56                   	push   esi
c001461f:	53                   	push   ebx
c0014620:	e8 5f 76 ff ff       	call   c000bc84 <File::truncate(unsigned long long)>
c0014625:	83 c4 10             	add    esp,0x10
c0014628:	85 c0                	test   eax,eax
c001462a:	74 1b                	je     c0014647 <SysTruncate(regs*)+0xa1>
c001462c:	83 ec 0c             	sub    esp,0xc
c001462f:	53                   	push   ebx
c0014630:	e8 99 75 ff ff       	call   c000bbce <File::close()>
c0014635:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014637:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001463a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001463d:	83 c4 10             	add    esp,0x10
c0014640:	b8 05 00 00 00       	mov    eax,0x5
c0014645:	eb 51                	jmp    c0014698 <SysTruncate(regs*)+0xf2>
c0014647:	83 ec 0c             	sub    esp,0xc
c001464a:	53                   	push   ebx
c001464b:	e8 7e 75 ff ff       	call   c000bbce <File::close()>
c0014650:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014652:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014655:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014658:	83 c4 10             	add    esp,0x10
c001465b:	31 c0                	xor    eax,eax
c001465d:	eb 39                	jmp    c0014698 <SysTruncate(regs*)+0xf2>
c001465f:	31 d2                	xor    edx,edx
c0014661:	83 fd 02             	cmp    ebp,0x2
c0014664:	b8 01 00 00 00       	mov    eax,0x1
c0014669:	7e 2f                	jle    c001469a <SysTruncate(regs*)+0xf4>
c001466b:	83 ec 0c             	sub    esp,0xc
c001466e:	51                   	push   ecx
c001466f:	e8 57 4e ff ff       	call   c00094cb <KeGetFileFromDescriptor(int)>
c0014674:	83 c4 10             	add    esp,0x10
c0014677:	31 d2                	xor    edx,edx
c0014679:	89 c1                	mov    ecx,eax
c001467b:	b8 02 00 00 00       	mov    eax,0x2
c0014680:	85 c9                	test   ecx,ecx
c0014682:	74 16                	je     c001469a <SysTruncate(regs*)+0xf4>
c0014684:	50                   	push   eax
c0014685:	57                   	push   edi
c0014686:	56                   	push   esi
c0014687:	51                   	push   ecx
c0014688:	e8 f7 75 ff ff       	call   c000bc84 <File::truncate(unsigned long long)>
c001468d:	83 c4 10             	add    esp,0x10
c0014690:	85 c0                	test   eax,eax
c0014692:	0f 95 c0             	setne  al
c0014695:	0f b6 c0             	movzx  eax,al
c0014698:	31 d2                	xor    edx,edx
c001469a:	83 c4 0c             	add    esp,0xc
c001469d:	5b                   	pop    ebx
c001469e:	5e                   	pop    esi
c001469f:	5f                   	pop    edi
c00146a0:	5d                   	pop    ebp
c00146a1:	c3                   	ret    

c00146a2 <SysWrite(regs*)>:
c00146a2:	57                   	push   edi
c00146a3:	56                   	push   esi
c00146a4:	53                   	push   ebx
c00146a5:	83 ec 10             	sub    esp,0x10
c00146a8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00146ac:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00146af:	83 f8 02             	cmp    eax,0x2
c00146b2:	77 10                	ja     c00146c4 <SysWrite(regs*)+0x22>
c00146b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146b9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00146bc:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00146c2:	eb 0e                	jmp    c00146d2 <SysWrite(regs*)+0x30>
c00146c4:	83 ec 0c             	sub    esp,0xc
c00146c7:	50                   	push   eax
c00146c8:	e8 fe 4d ff ff       	call   c00094cb <KeGetFileFromDescriptor(int)>
c00146cd:	83 c4 10             	add    esp,0x10
c00146d0:	89 c1                	mov    ecx,eax
c00146d2:	83 c8 ff             	or     eax,0xffffffff
c00146d5:	85 c9                	test   ecx,ecx
c00146d7:	89 c2                	mov    edx,eax
c00146d9:	74 28                	je     c0014703 <SysWrite(regs*)+0x61>
c00146db:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00146e3:	83 ec 0c             	sub    esp,0xc
c00146e6:	31 ff                	xor    edi,edi
c00146e8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00146ec:	8b 01                	mov    eax,DWORD PTR [ecx]
c00146ee:	52                   	push   edx
c00146ef:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00146f2:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00146f5:	57                   	push   edi
c00146f6:	56                   	push   esi
c00146f7:	51                   	push   ecx
c00146f8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00146fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00146ff:	83 c4 20             	add    esp,0x20
c0014702:	99                   	cdq    
c0014703:	83 c4 10             	add    esp,0x10
c0014706:	5b                   	pop    ebx
c0014707:	5e                   	pop    esi
c0014708:	5f                   	pop    edi
c0014709:	c3                   	ret    

c001470a <SysWsbe(regs*)>:
c001470a:	57                   	push   edi
c001470b:	b9 0b 00 00 00       	mov    ecx,0xb
c0014710:	56                   	push   esi
c0014711:	be 75 29 02 c0       	mov    esi,0xc0022975
c0014716:	53                   	push   ebx
c0014717:	83 ec 30             	sub    esp,0x30
c001471a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001471e:	fc                   	cld    
c001471f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014721:	83 ec 0c             	sub    esp,0xc
c0014724:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014728:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001472d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014730:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014736:	8b 06                	mov    eax,DWORD PTR [esi]
c0014738:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001473b:	57                   	push   edi
c001473c:	e8 3f be fe ff       	call   c0000580 <strlen>
c0014741:	5a                   	pop    edx
c0014742:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014746:	52                   	push   edx
c0014747:	31 d2                	xor    edx,edx
c0014749:	57                   	push   edi
c001474a:	52                   	push   edx
c001474b:	50                   	push   eax
c001474c:	56                   	push   esi
c001474d:	ff d3                	call   ebx
c001474f:	83 c4 14             	add    esp,0x14
c0014752:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014756:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014759:	e8 a6 23 00 00       	call   c0016b04 <terminateTask(int)>
c001475e:	83 c4 40             	add    esp,0x40
c0014761:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014766:	5b                   	pop    ebx
c0014767:	31 d2                	xor    edx,edx
c0014769:	5e                   	pop    esi
c001476a:	5f                   	pop    edi
c001476b:	c3                   	ret    

c001476c <SysYield(regs*)>:
c001476c:	83 ec 0c             	sub    esp,0xc
c001476f:	fa                   	cli    
c0014770:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014776:	e8 09 1a 00 00       	call   c0016184 <schedule()>
c001477b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014780:	48                   	dec    eax
c0014781:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014786:	75 01                	jne    c0014789 <SysYield(regs*)+0x1d>
c0014788:	fb                   	sti    
c0014789:	31 c0                	xor    eax,eax
c001478b:	31 d2                	xor    edx,edx
c001478d:	83 c4 0c             	add    esp,0xc
c0014790:	c3                   	ret    

c0014791 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0014791:	55                   	push   ebp
c0014792:	57                   	push   edi
c0014793:	56                   	push   esi
c0014794:	53                   	push   ebx
c0014795:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001479b:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00147a6:	74 3b                	je     c00147e3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00147a8:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00147b0:	74 31                	je     c00147e3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00147b2:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00147ba:	75 27                	jne    c00147e3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00147bc:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00147c3:	05 00 10 00 00       	add    eax,0x1000
c00147c8:	89 c2                	mov    edx,eax
c00147ca:	25 00 f0 ff ff       	and    eax,0xfffff000
c00147cf:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00147d6:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00147dc:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00147e3:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00147ea:	83 ec 0c             	sub    esp,0xc
c00147ed:	6a 01                	push   0x1
c00147ef:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00147f5:	e8 2b 4e ff ff       	call   c0009625 <Virt::allocateKernelVirtualPages(int)>
c00147fa:	83 c4 10             	add    esp,0x10
c00147fd:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014803:	89 c3                	mov    ebx,eax
c0014805:	0f 86 26 01 00 00    	jbe    c0014931 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c001480b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014813:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001481a:	c1 ee 0c             	shr    esi,0xc
c001481d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0014821:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014828:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c001482f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014833:	29 ef                	sub    edi,ebp
c0014835:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0014839:	0f 83 f9 00 00 00    	jae    c0014938 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c001483f:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0014845:	b8 00 10 00 00       	mov    eax,0x1000
c001484a:	0f 47 f8             	cmova  edi,eax
c001484d:	83 ec 0c             	sub    esp,0xc
c0014850:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014857:	31 d2                	xor    edx,edx
c0014859:	8b 08                	mov    ecx,DWORD PTR [eax]
c001485b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001485f:	50                   	push   eax
c0014860:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014864:	56                   	push   esi
c0014865:	52                   	push   edx
c0014866:	57                   	push   edi
c0014867:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001486e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014871:	83 c4 20             	add    esp,0x20
c0014874:	85 c0                	test   eax,eax
c0014876:	75 06                	jne    c001487e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0014878:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001487c:	74 13                	je     c0014891 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c001487e:	83 ec 0c             	sub    esp,0xc
c0014881:	53                   	push   ebx
c0014882:	e8 b2 50 ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0014887:	83 c4 10             	add    esp,0x10
c001488a:	31 c0                	xor    eax,eax
c001488c:	e9 7c 01 00 00       	jmp    c0014a0d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c0014891:	fa                   	cli    
c0014892:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014898:	e8 75 35 ff ff       	call   c0007e12 <Phys::allocatePage()>
c001489d:	6a 07                	push   0x7
c001489f:	53                   	push   ebx
c00148a0:	50                   	push   eax
c00148a1:	89 c7                	mov    edi,eax
c00148a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148a8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148ab:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148b1:	e8 78 54 ff ff       	call   c0009d2e <VAS::mapPage(unsigned long, unsigned long, int)>
c00148b6:	83 c4 0c             	add    esp,0xc
c00148b9:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00148c0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148c6:	6a 00                	push   0x0
c00148c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148cd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148d0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148d6:	e8 b9 52 ff ff       	call   c0009b94 <VAS::mapOtherVASIn(bool, VAS*)>
c00148db:	58                   	pop    eax
c00148dc:	5a                   	pop    edx
c00148dd:	68 07 0c 00 00       	push   0xc07
c00148e2:	55                   	push   ebp
c00148e3:	57                   	push   edi
c00148e4:	89 df                	mov    edi,ebx
c00148e6:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00148ed:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148f3:	6a 00                	push   0x0
c00148f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148fa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148fd:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014903:	e8 8a 56 ff ff       	call   c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014908:	b9 00 10 00 00       	mov    ecx,0x1000
c001490d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001490f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014914:	83 c4 20             	add    esp,0x20
c0014917:	48                   	dec    eax
c0014918:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001491d:	85 c0                	test   eax,eax
c001491f:	75 01                	jne    c0014922 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c0014921:	fb                   	sti    
c0014922:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014926:	81 c5 00 10 00 00    	add    ebp,0x1000
c001492c:	e9 f0 fe ff ff       	jmp    c0014821 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0014931:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014938:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001493f:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014945:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001494b:	0f 86 ae 00 00 00    	jbe    c00149ff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0014951:	fa                   	cli    
c0014952:	51                   	push   ecx
c0014953:	31 ff                	xor    edi,edi
c0014955:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001495c:	c1 ee 0c             	shr    esi,0xc
c001495f:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014965:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001496b:	6a 00                	push   0x0
c001496d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014972:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014975:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001497b:	e8 14 52 ff ff       	call   c0009b94 <VAS::mapOtherVASIn(bool, VAS*)>
c0014980:	83 c4 10             	add    esp,0x10
c0014983:	e8 8a 34 ff ff       	call   c0007e12 <Phys::allocatePage()>
c0014988:	47                   	inc    edi
c0014989:	6a 07                	push   0x7
c001498b:	53                   	push   ebx
c001498c:	50                   	push   eax
c001498d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014991:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014997:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001499a:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00149a0:	e8 89 53 ff ff       	call   c0009d2e <VAS::mapPage(unsigned long, unsigned long, int)>
c00149a5:	58                   	pop    eax
c00149a6:	5a                   	pop    edx
c00149a7:	68 07 0c 00 00       	push   0xc07
c00149ac:	55                   	push   ebp
c00149ad:	81 c5 00 10 00 00    	add    ebp,0x1000
c00149b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149b7:	50                   	push   eax
c00149b8:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00149bf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00149c5:	6a 00                	push   0x0
c00149c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149cc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00149cf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00149d5:	e8 b8 55 ff ff       	call   c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00149da:	83 c4 1c             	add    esp,0x1c
c00149dd:	68 00 10 00 00       	push   0x1000
c00149e2:	6a 00                	push   0x0
c00149e4:	53                   	push   ebx
c00149e5:	e8 06 bb fe ff       	call   c00004f0 <memset>
c00149ea:	83 c4 10             	add    esp,0x10
c00149ed:	39 fe                	cmp    esi,edi
c00149ef:	77 92                	ja     c0014983 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c00149f1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00149f6:	48                   	dec    eax
c00149f7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00149fc:	75 01                	jne    c00149ff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00149fe:	fb                   	sti    
c00149ff:	83 ec 0c             	sub    esp,0xc
c0014a02:	53                   	push   ebx
c0014a03:	e8 31 4f ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0014a08:	83 c4 10             	add    esp,0x10
c0014a0b:	b0 01                	mov    al,0x1
c0014a0d:	81 c4 2c 10 00 00    	add    esp,0x102c
c0014a13:	5b                   	pop    ebx
c0014a14:	5e                   	pop    esi
c0014a15:	5f                   	pop    edi
c0014a16:	5d                   	pop    ebp
c0014a17:	c3                   	ret    

c0014a18 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014a18:	55                   	push   ebp
c0014a19:	57                   	push   edi
c0014a1a:	56                   	push   esi
c0014a1b:	53                   	push   ebx
c0014a1c:	83 ec 48             	sub    esp,0x48
c0014a1f:	68 14 01 00 00       	push   0x114
c0014a24:	e8 da 30 ff ff       	call   c0007b03 <malloc>
c0014a29:	83 c4 0c             	add    esp,0xc
c0014a2c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014a30:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014a34:	89 c7                	mov    edi,eax
c0014a36:	50                   	push   eax
c0014a37:	e8 16 71 ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c0014a3c:	58                   	pop    eax
c0014a3d:	5a                   	pop    edx
c0014a3e:	6a 01                	push   0x1
c0014a40:	57                   	push   edi
c0014a41:	e8 2a 71 ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c0014a46:	83 c4 10             	add    esp,0x10
c0014a49:	85 c0                	test   eax,eax
c0014a4b:	0f 85 4c 01 00 00    	jne    c0014b9d <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a51:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014a59:	83 ec 0c             	sub    esp,0xc
c0014a5c:	6a 34                	push   0x34
c0014a5e:	e8 a0 30 ff ff       	call   c0007b03 <malloc>
c0014a63:	89 c3                	mov    ebx,eax
c0014a65:	58                   	pop    eax
c0014a66:	8b 07                	mov    eax,DWORD PTR [edi]
c0014a68:	8d 74 24 38          	lea    esi,[esp+0x38]
c0014a6c:	56                   	push   esi
c0014a6d:	53                   	push   ebx
c0014a6e:	6a 00                	push   0x0
c0014a70:	6a 34                	push   0x34
c0014a72:	57                   	push   edi
c0014a73:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014a76:	83 c4 20             	add    esp,0x20
c0014a79:	85 c0                	test   eax,eax
c0014a7b:	0f 85 1c 01 00 00    	jne    c0014b9d <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a81:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014a87:	0f 85 10 01 00 00    	jne    c0014b9d <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a8d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014a90:	85 c0                	test   eax,eax
c0014a92:	0f 84 05 01 00 00    	je     c0014b9d <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014a98:	31 d2                	xor    edx,edx
c0014a9a:	55                   	push   ebp
c0014a9b:	52                   	push   edx
c0014a9c:	50                   	push   eax
c0014a9d:	57                   	push   edi
c0014a9e:	e8 8b 71 ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0014aa3:	83 c4 10             	add    esp,0x10
c0014aa6:	85 c0                	test   eax,eax
c0014aa8:	0f 85 ef 00 00 00    	jne    c0014b9d <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014aae:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014ab1:	83 ec 0c             	sub    esp,0xc
c0014ab4:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014ab8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014abc:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014ac0:	0f af c2             	imul   eax,edx
c0014ac3:	50                   	push   eax
c0014ac4:	e8 3a 30 ff ff       	call   c0007b03 <malloc>
c0014ac9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014acb:	89 34 24             	mov    DWORD PTR [esp],esi
c0014ace:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014ad2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014ad6:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014ada:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014ade:	0f af c2             	imul   eax,edx
c0014ae1:	99                   	cdq    
c0014ae2:	52                   	push   edx
c0014ae3:	50                   	push   eax
c0014ae4:	57                   	push   edi
c0014ae5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ae8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014aeb:	83 c4 20             	add    esp,0x20
c0014aee:	85 c0                	test   eax,eax
c0014af0:	0f 84 a7 00 00 00    	je     c0014b9d <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014af6:	31 d2                	xor    edx,edx
c0014af8:	51                   	push   ecx
c0014af9:	52                   	push   edx
c0014afa:	50                   	push   eax
c0014afb:	57                   	push   edi
c0014afc:	e8 2d 71 ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0014b01:	83 c4 10             	add    esp,0x10
c0014b04:	85 c0                	test   eax,eax
c0014b06:	0f 85 91 00 00 00    	jne    c0014b9d <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014b0c:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014b10:	83 ec 0c             	sub    esp,0xc
c0014b13:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014b17:	0f af c2             	imul   eax,edx
c0014b1a:	50                   	push   eax
c0014b1b:	e8 e3 2f ff ff       	call   c0007b03 <malloc>
c0014b20:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014b22:	89 34 24             	mov    DWORD PTR [esp],esi
c0014b25:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014b29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b2d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014b31:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014b35:	0f af c2             	imul   eax,edx
c0014b38:	99                   	cdq    
c0014b39:	52                   	push   edx
c0014b3a:	50                   	push   eax
c0014b3b:	57                   	push   edi
c0014b3c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b3f:	83 c4 20             	add    esp,0x20
c0014b42:	31 c9                	xor    ecx,ecx
c0014b44:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014b4c:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0014b50:	0f b7 e9             	movzx  ebp,cx
c0014b53:	0f 83 86 00 00 00    	jae    c0014bdf <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0014b59:	c1 e5 05             	shl    ebp,0x5
c0014b5c:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0014b60:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0014b64:	75 73                	jne    c0014bd9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0014b66:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014b6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b6d:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0014b70:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b74:	52                   	push   edx
c0014b75:	31 d2                	xor    edx,edx
c0014b77:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014b7a:	52                   	push   edx
c0014b7b:	50                   	push   eax
c0014b7c:	57                   	push   edi
c0014b7d:	e8 ac 70 ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0014b82:	83 c4 10             	add    esp,0x10
c0014b85:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014b89:	85 c0                	test   eax,eax
c0014b8b:	74 17                	je     c0014ba4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0014b8d:	83 ec 0c             	sub    esp,0xc
c0014b90:	68 a1 29 02 c0       	push   0xc00229a1
c0014b95:	e8 a0 5d ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0014b9a:	83 c4 10             	add    esp,0x10
c0014b9d:	31 c0                	xor    eax,eax
c0014b9f:	e9 8b 00 00 00       	jmp    c0014c2f <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0014ba4:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014ba8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0014bab:	83 ec 0c             	sub    esp,0xc
c0014bae:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0014bb1:	50                   	push   eax
c0014bb2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014bb6:	56                   	push   esi
c0014bb7:	57                   	push   edi
c0014bb8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014bbc:	e8 d0 fb ff ff       	call   c0014791 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014bc1:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014bc5:	83 c4 20             	add    esp,0x20
c0014bc8:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0014bcc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014bd0:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0014bd5:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014bd9:	41                   	inc    ecx
c0014bda:	e9 6d ff ff ff       	jmp    c0014b4c <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014bdf:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014be3:	83 ec 0c             	sub    esp,0xc
c0014be6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014bea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bee:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0014bf4:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0014bfa:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014bff:	05 00 10 00 00       	add    eax,0x1000
c0014c04:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014c07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c0b:	e8 03 2f ff ff       	call   c0007b13 <free>
c0014c10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c13:	e8 fb 2e ff ff       	call   c0007b13 <free>
c0014c18:	58                   	pop    eax
c0014c19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c1d:	e8 f1 2e ff ff       	call   c0007b13 <free>
c0014c22:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014c25:	e8 a4 6f ff ff       	call   c000bbce <File::close()>
c0014c2a:	83 c4 10             	add    esp,0x10
c0014c2d:	b0 01                	mov    al,0x1
c0014c2f:	83 c4 3c             	add    esp,0x3c
c0014c32:	5b                   	pop    ebx
c0014c33:	5e                   	pop    esi
c0014c34:	5f                   	pop    edi
c0014c35:	5d                   	pop    ebp
c0014c36:	c3                   	ret    

c0014c37 <Thr::runtimeReferenceHelper()>:
c0014c37:	83 ec 18             	sub    esp,0x18
c0014c3a:	68 a9 29 02 c0       	push   0xc00229a9
c0014c3f:	e8 f6 5c ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0014c44:	fa                   	cli    
c0014c45:	83 c4 10             	add    esp,0x10
c0014c48:	eb fe                	jmp    c0014c48 <Thr::runtimeReferenceHelper()+0x11>

c0014c4a <Thr::getAddressOfKernelSymbol(char const*)>:
c0014c4a:	57                   	push   edi
c0014c4b:	56                   	push   esi
c0014c4c:	53                   	push   ebx
c0014c4d:	31 db                	xor    ebx,ebx
c0014c4f:	39 1d a0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6a0,ebx
c0014c55:	7e 3c                	jle    c0014c93 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014c57:	8b 34 9d 20 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd39e0]
c0014c5e:	31 ff                	xor    edi,edi
c0014c60:	39 3c 9d 20 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3ae0],edi
c0014c67:	7e 27                	jle    c0014c90 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014c69:	50                   	push   eax
c0014c6a:	50                   	push   eax
c0014c6b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c6f:	8b 06                	mov    eax,DWORD PTR [esi]
c0014c71:	03 04 9d a0 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a60]
c0014c78:	50                   	push   eax
c0014c79:	e8 02 bb fe ff       	call   c0000780 <strcmp>
c0014c7e:	83 c4 10             	add    esp,0x10
c0014c81:	85 c0                	test   eax,eax
c0014c83:	75 05                	jne    c0014c8a <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014c85:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014c88:	eb 0b                	jmp    c0014c95 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014c8a:	83 c6 10             	add    esi,0x10
c0014c8d:	47                   	inc    edi
c0014c8e:	eb d0                	jmp    c0014c60 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014c90:	43                   	inc    ebx
c0014c91:	eb bc                	jmp    c0014c4f <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014c93:	31 c0                	xor    eax,eax
c0014c95:	5b                   	pop    ebx
c0014c96:	5e                   	pop    esi
c0014c97:	5f                   	pop    edi
c0014c98:	c3                   	ret    

c0014c99 <Thr::loadKernelSymbolTable(char const*)>:
c0014c99:	55                   	push   ebp
c0014c9a:	57                   	push   edi
c0014c9b:	56                   	push   esi
c0014c9c:	53                   	push   ebx
c0014c9d:	83 ec 68             	sub    esp,0x68
c0014ca0:	68 14 01 00 00       	push   0x114
c0014ca5:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014cab:	e8 53 2e ff ff       	call   c0007b03 <malloc>
c0014cb0:	83 c4 0c             	add    esp,0xc
c0014cb3:	56                   	push   esi
c0014cb4:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014cb8:	89 c3                	mov    ebx,eax
c0014cba:	50                   	push   eax
c0014cbb:	e8 92 6e ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c0014cc0:	5e                   	pop    esi
c0014cc1:	5f                   	pop    edi
c0014cc2:	6a 01                	push   0x1
c0014cc4:	53                   	push   ebx
c0014cc5:	e8 a6 6e ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c0014cca:	83 c4 10             	add    esp,0x10
c0014ccd:	85 c0                	test   eax,eax
c0014ccf:	74 0a                	je     c0014cdb <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014cd1:	83 ec 0c             	sub    esp,0xc
c0014cd4:	68 cb 29 02 c0       	push   0xc00229cb
c0014cd9:	eb 34                	jmp    c0014d0f <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014cdb:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014ce3:	83 ec 0c             	sub    esp,0xc
c0014ce6:	6a 34                	push   0x34
c0014ce8:	e8 16 2e ff ff       	call   c0007b03 <malloc>
c0014ced:	59                   	pop    ecx
c0014cee:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014cf2:	89 c7                	mov    edi,eax
c0014cf4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014cf6:	56                   	push   esi
c0014cf7:	57                   	push   edi
c0014cf8:	6a 00                	push   0x0
c0014cfa:	6a 34                	push   0x34
c0014cfc:	53                   	push   ebx
c0014cfd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d00:	83 c4 20             	add    esp,0x20
c0014d03:	85 c0                	test   eax,eax
c0014d05:	74 17                	je     c0014d1e <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014d07:	83 ec 0c             	sub    esp,0xc
c0014d0a:	68 e2 29 02 c0       	push   0xc00229e2
c0014d0f:	e8 43 c9 ff ff       	call   c0011657 <KePanic(char const*)>
c0014d14:	83 c4 10             	add    esp,0x10
c0014d17:	31 c0                	xor    eax,eax
c0014d19:	e9 31 02 00 00       	jmp    c0014f4f <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014d1e:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014d24:	75 e1                	jne    c0014d07 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014d26:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014d29:	85 c0                	test   eax,eax
c0014d2b:	74 da                	je     c0014d07 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014d2d:	52                   	push   edx
c0014d2e:	31 d2                	xor    edx,edx
c0014d30:	52                   	push   edx
c0014d31:	50                   	push   eax
c0014d32:	53                   	push   ebx
c0014d33:	e8 f6 6e ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0014d38:	83 c4 10             	add    esp,0x10
c0014d3b:	85 c0                	test   eax,eax
c0014d3d:	75 c8                	jne    c0014d07 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014d3f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014d43:	83 ec 0c             	sub    esp,0xc
c0014d46:	31 ed                	xor    ebp,ebp
c0014d48:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014d4c:	0f af c2             	imul   eax,edx
c0014d4f:	50                   	push   eax
c0014d50:	e8 ae 2d ff ff       	call   c0007b03 <malloc>
c0014d55:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014d57:	89 34 24             	mov    DWORD PTR [esp],esi
c0014d5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d5e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014d62:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014d66:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014d6a:	0f af c2             	imul   eax,edx
c0014d6d:	99                   	cdq    
c0014d6e:	52                   	push   edx
c0014d6f:	50                   	push   eax
c0014d70:	53                   	push   ebx
c0014d71:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d74:	83 c4 20             	add    esp,0x20
c0014d77:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014d7f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014d87:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014d8f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d97:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014d9b:	0f b7 f5             	movzx  esi,bp
c0014d9e:	0f 83 a7 00 00 00    	jae    c0014e4b <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014da4:	6b f6 28             	imul   esi,esi,0x28
c0014da7:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014dab:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014dae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014db2:	50                   	push   eax
c0014db3:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014db7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014dbb:	8b 16                	mov    edx,DWORD PTR [esi]
c0014dbd:	6b c0 28             	imul   eax,eax,0x28
c0014dc0:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014dc4:	89 d0                	mov    eax,edx
c0014dc6:	31 d2                	xor    edx,edx
c0014dc8:	52                   	push   edx
c0014dc9:	50                   	push   eax
c0014dca:	53                   	push   ebx
c0014dcb:	e8 5e 6e ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0014dd0:	83 c4 0c             	add    esp,0xc
c0014dd3:	6a 20                	push   0x20
c0014dd5:	6a 00                	push   0x0
c0014dd7:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014ddb:	52                   	push   edx
c0014ddc:	e8 0f b7 fe ff       	call   c00004f0 <memset>
c0014de1:	58                   	pop    eax
c0014de2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014de4:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014de8:	51                   	push   ecx
c0014de9:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014ded:	52                   	push   edx
c0014dee:	6a 00                	push   0x0
c0014df0:	6a 1f                	push   0x1f
c0014df2:	53                   	push   ebx
c0014df3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014df6:	83 c4 18             	add    esp,0x18
c0014df9:	68 f9 29 02 c0       	push   0xc00229f9
c0014dfe:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014e02:	52                   	push   edx
c0014e03:	e8 78 b9 fe ff       	call   c0000780 <strcmp>
c0014e08:	83 c4 10             	add    esp,0x10
c0014e0b:	85 c0                	test   eax,eax
c0014e0d:	75 0f                	jne    c0014e1e <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014e0f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014e12:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014e16:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014e1e:	50                   	push   eax
c0014e1f:	50                   	push   eax
c0014e20:	68 01 2a 02 c0       	push   0xc0022a01
c0014e25:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014e29:	50                   	push   eax
c0014e2a:	e8 51 b9 fe ff       	call   c0000780 <strcmp>
c0014e2f:	83 c4 10             	add    esp,0x10
c0014e32:	85 c0                	test   eax,eax
c0014e34:	75 0f                	jne    c0014e45 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014e36:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014e39:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014e3d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e41:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014e45:	45                   	inc    ebp
c0014e46:	e9 4c ff ff ff       	jmp    c0014d97 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014e4b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014e50:	75 10                	jne    c0014e62 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014e52:	83 ec 0c             	sub    esp,0xc
c0014e55:	68 09 2a 02 c0       	push   0xc0022a09
c0014e5a:	e8 f8 c7 ff ff       	call   c0011657 <KePanic(char const*)>
c0014e5f:	83 c4 10             	add    esp,0x10
c0014e62:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014e67:	75 10                	jne    c0014e79 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014e69:	83 ec 0c             	sub    esp,0xc
c0014e6c:	68 09 2a 02 c0       	push   0xc0022a09
c0014e71:	e8 e1 c7 ff ff       	call   c0011657 <KePanic(char const*)>
c0014e76:	83 c4 10             	add    esp,0x10
c0014e79:	50                   	push   eax
c0014e7a:	31 d2                	xor    edx,edx
c0014e7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e80:	52                   	push   edx
c0014e81:	50                   	push   eax
c0014e82:	53                   	push   ebx
c0014e83:	e8 a6 6d ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0014e88:	5a                   	pop    edx
c0014e89:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014e8d:	e8 71 2c ff ff       	call   c0007b03 <malloc>
c0014e92:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014e96:	31 c9                	xor    ecx,ecx
c0014e98:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014e9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e9e:	5e                   	pop    esi
c0014e9f:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014ea3:	55                   	push   ebp
c0014ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ea8:	51                   	push   ecx
c0014ea9:	52                   	push   edx
c0014eaa:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014eae:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014eb2:	53                   	push   ebx
c0014eb3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014eb6:	83 c4 14             	add    esp,0x14
c0014eb9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014ebd:	e8 41 2c ff ff       	call   c0007b03 <malloc>
c0014ec2:	89 c6                	mov    esi,eax
c0014ec4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ec6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014ec9:	56                   	push   esi
c0014eca:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014ece:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014ed2:	51                   	push   ecx
c0014ed3:	52                   	push   edx
c0014ed4:	53                   	push   ebx
c0014ed5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ed8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014edc:	83 c4 1c             	add    esp,0x1c
c0014edf:	8b 15 a0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a0
c0014ee5:	c1 e8 04             	shr    eax,0x4
c0014ee8:	89 04 95 20 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3ae0],eax
c0014eef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014ef3:	31 d2                	xor    edx,edx
c0014ef5:	52                   	push   edx
c0014ef6:	50                   	push   eax
c0014ef7:	53                   	push   ebx
c0014ef8:	e8 31 6d ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0014efd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014eff:	31 d2                	xor    edx,edx
c0014f01:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014f04:	56                   	push   esi
c0014f05:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014f09:	52                   	push   edx
c0014f0a:	50                   	push   eax
c0014f0b:	53                   	push   ebx
c0014f0c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f0f:	83 c4 14             	add    esp,0x14
c0014f12:	53                   	push   ebx
c0014f13:	e8 b6 6c ff ff       	call   c000bbce <File::close()>
c0014f18:	5d                   	pop    ebp
c0014f19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014f1d:	e8 f1 2b ff ff       	call   c0007b13 <free>
c0014f22:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014f25:	e8 e9 2b ff ff       	call   c0007b13 <free>
c0014f2a:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0014f2f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014f33:	83 c4 10             	add    esp,0x10
c0014f36:	89 34 85 a0 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a60],esi
c0014f3d:	8d 50 01             	lea    edx,[eax+0x1]
c0014f40:	89 0c 85 20 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39e0],ecx
c0014f47:	b0 01                	mov    al,0x1
c0014f49:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0014f4f:	83 c4 5c             	add    esp,0x5c
c0014f52:	5b                   	pop    ebx
c0014f53:	5e                   	pop    esi
c0014f54:	5f                   	pop    edi
c0014f55:	5d                   	pop    ebp
c0014f56:	c3                   	ret    

c0014f57 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014f57:	55                   	push   ebp
c0014f58:	57                   	push   edi
c0014f59:	56                   	push   esi
c0014f5a:	53                   	push   ebx
c0014f5b:	81 ec 68 03 00 00    	sub    esp,0x368
c0014f61:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014f68:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014f6e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0014f72:	68 14 01 00 00       	push   0x114
c0014f77:	e8 87 2b ff ff       	call   c0007b03 <malloc>
c0014f7c:	83 c4 0c             	add    esp,0xc
c0014f7f:	56                   	push   esi
c0014f80:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014f87:	50                   	push   eax
c0014f88:	89 c3                	mov    ebx,eax
c0014f8a:	e8 c3 6b ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c0014f8f:	5f                   	pop    edi
c0014f90:	5d                   	pop    ebp
c0014f91:	6a 01                	push   0x1
c0014f93:	53                   	push   ebx
c0014f94:	e8 d7 6b ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c0014f99:	83 c4 10             	add    esp,0x10
c0014f9c:	85 c0                	test   eax,eax
c0014f9e:	0f 85 b3 06 00 00    	jne    c0015657 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014fa4:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014fac:	83 ec 0c             	sub    esp,0xc
c0014faf:	6a 34                	push   0x34
c0014fb1:	e8 4d 2b ff ff       	call   c0007b03 <malloc>
c0014fb6:	5e                   	pop    esi
c0014fb7:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014fbb:	89 c5                	mov    ebp,eax
c0014fbd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014fbf:	56                   	push   esi
c0014fc0:	55                   	push   ebp
c0014fc1:	6a 00                	push   0x0
c0014fc3:	6a 34                	push   0x34
c0014fc5:	53                   	push   ebx
c0014fc6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014fc9:	83 c4 20             	add    esp,0x20
c0014fcc:	85 c0                	test   eax,eax
c0014fce:	0f 85 83 06 00 00    	jne    c0015657 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014fd4:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0014fdb:	0f 85 76 06 00 00    	jne    c0015657 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014fe1:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0014fe4:	85 c0                	test   eax,eax
c0014fe6:	0f 84 6b 06 00 00    	je     c0015657 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014fec:	31 d2                	xor    edx,edx
c0014fee:	51                   	push   ecx
c0014fef:	52                   	push   edx
c0014ff0:	50                   	push   eax
c0014ff1:	53                   	push   ebx
c0014ff2:	e8 37 6c ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0014ff7:	83 c4 10             	add    esp,0x10
c0014ffa:	85 c0                	test   eax,eax
c0014ffc:	0f 85 55 06 00 00    	jne    c0015657 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015002:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0015005:	83 ec 0c             	sub    esp,0xc
c0015008:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001500c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015010:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0015014:	0f af c2             	imul   eax,edx
c0015017:	50                   	push   eax
c0015018:	e8 e6 2a ff ff       	call   c0007b03 <malloc>
c001501d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001501f:	89 34 24             	mov    DWORD PTR [esp],esi
c0015022:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015026:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001502a:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001502e:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0015032:	0f af c2             	imul   eax,edx
c0015035:	99                   	cdq    
c0015036:	52                   	push   edx
c0015037:	50                   	push   eax
c0015038:	53                   	push   ebx
c0015039:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001503c:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c001503f:	83 c4 20             	add    esp,0x20
c0015042:	85 c0                	test   eax,eax
c0015044:	0f 84 0d 06 00 00    	je     c0015657 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001504a:	52                   	push   edx
c001504b:	31 d2                	xor    edx,edx
c001504d:	52                   	push   edx
c001504e:	50                   	push   eax
c001504f:	53                   	push   ebx
c0015050:	e8 d9 6b ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0015055:	83 c4 10             	add    esp,0x10
c0015058:	85 c0                	test   eax,eax
c001505a:	0f 85 f7 05 00 00    	jne    c0015657 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015060:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0015064:	83 ec 0c             	sub    esp,0xc
c0015067:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001506b:	0f af c2             	imul   eax,edx
c001506e:	50                   	push   eax
c001506f:	e8 8f 2a ff ff       	call   c0007b03 <malloc>
c0015074:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015076:	89 34 24             	mov    DWORD PTR [esp],esi
c0015079:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001507d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015081:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0015085:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0015089:	0f af c2             	imul   eax,edx
c001508c:	99                   	cdq    
c001508d:	52                   	push   edx
c001508e:	50                   	push   eax
c001508f:	53                   	push   ebx
c0015090:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015093:	83 c4 20             	add    esp,0x20
c0015096:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001509c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001509f:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c00150a3:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c00150a7:	73 78                	jae    c0015121 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c00150a9:	c1 e7 05             	shl    edi,0x5
c00150ac:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c00150b0:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00150b3:	75 63                	jne    c0015118 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c00150b5:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00150b8:	31 d2                	xor    edx,edx
c00150ba:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c00150bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00150c1:	50                   	push   eax
c00150c2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00150c5:	52                   	push   edx
c00150c6:	50                   	push   eax
c00150c7:	53                   	push   ebx
c00150c8:	e8 61 6b ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c00150cd:	83 c4 10             	add    esp,0x10
c00150d0:	85 c0                	test   eax,eax
c00150d2:	0f 85 7f 05 00 00    	jne    c0015657 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00150d8:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00150df:	83 ec 0c             	sub    esp,0xc
c00150e2:	31 d2                	xor    edx,edx
c00150e4:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00150e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00150ea:	01 c6                	add    esi,eax
c00150ec:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00150f3:	50                   	push   eax
c00150f4:	56                   	push   esi
c00150f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150f9:	52                   	push   edx
c00150fa:	50                   	push   eax
c00150fb:	53                   	push   ebx
c00150fc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00150ff:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015102:	83 c4 1c             	add    esp,0x1c
c0015105:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0015108:	50                   	push   eax
c0015109:	6a 00                	push   0x0
c001510b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001510f:	56                   	push   esi
c0015110:	e8 db b3 fe ff       	call   c00004f0 <memset>
c0015115:	83 c4 10             	add    esp,0x10
c0015118:	66 ff 04 24          	inc    WORD PTR [esp]
c001511c:	e9 7b ff ff ff       	jmp    c001509c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0015121:	50                   	push   eax
c0015122:	68 00 01 00 00       	push   0x100
c0015127:	6a 00                	push   0x0
c0015129:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001512d:	50                   	push   eax
c001512e:	e8 bd b3 fe ff       	call   c00004f0 <memset>
c0015133:	83 c4 0c             	add    esp,0xc
c0015136:	68 00 01 00 00       	push   0x100
c001513b:	6a 00                	push   0x0
c001513d:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0015144:	50                   	push   eax
c0015145:	e8 a6 b3 fe ff       	call   c00004f0 <memset>
c001514a:	83 c4 10             	add    esp,0x10
c001514d:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0015154:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001515b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015163:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001516b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015173:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001517b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001517f:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0015183:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0015188:	0f 83 16 01 00 00    	jae    c00152a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c001518e:	6b ff 28             	imul   edi,edi,0x28
c0015191:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0015195:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0015198:	51                   	push   ecx
c0015199:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c001519d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00151a1:	8b 07                	mov    eax,DWORD PTR [edi]
c00151a3:	6b d2 28             	imul   edx,edx,0x28
c00151a6:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00151aa:	31 d2                	xor    edx,edx
c00151ac:	52                   	push   edx
c00151ad:	50                   	push   eax
c00151ae:	53                   	push   ebx
c00151af:	e8 7a 6a ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c00151b4:	83 c4 0c             	add    esp,0xc
c00151b7:	6a 20                	push   0x20
c00151b9:	6a 00                	push   0x0
c00151bb:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00151c2:	51                   	push   ecx
c00151c3:	e8 28 b3 fe ff       	call   c00004f0 <memset>
c00151c8:	58                   	pop    eax
c00151c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00151cb:	8d 54 24 58          	lea    edx,[esp+0x58]
c00151cf:	52                   	push   edx
c00151d0:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00151d7:	51                   	push   ecx
c00151d8:	6a 00                	push   0x0
c00151da:	6a 1f                	push   0x1f
c00151dc:	53                   	push   ebx
c00151dd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00151e0:	83 c4 1c             	add    esp,0x1c
c00151e3:	6a 09                	push   0x9
c00151e5:	68 23 2a 02 c0       	push   0xc0022a23
c00151ea:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00151f1:	51                   	push   ecx
c00151f2:	e8 89 b1 fe ff       	call   c0000380 <memcmp>
c00151f7:	83 c4 10             	add    esp,0x10
c00151fa:	85 c0                	test   eax,eax
c00151fc:	75 1a                	jne    c0015218 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c00151fe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015201:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0015204:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0015208:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001520b:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015212:	89 d0                	mov    eax,edx
c0015214:	40                   	inc    eax
c0015215:	89 04 24             	mov    DWORD PTR [esp],eax
c0015218:	52                   	push   edx
c0015219:	6a 09                	push   0x9
c001521b:	68 2d 2a 02 c0       	push   0xc0022a2d
c0015220:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015227:	50                   	push   eax
c0015228:	e8 53 b1 fe ff       	call   c0000380 <memcmp>
c001522d:	83 c4 10             	add    esp,0x10
c0015230:	85 c0                	test   eax,eax
c0015232:	75 1a                	jne    c001524e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0015234:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015237:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001523a:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c001523e:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015241:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0015248:	89 c8                	mov    eax,ecx
c001524a:	40                   	inc    eax
c001524b:	89 04 24             	mov    DWORD PTR [esp],eax
c001524e:	50                   	push   eax
c001524f:	50                   	push   eax
c0015250:	68 f9 29 02 c0       	push   0xc00229f9
c0015255:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001525c:	50                   	push   eax
c001525d:	e8 1e b5 fe ff       	call   c0000780 <strcmp>
c0015262:	83 c4 10             	add    esp,0x10
c0015265:	85 c0                	test   eax,eax
c0015267:	75 0b                	jne    c0015274 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0015269:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001526d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015270:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015274:	50                   	push   eax
c0015275:	50                   	push   eax
c0015276:	68 01 2a 02 c0       	push   0xc0022a01
c001527b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015282:	50                   	push   eax
c0015283:	e8 f8 b4 fe ff       	call   c0000780 <strcmp>
c0015288:	83 c4 10             	add    esp,0x10
c001528b:	85 c0                	test   eax,eax
c001528d:	75 0b                	jne    c001529a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c001528f:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0015293:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015296:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001529a:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c001529f:	e9 d7 fe ff ff       	jmp    c001517b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c00152a4:	50                   	push   eax
c00152a5:	31 d2                	xor    edx,edx
c00152a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152ab:	52                   	push   edx
c00152ac:	50                   	push   eax
c00152ad:	53                   	push   ebx
c00152ae:	e8 7b 69 ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c00152b3:	58                   	pop    eax
c00152b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00152b8:	e8 46 28 ff ff       	call   c0007b03 <malloc>
c00152bd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00152bf:	31 d2                	xor    edx,edx
c00152c1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00152c5:	58                   	pop    eax
c00152c6:	8d 74 24 54          	lea    esi,[esp+0x54]
c00152ca:	56                   	push   esi
c00152cb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00152cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152d3:	52                   	push   edx
c00152d4:	50                   	push   eax
c00152d5:	53                   	push   ebx
c00152d6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00152d9:	83 c4 14             	add    esp,0x14
c00152dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152e0:	e8 1e 28 ff ff       	call   c0007b03 <malloc>
c00152e5:	31 d2                	xor    edx,edx
c00152e7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00152eb:	83 c4 0c             	add    esp,0xc
c00152ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152f2:	52                   	push   edx
c00152f3:	50                   	push   eax
c00152f4:	53                   	push   ebx
c00152f5:	e8 34 69 ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c00152fa:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00152fc:	31 d2                	xor    edx,edx
c00152fe:	89 34 24             	mov    DWORD PTR [esp],esi
c0015301:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015305:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015309:	52                   	push   edx
c001530a:	50                   	push   eax
c001530b:	53                   	push   ebx
c001530c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001530f:	83 c4 20             	add    esp,0x20
c0015312:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0015317:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001531f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015323:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015327:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001532a:	0f 84 2b 03 00 00    	je     c001565b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0015330:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0015337:	31 d2                	xor    edx,edx
c0015339:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001533d:	c1 e8 03             	shr    eax,0x3
c0015340:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0015344:	51                   	push   ecx
c0015345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015349:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001534d:	52                   	push   edx
c001534e:	50                   	push   eax
c001534f:	53                   	push   ebx
c0015350:	e8 d9 68 ff ff       	call   c000bc2e <File::seek(unsigned long long)>
c0015355:	5e                   	pop    esi
c0015356:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001535a:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0015361:	e8 9d 27 ff ff       	call   c0007b03 <malloc>
c0015366:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015368:	31 d2                	xor    edx,edx
c001536a:	89 c7                	mov    edi,eax
c001536c:	58                   	pop    eax
c001536d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015371:	50                   	push   eax
c0015372:	57                   	push   edi
c0015373:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015377:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001537e:	52                   	push   edx
c001537f:	50                   	push   eax
c0015380:	53                   	push   ebx
c0015381:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015384:	83 c4 20             	add    esp,0x20
c0015387:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001538f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015393:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0015397:	0f 8d a5 02 00 00    	jge    c0015642 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c001539d:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c00153a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00153a6:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c00153a9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00153ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00153b1:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c00153b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00153b9:	c1 e8 08             	shr    eax,0x8
c00153bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00153c0:	89 c2                	mov    edx,eax
c00153c2:	c1 e2 04             	shl    edx,0x4
c00153c5:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c00153c9:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00153cc:	85 f6                	test   esi,esi
c00153ce:	0f 85 cf 00 00 00    	jne    c00154a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00153d4:	83 ec 0c             	sub    esp,0xc
c00153d7:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00153db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00153df:	03 02                	add    eax,DWORD PTR [edx]
c00153e1:	50                   	push   eax
c00153e2:	e8 63 f8 ff ff       	call   c0014c4a <Thr::getAddressOfKernelSymbol(char const*)>
c00153e7:	83 c4 10             	add    esp,0x10
c00153ea:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00153ee:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c00153f3:	85 c0                	test   eax,eax
c00153f5:	89 c6                	mov    esi,eax
c00153f7:	0f 85 a6 00 00 00    	jne    c00154a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00153fd:	83 ec 0c             	sub    esp,0xc
c0015400:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0015404:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015408:	03 02                	add    eax,DWORD PTR [edx]
c001540a:	50                   	push   eax
c001540b:	e8 30 c4 ff ff       	call   c0011840 <KeResolveCompatibilitySymbol(char*)>
c0015410:	83 c4 10             	add    esp,0x10
c0015413:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015417:	85 c0                	test   eax,eax
c0015419:	89 c6                	mov    esi,eax
c001541b:	0f 85 82 00 00 00    	jne    c00154a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0015421:	50                   	push   eax
c0015422:	50                   	push   eax
c0015423:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015427:	03 02                	add    eax,DWORD PTR [edx]
c0015429:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001542d:	50                   	push   eax
c001542e:	68 37 2a 02 c0       	push   0xc0022a37
c0015433:	e8 02 55 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0015438:	58                   	pop    eax
c0015439:	5a                   	pop    edx
c001543a:	68 51 2a 02 c0       	push   0xc0022a51
c001543f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015446:	51                   	push   ecx
c0015447:	e8 04 b2 fe ff       	call   c0000650 <strcpy>
c001544c:	59                   	pop    ecx
c001544d:	58                   	pop    eax
c001544e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015452:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015456:	03 02                	add    eax,DWORD PTR [edx]
c0015458:	50                   	push   eax
c0015459:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015460:	51                   	push   ecx
c0015461:	e8 0a b4 fe ff       	call   c0000870 <strcat>
c0015466:	58                   	pop    eax
c0015467:	5a                   	pop    edx
c0015468:	68 e7 2a 02 c0       	push   0xc0022ae7
c001546d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015474:	51                   	push   ecx
c0015475:	e8 f6 b3 fe ff       	call   c0000870 <strcat>
c001547a:	83 c4 10             	add    esp,0x10
c001547d:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015482:	0f 84 77 01 00 00    	je     c00155ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015488:	83 ec 0c             	sub    esp,0xc
c001548b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015492:	51                   	push   ecx
c0015493:	e8 bf c1 ff ff       	call   c0011657 <KePanic(char const*)>
c0015498:	83 c4 10             	add    esp,0x10
c001549b:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001549f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00154a3:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00154a8:	83 f8 01             	cmp    eax,0x1
c00154ab:	0f 85 9b 00 00 00    	jne    c001554c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c00154b1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00154b5:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c00154bc:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c00154c0:	01 d0                	add    eax,edx
c00154c2:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c00154ca:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00154ce:	0f 94 c0             	sete   al
c00154d1:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c00154d9:	0f 94 c1             	sete   cl
c00154dc:	09 c1                	or     ecx,eax
c00154de:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00154e2:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00154e7:	0f b6 c9             	movzx  ecx,cl
c00154ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ec:	74 41                	je     c001552f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c00154ee:	8d 14 06             	lea    edx,[esi+eax*1]
c00154f1:	85 c9                	test   ecx,ecx
c00154f3:	75 15                	jne    c001550a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c00154f5:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00154f9:	66 83 f8 0c          	cmp    ax,0xc
c00154fd:	76 05                	jbe    c0015504 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00154ff:	b8 0c 00 00 00       	mov    eax,0xc
c0015504:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0015508:	76 37                	jbe    c0015541 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c001550a:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001550f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0015513:	0f 84 e6 00 00 00    	je     c00155ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015519:	83 ec 0c             	sub    esp,0xc
c001551c:	68 68 2a 02 c0       	push   0xc0022a68
c0015521:	e8 31 c1 ff ff       	call   c0011657 <KePanic(char const*)>
c0015526:	83 c4 10             	add    esp,0x10
c0015529:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001552d:	eb 12                	jmp    c0015541 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c001552f:	01 c2                	add    edx,eax
c0015531:	85 c9                	test   ecx,ecx
c0015533:	75 0c                	jne    c0015541 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0015535:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0015539:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c001553d:	77 02                	ja     c0015541 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c001553f:	01 f2                	add    edx,esi
c0015541:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015545:	89 10                	mov    DWORD PTR [eax],edx
c0015547:	e9 ed 00 00 00       	jmp    c0015639 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c001554c:	83 f8 02             	cmp    eax,0x2
c001554f:	0f 85 81 00 00 00    	jne    c00155d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0015555:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001555c:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0015560:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0015564:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c001556c:	74 21                	je     c001558f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c001556e:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0015576:	74 17                	je     c001558f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0015578:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c001557c:	ba 0a 00 00 00       	mov    edx,0xa
c0015581:	83 f9 0e             	cmp    ecx,0xe
c0015584:	77 03                	ja     c0015589 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0015586:	8d 51 fc             	lea    edx,[ecx-0x4]
c0015589:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c001558d:	76 1f                	jbe    c00155ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c001558f:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0015594:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015598:	74 65                	je     c00155ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c001559a:	83 ec 0c             	sub    esp,0xc
c001559d:	68 84 2a 02 c0       	push   0xc0022a84
c00155a2:	e8 b0 c0 ff ff       	call   c0011657 <KePanic(char const*)>
c00155a7:	83 c4 10             	add    esp,0x10
c00155aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00155ae:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00155b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00155b5:	74 15                	je     c00155cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c00155b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00155bb:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00155c2:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c00155c6:	01 d1                	add    ecx,edx
c00155c8:	01 ce                	add    esi,ecx
c00155ca:	eb 06                	jmp    c00155d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c00155cc:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c00155d0:	01 d6                	add    esi,edx
c00155d2:	89 30                	mov    DWORD PTR [eax],esi
c00155d4:	eb 63                	jmp    c0015639 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00155d6:	56                   	push   esi
c00155d7:	56                   	push   esi
c00155d8:	50                   	push   eax
c00155d9:	68 a0 2a 02 c0       	push   0xc0022aa0
c00155de:	e8 57 53 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c00155e3:	83 c4 10             	add    esp,0x10
c00155e6:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00155eb:	74 12                	je     c00155ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00155ed:	83 ec 0c             	sub    esp,0xc
c00155f0:	68 ab 2a 02 c0       	push   0xc0022aab
c00155f5:	e8 5d c0 ff ff       	call   c0011657 <KePanic(char const*)>
c00155fa:	83 c4 10             	add    esp,0x10
c00155fd:	eb 3a                	jmp    c0015639 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00155ff:	83 ec 0c             	sub    esp,0xc
c0015602:	53                   	push   ebx
c0015603:	e8 c6 65 ff ff       	call   c000bbce <File::close()>
c0015608:	8b 03                	mov    eax,DWORD PTR [ebx]
c001560a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001560d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015610:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015613:	e8 fb 24 ff ff       	call   c0007b13 <free>
c0015618:	59                   	pop    ecx
c0015619:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001561d:	e8 f1 24 ff ff       	call   c0007b13 <free>
c0015622:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015625:	e8 e9 24 ff ff       	call   c0007b13 <free>
c001562a:	5b                   	pop    ebx
c001562b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001562f:	e8 df 24 ff ff       	call   c0007b13 <free>
c0015634:	83 c4 10             	add    esp,0x10
c0015637:	eb 1e                	jmp    c0015657 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001563d:	e9 4d fd ff ff       	jmp    c001538f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c0015642:	83 ec 0c             	sub    esp,0xc
c0015645:	57                   	push   edi
c0015646:	e8 c8 24 ff ff       	call   c0007b13 <free>
c001564b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001564f:	83 c4 10             	add    esp,0x10
c0015652:	e9 cc fc ff ff       	jmp    c0015323 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0015657:	31 c0                	xor    eax,eax
c0015659:	eb 32                	jmp    c001568d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c001565b:	83 ec 0c             	sub    esp,0xc
c001565e:	53                   	push   ebx
c001565f:	e8 6a 65 ff ff       	call   c000bbce <File::close()>
c0015664:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015666:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015669:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001566c:	58                   	pop    eax
c001566d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015671:	e8 9d 24 ff ff       	call   c0007b13 <free>
c0015676:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015679:	e8 95 24 ff ff       	call   c0007b13 <free>
c001567e:	5a                   	pop    edx
c001567f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015683:	e8 8b 24 ff ff       	call   c0007b13 <free>
c0015688:	83 c4 10             	add    esp,0x10
c001568b:	b0 01                	mov    al,0x1
c001568d:	81 c4 5c 03 00 00    	add    esp,0x35c
c0015693:	5b                   	pop    ebx
c0015694:	5e                   	pop    esi
c0015695:	5f                   	pop    edi
c0015696:	5d                   	pop    ebp
c0015697:	c3                   	ret    

c0015698 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0015698:	56                   	push   esi
c0015699:	31 d2                	xor    edx,edx
c001569b:	53                   	push   ebx
c001569c:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c00156a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00156a6:	39 d3                	cmp    ebx,edx
c00156a8:	7e 1b                	jle    c00156c5 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00156aa:	8b 04 95 20 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3ee0]
c00156b1:	39 c8                	cmp    eax,ecx
c00156b3:	77 0d                	ja     c00156c2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00156b5:	8b 34 95 20 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd40e0]
c00156bc:	01 c6                	add    esi,eax
c00156be:	39 ce                	cmp    esi,ecx
c00156c0:	77 05                	ja     c00156c7 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00156c2:	42                   	inc    edx
c00156c3:	eb e1                	jmp    c00156a6 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00156c5:	31 c0                	xor    eax,eax
c00156c7:	5b                   	pop    ebx
c00156c8:	5e                   	pop    esi
c00156c9:	c3                   	ret    

c00156ca <Thr::getDriverNameFromAddress(unsigned long)>:
c00156ca:	53                   	push   ebx
c00156cb:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c00156d1:	31 c0                	xor    eax,eax
c00156d3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00156d7:	39 c3                	cmp    ebx,eax
c00156d9:	7e 22                	jle    c00156fd <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00156db:	8b 14 85 20 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ee0]
c00156e2:	39 ca                	cmp    edx,ecx
c00156e4:	77 14                	ja     c00156fa <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00156e6:	03 14 85 20 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd40e0]
c00156ed:	39 ca                	cmp    edx,ecx
c00156ef:	76 09                	jbe    c00156fa <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00156f1:	8b 04 85 20 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3ce0]
c00156f8:	eb 05                	jmp    c00156ff <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00156fa:	40                   	inc    eax
c00156fb:	eb da                	jmp    c00156d7 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00156fd:	31 c0                	xor    eax,eax
c00156ff:	5b                   	pop    ebx
c0015700:	c3                   	ret    

c0015701 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0015701:	53                   	push   ebx
c0015702:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015706:	53                   	push   ebx
c0015707:	e8 8c ff ff ff       	call   c0015698 <Thr::getDriverBaseFromAddress(unsigned long)>
c001570c:	5a                   	pop    edx
c001570d:	31 d2                	xor    edx,edx
c001570f:	85 c0                	test   eax,eax
c0015711:	74 04                	je     c0015717 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0015713:	89 da                	mov    edx,ebx
c0015715:	29 c2                	sub    edx,eax
c0015717:	5b                   	pop    ebx
c0015718:	89 d0                	mov    eax,edx
c001571a:	c3                   	ret    

c001571b <Thr::loadDLL(char const*, bool)>:
c001571b:	55                   	push   ebp
c001571c:	57                   	push   edi
c001571d:	56                   	push   esi
c001571e:	53                   	push   ebx
c001571f:	81 ec 34 01 00 00    	sub    esp,0x134
c0015725:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001572c:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0015733:	56                   	push   esi
c0015734:	68 c3 2a 02 c0       	push   0xc0022ac3
c0015739:	e8 fc 51 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001573e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015745:	e8 b9 23 ff ff       	call   c0007b03 <malloc>
c001574a:	83 c4 0c             	add    esp,0xc
c001574d:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0015753:	56                   	push   esi
c0015754:	50                   	push   eax
c0015755:	89 c3                	mov    ebx,eax
c0015757:	e8 f6 63 ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c001575c:	83 c4 10             	add    esp,0x10
c001575f:	85 db                	test   ebx,ebx
c0015761:	75 3c                	jne    c001579f <Thr::loadDLL(char const*, bool)+0x84>
c0015763:	89 e8                	mov    eax,ebp
c0015765:	84 c0                	test   al,al
c0015767:	0f 84 e1 01 00 00    	je     c001594e <Thr::loadDLL(char const*, bool)+0x233>
c001576d:	50                   	push   eax
c001576e:	50                   	push   eax
c001576f:	68 d4 2a 02 c0       	push   0xc0022ad4
c0015774:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0015778:	57                   	push   edi
c0015779:	e8 d2 ae fe ff       	call   c0000650 <strcpy>
c001577e:	58                   	pop    eax
c001577f:	5a                   	pop    edx
c0015780:	56                   	push   esi
c0015781:	57                   	push   edi
c0015782:	e8 e9 b0 fe ff       	call   c0000870 <strcat>
c0015787:	59                   	pop    ecx
c0015788:	58                   	pop    eax
c0015789:	68 e7 2a 02 c0       	push   0xc0022ae7
c001578e:	57                   	push   edi
c001578f:	e8 dc b0 fe ff       	call   c0000870 <strcat>
c0015794:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015797:	e8 bb be ff ff       	call   c0011657 <KePanic(char const*)>
c001579c:	83 c4 10             	add    esp,0x10
c001579f:	50                   	push   eax
c00157a0:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00157a4:	50                   	push   eax
c00157a5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00157a9:	50                   	push   eax
c00157aa:	53                   	push   ebx
c00157ab:	e8 c2 66 ff ff       	call   c000be72 <File::stat(unsigned long long*, bool*)>
c00157b0:	83 c4 10             	add    esp,0x10
c00157b3:	85 db                	test   ebx,ebx
c00157b5:	74 0c                	je     c00157c3 <Thr::loadDLL(char const*, bool)+0xa8>
c00157b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00157b9:	83 ec 0c             	sub    esp,0xc
c00157bc:	53                   	push   ebx
c00157bd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00157c0:	83 c4 10             	add    esp,0x10
c00157c3:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00157c8:	75 0a                	jne    c00157d4 <Thr::loadDLL(char const*, bool)+0xb9>
c00157ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00157ce:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00157d2:	75 3e                	jne    c0015812 <Thr::loadDLL(char const*, bool)+0xf7>
c00157d4:	89 e8                	mov    eax,ebp
c00157d6:	31 db                	xor    ebx,ebx
c00157d8:	84 c0                	test   al,al
c00157da:	0f 84 6e 01 00 00    	je     c001594e <Thr::loadDLL(char const*, bool)+0x233>
c00157e0:	50                   	push   eax
c00157e1:	50                   	push   eax
c00157e2:	68 d4 2a 02 c0       	push   0xc0022ad4
c00157e7:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00157eb:	53                   	push   ebx
c00157ec:	e8 5f ae fe ff       	call   c0000650 <strcpy>
c00157f1:	58                   	pop    eax
c00157f2:	5a                   	pop    edx
c00157f3:	56                   	push   esi
c00157f4:	53                   	push   ebx
c00157f5:	e8 76 b0 fe ff       	call   c0000870 <strcat>
c00157fa:	59                   	pop    ecx
c00157fb:	5f                   	pop    edi
c00157fc:	68 e7 2a 02 c0       	push   0xc0022ae7
c0015801:	53                   	push   ebx
c0015802:	e8 69 b0 fe ff       	call   c0000870 <strcat>
c0015807:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001580a:	e8 48 be ff ff       	call   c0011657 <KePanic(char const*)>
c001580f:	83 c4 10             	add    esp,0x10
c0015812:	53                   	push   ebx
c0015813:	6a 03                	push   0x3
c0015815:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015819:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001581d:	05 ff 0f 00 00       	add    eax,0xfff
c0015822:	83 d2 00             	adc    edx,0x0
c0015825:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015829:	50                   	push   eax
c001582a:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0015830:	e8 01 46 ff ff       	call   c0009e36 <VAS::allocatePages(int, int)>
c0015835:	89 c3                	mov    ebx,eax
c0015837:	58                   	pop    eax
c0015838:	5a                   	pop    edx
c0015839:	53                   	push   ebx
c001583a:	68 3a 0f 02 c0       	push   0xc0020f3a
c001583f:	e8 f6 50 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0015844:	89 34 24             	mov    DWORD PTR [esp],esi
c0015847:	e8 34 ad fe ff       	call   c0000580 <strlen>
c001584c:	8b 3d 00 bf 02 c0    	mov    edi,DWORD PTR ds:0xc002bf00
c0015852:	40                   	inc    eax
c0015853:	89 04 24             	mov    DWORD PTR [esp],eax
c0015856:	e8 a8 22 ff ff       	call   c0007b03 <malloc>
c001585b:	59                   	pop    ecx
c001585c:	89 04 bd 20 c3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3ce0],eax
c0015863:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c0015868:	5f                   	pop    edi
c0015869:	56                   	push   esi
c001586a:	ff 34 85 20 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3ce0]
c0015871:	e8 da ad fe ff       	call   c0000650 <strcpy>
c0015876:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c001587b:	89 1c 85 20 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ee0],ebx
c0015882:	8d 50 01             	lea    edx,[eax+0x1]
c0015885:	89 15 00 bf 02 c0    	mov    DWORD PTR ds:0xc002bf00,edx
c001588b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001588f:	83 c4 0c             	add    esp,0xc
c0015892:	6a 01                	push   0x1
c0015894:	53                   	push   ebx
c0015895:	56                   	push   esi
c0015896:	89 14 85 20 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40e0],edx
c001589d:	e8 b5 f6 ff ff       	call   c0014f57 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00158a2:	83 c4 10             	add    esp,0x10
c00158a5:	89 c7                	mov    edi,eax
c00158a7:	89 f8                	mov    eax,edi
c00158a9:	83 f0 01             	xor    eax,0x1
c00158ac:	84 c0                	test   al,al
c00158ae:	74 18                	je     c00158c8 <Thr::loadDLL(char const*, bool)+0x1ad>
c00158b0:	89 e8                	mov    eax,ebp
c00158b2:	84 c0                	test   al,al
c00158b4:	74 12                	je     c00158c8 <Thr::loadDLL(char const*, bool)+0x1ad>
c00158b6:	83 ec 0c             	sub    esp,0xc
c00158b9:	68 e9 2a 02 c0       	push   0xc0022ae9
c00158be:	e8 94 bd ff ff       	call   c0011657 <KePanic(char const*)>
c00158c3:	83 c4 10             	add    esp,0x10
c00158c6:	eb 06                	jmp    c00158ce <Thr::loadDLL(char const*, bool)+0x1b3>
c00158c8:	89 f8                	mov    eax,edi
c00158ca:	84 c0                	test   al,al
c00158cc:	75 10                	jne    c00158de <Thr::loadDLL(char const*, bool)+0x1c3>
c00158ce:	83 ec 0c             	sub    esp,0xc
c00158d1:	68 08 2b 02 c0       	push   0xc0022b08
c00158d6:	e8 7c bd ff ff       	call   c0011657 <KePanic(char const*)>
c00158db:	83 c4 10             	add    esp,0x10
c00158de:	31 f6                	xor    esi,esi
c00158e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00158e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00158e8:	05 ff 0f 00 00       	add    eax,0xfff
c00158ed:	83 d2 00             	adc    edx,0x0
c00158f0:	0f ac d0 0c          	shrd   eax,edx,0xc
c00158f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00158f8:	c1 ea 0c             	shr    edx,0xc
c00158fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00158ff:	ba 00 00 00 00       	mov    edx,0x0
c0015904:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0015908:	89 d0                	mov    eax,edx
c001590a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001590e:	73 32                	jae    c0015942 <Thr::loadDLL(char const*, bool)+0x227>
c0015910:	50                   	push   eax
c0015911:	50                   	push   eax
c0015912:	89 f0                	mov    eax,esi
c0015914:	c1 e0 0c             	shl    eax,0xc
c0015917:	01 d8                	add    eax,ebx
c0015919:	50                   	push   eax
c001591a:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0015920:	e8 f5 3f ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c0015925:	83 c4 10             	add    esp,0x10
c0015928:	8b 00                	mov    eax,DWORD PTR [eax]
c001592a:	a8 60                	test   al,0x60
c001592c:	75 11                	jne    c001593f <Thr::loadDLL(char const*, bool)+0x224>
c001592e:	83 ec 0c             	sub    esp,0xc
c0015931:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015936:	50                   	push   eax
c0015937:	e8 6d 24 ff ff       	call   c0007da9 <Phys::freePage(unsigned long)>
c001593c:	83 c4 10             	add    esp,0x10
c001593f:	46                   	inc    esi
c0015940:	eb 9e                	jmp    c00158e0 <Thr::loadDLL(char const*, bool)+0x1c5>
c0015942:	89 f8                	mov    eax,edi
c0015944:	84 c0                	test   al,al
c0015946:	b8 00 00 00 00       	mov    eax,0x0
c001594b:	0f 44 d8             	cmove  ebx,eax
c001594e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015954:	89 d8                	mov    eax,ebx
c0015956:	5b                   	pop    ebx
c0015957:	5e                   	pop    esi
c0015958:	5f                   	pop    edi
c0015959:	5d                   	pop    ebp
c001595a:	c3                   	ret    

c001595b <Thr::executeDLL(unsigned long, void*)>:
c001595b:	56                   	push   esi
c001595c:	53                   	push   ebx
c001595d:	52                   	push   edx
c001595e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015962:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015966:	85 db                	test   ebx,ebx
c0015968:	75 10                	jne    c001597a <Thr::executeDLL(unsigned long, void*)+0x1f>
c001596a:	83 ec 0c             	sub    esp,0xc
c001596d:	68 24 2b 02 c0       	push   0xc0022b24
c0015972:	e8 e0 bc ff ff       	call   c0011657 <KePanic(char const*)>
c0015977:	83 c4 10             	add    esp,0x10
c001597a:	50                   	push   eax
c001597b:	50                   	push   eax
c001597c:	53                   	push   ebx
c001597d:	68 4e 2b 02 c0       	push   0xc0022b4e
c0015982:	e8 b3 4f ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0015987:	89 d8                	mov    eax,ebx
c0015989:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001598d:	83 c4 14             	add    esp,0x14
c0015990:	5b                   	pop    ebx
c0015991:	5e                   	pop    esi
c0015992:	ff e0                	jmp    eax

c0015994 <userModeEntryPoint(void*)>:
c0015994:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0015999:	83 e8 01             	sub    eax,0x1
c001599c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00159a1:	75 01                	jne    c00159a4 <userModeEntryPoint(void*)+0x10>
c00159a3:	fb                   	sti    
c00159a4:	fb                   	sti    
c00159a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159aa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00159ad:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00159b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00159b7:	e9 83 a8 fe ff       	jmp    c000023f <goToUsermode>

c00159bc <changeTSS>:
c00159bc:	83 ec 14             	sub    esp,0x14
c00159bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00159c7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00159cc:	c1 e2 15             	shl    edx,0x15
c00159cf:	29 d0                	sub    eax,edx
c00159d1:	50                   	push   eax
c00159d2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00159d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00159dd:	05 7c 11 00 00       	add    eax,0x117c
c00159e2:	50                   	push   eax
c00159e3:	e8 84 35 ff ff       	call   c0008f6c <TSS::setESP(unsigned long)>
c00159e8:	83 c4 1c             	add    esp,0x1c
c00159eb:	c3                   	ret    

c00159ec <switchToThread(ThreadControlBlock*)>:
c00159ec:	57                   	push   edi
c00159ed:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00159f3:	56                   	push   esi
c00159f4:	53                   	push   ebx
c00159f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00159f9:	85 c9                	test   ecx,ecx
c00159fb:	0f 85 8b 00 00 00    	jne    c0015a8c <switchToThread(ThreadControlBlock*)+0xa0>
c0015a01:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015a05:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015a0b:	74 7b                	je     c0015a88 <switchToThread(ThreadControlBlock*)+0x9c>
c0015a0d:	b8 00 04 00 00       	mov    eax,0x400
c0015a12:	29 d0                	sub    eax,edx
c0015a14:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0015a17:	d1 f8                	sar    eax,1
c0015a19:	01 d0                	add    eax,edx
c0015a1b:	90                   	nop
c0015a1c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0015a1f:	e8 04 28 00 00       	call   c0018228 <HalQueryPerformanceCounter()>
c0015a24:	a3 08 c7 02 c0       	mov    ds:0xc002c708,eax
c0015a29:	89 c6                	mov    esi,eax
c0015a2b:	89 d7                	mov    edi,edx
c0015a2d:	2b 35 f8 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6f8
c0015a33:	a3 f8 c6 02 c0       	mov    ds:0xc002c6f8,eax
c0015a38:	1b 3d fc c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6fc
c0015a3e:	89 35 00 c7 02 c0    	mov    DWORD PTR ds:0xc002c700,esi
c0015a44:	89 15 0c c7 02 c0    	mov    DWORD PTR ds:0xc002c70c,edx
c0015a4a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015a50:	89 15 fc c6 02 c0    	mov    DWORD PTR ds:0xc002c6fc,edx
c0015a56:	89 3d 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,edi
c0015a5c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015a5f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015a62:	01 c6                	add    esi,eax
c0015a64:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015a67:	11 d7                	adc    edi,edx
c0015a69:	83 ec 0c             	sub    esp,0xc
c0015a6c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015a6f:	53                   	push   ebx
c0015a70:	e8 02 a8 fe ff       	call   c0000277 <switchToThreadASM>
c0015a75:	0f 20 c0             	mov    eax,cr0
c0015a78:	83 c8 08             	or     eax,0x8
c0015a7b:	0f 22 c0             	mov    cr0,eax
c0015a7e:	83 c4 10             	add    esp,0x10
c0015a81:	5b                   	pop    ebx
c0015a82:	5e                   	pop    esi
c0015a83:	5f                   	pop    edi
c0015a84:	c3                   	ret    
c0015a85:	8d 76 00             	lea    esi,[esi+0x0]
c0015a88:	31 c0                	xor    eax,eax
c0015a8a:	eb 90                	jmp    c0015a1c <switchToThread(ThreadControlBlock*)+0x30>
c0015a8c:	5b                   	pop    ebx
c0015a8d:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0015a97:	5e                   	pop    esi
c0015a98:	5f                   	pop    edi
c0015a99:	c3                   	ret    
c0015a9a:	66 90                	xchg   ax,ax

c0015a9c <Process::addArgs(char**)>:
c0015a9c:	57                   	push   edi
c0015a9d:	56                   	push   esi
c0015a9e:	53                   	push   ebx
c0015a9f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015aa3:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0015aa7:	85 f6                	test   esi,esi
c0015aa9:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c0015ab3:	74 4f                	je     c0015b04 <Process::addArgs(char**)+0x68>
c0015ab5:	8b 06                	mov    eax,DWORD PTR [esi]
c0015ab7:	85 c0                	test   eax,eax
c0015ab9:	74 49                	je     c0015b04 <Process::addArgs(char**)+0x68>
c0015abb:	31 db                	xor    ebx,ebx
c0015abd:	8d 76 00             	lea    esi,[esi+0x0]
c0015ac0:	83 ec 0c             	sub    esp,0xc
c0015ac3:	50                   	push   eax
c0015ac4:	e8 b7 aa fe ff       	call   c0000580 <strlen>
c0015ac9:	83 c0 01             	add    eax,0x1
c0015acc:	89 04 24             	mov    DWORD PTR [esp],eax
c0015acf:	e8 2f 20 ff ff       	call   c0007b03 <malloc>
c0015ad4:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0015adb:	5a                   	pop    edx
c0015adc:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0015adf:	83 c3 01             	add    ebx,0x1
c0015ae2:	59                   	pop    ecx
c0015ae3:	52                   	push   edx
c0015ae4:	50                   	push   eax
c0015ae5:	e8 66 ab fe ff       	call   c0000650 <strcpy>
c0015aea:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0015af0:	83 c4 10             	add    esp,0x10
c0015af3:	83 c1 01             	add    ecx,0x1
c0015af6:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0015afc:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0015aff:	85 c0                	test   eax,eax
c0015b01:	75 bd                	jne    c0015ac0 <Process::addArgs(char**)+0x24>
c0015b03:	90                   	nop
c0015b04:	5b                   	pop    ebx
c0015b05:	5e                   	pop    esi
c0015b06:	5f                   	pop    edi
c0015b07:	c3                   	ret    

c0015b08 <Process::Process(char const*, Process*, char**)>:
c0015b08:	56                   	push   esi
c0015b09:	53                   	push   ebx
c0015b0a:	83 ec 14             	sub    esp,0x14
c0015b0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b11:	05 0c 02 00 00       	add    eax,0x20c
c0015b16:	bb 07 00 00 00       	mov    ebx,0x7
c0015b1b:	89 c6                	mov    esi,eax
c0015b1d:	8d 76 00             	lea    esi,[esi+0x0]
c0015b20:	85 db                	test   ebx,ebx
c0015b22:	78 14                	js     c0015b38 <Process::Process(char const*, Process*, char**)+0x30>
c0015b24:	83 ec 0c             	sub    esp,0xc
c0015b27:	56                   	push   esi
c0015b28:	e8 2b a6 00 00       	call   c0020158 <ThreadControlBlock::ThreadControlBlock()>
c0015b2d:	83 c4 10             	add    esp,0x10
c0015b30:	83 c6 5f             	add    esi,0x5f
c0015b33:	83 eb 01             	sub    ebx,0x1
c0015b36:	eb e8                	jmp    c0015b20 <Process::Process(char const*, Process*, char**)+0x18>
c0015b38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b3c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b47:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015b4e:	83 ec 0c             	sub    esp,0xc
c0015b51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b55:	e8 f2 b8 ff ff       	call   c001144c <KeNewProcessEnv(Process*)>
c0015b5a:	83 c4 10             	add    esp,0x10
c0015b5d:	89 c2                	mov    edx,eax
c0015b5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b63:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015b69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b6d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015b76:	a1 80 41 02 c0       	mov    eax,ds:0xc0024180
c0015b7b:	8d 50 01             	lea    edx,[eax+0x1]
c0015b7e:	89 15 80 41 02 c0    	mov    DWORD PTR ds:0xc0024180,edx
c0015b84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015b88:	89 02                	mov    DWORD PTR [edx],eax
c0015b8a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015b92:	83 ec 0c             	sub    esp,0xc
c0015b95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015b99:	e8 65 1f ff ff       	call   c0007b03 <malloc>
c0015b9e:	83 c4 10             	add    esp,0x10
c0015ba1:	89 c3                	mov    ebx,eax
c0015ba3:	83 ec 08             	sub    esp,0x8
c0015ba6:	6a 00                	push   0x0
c0015ba8:	53                   	push   ebx
c0015ba9:	e8 d4 44 ff ff       	call   c000a082 <VAS::VAS(bool)>
c0015bae:	83 c4 10             	add    esp,0x10
c0015bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bb5:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015bbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bbf:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015bc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bcd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015bd1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015bd7:	e8 92 be ff ff       	call   c0011a6e <KeInitSignals()>
c0015bdc:	89 c2                	mov    edx,eax
c0015bde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015be2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015be8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bec:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015bf2:	85 c0                	test   eax,eax
c0015bf4:	74 42                	je     c0015c38 <Process::Process(char const*, Process*, char**)+0x130>
c0015bf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bfa:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015c00:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015c06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c0a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015c10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c14:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015c1a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015c20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c24:	05 0c 01 00 00       	add    eax,0x10c
c0015c29:	83 ec 08             	sub    esp,0x8
c0015c2c:	52                   	push   edx
c0015c2d:	50                   	push   eax
c0015c2e:	e8 1d aa fe ff       	call   c0000650 <strcpy>
c0015c33:	83 c4 10             	add    esp,0x10
c0015c36:	eb 64                	jmp    c0015c9c <Process::Process(char const*, Process*, char**)+0x194>
c0015c38:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015c40:	83 ec 0c             	sub    esp,0xc
c0015c43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015c47:	e8 b7 1e ff ff       	call   c0007b03 <malloc>
c0015c4c:	83 c4 10             	add    esp,0x10
c0015c4f:	89 c3                	mov    ebx,eax
c0015c51:	83 ec 08             	sub    esp,0x8
c0015c54:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c58:	53                   	push   ebx
c0015c59:	e8 3e 30 ff ff       	call   c0008c9c <VgaText::VgaText(char const*)>
c0015c5e:	83 c4 10             	add    esp,0x10
c0015c61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c65:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015c6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c6f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015c75:	83 ec 0c             	sub    esp,0xc
c0015c78:	50                   	push   eax
c0015c79:	e8 cc 28 ff ff       	call   c000854a <addToTerminalCycle(VgaText*)>
c0015c7e:	83 c4 10             	add    esp,0x10
c0015c81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c85:	05 0c 01 00 00       	add    eax,0x10c
c0015c8a:	83 ec 08             	sub    esp,0x8
c0015c8d:	68 6d 2b 02 c0       	push   0xc0022b6d
c0015c92:	50                   	push   eax
c0015c93:	e8 b8 a9 fe ff       	call   c0000650 <strcpy>
c0015c98:	83 c4 10             	add    esp,0x10
c0015c9b:	90                   	nop
c0015c9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ca0:	83 c0 0c             	add    eax,0xc
c0015ca3:	83 ec 08             	sub    esp,0x8
c0015ca6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015caa:	50                   	push   eax
c0015cab:	e8 a0 a9 fe ff       	call   c0000650 <strcpy>
c0015cb0:	83 c4 10             	add    esp,0x10
c0015cb3:	83 ec 08             	sub    esp,0x8
c0015cb6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015cba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cbe:	e8 d9 fd ff ff       	call   c0015a9c <Process::addArgs(char**)>
c0015cc3:	83 c4 10             	add    esp,0x10
c0015cc6:	83 ec 08             	sub    esp,0x8
c0015cc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ccd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cd1:	e8 42 ed ff ff       	call   c0014a18 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015cd6:	83 c4 10             	add    esp,0x10
c0015cd9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015cdd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015ce1:	83 f0 01             	xor    eax,0x1
c0015ce4:	88 c2                	mov    dl,al
c0015ce6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cea:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015cf0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015cf5:	83 ec 04             	sub    esp,0x4
c0015cf8:	50                   	push   eax
c0015cf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cfd:	68 c4 2b 02 c0       	push   0xc0022bc4
c0015d02:	e8 33 4c ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0015d07:	83 c4 10             	add    esp,0x10
c0015d0a:	90                   	nop
c0015d0b:	83 c4 14             	add    esp,0x14
c0015d0e:	5b                   	pop    ebx
c0015d0f:	5e                   	pop    esi
c0015d10:	c3                   	ret    
c0015d11:	90                   	nop
c0015d12:	66 90                	xchg   ax,ax

c0015d14 <Process::Process(bool, char const*, Process*, char**)>:
c0015d14:	56                   	push   esi
c0015d15:	53                   	push   ebx
c0015d16:	83 ec 24             	sub    esp,0x24
c0015d19:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015d1d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015d21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d25:	05 0c 02 00 00       	add    eax,0x20c
c0015d2a:	bb 07 00 00 00       	mov    ebx,0x7
c0015d2f:	89 c6                	mov    esi,eax
c0015d31:	8d 76 00             	lea    esi,[esi+0x0]
c0015d34:	85 db                	test   ebx,ebx
c0015d36:	78 14                	js     c0015d4c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015d38:	83 ec 0c             	sub    esp,0xc
c0015d3b:	56                   	push   esi
c0015d3c:	e8 17 a4 00 00       	call   c0020158 <ThreadControlBlock::ThreadControlBlock()>
c0015d41:	83 c4 10             	add    esp,0x10
c0015d44:	83 c6 5f             	add    esi,0x5f
c0015d47:	83 eb 01             	sub    ebx,0x1
c0015d4a:	eb e8                	jmp    c0015d34 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015d4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d50:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015d57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d5b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015d62:	83 ec 0c             	sub    esp,0xc
c0015d65:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015d69:	e8 de b6 ff ff       	call   c001144c <KeNewProcessEnv(Process*)>
c0015d6e:	83 c4 10             	add    esp,0x10
c0015d71:	89 c2                	mov    edx,eax
c0015d73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d77:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015d7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d81:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015d8a:	a1 80 41 02 c0       	mov    eax,ds:0xc0024180
c0015d8f:	8d 50 01             	lea    edx,[eax+0x1]
c0015d92:	89 15 80 41 02 c0    	mov    DWORD PTR ds:0xc0024180,edx
c0015d98:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015d9c:	89 02                	mov    DWORD PTR [edx],eax
c0015d9e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015da6:	83 ec 0c             	sub    esp,0xc
c0015da9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015dad:	e8 51 1d ff ff       	call   c0007b03 <malloc>
c0015db2:	83 c4 10             	add    esp,0x10
c0015db5:	89 c3                	mov    ebx,eax
c0015db7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015dbc:	83 ec 08             	sub    esp,0x8
c0015dbf:	50                   	push   eax
c0015dc0:	53                   	push   ebx
c0015dc1:	e8 bc 42 ff ff       	call   c000a082 <VAS::VAS(bool)>
c0015dc6:	83 c4 10             	add    esp,0x10
c0015dc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dcd:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015dd3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dd7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015de1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015de5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015de9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015def:	e8 7a bc ff ff       	call   c0011a6e <KeInitSignals()>
c0015df4:	89 c2                	mov    edx,eax
c0015df6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dfa:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015e00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e04:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015e0a:	85 c0                	test   eax,eax
c0015e0c:	74 42                	je     c0015e50 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015e0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e12:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015e18:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015e1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e22:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015e28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e2c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015e32:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015e38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e3c:	05 0c 01 00 00       	add    eax,0x10c
c0015e41:	83 ec 08             	sub    esp,0x8
c0015e44:	52                   	push   edx
c0015e45:	50                   	push   eax
c0015e46:	e8 05 a8 fe ff       	call   c0000650 <strcpy>
c0015e4b:	83 c4 10             	add    esp,0x10
c0015e4e:	eb 64                	jmp    c0015eb4 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015e50:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015e58:	83 ec 0c             	sub    esp,0xc
c0015e5b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015e5f:	e8 9f 1c ff ff       	call   c0007b03 <malloc>
c0015e64:	83 c4 10             	add    esp,0x10
c0015e67:	89 c3                	mov    ebx,eax
c0015e69:	83 ec 08             	sub    esp,0x8
c0015e6c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015e70:	53                   	push   ebx
c0015e71:	e8 26 2e ff ff       	call   c0008c9c <VgaText::VgaText(char const*)>
c0015e76:	83 c4 10             	add    esp,0x10
c0015e79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e7d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015e83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e87:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015e8d:	83 ec 0c             	sub    esp,0xc
c0015e90:	50                   	push   eax
c0015e91:	e8 b4 26 ff ff       	call   c000854a <addToTerminalCycle(VgaText*)>
c0015e96:	83 c4 10             	add    esp,0x10
c0015e99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e9d:	05 0c 01 00 00       	add    eax,0x10c
c0015ea2:	83 ec 08             	sub    esp,0x8
c0015ea5:	68 6d 2b 02 c0       	push   0xc0022b6d
c0015eaa:	50                   	push   eax
c0015eab:	e8 a0 a7 fe ff       	call   c0000650 <strcpy>
c0015eb0:	83 c4 10             	add    esp,0x10
c0015eb3:	90                   	nop
c0015eb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015eb8:	83 c0 0c             	add    eax,0xc
c0015ebb:	83 ec 08             	sub    esp,0x8
c0015ebe:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015ec2:	50                   	push   eax
c0015ec3:	e8 88 a7 fe ff       	call   c0000650 <strcpy>
c0015ec8:	83 c4 10             	add    esp,0x10
c0015ecb:	83 ec 08             	sub    esp,0x8
c0015ece:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015ed2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015ed6:	e8 c1 fb ff ff       	call   c0015a9c <Process::addArgs(char**)>
c0015edb:	83 c4 10             	add    esp,0x10
c0015ede:	90                   	nop
c0015edf:	83 c4 24             	add    esp,0x24
c0015ee2:	5b                   	pop    ebx
c0015ee3:	5e                   	pop    esi
c0015ee4:	c3                   	ret    
c0015ee5:	8d 76 00             	lea    esi,[esi+0x0]

c0015ee8 <taskStartupFunction>:
c0015ee8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015eed:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015ef0:	c3                   	ret    
c0015ef1:	90                   	nop
c0015ef2:	66 90                	xchg   ax,ax

c0015ef4 <Semaphore::Semaphore(int)>:
c0015ef4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ef8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015efc:	89 10                	mov    DWORD PTR [eax],edx
c0015efe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f02:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015f09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f0d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015f14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f18:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015f1f:	90                   	nop
c0015f20:	c3                   	ret    
c0015f21:	90                   	nop
c0015f22:	66 90                	xchg   ax,ax

c0015f24 <Mutex::Mutex()>:
c0015f24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f28:	6a 01                	push   0x1
c0015f2a:	50                   	push   eax
c0015f2b:	e8 c4 ff ff ff       	call   c0015ef4 <Semaphore::Semaphore(int)>
c0015f30:	83 c4 08             	add    esp,0x8
c0015f33:	90                   	nop
c0015f34:	c3                   	ret    
c0015f35:	90                   	nop
c0015f36:	66 90                	xchg   ax,ax

c0015f38 <Process::createThread(void (*)(void*), void*, int)>:
c0015f38:	57                   	push   edi
c0015f39:	31 c9                	xor    ecx,ecx
c0015f3b:	56                   	push   esi
c0015f3c:	53                   	push   ebx
c0015f3d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015f41:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015f48:	89 f2                	mov    edx,esi
c0015f4a:	66 90                	xchg   ax,ax
c0015f4c:	0f b7 c2             	movzx  eax,dx
c0015f4f:	80 e2 01             	and    dl,0x1
c0015f52:	74 14                	je     c0015f68 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015f54:	d1 f8                	sar    eax,1
c0015f56:	83 c1 01             	add    ecx,0x1
c0015f59:	83 f9 10             	cmp    ecx,0x10
c0015f5c:	89 c2                	mov    edx,eax
c0015f5e:	75 ec                	jne    c0015f4c <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015f60:	31 db                	xor    ebx,ebx
c0015f62:	89 d8                	mov    eax,ebx
c0015f64:	5b                   	pop    ebx
c0015f65:	5e                   	pop    esi
c0015f66:	5f                   	pop    edi
c0015f67:	c3                   	ret    
c0015f68:	b8 01 00 00 00       	mov    eax,0x1
c0015f6d:	d3 e0                	shl    eax,cl
c0015f6f:	09 c6                	or     esi,eax
c0015f71:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015f78:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0015f7b:	c1 e0 05             	shl    eax,0x5
c0015f7e:	29 c8                	sub    eax,ecx
c0015f80:	01 d8                	add    eax,ebx
c0015f82:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015f89:	75 0d                	jne    c0015f98 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015f8b:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015f95:	8d 76 00             	lea    esi,[esi+0x0]
c0015f98:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015f9e:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0015fa1:	83 ec 0c             	sub    esp,0xc
c0015fa4:	c1 e6 05             	shl    esi,0x5
c0015fa7:	29 ce                	sub    esi,ecx
c0015fa9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015fac:	8d 04 33             	lea    eax,[ebx+esi*1]
c0015faf:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015fb5:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015fbb:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015fc1:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015fc8:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015fce:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015fd2:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015fd8:	89 ca                	mov    edx,ecx
c0015fda:	f7 da                	neg    edx
c0015fdc:	c1 e2 15             	shl    edx,0x15
c0015fdf:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015fe5:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015feb:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0015fef:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015ff9:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015fff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016003:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0016009:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0016013:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001601d:	68 00 01 00 00       	push   0x100
c0016022:	e8 dc 1a ff ff       	call   c0007b03 <malloc>
c0016027:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001602a:	58                   	pop    eax
c001602b:	5a                   	pop    edx
c001602c:	53                   	push   ebx
c001602d:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016032:	e8 b9 9e 00 00       	call   c001fef0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016037:	83 c4 10             	add    esp,0x10
c001603a:	89 d8                	mov    eax,ebx
c001603c:	5b                   	pop    ebx
c001603d:	5e                   	pop    esi
c001603e:	5f                   	pop    edi
c001603f:	c3                   	ret    

c0016040 <Process::createUserThread()>:
c0016040:	83 ec 0c             	sub    esp,0xc
c0016043:	68 80 00 00 00       	push   0x80
c0016048:	6a 00                	push   0x0
c001604a:	68 94 59 01 c0       	push   0xc0015994
c001604f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016053:	50                   	push   eax
c0016054:	e8 df fe ff ff       	call   c0015f38 <Process::createThread(void (*)(void*), void*, int)>
c0016059:	83 c4 1c             	add    esp,0x1c
c001605c:	c3                   	ret    
c001605d:	8d 76 00             	lea    esi,[esi+0x0]

c0016060 <setupMultitasking(void (*)())>:
c0016060:	56                   	push   esi
c0016061:	53                   	push   ebx
c0016062:	83 ec 04             	sub    esp,0x4
c0016065:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016069:	eb 11                	jmp    c001607c <setupMultitasking(void (*)())+0x1c>
c001606b:	90                   	nop
c001606c:	83 ec 0c             	sub    esp,0xc
c001606f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016074:	e8 bb 9d 00 00       	call   c001fe34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016079:	83 c4 10             	add    esp,0x10
c001607c:	83 ec 0c             	sub    esp,0xc
c001607f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016084:	e8 87 9d 00 00       	call   c001fe10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016089:	83 c4 10             	add    esp,0x10
c001608c:	84 c0                	test   al,al
c001608e:	74 dc                	je     c001606c <setupMultitasking(void (*)())+0xc>
c0016090:	83 ec 0c             	sub    esp,0xc
c0016093:	68 24 07 00 00       	push   0x724
c0016098:	e8 66 1a ff ff       	call   c0007b03 <malloc>
c001609d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00160a4:	6a 00                	push   0x0
c00160a6:	68 71 2b 02 c0       	push   0xc0022b71
c00160ab:	6a 01                	push   0x1
c00160ad:	50                   	push   eax
c00160ae:	89 c3                	mov    ebx,eax
c00160b0:	e8 5f fc ff ff       	call   c0015d14 <Process::Process(bool, char const*, Process*, char**)>
c00160b5:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00160bb:	83 c4 14             	add    esp,0x14
c00160be:	89 1d f0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f0,ebx
c00160c4:	50                   	push   eax
c00160c5:	e8 d5 26 ff ff       	call   c000879f <setActiveTerminal(VgaText*)>
c00160ca:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00160d1:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00160db:	83 c8 01             	or     eax,0x1
c00160de:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00160e5:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00160eb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00160ee:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00160f8:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00160fe:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0016108:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001610e:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016118:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0016122:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0016128:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001612e:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0016138:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0016142:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0016149:	e8 b5 19 ff ff       	call   c0007b03 <malloc>
c001614e:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0016154:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001615a:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016160:	5a                   	pop    edx
c0016161:	59                   	pop    ecx
c0016162:	68 6d 2b 02 c0       	push   0xc0022b6d
c0016167:	50                   	push   eax
c0016168:	e8 e3 a4 fe ff       	call   c0000650 <strcpy>
c001616d:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0016174:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016178:	83 c4 14             	add    esp,0x14
c001617b:	5b                   	pop    ebx
c001617c:	5e                   	pop    esi
c001617d:	e9 e7 a0 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0016182:	66 90                	xchg   ax,ax

c0016184 <schedule()>:
c0016184:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c001618a:	85 d2                	test   edx,edx
c001618c:	74 0e                	je     c001619c <schedule()+0x18>
c001618e:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0016198:	c3                   	ret    
c0016199:	8d 76 00             	lea    esi,[esi+0x0]
c001619c:	53                   	push   ebx
c001619d:	83 ec 14             	sub    esp,0x14
c00161a0:	68 e4 c6 02 c0       	push   0xc002c6e4
c00161a5:	e8 66 9c 00 00       	call   c001fe10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00161aa:	83 c4 10             	add    esp,0x10
c00161ad:	84 c0                	test   al,al
c00161af:	75 3f                	jne    c00161f0 <schedule()+0x6c>
c00161b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161b6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00161b9:	83 fa 01             	cmp    edx,0x1
c00161bc:	74 3a                	je     c00161f8 <schedule()+0x74>
c00161be:	66 90                	xchg   ax,ax
c00161c0:	83 ec 0c             	sub    esp,0xc
c00161c3:	68 e4 c6 02 c0       	push   0xc002c6e4
c00161c8:	e8 5f 9c 00 00       	call   c001fe2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00161cd:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00161d4:	89 c3                	mov    ebx,eax
c00161d6:	e8 59 9c 00 00       	call   c001fe34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00161db:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00161e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00161e5:	e8 02 f8 ff ff       	call   c00159ec <switchToThread(ThreadControlBlock*)>
c00161ea:	83 c4 10             	add    esp,0x10
c00161ed:	8d 76 00             	lea    esi,[esi+0x0]
c00161f0:	83 c4 08             	add    esp,0x8
c00161f3:	5b                   	pop    ebx
c00161f4:	c3                   	ret    
c00161f5:	8d 76 00             	lea    esi,[esi+0x0]
c00161f8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00161ff:	83 ec 08             	sub    esp,0x8
c0016202:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016207:	50                   	push   eax
c0016208:	68 e4 c6 02 c0       	push   0xc002c6e4
c001620d:	e8 de 9c 00 00       	call   c001fef0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016212:	83 c4 10             	add    esp,0x10
c0016215:	eb a9                	jmp    c00161c0 <schedule()+0x3c>
c0016217:	90                   	nop

c0016218 <Semaphore::tryAcquire()>:
c0016218:	53                   	push   ebx
c0016219:	83 ec 08             	sub    esp,0x8
c001621c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016220:	fa                   	cli    
c0016221:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016227:	8d 42 01             	lea    eax,[edx+0x1]
c001622a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001622f:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016234:	8d 58 01             	lea    ebx,[eax+0x1]
c0016237:	89 1d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ebx
c001623d:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0016240:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0016242:	7c 2c                	jl     c0016270 <Semaphore::tryAcquire()+0x58>
c0016244:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016249:	85 c0                	test   eax,eax
c001624b:	75 0b                	jne    c0016258 <Semaphore::tryAcquire()+0x40>
c001624d:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016252:	85 c0                	test   eax,eax
c0016254:	75 5a                	jne    c00162b0 <Semaphore::tryAcquire()+0x98>
c0016256:	66 90                	xchg   ax,ax
c0016258:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001625e:	31 c0                	xor    eax,eax
c0016260:	85 d2                	test   edx,edx
c0016262:	75 04                	jne    c0016268 <Semaphore::tryAcquire()+0x50>
c0016264:	fb                   	sti    
c0016265:	8d 76 00             	lea    esi,[esi+0x0]
c0016268:	83 c4 08             	add    esp,0x8
c001626b:	5b                   	pop    ebx
c001626c:	c3                   	ret    
c001626d:	8d 76 00             	lea    esi,[esi+0x0]
c0016270:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016275:	83 c3 01             	add    ebx,0x1
c0016278:	85 c0                	test   eax,eax
c001627a:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001627d:	75 21                	jne    c00162a0 <Semaphore::tryAcquire()+0x88>
c001627f:	8b 0d c0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c0
c0016285:	85 c9                	test   ecx,ecx
c0016287:	74 17                	je     c00162a0 <Semaphore::tryAcquire()+0x88>
c0016289:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016293:	e8 ec fe ff ff       	call   c0016184 <schedule()>
c0016298:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001629d:	8d 50 ff             	lea    edx,[eax-0x1]
c00162a0:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00162a6:	85 d2                	test   edx,edx
c00162a8:	b0 01                	mov    al,0x1
c00162aa:	75 bc                	jne    c0016268 <Semaphore::tryAcquire()+0x50>
c00162ac:	eb b6                	jmp    c0016264 <Semaphore::tryAcquire()+0x4c>
c00162ae:	66 90                	xchg   ax,ax
c00162b0:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00162ba:	e8 c5 fe ff ff       	call   c0016184 <schedule()>
c00162bf:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162c4:	8d 50 ff             	lea    edx,[eax-0x1]
c00162c7:	31 c0                	xor    eax,eax
c00162c9:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c00162cf:	85 d2                	test   edx,edx
c00162d1:	75 95                	jne    c0016268 <Semaphore::tryAcquire()+0x50>
c00162d3:	eb 8f                	jmp    c0016264 <Semaphore::tryAcquire()+0x4c>
c00162d5:	90                   	nop
c00162d6:	66 90                	xchg   ax,ax

c00162d8 <Semaphore::assertLocked(char const*)>:
c00162d8:	83 ec 0c             	sub    esp,0xc
c00162db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00162df:	fa                   	cli    
c00162e0:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c00162e6:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00162eb:	83 c1 01             	add    ecx,0x1
c00162ee:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c00162f4:	8d 48 01             	lea    ecx,[eax+0x1]
c00162f7:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00162fd:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00162ff:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0016302:	7c 28                	jl     c001632c <Semaphore::assertLocked(char const*)+0x54>
c0016304:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016309:	85 c0                	test   eax,eax
c001630b:	75 0b                	jne    c0016318 <Semaphore::assertLocked(char const*)+0x40>
c001630d:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016312:	85 c0                	test   eax,eax
c0016314:	75 32                	jne    c0016348 <Semaphore::assertLocked(char const*)+0x70>
c0016316:	66 90                	xchg   ax,ax
c0016318:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001631d:	83 e8 01             	sub    eax,0x1
c0016320:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016325:	75 01                	jne    c0016328 <Semaphore::assertLocked(char const*)+0x50>
c0016327:	fb                   	sti    
c0016328:	83 c4 0c             	add    esp,0xc
c001632b:	c3                   	ret    
c001632c:	83 ec 0c             	sub    esp,0xc
c001632f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016333:	52                   	push   edx
c0016334:	e8 1e b3 ff ff       	call   c0011657 <KePanic(char const*)>
c0016339:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001633e:	83 c4 10             	add    esp,0x10
c0016341:	83 e8 01             	sub    eax,0x1
c0016344:	eb be                	jmp    c0016304 <Semaphore::assertLocked(char const*)+0x2c>
c0016346:	66 90                	xchg   ax,ax
c0016348:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016352:	e8 2d fe ff ff       	call   c0016184 <schedule()>
c0016357:	eb bf                	jmp    c0016318 <Semaphore::assertLocked(char const*)+0x40>
c0016359:	8d 76 00             	lea    esi,[esi+0x0]

c001635c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001635c:	83 ec 0c             	sub    esp,0xc
c001635f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016364:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016368:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001636b:	e8 14 fe ff ff       	call   c0016184 <schedule()>
c0016370:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016375:	83 e8 01             	sub    eax,0x1
c0016378:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001637d:	75 01                	jne    c0016380 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c001637f:	fb                   	sti    
c0016380:	83 c4 0c             	add    esp,0xc
c0016383:	c3                   	ret    

c0016384 <blockTask(TaskState)>:
c0016384:	83 ec 0c             	sub    esp,0xc
c0016387:	fa                   	cli    
c0016388:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001638d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016391:	83 c0 01             	add    eax,0x1
c0016394:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016399:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001639e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00163a1:	e8 de fd ff ff       	call   c0016184 <schedule()>
c00163a6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00163ab:	83 e8 01             	sub    eax,0x1
c00163ae:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00163b3:	75 03                	jne    c00163b8 <blockTask(TaskState)+0x34>
c00163b5:	fb                   	sti    
c00163b6:	66 90                	xchg   ax,ax
c00163b8:	83 c4 0c             	add    esp,0xc
c00163bb:	c3                   	ret    

c00163bc <waitTask(int, int*, int)>:
c00163bc:	83 ec 18             	sub    esp,0x18
c00163bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00163c8:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00163cb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00163cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163d4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00163d7:	6a 07                	push   0x7
c00163d9:	e8 a6 ff ff ff       	call   c0016384 <blockTask(TaskState)>
c00163de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163e3:	83 c4 10             	add    esp,0x10
c00163e6:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00163e9:	85 d2                	test   edx,edx
c00163eb:	74 0b                	je     c00163f8 <waitTask(int, int*, int)+0x3c>
c00163ed:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00163f0:	89 02                	mov    DWORD PTR [edx],eax
c00163f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163f7:	90                   	nop
c00163f8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00163fb:	83 c4 0c             	add    esp,0xc
c00163fe:	c3                   	ret    
c00163ff:	90                   	nop

c0016400 <milliTenthSleepUntil(unsigned int)>:
c0016400:	83 ec 0c             	sub    esp,0xc
c0016403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016407:	39 05 ec b8 02 c0    	cmp    DWORD PTR ds:0xc002b8ec,eax
c001640d:	76 05                	jbe    c0016414 <milliTenthSleepUntil(unsigned int)+0x14>
c001640f:	90                   	nop
c0016410:	83 c4 0c             	add    esp,0xc
c0016413:	c3                   	ret    
c0016414:	fa                   	cli    
c0016415:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c001641b:	83 ec 08             	sub    esp,0x8
c001641e:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016424:	83 c2 01             	add    edx,0x1
c0016427:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001642d:	83 c1 01             	add    ecx,0x1
c0016430:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016436:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001643c:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001643f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016444:	50                   	push   eax
c0016445:	68 d8 c6 02 c0       	push   0xc002c6d8
c001644a:	e8 a1 9a 00 00       	call   c001fef0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001644f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0016456:	e8 29 ff ff ff       	call   c0016384 <blockTask(TaskState)>
c001645b:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016460:	83 c4 10             	add    esp,0x10
c0016463:	83 e8 01             	sub    eax,0x1
c0016466:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c001646b:	85 c0                	test   eax,eax
c001646d:	75 09                	jne    c0016478 <milliTenthSleepUntil(unsigned int)+0x78>
c001646f:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016474:	85 c0                	test   eax,eax
c0016476:	75 14                	jne    c001648c <milliTenthSleepUntil(unsigned int)+0x8c>
c0016478:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001647d:	83 e8 01             	sub    eax,0x1
c0016480:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016485:	75 89                	jne    c0016410 <milliTenthSleepUntil(unsigned int)+0x10>
c0016487:	fb                   	sti    
c0016488:	83 c4 0c             	add    esp,0xc
c001648b:	c3                   	ret    
c001648c:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016496:	e8 e9 fc ff ff       	call   c0016184 <schedule()>
c001649b:	eb db                	jmp    c0016478 <milliTenthSleepUntil(unsigned int)+0x78>
c001649d:	8d 76 00             	lea    esi,[esi+0x0]

c00164a0 <milliTenthSleep(unsigned int)>:
c00164a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00164a4:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c00164a9:	01 c2                	add    edx,eax
c00164ab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00164af:	e9 4c ff ff ff       	jmp    c0016400 <milliTenthSleepUntil(unsigned int)>

c00164b4 <sleep(unsigned int)>:
c00164b4:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c00164bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00164c0:	eb de                	jmp    c00164a0 <milliTenthSleep(unsigned int)>
c00164c2:	66 90                	xchg   ax,ax

c00164c4 <Semaphore::acquire()>:
c00164c4:	83 ec 0c             	sub    esp,0xc
c00164c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00164cb:	fa                   	cli    
c00164cc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00164d1:	83 c0 01             	add    eax,0x1
c00164d4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00164d9:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00164de:	8d 48 01             	lea    ecx,[eax+0x1]
c00164e1:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c00164e7:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00164ea:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00164ec:	7d 2e                	jge    c001651c <Semaphore::acquire()+0x58>
c00164ee:	83 c1 01             	add    ecx,0x1
c00164f1:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00164f4:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00164f9:	85 c0                	test   eax,eax
c00164fb:	75 0b                	jne    c0016508 <Semaphore::acquire()+0x44>
c00164fd:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016502:	85 c0                	test   eax,eax
c0016504:	75 66                	jne    c001656c <Semaphore::acquire()+0xa8>
c0016506:	66 90                	xchg   ax,ax
c0016508:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001650d:	83 e8 01             	sub    eax,0x1
c0016510:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016515:	75 01                	jne    c0016518 <Semaphore::acquire()+0x54>
c0016517:	fb                   	sti    
c0016518:	83 c4 0c             	add    esp,0xc
c001651b:	c3                   	ret    
c001651c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016521:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016528:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001652b:	85 c9                	test   ecx,ecx
c001652d:	74 51                	je     c0016580 <Semaphore::acquire()+0xbc>
c001652f:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0016532:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016538:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001653b:	90                   	nop
c001653c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016541:	83 ec 0c             	sub    esp,0xc
c0016544:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0016547:	68 f0 2b 02 c0       	push   0xc0022bf0
c001654c:	e8 e9 43 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0016551:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0016558:	e8 27 fe ff ff       	call   c0016384 <blockTask(TaskState)>
c001655d:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016562:	83 c4 10             	add    esp,0x10
c0016565:	83 e8 01             	sub    eax,0x1
c0016568:	eb 8a                	jmp    c00164f4 <Semaphore::acquire()+0x30>
c001656a:	66 90                	xchg   ax,ax
c001656c:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016576:	e8 09 fc ff ff       	call   c0016184 <schedule()>
c001657b:	eb 8b                	jmp    c0016508 <Semaphore::acquire()+0x44>
c001657d:	8d 76 00             	lea    esi,[esi+0x0]
c0016580:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016585:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016588:	eb b2                	jmp    c001653c <Semaphore::acquire()+0x78>
c001658a:	66 90                	xchg   ax,ax

c001658c <taskReturned>:
c001658c:	83 ec 18             	sub    esp,0x18
c001658f:	68 10 2c 02 c0       	push   0xc0022c10
c0016594:	e8 be b0 ff ff       	call   c0011657 <KePanic(char const*)>
c0016599:	83 c4 10             	add    esp,0x10
c001659c:	83 ec 0c             	sub    esp,0xc
c001659f:	6a 02                	push   0x2
c00165a1:	e8 de fd ff ff       	call   c0016384 <blockTask(TaskState)>
c00165a6:	fa                   	cli    
c00165a7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165ac:	83 c0 01             	add    eax,0x1
c00165af:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00165b4:	e8 cb fb ff ff       	call   c0016184 <schedule()>
c00165b9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165be:	83 c4 10             	add    esp,0x10
c00165c1:	83 e8 01             	sub    eax,0x1
c00165c4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00165c9:	85 c0                	test   eax,eax
c00165cb:	75 cf                	jne    c001659c <taskReturned+0x10>
c00165cd:	fb                   	sti    
c00165ce:	eb cc                	jmp    c001659c <taskReturned+0x10>

c00165d0 <Thr::processFromPID(int)>:
c00165d0:	57                   	push   edi
c00165d1:	56                   	push   esi
c00165d2:	53                   	push   ebx
c00165d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00165d7:	fa                   	cli    
c00165d8:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c00165de:	83 ec 0c             	sub    esp,0xc
c00165e1:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165e6:	83 c1 01             	add    ecx,0x1
c00165e9:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c00165ef:	e8 38 98 00 00       	call   c001fe2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165f4:	83 c4 10             	add    esp,0x10
c00165f7:	89 c7                	mov    edi,eax
c00165f9:	eb 15                	jmp    c0016610 <Thr::processFromPID(int)+0x40>
c00165fb:	90                   	nop
c00165fc:	83 ec 0c             	sub    esp,0xc
c00165ff:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016604:	e8 23 98 00 00       	call   c001fe2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016609:	83 c4 10             	add    esp,0x10
c001660c:	39 f8                	cmp    eax,edi
c001660e:	74 50                	je     c0016660 <Thr::processFromPID(int)+0x90>
c0016610:	83 ec 0c             	sub    esp,0xc
c0016613:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016618:	e8 0f 98 00 00       	call   c001fe2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001661d:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016624:	89 c3                	mov    ebx,eax
c0016626:	e8 09 98 00 00       	call   c001fe34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001662b:	58                   	pop    eax
c001662c:	5a                   	pop    edx
c001662d:	53                   	push   ebx
c001662e:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016633:	e8 b8 98 00 00       	call   c001fef0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016638:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001663b:	83 c4 10             	add    esp,0x10
c001663e:	39 30                	cmp    DWORD PTR [eax],esi
c0016640:	75 ba                	jne    c00165fc <Thr::processFromPID(int)+0x2c>
c0016642:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016647:	83 e8 01             	sub    eax,0x1
c001664a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001664f:	74 0b                	je     c001665c <Thr::processFromPID(int)+0x8c>
c0016651:	8d 76 00             	lea    esi,[esi+0x0]
c0016654:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016657:	90                   	nop
c0016658:	5b                   	pop    ebx
c0016659:	5e                   	pop    esi
c001665a:	5f                   	pop    edi
c001665b:	c3                   	ret    
c001665c:	fb                   	sti    
c001665d:	eb f5                	jmp    c0016654 <Thr::processFromPID(int)+0x84>
c001665f:	90                   	nop
c0016660:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016665:	8d 50 ff             	lea    edx,[eax-0x1]
c0016668:	31 c0                	xor    eax,eax
c001666a:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016670:	85 d2                	test   edx,edx
c0016672:	75 e4                	jne    c0016658 <Thr::processFromPID(int)+0x88>
c0016674:	fb                   	sti    
c0016675:	5b                   	pop    ebx
c0016676:	5e                   	pop    esi
c0016677:	5f                   	pop    edi
c0016678:	c3                   	ret    
c0016679:	8d 76 00             	lea    esi,[esi+0x0]

c001667c <unblockTask(ThreadControlBlock*)>:
c001667c:	53                   	push   ebx
c001667d:	83 ec 08             	sub    esp,0x8
c0016680:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016684:	fa                   	cli    
c0016685:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001668a:	83 c0 01             	add    eax,0x1
c001668d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016692:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016695:	85 c0                	test   eax,eax
c0016697:	74 67                	je     c0016700 <unblockTask(ThreadControlBlock*)+0x84>
c0016699:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001669c:	83 f8 01             	cmp    eax,0x1
c001669f:	74 37                	je     c00166d8 <unblockTask(ThreadControlBlock*)+0x5c>
c00166a1:	83 ec 0c             	sub    esp,0xc
c00166a4:	68 e4 c6 02 c0       	push   0xc002c6e4
c00166a9:	e8 7e 97 00 00       	call   c001fe2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166ae:	83 c4 10             	add    esp,0x10
c00166b1:	85 c0                	test   eax,eax
c00166b3:	75 1b                	jne    c00166d0 <unblockTask(ThreadControlBlock*)+0x54>
c00166b5:	eb 5d                	jmp    c0016714 <unblockTask(ThreadControlBlock*)+0x98>
c00166b7:	90                   	nop
c00166b8:	83 ec 08             	sub    esp,0x8
c00166bb:	50                   	push   eax
c00166bc:	68 e4 c6 02 c0       	push   0xc002c6e4
c00166c1:	e8 86 9a 00 00       	call   c002014c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00166c6:	83 c4 10             	add    esp,0x10
c00166c9:	85 c0                	test   eax,eax
c00166cb:	74 47                	je     c0016714 <unblockTask(ThreadControlBlock*)+0x98>
c00166cd:	8d 76 00             	lea    esi,[esi+0x0]
c00166d0:	39 c3                	cmp    ebx,eax
c00166d2:	75 e4                	jne    c00166b8 <unblockTask(ThreadControlBlock*)+0x3c>
c00166d4:	eb 12                	jmp    c00166e8 <unblockTask(ThreadControlBlock*)+0x6c>
c00166d6:	66 90                	xchg   ax,ax
c00166d8:	83 ec 0c             	sub    esp,0xc
c00166db:	68 8f 2b 02 c0       	push   0xc0022b8f
c00166e0:	e8 55 42 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c00166e5:	83 c4 10             	add    esp,0x10
c00166e8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00166ed:	83 e8 01             	sub    eax,0x1
c00166f0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00166f5:	75 01                	jne    c00166f8 <unblockTask(ThreadControlBlock*)+0x7c>
c00166f7:	fb                   	sti    
c00166f8:	83 c4 08             	add    esp,0x8
c00166fb:	5b                   	pop    ebx
c00166fc:	c3                   	ret    
c00166fd:	8d 76 00             	lea    esi,[esi+0x0]
c0016700:	83 ec 0c             	sub    esp,0xc
c0016703:	68 78 2b 02 c0       	push   0xc0022b78
c0016708:	e8 2d 42 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001670d:	83 c4 10             	add    esp,0x10
c0016710:	eb d6                	jmp    c00166e8 <unblockTask(ThreadControlBlock*)+0x6c>
c0016712:	66 90                	xchg   ax,ax
c0016714:	83 ec 08             	sub    esp,0x8
c0016717:	53                   	push   ebx
c0016718:	68 e4 c6 02 c0       	push   0xc002c6e4
c001671d:	e8 ce 97 00 00       	call   c001fef0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016722:	83 c4 10             	add    esp,0x10
c0016725:	eb c1                	jmp    c00166e8 <unblockTask(ThreadControlBlock*)+0x6c>
c0016727:	90                   	nop

c0016728 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016728:	55                   	push   ebp
c0016729:	57                   	push   edi
c001672a:	56                   	push   esi
c001672b:	53                   	push   ebx
c001672c:	83 ec 1c             	sub    esp,0x1c
c001672f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016733:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016736:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c001673c:	85 ed                	test   ebp,ebp
c001673e:	7e 28                	jle    c0016768 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0016740:	31 f6                	xor    esi,esi
c0016742:	66 90                	xchg   ax,ax
c0016744:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001674b:	83 ec 0c             	sub    esp,0xc
c001674e:	83 c6 01             	add    esi,0x1
c0016751:	57                   	push   edi
c0016752:	e8 bc 13 ff ff       	call   c0007b13 <free>
c0016757:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001675a:	83 c4 10             	add    esp,0x10
c001675d:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0016763:	7f df                	jg     c0016744 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016765:	8d 76 00             	lea    esi,[esi+0x0]
c0016768:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0016772:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016777:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001677a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c001677d:	d3 c0                	rol    eax,cl
c001677f:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0016786:	21 c8                	and    eax,ecx
c0016788:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c001678f:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016792:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001679a:	89 f7                	mov    edi,esi
c001679c:	0f 85 72 01 00 00    	jne    c0016914 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00167a2:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00167a8:	85 ed                	test   ebp,ebp
c00167aa:	74 1c                	je     c00167c8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00167ac:	83 ec 0c             	sub    esp,0xc
c00167af:	55                   	push   ebp
c00167b0:	e8 b3 ab ff ff       	call   c0011368 <EnvVarContainer::~EnvVarContainer()>
c00167b5:	59                   	pop    ecx
c00167b6:	5e                   	pop    esi
c00167b7:	6a 0c                	push   0xc
c00167b9:	55                   	push   ebp
c00167ba:	e8 7d 40 ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c00167bf:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00167c2:	83 c4 10             	add    esp,0x10
c00167c5:	89 f7                	mov    edi,esi
c00167c7:	90                   	nop
c00167c8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00167ce:	85 c0                	test   eax,eax
c00167d0:	0f 84 b2 00 00 00    	je     c0016888 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00167d6:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00167d9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00167dd:	31 c9                	xor    ecx,ecx
c00167df:	eb 17                	jmp    c00167f8 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00167e1:	8d 76 00             	lea    esi,[esi+0x0]
c00167e4:	83 c1 01             	add    ecx,0x1
c00167e7:	83 f9 10             	cmp    ecx,0x10
c00167ea:	0f 84 98 00 00 00    	je     c0016888 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00167f0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00167f6:	66 90                	xchg   ax,ax
c00167f8:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00167ff:	d3 fa                	sar    edx,cl
c0016801:	80 e2 01             	and    dl,0x1
c0016804:	74 de                	je     c00167e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016806:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0016809:	c1 e2 05             	shl    edx,0x5
c001680c:	29 ca                	sub    edx,ecx
c001680e:	01 d0                	add    eax,edx
c0016810:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016816:	83 fd 07             	cmp    ebp,0x7
c0016819:	75 c9                	jne    c00167e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001681b:	05 40 02 00 00       	add    eax,0x240
c0016820:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0016823:	83 fd ff             	cmp    ebp,0xffffffff
c0016826:	0f 8c f0 00 00 00    	jl     c001691c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001682c:	0f 84 ae 01 00 00    	je     c00169e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0016832:	85 ed                	test   ebp,ebp
c0016834:	0f 84 92 01 00 00    	je     c00169cc <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c001683a:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001683c:	75 a6                	jne    c00167e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001683e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016842:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016848:	01 d0                	add    eax,edx
c001684a:	66 90                	xchg   ax,ax
c001684c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016850:	83 ec 0c             	sub    esp,0xc
c0016853:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0016859:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001685c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016862:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016869:	50                   	push   eax
c001686a:	e8 0d fe ff ff       	call   c001667c <unblockTask(ThreadControlBlock*)>
c001686f:	83 c4 10             	add    esp,0x10
c0016872:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016875:	89 f7                	mov    edi,esi
c0016877:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001687b:	83 c1 01             	add    ecx,0x1
c001687e:	83 f9 10             	cmp    ecx,0x10
c0016881:	0f 85 69 ff ff ff    	jne    c00167f0 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0016887:	90                   	nop
c0016888:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001688e:	85 c0                	test   eax,eax
c0016890:	74 62                	je     c00168f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016892:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016898:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001689e:	74 54                	je     c00168f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00168a0:	83 ec 0c             	sub    esp,0xc
c00168a3:	68 e4 c6 02 c0       	push   0xc002c6e4
c00168a8:	e8 7f 95 00 00       	call   c001fe2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168ad:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00168b4:	89 c7                	mov    edi,eax
c00168b6:	e8 55 95 00 00       	call   c001fe10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00168bb:	83 c4 10             	add    esp,0x10
c00168be:	84 c0                	test   al,al
c00168c0:	0f 84 ce 00 00 00    	je     c0016994 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00168c6:	66 90                	xchg   ax,ax
c00168c8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00168cb:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00168d1:	85 d2                	test   edx,edx
c00168d3:	74 0f                	je     c00168e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00168d5:	8b 02                	mov    eax,DWORD PTR [edx]
c00168d7:	83 ec 0c             	sub    esp,0xc
c00168da:	52                   	push   edx
c00168db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00168de:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00168e1:	83 c4 10             	add    esp,0x10
c00168e4:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00168ee:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00168f1:	8d 76 00             	lea    esi,[esi+0x0]
c00168f4:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00168fa:	85 db                	test   ebx,ebx
c00168fc:	74 16                	je     c0016914 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00168fe:	83 ec 0c             	sub    esp,0xc
c0016901:	53                   	push   ebx
c0016902:	e8 b9 32 ff ff       	call   c0009bc0 <VAS::~VAS()>
c0016907:	58                   	pop    eax
c0016908:	5a                   	pop    edx
c0016909:	6a 14                	push   0x14
c001690b:	53                   	push   ebx
c001690c:	e8 2b 3f ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c0016911:	83 c4 10             	add    esp,0x10
c0016914:	83 c4 1c             	add    esp,0x1c
c0016917:	5b                   	pop    ebx
c0016918:	5e                   	pop    esi
c0016919:	5f                   	pop    edi
c001691a:	5d                   	pop    ebp
c001691b:	c3                   	ret    
c001691c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016920:	83 ec 0c             	sub    esp,0xc
c0016923:	68 44 2c 02 c0       	push   0xc0022c44
c0016928:	e8 2a ad ff ff       	call   c0011657 <KePanic(char const*)>
c001692d:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016930:	83 c4 10             	add    esp,0x10
c0016933:	89 f7                	mov    edi,esi
c0016935:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016939:	e9 a6 fe ff ff       	jmp    c00167e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001693e:	66 90                	xchg   ax,ax
c0016940:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016946:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c001694c:	75 1e                	jne    c001696c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001694e:	83 ec 0c             	sub    esp,0xc
c0016951:	68 ac 2c 02 c0       	push   0xc0022cac
c0016956:	e8 df 3f ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001695b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0016962:	e8 1d fa ff ff       	call   c0016384 <blockTask(TaskState)>
c0016967:	83 c4 10             	add    esp,0x10
c001696a:	66 90                	xchg   ax,ax
c001696c:	83 ec 08             	sub    esp,0x8
c001696f:	56                   	push   esi
c0016970:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016975:	e8 76 95 00 00       	call   c001fef0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001697a:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016981:	e8 a6 94 00 00       	call   c001fe2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016986:	83 c4 10             	add    esp,0x10
c0016989:	39 f8                	cmp    eax,edi
c001698b:	0f 84 37 ff ff ff    	je     c00168c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0016991:	8d 76 00             	lea    esi,[esi+0x0]
c0016994:	83 ec 0c             	sub    esp,0xc
c0016997:	68 e4 c6 02 c0       	push   0xc002c6e4
c001699c:	e8 8b 94 00 00       	call   c001fe2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00169a1:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00169a8:	89 c6                	mov    esi,eax
c00169aa:	e8 85 94 00 00       	call   c001fe34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00169af:	83 c4 10             	add    esp,0x10
c00169b2:	39 f3                	cmp    ebx,esi
c00169b4:	74 b6                	je     c001696c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00169b6:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00169b9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00169bc:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00169c2:	75 a8                	jne    c001696c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00169c4:	e9 77 ff ff ff       	jmp    c0016940 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00169c9:	8d 76 00             	lea    esi,[esi+0x0]
c00169cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00169d0:	83 ec 0c             	sub    esp,0xc
c00169d3:	68 78 2c 02 c0       	push   0xc0022c78
c00169d8:	e9 4b ff ff ff       	jmp    c0016928 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00169dd:	8d 76 00             	lea    esi,[esi+0x0]
c00169e0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00169e4:	8b 36                	mov    esi,DWORD PTR [esi]
c00169e6:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00169e9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00169ec:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00169f2:	01 d7                	add    edi,edx
c00169f4:	89 f8                	mov    eax,edi
c00169f6:	e9 51 fe ff ff       	jmp    c001684c <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00169fb:	90                   	nop

c00169fc <cleanerTaskFunction(void*)>:
c00169fc:	53                   	push   ebx
c00169fd:	83 ec 08             	sub    esp,0x8
c0016a00:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a05:	83 e8 01             	sub    eax,0x1
c0016a08:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a0d:	75 01                	jne    c0016a10 <cleanerTaskFunction(void*)+0x14>
c0016a0f:	fb                   	sti    
c0016a10:	fa                   	cli    
c0016a11:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a16:	80 3d ac c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c6ac,0x0
c0016a1d:	8d 50 01             	lea    edx,[eax+0x1]
c0016a20:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016a26:	0f 84 c4 00 00 00    	je     c0016af0 <cleanerTaskFunction(void*)+0xf4>
c0016a2c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a31:	85 c0                	test   eax,eax
c0016a33:	75 03                	jne    c0016a38 <cleanerTaskFunction(void*)+0x3c>
c0016a35:	fb                   	sti    
c0016a36:	66 90                	xchg   ax,ax
c0016a38:	c6 05 ac c6 02 c0 00 	mov    BYTE PTR ds:0xc002c6ac,0x0
c0016a3f:	fa                   	cli    
c0016a40:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016a46:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016a4c:	83 c2 01             	add    edx,0x1
c0016a4f:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016a55:	83 c1 01             	add    ecx,0x1
c0016a58:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016a5e:	fa                   	cli    
c0016a5f:	8b 1d c8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6c8
c0016a65:	83 c3 01             	add    ebx,0x1
c0016a68:	89 1d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ebx
c0016a6e:	eb 28                	jmp    c0016a98 <cleanerTaskFunction(void*)+0x9c>
c0016a70:	83 ec 0c             	sub    esp,0xc
c0016a73:	68 cc c6 02 c0       	push   0xc002c6cc
c0016a78:	e8 af 93 00 00       	call   c001fe2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016a7d:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0016a84:	89 c3                	mov    ebx,eax
c0016a86:	e8 a9 93 00 00       	call   c001fe34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016a8b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a8e:	e8 95 fc ff ff       	call   c0016728 <cleanupTerminatedTask(ThreadControlBlock*)>
c0016a93:	83 c4 10             	add    esp,0x10
c0016a96:	66 90                	xchg   ax,ax
c0016a98:	83 ec 0c             	sub    esp,0xc
c0016a9b:	68 cc c6 02 c0       	push   0xc002c6cc
c0016aa0:	e8 6b 93 00 00       	call   c001fe10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016aa5:	83 c4 10             	add    esp,0x10
c0016aa8:	84 c0                	test   al,al
c0016aaa:	74 c4                	je     c0016a70 <cleanerTaskFunction(void*)+0x74>
c0016aac:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ab1:	83 e8 01             	sub    eax,0x1
c0016ab4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ab9:	75 01                	jne    c0016abc <cleanerTaskFunction(void*)+0xc0>
c0016abb:	fb                   	sti    
c0016abc:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016ac1:	83 e8 01             	sub    eax,0x1
c0016ac4:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016ac9:	0f 85 31 ff ff ff    	jne    c0016a00 <cleanerTaskFunction(void*)+0x4>
c0016acf:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016ad4:	85 c0                	test   eax,eax
c0016ad6:	0f 84 24 ff ff ff    	je     c0016a00 <cleanerTaskFunction(void*)+0x4>
c0016adc:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016ae6:	e8 99 f6 ff ff       	call   c0016184 <schedule()>
c0016aeb:	e9 10 ff ff ff       	jmp    c0016a00 <cleanerTaskFunction(void*)+0x4>
c0016af0:	83 ec 0c             	sub    esp,0xc
c0016af3:	6a 02                	push   0x2
c0016af5:	e8 62 f8 ff ff       	call   c001635c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016afa:	83 c4 10             	add    esp,0x10
c0016afd:	e9 36 ff ff ff       	jmp    c0016a38 <cleanerTaskFunction(void*)+0x3c>
c0016b02:	66 90                	xchg   ax,ax

c0016b04 <terminateTask(int)>:
c0016b04:	83 ec 14             	sub    esp,0x14
c0016b07:	fa                   	cli    
c0016b08:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016b0e:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016b14:	83 c2 01             	add    edx,0x1
c0016b17:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016b1d:	83 c1 01             	add    ecx,0x1
c0016b20:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016b26:	fa                   	cli    
c0016b27:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b2c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016b30:	83 c0 01             	add    eax,0x1
c0016b33:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b38:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b3d:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016b40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b45:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016b48:	50                   	push   eax
c0016b49:	68 cc c6 02 c0       	push   0xc002c6cc
c0016b4e:	e8 9d 93 00 00       	call   c001fef0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016b53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b58:	83 c4 10             	add    esp,0x10
c0016b5b:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016b62:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0016b67:	85 c0                	test   eax,eax
c0016b69:	74 65                	je     c0016bd0 <terminateTask(int)+0xcc>
c0016b6b:	c6 05 ac c6 02 c0 01 	mov    BYTE PTR ds:0xc002c6ac,0x1
c0016b72:	83 ec 0c             	sub    esp,0xc
c0016b75:	50                   	push   eax
c0016b76:	e8 01 fb ff ff       	call   c001667c <unblockTask(ThreadControlBlock*)>
c0016b7b:	83 c4 10             	add    esp,0x10
c0016b7e:	66 90                	xchg   ax,ax
c0016b80:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b85:	83 e8 01             	sub    eax,0x1
c0016b88:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b8d:	75 01                	jne    c0016b90 <terminateTask(int)+0x8c>
c0016b8f:	fb                   	sti    
c0016b90:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b95:	83 e8 01             	sub    eax,0x1
c0016b98:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016b9d:	75 09                	jne    c0016ba8 <terminateTask(int)+0xa4>
c0016b9f:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0016ba6:	75 3c                	jne    c0016be4 <terminateTask(int)+0xe0>
c0016ba8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016bad:	83 e8 01             	sub    eax,0x1
c0016bb0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016bb5:	75 01                	jne    c0016bb8 <terminateTask(int)+0xb4>
c0016bb7:	fb                   	sti    
c0016bb8:	fa                   	cli    
c0016bb9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016bbe:	83 c0 01             	add    eax,0x1
c0016bc1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016bc6:	66 90                	xchg   ax,ax
c0016bc8:	e8 b7 f5 ff ff       	call   c0016184 <schedule()>
c0016bcd:	eb d9                	jmp    c0016ba8 <terminateTask(int)+0xa4>
c0016bcf:	90                   	nop
c0016bd0:	83 ec 0c             	sub    esp,0xc
c0016bd3:	68 a6 2b 02 c0       	push   0xc0022ba6
c0016bd8:	e8 5d 3d ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0016bdd:	83 c4 10             	add    esp,0x10
c0016be0:	eb 9e                	jmp    c0016b80 <terminateTask(int)+0x7c>
c0016be2:	66 90                	xchg   ax,ax
c0016be4:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016bee:	eb d8                	jmp    c0016bc8 <terminateTask(int)+0xc4>

c0016bf0 <Thr::terminateFromIRQ(int)>:
c0016bf0:	83 ec 18             	sub    esp,0x18
c0016bf3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bf7:	50                   	push   eax
c0016bf8:	e8 07 ff ff ff       	call   c0016b04 <terminateTask(int)>
c0016bfd:	90                   	nop
c0016bfe:	66 90                	xchg   ax,ax

c0016c00 <Semaphore::release()>:
c0016c00:	83 ec 0c             	sub    esp,0xc
c0016c03:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016c07:	fa                   	cli    
c0016c08:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016c0d:	83 c0 01             	add    eax,0x1
c0016c10:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016c15:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016c1a:	8d 48 01             	lea    ecx,[eax+0x1]
c0016c1d:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016c23:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016c26:	85 c9                	test   ecx,ecx
c0016c28:	74 42                	je     c0016c6c <Semaphore::release()+0x6c>
c0016c2a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016c2d:	83 ec 0c             	sub    esp,0xc
c0016c30:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016c33:	51                   	push   ecx
c0016c34:	e8 43 fa ff ff       	call   c001667c <unblockTask(ThreadControlBlock*)>
c0016c39:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016c3e:	83 c4 10             	add    esp,0x10
c0016c41:	83 e8 01             	sub    eax,0x1
c0016c44:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016c49:	85 c0                	test   eax,eax
c0016c4b:	75 0b                	jne    c0016c58 <Semaphore::release()+0x58>
c0016c4d:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016c52:	85 c0                	test   eax,eax
c0016c54:	75 22                	jne    c0016c78 <Semaphore::release()+0x78>
c0016c56:	66 90                	xchg   ax,ax
c0016c58:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016c5d:	83 e8 01             	sub    eax,0x1
c0016c60:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016c65:	75 01                	jne    c0016c68 <Semaphore::release()+0x68>
c0016c67:	fb                   	sti    
c0016c68:	83 c4 0c             	add    esp,0xc
c0016c6b:	c3                   	ret    
c0016c6c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016c6f:	83 e9 01             	sub    ecx,0x1
c0016c72:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016c75:	eb cd                	jmp    c0016c44 <Semaphore::release()+0x44>
c0016c77:	90                   	nop
c0016c78:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016c82:	e8 fd f4 ff ff       	call   c0016184 <schedule()>
c0016c87:	eb cf                	jmp    c0016c58 <Semaphore::release()+0x58>
c0016c89:	8d 76 00             	lea    esi,[esi+0x0]

c0016c8c <__static_initialization_and_destruction_0(int, int)>:
c0016c8c:	83 ec 0c             	sub    esp,0xc
c0016c8f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016c94:	0f 85 8e 00 00 00    	jne    c0016d28 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016c9a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016ca2:	0f 85 80 00 00 00    	jne    c0016d28 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016ca8:	83 ec 0c             	sub    esp,0xc
c0016cab:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016cb0:	e8 ef 94 00 00       	call   c00201a4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016cb5:	83 c4 10             	add    esp,0x10
c0016cb8:	83 ec 04             	sub    esp,0x4
c0016cbb:	68 7c 38 02 c0       	push   0xc002387c
c0016cc0:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016cc5:	68 54 01 02 c0       	push   0xc0020154
c0016cca:	e8 1d 3b ff ff       	call   c000a7ec <__cxa_atexit>
c0016ccf:	83 c4 10             	add    esp,0x10
c0016cd2:	83 ec 0c             	sub    esp,0xc
c0016cd5:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016cda:	e8 c5 94 00 00       	call   c00201a4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016cdf:	83 c4 10             	add    esp,0x10
c0016ce2:	83 ec 04             	sub    esp,0x4
c0016ce5:	68 7c 38 02 c0       	push   0xc002387c
c0016cea:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016cef:	68 54 01 02 c0       	push   0xc0020154
c0016cf4:	e8 f3 3a ff ff       	call   c000a7ec <__cxa_atexit>
c0016cf9:	83 c4 10             	add    esp,0x10
c0016cfc:	83 ec 0c             	sub    esp,0xc
c0016cff:	68 cc c6 02 c0       	push   0xc002c6cc
c0016d04:	e8 9b 94 00 00       	call   c00201a4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016d09:	83 c4 10             	add    esp,0x10
c0016d0c:	83 ec 04             	sub    esp,0x4
c0016d0f:	68 7c 38 02 c0       	push   0xc002387c
c0016d14:	68 cc c6 02 c0       	push   0xc002c6cc
c0016d19:	68 54 01 02 c0       	push   0xc0020154
c0016d1e:	e8 c9 3a ff ff       	call   c000a7ec <__cxa_atexit>
c0016d23:	83 c4 10             	add    esp,0x10
c0016d26:	66 90                	xchg   ax,ax
c0016d28:	90                   	nop
c0016d29:	83 c4 0c             	add    esp,0xc
c0016d2c:	c3                   	ret    
c0016d2d:	8d 76 00             	lea    esi,[esi+0x0]

c0016d30 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016d30:	83 ec 0c             	sub    esp,0xc
c0016d33:	83 ec 08             	sub    esp,0x8
c0016d36:	68 ff ff 00 00       	push   0xffff
c0016d3b:	6a 01                	push   0x1
c0016d3d:	e8 4a ff ff ff       	call   c0016c8c <__static_initialization_and_destruction_0(int, int)>
c0016d42:	83 c4 10             	add    esp,0x10
c0016d45:	83 c4 0c             	add    esp,0xc
c0016d48:	c3                   	ret    

c0016d49 <Vm::inbv(unsigned short)>:
c0016d49:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016d4d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016d52:	75 06                	jne    c0016d5a <Vm::inbv(unsigned short)+0x11>
c0016d54:	a0 2c c7 02 c0       	mov    al,ds:0xc002c72c
c0016d59:	c3                   	ret    
c0016d5a:	ec                   	in     al,dx
c0016d5b:	c3                   	ret    

c0016d5c <Vm::outbv(unsigned short, unsigned char)>:
c0016d5c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016d60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d64:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016d69:	75 25                	jne    c0016d90 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016d6b:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016d71:	88 81 40 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38c0],al
c0016d77:	8d 51 01             	lea    edx,[ecx+0x1]
c0016d7a:	89 15 2c c7 02 c0    	mov    DWORD PTR ds:0xc002c72c,edx
c0016d80:	83 fa 20             	cmp    edx,0x20
c0016d83:	75 0c                	jne    c0016d91 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016d85:	c7 05 2c c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x1f
c0016d8f:	c3                   	ret    
c0016d90:	ee                   	out    dx,al
c0016d91:	c3                   	ret    

c0016d92 <Vm::realToLinear(unsigned short, unsigned short)>:
c0016d92:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016d97:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016d9c:	c1 e0 04             	shl    eax,0x4
c0016d9f:	01 d0                	add    eax,edx
c0016da1:	c3                   	ret    

c0016da2 <Vm::getSegment(unsigned int)>:
c0016da2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016da6:	c1 e8 10             	shr    eax,0x10
c0016da9:	c3                   	ret    

c0016daa <Vm::getOffset(unsigned int)>:
c0016daa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016dae:	c3                   	ret    

c0016daf <Vm::mainloop2()>:
c0016daf:	83 ec 18             	sub    esp,0x18
c0016db2:	fa                   	cli    
c0016db3:	6a 02                	push   0x2
c0016db5:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016dbb:	c6 05 25 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c725,0x1
c0016dc2:	e8 95 f5 ff ff       	call   c001635c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016dc7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016dcc:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016dd0:	52                   	push   edx
c0016dd1:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016dd5:	52                   	push   edx
c0016dd6:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016dda:	52                   	push   edx
c0016ddb:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016ddf:	50                   	push   eax
c0016de0:	e8 2a 94 fe ff       	call   c000020f <goToVM86>
c0016de5:	83 c4 2c             	add    esp,0x2c
c0016de8:	c3                   	ret    

c0016de9 <Vm::mainVm8086Loop(void*)>:
c0016de9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016dee:	48                   	dec    eax
c0016def:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016df4:	75 01                	jne    c0016df7 <Vm::mainVm8086Loop(void*)+0xe>
c0016df6:	fb                   	sti    
c0016df7:	eb b6                	jmp    c0016daf <Vm::mainloop2()>

c0016df9 <Vm::mainloop3(unsigned long)>:
c0016df9:	83 ec 18             	sub    esp,0x18
c0016dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016e00:	fa                   	cli    
c0016e01:	6a 02                	push   0x2
c0016e03:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e09:	c6 05 24 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c724,0x1
c0016e10:	a3 20 c7 02 c0       	mov    ds:0xc002c720,eax
c0016e15:	e8 42 f5 ff ff       	call   c001635c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016e1a:	83 c4 1c             	add    esp,0x1c
c0016e1d:	eb 90                	jmp    c0016daf <Vm::mainloop2()>

c0016e1f <Vm::initialise8086()>:
c0016e1f:	83 ec 0c             	sub    esp,0xc
c0016e22:	68 80 00 00 00       	push   0x80
c0016e27:	6a 00                	push   0x0
c0016e29:	68 e9 6d 01 c0       	push   0xc0016de9
c0016e2e:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016e34:	e8 ff f0 ff ff       	call   c0015f38 <Process::createThread(void (*)(void*), void*, int)>
c0016e39:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016e40:	68 00 01 00 00       	push   0x100
c0016e45:	6a 00                	push   0x0
c0016e47:	6a 00                	push   0x0
c0016e49:	a3 28 c7 02 c0       	mov    ds:0xc002c728,eax
c0016e4e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0016e53:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016e59:	e8 da 30 ff ff       	call   c0009f38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016e5e:	83 c4 2c             	add    esp,0x2c
c0016e61:	c3                   	ret    

c0016e62 <Vm::finish8086()>:
c0016e62:	53                   	push   ebx
c0016e63:	83 ec 08             	sub    esp,0x8
c0016e66:	fa                   	cli    
c0016e67:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e6d:	80 3d 24 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c724,0x0
c0016e74:	75 15                	jne    c0016e8b <Vm::finish8086()+0x29>
c0016e76:	e8 09 f3 ff ff       	call   c0016184 <schedule()>
c0016e7b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e80:	48                   	dec    eax
c0016e81:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e86:	75 de                	jne    c0016e66 <Vm::finish8086()+0x4>
c0016e88:	fb                   	sti    
c0016e89:	eb db                	jmp    c0016e66 <Vm::finish8086()+0x4>
c0016e8b:	c6 05 24 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c724,0x0
c0016e92:	83 ec 0c             	sub    esp,0xc
c0016e95:	8b 1d 20 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c720
c0016e9b:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016ea1:	e8 d6 f7 ff ff       	call   c001667c <unblockTask(ThreadControlBlock*)>
c0016ea6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016eab:	83 c4 10             	add    esp,0x10
c0016eae:	8d 50 ff             	lea    edx,[eax-0x1]
c0016eb1:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016eb7:	85 d2                	test   edx,edx
c0016eb9:	75 01                	jne    c0016ebc <Vm::finish8086()+0x5a>
c0016ebb:	fb                   	sti    
c0016ebc:	83 c4 08             	add    esp,0x8
c0016ebf:	89 d8                	mov    eax,ebx
c0016ec1:	5b                   	pop    ebx
c0016ec2:	c3                   	ret    

c0016ec3 <Vm::getOutput8086(unsigned char*)>:
c0016ec3:	57                   	push   edi
c0016ec4:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016eca:	56                   	push   esi
c0016ecb:	be 40 c7 02 c0       	mov    esi,0xc002c740
c0016ed0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016ed4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ed6:	5e                   	pop    esi
c0016ed7:	a1 2c c7 02 c0       	mov    eax,ds:0xc002c72c
c0016edc:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016ee6:	5f                   	pop    edi
c0016ee7:	c3                   	ret    

c0016ee8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016ee8:	55                   	push   ebp
c0016ee9:	57                   	push   edi
c0016eea:	56                   	push   esi
c0016eeb:	53                   	push   ebx
c0016eec:	83 ec 0c             	sub    esp,0xc
c0016eef:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016ef3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016ef7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016efb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016eff:	fa                   	cli    
c0016f00:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016f06:	80 3d 25 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c725,0x0
c0016f0d:	75 15                	jne    c0016f24 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016f0f:	e8 70 f2 ff ff       	call   c0016184 <schedule()>
c0016f14:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f19:	48                   	dec    eax
c0016f1a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f1f:	75 de                	jne    c0016eff <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016f21:	fb                   	sti    
c0016f22:	eb db                	jmp    c0016eff <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016f24:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016f2e:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016f33:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016f37:	0f b7 ff             	movzx  edi,di
c0016f3a:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016f3e:	0f b7 f6             	movzx  esi,si
c0016f41:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016f45:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016f49:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016f4d:	50                   	push   eax
c0016f4e:	6a 20                	push   0x20
c0016f50:	6a 00                	push   0x0
c0016f52:	68 40 c7 02 c0       	push   0xc002c740
c0016f57:	e8 94 95 fe ff       	call   c00004f0 <memset>
c0016f5c:	5a                   	pop    edx
c0016f5d:	59                   	pop    ecx
c0016f5e:	57                   	push   edi
c0016f5f:	56                   	push   esi
c0016f60:	e8 2d fe ff ff       	call   c0016d92 <Vm::realToLinear(unsigned short, unsigned short)>
c0016f65:	83 c4 10             	add    esp,0x10
c0016f68:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016f6c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016f70:	89 c7                	mov    edi,eax
c0016f72:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f74:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016f7b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f80:	48                   	dec    eax
c0016f81:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f86:	75 01                	jne    c0016f89 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016f88:	fb                   	sti    
c0016f89:	83 ec 0c             	sub    esp,0xc
c0016f8c:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016f92:	e8 e5 f6 ff ff       	call   c001667c <unblockTask(ThreadControlBlock*)>
c0016f97:	83 c4 1c             	add    esp,0x1c
c0016f9a:	b0 01                	mov    al,0x1
c0016f9c:	5b                   	pop    ebx
c0016f9d:	5e                   	pop    esi
c0016f9e:	5f                   	pop    edi
c0016f9f:	5d                   	pop    ebp
c0016fa0:	c3                   	ret    

c0016fa1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016fa1:	55                   	push   ebp
c0016fa2:	57                   	push   edi
c0016fa3:	56                   	push   esi
c0016fa4:	53                   	push   ebx
c0016fa5:	83 ec 34             	sub    esp,0x34
c0016fa8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016fac:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016fb0:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016fb4:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016fb8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016fbc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016fc0:	68 d4 2c 02 c0       	push   0xc0022cd4
c0016fc5:	e8 70 39 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0016fca:	83 c4 10             	add    esp,0x10
c0016fcd:	fa                   	cli    
c0016fce:	8a 1d 25 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c725
c0016fd4:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016fda:	84 db                	test   bl,bl
c0016fdc:	75 15                	jne    c0016ff3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016fde:	e8 a1 f1 ff ff       	call   c0016184 <schedule()>
c0016fe3:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016fe8:	48                   	dec    eax
c0016fe9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016fee:	75 dd                	jne    c0016fcd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016ff0:	fb                   	sti    
c0016ff1:	eb da                	jmp    c0016fcd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016ff3:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016ffd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017001:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0017006:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c001700a:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001700e:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0017012:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0017016:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001701a:	50                   	push   eax
c001701b:	6a 20                	push   0x20
c001701d:	6a 00                	push   0x0
c001701f:	68 40 c7 02 c0       	push   0xc002c740
c0017024:	e8 c7 94 fe ff       	call   c00004f0 <memset>
c0017029:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017030:	e8 ce 0a ff ff       	call   c0007b03 <malloc>
c0017035:	83 c4 0c             	add    esp,0xc
c0017038:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001703e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017042:	89 c5                	mov    ebp,eax
c0017044:	50                   	push   eax
c0017045:	e8 08 4b ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c001704a:	83 c4 10             	add    esp,0x10
c001704d:	85 ed                	test   ebp,ebp
c001704f:	75 0a                	jne    c001705b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0017051:	83 ec 0c             	sub    esp,0xc
c0017054:	68 f6 2c 02 c0       	push   0xc0022cf6
c0017059:	eb 2b                	jmp    c0017086 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c001705b:	50                   	push   eax
c001705c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0017060:	50                   	push   eax
c0017061:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017065:	50                   	push   eax
c0017066:	55                   	push   ebp
c0017067:	e8 06 4e ff ff       	call   c000be72 <File::stat(unsigned long long*, bool*)>
c001706c:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017070:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017074:	83 c4 10             	add    esp,0x10
c0017077:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001707c:	74 27                	je     c00170a5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c001707e:	83 ec 0c             	sub    esp,0xc
c0017081:	68 0a 2d 02 c0       	push   0xc0022d0a
c0017086:	e8 cc a5 ff ff       	call   c0011657 <KePanic(char const*)>
c001708b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0017090:	83 c4 10             	add    esp,0x10
c0017093:	48                   	dec    eax
c0017094:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017099:	85 c0                	test   eax,eax
c001709b:	75 01                	jne    c001709e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c001709d:	fb                   	sti    
c001709e:	31 db                	xor    ebx,ebx
c00170a0:	e9 90 00 00 00       	jmp    c0017135 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c00170a5:	51                   	push   ecx
c00170a6:	51                   	push   ecx
c00170a7:	6a 01                	push   0x1
c00170a9:	55                   	push   ebp
c00170aa:	e8 c1 4a ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c00170af:	83 c4 10             	add    esp,0x10
c00170b2:	85 c0                	test   eax,eax
c00170b4:	74 26                	je     c00170dc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c00170b6:	83 ec 0c             	sub    esp,0xc
c00170b9:	68 23 2d 02 c0       	push   0xc0022d23
c00170be:	e8 94 a5 ff ff       	call   c0011657 <KePanic(char const*)>
c00170c3:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00170c8:	83 c4 10             	add    esp,0x10
c00170cb:	48                   	dec    eax
c00170cc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00170d1:	85 c0                	test   eax,eax
c00170d3:	75 c9                	jne    c001709e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c00170d5:	fb                   	sti    
c00170d6:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00170da:	eb 59                	jmp    c0017135 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c00170dc:	50                   	push   eax
c00170dd:	0f b7 ff             	movzx  edi,di
c00170e0:	50                   	push   eax
c00170e1:	0f b7 f6             	movzx  esi,si
c00170e4:	57                   	push   edi
c00170e5:	56                   	push   esi
c00170e6:	e8 a7 fc ff ff       	call   c0016d92 <Vm::realToLinear(unsigned short, unsigned short)>
c00170eb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00170ee:	5a                   	pop    edx
c00170ef:	8d 74 24 20          	lea    esi,[esp+0x20]
c00170f3:	56                   	push   esi
c00170f4:	50                   	push   eax
c00170f5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170f9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170fd:	55                   	push   ebp
c00170fe:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017101:	83 c4 14             	add    esp,0x14
c0017104:	55                   	push   ebp
c0017105:	e8 c4 4a ff ff       	call   c000bbce <File::close()>
c001710a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001710f:	83 c4 10             	add    esp,0x10
c0017112:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0017119:	48                   	dec    eax
c001711a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001711f:	85 c0                	test   eax,eax
c0017121:	75 01                	jne    c0017124 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0017123:	fb                   	sti    
c0017124:	83 ec 0c             	sub    esp,0xc
c0017127:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c001712d:	e8 4a f5 ff ff       	call   c001667c <unblockTask(ThreadControlBlock*)>
c0017132:	83 c4 10             	add    esp,0x10
c0017135:	83 c4 2c             	add    esp,0x2c
c0017138:	88 d8                	mov    al,bl
c001713a:	5b                   	pop    ebx
c001713b:	5e                   	pop    esi
c001713c:	5f                   	pop    edi
c001713d:	5d                   	pop    ebp
c001713e:	c3                   	ret    

c001713f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001713f:	57                   	push   edi
c0017140:	56                   	push   esi
c0017141:	53                   	push   ebx
c0017142:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017146:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001714a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001714e:	83 e8 06             	sub    eax,0x6
c0017151:	0f b7 c0             	movzx  eax,ax
c0017154:	50                   	push   eax
c0017155:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001715a:	50                   	push   eax
c001715b:	e8 32 fc ff ff       	call   c0016d92 <Vm::realToLinear(unsigned short, unsigned short)>
c0017160:	5a                   	pop    edx
c0017161:	59                   	pop    ecx
c0017162:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0017165:	8d 51 fa             	lea    edx,[ecx-0x6]
c0017168:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001716b:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017171:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0017174:	8d 51 02             	lea    edx,[ecx+0x2]
c0017177:	66 89 10             	mov    WORD PTR [eax],dx
c001717a:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c001717e:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0017182:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0017186:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017189:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001718d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017193:	89 f1                	mov    ecx,esi
c0017195:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0017199:	89 f2                	mov    edx,esi
c001719b:	0f b6 d6             	movzx  edx,dh
c001719e:	0f b6 f1             	movzx  esi,cl
c00171a1:	74 0a                	je     c00171ad <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c00171a3:	c1 e2 08             	shl    edx,0x8
c00171a6:	09 f2                	or     edx,esi
c00171a8:	80 ce 02             	or     dh,0x2
c00171ab:	eb 08                	jmp    c00171b5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c00171ad:	c1 e2 08             	shl    edx,0x8
c00171b0:	09 f2                	or     edx,esi
c00171b2:	80 e6 fd             	and    dh,0xfd
c00171b5:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00171b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00171be:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00171c2:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c00171ca:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c00171cd:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c00171d5:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00171d8:	5b                   	pop    ebx
c00171d9:	5e                   	pop    esi
c00171da:	5f                   	pop    edi
c00171db:	c3                   	ret    

c00171dc <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00171dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171e1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171e6:	c1 e0 04             	shl    eax,0x4
c00171e9:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00171ec:	c3                   	ret    

c00171ed <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00171ed:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171f2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171f7:	c1 e0 04             	shl    eax,0x4
c00171fa:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00171fe:	c3                   	ret    

c00171ff <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00171ff:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017204:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017209:	c1 e0 04             	shl    eax,0x4
c001720c:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001720f:	c3                   	ret    

c0017210 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017210:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017215:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001721a:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001721e:	c1 e0 04             	shl    eax,0x4
c0017221:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0017224:	c3                   	ret    

c0017225 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0017225:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001722a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001722f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017233:	c1 e0 04             	shl    eax,0x4
c0017236:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001723a:	c3                   	ret    

c001723b <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001723b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017240:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017245:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017249:	c1 e0 04             	shl    eax,0x4
c001724c:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001724f:	c3                   	ret    

c0017250 <Vm::faultHandler(regs*)>:
c0017250:	55                   	push   ebp
c0017251:	57                   	push   edi
c0017252:	56                   	push   esi
c0017253:	53                   	push   ebx
c0017254:	83 ec 2c             	sub    esp,0x2c
c0017257:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001725b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001725e:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0017262:	0f b7 f8             	movzx  edi,ax
c0017265:	0f b7 c0             	movzx  eax,ax
c0017268:	52                   	push   edx
c0017269:	50                   	push   eax
c001726a:	e8 23 fb ff ff       	call   c0016d92 <Vm::realToLinear(unsigned short, unsigned short)>
c001726f:	5a                   	pop    edx
c0017270:	59                   	pop    ecx
c0017271:	89 c1                	mov    ecx,eax
c0017273:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017276:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001727a:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c001727f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017283:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0017286:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001728a:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c001728f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017293:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017297:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001729b:	e8 f2 fa ff ff       	call   c0016d92 <Vm::realToLinear(unsigned short, unsigned short)>
c00172a0:	5e                   	pop    esi
c00172a1:	be 06 00 00 00       	mov    esi,0x6
c00172a6:	5d                   	pop    ebp
c00172a7:	31 ed                	xor    ebp,ebp
c00172a9:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00172ae:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00172b1:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c00172b7:	0f 84 74 02 00 00    	je     c0017531 <Vm::faultHandler(regs*)+0x2e1>
c00172bd:	0f 87 94 00 00 00    	ja     c0017357 <Vm::faultHandler(regs*)+0x107>
c00172c3:	83 fa 66             	cmp    edx,0x66
c00172c6:	0f 84 e2 01 00 00    	je     c00174ae <Vm::faultHandler(regs*)+0x25e>
c00172cc:	77 47                	ja     c0017315 <Vm::faultHandler(regs*)+0xc5>
c00172ce:	83 fa 36             	cmp    edx,0x36
c00172d1:	0f 84 ca 01 00 00    	je     c00174a1 <Vm::faultHandler(regs*)+0x251>
c00172d7:	77 1a                	ja     c00172f3 <Vm::faultHandler(regs*)+0xa3>
c00172d9:	83 fa 26             	cmp    edx,0x26
c00172dc:	0f 84 98 01 00 00    	je     c001747a <Vm::faultHandler(regs*)+0x22a>
c00172e2:	83 fa 2e             	cmp    edx,0x2e
c00172e5:	0f 85 27 06 00 00    	jne    c0017912 <Vm::faultHandler(regs*)+0x6c2>
c00172eb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172ee:	31 f6                	xor    esi,esi
c00172f0:	41                   	inc    ecx
c00172f1:	eb bb                	jmp    c00172ae <Vm::faultHandler(regs*)+0x5e>
c00172f3:	83 fa 64             	cmp    edx,0x64
c00172f6:	0f 84 8b 01 00 00    	je     c0017487 <Vm::faultHandler(regs*)+0x237>
c00172fc:	0f 87 92 01 00 00    	ja     c0017494 <Vm::faultHandler(regs*)+0x244>
c0017302:	83 fa 3e             	cmp    edx,0x3e
c0017305:	0f 85 07 06 00 00    	jne    c0017912 <Vm::faultHandler(regs*)+0x6c2>
c001730b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001730e:	be 01 00 00 00       	mov    esi,0x1
c0017313:	eb db                	jmp    c00172f0 <Vm::faultHandler(regs*)+0xa0>
c0017315:	83 fa 6d             	cmp    edx,0x6d
c0017318:	0f 84 34 03 00 00    	je     c0017652 <Vm::faultHandler(regs*)+0x402>
c001731e:	77 17                	ja     c0017337 <Vm::faultHandler(regs*)+0xe7>
c0017320:	83 fa 67             	cmp    edx,0x67
c0017323:	0f 84 92 01 00 00    	je     c00174bb <Vm::faultHandler(regs*)+0x26b>
c0017329:	83 fa 6c             	cmp    edx,0x6c
c001732c:	0f 84 b1 02 00 00    	je     c00175e3 <Vm::faultHandler(regs*)+0x393>
c0017332:	e9 db 05 00 00       	jmp    c0017912 <Vm::faultHandler(regs*)+0x6c2>
c0017337:	83 fa 6f             	cmp    edx,0x6f
c001733a:	0f 84 40 04 00 00    	je     c0017780 <Vm::faultHandler(regs*)+0x530>
c0017340:	0f 82 a2 03 00 00    	jb     c00176e8 <Vm::faultHandler(regs*)+0x498>
c0017346:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c001734c:	0f 84 76 01 00 00    	je     c00174c8 <Vm::faultHandler(regs*)+0x278>
c0017352:	e9 bb 05 00 00       	jmp    c0017912 <Vm::faultHandler(regs*)+0x6c2>
c0017357:	81 fa ec 00 00 00    	cmp    edx,0xec
c001735d:	0f 84 57 05 00 00    	je     c00178ba <Vm::faultHandler(regs*)+0x66a>
c0017363:	0f 87 a9 00 00 00    	ja     c0017412 <Vm::faultHandler(regs*)+0x1c2>
c0017369:	81 fa e4 00 00 00    	cmp    edx,0xe4
c001736f:	0f 84 d6 04 00 00    	je     c001784b <Vm::faultHandler(regs*)+0x5fb>
c0017375:	77 78                	ja     c00173ef <Vm::faultHandler(regs*)+0x19f>
c0017377:	81 fa cd 00 00 00    	cmp    edx,0xcd
c001737d:	0f 84 0e 02 00 00    	je     c0017591 <Vm::faultHandler(regs*)+0x341>
c0017383:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0017389:	0f 85 83 05 00 00    	jne    c0017912 <Vm::faultHandler(regs*)+0x6c2>
c001738f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0017393:	89 d1                	mov    ecx,edx
c0017395:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0017398:	c1 e1 08             	shl    ecx,0x8
c001739b:	09 ca                	or     edx,ecx
c001739d:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00173a0:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00173a4:	89 d1                	mov    ecx,edx
c00173a6:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00173aa:	c1 e1 08             	shl    ecx,0x8
c00173ad:	09 ca                	or     edx,ecx
c00173af:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00173b2:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00173b6:	89 d1                	mov    ecx,edx
c00173b8:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00173bc:	c1 e1 08             	shl    ecx,0x8
c00173bf:	09 ca                	or     edx,ecx
c00173c1:	81 ca 00 02 02 00    	or     edx,0x20200
c00173c7:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00173ca:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c00173ce:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00173d4:	d1 e8                	shr    eax,1
c00173d6:	83 e0 01             	and    eax,0x1
c00173d9:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00173dc:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00173df:	83 c0 06             	add    eax,0x6
c00173e2:	25 ff ff 00 00       	and    eax,0xffff
c00173e7:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00173ea:	e9 1f 05 00 00       	jmp    c001790e <Vm::faultHandler(regs*)+0x6be>
c00173ef:	81 fa e6 00 00 00    	cmp    edx,0xe6
c00173f5:	0f 84 95 04 00 00    	je     c0017890 <Vm::faultHandler(regs*)+0x640>
c00173fb:	0f 82 66 04 00 00    	jb     c0017867 <Vm::faultHandler(regs*)+0x617>
c0017401:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0017407:	0f 84 9a 04 00 00    	je     c00178a7 <Vm::faultHandler(regs*)+0x657>
c001740d:	e9 00 05 00 00       	jmp    c0017912 <Vm::faultHandler(regs*)+0x6c2>
c0017412:	81 fa ef 00 00 00    	cmp    edx,0xef
c0017418:	0f 84 dd 04 00 00    	je     c00178fb <Vm::faultHandler(regs*)+0x6ab>
c001741e:	77 2e                	ja     c001744e <Vm::faultHandler(regs*)+0x1fe>
c0017420:	81 fa ed 00 00 00    	cmp    edx,0xed
c0017426:	0f 84 aa 04 00 00    	je     c00178d6 <Vm::faultHandler(regs*)+0x686>
c001742c:	81 fa ee 00 00 00    	cmp    edx,0xee
c0017432:	0f 85 da 04 00 00    	jne    c0017912 <Vm::faultHandler(regs*)+0x6c2>
c0017438:	50                   	push   eax
c0017439:	50                   	push   eax
c001743a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001743e:	50                   	push   eax
c001743f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017443:	50                   	push   eax
c0017444:	e8 13 f9 ff ff       	call   c0016d5c <Vm::outbv(unsigned short, unsigned char)>
c0017449:	e9 a5 04 00 00       	jmp    c00178f3 <Vm::faultHandler(regs*)+0x6a3>
c001744e:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0017454:	0f 84 6d 01 00 00    	je     c00175c7 <Vm::faultHandler(regs*)+0x377>
c001745a:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0017460:	0f 84 6f 01 00 00    	je     c00175d5 <Vm::faultHandler(regs*)+0x385>
c0017466:	81 fa f3 00 00 00    	cmp    edx,0xf3
c001746c:	0f 85 a0 04 00 00    	jne    c0017912 <Vm::faultHandler(regs*)+0x6c2>
c0017472:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017475:	e9 76 fe ff ff       	jmp    c00172f0 <Vm::faultHandler(regs*)+0xa0>
c001747a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001747d:	be 02 00 00 00       	mov    esi,0x2
c0017482:	e9 69 fe ff ff       	jmp    c00172f0 <Vm::faultHandler(regs*)+0xa0>
c0017487:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001748a:	be 03 00 00 00       	mov    esi,0x3
c001748f:	e9 5c fe ff ff       	jmp    c00172f0 <Vm::faultHandler(regs*)+0xa0>
c0017494:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017497:	be 04 00 00 00       	mov    esi,0x4
c001749c:	e9 4f fe ff ff       	jmp    c00172f0 <Vm::faultHandler(regs*)+0xa0>
c00174a1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174a4:	be 05 00 00 00       	mov    esi,0x5
c00174a9:	e9 42 fe ff ff       	jmp    c00172f0 <Vm::faultHandler(regs*)+0xa0>
c00174ae:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174b1:	bd 01 00 00 00       	mov    ebp,0x1
c00174b6:	e9 35 fe ff ff       	jmp    c00172f0 <Vm::faultHandler(regs*)+0xa0>
c00174bb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00174be:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00174c3:	e9 28 fe ff ff       	jmp    c00172f0 <Vm::faultHandler(regs*)+0xa0>
c00174c8:	83 e5 01             	and    ebp,0x1
c00174cb:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00174ce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00174d2:	74 30                	je     c0017504 <Vm::faultHandler(regs*)+0x2b4>
c00174d4:	83 e9 04             	sub    ecx,0x4
c00174d7:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00174dd:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00174e3:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00174e6:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00174e9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00174ef:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00174f3:	0f 84 12 04 00 00    	je     c001790b <Vm::faultHandler(regs*)+0x6bb>
c00174f9:	80 ce 02             	or     dh,0x2
c00174fc:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00174ff:	e9 07 04 00 00       	jmp    c001790b <Vm::faultHandler(regs*)+0x6bb>
c0017504:	83 e9 02             	sub    ecx,0x2
c0017507:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001750d:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017510:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017514:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001751a:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001751e:	74 05                	je     c0017525 <Vm::faultHandler(regs*)+0x2d5>
c0017520:	80 ce 02             	or     dh,0x2
c0017523:	eb 03                	jmp    c0017528 <Vm::faultHandler(regs*)+0x2d8>
c0017525:	80 e6 fd             	and    dh,0xfd
c0017528:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001752c:	e9 da 03 00 00       	jmp    c001790b <Vm::faultHandler(regs*)+0x6bb>
c0017531:	83 e5 01             	and    ebp,0x1
c0017534:	74 2a                	je     c0017560 <Vm::faultHandler(regs*)+0x310>
c0017536:	8b 10                	mov    edx,DWORD PTR [eax]
c0017538:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001753e:	81 ca 00 02 02 00    	or     edx,0x20200
c0017544:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017547:	8b 00                	mov    eax,DWORD PTR [eax]
c0017549:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001754f:	c1 e8 09             	shr    eax,0x9
c0017552:	83 e0 01             	and    eax,0x1
c0017555:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017558:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001755b:	83 c0 04             	add    eax,0x4
c001755e:	eb 24                	jmp    c0017584 <Vm::faultHandler(regs*)+0x334>
c0017560:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0017563:	81 ca 00 02 02 00    	or     edx,0x20200
c0017569:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001756c:	0f b7 00             	movzx  eax,WORD PTR [eax]
c001756f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017575:	c1 e8 09             	shr    eax,0x9
c0017578:	83 e0 01             	and    eax,0x1
c001757b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001757e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017581:	83 c0 02             	add    eax,0x2
c0017584:	25 ff ff 00 00       	and    eax,0xffff
c0017589:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001758c:	e9 7a 03 00 00       	jmp    c001790b <Vm::faultHandler(regs*)+0x6bb>
c0017591:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017595:	3d ee 00 00 00       	cmp    eax,0xee
c001759a:	75 10                	jne    c00175ac <Vm::faultHandler(regs*)+0x35c>
c001759c:	83 ec 0c             	sub    esp,0xc
c001759f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00175a2:	e8 52 f8 ff ff       	call   c0016df9 <Vm::mainloop3(unsigned long)>
c00175a7:	e9 4a 03 00 00       	jmp    c00178f6 <Vm::faultHandler(regs*)+0x6a6>
c00175ac:	83 ec 0c             	sub    esp,0xc
c00175af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00175b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175b7:	51                   	push   ecx
c00175b8:	50                   	push   eax
c00175b9:	53                   	push   ebx
c00175ba:	e8 80 fb ff ff       	call   c001713f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00175bf:	83 c4 20             	add    esp,0x20
c00175c2:	e9 47 03 00 00       	jmp    c001790e <Vm::faultHandler(regs*)+0x6be>
c00175c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175cc:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00175d0:	e9 36 03 00 00       	jmp    c001790b <Vm::faultHandler(regs*)+0x6bb>
c00175d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175da:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00175de:	e9 28 03 00 00       	jmp    c001790b <Vm::faultHandler(regs*)+0x6bb>
c00175e3:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00175e8:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00175eb:	74 2b                	je     c0017618 <Vm::faultHandler(regs*)+0x3c8>
c00175ed:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00175f4:	76 22                	jbe    c0017618 <Vm::faultHandler(regs*)+0x3c8>
c00175f6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00175fa:	50                   	push   eax
c00175fb:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00175ff:	50                   	push   eax
c0017600:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017604:	50                   	push   eax
c0017605:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017609:	50                   	push   eax
c001760a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001760e:	50                   	push   eax
c001760f:	6a 6c                	push   0x6c
c0017611:	6a 6c                	push   0x6c
c0017613:	e9 c0 01 00 00       	jmp    c00177d8 <Vm::faultHandler(regs*)+0x588>
c0017618:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001761c:	83 ec 0c             	sub    esp,0xc
c001761f:	0f b7 f6             	movzx  esi,si
c0017622:	50                   	push   eax
c0017623:	e8 21 f7 ff ff       	call   c0016d49 <Vm::inbv(unsigned short)>
c0017628:	83 c4 0c             	add    esp,0xc
c001762b:	0f b6 c0             	movzx  eax,al
c001762e:	50                   	push   eax
c001762f:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0017633:	50                   	push   eax
c0017634:	56                   	push   esi
c0017635:	e8 d6 fb ff ff       	call   c0017210 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001763a:	83 c4 10             	add    esp,0x10
c001763d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017640:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017644:	74 03                	je     c0017649 <Vm::faultHandler(regs*)+0x3f9>
c0017646:	48                   	dec    eax
c0017647:	eb 01                	jmp    c001764a <Vm::faultHandler(regs*)+0x3fa>
c0017649:	40                   	inc    eax
c001764a:	0f b7 c0             	movzx  eax,ax
c001764d:	e9 8e 00 00 00       	jmp    c00176e0 <Vm::faultHandler(regs*)+0x490>
c0017652:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017657:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001765a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001765d:	74 29                	je     c0017688 <Vm::faultHandler(regs*)+0x438>
c001765f:	3d ff ff 00 00       	cmp    eax,0xffff
c0017664:	76 22                	jbe    c0017688 <Vm::faultHandler(regs*)+0x438>
c0017666:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001766a:	50                   	push   eax
c001766b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001766f:	50                   	push   eax
c0017670:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017674:	50                   	push   eax
c0017675:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017679:	50                   	push   eax
c001767a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001767e:	50                   	push   eax
c001767f:	6a 6d                	push   0x6d
c0017681:	6a 6d                	push   0x6d
c0017683:	e9 50 01 00 00       	jmp    c00177d8 <Vm::faultHandler(regs*)+0x588>
c0017688:	83 e5 01             	and    ebp,0x1
c001768b:	0f b7 c8             	movzx  ecx,ax
c001768e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017691:	0f b7 f6             	movzx  esi,si
c0017694:	74 1e                	je     c00176b4 <Vm::faultHandler(regs*)+0x464>
c0017696:	ed                   	in     eax,dx
c0017697:	55                   	push   ebp
c0017698:	50                   	push   eax
c0017699:	51                   	push   ecx
c001769a:	56                   	push   esi
c001769b:	e8 9b fb ff ff       	call   c001723b <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00176a0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00176a3:	83 c4 10             	add    esp,0x10
c00176a6:	8d 50 04             	lea    edx,[eax+0x4]
c00176a9:	83 e8 04             	sub    eax,0x4
c00176ac:	81 e2 ff ff 00 00    	and    edx,0xffff
c00176b2:	eb 20                	jmp    c00176d4 <Vm::faultHandler(regs*)+0x484>
c00176b4:	66 ed                	in     ax,dx
c00176b6:	57                   	push   edi
c00176b7:	0f b7 c0             	movzx  eax,ax
c00176ba:	50                   	push   eax
c00176bb:	51                   	push   ecx
c00176bc:	56                   	push   esi
c00176bd:	e8 63 fb ff ff       	call   c0017225 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00176c2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00176c5:	83 c4 10             	add    esp,0x10
c00176c8:	8d 50 02             	lea    edx,[eax+0x2]
c00176cb:	83 e8 02             	sub    eax,0x2
c00176ce:	81 e2 ff ff 00 00    	and    edx,0xffff
c00176d4:	25 ff ff 00 00       	and    eax,0xffff
c00176d9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00176dd:	0f 44 c2             	cmove  eax,edx
c00176e0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00176e3:	e9 23 02 00 00       	jmp    c001790b <Vm::faultHandler(regs*)+0x6bb>
c00176e8:	8d 46 ff             	lea    eax,[esi-0x1]
c00176eb:	0f b6 f0             	movzx  esi,al
c00176ee:	83 fe 05             	cmp    esi,0x5
c00176f1:	77 23                	ja     c0017716 <Vm::faultHandler(regs*)+0x4c6>
c00176f3:	ff 24 b5 98 2d 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd268]
c00176fa:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00176ff:	eb 15                	jmp    c0017716 <Vm::faultHandler(regs*)+0x4c6>
c0017701:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017705:	eb 0f                	jmp    c0017716 <Vm::faultHandler(regs*)+0x4c6>
c0017707:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001770b:	eb 09                	jmp    c0017716 <Vm::faultHandler(regs*)+0x4c6>
c001770d:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017711:	eb 03                	jmp    c0017716 <Vm::faultHandler(regs*)+0x4c6>
c0017713:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0017716:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001771b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001771e:	74 29                	je     c0017749 <Vm::faultHandler(regs*)+0x4f9>
c0017720:	3d ff ff 00 00       	cmp    eax,0xffff
c0017725:	76 22                	jbe    c0017749 <Vm::faultHandler(regs*)+0x4f9>
c0017727:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001772b:	50                   	push   eax
c001772c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017730:	50                   	push   eax
c0017731:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017735:	50                   	push   eax
c0017736:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001773a:	50                   	push   eax
c001773b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001773f:	50                   	push   eax
c0017740:	6a 6e                	push   0x6e
c0017742:	6a 6e                	push   0x6e
c0017744:	e9 8f 00 00 00       	jmp    c00177d8 <Vm::faultHandler(regs*)+0x588>
c0017749:	52                   	push   edx
c001774a:	0f b7 c0             	movzx  eax,ax
c001774d:	52                   	push   edx
c001774e:	50                   	push   eax
c001774f:	57                   	push   edi
c0017750:	e8 87 fa ff ff       	call   c00171dc <Vm::readByteFromReal(unsigned short, unsigned short)>
c0017755:	59                   	pop    ecx
c0017756:	5e                   	pop    esi
c0017757:	0f b6 c0             	movzx  eax,al
c001775a:	50                   	push   eax
c001775b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001775f:	50                   	push   eax
c0017760:	e8 f7 f5 ff ff       	call   c0016d5c <Vm::outbv(unsigned short, unsigned char)>
c0017765:	83 c4 10             	add    esp,0x10
c0017768:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001776b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001776f:	74 03                	je     c0017774 <Vm::faultHandler(regs*)+0x524>
c0017771:	48                   	dec    eax
c0017772:	eb 01                	jmp    c0017775 <Vm::faultHandler(regs*)+0x525>
c0017774:	40                   	inc    eax
c0017775:	0f b7 c0             	movzx  eax,ax
c0017778:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001777b:	e9 8b 01 00 00       	jmp    c001790b <Vm::faultHandler(regs*)+0x6bb>
c0017780:	8d 46 ff             	lea    eax,[esi-0x1]
c0017783:	0f b6 f0             	movzx  esi,al
c0017786:	83 fe 05             	cmp    esi,0x5
c0017789:	77 1e                	ja     c00177a9 <Vm::faultHandler(regs*)+0x559>
c001778b:	ff 24 b5 b0 2d 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd250]
c0017792:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017796:	eb 11                	jmp    c00177a9 <Vm::faultHandler(regs*)+0x559>
c0017798:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001779b:	eb 0c                	jmp    c00177a9 <Vm::faultHandler(regs*)+0x559>
c001779d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00177a0:	eb 07                	jmp    c00177a9 <Vm::faultHandler(regs*)+0x559>
c00177a2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00177a5:	eb 02                	jmp    c00177a9 <Vm::faultHandler(regs*)+0x559>
c00177a7:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00177a9:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00177ae:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00177b1:	74 37                	je     c00177ea <Vm::faultHandler(regs*)+0x59a>
c00177b3:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00177b9:	76 2f                	jbe    c00177ea <Vm::faultHandler(regs*)+0x59a>
c00177bb:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00177bf:	50                   	push   eax
c00177c0:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00177c4:	50                   	push   eax
c00177c5:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00177c9:	50                   	push   eax
c00177ca:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00177ce:	50                   	push   eax
c00177cf:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00177d3:	50                   	push   eax
c00177d4:	6a 6f                	push   0x6f
c00177d6:	6a 6f                	push   0x6f
c00177d8:	68 3c 2d 02 c0       	push   0xc0022d3c
c00177dd:	e8 58 31 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c00177e2:	83 c4 20             	add    esp,0x20
c00177e5:	e9 86 01 00 00       	jmp    c0017970 <Vm::faultHandler(regs*)+0x720>
c00177ea:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00177ed:	0f b7 d7             	movzx  edx,di
c00177f0:	0f b7 c6             	movzx  eax,si
c00177f3:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00177f6:	81 e1 00 04 00 00    	and    ecx,0x400
c00177fc:	83 e5 01             	and    ebp,0x1
c00177ff:	74 1c                	je     c001781d <Vm::faultHandler(regs*)+0x5cd>
c0017801:	55                   	push   ebp
c0017802:	55                   	push   ebp
c0017803:	50                   	push   eax
c0017804:	52                   	push   edx
c0017805:	e8 f5 f9 ff ff       	call   c00171ff <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001780a:	83 c4 10             	add    esp,0x10
c001780d:	89 fa                	mov    edx,edi
c001780f:	ef                   	out    dx,eax
c0017810:	8d 46 04             	lea    eax,[esi+0x4]
c0017813:	83 ee 04             	sub    esi,0x4
c0017816:	25 ff ff 00 00       	and    eax,0xffff
c001781b:	eb 1b                	jmp    c0017838 <Vm::faultHandler(regs*)+0x5e8>
c001781d:	55                   	push   ebp
c001781e:	55                   	push   ebp
c001781f:	50                   	push   eax
c0017820:	52                   	push   edx
c0017821:	e8 c7 f9 ff ff       	call   c00171ed <Vm::readWordFromReal(unsigned short, unsigned short)>
c0017826:	83 c4 10             	add    esp,0x10
c0017829:	89 fa                	mov    edx,edi
c001782b:	66 ef                	out    dx,ax
c001782d:	8d 46 02             	lea    eax,[esi+0x2]
c0017830:	83 ee 02             	sub    esi,0x2
c0017833:	25 ff ff 00 00       	and    eax,0xffff
c0017838:	81 e6 ff ff 00 00    	and    esi,0xffff
c001783e:	85 c9                	test   ecx,ecx
c0017840:	0f 44 f0             	cmove  esi,eax
c0017843:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017846:	e9 c0 00 00 00       	jmp    c001790b <Vm::faultHandler(regs*)+0x6bb>
c001784b:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017852:	83 ec 0c             	sub    esp,0xc
c0017855:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017859:	50                   	push   eax
c001785a:	e8 ea f4 ff ff       	call   c0016d49 <Vm::inbv(unsigned short)>
c001785f:	0f b6 c0             	movzx  eax,al
c0017862:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017865:	eb 3a                	jmp    c00178a1 <Vm::faultHandler(regs*)+0x651>
c0017867:	83 e5 01             	and    ebp,0x1
c001786a:	74 07                	je     c0017873 <Vm::faultHandler(regs*)+0x623>
c001786c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017870:	ed                   	in     eax,dx
c0017871:	eb 14                	jmp    c0017887 <Vm::faultHandler(regs*)+0x637>
c0017873:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017876:	66 31 f6             	xor    si,si
c0017879:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001787c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017880:	66 ed                	in     ax,dx
c0017882:	0f b7 c0             	movzx  eax,ax
c0017885:	09 f0                	or     eax,esi
c0017887:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001788a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001788e:	eb 7e                	jmp    c001790e <Vm::faultHandler(regs*)+0x6be>
c0017890:	52                   	push   edx
c0017891:	52                   	push   edx
c0017892:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017896:	50                   	push   eax
c0017897:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001789b:	50                   	push   eax
c001789c:	e8 bb f4 ff ff       	call   c0016d5c <Vm::outbv(unsigned short, unsigned char)>
c00178a1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00178a5:	eb 4f                	jmp    c00178f6 <Vm::faultHandler(regs*)+0x6a6>
c00178a7:	83 e5 01             	and    ebp,0x1
c00178aa:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00178ad:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00178b1:	74 03                	je     c00178b6 <Vm::faultHandler(regs*)+0x666>
c00178b3:	ef                   	out    dx,eax
c00178b4:	eb d4                	jmp    c001788a <Vm::faultHandler(regs*)+0x63a>
c00178b6:	66 ef                	out    dx,ax
c00178b8:	eb d0                	jmp    c001788a <Vm::faultHandler(regs*)+0x63a>
c00178ba:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00178be:	83 ec 0c             	sub    esp,0xc
c00178c1:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00178c8:	50                   	push   eax
c00178c9:	e8 7b f4 ff ff       	call   c0016d49 <Vm::inbv(unsigned short)>
c00178ce:	0f b6 c0             	movzx  eax,al
c00178d1:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00178d4:	eb 1d                	jmp    c00178f3 <Vm::faultHandler(regs*)+0x6a3>
c00178d6:	83 e5 01             	and    ebp,0x1
c00178d9:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00178dc:	74 03                	je     c00178e1 <Vm::faultHandler(regs*)+0x691>
c00178de:	ed                   	in     eax,dx
c00178df:	eb 0d                	jmp    c00178ee <Vm::faultHandler(regs*)+0x69e>
c00178e1:	66 ed                	in     ax,dx
c00178e3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00178e6:	0f b7 c0             	movzx  eax,ax
c00178e9:	66 31 d2             	xor    dx,dx
c00178ec:	09 d0                	or     eax,edx
c00178ee:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00178f1:	eb 18                	jmp    c001790b <Vm::faultHandler(regs*)+0x6bb>
c00178f3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00178f6:	83 c4 10             	add    esp,0x10
c00178f9:	eb 13                	jmp    c001790e <Vm::faultHandler(regs*)+0x6be>
c00178fb:	83 e5 01             	and    ebp,0x1
c00178fe:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017901:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017904:	74 03                	je     c0017909 <Vm::faultHandler(regs*)+0x6b9>
c0017906:	ef                   	out    dx,eax
c0017907:	eb 02                	jmp    c001790b <Vm::faultHandler(regs*)+0x6bb>
c0017909:	66 ef                	out    dx,ax
c001790b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001790e:	b0 01                	mov    al,0x1
c0017910:	eb 60                	jmp    c0017972 <Vm::faultHandler(regs*)+0x722>
c0017912:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017916:	50                   	push   eax
c0017917:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001791b:	50                   	push   eax
c001791c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017920:	50                   	push   eax
c0017921:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017925:	50                   	push   eax
c0017926:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001792a:	50                   	push   eax
c001792b:	52                   	push   edx
c001792c:	52                   	push   edx
c001792d:	68 69 2d 02 c0       	push   0xc0022d69
c0017932:	e8 03 30 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0017937:	83 c4 20             	add    esp,0x20
c001793a:	83 ec 0c             	sub    esp,0xc
c001793d:	6a 60                	push   0x60
c001793f:	e8 05 f4 ff ff       	call   c0016d49 <Vm::inbv(unsigned short)>
c0017944:	83 c4 10             	add    esp,0x10
c0017947:	0f b6 d0             	movzx  edx,al
c001794a:	83 fa 1c             	cmp    edx,0x1c
c001794d:	74 05                	je     c0017954 <Vm::faultHandler(regs*)+0x704>
c001794f:	83 fa 5a             	cmp    edx,0x5a
c0017952:	75 e6                	jne    c001793a <Vm::faultHandler(regs*)+0x6ea>
c0017954:	0f b6 c0             	movzx  eax,al
c0017957:	83 f8 1c             	cmp    eax,0x1c
c001795a:	74 05                	je     c0017961 <Vm::faultHandler(regs*)+0x711>
c001795c:	83 f8 5a             	cmp    eax,0x5a
c001795f:	75 0f                	jne    c0017970 <Vm::faultHandler(regs*)+0x720>
c0017961:	83 ec 0c             	sub    esp,0xc
c0017964:	6a 60                	push   0x60
c0017966:	e8 de f3 ff ff       	call   c0016d49 <Vm::inbv(unsigned short)>
c001796b:	83 c4 10             	add    esp,0x10
c001796e:	eb e4                	jmp    c0017954 <Vm::faultHandler(regs*)+0x704>
c0017970:	31 c0                	xor    eax,eax
c0017972:	83 c4 2c             	add    esp,0x2c
c0017975:	5b                   	pop    ebx
c0017976:	5e                   	pop    esi
c0017977:	5f                   	pop    edi
c0017978:	5d                   	pop    ebp
c0017979:	c3                   	ret    

c001797a <noCopro(unsigned long)>:
c001797a:	c3                   	ret    

c001797b <nmiHandler(regs*, void*)>:
c001797b:	83 ec 0c             	sub    esp,0xc
c001797e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017983:	83 ec 0c             	sub    esp,0xc
c0017986:	50                   	push   eax
c0017987:	e8 7a f9 fe ff       	call   c0007306 <Computer::handleNMI()>
c001798c:	83 c4 10             	add    esp,0x10
c001798f:	90                   	nop
c0017990:	83 c4 0c             	add    esp,0xc
c0017993:	c3                   	ret    

c0017994 <doubleFault(regs*, void*)>:
c0017994:	55                   	push   ebp
c0017995:	89 e5                	mov    ebp,esp
c0017997:	83 ec 08             	sub    esp,0x8
c001799a:	83 ec 0c             	sub    esp,0xc
c001799d:	68 c8 2d 02 c0       	push   0xc0022dc8
c00179a2:	e8 b0 9c ff ff       	call   c0011657 <KePanic(char const*)>
c00179a7:	83 c4 10             	add    esp,0x10
c00179aa:	90                   	nop
c00179ab:	c9                   	leave  
c00179ac:	c3                   	ret    

c00179ad <displayDebugInfo(regs*)>:
c00179ad:	83 ec 1c             	sub    esp,0x1c
c00179b0:	0f 20 c0             	mov    eax,cr0
c00179b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00179b7:	0f 20 d0             	mov    eax,cr2
c00179ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00179be:	0f 20 d8             	mov    eax,cr3
c00179c1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00179c5:	0f 20 e0             	mov    eax,cr4
c00179c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00179cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179cf:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00179d2:	83 ec 08             	sub    esp,0x8
c00179d5:	50                   	push   eax
c00179d6:	68 e4 2d 02 c0       	push   0xc0022de4
c00179db:	e8 5a 2f ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c00179e0:	83 c4 10             	add    esp,0x10
c00179e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179e7:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00179ea:	83 ec 08             	sub    esp,0x8
c00179ed:	50                   	push   eax
c00179ee:	68 d5 2d 02 c0       	push   0xc0022dd5
c00179f3:	e8 42 2f ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c00179f8:	83 c4 10             	add    esp,0x10
c00179fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179ff:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017a02:	83 ec 08             	sub    esp,0x8
c0017a05:	50                   	push   eax
c0017a06:	68 e0 2d 02 c0       	push   0xc0022de0
c0017a0b:	e8 2a 2f ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0017a10:	83 c4 10             	add    esp,0x10
c0017a13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a17:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017a1a:	83 ec 08             	sub    esp,0x8
c0017a1d:	50                   	push   eax
c0017a1e:	68 ef 2d 02 c0       	push   0xc0022def
c0017a23:	e8 12 2f ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0017a28:	83 c4 10             	add    esp,0x10
c0017a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a2f:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017a32:	83 ec 08             	sub    esp,0x8
c0017a35:	50                   	push   eax
c0017a36:	68 fa 2d 02 c0       	push   0xc0022dfa
c0017a3b:	e8 fa 2e ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0017a40:	83 c4 10             	add    esp,0x10
c0017a43:	83 ec 08             	sub    esp,0x8
c0017a46:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017a4a:	68 05 2e 02 c0       	push   0xc0022e05
c0017a4f:	e8 e6 2e ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0017a54:	83 c4 10             	add    esp,0x10
c0017a57:	83 ec 08             	sub    esp,0x8
c0017a5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017a5e:	68 10 2e 02 c0       	push   0xc0022e10
c0017a63:	e8 d2 2e ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0017a68:	83 c4 10             	add    esp,0x10
c0017a6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a6f:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017a72:	c1 e0 05             	shl    eax,0x5
c0017a75:	8d 90 a0 41 02 c0    	lea    edx,[eax-0x3ffdbe60]
c0017a7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a7f:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017a82:	83 ec 04             	sub    esp,0x4
c0017a85:	52                   	push   edx
c0017a86:	50                   	push   eax
c0017a87:	68 1b 2e 02 c0       	push   0xc0022e1b
c0017a8c:	e8 a9 2e ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0017a91:	83 c4 10             	add    esp,0x10
c0017a94:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a99:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a9f:	83 ec 0c             	sub    esp,0xc
c0017aa2:	50                   	push   eax
c0017aa3:	e8 f7 0c ff ff       	call   c000879f <setActiveTerminal(VgaText*)>
c0017aa8:	83 c4 10             	add    esp,0x10
c0017aab:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ab0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ab6:	83 ec 08             	sub    esp,0x8
c0017ab9:	68 2a 2e 02 c0       	push   0xc0022e2a
c0017abe:	50                   	push   eax
c0017abf:	e8 18 10 ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0017ac4:	83 c4 10             	add    esp,0x10
c0017ac7:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017acc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ad2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ad6:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017ad9:	83 ec 08             	sub    esp,0x8
c0017adc:	52                   	push   edx
c0017add:	50                   	push   eax
c0017ade:	e8 b3 0f ff ff       	call   c0008a96 <VgaText::putx(unsigned int)>
c0017ae3:	83 c4 10             	add    esp,0x10
c0017ae6:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017aeb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017af1:	83 ec 08             	sub    esp,0x8
c0017af4:	68 38 2e 02 c0       	push   0xc0022e38
c0017af9:	50                   	push   eax
c0017afa:	e8 dd 0f ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0017aff:	83 c4 10             	add    esp,0x10
c0017b02:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b07:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b0d:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017b12:	8b 12                	mov    edx,DWORD PTR [edx]
c0017b14:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017b17:	83 c2 0c             	add    edx,0xc
c0017b1a:	83 ec 08             	sub    esp,0x8
c0017b1d:	52                   	push   edx
c0017b1e:	50                   	push   eax
c0017b1f:	e8 b8 0f ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0017b24:	83 c4 10             	add    esp,0x10
c0017b27:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b2c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b32:	83 ec 08             	sub    esp,0x8
c0017b35:	68 41 2e 02 c0       	push   0xc0022e41
c0017b3a:	50                   	push   eax
c0017b3b:	e8 9c 0f ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0017b40:	83 c4 10             	add    esp,0x10
c0017b43:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b48:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b4e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b52:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017b55:	83 ec 08             	sub    esp,0x8
c0017b58:	52                   	push   edx
c0017b59:	50                   	push   eax
c0017b5a:	e8 37 0f ff ff       	call   c0008a96 <VgaText::putx(unsigned int)>
c0017b5f:	83 c4 10             	add    esp,0x10
c0017b62:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b67:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b6d:	83 ec 08             	sub    esp,0x8
c0017b70:	68 49 2e 02 c0       	push   0xc0022e49
c0017b75:	50                   	push   eax
c0017b76:	e8 61 0f ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0017b7b:	83 c4 10             	add    esp,0x10
c0017b7e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b83:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b89:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b8d:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017b90:	83 ec 08             	sub    esp,0x8
c0017b93:	52                   	push   edx
c0017b94:	50                   	push   eax
c0017b95:	e8 fc 0e ff ff       	call   c0008a96 <VgaText::putx(unsigned int)>
c0017b9a:	83 c4 10             	add    esp,0x10
c0017b9d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ba2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ba8:	83 ec 08             	sub    esp,0x8
c0017bab:	68 51 2e 02 c0       	push   0xc0022e51
c0017bb0:	50                   	push   eax
c0017bb1:	e8 26 0f ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0017bb6:	83 c4 10             	add    esp,0x10
c0017bb9:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bbe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bc4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017bc8:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017bcb:	83 ec 08             	sub    esp,0x8
c0017bce:	52                   	push   edx
c0017bcf:	50                   	push   eax
c0017bd0:	e8 c1 0e ff ff       	call   c0008a96 <VgaText::putx(unsigned int)>
c0017bd5:	83 c4 10             	add    esp,0x10
c0017bd8:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bdd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017be3:	83 ec 08             	sub    esp,0x8
c0017be6:	68 59 2e 02 c0       	push   0xc0022e59
c0017beb:	50                   	push   eax
c0017bec:	e8 eb 0e ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0017bf1:	83 c4 10             	add    esp,0x10
c0017bf4:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bf9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c03:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017c06:	83 ec 08             	sub    esp,0x8
c0017c09:	52                   	push   edx
c0017c0a:	50                   	push   eax
c0017c0b:	e8 86 0e ff ff       	call   c0008a96 <VgaText::putx(unsigned int)>
c0017c10:	83 c4 10             	add    esp,0x10
c0017c13:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c18:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c1e:	83 ec 08             	sub    esp,0x8
c0017c21:	68 61 2e 02 c0       	push   0xc0022e61
c0017c26:	50                   	push   eax
c0017c27:	e8 b0 0e ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0017c2c:	83 c4 10             	add    esp,0x10
c0017c2f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c34:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c3a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c3e:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017c41:	83 ec 08             	sub    esp,0x8
c0017c44:	52                   	push   edx
c0017c45:	50                   	push   eax
c0017c46:	e8 4b 0e ff ff       	call   c0008a96 <VgaText::putx(unsigned int)>
c0017c4b:	83 c4 10             	add    esp,0x10
c0017c4e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c53:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c59:	83 ec 08             	sub    esp,0x8
c0017c5c:	68 69 2e 02 c0       	push   0xc0022e69
c0017c61:	50                   	push   eax
c0017c62:	e8 75 0e ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0017c67:	83 c4 10             	add    esp,0x10
c0017c6a:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c6f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c75:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c79:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017c7c:	83 ec 08             	sub    esp,0x8
c0017c7f:	52                   	push   edx
c0017c80:	50                   	push   eax
c0017c81:	e8 10 0e ff ff       	call   c0008a96 <VgaText::putx(unsigned int)>
c0017c86:	83 c4 10             	add    esp,0x10
c0017c89:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c8e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c94:	83 ec 08             	sub    esp,0x8
c0017c97:	68 71 2e 02 c0       	push   0xc0022e71
c0017c9c:	50                   	push   eax
c0017c9d:	e8 3a 0e ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0017ca2:	83 c4 10             	add    esp,0x10
c0017ca5:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017caa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cb0:	83 ec 08             	sub    esp,0x8
c0017cb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017cb7:	50                   	push   eax
c0017cb8:	e8 d9 0d ff ff       	call   c0008a96 <VgaText::putx(unsigned int)>
c0017cbd:	83 c4 10             	add    esp,0x10
c0017cc0:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017cc5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ccb:	83 ec 08             	sub    esp,0x8
c0017cce:	68 7a 2e 02 c0       	push   0xc0022e7a
c0017cd3:	50                   	push   eax
c0017cd4:	e8 03 0e ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0017cd9:	83 c4 10             	add    esp,0x10
c0017cdc:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ce1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ce7:	83 ec 08             	sub    esp,0x8
c0017cea:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017cee:	50                   	push   eax
c0017cef:	e8 a2 0d ff ff       	call   c0008a96 <VgaText::putx(unsigned int)>
c0017cf4:	83 c4 10             	add    esp,0x10
c0017cf7:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017cfc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d02:	83 ec 08             	sub    esp,0x8
c0017d05:	68 82 2e 02 c0       	push   0xc0022e82
c0017d0a:	50                   	push   eax
c0017d0b:	e8 cc 0d ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0017d10:	83 c4 10             	add    esp,0x10
c0017d13:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017d18:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d1e:	83 ec 08             	sub    esp,0x8
c0017d21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017d25:	50                   	push   eax
c0017d26:	e8 6b 0d ff ff       	call   c0008a96 <VgaText::putx(unsigned int)>
c0017d2b:	83 c4 10             	add    esp,0x10
c0017d2e:	fa                   	cli    
c0017d2f:	f4                   	hlt    
c0017d30:	eb fe                	jmp    c0017d30 <displayDebugInfo(regs*)+0x383>

c0017d32 <HalSystemIdle()>:
c0017d32:	56                   	push   esi
c0017d33:	53                   	push   ebx
c0017d34:	83 ec 14             	sub    esp,0x14
c0017d37:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017d3c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017d42:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017d48:	83 e0 04             	and    eax,0x4
c0017d4b:	0f b6 c0             	movzx  eax,al
c0017d4e:	85 c0                	test   eax,eax
c0017d50:	0f 95 c0             	setne  al
c0017d53:	0f b6 c0             	movzx  eax,al
c0017d56:	85 c0                	test   eax,eax
c0017d58:	74 4c                	je     c0017da6 <HalSystemIdle()+0x74>
c0017d5a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017d5f:	83 ec 08             	sub    esp,0x8
c0017d62:	68 e1 00 00 00       	push   0xe1
c0017d67:	50                   	push   eax
c0017d68:	e8 a5 f3 fe ff       	call   c0007112 <Computer::rdmsr(unsigned int)>
c0017d6d:	83 c4 10             	add    esp,0x10
c0017d70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017d78:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017d7d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017d81:	83 e2 02             	and    edx,0x2
c0017d84:	89 d3                	mov    ebx,edx
c0017d86:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d8a:	83 e2 00             	and    edx,0x0
c0017d8d:	89 d6                	mov    esi,edx
c0017d8f:	56                   	push   esi
c0017d90:	53                   	push   ebx
c0017d91:	68 e1 00 00 00       	push   0xe1
c0017d96:	50                   	push   eax
c0017d97:	e8 a2 f3 fe ff       	call   c000713e <Computer::wrmsr(unsigned int, unsigned long long)>
c0017d9c:	83 c4 10             	add    esp,0x10
c0017d9f:	e8 f0 83 fe ff       	call   c0000194 <doTPAUSE>
c0017da4:	eb 01                	jmp    c0017da7 <HalSystemIdle()+0x75>
c0017da6:	f4                   	hlt    
c0017da7:	90                   	nop
c0017da8:	83 c4 14             	add    esp,0x14
c0017dab:	5b                   	pop    ebx
c0017dac:	5e                   	pop    esi
c0017dad:	c3                   	ret    

c0017dae <displayProgramFault(char const*)>:
c0017dae:	83 ec 0c             	sub    esp,0xc
c0017db1:	83 ec 0c             	sub    esp,0xc
c0017db4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017db8:	e8 7d 2b ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0017dbd:	83 c4 10             	add    esp,0x10
c0017dc0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017dc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0017dc7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017dca:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017dd0:	85 c0                	test   eax,eax
c0017dd2:	74 21                	je     c0017df5 <displayProgramFault(char const*)+0x47>
c0017dd4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017dd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ddb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017dde:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017de4:	6a 04                	push   0x4
c0017de6:	6a 0f                	push   0xf
c0017de8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017dec:	50                   	push   eax
c0017ded:	e8 5c 0d ff ff       	call   c0008b4e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017df2:	83 c4 10             	add    esp,0x10
c0017df5:	90                   	nop
c0017df6:	83 c4 0c             	add    esp,0xc
c0017df9:	c3                   	ret    

c0017dfa <gpFault(regs*, void*)>:
c0017dfa:	83 ec 1c             	sub    esp,0x1c
c0017dfd:	c7 05 74 c7 02 c0 50 72 01 c0 	mov    DWORD PTR ds:0xc002c774,0xc0017250
c0017e07:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017e0c:	85 c0                	test   eax,eax
c0017e0e:	74 1e                	je     c0017e2e <gpFault(regs*, void*)+0x34>
c0017e10:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017e15:	83 ec 0c             	sub    esp,0xc
c0017e18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e1c:	ff d0                	call   eax
c0017e1e:	83 c4 10             	add    esp,0x10
c0017e21:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017e25:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017e2a:	85 c0                	test   eax,eax
c0017e2c:	75 2e                	jne    c0017e5c <gpFault(regs*, void*)+0x62>
c0017e2e:	83 ec 0c             	sub    esp,0xc
c0017e31:	68 8a 2e 02 c0       	push   0xc0022e8a
c0017e36:	e8 73 ff ff ff       	call   c0017dae <displayProgramFault(char const*)>
c0017e3b:	83 c4 10             	add    esp,0x10
c0017e3e:	83 ec 0c             	sub    esp,0xc
c0017e41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e45:	e8 63 fb ff ff       	call   c00179ad <displayDebugInfo(regs*)>
c0017e4a:	83 c4 10             	add    esp,0x10
c0017e4d:	83 ec 0c             	sub    esp,0xc
c0017e50:	6a 00                	push   0x0
c0017e52:	e8 99 ed ff ff       	call   c0016bf0 <Thr::terminateFromIRQ(int)>
c0017e57:	83 c4 10             	add    esp,0x10
c0017e5a:	eb 01                	jmp    c0017e5d <gpFault(regs*, void*)+0x63>
c0017e5c:	90                   	nop
c0017e5d:	83 c4 1c             	add    esp,0x1c
c0017e60:	c3                   	ret    

c0017e61 <pgFault(regs*, void*)>:
c0017e61:	83 ec 1c             	sub    esp,0x1c
c0017e64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e68:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017e6b:	0f 20 d0             	mov    eax,cr2
c0017e6e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017e72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e76:	83 ec 04             	sub    esp,0x4
c0017e79:	52                   	push   edx
c0017e7a:	50                   	push   eax
c0017e7b:	68 68 2f 02 c0       	push   0xc0022f68
c0017e80:	e8 b5 2a ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0017e85:	83 c4 10             	add    esp,0x10
c0017e88:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017e8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e8f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017e92:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017e98:	0f 20 d2             	mov    edx,cr2
c0017e9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017e9f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ea3:	83 ec 08             	sub    esp,0x8
c0017ea6:	52                   	push   edx
c0017ea7:	50                   	push   eax
c0017ea8:	e8 fd 24 ff ff       	call   c000a3aa <VAS::tryLoadBackOffDisk(unsigned long)>
c0017ead:	83 c4 10             	add    esp,0x10
c0017eb0:	0f b6 c0             	movzx  eax,al
c0017eb3:	85 c0                	test   eax,eax
c0017eb5:	75 2e                	jne    c0017ee5 <pgFault(regs*, void*)+0x84>
c0017eb7:	83 ec 0c             	sub    esp,0xc
c0017eba:	68 a3 2e 02 c0       	push   0xc0022ea3
c0017ebf:	e8 ea fe ff ff       	call   c0017dae <displayProgramFault(char const*)>
c0017ec4:	83 c4 10             	add    esp,0x10
c0017ec7:	83 ec 0c             	sub    esp,0xc
c0017eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ece:	e8 da fa ff ff       	call   c00179ad <displayDebugInfo(regs*)>
c0017ed3:	83 c4 10             	add    esp,0x10
c0017ed6:	83 ec 0c             	sub    esp,0xc
c0017ed9:	6a 00                	push   0x0
c0017edb:	e8 10 ed ff ff       	call   c0016bf0 <Thr::terminateFromIRQ(int)>
c0017ee0:	83 c4 10             	add    esp,0x10
c0017ee3:	eb 01                	jmp    c0017ee6 <pgFault(regs*, void*)+0x85>
c0017ee5:	90                   	nop
c0017ee6:	83 c4 1c             	add    esp,0x1c
c0017ee9:	c3                   	ret    

c0017eea <otherISRHandler(regs*, void*)>:
c0017eea:	83 ec 0c             	sub    esp,0xc
c0017eed:	83 ec 0c             	sub    esp,0xc
c0017ef0:	68 90 2f 02 c0       	push   0xc0022f90
c0017ef5:	e8 b4 fe ff ff       	call   c0017dae <displayProgramFault(char const*)>
c0017efa:	83 c4 10             	add    esp,0x10
c0017efd:	83 ec 0c             	sub    esp,0xc
c0017f00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f04:	e8 a4 fa ff ff       	call   c00179ad <displayDebugInfo(regs*)>
c0017f09:	83 c4 10             	add    esp,0x10
c0017f0c:	83 ec 0c             	sub    esp,0xc
c0017f0f:	6a 00                	push   0x0
c0017f11:	e8 da ec ff ff       	call   c0016bf0 <Thr::terminateFromIRQ(int)>
c0017f16:	83 c4 10             	add    esp,0x10
c0017f19:	90                   	nop
c0017f1a:	83 c4 0c             	add    esp,0xc
c0017f1d:	c3                   	ret    

c0017f1e <opcodeFault(regs*, void*)>:
c0017f1e:	55                   	push   ebp
c0017f1f:	89 e5                	mov    ebp,esp
c0017f21:	83 ec 08             	sub    esp,0x8
c0017f24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f27:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017f2a:	83 ec 08             	sub    esp,0x8
c0017f2d:	50                   	push   eax
c0017f2e:	68 ae 2e 02 c0       	push   0xc0022eae
c0017f33:	e8 02 2a ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0017f38:	83 c4 10             	add    esp,0x10
c0017f3b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017f40:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017f46:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017f4c:	0f b6 c0             	movzx  eax,al
c0017f4f:	85 c0                	test   eax,eax
c0017f51:	74 21                	je     c0017f74 <opcodeFault(regs*, void*)+0x56>
c0017f53:	83 ec 0c             	sub    esp,0xc
c0017f56:	68 b8 2f 02 c0       	push   0xc0022fb8
c0017f5b:	e8 da 29 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0017f60:	83 c4 10             	add    esp,0x10
c0017f63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f66:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017f69:	8d 50 19             	lea    edx,[eax+0x19]
c0017f6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f6f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017f72:	eb 2b                	jmp    c0017f9f <opcodeFault(regs*, void*)+0x81>
c0017f74:	83 ec 0c             	sub    esp,0xc
c0017f77:	68 bc 2e 02 c0       	push   0xc0022ebc
c0017f7c:	e8 2d fe ff ff       	call   c0017dae <displayProgramFault(char const*)>
c0017f81:	83 c4 10             	add    esp,0x10
c0017f84:	83 ec 0c             	sub    esp,0xc
c0017f87:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017f8a:	e8 1e fa ff ff       	call   c00179ad <displayDebugInfo(regs*)>
c0017f8f:	83 c4 10             	add    esp,0x10
c0017f92:	83 ec 0c             	sub    esp,0xc
c0017f95:	6a 00                	push   0x0
c0017f97:	e8 54 ec ff ff       	call   c0016bf0 <Thr::terminateFromIRQ(int)>
c0017f9c:	83 c4 10             	add    esp,0x10
c0017f9f:	c9                   	leave  
c0017fa0:	c3                   	ret    

c0017fa1 <i386SaveCoprocessor(void*)>:
c0017fa1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017fa5:	83 c0 3f             	add    eax,0x3f
c0017fa8:	83 e0 c0             	and    eax,0xffffffc0
c0017fab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017faf:	ff 25 70 c7 02 c0    	jmp    DWORD PTR ds:0xc002c770

c0017fb5 <i386LoadCoprocessor(void*)>:
c0017fb5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017fb9:	83 c0 3f             	add    eax,0x3f
c0017fbc:	83 e0 c0             	and    eax,0xffffffc0
c0017fbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017fc3:	ff 25 6c c7 02 c0    	jmp    DWORD PTR ds:0xc002c76c

c0017fc9 <x87EmulHandler(regs*, void*)>:
c0017fc9:	53                   	push   ebx
c0017fca:	83 ec 08             	sub    esp,0x8
c0017fcd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017fd2:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017fd6:	74 10                	je     c0017fe8 <x87EmulHandler(regs*, void*)+0x1f>
c0017fd8:	83 ec 0c             	sub    esp,0xc
c0017fdb:	68 c9 2e 02 c0       	push   0xc0022ec9
c0017fe0:	e8 72 96 ff ff       	call   c0011657 <KePanic(char const*)>
c0017fe5:	83 c4 10             	add    esp,0x10
c0017fe8:	0f 20 c0             	mov    eax,cr0
c0017feb:	a8 08                	test   al,0x8
c0017fed:	74 59                	je     c0018048 <x87EmulHandler(regs*, void*)+0x7f>
c0017fef:	0f 06                	clts   
c0017ff1:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017ff6:	85 c0                	test   eax,eax
c0017ff8:	74 0e                	je     c0018008 <x87EmulHandler(regs*, void*)+0x3f>
c0017ffa:	83 ec 0c             	sub    esp,0xc
c0017ffd:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0018000:	e8 9c ff ff ff       	call   c0017fa1 <i386SaveCoprocessor(void*)>
c0018005:	83 c4 10             	add    esp,0x10
c0018008:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001800e:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0018012:	75 12                	jne    c0018026 <x87EmulHandler(regs*, void*)+0x5d>
c0018014:	83 ec 0c             	sub    esp,0xc
c0018017:	68 40 02 00 00       	push   0x240
c001801c:	e8 e2 fa fe ff       	call   c0007b03 <malloc>
c0018021:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0018024:	eb 10                	jmp    c0018036 <x87EmulHandler(regs*, void*)+0x6d>
c0018026:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c001802b:	83 ec 0c             	sub    esp,0xc
c001802e:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0018031:	e8 7f ff ff ff       	call   c0017fb5 <i386LoadCoprocessor(void*)>
c0018036:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001803b:	83 c4 10             	add    esp,0x10
c001803e:	a3 68 c7 02 c0       	mov    ds:0xc002c768,eax
c0018043:	83 c4 08             	add    esp,0x8
c0018046:	5b                   	pop    ebx
c0018047:	c3                   	ret    
c0018048:	83 ec 0c             	sub    esp,0xc
c001804b:	68 dd 2e 02 c0       	push   0xc0022edd
c0018050:	e8 e5 28 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0018055:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001805d:	83 c4 18             	add    esp,0x18
c0018060:	5b                   	pop    ebx
c0018061:	e9 8a eb ff ff       	jmp    c0016bf0 <Thr::terminateFromIRQ(int)>

c0018066 <HalInitialiseCoprocessor()>:
c0018066:	83 ec 10             	sub    esp,0x10
c0018069:	6a 00                	push   0x0
c001806b:	68 c9 7f 01 c0       	push   0xc0017fc9
c0018070:	6a 07                	push   0x7
c0018072:	c7 05 68 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c768,0x0
c001807c:	e8 bd 4e ff ff       	call   c000cf3e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018081:	e8 aa 70 00 00       	call   c001f130 <avxDetect>
c0018086:	83 c4 10             	add    esp,0x10
c0018089:	85 c0                	test   eax,eax
c001808b:	74 1c                	je     c00180a9 <HalInitialiseCoprocessor()+0x43>
c001808d:	c7 05 70 c7 02 c0 5a f1 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f15a
c0018097:	c7 05 6c c7 02 c0 6b f1 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f16b
c00180a1:	83 c4 0c             	add    esp,0xc
c00180a4:	e9 d3 70 00 00       	jmp    c001f17c <avxInit>
c00180a9:	e8 12 74 00 00       	call   c001f4c0 <absolutelyNoChanceInHell>
c00180ae:	85 c0                	test   eax,eax
c00180b0:	74 1c                	je     c00180ce <HalInitialiseCoprocessor()+0x68>
c00180b2:	c7 05 70 c7 02 c0 d8 f4 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f4d8
c00180bc:	c7 05 6c c7 02 c0 e0 f4 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f4e0
c00180c6:	83 c4 0c             	add    esp,0xc
c00180c9:	e9 1a 74 00 00       	jmp    c001f4e8 <sseInit>
c00180ce:	e8 33 74 00 00       	call   c001f506 <x87Detect>
c00180d3:	85 c0                	test   eax,eax
c00180d5:	74 1c                	je     c00180f3 <HalInitialiseCoprocessor()+0x8d>
c00180d7:	c7 05 70 c7 02 c0 21 f5 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f521
c00180e1:	c7 05 6c c7 02 c0 28 f5 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f528
c00180eb:	83 c4 0c             	add    esp,0xc
c00180ee:	e9 3c 74 00 00       	jmp    c001f52f <x87Init>
c00180f3:	c7 05 70 c7 02 c0 7a 79 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001797a
c00180fd:	c7 05 6c c7 02 c0 7a 79 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001797a
c0018107:	0f 20 c0             	mov    eax,cr0
c001810a:	83 c8 04             	or     eax,0x4
c001810d:	0f 22 c0             	mov    cr0,eax
c0018110:	83 c4 0c             	add    esp,0xc
c0018113:	c3                   	ret    

c0018114 <HalPanic(char const*)>:
c0018114:	53                   	push   ebx
c0018115:	83 ec 10             	sub    esp,0x10
c0018118:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001811c:	fa                   	cli    
c001811d:	53                   	push   ebx
c001811e:	68 f3 2e 02 c0       	push   0xc0022ef3
c0018123:	e8 12 28 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c0018128:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c001812d:	83 c4 10             	add    esp,0x10
c0018130:	85 c0                	test   eax,eax
c0018132:	74 09                	je     c001813d <HalPanic(char const*)+0x29>
c0018134:	83 ec 0c             	sub    esp,0xc
c0018137:	53                   	push   ebx
c0018138:	ff d0                	call   eax
c001813a:	83 c4 10             	add    esp,0x10
c001813d:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c0018142:	85 c0                	test   eax,eax
c0018144:	0f 84 dc 00 00 00    	je     c0018226 <HalPanic(char const*)+0x112>
c001814a:	52                   	push   edx
c001814b:	6a 01                	push   0x1
c001814d:	6a 0f                	push   0xf
c001814f:	50                   	push   eax
c0018150:	e8 a5 04 ff ff       	call   c00085fa <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018155:	59                   	pop    ecx
c0018156:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001815c:	e8 89 06 ff ff       	call   c00087ea <VgaText::clearScreen()>
c0018161:	58                   	pop    eax
c0018162:	5a                   	pop    edx
c0018163:	68 ec 0f 02 c0       	push   0xc0020fec
c0018168:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001816e:	e8 bf 04 ff ff       	call   c0008632 <VgaText::setTitle(char*)>
c0018173:	83 c4 0c             	add    esp,0xc
c0018176:	6a 01                	push   0x1
c0018178:	6a 0f                	push   0xf
c001817a:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018180:	e8 75 04 ff ff       	call   c00085fa <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018185:	59                   	pop    ecx
c0018186:	58                   	pop    eax
c0018187:	68 0c 2f 02 c0       	push   0xc0022f0c
c001818c:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018192:	e8 45 09 ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0018197:	83 c4 0c             	add    esp,0xc
c001819a:	6a 0f                	push   0xf
c001819c:	6a 01                	push   0x1
c001819e:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181a4:	e8 51 04 ff ff       	call   c00085fa <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00181a9:	58                   	pop    eax
c00181aa:	5a                   	pop    edx
c00181ab:	68 15 2f 02 c0       	push   0xc0022f15
c00181b0:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181b6:	e8 21 09 ff ff       	call   c0008adc <VgaText::puts(char const*)>
c00181bb:	83 c4 0c             	add    esp,0xc
c00181be:	6a 01                	push   0x1
c00181c0:	6a 0f                	push   0xf
c00181c2:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181c8:	e8 2d 04 ff ff       	call   c00085fa <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00181cd:	59                   	pop    ecx
c00181ce:	58                   	pop    eax
c00181cf:	68 59 2f 02 c0       	push   0xc0022f59
c00181d4:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181da:	e8 fd 08 ff ff       	call   c0008adc <VgaText::puts(char const*)>
c00181df:	58                   	pop    eax
c00181e0:	5a                   	pop    edx
c00181e1:	68 22 2f 02 c0       	push   0xc0022f22
c00181e6:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181ec:	e8 eb 08 ff ff       	call   c0008adc <VgaText::puts(char const*)>
c00181f1:	59                   	pop    ecx
c00181f2:	58                   	pop    eax
c00181f3:	68 5c 2f 02 c0       	push   0xc0022f5c
c00181f8:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00181fe:	e8 d9 08 ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0018203:	58                   	pop    eax
c0018204:	5a                   	pop    edx
c0018205:	53                   	push   ebx
c0018206:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001820c:	e8 cb 08 ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0018211:	59                   	pop    ecx
c0018212:	5b                   	pop    ebx
c0018213:	68 59 2f 02 c0       	push   0xc0022f59
c0018218:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001821e:	e8 b9 08 ff ff       	call   c0008adc <VgaText::puts(char const*)>
c0018223:	83 c4 10             	add    esp,0x10
c0018226:	eb fe                	jmp    c0018226 <HalPanic(char const*)+0x112>

c0018228 <HalQueryPerformanceCounter()>:
c0018228:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001822d:	31 d2                	xor    edx,edx
c001822f:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018235:	31 c0                	xor    eax,eax
c0018237:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001823e:	74 02                	je     c0018242 <HalQueryPerformanceCounter()+0x1a>
c0018240:	0f 31                	rdtsc  
c0018242:	c3                   	ret    

c0018243 <HalInitialise()>:
c0018243:	53                   	push   ebx
c0018244:	83 ec 08             	sub    esp,0x8
c0018247:	e8 29 4f ff ff       	call   c000d175 <setupINTS()>
c001824c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018251:	80 3d e0 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbe0,0x0
c0018258:	75 0f                	jne    c0018269 <HalInitialise()+0x26>
c001825a:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0018260:	83 e2 fe             	and    edx,0xfffffffe
c0018263:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0018269:	c6 05 60 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c760,0x0
c0018270:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0018276:	83 e2 fe             	and    edx,0xfffffffe
c0018279:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001827f:	e8 a0 02 00 00       	call   c0018524 <picOpen()>
c0018284:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c001828b:	74 0a                	je     c0018297 <HalInitialise()+0x54>
c001828d:	e8 e2 01 00 00       	call   c0018474 <picDisable()>
c0018292:	e8 0d 68 00 00       	call   c001eaa4 <apicOpen()>
c0018297:	50                   	push   eax
c0018298:	bb 0f 00 00 00       	mov    ebx,0xf
c001829d:	6a 00                	push   0x0
c001829f:	68 ea 7e 01 c0       	push   0xc0017eea
c00182a4:	6a 00                	push   0x0
c00182a6:	e8 93 4c ff ff       	call   c000cf3e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182ab:	83 c4 0c             	add    esp,0xc
c00182ae:	6a 00                	push   0x0
c00182b0:	68 ea 7e 01 c0       	push   0xc0017eea
c00182b5:	6a 01                	push   0x1
c00182b7:	e8 82 4c ff ff       	call   c000cf3e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182bc:	83 c4 0c             	add    esp,0xc
c00182bf:	6a 00                	push   0x0
c00182c1:	68 7b 79 01 c0       	push   0xc001797b
c00182c6:	6a 02                	push   0x2
c00182c8:	e8 71 4c ff ff       	call   c000cf3e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182cd:	83 c4 0c             	add    esp,0xc
c00182d0:	6a 00                	push   0x0
c00182d2:	68 ea 7e 01 c0       	push   0xc0017eea
c00182d7:	6a 03                	push   0x3
c00182d9:	e8 60 4c ff ff       	call   c000cf3e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182de:	83 c4 0c             	add    esp,0xc
c00182e1:	6a 00                	push   0x0
c00182e3:	68 ea 7e 01 c0       	push   0xc0017eea
c00182e8:	6a 04                	push   0x4
c00182ea:	e8 4f 4c ff ff       	call   c000cf3e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182ef:	83 c4 0c             	add    esp,0xc
c00182f2:	6a 00                	push   0x0
c00182f4:	68 ea 7e 01 c0       	push   0xc0017eea
c00182f9:	6a 05                	push   0x5
c00182fb:	e8 3e 4c ff ff       	call   c000cf3e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018300:	83 c4 0c             	add    esp,0xc
c0018303:	6a 00                	push   0x0
c0018305:	68 1e 7f 01 c0       	push   0xc0017f1e
c001830a:	6a 06                	push   0x6
c001830c:	e8 2d 4c ff ff       	call   c000cf3e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018311:	83 c4 0c             	add    esp,0xc
c0018314:	6a 00                	push   0x0
c0018316:	68 94 79 01 c0       	push   0xc0017994
c001831b:	6a 08                	push   0x8
c001831d:	e8 1c 4c ff ff       	call   c000cf3e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018322:	83 c4 0c             	add    esp,0xc
c0018325:	6a 00                	push   0x0
c0018327:	68 ea 7e 01 c0       	push   0xc0017eea
c001832c:	6a 09                	push   0x9
c001832e:	e8 0b 4c ff ff       	call   c000cf3e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018333:	83 c4 0c             	add    esp,0xc
c0018336:	6a 00                	push   0x0
c0018338:	68 ea 7e 01 c0       	push   0xc0017eea
c001833d:	6a 0a                	push   0xa
c001833f:	e8 fa 4b ff ff       	call   c000cf3e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018344:	83 c4 0c             	add    esp,0xc
c0018347:	6a 00                	push   0x0
c0018349:	68 ea 7e 01 c0       	push   0xc0017eea
c001834e:	6a 0b                	push   0xb
c0018350:	e8 e9 4b ff ff       	call   c000cf3e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018355:	83 c4 0c             	add    esp,0xc
c0018358:	6a 00                	push   0x0
c001835a:	68 fa 7d 01 c0       	push   0xc0017dfa
c001835f:	6a 0d                	push   0xd
c0018361:	e8 d8 4b ff ff       	call   c000cf3e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018366:	83 c4 0c             	add    esp,0xc
c0018369:	6a 00                	push   0x0
c001836b:	68 61 7e 01 c0       	push   0xc0017e61
c0018370:	6a 0e                	push   0xe
c0018372:	e8 c7 4b ff ff       	call   c000cf3e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018377:	83 c4 10             	add    esp,0x10
c001837a:	50                   	push   eax
c001837b:	6a 00                	push   0x0
c001837d:	68 ea 7e 01 c0       	push   0xc0017eea
c0018382:	53                   	push   ebx
c0018383:	43                   	inc    ebx
c0018384:	e8 b5 4b ff ff       	call   c000cf3e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018389:	83 c4 10             	add    esp,0x10
c001838c:	83 fb 1e             	cmp    ebx,0x1e
c001838f:	75 e9                	jne    c001837a <HalInitialise()+0x137>
c0018391:	50                   	push   eax
c0018392:	6a 00                	push   0x0
c0018394:	68 0b 2b 01 c0       	push   0xc0012b0b
c0018399:	6a 60                	push   0x60
c001839b:	e8 9e 4b ff ff       	call   c000cf3e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00183a0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00183a5:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00183af:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00183b6:	e8 48 f7 fe ff       	call   c0007b03 <malloc>
c00183bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00183be:	89 c3                	mov    ebx,eax
c00183c0:	e8 37 09 00 00       	call   c0018cfc <RTC::RTC()>
c00183c5:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00183cf:	5a                   	pop    edx
c00183d0:	59                   	pop    ecx
c00183d1:	53                   	push   ebx
c00183d2:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00183d8:	e8 f3 45 ff ff       	call   c000c9d0 <Device::addChild(Device*)>
c00183dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00183df:	6a 00                	push   0x0
c00183e1:	6a 00                	push   0x0
c00183e3:	6a 00                	push   0x0
c00183e5:	53                   	push   ebx
c00183e6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00183e9:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00183ee:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00183f4:	83 c4 28             	add    esp,0x28
c00183f7:	5b                   	pop    ebx
c00183f8:	c3                   	ret    

c00183f9 <HalMakeBeep(int)>:
c00183f9:	53                   	push   ebx
c00183fa:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00183fe:	85 db                	test   ebx,ebx
c0018400:	75 07                	jne    c0018409 <HalMakeBeep(int)+0x10>
c0018402:	e4 61                	in     al,0x61
c0018404:	83 e0 fc             	and    eax,0xfffffffc
c0018407:	eb 26                	jmp    c001842f <HalMakeBeep(int)+0x36>
c0018409:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001840e:	99                   	cdq    
c001840f:	f7 fb                	idiv   ebx
c0018411:	89 c1                	mov    ecx,eax
c0018413:	b0 b6                	mov    al,0xb6
c0018415:	e6 43                	out    0x43,al
c0018417:	88 c8                	mov    al,cl
c0018419:	e6 42                	out    0x42,al
c001841b:	89 c8                	mov    eax,ecx
c001841d:	c1 e8 08             	shr    eax,0x8
c0018420:	e6 42                	out    0x42,al
c0018422:	e4 61                	in     al,0x61
c0018424:	89 c2                	mov    edx,eax
c0018426:	83 ca 03             	or     edx,0x3
c0018429:	38 d0                	cmp    al,dl
c001842b:	74 04                	je     c0018431 <HalMakeBeep(int)+0x38>
c001842d:	88 d0                	mov    al,dl
c001842f:	e6 61                	out    0x61,al
c0018431:	5b                   	pop    ebx
c0018432:	c3                   	ret    

c0018433 <HalGetRand()>:
c0018433:	31 c0                	xor    eax,eax
c0018435:	c3                   	ret    

c0018436 <HalEndOfInterrupt(int)>:
c0018436:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c001843d:	74 23                	je     c0018462 <HalEndOfInterrupt(int)+0x2c>
c001843f:	83 ec 14             	sub    esp,0x14
c0018442:	6a 1b                	push   0x1b
c0018444:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001844a:	e8 c3 ec fe ff       	call   c0007112 <Computer::rdmsr(unsigned int)>
c001844f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018454:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001845e:	83 c4 1c             	add    esp,0x1c
c0018461:	c3                   	ret    
c0018462:	e9 41 02 00 00       	jmp    c00186a8 <picEOI(int)>

c0018467 <HalRestart()>:
c0018467:	c3                   	ret    

c0018468 <HalShutdown()>:
c0018468:	c3                   	ret    

c0018469 <HalSleep()>:
c0018469:	c3                   	ret    
c001846a:	66 90                	xchg   ax,ax

c001846c <picIoWait()>:
c001846c:	eb 00                	jmp    c001846e <picIoWait()+0x2>
c001846e:	eb 00                	jmp    c0018470 <picIoWait()+0x4>
c0018470:	90                   	nop
c0018471:	c3                   	ret    
c0018472:	66 90                	xchg   ax,ax

c0018474 <picDisable()>:
c0018474:	83 ec 10             	sub    esp,0x10
c0018477:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001847e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0018483:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018487:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001848c:	ee                   	out    dx,al
c001848d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0018494:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018499:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001849d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00184a2:	ee                   	out    dx,al
c00184a3:	90                   	nop
c00184a4:	83 c4 10             	add    esp,0x10
c00184a7:	c3                   	ret    

c00184a8 <picGetIRQReg(int)>:
c00184a8:	83 ec 10             	sub    esp,0x10
c00184ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00184af:	0f b6 c0             	movzx  eax,al
c00184b2:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00184b9:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00184bd:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00184c1:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00184c6:	ee                   	out    dx,al
c00184c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00184cb:	0f b6 c0             	movzx  eax,al
c00184ce:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00184d5:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00184d9:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00184dd:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00184e2:	ee                   	out    dx,al
c00184e3:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00184ea:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00184ef:	89 c2                	mov    edx,eax
c00184f1:	ec                   	in     al,dx
c00184f2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00184f6:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00184fa:	0f b6 c0             	movzx  eax,al
c00184fd:	c1 e0 08             	shl    eax,0x8
c0018500:	89 c1                	mov    ecx,eax
c0018502:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018509:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001850e:	89 c2                	mov    edx,eax
c0018510:	ec                   	in     al,dx
c0018511:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018515:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018519:	0f b6 c0             	movzx  eax,al
c001851c:	09 c8                	or     eax,ecx
c001851e:	83 c4 10             	add    esp,0x10
c0018521:	c3                   	ret    
c0018522:	66 90                	xchg   ax,ax

c0018524 <picOpen()>:
c0018524:	83 ec 50             	sub    esp,0x50
c0018527:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001852e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0018533:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018537:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001853b:	ee                   	out    dx,al
c001853c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0018543:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018548:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001854c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018550:	ee                   	out    dx,al
c0018551:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018559:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0018561:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0018568:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001856c:	89 c2                	mov    edx,eax
c001856e:	ec                   	in     al,dx
c001856f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0018573:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018577:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001857b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0018582:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018586:	89 c2                	mov    edx,eax
c0018588:	ec                   	in     al,dx
c0018589:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001858d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018591:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0018595:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001859c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00185a1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00185a5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00185a9:	ee                   	out    dx,al
c00185aa:	e8 bd fe ff ff       	call   c001846c <picIoWait()>
c00185af:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00185b6:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00185bb:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00185bf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00185c3:	ee                   	out    dx,al
c00185c4:	e8 a3 fe ff ff       	call   c001846c <picIoWait()>
c00185c9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00185cd:	0f b6 c0             	movzx  eax,al
c00185d0:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00185d7:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00185db:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00185df:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00185e3:	ee                   	out    dx,al
c00185e4:	e8 83 fe ff ff       	call   c001846c <picIoWait()>
c00185e9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00185ed:	0f b6 c0             	movzx  eax,al
c00185f0:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00185f7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00185fb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00185ff:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018603:	ee                   	out    dx,al
c0018604:	e8 63 fe ff ff       	call   c001846c <picIoWait()>
c0018609:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018610:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018615:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018619:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001861d:	ee                   	out    dx,al
c001861e:	e8 49 fe ff ff       	call   c001846c <picIoWait()>
c0018623:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001862a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001862f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0018633:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018637:	ee                   	out    dx,al
c0018638:	e8 2f fe ff ff       	call   c001846c <picIoWait()>
c001863d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0018644:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018649:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001864d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018651:	ee                   	out    dx,al
c0018652:	e8 15 fe ff ff       	call   c001846c <picIoWait()>
c0018657:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001865e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0018663:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0018667:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001866b:	ee                   	out    dx,al
c001866c:	e8 fb fd ff ff       	call   c001846c <picIoWait()>
c0018671:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0018676:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001867d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018681:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018685:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018689:	ee                   	out    dx,al
c001868a:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001868f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0018696:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001869a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001869e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00186a2:	ee                   	out    dx,al
c00186a3:	90                   	nop
c00186a4:	83 c4 50             	add    esp,0x50
c00186a7:	c3                   	ret    

c00186a8 <picEOI(int)>:
c00186a8:	83 ec 10             	sub    esp,0x10
c00186ab:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00186b0:	75 1e                	jne    c00186d0 <picEOI(int)+0x28>
c00186b2:	6a 0b                	push   0xb
c00186b4:	e8 ef fd ff ff       	call   c00184a8 <picGetIRQReg(int)>
c00186b9:	83 c4 04             	add    esp,0x4
c00186bc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00186c1:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00186c6:	25 80 00 00 00       	and    eax,0x80
c00186cb:	74 73                	je     c0018740 <picEOI(int)+0x98>
c00186cd:	8d 76 00             	lea    esi,[esi+0x0]
c00186d0:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00186d5:	75 31                	jne    c0018708 <picEOI(int)+0x60>
c00186d7:	6a 0b                	push   0xb
c00186d9:	e8 ca fd ff ff       	call   c00184a8 <picGetIRQReg(int)>
c00186de:	83 c4 04             	add    esp,0x4
c00186e1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00186e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186ea:	98                   	cwde   
c00186eb:	85 c0                	test   eax,eax
c00186ed:	78 19                	js     c0018708 <picEOI(int)+0x60>
c00186ef:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00186f6:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00186fb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00186ff:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018704:	ee                   	out    dx,al
c0018705:	eb 3d                	jmp    c0018744 <picEOI(int)+0x9c>
c0018707:	90                   	nop
c0018708:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001870d:	7e 19                	jle    c0018728 <picEOI(int)+0x80>
c001870f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018716:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001871b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001871f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018724:	ee                   	out    dx,al
c0018725:	8d 76 00             	lea    esi,[esi+0x0]
c0018728:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001872f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018734:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018738:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001873d:	ee                   	out    dx,al
c001873e:	eb 04                	jmp    c0018744 <picEOI(int)+0x9c>
c0018740:	90                   	nop
c0018741:	8d 76 00             	lea    esi,[esi+0x0]
c0018744:	83 c4 10             	add    esp,0x10
c0018747:	c3                   	ret    

c0018748 <RTC::open(int, int, void*)>:
c0018748:	31 c0                	xor    eax,eax
c001874a:	c3                   	ret    
c001874b:	90                   	nop

c001874c <RTC::close(int, int, void*)>:
c001874c:	31 c0                	xor    eax,eax
c001874e:	c3                   	ret    
c001874f:	90                   	nop

c0018750 <RTC::timeInSecondsUTC()>:
c0018750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018754:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001875a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018760:	c3                   	ret    
c0018761:	90                   	nop

c0018762 <RTC::timeInDatetimeUTC()>:
c0018762:	53                   	push   ebx
c0018763:	83 ec 14             	sub    esp,0x14
c0018766:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001876a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001876e:	8b 10                	mov    edx,DWORD PTR [eax]
c0018770:	50                   	push   eax
c0018771:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018774:	83 c4 0c             	add    esp,0xc
c0018777:	52                   	push   edx
c0018778:	50                   	push   eax
c0018779:	53                   	push   ebx
c001877a:	e8 c5 3f ff ff       	call   c000c744 <secondsToDatetime(unsigned long long)>
c001877f:	89 d8                	mov    eax,ebx
c0018781:	83 c4 14             	add    esp,0x14
c0018784:	5b                   	pop    ebx
c0018785:	c2 04 00             	ret    0x4

c0018788 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018788:	56                   	push   esi
c0018789:	53                   	push   ebx
c001878a:	83 ec 14             	sub    esp,0x14
c001878d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018791:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018793:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0018796:	8d 44 24 08          	lea    eax,[esp+0x8]
c001879a:	52                   	push   edx
c001879b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001879f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187a3:	50                   	push   eax
c00187a4:	e8 9b 3f ff ff       	call   c000c744 <secondsToDatetime(unsigned long long)>
c00187a9:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00187ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187b1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00187b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00187b9:	89 f0                	mov    eax,esi
c00187bb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00187bf:	83 c4 20             	add    esp,0x20
c00187c2:	5b                   	pop    ebx
c00187c3:	5e                   	pop    esi
c00187c4:	ff e0                	jmp    eax

c00187c6 <RTC::~RTC()>:
c00187c6:	83 ec 0c             	sub    esp,0xc
c00187c9:	ba f8 2f 02 c0       	mov    edx,0xc0022ff8
c00187ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187d2:	89 10                	mov    DWORD PTR [eax],edx
c00187d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187d8:	83 ec 0c             	sub    esp,0xc
c00187db:	50                   	push   eax
c00187dc:	e8 ef 3c ff ff       	call   c000c4d0 <Clock::~Clock()>
c00187e1:	83 c4 10             	add    esp,0x10
c00187e4:	90                   	nop
c00187e5:	83 c4 0c             	add    esp,0xc
c00187e8:	c3                   	ret    
c00187e9:	90                   	nop

c00187ea <RTC::~RTC()>:
c00187ea:	83 ec 0c             	sub    esp,0xc
c00187ed:	83 ec 0c             	sub    esp,0xc
c00187f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00187f4:	e8 cd ff ff ff       	call   c00187c6 <RTC::~RTC()>
c00187f9:	83 c4 10             	add    esp,0x10
c00187fc:	83 ec 08             	sub    esp,0x8
c00187ff:	68 60 01 00 00       	push   0x160
c0018804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018808:	e8 2f 20 ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c001880d:	83 c4 10             	add    esp,0x10
c0018810:	83 c4 0c             	add    esp,0xc
c0018813:	c3                   	ret    

c0018814 <RTC::get_update_in_progress_flag()>:
c0018814:	83 ec 14             	sub    esp,0x14
c0018817:	6a 0a                	push   0xa
c0018819:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001881f:	e8 a6 e9 fe ff       	call   c00071ca <Computer::readCMOS(unsigned char)>
c0018824:	83 c4 1c             	add    esp,0x1c
c0018827:	0f b6 c0             	movzx  eax,al
c001882a:	c1 e8 07             	shr    eax,0x7
c001882d:	c3                   	ret    

c001882e <RTC::completeRTCRefresh()>:
c001882e:	55                   	push   ebp
c001882f:	57                   	push   edi
c0018830:	56                   	push   esi
c0018831:	53                   	push   ebx
c0018832:	83 ec 3c             	sub    esp,0x3c
c0018835:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c001883b:	83 ec 0c             	sub    esp,0xc
c001883e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018842:	e8 cd ff ff ff       	call   c0018814 <RTC::get_update_in_progress_flag()>
c0018847:	83 c4 10             	add    esp,0x10
c001884a:	84 c0                	test   al,al
c001884c:	74 0e                	je     c001885c <RTC::completeRTCRefresh()+0x2e>
c001884e:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018854:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c001885a:	73 df                	jae    c001883b <RTC::completeRTCRefresh()+0xd>
c001885c:	50                   	push   eax
c001885d:	50                   	push   eax
c001885e:	6a 00                	push   0x0
c0018860:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018866:	e8 5f e9 fe ff       	call   c00071ca <Computer::readCMOS(unsigned char)>
c001886b:	89 c7                	mov    edi,eax
c001886d:	58                   	pop    eax
c001886e:	5a                   	pop    edx
c001886f:	6a 02                	push   0x2
c0018871:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018877:	e8 4e e9 fe ff       	call   c00071ca <Computer::readCMOS(unsigned char)>
c001887c:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018880:	59                   	pop    ecx
c0018881:	5b                   	pop    ebx
c0018882:	6a 04                	push   0x4
c0018884:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001888a:	e8 3b e9 fe ff       	call   c00071ca <Computer::readCMOS(unsigned char)>
c001888f:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0018893:	5e                   	pop    esi
c0018894:	5d                   	pop    ebp
c0018895:	6a 07                	push   0x7
c0018897:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001889d:	e8 28 e9 fe ff       	call   c00071ca <Computer::readCMOS(unsigned char)>
c00188a2:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00188a6:	58                   	pop    eax
c00188a7:	5a                   	pop    edx
c00188a8:	6a 08                	push   0x8
c00188aa:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188b0:	e8 15 e9 fe ff       	call   c00071ca <Computer::readCMOS(unsigned char)>
c00188b5:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00188b9:	59                   	pop    ecx
c00188ba:	5b                   	pop    ebx
c00188bb:	6a 09                	push   0x9
c00188bd:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00188c3:	e8 02 e9 fe ff       	call   c00071ca <Computer::readCMOS(unsigned char)>
c00188c8:	0f b6 c0             	movzx  eax,al
c00188cb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00188cf:	83 c4 10             	add    esp,0x10
c00188d2:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c00188d8:	83 ec 0c             	sub    esp,0xc
c00188db:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00188df:	e8 30 ff ff ff       	call   c0018814 <RTC::get_update_in_progress_flag()>
c00188e4:	83 c4 10             	add    esp,0x10
c00188e7:	84 c0                	test   al,al
c00188e9:	74 0e                	je     c00188f9 <RTC::completeRTCRefresh()+0xcb>
c00188eb:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00188f1:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c00188f7:	73 df                	jae    c00188d8 <RTC::completeRTCRefresh()+0xaa>
c00188f9:	51                   	push   ecx
c00188fa:	51                   	push   ecx
c00188fb:	6a 00                	push   0x0
c00188fd:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018903:	e8 c2 e8 fe ff       	call   c00071ca <Computer::readCMOS(unsigned char)>
c0018908:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001890c:	5b                   	pop    ebx
c001890d:	5e                   	pop    esi
c001890e:	6a 02                	push   0x2
c0018910:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018916:	e8 af e8 fe ff       	call   c00071ca <Computer::readCMOS(unsigned char)>
c001891b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001891f:	5d                   	pop    ebp
c0018920:	58                   	pop    eax
c0018921:	6a 04                	push   0x4
c0018923:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018929:	e8 9c e8 fe ff       	call   c00071ca <Computer::readCMOS(unsigned char)>
c001892e:	88 c3                	mov    bl,al
c0018930:	58                   	pop    eax
c0018931:	5a                   	pop    edx
c0018932:	6a 07                	push   0x7
c0018934:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001893a:	e8 8b e8 fe ff       	call   c00071ca <Computer::readCMOS(unsigned char)>
c001893f:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018943:	59                   	pop    ecx
c0018944:	5e                   	pop    esi
c0018945:	6a 08                	push   0x8
c0018947:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001894d:	e8 78 e8 fe ff       	call   c00071ca <Computer::readCMOS(unsigned char)>
c0018952:	5d                   	pop    ebp
c0018953:	89 c6                	mov    esi,eax
c0018955:	58                   	pop    eax
c0018956:	6a 09                	push   0x9
c0018958:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001895e:	e8 67 e8 fe ff       	call   c00071ca <Computer::readCMOS(unsigned char)>
c0018963:	89 f9                	mov    ecx,edi
c0018965:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018969:	83 c4 10             	add    esp,0x10
c001896c:	0f b6 e8             	movzx  ebp,al
c001896f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018974:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0018978:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001897c:	74 27                	je     c00189a5 <RTC::completeRTCRefresh()+0x177>
c001897e:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0018982:	89 f0                	mov    eax,esi
c0018984:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018988:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001898c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018990:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0018994:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018998:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001899c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00189a0:	e9 2d ff ff ff       	jmp    c00188d2 <RTC::completeRTCRefresh()+0xa4>
c00189a5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00189aa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00189ae:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00189b2:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c00189b6:	75 c6                	jne    c001897e <RTC::completeRTCRefresh()+0x150>
c00189b8:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00189bd:	89 f1                	mov    ecx,esi
c00189bf:	0f b6 fb             	movzx  edi,bl
c00189c2:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00189c6:	0f b6 c9             	movzx  ecx,cl
c00189c9:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00189cd:	89 f1                	mov    ecx,esi
c00189cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00189d3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00189d7:	0f 94 c2             	sete   dl
c00189da:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00189de:	0f 94 c0             	sete   al
c00189e1:	21 d0                	and    eax,edx
c00189e3:	31 d2                	xor    edx,edx
c00189e5:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00189e9:	0f 94 c2             	sete   dl
c00189ec:	85 c2                	test   edx,eax
c00189ee:	74 8e                	je     c001897e <RTC::completeRTCRefresh()+0x150>
c00189f0:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c00189f4:	75 88                	jne    c001897e <RTC::completeRTCRefresh()+0x150>
c00189f6:	52                   	push   edx
c00189f7:	52                   	push   edx
c00189f8:	6a 0b                	push   0xb
c00189fa:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a00:	e8 c5 e7 fe ff       	call   c00071ca <Computer::readCMOS(unsigned char)>
c0018a05:	83 c4 10             	add    esp,0x10
c0018a08:	a8 04                	test   al,0x4
c0018a0a:	75 7a                	jne    c0018a86 <RTC::completeRTCRefresh()+0x258>
c0018a0c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018a10:	c1 ef 04             	shr    edi,0x4
c0018a13:	83 e6 0f             	and    esi,0xf
c0018a16:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018a1a:	c1 ed 04             	shr    ebp,0x4
c0018a1d:	6b ed 0a             	imul   ebp,ebp,0xa
c0018a20:	c1 ea 04             	shr    edx,0x4
c0018a23:	6b d2 0a             	imul   edx,edx,0xa
c0018a26:	83 e1 0f             	and    ecx,0xf
c0018a29:	01 d1                	add    ecx,edx
c0018a2b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018a2f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0018a33:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018a37:	c1 ea 04             	shr    edx,0x4
c0018a3a:	6b d2 0a             	imul   edx,edx,0xa
c0018a3d:	83 e1 0f             	and    ecx,0xf
c0018a40:	01 d1                	add    ecx,edx
c0018a42:	89 fa                	mov    edx,edi
c0018a44:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018a48:	83 e2 07             	and    edx,0x7
c0018a4b:	89 d9                	mov    ecx,ebx
c0018a4d:	6b d2 0a             	imul   edx,edx,0xa
c0018a50:	83 e1 0f             	and    ecx,0xf
c0018a53:	83 e3 80             	and    ebx,0xffffff80
c0018a56:	01 d1                	add    ecx,edx
c0018a58:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a5c:	09 cb                	or     ebx,ecx
c0018a5e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018a62:	c1 ea 04             	shr    edx,0x4
c0018a65:	6b d2 0a             	imul   edx,edx,0xa
c0018a68:	83 e1 0f             	and    ecx,0xf
c0018a6b:	01 d1                	add    ecx,edx
c0018a6d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018a71:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018a75:	c1 ea 04             	shr    edx,0x4
c0018a78:	6b d2 0a             	imul   edx,edx,0xa
c0018a7b:	01 d6                	add    esi,edx
c0018a7d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018a81:	83 e2 0f             	and    edx,0xf
c0018a84:	01 d5                	add    ebp,edx
c0018a86:	a8 02                	test   al,0x2
c0018a88:	75 15                	jne    c0018a9f <RTC::completeRTCRefresh()+0x271>
c0018a8a:	f6 c3 80             	test   bl,0x80
c0018a8d:	74 10                	je     c0018a9f <RTC::completeRTCRefresh()+0x271>
c0018a8f:	83 e3 7f             	and    ebx,0x7f
c0018a92:	b9 18 00 00 00       	mov    ecx,0x18
c0018a97:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018a9a:	99                   	cdq    
c0018a9b:	f7 f9                	idiv   ecx
c0018a9d:	88 d3                	mov    bl,dl
c0018a9f:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018aa5:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018aab:	77 06                	ja     c0018ab3 <RTC::completeRTCRefresh()+0x285>
c0018aad:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0018ab3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018ab8:	31 c9                	xor    ecx,ecx
c0018aba:	31 d2                	xor    edx,edx
c0018abc:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0018ac0:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0018ac4:	89 cd                	mov    ebp,ecx
c0018ac6:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0018aca:	c1 e7 10             	shl    edi,0x10
c0018acd:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0018ad3:	c1 e0 10             	shl    eax,0x10
c0018ad6:	09 c5                	or     ebp,eax
c0018ad8:	89 e9                	mov    ecx,ebp
c0018ada:	0f b7 c2             	movzx  eax,dx
c0018add:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0018ae1:	09 f8                	or     eax,edi
c0018ae3:	89 c2                	mov    edx,eax
c0018ae5:	50                   	push   eax
c0018ae6:	50                   	push   eax
c0018ae7:	88 d9                	mov    cl,bl
c0018ae9:	51                   	push   ecx
c0018aea:	52                   	push   edx
c0018aeb:	e8 cf 3a ff ff       	call   c000c5bf <datetimeToSeconds(datetime_t)>
c0018af0:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018af4:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018afa:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018b00:	83 c4 4c             	add    esp,0x4c
c0018b03:	5b                   	pop    ebx
c0018b04:	5e                   	pop    esi
c0018b05:	5f                   	pop    edi
c0018b06:	5d                   	pop    ebp
c0018b07:	c3                   	ret    

c0018b08 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0018b08:	55                   	push   ebp
c0018b09:	57                   	push   edi
c0018b0a:	56                   	push   esi
c0018b0b:	53                   	push   ebx
c0018b0c:	83 ec 30             	sub    esp,0x30
c0018b0f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018b13:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018b17:	6a 00                	push   0x0
c0018b19:	6a 00                	push   0x0
c0018b1b:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b21:	e8 bc e7 fe ff       	call   c00072e2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b26:	83 c4 0c             	add    esp,0xc
c0018b29:	6a 00                	push   0x0
c0018b2b:	6a 02                	push   0x2
c0018b2d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b33:	e8 aa e7 fe ff       	call   c00072e2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b38:	89 f8                	mov    eax,edi
c0018b3a:	89 f9                	mov    ecx,edi
c0018b3c:	0f b6 c4             	movzx  eax,ah
c0018b3f:	31 d2                	xor    edx,edx
c0018b41:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018b45:	c1 e9 10             	shr    ecx,0x10
c0018b48:	89 f0                	mov    eax,esi
c0018b4a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018b4e:	89 f0                	mov    eax,esi
c0018b50:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018b54:	0f b6 c4             	movzx  eax,ah
c0018b57:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018b5b:	89 f0                	mov    eax,esi
c0018b5d:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018b61:	c1 e8 10             	shr    eax,0x10
c0018b64:	b9 64 00 00 00       	mov    ecx,0x64
c0018b69:	f7 f1                	div    ecx
c0018b6b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018b6f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018b73:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018b77:	59                   	pop    ecx
c0018b78:	5b                   	pop    ebx
c0018b79:	89 fb                	mov    ebx,edi
c0018b7b:	6a 0b                	push   0xb
c0018b7d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b83:	e8 42 e6 fe ff       	call   c00071ca <Computer::readCMOS(unsigned char)>
c0018b88:	83 c4 10             	add    esp,0x10
c0018b8b:	a8 04                	test   al,0x4
c0018b8d:	89 c5                	mov    ebp,eax
c0018b8f:	75 6e                	jne    c0018bff <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018b91:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018b95:	31 d2                	xor    edx,edx
c0018b97:	0f b6 c1             	movzx  eax,cl
c0018b9a:	b9 0a 00 00 00       	mov    ecx,0xa
c0018b9f:	f7 f1                	div    ecx
c0018ba1:	c1 e0 04             	shl    eax,0x4
c0018ba4:	09 d0                	or     eax,edx
c0018ba6:	31 d2                	xor    edx,edx
c0018ba8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018bac:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018bb1:	f7 f1                	div    ecx
c0018bb3:	c1 e0 04             	shl    eax,0x4
c0018bb6:	09 d0                	or     eax,edx
c0018bb8:	31 d2                	xor    edx,edx
c0018bba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018bbe:	0f b6 c3             	movzx  eax,bl
c0018bc1:	f7 f1                	div    ecx
c0018bc3:	c1 e0 04             	shl    eax,0x4
c0018bc6:	09 d0                	or     eax,edx
c0018bc8:	31 d2                	xor    edx,edx
c0018bca:	89 c3                	mov    ebx,eax
c0018bcc:	89 f0                	mov    eax,esi
c0018bce:	0f b6 c0             	movzx  eax,al
c0018bd1:	f7 f1                	div    ecx
c0018bd3:	c1 e0 04             	shl    eax,0x4
c0018bd6:	09 d0                	or     eax,edx
c0018bd8:	31 d2                	xor    edx,edx
c0018bda:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018bde:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018be3:	f7 f1                	div    ecx
c0018be5:	c1 e0 04             	shl    eax,0x4
c0018be8:	09 d0                	or     eax,edx
c0018bea:	31 d2                	xor    edx,edx
c0018bec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018bf0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018bf4:	f7 f1                	div    ecx
c0018bf6:	c1 e0 04             	shl    eax,0x4
c0018bf9:	09 d0                	or     eax,edx
c0018bfb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018bff:	83 e5 02             	and    ebp,0x2
c0018c02:	75 1e                	jne    c0018c22 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018c04:	0f b6 c3             	movzx  eax,bl
c0018c07:	83 f8 0b             	cmp    eax,0xb
c0018c0a:	76 10                	jbe    c0018c1c <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018c0c:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018c0f:	84 d2                	test   dl,dl
c0018c11:	88 d3                	mov    bl,dl
c0018c13:	75 02                	jne    c0018c17 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018c15:	b3 0c                	mov    bl,0xc
c0018c17:	83 cb 80             	or     ebx,0xffffff80
c0018c1a:	eb 06                	jmp    c0018c22 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018c1c:	85 c0                	test   eax,eax
c0018c1e:	75 02                	jne    c0018c22 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018c20:	b3 0c                	mov    bl,0xc
c0018c22:	50                   	push   eax
c0018c23:	0f b6 db             	movzx  ebx,bl
c0018c26:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018c2b:	52                   	push   edx
c0018c2c:	6a 00                	push   0x0
c0018c2e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c34:	e8 a9 e6 fe ff       	call   c00072e2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c39:	83 c4 0c             	add    esp,0xc
c0018c3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018c41:	50                   	push   eax
c0018c42:	6a 02                	push   0x2
c0018c44:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c4a:	e8 93 e6 fe ff       	call   c00072e2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c4f:	83 c4 0c             	add    esp,0xc
c0018c52:	53                   	push   ebx
c0018c53:	6a 04                	push   0x4
c0018c55:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c5b:	e8 82 e6 fe ff       	call   c00072e2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c60:	83 c4 0c             	add    esp,0xc
c0018c63:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018c68:	52                   	push   edx
c0018c69:	6a 07                	push   0x7
c0018c6b:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c71:	e8 6c e6 fe ff       	call   c00072e2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c76:	83 c4 0c             	add    esp,0xc
c0018c79:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018c7e:	50                   	push   eax
c0018c7f:	6a 08                	push   0x8
c0018c81:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c87:	e8 56 e6 fe ff       	call   c00072e2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018c8c:	83 c4 0c             	add    esp,0xc
c0018c8f:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018c94:	55                   	push   ebp
c0018c95:	6a 09                	push   0x9
c0018c97:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018c9d:	e8 40 e6 fe ff       	call   c00072e2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018ca2:	5a                   	pop    edx
c0018ca3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018ca7:	e8 82 fb ff ff       	call   c001882e <RTC::completeRTCRefresh()>
c0018cac:	83 c4 3c             	add    esp,0x3c
c0018caf:	b0 01                	mov    al,0x1
c0018cb1:	5b                   	pop    ebx
c0018cb2:	5e                   	pop    esi
c0018cb3:	5f                   	pop    edi
c0018cb4:	5d                   	pop    ebp
c0018cb5:	c3                   	ret    

c0018cb6 <rtcIRQHandler(regs*, void*)>:
c0018cb6:	53                   	push   ebx
c0018cb7:	83 ec 10             	sub    esp,0x10
c0018cba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018cbe:	6a 0c                	push   0xc
c0018cc0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018cc6:	e8 ff e4 fe ff       	call   c00071ca <Computer::readCMOS(unsigned char)>
c0018ccb:	83 c4 10             	add    esp,0x10
c0018cce:	a8 80                	test   al,0x80
c0018cd0:	74 24                	je     c0018cf6 <rtcIRQHandler(regs*, void*)+0x40>
c0018cd2:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018cd9:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018ce0:	66 ff 05 78 c7 02 c0 	inc    WORD PTR ds:0xc002c778
c0018ce7:	75 0d                	jne    c0018cf6 <rtcIRQHandler(regs*, void*)+0x40>
c0018ce9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018ced:	83 c4 08             	add    esp,0x8
c0018cf0:	5b                   	pop    ebx
c0018cf1:	e9 38 fb ff ff       	jmp    c001882e <RTC::completeRTCRefresh()>
c0018cf6:	83 c4 08             	add    esp,0x8
c0018cf9:	5b                   	pop    ebx
c0018cfa:	c3                   	ret    
c0018cfb:	90                   	nop

c0018cfc <RTC::RTC()>:
c0018cfc:	83 ec 1c             	sub    esp,0x1c
c0018cff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d03:	83 ec 08             	sub    esp,0x8
c0018d06:	68 db 2f 02 c0       	push   0xc0022fdb
c0018d0b:	50                   	push   eax
c0018d0c:	e8 89 37 ff ff       	call   c000c49a <Clock::Clock(char const*)>
c0018d11:	83 c4 10             	add    esp,0x10
c0018d14:	ba f8 2f 02 c0       	mov    edx,0xc0022ff8
c0018d19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d1d:	89 10                	mov    DWORD PTR [eax],edx
c0018d1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d23:	83 ec 0c             	sub    esp,0xc
c0018d26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018d2a:	6a 01                	push   0x1
c0018d2c:	68 b6 8c 01 c0       	push   0xc0018cb6
c0018d31:	6a 08                	push   0x8
c0018d33:	50                   	push   eax
c0018d34:	e8 43 3c ff ff       	call   c000c97c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018d39:	83 c4 20             	add    esp,0x20
c0018d3c:	89 c2                	mov    edx,eax
c0018d3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d42:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018d48:	fa                   	cli    
c0018d49:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018d4e:	83 c0 01             	add    eax,0x1
c0018d51:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018d56:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018d5b:	83 ec 08             	sub    esp,0x8
c0018d5e:	6a 0b                	push   0xb
c0018d60:	50                   	push   eax
c0018d61:	e8 64 e4 fe ff       	call   c00071ca <Computer::readCMOS(unsigned char)>
c0018d66:	83 c4 10             	add    esp,0x10
c0018d69:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018d6d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018d72:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018d76:	83 ca 10             	or     edx,0x10
c0018d79:	0f b6 d2             	movzx  edx,dl
c0018d7c:	83 ec 04             	sub    esp,0x4
c0018d7f:	52                   	push   edx
c0018d80:	6a 0b                	push   0xb
c0018d82:	50                   	push   eax
c0018d83:	e8 5a e5 fe ff       	call   c00072e2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018d88:	83 c4 10             	add    esp,0x10
c0018d8b:	83 ec 0c             	sub    esp,0xc
c0018d8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018d92:	e8 97 fa ff ff       	call   c001882e <RTC::completeRTCRefresh()>
c0018d97:	83 c4 10             	add    esp,0x10
c0018d9a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018d9f:	83 e8 01             	sub    eax,0x1
c0018da2:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018da7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018dac:	85 c0                	test   eax,eax
c0018dae:	75 01                	jne    c0018db1 <RTC::RTC()+0xb5>
c0018db0:	fb                   	sti    
c0018db1:	90                   	nop
c0018db2:	83 c4 1c             	add    esp,0x1c
c0018db5:	c3                   	ret    
c0018db6:	66 90                	xchg   ax,ax

c0018db8 <HalConsoleScroll(int, int)>:
c0018db8:	83 ec 10             	sub    esp,0x10
c0018dbb:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018dc3:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018dcb:	90                   	nop
c0018dcc:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018dd1:	0f 8f e1 00 00 00    	jg     c0018eb8 <HalConsoleScroll(int, int)+0x100>
c0018dd7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018ddf:	90                   	nop
c0018de0:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018de8:	0f 8f be 00 00 00    	jg     c0018eac <HalConsoleScroll(int, int)+0xf4>
c0018dee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018df2:	89 d0                	mov    eax,edx
c0018df4:	c1 e0 02             	shl    eax,0x2
c0018df7:	01 d0                	add    eax,edx
c0018df9:	c1 e0 05             	shl    eax,0x5
c0018dfc:	89 c2                	mov    edx,eax
c0018dfe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e02:	01 d0                	add    eax,edx
c0018e04:	89 c2                	mov    edx,eax
c0018e06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e0a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018e0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e11:	89 d0                	mov    eax,edx
c0018e13:	c1 e0 02             	shl    eax,0x2
c0018e16:	01 d0                	add    eax,edx
c0018e18:	c1 e0 05             	shl    eax,0x5
c0018e1b:	89 c2                	mov    edx,eax
c0018e1d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e21:	01 d0                	add    eax,edx
c0018e23:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018e29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e2d:	01 d0                	add    eax,edx
c0018e2f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0018e31:	88 10                	mov    BYTE PTR [eax],dl
c0018e33:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018e38:	75 66                	jne    c0018ea0 <HalConsoleScroll(int, int)+0xe8>
c0018e3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e3e:	83 e0 01             	and    eax,0x1
c0018e41:	74 39                	je     c0018e7c <HalConsoleScroll(int, int)+0xc4>
c0018e43:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018e47:	83 e0 0f             	and    eax,0xf
c0018e4a:	88 c2                	mov    dl,al
c0018e4c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018e50:	c1 e0 04             	shl    eax,0x4
c0018e53:	09 d0                	or     eax,edx
c0018e55:	88 c1                	mov    cl,al
c0018e57:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e5b:	89 d0                	mov    eax,edx
c0018e5d:	c1 e0 02             	shl    eax,0x2
c0018e60:	01 d0                	add    eax,edx
c0018e62:	c1 e0 05             	shl    eax,0x5
c0018e65:	89 c2                	mov    edx,eax
c0018e67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e6b:	01 d0                	add    eax,edx
c0018e6d:	89 c2                	mov    edx,eax
c0018e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e73:	01 d0                	add    eax,edx
c0018e75:	88 ca                	mov    dl,cl
c0018e77:	88 10                	mov    BYTE PTR [eax],dl
c0018e79:	eb 25                	jmp    c0018ea0 <HalConsoleScroll(int, int)+0xe8>
c0018e7b:	90                   	nop
c0018e7c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e80:	89 d0                	mov    eax,edx
c0018e82:	c1 e0 02             	shl    eax,0x2
c0018e85:	01 d0                	add    eax,edx
c0018e87:	c1 e0 05             	shl    eax,0x5
c0018e8a:	89 c2                	mov    edx,eax
c0018e8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e90:	01 d0                	add    eax,edx
c0018e92:	89 c2                	mov    edx,eax
c0018e94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e98:	01 d0                	add    eax,edx
c0018e9a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018e9d:	8d 76 00             	lea    esi,[esi+0x0]
c0018ea0:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018ea5:	e9 36 ff ff ff       	jmp    c0018de0 <HalConsoleScroll(int, int)+0x28>
c0018eaa:	66 90                	xchg   ax,ax
c0018eac:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018eb1:	e9 16 ff ff ff       	jmp    c0018dcc <HalConsoleScroll(int, int)+0x14>
c0018eb6:	66 90                	xchg   ax,ax
c0018eb8:	90                   	nop
c0018eb9:	83 c4 10             	add    esp,0x10
c0018ebc:	c3                   	ret    
c0018ebd:	8d 76 00             	lea    esi,[esi+0x0]

c0018ec0 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018ec0:	83 ec 14             	sub    esp,0x14
c0018ec3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018ec7:	88 04 24             	mov    BYTE PTR [esp],al
c0018eca:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018ecd:	0f b6 c0             	movzx  eax,al
c0018ed0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018ed4:	89 d1                	mov    ecx,edx
c0018ed6:	83 e1 0f             	and    ecx,0xf
c0018ed9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018edd:	c1 e2 04             	shl    edx,0x4
c0018ee0:	0f b6 d2             	movzx  edx,dl
c0018ee3:	09 ca                	or     edx,ecx
c0018ee5:	c1 e2 08             	shl    edx,0x8
c0018ee8:	09 d0                	or     eax,edx
c0018eea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018eef:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018ef7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018efb:	89 d0                	mov    eax,edx
c0018efd:	c1 e0 02             	shl    eax,0x2
c0018f00:	01 d0                	add    eax,edx
c0018f02:	c1 e0 04             	shl    eax,0x4
c0018f05:	89 c2                	mov    edx,eax
c0018f07:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f0b:	01 d0                	add    eax,edx
c0018f0d:	d1 e0                	shl    eax,1
c0018f0f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018f13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018f17:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018f1c:	66 89 10             	mov    WORD PTR [eax],dx
c0018f1f:	90                   	nop
c0018f20:	83 c4 14             	add    esp,0x14
c0018f23:	c3                   	ret    

c0018f24 <HalConsoleCursorUpdate(int, int)>:
c0018f24:	83 ec 20             	sub    esp,0x20
c0018f27:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f2b:	89 c2                	mov    edx,eax
c0018f2d:	c1 e2 02             	shl    edx,0x2
c0018f30:	01 d0                	add    eax,edx
c0018f32:	c1 e0 04             	shl    eax,0x4
c0018f35:	89 c2                	mov    edx,eax
c0018f37:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f3b:	01 d0                	add    eax,edx
c0018f3d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018f42:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018f49:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018f4e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018f52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f56:	ee                   	out    dx,al
c0018f57:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018f5c:	0f b6 c0             	movzx  eax,al
c0018f5f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018f66:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018f6a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018f6e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018f72:	ee                   	out    dx,al
c0018f73:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018f7a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018f7f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018f83:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018f87:	ee                   	out    dx,al
c0018f88:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018f8d:	c1 e8 08             	shr    eax,0x8
c0018f90:	0f b6 c0             	movzx  eax,al
c0018f93:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018f9a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018f9e:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018fa2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018fa6:	ee                   	out    dx,al
c0018fa7:	90                   	nop
c0018fa8:	83 c4 20             	add    esp,0x20
c0018fab:	c3                   	ret    

c0018fac <FAT::getName()>:
c0018fac:	b8 2c 30 02 c0       	mov    eax,0xc002302c
c0018fb1:	c3                   	ret    
c0018fb2:	66 90                	xchg   ax,ax

c0018fb4 <FAT::tell(void*, unsigned long long*)>:
c0018fb4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018fb9:	75 09                	jne    c0018fc4 <FAT::tell(void*, unsigned long long*)+0x10>
c0018fbb:	b8 04 00 00 00       	mov    eax,0x4
c0018fc0:	c3                   	ret    
c0018fc1:	8d 76 00             	lea    esi,[esi+0x0]
c0018fc4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018fc9:	75 09                	jne    c0018fd4 <FAT::tell(void*, unsigned long long*)+0x20>
c0018fcb:	b8 04 00 00 00       	mov    eax,0x4
c0018fd0:	c3                   	ret    
c0018fd1:	8d 76 00             	lea    esi,[esi+0x0]
c0018fd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018fd8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018fdb:	ba 00 00 00 00       	mov    edx,0x0
c0018fe0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018fe4:	89 01                	mov    DWORD PTR [ecx],eax
c0018fe6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018fe9:	b8 00 00 00 00       	mov    eax,0x0
c0018fee:	c3                   	ret    
c0018fef:	90                   	nop

c0018ff0 <FAT::stat(void*, unsigned long long*)>:
c0018ff0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018ff5:	75 09                	jne    c0019000 <FAT::stat(void*, unsigned long long*)+0x10>
c0018ff7:	b8 04 00 00 00       	mov    eax,0x4
c0018ffc:	c3                   	ret    
c0018ffd:	8d 76 00             	lea    esi,[esi+0x0]
c0019000:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019005:	75 09                	jne    c0019010 <FAT::stat(void*, unsigned long long*)+0x20>
c0019007:	b8 04 00 00 00       	mov    eax,0x4
c001900c:	c3                   	ret    
c001900d:	8d 76 00             	lea    esi,[esi+0x0]
c0019010:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019014:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019017:	ba 00 00 00 00       	mov    edx,0x0
c001901c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019020:	89 01                	mov    DWORD PTR [ecx],eax
c0019022:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019025:	b8 00 00 00 00       	mov    eax,0x0
c001902a:	c3                   	ret    
c001902b:	90                   	nop

c001902c <FAT::~FAT()>:
c001902c:	83 ec 0c             	sub    esp,0xc
c001902f:	ba 78 30 02 c0       	mov    edx,0xc0023078
c0019034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019038:	89 10                	mov    DWORD PTR [eax],edx
c001903a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001903e:	83 ec 0c             	sub    esp,0xc
c0019041:	50                   	push   eax
c0019042:	e8 79 27 ff ff       	call   c000b7c0 <Filesystem::~Filesystem()>
c0019047:	83 c4 10             	add    esp,0x10
c001904a:	90                   	nop
c001904b:	83 c4 0c             	add    esp,0xc
c001904e:	c3                   	ret    
c001904f:	90                   	nop

c0019050 <FAT::~FAT()>:
c0019050:	83 ec 0c             	sub    esp,0xc
c0019053:	83 ec 0c             	sub    esp,0xc
c0019056:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001905a:	e8 cd ff ff ff       	call   c001902c <FAT::~FAT()>
c001905f:	83 c4 10             	add    esp,0x10
c0019062:	83 ec 08             	sub    esp,0x8
c0019065:	6a 08                	push   0x8
c0019067:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001906b:	e8 cc 17 ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c0019070:	83 c4 10             	add    esp,0x10
c0019073:	83 c4 0c             	add    esp,0xc
c0019076:	c3                   	ret    
c0019077:	90                   	nop

c0019078 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019078:	83 ec 1c             	sub    esp,0x1c
c001907b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019082:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019087:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001908b:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019092:	83 f8 ff             	cmp    eax,0xffffffff
c0019095:	75 35                	jne    c00190cc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0019097:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001909b:	88 c2                	mov    dl,al
c001909d:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00190a2:	01 d0                	add    eax,edx
c00190a4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00190a8:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c00190ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00190b2:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00190b9:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00190be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00190c2:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00190c9:	eb 19                	jmp    c00190e4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00190cb:	90                   	nop
c00190cc:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00190d0:	88 c2                	mov    dl,al
c00190d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00190d6:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00190dd:	01 d0                	add    eax,edx
c00190df:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00190e3:	90                   	nop
c00190e4:	83 ec 04             	sub    esp,0x4
c00190e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00190eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00190ef:	8d 44 24 15          	lea    eax,[esp+0x15]
c00190f3:	50                   	push   eax
c00190f4:	e8 fa be fe ff       	call   c0004ff3 <f_getlabel>
c00190f9:	83 c4 10             	add    esp,0x10
c00190fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019100:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019105:	75 09                	jne    c0019110 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0019107:	b8 00 00 00 00       	mov    eax,0x0
c001910c:	eb 0a                	jmp    c0019118 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001910e:	66 90                	xchg   ax,ax
c0019110:	b8 01 00 00 00       	mov    eax,0x1
c0019115:	8d 76 00             	lea    esi,[esi+0x0]
c0019118:	83 c4 1c             	add    esp,0x1c
c001911b:	c3                   	ret    

c001911c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001911c:	53                   	push   ebx
c001911d:	83 ec 58             	sub    esp,0x58
c0019120:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019128:	8d 54 24 10          	lea    edx,[esp+0x10]
c001912c:	b9 00 00 00 00       	mov    ecx,0x0
c0019131:	b8 3c 00 00 00       	mov    eax,0x3c
c0019136:	83 e0 f8             	and    eax,0xfffffff8
c0019139:	89 c3                	mov    ebx,eax
c001913b:	b8 00 00 00 00       	mov    eax,0x0
c0019140:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0019144:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0019148:	83 c0 08             	add    eax,0x8
c001914b:	39 d8                	cmp    eax,ebx
c001914d:	72 f1                	jb     c0019140 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c001914f:	01 c2                	add    edx,eax
c0019151:	89 0a                	mov    DWORD PTR [edx],ecx
c0019153:	83 c2 04             	add    edx,0x4
c0019156:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001915a:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019161:	83 f8 ff             	cmp    eax,0xffffffff
c0019164:	75 36                	jne    c001919c <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0019166:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001916a:	88 c2                	mov    dl,al
c001916c:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019171:	01 d0                	add    eax,edx
c0019173:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019177:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c001917d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019181:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019188:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001918d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019191:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019198:	eb 1a                	jmp    c00191b4 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c001919a:	66 90                	xchg   ax,ax
c001919c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00191a0:	88 c2                	mov    dl,al
c00191a2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00191a6:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00191ad:	01 d0                	add    eax,edx
c00191af:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00191b3:	90                   	nop
c00191b4:	83 ec 08             	sub    esp,0x8
c00191b7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00191bb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00191bf:	50                   	push   eax
c00191c0:	e8 ab 76 fe ff       	call   c0000870 <strcat>
c00191c5:	83 c4 10             	add    esp,0x10
c00191c8:	83 ec 0c             	sub    esp,0xc
c00191cb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00191cf:	50                   	push   eax
c00191d0:	e8 72 bf fe ff       	call   c0005147 <f_setlabel>
c00191d5:	83 c4 10             	add    esp,0x10
c00191d8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00191dc:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00191e1:	75 09                	jne    c00191ec <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c00191e3:	b8 00 00 00 00       	mov    eax,0x0
c00191e8:	eb 0a                	jmp    c00191f4 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c00191ea:	66 90                	xchg   ax,ax
c00191ec:	b8 01 00 00 00       	mov    eax,0x1
c00191f1:	8d 76 00             	lea    esi,[esi+0x0]
c00191f4:	83 c4 58             	add    esp,0x58
c00191f7:	5b                   	pop    ebx
c00191f8:	c3                   	ret    
c00191f9:	90                   	nop
c00191fa:	66 90                	xchg   ax,ax

c00191fc <FAT::format(LogicalDisk*, int, char const*, int)>:
c00191fc:	83 ec 2c             	sub    esp,0x2c
c00191ff:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019207:	83 ec 08             	sub    esp,0x8
c001920a:	68 50 30 02 c0       	push   0xc0023050
c001920f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019213:	e8 68 75 fe ff       	call   c0000780 <strcmp>
c0019218:	83 c4 10             	add    esp,0x10
c001921b:	85 c0                	test   eax,eax
c001921d:	0f 94 c0             	sete   al
c0019220:	0f b6 c0             	movzx  eax,al
c0019223:	85 c0                	test   eax,eax
c0019225:	74 0d                	je     c0019234 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0019227:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001922f:	e9 c0 00 00 00       	jmp    c00192f4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019234:	83 ec 08             	sub    esp,0x8
c0019237:	68 42 30 02 c0       	push   0xc0023042
c001923c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019240:	e8 3b 75 fe ff       	call   c0000780 <strcmp>
c0019245:	83 c4 10             	add    esp,0x10
c0019248:	85 c0                	test   eax,eax
c001924a:	0f 94 c0             	sete   al
c001924d:	0f b6 c0             	movzx  eax,al
c0019250:	85 c0                	test   eax,eax
c0019252:	74 10                	je     c0019264 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0019254:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001925c:	e9 93 00 00 00       	jmp    c00192f4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019261:	8d 76 00             	lea    esi,[esi+0x0]
c0019264:	83 ec 08             	sub    esp,0x8
c0019267:	68 48 30 02 c0       	push   0xc0023048
c001926c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019270:	e8 0b 75 fe ff       	call   c0000780 <strcmp>
c0019275:	83 c4 10             	add    esp,0x10
c0019278:	85 c0                	test   eax,eax
c001927a:	0f 94 c0             	sete   al
c001927d:	0f b6 c0             	movzx  eax,al
c0019280:	85 c0                	test   eax,eax
c0019282:	74 0c                	je     c0019290 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0019284:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001928c:	eb 66                	jmp    c00192f4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001928e:	66 90                	xchg   ax,ax
c0019290:	83 ec 08             	sub    esp,0x8
c0019293:	68 3c 06 02 c0       	push   0xc002063c
c0019298:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001929c:	e8 df 74 fe ff       	call   c0000780 <strcmp>
c00192a1:	83 c4 10             	add    esp,0x10
c00192a4:	85 c0                	test   eax,eax
c00192a6:	0f 94 c0             	sete   al
c00192a9:	0f b6 c0             	movzx  eax,al
c00192ac:	85 c0                	test   eax,eax
c00192ae:	74 0c                	je     c00192bc <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00192b0:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00192b8:	eb 3a                	jmp    c00192f4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00192ba:	66 90                	xchg   ax,ax
c00192bc:	83 ec 08             	sub    esp,0x8
c00192bf:	68 4e 30 02 c0       	push   0xc002304e
c00192c4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00192c8:	e8 b3 74 fe ff       	call   c0000780 <strcmp>
c00192cd:	83 c4 10             	add    esp,0x10
c00192d0:	85 c0                	test   eax,eax
c00192d2:	0f 94 c0             	sete   al
c00192d5:	0f b6 c0             	movzx  eax,al
c00192d8:	85 c0                	test   eax,eax
c00192da:	74 0c                	je     c00192e8 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c00192dc:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00192e4:	eb 0e                	jmp    c00192f4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00192e6:	66 90                	xchg   ax,ax
c00192e8:	b8 08 00 00 00       	mov    eax,0x8
c00192ed:	e9 ea 00 00 00       	jmp    c00193dc <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00192f2:	66 90                	xchg   ax,ax
c00192f4:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00192fb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019300:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019304:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001930b:	83 f8 ff             	cmp    eax,0xffffffff
c001930e:	75 34                	jne    c0019344 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0019310:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019314:	88 c2                	mov    dl,al
c0019316:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001931b:	01 d0                	add    eax,edx
c001931d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019321:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019327:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001932b:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019332:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019337:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001933b:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019342:	eb 18                	jmp    c001935c <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0019344:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019348:	88 c2                	mov    dl,al
c001934a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001934e:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019355:	01 d0                	add    eax,edx
c0019357:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001935b:	90                   	nop
c001935c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019360:	88 04 24             	mov    BYTE PTR [esp],al
c0019363:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019367:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001936b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019373:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019378:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019380:	83 ec 0c             	sub    esp,0xc
c0019383:	68 00 20 00 00       	push   0x2000
c0019388:	e8 76 e7 fe ff       	call   c0007b03 <malloc>
c001938d:	83 c4 10             	add    esp,0x10
c0019390:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019394:	68 00 20 00 00       	push   0x2000
c0019399:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001939d:	8d 44 24 08          	lea    eax,[esp+0x8]
c00193a1:	50                   	push   eax
c00193a2:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00193a6:	50                   	push   eax
c00193a7:	e8 98 c0 fe ff       	call   c0005444 <f_mkfs>
c00193ac:	83 c4 10             	add    esp,0x10
c00193af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00193b3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00193b8:	75 0a                	jne    c00193c4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00193ba:	b8 00 00 00 00       	mov    eax,0x0
c00193bf:	eb 1b                	jmp    c00193dc <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00193c1:	8d 76 00             	lea    esi,[esi+0x0]
c00193c4:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00193c9:	75 09                	jne    c00193d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00193cb:	b8 09 00 00 00       	mov    eax,0x9
c00193d0:	eb 0a                	jmp    c00193dc <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00193d2:	66 90                	xchg   ax,ax
c00193d4:	b8 01 00 00 00       	mov    eax,0x1
c00193d9:	8d 76 00             	lea    esi,[esi+0x0]
c00193dc:	83 c4 2c             	add    esp,0x2c
c00193df:	c3                   	ret    

c00193e0 <FAT::tryMount(LogicalDisk*, int)>:
c00193e0:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00193e6:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00193eb:	83 f8 14             	cmp    eax,0x14
c00193ee:	75 18                	jne    c0019408 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00193f0:	83 ec 0c             	sub    esp,0xc
c00193f3:	68 54 30 02 c0       	push   0xc0023054
c00193f8:	e8 5a 82 ff ff       	call   c0011657 <KePanic(char const*)>
c00193fd:	83 c4 10             	add    esp,0x10
c0019400:	b0 00                	mov    al,0x0
c0019402:	e9 ed 01 00 00       	jmp    c00195f4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019407:	90                   	nop
c0019408:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001940f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019415:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001941b:	3d 00 02 00 00       	cmp    eax,0x200
c0019420:	74 0a                	je     c001942c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0019422:	b0 00                	mov    al,0x0
c0019424:	e9 cb 01 00 00       	jmp    c00195f4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019429:	8d 76 00             	lea    esi,[esi+0x0]
c001942c:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0019434:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001943b:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019442:	83 f8 ff             	cmp    eax,0xffffffff
c0019445:	74 09                	je     c0019450 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0019447:	b0 01                	mov    al,0x1
c0019449:	e9 a6 01 00 00       	jmp    c00195f4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001944e:	66 90                	xchg   ax,ax
c0019450:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001945a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0019462:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0019469:	88 c2                	mov    dl,al
c001946b:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019470:	01 d0                	add    eax,edx
c0019472:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0019479:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c001947f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019486:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c001948d:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019492:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0019499:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00194a0:	83 ec 0c             	sub    esp,0xc
c00194a3:	68 34 02 00 00       	push   0x234
c00194a8:	e8 56 e6 fe ff       	call   c0007b03 <malloc>
c00194ad:	83 c4 10             	add    esp,0x10
c00194b0:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00194b7:	83 ec 04             	sub    esp,0x4
c00194ba:	6a 00                	push   0x0
c00194bc:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00194c3:	50                   	push   eax
c00194c4:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00194cb:	e8 6e a7 fe ff       	call   c0003c3e <f_mount>
c00194d0:	83 c4 10             	add    esp,0x10
c00194d3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00194da:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00194e2:	74 1c                	je     c0019500 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00194e4:	83 ec 0c             	sub    esp,0xc
c00194e7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00194ee:	e8 30 e6 fe ff       	call   c0007b23 <rfree>
c00194f3:	83 c4 10             	add    esp,0x10
c00194f6:	b0 00                	mov    al,0x0
c00194f8:	e9 f7 00 00 00       	jmp    c00195f4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00194fd:	8d 76 00             	lea    esi,[esi+0x0]
c0019500:	83 ec 04             	sub    esp,0x4
c0019503:	68 00 01 00 00       	push   0x100
c0019508:	6a 00                	push   0x0
c001950a:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019511:	50                   	push   eax
c0019512:	e8 d9 6f fe ff       	call   c00004f0 <memset>
c0019517:	83 c4 10             	add    esp,0x10
c001951a:	83 ec 08             	sub    esp,0x8
c001951d:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019524:	50                   	push   eax
c0019525:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001952c:	50                   	push   eax
c001952d:	e8 3e 73 fe ff       	call   c0000870 <strcat>
c0019532:	83 c4 10             	add    esp,0x10
c0019535:	83 ec 08             	sub    esp,0x8
c0019538:	68 62 30 02 c0       	push   0xc0023062
c001953d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019544:	50                   	push   eax
c0019545:	e8 26 73 fe ff       	call   c0000870 <strcat>
c001954a:	83 c4 10             	add    esp,0x10
c001954d:	83 ec 04             	sub    esp,0x4
c0019550:	6a 01                	push   0x1
c0019552:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0019559:	50                   	push   eax
c001955a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001955e:	50                   	push   eax
c001955f:	e8 3c a7 fe ff       	call   c0003ca0 <f_open>
c0019564:	83 c4 10             	add    esp,0x10
c0019567:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001956e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0019575:	85 c0                	test   eax,eax
c0019577:	74 0b                	je     c0019584 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019579:	78 31                	js     c00195ac <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001957b:	83 e8 04             	sub    eax,0x4
c001957e:	83 f8 01             	cmp    eax,0x1
c0019581:	77 29                	ja     c00195ac <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019583:	90                   	nop
c0019584:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001958c:	83 ec 0c             	sub    esp,0xc
c001958f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019593:	50                   	push   eax
c0019594:	e8 b7 ae fe ff       	call   c0004450 <f_close>
c0019599:	83 c4 10             	add    esp,0x10
c001959c:	90                   	nop
c001959d:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00195a5:	85 c0                	test   eax,eax
c00195a7:	74 43                	je     c00195ec <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00195a9:	eb 31                	jmp    c00195dc <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00195ab:	90                   	nop
c00195ac:	83 ec 0c             	sub    esp,0xc
c00195af:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00195b6:	e8 68 e5 fe ff       	call   c0007b23 <rfree>
c00195bb:	83 c4 10             	add    esp,0x10
c00195be:	83 ec 04             	sub    esp,0x4
c00195c1:	6a 00                	push   0x0
c00195c3:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00195ca:	50                   	push   eax
c00195cb:	6a 00                	push   0x0
c00195cd:	e8 6c a6 fe ff       	call   c0003c3e <f_mount>
c00195d2:	83 c4 10             	add    esp,0x10
c00195d5:	b0 00                	mov    al,0x0
c00195d7:	eb 1b                	jmp    c00195f4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00195d9:	8d 76 00             	lea    esi,[esi+0x0]
c00195dc:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00195e1:	83 c0 01             	add    eax,0x1
c00195e4:	a3 80 c7 02 c0       	mov    ds:0xc002c780,eax
c00195e9:	8d 76 00             	lea    esi,[esi+0x0]
c00195ec:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00195f3:	90                   	nop
c00195f4:	81 c4 4c 03 00 00    	add    esp,0x34c
c00195fa:	c3                   	ret    
c00195fb:	90                   	nop

c00195fc <FAT::allocateSwapfile(char const*, int)>:
c00195fc:	55                   	push   ebp
c00195fd:	57                   	push   edi
c00195fe:	56                   	push   esi
c00195ff:	53                   	push   ebx
c0019600:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0019606:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019611:	83 ec 0c             	sub    esp,0xc
c0019614:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001961b:	e8 e3 e4 fe ff       	call   c0007b03 <malloc>
c0019620:	83 c4 10             	add    esp,0x10
c0019623:	89 c7                	mov    edi,eax
c0019625:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001962a:	83 ec 04             	sub    esp,0x4
c001962d:	50                   	push   eax
c001962e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019635:	57                   	push   edi
c0019636:	e8 17 25 ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c001963b:	83 c4 10             	add    esp,0x10
c001963e:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0019645:	83 ec 04             	sub    esp,0x4
c0019648:	8d 44 24 13          	lea    eax,[esp+0x13]
c001964c:	50                   	push   eax
c001964d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019651:	50                   	push   eax
c0019652:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019659:	e8 14 28 ff ff       	call   c000be72 <File::stat(unsigned long long*, bool*)>
c001965e:	83 c4 10             	add    esp,0x10
c0019661:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019668:	c1 e0 14             	shl    eax,0x14
c001966b:	89 c7                	mov    edi,eax
c001966d:	89 c5                	mov    ebp,eax
c001966f:	c1 fd 1f             	sar    ebp,0x1f
c0019672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019676:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001967a:	89 f9                	mov    ecx,edi
c001967c:	31 c1                	xor    ecx,eax
c001967e:	89 cb                	mov    ebx,ecx
c0019680:	89 e9                	mov    ecx,ebp
c0019682:	31 d1                	xor    ecx,edx
c0019684:	89 ce                	mov    esi,ecx
c0019686:	89 f0                	mov    eax,esi
c0019688:	09 d8                	or     eax,ebx
c001968a:	0f 84 9c 00 00 00    	je     c001972c <FAT::allocateSwapfile(char const*, int)+0x130>
c0019690:	83 ec 0c             	sub    esp,0xc
c0019693:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001969a:	e8 9f 26 ff ff       	call   c000bd3e <File::unlink()>
c001969f:	83 c4 10             	add    esp,0x10
c00196a2:	83 ec 08             	sub    esp,0x8
c00196a5:	6a 12                	push   0x12
c00196a7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00196ae:	e8 bd 24 ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c00196b3:	83 c4 10             	add    esp,0x10
c00196b6:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00196bd:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00196c3:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00196ca:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00196d1:	c1 e0 14             	shl    eax,0x14
c00196d4:	83 ec 04             	sub    esp,0x4
c00196d7:	6a 01                	push   0x1
c00196d9:	50                   	push   eax
c00196da:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00196e1:	e8 f1 bb fe ff       	call   c00052d7 <f_expand>
c00196e6:	83 c4 10             	add    esp,0x10
c00196e9:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00196f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00196f2:	83 c0 10             	add    eax,0x10
c00196f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00196f7:	83 ec 0c             	sub    esp,0xc
c00196fa:	8d 54 24 24          	lea    edx,[esp+0x24]
c00196fe:	52                   	push   edx
c00196ff:	8d 54 24 30          	lea    edx,[esp+0x30]
c0019703:	52                   	push   edx
c0019704:	6a 00                	push   0x0
c0019706:	68 00 04 00 00       	push   0x400
c001970b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019712:	ff d0                	call   eax
c0019714:	83 c4 20             	add    esp,0x20
c0019717:	83 ec 0c             	sub    esp,0xc
c001971a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019721:	e8 a8 24 ff ff       	call   c000bbce <File::close()>
c0019726:	83 c4 10             	add    esp,0x10
c0019729:	8d 76 00             	lea    esi,[esi+0x0]
c001972c:	83 ec 08             	sub    esp,0x8
c001972f:	6a 01                	push   0x1
c0019731:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019738:	e8 33 24 ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c001973d:	83 c4 10             	add    esp,0x10
c0019740:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019747:	8b 00                	mov    eax,DWORD PTR [eax]
c0019749:	83 c0 0c             	add    eax,0xc
c001974c:	8b 00                	mov    eax,DWORD PTR [eax]
c001974e:	83 ec 0c             	sub    esp,0xc
c0019751:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019755:	52                   	push   edx
c0019756:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001975a:	52                   	push   edx
c001975b:	6a 00                	push   0x0
c001975d:	6a 04                	push   0x4
c001975f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019766:	ff d0                	call   eax
c0019768:	83 c4 20             	add    esp,0x20
c001976b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019772:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019778:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001977f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0019786:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019789:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019790:	83 ec 0c             	sub    esp,0xc
c0019793:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001979a:	e8 2f 24 ff ff       	call   c000bbce <File::close()>
c001979f:	83 c4 10             	add    esp,0x10
c00197a2:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00197a9:	ba 00 00 00 00       	mov    edx,0x0
c00197ae:	81 c4 3c 04 00 00    	add    esp,0x43c
c00197b4:	5b                   	pop    ebx
c00197b5:	5e                   	pop    esi
c00197b6:	5f                   	pop    edi
c00197b7:	5d                   	pop    ebp
c00197b8:	c3                   	ret    
c00197b9:	90                   	nop
c00197ba:	66 90                	xchg   ax,ax

c00197bc <FAT::readDir(void*, unsigned long, void*, int*)>:
c00197bc:	57                   	push   edi
c00197bd:	56                   	push   esi
c00197be:	53                   	push   ebx
c00197bf:	81 ec 50 02 00 00    	sub    esp,0x250
c00197c5:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00197cd:	74 0d                	je     c00197dc <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00197cf:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00197d7:	75 0f                	jne    c00197e8 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00197d9:	8d 76 00             	lea    esi,[esi+0x0]
c00197dc:	b8 04 00 00 00       	mov    eax,0x4
c00197e1:	e9 3a 01 00 00       	jmp    c0019920 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00197e6:	66 90                	xchg   ax,ax
c00197e8:	83 ec 08             	sub    esp,0x8
c00197eb:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00197f2:	50                   	push   eax
c00197f3:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00197fa:	e8 1d af fe ff       	call   c000471c <f_readdir>
c00197ff:	83 c4 10             	add    esp,0x10
c0019802:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019809:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019810:	83 ec 0c             	sub    esp,0xc
c0019813:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001981a:	83 c0 16             	add    eax,0x16
c001981d:	50                   	push   eax
c001981e:	e8 5d 6d fe ff       	call   c0000580 <strlen>
c0019823:	83 c4 10             	add    esp,0x10
c0019826:	ba 00 00 00 00       	mov    edx,0x0
c001982b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001982f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019833:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001983a:	0f b6 c0             	movzx  eax,al
c001983d:	83 e0 10             	and    eax,0x10
c0019840:	74 0a                	je     c001984c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0019842:	b8 02 00 00 00       	mov    eax,0x2
c0019847:	eb 0b                	jmp    c0019854 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019849:	8d 76 00             	lea    esi,[esi+0x0]
c001984c:	b8 01 00 00 00       	mov    eax,0x1
c0019851:	8d 76 00             	lea    esi,[esi+0x0]
c0019854:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019858:	83 ec 08             	sub    esp,0x8
c001985b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019862:	83 c0 16             	add    eax,0x16
c0019865:	50                   	push   eax
c0019866:	8d 44 24 14          	lea    eax,[esp+0x14]
c001986a:	83 c0 10             	add    eax,0x10
c001986d:	50                   	push   eax
c001986e:	e8 dd 6d fe ff       	call   c0000650 <strcpy>
c0019873:	83 c4 10             	add    esp,0x10
c0019876:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001987d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019884:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019888:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001988f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0019896:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001989d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00198a4:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00198ab:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00198b2:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00198b9:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00198c0:	89 c6                	mov    esi,eax
c00198c2:	89 d7                	mov    edi,edx
c00198c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00198c6:	89 c8                	mov    eax,ecx
c00198c8:	89 fa                	mov    edx,edi
c00198ca:	89 f3                	mov    ebx,esi
c00198cc:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00198d3:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00198da:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00198e1:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00198e8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00198ee:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00198f5:	0f be c0             	movsx  eax,al
c00198f8:	85 c0                	test   eax,eax
c00198fa:	75 08                	jne    c0019904 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c00198fc:	b8 07 00 00 00       	mov    eax,0x7
c0019901:	eb 1d                	jmp    c0019920 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019903:	90                   	nop
c0019904:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001990b:	85 c0                	test   eax,eax
c001990d:	75 09                	jne    c0019918 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001990f:	b8 00 00 00 00       	mov    eax,0x0
c0019914:	eb 0a                	jmp    c0019920 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019916:	66 90                	xchg   ax,ax
c0019918:	b8 01 00 00 00       	mov    eax,0x1
c001991d:	8d 76 00             	lea    esi,[esi+0x0]
c0019920:	81 c4 50 02 00 00    	add    esp,0x250
c0019926:	5b                   	pop    ebx
c0019927:	5e                   	pop    esi
c0019928:	5f                   	pop    edi
c0019929:	c3                   	ret    
c001992a:	66 90                	xchg   ax,ax

c001992c <FAT::read(void*, unsigned long, void*, int*)>:
c001992c:	83 ec 1c             	sub    esp,0x1c
c001992f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019934:	74 0a                	je     c0019940 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0019936:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001993b:	75 0b                	jne    c0019948 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001993d:	8d 76 00             	lea    esi,[esi+0x0]
c0019940:	b8 04 00 00 00       	mov    eax,0x4
c0019945:	eb 41                	jmp    c0019988 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019947:	90                   	nop
c0019948:	8d 44 24 08          	lea    eax,[esp+0x8]
c001994c:	50                   	push   eax
c001994d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019951:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019955:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019959:	e8 05 a6 fe ff       	call   c0003f63 <f_read>
c001995e:	83 c4 10             	add    esp,0x10
c0019961:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019965:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019969:	89 c2                	mov    edx,eax
c001996b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001996f:	89 10                	mov    DWORD PTR [eax],edx
c0019971:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019975:	85 c0                	test   eax,eax
c0019977:	75 07                	jne    c0019980 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019979:	b8 00 00 00 00       	mov    eax,0x0
c001997e:	eb 08                	jmp    c0019988 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019980:	b8 01 00 00 00       	mov    eax,0x1
c0019985:	8d 76 00             	lea    esi,[esi+0x0]
c0019988:	83 c4 1c             	add    esp,0x1c
c001998b:	c3                   	ret    

c001998c <FAT::write(void*, unsigned long, void*, int*)>:
c001998c:	83 ec 1c             	sub    esp,0x1c
c001998f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019994:	74 0a                	je     c00199a0 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0019996:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001999b:	75 0b                	jne    c00199a8 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001999d:	8d 76 00             	lea    esi,[esi+0x0]
c00199a0:	b8 04 00 00 00       	mov    eax,0x4
c00199a5:	eb 41                	jmp    c00199e8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00199a7:	90                   	nop
c00199a8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00199ac:	50                   	push   eax
c00199ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00199b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00199b5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00199b9:	e8 86 a7 fe ff       	call   c0004144 <f_write>
c00199be:	83 c4 10             	add    esp,0x10
c00199c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199c9:	89 c2                	mov    edx,eax
c00199cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00199cf:	89 10                	mov    DWORD PTR [eax],edx
c00199d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199d5:	85 c0                	test   eax,eax
c00199d7:	75 07                	jne    c00199e0 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00199d9:	b8 00 00 00 00       	mov    eax,0x0
c00199de:	eb 08                	jmp    c00199e8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00199e0:	b8 01 00 00 00       	mov    eax,0x1
c00199e5:	8d 76 00             	lea    esi,[esi+0x0]
c00199e8:	83 c4 1c             	add    esp,0x1c
c00199eb:	c3                   	ret    

c00199ec <FAT::close(void*)>:
c00199ec:	83 ec 1c             	sub    esp,0x1c
c00199ef:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00199f4:	75 0a                	jne    c0019a00 <FAT::close(void*)+0x14>
c00199f6:	b8 04 00 00 00       	mov    eax,0x4
c00199fb:	eb 3f                	jmp    c0019a3c <FAT::close(void*)+0x50>
c00199fd:	8d 76 00             	lea    esi,[esi+0x0]
c0019a00:	83 ec 0c             	sub    esp,0xc
c0019a03:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a07:	e8 44 aa fe ff       	call   c0004450 <f_close>
c0019a0c:	83 c4 10             	add    esp,0x10
c0019a0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a13:	83 ec 0c             	sub    esp,0xc
c0019a16:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a1a:	e8 f4 e0 fe ff       	call   c0007b13 <free>
c0019a1f:	83 c4 10             	add    esp,0x10
c0019a22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a26:	85 c0                	test   eax,eax
c0019a28:	75 0a                	jne    c0019a34 <FAT::close(void*)+0x48>
c0019a2a:	b8 00 00 00 00       	mov    eax,0x0
c0019a2f:	eb 0b                	jmp    c0019a3c <FAT::close(void*)+0x50>
c0019a31:	8d 76 00             	lea    esi,[esi+0x0]
c0019a34:	b8 01 00 00 00       	mov    eax,0x1
c0019a39:	8d 76 00             	lea    esi,[esi+0x0]
c0019a3c:	83 c4 1c             	add    esp,0x1c
c0019a3f:	c3                   	ret    

c0019a40 <FAT::closeDir(void*)>:
c0019a40:	83 ec 1c             	sub    esp,0x1c
c0019a43:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019a48:	75 0a                	jne    c0019a54 <FAT::closeDir(void*)+0x14>
c0019a4a:	b8 04 00 00 00       	mov    eax,0x4
c0019a4f:	eb 3f                	jmp    c0019a90 <FAT::closeDir(void*)+0x50>
c0019a51:	8d 76 00             	lea    esi,[esi+0x0]
c0019a54:	83 ec 0c             	sub    esp,0xc
c0019a57:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a5b:	e8 9a ac fe ff       	call   c00046fa <f_closedir>
c0019a60:	83 c4 10             	add    esp,0x10
c0019a63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a67:	83 ec 0c             	sub    esp,0xc
c0019a6a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a6e:	e8 a0 e0 fe ff       	call   c0007b13 <free>
c0019a73:	83 c4 10             	add    esp,0x10
c0019a76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a7a:	85 c0                	test   eax,eax
c0019a7c:	75 0a                	jne    c0019a88 <FAT::closeDir(void*)+0x48>
c0019a7e:	b8 00 00 00 00       	mov    eax,0x0
c0019a83:	eb 0b                	jmp    c0019a90 <FAT::closeDir(void*)+0x50>
c0019a85:	8d 76 00             	lea    esi,[esi+0x0]
c0019a88:	b8 01 00 00 00       	mov    eax,0x1
c0019a8d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a90:	83 c4 1c             	add    esp,0x1c
c0019a93:	c3                   	ret    

c0019a94 <FAT::truncate(void*, unsigned long long)>:
c0019a94:	83 ec 2c             	sub    esp,0x2c
c0019a97:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a9f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019aa3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019aa7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019aac:	75 0a                	jne    c0019ab8 <FAT::truncate(void*, unsigned long long)+0x24>
c0019aae:	b8 04 00 00 00       	mov    eax,0x4
c0019ab3:	eb 47                	jmp    c0019afc <FAT::truncate(void*, unsigned long long)+0x68>
c0019ab5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ab8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019abc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019abf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019ac3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019acb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019acf:	83 ec 08             	sub    esp,0x8
c0019ad2:	50                   	push   eax
c0019ad3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019ad7:	e8 a3 a9 fe ff       	call   c000447f <f_lseek>
c0019adc:	83 c4 10             	add    esp,0x10
c0019adf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019ae3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019ae7:	85 c0                	test   eax,eax
c0019ae9:	75 09                	jne    c0019af4 <FAT::truncate(void*, unsigned long long)+0x60>
c0019aeb:	b8 00 00 00 00       	mov    eax,0x0
c0019af0:	eb 0a                	jmp    c0019afc <FAT::truncate(void*, unsigned long long)+0x68>
c0019af2:	66 90                	xchg   ax,ax
c0019af4:	b8 01 00 00 00       	mov    eax,0x1
c0019af9:	8d 76 00             	lea    esi,[esi+0x0]
c0019afc:	83 c4 2c             	add    esp,0x2c
c0019aff:	c3                   	ret    

c0019b00 <FAT::seek(void*, unsigned long long)>:
c0019b00:	83 ec 2c             	sub    esp,0x2c
c0019b03:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019b0b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019b0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019b13:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019b18:	75 0a                	jne    c0019b24 <FAT::seek(void*, unsigned long long)+0x24>
c0019b1a:	b8 04 00 00 00       	mov    eax,0x4
c0019b1f:	eb 33                	jmp    c0019b54 <FAT::seek(void*, unsigned long long)+0x54>
c0019b21:	8d 76 00             	lea    esi,[esi+0x0]
c0019b24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b28:	83 ec 08             	sub    esp,0x8
c0019b2b:	50                   	push   eax
c0019b2c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019b30:	e8 4a a9 fe ff       	call   c000447f <f_lseek>
c0019b35:	83 c4 10             	add    esp,0x10
c0019b38:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019b3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b40:	85 c0                	test   eax,eax
c0019b42:	75 08                	jne    c0019b4c <FAT::seek(void*, unsigned long long)+0x4c>
c0019b44:	b8 00 00 00 00       	mov    eax,0x0
c0019b49:	eb 09                	jmp    c0019b54 <FAT::seek(void*, unsigned long long)+0x54>
c0019b4b:	90                   	nop
c0019b4c:	b8 01 00 00 00       	mov    eax,0x1
c0019b51:	8d 76 00             	lea    esi,[esi+0x0]
c0019b54:	83 c4 2c             	add    esp,0x2c
c0019b57:	c3                   	ret    

c0019b58 <fatWrapperReadDisk>:
c0019b58:	53                   	push   ebx
c0019b59:	83 ec 18             	sub    esp,0x18
c0019b5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b60:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b64:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b69:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019b70:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019b74:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b78:	ba 00 00 00 00       	mov    edx,0x0
c0019b7d:	83 ec 0c             	sub    esp,0xc
c0019b80:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019b84:	53                   	push   ebx
c0019b85:	52                   	push   edx
c0019b86:	50                   	push   eax
c0019b87:	51                   	push   ecx
c0019b88:	e8 65 42 ff ff       	call   c000ddf2 <LogicalDisk::read(unsigned long long, int, void*)>
c0019b8d:	83 c4 20             	add    esp,0x20
c0019b90:	83 c4 18             	add    esp,0x18
c0019b93:	5b                   	pop    ebx
c0019b94:	c3                   	ret    
c0019b95:	8d 76 00             	lea    esi,[esi+0x0]

c0019b98 <fatWrapperWriteDisk>:
c0019b98:	53                   	push   ebx
c0019b99:	83 ec 18             	sub    esp,0x18
c0019b9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ba0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019ba4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019ba9:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019bb0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019bb4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019bb8:	ba 00 00 00 00       	mov    edx,0x0
c0019bbd:	83 ec 0c             	sub    esp,0xc
c0019bc0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019bc4:	53                   	push   ebx
c0019bc5:	52                   	push   edx
c0019bc6:	50                   	push   eax
c0019bc7:	51                   	push   ecx
c0019bc8:	e8 91 42 ff ff       	call   c000de5e <LogicalDisk::write(unsigned long long, int, void*)>
c0019bcd:	83 c4 20             	add    esp,0x20
c0019bd0:	83 c4 18             	add    esp,0x18
c0019bd3:	5b                   	pop    ebx
c0019bd4:	c3                   	ret    
c0019bd5:	8d 76 00             	lea    esi,[esi+0x0]

c0019bd8 <fatWrapperIoctl>:
c0019bd8:	53                   	push   ebx
c0019bd9:	83 ec 28             	sub    esp,0x28
c0019bdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019be0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019be4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019be8:	88 d0                	mov    al,dl
c0019bea:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019bee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bf3:	83 f8 02             	cmp    eax,0x2
c0019bf6:	75 34                	jne    c0019c2c <fatWrapperIoctl+0x54>
c0019bf8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019bfc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019c00:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c05:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019c0c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019c12:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019c18:	89 c2                	mov    edx,eax
c0019c1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019c1e:	66 89 10             	mov    WORD PTR [eax],dx
c0019c21:	b8 00 00 00 00       	mov    eax,0x0
c0019c26:	e9 c5 00 00 00       	jmp    c0019cf0 <fatWrapperIoctl+0x118>
c0019c2b:	90                   	nop
c0019c2c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c31:	83 f8 01             	cmp    eax,0x1
c0019c34:	75 6a                	jne    c0019ca0 <fatWrapperIoctl+0xc8>
c0019c36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c3a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019c3e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c43:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019c4a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019c50:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019c56:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019c5c:	89 c8                	mov    eax,ecx
c0019c5e:	89 da                	mov    edx,ebx
c0019c60:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019c64:	c1 e0 0a             	shl    eax,0xa
c0019c67:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019c6c:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0019c73:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019c79:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019c7f:	89 cb                	mov    ebx,ecx
c0019c81:	c1 fb 1f             	sar    ebx,0x1f
c0019c84:	53                   	push   ebx
c0019c85:	51                   	push   ecx
c0019c86:	52                   	push   edx
c0019c87:	50                   	push   eax
c0019c88:	e8 b3 5b 00 00       	call   c001f840 <__udivdi3>
c0019c8d:	83 c4 10             	add    esp,0x10
c0019c90:	89 c2                	mov    edx,eax
c0019c92:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019c96:	89 10                	mov    DWORD PTR [eax],edx
c0019c98:	b8 00 00 00 00       	mov    eax,0x0
c0019c9d:	eb 51                	jmp    c0019cf0 <fatWrapperIoctl+0x118>
c0019c9f:	90                   	nop
c0019ca0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ca5:	85 c0                	test   eax,eax
c0019ca7:	75 07                	jne    c0019cb0 <fatWrapperIoctl+0xd8>
c0019ca9:	b8 00 00 00 00       	mov    eax,0x0
c0019cae:	eb 40                	jmp    c0019cf0 <fatWrapperIoctl+0x118>
c0019cb0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019cb5:	83 f8 03             	cmp    eax,0x3
c0019cb8:	75 1a                	jne    c0019cd4 <fatWrapperIoctl+0xfc>
c0019cba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019cbe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019cc2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019cc6:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019ccc:	b8 00 00 00 00       	mov    eax,0x0
c0019cd1:	eb 1d                	jmp    c0019cf0 <fatWrapperIoctl+0x118>
c0019cd3:	90                   	nop
c0019cd4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019cd9:	83 f8 04             	cmp    eax,0x4
c0019cdc:	75 0a                	jne    c0019ce8 <fatWrapperIoctl+0x110>
c0019cde:	b8 00 00 00 00       	mov    eax,0x0
c0019ce3:	eb 0b                	jmp    c0019cf0 <fatWrapperIoctl+0x118>
c0019ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ce8:	b8 04 00 00 00       	mov    eax,0x4
c0019ced:	8d 76 00             	lea    esi,[esi+0x0]
c0019cf0:	83 c4 28             	add    esp,0x28
c0019cf3:	5b                   	pop    ebx
c0019cf4:	c3                   	ret    
c0019cf5:	90                   	nop
c0019cf6:	66 90                	xchg   ax,ax

c0019cf8 <FAT::FAT()>:
c0019cf8:	83 ec 1c             	sub    esp,0x1c
c0019cfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019cff:	83 ec 0c             	sub    esp,0xc
c0019d02:	50                   	push   eax
c0019d03:	e8 94 1a ff ff       	call   c000b79c <Filesystem::Filesystem()>
c0019d08:	83 c4 10             	add    esp,0x10
c0019d0b:	ba 78 30 02 c0       	mov    edx,0xc0023078
c0019d10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d14:	89 10                	mov    DWORD PTR [eax],edx
c0019d16:	c7 05 80 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c780,0x0
c0019d20:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019d28:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019d2d:	7f 19                	jg     c0019d48 <FAT::FAT()+0x50>
c0019d2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d33:	c7 04 85 a0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3860],0xffffffff
c0019d3e:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019d43:	eb e3                	jmp    c0019d28 <FAT::FAT()+0x30>
c0019d45:	8d 76 00             	lea    esi,[esi+0x0]
c0019d48:	90                   	nop
c0019d49:	83 c4 1c             	add    esp,0x1c
c0019d4c:	c3                   	ret    
c0019d4d:	90                   	nop
c0019d4e:	66 90                	xchg   ax,ax

c0019d50 <FAT::fixFilepath(char*)>:
c0019d50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d54:	8a 00                	mov    al,BYTE PTR [eax]
c0019d56:	0f be c0             	movsx  eax,al
c0019d59:	83 f8 40             	cmp    eax,0x40
c0019d5c:	7e 2e                	jle    c0019d8c <FAT::fixFilepath(char*)+0x3c>
c0019d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d62:	8a 00                	mov    al,BYTE PTR [eax]
c0019d64:	83 e8 41             	sub    eax,0x41
c0019d67:	88 c2                	mov    dl,al
c0019d69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d6d:	88 10                	mov    BYTE PTR [eax],dl
c0019d6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d73:	8a 00                	mov    al,BYTE PTR [eax]
c0019d75:	0f be c0             	movsx  eax,al
c0019d78:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019d7f:	83 c0 30             	add    eax,0x30
c0019d82:	88 c2                	mov    dl,al
c0019d84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d88:	88 10                	mov    BYTE PTR [eax],dl
c0019d8a:	66 90                	xchg   ax,ax
c0019d8c:	90                   	nop
c0019d8d:	c3                   	ret    
c0019d8e:	66 90                	xchg   ax,ax

c0019d90 <FAT::open(char const*, void**, FileOpenMode)>:
c0019d90:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d96:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019d9e:	74 0c                	je     c0019dac <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019da0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019da8:	75 0e                	jne    c0019db8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019daa:	66 90                	xchg   ax,ax
c0019dac:	b8 04 00 00 00       	mov    eax,0x4
c0019db1:	e9 46 01 00 00       	jmp    c0019efc <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019db6:	66 90                	xchg   ax,ax
c0019db8:	83 ec 08             	sub    esp,0x8
c0019dbb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019dc2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019dc6:	50                   	push   eax
c0019dc7:	e8 84 68 fe ff       	call   c0000650 <strcpy>
c0019dcc:	83 c4 10             	add    esp,0x10
c0019dcf:	83 ec 08             	sub    esp,0x8
c0019dd2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019dd6:	50                   	push   eax
c0019dd7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019dde:	e8 6d ff ff ff       	call   c0019d50 <FAT::fixFilepath(char*)>
c0019de3:	83 c4 10             	add    esp,0x10
c0019de6:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019dee:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019df5:	83 e0 01             	and    eax,0x1
c0019df8:	74 12                	je     c0019e0c <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019dfa:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e01:	83 c8 01             	or     eax,0x1
c0019e04:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e0b:	90                   	nop
c0019e0c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e13:	83 e0 04             	and    eax,0x4
c0019e16:	74 24                	je     c0019e3c <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019e18:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e1f:	83 c8 30             	or     eax,0x30
c0019e22:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e29:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e30:	83 c8 02             	or     eax,0x2
c0019e33:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e3a:	66 90                	xchg   ax,ax
c0019e3c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e43:	83 e0 02             	and    eax,0x2
c0019e46:	74 14                	je     c0019e5c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019e48:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e4f:	83 c8 02             	or     eax,0x2
c0019e52:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e59:	8d 76 00             	lea    esi,[esi+0x0]
c0019e5c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e63:	83 e0 08             	and    eax,0x8
c0019e66:	74 14                	je     c0019e7c <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019e68:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e6f:	83 c8 04             	or     eax,0x4
c0019e72:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e79:	8d 76 00             	lea    esi,[esi+0x0]
c0019e7c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019e83:	83 e0 10             	and    eax,0x10
c0019e86:	74 14                	je     c0019e9c <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019e88:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019e8f:	83 c8 08             	or     eax,0x8
c0019e92:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019e99:	8d 76 00             	lea    esi,[esi+0x0]
c0019e9c:	83 ec 0c             	sub    esp,0xc
c0019e9f:	68 28 02 00 00       	push   0x228
c0019ea4:	e8 5a dc fe ff       	call   c0007b03 <malloc>
c0019ea9:	83 c4 10             	add    esp,0x10
c0019eac:	89 c2                	mov    edx,eax
c0019eae:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019eb5:	89 10                	mov    DWORD PTR [eax],edx
c0019eb7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019ebf:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019ec6:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ec8:	83 ec 04             	sub    esp,0x4
c0019ecb:	52                   	push   edx
c0019ecc:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019ed0:	52                   	push   edx
c0019ed1:	50                   	push   eax
c0019ed2:	e8 c9 9d fe ff       	call   c0003ca0 <f_open>
c0019ed7:	83 c4 10             	add    esp,0x10
c0019eda:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019ee1:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019ee9:	74 09                	je     c0019ef4 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019eeb:	b8 01 00 00 00       	mov    eax,0x1
c0019ef0:	eb 0a                	jmp    c0019efc <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019ef2:	66 90                	xchg   ax,ax
c0019ef4:	b8 00 00 00 00       	mov    eax,0x0
c0019ef9:	8d 76 00             	lea    esi,[esi+0x0]
c0019efc:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019f02:	c3                   	ret    
c0019f03:	90                   	nop

c0019f04 <FAT::openDir(char const*, void**)>:
c0019f04:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019f0a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019f12:	74 0c                	je     c0019f20 <FAT::openDir(char const*, void**)+0x1c>
c0019f14:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019f1c:	75 0e                	jne    c0019f2c <FAT::openDir(char const*, void**)+0x28>
c0019f1e:	66 90                	xchg   ax,ax
c0019f20:	b8 04 00 00 00       	mov    eax,0x4
c0019f25:	e9 82 00 00 00       	jmp    c0019fac <FAT::openDir(char const*, void**)+0xa8>
c0019f2a:	66 90                	xchg   ax,ax
c0019f2c:	83 ec 08             	sub    esp,0x8
c0019f2f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f36:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f3a:	50                   	push   eax
c0019f3b:	e8 10 67 fe ff       	call   c0000650 <strcpy>
c0019f40:	83 c4 10             	add    esp,0x10
c0019f43:	83 ec 08             	sub    esp,0x8
c0019f46:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019f4a:	50                   	push   eax
c0019f4b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019f52:	e8 f9 fd ff ff       	call   c0019d50 <FAT::fixFilepath(char*)>
c0019f57:	83 c4 10             	add    esp,0x10
c0019f5a:	83 ec 0c             	sub    esp,0xc
c0019f5d:	6a 30                	push   0x30
c0019f5f:	e8 9f db fe ff       	call   c0007b03 <malloc>
c0019f64:	83 c4 10             	add    esp,0x10
c0019f67:	89 c2                	mov    edx,eax
c0019f69:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019f70:	89 10                	mov    DWORD PTR [eax],edx
c0019f72:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019f79:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f7b:	83 ec 08             	sub    esp,0x8
c0019f7e:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019f82:	52                   	push   edx
c0019f83:	50                   	push   eax
c0019f84:	e8 a6 a6 fe ff       	call   c000462f <f_opendir>
c0019f89:	83 c4 10             	add    esp,0x10
c0019f8c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019f93:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019f9b:	74 07                	je     c0019fa4 <FAT::openDir(char const*, void**)+0xa0>
c0019f9d:	b8 01 00 00 00       	mov    eax,0x1
c0019fa2:	eb 08                	jmp    c0019fac <FAT::openDir(char const*, void**)+0xa8>
c0019fa4:	b8 00 00 00 00       	mov    eax,0x0
c0019fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0019fac:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019fb2:	c3                   	ret    
c0019fb3:	90                   	nop

c0019fb4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019fb4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019fba:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019fc2:	75 0c                	jne    c0019fd0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019fc4:	b8 04 00 00 00       	mov    eax,0x4
c0019fc9:	e9 d6 00 00 00       	jmp    c001a0a4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019fce:	66 90                	xchg   ax,ax
c0019fd0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019fd8:	75 0a                	jne    c0019fe4 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019fda:	b8 04 00 00 00       	mov    eax,0x4
c0019fdf:	e9 c0 00 00 00       	jmp    c001a0a4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019fe4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019fec:	75 0a                	jne    c0019ff8 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019fee:	b8 04 00 00 00       	mov    eax,0x4
c0019ff3:	e9 ac 00 00 00       	jmp    c001a0a4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019ff8:	83 ec 08             	sub    esp,0x8
c0019ffb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a002:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a009:	50                   	push   eax
c001a00a:	e8 41 66 fe ff       	call   c0000650 <strcpy>
c001a00f:	83 c4 10             	add    esp,0x10
c001a012:	83 ec 08             	sub    esp,0x8
c001a015:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a01c:	50                   	push   eax
c001a01d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a024:	e8 27 fd ff ff       	call   c0019d50 <FAT::fixFilepath(char*)>
c001a029:	83 c4 10             	add    esp,0x10
c001a02c:	83 ec 08             	sub    esp,0x8
c001a02f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a033:	50                   	push   eax
c001a034:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a03b:	50                   	push   eax
c001a03c:	e8 6d a7 fe ff       	call   c00047ae <f_stat>
c001a041:	83 c4 10             	add    esp,0x10
c001a044:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a04b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a052:	85 c0                	test   eax,eax
c001a054:	74 0a                	je     c001a060 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001a056:	83 f8 04             	cmp    eax,0x4
c001a059:	74 39                	je     c001a094 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a05b:	eb 3f                	jmp    c001a09c <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001a05d:	8d 76 00             	lea    esi,[esi+0x0]
c001a060:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a064:	0f b6 c0             	movzx  eax,al
c001a067:	83 e0 10             	and    eax,0x10
c001a06a:	0f 95 c2             	setne  dl
c001a06d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001a074:	88 10                	mov    BYTE PTR [eax],dl
c001a076:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a07a:	ba 00 00 00 00       	mov    edx,0x0
c001a07f:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001a086:	89 01                	mov    DWORD PTR [ecx],eax
c001a088:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a08b:	b8 00 00 00 00       	mov    eax,0x0
c001a090:	eb 12                	jmp    c001a0a4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a092:	66 90                	xchg   ax,ax
c001a094:	b8 02 00 00 00       	mov    eax,0x2
c001a099:	eb 09                	jmp    c001a0a4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a09b:	90                   	nop
c001a09c:	b8 01 00 00 00       	mov    eax,0x1
c001a0a1:	8d 76 00             	lea    esi,[esi+0x0]
c001a0a4:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a0aa:	c3                   	ret    
c001a0ab:	90                   	nop

c001a0ac <FAT::unlink(char const*)>:
c001a0ac:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a0b2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a0ba:	75 08                	jne    c001a0c4 <FAT::unlink(char const*)+0x18>
c001a0bc:	b8 04 00 00 00       	mov    eax,0x4
c001a0c1:	eb 61                	jmp    c001a124 <FAT::unlink(char const*)+0x78>
c001a0c3:	90                   	nop
c001a0c4:	83 ec 08             	sub    esp,0x8
c001a0c7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a0ce:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a0d2:	50                   	push   eax
c001a0d3:	e8 78 65 fe ff       	call   c0000650 <strcpy>
c001a0d8:	83 c4 10             	add    esp,0x10
c001a0db:	83 ec 08             	sub    esp,0x8
c001a0de:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a0e2:	50                   	push   eax
c001a0e3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a0ea:	e8 61 fc ff ff       	call   c0019d50 <FAT::fixFilepath(char*)>
c001a0ef:	83 c4 10             	add    esp,0x10
c001a0f2:	83 ec 0c             	sub    esp,0xc
c001a0f5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a0f9:	50                   	push   eax
c001a0fa:	e8 21 a9 fe ff       	call   c0004a20 <f_unlink>
c001a0ff:	83 c4 10             	add    esp,0x10
c001a102:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a109:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a110:	85 c0                	test   eax,eax
c001a112:	75 08                	jne    c001a11c <FAT::unlink(char const*)+0x70>
c001a114:	b8 00 00 00 00       	mov    eax,0x0
c001a119:	eb 09                	jmp    c001a124 <FAT::unlink(char const*)+0x78>
c001a11b:	90                   	nop
c001a11c:	b8 01 00 00 00       	mov    eax,0x1
c001a121:	8d 76 00             	lea    esi,[esi+0x0]
c001a124:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a12a:	c3                   	ret    
c001a12b:	90                   	nop

c001a12c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a12c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a132:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001a139:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001a140:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a144:	88 d0                	mov    al,dl
c001a146:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a14a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a152:	75 0c                	jne    c001a160 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001a154:	b8 04 00 00 00       	mov    eax,0x4
c001a159:	e9 7e 01 00 00       	jmp    c001a2dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a15e:	66 90                	xchg   ax,ax
c001a160:	83 ec 08             	sub    esp,0x8
c001a163:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a16a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a16e:	50                   	push   eax
c001a16f:	e8 dc 64 fe ff       	call   c0000650 <strcpy>
c001a174:	83 c4 10             	add    esp,0x10
c001a177:	83 ec 08             	sub    esp,0x8
c001a17a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a17e:	50                   	push   eax
c001a17f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a186:	e8 c5 fb ff ff       	call   c0019d50 <FAT::fixFilepath(char*)>
c001a18b:	83 c4 10             	add    esp,0x10
c001a18e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a196:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a19e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a1a3:	83 e0 01             	and    eax,0x1
c001a1a6:	74 14                	je     c001a1bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001a1a8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a1af:	83 c8 01             	or     eax,0x1
c001a1b2:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a1b9:	8d 76 00             	lea    esi,[esi+0x0]
c001a1bc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a1c1:	83 e0 02             	and    eax,0x2
c001a1c4:	74 12                	je     c001a1d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001a1c6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a1cd:	83 c8 20             	or     eax,0x20
c001a1d0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a1d7:	90                   	nop
c001a1d8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a1dd:	83 e0 04             	and    eax,0x4
c001a1e0:	74 12                	je     c001a1f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001a1e2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a1e9:	83 c8 04             	or     eax,0x4
c001a1ec:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a1f3:	90                   	nop
c001a1f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a1f9:	83 e0 08             	and    eax,0x8
c001a1fc:	74 12                	je     c001a210 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001a1fe:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a205:	83 c8 02             	or     eax,0x2
c001a208:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a20f:	90                   	nop
c001a210:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a215:	83 e0 01             	and    eax,0x1
c001a218:	74 12                	je     c001a22c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001a21a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a221:	83 c8 01             	or     eax,0x1
c001a224:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a22b:	90                   	nop
c001a22c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a231:	83 e0 02             	and    eax,0x2
c001a234:	74 12                	je     c001a248 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001a236:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a23d:	83 c8 20             	or     eax,0x20
c001a240:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a247:	90                   	nop
c001a248:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a24d:	83 e0 04             	and    eax,0x4
c001a250:	74 12                	je     c001a264 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001a252:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a259:	83 c8 04             	or     eax,0x4
c001a25c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a263:	90                   	nop
c001a264:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a269:	83 e0 08             	and    eax,0x8
c001a26c:	74 12                	je     c001a280 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001a26e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a275:	83 c8 02             	or     eax,0x2
c001a278:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a27f:	90                   	nop
c001a280:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a287:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a28e:	09 d0                	or     eax,edx
c001a290:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a297:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a29f:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a2a7:	83 ec 04             	sub    esp,0x4
c001a2aa:	52                   	push   edx
c001a2ab:	50                   	push   eax
c001a2ac:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a2b0:	50                   	push   eax
c001a2b1:	e8 dd ab fe ff       	call   c0004e93 <f_chmod>
c001a2b6:	83 c4 10             	add    esp,0x10
c001a2b9:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a2c0:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a2c7:	85 c0                	test   eax,eax
c001a2c9:	75 09                	jne    c001a2d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001a2cb:	b8 00 00 00 00       	mov    eax,0x0
c001a2d0:	eb 0a                	jmp    c001a2dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a2d2:	66 90                	xchg   ax,ax
c001a2d4:	b8 01 00 00 00       	mov    eax,0x1
c001a2d9:	8d 76 00             	lea    esi,[esi+0x0]
c001a2dc:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a2e2:	c3                   	ret    
c001a2e3:	90                   	nop

c001a2e4 <FAT::rename(char const*, char const*)>:
c001a2e4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a2ea:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a2f2:	74 0c                	je     c001a300 <FAT::rename(char const*, char const*)+0x1c>
c001a2f4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a2fc:	75 0e                	jne    c001a30c <FAT::rename(char const*, char const*)+0x28>
c001a2fe:	66 90                	xchg   ax,ax
c001a300:	b8 04 00 00 00       	mov    eax,0x4
c001a305:	e9 9e 00 00 00       	jmp    c001a3a8 <FAT::rename(char const*, char const*)+0xc4>
c001a30a:	66 90                	xchg   ax,ax
c001a30c:	83 ec 08             	sub    esp,0x8
c001a30f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a316:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a31d:	50                   	push   eax
c001a31e:	e8 2d 63 fe ff       	call   c0000650 <strcpy>
c001a323:	83 c4 10             	add    esp,0x10
c001a326:	83 ec 08             	sub    esp,0x8
c001a329:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a330:	50                   	push   eax
c001a331:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a338:	e8 13 fa ff ff       	call   c0019d50 <FAT::fixFilepath(char*)>
c001a33d:	83 c4 10             	add    esp,0x10
c001a340:	83 ec 08             	sub    esp,0x8
c001a343:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a34a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a34e:	50                   	push   eax
c001a34f:	e8 fc 62 fe ff       	call   c0000650 <strcpy>
c001a354:	83 c4 10             	add    esp,0x10
c001a357:	83 ec 08             	sub    esp,0x8
c001a35a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a35e:	50                   	push   eax
c001a35f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a366:	e8 e5 f9 ff ff       	call   c0019d50 <FAT::fixFilepath(char*)>
c001a36b:	83 c4 10             	add    esp,0x10
c001a36e:	83 ec 08             	sub    esp,0x8
c001a371:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a375:	50                   	push   eax
c001a376:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a37d:	50                   	push   eax
c001a37e:	e8 58 a9 fe ff       	call   c0004cdb <f_rename>
c001a383:	83 c4 10             	add    esp,0x10
c001a386:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a38d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a394:	85 c0                	test   eax,eax
c001a396:	75 08                	jne    c001a3a0 <FAT::rename(char const*, char const*)+0xbc>
c001a398:	b8 00 00 00 00       	mov    eax,0x0
c001a39d:	eb 09                	jmp    c001a3a8 <FAT::rename(char const*, char const*)+0xc4>
c001a39f:	90                   	nop
c001a3a0:	b8 01 00 00 00       	mov    eax,0x1
c001a3a5:	8d 76 00             	lea    esi,[esi+0x0]
c001a3a8:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a3ae:	c3                   	ret    
c001a3af:	90                   	nop

c001a3b0 <FAT::mkdir(char const*)>:
c001a3b0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a3b6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a3be:	75 08                	jne    c001a3c8 <FAT::mkdir(char const*)+0x18>
c001a3c0:	b8 04 00 00 00       	mov    eax,0x4
c001a3c5:	eb 61                	jmp    c001a428 <FAT::mkdir(char const*)+0x78>
c001a3c7:	90                   	nop
c001a3c8:	83 ec 08             	sub    esp,0x8
c001a3cb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a3d2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a3d6:	50                   	push   eax
c001a3d7:	e8 74 62 fe ff       	call   c0000650 <strcpy>
c001a3dc:	83 c4 10             	add    esp,0x10
c001a3df:	83 ec 08             	sub    esp,0x8
c001a3e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a3e6:	50                   	push   eax
c001a3e7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a3ee:	e8 5d f9 ff ff       	call   c0019d50 <FAT::fixFilepath(char*)>
c001a3f3:	83 c4 10             	add    esp,0x10
c001a3f6:	83 ec 0c             	sub    esp,0xc
c001a3f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a3fd:	50                   	push   eax
c001a3fe:	e8 3d a7 fe ff       	call   c0004b40 <f_mkdir>
c001a403:	83 c4 10             	add    esp,0x10
c001a406:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a40d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a414:	85 c0                	test   eax,eax
c001a416:	75 08                	jne    c001a420 <FAT::mkdir(char const*)+0x70>
c001a418:	b8 00 00 00 00       	mov    eax,0x0
c001a41d:	eb 09                	jmp    c001a428 <FAT::mkdir(char const*)+0x78>
c001a41f:	90                   	nop
c001a420:	b8 01 00 00 00       	mov    eax,0x1
c001a425:	8d 76 00             	lea    esi,[esi+0x0]
c001a428:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a42e:	c3                   	ret    
c001a42f:	90                   	nop

c001a430 <FAT::exists(char const*)>:
c001a430:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a436:	83 ec 08             	sub    esp,0x8
c001a439:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a440:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a444:	50                   	push   eax
c001a445:	e8 06 62 fe ff       	call   c0000650 <strcpy>
c001a44a:	83 c4 10             	add    esp,0x10
c001a44d:	83 ec 08             	sub    esp,0x8
c001a450:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a454:	50                   	push   eax
c001a455:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a45c:	e8 ef f8 ff ff       	call   c0019d50 <FAT::fixFilepath(char*)>
c001a461:	83 c4 10             	add    esp,0x10
c001a464:	83 ec 08             	sub    esp,0x8
c001a467:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a46e:	50                   	push   eax
c001a46f:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a473:	50                   	push   eax
c001a474:	e8 35 a3 fe ff       	call   c00047ae <f_stat>
c001a479:	83 c4 10             	add    esp,0x10
c001a47c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a483:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a48a:	85 c0                	test   eax,eax
c001a48c:	75 06                	jne    c001a494 <FAT::exists(char const*)+0x64>
c001a48e:	b0 01                	mov    al,0x1
c001a490:	eb 06                	jmp    c001a498 <FAT::exists(char const*)+0x68>
c001a492:	66 90                	xchg   ax,ax
c001a494:	b0 00                	mov    al,0x0
c001a496:	66 90                	xchg   ax,ax
c001a498:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a49e:	c3                   	ret    
c001a49f:	90                   	nop

c001a4a0 <isoReadDiscSectorHelper>:
c001a4a0:	83 ec 2c             	sub    esp,0x2c
c001a4a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a4a7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a4ab:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a4b0:	83 e8 41             	sub    eax,0x41
c001a4b3:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c001a4ba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a4be:	ba 00 00 00 00       	mov    edx,0x0
c001a4c3:	83 ec 0c             	sub    esp,0xc
c001a4c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a4ca:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a4ce:	52                   	push   edx
c001a4cf:	50                   	push   eax
c001a4d0:	51                   	push   ecx
c001a4d1:	e8 1c 39 ff ff       	call   c000ddf2 <LogicalDisk::read(unsigned long long, int, void*)>
c001a4d6:	83 c4 20             	add    esp,0x20
c001a4d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a4dd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a4e2:	74 0c                	je     c001a4f0 <isoReadDiscSectorHelper+0x50>
c001a4e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a4e8:	c1 e0 0b             	shl    eax,0xb
c001a4eb:	eb 0b                	jmp    c001a4f8 <isoReadDiscSectorHelper+0x58>
c001a4ed:	8d 76 00             	lea    esi,[esi+0x0]
c001a4f0:	b8 00 00 00 00       	mov    eax,0x0
c001a4f5:	8d 76 00             	lea    esi,[esi+0x0]
c001a4f8:	83 c4 2c             	add    esp,0x2c
c001a4fb:	c3                   	ret    

c001a4fc <iso_kprintf>:
c001a4fc:	83 ec 0c             	sub    esp,0xc
c001a4ff:	83 ec 08             	sub    esp,0x8
c001a502:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a506:	68 26 2e 02 c0       	push   0xc0022e26
c001a50b:	e8 2a 04 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001a510:	83 c4 10             	add    esp,0x10
c001a513:	90                   	nop
c001a514:	83 c4 0c             	add    esp,0xc
c001a517:	c3                   	ret    

c001a518 <iso_kprintfd>:
c001a518:	83 ec 0c             	sub    esp,0xc
c001a51b:	83 ec 08             	sub    esp,0x8
c001a51e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a522:	68 82 14 02 c0       	push   0xc0021482
c001a527:	e8 0e 04 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001a52c:	83 c4 10             	add    esp,0x10
c001a52f:	90                   	nop
c001a530:	83 c4 0c             	add    esp,0xc
c001a533:	c3                   	ret    

c001a534 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a534:	b8 08 00 00 00       	mov    eax,0x8
c001a539:	c3                   	ret    

c001a53a <ISO9660::truncate(void*, unsigned long long)>:
c001a53a:	b8 01 00 00 00       	mov    eax,0x1
c001a53f:	c3                   	ret    

c001a540 <ISO9660::getName()>:
c001a540:	b8 dc 30 02 c0       	mov    eax,0xc00230dc
c001a545:	c3                   	ret    

c001a546 <ISO9660::closeDir(void*)>:
c001a546:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a54a:	8b 00                	mov    eax,DWORD PTR [eax]
c001a54c:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a54f:	90                   	nop

c001a550 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a550:	b8 01 00 00 00       	mov    eax,0x1
c001a555:	c3                   	ret    

c001a556 <ISO9660::unlink(char const*)>:
c001a556:	b8 01 00 00 00       	mov    eax,0x1
c001a55b:	c3                   	ret    

c001a55c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a55c:	b8 03 00 00 00       	mov    eax,0x3
c001a561:	c3                   	ret    

c001a562 <ISO9660::rename(char const*, char const*)>:
c001a562:	b8 01 00 00 00       	mov    eax,0x1
c001a567:	c3                   	ret    

c001a568 <ISO9660::mkdir(char const*)>:
c001a568:	b8 01 00 00 00       	mov    eax,0x1
c001a56d:	c3                   	ret    

c001a56e <ISO9660::~ISO9660()>:
c001a56e:	83 ec 0c             	sub    esp,0xc
c001a571:	ba 1c 32 02 c0       	mov    edx,0xc002321c
c001a576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a57a:	89 10                	mov    DWORD PTR [eax],edx
c001a57c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a580:	83 ec 0c             	sub    esp,0xc
c001a583:	50                   	push   eax
c001a584:	e8 37 12 ff ff       	call   c000b7c0 <Filesystem::~Filesystem()>
c001a589:	83 c4 10             	add    esp,0x10
c001a58c:	90                   	nop
c001a58d:	83 c4 0c             	add    esp,0xc
c001a590:	c3                   	ret    
c001a591:	90                   	nop

c001a592 <ISO9660::~ISO9660()>:
c001a592:	83 ec 0c             	sub    esp,0xc
c001a595:	83 ec 0c             	sub    esp,0xc
c001a598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a59c:	e8 cd ff ff ff       	call   c001a56e <ISO9660::~ISO9660()>
c001a5a1:	83 c4 10             	add    esp,0x10
c001a5a4:	83 ec 08             	sub    esp,0x8
c001a5a7:	6a 08                	push   0x8
c001a5a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5ad:	e8 8a 02 ff ff       	call   c000a83c <operator delete(void*, unsigned long)>
c001a5b2:	83 c4 10             	add    esp,0x10
c001a5b5:	83 c4 0c             	add    esp,0xc
c001a5b8:	c3                   	ret    
c001a5b9:	90                   	nop

c001a5ba <ISO9660::exists(char const*)>:
c001a5ba:	83 ec 18             	sub    esp,0x18
c001a5bd:	68 f7 30 02 c0       	push   0xc00230f7
c001a5c2:	e8 90 70 ff ff       	call   c0011657 <KePanic(char const*)>
c001a5c7:	31 c0                	xor    eax,eax
c001a5c9:	83 c4 1c             	add    esp,0x1c
c001a5cc:	c3                   	ret    
c001a5cd:	90                   	nop

c001a5ce <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a5ce:	56                   	push   esi
c001a5cf:	53                   	push   ebx
c001a5d0:	53                   	push   ebx
c001a5d1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a5d5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a5d9:	85 db                	test   ebx,ebx
c001a5db:	0f 84 ca 00 00 00    	je     c001a6ab <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a5e1:	85 f6                	test   esi,esi
c001a5e3:	0f 84 c2 00 00 00    	je     c001a6ab <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a5e9:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a5ee:	b8 03 00 00 00       	mov    eax,0x3
c001a5f3:	0f 85 b7 00 00 00    	jne    c001a6b0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a5f9:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a5fb:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a601:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a608:	74 1b                	je     c001a625 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a60a:	85 c0                	test   eax,eax
c001a60c:	74 10                	je     c001a61e <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a60e:	83 ec 0c             	sub    esp,0xc
c001a611:	68 15 31 02 c0       	push   0xc0023115
c001a616:	e8 3c 70 ff ff       	call   c0011657 <KePanic(char const*)>
c001a61b:	83 c4 10             	add    esp,0x10
c001a61e:	8a 03                	mov    al,BYTE PTR [ebx]
c001a620:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a625:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a628:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a62f:	85 c0                	test   eax,eax
c001a631:	74 09                	je     c001a63c <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a633:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a63a:	74 48                	je     c001a684 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a63c:	83 ec 0c             	sub    esp,0xc
c001a63f:	68 25 31 02 c0       	push   0xc0023125
c001a644:	e8 f1 02 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001a649:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a64c:	83 c4 10             	add    esp,0x10
c001a64f:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a656:	85 c0                	test   eax,eax
c001a658:	74 17                	je     c001a671 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a65a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a661:	83 ec 0c             	sub    esp,0xc
c001a664:	68 45 31 02 c0       	push   0xc0023145
c001a669:	e8 cc 02 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001a66e:	83 c4 10             	add    esp,0x10
c001a671:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a678:	83 ec 0c             	sub    esp,0xc
c001a67b:	50                   	push   eax
c001a67c:	e8 e6 c3 fe ff       	call   c0006a67 <init_percd>
c001a681:	83 c4 10             	add    esp,0x10
c001a684:	51                   	push   ecx
c001a685:	83 c3 03             	add    ebx,0x3
c001a688:	51                   	push   ecx
c001a689:	6a 00                	push   0x0
c001a68b:	53                   	push   ebx
c001a68c:	e8 99 be fe ff       	call   c000652a <iso_open>
c001a691:	83 c4 10             	add    esp,0x10
c001a694:	89 c2                	mov    edx,eax
c001a696:	b8 01 00 00 00       	mov    eax,0x1
c001a69b:	83 fa ff             	cmp    edx,0xffffffff
c001a69e:	74 10                	je     c001a6b0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a6a0:	83 c2 32             	add    edx,0x32
c001a6a3:	31 c0                	xor    eax,eax
c001a6a5:	01 d2                	add    edx,edx
c001a6a7:	89 16                	mov    DWORD PTR [esi],edx
c001a6a9:	eb 05                	jmp    c001a6b0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a6ab:	b8 04 00 00 00       	mov    eax,0x4
c001a6b0:	5a                   	pop    edx
c001a6b1:	5b                   	pop    ebx
c001a6b2:	5e                   	pop    esi
c001a6b3:	c3                   	ret    

c001a6b4 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a6b4:	53                   	push   ebx
c001a6b5:	83 ec 08             	sub    esp,0x8
c001a6b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a6bc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a6c0:	85 c0                	test   eax,eax
c001a6c2:	74 2d                	je     c001a6f1 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a6c4:	85 db                	test   ebx,ebx
c001a6c6:	74 29                	je     c001a6f1 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a6c8:	52                   	push   edx
c001a6c9:	b9 02 00 00 00       	mov    ecx,0x2
c001a6ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6d2:	99                   	cdq    
c001a6d3:	f7 f9                	idiv   ecx
c001a6d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a6d9:	83 e8 32             	sub    eax,0x32
c001a6dc:	50                   	push   eax
c001a6dd:	e8 f0 be fe ff       	call   c00065d2 <iso_read>
c001a6e2:	83 c4 10             	add    esp,0x10
c001a6e5:	89 03                	mov    DWORD PTR [ebx],eax
c001a6e7:	09 d0                	or     eax,edx
c001a6e9:	0f 94 c0             	sete   al
c001a6ec:	0f b6 c0             	movzx  eax,al
c001a6ef:	eb 05                	jmp    c001a6f6 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a6f1:	b8 04 00 00 00       	mov    eax,0x4
c001a6f6:	83 c4 08             	add    esp,0x8
c001a6f9:	5b                   	pop    ebx
c001a6fa:	c3                   	ret    
c001a6fb:	90                   	nop

c001a6fc <ISO9660::seek(void*, unsigned long long)>:
c001a6fc:	57                   	push   edi
c001a6fd:	b8 04 00 00 00       	mov    eax,0x4
c001a702:	56                   	push   esi
c001a703:	51                   	push   ecx
c001a704:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a708:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a70c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a710:	85 d2                	test   edx,edx
c001a712:	74 26                	je     c001a73a <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a714:	89 d0                	mov    eax,edx
c001a716:	b9 02 00 00 00       	mov    ecx,0x2
c001a71b:	6a 00                	push   0x0
c001a71d:	99                   	cdq    
c001a71e:	f7 f9                	idiv   ecx
c001a720:	57                   	push   edi
c001a721:	56                   	push   esi
c001a722:	83 e8 32             	sub    eax,0x32
c001a725:	50                   	push   eax
c001a726:	e8 bd bf fe ff       	call   c00066e8 <iso_seek>
c001a72b:	83 c4 10             	add    esp,0x10
c001a72e:	31 f0                	xor    eax,esi
c001a730:	31 fa                	xor    edx,edi
c001a732:	09 d0                	or     eax,edx
c001a734:	0f 95 c0             	setne  al
c001a737:	0f b6 c0             	movzx  eax,al
c001a73a:	5a                   	pop    edx
c001a73b:	5e                   	pop    esi
c001a73c:	5f                   	pop    edi
c001a73d:	c3                   	ret    

c001a73e <ISO9660::tell(void*, unsigned long long*)>:
c001a73e:	53                   	push   ebx
c001a73f:	83 ec 08             	sub    esp,0x8
c001a742:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a746:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a74a:	85 c0                	test   eax,eax
c001a74c:	74 24                	je     c001a772 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a74e:	85 db                	test   ebx,ebx
c001a750:	74 20                	je     c001a772 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a752:	b9 02 00 00 00       	mov    ecx,0x2
c001a757:	99                   	cdq    
c001a758:	f7 f9                	idiv   ecx
c001a75a:	83 ec 0c             	sub    esp,0xc
c001a75d:	83 e8 32             	sub    eax,0x32
c001a760:	50                   	push   eax
c001a761:	e8 06 c0 fe ff       	call   c000676c <iso_tell>
c001a766:	83 c4 10             	add    esp,0x10
c001a769:	89 03                	mov    DWORD PTR [ebx],eax
c001a76b:	31 c0                	xor    eax,eax
c001a76d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a770:	eb 05                	jmp    c001a777 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a772:	b8 04 00 00 00       	mov    eax,0x4
c001a777:	83 c4 08             	add    esp,0x8
c001a77a:	5b                   	pop    ebx
c001a77b:	c3                   	ret    

c001a77c <ISO9660::stat(void*, unsigned long long*)>:
c001a77c:	56                   	push   esi
c001a77d:	53                   	push   ebx
c001a77e:	83 ec 10             	sub    esp,0x10
c001a781:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a785:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a789:	68 69 31 02 c0       	push   0xc0023169
c001a78e:	e8 a7 01 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001a793:	83 c4 10             	add    esp,0x10
c001a796:	85 db                	test   ebx,ebx
c001a798:	74 2a                	je     c001a7c4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a79a:	85 f6                	test   esi,esi
c001a79c:	74 26                	je     c001a7c4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a79e:	89 d8                	mov    eax,ebx
c001a7a0:	b9 02 00 00 00       	mov    ecx,0x2
c001a7a5:	99                   	cdq    
c001a7a6:	83 ec 0c             	sub    esp,0xc
c001a7a9:	f7 f9                	idiv   ecx
c001a7ab:	83 e8 32             	sub    eax,0x32
c001a7ae:	50                   	push   eax
c001a7af:	e8 e9 bf fe ff       	call   c000679d <iso_total>
c001a7b4:	83 c4 10             	add    esp,0x10
c001a7b7:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a7be:	89 06                	mov    DWORD PTR [esi],eax
c001a7c0:	31 c0                	xor    eax,eax
c001a7c2:	eb 05                	jmp    c001a7c9 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a7c4:	b8 04 00 00 00       	mov    eax,0x4
c001a7c9:	5a                   	pop    edx
c001a7ca:	5b                   	pop    ebx
c001a7cb:	5e                   	pop    esi
c001a7cc:	c3                   	ret    
c001a7cd:	90                   	nop

c001a7ce <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a7ce:	55                   	push   ebp
c001a7cf:	57                   	push   edi
c001a7d0:	56                   	push   esi
c001a7d1:	53                   	push   ebx
c001a7d2:	83 ec 18             	sub    esp,0x18
c001a7d5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a7d9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a7dd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a7e1:	68 71 31 02 c0       	push   0xc0023171
c001a7e6:	e8 4f 01 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001a7eb:	83 c4 10             	add    esp,0x10
c001a7ee:	85 ff                	test   edi,edi
c001a7f0:	0f 94 c0             	sete   al
c001a7f3:	85 f6                	test   esi,esi
c001a7f5:	0f 94 c2             	sete   dl
c001a7f8:	09 d0                	or     eax,edx
c001a7fa:	a8 01                	test   al,0x1
c001a7fc:	0f 85 dd 00 00 00    	jne    c001a8df <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a802:	85 db                	test   ebx,ebx
c001a804:	0f 84 d5 00 00 00    	je     c001a8df <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a80a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a80d:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a813:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a81a:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a821:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a823:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a829:	74 1b                	je     c001a846 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a82b:	85 c0                	test   eax,eax
c001a82d:	74 10                	je     c001a83f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a82f:	83 ec 0c             	sub    esp,0xc
c001a832:	68 15 31 02 c0       	push   0xc0023115
c001a837:	e8 1b 6e ff ff       	call   c0011657 <KePanic(char const*)>
c001a83c:	83 c4 10             	add    esp,0x10
c001a83f:	8a 03                	mov    al,BYTE PTR [ebx]
c001a841:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a846:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a849:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a850:	85 c0                	test   eax,eax
c001a852:	74 09                	je     c001a85d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a854:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a85b:	74 51                	je     c001a8ae <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a85d:	83 ec 0c             	sub    esp,0xc
c001a860:	68 79 31 02 c0       	push   0xc0023179
c001a865:	e8 d0 00 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001a86a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a86d:	83 c4 10             	add    esp,0x10
c001a870:	83 3c 85 7c b7 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4884],0x0
c001a878:	74 21                	je     c001a89b <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a87a:	83 ec 0c             	sub    esp,0xc
c001a87d:	68 99 31 02 c0       	push   0xc0023199
c001a882:	e8 b3 00 ff ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001a887:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a88a:	83 c4 10             	add    esp,0x10
c001a88d:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a894:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a89b:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a8a2:	83 ec 0c             	sub    esp,0xc
c001a8a5:	50                   	push   eax
c001a8a6:	e8 bc c1 fe ff       	call   c0006a67 <init_percd>
c001a8ab:	83 c4 10             	add    esp,0x10
c001a8ae:	52                   	push   edx
c001a8af:	83 c3 03             	add    ebx,0x3
c001a8b2:	52                   	push   edx
c001a8b3:	6a 00                	push   0x0
c001a8b5:	53                   	push   ebx
c001a8b6:	e8 6f bc fe ff       	call   c000652a <iso_open>
c001a8bb:	83 c4 10             	add    esp,0x10
c001a8be:	83 f8 ff             	cmp    eax,0xffffffff
c001a8c1:	89 c5                	mov    ebp,eax
c001a8c3:	75 21                	jne    c001a8e6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a8c5:	50                   	push   eax
c001a8c6:	50                   	push   eax
c001a8c7:	6a 01                	push   0x1
c001a8c9:	53                   	push   ebx
c001a8ca:	e8 5b bc fe ff       	call   c000652a <iso_open>
c001a8cf:	83 c4 10             	add    esp,0x10
c001a8d2:	ba 02 00 00 00       	mov    edx,0x2
c001a8d7:	40                   	inc    eax
c001a8d8:	74 2b                	je     c001a905 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a8da:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a8dd:	eb 24                	jmp    c001a903 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a8df:	ba 04 00 00 00       	mov    edx,0x4
c001a8e4:	eb 1f                	jmp    c001a905 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a8e6:	83 ec 0c             	sub    esp,0xc
c001a8e9:	50                   	push   eax
c001a8ea:	e8 ae be fe ff       	call   c000679d <iso_total>
c001a8ef:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a8f6:	89 07                	mov    DWORD PTR [edi],eax
c001a8f8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a8fb:	e8 b4 bc fe ff       	call   c00065b4 <iso_close>
c001a900:	83 c4 10             	add    esp,0x10
c001a903:	31 d2                	xor    edx,edx
c001a905:	83 c4 0c             	add    esp,0xc
c001a908:	89 d0                	mov    eax,edx
c001a90a:	5b                   	pop    ebx
c001a90b:	5e                   	pop    esi
c001a90c:	5f                   	pop    edi
c001a90d:	5d                   	pop    ebp
c001a90e:	c3                   	ret    
c001a90f:	90                   	nop

c001a910 <ISO9660::close(void*)>:
c001a910:	83 ec 0c             	sub    esp,0xc
c001a913:	b8 04 00 00 00       	mov    eax,0x4
c001a918:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a91c:	85 d2                	test   edx,edx
c001a91e:	74 1b                	je     c001a93b <ISO9660::close(void*)+0x2b>
c001a920:	89 d0                	mov    eax,edx
c001a922:	b9 02 00 00 00       	mov    ecx,0x2
c001a927:	99                   	cdq    
c001a928:	83 ec 0c             	sub    esp,0xc
c001a92b:	f7 f9                	idiv   ecx
c001a92d:	83 e8 32             	sub    eax,0x32
c001a930:	50                   	push   eax
c001a931:	e8 7e bc fe ff       	call   c00065b4 <iso_close>
c001a936:	83 c4 10             	add    esp,0x10
c001a939:	31 c0                	xor    eax,eax
c001a93b:	83 c4 0c             	add    esp,0xc
c001a93e:	c3                   	ret    
c001a93f:	90                   	nop

c001a940 <ISO9660::openDir(char const*, void**)>:
c001a940:	56                   	push   esi
c001a941:	53                   	push   ebx
c001a942:	50                   	push   eax
c001a943:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a947:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a94b:	85 db                	test   ebx,ebx
c001a94d:	0f 84 bd 00 00 00    	je     c001aa10 <ISO9660::openDir(char const*, void**)+0xd0>
c001a953:	85 f6                	test   esi,esi
c001a955:	0f 84 b5 00 00 00    	je     c001aa10 <ISO9660::openDir(char const*, void**)+0xd0>
c001a95b:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a95d:	38 15 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,dl
c001a963:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a96a:	74 1b                	je     c001a987 <ISO9660::openDir(char const*, void**)+0x47>
c001a96c:	85 c0                	test   eax,eax
c001a96e:	74 10                	je     c001a980 <ISO9660::openDir(char const*, void**)+0x40>
c001a970:	83 ec 0c             	sub    esp,0xc
c001a973:	68 15 31 02 c0       	push   0xc0023115
c001a978:	e8 da 6c ff ff       	call   c0011657 <KePanic(char const*)>
c001a97d:	83 c4 10             	add    esp,0x10
c001a980:	8a 03                	mov    al,BYTE PTR [ebx]
c001a982:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a987:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a98a:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a991:	85 c0                	test   eax,eax
c001a993:	74 10                	je     c001a9a5 <ISO9660::openDir(char const*, void**)+0x65>
c001a995:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a99c:	74 1a                	je     c001a9b8 <ISO9660::openDir(char const*, void**)+0x78>
c001a99e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a9a5:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a9ac:	83 ec 0c             	sub    esp,0xc
c001a9af:	50                   	push   eax
c001a9b0:	e8 b2 c0 fe ff       	call   c0006a67 <init_percd>
c001a9b5:	83 c4 10             	add    esp,0x10
c001a9b8:	50                   	push   eax
c001a9b9:	83 c3 03             	add    ebx,0x3
c001a9bc:	50                   	push   eax
c001a9bd:	6a 01                	push   0x1
c001a9bf:	53                   	push   ebx
c001a9c0:	e8 65 bb fe ff       	call   c000652a <iso_open>
c001a9c5:	83 c4 10             	add    esp,0x10
c001a9c8:	83 f8 ff             	cmp    eax,0xffffffff
c001a9cb:	89 c3                	mov    ebx,eax
c001a9cd:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a9d2:	75 1c                	jne    c001a9f0 <ISO9660::openDir(char const*, void**)+0xb0>
c001a9d4:	53                   	push   ebx
c001a9d5:	53                   	push   ebx
c001a9d6:	68 bd 31 02 c0       	push   0xc00231bd
c001a9db:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a9e1:	e8 f6 e0 fe ff       	call   c0008adc <VgaText::puts(char const*)>
c001a9e6:	83 c4 10             	add    esp,0x10
c001a9e9:	b8 01 00 00 00       	mov    eax,0x1
c001a9ee:	eb 25                	jmp    c001aa15 <ISO9660::openDir(char const*, void**)+0xd5>
c001a9f0:	51                   	push   ecx
c001a9f1:	01 db                	add    ebx,ebx
c001a9f3:	51                   	push   ecx
c001a9f4:	83 c3 65             	add    ebx,0x65
c001a9f7:	68 d0 31 02 c0       	push   0xc00231d0
c001a9fc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aa02:	e8 d5 e0 fe ff       	call   c0008adc <VgaText::puts(char const*)>
c001aa07:	83 c4 10             	add    esp,0x10
c001aa0a:	31 c0                	xor    eax,eax
c001aa0c:	89 1e                	mov    DWORD PTR [esi],ebx
c001aa0e:	eb 05                	jmp    c001aa15 <ISO9660::openDir(char const*, void**)+0xd5>
c001aa10:	b8 04 00 00 00       	mov    eax,0x4
c001aa15:	5a                   	pop    edx
c001aa16:	5b                   	pop    ebx
c001aa17:	5e                   	pop    esi
c001aa18:	c3                   	ret    
c001aa19:	90                   	nop

c001aa1a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001aa1a:	55                   	push   ebp
c001aa1b:	57                   	push   edi
c001aa1c:	56                   	push   esi
c001aa1d:	53                   	push   ebx
c001aa1e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aa24:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001aa2b:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001aa32:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001aa39:	85 db                	test   ebx,ebx
c001aa3b:	0f 84 e4 00 00 00    	je     c001ab25 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001aa41:	85 ed                	test   ebp,ebp
c001aa43:	0f 84 dc 00 00 00    	je     c001ab25 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001aa49:	83 ec 0c             	sub    esp,0xc
c001aa4c:	68 e3 31 02 c0       	push   0xc00231e3
c001aa51:	e8 e4 fe fe ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001aa56:	89 d8                	mov    eax,ebx
c001aa58:	b9 02 00 00 00       	mov    ecx,0x2
c001aa5d:	99                   	cdq    
c001aa5e:	f7 f9                	idiv   ecx
c001aa60:	83 e8 32             	sub    eax,0x32
c001aa63:	89 04 24             	mov    DWORD PTR [esp],eax
c001aa66:	e8 84 bd fe ff       	call   c00067ef <iso_readdir>
c001aa6b:	83 c4 10             	add    esp,0x10
c001aa6e:	85 c0                	test   eax,eax
c001aa70:	89 c3                	mov    ebx,eax
c001aa72:	75 38                	jne    c001aaac <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001aa74:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aa79:	53                   	push   ebx
c001aa7a:	53                   	push   ebx
c001aa7b:	68 ee 31 02 c0       	push   0xc00231ee
c001aa80:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aa86:	e8 51 e0 fe ff       	call   c0008adc <VgaText::puts(char const*)>
c001aa8b:	83 c4 0c             	add    esp,0xc
c001aa8e:	68 10 01 00 00       	push   0x110
c001aa93:	6a 00                	push   0x0
c001aa95:	57                   	push   edi
c001aa96:	e8 55 5a fe ff       	call   c00004f0 <memset>
c001aa9b:	83 c4 10             	add    esp,0x10
c001aa9e:	b8 01 00 00 00       	mov    eax,0x1
c001aaa3:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001aaaa:	eb 7e                	jmp    c001ab2a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001aaac:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001aab2:	8d 70 08             	lea    esi,[eax+0x8]
c001aab5:	83 ec 0c             	sub    esp,0xc
c001aab8:	56                   	push   esi
c001aab9:	e8 c2 5a fe ff       	call   c0000580 <strlen>
c001aabe:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001aac6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aaca:	83 c4 10             	add    esp,0x10
c001aacd:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001aad1:	75 0a                	jne    c001aadd <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001aad3:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001aad6:	b8 02 00 00 00       	mov    eax,0x2
c001aadb:	74 05                	je     c001aae2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001aadd:	b8 01 00 00 00       	mov    eax,0x1
c001aae2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aae6:	50                   	push   eax
c001aae7:	50                   	push   eax
c001aae8:	56                   	push   esi
c001aae9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aaed:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001aaf1:	50                   	push   eax
c001aaf2:	e8 59 5b fe ff       	call   c0000650 <strcpy>
c001aaf7:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001aafe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab00:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001ab07:	5a                   	pop    edx
c001ab08:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001ab0d:	59                   	pop    ecx
c001ab0e:	68 01 32 02 c0       	push   0xc0023201
c001ab13:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001ab19:	e8 be df fe ff       	call   c0008adc <VgaText::puts(char const*)>
c001ab1e:	83 c4 10             	add    esp,0x10
c001ab21:	31 c0                	xor    eax,eax
c001ab23:	eb 05                	jmp    c001ab2a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001ab25:	b8 04 00 00 00       	mov    eax,0x4
c001ab2a:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ab30:	5b                   	pop    ebx
c001ab31:	5e                   	pop    esi
c001ab32:	5f                   	pop    edi
c001ab33:	5d                   	pop    ebp
c001ab34:	c3                   	ret    

c001ab35 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001ab35:	57                   	push   edi
c001ab36:	56                   	push   esi
c001ab37:	53                   	push   ebx
c001ab38:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ab3c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ab40:	39 35 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,esi
c001ab46:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ab4a:	0f be cb             	movsx  ecx,bl
c001ab4d:	75 0b                	jne    c001ab5a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001ab4f:	0f be 05 40 44 02 c0 	movsx  eax,BYTE PTR ds:0xc0024440
c001ab56:	39 c8                	cmp    eax,ecx
c001ab58:	74 47                	je     c001aba1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001ab5a:	83 ec 0c             	sub    esp,0xc
c001ab5d:	31 d2                	xor    edx,edx
c001ab5f:	68 a0 c8 02 c0       	push   0xc002c8a0
c001ab64:	6a 01                	push   0x1
c001ab66:	52                   	push   edx
c001ab67:	56                   	push   esi
c001ab68:	ff 34 8d 7c b7 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4884]
c001ab6f:	e8 7e 32 ff ff       	call   c000ddf2 <LogicalDisk::read(unsigned long long, int, void*)>
c001ab74:	83 c4 20             	add    esp,0x20
c001ab77:	85 c0                	test   eax,eax
c001ab79:	75 0e                	jne    c001ab89 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001ab7b:	89 35 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,esi
c001ab81:	88 1d 40 44 02 c0    	mov    BYTE PTR ds:0xc0024440,bl
c001ab87:	eb 18                	jmp    c001aba1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001ab89:	50                   	push   eax
c001ab8a:	68 00 08 00 00       	push   0x800
c001ab8f:	6a 00                	push   0x0
c001ab91:	57                   	push   edi
c001ab92:	e8 59 59 fe ff       	call   c00004f0 <memset>
c001ab97:	83 c4 10             	add    esp,0x10
c001ab9a:	b8 01 00 00 00       	mov    eax,0x1
c001ab9f:	eb 0e                	jmp    c001abaf <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001aba1:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c001aba6:	b9 00 08 00 00       	mov    ecx,0x800
c001abab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001abad:	31 c0                	xor    eax,eax
c001abaf:	5b                   	pop    ebx
c001abb0:	5e                   	pop    esi
c001abb1:	5f                   	pop    edi
c001abb2:	c3                   	ret    
c001abb3:	90                   	nop

c001abb4 <ISO9660::tryMount(LogicalDisk*, int)>:
c001abb4:	53                   	push   ebx
c001abb5:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001abbb:	c7 05 84 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c884,0xdeadbeef
c001abc5:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001abcc:	8d 58 41             	lea    ebx,[eax+0x41]
c001abcf:	0f be db             	movsx  ebx,bl
c001abd2:	53                   	push   ebx
c001abd3:	8d 44 24 08          	lea    eax,[esp+0x8]
c001abd7:	50                   	push   eax
c001abd8:	6a 10                	push   0x10
c001abda:	e8 56 ff ff ff       	call   c001ab35 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001abdf:	83 c4 10             	add    esp,0x10
c001abe2:	31 d2                	xor    edx,edx
c001abe4:	85 c0                	test   eax,eax
c001abe6:	75 33                	jne    c001ac1b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abe8:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001abed:	75 2c                	jne    c001ac1b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abef:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001abf4:	75 25                	jne    c001ac1b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abf6:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001abfb:	75 1e                	jne    c001ac1b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001abfd:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001ac02:	75 17                	jne    c001ac1b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ac04:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001ac09:	75 10                	jne    c001ac1b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ac0b:	83 ec 0c             	sub    esp,0xc
c001ac0e:	53                   	push   ebx
c001ac0f:	e8 53 be fe ff       	call   c0006a67 <init_percd>
c001ac14:	83 c4 10             	add    esp,0x10
c001ac17:	40                   	inc    eax
c001ac18:	0f 95 c2             	setne  dl
c001ac1b:	81 c4 08 08 00 00    	add    esp,0x808
c001ac21:	88 d0                	mov    al,dl
c001ac23:	5b                   	pop    ebx
c001ac24:	c3                   	ret    
c001ac25:	90                   	nop

c001ac26 <ISO9660::ISO9660()>:
c001ac26:	83 ec 0c             	sub    esp,0xc
c001ac29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac2d:	83 ec 0c             	sub    esp,0xc
c001ac30:	50                   	push   eax
c001ac31:	e8 66 0b ff ff       	call   c000b79c <Filesystem::Filesystem()>
c001ac36:	83 c4 10             	add    esp,0x10
c001ac39:	ba 1c 32 02 c0       	mov    edx,0xc002321c
c001ac3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac42:	89 10                	mov    DWORD PTR [eax],edx
c001ac44:	e8 30 bf fe ff       	call   c0006b79 <fs_iso9660_init>
c001ac49:	90                   	nop
c001ac4a:	83 c4 0c             	add    esp,0xc
c001ac4d:	c3                   	ret    

c001ac4e <SoundCard::beginPlayback()>:
c001ac4e:	c7 44 24 04 80 32 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023280
c001ac56:	e9 fc 69 ff ff       	jmp    c0011657 <KePanic(char const*)>
c001ac5b:	90                   	nop

c001ac5c <SoundCard::stopPlayback()>:
c001ac5c:	c7 44 24 04 80 32 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023280
c001ac64:	e9 ee 69 ff ff       	jmp    c0011657 <KePanic(char const*)>
c001ac69:	90                   	nop

c001ac6a <SoundCard::SoundCard(char const*)>:
c001ac6a:	83 ec 1c             	sub    esp,0x1c
c001ac6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac71:	83 ec 08             	sub    esp,0x8
c001ac74:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac78:	50                   	push   eax
c001ac79:	e8 24 1f ff ff       	call   c000cba2 <Device::Device(char const*)>
c001ac7e:	83 c4 10             	add    esp,0x10
c001ac81:	ba cc 32 02 c0       	mov    edx,0xc00232cc
c001ac86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac8a:	89 10                	mov    DWORD PTR [eax],edx
c001ac8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac90:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ac97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac9b:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001aca5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aca9:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001acb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acb7:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001acc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acc5:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001accf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001acd7:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001acdc:	7f 1a                	jg     c001acf8 <SoundCard::SoundCard(char const*)+0x8e>
c001acde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ace2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ace6:	83 c2 54             	add    edx,0x54
c001ace9:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001acf1:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001acf6:	eb df                	jmp    c001acd7 <SoundCard::SoundCard(char const*)+0x6d>
c001acf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acfc:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ad03:	90                   	nop
c001ad04:	83 c4 1c             	add    esp,0x1c
c001ad07:	c3                   	ret    

c001ad08 <SoundCard::~SoundCard()>:
c001ad08:	83 ec 0c             	sub    esp,0xc
c001ad0b:	ba cc 32 02 c0       	mov    edx,0xc00232cc
c001ad10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad14:	89 10                	mov    DWORD PTR [eax],edx
c001ad16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad1a:	83 ec 0c             	sub    esp,0xc
c001ad1d:	50                   	push   eax
c001ad1e:	e8 af 1b ff ff       	call   c000c8d2 <Device::~Device()>
c001ad23:	83 c4 10             	add    esp,0x10
c001ad26:	90                   	nop
c001ad27:	83 c4 0c             	add    esp,0xc
c001ad2a:	c3                   	ret    
c001ad2b:	90                   	nop

c001ad2c <SoundCard::~SoundCard()>:
c001ad2c:	83 ec 0c             	sub    esp,0xc
c001ad2f:	83 ec 0c             	sub    esp,0xc
c001ad32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad36:	e8 cd ff ff ff       	call   c001ad08 <SoundCard::~SoundCard()>
c001ad3b:	83 c4 10             	add    esp,0x10
c001ad3e:	83 ec 08             	sub    esp,0x8
c001ad41:	68 e8 01 00 00       	push   0x1e8
c001ad46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad4a:	e8 ed fa fe ff       	call   c000a83c <operator delete(void*, unsigned long)>
c001ad4f:	83 c4 10             	add    esp,0x10
c001ad52:	83 c4 0c             	add    esp,0xc
c001ad55:	c3                   	ret    

c001ad56 <SoundCard::configureRates(int, int, int)>:
c001ad56:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ad5a:	31 c0                	xor    eax,eax
c001ad5c:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001ad63:	75 20                	jne    c001ad85 <SoundCard::configureRates(int, int, int)+0x2f>
c001ad65:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad69:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001ad6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad73:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001ad79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad7d:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001ad83:	b0 01                	mov    al,0x1
c001ad85:	c3                   	ret    

c001ad86 <SoundCard::getSamples16(int, short*)>:
c001ad86:	55                   	push   ebp
c001ad87:	57                   	push   edi
c001ad88:	31 ff                	xor    edi,edi
c001ad8a:	56                   	push   esi
c001ad8b:	53                   	push   ebx
c001ad8c:	31 db                	xor    ebx,ebx
c001ad8e:	83 ec 10             	sub    esp,0x10
c001ad91:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ad95:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ad99:	8d 04 36             	lea    eax,[esi+esi*1]
c001ad9c:	50                   	push   eax
c001ad9d:	6a 00                	push   0x0
c001ad9f:	55                   	push   ebp
c001ada0:	e8 4b 57 fe ff       	call   c00004f0 <memset>
c001ada5:	83 c4 10             	add    esp,0x10
c001ada8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001adac:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001adb3:	85 c0                	test   eax,eax
c001adb5:	74 1a                	je     c001add1 <SoundCard::getSamples16(int, short*)+0x4b>
c001adb7:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001adbb:	75 14                	jne    c001add1 <SoundCard::getSamples16(int, short*)+0x4b>
c001adbd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001adc1:	55                   	push   ebp
c001adc2:	56                   	push   esi
c001adc3:	50                   	push   eax
c001adc4:	e8 f3 02 00 00       	call   c001b0bc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001adc9:	83 c4 10             	add    esp,0x10
c001adcc:	39 c3                	cmp    ebx,eax
c001adce:	0f 4c d8             	cmovl  ebx,eax
c001add1:	47                   	inc    edi
c001add2:	83 ff 20             	cmp    edi,0x20
c001add5:	75 d1                	jne    c001ada8 <SoundCard::getSamples16(int, short*)+0x22>
c001add7:	83 c4 0c             	add    esp,0xc
c001adda:	89 d8                	mov    eax,ebx
c001addc:	5b                   	pop    ebx
c001addd:	5e                   	pop    esi
c001adde:	5f                   	pop    edi
c001addf:	5d                   	pop    ebp
c001ade0:	c3                   	ret    
c001ade1:	90                   	nop

c001ade2 <SoundCard::getSamples32(int, int*)>:
c001ade2:	55                   	push   ebp
c001ade3:	57                   	push   edi
c001ade4:	31 ff                	xor    edi,edi
c001ade6:	56                   	push   esi
c001ade7:	31 f6                	xor    esi,esi
c001ade9:	53                   	push   ebx
c001adea:	83 ec 10             	sub    esp,0x10
c001aded:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001adf1:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001adf5:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001adf9:	c1 e0 02             	shl    eax,0x2
c001adfc:	50                   	push   eax
c001adfd:	6a 00                	push   0x0
c001adff:	55                   	push   ebp
c001ae00:	e8 eb 56 fe ff       	call   c00004f0 <memset>
c001ae05:	83 c4 10             	add    esp,0x10
c001ae08:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ae0f:	85 c0                	test   eax,eax
c001ae11:	74 1a                	je     c001ae2d <SoundCard::getSamples32(int, int*)+0x4b>
c001ae13:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ae17:	75 14                	jne    c001ae2d <SoundCard::getSamples32(int, int*)+0x4b>
c001ae19:	53                   	push   ebx
c001ae1a:	55                   	push   ebp
c001ae1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae1f:	50                   	push   eax
c001ae20:	e8 67 03 00 00       	call   c001b18c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001ae25:	83 c4 10             	add    esp,0x10
c001ae28:	39 c6                	cmp    esi,eax
c001ae2a:	0f 4c f0             	cmovl  esi,eax
c001ae2d:	47                   	inc    edi
c001ae2e:	83 ff 20             	cmp    edi,0x20
c001ae31:	75 d5                	jne    c001ae08 <SoundCard::getSamples32(int, int*)+0x26>
c001ae33:	85 f6                	test   esi,esi
c001ae35:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001ae3c:	75 0f                	jne    c001ae4d <SoundCard::getSamples32(int, int*)+0x6b>
c001ae3e:	85 c0                	test   eax,eax
c001ae40:	74 1b                	je     c001ae5d <SoundCard::getSamples32(int, int*)+0x7b>
c001ae42:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae44:	83 ec 0c             	sub    esp,0xc
c001ae47:	53                   	push   ebx
c001ae48:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ae4b:	eb 0d                	jmp    c001ae5a <SoundCard::getSamples32(int, int*)+0x78>
c001ae4d:	85 c0                	test   eax,eax
c001ae4f:	75 0c                	jne    c001ae5d <SoundCard::getSamples32(int, int*)+0x7b>
c001ae51:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae53:	83 ec 0c             	sub    esp,0xc
c001ae56:	53                   	push   ebx
c001ae57:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ae5a:	83 c4 10             	add    esp,0x10
c001ae5d:	83 c4 0c             	add    esp,0xc
c001ae60:	89 f0                	mov    eax,esi
c001ae62:	5b                   	pop    ebx
c001ae63:	5e                   	pop    esi
c001ae64:	5f                   	pop    edi
c001ae65:	5d                   	pop    ebp
c001ae66:	c3                   	ret    
c001ae67:	90                   	nop

c001ae68 <SoundCard::addChannel(SoundPort*)>:
c001ae68:	83 ec 0c             	sub    esp,0xc
c001ae6b:	31 c0                	xor    eax,eax
c001ae6d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae71:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001ae79:	74 1b                	je     c001ae96 <SoundCard::addChannel(SoundPort*)+0x2e>
c001ae7b:	40                   	inc    eax
c001ae7c:	83 f8 20             	cmp    eax,0x20
c001ae7f:	75 f0                	jne    c001ae71 <SoundCard::addChannel(SoundPort*)+0x9>
c001ae81:	83 ec 0c             	sub    esp,0xc
c001ae84:	68 a5 32 02 c0       	push   0xc00232a5
c001ae89:	e8 c9 67 ff ff       	call   c0011657 <KePanic(char const*)>
c001ae8e:	83 c4 10             	add    esp,0x10
c001ae91:	83 c8 ff             	or     eax,0xffffffff
c001ae94:	eb 0b                	jmp    c001aea1 <SoundCard::addChannel(SoundPort*)+0x39>
c001ae96:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae9a:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001aea1:	83 c4 0c             	add    esp,0xc
c001aea4:	c3                   	ret    
c001aea5:	90                   	nop

c001aea6 <SoundCard::removeChannel(int)>:
c001aea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aeaa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aeae:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001aeb9:	c3                   	ret    
c001aeba:	66 90                	xchg   ax,ax

c001aebc <SoundPort::SoundPort(int, int, int, int)>:
c001aebc:	83 ec 0c             	sub    esp,0xc
c001aebf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aec3:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001aeca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aece:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001aed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aed6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aeda:	89 10                	mov    DWORD PTR [eax],edx
c001aedc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aee0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aee4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001aee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeeb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001aeef:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001aef2:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001aef7:	75 13                	jne    c001af0c <SoundPort::SoundPort(int, int, int, int)+0x50>
c001aef9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aefd:	8b 00                	mov    eax,DWORD PTR [eax]
c001aeff:	05 a0 0f 00 00       	add    eax,0xfa0
c001af04:	d1 e0                	shl    eax,1
c001af06:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001af0a:	66 90                	xchg   ax,ax
c001af0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af10:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001af14:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001af17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af1b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001af22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af26:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001af29:	c1 e0 02             	shl    eax,0x2
c001af2c:	83 ec 0c             	sub    esp,0xc
c001af2f:	50                   	push   eax
c001af30:	e8 ce cb fe ff       	call   c0007b03 <malloc>
c001af35:	83 c4 10             	add    esp,0x10
c001af38:	89 c2                	mov    edx,eax
c001af3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af3e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001af41:	90                   	nop
c001af42:	83 c4 0c             	add    esp,0xc
c001af45:	c3                   	ret    
c001af46:	66 90                	xchg   ax,ax

c001af48 <SoundPort::~SoundPort()>:
c001af48:	83 ec 0c             	sub    esp,0xc
c001af4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af4f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001af52:	85 c0                	test   eax,eax
c001af54:	74 1e                	je     c001af74 <SoundPort::~SoundPort()+0x2c>
c001af56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af5a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001af5d:	83 ec 0c             	sub    esp,0xc
c001af60:	50                   	push   eax
c001af61:	e8 ad cb fe ff       	call   c0007b13 <free>
c001af66:	83 c4 10             	add    esp,0x10
c001af69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af6d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001af74:	90                   	nop
c001af75:	83 c4 0c             	add    esp,0xc
c001af78:	c3                   	ret    
c001af79:	90                   	nop
c001af7a:	66 90                	xchg   ax,ax

c001af7c <SoundPort::unpause()>:
c001af7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af80:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001af84:	c3                   	ret    
c001af85:	90                   	nop
c001af86:	66 90                	xchg   ax,ax

c001af88 <SoundPort::pause()>:
c001af88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af8c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001af90:	c3                   	ret    
c001af91:	90                   	nop
c001af92:	66 90                	xchg   ax,ax

c001af94 <SoundPort::getBufferUsed()>:
c001af94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af98:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001af9b:	c3                   	ret    

c001af9c <SoundPort::getBufferSize()>:
c001af9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001afa0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001afa3:	c3                   	ret    

c001afa4 <SoundPort::buffer16(short*, int)>:
c001afa4:	55                   	push   ebp
c001afa5:	57                   	push   edi
c001afa6:	56                   	push   esi
c001afa7:	53                   	push   ebx
c001afa8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001afac:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001afb0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001afb3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001afb6:	74 68                	je     c001b020 <SoundPort::buffer16(short*, int)+0x7c>
c001afb8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001afbc:	85 c9                	test   ecx,ecx
c001afbe:	7e 60                	jle    c001b020 <SoundPort::buffer16(short*, int)+0x7c>
c001afc0:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001afc4:	8d 70 01             	lea    esi,[eax+0x1]
c001afc7:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001afca:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001afcd:	c1 e1 0f             	shl    ecx,0xf
c001afd0:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001afd3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001afd6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001afd9:	74 4d                	je     c001b028 <SoundPort::buffer16(short*, int)+0x84>
c001afdb:	31 f6                	xor    esi,esi
c001afdd:	eb 21                	jmp    c001b000 <SoundPort::buffer16(short*, int)+0x5c>
c001afdf:	90                   	nop
c001afe0:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001afe5:	8d 79 01             	lea    edi,[ecx+0x1]
c001afe8:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001afeb:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001afee:	c1 e3 0f             	shl    ebx,0xf
c001aff1:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001aff4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aff7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001affa:	74 1c                	je     c001b018 <SoundPort::buffer16(short*, int)+0x74>
c001affc:	89 c6                	mov    esi,eax
c001affe:	66 90                	xchg   ax,ax
c001b000:	8d 46 01             	lea    eax,[esi+0x1]
c001b003:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001b007:	75 d7                	jne    c001afe0 <SoundPort::buffer16(short*, int)+0x3c>
c001b009:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b00d:	8d 76 00             	lea    esi,[esi+0x0]
c001b010:	5b                   	pop    ebx
c001b011:	5e                   	pop    esi
c001b012:	5f                   	pop    edi
c001b013:	5d                   	pop    ebp
c001b014:	c3                   	ret    
c001b015:	8d 76 00             	lea    esi,[esi+0x0]
c001b018:	5b                   	pop    ebx
c001b019:	8d 46 02             	lea    eax,[esi+0x2]
c001b01c:	5e                   	pop    esi
c001b01d:	5f                   	pop    edi
c001b01e:	5d                   	pop    ebp
c001b01f:	c3                   	ret    
c001b020:	5b                   	pop    ebx
c001b021:	31 c0                	xor    eax,eax
c001b023:	5e                   	pop    esi
c001b024:	5f                   	pop    edi
c001b025:	5d                   	pop    ebp
c001b026:	c3                   	ret    
c001b027:	90                   	nop
c001b028:	b8 01 00 00 00       	mov    eax,0x1
c001b02d:	eb e1                	jmp    c001b010 <SoundPort::buffer16(short*, int)+0x6c>
c001b02f:	90                   	nop

c001b030 <SoundPort::buffer32(int*, int)>:
c001b030:	55                   	push   ebp
c001b031:	57                   	push   edi
c001b032:	56                   	push   esi
c001b033:	53                   	push   ebx
c001b034:	83 ec 04             	sub    esp,0x4
c001b037:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b03b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b03f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b043:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b046:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b049:	89 04 24             	mov    DWORD PTR [esp],eax
c001b04c:	74 5a                	je     c001b0a8 <SoundPort::buffer32(int*, int)+0x78>
c001b04e:	85 c0                	test   eax,eax
c001b050:	7e 56                	jle    c001b0a8 <SoundPort::buffer32(int*, int)+0x78>
c001b052:	8d 71 01             	lea    esi,[ecx+0x1]
c001b055:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b058:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b05b:	8b 37                	mov    esi,DWORD PTR [edi]
c001b05d:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001b060:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b063:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b066:	74 4c                	je     c001b0b4 <SoundPort::buffer32(int*, int)+0x84>
c001b068:	31 f6                	xor    esi,esi
c001b06a:	eb 1c                	jmp    c001b088 <SoundPort::buffer32(int*, int)+0x58>
c001b06c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001b06f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001b072:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001b075:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b078:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001b07c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b07f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b082:	74 18                	je     c001b09c <SoundPort::buffer32(int*, int)+0x6c>
c001b084:	89 de                	mov    esi,ebx
c001b086:	66 90                	xchg   ax,ax
c001b088:	8d 5e 01             	lea    ebx,[esi+0x1]
c001b08b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001b08e:	75 dc                	jne    c001b06c <SoundPort::buffer32(int*, int)+0x3c>
c001b090:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b093:	90                   	nop
c001b094:	83 c4 04             	add    esp,0x4
c001b097:	5b                   	pop    ebx
c001b098:	5e                   	pop    esi
c001b099:	5f                   	pop    edi
c001b09a:	5d                   	pop    ebp
c001b09b:	c3                   	ret    
c001b09c:	8d 46 02             	lea    eax,[esi+0x2]
c001b09f:	83 c4 04             	add    esp,0x4
c001b0a2:	5b                   	pop    ebx
c001b0a3:	5e                   	pop    esi
c001b0a4:	5f                   	pop    edi
c001b0a5:	5d                   	pop    ebp
c001b0a6:	c3                   	ret    
c001b0a7:	90                   	nop
c001b0a8:	83 c4 04             	add    esp,0x4
c001b0ab:	31 c0                	xor    eax,eax
c001b0ad:	5b                   	pop    ebx
c001b0ae:	5e                   	pop    esi
c001b0af:	5f                   	pop    edi
c001b0b0:	5d                   	pop    ebp
c001b0b1:	c3                   	ret    
c001b0b2:	66 90                	xchg   ax,ax
c001b0b4:	b8 01 00 00 00       	mov    eax,0x1
c001b0b9:	eb d9                	jmp    c001b094 <SoundPort::buffer32(int*, int)+0x64>
c001b0bb:	90                   	nop

c001b0bc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001b0bc:	55                   	push   ebp
c001b0bd:	57                   	push   edi
c001b0be:	56                   	push   esi
c001b0bf:	53                   	push   ebx
c001b0c0:	83 ec 0c             	sub    esp,0xc
c001b0c3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b0c7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b0cb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b0cf:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b0d3:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001b0d9:	39 03                	cmp    DWORD PTR [ebx],eax
c001b0db:	74 13                	je     c001b0f0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001b0dd:	83 ec 0c             	sub    esp,0xc
c001b0e0:	68 f8 32 02 c0       	push   0xc00232f8
c001b0e5:	e8 6d 65 ff ff       	call   c0011657 <KePanic(char const*)>
c001b0ea:	83 c4 10             	add    esp,0x10
c001b0ed:	8d 76 00             	lea    esi,[esi+0x0]
c001b0f0:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b0f6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b0f9:	74 11                	je     c001b10c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001b0fb:	83 ec 0c             	sub    esp,0xc
c001b0fe:	68 37 33 02 c0       	push   0xc0023337
c001b103:	e8 4f 65 ff ff       	call   c0011657 <KePanic(char const*)>
c001b108:	83 c4 10             	add    esp,0x10
c001b10b:	90                   	nop
c001b10c:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b112:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b115:	74 11                	je     c001b128 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001b117:	83 ec 0c             	sub    esp,0xc
c001b11a:	68 37 33 02 c0       	push   0xc0023337
c001b11f:	e8 33 65 ff ff       	call   c0011657 <KePanic(char const*)>
c001b124:	83 c4 10             	add    esp,0x10
c001b127:	90                   	nop
c001b128:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001b12b:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001b12f:	85 f6                	test   esi,esi
c001b131:	7e 2d                	jle    c001b160 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001b133:	31 c0                	xor    eax,eax
c001b135:	8d 76 00             	lea    esi,[esi+0x0]
c001b138:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b13b:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001b13e:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001b144:	85 c9                	test   ecx,ecx
c001b146:	0f 49 d1             	cmovns edx,ecx
c001b149:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001b14d:	c1 fa 0f             	sar    edx,0xf
c001b150:	01 d1                	add    ecx,edx
c001b152:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001b156:	83 c0 01             	add    eax,0x1
c001b159:	39 f0                	cmp    eax,esi
c001b15b:	75 db                	jne    c001b138 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001b15d:	8d 76 00             	lea    esi,[esi+0x0]
c001b160:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b163:	83 ec 04             	sub    esp,0x4
c001b166:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b169:	29 f0                	sub    eax,esi
c001b16b:	c1 e0 02             	shl    eax,0x2
c001b16e:	50                   	push   eax
c001b16f:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b172:	50                   	push   eax
c001b173:	52                   	push   edx
c001b174:	e8 57 52 fe ff       	call   c00003d0 <memmove>
c001b179:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b17c:	29 f0                	sub    eax,esi
c001b17e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b181:	83 c4 1c             	add    esp,0x1c
c001b184:	89 f0                	mov    eax,esi
c001b186:	5b                   	pop    ebx
c001b187:	5e                   	pop    esi
c001b188:	5f                   	pop    edi
c001b189:	5d                   	pop    ebp
c001b18a:	c3                   	ret    
c001b18b:	90                   	nop

c001b18c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b18c:	55                   	push   ebp
c001b18d:	57                   	push   edi
c001b18e:	56                   	push   esi
c001b18f:	53                   	push   ebx
c001b190:	83 ec 0c             	sub    esp,0xc
c001b193:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b197:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b19b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b19f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b1a3:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001b1a9:	39 03                	cmp    DWORD PTR [ebx],eax
c001b1ab:	74 13                	je     c001b1c0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001b1ad:	83 ec 0c             	sub    esp,0xc
c001b1b0:	68 18 33 02 c0       	push   0xc0023318
c001b1b5:	e8 9d 64 ff ff       	call   c0011657 <KePanic(char const*)>
c001b1ba:	83 c4 10             	add    esp,0x10
c001b1bd:	8d 76 00             	lea    esi,[esi+0x0]
c001b1c0:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b1c6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b1c9:	74 11                	je     c001b1dc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001b1cb:	83 ec 0c             	sub    esp,0xc
c001b1ce:	68 53 33 02 c0       	push   0xc0023353
c001b1d3:	e8 7f 64 ff ff       	call   c0011657 <KePanic(char const*)>
c001b1d8:	83 c4 10             	add    esp,0x10
c001b1db:	90                   	nop
c001b1dc:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b1e2:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b1e5:	74 11                	je     c001b1f8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001b1e7:	83 ec 0c             	sub    esp,0xc
c001b1ea:	68 53 33 02 c0       	push   0xc0023353
c001b1ef:	e8 63 64 ff ff       	call   c0011657 <KePanic(char const*)>
c001b1f4:	83 c4 10             	add    esp,0x10
c001b1f7:	90                   	nop
c001b1f8:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001b1fb:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001b1ff:	85 ff                	test   edi,edi
c001b201:	7e 21                	jle    c001b224 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001b203:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b20a:	31 c0                	xor    eax,eax
c001b20c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b20f:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001b212:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b215:	01 d5                	add    ebp,edx
c001b217:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001b21a:	83 c0 04             	add    eax,0x4
c001b21d:	39 c1                	cmp    ecx,eax
c001b21f:	75 eb                	jne    c001b20c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001b221:	8d 76 00             	lea    esi,[esi+0x0]
c001b224:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b227:	83 ec 04             	sub    esp,0x4
c001b22a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b22d:	29 f8                	sub    eax,edi
c001b22f:	c1 e0 02             	shl    eax,0x2
c001b232:	50                   	push   eax
c001b233:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b236:	50                   	push   eax
c001b237:	52                   	push   edx
c001b238:	e8 93 51 fe ff       	call   c00003d0 <memmove>
c001b23d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b240:	29 f8                	sub    eax,edi
c001b242:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b245:	83 c4 1c             	add    esp,0x1c
c001b248:	89 f8                	mov    eax,edi
c001b24a:	5b                   	pop    ebx
c001b24b:	5e                   	pop    esi
c001b24c:	5f                   	pop    edi
c001b24d:	5d                   	pop    ebp
c001b24e:	c3                   	ret    
c001b24f:	90                   	nop

c001b250 <PCI::open(int, int, void*)>:
c001b250:	83 ec 18             	sub    esp,0x18
c001b253:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b257:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b25b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b261:	8b 10                	mov    edx,DWORD PTR [eax]
c001b263:	50                   	push   eax
c001b264:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b267:	31 c0                	xor    eax,eax
c001b269:	83 c4 1c             	add    esp,0x1c
c001b26c:	c3                   	ret    
c001b26d:	90                   	nop

c001b26e <PCI::close(int, int, void*)>:
c001b26e:	31 c0                	xor    eax,eax
c001b270:	c3                   	ret    
c001b271:	90                   	nop

c001b272 <PCI::PCI()>:
c001b272:	83 ec 0c             	sub    esp,0xc
c001b275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b279:	83 ec 08             	sub    esp,0x8
c001b27c:	68 6f 33 02 c0       	push   0xc002336f
c001b281:	50                   	push   eax
c001b282:	e8 a5 10 ff ff       	call   c000c32c <Bus::Bus(char const*)>
c001b287:	83 c4 10             	add    esp,0x10
c001b28a:	ba 18 34 02 c0       	mov    edx,0xc0023418
c001b28f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b293:	89 10                	mov    DWORD PTR [eax],edx
c001b295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b299:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b2a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2a7:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001b2ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2b0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b2b6:	0f b6 d0             	movzx  edx,al
c001b2b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2bd:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b2c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2c8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b2ce:	0f b6 d0             	movzx  edx,al
c001b2d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2d5:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b2da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2de:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b2e4:	8d 50 01             	lea    edx,[eax+0x1]
c001b2e7:	88 d1                	mov    cl,dl
c001b2e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b2ed:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b2f3:	0f b6 d0             	movzx  edx,al
c001b2f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2fa:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b2fe:	83 c9 c0             	or     ecx,0xffffffc0
c001b301:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b305:	90                   	nop
c001b306:	83 c4 0c             	add    esp,0xc
c001b309:	c3                   	ret    

c001b30a <PCI::readBAR8(unsigned int, int)>:
c001b30a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b30e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b312:	f6 c2 01             	test   dl,0x1
c001b315:	74 07                	je     c001b31e <PCI::readBAR8(unsigned int, int)+0x14>
c001b317:	83 e2 fc             	and    edx,0xfffffffc
c001b31a:	01 c2                	add    edx,eax
c001b31c:	ec                   	in     al,dx
c001b31d:	c3                   	ret    
c001b31e:	83 e2 f0             	and    edx,0xfffffff0
c001b321:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b324:	c3                   	ret    
c001b325:	90                   	nop

c001b326 <PCI::readBAR16(unsigned int, int)>:
c001b326:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b32a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b32e:	f6 c2 01             	test   dl,0x1
c001b331:	74 08                	je     c001b33b <PCI::readBAR16(unsigned int, int)+0x15>
c001b333:	83 e2 fc             	and    edx,0xfffffffc
c001b336:	01 c2                	add    edx,eax
c001b338:	66 ed                	in     ax,dx
c001b33a:	c3                   	ret    
c001b33b:	83 e2 f0             	and    edx,0xfffffff0
c001b33e:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b342:	c3                   	ret    
c001b343:	90                   	nop

c001b344 <PCI::readBAR32(unsigned int, int)>:
c001b344:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b348:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b34c:	f6 c2 01             	test   dl,0x1
c001b34f:	74 07                	je     c001b358 <PCI::readBAR32(unsigned int, int)+0x14>
c001b351:	83 e2 fc             	and    edx,0xfffffffc
c001b354:	01 c2                	add    edx,eax
c001b356:	ed                   	in     eax,dx
c001b357:	c3                   	ret    
c001b358:	83 e2 f0             	and    edx,0xfffffff0
c001b35b:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b35e:	c3                   	ret    
c001b35f:	90                   	nop

c001b360 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b360:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b364:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b368:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b36c:	f6 c2 01             	test   dl,0x1
c001b36f:	74 07                	je     c001b378 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b371:	83 e2 fc             	and    edx,0xfffffffc
c001b374:	01 ca                	add    edx,ecx
c001b376:	ee                   	out    dx,al
c001b377:	c3                   	ret    
c001b378:	83 e2 f0             	and    edx,0xfffffff0
c001b37b:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b37e:	c3                   	ret    
c001b37f:	90                   	nop

c001b380 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b380:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b384:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b388:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b38c:	f6 c2 01             	test   dl,0x1
c001b38f:	74 08                	je     c001b399 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b391:	83 e2 fc             	and    edx,0xfffffffc
c001b394:	01 ca                	add    edx,ecx
c001b396:	66 ef                	out    dx,ax
c001b398:	c3                   	ret    
c001b399:	83 e2 f0             	and    edx,0xfffffff0
c001b39c:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b3a0:	c3                   	ret    
c001b3a1:	90                   	nop

c001b3a2 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b3a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b3a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b3aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b3ae:	f6 c2 01             	test   dl,0x1
c001b3b1:	74 07                	je     c001b3ba <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b3b3:	83 e2 fc             	and    edx,0xfffffffc
c001b3b6:	01 ca                	add    edx,ecx
c001b3b8:	ef                   	out    dx,eax
c001b3b9:	c3                   	ret    
c001b3ba:	83 e2 f0             	and    edx,0xfffffff0
c001b3bd:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b3c0:	c3                   	ret    
c001b3c1:	90                   	nop

c001b3c2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b3c2:	55                   	push   ebp
c001b3c3:	57                   	push   edi
c001b3c4:	56                   	push   esi
c001b3c5:	53                   	push   ebx
c001b3c6:	83 ec 0c             	sub    esp,0xc
c001b3c9:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b3ce:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b3d2:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b3d6:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b3da:	83 fe 07             	cmp    esi,0x7
c001b3dd:	76 10                	jbe    c001b3ef <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b3df:	83 ec 0c             	sub    esp,0xc
c001b3e2:	68 77 33 02 c0       	push   0xc0023377
c001b3e7:	e8 6b 62 ff ff       	call   c0011657 <KePanic(char const*)>
c001b3ec:	83 c4 10             	add    esp,0x10
c001b3ef:	0f b6 db             	movzx  ebx,bl
c001b3f2:	83 fb 0f             	cmp    ebx,0xf
c001b3f5:	76 10                	jbe    c001b407 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001b3f7:	83 ec 0c             	sub    esp,0xc
c001b3fa:	68 a7 33 02 c0       	push   0xc00233a7
c001b3ff:	e8 53 62 ff ff       	call   c0011657 <KePanic(char const*)>
c001b404:	83 c4 10             	add    esp,0x10
c001b407:	8d 04 36             	lea    eax,[esi+esi*1]
c001b40a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b40f:	83 c8 f0             	or     eax,0xfffffff0
c001b412:	ee                   	out    dx,al
c001b413:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b418:	89 e8                	mov    eax,ebp
c001b41a:	ee                   	out    dx,al
c001b41b:	89 f9                	mov    ecx,edi
c001b41d:	89 d8                	mov    eax,ebx
c001b41f:	0f b6 d9             	movzx  ebx,cl
c001b422:	83 c4 0c             	add    esp,0xc
c001b425:	c1 e0 08             	shl    eax,0x8
c001b428:	83 e3 fc             	and    ebx,0xfffffffc
c001b42b:	09 d8                	or     eax,ebx
c001b42d:	5b                   	pop    ebx
c001b42e:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b433:	5e                   	pop    esi
c001b434:	5f                   	pop    edi
c001b435:	5d                   	pop    ebp
c001b436:	c3                   	ret    
c001b437:	90                   	nop

c001b438 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b438:	57                   	push   edi
c001b439:	56                   	push   esi
c001b43a:	53                   	push   ebx
c001b43b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b43f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b443:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b447:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b44b:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b451:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b455:	83 ff 01             	cmp    edi,0x1
c001b458:	75 3f                	jne    c001b499 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b45a:	89 de                	mov    esi,ebx
c001b45c:	0f b6 c0             	movzx  eax,al
c001b45f:	c1 e0 10             	shl    eax,0x10
c001b462:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b468:	0f b6 c9             	movzx  ecx,cl
c001b46b:	09 f0                	or     eax,esi
c001b46d:	c1 e1 08             	shl    ecx,0x8
c001b470:	0f b6 d2             	movzx  edx,dl
c001b473:	c1 e2 0b             	shl    edx,0xb
c001b476:	09 c8                	or     eax,ecx
c001b478:	09 d0                	or     eax,edx
c001b47a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b47f:	0d 00 00 00 80       	or     eax,0x80000000
c001b484:	ef                   	out    dx,eax
c001b485:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b48a:	ed                   	in     eax,dx
c001b48b:	83 e3 02             	and    ebx,0x2
c001b48e:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b495:	d3 e8                	shr    eax,cl
c001b497:	eb 44                	jmp    c001b4dd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b499:	83 ff 02             	cmp    edi,0x2
c001b49c:	75 2d                	jne    c001b4cb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b49e:	83 ec 0c             	sub    esp,0xc
c001b4a1:	0f b6 fb             	movzx  edi,bl
c001b4a4:	57                   	push   edi
c001b4a5:	0f b6 c9             	movzx  ecx,cl
c001b4a8:	51                   	push   ecx
c001b4a9:	0f b6 d2             	movzx  edx,dl
c001b4ac:	52                   	push   edx
c001b4ad:	0f b6 c0             	movzx  eax,al
c001b4b0:	50                   	push   eax
c001b4b1:	56                   	push   esi
c001b4b2:	e8 0b ff ff ff       	call   c001b3c2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4b7:	89 c2                	mov    edx,eax
c001b4b9:	ed                   	in     eax,dx
c001b4ba:	83 e3 02             	and    ebx,0x2
c001b4bd:	83 c4 20             	add    esp,0x20
c001b4c0:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b4c7:	d3 e8                	shr    eax,cl
c001b4c9:	eb 12                	jmp    c001b4dd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b4cb:	83 ec 0c             	sub    esp,0xc
c001b4ce:	68 d7 33 02 c0       	push   0xc00233d7
c001b4d3:	e8 7f 61 ff ff       	call   c0011657 <KePanic(char const*)>
c001b4d8:	83 c4 10             	add    esp,0x10
c001b4db:	31 c0                	xor    eax,eax
c001b4dd:	5b                   	pop    ebx
c001b4de:	5e                   	pop    esi
c001b4df:	5f                   	pop    edi
c001b4e0:	c3                   	ret    
c001b4e1:	90                   	nop

c001b4e2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b4e2:	83 ec 18             	sub    esp,0x18
c001b4e5:	6a 00                	push   0x0
c001b4e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4ec:	50                   	push   eax
c001b4ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4f2:	50                   	push   eax
c001b4f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4f8:	50                   	push   eax
c001b4f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4fd:	e8 36 ff ff ff       	call   c001b438 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b502:	83 c4 2c             	add    esp,0x2c
c001b505:	c3                   	ret    

c001b506 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b506:	83 ec 18             	sub    esp,0x18
c001b509:	6a 0e                	push   0xe
c001b50b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b510:	50                   	push   eax
c001b511:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b516:	50                   	push   eax
c001b517:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b51c:	50                   	push   eax
c001b51d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b521:	e8 12 ff ff ff       	call   c001b438 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b526:	83 c4 2c             	add    esp,0x2c
c001b529:	0f b6 c0             	movzx  eax,al
c001b52c:	c3                   	ret    
c001b52d:	90                   	nop

c001b52e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b52e:	55                   	push   ebp
c001b52f:	57                   	push   edi
c001b530:	56                   	push   esi
c001b531:	53                   	push   ebx
c001b532:	83 ec 18             	sub    esp,0x18
c001b535:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b53a:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b53f:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b544:	6a 0a                	push   0xa
c001b546:	56                   	push   esi
c001b547:	55                   	push   ebp
c001b548:	57                   	push   edi
c001b549:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b54d:	e8 e6 fe ff ff       	call   c001b438 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b552:	83 c4 14             	add    esp,0x14
c001b555:	6a 0a                	push   0xa
c001b557:	56                   	push   esi
c001b558:	55                   	push   ebp
c001b559:	57                   	push   edi
c001b55a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b55e:	89 c3                	mov    ebx,eax
c001b560:	0f b6 db             	movzx  ebx,bl
c001b563:	e8 d0 fe ff ff       	call   c001b438 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b568:	83 c4 2c             	add    esp,0x2c
c001b56b:	25 00 ff 00 00       	and    eax,0xff00
c001b570:	09 d8                	or     eax,ebx
c001b572:	5b                   	pop    ebx
c001b573:	5e                   	pop    esi
c001b574:	5f                   	pop    edi
c001b575:	5d                   	pop    ebp
c001b576:	c3                   	ret    
c001b577:	90                   	nop

c001b578 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b578:	83 ec 18             	sub    esp,0x18
c001b57b:	6a 08                	push   0x8
c001b57d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b582:	50                   	push   eax
c001b583:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b588:	50                   	push   eax
c001b589:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b58e:	50                   	push   eax
c001b58f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b593:	e8 a0 fe ff ff       	call   c001b438 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b598:	83 c4 2c             	add    esp,0x2c
c001b59b:	0f b6 c4             	movzx  eax,ah
c001b59e:	c3                   	ret    
c001b59f:	90                   	nop

c001b5a0 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b5a0:	83 ec 18             	sub    esp,0x18
c001b5a3:	6a 08                	push   0x8
c001b5a5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5aa:	50                   	push   eax
c001b5ab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5b0:	50                   	push   eax
c001b5b1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5b6:	50                   	push   eax
c001b5b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5bb:	e8 78 fe ff ff       	call   c001b438 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5c0:	83 c4 2c             	add    esp,0x2c
c001b5c3:	c3                   	ret    

c001b5c4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b5c4:	83 ec 18             	sub    esp,0x18
c001b5c7:	6a 3c                	push   0x3c
c001b5c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5ce:	50                   	push   eax
c001b5cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5d4:	50                   	push   eax
c001b5d5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5da:	50                   	push   eax
c001b5db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5df:	e8 54 fe ff ff       	call   c001b438 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5e4:	83 c4 2c             	add    esp,0x2c
c001b5e7:	c3                   	ret    

c001b5e8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b5e8:	83 ec 18             	sub    esp,0x18
c001b5eb:	6a 18                	push   0x18
c001b5ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5f2:	50                   	push   eax
c001b5f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5f8:	50                   	push   eax
c001b5f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b5fe:	50                   	push   eax
c001b5ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b603:	e8 30 fe ff ff       	call   c001b438 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b608:	83 c4 2c             	add    esp,0x2c
c001b60b:	0f b6 c4             	movzx  eax,ah
c001b60e:	c3                   	ret    
c001b60f:	90                   	nop

c001b610 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b610:	55                   	push   ebp
c001b611:	57                   	push   edi
c001b612:	56                   	push   esi
c001b613:	53                   	push   ebx
c001b614:	83 ec 28             	sub    esp,0x28
c001b617:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b61b:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b620:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b625:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b62a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b631:	8d 43 12             	lea    eax,[ebx+0x12]
c001b634:	83 c3 10             	add    ebx,0x10
c001b637:	0f b6 c0             	movzx  eax,al
c001b63a:	0f b6 db             	movzx  ebx,bl
c001b63d:	50                   	push   eax
c001b63e:	51                   	push   ecx
c001b63f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b643:	57                   	push   edi
c001b644:	55                   	push   ebp
c001b645:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b649:	e8 ea fd ff ff       	call   c001b438 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b64e:	83 c4 14             	add    esp,0x14
c001b651:	53                   	push   ebx
c001b652:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b656:	51                   	push   ecx
c001b657:	89 c6                	mov    esi,eax
c001b659:	57                   	push   edi
c001b65a:	55                   	push   ebp
c001b65b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b65f:	c1 e6 10             	shl    esi,0x10
c001b662:	e8 d1 fd ff ff       	call   c001b438 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b667:	83 c4 3c             	add    esp,0x3c
c001b66a:	5b                   	pop    ebx
c001b66b:	0f b7 c0             	movzx  eax,ax
c001b66e:	09 f0                	or     eax,esi
c001b670:	5e                   	pop    esi
c001b671:	5f                   	pop    edi
c001b672:	5d                   	pop    ebp
c001b673:	c3                   	ret    

c001b674 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b674:	55                   	push   ebp
c001b675:	57                   	push   edi
c001b676:	56                   	push   esi
c001b677:	53                   	push   ebx
c001b678:	83 ec 0c             	sub    esp,0xc
c001b67b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b67f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b683:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b687:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001b68b:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001b691:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b695:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b699:	83 f9 01             	cmp    ecx,0x1
c001b69c:	75 5d                	jne    c001b6fb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001b69e:	0f b6 c8             	movzx  ecx,al
c001b6a1:	89 f0                	mov    eax,esi
c001b6a3:	25 fc 00 00 00       	and    eax,0xfc
c001b6a8:	0f b6 d2             	movzx  edx,dl
c001b6ab:	c1 e1 10             	shl    ecx,0x10
c001b6ae:	c1 e2 0b             	shl    edx,0xb
c001b6b1:	09 c1                	or     ecx,eax
c001b6b3:	89 f8                	mov    eax,edi
c001b6b5:	0f b6 f8             	movzx  edi,al
c001b6b8:	c1 e7 08             	shl    edi,0x8
c001b6bb:	09 f9                	or     ecx,edi
c001b6bd:	09 d1                	or     ecx,edx
c001b6bf:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b6c4:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b6ca:	89 c8                	mov    eax,ecx
c001b6cc:	ef                   	out    dx,eax
c001b6cd:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b6d2:	ed                   	in     eax,dx
c001b6d3:	83 e6 02             	and    esi,0x2
c001b6d6:	0f b7 db             	movzx  ebx,bx
c001b6d9:	74 0a                	je     c001b6e5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001b6db:	c1 e3 10             	shl    ebx,0x10
c001b6de:	0f b7 d0             	movzx  edx,ax
c001b6e1:	09 d3                	or     ebx,edx
c001b6e3:	eb 05                	jmp    c001b6ea <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001b6e5:	66 31 c0             	xor    ax,ax
c001b6e8:	09 c3                	or     ebx,eax
c001b6ea:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b6ef:	89 c8                	mov    eax,ecx
c001b6f1:	ef                   	out    dx,eax
c001b6f2:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b6f7:	89 d8                	mov    eax,ebx
c001b6f9:	eb 41                	jmp    c001b73c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b6fb:	83 f9 02             	cmp    ecx,0x2
c001b6fe:	75 45                	jne    c001b745 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001b700:	89 f1                	mov    ecx,esi
c001b702:	83 ec 0c             	sub    esp,0xc
c001b705:	0f b6 f1             	movzx  esi,cl
c001b708:	89 f9                	mov    ecx,edi
c001b70a:	56                   	push   esi
c001b70b:	0f b6 f9             	movzx  edi,cl
c001b70e:	57                   	push   edi
c001b70f:	0f b6 d2             	movzx  edx,dl
c001b712:	52                   	push   edx
c001b713:	0f b6 c0             	movzx  eax,al
c001b716:	50                   	push   eax
c001b717:	55                   	push   ebp
c001b718:	e8 a5 fc ff ff       	call   c001b3c2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b71d:	89 c2                	mov    edx,eax
c001b71f:	ed                   	in     eax,dx
c001b720:	83 c4 20             	add    esp,0x20
c001b723:	f6 c2 02             	test   dl,0x2
c001b726:	0f b7 db             	movzx  ebx,bx
c001b729:	74 0c                	je     c001b737 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001b72b:	0f b7 c8             	movzx  ecx,ax
c001b72e:	89 d8                	mov    eax,ebx
c001b730:	c1 e0 10             	shl    eax,0x10
c001b733:	09 c8                	or     eax,ecx
c001b735:	eb 05                	jmp    c001b73c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b737:	66 31 c0             	xor    ax,ax
c001b73a:	09 d8                	or     eax,ebx
c001b73c:	ef                   	out    dx,eax
c001b73d:	83 c4 0c             	add    esp,0xc
c001b740:	5b                   	pop    ebx
c001b741:	5e                   	pop    esi
c001b742:	5f                   	pop    edi
c001b743:	5d                   	pop    ebp
c001b744:	c3                   	ret    
c001b745:	c7 44 24 20 d7 33 02 c0 	mov    DWORD PTR [esp+0x20],0xc00233d7
c001b74d:	83 c4 0c             	add    esp,0xc
c001b750:	5b                   	pop    ebx
c001b751:	5e                   	pop    esi
c001b752:	5f                   	pop    edi
c001b753:	5d                   	pop    ebp
c001b754:	e9 fe 5e ff ff       	jmp    c0011657 <KePanic(char const*)>
c001b759:	90                   	nop

c001b75a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b75a:	55                   	push   ebp
c001b75b:	57                   	push   edi
c001b75c:	56                   	push   esi
c001b75d:	53                   	push   ebx
c001b75e:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b764:	80 3d ac d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ac,0x0
c001b76b:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001b772:	0f 85 bd 00 00 00    	jne    c001b835 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b778:	83 ec 0c             	sub    esp,0xc
c001b77b:	68 14 01 00 00       	push   0x114
c001b780:	e8 7e c3 fe ff       	call   c0007b03 <malloc>
c001b785:	83 c4 0c             	add    esp,0xc
c001b788:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001b78e:	68 dd 33 02 c0       	push   0xc00233dd
c001b793:	50                   	push   eax
c001b794:	89 c3                	mov    ebx,eax
c001b796:	e8 b7 03 ff ff       	call   c000bb52 <File::File(char const*, Process*)>
c001b79b:	83 c4 10             	add    esp,0x10
c001b79e:	85 db                	test   ebx,ebx
c001b7a0:	0f 84 6b 02 00 00    	je     c001ba11 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b7a6:	57                   	push   edi
c001b7a7:	57                   	push   edi
c001b7a8:	6a 01                	push   0x1
c001b7aa:	53                   	push   ebx
c001b7ab:	e8 c0 03 ff ff       	call   c000bb70 <File::open(FileOpenMode)>
c001b7b0:	83 c4 10             	add    esp,0x10
c001b7b3:	85 c0                	test   eax,eax
c001b7b5:	0f 85 56 02 00 00    	jne    c001ba11 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b7bb:	52                   	push   edx
c001b7bc:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b7c0:	50                   	push   eax
c001b7c1:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b7c5:	50                   	push   eax
c001b7c6:	53                   	push   ebx
c001b7c7:	e8 a6 06 ff ff       	call   c000be72 <File::stat(unsigned long long*, bool*)>
c001b7cc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b7d0:	40                   	inc    eax
c001b7d1:	89 04 24             	mov    DWORD PTR [esp],eax
c001b7d4:	e8 2a c3 fe ff       	call   c0007b03 <malloc>
c001b7d9:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b7dd:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b7e1:	59                   	pop    ecx
c001b7e2:	a3 a8 d0 02 c0       	mov    ds:0xc002d0a8,eax
c001b7e7:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7e9:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b7ed:	51                   	push   ecx
c001b7ee:	50                   	push   eax
c001b7ef:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b7f3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b7f7:	53                   	push   ebx
c001b7f8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b7fb:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b7ff:	83 c4 20             	add    esp,0x20
c001b802:	89 c8                	mov    eax,ecx
c001b804:	99                   	cdq    
c001b805:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b809:	0f 85 02 02 00 00    	jne    c001ba11 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b80f:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b813:	0f 85 f8 01 00 00    	jne    c001ba11 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b819:	83 ec 0c             	sub    esp,0xc
c001b81c:	53                   	push   ebx
c001b81d:	e8 ac 03 ff ff       	call   c000bbce <File::close()>
c001b822:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b826:	83 c4 10             	add    esp,0x10
c001b829:	c6 05 ac d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0ac,0x1
c001b830:	a3 a4 d0 02 c0       	mov    ds:0xc002d0a4,eax
c001b835:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b83d:	31 c9                	xor    ecx,ecx
c001b83f:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001b846:	8b 2d a4 d0 02 c0    	mov    ebp,DWORD PTR ds:0xc002d0a4
c001b84c:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b853:	8b 15 a8 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0a8
c001b859:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b85e:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b866:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b86b:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b873:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b877:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b87f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b883:	39 cd                	cmp    ebp,ecx
c001b885:	0f 8e 86 01 00 00    	jle    c001ba11 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b88b:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001b88e:	d4 40                	aam    0x40
c001b890:	d5 39                	aad    0x39
c001b892:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b896:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001b89a:	d4 40                	aam    0x40
c001b89c:	d5 39                	aad    0x39
c001b89e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b8a2:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001b8a6:	d4 40                	aam    0x40
c001b8a8:	d5 39                	aad    0x39
c001b8aa:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b8ae:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001b8b2:	d4 40                	aam    0x40
c001b8b4:	d5 39                	aad    0x39
c001b8b6:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b8ba:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001b8be:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b8c2:	3c 56                	cmp    al,0x56
c001b8c4:	74 47                	je     c001b90d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001b8c6:	d4 40                	aam    0x40
c001b8c8:	d5 39                	aad    0x39
c001b8ca:	8d 58 d0             	lea    ebx,[eax-0x30]
c001b8cd:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001b8d1:	0f b6 db             	movzx  ebx,bl
c001b8d4:	c1 e3 04             	shl    ebx,0x4
c001b8d7:	d4 40                	aam    0x40
c001b8d9:	d5 39                	aad    0x39
c001b8db:	83 e8 30             	sub    eax,0x30
c001b8de:	0f b6 c0             	movzx  eax,al
c001b8e1:	09 c3                	or     ebx,eax
c001b8e3:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001b8e7:	c1 e3 04             	shl    ebx,0x4
c001b8ea:	d4 40                	aam    0x40
c001b8ec:	d5 39                	aad    0x39
c001b8ee:	83 e8 30             	sub    eax,0x30
c001b8f1:	0f b6 c0             	movzx  eax,al
c001b8f4:	09 c3                	or     ebx,eax
c001b8f6:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001b8fa:	c1 e3 04             	shl    ebx,0x4
c001b8fd:	d4 40                	aam    0x40
c001b8ff:	d5 39                	aad    0x39
c001b901:	83 e8 30             	sub    eax,0x30
c001b904:	0f b6 c0             	movzx  eax,al
c001b907:	09 c3                	or     ebx,eax
c001b909:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b90d:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001b911:	80 fb 58             	cmp    bl,0x58
c001b914:	74 49                	je     c001b95f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001b916:	88 d8                	mov    al,bl
c001b918:	d4 40                	aam    0x40
c001b91a:	d5 39                	aad    0x39
c001b91c:	83 e8 30             	sub    eax,0x30
c001b91f:	0f b6 f8             	movzx  edi,al
c001b922:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001b926:	c1 e7 04             	shl    edi,0x4
c001b929:	d4 40                	aam    0x40
c001b92b:	d5 39                	aad    0x39
c001b92d:	83 e8 30             	sub    eax,0x30
c001b930:	0f b6 c0             	movzx  eax,al
c001b933:	09 c7                	or     edi,eax
c001b935:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001b939:	c1 e7 04             	shl    edi,0x4
c001b93c:	d4 40                	aam    0x40
c001b93e:	d5 39                	aad    0x39
c001b940:	83 e8 30             	sub    eax,0x30
c001b943:	0f b6 c0             	movzx  eax,al
c001b946:	09 c7                	or     edi,eax
c001b948:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001b94c:	c1 e7 04             	shl    edi,0x4
c001b94f:	d4 40                	aam    0x40
c001b951:	d5 39                	aad    0x39
c001b953:	83 e8 30             	sub    eax,0x30
c001b956:	0f b6 c0             	movzx  eax,al
c001b959:	09 c7                	or     edi,eax
c001b95b:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001b95f:	8d 41 10             	lea    eax,[ecx+0x10]
c001b962:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b966:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001b96a:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b96e:	83 f9 0a             	cmp    ecx,0xa
c001b971:	74 07                	je     c001b97a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001b973:	47                   	inc    edi
c001b974:	39 c5                	cmp    ebp,eax
c001b976:	75 16                	jne    c001b98e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001b978:	89 e8                	mov    eax,ebp
c001b97a:	83 f9 0a             	cmp    ecx,0xa
c001b97d:	0f 94 c1             	sete   cl
c001b980:	0f b6 c9             	movzx  ecx,cl
c001b983:	01 c1                	add    ecx,eax
c001b985:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b98a:	75 0f                	jne    c001b99b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001b98c:	eb 1c                	jmp    c001b9aa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001b98e:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b991:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001b995:	40                   	inc    eax
c001b996:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001b999:	eb cb                	jmp    c001b966 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001b99b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b99f:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b9a4:	0f 85 d9 fe ff ff    	jne    c001b883 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b9aa:	80 fb 58             	cmp    bl,0x58
c001b9ad:	74 10                	je     c001b9bf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001b9af:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b9b4:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001b9b9:	0f 85 c4 fe ff ff    	jne    c001b883 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b9bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9c3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b9c7:	83 e8 30             	sub    eax,0x30
c001b9ca:	c1 e0 04             	shl    eax,0x4
c001b9cd:	83 eb 30             	sub    ebx,0x30
c001b9d0:	09 d8                	or     eax,ebx
c001b9d2:	0f b6 c0             	movzx  eax,al
c001b9d5:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b9d9:	0f 85 a4 fe ff ff    	jne    c001b883 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b9df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9e3:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b9e7:	83 e8 30             	sub    eax,0x30
c001b9ea:	c1 e0 04             	shl    eax,0x4
c001b9ed:	83 eb 30             	sub    ebx,0x30
c001b9f0:	09 d8                	or     eax,ebx
c001b9f2:	0f b6 c0             	movzx  eax,al
c001b9f5:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b9f9:	0f 85 84 fe ff ff    	jne    c001b883 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b9ff:	50                   	push   eax
c001ba00:	50                   	push   eax
c001ba01:	8d 44 24 48          	lea    eax,[esp+0x48]
c001ba05:	50                   	push   eax
c001ba06:	56                   	push   esi
c001ba07:	e8 44 4c fe ff       	call   c0000650 <strcpy>
c001ba0c:	83 c4 10             	add    esp,0x10
c001ba0f:	eb 05                	jmp    c001ba16 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001ba11:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ba14:	31 f6                	xor    esi,esi
c001ba16:	81 c4 4c 01 00 00    	add    esp,0x14c
c001ba1c:	89 f0                	mov    eax,esi
c001ba1e:	5b                   	pop    ebx
c001ba1f:	5e                   	pop    esi
c001ba20:	5f                   	pop    edi
c001ba21:	5d                   	pop    ebp
c001ba22:	c3                   	ret    
c001ba23:	90                   	nop

c001ba24 <PCI::checkBus(unsigned char)>:
c001ba24:	56                   	push   esi
c001ba25:	53                   	push   ebx
c001ba26:	31 db                	xor    ebx,ebx
c001ba28:	51                   	push   ecx
c001ba29:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ba2e:	52                   	push   edx
c001ba2f:	53                   	push   ebx
c001ba30:	43                   	inc    ebx
c001ba31:	56                   	push   esi
c001ba32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba36:	e8 0f 03 00 00       	call   c001bd4a <PCI::checkDevice(unsigned char, unsigned char)>
c001ba3b:	83 c4 10             	add    esp,0x10
c001ba3e:	83 fb 20             	cmp    ebx,0x20
c001ba41:	75 eb                	jne    c001ba2e <PCI::checkBus(unsigned char)+0xa>
c001ba43:	58                   	pop    eax
c001ba44:	5b                   	pop    ebx
c001ba45:	5e                   	pop    esi
c001ba46:	c3                   	ret    
c001ba47:	90                   	nop

c001ba48 <PCI::foundDevice(PCIDeviceInfo)>:
c001ba48:	55                   	push   ebp
c001ba49:	57                   	push   edi
c001ba4a:	56                   	push   esi
c001ba4b:	53                   	push   ebx
c001ba4c:	83 ec 1c             	sub    esp,0x1c
c001ba4f:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001ba54:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ba58:	3d ff ff 00 00       	cmp    eax,0xffff
c001ba5d:	0f 84 63 01 00 00    	je     c001bbc6 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001ba63:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001ba68:	66 3d 06 04          	cmp    ax,0x406
c001ba6c:	75 2c                	jne    c001ba9a <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001ba6e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001ba73:	50                   	push   eax
c001ba74:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001ba79:	50                   	push   eax
c001ba7a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001ba7f:	50                   	push   eax
c001ba80:	53                   	push   ebx
c001ba81:	e8 62 fb ff ff       	call   c001b5e8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001ba86:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001ba8a:	0f b6 c0             	movzx  eax,al
c001ba8d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ba91:	83 c4 2c             	add    esp,0x2c
c001ba94:	5b                   	pop    ebx
c001ba95:	5e                   	pop    esi
c001ba96:	5f                   	pop    edi
c001ba97:	5d                   	pop    ebp
c001ba98:	eb 8a                	jmp    c001ba24 <PCI::checkBus(unsigned char)>
c001ba9a:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001ba9f:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001baa5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001baa9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001baad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001bab1:	85 d2                	test   edx,edx
c001bab3:	74 34                	je     c001bae9 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001bab5:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001bab8:	85 c9                	test   ecx,ecx
c001baba:	74 29                	je     c001bae5 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001babc:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001bac2:	31 f5                	xor    ebp,esi
c001bac4:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001baca:	75 19                	jne    c001bae5 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001bacc:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001bad2:	75 11                	jne    c001bae5 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001bad4:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001badb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001badf:	0f 84 e1 00 00 00    	je     c001bbc6 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001bae5:	8b 12                	mov    edx,DWORD PTR [edx]
c001bae7:	eb c8                	jmp    c001bab1 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001bae9:	3d 01 06 00 00       	cmp    eax,0x601
c001baee:	75 19                	jne    c001bb09 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001baf0:	83 ec 0c             	sub    esp,0xc
c001baf3:	68 64 01 00 00       	push   0x164
c001baf8:	e8 06 c0 fe ff       	call   c0007b03 <malloc>
c001bafd:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb00:	89 c5                	mov    ebp,eax
c001bb02:	e8 ab 0e 00 00       	call   c001c9b2 <SATABus::SATABus()>
c001bb07:	eb 1e                	jmp    c001bb27 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001bb09:	3d 01 01 00 00       	cmp    eax,0x101
c001bb0e:	75 62                	jne    c001bb72 <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001bb10:	83 ec 0c             	sub    esp,0xc
c001bb13:	68 70 02 00 00       	push   0x270
c001bb18:	e8 e6 bf fe ff       	call   c0007b03 <malloc>
c001bb1d:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb20:	89 c5                	mov    ebp,eax
c001bb22:	e8 f3 02 00 00       	call   c001be1a <IDE::IDE()>
c001bb27:	58                   	pop    eax
c001bb28:	5a                   	pop    edx
c001bb29:	55                   	push   ebp
c001bb2a:	53                   	push   ebx
c001bb2b:	e8 a0 0e ff ff       	call   c000c9d0 <Device::addChild(Device*)>
c001bb30:	83 ec 1c             	sub    esp,0x1c
c001bb33:	b9 09 00 00 00       	mov    ecx,0x9
c001bb38:	fc                   	cld    
c001bb39:	8d 74 24 60          	lea    esi,[esp+0x60]
c001bb3d:	89 e7                	mov    edi,esp
c001bb3f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bb41:	55                   	push   ebp
c001bb42:	e8 cf 0d ff ff       	call   c000c916 <Device::preOpenPCI(PCIDeviceInfo)>
c001bb47:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001bb4a:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001bb4e:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001bb56:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001bb5e:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001bb66:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001bb69:	83 c4 4c             	add    esp,0x4c
c001bb6c:	5b                   	pop    ebx
c001bb6d:	5e                   	pop    esi
c001bb6e:	5f                   	pop    edi
c001bb6f:	5d                   	pop    ebp
c001bb70:	ff e0                	jmp    eax
c001bb72:	83 ec 0c             	sub    esp,0xc
c001bb75:	68 58 01 00 00       	push   0x158
c001bb7a:	e8 84 bf fe ff       	call   c0007b03 <malloc>
c001bb7f:	5a                   	pop    edx
c001bb80:	59                   	pop    ecx
c001bb81:	68 f6 33 02 c0       	push   0xc00233f6
c001bb86:	50                   	push   eax
c001bb87:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bb8b:	e8 18 11 ff ff       	call   c000cca8 <DriverlessDevice::DriverlessDevice(char const*)>
c001bb90:	5e                   	pop    esi
c001bb91:	5f                   	pop    edi
c001bb92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bb96:	50                   	push   eax
c001bb97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bb9b:	53                   	push   ebx
c001bb9c:	e8 2f 0e ff ff       	call   c000c9d0 <Device::addChild(Device*)>
c001bba1:	83 c4 10             	add    esp,0x10
c001bba4:	b9 09 00 00 00       	mov    ecx,0x9
c001bba9:	fc                   	cld    
c001bbaa:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001bbae:	89 fe                	mov    esi,edi
c001bbb0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bbb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bbba:	83 c4 1c             	add    esp,0x1c
c001bbbd:	5b                   	pop    ebx
c001bbbe:	5e                   	pop    esi
c001bbbf:	5f                   	pop    edi
c001bbc0:	5d                   	pop    ebp
c001bbc1:	e9 50 0d ff ff       	jmp    c000c916 <Device::preOpenPCI(PCIDeviceInfo)>
c001bbc6:	83 c4 1c             	add    esp,0x1c
c001bbc9:	5b                   	pop    ebx
c001bbca:	5e                   	pop    esi
c001bbcb:	5f                   	pop    edi
c001bbcc:	5d                   	pop    ebp
c001bbcd:	c3                   	ret    

c001bbce <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001bbce:	55                   	push   ebp
c001bbcf:	57                   	push   edi
c001bbd0:	56                   	push   esi
c001bbd1:	53                   	push   ebx
c001bbd2:	83 ec 68             	sub    esp,0x68
c001bbd5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001bbdc:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001bbe0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bbe4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001bbeb:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001bbf0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bbf4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001bbfb:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001bc00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bc04:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001bc09:	6a 0c                	push   0xc
c001bc0b:	57                   	push   edi
c001bc0c:	53                   	push   ebx
c001bc0d:	56                   	push   esi
c001bc0e:	55                   	push   ebp
c001bc0f:	e8 24 f8 ff ff       	call   c001b438 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc14:	83 c4 20             	add    esp,0x20
c001bc17:	57                   	push   edi
c001bc18:	53                   	push   ebx
c001bc19:	56                   	push   esi
c001bc1a:	55                   	push   ebp
c001bc1b:	e8 0e f9 ff ff       	call   c001b52e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001bc20:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001bc25:	57                   	push   edi
c001bc26:	53                   	push   ebx
c001bc27:	56                   	push   esi
c001bc28:	55                   	push   ebp
c001bc29:	e8 96 f9 ff ff       	call   c001b5c4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001bc2e:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001bc32:	83 c4 14             	add    esp,0x14
c001bc35:	6a 3c                	push   0x3c
c001bc37:	57                   	push   edi
c001bc38:	53                   	push   ebx
c001bc39:	56                   	push   esi
c001bc3a:	55                   	push   ebp
c001bc3b:	e8 f8 f7 ff ff       	call   c001b438 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc40:	0f b6 c4             	movzx  eax,ah
c001bc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bc47:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001bc4b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001bc4f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001bc54:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001bc5a:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001bc60:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bc64:	83 c4 20             	add    esp,0x20
c001bc67:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001bc6c:	74 30                	je     c001bc9e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bc6e:	31 c0                	xor    eax,eax
c001bc70:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001bc74:	7e 28                	jle    c001bc9e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bc76:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001bc7e:	39 cb                	cmp    ebx,ecx
c001bc80:	75 19                	jne    c001bc9b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bc82:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001bc8a:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001bc8e:	75 0b                	jne    c001bc9b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bc90:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001bc97:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bc9b:	40                   	inc    eax
c001bc9c:	eb d2                	jmp    c001bc70 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001bc9e:	31 d2                	xor    edx,edx
c001bca0:	83 ec 0c             	sub    esp,0xc
c001bca3:	57                   	push   edi
c001bca4:	53                   	push   ebx
c001bca5:	56                   	push   esi
c001bca6:	52                   	push   edx
c001bca7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001bcab:	55                   	push   ebp
c001bcac:	e8 5f f9 ff ff       	call   c001b610 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bcb1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bcb5:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001bcb9:	42                   	inc    edx
c001bcba:	83 c4 20             	add    esp,0x20
c001bcbd:	83 fa 06             	cmp    edx,0x6
c001bcc0:	75 de                	jne    c001bca0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001bcc2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bcc6:	83 ec 0c             	sub    esp,0xc
c001bcc9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bccd:	c1 e2 08             	shl    edx,0x8
c001bcd0:	0f b6 c4             	movzx  eax,ah
c001bcd3:	09 d0                	or     eax,edx
c001bcd5:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001bcda:	6a 02                	push   0x2
c001bcdc:	57                   	push   edi
c001bcdd:	53                   	push   ebx
c001bcde:	56                   	push   esi
c001bcdf:	55                   	push   ebp
c001bce0:	e8 53 f7 ff ff       	call   c001b438 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bce5:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001bcea:	83 c4 20             	add    esp,0x20
c001bced:	57                   	push   edi
c001bcee:	53                   	push   ebx
c001bcef:	56                   	push   esi
c001bcf0:	55                   	push   ebp
c001bcf1:	e8 82 f8 ff ff       	call   c001b578 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001bcf6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bcfa:	57                   	push   edi
c001bcfb:	53                   	push   ebx
c001bcfc:	56                   	push   esi
c001bcfd:	55                   	push   ebp
c001bcfe:	e8 df f7 ff ff       	call   c001b4e2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd03:	b9 09 00 00 00       	mov    ecx,0x9
c001bd08:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001bd0d:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bd11:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001bd15:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001bd19:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001bd1d:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001bd21:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001bd25:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001bd29:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001bd2d:	83 ec 0c             	sub    esp,0xc
c001bd30:	fc                   	cld    
c001bd31:	8d 74 24 58          	lea    esi,[esp+0x58]
c001bd35:	89 e7                	mov    edi,esp
c001bd37:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bd39:	55                   	push   ebp
c001bd3a:	e8 09 fd ff ff       	call   c001ba48 <PCI::foundDevice(PCIDeviceInfo)>
c001bd3f:	81 c4 8c 00 00 00    	add    esp,0x8c
c001bd45:	5b                   	pop    ebx
c001bd46:	5e                   	pop    esi
c001bd47:	5f                   	pop    edi
c001bd48:	5d                   	pop    ebp
c001bd49:	c3                   	ret    

c001bd4a <PCI::checkDevice(unsigned char, unsigned char)>:
c001bd4a:	55                   	push   ebp
c001bd4b:	57                   	push   edi
c001bd4c:	56                   	push   esi
c001bd4d:	53                   	push   ebx
c001bd4e:	83 ec 0c             	sub    esp,0xc
c001bd51:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bd56:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bd5b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bd5f:	6a 00                	push   0x0
c001bd61:	56                   	push   esi
c001bd62:	57                   	push   edi
c001bd63:	55                   	push   ebp
c001bd64:	e8 79 f7 ff ff       	call   c001b4e2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd69:	6a 00                	push   0x0
c001bd6b:	56                   	push   esi
c001bd6c:	57                   	push   edi
c001bd6d:	55                   	push   ebp
c001bd6e:	e8 5b fe ff ff       	call   c001bbce <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bd73:	83 c4 20             	add    esp,0x20
c001bd76:	6a 00                	push   0x0
c001bd78:	56                   	push   esi
c001bd79:	57                   	push   edi
c001bd7a:	55                   	push   ebp
c001bd7b:	e8 86 f7 ff ff       	call   c001b506 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bd80:	83 c4 10             	add    esp,0x10
c001bd83:	a8 80                	test   al,0x80
c001bd85:	74 2d                	je     c001bdb4 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001bd87:	bb 01 00 00 00       	mov    ebx,0x1
c001bd8c:	53                   	push   ebx
c001bd8d:	56                   	push   esi
c001bd8e:	57                   	push   edi
c001bd8f:	55                   	push   ebp
c001bd90:	e8 4d f7 ff ff       	call   c001b4e2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bd95:	83 c4 10             	add    esp,0x10
c001bd98:	0f b7 c0             	movzx  eax,ax
c001bd9b:	3d ff ff 00 00       	cmp    eax,0xffff
c001bda0:	74 0c                	je     c001bdae <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bda2:	53                   	push   ebx
c001bda3:	56                   	push   esi
c001bda4:	57                   	push   edi
c001bda5:	55                   	push   ebp
c001bda6:	e8 23 fe ff ff       	call   c001bbce <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bdab:	83 c4 10             	add    esp,0x10
c001bdae:	43                   	inc    ebx
c001bdaf:	83 fb 08             	cmp    ebx,0x8
c001bdb2:	75 d8                	jne    c001bd8c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bdb4:	83 c4 0c             	add    esp,0xc
c001bdb7:	5b                   	pop    ebx
c001bdb8:	5e                   	pop    esi
c001bdb9:	5f                   	pop    edi
c001bdba:	5d                   	pop    ebp
c001bdbb:	c3                   	ret    

c001bdbc <PCI::detect()>:
c001bdbc:	56                   	push   esi
c001bdbd:	53                   	push   ebx
c001bdbe:	53                   	push   ebx
c001bdbf:	31 db                	xor    ebx,ebx
c001bdc1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bdc5:	6a 00                	push   0x0
c001bdc7:	6a 00                	push   0x0
c001bdc9:	6a 00                	push   0x0
c001bdcb:	56                   	push   esi
c001bdcc:	e8 35 f7 ff ff       	call   c001b506 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bdd1:	83 c4 10             	add    esp,0x10
c001bdd4:	a8 80                	test   al,0x80
c001bdd6:	75 21                	jne    c001bdf9 <PCI::detect()+0x3d>
c001bdd8:	51                   	push   ecx
c001bdd9:	51                   	push   ecx
c001bdda:	6a 00                	push   0x0
c001bddc:	56                   	push   esi
c001bddd:	e8 42 fc ff ff       	call   c001ba24 <PCI::checkBus(unsigned char)>
c001bde2:	83 c4 10             	add    esp,0x10
c001bde5:	eb 2a                	jmp    c001be11 <PCI::detect()+0x55>
c001bde7:	52                   	push   edx
c001bde8:	52                   	push   edx
c001bde9:	53                   	push   ebx
c001bdea:	43                   	inc    ebx
c001bdeb:	56                   	push   esi
c001bdec:	e8 33 fc ff ff       	call   c001ba24 <PCI::checkBus(unsigned char)>
c001bdf1:	83 c4 10             	add    esp,0x10
c001bdf4:	83 fb 08             	cmp    ebx,0x8
c001bdf7:	74 18                	je     c001be11 <PCI::detect()+0x55>
c001bdf9:	53                   	push   ebx
c001bdfa:	6a 00                	push   0x0
c001bdfc:	6a 00                	push   0x0
c001bdfe:	56                   	push   esi
c001bdff:	e8 de f6 ff ff       	call   c001b4e2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001be04:	83 c4 10             	add    esp,0x10
c001be07:	0f b7 c0             	movzx  eax,ax
c001be0a:	3d ff ff 00 00       	cmp    eax,0xffff
c001be0f:	74 d6                	je     c001bde7 <PCI::detect()+0x2b>
c001be11:	58                   	pop    eax
c001be12:	5b                   	pop    ebx
c001be13:	5e                   	pop    esi
c001be14:	c3                   	ret    
c001be15:	90                   	nop

c001be16 <IDE::close(int, int, void*)>:
c001be16:	83 c8 ff             	or     eax,0xffffffff
c001be19:	c3                   	ret    

c001be1a <IDE::IDE()>:
c001be1a:	83 ec 0c             	sub    esp,0xc
c001be1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be21:	83 ec 08             	sub    esp,0x8
c001be24:	68 3c 34 02 c0       	push   0xc002343c
c001be29:	50                   	push   eax
c001be2a:	e8 1d 0f ff ff       	call   c000cd4c <HardDiskController::HardDiskController(char const*)>
c001be2f:	83 c4 10             	add    esp,0x10
c001be32:	ba cc 34 02 c0       	mov    edx,0xc00234cc
c001be37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be3b:	89 10                	mov    DWORD PTR [eax],edx
c001be3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be41:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001be48:	90                   	nop
c001be49:	83 c4 0c             	add    esp,0xc
c001be4c:	c3                   	ret    
c001be4d:	90                   	nop

c001be4e <IDE::prepareInterrupt(unsigned char)>:
c001be4e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001be57:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001be5f:	c3                   	ret    

c001be60 <selectDrive(unsigned char, unsigned char)>:
c001be60:	c3                   	ret    
c001be61:	90                   	nop

c001be62 <IDE::getBase(unsigned char)>:
c001be62:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001be67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be6b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001be73:	c3                   	ret    

c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001be74:	55                   	push   ebp
c001be75:	57                   	push   edi
c001be76:	56                   	push   esi
c001be77:	53                   	push   ebx
c001be78:	83 ec 1c             	sub    esp,0x1c
c001be7b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001be7f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001be83:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001be87:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001be8b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001be8e:	80 f9 03             	cmp    cl,0x3
c001be91:	77 4f                	ja     c001bee2 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001be93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be97:	0f b6 f2             	movzx  esi,dl
c001be9a:	0f b6 db             	movzx  ebx,bl
c001be9d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bea0:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001bea5:	80 ca 80             	or     dl,0x80
c001bea8:	52                   	push   edx
c001bea9:	6a 0c                	push   0xc
c001beab:	56                   	push   esi
c001beac:	57                   	push   edi
c001bead:	e8 c2 ff ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001beb2:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001beb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bebb:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bebf:	ee                   	out    dx,al
c001bec0:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001bec5:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001bec9:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001becd:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bed5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bed9:	83 c4 2c             	add    esp,0x2c
c001bedc:	5b                   	pop    ebx
c001bedd:	5e                   	pop    esi
c001bede:	5f                   	pop    edi
c001bedf:	5d                   	pop    ebp
c001bee0:	eb 92                	jmp    c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bee2:	0f b6 cb             	movzx  ecx,bl
c001bee5:	83 f9 07             	cmp    ecx,0x7
c001bee8:	77 12                	ja     c001befc <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001beea:	0f b6 d2             	movzx  edx,dl
c001beed:	0f b6 db             	movzx  ebx,bl
c001bef0:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001bef8:	01 da                	add    edx,ebx
c001befa:	eb 2f                	jmp    c001bf2b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001befc:	83 f9 0d             	cmp    ecx,0xd
c001beff:	77 13                	ja     c001bf14 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001bf01:	0f b6 d2             	movzx  edx,dl
c001bf04:	0f b6 db             	movzx  ebx,bl
c001bf07:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001bf0e:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bf12:	eb 17                	jmp    c001bf2b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bf14:	83 f9 15             	cmp    ecx,0x15
c001bf17:	77 13                	ja     c001bf2c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001bf19:	0f b6 d2             	movzx  edx,dl
c001bf1c:	0f b6 db             	movzx  ebx,bl
c001bf1f:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001bf27:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bf2b:	ee                   	out    dx,al
c001bf2c:	83 c4 1c             	add    esp,0x1c
c001bf2f:	5b                   	pop    ebx
c001bf30:	5e                   	pop    esi
c001bf31:	5f                   	pop    edi
c001bf32:	5d                   	pop    ebp
c001bf33:	c3                   	ret    

c001bf34 <IDE::read(unsigned char, unsigned char)>:
c001bf34:	57                   	push   edi
c001bf35:	56                   	push   esi
c001bf36:	53                   	push   ebx
c001bf37:	83 ec 10             	sub    esp,0x10
c001bf3a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bf3e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bf42:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001bf46:	8d 42 f8             	lea    eax,[edx-0x8]
c001bf49:	3c 03                	cmp    al,0x3
c001bf4b:	77 48                	ja     c001bf95 <IDE::read(unsigned char, unsigned char)+0x61>
c001bf4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bf51:	0f b6 f1             	movzx  esi,cl
c001bf54:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001bf57:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001bf5c:	0c 80                	or     al,0x80
c001bf5e:	50                   	push   eax
c001bf5f:	6a 0c                	push   0xc
c001bf61:	56                   	push   esi
c001bf62:	53                   	push   ebx
c001bf63:	e8 0c ff ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf68:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bf6c:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001bf71:	0f b6 d2             	movzx  edx,dl
c001bf74:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bf78:	ec                   	in     al,dx
c001bf79:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bf7d:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001bf82:	52                   	push   edx
c001bf83:	6a 0c                	push   0xc
c001bf85:	56                   	push   esi
c001bf86:	53                   	push   ebx
c001bf87:	e8 e8 fe ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf8c:	83 c4 20             	add    esp,0x20
c001bf8f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bf93:	eb 4c                	jmp    c001bfe1 <IDE::read(unsigned char, unsigned char)+0xad>
c001bf95:	0f b6 f2             	movzx  esi,dl
c001bf98:	83 fe 07             	cmp    esi,0x7
c001bf9b:	77 12                	ja     c001bfaf <IDE::read(unsigned char, unsigned char)+0x7b>
c001bf9d:	0f b6 c9             	movzx  ecx,cl
c001bfa0:	0f b6 d2             	movzx  edx,dl
c001bfa3:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001bfab:	01 c2                	add    edx,eax
c001bfad:	eb 31                	jmp    c001bfe0 <IDE::read(unsigned char, unsigned char)+0xac>
c001bfaf:	83 fe 0d             	cmp    esi,0xd
c001bfb2:	77 13                	ja     c001bfc7 <IDE::read(unsigned char, unsigned char)+0x93>
c001bfb4:	0f b6 c9             	movzx  ecx,cl
c001bfb7:	0f b6 d2             	movzx  edx,dl
c001bfba:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001bfc1:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bfc5:	eb 19                	jmp    c001bfe0 <IDE::read(unsigned char, unsigned char)+0xac>
c001bfc7:	31 c0                	xor    eax,eax
c001bfc9:	83 fe 15             	cmp    esi,0x15
c001bfcc:	77 13                	ja     c001bfe1 <IDE::read(unsigned char, unsigned char)+0xad>
c001bfce:	0f b6 c9             	movzx  ecx,cl
c001bfd1:	0f b6 d2             	movzx  edx,dl
c001bfd4:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001bfdc:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bfe0:	ec                   	in     al,dx
c001bfe1:	83 c4 10             	add    esp,0x10
c001bfe4:	5b                   	pop    ebx
c001bfe5:	5e                   	pop    esi
c001bfe6:	5f                   	pop    edi
c001bfe7:	c3                   	ret    

c001bfe8 <IDE::waitInterrupt(unsigned char)>:
c001bfe8:	55                   	push   ebp
c001bfe9:	57                   	push   edi
c001bfea:	56                   	push   esi
c001bfeb:	53                   	push   ebx
c001bfec:	31 db                	xor    ebx,ebx
c001bfee:	83 ec 0c             	sub    esp,0xc
c001bff1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bff5:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bffa:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001c002:	89 e8                	mov    eax,ebp
c001c004:	84 c0                	test   al,al
c001c006:	75 30                	jne    c001c038 <IDE::waitInterrupt(unsigned char)+0x50>
c001c008:	50                   	push   eax
c001c009:	6a 0c                	push   0xc
c001c00b:	56                   	push   esi
c001c00c:	57                   	push   edi
c001c00d:	e8 22 ff ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c012:	83 c4 10             	add    esp,0x10
c001c015:	a8 01                	test   al,0x1
c001c017:	75 27                	jne    c001c040 <IDE::waitInterrupt(unsigned char)+0x58>
c001c019:	f6 c3 04             	test   bl,0x4
c001c01c:	75 12                	jne    c001c030 <IDE::waitInterrupt(unsigned char)+0x48>
c001c01e:	83 fb 32             	cmp    ebx,0x32
c001c021:	7e 0d                	jle    c001c030 <IDE::waitInterrupt(unsigned char)+0x48>
c001c023:	83 ec 0c             	sub    esp,0xc
c001c026:	6a 64                	push   0x64
c001c028:	e8 73 a4 ff ff       	call   c00164a0 <milliTenthSleep(unsigned int)>
c001c02d:	83 c4 10             	add    esp,0x10
c001c030:	83 fb 3c             	cmp    ebx,0x3c
c001c033:	74 0b                	je     c001c040 <IDE::waitInterrupt(unsigned char)+0x58>
c001c035:	43                   	inc    ebx
c001c036:	eb c2                	jmp    c001bffa <IDE::waitInterrupt(unsigned char)+0x12>
c001c038:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001c040:	83 c4 0c             	add    esp,0xc
c001c043:	89 e8                	mov    eax,ebp
c001c045:	5b                   	pop    ebx
c001c046:	5e                   	pop    esi
c001c047:	5f                   	pop    edi
c001c048:	5d                   	pop    ebp
c001c049:	c3                   	ret    

c001c04a <ideChannel0IRQHandler(regs*, void*)>:
c001c04a:	83 ec 10             	sub    esp,0x10
c001c04d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c051:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c058:	6a 07                	push   0x7
c001c05a:	6a 00                	push   0x0
c001c05c:	50                   	push   eax
c001c05d:	e8 d2 fe ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c062:	83 c4 1c             	add    esp,0x1c
c001c065:	c3                   	ret    

c001c066 <ideChannel1IRQHandler(regs*, void*)>:
c001c066:	83 ec 10             	sub    esp,0x10
c001c069:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c06d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c074:	6a 07                	push   0x7
c001c076:	6a 01                	push   0x1
c001c078:	50                   	push   eax
c001c079:	e8 b6 fe ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c07e:	83 c4 1c             	add    esp,0x1c
c001c081:	c3                   	ret    

c001c082 <IDE::enableIRQs(unsigned char, bool)>:
c001c082:	57                   	push   edi
c001c083:	b8 02 00 00 00       	mov    eax,0x2
c001c088:	56                   	push   esi
c001c089:	53                   	push   ebx
c001c08a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c08f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c093:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c097:	74 02                	je     c001c09b <IDE::enableIRQs(unsigned char, bool)+0x19>
c001c099:	31 c0                	xor    eax,eax
c001c09b:	0f b6 db             	movzx  ebx,bl
c001c09e:	bf 04 00 00 00       	mov    edi,0x4
c001c0a3:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001c0aa:	50                   	push   eax
c001c0ab:	6a 0c                	push   0xc
c001c0ad:	53                   	push   ebx
c001c0ae:	56                   	push   esi
c001c0af:	e8 c0 fd ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c0b4:	83 c4 10             	add    esp,0x10
c001c0b7:	50                   	push   eax
c001c0b8:	6a 0c                	push   0xc
c001c0ba:	53                   	push   ebx
c001c0bb:	56                   	push   esi
c001c0bc:	e8 73 fe ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c0c1:	83 c4 10             	add    esp,0x10
c001c0c4:	4f                   	dec    edi
c001c0c5:	75 f0                	jne    c001c0b7 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001c0c7:	5b                   	pop    ebx
c001c0c8:	5e                   	pop    esi
c001c0c9:	5f                   	pop    edi
c001c0ca:	c3                   	ret    
c001c0cb:	90                   	nop

c001c0cc <IDE::open(int, int, void*)>:
c001c0cc:	55                   	push   ebp
c001c0cd:	57                   	push   edi
c001c0ce:	56                   	push   esi
c001c0cf:	53                   	push   ebx
c001c0d0:	83 ec 1c             	sub    esp,0x1c
c001c0d3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c0d7:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c0de:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c0e7:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c0f0:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c0f7:	0f 85 da 02 00 00    	jne    c001c3d7 <IDE::open(int, int, void*)+0x30b>
c001c0fd:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c103:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001c107:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c10b:	83 e0 7f             	and    eax,0x7f
c001c10e:	83 f8 05             	cmp    eax,0x5
c001c111:	74 05                	je     c001c118 <IDE::open(int, int, void*)+0x4c>
c001c113:	83 f8 0f             	cmp    eax,0xf
c001c116:	75 32                	jne    c001c14a <IDE::open(int, int, void*)+0x7e>
c001c118:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c11e:	83 e0 fc             	and    eax,0xfffffffc
c001c121:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c128:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c12e:	83 e0 fc             	and    eax,0xfffffffc
c001c131:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c138:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c13e:	83 e0 fc             	and    eax,0xfffffffc
c001c141:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c148:	eb 14                	jmp    c001c15e <IDE::open(int, int, void*)+0x92>
c001c14a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c154:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c15e:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001c165:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c16a:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c171:	89 fa                	mov    edx,edi
c001c173:	89 f1                	mov    ecx,esi
c001c175:	c1 e1 10             	shl    ecx,0x10
c001c178:	89 e8                	mov    eax,ebp
c001c17a:	c1 e0 0b             	shl    eax,0xb
c001c17d:	09 c1                	or     ecx,eax
c001c17f:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c186:	c1 e0 08             	shl    eax,0x8
c001c189:	09 c1                	or     ecx,eax
c001c18b:	89 c8                	mov    eax,ecx
c001c18d:	0d 08 00 00 80       	or     eax,0x80000008
c001c192:	ef                   	out    dx,eax
c001c193:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c198:	ed                   	in     eax,dx
c001c199:	c1 e8 10             	shr    eax,0x10
c001c19c:	3d ff ff 00 00       	cmp    eax,0xffff
c001c1a1:	0f 84 f9 00 00 00    	je     c001c2a0 <IDE::open(int, int, void*)+0x1d4>
c001c1a7:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c1ad:	89 fa                	mov    edx,edi
c001c1af:	89 c8                	mov    eax,ecx
c001c1b1:	ef                   	out    dx,eax
c001c1b2:	b0 fe                	mov    al,0xfe
c001c1b4:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c1b9:	ee                   	out    dx,al
c001c1ba:	89 c8                	mov    eax,ecx
c001c1bc:	89 fa                	mov    edx,edi
c001c1be:	ef                   	out    dx,eax
c001c1bf:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c1c4:	ed                   	in     eax,dx
c001c1c5:	3c fe                	cmp    al,0xfe
c001c1c7:	0f 85 a4 00 00 00    	jne    c001c271 <IDE::open(int, int, void*)+0x1a5>
c001c1cd:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c001c1d3:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001c1da:	74 30                	je     c001c20c <IDE::open(int, int, void*)+0x140>
c001c1dc:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c1e2:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c1e6:	83 ec 0c             	sub    esp,0xc
c001c1e9:	40                   	inc    eax
c001c1ea:	0f b6 c0             	movzx  eax,al
c001c1ed:	50                   	push   eax
c001c1ee:	55                   	push   ebp
c001c1ef:	56                   	push   esi
c001c1f0:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001c1f6:	51                   	push   ecx
c001c1f7:	e8 30 38 ff ff       	call   c000fa2c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c1fc:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c201:	83 c4 1c             	add    esp,0x1c
c001c204:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c20a:	eb 0a                	jmp    c001c216 <IDE::open(int, int, void*)+0x14a>
c001c20c:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c216:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c21d:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001c222:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c229:	89 ea                	mov    edx,ebp
c001c22b:	c1 e1 10             	shl    ecx,0x10
c001c22e:	c1 e0 08             	shl    eax,0x8
c001c231:	09 c1                	or     ecx,eax
c001c233:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c23a:	c1 e0 0b             	shl    eax,0xb
c001c23d:	09 c1                	or     ecx,eax
c001c23f:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c245:	89 c8                	mov    eax,ecx
c001c247:	ef                   	out    dx,eax
c001c248:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001c24e:	be fc 0c 00 00       	mov    esi,0xcfc
c001c253:	89 f2                	mov    edx,esi
c001c255:	89 f8                	mov    eax,edi
c001c257:	ee                   	out    dx,al
c001c258:	89 c8                	mov    eax,ecx
c001c25a:	89 ea                	mov    edx,ebp
c001c25c:	ef                   	out    dx,eax
c001c25d:	89 f2                	mov    edx,esi
c001c25f:	ed                   	in     eax,dx
c001c260:	0f b6 c0             	movzx  eax,al
c001c263:	39 f8                	cmp    eax,edi
c001c265:	74 49                	je     c001c2b0 <IDE::open(int, int, void*)+0x1e4>
c001c267:	83 ec 0c             	sub    esp,0xc
c001c26a:	68 54 34 02 c0       	push   0xc0023454
c001c26f:	eb 37                	jmp    c001c2a8 <IDE::open(int, int, void*)+0x1dc>
c001c271:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c27a:	75 1a                	jne    c001c296 <IDE::open(int, int, void*)+0x1ca>
c001c27c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c281:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c286:	74 05                	je     c001c28d <IDE::open(int, int, void*)+0x1c1>
c001c288:	83 c0 80             	add    eax,0xffffff80
c001c28b:	75 09                	jne    c001c296 <IDE::open(int, int, void*)+0x1ca>
c001c28d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c294:	eb 1a                	jmp    c001c2b0 <IDE::open(int, int, void*)+0x1e4>
c001c296:	83 ec 0c             	sub    esp,0xc
c001c299:	68 5c 34 02 c0       	push   0xc002345c
c001c29e:	eb 08                	jmp    c001c2a8 <IDE::open(int, int, void*)+0x1dc>
c001c2a0:	83 ec 0c             	sub    esp,0xc
c001c2a3:	68 8d 34 02 c0       	push   0xc002348d
c001c2a8:	e8 aa 53 ff ff       	call   c0011657 <KePanic(char const*)>
c001c2ad:	83 c4 10             	add    esp,0x10
c001c2b0:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c2b7:	74 1a                	je     c001c2d3 <IDE::open(int, int, void*)+0x207>
c001c2b9:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c2bf:	83 e0 fc             	and    eax,0xfffffffc
c001c2c2:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c2c9:	83 c0 08             	add    eax,0x8
c001c2cc:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c2d3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c2d9:	89 c2                	mov    edx,eax
c001c2db:	83 e2 0f             	and    edx,0xf
c001c2de:	83 fa 08             	cmp    edx,0x8
c001c2e1:	75 0a                	jne    c001c2ed <IDE::open(int, int, void*)+0x221>
c001c2e3:	83 e8 02             	sub    eax,0x2
c001c2e6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c2ed:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c2f3:	89 c2                	mov    edx,eax
c001c2f5:	83 e2 0f             	and    edx,0xf
c001c2f8:	83 fa 08             	cmp    edx,0x8
c001c2fb:	75 0a                	jne    c001c307 <IDE::open(int, int, void*)+0x23b>
c001c2fd:	83 e8 02             	sub    eax,0x2
c001c300:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c307:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c30e:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c315:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c318:	89 d0                	mov    eax,edx
c001c31a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c31e:	8d 7a 01             	lea    edi,[edx+0x1]
c001c321:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c325:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c329:	83 e1 3f             	and    ecx,0x3f
c001c32c:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c330:	89 f9                	mov    ecx,edi
c001c332:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c339:	8d 78 02             	lea    edi,[eax+0x2]
c001c33c:	0f b6 c9             	movzx  ecx,cl
c001c33f:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c342:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c346:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c34a:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c34e:	83 e2 3f             	and    edx,0x3f
c001c351:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c355:	89 f9                	mov    ecx,edi
c001c357:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c35d:	8d 78 03             	lea    edi,[eax+0x3]
c001c360:	0f b6 d1             	movzx  edx,cl
c001c363:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c366:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c36a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c36e:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c372:	83 e1 3f             	and    ecx,0x3f
c001c375:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c379:	89 f9                	mov    ecx,edi
c001c37b:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c381:	8d 78 04             	lea    edi,[eax+0x4]
c001c384:	0f b6 c9             	movzx  ecx,cl
c001c387:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c38a:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c38e:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c392:	89 fa                	mov    edx,edi
c001c394:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c39a:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c39e:	83 e2 3f             	and    edx,0x3f
c001c3a1:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c3a5:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c3ac:	66 85 f6             	test   si,si
c001c3af:	74 65                	je     c001c416 <IDE::open(int, int, void*)+0x34a>
c001c3b1:	89 f9                	mov    ecx,edi
c001c3b3:	83 c0 05             	add    eax,0x5
c001c3b6:	0f b6 d1             	movzx  edx,cl
c001c3b9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c3bc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c3c0:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c3c4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c3ca:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001c3ce:	83 e0 3f             	and    eax,0x3f
c001c3d1:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001c3d5:	eb 3f                	jmp    c001c416 <IDE::open(int, int, void*)+0x34a>
c001c3d7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c3de:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c3e4:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c3eb:	05 06 02 00 00       	add    eax,0x206
c001c3f0:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c3f7:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c3fe:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c405:	05 06 02 00 00       	add    eax,0x206
c001c40a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c411:	e9 bd fe ff ff       	jmp    c001c2d3 <IDE::open(int, int, void*)+0x207>
c001c416:	50                   	push   eax
c001c417:	50                   	push   eax
c001c418:	6a 00                	push   0x0
c001c41a:	53                   	push   ebx
c001c41b:	e8 2e fa ff ff       	call   c001be4e <IDE::prepareInterrupt(unsigned char)>
c001c420:	5a                   	pop    edx
c001c421:	59                   	pop    ecx
c001c422:	6a 01                	push   0x1
c001c424:	53                   	push   ebx
c001c425:	e8 24 fa ff ff       	call   c001be4e <IDE::prepareInterrupt(unsigned char)>
c001c42a:	83 c4 0c             	add    esp,0xc
c001c42d:	6a 00                	push   0x0
c001c42f:	6a 00                	push   0x0
c001c431:	53                   	push   ebx
c001c432:	e8 4b fc ff ff       	call   c001c082 <IDE::enableIRQs(unsigned char, bool)>
c001c437:	83 c4 0c             	add    esp,0xc
c001c43a:	6a 00                	push   0x0
c001c43c:	6a 01                	push   0x1
c001c43e:	53                   	push   ebx
c001c43f:	e8 3e fc ff ff       	call   c001c082 <IDE::enableIRQs(unsigned char, bool)>
c001c444:	83 c4 10             	add    esp,0x10
c001c447:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c44e:	74 34                	je     c001c484 <IDE::open(int, int, void*)+0x3b8>
c001c450:	83 ec 0c             	sub    esp,0xc
c001c453:	53                   	push   ebx
c001c454:	6a 01                	push   0x1
c001c456:	68 4a c0 01 c0       	push   0xc001c04a
c001c45b:	6a 0e                	push   0xe
c001c45d:	53                   	push   ebx
c001c45e:	e8 19 05 ff ff       	call   c000c97c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c463:	83 c4 14             	add    esp,0x14
c001c466:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c46c:	53                   	push   ebx
c001c46d:	6a 01                	push   0x1
c001c46f:	68 66 c0 01 c0       	push   0xc001c066
c001c474:	6a 0f                	push   0xf
c001c476:	53                   	push   ebx
c001c477:	e8 00 05 ff ff       	call   c000c97c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c47c:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c482:	eb 38                	jmp    c001c4bc <IDE::open(int, int, void*)+0x3f0>
c001c484:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c48e:	83 ec 0c             	sub    esp,0xc
c001c491:	53                   	push   ebx
c001c492:	6a 00                	push   0x0
c001c494:	68 4a c0 01 c0       	push   0xc001c04a
c001c499:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c49f:	53                   	push   ebx
c001c4a0:	e8 d7 04 ff ff       	call   c000c97c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c4a5:	83 c4 14             	add    esp,0x14
c001c4a8:	53                   	push   ebx
c001c4a9:	6a 00                	push   0x0
c001c4ab:	68 66 c0 01 c0       	push   0xc001c066
c001c4b0:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c4b6:	53                   	push   ebx
c001c4b7:	e8 c0 04 ff ff       	call   c000c97c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c4bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c4be:	83 c4 20             	add    esp,0x20
c001c4c1:	83 ec 0c             	sub    esp,0xc
c001c4c4:	53                   	push   ebx
c001c4c5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c4c8:	83 c4 0c             	add    esp,0xc
c001c4cb:	6a 07                	push   0x7
c001c4cd:	6a 00                	push   0x0
c001c4cf:	53                   	push   ebx
c001c4d0:	e8 5f fa ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c4d5:	83 c4 0c             	add    esp,0xc
c001c4d8:	6a 07                	push   0x7
c001c4da:	6a 01                	push   0x1
c001c4dc:	53                   	push   ebx
c001c4dd:	e8 52 fa ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c4e2:	83 c4 0c             	add    esp,0xc
c001c4e5:	6a 01                	push   0x1
c001c4e7:	6a 00                	push   0x0
c001c4e9:	53                   	push   ebx
c001c4ea:	e8 93 fb ff ff       	call   c001c082 <IDE::enableIRQs(unsigned char, bool)>
c001c4ef:	83 c4 0c             	add    esp,0xc
c001c4f2:	6a 01                	push   0x1
c001c4f4:	6a 01                	push   0x1
c001c4f6:	53                   	push   ebx
c001c4f7:	e8 86 fb ff ff       	call   c001c082 <IDE::enableIRQs(unsigned char, bool)>
c001c4fc:	83 c4 2c             	add    esp,0x2c
c001c4ff:	31 c0                	xor    eax,eax
c001c501:	5b                   	pop    ebx
c001c502:	5e                   	pop    esi
c001c503:	5f                   	pop    edi
c001c504:	5d                   	pop    ebp
c001c505:	c3                   	ret    

c001c506 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c506:	55                   	push   ebp
c001c507:	57                   	push   edi
c001c508:	56                   	push   esi
c001c509:	53                   	push   ebx
c001c50a:	83 ec 1c             	sub    esp,0x1c
c001c50d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c511:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c515:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c519:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c51d:	8d 42 f8             	lea    eax,[edx-0x8]
c001c520:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c524:	3c 03                	cmp    al,0x3
c001c526:	77 5a                	ja     c001c582 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c528:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c52c:	0f b6 db             	movzx  ebx,bl
c001c52f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c533:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c536:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c53b:	0c 80                	or     al,0x80
c001c53d:	50                   	push   eax
c001c53e:	6a 0c                	push   0xc
c001c540:	53                   	push   ebx
c001c541:	56                   	push   esi
c001c542:	e8 2d f9 ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c547:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c54b:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c550:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c554:	0f b6 d2             	movzx  edx,dl
c001c557:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c55b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c55d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c562:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c566:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c56a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c572:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c576:	83 c4 2c             	add    esp,0x2c
c001c579:	5b                   	pop    ebx
c001c57a:	5e                   	pop    esi
c001c57b:	5f                   	pop    edi
c001c57c:	5d                   	pop    ebp
c001c57d:	e9 f2 f8 ff ff       	jmp    c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c582:	0f b6 c2             	movzx  eax,dl
c001c585:	83 f8 07             	cmp    eax,0x7
c001c588:	77 12                	ja     c001c59c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c58a:	0f b6 db             	movzx  ebx,bl
c001c58d:	0f b6 c2             	movzx  eax,dl
c001c590:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c598:	01 c2                	add    edx,eax
c001c59a:	eb 2f                	jmp    c001c5cb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c59c:	83 f8 0d             	cmp    eax,0xd
c001c59f:	77 13                	ja     c001c5b4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c5a1:	0f b6 db             	movzx  ebx,bl
c001c5a4:	0f b6 d2             	movzx  edx,dl
c001c5a7:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c5ae:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c5b2:	eb 17                	jmp    c001c5cb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c5b4:	83 f8 15             	cmp    eax,0x15
c001c5b7:	77 14                	ja     c001c5cd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c5b9:	0f b6 db             	movzx  ebx,bl
c001c5bc:	0f b6 d2             	movzx  edx,dl
c001c5bf:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c5c7:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c5cb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c5cd:	83 c4 1c             	add    esp,0x1c
c001c5d0:	5b                   	pop    ebx
c001c5d1:	5e                   	pop    esi
c001c5d2:	5f                   	pop    edi
c001c5d3:	5d                   	pop    ebp
c001c5d4:	c3                   	ret    
c001c5d5:	90                   	nop

c001c5d6 <IDE::detect()>:
c001c5d6:	55                   	push   ebp
c001c5d7:	57                   	push   edi
c001c5d8:	56                   	push   esi
c001c5d9:	53                   	push   ebx
c001c5da:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c5e0:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c5e7:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c5ee:	0f 85 9e 02 00 00    	jne    c001c892 <IDE::detect()+0x2bc>
c001c5f4:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c5fb:	31 f6                	xor    esi,esi
c001c5fd:	31 ff                	xor    edi,edi
c001c5ff:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c607:	89 f8                	mov    eax,edi
c001c609:	c1 e0 06             	shl    eax,0x6
c001c60c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c614:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c618:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c61c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c620:	c1 e0 04             	shl    eax,0x4
c001c623:	83 c8 a0             	or     eax,0xffffffa0
c001c626:	0f b6 c0             	movzx  eax,al
c001c629:	50                   	push   eax
c001c62a:	6a 06                	push   0x6
c001c62c:	56                   	push   esi
c001c62d:	53                   	push   ebx
c001c62e:	e8 41 f8 ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c633:	83 c4 0c             	add    esp,0xc
c001c636:	6a 0c                	push   0xc
c001c638:	56                   	push   esi
c001c639:	53                   	push   ebx
c001c63a:	e8 f5 f8 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c63f:	83 c4 0c             	add    esp,0xc
c001c642:	6a 0c                	push   0xc
c001c644:	56                   	push   esi
c001c645:	53                   	push   ebx
c001c646:	e8 e9 f8 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c64b:	83 c4 0c             	add    esp,0xc
c001c64e:	6a 0c                	push   0xc
c001c650:	56                   	push   esi
c001c651:	53                   	push   ebx
c001c652:	e8 dd f8 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c657:	83 c4 0c             	add    esp,0xc
c001c65a:	6a 0c                	push   0xc
c001c65c:	56                   	push   esi
c001c65d:	53                   	push   ebx
c001c65e:	e8 d1 f8 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c663:	68 ec 00 00 00       	push   0xec
c001c668:	6a 07                	push   0x7
c001c66a:	56                   	push   esi
c001c66b:	53                   	push   ebx
c001c66c:	e8 03 f8 ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c671:	83 c4 1c             	add    esp,0x1c
c001c674:	6a 0c                	push   0xc
c001c676:	56                   	push   esi
c001c677:	53                   	push   ebx
c001c678:	e8 b7 f8 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c67d:	83 c4 0c             	add    esp,0xc
c001c680:	6a 0c                	push   0xc
c001c682:	56                   	push   esi
c001c683:	53                   	push   ebx
c001c684:	e8 ab f8 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c689:	83 c4 0c             	add    esp,0xc
c001c68c:	6a 0c                	push   0xc
c001c68e:	56                   	push   esi
c001c68f:	53                   	push   ebx
c001c690:	e8 9f f8 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c695:	83 c4 0c             	add    esp,0xc
c001c698:	6a 0c                	push   0xc
c001c69a:	56                   	push   esi
c001c69b:	53                   	push   ebx
c001c69c:	e8 93 f8 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c6a1:	83 c4 0c             	add    esp,0xc
c001c6a4:	6a 0c                	push   0xc
c001c6a6:	56                   	push   esi
c001c6a7:	53                   	push   ebx
c001c6a8:	e8 87 f8 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c6ad:	83 c4 10             	add    esp,0x10
c001c6b0:	84 c0                	test   al,al
c001c6b2:	0f 84 61 01 00 00    	je     c001c819 <IDE::detect()+0x243>
c001c6b8:	31 ed                	xor    ebp,ebp
c001c6ba:	50                   	push   eax
c001c6bb:	6a 0c                	push   0xc
c001c6bd:	56                   	push   esi
c001c6be:	53                   	push   ebx
c001c6bf:	e8 70 f8 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c6c4:	83 c4 10             	add    esp,0x10
c001c6c7:	a8 01                	test   al,0x1
c001c6c9:	0f 85 6b 01 00 00    	jne    c001c83a <IDE::detect()+0x264>
c001c6cf:	a8 80                	test   al,0x80
c001c6d1:	75 04                	jne    c001c6d7 <IDE::detect()+0x101>
c001c6d3:	a8 08                	test   al,0x8
c001c6d5:	75 23                	jne    c001c6fa <IDE::detect()+0x124>
c001c6d7:	45                   	inc    ebp
c001c6d8:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001c6de:	7e da                	jle    c001c6ba <IDE::detect()+0xe4>
c001c6e0:	83 ec 0c             	sub    esp,0xc
c001c6e3:	6a 32                	push   0x32
c001c6e5:	e8 b6 9d ff ff       	call   c00164a0 <milliTenthSleep(unsigned int)>
c001c6ea:	83 c4 10             	add    esp,0x10
c001c6ed:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001c6f3:	75 c5                	jne    c001c6ba <IDE::detect()+0xe4>
c001c6f5:	e9 40 01 00 00       	jmp    c001c83a <IDE::detect()+0x264>
c001c6fa:	31 c9                	xor    ecx,ecx
c001c6fc:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c700:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001c704:	83 ec 0c             	sub    esp,0xc
c001c707:	68 80 00 00 00       	push   0x80
c001c70c:	55                   	push   ebp
c001c70d:	6a 00                	push   0x0
c001c70f:	56                   	push   esi
c001c710:	53                   	push   ebx
c001c711:	e8 f0 fd ff ff       	call   c001c506 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c716:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c71b:	89 f8                	mov    eax,edi
c001c71d:	c1 e0 06             	shl    eax,0x6
c001c720:	01 d8                	add    eax,ebx
c001c722:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c729:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c730:	89 d1                	mov    ecx,edx
c001c732:	89 f2                	mov    edx,esi
c001c734:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c73a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c73e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c744:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c748:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c74f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c757:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c75e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c766:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c76c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c773:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c779:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c77d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c781:	83 c4 20             	add    esp,0x20
c001c784:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001c787:	83 c5 02             	add    ebp,0x2
c001c78a:	83 c0 02             	add    eax,0x2
c001c78d:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c793:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001c796:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c79c:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001c7a0:	75 e2                	jne    c001c784 <IDE::detect()+0x1ae>
c001c7a2:	89 f8                	mov    eax,edi
c001c7a4:	c1 e0 06             	shl    eax,0x6
c001c7a7:	01 d8                	add    eax,ebx
c001c7a9:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c7b0:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c7b7:	c1 ea 09             	shr    edx,0x9
c001c7ba:	83 e2 01             	and    edx,0x1
c001c7bd:	80 e1 01             	and    cl,0x1
c001c7c0:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c7c6:	75 22                	jne    c001c7ea <IDE::detect()+0x214>
c001c7c8:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c7cf:	74 47                	je     c001c818 <IDE::detect()+0x242>
c001c7d1:	83 ec 0c             	sub    esp,0xc
c001c7d4:	68 7c 01 00 00       	push   0x17c
c001c7d9:	e8 25 b3 fe ff       	call   c0007b03 <malloc>
c001c7de:	89 04 24             	mov    DWORD PTR [esp],eax
c001c7e1:	89 c5                	mov    ebp,eax
c001c7e3:	e8 16 05 00 00       	call   c001ccfe <ATA::ATA()>
c001c7e8:	eb 17                	jmp    c001c801 <IDE::detect()+0x22b>
c001c7ea:	83 ec 0c             	sub    esp,0xc
c001c7ed:	68 84 01 00 00       	push   0x184
c001c7f2:	e8 0c b3 fe ff       	call   c0007b03 <malloc>
c001c7f7:	89 04 24             	mov    DWORD PTR [esp],eax
c001c7fa:	89 c5                	mov    ebp,eax
c001c7fc:	e8 6f 0e 00 00       	call   c001d670 <ATAPI::ATAPI()>
c001c801:	5a                   	pop    edx
c001c802:	59                   	pop    ecx
c001c803:	55                   	push   ebp
c001c804:	53                   	push   ebx
c001c805:	e8 c6 01 ff ff       	call   c000c9d0 <Device::addChild(Device*)>
c001c80a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c80d:	53                   	push   ebx
c001c80e:	57                   	push   edi
c001c80f:	6a 00                	push   0x0
c001c811:	55                   	push   ebp
c001c812:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c815:	83 c4 20             	add    esp,0x20
c001c818:	47                   	inc    edi
c001c819:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c81e:	74 0d                	je     c001c82d <IDE::detect()+0x257>
c001c820:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c828:	e9 da fd ff ff       	jmp    c001c607 <IDE::detect()+0x31>
c001c82d:	4e                   	dec    esi
c001c82e:	74 62                	je     c001c892 <IDE::detect()+0x2bc>
c001c830:	be 01 00 00 00       	mov    esi,0x1
c001c835:	e9 c5 fd ff ff       	jmp    c001c5ff <IDE::detect()+0x29>
c001c83a:	50                   	push   eax
c001c83b:	6a 04                	push   0x4
c001c83d:	56                   	push   esi
c001c83e:	53                   	push   ebx
c001c83f:	e8 f0 f6 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c844:	83 c4 0c             	add    esp,0xc
c001c847:	6a 05                	push   0x5
c001c849:	56                   	push   esi
c001c84a:	53                   	push   ebx
c001c84b:	89 c5                	mov    ebp,eax
c001c84d:	e8 e2 f6 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c852:	89 e9                	mov    ecx,ebp
c001c854:	83 c4 10             	add    esp,0x10
c001c857:	0f b6 e9             	movzx  ebp,cl
c001c85a:	83 fd 14             	cmp    ebp,0x14
c001c85d:	74 2d                	je     c001c88c <IDE::detect()+0x2b6>
c001c85f:	83 fd 69             	cmp    ebp,0x69
c001c862:	75 b5                	jne    c001c819 <IDE::detect()+0x243>
c001c864:	3c 96                	cmp    al,0x96
c001c866:	75 b1                	jne    c001c819 <IDE::detect()+0x243>
c001c868:	68 a1 00 00 00       	push   0xa1
c001c86d:	6a 07                	push   0x7
c001c86f:	56                   	push   esi
c001c870:	53                   	push   ebx
c001c871:	e8 fe f5 ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c876:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c87d:	e8 1e 9c ff ff       	call   c00164a0 <milliTenthSleep(unsigned int)>
c001c882:	83 c4 10             	add    esp,0x10
c001c885:	b1 01                	mov    cl,0x1
c001c887:	e9 70 fe ff ff       	jmp    c001c6fc <IDE::detect()+0x126>
c001c88c:	3c eb                	cmp    al,0xeb
c001c88e:	75 cf                	jne    c001c85f <IDE::detect()+0x289>
c001c890:	eb d6                	jmp    c001c868 <IDE::detect()+0x292>
c001c892:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c898:	5b                   	pop    ebx
c001c899:	5e                   	pop    esi
c001c89a:	5f                   	pop    edi
c001c89b:	5d                   	pop    ebp
c001c89c:	c3                   	ret    
c001c89d:	90                   	nop

c001c89e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c89e:	55                   	push   ebp
c001c89f:	57                   	push   edi
c001c8a0:	56                   	push   esi
c001c8a1:	53                   	push   ebx
c001c8a2:	83 ec 1c             	sub    esp,0x1c
c001c8a5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c8a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c8ad:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c8b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8b5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c8b9:	88 c3                	mov    bl,al
c001c8bb:	25 ff 00 00 00       	and    eax,0xff
c001c8c0:	0f 84 88 00 00 00    	je     c001c94e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c8c6:	83 ec 0c             	sub    esp,0xc
c001c8c9:	89 c7                	mov    edi,eax
c001c8cb:	68 b7 34 02 c0       	push   0xc00234b7
c001c8d0:	e8 65 e0 fe ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001c8d5:	83 c4 10             	add    esp,0x10
c001c8d8:	83 ff 01             	cmp    edi,0x1
c001c8db:	74 6b                	je     c001c948 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c8dd:	83 ff 02             	cmp    edi,0x2
c001c8e0:	75 58                	jne    c001c93a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c8e2:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c8e7:	50                   	push   eax
c001c8e8:	6a 01                	push   0x1
c001c8ea:	01 ff                	add    edi,edi
c001c8ec:	09 fe                	or     esi,edi
c001c8ee:	89 f0                	mov    eax,esi
c001c8f0:	0f b6 f0             	movzx  esi,al
c001c8f3:	c1 e6 06             	shl    esi,0x6
c001c8f6:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c8fe:	50                   	push   eax
c001c8ff:	55                   	push   ebp
c001c900:	e8 2f f6 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c905:	83 c4 10             	add    esp,0x10
c001c908:	a8 01                	test   al,0x1
c001c90a:	74 02                	je     c001c90e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c90c:	b3 07                	mov    bl,0x7
c001c90e:	a8 02                	test   al,0x2
c001c910:	74 02                	je     c001c914 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c912:	b3 03                	mov    bl,0x3
c001c914:	a8 04                	test   al,0x4
c001c916:	74 02                	je     c001c91a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c918:	b3 14                	mov    bl,0x14
c001c91a:	a8 08                	test   al,0x8
c001c91c:	74 02                	je     c001c920 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c91e:	b3 03                	mov    bl,0x3
c001c920:	a8 10                	test   al,0x10
c001c922:	74 02                	je     c001c926 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c924:	b3 15                	mov    bl,0x15
c001c926:	a8 20                	test   al,0x20
c001c928:	74 02                	je     c001c92c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c92a:	b3 03                	mov    bl,0x3
c001c92c:	a8 40                	test   al,0x40
c001c92e:	74 02                	je     c001c932 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c930:	b3 16                	mov    bl,0x16
c001c932:	a8 80                	test   al,0x80
c001c934:	74 18                	je     c001c94e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c936:	b3 0d                	mov    bl,0xd
c001c938:	eb 14                	jmp    c001c94e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c93a:	83 ff 03             	cmp    edi,0x3
c001c93d:	74 0d                	je     c001c94c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c93f:	83 ff 04             	cmp    edi,0x4
c001c942:	75 0a                	jne    c001c94e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c944:	b3 08                	mov    bl,0x8
c001c946:	eb 06                	jmp    c001c94e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c948:	b3 13                	mov    bl,0x13
c001c94a:	eb 02                	jmp    c001c94e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c94c:	b3 17                	mov    bl,0x17
c001c94e:	83 c4 1c             	add    esp,0x1c
c001c951:	88 d8                	mov    al,bl
c001c953:	5b                   	pop    ebx
c001c954:	5e                   	pop    esi
c001c955:	5f                   	pop    edi
c001c956:	5d                   	pop    ebp
c001c957:	c3                   	ret    

c001c958 <IDE::polling(unsigned char, unsigned int)>:
c001c958:	57                   	push   edi
c001c959:	56                   	push   esi
c001c95a:	53                   	push   ebx
c001c95b:	bb 04 00 00 00       	mov    ebx,0x4
c001c960:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c964:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c969:	52                   	push   edx
c001c96a:	6a 0c                	push   0xc
c001c96c:	56                   	push   esi
c001c96d:	57                   	push   edi
c001c96e:	e8 c1 f5 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c973:	83 c4 10             	add    esp,0x10
c001c976:	4b                   	dec    ebx
c001c977:	75 f0                	jne    c001c969 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c979:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c97e:	50                   	push   eax
c001c97f:	6a 0c                	push   0xc
c001c981:	56                   	push   esi
c001c982:	57                   	push   edi
c001c983:	e8 ac f5 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001c988:	83 c4 10             	add    esp,0x10
c001c98b:	a8 01                	test   al,0x1
c001c98d:	75 17                	jne    c001c9a6 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c98f:	a8 20                	test   al,0x20
c001c991:	75 0f                	jne    c001c9a2 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c993:	4b                   	dec    ebx
c001c994:	74 10                	je     c001c9a6 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c996:	a8 80                	test   al,0x80
c001c998:	75 e4                	jne    c001c97e <IDE::polling(unsigned char, unsigned int)+0x26>
c001c99a:	a8 08                	test   al,0x8
c001c99c:	74 e0                	je     c001c97e <IDE::polling(unsigned char, unsigned int)+0x26>
c001c99e:	31 c0                	xor    eax,eax
c001c9a0:	eb 06                	jmp    c001c9a8 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c9a2:	b0 01                	mov    al,0x1
c001c9a4:	eb 02                	jmp    c001c9a8 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c9a6:	b0 02                	mov    al,0x2
c001c9a8:	5b                   	pop    ebx
c001c9a9:	5e                   	pop    esi
c001c9aa:	5f                   	pop    edi
c001c9ab:	c3                   	ret    

c001c9ac <SATABus::close(int, int, void*)>:
c001c9ac:	31 c0                	xor    eax,eax
c001c9ae:	c3                   	ret    
c001c9af:	90                   	nop

c001c9b0 <SATABus::detect()>:
c001c9b0:	c3                   	ret    
c001c9b1:	90                   	nop

c001c9b2 <SATABus::SATABus()>:
c001c9b2:	83 ec 0c             	sub    esp,0xc
c001c9b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9b9:	83 ec 08             	sub    esp,0x8
c001c9bc:	68 f0 34 02 c0       	push   0xc00234f0
c001c9c1:	50                   	push   eax
c001c9c2:	e8 85 03 ff ff       	call   c000cd4c <HardDiskController::HardDiskController(char const*)>
c001c9c7:	83 c4 10             	add    esp,0x10
c001c9ca:	ba 1c 35 02 c0       	mov    edx,0xc002351c
c001c9cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9d3:	89 10                	mov    DWORD PTR [eax],edx
c001c9d5:	83 ec 0c             	sub    esp,0xc
c001c9d8:	6a 50                	push   0x50
c001c9da:	e8 02 b5 fe ff       	call   c0007ee1 <Phys::allocateContiguousPages(int)>
c001c9df:	83 c4 10             	add    esp,0x10
c001c9e2:	89 c2                	mov    edx,eax
c001c9e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9e8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c9ee:	83 ec 0c             	sub    esp,0xc
c001c9f1:	6a 50                	push   0x50
c001c9f3:	e8 2d cc fe ff       	call   c0009625 <Virt::allocateKernelVirtualPages(int)>
c001c9f8:	83 c4 10             	add    esp,0x10
c001c9fb:	89 c2                	mov    edx,eax
c001c9fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca01:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ca07:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001ca0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ca10:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001ca16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ca1a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ca20:	83 ec 0c             	sub    esp,0xc
c001ca23:	6a 03                	push   0x3
c001ca25:	6a 50                	push   0x50
c001ca27:	51                   	push   ecx
c001ca28:	52                   	push   edx
c001ca29:	50                   	push   eax
c001ca2a:	e8 09 d5 fe ff       	call   c0009f38 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ca2f:	83 c4 20             	add    esp,0x20
c001ca32:	90                   	nop
c001ca33:	83 c4 0c             	add    esp,0xc
c001ca36:	c3                   	ret    
c001ca37:	90                   	nop

c001ca38 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001ca38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca3c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001ca3f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001ca42:	09 c2                	or     edx,eax
c001ca44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca48:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ca4e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ca50:	31 c0                	xor    eax,eax
c001ca52:	c1 e9 08             	shr    ecx,0x8
c001ca55:	83 e1 0f             	and    ecx,0xf
c001ca58:	39 c8                	cmp    eax,ecx
c001ca5a:	74 0a                	je     c001ca66 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001ca5c:	f6 c2 01             	test   dl,0x1
c001ca5f:	74 08                	je     c001ca69 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001ca61:	d1 ea                	shr    edx,1
c001ca63:	40                   	inc    eax
c001ca64:	eb f2                	jmp    c001ca58 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001ca66:	83 c8 ff             	or     eax,0xffffffff
c001ca69:	c3                   	ret    

c001ca6a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001ca6a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ca6e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001ca71:	89 c2                	mov    edx,eax
c001ca73:	c1 ea 08             	shr    edx,0x8
c001ca76:	83 e2 0f             	and    edx,0xf
c001ca79:	4a                   	dec    edx
c001ca7a:	75 32                	jne    c001caae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ca7c:	83 e0 0f             	and    eax,0xf
c001ca7f:	83 f8 03             	cmp    eax,0x3
c001ca82:	75 2a                	jne    c001caae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ca84:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001ca87:	b8 02 00 00 00       	mov    eax,0x2
c001ca8c:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001ca92:	74 1c                	je     c001cab0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ca94:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001ca9a:	b8 04 00 00 00       	mov    eax,0x4
c001ca9f:	74 0f                	je     c001cab0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001caa1:	31 c0                	xor    eax,eax
c001caa3:	83 fa 03             	cmp    edx,0x3
c001caa6:	0f 94 c0             	sete   al
c001caa9:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001caad:	c3                   	ret    
c001caae:	31 c0                	xor    eax,eax
c001cab0:	c3                   	ret    
c001cab1:	90                   	nop

c001cab2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001cab2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cab6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cab9:	0f ba e2 0f          	bt     edx,0xf
c001cabd:	72 f7                	jb     c001cab6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001cabf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cac2:	83 ca 10             	or     edx,0x10
c001cac5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001cac8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cacb:	83 ca 01             	or     edx,0x1
c001cace:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001cad1:	c3                   	ret    

c001cad2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001cad2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cad6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cad9:	83 e2 fe             	and    edx,0xfffffffe
c001cadc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001cadf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cae2:	83 e2 ef             	and    edx,0xffffffef
c001cae5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001cae8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001caeb:	0f ba e2 0e          	bt     edx,0xe
c001caef:	72 f7                	jb     c001cae8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001caf1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001caf4:	0f ba e2 0f          	bt     edx,0xf
c001caf8:	72 ee                	jb     c001cae8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001cafa:	c3                   	ret    
c001cafb:	90                   	nop

c001cafc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001cafc:	55                   	push   ebp
c001cafd:	57                   	push   edi
c001cafe:	56                   	push   esi
c001caff:	53                   	push   ebx
c001cb00:	83 ec 1c             	sub    esp,0x1c
c001cb03:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cb07:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001cb0b:	53                   	push   ebx
c001cb0c:	57                   	push   edi
c001cb0d:	e8 c0 ff ff ff       	call   c001cad2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001cb12:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001cb16:	83 ec 0c             	sub    esp,0xc
c001cb19:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001cb1f:	c1 e5 0a             	shl    ebp,0xa
c001cb22:	01 e8                	add    eax,ebp
c001cb24:	89 03                	mov    DWORD PTR [ebx],eax
c001cb26:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb28:	68 00 04 00 00       	push   0x400
c001cb2d:	6a 00                	push   0x0
c001cb2f:	50                   	push   eax
c001cb30:	e8 bb 39 fe ff       	call   c00004f0 <memset>
c001cb35:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001cb3b:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001cb3f:	83 c4 1c             	add    esp,0x1c
c001cb42:	01 e8                	add    eax,ebp
c001cb44:	89 03                	mov    DWORD PTR [ebx],eax
c001cb46:	c1 e6 08             	shl    esi,0x8
c001cb49:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cb50:	81 c6 00 80 00 00    	add    esi,0x8000
c001cb56:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001cb5c:	01 f0                	add    eax,esi
c001cb5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cb61:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cb64:	68 00 01 00 00       	push   0x100
c001cb69:	6a 00                	push   0x0
c001cb6b:	50                   	push   eax
c001cb6c:	e8 7f 39 fe ff       	call   c00004f0 <memset>
c001cb71:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001cb77:	31 d2                	xor    edx,edx
c001cb79:	01 f0                	add    eax,esi
c001cb7b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cb7e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001cb85:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001cb8b:	01 ee                	add    esi,ebp
c001cb8d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001cb91:	83 c4 10             	add    esp,0x10
c001cb94:	c1 e5 0d             	shl    ebp,0xd
c001cb97:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001cb9d:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001cba3:	83 c6 20             	add    esi,0x20
c001cba6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cbaa:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001cbb0:	01 e8                	add    eax,ebp
c001cbb2:	01 d0                	add    eax,edx
c001cbb4:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001cbb7:	52                   	push   edx
c001cbb8:	68 00 01 00 00       	push   0x100
c001cbbd:	6a 00                	push   0x0
c001cbbf:	50                   	push   eax
c001cbc0:	e8 2b 39 fe ff       	call   c00004f0 <memset>
c001cbc5:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001cbcb:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001cbd2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cbd6:	83 c4 10             	add    esp,0x10
c001cbd9:	01 e8                	add    eax,ebp
c001cbdb:	01 d0                	add    eax,edx
c001cbdd:	81 c2 00 01 00 00    	add    edx,0x100
c001cbe3:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001cbe6:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001cbec:	75 af                	jne    c001cb9d <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001cbee:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cbf5:	50                   	push   eax
c001cbf6:	50                   	push   eax
c001cbf7:	53                   	push   ebx
c001cbf8:	57                   	push   edi
c001cbf9:	e8 b4 fe ff ff       	call   c001cab2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001cbfe:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cc05:	83 c4 2c             	add    esp,0x2c
c001cc08:	5b                   	pop    ebx
c001cc09:	5e                   	pop    esi
c001cc0a:	5f                   	pop    edi
c001cc0b:	5d                   	pop    ebp
c001cc0c:	c3                   	ret    
c001cc0d:	90                   	nop

c001cc0e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001cc0e:	55                   	push   ebp
c001cc0f:	57                   	push   edi
c001cc10:	56                   	push   esi
c001cc11:	53                   	push   ebx
c001cc12:	31 db                	xor    ebx,ebx
c001cc14:	83 ec 0c             	sub    esp,0xc
c001cc17:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cc1b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001cc1f:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001cc22:	f7 c7 01 00 00 00    	test   edi,0x1
c001cc28:	74 7a                	je     c001cca4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cc2a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cc2e:	89 d8                	mov    eax,ebx
c001cc30:	c1 e0 07             	shl    eax,0x7
c001cc33:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001cc3a:	55                   	push   ebp
c001cc3b:	56                   	push   esi
c001cc3c:	e8 29 fe ff ff       	call   c001ca6a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001cc41:	5a                   	pop    edx
c001cc42:	59                   	pop    ecx
c001cc43:	83 f8 01             	cmp    eax,0x1
c001cc46:	75 21                	jne    c001cc69 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001cc48:	50                   	push   eax
c001cc49:	53                   	push   ebx
c001cc4a:	55                   	push   ebp
c001cc4b:	56                   	push   esi
c001cc4c:	e8 ab fe ff ff       	call   c001cafc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cc51:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cc58:	e8 a6 ae fe ff       	call   c0007b03 <malloc>
c001cc5d:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc60:	89 c5                	mov    ebp,eax
c001cc62:	e8 c1 10 00 00       	call   c001dd28 <SATA::SATA()>
c001cc67:	eb 24                	jmp    c001cc8d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001cc69:	83 f8 04             	cmp    eax,0x4
c001cc6c:	75 36                	jne    c001cca4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cc6e:	51                   	push   ecx
c001cc6f:	53                   	push   ebx
c001cc70:	55                   	push   ebp
c001cc71:	56                   	push   esi
c001cc72:	e8 85 fe ff ff       	call   c001cafc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cc77:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001cc7e:	e8 80 ae fe ff       	call   c0007b03 <malloc>
c001cc83:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc86:	89 c5                	mov    ebp,eax
c001cc88:	e8 f5 17 00 00       	call   c001e482 <SATAPI::SATAPI()>
c001cc8d:	58                   	pop    eax
c001cc8e:	5a                   	pop    edx
c001cc8f:	55                   	push   ebp
c001cc90:	56                   	push   esi
c001cc91:	e8 3a fd fe ff       	call   c000c9d0 <Device::addChild(Device*)>
c001cc96:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001cc99:	56                   	push   esi
c001cc9a:	6a 00                	push   0x0
c001cc9c:	53                   	push   ebx
c001cc9d:	55                   	push   ebp
c001cc9e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001cca1:	83 c4 20             	add    esp,0x20
c001cca4:	d1 ef                	shr    edi,1
c001cca6:	43                   	inc    ebx
c001cca7:	83 fb 20             	cmp    ebx,0x20
c001ccaa:	0f 85 72 ff ff ff    	jne    c001cc22 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001ccb0:	83 c4 0c             	add    esp,0xc
c001ccb3:	5b                   	pop    ebx
c001ccb4:	5e                   	pop    esi
c001ccb5:	5f                   	pop    edi
c001ccb6:	5d                   	pop    ebp
c001ccb7:	c3                   	ret    

c001ccb8 <SATABus::open(int, int, void*)>:
c001ccb8:	83 ec 14             	sub    esp,0x14
c001ccbb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccbf:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001ccc5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cccb:	52                   	push   edx
c001cccc:	50                   	push   eax
c001cccd:	e8 3c ff ff ff       	call   c001cc0e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001ccd2:	31 c0                	xor    eax,eax
c001ccd4:	83 c4 1c             	add    esp,0x1c
c001ccd7:	c3                   	ret    

c001ccd8 <ATA::close(int, int, void*)>:
c001ccd8:	83 ec 0c             	sub    esp,0xc
c001ccdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccdf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cce5:	85 c0                	test   eax,eax
c001cce7:	74 0c                	je     c001ccf5 <ATA::close(int, int, void*)+0x1d>
c001cce9:	8b 10                	mov    edx,DWORD PTR [eax]
c001cceb:	83 ec 0c             	sub    esp,0xc
c001ccee:	50                   	push   eax
c001ccef:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ccf2:	83 c4 10             	add    esp,0x10
c001ccf5:	31 c0                	xor    eax,eax
c001ccf7:	83 c4 0c             	add    esp,0xc
c001ccfa:	c3                   	ret    
c001ccfb:	90                   	nop

c001ccfc <ATA::powerSaving(PowerSavingLevel)>:
c001ccfc:	c3                   	ret    
c001ccfd:	90                   	nop

c001ccfe <ATA::ATA()>:
c001ccfe:	83 ec 0c             	sub    esp,0xc
c001cd01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd05:	83 ec 04             	sub    esp,0x4
c001cd08:	68 00 02 00 00       	push   0x200
c001cd0d:	68 e9 35 02 c0       	push   0xc00235e9
c001cd12:	50                   	push   eax
c001cd13:	e8 be 00 ff ff       	call   c000cdd6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cd18:	83 c4 10             	add    esp,0x10
c001cd1b:	ba 5c 35 02 c0       	mov    edx,0xc002355c
c001cd20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd24:	89 10                	mov    DWORD PTR [eax],edx
c001cd26:	90                   	nop
c001cd27:	83 c4 0c             	add    esp,0xc
c001cd2a:	c3                   	ret    
c001cd2b:	90                   	nop

c001cd2c <ATA::flush(bool)>:
c001cd2c:	53                   	push   ebx
c001cd2d:	83 ec 08             	sub    esp,0x8
c001cd30:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001cd35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cd39:	83 f8 01             	cmp    eax,0x1
c001cd3c:	19 c0                	sbb    eax,eax
c001cd3e:	83 e0 fd             	and    eax,0xfffffffd
c001cd41:	05 ea 00 00 00       	add    eax,0xea
c001cd46:	50                   	push   eax
c001cd47:	6a 07                	push   0x7
c001cd49:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd50:	50                   	push   eax
c001cd51:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd57:	e8 18 f1 ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd5c:	83 c4 0c             	add    esp,0xc
c001cd5f:	6a 00                	push   0x0
c001cd61:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd68:	50                   	push   eax
c001cd69:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd6f:	e8 e4 fb ff ff       	call   c001c958 <IDE::polling(unsigned char, unsigned int)>
c001cd74:	83 c4 18             	add    esp,0x18
c001cd77:	5b                   	pop    ebx
c001cd78:	c3                   	ret    
c001cd79:	90                   	nop

c001cd7a <ATA::readyForCommand()>:
c001cd7a:	56                   	push   esi
c001cd7b:	53                   	push   ebx
c001cd7c:	53                   	push   ebx
c001cd7d:	31 db                	xor    ebx,ebx
c001cd7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cd83:	51                   	push   ecx
c001cd84:	6a 0c                	push   0xc
c001cd86:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cd8d:	50                   	push   eax
c001cd8e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cd94:	e8 9b f1 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001cd99:	83 c4 10             	add    esp,0x10
c001cd9c:	a8 88                	test   al,0x88
c001cd9e:	74 1f                	je     c001cdbf <ATA::readyForCommand()+0x45>
c001cda0:	43                   	inc    ebx
c001cda1:	83 fb 63             	cmp    ebx,0x63
c001cda4:	7e dd                	jle    c001cd83 <ATA::readyForCommand()+0x9>
c001cda6:	83 ec 0c             	sub    esp,0xc
c001cda9:	6a 0a                	push   0xa
c001cdab:	e8 f0 96 ff ff       	call   c00164a0 <milliTenthSleep(unsigned int)>
c001cdb0:	83 c4 10             	add    esp,0x10
c001cdb3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cdb9:	75 c8                	jne    c001cd83 <ATA::readyForCommand()+0x9>
c001cdbb:	31 c0                	xor    eax,eax
c001cdbd:	eb 02                	jmp    c001cdc1 <ATA::readyForCommand()+0x47>
c001cdbf:	b0 01                	mov    al,0x1
c001cdc1:	5a                   	pop    edx
c001cdc2:	5b                   	pop    ebx
c001cdc3:	5e                   	pop    esi
c001cdc4:	c3                   	ret    
c001cdc5:	90                   	nop

c001cdc6 <ATA::access(unsigned long long, int, void*, bool)>:
c001cdc6:	55                   	push   ebp
c001cdc7:	57                   	push   edi
c001cdc8:	56                   	push   esi
c001cdc9:	53                   	push   ebx
c001cdca:	83 ec 2c             	sub    esp,0x2c
c001cdcd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cdd1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cdd5:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cdd9:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cddd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cde1:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001cde5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001cde9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001cdef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cdf3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cdf9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cdfd:	c1 e0 06             	shl    eax,0x6
c001ce00:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001ce08:	74 5b                	je     c001ce65 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001ce0a:	89 fa                	mov    edx,edi
c001ce0c:	89 f0                	mov    eax,esi
c001ce0e:	c1 ea 1c             	shr    edx,0x1c
c001ce11:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001ce15:	89 d1                	mov    ecx,edx
c001ce17:	09 c1                	or     ecx,eax
c001ce19:	74 25                	je     c001ce40 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001ce1b:	31 ed                	xor    ebp,ebp
c001ce1d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001ce24:	89 fa                	mov    edx,edi
c001ce26:	89 f0                	mov    eax,esi
c001ce28:	0f ad d0             	shrd   eax,edx,cl
c001ce2b:	d3 ea                	shr    edx,cl
c001ce2d:	f6 c1 20             	test   cl,0x20
c001ce30:	74 02                	je     c001ce34 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001ce32:	89 d0                	mov    eax,edx
c001ce34:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001ce38:	45                   	inc    ebp
c001ce39:	83 fd 06             	cmp    ebp,0x6
c001ce3c:	75 df                	jne    c001ce1d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001ce3e:	eb 71                	jmp    c001ceb1 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001ce40:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001ce45:	89 f0                	mov    eax,esi
c001ce47:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ce4e:	0f ac f8 10          	shrd   eax,edi,0x10
c001ce52:	bf 01 00 00 00       	mov    edi,0x1
c001ce57:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ce5b:	c1 ee 18             	shr    esi,0x18
c001ce5e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ce63:	eb 53                	jmp    c001ceb8 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001ce65:	6a 00                	push   0x0
c001ce67:	6a 3f                	push   0x3f
c001ce69:	57                   	push   edi
c001ce6a:	56                   	push   esi
c001ce6b:	e8 d0 2a 00 00       	call   c001f940 <__umoddi3>
c001ce70:	83 c4 10             	add    esp,0x10
c001ce73:	40                   	inc    eax
c001ce74:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001ce78:	6a 00                	push   0x0
c001ce7a:	68 f0 03 00 00       	push   0x3f0
c001ce7f:	57                   	push   edi
c001ce80:	56                   	push   esi
c001ce81:	e8 ba 29 00 00       	call   c001f840 <__udivdi3>
c001ce86:	83 c4 10             	add    esp,0x10
c001ce89:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001ce8e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ce95:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ce9a:	6a 00                	push   0x0
c001ce9c:	6a 3f                	push   0x3f
c001ce9e:	57                   	push   edi
c001ce9f:	31 ff                	xor    edi,edi
c001cea1:	56                   	push   esi
c001cea2:	e8 99 29 00 00       	call   c001f840 <__udivdi3>
c001cea7:	83 c4 10             	add    esp,0x10
c001ceaa:	83 e0 0f             	and    eax,0xf
c001cead:	89 c6                	mov    esi,eax
c001ceaf:	eb 07                	jmp    c001ceb8 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001ceb1:	31 f6                	xor    esi,esi
c001ceb3:	bf 02 00 00 00       	mov    edi,0x2
c001ceb8:	50                   	push   eax
c001ceb9:	6a 00                	push   0x0
c001cebb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cec2:	50                   	push   eax
c001cec3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cec7:	e8 b6 f1 ff ff       	call   c001c082 <IDE::enableIRQs(unsigned char, bool)>
c001cecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cecf:	e8 a6 fe ff ff       	call   c001cd7a <ATA::readyForCommand()>
c001ced4:	83 c4 10             	add    esp,0x10
c001ced7:	84 c0                	test   al,al
c001ced9:	75 0a                	jne    c001cee5 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001cedb:	be 01 00 00 00       	mov    esi,0x1
c001cee0:	e9 9b 02 00 00       	jmp    c001d180 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001cee5:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ceeb:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cef1:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001cef8:	c1 e0 04             	shl    eax,0x4
c001cefb:	09 c6                	or     esi,eax
c001cefd:	f7 c7 03 00 00 00    	test   edi,0x3
c001cf03:	75 05                	jne    c001cf0a <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001cf05:	83 ce a0             	or     esi,0xffffffa0
c001cf08:	eb 03                	jmp    c001cf0d <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001cf0a:	83 ce e0             	or     esi,0xffffffe0
c001cf0d:	89 f0                	mov    eax,esi
c001cf0f:	0f b6 f0             	movzx  esi,al
c001cf12:	56                   	push   esi
c001cf13:	6a 06                	push   0x6
c001cf15:	51                   	push   ecx
c001cf16:	52                   	push   edx
c001cf17:	e8 58 ef ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf1c:	83 c4 10             	add    esp,0x10
c001cf1f:	6a 00                	push   0x0
c001cf21:	6a 01                	push   0x1
c001cf23:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf2a:	50                   	push   eax
c001cf2b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf31:	e8 3e ef ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf36:	89 f8                	mov    eax,edi
c001cf38:	83 c4 10             	add    esp,0x10
c001cf3b:	0f b6 f0             	movzx  esi,al
c001cf3e:	83 fe 02             	cmp    esi,0x2
c001cf41:	75 6e                	jne    c001cfb1 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001cf43:	6a 00                	push   0x0
c001cf45:	6a 08                	push   0x8
c001cf47:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf4e:	50                   	push   eax
c001cf4f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf55:	e8 1a ef ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf5a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001cf5f:	50                   	push   eax
c001cf60:	6a 09                	push   0x9
c001cf62:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf69:	50                   	push   eax
c001cf6a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf70:	e8 ff ee ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf75:	83 c4 20             	add    esp,0x20
c001cf78:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001cf7d:	50                   	push   eax
c001cf7e:	6a 0a                	push   0xa
c001cf80:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf87:	50                   	push   eax
c001cf88:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf8e:	e8 e1 ee ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf93:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001cf98:	50                   	push   eax
c001cf99:	6a 0b                	push   0xb
c001cf9b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfa2:	50                   	push   eax
c001cfa3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfa9:	e8 c6 ee ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfae:	83 c4 20             	add    esp,0x20
c001cfb1:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001cfb6:	50                   	push   eax
c001cfb7:	6a 02                	push   0x2
c001cfb9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfc0:	50                   	push   eax
c001cfc1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfc7:	e8 a8 ee ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfcc:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001cfd1:	50                   	push   eax
c001cfd2:	6a 03                	push   0x3
c001cfd4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfdb:	50                   	push   eax
c001cfdc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfe2:	e8 8d ee ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfe7:	83 c4 20             	add    esp,0x20
c001cfea:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cfef:	50                   	push   eax
c001cff0:	6a 04                	push   0x4
c001cff2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cff9:	50                   	push   eax
c001cffa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d000:	e8 6f ee ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d005:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d00a:	50                   	push   eax
c001d00b:	6a 05                	push   0x5
c001d00d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d014:	50                   	push   eax
c001d015:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d01b:	e8 54 ee ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d020:	83 c4 20             	add    esp,0x20
c001d023:	83 fe 02             	cmp    esi,0x2
c001d026:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001d02b:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001d030:	85 c9                	test   ecx,ecx
c001d032:	74 07                	je     c001d03b <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001d034:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d039:	75 47                	jne    c001d082 <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001d03b:	89 f8                	mov    eax,edi
c001d03d:	0f b6 f8             	movzx  edi,al
c001d040:	31 c0                	xor    eax,eax
c001d042:	83 ff 02             	cmp    edi,0x2
c001d045:	0f 95 c0             	setne  al
c001d048:	89 c6                	mov    esi,eax
c001d04a:	74 0c                	je     c001d058 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001d04c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d051:	b8 30 00 00 00       	mov    eax,0x30
c001d056:	75 2f                	jne    c001d087 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001d058:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d05c:	83 f2 01             	xor    edx,0x1
c001d05f:	85 c9                	test   ecx,ecx
c001d061:	74 09                	je     c001d06c <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001d063:	84 d2                	test   dl,dl
c001d065:	b8 24 00 00 00       	mov    eax,0x24
c001d06a:	75 1b                	jne    c001d087 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001d06c:	85 f6                	test   esi,esi
c001d06e:	0f 84 67 fe ff ff    	je     c001cedb <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d074:	84 d2                	test   dl,dl
c001d076:	b8 20 00 00 00       	mov    eax,0x20
c001d07b:	75 0a                	jne    c001d087 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001d07d:	e9 59 fe ff ff       	jmp    c001cedb <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d082:	b8 34 00 00 00       	mov    eax,0x34
c001d087:	50                   	push   eax
c001d088:	6a 07                	push   0x7
c001d08a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d091:	50                   	push   eax
c001d092:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d098:	e8 d7 ed ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d09d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d0a1:	83 c4 10             	add    esp,0x10
c001d0a4:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001d0a9:	85 f6                	test   esi,esi
c001d0ab:	0f 84 b5 00 00 00    	je     c001d166 <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001d0b1:	50                   	push   eax
c001d0b2:	6a 01                	push   0x1
c001d0b4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d0bb:	50                   	push   eax
c001d0bc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0c2:	e8 91 f8 ff ff       	call   c001c958 <IDE::polling(unsigned char, unsigned int)>
c001d0c7:	83 c4 10             	add    esp,0x10
c001d0ca:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d0d0:	0f b6 c0             	movzx  eax,al
c001d0d3:	85 c0                	test   eax,eax
c001d0d5:	74 1f                	je     c001d0f6 <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001d0d7:	50                   	push   eax
c001d0d8:	89 c6                	mov    esi,eax
c001d0da:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d0e1:	0f b6 d2             	movzx  edx,dl
c001d0e4:	50                   	push   eax
c001d0e5:	52                   	push   edx
c001d0e6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0ec:	e8 ad f7 ff ff       	call   c001c89e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d0f1:	e9 87 00 00 00       	jmp    c001d17d <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001d0f6:	85 ed                	test   ebp,ebp
c001d0f8:	74 3b                	je     c001d135 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001d0fa:	31 ff                	xor    edi,edi
c001d0fc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d100:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001d104:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001d109:	50                   	push   eax
c001d10a:	50                   	push   eax
c001d10b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d112:	50                   	push   eax
c001d113:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d119:	e8 44 ed ff ff       	call   c001be62 <IDE::getBase(unsigned char)>
c001d11e:	89 c2                	mov    edx,eax
c001d120:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001d125:	66 ef                	out    dx,ax
c001d127:	47                   	inc    edi
c001d128:	83 c4 10             	add    esp,0x10
c001d12b:	81 ff 00 01 00 00    	cmp    edi,0x100
c001d131:	75 c9                	jne    c001d0fc <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001d133:	eb 23                	jmp    c001d158 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001d135:	51                   	push   ecx
c001d136:	0f b6 d2             	movzx  edx,dl
c001d139:	51                   	push   ecx
c001d13a:	52                   	push   edx
c001d13b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d141:	e8 1c ed ff ff       	call   c001be62 <IDE::getBase(unsigned char)>
c001d146:	b9 00 01 00 00       	mov    ecx,0x100
c001d14b:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d14f:	89 c2                	mov    edx,eax
c001d151:	fc                   	cld    
c001d152:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d155:	83 c4 10             	add    esp,0x10
c001d158:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001d160:	4e                   	dec    esi
c001d161:	e9 43 ff ff ff       	jmp    c001d0a9 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001d166:	31 f6                	xor    esi,esi
c001d168:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d16d:	74 11                	je     c001d180 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001d16f:	50                   	push   eax
c001d170:	50                   	push   eax
c001d171:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001d176:	50                   	push   eax
c001d177:	53                   	push   ebx
c001d178:	e8 af fb ff ff       	call   c001cd2c <ATA::flush(bool)>
c001d17d:	83 c4 10             	add    esp,0x10
c001d180:	83 c4 2c             	add    esp,0x2c
c001d183:	89 f0                	mov    eax,esi
c001d185:	5b                   	pop    ebx
c001d186:	5e                   	pop    esi
c001d187:	5f                   	pop    edi
c001d188:	5d                   	pop    ebp
c001d189:	c3                   	ret    

c001d18a <ATA::detectCHS()>:
c001d18a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d18e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d194:	c1 e0 06             	shl    eax,0x6
c001d197:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d19d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d1a7:	c7 44 24 04 40 35 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023540
c001d1af:	e9 a3 44 ff ff       	jmp    c0011657 <KePanic(char const*)>

c001d1b4 <ATA::open(int, int, void*)>:
c001d1b4:	53                   	push   ebx
c001d1b5:	83 ec 08             	sub    esp,0x8
c001d1b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d1bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d1c4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d1ca:	c1 e0 06             	shl    eax,0x6
c001d1cd:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d1d3:	01 d0                	add    eax,edx
c001d1d5:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d1dc:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d1e2:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d1e9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d1f3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d1fa:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d200:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d207:	75 0c                	jne    c001d215 <ATA::open(int, int, void*)+0x61>
c001d209:	83 ec 0c             	sub    esp,0xc
c001d20c:	53                   	push   ebx
c001d20d:	e8 78 ff ff ff       	call   c001d18a <ATA::detectCHS()>
c001d212:	83 c4 10             	add    esp,0x10
c001d215:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d21b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d221:	c1 e0 06             	shl    eax,0x6
c001d224:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d22b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d235:	d1 e8                	shr    eax,1
c001d237:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d23d:	6a 04                	push   0x4
c001d23f:	6a 0c                	push   0xc
c001d241:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d248:	50                   	push   eax
c001d249:	52                   	push   edx
c001d24a:	e8 25 ec ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d24f:	90                   	nop
c001d250:	90                   	nop
c001d251:	6a 00                	push   0x0
c001d253:	6a 0c                	push   0xc
c001d255:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d25c:	50                   	push   eax
c001d25d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d263:	e8 0c ec ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d268:	83 c4 14             	add    esp,0x14
c001d26b:	53                   	push   ebx
c001d26c:	e8 cd fb fe ff       	call   c000ce3e <PhysicalDisk::startCache()>
c001d271:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d274:	e8 11 0e ff ff       	call   c000e08a <createPartitionsForDisk(PhysicalDisk*)>
c001d279:	83 c4 18             	add    esp,0x18
c001d27c:	31 c0                	xor    eax,eax
c001d27e:	5b                   	pop    ebx
c001d27f:	c3                   	ret    

c001d280 <combineCharAndColour(char, unsigned char)>:
c001d280:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d285:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001d28b:	c1 e0 08             	shl    eax,0x8
c001d28e:	09 d0                	or     eax,edx
c001d290:	c3                   	ret    

c001d291 <combineColours(unsigned char, unsigned char)>:
c001d291:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d296:	c1 e0 04             	shl    eax,0x4
c001d299:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001d29d:	c3                   	ret    

c001d29e <ATA::read(unsigned long long, int, void*)>:
c001d29e:	55                   	push   ebp
c001d29f:	57                   	push   edi
c001d2a0:	56                   	push   esi
c001d2a1:	be 04 00 00 00       	mov    esi,0x4
c001d2a6:	53                   	push   ebx
c001d2a7:	83 ec 0c             	sub    esp,0xc
c001d2aa:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d2ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d2b2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d2b6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d2ba:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d2bd:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d2c3:	0f 87 a1 01 00 00    	ja     c001d46a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d2c9:	85 c9                	test   ecx,ecx
c001d2cb:	be 06 00 00 00       	mov    esi,0x6
c001d2d0:	0f 84 94 01 00 00    	je     c001d46a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d2d6:	55                   	push   ebp
c001d2d7:	55                   	push   ebp
c001d2d8:	6a 00                	push   0x0
c001d2da:	51                   	push   ecx
c001d2db:	53                   	push   ebx
c001d2dc:	52                   	push   edx
c001d2dd:	50                   	push   eax
c001d2de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d2e2:	e8 df fa ff ff       	call   c001cdc6 <ATA::access(unsigned long long, int, void*, bool)>
c001d2e7:	83 c4 20             	add    esp,0x20
c001d2ea:	85 c0                	test   eax,eax
c001d2ec:	89 c6                	mov    esi,eax
c001d2ee:	0f 85 71 01 00 00    	jne    c001d465 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001d2f4:	50                   	push   eax
c001d2f5:	bd 10 27 00 00       	mov    ebp,0x2710
c001d2fa:	50                   	push   eax
c001d2fb:	03 1d b4 d0 02 c0    	add    ebx,DWORD PTR ds:0xc002d0b4
c001d301:	6a 0f                	push   0xf
c001d303:	6a 00                	push   0x0
c001d305:	89 da                	mov    edx,ebx
c001d307:	89 1d b4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0b4,ebx
c001d30d:	e8 7f ff ff ff       	call   c001d291 <combineColours(unsigned char, unsigned char)>
c001d312:	59                   	pop    ecx
c001d313:	b9 0a 00 00 00       	mov    ecx,0xa
c001d318:	5b                   	pop    ebx
c001d319:	0f b6 d8             	movzx  ebx,al
c001d31c:	89 d0                	mov    eax,edx
c001d31e:	53                   	push   ebx
c001d31f:	99                   	cdq    
c001d320:	f7 fd                	idiv   ebp
c001d322:	99                   	cdq    
c001d323:	f7 f9                	idiv   ecx
c001d325:	83 c2 30             	add    edx,0x30
c001d328:	0f b6 d2             	movzx  edx,dl
c001d32b:	52                   	push   edx
c001d32c:	e8 4f ff ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001d331:	5f                   	pop    edi
c001d332:	bf e8 03 00 00       	mov    edi,0x3e8
c001d337:	5a                   	pop    edx
c001d338:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d33e:	53                   	push   ebx
c001d33f:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d344:	99                   	cdq    
c001d345:	f7 ff                	idiv   edi
c001d347:	99                   	cdq    
c001d348:	f7 f9                	idiv   ecx
c001d34a:	8d 42 30             	lea    eax,[edx+0x30]
c001d34d:	0f b6 c0             	movzx  eax,al
c001d350:	50                   	push   eax
c001d351:	e8 2a ff ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001d356:	5f                   	pop    edi
c001d357:	bf 64 00 00 00       	mov    edi,0x64
c001d35c:	5a                   	pop    edx
c001d35d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d363:	53                   	push   ebx
c001d364:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d369:	99                   	cdq    
c001d36a:	f7 ff                	idiv   edi
c001d36c:	99                   	cdq    
c001d36d:	f7 f9                	idiv   ecx
c001d36f:	8d 42 30             	lea    eax,[edx+0x30]
c001d372:	0f b6 c0             	movzx  eax,al
c001d375:	50                   	push   eax
c001d376:	e8 05 ff ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001d37b:	5a                   	pop    edx
c001d37c:	5a                   	pop    edx
c001d37d:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d383:	53                   	push   ebx
c001d384:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d389:	99                   	cdq    
c001d38a:	f7 f9                	idiv   ecx
c001d38c:	99                   	cdq    
c001d38d:	f7 f9                	idiv   ecx
c001d38f:	8d 42 30             	lea    eax,[edx+0x30]
c001d392:	0f b6 c0             	movzx  eax,al
c001d395:	50                   	push   eax
c001d396:	e8 e5 fe ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001d39b:	5a                   	pop    edx
c001d39c:	5a                   	pop    edx
c001d39d:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d3a3:	53                   	push   ebx
c001d3a4:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3a9:	99                   	cdq    
c001d3aa:	f7 f9                	idiv   ecx
c001d3ac:	83 c2 30             	add    edx,0x30
c001d3af:	0f b6 d2             	movzx  edx,dl
c001d3b2:	52                   	push   edx
c001d3b3:	e8 c8 fe ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001d3b8:	5a                   	pop    edx
c001d3b9:	5a                   	pop    edx
c001d3ba:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d3c0:	53                   	push   ebx
c001d3c1:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d3c6:	99                   	cdq    
c001d3c7:	f7 fd                	idiv   ebp
c001d3c9:	99                   	cdq    
c001d3ca:	f7 f9                	idiv   ecx
c001d3cc:	8d 42 30             	lea    eax,[edx+0x30]
c001d3cf:	0f b6 c0             	movzx  eax,al
c001d3d2:	50                   	push   eax
c001d3d3:	e8 a8 fe ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001d3d8:	5d                   	pop    ebp
c001d3d9:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d3de:	5a                   	pop    edx
c001d3df:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d3e5:	53                   	push   ebx
c001d3e6:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d3eb:	99                   	cdq    
c001d3ec:	f7 fd                	idiv   ebp
c001d3ee:	99                   	cdq    
c001d3ef:	f7 f9                	idiv   ecx
c001d3f1:	8d 42 30             	lea    eax,[edx+0x30]
c001d3f4:	0f b6 c0             	movzx  eax,al
c001d3f7:	50                   	push   eax
c001d3f8:	e8 83 fe ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001d3fd:	5d                   	pop    ebp
c001d3fe:	5a                   	pop    edx
c001d3ff:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d405:	53                   	push   ebx
c001d406:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d40b:	99                   	cdq    
c001d40c:	f7 ff                	idiv   edi
c001d40e:	99                   	cdq    
c001d40f:	f7 f9                	idiv   ecx
c001d411:	8d 42 30             	lea    eax,[edx+0x30]
c001d414:	0f b6 c0             	movzx  eax,al
c001d417:	50                   	push   eax
c001d418:	e8 63 fe ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001d41d:	5f                   	pop    edi
c001d41e:	5d                   	pop    ebp
c001d41f:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d425:	53                   	push   ebx
c001d426:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d42b:	99                   	cdq    
c001d42c:	f7 f9                	idiv   ecx
c001d42e:	99                   	cdq    
c001d42f:	f7 f9                	idiv   ecx
c001d431:	8d 42 30             	lea    eax,[edx+0x30]
c001d434:	0f b6 c0             	movzx  eax,al
c001d437:	50                   	push   eax
c001d438:	e8 43 fe ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001d43d:	5a                   	pop    edx
c001d43e:	5f                   	pop    edi
c001d43f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d445:	53                   	push   ebx
c001d446:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d44b:	99                   	cdq    
c001d44c:	f7 f9                	idiv   ecx
c001d44e:	83 c2 30             	add    edx,0x30
c001d451:	0f b6 d2             	movzx  edx,dl
c001d454:	52                   	push   edx
c001d455:	e8 26 fe ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001d45a:	83 c4 10             	add    esp,0x10
c001d45d:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d463:	eb 05                	jmp    c001d46a <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d465:	be 01 00 00 00       	mov    esi,0x1
c001d46a:	83 c4 0c             	add    esp,0xc
c001d46d:	89 f0                	mov    eax,esi
c001d46f:	5b                   	pop    ebx
c001d470:	5e                   	pop    esi
c001d471:	5f                   	pop    edi
c001d472:	5d                   	pop    ebp
c001d473:	c3                   	ret    

c001d474 <ATA::write(unsigned long long, int, void*)>:
c001d474:	55                   	push   ebp
c001d475:	57                   	push   edi
c001d476:	56                   	push   esi
c001d477:	be 04 00 00 00       	mov    esi,0x4
c001d47c:	53                   	push   ebx
c001d47d:	83 ec 0c             	sub    esp,0xc
c001d480:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d484:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d488:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d48c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d490:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d493:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d499:	0f 87 9c 01 00 00    	ja     c001d63b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d49f:	85 c9                	test   ecx,ecx
c001d4a1:	be 06 00 00 00       	mov    esi,0x6
c001d4a6:	0f 84 8f 01 00 00    	je     c001d63b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d4ac:	55                   	push   ebp
c001d4ad:	55                   	push   ebp
c001d4ae:	6a 01                	push   0x1
c001d4b0:	51                   	push   ecx
c001d4b1:	53                   	push   ebx
c001d4b2:	52                   	push   edx
c001d4b3:	50                   	push   eax
c001d4b4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d4b8:	e8 09 f9 ff ff       	call   c001cdc6 <ATA::access(unsigned long long, int, void*, bool)>
c001d4bd:	83 c4 20             	add    esp,0x20
c001d4c0:	85 c0                	test   eax,eax
c001d4c2:	89 c6                	mov    esi,eax
c001d4c4:	0f 85 6c 01 00 00    	jne    c001d636 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d4ca:	50                   	push   eax
c001d4cb:	bd 10 27 00 00       	mov    ebp,0x2710
c001d4d0:	50                   	push   eax
c001d4d1:	6a 0f                	push   0xf
c001d4d3:	6a 00                	push   0x0
c001d4d5:	01 1d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebx
c001d4db:	e8 b1 fd ff ff       	call   c001d291 <combineColours(unsigned char, unsigned char)>
c001d4e0:	5a                   	pop    edx
c001d4e1:	59                   	pop    ecx
c001d4e2:	b9 0a 00 00 00       	mov    ecx,0xa
c001d4e7:	0f b6 d8             	movzx  ebx,al
c001d4ea:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d4ef:	53                   	push   ebx
c001d4f0:	99                   	cdq    
c001d4f1:	f7 fd                	idiv   ebp
c001d4f3:	99                   	cdq    
c001d4f4:	f7 f9                	idiv   ecx
c001d4f6:	8d 42 30             	lea    eax,[edx+0x30]
c001d4f9:	0f b6 c0             	movzx  eax,al
c001d4fc:	50                   	push   eax
c001d4fd:	e8 7e fd ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001d502:	5f                   	pop    edi
c001d503:	bf e8 03 00 00       	mov    edi,0x3e8
c001d508:	5a                   	pop    edx
c001d509:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d50f:	53                   	push   ebx
c001d510:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d515:	99                   	cdq    
c001d516:	f7 ff                	idiv   edi
c001d518:	99                   	cdq    
c001d519:	f7 f9                	idiv   ecx
c001d51b:	8d 42 30             	lea    eax,[edx+0x30]
c001d51e:	0f b6 c0             	movzx  eax,al
c001d521:	50                   	push   eax
c001d522:	e8 59 fd ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001d527:	5f                   	pop    edi
c001d528:	bf 64 00 00 00       	mov    edi,0x64
c001d52d:	5a                   	pop    edx
c001d52e:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d534:	53                   	push   ebx
c001d535:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d53a:	99                   	cdq    
c001d53b:	f7 ff                	idiv   edi
c001d53d:	99                   	cdq    
c001d53e:	f7 f9                	idiv   ecx
c001d540:	8d 42 30             	lea    eax,[edx+0x30]
c001d543:	0f b6 c0             	movzx  eax,al
c001d546:	50                   	push   eax
c001d547:	e8 34 fd ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001d54c:	5a                   	pop    edx
c001d54d:	5a                   	pop    edx
c001d54e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d554:	53                   	push   ebx
c001d555:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d55a:	99                   	cdq    
c001d55b:	f7 f9                	idiv   ecx
c001d55d:	99                   	cdq    
c001d55e:	f7 f9                	idiv   ecx
c001d560:	8d 42 30             	lea    eax,[edx+0x30]
c001d563:	0f b6 c0             	movzx  eax,al
c001d566:	50                   	push   eax
c001d567:	e8 14 fd ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001d56c:	5a                   	pop    edx
c001d56d:	5a                   	pop    edx
c001d56e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d574:	53                   	push   ebx
c001d575:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d57a:	99                   	cdq    
c001d57b:	f7 f9                	idiv   ecx
c001d57d:	83 c2 30             	add    edx,0x30
c001d580:	0f b6 d2             	movzx  edx,dl
c001d583:	52                   	push   edx
c001d584:	e8 f7 fc ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001d589:	5a                   	pop    edx
c001d58a:	5a                   	pop    edx
c001d58b:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d591:	53                   	push   ebx
c001d592:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d597:	99                   	cdq    
c001d598:	f7 fd                	idiv   ebp
c001d59a:	99                   	cdq    
c001d59b:	f7 f9                	idiv   ecx
c001d59d:	8d 42 30             	lea    eax,[edx+0x30]
c001d5a0:	0f b6 c0             	movzx  eax,al
c001d5a3:	50                   	push   eax
c001d5a4:	e8 d7 fc ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001d5a9:	5d                   	pop    ebp
c001d5aa:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d5af:	5a                   	pop    edx
c001d5b0:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d5b6:	53                   	push   ebx
c001d5b7:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d5bc:	99                   	cdq    
c001d5bd:	f7 fd                	idiv   ebp
c001d5bf:	99                   	cdq    
c001d5c0:	f7 f9                	idiv   ecx
c001d5c2:	8d 42 30             	lea    eax,[edx+0x30]
c001d5c5:	0f b6 c0             	movzx  eax,al
c001d5c8:	50                   	push   eax
c001d5c9:	e8 b2 fc ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001d5ce:	5d                   	pop    ebp
c001d5cf:	5a                   	pop    edx
c001d5d0:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d5d6:	53                   	push   ebx
c001d5d7:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d5dc:	99                   	cdq    
c001d5dd:	f7 ff                	idiv   edi
c001d5df:	99                   	cdq    
c001d5e0:	f7 f9                	idiv   ecx
c001d5e2:	8d 42 30             	lea    eax,[edx+0x30]
c001d5e5:	0f b6 c0             	movzx  eax,al
c001d5e8:	50                   	push   eax
c001d5e9:	e8 92 fc ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001d5ee:	5f                   	pop    edi
c001d5ef:	5d                   	pop    ebp
c001d5f0:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d5f6:	53                   	push   ebx
c001d5f7:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d5fc:	99                   	cdq    
c001d5fd:	f7 f9                	idiv   ecx
c001d5ff:	99                   	cdq    
c001d600:	f7 f9                	idiv   ecx
c001d602:	8d 42 30             	lea    eax,[edx+0x30]
c001d605:	0f b6 c0             	movzx  eax,al
c001d608:	50                   	push   eax
c001d609:	e8 72 fc ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001d60e:	5a                   	pop    edx
c001d60f:	5f                   	pop    edi
c001d610:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d616:	53                   	push   ebx
c001d617:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d61c:	99                   	cdq    
c001d61d:	f7 f9                	idiv   ecx
c001d61f:	83 c2 30             	add    edx,0x30
c001d622:	0f b6 d2             	movzx  edx,dl
c001d625:	52                   	push   edx
c001d626:	e8 55 fc ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001d62b:	83 c4 10             	add    esp,0x10
c001d62e:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d634:	eb 05                	jmp    c001d63b <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d636:	be 01 00 00 00       	mov    esi,0x1
c001d63b:	83 c4 0c             	add    esp,0xc
c001d63e:	89 f0                	mov    eax,esi
c001d640:	5b                   	pop    ebx
c001d641:	5e                   	pop    esi
c001d642:	5f                   	pop    edi
c001d643:	5d                   	pop    ebp
c001d644:	c3                   	ret    
c001d645:	90                   	nop

c001d646 <ATAPI::write(unsigned long long, int, void*)>:
c001d646:	b8 03 00 00 00       	mov    eax,0x3
c001d64b:	c3                   	ret    

c001d64c <ATAPI::close(int, int, void*)>:
c001d64c:	83 ec 0c             	sub    esp,0xc
c001d64f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d653:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d659:	85 c0                	test   eax,eax
c001d65b:	74 0c                	je     c001d669 <ATAPI::close(int, int, void*)+0x1d>
c001d65d:	8b 10                	mov    edx,DWORD PTR [eax]
c001d65f:	83 ec 0c             	sub    esp,0xc
c001d662:	50                   	push   eax
c001d663:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d666:	83 c4 10             	add    esp,0x10
c001d669:	31 c0                	xor    eax,eax
c001d66b:	83 c4 0c             	add    esp,0xc
c001d66e:	c3                   	ret    
c001d66f:	90                   	nop

c001d670 <ATAPI::ATAPI()>:
c001d670:	83 ec 0c             	sub    esp,0xc
c001d673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d677:	83 ec 04             	sub    esp,0x4
c001d67a:	68 00 08 00 00       	push   0x800
c001d67f:	68 89 36 02 c0       	push   0xc0023689
c001d684:	50                   	push   eax
c001d685:	e8 4c f7 fe ff       	call   c000cdd6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d68a:	83 c4 10             	add    esp,0x10
c001d68d:	ba a4 35 02 c0       	mov    edx,0xc00235a4
c001d692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d696:	89 10                	mov    DWORD PTR [eax],edx
c001d698:	90                   	nop
c001d699:	83 c4 0c             	add    esp,0xc
c001d69c:	c3                   	ret    
c001d69d:	90                   	nop

c001d69e <ATAPI::readyForCommand()>:
c001d69e:	56                   	push   esi
c001d69f:	53                   	push   ebx
c001d6a0:	53                   	push   ebx
c001d6a1:	31 db                	xor    ebx,ebx
c001d6a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d6a7:	51                   	push   ecx
c001d6a8:	6a 0c                	push   0xc
c001d6aa:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d6b1:	50                   	push   eax
c001d6b2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d6b8:	e8 77 e8 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001d6bd:	83 c4 10             	add    esp,0x10
c001d6c0:	a8 88                	test   al,0x88
c001d6c2:	74 25                	je     c001d6e9 <ATAPI::readyForCommand()+0x4b>
c001d6c4:	43                   	inc    ebx
c001d6c5:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d6cb:	7e da                	jle    c001d6a7 <ATAPI::readyForCommand()+0x9>
c001d6cd:	83 ec 0c             	sub    esp,0xc
c001d6d0:	68 5e 01 00 00       	push   0x15e
c001d6d5:	e8 c6 8d ff ff       	call   c00164a0 <milliTenthSleep(unsigned int)>
c001d6da:	83 c4 10             	add    esp,0x10
c001d6dd:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d6e3:	75 c2                	jne    c001d6a7 <ATAPI::readyForCommand()+0x9>
c001d6e5:	31 c0                	xor    eax,eax
c001d6e7:	eb 02                	jmp    c001d6eb <ATAPI::readyForCommand()+0x4d>
c001d6e9:	b0 01                	mov    al,0x1
c001d6eb:	5a                   	pop    edx
c001d6ec:	5b                   	pop    ebx
c001d6ed:	5e                   	pop    esi
c001d6ee:	c3                   	ret    
c001d6ef:	90                   	nop

c001d6f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d6f0:	55                   	push   ebp
c001d6f1:	57                   	push   edi
c001d6f2:	56                   	push   esi
c001d6f3:	53                   	push   ebx
c001d6f4:	83 ec 20             	sub    esp,0x20
c001d6f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d6fb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d6ff:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d703:	6a 01                	push   0x1
c001d705:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d70c:	50                   	push   eax
c001d70d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d713:	e8 6a e9 ff ff       	call   c001c082 <IDE::enableIRQs(unsigned char, bool)>
c001d718:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d71f:	59                   	pop    ecx
c001d720:	5e                   	pop    esi
c001d721:	50                   	push   eax
c001d722:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d728:	e8 21 e7 ff ff       	call   c001be4e <IDE::prepareInterrupt(unsigned char)>
c001d72d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d730:	e8 69 ff ff ff       	call   c001d69e <ATAPI::readyForCommand()>
c001d735:	83 c4 10             	add    esp,0x10
c001d738:	84 c0                	test   al,al
c001d73a:	75 0a                	jne    c001d746 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001d73c:	bb 01 00 00 00       	mov    ebx,0x1
c001d741:	e9 5f 02 00 00       	jmp    c001d9a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d746:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d74c:	c1 e0 04             	shl    eax,0x4
c001d74f:	0f b6 c0             	movzx  eax,al
c001d752:	50                   	push   eax
c001d753:	6a 06                	push   0x6
c001d755:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d75c:	50                   	push   eax
c001d75d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d763:	e8 0c e7 ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d768:	6a 00                	push   0x0
c001d76a:	6a 01                	push   0x1
c001d76c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d773:	50                   	push   eax
c001d774:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d77a:	e8 f5 e6 ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d77f:	83 c4 20             	add    esp,0x20
c001d782:	0f b6 c3             	movzx  eax,bl
c001d785:	50                   	push   eax
c001d786:	0f b6 df             	movzx  ebx,bh
c001d789:	6a 04                	push   0x4
c001d78b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d792:	50                   	push   eax
c001d793:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d799:	e8 d6 e6 ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d79e:	53                   	push   ebx
c001d79f:	6a 05                	push   0x5
c001d7a1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7a8:	50                   	push   eax
c001d7a9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7af:	e8 c0 e6 ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7b4:	83 c4 20             	add    esp,0x20
c001d7b7:	68 a0 00 00 00       	push   0xa0
c001d7bc:	6a 07                	push   0x7
c001d7be:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7c5:	50                   	push   eax
c001d7c6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7cc:	e8 a3 e6 ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7d1:	83 c4 0c             	add    esp,0xc
c001d7d4:	6a 01                	push   0x1
c001d7d6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d7dd:	50                   	push   eax
c001d7de:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d7e4:	e8 6f f1 ff ff       	call   c001c958 <IDE::polling(unsigned char, unsigned int)>
c001d7e9:	83 c4 10             	add    esp,0x10
c001d7ec:	0f b6 d8             	movzx  ebx,al
c001d7ef:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d7f5:	85 db                	test   ebx,ebx
c001d7f7:	74 20                	je     c001d819 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001d7f9:	53                   	push   ebx
c001d7fa:	0f b6 c0             	movzx  eax,al
c001d7fd:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d804:	52                   	push   edx
c001d805:	50                   	push   eax
c001d806:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d80c:	e8 8d f0 ff ff       	call   c001c89e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d811:	83 c4 10             	add    esp,0x10
c001d814:	e9 8c 01 00 00       	jmp    c001d9a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d819:	52                   	push   edx
c001d81a:	0f b6 c0             	movzx  eax,al
c001d81d:	52                   	push   edx
c001d81e:	50                   	push   eax
c001d81f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d825:	e8 38 e6 ff ff       	call   c001be62 <IDE::getBase(unsigned char)>
c001d82a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d82e:	b9 06 00 00 00       	mov    ecx,0x6
c001d833:	89 c2                	mov    edx,eax
c001d835:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d838:	89 e8                	mov    eax,ebp
c001d83a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d83e:	83 c4 10             	add    esp,0x10
c001d841:	0f b6 c0             	movzx  eax,al
c001d844:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d848:	85 db                	test   ebx,ebx
c001d84a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d850:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d857:	0f 84 eb 00 00 00    	je     c001d948 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d85d:	55                   	push   ebp
c001d85e:	55                   	push   ebp
c001d85f:	52                   	push   edx
c001d860:	50                   	push   eax
c001d861:	e8 82 e7 ff ff       	call   c001bfe8 <IDE::waitInterrupt(unsigned char)>
c001d866:	83 c4 10             	add    esp,0x10
c001d869:	84 c0                	test   al,al
c001d86b:	0f 84 cb fe ff ff    	je     c001d73c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d871:	56                   	push   esi
c001d872:	56                   	push   esi
c001d873:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d87a:	50                   	push   eax
c001d87b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d881:	e8 c8 e5 ff ff       	call   c001be4e <IDE::prepareInterrupt(unsigned char)>
c001d886:	83 c4 0c             	add    esp,0xc
c001d889:	6a 04                	push   0x4
c001d88b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d892:	50                   	push   eax
c001d893:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d899:	e8 96 e6 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001d89e:	83 c4 0c             	add    esp,0xc
c001d8a1:	6a 05                	push   0x5
c001d8a3:	89 c6                	mov    esi,eax
c001d8a5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d8ac:	50                   	push   eax
c001d8ad:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d8b3:	e8 7c e6 ff ff       	call   c001bf34 <IDE::read(unsigned char, unsigned char)>
c001d8b8:	83 c4 10             	add    esp,0x10
c001d8bb:	0f b6 e8             	movzx  ebp,al
c001d8be:	89 f0                	mov    eax,esi
c001d8c0:	c1 e5 08             	shl    ebp,0x8
c001d8c3:	0f b6 f0             	movzx  esi,al
c001d8c6:	09 f5                	or     ebp,esi
c001d8c8:	31 f6                	xor    esi,esi
c001d8ca:	d1 fd                	sar    ebp,1
c001d8cc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d8d1:	74 5c                	je     c001d92f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001d8d3:	39 ee                	cmp    esi,ebp
c001d8d5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d8db:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d8e2:	75 0d                	jne    c001d8f1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001d8e4:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001d8e7:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001d8eb:	4b                   	dec    ebx
c001d8ec:	e9 57 ff ff ff       	jmp    c001d848 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001d8f1:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d8f5:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001d8f9:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001d8fe:	51                   	push   ecx
c001d8ff:	51                   	push   ecx
c001d900:	52                   	push   edx
c001d901:	50                   	push   eax
c001d902:	e8 5b e5 ff ff       	call   c001be62 <IDE::getBase(unsigned char)>
c001d907:	89 c2                	mov    edx,eax
c001d909:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d90e:	66 ef                	out    dx,ax
c001d910:	46                   	inc    esi
c001d911:	83 c4 10             	add    esp,0x10
c001d914:	eb bd                	jmp    c001d8d3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001d916:	51                   	push   ecx
c001d917:	51                   	push   ecx
c001d918:	52                   	push   edx
c001d919:	50                   	push   eax
c001d91a:	e8 43 e5 ff ff       	call   c001be62 <IDE::getBase(unsigned char)>
c001d91f:	89 c2                	mov    edx,eax
c001d921:	66 ed                	in     ax,dx
c001d923:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d927:	83 c4 10             	add    esp,0x10
c001d92a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001d92e:	46                   	inc    esi
c001d92f:	39 ee                	cmp    esi,ebp
c001d931:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d937:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d93e:	75 d6                	jne    c001d916 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001d940:	01 f6                	add    esi,esi
c001d942:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001d946:	eb a3                	jmp    c001d8eb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001d948:	51                   	push   ecx
c001d949:	51                   	push   ecx
c001d94a:	52                   	push   edx
c001d94b:	50                   	push   eax
c001d94c:	e8 97 e6 ff ff       	call   c001bfe8 <IDE::waitInterrupt(unsigned char)>
c001d951:	83 c4 10             	add    esp,0x10
c001d954:	84 c0                	test   al,al
c001d956:	0f 84 e0 fd ff ff    	je     c001d73c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d95c:	52                   	push   edx
c001d95d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d962:	52                   	push   edx
c001d963:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d96a:	50                   	push   eax
c001d96b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d971:	e8 d8 e4 ff ff       	call   c001be4e <IDE::prepareInterrupt(unsigned char)>
c001d976:	83 c4 10             	add    esp,0x10
c001d979:	50                   	push   eax
c001d97a:	50                   	push   eax
c001d97b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d982:	50                   	push   eax
c001d983:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d989:	e8 d4 e4 ff ff       	call   c001be62 <IDE::getBase(unsigned char)>
c001d98e:	8d 50 07             	lea    edx,[eax+0x7]
c001d991:	ec                   	in     al,dx
c001d992:	83 c4 10             	add    esp,0x10
c001d995:	a8 88                	test   al,0x88
c001d997:	74 0a                	je     c001d9a3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d999:	4b                   	dec    ebx
c001d99a:	75 dd                	jne    c001d979 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d99c:	bb 02 00 00 00       	mov    ebx,0x2
c001d9a1:	eb 02                	jmp    c001d9a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d9a3:	31 db                	xor    ebx,ebx
c001d9a5:	83 c4 1c             	add    esp,0x1c
c001d9a8:	89 d8                	mov    eax,ebx
c001d9aa:	5b                   	pop    ebx
c001d9ab:	5e                   	pop    esi
c001d9ac:	5f                   	pop    edi
c001d9ad:	5d                   	pop    ebp
c001d9ae:	c3                   	ret    
c001d9af:	90                   	nop

c001d9b0 <ATAPI::diskRemoved()>:
c001d9b0:	53                   	push   ebx
c001d9b1:	83 ec 14             	sub    esp,0x14
c001d9b4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d9b8:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d9bf:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d9c5:	e8 ae 03 ff ff       	call   c000dd78 <LogicalDisk::unmount()>
c001d9ca:	58                   	pop    eax
c001d9cb:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d9d1:	e8 86 0d ff ff       	call   c000e75c <VCache::writeWriteBuffer()>
c001d9d6:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d9dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d9e0:	83 c4 18             	add    esp,0x18
c001d9e3:	5b                   	pop    ebx
c001d9e4:	e9 63 0d ff ff       	jmp    c000e74c <VCache::invalidateReadBuffer()>
c001d9e9:	90                   	nop

c001d9ea <ATAPI::eject()>:
c001d9ea:	57                   	push   edi
c001d9eb:	b9 03 00 00 00       	mov    ecx,0x3
c001d9f0:	53                   	push   ebx
c001d9f1:	83 ec 14             	sub    esp,0x14
c001d9f4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d9f8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d9fc:	fc                   	cld    
c001d9fd:	31 c0                	xor    eax,eax
c001d9ff:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001da01:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001da06:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001da0b:	50                   	push   eax
c001da0c:	50                   	push   eax
c001da0d:	6a 00                	push   0x0
c001da0f:	6a 00                	push   0x0
c001da11:	6a 00                	push   0x0
c001da13:	6a 02                	push   0x2
c001da15:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001da19:	50                   	push   eax
c001da1a:	53                   	push   ebx
c001da1b:	e8 d0 fc ff ff       	call   c001d6f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001da20:	83 c4 14             	add    esp,0x14
c001da23:	53                   	push   ebx
c001da24:	e8 87 ff ff ff       	call   c001d9b0 <ATAPI::diskRemoved()>
c001da29:	83 c4 24             	add    esp,0x24
c001da2c:	31 c0                	xor    eax,eax
c001da2e:	5b                   	pop    ebx
c001da2f:	5f                   	pop    edi
c001da30:	c3                   	ret    
c001da31:	90                   	nop

c001da32 <ATAPI::diskInserted()>:
c001da32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001da36:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001da3d:	c3                   	ret    

c001da3e <ATAPI::detectMedia()>:
c001da3e:	56                   	push   esi
c001da3f:	53                   	push   ebx
c001da40:	83 ec 28             	sub    esp,0x28
c001da43:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001da47:	6a 0c                	push   0xc
c001da49:	6a 00                	push   0x0
c001da4b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001da4f:	56                   	push   esi
c001da50:	e8 9b 2a fe ff       	call   c00004f0 <memset>
c001da55:	58                   	pop    eax
c001da56:	5a                   	pop    edx
c001da57:	6a 00                	push   0x0
c001da59:	6a 00                	push   0x0
c001da5b:	6a 00                	push   0x0
c001da5d:	6a 00                	push   0x0
c001da5f:	56                   	push   esi
c001da60:	53                   	push   ebx
c001da61:	e8 8a fc ff ff       	call   c001d6f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001da66:	83 c4 1c             	add    esp,0x1c
c001da69:	6a 0c                	push   0xc
c001da6b:	6a 00                	push   0x0
c001da6d:	56                   	push   esi
c001da6e:	e8 7d 2a fe ff       	call   c00004f0 <memset>
c001da73:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001da78:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001da7d:	59                   	pop    ecx
c001da7e:	58                   	pop    eax
c001da7f:	6a 01                	push   0x1
c001da81:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001da85:	50                   	push   eax
c001da86:	6a 00                	push   0x0
c001da88:	6a 12                	push   0x12
c001da8a:	56                   	push   esi
c001da8b:	53                   	push   ebx
c001da8c:	e8 5f fc ff ff       	call   c001d6f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001da91:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001da95:	83 c4 20             	add    esp,0x20
c001da98:	83 e0 7f             	and    eax,0x7f
c001da9b:	83 f8 70             	cmp    eax,0x70
c001da9e:	74 15                	je     c001dab5 <ATAPI::detectMedia()+0x77>
c001daa0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001daa7:	75 0c                	jne    c001dab5 <ATAPI::detectMedia()+0x77>
c001daa9:	83 ec 0c             	sub    esp,0xc
c001daac:	53                   	push   ebx
c001daad:	e8 80 ff ff ff       	call   c001da32 <ATAPI::diskInserted()>
c001dab2:	83 c4 10             	add    esp,0x10
c001dab5:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001dab9:	83 e0 0f             	and    eax,0xf
c001dabc:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001dac1:	0f b6 c0             	movzx  eax,al
c001dac4:	75 19                	jne    c001dadf <ATAPI::detectMedia()+0xa1>
c001dac6:	83 f8 02             	cmp    eax,0x2
c001dac9:	75 14                	jne    c001dadf <ATAPI::detectMedia()+0xa1>
c001dacb:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dad2:	74 24                	je     c001daf8 <ATAPI::detectMedia()+0xba>
c001dad4:	83 ec 0c             	sub    esp,0xc
c001dad7:	53                   	push   ebx
c001dad8:	e8 d3 fe ff ff       	call   c001d9b0 <ATAPI::diskRemoved()>
c001dadd:	eb 16                	jmp    c001daf5 <ATAPI::detectMedia()+0xb7>
c001dadf:	85 c0                	test   eax,eax
c001dae1:	75 15                	jne    c001daf8 <ATAPI::detectMedia()+0xba>
c001dae3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001daea:	75 0c                	jne    c001daf8 <ATAPI::detectMedia()+0xba>
c001daec:	83 ec 0c             	sub    esp,0xc
c001daef:	53                   	push   ebx
c001daf0:	e8 3d ff ff ff       	call   c001da32 <ATAPI::diskInserted()>
c001daf5:	83 c4 10             	add    esp,0x10
c001daf8:	83 c4 24             	add    esp,0x24
c001dafb:	5b                   	pop    ebx
c001dafc:	5e                   	pop    esi
c001dafd:	c3                   	ret    

c001dafe <ATAPI::open(int, int, void*)>:
c001dafe:	56                   	push   esi
c001daff:	53                   	push   ebx
c001db00:	50                   	push   eax
c001db01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001db05:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001db09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001db0d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001db13:	c1 e0 06             	shl    eax,0x6
c001db16:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001db1c:	01 d0                	add    eax,edx
c001db1e:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001db25:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001db2b:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001db32:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001db3c:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001db43:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001db49:	6a 04                	push   0x4
c001db4b:	6a 0c                	push   0xc
c001db4d:	51                   	push   ecx
c001db4e:	52                   	push   edx
c001db4f:	e8 20 e3 ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db54:	90                   	nop
c001db55:	90                   	nop
c001db56:	6a 00                	push   0x0
c001db58:	6a 0c                	push   0xc
c001db5a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db61:	50                   	push   eax
c001db62:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001db68:	e8 07 e3 ff ff       	call   c001be74 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db6d:	83 c4 14             	add    esp,0x14
c001db70:	68 78 01 00 00       	push   0x178
c001db75:	e8 89 9f fe ff       	call   c0007b03 <malloc>
c001db7a:	83 c4 0c             	add    esp,0xc
c001db7d:	6a 00                	push   0x0
c001db7f:	68 ff ff ff 7f       	push   0x7fffffff
c001db84:	6a 00                	push   0x0
c001db86:	6a 00                	push   0x0
c001db88:	53                   	push   ebx
c001db89:	68 3b 37 02 c0       	push   0xc002373b
c001db8e:	89 c6                	mov    esi,eax
c001db90:	50                   	push   eax
c001db91:	e8 20 00 ff ff       	call   c000dbb6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001db96:	83 c4 14             	add    esp,0x14
c001db99:	56                   	push   esi
c001db9a:	e8 d7 00 ff ff       	call   c000dc76 <LogicalDisk::assignDriveLetter()>
c001db9f:	5a                   	pop    edx
c001dba0:	59                   	pop    ecx
c001dba1:	0f be c0             	movsx  eax,al
c001dba4:	50                   	push   eax
c001dba5:	68 8c 35 02 c0       	push   0xc002358c
c001dbaa:	e8 8b cd fe ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001dbaf:	58                   	pop    eax
c001dbb0:	5a                   	pop    edx
c001dbb1:	56                   	push   esi
c001dbb2:	53                   	push   ebx
c001dbb3:	e8 18 ee fe ff       	call   c000c9d0 <Device::addChild(Device*)>
c001dbb8:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001dbbe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dbc1:	e8 78 f2 fe ff       	call   c000ce3e <PhysicalDisk::startCache()>
c001dbc6:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001dbcd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dbd0:	e8 69 fe ff ff       	call   c001da3e <ATAPI::detectMedia()>
c001dbd5:	83 c4 14             	add    esp,0x14
c001dbd8:	31 c0                	xor    eax,eax
c001dbda:	5b                   	pop    ebx
c001dbdb:	5e                   	pop    esi
c001dbdc:	c3                   	ret    
c001dbdd:	90                   	nop

c001dbde <ATAPI::read(unsigned long long, int, void*)>:
c001dbde:	55                   	push   ebp
c001dbdf:	57                   	push   edi
c001dbe0:	56                   	push   esi
c001dbe1:	53                   	push   ebx
c001dbe2:	83 ec 1c             	sub    esp,0x1c
c001dbe5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dbe9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001dbed:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001dbf1:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dbf8:	74 3c                	je     c001dc36 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001dbfa:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001dbfe:	b9 03 00 00 00       	mov    ecx,0x3
c001dc03:	fc                   	cld    
c001dc04:	31 c0                	xor    eax,eax
c001dc06:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dc08:	89 e8                	mov    eax,ebp
c001dc0a:	0f ce                	bswap  esi
c001dc0c:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001dc10:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001dc15:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001dc19:	50                   	push   eax
c001dc1a:	50                   	push   eax
c001dc1b:	55                   	push   ebp
c001dc1c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dc20:	c1 e5 0b             	shl    ebp,0xb
c001dc23:	6a 00                	push   0x0
c001dc25:	55                   	push   ebp
c001dc26:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dc2a:	50                   	push   eax
c001dc2b:	53                   	push   ebx
c001dc2c:	e8 bf fa ff ff       	call   c001d6f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001dc31:	83 c4 20             	add    esp,0x20
c001dc34:	eb 1a                	jmp    c001dc50 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001dc36:	83 ec 0c             	sub    esp,0xc
c001dc39:	53                   	push   ebx
c001dc3a:	e8 ff fd ff ff       	call   c001da3e <ATAPI::detectMedia()>
c001dc3f:	83 c4 10             	add    esp,0x10
c001dc42:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dc49:	75 af                	jne    c001dbfa <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001dc4b:	b8 02 00 00 00       	mov    eax,0x2
c001dc50:	83 c4 1c             	add    esp,0x1c
c001dc53:	5b                   	pop    ebx
c001dc54:	5e                   	pop    esi
c001dc55:	5f                   	pop    edi
c001dc56:	5d                   	pop    ebp
c001dc57:	c3                   	ret    

c001dc58 <SATA::close(int, int, void*)>:
c001dc58:	83 ec 0c             	sub    esp,0xc
c001dc5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc5f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dc65:	85 c0                	test   eax,eax
c001dc67:	74 0c                	je     c001dc75 <SATA::close(int, int, void*)+0x1d>
c001dc69:	8b 10                	mov    edx,DWORD PTR [eax]
c001dc6b:	83 ec 0c             	sub    esp,0xc
c001dc6e:	50                   	push   eax
c001dc6f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dc72:	83 c4 10             	add    esp,0x10
c001dc75:	31 c0                	xor    eax,eax
c001dc77:	83 c4 0c             	add    esp,0xc
c001dc7a:	c3                   	ret    
c001dc7b:	90                   	nop

c001dc7c <SATA::powerSaving(PowerSavingLevel)>:
c001dc7c:	c3                   	ret    
c001dc7d:	90                   	nop

c001dc7e <SATA::open(int, int, void*)>:
c001dc7e:	56                   	push   esi
c001dc7f:	53                   	push   ebx
c001dc80:	50                   	push   eax
c001dc81:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dc85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc89:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dc93:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001dc99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc9d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001dca7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dcb1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001dcb8:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001dcbe:	e8 4f a1 fe ff       	call   c0007e12 <Phys::allocatePage()>
c001dcc3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001dcc9:	89 c6                	mov    esi,eax
c001dccb:	e8 42 a1 fe ff       	call   c0007e12 <Phys::allocatePage()>
c001dcd0:	81 c6 00 10 00 00    	add    esi,0x1000
c001dcd6:	39 c6                	cmp    esi,eax
c001dcd8:	74 10                	je     c001dcea <SATA::open(int, int, void*)+0x6c>
c001dcda:	83 ec 0c             	sub    esp,0xc
c001dcdd:	68 d4 35 02 c0       	push   0xc00235d4
c001dce2:	e8 70 39 ff ff       	call   c0011657 <KePanic(char const*)>
c001dce7:	83 c4 10             	add    esp,0x10
c001dcea:	83 ec 0c             	sub    esp,0xc
c001dced:	6a 02                	push   0x2
c001dcef:	e8 31 b9 fe ff       	call   c0009625 <Virt::allocateKernelVirtualPages(int)>
c001dcf4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dcfa:	6a 03                	push   0x3
c001dcfc:	50                   	push   eax
c001dcfd:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001dd03:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001dd09:	e8 20 c0 fe ff       	call   c0009d2e <VAS::mapPage(unsigned long, unsigned long, int)>
c001dd0e:	83 c4 14             	add    esp,0x14
c001dd11:	53                   	push   ebx
c001dd12:	e8 27 f1 fe ff       	call   c000ce3e <PhysicalDisk::startCache()>
c001dd17:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dd1a:	e8 6b 03 ff ff       	call   c000e08a <createPartitionsForDisk(PhysicalDisk*)>
c001dd1f:	83 c4 14             	add    esp,0x14
c001dd22:	31 c0                	xor    eax,eax
c001dd24:	5b                   	pop    ebx
c001dd25:	5e                   	pop    esi
c001dd26:	c3                   	ret    
c001dd27:	90                   	nop

c001dd28 <SATA::SATA()>:
c001dd28:	83 ec 0c             	sub    esp,0xc
c001dd2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd2f:	83 ec 04             	sub    esp,0x4
c001dd32:	68 00 02 00 00       	push   0x200
c001dd37:	68 e8 35 02 c0       	push   0xc00235e8
c001dd3c:	50                   	push   eax
c001dd3d:	e8 94 f0 fe ff       	call   c000cdd6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dd42:	83 c4 10             	add    esp,0x10
c001dd45:	ba 58 36 02 c0       	mov    edx,0xc0023658
c001dd4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd4e:	89 10                	mov    DWORD PTR [eax],edx
c001dd50:	90                   	nop
c001dd51:	83 c4 0c             	add    esp,0xc
c001dd54:	c3                   	ret    
c001dd55:	90                   	nop

c001dd56 <SATA::access(unsigned long long, int, void*, bool)>:
c001dd56:	55                   	push   ebp
c001dd57:	57                   	push   edi
c001dd58:	56                   	push   esi
c001dd59:	53                   	push   ebx
c001dd5a:	83 ec 2c             	sub    esp,0x2c
c001dd5d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001dd61:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001dd66:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dd6a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dd6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dd72:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dd76:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dd7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dd7e:	7e 10                	jle    c001dd90 <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001dd80:	83 ec 0c             	sub    esp,0xc
c001dd83:	68 f8 35 02 c0       	push   0xc00235f8
c001dd88:	e8 ca 38 ff ff       	call   c0011657 <KePanic(char const*)>
c001dd8d:	83 c4 10             	add    esp,0x10
c001dd90:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001dd96:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001dd9c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001dda2:	89 e8                	mov    eax,ebp
c001dda4:	c1 e0 07             	shl    eax,0x7
c001dda7:	01 d0                	add    eax,edx
c001dda9:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ddb3:	8d 45 02             	lea    eax,[ebp+0x2]
c001ddb6:	51                   	push   ecx
c001ddb7:	c1 e0 07             	shl    eax,0x7
c001ddba:	51                   	push   ecx
c001ddbb:	01 d0                	add    eax,edx
c001ddbd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ddc1:	50                   	push   eax
c001ddc2:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001ddc8:	e8 6b ec ff ff       	call   c001ca38 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ddcd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ddd1:	83 c4 10             	add    esp,0x10
c001ddd4:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001ddd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dddd:	0f 84 5b 01 00 00    	je     c001df3e <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001dde3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dde7:	c1 e0 09             	shl    eax,0x9
c001ddea:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001ddef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ddf3:	74 0e                	je     c001de03 <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001ddf5:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001ddfb:	89 c1                	mov    ecx,eax
c001ddfd:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001de01:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001de03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001de07:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001de0d:	8d 45 02             	lea    eax,[ebp+0x2]
c001de10:	c1 e0 07             	shl    eax,0x7
c001de13:	01 d0                	add    eax,edx
c001de15:	8b 00                	mov    eax,DWORD PTR [eax]
c001de17:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001de1d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001de23:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001de27:	c1 e1 05             	shl    ecx,0x5
c001de2a:	01 c8                	add    eax,ecx
c001de2c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001de30:	83 e1 01             	and    ecx,0x1
c001de33:	89 ce                	mov    esi,ecx
c001de35:	8a 08                	mov    cl,BYTE PTR [eax]
c001de37:	c1 e6 06             	shl    esi,0x6
c001de3a:	83 e1 bf             	and    ecx,0xffffffbf
c001de3d:	09 f1                	or     ecx,esi
c001de3f:	88 08                	mov    BYTE PTR [eax],cl
c001de41:	8b 08                	mov    ecx,DWORD PTR [eax]
c001de43:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001de49:	81 c9 05 00 01 00    	or     ecx,0x10005
c001de4f:	89 08                	mov    DWORD PTR [eax],ecx
c001de51:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001de57:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001de5d:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001de63:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001de66:	50                   	push   eax
c001de67:	68 90 00 00 00       	push   0x90
c001de6c:	6a 00                	push   0x0
c001de6e:	56                   	push   esi
c001de6f:	e8 7c 26 fe ff       	call   c00004f0 <memset>
c001de74:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001de7a:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001de80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de84:	83 c4 10             	add    esp,0x10
c001de87:	48                   	dec    eax
c001de88:	25 ff ff 3f 00       	and    eax,0x3fffff
c001de8d:	89 c1                	mov    ecx,eax
c001de8f:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001de95:	25 00 00 c0 ff       	and    eax,0xffc00000
c001de9a:	09 c8                	or     eax,ecx
c001de9c:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001dea2:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001dea8:	83 c8 80             	or     eax,0xffffff80
c001deab:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001deb1:	66 8b 06             	mov    ax,WORD PTR [esi]
c001deb4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001deb8:	25 00 7f 00 00       	and    eax,0x7f00
c001debd:	0d 27 80 ff ff       	or     eax,0xffff8027
c001dec2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001dec7:	66 89 06             	mov    WORD PTR [esi],ax
c001deca:	b0 35                	mov    al,0x35
c001decc:	75 02                	jne    c001ded0 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001dece:	b0 25                	mov    al,0x25
c001ded0:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ded3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ded7:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001dedb:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001dedf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dee3:	c1 e8 10             	shr    eax,0x10
c001dee6:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001dee9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001deed:	c1 e8 18             	shr    eax,0x18
c001def0:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001def3:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001def7:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001defa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001defe:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001df01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001df05:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001df09:	89 ee                	mov    esi,ebp
c001df0b:	31 c0                	xor    eax,eax
c001df0d:	c1 e6 07             	shl    esi,0x7
c001df10:	01 d6                	add    esi,edx
c001df12:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001df18:	80 e1 88             	and    cl,0x88
c001df1b:	74 0a                	je     c001df27 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001df1d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001df22:	74 0a                	je     c001df2e <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001df24:	40                   	inc    eax
c001df25:	eb eb                	jmp    c001df12 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001df27:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001df2c:	75 17                	jne    c001df45 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001df2e:	83 ec 0c             	sub    esp,0xc
c001df31:	68 31 36 02 c0       	push   0xc0023631
c001df36:	e8 ff c9 fe ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001df3b:	83 c4 10             	add    esp,0x10
c001df3e:	b8 01 00 00 00       	mov    eax,0x1
c001df43:	eb 5b                	jmp    c001dfa0 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001df45:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001df49:	c1 e5 07             	shl    ebp,0x7
c001df4c:	b8 01 00 00 00       	mov    eax,0x1
c001df51:	01 ea                	add    edx,ebp
c001df53:	d3 e0                	shl    eax,cl
c001df55:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001df5b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001df61:	85 c8                	test   eax,ecx
c001df63:	74 16                	je     c001df7b <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001df65:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001df6b:	0f ba e1 1e          	bt     ecx,0x1e
c001df6f:	73 ea                	jae    c001df5b <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001df71:	83 ec 0c             	sub    esp,0xc
c001df74:	68 3f 36 02 c0       	push   0xc002363f
c001df79:	eb bb                	jmp    c001df36 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001df7b:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001df81:	0f ba e0 1e          	bt     eax,0x1e
c001df85:	72 b7                	jb     c001df3e <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001df87:	31 c0                	xor    eax,eax
c001df89:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001df8e:	75 10                	jne    c001dfa0 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001df90:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001df96:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001df9a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001df9e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dfa0:	83 c4 2c             	add    esp,0x2c
c001dfa3:	5b                   	pop    ebx
c001dfa4:	5e                   	pop    esi
c001dfa5:	5f                   	pop    edi
c001dfa6:	5d                   	pop    ebp
c001dfa7:	c3                   	ret    

c001dfa8 <SATA::read(unsigned long long, int, void*)>:
c001dfa8:	55                   	push   ebp
c001dfa9:	57                   	push   edi
c001dfaa:	56                   	push   esi
c001dfab:	be 04 00 00 00       	mov    esi,0x4
c001dfb0:	53                   	push   ebx
c001dfb1:	83 ec 0c             	sub    esp,0xc
c001dfb4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001dfb8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001dfbc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dfc0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001dfc4:	8d 7b ff             	lea    edi,[ebx-0x1]
c001dfc7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001dfcd:	0f 87 1a 02 00 00    	ja     c001e1ed <SATA::read(unsigned long long, int, void*)+0x245>
c001dfd3:	85 c9                	test   ecx,ecx
c001dfd5:	be 06 00 00 00       	mov    esi,0x6
c001dfda:	0f 84 0d 02 00 00    	je     c001e1ed <SATA::read(unsigned long long, int, void*)+0x245>
c001dfe0:	56                   	push   esi
c001dfe1:	56                   	push   esi
c001dfe2:	6a 00                	push   0x0
c001dfe4:	51                   	push   ecx
c001dfe5:	53                   	push   ebx
c001dfe6:	52                   	push   edx
c001dfe7:	50                   	push   eax
c001dfe8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dfec:	e8 65 fd ff ff       	call   c001dd56 <SATA::access(unsigned long long, int, void*, bool)>
c001dff1:	83 c4 20             	add    esp,0x20
c001dff4:	85 c0                	test   eax,eax
c001dff6:	89 c6                	mov    esi,eax
c001dff8:	0f 85 ea 01 00 00    	jne    c001e1e8 <SATA::read(unsigned long long, int, void*)+0x240>
c001dffe:	50                   	push   eax
c001dfff:	50                   	push   eax
c001e000:	6a 0f                	push   0xf
c001e002:	6a 00                	push   0x0
c001e004:	01 1d b4 d0 02 c0    	add    DWORD PTR ds:0xc002d0b4,ebx
c001e00a:	bb 0a 00 00 00       	mov    ebx,0xa
c001e00f:	e8 7d f2 ff ff       	call   c001d291 <combineColours(unsigned char, unsigned char)>
c001e014:	5a                   	pop    edx
c001e015:	59                   	pop    ecx
c001e016:	b9 10 27 00 00       	mov    ecx,0x2710
c001e01b:	0f b6 c0             	movzx  eax,al
c001e01e:	50                   	push   eax
c001e01f:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e024:	99                   	cdq    
c001e025:	f7 f9                	idiv   ecx
c001e027:	99                   	cdq    
c001e028:	f7 fb                	idiv   ebx
c001e02a:	8d 42 30             	lea    eax,[edx+0x30]
c001e02d:	0f b6 c0             	movzx  eax,al
c001e030:	50                   	push   eax
c001e031:	e8 4a f2 ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001e036:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e03c:	5f                   	pop    edi
c001e03d:	5d                   	pop    ebp
c001e03e:	bd e8 03 00 00       	mov    ebp,0x3e8
c001e043:	6a 0f                	push   0xf
c001e045:	6a 00                	push   0x0
c001e047:	e8 45 f2 ff ff       	call   c001d291 <combineColours(unsigned char, unsigned char)>
c001e04c:	5a                   	pop    edx
c001e04d:	59                   	pop    ecx
c001e04e:	0f b6 c0             	movzx  eax,al
c001e051:	50                   	push   eax
c001e052:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e057:	99                   	cdq    
c001e058:	f7 fd                	idiv   ebp
c001e05a:	99                   	cdq    
c001e05b:	f7 fb                	idiv   ebx
c001e05d:	8d 42 30             	lea    eax,[edx+0x30]
c001e060:	0f b6 c0             	movzx  eax,al
c001e063:	50                   	push   eax
c001e064:	e8 17 f2 ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001e069:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e06f:	5f                   	pop    edi
c001e070:	bf 64 00 00 00       	mov    edi,0x64
c001e075:	58                   	pop    eax
c001e076:	6a 0f                	push   0xf
c001e078:	6a 00                	push   0x0
c001e07a:	e8 12 f2 ff ff       	call   c001d291 <combineColours(unsigned char, unsigned char)>
c001e07f:	5a                   	pop    edx
c001e080:	59                   	pop    ecx
c001e081:	0f b6 c0             	movzx  eax,al
c001e084:	50                   	push   eax
c001e085:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e08a:	99                   	cdq    
c001e08b:	f7 ff                	idiv   edi
c001e08d:	99                   	cdq    
c001e08e:	f7 fb                	idiv   ebx
c001e090:	8d 42 30             	lea    eax,[edx+0x30]
c001e093:	0f b6 c0             	movzx  eax,al
c001e096:	50                   	push   eax
c001e097:	e8 e4 f1 ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001e09c:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e0a2:	58                   	pop    eax
c001e0a3:	5a                   	pop    edx
c001e0a4:	6a 0f                	push   0xf
c001e0a6:	6a 00                	push   0x0
c001e0a8:	e8 e4 f1 ff ff       	call   c001d291 <combineColours(unsigned char, unsigned char)>
c001e0ad:	59                   	pop    ecx
c001e0ae:	5a                   	pop    edx
c001e0af:	0f b6 c0             	movzx  eax,al
c001e0b2:	50                   	push   eax
c001e0b3:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e0b8:	99                   	cdq    
c001e0b9:	f7 fb                	idiv   ebx
c001e0bb:	99                   	cdq    
c001e0bc:	f7 fb                	idiv   ebx
c001e0be:	8d 42 30             	lea    eax,[edx+0x30]
c001e0c1:	0f b6 c0             	movzx  eax,al
c001e0c4:	50                   	push   eax
c001e0c5:	e8 b6 f1 ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001e0ca:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e0d0:	59                   	pop    ecx
c001e0d1:	58                   	pop    eax
c001e0d2:	6a 0f                	push   0xf
c001e0d4:	6a 00                	push   0x0
c001e0d6:	e8 b6 f1 ff ff       	call   c001d291 <combineColours(unsigned char, unsigned char)>
c001e0db:	5a                   	pop    edx
c001e0dc:	59                   	pop    ecx
c001e0dd:	0f b6 c0             	movzx  eax,al
c001e0e0:	50                   	push   eax
c001e0e1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e0e6:	99                   	cdq    
c001e0e7:	f7 fb                	idiv   ebx
c001e0e9:	83 c2 30             	add    edx,0x30
c001e0ec:	0f b6 d2             	movzx  edx,dl
c001e0ef:	52                   	push   edx
c001e0f0:	e8 8b f1 ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001e0f5:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e0fb:	58                   	pop    eax
c001e0fc:	5a                   	pop    edx
c001e0fd:	6a 0f                	push   0xf
c001e0ff:	6a 00                	push   0x0
c001e101:	e8 8b f1 ff ff       	call   c001d291 <combineColours(unsigned char, unsigned char)>
c001e106:	59                   	pop    ecx
c001e107:	b9 10 27 00 00       	mov    ecx,0x2710
c001e10c:	5a                   	pop    edx
c001e10d:	0f b6 c0             	movzx  eax,al
c001e110:	50                   	push   eax
c001e111:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e116:	99                   	cdq    
c001e117:	f7 f9                	idiv   ecx
c001e119:	99                   	cdq    
c001e11a:	f7 fb                	idiv   ebx
c001e11c:	8d 42 30             	lea    eax,[edx+0x30]
c001e11f:	0f b6 c0             	movzx  eax,al
c001e122:	50                   	push   eax
c001e123:	e8 58 f1 ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001e128:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e12e:	59                   	pop    ecx
c001e12f:	58                   	pop    eax
c001e130:	6a 0f                	push   0xf
c001e132:	6a 00                	push   0x0
c001e134:	e8 58 f1 ff ff       	call   c001d291 <combineColours(unsigned char, unsigned char)>
c001e139:	5a                   	pop    edx
c001e13a:	59                   	pop    ecx
c001e13b:	0f b6 c0             	movzx  eax,al
c001e13e:	50                   	push   eax
c001e13f:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e144:	99                   	cdq    
c001e145:	f7 fd                	idiv   ebp
c001e147:	99                   	cdq    
c001e148:	f7 fb                	idiv   ebx
c001e14a:	8d 42 30             	lea    eax,[edx+0x30]
c001e14d:	0f b6 c0             	movzx  eax,al
c001e150:	50                   	push   eax
c001e151:	e8 2a f1 ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001e156:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e15c:	5d                   	pop    ebp
c001e15d:	58                   	pop    eax
c001e15e:	6a 0f                	push   0xf
c001e160:	6a 00                	push   0x0
c001e162:	e8 2a f1 ff ff       	call   c001d291 <combineColours(unsigned char, unsigned char)>
c001e167:	5a                   	pop    edx
c001e168:	59                   	pop    ecx
c001e169:	0f b6 c0             	movzx  eax,al
c001e16c:	50                   	push   eax
c001e16d:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e172:	99                   	cdq    
c001e173:	f7 ff                	idiv   edi
c001e175:	99                   	cdq    
c001e176:	f7 fb                	idiv   ebx
c001e178:	8d 42 30             	lea    eax,[edx+0x30]
c001e17b:	0f b6 c0             	movzx  eax,al
c001e17e:	50                   	push   eax
c001e17f:	e8 fc f0 ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001e184:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e18a:	5f                   	pop    edi
c001e18b:	5d                   	pop    ebp
c001e18c:	6a 0f                	push   0xf
c001e18e:	6a 00                	push   0x0
c001e190:	e8 fc f0 ff ff       	call   c001d291 <combineColours(unsigned char, unsigned char)>
c001e195:	5a                   	pop    edx
c001e196:	59                   	pop    ecx
c001e197:	0f b6 c0             	movzx  eax,al
c001e19a:	50                   	push   eax
c001e19b:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e1a0:	99                   	cdq    
c001e1a1:	f7 fb                	idiv   ebx
c001e1a3:	99                   	cdq    
c001e1a4:	f7 fb                	idiv   ebx
c001e1a6:	8d 42 30             	lea    eax,[edx+0x30]
c001e1a9:	0f b6 c0             	movzx  eax,al
c001e1ac:	50                   	push   eax
c001e1ad:	e8 ce f0 ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001e1b2:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e1b8:	5f                   	pop    edi
c001e1b9:	5d                   	pop    ebp
c001e1ba:	6a 0f                	push   0xf
c001e1bc:	6a 00                	push   0x0
c001e1be:	e8 ce f0 ff ff       	call   c001d291 <combineColours(unsigned char, unsigned char)>
c001e1c3:	5a                   	pop    edx
c001e1c4:	59                   	pop    ecx
c001e1c5:	0f b6 c0             	movzx  eax,al
c001e1c8:	50                   	push   eax
c001e1c9:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e1ce:	99                   	cdq    
c001e1cf:	f7 fb                	idiv   ebx
c001e1d1:	83 c2 30             	add    edx,0x30
c001e1d4:	0f b6 d2             	movzx  edx,dl
c001e1d7:	52                   	push   edx
c001e1d8:	e8 a3 f0 ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001e1dd:	83 c4 10             	add    esp,0x10
c001e1e0:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e1e6:	eb 05                	jmp    c001e1ed <SATA::read(unsigned long long, int, void*)+0x245>
c001e1e8:	be 01 00 00 00       	mov    esi,0x1
c001e1ed:	83 c4 0c             	add    esp,0xc
c001e1f0:	89 f0                	mov    eax,esi
c001e1f2:	5b                   	pop    ebx
c001e1f3:	5e                   	pop    esi
c001e1f4:	5f                   	pop    edi
c001e1f5:	5d                   	pop    ebp
c001e1f6:	c3                   	ret    
c001e1f7:	90                   	nop

c001e1f8 <SATA::write(unsigned long long, int, void*)>:
c001e1f8:	55                   	push   ebp
c001e1f9:	57                   	push   edi
c001e1fa:	56                   	push   esi
c001e1fb:	53                   	push   ebx
c001e1fc:	83 ec 0c             	sub    esp,0xc
c001e1ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e203:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e207:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e20b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e20f:	8d 70 ff             	lea    esi,[eax-0x1]
c001e212:	b8 04 00 00 00       	mov    eax,0x4
c001e217:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e21d:	0f 87 2c 02 00 00    	ja     c001e44f <SATA::write(unsigned long long, int, void*)+0x257>
c001e223:	85 db                	test   ebx,ebx
c001e225:	b8 06 00 00 00       	mov    eax,0x6
c001e22a:	0f 84 1f 02 00 00    	je     c001e44f <SATA::write(unsigned long long, int, void*)+0x257>
c001e230:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001e234:	c1 e6 09             	shl    esi,0x9
c001e237:	01 de                	add    esi,ebx
c001e239:	50                   	push   eax
c001e23a:	89 d7                	mov    edi,edx
c001e23c:	50                   	push   eax
c001e23d:	83 c7 01             	add    edi,0x1
c001e240:	6a 01                	push   0x1
c001e242:	89 cd                	mov    ebp,ecx
c001e244:	53                   	push   ebx
c001e245:	83 d5 00             	adc    ebp,0x0
c001e248:	6a 01                	push   0x1
c001e24a:	81 c3 00 02 00 00    	add    ebx,0x200
c001e250:	51                   	push   ecx
c001e251:	52                   	push   edx
c001e252:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e256:	e8 fb fa ff ff       	call   c001dd56 <SATA::access(unsigned long long, int, void*, bool)>
c001e25b:	83 c4 20             	add    esp,0x20
c001e25e:	39 f3                	cmp    ebx,esi
c001e260:	89 fa                	mov    edx,edi
c001e262:	89 e9                	mov    ecx,ebp
c001e264:	75 d3                	jne    c001e239 <SATA::write(unsigned long long, int, void*)+0x41>
c001e266:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e26a:	bd 10 27 00 00       	mov    ebp,0x2710
c001e26f:	bb 0a 00 00 00       	mov    ebx,0xa
c001e274:	01 05 b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,eax
c001e27a:	50                   	push   eax
c001e27b:	50                   	push   eax
c001e27c:	6a 0f                	push   0xf
c001e27e:	6a 00                	push   0x0
c001e280:	e8 0c f0 ff ff       	call   c001d291 <combineColours(unsigned char, unsigned char)>
c001e285:	5a                   	pop    edx
c001e286:	59                   	pop    ecx
c001e287:	0f b6 c0             	movzx  eax,al
c001e28a:	50                   	push   eax
c001e28b:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e290:	99                   	cdq    
c001e291:	f7 fd                	idiv   ebp
c001e293:	99                   	cdq    
c001e294:	f7 fb                	idiv   ebx
c001e296:	8d 42 30             	lea    eax,[edx+0x30]
c001e299:	0f b6 c0             	movzx  eax,al
c001e29c:	50                   	push   eax
c001e29d:	e8 de ef ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001e2a2:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e2a8:	5e                   	pop    esi
c001e2a9:	5f                   	pop    edi
c001e2aa:	bf e8 03 00 00       	mov    edi,0x3e8
c001e2af:	6a 0f                	push   0xf
c001e2b1:	6a 00                	push   0x0
c001e2b3:	e8 d9 ef ff ff       	call   c001d291 <combineColours(unsigned char, unsigned char)>
c001e2b8:	5a                   	pop    edx
c001e2b9:	59                   	pop    ecx
c001e2ba:	0f b6 c0             	movzx  eax,al
c001e2bd:	50                   	push   eax
c001e2be:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e2c3:	99                   	cdq    
c001e2c4:	f7 ff                	idiv   edi
c001e2c6:	99                   	cdq    
c001e2c7:	f7 fb                	idiv   ebx
c001e2c9:	8d 42 30             	lea    eax,[edx+0x30]
c001e2cc:	0f b6 c0             	movzx  eax,al
c001e2cf:	50                   	push   eax
c001e2d0:	e8 ab ef ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001e2d5:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e2db:	5e                   	pop    esi
c001e2dc:	be 64 00 00 00       	mov    esi,0x64
c001e2e1:	58                   	pop    eax
c001e2e2:	6a 0f                	push   0xf
c001e2e4:	6a 00                	push   0x0
c001e2e6:	e8 a6 ef ff ff       	call   c001d291 <combineColours(unsigned char, unsigned char)>
c001e2eb:	5a                   	pop    edx
c001e2ec:	59                   	pop    ecx
c001e2ed:	0f b6 c0             	movzx  eax,al
c001e2f0:	50                   	push   eax
c001e2f1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e2f6:	99                   	cdq    
c001e2f7:	f7 fe                	idiv   esi
c001e2f9:	99                   	cdq    
c001e2fa:	f7 fb                	idiv   ebx
c001e2fc:	8d 42 30             	lea    eax,[edx+0x30]
c001e2ff:	0f b6 c0             	movzx  eax,al
c001e302:	50                   	push   eax
c001e303:	e8 78 ef ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001e308:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e30e:	58                   	pop    eax
c001e30f:	5a                   	pop    edx
c001e310:	6a 0f                	push   0xf
c001e312:	6a 00                	push   0x0
c001e314:	e8 78 ef ff ff       	call   c001d291 <combineColours(unsigned char, unsigned char)>
c001e319:	59                   	pop    ecx
c001e31a:	5a                   	pop    edx
c001e31b:	0f b6 c0             	movzx  eax,al
c001e31e:	50                   	push   eax
c001e31f:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e324:	99                   	cdq    
c001e325:	f7 fb                	idiv   ebx
c001e327:	99                   	cdq    
c001e328:	f7 fb                	idiv   ebx
c001e32a:	8d 42 30             	lea    eax,[edx+0x30]
c001e32d:	0f b6 c0             	movzx  eax,al
c001e330:	50                   	push   eax
c001e331:	e8 4a ef ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001e336:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e33c:	59                   	pop    ecx
c001e33d:	58                   	pop    eax
c001e33e:	6a 0f                	push   0xf
c001e340:	6a 00                	push   0x0
c001e342:	e8 4a ef ff ff       	call   c001d291 <combineColours(unsigned char, unsigned char)>
c001e347:	5a                   	pop    edx
c001e348:	59                   	pop    ecx
c001e349:	0f b6 c0             	movzx  eax,al
c001e34c:	50                   	push   eax
c001e34d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e352:	99                   	cdq    
c001e353:	f7 fb                	idiv   ebx
c001e355:	83 c2 30             	add    edx,0x30
c001e358:	0f b6 d2             	movzx  edx,dl
c001e35b:	52                   	push   edx
c001e35c:	e8 1f ef ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001e361:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e367:	58                   	pop    eax
c001e368:	5a                   	pop    edx
c001e369:	6a 0f                	push   0xf
c001e36b:	6a 00                	push   0x0
c001e36d:	e8 1f ef ff ff       	call   c001d291 <combineColours(unsigned char, unsigned char)>
c001e372:	59                   	pop    ecx
c001e373:	5a                   	pop    edx
c001e374:	0f b6 c0             	movzx  eax,al
c001e377:	50                   	push   eax
c001e378:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e37d:	99                   	cdq    
c001e37e:	f7 fd                	idiv   ebp
c001e380:	99                   	cdq    
c001e381:	f7 fb                	idiv   ebx
c001e383:	8d 42 30             	lea    eax,[edx+0x30]
c001e386:	0f b6 c0             	movzx  eax,al
c001e389:	50                   	push   eax
c001e38a:	e8 f1 ee ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001e38f:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e395:	59                   	pop    ecx
c001e396:	5d                   	pop    ebp
c001e397:	6a 0f                	push   0xf
c001e399:	6a 00                	push   0x0
c001e39b:	e8 f1 ee ff ff       	call   c001d291 <combineColours(unsigned char, unsigned char)>
c001e3a0:	5a                   	pop    edx
c001e3a1:	59                   	pop    ecx
c001e3a2:	0f b6 c0             	movzx  eax,al
c001e3a5:	50                   	push   eax
c001e3a6:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e3ab:	99                   	cdq    
c001e3ac:	f7 ff                	idiv   edi
c001e3ae:	99                   	cdq    
c001e3af:	f7 fb                	idiv   ebx
c001e3b1:	8d 42 30             	lea    eax,[edx+0x30]
c001e3b4:	0f b6 c0             	movzx  eax,al
c001e3b7:	50                   	push   eax
c001e3b8:	e8 c3 ee ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001e3bd:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e3c3:	5f                   	pop    edi
c001e3c4:	5d                   	pop    ebp
c001e3c5:	6a 0f                	push   0xf
c001e3c7:	6a 00                	push   0x0
c001e3c9:	e8 c3 ee ff ff       	call   c001d291 <combineColours(unsigned char, unsigned char)>
c001e3ce:	5a                   	pop    edx
c001e3cf:	59                   	pop    ecx
c001e3d0:	0f b6 c0             	movzx  eax,al
c001e3d3:	50                   	push   eax
c001e3d4:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e3d9:	99                   	cdq    
c001e3da:	f7 fe                	idiv   esi
c001e3dc:	99                   	cdq    
c001e3dd:	f7 fb                	idiv   ebx
c001e3df:	8d 42 30             	lea    eax,[edx+0x30]
c001e3e2:	0f b6 c0             	movzx  eax,al
c001e3e5:	50                   	push   eax
c001e3e6:	e8 95 ee ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001e3eb:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e3f1:	5e                   	pop    esi
c001e3f2:	5f                   	pop    edi
c001e3f3:	6a 0f                	push   0xf
c001e3f5:	6a 00                	push   0x0
c001e3f7:	e8 95 ee ff ff       	call   c001d291 <combineColours(unsigned char, unsigned char)>
c001e3fc:	5d                   	pop    ebp
c001e3fd:	5a                   	pop    edx
c001e3fe:	0f b6 c0             	movzx  eax,al
c001e401:	50                   	push   eax
c001e402:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e407:	99                   	cdq    
c001e408:	f7 fb                	idiv   ebx
c001e40a:	99                   	cdq    
c001e40b:	f7 fb                	idiv   ebx
c001e40d:	8d 42 30             	lea    eax,[edx+0x30]
c001e410:	0f b6 c0             	movzx  eax,al
c001e413:	50                   	push   eax
c001e414:	e8 67 ee ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001e419:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e41f:	59                   	pop    ecx
c001e420:	5e                   	pop    esi
c001e421:	6a 0f                	push   0xf
c001e423:	6a 00                	push   0x0
c001e425:	e8 67 ee ff ff       	call   c001d291 <combineColours(unsigned char, unsigned char)>
c001e42a:	5f                   	pop    edi
c001e42b:	5d                   	pop    ebp
c001e42c:	0f b6 c0             	movzx  eax,al
c001e42f:	50                   	push   eax
c001e430:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e435:	99                   	cdq    
c001e436:	f7 fb                	idiv   ebx
c001e438:	83 c2 30             	add    edx,0x30
c001e43b:	0f b6 d2             	movzx  edx,dl
c001e43e:	52                   	push   edx
c001e43f:	e8 3c ee ff ff       	call   c001d280 <combineCharAndColour(char, unsigned char)>
c001e444:	83 c4 10             	add    esp,0x10
c001e447:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e44d:	31 c0                	xor    eax,eax
c001e44f:	83 c4 0c             	add    esp,0xc
c001e452:	5b                   	pop    ebx
c001e453:	5e                   	pop    esi
c001e454:	5f                   	pop    edi
c001e455:	5d                   	pop    ebp
c001e456:	c3                   	ret    
c001e457:	90                   	nop

c001e458 <SATAPI::write(unsigned long long, int, void*)>:
c001e458:	b8 03 00 00 00       	mov    eax,0x3
c001e45d:	c3                   	ret    

c001e45e <SATAPI::close(int, int, void*)>:
c001e45e:	83 ec 0c             	sub    esp,0xc
c001e461:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e465:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e46b:	85 c0                	test   eax,eax
c001e46d:	74 0c                	je     c001e47b <SATAPI::close(int, int, void*)+0x1d>
c001e46f:	8b 10                	mov    edx,DWORD PTR [eax]
c001e471:	83 ec 0c             	sub    esp,0xc
c001e474:	50                   	push   eax
c001e475:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e478:	83 c4 10             	add    esp,0x10
c001e47b:	31 c0                	xor    eax,eax
c001e47d:	83 c4 0c             	add    esp,0xc
c001e480:	c3                   	ret    
c001e481:	90                   	nop

c001e482 <SATAPI::SATAPI()>:
c001e482:	83 ec 0c             	sub    esp,0xc
c001e485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e489:	83 ec 04             	sub    esp,0x4
c001e48c:	68 00 08 00 00       	push   0x800
c001e491:	68 88 36 02 c0       	push   0xc0023688
c001e496:	50                   	push   eax
c001e497:	e8 3a e9 fe ff       	call   c000cdd6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e49c:	83 c4 10             	add    esp,0x10
c001e49f:	ba 7c 37 02 c0       	mov    edx,0xc002377c
c001e4a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4a8:	89 10                	mov    DWORD PTR [eax],edx
c001e4aa:	90                   	nop
c001e4ab:	83 c4 0c             	add    esp,0xc
c001e4ae:	c3                   	ret    
c001e4af:	90                   	nop

c001e4b0 <SATAPI::diskRemoved()>:
c001e4b0:	c3                   	ret    
c001e4b1:	90                   	nop

c001e4b2 <SATAPI::diskInserted()>:
c001e4b2:	83 ec 18             	sub    esp,0x18
c001e4b5:	68 94 36 02 c0       	push   0xc0023694
c001e4ba:	e8 7b c4 fe ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001e4bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4c3:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e4ca:	83 c4 1c             	add    esp,0x1c
c001e4cd:	c3                   	ret    

c001e4ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e4ce:	55                   	push   ebp
c001e4cf:	57                   	push   edi
c001e4d0:	56                   	push   esi
c001e4d1:	53                   	push   ebx
c001e4d2:	83 ec 34             	sub    esp,0x34
c001e4d5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e4d9:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e4dd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e4e1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e4e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e4e9:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e4ef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e4f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e4f9:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e4ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e503:	83 c0 02             	add    eax,0x2
c001e506:	c1 e0 07             	shl    eax,0x7
c001e509:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e50d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e511:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e515:	c1 e0 07             	shl    eax,0x7
c001e518:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e51c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e520:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e52a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e52e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e534:	e8 ff e4 ff ff       	call   c001ca38 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e539:	83 c4 10             	add    esp,0x10
c001e53c:	89 c2                	mov    edx,eax
c001e53e:	b8 01 00 00 00       	mov    eax,0x1
c001e543:	83 fa ff             	cmp    edx,0xffffffff
c001e546:	0f 84 5f 02 00 00    	je     c001e7ab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e54c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e550:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e554:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e55a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e55c:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e562:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e568:	89 d1                	mov    ecx,edx
c001e56a:	c1 e1 05             	shl    ecx,0x5
c001e56d:	01 c8                	add    eax,ecx
c001e56f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e571:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e577:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e57d:	89 08                	mov    DWORD PTR [eax],ecx
c001e57f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e585:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e58b:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e591:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e594:	50                   	push   eax
c001e595:	68 90 00 00 00       	push   0x90
c001e59a:	6a 00                	push   0x0
c001e59c:	53                   	push   ebx
c001e59d:	e8 4e 1f fe ff       	call   c00004f0 <memset>
c001e5a2:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e5a5:	b9 0c 00 00 00       	mov    ecx,0xc
c001e5aa:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e5ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e5b0:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e5b6:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e5ba:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e5be:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e5c4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e5c8:	48                   	dec    eax
c001e5c9:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e5ce:	89 c1                	mov    ecx,eax
c001e5d0:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e5d6:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e5db:	09 c8                	or     eax,ecx
c001e5dd:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e5e3:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e5e9:	83 c8 80             	or     eax,0xffffff80
c001e5ec:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e5f2:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e5f5:	25 00 7f 00 00       	and    eax,0x7f00
c001e5fa:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e5ff:	66 89 03             	mov    WORD PTR [ebx],ax
c001e602:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e606:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001e60a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e60e:	c1 e8 10             	shr    eax,0x10
c001e611:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e614:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e618:	c1 e8 18             	shr    eax,0x18
c001e61b:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001e61e:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e622:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e625:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e629:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e62c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e630:	83 c4 10             	add    esp,0x10
c001e633:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e637:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e63b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e63f:	31 c0                	xor    eax,eax
c001e641:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001e647:	80 e1 88             	and    cl,0x88
c001e64a:	74 0a                	je     c001e656 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001e64c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e651:	74 0a                	je     c001e65d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001e653:	40                   	inc    eax
c001e654:	eb eb                	jmp    c001e641 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001e656:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e65b:	75 43                	jne    c001e6a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001e65d:	83 ec 0c             	sub    esp,0xc
c001e660:	68 ac 36 02 c0       	push   0xc00236ac
c001e665:	e8 d0 c2 fe ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001e66a:	58                   	pop    eax
c001e66b:	5a                   	pop    edx
c001e66c:	68 c1 36 02 c0       	push   0xc00236c1
c001e671:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001e677:	e8 60 a4 fe ff       	call   c0008adc <VgaText::puts(char const*)>
c001e67c:	59                   	pop    ecx
c001e67d:	5b                   	pop    ebx
c001e67e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e682:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e688:	e8 45 e4 ff ff       	call   c001cad2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e68d:	5e                   	pop    esi
c001e68e:	5f                   	pop    edi
c001e68f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e693:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e699:	e8 14 e4 ff ff       	call   c001cab2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e69e:	eb 48                	jmp    c001e6e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001e6a0:	b8 01 00 00 00       	mov    eax,0x1
c001e6a5:	88 d1                	mov    cl,dl
c001e6a7:	d3 e0                	shl    eax,cl
c001e6a9:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001e6ae:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001e6b4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e6b8:	89 c7                	mov    edi,eax
c001e6ba:	c1 e3 07             	shl    ebx,0x7
c001e6bd:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001e6c1:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001e6c7:	85 c7                	test   edi,eax
c001e6c9:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001e6cf:	0f 84 a3 00 00 00    	je     c001e778 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001e6d5:	0f ba e0 1e          	bt     eax,0x1e
c001e6d9:	73 1a                	jae    c001e6f5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001e6db:	83 ec 0c             	sub    esp,0xc
c001e6de:	68 d3 36 02 c0       	push   0xc00236d3
c001e6e3:	e8 52 c2 fe ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001e6e8:	83 c4 10             	add    esp,0x10
c001e6eb:	b8 01 00 00 00       	mov    eax,0x1
c001e6f0:	e9 b6 00 00 00       	jmp    c001e7ab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e6f5:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001e6fb:	83 f8 0d             	cmp    eax,0xd
c001e6fe:	77 0a                	ja     c001e70a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001e700:	83 ec 0c             	sub    esp,0xc
c001e703:	68 c8 00 00 00       	push   0xc8
c001e708:	eb 28                	jmp    c001e732 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e70a:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001e710:	83 f8 0d             	cmp    eax,0xd
c001e713:	77 0a                	ja     c001e71f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001e715:	83 ec 0c             	sub    esp,0xc
c001e718:	68 58 02 00 00       	push   0x258
c001e71d:	eb 13                	jmp    c001e732 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e71f:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001e725:	83 f8 06             	cmp    eax,0x6
c001e728:	77 10                	ja     c001e73a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001e72a:	83 ec 0c             	sub    esp,0xc
c001e72d:	68 dc 05 00 00       	push   0x5dc
c001e732:	e8 69 7d ff ff       	call   c00164a0 <milliTenthSleep(unsigned int)>
c001e737:	83 c4 10             	add    esp,0x10
c001e73a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e73e:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e741:	75 06                	jne    c001e749 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001e743:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e747:	74 15                	je     c001e75e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e749:	83 fe 06             	cmp    esi,0x6
c001e74c:	77 10                	ja     c001e75e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e74e:	83 ec 0c             	sub    esp,0xc
c001e751:	68 c4 09 00 00       	push   0x9c4
c001e756:	e8 45 7d ff ff       	call   c00164a0 <milliTenthSleep(unsigned int)>
c001e75b:	83 c4 10             	add    esp,0x10
c001e75e:	46                   	inc    esi
c001e75f:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001e765:	0f 85 56 ff ff ff    	jne    c001e6c1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001e76b:	83 ec 0c             	sub    esp,0xc
c001e76e:	68 e6 36 02 c0       	push   0xc00236e6
c001e773:	e9 6b ff ff ff       	jmp    c001e6e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e778:	0f ba e0 1e          	bt     eax,0x1e
c001e77c:	73 0d                	jae    c001e78b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001e77e:	83 ec 0c             	sub    esp,0xc
c001e781:	68 fa 36 02 c0       	push   0xc00236fa
c001e786:	e9 58 ff ff ff       	jmp    c001e6e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e78b:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e790:	74 17                	je     c001e7a9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e792:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e797:	74 10                	je     c001e7a9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e799:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e79f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e7a3:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e7a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e7a9:	31 c0                	xor    eax,eax
c001e7ab:	83 c4 2c             	add    esp,0x2c
c001e7ae:	5b                   	pop    ebx
c001e7af:	5e                   	pop    esi
c001e7b0:	5f                   	pop    edi
c001e7b1:	5d                   	pop    ebp
c001e7b2:	c3                   	ret    
c001e7b3:	90                   	nop

c001e7b4 <SATAPI::eject()>:
c001e7b4:	57                   	push   edi
c001e7b5:	b9 03 00 00 00       	mov    ecx,0x3
c001e7ba:	83 ec 18             	sub    esp,0x18
c001e7bd:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e7c1:	fc                   	cld    
c001e7c2:	31 c0                	xor    eax,eax
c001e7c4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e7c6:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e7cb:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e7d0:	50                   	push   eax
c001e7d1:	6a 00                	push   0x0
c001e7d3:	6a 00                	push   0x0
c001e7d5:	6a 00                	push   0x0
c001e7d7:	6a 00                	push   0x0
c001e7d9:	6a 02                	push   0x2
c001e7db:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e7df:	50                   	push   eax
c001e7e0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e7e4:	e8 e5 fc ff ff       	call   c001e4ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e7e9:	83 c4 38             	add    esp,0x38
c001e7ec:	31 c0                	xor    eax,eax
c001e7ee:	5f                   	pop    edi
c001e7ef:	c3                   	ret    

c001e7f0 <SATAPI::detectMedia()>:
c001e7f0:	53                   	push   ebx
c001e7f1:	83 ec 14             	sub    esp,0x14
c001e7f4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e7f8:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e7fe:	e8 59 ff fe ff       	call   c000e75c <VCache::writeWriteBuffer()>
c001e803:	59                   	pop    ecx
c001e804:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e80a:	e8 3d ff fe ff       	call   c000e74c <VCache::invalidateReadBuffer()>
c001e80f:	c7 04 24 0f 37 02 c0 	mov    DWORD PTR [esp],0xc002370f
c001e816:	e8 1f c1 fe ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001e81b:	83 c4 10             	add    esp,0x10
c001e81e:	31 c0                	xor    eax,eax
c001e820:	8b 14 85 80 b8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4780]
c001e827:	85 d2                	test   edx,edx
c001e829:	74 0f                	je     c001e83a <SATAPI::detectMedia()+0x4a>
c001e82b:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e831:	75 07                	jne    c001e83a <SATAPI::detectMedia()+0x4a>
c001e833:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e83a:	40                   	inc    eax
c001e83b:	83 f8 1a             	cmp    eax,0x1a
c001e83e:	75 e0                	jne    c001e820 <SATAPI::detectMedia()+0x30>
c001e840:	83 c4 08             	add    esp,0x8
c001e843:	5b                   	pop    ebx
c001e844:	c3                   	ret    
c001e845:	90                   	nop

c001e846 <SATAPI::open(int, int, void*)>:
c001e846:	56                   	push   esi
c001e847:	53                   	push   ebx
c001e848:	51                   	push   ecx
c001e849:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e84d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e851:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e85b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e861:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e865:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e86f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e879:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e880:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e886:	e8 87 95 fe ff       	call   c0007e12 <Phys::allocatePage()>
c001e88b:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e891:	89 c6                	mov    esi,eax
c001e893:	e8 7a 95 fe ff       	call   c0007e12 <Phys::allocatePage()>
c001e898:	81 c6 00 10 00 00    	add    esi,0x1000
c001e89e:	39 c6                	cmp    esi,eax
c001e8a0:	74 10                	je     c001e8b2 <SATAPI::open(int, int, void*)+0x6c>
c001e8a2:	83 ec 0c             	sub    esp,0xc
c001e8a5:	68 24 37 02 c0       	push   0xc0023724
c001e8aa:	e8 a8 2d ff ff       	call   c0011657 <KePanic(char const*)>
c001e8af:	83 c4 10             	add    esp,0x10
c001e8b2:	83 ec 0c             	sub    esp,0xc
c001e8b5:	6a 02                	push   0x2
c001e8b7:	e8 69 ad fe ff       	call   c0009625 <Virt::allocateKernelVirtualPages(int)>
c001e8bc:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e8c2:	6a 03                	push   0x3
c001e8c4:	50                   	push   eax
c001e8c5:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e8cb:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001e8d1:	e8 58 b4 fe ff       	call   c0009d2e <VAS::mapPage(unsigned long, unsigned long, int)>
c001e8d6:	83 c4 14             	add    esp,0x14
c001e8d9:	68 78 01 00 00       	push   0x178
c001e8de:	e8 20 92 fe ff       	call   c0007b03 <malloc>
c001e8e3:	83 c4 0c             	add    esp,0xc
c001e8e6:	6a 00                	push   0x0
c001e8e8:	68 ff ff ff 7f       	push   0x7fffffff
c001e8ed:	6a 00                	push   0x0
c001e8ef:	6a 00                	push   0x0
c001e8f1:	53                   	push   ebx
c001e8f2:	68 3a 37 02 c0       	push   0xc002373a
c001e8f7:	89 c6                	mov    esi,eax
c001e8f9:	50                   	push   eax
c001e8fa:	e8 b7 f2 fe ff       	call   c000dbb6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e8ff:	83 c4 14             	add    esp,0x14
c001e902:	56                   	push   esi
c001e903:	e8 6e f3 fe ff       	call   c000dc76 <LogicalDisk::assignDriveLetter()>
c001e908:	5a                   	pop    edx
c001e909:	59                   	pop    ecx
c001e90a:	0f be c0             	movsx  eax,al
c001e90d:	50                   	push   eax
c001e90e:	68 8c 35 02 c0       	push   0xc002358c
c001e913:	e8 22 c0 fe ff       	call   c000a93a <Dbg::kprintf(char const*, ...)>
c001e918:	58                   	pop    eax
c001e919:	5a                   	pop    edx
c001e91a:	56                   	push   esi
c001e91b:	53                   	push   ebx
c001e91c:	e8 af e0 fe ff       	call   c000c9d0 <Device::addChild(Device*)>
c001e921:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e927:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e92a:	e8 0f e5 fe ff       	call   c000ce3e <PhysicalDisk::startCache()>
c001e92f:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e936:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e939:	e8 b2 fe ff ff       	call   c001e7f0 <SATAPI::detectMedia()>
c001e93e:	83 c4 14             	add    esp,0x14
c001e941:	31 c0                	xor    eax,eax
c001e943:	5b                   	pop    ebx
c001e944:	5e                   	pop    esi
c001e945:	c3                   	ret    

c001e946 <SATAPI::read(unsigned long long, int, void*)>:
c001e946:	55                   	push   ebp
c001e947:	57                   	push   edi
c001e948:	56                   	push   esi
c001e949:	53                   	push   ebx
c001e94a:	83 ec 3c             	sub    esp,0x3c
c001e94d:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001e951:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e955:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e959:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e95d:	83 fd 04             	cmp    ebp,0x4
c001e960:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e964:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e968:	7e 10                	jle    c001e97a <SATAPI::read(unsigned long long, int, void*)+0x34>
c001e96a:	83 ec 0c             	sub    esp,0xc
c001e96d:	68 48 37 02 c0       	push   0xc0023748
c001e972:	e8 e0 2c ff ff       	call   c0011657 <KePanic(char const*)>
c001e977:	83 c4 10             	add    esp,0x10
c001e97a:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e980:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e986:	51                   	push   ecx
c001e987:	50                   	push   eax
c001e988:	83 c0 02             	add    eax,0x2
c001e98b:	c1 e0 07             	shl    eax,0x7
c001e98e:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e994:	50                   	push   eax
c001e995:	52                   	push   edx
c001e996:	e8 61 e1 ff ff       	call   c001cafc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e99b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e99f:	b9 03 00 00 00       	mov    ecx,0x3
c001e9a4:	fc                   	cld    
c001e9a5:	31 c0                	xor    eax,eax
c001e9a7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e9a9:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e9ae:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e9b3:	83 c4 0c             	add    esp,0xc
c001e9b6:	6a 00                	push   0x0
c001e9b8:	6a 00                	push   0x0
c001e9ba:	6a 00                	push   0x0
c001e9bc:	6a 00                	push   0x0
c001e9be:	6a 02                	push   0x2
c001e9c0:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e9c4:	50                   	push   eax
c001e9c5:	53                   	push   ebx
c001e9c6:	e8 03 fb ff ff       	call   c001e4ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e9cb:	83 c4 20             	add    esp,0x20
c001e9ce:	85 c0                	test   eax,eax
c001e9d0:	89 c6                	mov    esi,eax
c001e9d2:	75 46                	jne    c001ea1a <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001e9d4:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e9d8:	b9 03 00 00 00       	mov    ecx,0x3
c001e9dd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e9df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e9e3:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e9e8:	0f c8                	bswap  eax
c001e9ea:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e9ee:	89 e8                	mov    eax,ebp
c001e9f0:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e9f4:	50                   	push   eax
c001e9f5:	55                   	push   ebp
c001e9f6:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001e9fa:	c1 e5 0b             	shl    ebp,0xb
c001e9fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ea01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ea05:	55                   	push   ebp
c001ea06:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ea0a:	50                   	push   eax
c001ea0b:	53                   	push   ebx
c001ea0c:	e8 bd fa ff ff       	call   c001e4ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ea11:	83 c4 20             	add    esp,0x20
c001ea14:	85 c0                	test   eax,eax
c001ea16:	89 c6                	mov    esi,eax
c001ea18:	74 0c                	je     c001ea26 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001ea1a:	83 ec 0c             	sub    esp,0xc
c001ea1d:	53                   	push   ebx
c001ea1e:	e8 cd fd ff ff       	call   c001e7f0 <SATAPI::detectMedia()>
c001ea23:	83 c4 10             	add    esp,0x10
c001ea26:	83 c4 3c             	add    esp,0x3c
c001ea29:	89 f0                	mov    eax,esi
c001ea2b:	5b                   	pop    ebx
c001ea2c:	5e                   	pop    esi
c001ea2d:	5f                   	pop    edi
c001ea2e:	5d                   	pop    ebp
c001ea2f:	c3                   	ret    

c001ea30 <IOAPIC::close(int, int, void*)>:
c001ea30:	b8 00 00 00 00       	mov    eax,0x0
c001ea35:	c3                   	ret    

c001ea36 <apicGetBase()>:
c001ea36:	55                   	push   ebp
c001ea37:	89 e5                	mov    ebp,esp
c001ea39:	83 ec 18             	sub    esp,0x18
c001ea3c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001ea41:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001ea47:	83 e0 08             	and    eax,0x8
c001ea4a:	0f b6 c0             	movzx  eax,al
c001ea4d:	85 c0                	test   eax,eax
c001ea4f:	75 07                	jne    c001ea58 <apicGetBase()+0x22>
c001ea51:	b8 00 00 00 00       	mov    eax,0x0
c001ea56:	eb 21                	jmp    c001ea79 <apicGetBase()+0x43>
c001ea58:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001ea5d:	83 ec 08             	sub    esp,0x8
c001ea60:	6a 1b                	push   0x1b
c001ea62:	50                   	push   eax
c001ea63:	e8 aa 86 fe ff       	call   c0007112 <Computer::rdmsr(unsigned int)>
c001ea68:	83 c4 10             	add    esp,0x10
c001ea6b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ea6e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001ea71:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea74:	25 00 00 ff ff       	and    eax,0xffff0000
c001ea79:	c9                   	leave  
c001ea7a:	c3                   	ret    
c001ea7b:	90                   	nop

c001ea7c <IOAPIC::IOAPIC()>:
c001ea7c:	83 ec 0c             	sub    esp,0xc
c001ea7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea83:	83 ec 08             	sub    esp,0x8
c001ea86:	68 ac 37 02 c0       	push   0xc00237ac
c001ea8b:	50                   	push   eax
c001ea8c:	e8 11 e1 fe ff       	call   c000cba2 <Device::Device(char const*)>
c001ea91:	83 c4 10             	add    esp,0x10
c001ea94:	ba bc 37 02 c0       	mov    edx,0xc00237bc
c001ea99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea9d:	89 10                	mov    DWORD PTR [eax],edx
c001ea9f:	90                   	nop
c001eaa0:	83 c4 0c             	add    esp,0xc
c001eaa3:	c3                   	ret    

c001eaa4 <apicOpen()>:
c001eaa4:	55                   	push   ebp
c001eaa5:	89 e5                	mov    ebp,esp
c001eaa7:	53                   	push   ebx
c001eaa8:	83 ec 34             	sub    esp,0x34
c001eaab:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c001eab0:	83 f0 01             	xor    eax,0x1
c001eab3:	0f b6 c0             	movzx  eax,al
c001eab6:	85 c0                	test   eax,eax
c001eab8:	0f 84 a3 00 00 00    	je     c001eb61 <apicOpen()+0xbd>
c001eabe:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001eac2:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c001eac7:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001eacb:	0f b6 c0             	movzx  eax,al
c001eace:	39 c2                	cmp    edx,eax
c001ead0:	0f 83 84 00 00 00    	jae    c001eb5a <apicOpen()+0xb6>
c001ead6:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001eadd:	83 ec 0c             	sub    esp,0xc
c001eae0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001eae3:	e8 1b 90 fe ff       	call   c0007b03 <malloc>
c001eae8:	83 c4 10             	add    esp,0x10
c001eaeb:	89 c3                	mov    ebx,eax
c001eaed:	83 ec 0c             	sub    esp,0xc
c001eaf0:	53                   	push   ebx
c001eaf1:	e8 86 ff ff ff       	call   c001ea7c <IOAPIC::IOAPIC()>
c001eaf6:	83 c4 10             	add    esp,0x10
c001eaf9:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001eafc:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001eb00:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001eb03:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001eb0a:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c001eb0f:	83 c0 01             	add    eax,0x1
c001eb12:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001eb17:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001eb1c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001eb22:	83 ec 08             	sub    esp,0x8
c001eb25:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001eb28:	50                   	push   eax
c001eb29:	e8 a2 de fe ff       	call   c000c9d0 <Device::addChild(Device*)>
c001eb2e:	83 c4 10             	add    esp,0x10
c001eb31:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001eb34:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb36:	83 c0 08             	add    eax,0x8
c001eb39:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb3b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001eb3f:	6a 00                	push   0x0
c001eb41:	6a 00                	push   0x0
c001eb43:	52                   	push   edx
c001eb44:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001eb47:	ff d0                	call   eax
c001eb49:	83 c4 10             	add    esp,0x10
c001eb4c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001eb4f:	83 c0 01             	add    eax,0x1
c001eb52:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001eb55:	e9 68 ff ff ff       	jmp    c001eac2 <apicOpen()+0x1e>
c001eb5a:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c001eb61:	e8 d0 fe ff ff       	call   c001ea36 <apicGetBase()>
c001eb66:	05 f0 00 00 00       	add    eax,0xf0
c001eb6b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001eb6e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eb71:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb73:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001eb76:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001eb7d:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001eb84:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eb87:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001eb8a:	89 10                	mov    DWORD PTR [eax],edx
c001eb8c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001eb93:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c001eb98:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001eb9b:	7d 7c                	jge    c001ec19 <apicOpen()+0x175>
c001eb9d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eba0:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001eba7:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001ebaa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ebad:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ebb4:	c1 e8 08             	shr    eax,0x8
c001ebb7:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001ebbb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ebbe:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ebc5:	c1 e8 18             	shr    eax,0x18
c001ebc8:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001ebcb:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001ebcf:	3d ff 00 00 00       	cmp    eax,0xff
c001ebd4:	75 3a                	jne    c001ec10 <apicOpen()+0x16c>
c001ebd6:	e8 5b fe ff ff       	call   c001ea36 <apicGetBase()>
c001ebdb:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001ebdf:	83 fa 01             	cmp    edx,0x1
c001ebe2:	75 07                	jne    c001ebeb <apicOpen()+0x147>
c001ebe4:	ba 60 03 00 00       	mov    edx,0x360
c001ebe9:	eb 05                	jmp    c001ebf0 <apicOpen()+0x14c>
c001ebeb:	ba 50 03 00 00       	mov    edx,0x350
c001ebf0:	01 d0                	add    eax,edx
c001ebf2:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ebf5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ebf8:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebfa:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001ebfd:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001ec04:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001ec08:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ec0b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ec0e:	89 10                	mov    DWORD PTR [eax],edx
c001ec10:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001ec14:	e9 7a ff ff ff       	jmp    c001eb93 <apicOpen()+0xef>
c001ec19:	90                   	nop
c001ec1a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ec1d:	c9                   	leave  
c001ec1e:	c3                   	ret    
c001ec1f:	90                   	nop

c001ec20 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ec20:	55                   	push   ebp
c001ec21:	89 e5                	mov    ebp,esp
c001ec23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec26:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ec2c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ec2f:	72 1d                	jb     c001ec4e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ec31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec34:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ec3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec3d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ec43:	01 d0                	add    eax,edx
c001ec45:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ec48:	73 04                	jae    c001ec4e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ec4a:	b0 01                	mov    al,0x1
c001ec4c:	eb 02                	jmp    c001ec50 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ec4e:	b0 00                	mov    al,0x0
c001ec50:	5d                   	pop    ebp
c001ec51:	c3                   	ret    

c001ec52 <IOAPIC::read(int)>:
c001ec52:	55                   	push   ebp
c001ec53:	89 e5                	mov    ebp,esp
c001ec55:	83 ec 10             	sub    esp,0x10
c001ec58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec5b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ec61:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ec64:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ec67:	0f b6 d0             	movzx  edx,al
c001ec6a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec6d:	89 10                	mov    DWORD PTR [eax],edx
c001ec6f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec72:	83 c0 10             	add    eax,0x10
c001ec75:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec77:	c9                   	leave  
c001ec78:	c3                   	ret    
c001ec79:	90                   	nop

c001ec7a <IOAPIC::open(int, int, void*)>:
c001ec7a:	55                   	push   ebp
c001ec7b:	89 e5                	mov    ebp,esp
c001ec7d:	57                   	push   edi
c001ec7e:	56                   	push   esi
c001ec7f:	53                   	push   ebx
c001ec80:	83 ec 04             	sub    esp,0x4
c001ec83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec86:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ec89:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ec8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec92:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ec98:	8b 14 85 20 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd43e0]
c001ec9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eca2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001eca8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecab:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ecb1:	8b 14 85 a0 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4360]
c001ecb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecbb:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ecc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ecc4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ecca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eccd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ecd3:	0f b6 f0             	movzx  esi,al
c001ecd6:	89 d0                	mov    eax,edx
c001ecd8:	ba 00 00 00 00       	mov    edx,0x0
c001ecdd:	89 c7                	mov    edi,eax
c001ecdf:	83 e7 ff             	and    edi,0xffffffff
c001ece2:	89 f9                	mov    ecx,edi
c001ece4:	0f b6 da             	movzx  ebx,dl
c001ece7:	89 c8                	mov    eax,ecx
c001ece9:	89 da                	mov    edx,ebx
c001eceb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ecee:	8d 5e 08             	lea    ebx,[esi+0x8]
c001ecf1:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ecf5:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ecf9:	83 e0 00             	and    eax,0x0
c001ecfc:	09 d0                	or     eax,edx
c001ecfe:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ed02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ed05:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ed0b:	8d 50 01             	lea    edx,[eax+0x1]
c001ed0e:	88 d1                	mov    cl,dl
c001ed10:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001ed13:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001ed19:	0f b6 d0             	movzx  edx,al
c001ed1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ed1f:	83 c2 08             	add    edx,0x8
c001ed22:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ed26:	0f b6 c9             	movzx  ecx,cl
c001ed29:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ed2f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ed33:	6a 01                	push   0x1
c001ed35:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed38:	e8 15 ff ff ff       	call   c001ec52 <IOAPIC::read(int)>
c001ed3d:	83 c4 08             	add    esp,0x8
c001ed40:	c1 f8 10             	sar    eax,0x10
c001ed43:	0f b6 c0             	movzx  eax,al
c001ed46:	8d 50 01             	lea    edx,[eax+0x1]
c001ed49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ed4c:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ed52:	b8 00 00 00 00       	mov    eax,0x0
c001ed57:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ed5a:	5b                   	pop    ebx
c001ed5b:	5e                   	pop    esi
c001ed5c:	5f                   	pop    edi
c001ed5d:	5d                   	pop    ebp
c001ed5e:	c3                   	ret    
c001ed5f:	90                   	nop

c001ed60 <IOAPIC::write(int, int)>:
c001ed60:	55                   	push   ebp
c001ed61:	89 e5                	mov    ebp,esp
c001ed63:	83 ec 10             	sub    esp,0x10
c001ed66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ed69:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ed6f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ed72:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed75:	0f b6 d0             	movzx  edx,al
c001ed78:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ed7b:	89 10                	mov    DWORD PTR [eax],edx
c001ed7d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ed80:	8d 50 10             	lea    edx,[eax+0x10]
c001ed83:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ed86:	89 02                	mov    DWORD PTR [edx],eax
c001ed88:	90                   	nop
c001ed89:	c9                   	leave  
c001ed8a:	c3                   	ret    
c001ed8b:	90                   	nop

c001ed8c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ed8c:	55                   	push   ebp
c001ed8d:	89 e5                	mov    ebp,esp
c001ed8f:	53                   	push   ebx
c001ed90:	83 ec 2c             	sub    esp,0x2c
c001ed93:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed96:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ed99:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ed9c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ed9f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001eda2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001eda5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001eda8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001edab:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001edae:	88 d8                	mov    al,bl
c001edb0:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001edb3:	88 c8                	mov    al,cl
c001edb5:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001edb8:	88 d0                	mov    al,dl
c001edba:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001edbd:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001edc1:	83 c0 08             	add    eax,0x8
c001edc4:	d1 e0                	shl    eax,1
c001edc6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001edc9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001edcd:	83 c0 08             	add    eax,0x8
c001edd0:	d1 e0                	shl    eax,1
c001edd2:	83 c0 01             	add    eax,0x1
c001edd5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001edd8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001eddb:	50                   	push   eax
c001eddc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eddf:	e8 6e fe ff ff       	call   c001ec52 <IOAPIC::read(int)>
c001ede4:	83 c4 08             	add    esp,0x8
c001ede7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001edea:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001edf1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001edf4:	c1 e0 18             	shl    eax,0x18
c001edf7:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001edfa:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001edfd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ee00:	52                   	push   edx
c001ee01:	50                   	push   eax
c001ee02:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ee05:	e8 56 ff ff ff       	call   c001ed60 <IOAPIC::write(int, int)>
c001ee0a:	83 c4 0c             	add    esp,0xc
c001ee0d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ee10:	50                   	push   eax
c001ee11:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ee14:	e8 39 fe ff ff       	call   c001ec52 <IOAPIC::read(int)>
c001ee19:	83 c4 08             	add    esp,0x8
c001ee1c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001ee1f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001ee26:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001ee2d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001ee34:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001ee38:	85 c0                	test   eax,eax
c001ee3a:	74 09                	je     c001ee45 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001ee3c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001ee43:	eb 07                	jmp    c001ee4c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001ee45:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001ee4c:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001ee50:	85 c0                	test   eax,eax
c001ee52:	74 09                	je     c001ee5d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001ee54:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001ee5b:	eb 07                	jmp    c001ee64 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001ee5d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001ee64:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001ee6b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001ee6f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ee72:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ee75:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ee78:	52                   	push   edx
c001ee79:	50                   	push   eax
c001ee7a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ee7d:	e8 de fe ff ff       	call   c001ed60 <IOAPIC::write(int, int)>
c001ee82:	83 c4 0c             	add    esp,0xc
c001ee85:	90                   	nop
c001ee86:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ee89:	c9                   	leave  
c001ee8a:	c3                   	ret    
c001ee8b:	90                   	nop

c001ee8c <APICTimer::close(int, int, void*)>:
c001ee8c:	b8 00 00 00 00       	mov    eax,0x0
c001ee91:	c3                   	ret    
c001ee92:	66 90                	xchg   ax,ax

c001ee94 <apicTimerHandler(regs*, void*)>:
c001ee94:	83 ec 0c             	sub    esp,0xc
c001ee97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee9b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ee9d:	b8 10 27 00 00       	mov    eax,0x2710
c001eea2:	ba 00 00 00 00       	mov    edx,0x0
c001eea7:	f7 f1                	div    ecx
c001eea9:	83 ec 0c             	sub    esp,0xc
c001eeac:	50                   	push   eax
c001eead:	e8 c2 f5 fe ff       	call   c000e474 <timerHandler(unsigned int)>
c001eeb2:	83 c4 10             	add    esp,0x10
c001eeb5:	90                   	nop
c001eeb6:	83 c4 0c             	add    esp,0xc
c001eeb9:	c3                   	ret    
c001eeba:	66 90                	xchg   ax,ax

c001eebc <APICTimer::open(int, int, void*)>:
c001eebc:	83 ec 0c             	sub    esp,0xc
c001eebf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eec3:	8b 00                	mov    eax,DWORD PTR [eax]
c001eec5:	83 c0 24             	add    eax,0x24
c001eec8:	8b 00                	mov    eax,DWORD PTR [eax]
c001eeca:	83 ec 08             	sub    esp,0x8
c001eecd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eed1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eed5:	ff d0                	call   eax
c001eed7:	83 c4 10             	add    esp,0x10
c001eeda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eede:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001eee2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001eee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eef0:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001eef6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eefa:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ef00:	83 ec 0c             	sub    esp,0xc
c001ef03:	51                   	push   ecx
c001ef04:	6a 01                	push   0x1
c001ef06:	68 94 ee 01 c0       	push   0xc001ee94
c001ef0b:	52                   	push   edx
c001ef0c:	50                   	push   eax
c001ef0d:	e8 6a da fe ff       	call   c000c97c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ef12:	83 c4 20             	add    esp,0x20
c001ef15:	89 c2                	mov    edx,eax
c001ef17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef1b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ef21:	b8 00 00 00 00       	mov    eax,0x0
c001ef26:	83 c4 0c             	add    esp,0xc
c001ef29:	c3                   	ret    
c001ef2a:	66 90                	xchg   ax,ax

c001ef2c <APICTimer::write(int)>:
c001ef2c:	83 ec 0c             	sub    esp,0xc
c001ef2f:	83 ec 0c             	sub    esp,0xc
c001ef32:	68 e0 37 02 c0       	push   0xc00237e0
c001ef37:	e8 1b 27 ff ff       	call   c0011657 <KePanic(char const*)>
c001ef3c:	83 c4 10             	add    esp,0x10
c001ef3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef43:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef47:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ef4d:	90                   	nop
c001ef4e:	83 c4 0c             	add    esp,0xc
c001ef51:	c3                   	ret    
c001ef52:	66 90                	xchg   ax,ax

c001ef54 <APICTimer::APICTimer()>:
c001ef54:	83 ec 0c             	sub    esp,0xc
c001ef57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef5b:	83 ec 08             	sub    esp,0x8
c001ef5e:	68 f0 37 02 c0       	push   0xc00237f0
c001ef63:	50                   	push   eax
c001ef64:	e8 3f f4 fe ff       	call   c000e3a8 <Timer::Timer(char const*)>
c001ef69:	83 c4 10             	add    esp,0x10
c001ef6c:	ba 04 38 02 c0       	mov    edx,0xc0023804
c001ef71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef75:	89 10                	mov    DWORD PTR [eax],edx
c001ef77:	90                   	nop
c001ef78:	83 c4 0c             	add    esp,0xc
c001ef7b:	c3                   	ret    

c001ef7c <PIT::write(int)>:
c001ef7c:	83 ec 10             	sub    esp,0x10
c001ef7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ef83:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ef87:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ef8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ef91:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c001ef96:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ef9b:	89 c2                	mov    edx,eax
c001ef9d:	c1 fa 1f             	sar    edx,0x1f
c001efa0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001efa4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001efa8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001efaf:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001efb4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001efb8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001efbd:	ee                   	out    dx,al
c001efbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001efc2:	0f b6 c0             	movzx  eax,al
c001efc5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001efcc:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001efd0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001efd4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001efd9:	ee                   	out    dx,al
c001efda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001efde:	c1 f8 08             	sar    eax,0x8
c001efe1:	0f b6 c0             	movzx  eax,al
c001efe4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001efeb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001efef:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001eff3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001eff8:	ee                   	out    dx,al
c001eff9:	90                   	nop
c001effa:	83 c4 10             	add    esp,0x10
c001effd:	c3                   	ret    
c001effe:	66 90                	xchg   ax,ax

c001f000 <pitHandler(regs*, void*)>:
c001f000:	83 ec 0c             	sub    esp,0xc
c001f003:	8b 0d 04 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d104
c001f009:	b8 10 27 00 00       	mov    eax,0x2710
c001f00e:	89 c2                	mov    edx,eax
c001f010:	c1 fa 1f             	sar    edx,0x1f
c001f013:	f7 f9                	idiv   ecx
c001f015:	83 ec 0c             	sub    esp,0xc
c001f018:	50                   	push   eax
c001f019:	e8 56 f4 fe ff       	call   c000e474 <timerHandler(unsigned int)>
c001f01e:	83 c4 10             	add    esp,0x10
c001f021:	90                   	nop
c001f022:	83 c4 0c             	add    esp,0xc
c001f025:	c3                   	ret    
c001f026:	66 90                	xchg   ax,ax

c001f028 <PIT::open(int, int, void*)>:
c001f028:	83 ec 0c             	sub    esp,0xc
c001f02b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f02f:	8b 00                	mov    eax,DWORD PTR [eax]
c001f031:	83 c0 24             	add    eax,0x24
c001f034:	8b 00                	mov    eax,DWORD PTR [eax]
c001f036:	83 ec 08             	sub    esp,0x8
c001f039:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f03d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f041:	ff d0                	call   eax
c001f043:	83 c4 10             	add    esp,0x10
c001f046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f04a:	83 ec 0c             	sub    esp,0xc
c001f04d:	6a 00                	push   0x0
c001f04f:	6a 01                	push   0x1
c001f051:	68 00 f0 01 c0       	push   0xc001f000
c001f056:	6a 00                	push   0x0
c001f058:	50                   	push   eax
c001f059:	e8 1e d9 fe ff       	call   c000c97c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f05e:	83 c4 20             	add    esp,0x20
c001f061:	89 c2                	mov    edx,eax
c001f063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f067:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f06d:	b8 00 00 00 00       	mov    eax,0x0
c001f072:	83 c4 0c             	add    esp,0xc
c001f075:	c3                   	ret    
c001f076:	66 90                	xchg   ax,ax

c001f078 <PIT::close(int, int, void*)>:
c001f078:	83 ec 0c             	sub    esp,0xc
c001f07b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f07f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f089:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f08d:	6a 01                	push   0x1
c001f08f:	68 00 f0 01 c0       	push   0xc001f000
c001f094:	6a 00                	push   0x0
c001f096:	50                   	push   eax
c001f097:	e8 16 d9 fe ff       	call   c000c9b2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f09c:	83 c4 10             	add    esp,0x10
c001f09f:	b8 00 00 00 00       	mov    eax,0x0
c001f0a4:	83 c4 0c             	add    esp,0xc
c001f0a7:	c3                   	ret    

c001f0a8 <PIT::PIT()>:
c001f0a8:	83 ec 0c             	sub    esp,0xc
c001f0ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0af:	83 ec 08             	sub    esp,0x8
c001f0b2:	68 2c 38 02 c0       	push   0xc002382c
c001f0b7:	50                   	push   eax
c001f0b8:	e8 eb f2 fe ff       	call   c000e3a8 <Timer::Timer(char const*)>
c001f0bd:	83 c4 10             	add    esp,0x10
c001f0c0:	ba 54 38 02 c0       	mov    edx,0xc0023854
c001f0c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c9:	89 10                	mov    DWORD PTR [eax],edx
c001f0cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0cf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f0d5:	0f b6 d0             	movzx  edx,al
c001f0d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0dc:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f0e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f0ed:	0f b6 d0             	movzx  edx,al
c001f0f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0f4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f0f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0fd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f103:	8d 50 01             	lea    edx,[eax+0x1]
c001f106:	88 d1                	mov    cl,dl
c001f108:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f10c:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001f112:	0f b6 d0             	movzx  edx,al
c001f115:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f119:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f11d:	83 e1 3f             	and    ecx,0x3f
c001f120:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f124:	90                   	nop
c001f125:	83 c4 0c             	add    esp,0xc
c001f128:	c3                   	ret    
c001f129:	66 90                	xchg   ax,ax
c001f12b:	66 90                	xchg   ax,ax
c001f12d:	66 90                	xchg   ax,ax
c001f12f:	90                   	nop

c001f130 <avxDetect>:
c001f130:	b8 01 00 00 00       	mov    eax,0x1
c001f135:	0f a2                	cpuid  
c001f137:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f13d:	74 15                	je     c001f154 <avxDetect.noAVX>
c001f13f:	b8 01 00 00 00       	mov    eax,0x1
c001f144:	0f a2                	cpuid  
c001f146:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f14c:	74 06                	je     c001f154 <avxDetect.noAVX>
c001f14e:	b8 01 00 00 00       	mov    eax,0x1
c001f153:	c3                   	ret    

c001f154 <avxDetect.noAVX>:
c001f154:	b8 00 00 00 00       	mov    eax,0x0
c001f159:	c3                   	ret    

c001f15a <avxSave>:
c001f15a:	53                   	push   ebx
c001f15b:	52                   	push   edx
c001f15c:	31 c0                	xor    eax,eax
c001f15e:	48                   	dec    eax
c001f15f:	89 c2                	mov    edx,eax
c001f161:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f165:	0f ae 23             	xsave  [ebx]
c001f168:	5a                   	pop    edx
c001f169:	5b                   	pop    ebx
c001f16a:	c3                   	ret    

c001f16b <avxLoad>:
c001f16b:	53                   	push   ebx
c001f16c:	52                   	push   edx
c001f16d:	31 c0                	xor    eax,eax
c001f16f:	48                   	dec    eax
c001f170:	89 c2                	mov    edx,eax
c001f172:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f176:	0f ae 2b             	xrstor [ebx]
c001f179:	5a                   	pop    edx
c001f17a:	5b                   	pop    ebx
c001f17b:	c3                   	ret    

c001f17c <avxInit>:
c001f17c:	e8 67 03 00 00       	call   c001f4e8 <sseInit>
c001f181:	50                   	push   eax
c001f182:	51                   	push   ecx
c001f183:	0f 20 e0             	mov    eax,cr4
c001f186:	0d 00 00 04 00       	or     eax,0x40000
c001f18b:	0f 22 e0             	mov    cr4,eax
c001f18e:	31 c9                	xor    ecx,ecx
c001f190:	0f 01 d0             	xgetbv 
c001f193:	0d 07 00 00 00       	or     eax,0x7
c001f198:	0f 01 d1             	xsetbv 
c001f19b:	59                   	pop    ecx
c001f19c:	58                   	pop    eax
c001f19d:	c3                   	ret    

c001f19e <avxClose>:
c001f19e:	c3                   	ret    

c001f19f <wouldSheSayYes>:
c001f19f:	c3                   	ret    
c001f1a0:	49                   	dec    ecx
c001f1a1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001f1a5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001f1a9:	75 20                	jne    c001f1cb <isr0+0xb>
c001f1ab:	4e                   	dec    esi
c001f1ac:	79 61                	jns    c001f20f <isr7+0x3>
c001f1ae:	68 2e 2e 2e 00       	push   0x2e2e2e
c001f1b3:	66 90                	xchg   ax,ax
c001f1b5:	66 90                	xchg   ax,ax
c001f1b7:	66 90                	xchg   ax,ax
c001f1b9:	66 90                	xchg   ax,ax
c001f1bb:	66 90                	xchg   ax,ax
c001f1bd:	66 90                	xchg   ax,ax
c001f1bf:	90                   	nop

c001f1c0 <isr0>:
c001f1c0:	fa                   	cli    
c001f1c1:	68 00 00 00 00       	push   0x0
c001f1c6:	68 00 00 00 00       	push   0x0
c001f1cb:	e9 56 01 00 00       	jmp    c001f326 <int_common_stub>

c001f1d0 <isr1>:
c001f1d0:	fa                   	cli    
c001f1d1:	6a 00                	push   0x0
c001f1d3:	6a 01                	push   0x1
c001f1d5:	e9 4c 01 00 00       	jmp    c001f326 <int_common_stub>

c001f1da <isr2>:
c001f1da:	fa                   	cli    
c001f1db:	6a 00                	push   0x0
c001f1dd:	6a 02                	push   0x2
c001f1df:	e9 42 01 00 00       	jmp    c001f326 <int_common_stub>

c001f1e4 <isr3>:
c001f1e4:	fa                   	cli    
c001f1e5:	6a 00                	push   0x0
c001f1e7:	6a 03                	push   0x3
c001f1e9:	e9 38 01 00 00       	jmp    c001f326 <int_common_stub>

c001f1ee <isr4>:
c001f1ee:	fa                   	cli    
c001f1ef:	6a 00                	push   0x0
c001f1f1:	6a 04                	push   0x4
c001f1f3:	e9 2e 01 00 00       	jmp    c001f326 <int_common_stub>

c001f1f8 <isr5>:
c001f1f8:	fa                   	cli    
c001f1f9:	6a 00                	push   0x0
c001f1fb:	6a 05                	push   0x5
c001f1fd:	e9 24 01 00 00       	jmp    c001f326 <int_common_stub>

c001f202 <isr6>:
c001f202:	fa                   	cli    
c001f203:	6a 00                	push   0x0
c001f205:	6a 06                	push   0x6
c001f207:	e9 1a 01 00 00       	jmp    c001f326 <int_common_stub>

c001f20c <isr7>:
c001f20c:	fa                   	cli    
c001f20d:	6a 00                	push   0x0
c001f20f:	6a 07                	push   0x7
c001f211:	e9 10 01 00 00       	jmp    c001f326 <int_common_stub>

c001f216 <isr8>:
c001f216:	fa                   	cli    
c001f217:	6a 08                	push   0x8
c001f219:	e9 08 01 00 00       	jmp    c001f326 <int_common_stub>

c001f21e <isr9>:
c001f21e:	fa                   	cli    
c001f21f:	6a 00                	push   0x0
c001f221:	6a 09                	push   0x9
c001f223:	e9 fe 00 00 00       	jmp    c001f326 <int_common_stub>

c001f228 <isr10>:
c001f228:	fa                   	cli    
c001f229:	6a 0a                	push   0xa
c001f22b:	e9 f6 00 00 00       	jmp    c001f326 <int_common_stub>

c001f230 <isr11>:
c001f230:	fa                   	cli    
c001f231:	6a 0b                	push   0xb
c001f233:	e9 ee 00 00 00       	jmp    c001f326 <int_common_stub>

c001f238 <isr12>:
c001f238:	fa                   	cli    
c001f239:	6a 0c                	push   0xc
c001f23b:	e9 e6 00 00 00       	jmp    c001f326 <int_common_stub>

c001f240 <isr13>:
c001f240:	fa                   	cli    
c001f241:	6a 0d                	push   0xd
c001f243:	53                   	push   ebx
c001f244:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f248:	81 fb 16 f4 01 c0    	cmp    ebx,0xc001f416
c001f24e:	5b                   	pop    ebx
c001f24f:	0f 84 c3 01 00 00    	je     c001f418 <finishSignal2>
c001f255:	e9 cc 00 00 00       	jmp    c001f326 <int_common_stub>

c001f25a <isr14>:
c001f25a:	fa                   	cli    
c001f25b:	6a 0e                	push   0xe
c001f25d:	e9 c4 00 00 00       	jmp    c001f326 <int_common_stub>

c001f262 <isr15>:
c001f262:	fa                   	cli    
c001f263:	6a 00                	push   0x0
c001f265:	6a 0f                	push   0xf
c001f267:	e9 ba 00 00 00       	jmp    c001f326 <int_common_stub>

c001f26c <isr16>:
c001f26c:	fa                   	cli    
c001f26d:	6a 00                	push   0x0
c001f26f:	6a 10                	push   0x10
c001f271:	e9 b0 00 00 00       	jmp    c001f326 <int_common_stub>

c001f276 <isr17>:
c001f276:	fa                   	cli    
c001f277:	6a 00                	push   0x0
c001f279:	6a 11                	push   0x11
c001f27b:	e9 a6 00 00 00       	jmp    c001f326 <int_common_stub>

c001f280 <isr18>:
c001f280:	fa                   	cli    
c001f281:	6a 00                	push   0x0
c001f283:	6a 12                	push   0x12
c001f285:	e9 9c 00 00 00       	jmp    c001f326 <int_common_stub>

c001f28a <irq3>:
c001f28a:	fa                   	cli    
c001f28b:	6a 00                	push   0x0
c001f28d:	6a 23                	push   0x23
c001f28f:	e9 92 00 00 00       	jmp    c001f326 <int_common_stub>

c001f294 <irq4>:
c001f294:	fa                   	cli    
c001f295:	6a 00                	push   0x0
c001f297:	6a 24                	push   0x24
c001f299:	e9 88 00 00 00       	jmp    c001f326 <int_common_stub>

c001f29e <irq5>:
c001f29e:	fa                   	cli    
c001f29f:	6a 00                	push   0x0
c001f2a1:	6a 25                	push   0x25
c001f2a3:	e9 7e 00 00 00       	jmp    c001f326 <int_common_stub>

c001f2a8 <irq6>:
c001f2a8:	fa                   	cli    
c001f2a9:	6a 00                	push   0x0
c001f2ab:	6a 26                	push   0x26
c001f2ad:	e9 74 00 00 00       	jmp    c001f326 <int_common_stub>

c001f2b2 <irq7>:
c001f2b2:	fa                   	cli    
c001f2b3:	6a 00                	push   0x0
c001f2b5:	6a 27                	push   0x27
c001f2b7:	e9 6a 00 00 00       	jmp    c001f326 <int_common_stub>

c001f2bc <irq8>:
c001f2bc:	fa                   	cli    
c001f2bd:	6a 00                	push   0x0
c001f2bf:	6a 28                	push   0x28
c001f2c1:	e9 60 00 00 00       	jmp    c001f326 <int_common_stub>

c001f2c6 <irq9>:
c001f2c6:	fa                   	cli    
c001f2c7:	6a 00                	push   0x0
c001f2c9:	6a 29                	push   0x29
c001f2cb:	e9 56 00 00 00       	jmp    c001f326 <int_common_stub>

c001f2d0 <irq10>:
c001f2d0:	fa                   	cli    
c001f2d1:	6a 00                	push   0x0
c001f2d3:	6a 2a                	push   0x2a
c001f2d5:	e9 4c 00 00 00       	jmp    c001f326 <int_common_stub>

c001f2da <irq11>:
c001f2da:	fa                   	cli    
c001f2db:	6a 00                	push   0x0
c001f2dd:	6a 2b                	push   0x2b
c001f2df:	e9 42 00 00 00       	jmp    c001f326 <int_common_stub>

c001f2e4 <irq12>:
c001f2e4:	fa                   	cli    
c001f2e5:	6a 00                	push   0x0
c001f2e7:	6a 2c                	push   0x2c
c001f2e9:	e9 38 00 00 00       	jmp    c001f326 <int_common_stub>

c001f2ee <irq13>:
c001f2ee:	fa                   	cli    
c001f2ef:	6a 00                	push   0x0
c001f2f1:	6a 2d                	push   0x2d
c001f2f3:	e9 2e 00 00 00       	jmp    c001f326 <int_common_stub>

c001f2f8 <irq14>:
c001f2f8:	fa                   	cli    
c001f2f9:	6a 00                	push   0x0
c001f2fb:	6a 2e                	push   0x2e
c001f2fd:	e9 24 00 00 00       	jmp    c001f326 <int_common_stub>

c001f302 <irq15>:
c001f302:	fa                   	cli    
c001f303:	6a 00                	push   0x0
c001f305:	6a 2f                	push   0x2f
c001f307:	e9 1a 00 00 00       	jmp    c001f326 <int_common_stub>

c001f30c <irq1>:
c001f30c:	fa                   	cli    
c001f30d:	6a 00                	push   0x0
c001f30f:	6a 21                	push   0x21
c001f311:	eb 13                	jmp    c001f326 <int_common_stub>

c001f313 <irq2>:
c001f313:	fa                   	cli    
c001f314:	6a 00                	push   0x0
c001f316:	6a 22                	push   0x22
c001f318:	eb 0c                	jmp    c001f326 <int_common_stub>

c001f31a <isr96>:
c001f31a:	6a 00                	push   0x0
c001f31c:	6a 60                	push   0x60
c001f31e:	fb                   	sti    
c001f31f:	eb 37                	jmp    c001f358 <syscall_common_stub>

c001f321 <irq0>:
c001f321:	fa                   	cli    
c001f322:	6a 00                	push   0x0
c001f324:	6a 20                	push   0x20

c001f326 <int_common_stub>:
c001f326:	60                   	pusha  
c001f327:	1e                   	push   ds
c001f328:	06                   	push   es
c001f329:	0f a0                	push   fs
c001f32b:	0f a8                	push   gs
c001f32d:	66 b8 10 00          	mov    ax,0x10
c001f331:	66 8e d8             	mov    ds,ax
c001f334:	66 8e c0             	mov    es,ax
c001f337:	66 8e e0             	mov    fs,ax
c001f33a:	66 8e e8             	mov    gs,ax
c001f33d:	54                   	push   esp
c001f33e:	fc                   	cld    
c001f33f:	e8 70 db fe ff       	call   c000ceb4 <int_handler>
c001f344:	81 c4 04 00 00 00    	add    esp,0x4
c001f34a:	0f a9                	pop    gs
c001f34c:	0f a1                	pop    fs
c001f34e:	07                   	pop    es
c001f34f:	1f                   	pop    ds
c001f350:	61                   	popa   
c001f351:	81 c4 08 00 00 00    	add    esp,0x8
c001f357:	cf                   	iret   

c001f358 <syscall_common_stub>:
c001f358:	60                   	pusha  
c001f359:	1e                   	push   ds
c001f35a:	06                   	push   es
c001f35b:	0f a0                	push   fs
c001f35d:	0f a8                	push   gs
c001f35f:	66 b8 10 00          	mov    ax,0x10
c001f363:	66 8e d8             	mov    ds,ax
c001f366:	66 8e c0             	mov    es,ax
c001f369:	66 8e e0             	mov    fs,ax
c001f36c:	66 8e e8             	mov    gs,ax
c001f36f:	54                   	push   esp
c001f370:	fc                   	cld    
c001f371:	e8 3e db fe ff       	call   c000ceb4 <int_handler>
c001f376:	81 c4 04 00 00 00    	add    esp,0x4
c001f37c:	0f a9                	pop    gs
c001f37e:	0f a1                	pop    fs
c001f380:	07                   	pop    es
c001f381:	1f                   	pop    ds
c001f382:	e8 e0 28 ff ff       	call   c0011c67 <KiCheckSignalZ>
c001f387:	3d 00 00 00 00       	cmp    eax,0x0
c001f38c:	0f 84 c0 00 00 00    	je     c001f452 <skipSignals>
c001f392:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f397:	61                   	popa   
c001f398:	53                   	push   ebx
c001f399:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f39f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f3a2:	5b                   	pop    ebx
c001f3a3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f3a8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f3ab:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f3ae:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f3b1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f3b4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f3b7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f3ba:	81 c4 08 00 00 00    	add    esp,0x8
c001f3c0:	5e                   	pop    esi
c001f3c1:	5b                   	pop    ebx
c001f3c2:	59                   	pop    ecx
c001f3c3:	5a                   	pop    edx
c001f3c4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f3c7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f3ca:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f3cd:	52                   	push   edx
c001f3ce:	51                   	push   ecx
c001f3cf:	53                   	push   ebx
c001f3d0:	56                   	push   esi
c001f3d1:	81 ec 08 00 00 00    	sub    esp,0x8
c001f3d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f3da:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f3dd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f3e0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f3e3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f3e6:	60                   	pusha  
c001f3e7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f3ed:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f3f0:	89 e3                	mov    ebx,esp
c001f3f2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f3f5:	52                   	push   edx
c001f3f6:	68 16 f4 01 c0       	push   0xc001f416
c001f3fb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f3fe:	89 dc                	mov    esp,ebx
c001f400:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f403:	68 23 00 00 00       	push   0x23
c001f408:	51                   	push   ecx
c001f409:	68 02 02 00 00       	push   0x202
c001f40e:	68 1b 00 00 00       	push   0x1b
c001f413:	ff 36                	push   DWORD PTR [esi]
c001f415:	cf                   	iret   

c001f416 <finishSignal>:
c001f416:	cd 0f                	int    0xf

c001f418 <finishSignal2>:
c001f418:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f41e:	e8 c1 28 ff ff       	call   c0011ce4 <KiFinishSignalZ>
c001f423:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f429:	68 23 00 00 00       	push   0x23
c001f42e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f431:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f434:	68 1b 00 00 00       	push   0x1b
c001f439:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f43c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f43f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f442:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f445:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f448:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f44b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f44e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f451:	cf                   	iret   

c001f452 <skipSignals>:
c001f452:	61                   	popa   
c001f453:	81 c4 08 00 00 00    	add    esp,0x8
c001f459:	cf                   	iret   
c001f45a:	90                   	nop
c001f45b:	90                   	nop

c001f45c <irq16>:
c001f45c:	fa                   	cli    
c001f45d:	6a 00                	push   0x0
c001f45f:	6a 30                	push   0x30
c001f461:	e9 c0 fe ff ff       	jmp    c001f326 <int_common_stub>

c001f466 <irq17>:
c001f466:	fa                   	cli    
c001f467:	6a 00                	push   0x0
c001f469:	6a 31                	push   0x31
c001f46b:	e9 b6 fe ff ff       	jmp    c001f326 <int_common_stub>

c001f470 <irq18>:
c001f470:	fa                   	cli    
c001f471:	6a 00                	push   0x0
c001f473:	6a 32                	push   0x32
c001f475:	e9 ac fe ff ff       	jmp    c001f326 <int_common_stub>

c001f47a <irq19>:
c001f47a:	fa                   	cli    
c001f47b:	6a 00                	push   0x0
c001f47d:	6a 33                	push   0x33
c001f47f:	e9 a2 fe ff ff       	jmp    c001f326 <int_common_stub>

c001f484 <irq20>:
c001f484:	fa                   	cli    
c001f485:	6a 00                	push   0x0
c001f487:	6a 34                	push   0x34
c001f489:	e9 98 fe ff ff       	jmp    c001f326 <int_common_stub>

c001f48e <irq21>:
c001f48e:	fa                   	cli    
c001f48f:	6a 00                	push   0x0
c001f491:	6a 35                	push   0x35
c001f493:	e9 8e fe ff ff       	jmp    c001f326 <int_common_stub>

c001f498 <irq22>:
c001f498:	fa                   	cli    
c001f499:	6a 00                	push   0x0
c001f49b:	6a 36                	push   0x36
c001f49d:	e9 84 fe ff ff       	jmp    c001f326 <int_common_stub>

c001f4a2 <irq23>:
c001f4a2:	fa                   	cli    
c001f4a3:	6a 00                	push   0x0
c001f4a5:	6a 37                	push   0x37
c001f4a7:	e9 7a fe ff ff       	jmp    c001f326 <int_common_stub>
c001f4ac:	66 90                	xchg   ax,ax
c001f4ae:	66 90                	xchg   ax,ax

c001f4b0 <i386GetRDRAND>:
c001f4b0:	b9 64 00 00 00       	mov    ecx,0x64

c001f4b5 <retry>:
c001f4b5:	0f c7 f0             	rdrand eax
c001f4b8:	72 05                	jb     c001f4bf <retry.done>
c001f4ba:	e2 f9                	loop   c001f4b5 <retry>

c001f4bc <retry.fail>:
c001f4bc:	31 c0                	xor    eax,eax
c001f4be:	c3                   	ret    

c001f4bf <retry.done>:
c001f4bf:	c3                   	ret    

c001f4c0 <absolutelyNoChanceInHell>:
c001f4c0:	b8 01 00 00 00       	mov    eax,0x1
c001f4c5:	0f a2                	cpuid  
c001f4c7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f4cd:	74 06                	je     c001f4d5 <sseDetect.noSSE>
c001f4cf:	b8 01 00 00 00       	mov    eax,0x1
c001f4d4:	c3                   	ret    

c001f4d5 <sseDetect.noSSE>:
c001f4d5:	31 c0                	xor    eax,eax
c001f4d7:	c3                   	ret    

c001f4d8 <sseSave>:
c001f4d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4dc:	0f ae 00             	fxsave [eax]
c001f4df:	c3                   	ret    

c001f4e0 <sseLoad>:
c001f4e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4e4:	0f ae 08             	fxrstor [eax]
c001f4e7:	c3                   	ret    

c001f4e8 <sseInit>:
c001f4e8:	e8 42 00 00 00       	call   c001f52f <x87Init>
c001f4ed:	0f 20 e0             	mov    eax,cr4
c001f4f0:	66 0d 00 06          	or     ax,0x600
c001f4f4:	0f 22 e0             	mov    cr4,eax
c001f4f7:	c3                   	ret    

c001f4f8 <sseClose>:
c001f4f8:	c3                   	ret    
c001f4f9:	66 90                	xchg   ax,ax
c001f4fb:	66 90                	xchg   ax,ax
c001f4fd:	66 90                	xchg   ax,ax
c001f4ff:	90                   	nop

c001f500 <value_37F>:
c001f500:	7f 03                	jg     c001f505 <value_37A+0x1>

c001f502 <value_37E>:
c001f502:	7e 03                	jle    c001f507 <x87Detect+0x1>

c001f504 <value_37A>:
c001f504:	7a 03                	jp     c001f509 <x87Detect+0x3>

c001f506 <x87Detect>:
c001f506:	b8 01 00 00 00       	mov    eax,0x1
c001f50b:	0f a2                	cpuid  
c001f50d:	f7 c2 01 00 00 00    	test   edx,0x1
c001f513:	74 06                	je     c001f51b <x87Detect.nox87>
c001f515:	b8 01 00 00 00       	mov    eax,0x1
c001f51a:	c3                   	ret    

c001f51b <x87Detect.nox87>:
c001f51b:	b8 00 00 00 00       	mov    eax,0x0
c001f520:	c3                   	ret    

c001f521 <x87Save>:
c001f521:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f525:	dd 30                	fnsave [eax]
c001f527:	c3                   	ret    

c001f528 <x87Load>:
c001f528:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f52c:	dd 20                	frstor [eax]
c001f52e:	c3                   	ret    

c001f52f <x87Init>:
c001f52f:	0f 20 c0             	mov    eax,cr0
c001f532:	66 25 fb ff          	and    ax,0xfffb
c001f536:	66 0d 22 00          	or     ax,0x22
c001f53a:	0f 22 c0             	mov    cr0,eax
c001f53d:	db e3                	fninit 
c001f53f:	0f 06                	clts   
c001f541:	d9 2d 04 f5 01 c0    	fldcw  WORD PTR ds:0xc001f504
c001f547:	c3                   	ret    

c001f548 <x87Close>:
c001f548:	c3                   	ret    
c001f549:	66 90                	xchg   ax,ax
c001f54b:	90                   	nop

c001f54c <__do_global_ctors_aux>:
c001f54c:	a1 00 05 02 c0       	mov    eax,ds:0xc0020500
c001f551:	83 f8 ff             	cmp    eax,0xffffffff
c001f554:	74 1a                	je     c001f570 <__do_global_ctors_aux+0x24>
c001f556:	55                   	push   ebp
c001f557:	89 e5                	mov    ebp,esp
c001f559:	53                   	push   ebx
c001f55a:	52                   	push   edx
c001f55b:	bb 00 05 02 c0       	mov    ebx,0xc0020500
c001f560:	ff d0                	call   eax
c001f562:	83 eb 04             	sub    ebx,0x4
c001f565:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f567:	83 f8 ff             	cmp    eax,0xffffffff
c001f56a:	75 f4                	jne    c001f560 <__do_global_ctors_aux+0x14>
c001f56c:	58                   	pop    eax
c001f56d:	5b                   	pop    ebx
c001f56e:	5d                   	pop    ebp
c001f56f:	c3                   	ret    
c001f570:	c3                   	ret    
c001f571:	66 90                	xchg   ax,ax
c001f573:	90                   	nop

c001f574 <__divdi3>:
c001f574:	55                   	push   ebp
c001f575:	57                   	push   edi
c001f576:	56                   	push   esi
c001f577:	53                   	push   ebx
c001f578:	83 ec 1c             	sub    esp,0x1c
c001f57b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f57f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f583:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f586:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f58a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f58e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f592:	85 db                	test   ebx,ebx
c001f594:	0f 88 8e 00 00 00    	js     c001f628 <__divdi3+0xb4>
c001f59a:	89 dd                	mov    ebp,ebx
c001f59c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f5a4:	89 d3                	mov    ebx,edx
c001f5a6:	85 d2                	test   edx,edx
c001f5a8:	79 0d                	jns    c001f5b7 <__divdi3+0x43>
c001f5aa:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f5ae:	f7 d8                	neg    eax
c001f5b0:	83 d2 00             	adc    edx,0x0
c001f5b3:	f7 da                	neg    edx
c001f5b5:	89 d3                	mov    ebx,edx
c001f5b7:	89 c7                	mov    edi,eax
c001f5b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f5bc:	85 db                	test   ebx,ebx
c001f5be:	75 48                	jne    c001f608 <__divdi3+0x94>
c001f5c0:	39 ef                	cmp    edi,ebp
c001f5c2:	76 24                	jbe    c001f5e8 <__divdi3+0x74>
c001f5c4:	89 ea                	mov    edx,ebp
c001f5c6:	f7 f7                	div    edi
c001f5c8:	89 c1                	mov    ecx,eax
c001f5ca:	31 f6                	xor    esi,esi
c001f5cc:	89 c8                	mov    eax,ecx
c001f5ce:	89 f2                	mov    edx,esi
c001f5d0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f5d4:	85 c9                	test   ecx,ecx
c001f5d6:	74 07                	je     c001f5df <__divdi3+0x6b>
c001f5d8:	f7 d8                	neg    eax
c001f5da:	83 d2 00             	adc    edx,0x0
c001f5dd:	f7 da                	neg    edx
c001f5df:	83 c4 1c             	add    esp,0x1c
c001f5e2:	5b                   	pop    ebx
c001f5e3:	5e                   	pop    esi
c001f5e4:	5f                   	pop    edi
c001f5e5:	5d                   	pop    ebp
c001f5e6:	c3                   	ret    
c001f5e7:	90                   	nop
c001f5e8:	85 ff                	test   edi,edi
c001f5ea:	75 0b                	jne    c001f5f7 <__divdi3+0x83>
c001f5ec:	b8 01 00 00 00       	mov    eax,0x1
c001f5f1:	31 d2                	xor    edx,edx
c001f5f3:	f7 f3                	div    ebx
c001f5f5:	89 c7                	mov    edi,eax
c001f5f7:	31 d2                	xor    edx,edx
c001f5f9:	89 e8                	mov    eax,ebp
c001f5fb:	f7 f7                	div    edi
c001f5fd:	89 c6                	mov    esi,eax
c001f5ff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f602:	f7 f7                	div    edi
c001f604:	89 c1                	mov    ecx,eax
c001f606:	eb c4                	jmp    c001f5cc <__divdi3+0x58>
c001f608:	39 eb                	cmp    ebx,ebp
c001f60a:	77 3c                	ja     c001f648 <__divdi3+0xd4>
c001f60c:	0f bd f3             	bsr    esi,ebx
c001f60f:	83 f6 1f             	xor    esi,0x1f
c001f612:	75 40                	jne    c001f654 <__divdi3+0xe0>
c001f614:	39 eb                	cmp    ebx,ebp
c001f616:	72 09                	jb     c001f621 <__divdi3+0xad>
c001f618:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f61b:	0f 87 97 00 00 00    	ja     c001f6b8 <__divdi3+0x144>
c001f621:	b9 01 00 00 00       	mov    ecx,0x1
c001f626:	eb a4                	jmp    c001f5cc <__divdi3+0x58>
c001f628:	f7 d9                	neg    ecx
c001f62a:	83 d3 00             	adc    ebx,0x0
c001f62d:	f7 db                	neg    ebx
c001f62f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f632:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f636:	89 dd                	mov    ebp,ebx
c001f638:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f640:	e9 5f ff ff ff       	jmp    c001f5a4 <__divdi3+0x30>
c001f645:	8d 76 00             	lea    esi,[esi+0x0]
c001f648:	31 f6                	xor    esi,esi
c001f64a:	31 c9                	xor    ecx,ecx
c001f64c:	e9 7b ff ff ff       	jmp    c001f5cc <__divdi3+0x58>
c001f651:	8d 76 00             	lea    esi,[esi+0x0]
c001f654:	b8 20 00 00 00       	mov    eax,0x20
c001f659:	29 f0                	sub    eax,esi
c001f65b:	89 f1                	mov    ecx,esi
c001f65d:	d3 e3                	shl    ebx,cl
c001f65f:	89 fa                	mov    edx,edi
c001f661:	88 c1                	mov    cl,al
c001f663:	d3 ea                	shr    edx,cl
c001f665:	09 da                	or     edx,ebx
c001f667:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f66b:	89 f1                	mov    ecx,esi
c001f66d:	d3 e7                	shl    edi,cl
c001f66f:	89 eb                	mov    ebx,ebp
c001f671:	88 c1                	mov    cl,al
c001f673:	d3 eb                	shr    ebx,cl
c001f675:	89 f1                	mov    ecx,esi
c001f677:	d3 e5                	shl    ebp,cl
c001f679:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f67c:	88 c1                	mov    cl,al
c001f67e:	d3 ea                	shr    edx,cl
c001f680:	09 d5                	or     ebp,edx
c001f682:	89 e8                	mov    eax,ebp
c001f684:	89 da                	mov    edx,ebx
c001f686:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f68a:	89 d3                	mov    ebx,edx
c001f68c:	89 c5                	mov    ebp,eax
c001f68e:	f7 e7                	mul    edi
c001f690:	39 d3                	cmp    ebx,edx
c001f692:	72 18                	jb     c001f6ac <__divdi3+0x138>
c001f694:	74 0a                	je     c001f6a0 <__divdi3+0x12c>
c001f696:	89 e9                	mov    ecx,ebp
c001f698:	31 f6                	xor    esi,esi
c001f69a:	e9 2d ff ff ff       	jmp    c001f5cc <__divdi3+0x58>
c001f69f:	90                   	nop
c001f6a0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f6a3:	89 f1                	mov    ecx,esi
c001f6a5:	d3 e7                	shl    edi,cl
c001f6a7:	39 c7                	cmp    edi,eax
c001f6a9:	73 eb                	jae    c001f696 <__divdi3+0x122>
c001f6ab:	90                   	nop
c001f6ac:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f6af:	31 f6                	xor    esi,esi
c001f6b1:	e9 16 ff ff ff       	jmp    c001f5cc <__divdi3+0x58>
c001f6b6:	66 90                	xchg   ax,ax
c001f6b8:	31 c9                	xor    ecx,ecx
c001f6ba:	e9 0d ff ff ff       	jmp    c001f5cc <__divdi3+0x58>
c001f6bf:	90                   	nop

c001f6c0 <__moddi3>:
c001f6c0:	55                   	push   ebp
c001f6c1:	57                   	push   edi
c001f6c2:	56                   	push   esi
c001f6c3:	53                   	push   ebx
c001f6c4:	83 ec 2c             	sub    esp,0x2c
c001f6c7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f6cb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f6cf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f6d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f6d7:	85 db                	test   ebx,ebx
c001f6d9:	0f 88 85 00 00 00    	js     c001f764 <__moddi3+0xa4>
c001f6df:	89 de                	mov    esi,ebx
c001f6e1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f6e9:	89 d7                	mov    edi,edx
c001f6eb:	85 d2                	test   edx,edx
c001f6ed:	79 09                	jns    c001f6f8 <__moddi3+0x38>
c001f6ef:	f7 d8                	neg    eax
c001f6f1:	83 d2 00             	adc    edx,0x0
c001f6f4:	f7 da                	neg    edx
c001f6f6:	89 d7                	mov    edi,edx
c001f6f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f6fc:	89 cd                	mov    ebp,ecx
c001f6fe:	85 ff                	test   edi,edi
c001f700:	75 52                	jne    c001f754 <__moddi3+0x94>
c001f702:	89 c3                	mov    ebx,eax
c001f704:	39 f0                	cmp    eax,esi
c001f706:	76 24                	jbe    c001f72c <__moddi3+0x6c>
c001f708:	89 c8                	mov    eax,ecx
c001f70a:	89 f2                	mov    edx,esi
c001f70c:	f7 f3                	div    ebx
c001f70e:	89 d6                	mov    esi,edx
c001f710:	89 f0                	mov    eax,esi
c001f712:	31 d2                	xor    edx,edx
c001f714:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f718:	85 c9                	test   ecx,ecx
c001f71a:	74 07                	je     c001f723 <__moddi3+0x63>
c001f71c:	f7 d8                	neg    eax
c001f71e:	83 d2 00             	adc    edx,0x0
c001f721:	f7 da                	neg    edx
c001f723:	83 c4 2c             	add    esp,0x2c
c001f726:	5b                   	pop    ebx
c001f727:	5e                   	pop    esi
c001f728:	5f                   	pop    edi
c001f729:	5d                   	pop    ebp
c001f72a:	c3                   	ret    
c001f72b:	90                   	nop
c001f72c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f730:	85 db                	test   ebx,ebx
c001f732:	75 0d                	jne    c001f741 <__moddi3+0x81>
c001f734:	b8 01 00 00 00       	mov    eax,0x1
c001f739:	31 d2                	xor    edx,edx
c001f73b:	f7 f7                	div    edi
c001f73d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f741:	89 f0                	mov    eax,esi
c001f743:	31 d2                	xor    edx,edx
c001f745:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f749:	f7 f7                	div    edi
c001f74b:	89 e8                	mov    eax,ebp
c001f74d:	f7 f7                	div    edi
c001f74f:	89 d6                	mov    esi,edx
c001f751:	eb bd                	jmp    c001f710 <__moddi3+0x50>
c001f753:	90                   	nop
c001f754:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f758:	39 f7                	cmp    edi,esi
c001f75a:	76 20                	jbe    c001f77c <__moddi3+0xbc>
c001f75c:	89 c8                	mov    eax,ecx
c001f75e:	89 f2                	mov    edx,esi
c001f760:	eb b2                	jmp    c001f714 <__moddi3+0x54>
c001f762:	66 90                	xchg   ax,ax
c001f764:	f7 d9                	neg    ecx
c001f766:	83 d3 00             	adc    ebx,0x0
c001f769:	f7 db                	neg    ebx
c001f76b:	89 de                	mov    esi,ebx
c001f76d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f775:	e9 6f ff ff ff       	jmp    c001f6e9 <__moddi3+0x29>
c001f77a:	66 90                	xchg   ax,ax
c001f77c:	0f bd c7             	bsr    eax,edi
c001f77f:	83 f0 1f             	xor    eax,0x1f
c001f782:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f786:	75 24                	jne    c001f7ac <__moddi3+0xec>
c001f788:	39 f7                	cmp    edi,esi
c001f78a:	72 06                	jb     c001f792 <__moddi3+0xd2>
c001f78c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f790:	77 0c                	ja     c001f79e <__moddi3+0xde>
c001f792:	89 e9                	mov    ecx,ebp
c001f794:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f798:	19 fe                	sbb    esi,edi
c001f79a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f79e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f7a2:	89 f2                	mov    edx,esi
c001f7a4:	e9 6b ff ff ff       	jmp    c001f714 <__moddi3+0x54>
c001f7a9:	8d 76 00             	lea    esi,[esi+0x0]
c001f7ac:	b8 20 00 00 00       	mov    eax,0x20
c001f7b1:	89 c2                	mov    edx,eax
c001f7b3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f7b7:	29 da                	sub    edx,ebx
c001f7b9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f7bd:	88 d9                	mov    cl,bl
c001f7bf:	d3 e7                	shl    edi,cl
c001f7c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7c5:	88 d1                	mov    cl,dl
c001f7c7:	d3 e8                	shr    eax,cl
c001f7c9:	09 c7                	or     edi,eax
c001f7cb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f7cf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f7d3:	89 d8                	mov    eax,ebx
c001f7d5:	88 d9                	mov    cl,bl
c001f7d7:	d3 e7                	shl    edi,cl
c001f7d9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f7dd:	89 f3                	mov    ebx,esi
c001f7df:	88 d1                	mov    cl,dl
c001f7e1:	d3 eb                	shr    ebx,cl
c001f7e3:	89 c7                	mov    edi,eax
c001f7e5:	88 c1                	mov    cl,al
c001f7e7:	d3 e6                	shl    esi,cl
c001f7e9:	89 e8                	mov    eax,ebp
c001f7eb:	88 d1                	mov    cl,dl
c001f7ed:	d3 e8                	shr    eax,cl
c001f7ef:	09 f0                	or     eax,esi
c001f7f1:	89 f9                	mov    ecx,edi
c001f7f3:	d3 e5                	shl    ebp,cl
c001f7f5:	89 da                	mov    edx,ebx
c001f7f7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f7fb:	89 d3                	mov    ebx,edx
c001f7fd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f801:	89 c6                	mov    esi,eax
c001f803:	89 d1                	mov    ecx,edx
c001f805:	39 d3                	cmp    ebx,edx
c001f807:	72 27                	jb     c001f830 <__moddi3+0x170>
c001f809:	74 21                	je     c001f82c <__moddi3+0x16c>
c001f80b:	29 f5                	sub    ebp,esi
c001f80d:	19 cb                	sbb    ebx,ecx
c001f80f:	89 de                	mov    esi,ebx
c001f811:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f815:	d3 e6                	shl    esi,cl
c001f817:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f81b:	89 f9                	mov    ecx,edi
c001f81d:	d3 ed                	shr    ebp,cl
c001f81f:	09 ee                	or     esi,ebp
c001f821:	89 f0                	mov    eax,esi
c001f823:	d3 eb                	shr    ebx,cl
c001f825:	89 da                	mov    edx,ebx
c001f827:	e9 e8 fe ff ff       	jmp    c001f714 <__moddi3+0x54>
c001f82c:	39 c5                	cmp    ebp,eax
c001f82e:	73 db                	jae    c001f80b <__moddi3+0x14b>
c001f830:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f834:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f838:	89 d1                	mov    ecx,edx
c001f83a:	89 c6                	mov    esi,eax
c001f83c:	eb cd                	jmp    c001f80b <__moddi3+0x14b>
c001f83e:	66 90                	xchg   ax,ax

c001f840 <__udivdi3>:
c001f840:	55                   	push   ebp
c001f841:	57                   	push   edi
c001f842:	56                   	push   esi
c001f843:	53                   	push   ebx
c001f844:	83 ec 1c             	sub    esp,0x1c
c001f847:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f84b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f84f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f853:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f857:	85 d2                	test   edx,edx
c001f859:	75 41                	jne    c001f89c <__udivdi3+0x5c>
c001f85b:	39 f7                	cmp    edi,esi
c001f85d:	76 15                	jbe    c001f874 <__udivdi3+0x34>
c001f85f:	89 e8                	mov    eax,ebp
c001f861:	89 f2                	mov    edx,esi
c001f863:	f7 f7                	div    edi
c001f865:	31 db                	xor    ebx,ebx
c001f867:	89 da                	mov    edx,ebx
c001f869:	83 c4 1c             	add    esp,0x1c
c001f86c:	5b                   	pop    ebx
c001f86d:	5e                   	pop    esi
c001f86e:	5f                   	pop    edi
c001f86f:	5d                   	pop    ebp
c001f870:	c3                   	ret    
c001f871:	8d 76 00             	lea    esi,[esi+0x0]
c001f874:	89 f9                	mov    ecx,edi
c001f876:	85 ff                	test   edi,edi
c001f878:	75 0b                	jne    c001f885 <__udivdi3+0x45>
c001f87a:	b8 01 00 00 00       	mov    eax,0x1
c001f87f:	31 d2                	xor    edx,edx
c001f881:	f7 f7                	div    edi
c001f883:	89 c1                	mov    ecx,eax
c001f885:	31 d2                	xor    edx,edx
c001f887:	89 f0                	mov    eax,esi
c001f889:	f7 f1                	div    ecx
c001f88b:	89 c3                	mov    ebx,eax
c001f88d:	89 e8                	mov    eax,ebp
c001f88f:	f7 f1                	div    ecx
c001f891:	89 da                	mov    edx,ebx
c001f893:	83 c4 1c             	add    esp,0x1c
c001f896:	5b                   	pop    ebx
c001f897:	5e                   	pop    esi
c001f898:	5f                   	pop    edi
c001f899:	5d                   	pop    ebp
c001f89a:	c3                   	ret    
c001f89b:	90                   	nop
c001f89c:	39 f2                	cmp    edx,esi
c001f89e:	77 1c                	ja     c001f8bc <__udivdi3+0x7c>
c001f8a0:	0f bd da             	bsr    ebx,edx
c001f8a3:	83 f3 1f             	xor    ebx,0x1f
c001f8a6:	75 24                	jne    c001f8cc <__udivdi3+0x8c>
c001f8a8:	39 f2                	cmp    edx,esi
c001f8aa:	72 08                	jb     c001f8b4 <__udivdi3+0x74>
c001f8ac:	39 ef                	cmp    edi,ebp
c001f8ae:	0f 87 84 00 00 00    	ja     c001f938 <__udivdi3+0xf8>
c001f8b4:	b8 01 00 00 00       	mov    eax,0x1
c001f8b9:	eb ac                	jmp    c001f867 <__udivdi3+0x27>
c001f8bb:	90                   	nop
c001f8bc:	31 db                	xor    ebx,ebx
c001f8be:	31 c0                	xor    eax,eax
c001f8c0:	89 da                	mov    edx,ebx
c001f8c2:	83 c4 1c             	add    esp,0x1c
c001f8c5:	5b                   	pop    ebx
c001f8c6:	5e                   	pop    esi
c001f8c7:	5f                   	pop    edi
c001f8c8:	5d                   	pop    ebp
c001f8c9:	c3                   	ret    
c001f8ca:	66 90                	xchg   ax,ax
c001f8cc:	b8 20 00 00 00       	mov    eax,0x20
c001f8d1:	29 d8                	sub    eax,ebx
c001f8d3:	88 d9                	mov    cl,bl
c001f8d5:	d3 e2                	shl    edx,cl
c001f8d7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f8db:	89 fa                	mov    edx,edi
c001f8dd:	88 c1                	mov    cl,al
c001f8df:	d3 ea                	shr    edx,cl
c001f8e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f8e5:	09 d1                	or     ecx,edx
c001f8e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f8eb:	88 d9                	mov    cl,bl
c001f8ed:	d3 e7                	shl    edi,cl
c001f8ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f8f3:	89 f7                	mov    edi,esi
c001f8f5:	88 c1                	mov    cl,al
c001f8f7:	d3 ef                	shr    edi,cl
c001f8f9:	88 d9                	mov    cl,bl
c001f8fb:	d3 e6                	shl    esi,cl
c001f8fd:	89 ea                	mov    edx,ebp
c001f8ff:	88 c1                	mov    cl,al
c001f901:	d3 ea                	shr    edx,cl
c001f903:	09 d6                	or     esi,edx
c001f905:	89 f0                	mov    eax,esi
c001f907:	89 fa                	mov    edx,edi
c001f909:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f90d:	89 d7                	mov    edi,edx
c001f90f:	89 c6                	mov    esi,eax
c001f911:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f915:	39 d7                	cmp    edi,edx
c001f917:	72 13                	jb     c001f92c <__udivdi3+0xec>
c001f919:	74 09                	je     c001f924 <__udivdi3+0xe4>
c001f91b:	89 f0                	mov    eax,esi
c001f91d:	31 db                	xor    ebx,ebx
c001f91f:	e9 43 ff ff ff       	jmp    c001f867 <__udivdi3+0x27>
c001f924:	88 d9                	mov    cl,bl
c001f926:	d3 e5                	shl    ebp,cl
c001f928:	39 c5                	cmp    ebp,eax
c001f92a:	73 ef                	jae    c001f91b <__udivdi3+0xdb>
c001f92c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f92f:	31 db                	xor    ebx,ebx
c001f931:	e9 31 ff ff ff       	jmp    c001f867 <__udivdi3+0x27>
c001f936:	66 90                	xchg   ax,ax
c001f938:	31 c0                	xor    eax,eax
c001f93a:	e9 28 ff ff ff       	jmp    c001f867 <__udivdi3+0x27>
c001f93f:	90                   	nop

c001f940 <__umoddi3>:
c001f940:	55                   	push   ebp
c001f941:	57                   	push   edi
c001f942:	56                   	push   esi
c001f943:	53                   	push   ebx
c001f944:	83 ec 1c             	sub    esp,0x1c
c001f947:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f94b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f94f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f953:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f957:	89 da                	mov    edx,ebx
c001f959:	85 c0                	test   eax,eax
c001f95b:	75 37                	jne    c001f994 <__umoddi3+0x54>
c001f95d:	39 df                	cmp    edi,ebx
c001f95f:	76 13                	jbe    c001f974 <__umoddi3+0x34>
c001f961:	89 f0                	mov    eax,esi
c001f963:	f7 f7                	div    edi
c001f965:	89 d0                	mov    eax,edx
c001f967:	31 d2                	xor    edx,edx
c001f969:	83 c4 1c             	add    esp,0x1c
c001f96c:	5b                   	pop    ebx
c001f96d:	5e                   	pop    esi
c001f96e:	5f                   	pop    edi
c001f96f:	5d                   	pop    ebp
c001f970:	c3                   	ret    
c001f971:	8d 76 00             	lea    esi,[esi+0x0]
c001f974:	89 fd                	mov    ebp,edi
c001f976:	85 ff                	test   edi,edi
c001f978:	75 0b                	jne    c001f985 <__umoddi3+0x45>
c001f97a:	b8 01 00 00 00       	mov    eax,0x1
c001f97f:	31 d2                	xor    edx,edx
c001f981:	f7 f7                	div    edi
c001f983:	89 c5                	mov    ebp,eax
c001f985:	89 d8                	mov    eax,ebx
c001f987:	31 d2                	xor    edx,edx
c001f989:	f7 f5                	div    ebp
c001f98b:	89 f0                	mov    eax,esi
c001f98d:	f7 f5                	div    ebp
c001f98f:	89 d0                	mov    eax,edx
c001f991:	eb d4                	jmp    c001f967 <__umoddi3+0x27>
c001f993:	90                   	nop
c001f994:	89 f1                	mov    ecx,esi
c001f996:	39 d8                	cmp    eax,ebx
c001f998:	76 0a                	jbe    c001f9a4 <__umoddi3+0x64>
c001f99a:	89 f0                	mov    eax,esi
c001f99c:	83 c4 1c             	add    esp,0x1c
c001f99f:	5b                   	pop    ebx
c001f9a0:	5e                   	pop    esi
c001f9a1:	5f                   	pop    edi
c001f9a2:	5d                   	pop    ebp
c001f9a3:	c3                   	ret    
c001f9a4:	0f bd e8             	bsr    ebp,eax
c001f9a7:	83 f5 1f             	xor    ebp,0x1f
c001f9aa:	75 1c                	jne    c001f9c8 <__umoddi3+0x88>
c001f9ac:	39 d8                	cmp    eax,ebx
c001f9ae:	72 04                	jb     c001f9b4 <__umoddi3+0x74>
c001f9b0:	39 f7                	cmp    edi,esi
c001f9b2:	77 08                	ja     c001f9bc <__umoddi3+0x7c>
c001f9b4:	89 da                	mov    edx,ebx
c001f9b6:	29 fe                	sub    esi,edi
c001f9b8:	19 c2                	sbb    edx,eax
c001f9ba:	89 f1                	mov    ecx,esi
c001f9bc:	89 c8                	mov    eax,ecx
c001f9be:	83 c4 1c             	add    esp,0x1c
c001f9c1:	5b                   	pop    ebx
c001f9c2:	5e                   	pop    esi
c001f9c3:	5f                   	pop    edi
c001f9c4:	5d                   	pop    ebp
c001f9c5:	c3                   	ret    
c001f9c6:	66 90                	xchg   ax,ax
c001f9c8:	ba 20 00 00 00       	mov    edx,0x20
c001f9cd:	29 ea                	sub    edx,ebp
c001f9cf:	89 e9                	mov    ecx,ebp
c001f9d1:	d3 e0                	shl    eax,cl
c001f9d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f9d7:	89 f8                	mov    eax,edi
c001f9d9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f9dd:	88 d1                	mov    cl,dl
c001f9df:	d3 e8                	shr    eax,cl
c001f9e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f9e5:	09 c1                	or     ecx,eax
c001f9e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f9eb:	89 e9                	mov    ecx,ebp
c001f9ed:	d3 e7                	shl    edi,cl
c001f9ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f9f3:	89 d8                	mov    eax,ebx
c001f9f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f9f9:	88 d1                	mov    cl,dl
c001f9fb:	d3 e8                	shr    eax,cl
c001f9fd:	89 c7                	mov    edi,eax
c001f9ff:	89 e9                	mov    ecx,ebp
c001fa01:	d3 e3                	shl    ebx,cl
c001fa03:	89 f0                	mov    eax,esi
c001fa05:	88 d1                	mov    cl,dl
c001fa07:	d3 e8                	shr    eax,cl
c001fa09:	09 d8                	or     eax,ebx
c001fa0b:	89 e9                	mov    ecx,ebp
c001fa0d:	d3 e6                	shl    esi,cl
c001fa0f:	89 f3                	mov    ebx,esi
c001fa11:	89 fa                	mov    edx,edi
c001fa13:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001fa17:	89 d1                	mov    ecx,edx
c001fa19:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fa1d:	89 c6                	mov    esi,eax
c001fa1f:	89 d7                	mov    edi,edx
c001fa21:	39 d1                	cmp    ecx,edx
c001fa23:	72 27                	jb     c001fa4c <__umoddi3+0x10c>
c001fa25:	74 21                	je     c001fa48 <__umoddi3+0x108>
c001fa27:	89 ca                	mov    edx,ecx
c001fa29:	29 f3                	sub    ebx,esi
c001fa2b:	19 fa                	sbb    edx,edi
c001fa2d:	89 d0                	mov    eax,edx
c001fa2f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001fa33:	d3 e0                	shl    eax,cl
c001fa35:	89 e9                	mov    ecx,ebp
c001fa37:	d3 eb                	shr    ebx,cl
c001fa39:	09 d8                	or     eax,ebx
c001fa3b:	d3 ea                	shr    edx,cl
c001fa3d:	83 c4 1c             	add    esp,0x1c
c001fa40:	5b                   	pop    ebx
c001fa41:	5e                   	pop    esi
c001fa42:	5f                   	pop    edi
c001fa43:	5d                   	pop    ebp
c001fa44:	c3                   	ret    
c001fa45:	8d 76 00             	lea    esi,[esi+0x0]
c001fa48:	39 c3                	cmp    ebx,eax
c001fa4a:	73 db                	jae    c001fa27 <__umoddi3+0xe7>
c001fa4c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001fa50:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001fa54:	89 d7                	mov    edi,edx
c001fa56:	89 c6                	mov    esi,eax
c001fa58:	eb cd                	jmp    c001fa27 <__umoddi3+0xe7>

Disassembly of section .init:

c001fa5a <_init>:
c001fa5a:	55                   	push   ebp
c001fa5b:	89 e5                	mov    ebp,esp
c001fa5d:	e8 92 06 fe ff       	call   c00000f4 <frame_dummy>
c001fa62:	e8 e5 fa ff ff       	call   c001f54c <__do_global_ctors_aux>
c001fa67:	5d                   	pop    ebp
c001fa68:	c3                   	ret    

Disassembly of section .fini:

c001fa69 <_fini>:
c001fa69:	55                   	push   ebp
c001fa6a:	89 e5                	mov    ebp,esp
c001fa6c:	e8 13 06 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001fa71:	5d                   	pop    ebp
c001fa72:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001fa74 <Computer::~Computer()>:
c001fa74:	83 ec 0c             	sub    esp,0xc
c001fa77:	ba fc 0d 02 c0       	mov    edx,0xc0020dfc
c001fa7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa80:	89 10                	mov    DWORD PTR [eax],edx
c001fa82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa86:	83 ec 0c             	sub    esp,0xc
c001fa89:	50                   	push   eax
c001fa8a:	e8 43 ce fe ff       	call   c000c8d2 <Device::~Device()>
c001fa8f:	83 c4 10             	add    esp,0x10
c001fa92:	90                   	nop
c001fa93:	83 c4 0c             	add    esp,0xc
c001fa96:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001fa98 <Computer::~Computer()>:
c001fa98:	83 ec 0c             	sub    esp,0xc
c001fa9b:	83 ec 0c             	sub    esp,0xc
c001fa9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001faa2:	e8 cd ff ff ff       	call   c001fa74 <Computer::~Computer()>
c001faa7:	83 c4 10             	add    esp,0x10
c001faaa:	83 ec 08             	sub    esp,0x8
c001faad:	68 70 01 00 00       	push   0x170
c001fab2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fab6:	e8 81 ad fe ff       	call   c000a83c <operator delete(void*, unsigned long)>
c001fabb:	83 c4 10             	add    esp,0x10
c001fabe:	83 c4 0c             	add    esp,0xc
c001fac1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001fac2 <idleCommon()>:
c001fac2:	83 ec 0c             	sub    esp,0xc
c001fac5:	fa                   	cli    
c001fac6:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001facc:	e8 b3 66 ff ff       	call   c0016184 <schedule()>
c001fad1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001fad6:	48                   	dec    eax
c001fad7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001fadc:	75 01                	jne    c001fadf <idleCommon()+0x1d>
c001fade:	fb                   	sti    
c001fadf:	83 c4 0c             	add    esp,0xc
c001fae2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001fae4 <LinkedList<UnixFile>::~LinkedList()>:
c001fae4:	90                   	nop
c001fae5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001fae6 <LinkedList<UnixFile>::LinkedList()>:
c001fae6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001faf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faf4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fafb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb0a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb14:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb1f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb26:	90                   	nop
c001fb27:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001fb28 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001fb28:	83 ec 0c             	sub    esp,0xc
c001fb2b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fb30:	75 10                	jne    c001fb42 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001fb32:	83 ec 0c             	sub    esp,0xc
c001fb35:	68 10 10 02 c0       	push   0xc0021010
c001fb3a:	e8 18 1b ff ff       	call   c0011657 <KePanic(char const*)>
c001fb3f:	83 c4 10             	add    esp,0x10
c001fb42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb46:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb48:	85 c0                	test   eax,eax
c001fb4a:	74 34                	je     c001fb80 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fb4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb53:	85 c0                	test   eax,eax
c001fb55:	74 29                	je     c001fb80 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fb57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb5e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb62:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb69:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb6d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fb70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb77:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb7e:	eb 65                	jmp    c001fbe5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fb80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb84:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb86:	85 c0                	test   eax,eax
c001fb88:	75 4b                	jne    c001fbd5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fb8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb91:	85 c0                	test   eax,eax
c001fb93:	75 40                	jne    c001fbd5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fb95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb99:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb9d:	89 10                	mov    DWORD PTR [eax],edx
c001fb9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fba7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fbaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbb1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fbb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbbc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbbf:	85 c0                	test   eax,eax
c001fbc1:	74 22                	je     c001fbe5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fbc3:	83 ec 0c             	sub    esp,0xc
c001fbc6:	68 32 10 02 c0       	push   0xc0021032
c001fbcb:	e8 87 1a ff ff       	call   c0011657 <KePanic(char const*)>
c001fbd0:	83 c4 10             	add    esp,0x10
c001fbd3:	eb 10                	jmp    c001fbe5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fbd5:	83 ec 0c             	sub    esp,0xc
c001fbd8:	68 3c 10 02 c0       	push   0xc002103c
c001fbdd:	e8 75 1a ff ff       	call   c0011657 <KePanic(char const*)>
c001fbe2:	83 c4 10             	add    esp,0x10
c001fbe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbec:	8d 50 01             	lea    edx,[eax+0x1]
c001fbef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fbf6:	90                   	nop
c001fbf7:	83 c4 0c             	add    esp,0xc
c001fbfa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001fbfc <LinkedList<UnixFile>::getFirstElement()>:
c001fbfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc00:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc02:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001fc04 <LinkedList<UnixFile>::removeFirst()>:
c001fc04:	83 ec 0c             	sub    esp,0xc
c001fc07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc0b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc0d:	85 c0                	test   eax,eax
c001fc0f:	75 12                	jne    c001fc23 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001fc11:	83 ec 0c             	sub    esp,0xc
c001fc14:	68 48 10 02 c0       	push   0xc0021048
c001fc19:	e8 39 1a ff ff       	call   c0011657 <KePanic(char const*)>
c001fc1e:	83 c4 10             	add    esp,0x10
c001fc21:	eb 7e                	jmp    c001fca1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001fc23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc27:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc2a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc2d:	85 c0                	test   eax,eax
c001fc2f:	74 10                	je     c001fc41 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001fc31:	83 ec 0c             	sub    esp,0xc
c001fc34:	68 93 10 02 c0       	push   0xc0021093
c001fc39:	e8 19 1a ff ff       	call   c0011657 <KePanic(char const*)>
c001fc3e:	83 c4 10             	add    esp,0x10
c001fc41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc45:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc47:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc4a:	85 c0                	test   eax,eax
c001fc4c:	75 33                	jne    c001fc81 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001fc4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc5c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc67:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc6a:	83 f8 01             	cmp    eax,0x1
c001fc6d:	74 21                	je     c001fc90 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fc6f:	83 ec 0c             	sub    esp,0xc
c001fc72:	68 6c 10 02 c0       	push   0xc002106c
c001fc77:	e8 db 19 ff ff       	call   c0011657 <KePanic(char const*)>
c001fc7c:	83 c4 10             	add    esp,0x10
c001fc7f:	eb 0f                	jmp    c001fc90 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fc81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc85:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc87:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001fc8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc8e:	89 10                	mov    DWORD PTR [eax],edx
c001fc90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc94:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc97:	8d 50 ff             	lea    edx,[eax-0x1]
c001fc9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc9e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fca1:	83 c4 0c             	add    esp,0xc
c001fca4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001fca6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001fca6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fcaa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fcad:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fcae <DriverlessDevice::~DriverlessDevice()>:
c001fcae:	ba 00 1d 02 c0       	mov    edx,0xc0021d00
c001fcb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcb7:	89 10                	mov    DWORD PTR [eax],edx
c001fcb9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcbd:	50                   	push   eax
c001fcbe:	e8 0f cc fe ff       	call   c000c8d2 <Device::~Device()>
c001fcc3:	83 c4 04             	add    esp,0x4
c001fcc6:	90                   	nop
c001fcc7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fcc8 <DriverlessDevice::~DriverlessDevice()>:
c001fcc8:	83 ec 0c             	sub    esp,0xc
c001fccb:	83 ec 0c             	sub    esp,0xc
c001fcce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcd2:	e8 d7 ff ff ff       	call   c001fcae <DriverlessDevice::~DriverlessDevice()>
c001fcd7:	83 c4 10             	add    esp,0x10
c001fcda:	83 ec 08             	sub    esp,0x8
c001fcdd:	68 58 01 00 00       	push   0x158
c001fce2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fce6:	e8 51 ab fe ff       	call   c000a83c <operator delete(void*, unsigned long)>
c001fceb:	83 c4 10             	add    esp,0x10
c001fcee:	83 c4 0c             	add    esp,0xc
c001fcf1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fcf2 <LinkedList<Device>::addElement(Device*)>:
c001fcf2:	83 ec 0c             	sub    esp,0xc
c001fcf5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fcfa:	75 10                	jne    c001fd0c <LinkedList<Device>::addElement(Device*)+0x1a>
c001fcfc:	83 ec 0c             	sub    esp,0xc
c001fcff:	68 10 10 02 c0       	push   0xc0021010
c001fd04:	e8 4e 19 ff ff       	call   c0011657 <KePanic(char const*)>
c001fd09:	83 c4 10             	add    esp,0x10
c001fd0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd10:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd12:	85 c0                	test   eax,eax
c001fd14:	74 3a                	je     c001fd50 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fd16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd1d:	85 c0                	test   eax,eax
c001fd1f:	74 2f                	je     c001fd50 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fd21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd25:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd2c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fd32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd3a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd44:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fd4e:	eb 68                	jmp    c001fdb8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd54:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd56:	85 c0                	test   eax,eax
c001fd58:	75 4e                	jne    c001fda8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fd5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd61:	85 c0                	test   eax,eax
c001fd63:	75 43                	jne    c001fda8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fd65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd69:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd6d:	89 10                	mov    DWORD PTR [eax],edx
c001fd6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd77:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd81:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fd8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd8f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd92:	85 c0                	test   eax,eax
c001fd94:	74 22                	je     c001fdb8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd96:	83 ec 0c             	sub    esp,0xc
c001fd99:	68 32 10 02 c0       	push   0xc0021032
c001fd9e:	e8 b4 18 ff ff       	call   c0011657 <KePanic(char const*)>
c001fda3:	83 c4 10             	add    esp,0x10
c001fda6:	eb 10                	jmp    c001fdb8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fda8:	83 ec 0c             	sub    esp,0xc
c001fdab:	68 3c 10 02 c0       	push   0xc002103c
c001fdb0:	e8 a2 18 ff ff       	call   c0011657 <KePanic(char const*)>
c001fdb5:	83 c4 10             	add    esp,0x10
c001fdb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdbc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fdbf:	8d 50 01             	lea    edx,[eax+0x1]
c001fdc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdc6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fdc9:	90                   	nop
c001fdca:	83 c4 0c             	add    esp,0xc
c001fdcd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fdce <LinkedList<Device>::LinkedList()>:
c001fdce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdd2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fdd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fddc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fde3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fde7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fdee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdf2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fdf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdfc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fe03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe07:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fe0e:	90                   	nop
c001fe0f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fe10 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fe10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe14:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe16:	85 c0                	test   eax,eax
c001fe18:	75 0e                	jne    c001fe28 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fe1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe21:	85 c0                	test   eax,eax
c001fe23:	75 03                	jne    c001fe28 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fe25:	b0 01                	mov    al,0x1
c001fe27:	c3                   	ret    
c001fe28:	b0 00                	mov    al,0x0
c001fe2a:	90                   	nop
c001fe2b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fe2c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fe2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe30:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe32:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fe34 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fe34:	83 ec 0c             	sub    esp,0xc
c001fe37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe3b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe3d:	85 c0                	test   eax,eax
c001fe3f:	75 17                	jne    c001fe58 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fe41:	83 ec 0c             	sub    esp,0xc
c001fe44:	68 48 10 02 c0       	push   0xc0021048
c001fe49:	e8 09 18 ff ff       	call   c0011657 <KePanic(char const*)>
c001fe4e:	83 c4 10             	add    esp,0x10
c001fe51:	e9 96 00 00 00       	jmp    c001feec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fe56:	66 90                	xchg   ax,ax
c001fe58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe5f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fe62:	85 c0                	test   eax,eax
c001fe64:	0f 95 c0             	setne  al
c001fe67:	0f b6 c0             	movzx  eax,al
c001fe6a:	85 c0                	test   eax,eax
c001fe6c:	74 12                	je     c001fe80 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fe6e:	83 ec 0c             	sub    esp,0xc
c001fe71:	68 93 10 02 c0       	push   0xc0021093
c001fe76:	e8 dc 17 ff ff       	call   c0011657 <KePanic(char const*)>
c001fe7b:	83 c4 10             	add    esp,0x10
c001fe7e:	66 90                	xchg   ax,ax
c001fe80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe84:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe86:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fe89:	85 c0                	test   eax,eax
c001fe8b:	0f 94 c0             	sete   al
c001fe8e:	0f b6 c0             	movzx  eax,al
c001fe91:	85 c0                	test   eax,eax
c001fe93:	74 33                	je     c001fec8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fe95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe99:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fe9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001feaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001feb1:	83 f8 01             	cmp    eax,0x1
c001feb4:	74 22                	je     c001fed8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001feb6:	83 ec 0c             	sub    esp,0xc
c001feb9:	68 6c 10 02 c0       	push   0xc002106c
c001febe:	e8 94 17 ff ff       	call   c0011657 <KePanic(char const*)>
c001fec3:	83 c4 10             	add    esp,0x10
c001fec6:	eb 10                	jmp    c001fed8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fecc:	8b 00                	mov    eax,DWORD PTR [eax]
c001fece:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fed1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed5:	89 10                	mov    DWORD PTR [eax],edx
c001fed7:	90                   	nop
c001fed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fedc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fedf:	8d 50 ff             	lea    edx,[eax-0x1]
c001fee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fee6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fee9:	8d 76 00             	lea    esi,[esi+0x0]
c001feec:	83 c4 0c             	add    esp,0xc
c001feef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fef0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fef0:	83 ec 0c             	sub    esp,0xc
c001fef3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fef8:	75 12                	jne    c001ff0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001fefa:	83 ec 0c             	sub    esp,0xc
c001fefd:	68 10 10 02 c0       	push   0xc0021010
c001ff02:	e8 50 17 ff ff       	call   c0011657 <KePanic(char const*)>
c001ff07:	83 c4 10             	add    esp,0x10
c001ff0a:	66 90                	xchg   ax,ax
c001ff0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff10:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff12:	85 c0                	test   eax,eax
c001ff14:	74 36                	je     c001ff4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ff16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff1d:	85 c0                	test   eax,eax
c001ff1f:	74 2b                	je     c001ff4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ff21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff25:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff2c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ff2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff33:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff37:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ff3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff41:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ff48:	eb 6a                	jmp    c001ffb4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff4a:	66 90                	xchg   ax,ax
c001ff4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff50:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff52:	85 c0                	test   eax,eax
c001ff54:	75 4e                	jne    c001ffa4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ff56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff5d:	85 c0                	test   eax,eax
c001ff5f:	75 43                	jne    c001ffa4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ff61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff65:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff69:	89 10                	mov    DWORD PTR [eax],edx
c001ff6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff6f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff73:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ff76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff7d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ff84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff88:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff8b:	85 c0                	test   eax,eax
c001ff8d:	74 25                	je     c001ffb4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff8f:	83 ec 0c             	sub    esp,0xc
c001ff92:	68 32 10 02 c0       	push   0xc0021032
c001ff97:	e8 bb 16 ff ff       	call   c0011657 <KePanic(char const*)>
c001ff9c:	83 c4 10             	add    esp,0x10
c001ff9f:	eb 13                	jmp    c001ffb4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ffa1:	8d 76 00             	lea    esi,[esi+0x0]
c001ffa4:	83 ec 0c             	sub    esp,0xc
c001ffa7:	68 3c 10 02 c0       	push   0xc002103c
c001ffac:	e8 a6 16 ff ff       	call   c0011657 <KePanic(char const*)>
c001ffb1:	83 c4 10             	add    esp,0x10
c001ffb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffb8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ffbb:	8d 50 01             	lea    edx,[eax+0x1]
c001ffbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffc2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ffc5:	90                   	nop
c001ffc6:	83 c4 0c             	add    esp,0xc
c001ffc9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ffcc <ACPI::~ACPI()>:
c001ffcc:	83 ec 0c             	sub    esp,0xc
c001ffcf:	ba 90 23 02 c0       	mov    edx,0xc0022390
c001ffd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffd8:	89 10                	mov    DWORD PTR [eax],edx
c001ffda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffde:	83 ec 0c             	sub    esp,0xc
c001ffe1:	50                   	push   eax
c001ffe2:	e8 eb c8 fe ff       	call   c000c8d2 <Device::~Device()>
c001ffe7:	83 c4 10             	add    esp,0x10
c001ffea:	90                   	nop
c001ffeb:	83 c4 0c             	add    esp,0xc
c001ffee:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fff0 <ACPI::~ACPI()>:
c001fff0:	83 ec 0c             	sub    esp,0xc
c001fff3:	83 ec 0c             	sub    esp,0xc
c001fff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fffa:	e8 cd ff ff ff       	call   c001ffcc <ACPI::~ACPI()>
c001ffff:	83 c4 10             	add    esp,0x10
c0020002:	83 ec 08             	sub    esp,0x8
c0020005:	68 64 12 00 00       	push   0x1264
c002000a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002000e:	e8 29 a8 fe ff       	call   c000a83c <operator delete(void*, unsigned long)>
c0020013:	83 c4 10             	add    esp,0x10
c0020016:	83 c4 0c             	add    esp,0xc
c0020019:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002001c <LinkedList<Device>::~LinkedList()>:
c002001c:	90                   	nop
c002001d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0020020 <LinkedList<Device>::isEmpty()>:
c0020020:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020024:	8b 00                	mov    eax,DWORD PTR [eax]
c0020026:	85 c0                	test   eax,eax
c0020028:	75 0e                	jne    c0020038 <LinkedList<Device>::isEmpty()+0x18>
c002002a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002002e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020031:	85 c0                	test   eax,eax
c0020033:	75 03                	jne    c0020038 <LinkedList<Device>::isEmpty()+0x18>
c0020035:	b0 01                	mov    al,0x1
c0020037:	c3                   	ret    
c0020038:	b0 00                	mov    al,0x0
c002003a:	90                   	nop
c002003b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002003c <LinkedList<Device>::getFirstElement()>:
c002003c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020040:	8b 00                	mov    eax,DWORD PTR [eax]
c0020042:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0020044 <LinkedList<Device>::removeFirst()>:
c0020044:	83 ec 0c             	sub    esp,0xc
c0020047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002004b:	8b 00                	mov    eax,DWORD PTR [eax]
c002004d:	85 c0                	test   eax,eax
c002004f:	75 17                	jne    c0020068 <LinkedList<Device>::removeFirst()+0x24>
c0020051:	83 ec 0c             	sub    esp,0xc
c0020054:	68 48 10 02 c0       	push   0xc0021048
c0020059:	e8 f9 15 ff ff       	call   c0011657 <KePanic(char const*)>
c002005e:	83 c4 10             	add    esp,0x10
c0020061:	e9 92 00 00 00       	jmp    c00200f8 <LinkedList<Device>::removeFirst()+0xb4>
c0020066:	66 90                	xchg   ax,ax
c0020068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002006c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002006f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020075:	85 c0                	test   eax,eax
c0020077:	74 13                	je     c002008c <LinkedList<Device>::removeFirst()+0x48>
c0020079:	83 ec 0c             	sub    esp,0xc
c002007c:	68 93 10 02 c0       	push   0xc0021093
c0020081:	e8 d1 15 ff ff       	call   c0011657 <KePanic(char const*)>
c0020086:	83 c4 10             	add    esp,0x10
c0020089:	8d 76 00             	lea    esi,[esi+0x0]
c002008c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020090:	8b 00                	mov    eax,DWORD PTR [eax]
c0020092:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020098:	85 c0                	test   eax,eax
c002009a:	75 34                	jne    c00200d0 <LinkedList<Device>::removeFirst()+0x8c>
c002009c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00200a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200aa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00200b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200b5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00200b8:	83 f8 01             	cmp    eax,0x1
c00200bb:	74 27                	je     c00200e4 <LinkedList<Device>::removeFirst()+0xa0>
c00200bd:	83 ec 0c             	sub    esp,0xc
c00200c0:	68 6c 10 02 c0       	push   0xc002106c
c00200c5:	e8 8d 15 ff ff       	call   c0011657 <KePanic(char const*)>
c00200ca:	83 c4 10             	add    esp,0x10
c00200cd:	eb 15                	jmp    c00200e4 <LinkedList<Device>::removeFirst()+0xa0>
c00200cf:	90                   	nop
c00200d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00200d6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00200dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200e0:	89 10                	mov    DWORD PTR [eax],edx
c00200e2:	66 90                	xchg   ax,ax
c00200e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00200eb:	8d 50 ff             	lea    edx,[eax-0x1]
c00200ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00200f5:	8d 76 00             	lea    esi,[esi+0x0]
c00200f8:	83 c4 0c             	add    esp,0xc
c00200fb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00200fc <CPU::~CPU()>:
c00200fc:	83 ec 0c             	sub    esp,0xc
c00200ff:	ba 38 25 02 c0       	mov    edx,0xc0022538
c0020104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020108:	89 10                	mov    DWORD PTR [eax],edx
c002010a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002010e:	83 ec 0c             	sub    esp,0xc
c0020111:	50                   	push   eax
c0020112:	e8 bb c7 fe ff       	call   c000c8d2 <Device::~Device()>
c0020117:	83 c4 10             	add    esp,0x10
c002011a:	90                   	nop
c002011b:	83 c4 0c             	add    esp,0xc
c002011e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0020120 <CPU::~CPU()>:
c0020120:	83 ec 0c             	sub    esp,0xc
c0020123:	83 ec 0c             	sub    esp,0xc
c0020126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002012a:	e8 cd ff ff ff       	call   c00200fc <CPU::~CPU()>
c002012f:	83 c4 10             	add    esp,0x10
c0020132:	83 ec 08             	sub    esp,0x8
c0020135:	68 94 11 00 00       	push   0x1194
c002013a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002013e:	e8 f9 a6 fe ff       	call   c000a83c <operator delete(void*, unsigned long)>
c0020143:	83 c4 10             	add    esp,0x10
c0020146:	83 c4 0c             	add    esp,0xc
c0020149:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002014c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002014c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020150:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020153:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0020154 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0020154:	90                   	nop
c0020155:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0020158 <ThreadControlBlock::ThreadControlBlock()>:
c0020158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002015c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020163:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020167:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002016e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020172:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0020179:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002017d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0020184:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020188:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002018f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020193:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0020197:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002019b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002019f:	90                   	nop
c00201a0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00201a4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00201a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201a8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00201ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201b2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00201b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201bd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00201c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201c8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00201ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201d2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00201d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201dd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00201e4:	90                   	nop
c00201e5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00201e6 <PCI::~PCI()>:
c00201e6:	83 ec 0c             	sub    esp,0xc
c00201e9:	ba 18 34 02 c0       	mov    edx,0xc0023418
c00201ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201f2:	89 10                	mov    DWORD PTR [eax],edx
c00201f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201f8:	83 ec 0c             	sub    esp,0xc
c00201fb:	50                   	push   eax
c00201fc:	e8 63 c1 fe ff       	call   c000c364 <Bus::~Bus()>
c0020201:	83 c4 10             	add    esp,0x10
c0020204:	90                   	nop
c0020205:	83 c4 0c             	add    esp,0xc
c0020208:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002020a <PCI::~PCI()>:
c002020a:	83 ec 0c             	sub    esp,0xc
c002020d:	83 ec 0c             	sub    esp,0xc
c0020210:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020214:	e8 cd ff ff ff       	call   c00201e6 <PCI::~PCI()>
c0020219:	83 c4 10             	add    esp,0x10
c002021c:	83 ec 08             	sub    esp,0x8
c002021f:	68 5c 01 00 00       	push   0x15c
c0020224:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020228:	e8 0f a6 fe ff       	call   c000a83c <operator delete(void*, unsigned long)>
c002022d:	83 c4 10             	add    esp,0x10
c0020230:	83 c4 0c             	add    esp,0xc
c0020233:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0020234 <IDE::~IDE()>:
c0020234:	83 ec 0c             	sub    esp,0xc
c0020237:	ba cc 34 02 c0       	mov    edx,0xc00234cc
c002023c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020240:	89 10                	mov    DWORD PTR [eax],edx
c0020242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020246:	83 ec 0c             	sub    esp,0xc
c0020249:	50                   	push   eax
c002024a:	e8 35 cb fe ff       	call   c000cd84 <HardDiskController::~HardDiskController()>
c002024f:	83 c4 10             	add    esp,0x10
c0020252:	90                   	nop
c0020253:	83 c4 0c             	add    esp,0xc
c0020256:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0020258 <IDE::~IDE()>:
c0020258:	83 ec 0c             	sub    esp,0xc
c002025b:	83 ec 0c             	sub    esp,0xc
c002025e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020262:	e8 cd ff ff ff       	call   c0020234 <IDE::~IDE()>
c0020267:	83 c4 10             	add    esp,0x10
c002026a:	83 ec 08             	sub    esp,0x8
c002026d:	68 70 02 00 00       	push   0x270
c0020272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020276:	e8 c1 a5 fe ff       	call   c000a83c <operator delete(void*, unsigned long)>
c002027b:	83 c4 10             	add    esp,0x10
c002027e:	83 c4 0c             	add    esp,0xc
c0020281:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020282 <SATABus::~SATABus()>:
c0020282:	83 ec 0c             	sub    esp,0xc
c0020285:	ba 1c 35 02 c0       	mov    edx,0xc002351c
c002028a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002028e:	89 10                	mov    DWORD PTR [eax],edx
c0020290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020294:	83 ec 0c             	sub    esp,0xc
c0020297:	50                   	push   eax
c0020298:	e8 e7 ca fe ff       	call   c000cd84 <HardDiskController::~HardDiskController()>
c002029d:	83 c4 10             	add    esp,0x10
c00202a0:	90                   	nop
c00202a1:	83 c4 0c             	add    esp,0xc
c00202a4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00202a6 <SATABus::~SATABus()>:
c00202a6:	83 ec 0c             	sub    esp,0xc
c00202a9:	83 ec 0c             	sub    esp,0xc
c00202ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202b0:	e8 cd ff ff ff       	call   c0020282 <SATABus::~SATABus()>
c00202b5:	83 c4 10             	add    esp,0x10
c00202b8:	83 ec 08             	sub    esp,0x8
c00202bb:	68 64 01 00 00       	push   0x164
c00202c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202c4:	e8 73 a5 fe ff       	call   c000a83c <operator delete(void*, unsigned long)>
c00202c9:	83 c4 10             	add    esp,0x10
c00202cc:	83 c4 0c             	add    esp,0xc
c00202cf:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00202d0 <ATA::~ATA()>:
c00202d0:	83 ec 0c             	sub    esp,0xc
c00202d3:	ba 5c 35 02 c0       	mov    edx,0xc002355c
c00202d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202dc:	89 10                	mov    DWORD PTR [eax],edx
c00202de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202e2:	83 ec 0c             	sub    esp,0xc
c00202e5:	50                   	push   eax
c00202e6:	e8 7b cb fe ff       	call   c000ce66 <PhysicalDisk::~PhysicalDisk()>
c00202eb:	83 c4 10             	add    esp,0x10
c00202ee:	90                   	nop
c00202ef:	83 c4 0c             	add    esp,0xc
c00202f2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00202f4 <ATA::~ATA()>:
c00202f4:	83 ec 0c             	sub    esp,0xc
c00202f7:	83 ec 0c             	sub    esp,0xc
c00202fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202fe:	e8 cd ff ff ff       	call   c00202d0 <ATA::~ATA()>
c0020303:	83 c4 10             	add    esp,0x10
c0020306:	83 ec 08             	sub    esp,0x8
c0020309:	68 7c 01 00 00       	push   0x17c
c002030e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020312:	e8 25 a5 fe ff       	call   c000a83c <operator delete(void*, unsigned long)>
c0020317:	83 c4 10             	add    esp,0x10
c002031a:	83 c4 0c             	add    esp,0xc
c002031d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002031e <ATAPI::~ATAPI()>:
c002031e:	83 ec 0c             	sub    esp,0xc
c0020321:	ba a4 35 02 c0       	mov    edx,0xc00235a4
c0020326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002032a:	89 10                	mov    DWORD PTR [eax],edx
c002032c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020330:	83 ec 0c             	sub    esp,0xc
c0020333:	50                   	push   eax
c0020334:	e8 2d cb fe ff       	call   c000ce66 <PhysicalDisk::~PhysicalDisk()>
c0020339:	83 c4 10             	add    esp,0x10
c002033c:	90                   	nop
c002033d:	83 c4 0c             	add    esp,0xc
c0020340:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020342 <ATAPI::~ATAPI()>:
c0020342:	83 ec 0c             	sub    esp,0xc
c0020345:	83 ec 0c             	sub    esp,0xc
c0020348:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002034c:	e8 cd ff ff ff       	call   c002031e <ATAPI::~ATAPI()>
c0020351:	83 c4 10             	add    esp,0x10
c0020354:	83 ec 08             	sub    esp,0x8
c0020357:	68 84 01 00 00       	push   0x184
c002035c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020360:	e8 d7 a4 fe ff       	call   c000a83c <operator delete(void*, unsigned long)>
c0020365:	83 c4 10             	add    esp,0x10
c0020368:	83 c4 0c             	add    esp,0xc
c002036b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002036c <SATA::~SATA()>:
c002036c:	83 ec 0c             	sub    esp,0xc
c002036f:	ba 58 36 02 c0       	mov    edx,0xc0023658
c0020374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020378:	89 10                	mov    DWORD PTR [eax],edx
c002037a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002037e:	83 ec 0c             	sub    esp,0xc
c0020381:	50                   	push   eax
c0020382:	e8 df ca fe ff       	call   c000ce66 <PhysicalDisk::~PhysicalDisk()>
c0020387:	83 c4 10             	add    esp,0x10
c002038a:	90                   	nop
c002038b:	83 c4 0c             	add    esp,0xc
c002038e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020390 <SATA::~SATA()>:
c0020390:	83 ec 0c             	sub    esp,0xc
c0020393:	83 ec 0c             	sub    esp,0xc
c0020396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002039a:	e8 cd ff ff ff       	call   c002036c <SATA::~SATA()>
c002039f:	83 c4 10             	add    esp,0x10
c00203a2:	83 ec 08             	sub    esp,0x8
c00203a5:	68 7c 01 00 00       	push   0x17c
c00203aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203ae:	e8 89 a4 fe ff       	call   c000a83c <operator delete(void*, unsigned long)>
c00203b3:	83 c4 10             	add    esp,0x10
c00203b6:	83 c4 0c             	add    esp,0xc
c00203b9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00203ba <SATAPI::~SATAPI()>:
c00203ba:	83 ec 0c             	sub    esp,0xc
c00203bd:	ba 7c 37 02 c0       	mov    edx,0xc002377c
c00203c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203c6:	89 10                	mov    DWORD PTR [eax],edx
c00203c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203cc:	83 ec 0c             	sub    esp,0xc
c00203cf:	50                   	push   eax
c00203d0:	e8 91 ca fe ff       	call   c000ce66 <PhysicalDisk::~PhysicalDisk()>
c00203d5:	83 c4 10             	add    esp,0x10
c00203d8:	90                   	nop
c00203d9:	83 c4 0c             	add    esp,0xc
c00203dc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00203de <SATAPI::~SATAPI()>:
c00203de:	83 ec 0c             	sub    esp,0xc
c00203e1:	83 ec 0c             	sub    esp,0xc
c00203e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203e8:	e8 cd ff ff ff       	call   c00203ba <SATAPI::~SATAPI()>
c00203ed:	83 c4 10             	add    esp,0x10
c00203f0:	83 ec 08             	sub    esp,0x8
c00203f3:	68 84 01 00 00       	push   0x184
c00203f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203fc:	e8 3b a4 fe ff       	call   c000a83c <operator delete(void*, unsigned long)>
c0020401:	83 c4 10             	add    esp,0x10
c0020404:	83 c4 0c             	add    esp,0xc
c0020407:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020408 <IOAPIC::~IOAPIC()>:
c0020408:	83 ec 0c             	sub    esp,0xc
c002040b:	ba bc 37 02 c0       	mov    edx,0xc00237bc
c0020410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020414:	89 10                	mov    DWORD PTR [eax],edx
c0020416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002041a:	83 ec 0c             	sub    esp,0xc
c002041d:	50                   	push   eax
c002041e:	e8 af c4 fe ff       	call   c000c8d2 <Device::~Device()>
c0020423:	83 c4 10             	add    esp,0x10
c0020426:	90                   	nop
c0020427:	83 c4 0c             	add    esp,0xc
c002042a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002042c <IOAPIC::~IOAPIC()>:
c002042c:	83 ec 0c             	sub    esp,0xc
c002042f:	83 ec 0c             	sub    esp,0xc
c0020432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020436:	e8 cd ff ff ff       	call   c0020408 <IOAPIC::~IOAPIC()>
c002043b:	83 c4 10             	add    esp,0x10
c002043e:	83 ec 08             	sub    esp,0x8
c0020441:	68 68 01 00 00       	push   0x168
c0020446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002044a:	e8 ed a3 fe ff       	call   c000a83c <operator delete(void*, unsigned long)>
c002044f:	83 c4 10             	add    esp,0x10
c0020452:	83 c4 0c             	add    esp,0xc
c0020455:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020458 <APICTimer::~APICTimer()>:
c0020458:	83 ec 0c             	sub    esp,0xc
c002045b:	ba 04 38 02 c0       	mov    edx,0xc0023804
c0020460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020464:	89 10                	mov    DWORD PTR [eax],edx
c0020466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002046a:	83 ec 0c             	sub    esp,0xc
c002046d:	50                   	push   eax
c002046e:	e8 6d df fe ff       	call   c000e3e0 <Timer::~Timer()>
c0020473:	83 c4 10             	add    esp,0x10
c0020476:	90                   	nop
c0020477:	83 c4 0c             	add    esp,0xc
c002047a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002047c <APICTimer::~APICTimer()>:
c002047c:	83 ec 0c             	sub    esp,0xc
c002047f:	83 ec 0c             	sub    esp,0xc
c0020482:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020486:	e8 cd ff ff ff       	call   c0020458 <APICTimer::~APICTimer()>
c002048b:	83 c4 10             	add    esp,0x10
c002048e:	83 ec 08             	sub    esp,0x8
c0020491:	68 60 01 00 00       	push   0x160
c0020496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002049a:	e8 9d a3 fe ff       	call   c000a83c <operator delete(void*, unsigned long)>
c002049f:	83 c4 10             	add    esp,0x10
c00204a2:	83 c4 0c             	add    esp,0xc
c00204a5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00204a8 <PIT::~PIT()>:
c00204a8:	83 ec 0c             	sub    esp,0xc
c00204ab:	ba 54 38 02 c0       	mov    edx,0xc0023854
c00204b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204b4:	89 10                	mov    DWORD PTR [eax],edx
c00204b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204ba:	83 ec 0c             	sub    esp,0xc
c00204bd:	50                   	push   eax
c00204be:	e8 1d df fe ff       	call   c000e3e0 <Timer::~Timer()>
c00204c3:	83 c4 10             	add    esp,0x10
c00204c6:	90                   	nop
c00204c7:	83 c4 0c             	add    esp,0xc
c00204ca:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00204cc <PIT::~PIT()>:
c00204cc:	83 ec 0c             	sub    esp,0xc
c00204cf:	83 ec 0c             	sub    esp,0xc
c00204d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204d6:	e8 cd ff ff ff       	call   c00204a8 <PIT::~PIT()>
c00204db:	83 c4 10             	add    esp,0x10
c00204de:	83 ec 08             	sub    esp,0x8
c00204e1:	68 5c 01 00 00       	push   0x15c
c00204e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204ea:	e8 4d a3 fe ff       	call   c000a83c <operator delete(void*, unsigned long)>
c00204ef:	83 c4 10             	add    esp,0x10
c00204f2:	83 c4 0c             	add    esp,0xc
c00204f5:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be 69 26 02 c0       	mov    esi,0xc0022669
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be 85 26 02 c0       	mov    esi,0xc0022685
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
