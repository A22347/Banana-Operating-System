
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 c2 66 01 00       	call   c00166e2 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 84 50 03 c0       	mov    eax,0xc0035084
c0000025:	3d 84 50 03 c0       	cmp    eax,0xc0035084
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 84 50 03 c0       	push   0xc0035084
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 84 50 03 c0       	mov    eax,0xc0035084
c0000051:	2d 84 50 03 c0       	sub    eax,0xc0035084
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 84 50 03 c0       	push   0xc0035084
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d a0 78 03 c0 00 	cmp    BYTE PTR ds:0xc00378a0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 7c fb 02 c0       	mov    ebx,0xc002fb7c
c0000097:	81 eb 78 fb 02 c0    	sub    ebx,0xc002fb78
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 78 fb 02 c0       	mov    esi,0xc002fb78
c00000a6:	a1 a4 78 03 c0       	mov    eax,ds:0xc00378a4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 a4 78 03 c0       	mov    ds:0xc00378a4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 a4 78 03 c0       	mov    eax,ds:0xc00378a4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 84 50 03 c0       	push   0xc0035084
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 a0 78 03 c0 01 	mov    BYTE PTR ds:0xc00378a0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 a8 78 03 c0       	push   0xc00378a8
c0000108:	68 84 50 03 c0       	push   0xc0035084
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 df 4c 02 00       	call   c0024f8c <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 b0 8f 01 00       	call   c0019275 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 bd 4c 02 00       	call   c0024f8c <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 ca 51 02 00       	call   c00254b8 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 5d 56 02 00       	call   c0025954 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c4 b9 03 c0 	lgdtd  ds:0xc003b9c4
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 6f 01 02 00       	jmp    c00204ee <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 c0 78 03 c0       	mov    ds:0xc00378c0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 c0 78 03 c0    	mov    DWORD PTR ds:0xc00378c0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d c0 78 03 c0    	mov    ebx,DWORD PTR ds:0xc00378c0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 80 fb 02 c0 02 	test   BYTE PTR [edx-0x3ffd0480],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 80 fb 02 c0 01 	test   BYTE PTR [edx-0x3ffd0480],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 80 fb 02 c0 08 	test   BYTE PTR [edx-0x3ffd0480],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 80 fb 02 c0 08 	test   BYTE PTR [edx-0x3ffd0480],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 80 fb 02 c0 04 	test   BYTE PTR [ecx-0x3ffd0480],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 80 fb 02 c0 01 	test   BYTE PTR [edx-0x3ffd0480],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c1b:	90                   	nop

c0000c1c <LWIP_PLATFORM_HTONS>:
c0000c1c:	83 ec 04             	sub    esp,0x4
c0000c1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0000c27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000c2b:	c1 e8 08             	shr    eax,0x8
c0000c2e:	89 c2                	mov    edx,eax
c0000c30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000c34:	c1 e0 08             	shl    eax,0x8
c0000c37:	09 d0                	or     eax,edx
c0000c39:	83 c4 04             	add    esp,0x4
c0000c3c:	c3                   	ret    
c0000c3d:	8d 76 00             	lea    esi,[esi+0x0]

c0000c40 <LWIP_PLATFORM_HTONL>:
c0000c40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c44:	c1 e8 18             	shr    eax,0x18
c0000c47:	89 c2                	mov    edx,eax
c0000c49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c4d:	c1 e8 08             	shr    eax,0x8
c0000c50:	25 00 ff 00 00       	and    eax,0xff00
c0000c55:	09 c2                	or     edx,eax
c0000c57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c5b:	c1 e0 08             	shl    eax,0x8
c0000c5e:	25 00 00 ff 00       	and    eax,0xff0000
c0000c63:	09 c2                	or     edx,eax
c0000c65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c69:	c1 e0 18             	shl    eax,0x18
c0000c6c:	09 d0                	or     eax,edx
c0000c6e:	c3                   	ret    
c0000c6f:	90                   	nop

c0000c70 <lwip_socket_init>:
c0000c70:	83 ec 0c             	sub    esp,0xc
c0000c73:	83 ec 0c             	sub    esp,0xc
c0000c76:	68 84 fc 02 c0       	push   0xc002fc84
c0000c7b:	e8 c4 15 02 00       	call   c0022244 <KeCPuts>
c0000c80:	83 c4 10             	add    esp,0x10
c0000c83:	90                   	nop
c0000c84:	83 c4 0c             	add    esp,0xc
c0000c87:	c3                   	ret    

c0000c88 <tcpip_callback_with_block>:
c0000c88:	83 ec 0c             	sub    esp,0xc
c0000c8b:	83 ec 0c             	sub    esp,0xc
c0000c8e:	68 bf fc 02 c0       	push   0xc002fcbf
c0000c93:	e8 94 15 02 00       	call   c002222c <KeCPanic>
c0000c98:	83 c4 10             	add    esp,0x10
c0000c9b:	90                   	nop
c0000c9c:	83 c4 0c             	add    esp,0xc
c0000c9f:	c3                   	ret    

c0000ca0 <sys_sem_new>:
c0000ca0:	83 ec 1c             	sub    esp,0x1c
c0000ca3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000ca7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0000cab:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0000cb0:	83 ec 08             	sub    esp,0x8
c0000cb3:	50                   	push   eax
c0000cb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0000cb8:	e8 af 14 02 00       	call   c002216c <KeNetCreateSemaphore>
c0000cbd:	83 c4 10             	add    esp,0x10
c0000cc0:	b0 00                	mov    al,0x0
c0000cc2:	83 c4 1c             	add    esp,0x1c
c0000cc5:	c3                   	ret    
c0000cc6:	66 90                	xchg   ax,ax

c0000cc8 <sys_sem_free>:
c0000cc8:	83 ec 0c             	sub    esp,0xc
c0000ccb:	83 ec 0c             	sub    esp,0xc
c0000cce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cd2:	e8 d9 14 02 00       	call   c00221b0 <KeNetFreeSemaphore>
c0000cd7:	83 c4 10             	add    esp,0x10
c0000cda:	90                   	nop
c0000cdb:	83 c4 0c             	add    esp,0xc
c0000cde:	c3                   	ret    
c0000cdf:	90                   	nop

c0000ce0 <sys_sem_signal>:
c0000ce0:	83 ec 0c             	sub    esp,0xc
c0000ce3:	83 ec 0c             	sub    esp,0xc
c0000ce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cea:	e8 dd 14 02 00       	call   c00221cc <KeNetSignalSemaphore>
c0000cef:	83 c4 10             	add    esp,0x10
c0000cf2:	90                   	nop
c0000cf3:	83 c4 0c             	add    esp,0xc
c0000cf6:	c3                   	ret    
c0000cf7:	90                   	nop

c0000cf8 <sys_arch_sem_wait>:
c0000cf8:	83 ec 0c             	sub    esp,0xc
c0000cfb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000cff:	83 ec 08             	sub    esp,0x8
c0000d02:	50                   	push   eax
c0000d03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000d07:	e8 dc 14 02 00       	call   c00221e8 <KeNetWaitSemaphore>
c0000d0c:	83 c4 10             	add    esp,0x10
c0000d0f:	83 c4 0c             	add    esp,0xc
c0000d12:	c3                   	ret    
c0000d13:	90                   	nop

c0000d14 <sys_mbox_new>:
c0000d14:	83 ec 0c             	sub    esp,0xc
c0000d17:	83 ec 0c             	sub    esp,0xc
c0000d1a:	68 d9 fc 02 c0       	push   0xc002fcd9
c0000d1f:	e8 08 15 02 00       	call   c002222c <KeCPanic>
c0000d24:	83 c4 10             	add    esp,0x10
c0000d27:	b0 00                	mov    al,0x0
c0000d29:	83 c4 0c             	add    esp,0xc
c0000d2c:	c3                   	ret    
c0000d2d:	8d 76 00             	lea    esi,[esi+0x0]

c0000d30 <sys_mbox_free>:
c0000d30:	83 ec 0c             	sub    esp,0xc
c0000d33:	83 ec 0c             	sub    esp,0xc
c0000d36:	68 e6 fc 02 c0       	push   0xc002fce6
c0000d3b:	e8 ec 14 02 00       	call   c002222c <KeCPanic>
c0000d40:	83 c4 10             	add    esp,0x10
c0000d43:	90                   	nop
c0000d44:	83 c4 0c             	add    esp,0xc
c0000d47:	c3                   	ret    

c0000d48 <sys_mbox_post>:
c0000d48:	83 ec 0c             	sub    esp,0xc
c0000d4b:	83 ec 0c             	sub    esp,0xc
c0000d4e:	68 f4 fc 02 c0       	push   0xc002fcf4
c0000d53:	e8 d4 14 02 00       	call   c002222c <KeCPanic>
c0000d58:	83 c4 10             	add    esp,0x10
c0000d5b:	90                   	nop
c0000d5c:	83 c4 0c             	add    esp,0xc
c0000d5f:	c3                   	ret    

c0000d60 <sys_arch_mbox_fetch>:
c0000d60:	83 ec 0c             	sub    esp,0xc
c0000d63:	83 ec 0c             	sub    esp,0xc
c0000d66:	68 02 fd 02 c0       	push   0xc002fd02
c0000d6b:	e8 bc 14 02 00       	call   c002222c <KeCPanic>
c0000d70:	83 c4 10             	add    esp,0x10
c0000d73:	b8 00 00 00 00       	mov    eax,0x0
c0000d78:	83 c4 0c             	add    esp,0xc
c0000d7b:	c3                   	ret    

c0000d7c <sys_arch_mbox_tryfetch>:
c0000d7c:	83 ec 0c             	sub    esp,0xc
c0000d7f:	83 ec 0c             	sub    esp,0xc
c0000d82:	68 16 fd 02 c0       	push   0xc002fd16
c0000d87:	e8 a0 14 02 00       	call   c002222c <KeCPanic>
c0000d8c:	83 c4 10             	add    esp,0x10
c0000d8f:	b8 00 00 00 00       	mov    eax,0x0
c0000d94:	83 c4 0c             	add    esp,0xc
c0000d97:	c3                   	ret    

c0000d98 <sys_mbox_trypost>:
c0000d98:	83 ec 0c             	sub    esp,0xc
c0000d9b:	83 ec 0c             	sub    esp,0xc
c0000d9e:	68 2d fd 02 c0       	push   0xc002fd2d
c0000da3:	e8 84 14 02 00       	call   c002222c <KeCPanic>
c0000da8:	83 c4 10             	add    esp,0x10
c0000dab:	90                   	nop
c0000dac:	83 c4 0c             	add    esp,0xc
c0000daf:	c3                   	ret    

c0000db0 <sys_thread_new>:
c0000db0:	83 ec 0c             	sub    esp,0xc
c0000db3:	83 ec 08             	sub    esp,0x8
c0000db6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0000dba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0000dbe:	e8 45 14 02 00       	call   c0022208 <KeNetCreateThread>
c0000dc3:	83 c4 10             	add    esp,0x10
c0000dc6:	b8 00 00 00 00       	mov    eax,0x0
c0000dcb:	83 c4 0c             	add    esp,0xc
c0000dce:	c3                   	ret    
c0000dcf:	90                   	nop

c0000dd0 <sys_init>:
c0000dd0:	90                   	nop
c0000dd1:	c3                   	ret    

c0000dd2 <largebin_index>:
c0000dd2:	89 c2                	mov    edx,eax
c0000dd4:	c1 ea 08             	shr    edx,0x8
c0000dd7:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000ddd:	77 10                	ja     c0000def <largebin_index+0x1d>
c0000ddf:	0f bd d2             	bsr    edx,edx
c0000de2:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000de5:	d3 e8                	shr    eax,cl
c0000de7:	83 e0 03             	and    eax,0x3
c0000dea:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000dee:	c3                   	ret    
c0000def:	b8 5f 00 00 00       	mov    eax,0x5f
c0000df4:	c3                   	ret    

c0000df5 <malloc_init_state>:
c0000df5:	8d 50 34             	lea    edx,[eax+0x34]
c0000df8:	53                   	push   ebx
c0000df9:	89 d1                	mov    ecx,edx
c0000dfb:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000e01:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000e04:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000e07:	83 c2 08             	add    edx,0x8
c0000e0a:	39 da                	cmp    edx,ebx
c0000e0c:	75 f3                	jne    c0000e01 <malloc_init_state+0xc>
c0000e0e:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000e18:	8b 10                	mov    edx,DWORD PTR [eax]
c0000e1a:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000e24:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000e2e:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000e38:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000e3f:	83 e2 03             	and    edx,0x3
c0000e42:	5b                   	pop    ebx
c0000e43:	83 ca 48             	or     edx,0x48
c0000e46:	89 10                	mov    DWORD PTR [eax],edx
c0000e48:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000e4b:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000e55:	c3                   	ret    

c0000e56 <malloc_consolidate>:
c0000e56:	8b 10                	mov    edx,DWORD PTR [eax]
c0000e58:	85 d2                	test   edx,edx
c0000e5a:	0f 84 d8 00 00 00    	je     c0000f38 <malloc_consolidate+0xe2>
c0000e60:	55                   	push   ebp
c0000e61:	83 e2 fd             	and    edx,0xfffffffd
c0000e64:	57                   	push   edi
c0000e65:	89 c5                	mov    ebp,eax
c0000e67:	56                   	push   esi
c0000e68:	53                   	push   ebx
c0000e69:	8d 78 34             	lea    edi,[eax+0x34]
c0000e6c:	83 ec 10             	sub    esp,0x10
c0000e6f:	89 10                	mov    DWORD PTR [eax],edx
c0000e71:	c1 ea 03             	shr    edx,0x3
c0000e74:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000e78:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000e7c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000e80:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000e83:	85 d2                	test   edx,edx
c0000e85:	0f 84 98 00 00 00    	je     c0000f23 <malloc_consolidate+0xcd>
c0000e8b:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000e92:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000e95:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000e98:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000e9c:	89 f9                	mov    ecx,edi
c0000e9e:	83 e1 fe             	and    ecx,0xfffffffe
c0000ea1:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ea4:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000ea7:	83 e3 fc             	and    ebx,0xfffffffc
c0000eaa:	83 e7 01             	and    edi,0x1
c0000ead:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000eb0:	75 14                	jne    c0000ec6 <malloc_consolidate+0x70>
c0000eb2:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000eb4:	29 fa                	sub    edx,edi
c0000eb6:	01 f9                	add    ecx,edi
c0000eb8:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000ebb:	89 fb                	mov    ebx,edi
c0000ebd:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000ec0:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000ec3:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000ec6:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000ec9:	74 40                	je     c0000f0b <malloc_consolidate+0xb5>
c0000ecb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ece:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ed1:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ed5:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000ed8:	83 e7 01             	and    edi,0x1
c0000edb:	75 0e                	jne    c0000eeb <malloc_consolidate+0x95>
c0000edd:	01 d9                	add    ecx,ebx
c0000edf:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000ee2:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000ee5:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000ee8:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000eeb:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000eee:	89 ce                	mov    esi,ecx
c0000ef0:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000ef3:	83 ce 01             	or     esi,0x1
c0000ef6:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000ef9:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000efc:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000f00:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000f03:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000f06:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000f09:	eb 0c                	jmp    c0000f17 <malloc_consolidate+0xc1>
c0000f0b:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000f0e:	83 c9 01             	or     ecx,0x1
c0000f11:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f14:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000f17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000f1b:	85 d2                	test   edx,edx
c0000f1d:	0f 85 6f ff ff ff    	jne    c0000e92 <malloc_consolidate+0x3c>
c0000f23:	83 c5 04             	add    ebp,0x4
c0000f26:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000f2a:	0f 85 50 ff ff ff    	jne    c0000e80 <malloc_consolidate+0x2a>
c0000f30:	83 c4 10             	add    esp,0x10
c0000f33:	5b                   	pop    ebx
c0000f34:	5e                   	pop    esi
c0000f35:	5f                   	pop    edi
c0000f36:	5d                   	pop    ebp
c0000f37:	c3                   	ret    
c0000f38:	e9 b8 fe ff ff       	jmp    c0000df5 <malloc_init_state>

c0000f3d <dlfree>:
c0000f3d:	57                   	push   edi
c0000f3e:	56                   	push   esi
c0000f3f:	53                   	push   ebx
c0000f40:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000f44:	85 c9                	test   ecx,ecx
c0000f46:	0f 84 01 01 00 00    	je     c000104d <dlfree+0x110>
c0000f4c:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000f4f:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000f52:	8b 1d e0 78 03 c0    	mov    ebx,DWORD PTR ds:0xc00378e0
c0000f58:	89 f0                	mov    eax,esi
c0000f5a:	83 e0 fc             	and    eax,0xfffffffc
c0000f5d:	39 c3                	cmp    ebx,eax
c0000f5f:	72 24                	jb     c0000f85 <dlfree+0x48>
c0000f61:	c1 e8 03             	shr    eax,0x3
c0000f64:	83 cb 03             	or     ebx,0x3
c0000f67:	89 1d e0 78 03 c0    	mov    DWORD PTR ds:0xc00378e0,ebx
c0000f6d:	83 e8 02             	sub    eax,0x2
c0000f70:	8b 1c 85 e4 78 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffc871c]
c0000f77:	89 19                	mov    DWORD PTR [ecx],ebx
c0000f79:	89 14 85 e4 78 03 c0 	mov    DWORD PTR [eax*4-0x3ffc871c],edx
c0000f80:	e9 c8 00 00 00       	jmp    c000104d <dlfree+0x110>
c0000f85:	83 e6 02             	and    esi,0x2
c0000f88:	0f 85 a0 00 00 00    	jne    c000102e <dlfree+0xf1>
c0000f8e:	8d 34 02             	lea    esi,[edx+eax*1]
c0000f91:	83 cb 01             	or     ebx,0x1
c0000f94:	89 1d e0 78 03 c0    	mov    DWORD PTR ds:0xc00378e0,ebx
c0000f9a:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000f9d:	83 e3 fc             	and    ebx,0xfffffffc
c0000fa0:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000fa4:	75 13                	jne    c0000fb9 <dlfree+0x7c>
c0000fa6:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000fa9:	29 ca                	sub    edx,ecx
c0000fab:	01 c8                	add    eax,ecx
c0000fad:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000fb0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000fb3:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000fb6:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000fb9:	39 35 0c 79 03 c0    	cmp    DWORD PTR ds:0xc003790c,esi
c0000fbf:	74 40                	je     c0001001 <dlfree+0xc4>
c0000fc1:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000fc5:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000fc8:	80 e1 01             	and    cl,0x1
c0000fcb:	75 0e                	jne    c0000fdb <dlfree+0x9e>
c0000fcd:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000fd0:	01 d8                	add    eax,ebx
c0000fd2:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000fd5:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000fd8:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000fdb:	8b 0d 1c 79 03 c0    	mov    ecx,DWORD PTR ds:0xc003791c
c0000fe1:	c7 42 0c 14 79 03 c0 	mov    DWORD PTR [edx+0xc],0xc0037914
c0000fe8:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000feb:	89 15 1c 79 03 c0    	mov    DWORD PTR ds:0xc003791c,edx
c0000ff1:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ff4:	89 c1                	mov    ecx,eax
c0000ff6:	83 c9 01             	or     ecx,0x1
c0000ff9:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ffc:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000fff:	eb 10                	jmp    c0001011 <dlfree+0xd4>
c0001001:	01 d8                	add    eax,ebx
c0001003:	89 c1                	mov    ecx,eax
c0001005:	83 c9 01             	or     ecx,0x1
c0001008:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000100b:	89 15 0c 79 03 c0    	mov    DWORD PTR ds:0xc003790c,edx
c0001011:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0001016:	76 35                	jbe    c000104d <dlfree+0x110>
c0001018:	f6 05 e0 78 03 c0 02 	test   BYTE PTR ds:0xc00378e0,0x2
c000101f:	74 2c                	je     c000104d <dlfree+0x110>
c0001021:	5b                   	pop    ebx
c0001022:	b8 e0 78 03 c0       	mov    eax,0xc00378e0
c0001027:	5e                   	pop    esi
c0001028:	5f                   	pop    edi
c0001029:	e9 28 fe ff ff       	jmp    c0000e56 <malloc_consolidate>
c000102e:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0001031:	53                   	push   ebx
c0001032:	53                   	push   ebx
c0001033:	ff 0d 30 7c 03 c0    	dec    DWORD PTR ds:0xc0037c30
c0001039:	01 c8                	add    eax,ecx
c000103b:	29 ca                	sub    edx,ecx
c000103d:	50                   	push   eax
c000103e:	52                   	push   edx
c000103f:	29 05 44 7c 03 c0    	sub    DWORD PTR ds:0xc0037c44,eax
c0001045:	e8 be 55 01 00       	call   c0016608 <munmap>
c000104a:	83 c4 10             	add    esp,0x10
c000104d:	5b                   	pop    ebx
c000104e:	5e                   	pop    esi
c000104f:	5f                   	pop    edi
c0001050:	c3                   	ret    

c0001051 <sYSMALLOc>:
c0001051:	55                   	push   ebp
c0001052:	57                   	push   edi
c0001053:	56                   	push   esi
c0001054:	53                   	push   ebx
c0001055:	89 d3                	mov    ebx,edx
c0001057:	83 ec 2c             	sub    esp,0x2c
c000105a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000105e:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0001064:	f6 02 02             	test   BYTE PTR [edx],0x2
c0001067:	8d 41 ff             	lea    eax,[ecx-0x1]
c000106a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000106e:	74 1f                	je     c000108f <sYSMALLOc+0x3e>
c0001070:	89 d0                	mov    eax,edx
c0001072:	e8 df fd ff ff       	call   c0000e56 <malloc_consolidate>
c0001077:	83 ec 0c             	sub    esp,0xc
c000107a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000107e:	83 e8 07             	sub    eax,0x7
c0001081:	50                   	push   eax
c0001082:	e8 78 03 00 00       	call   c00013ff <dlmalloc>
c0001087:	83 c4 10             	add    esp,0x10
c000108a:	e9 68 03 00 00       	jmp    c00013f7 <sYSMALLOc+0x3a6>
c000108f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001093:	f7 d9                	neg    ecx
c0001095:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c000109b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000109f:	0f 87 be 00 00 00    	ja     c0001163 <sYSMALLOc+0x112>
c00010a5:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c00010ab:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c00010b1:	0f 8d ac 00 00 00    	jge    c0001163 <sYSMALLOc+0x112>
c00010b7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00010bf:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c00010c3:	21 ce                	and    esi,ecx
c00010c5:	39 fe                	cmp    esi,edi
c00010c7:	0f 86 96 00 00 00    	jbe    c0001163 <sYSMALLOc+0x112>
c00010cd:	52                   	push   edx
c00010ce:	52                   	push   edx
c00010cf:	6a 00                	push   0x0
c00010d1:	6a ff                	push   0xffffffff
c00010d3:	6a 0c                	push   0xc
c00010d5:	6a 03                	push   0x3
c00010d7:	56                   	push   esi
c00010d8:	6a 00                	push   0x0
c00010da:	e8 cb 54 01 00       	call   c00165aa <mmap>
c00010df:	83 c4 20             	add    esp,0x20
c00010e2:	83 f8 ff             	cmp    eax,0xffffffff
c00010e5:	74 7c                	je     c0001163 <sYSMALLOc+0x112>
c00010e7:	89 c1                	mov    ecx,eax
c00010e9:	83 e1 07             	and    ecx,0x7
c00010ec:	74 13                	je     c0001101 <sYSMALLOc+0xb0>
c00010ee:	ba 08 00 00 00       	mov    edx,0x8
c00010f3:	89 f7                	mov    edi,esi
c00010f5:	29 ca                	sub    edx,ecx
c00010f7:	01 d0                	add    eax,edx
c00010f9:	29 d7                	sub    edi,edx
c00010fb:	89 10                	mov    DWORD PTR [eax],edx
c00010fd:	89 fa                	mov    edx,edi
c00010ff:	eb 08                	jmp    c0001109 <sYSMALLOc+0xb8>
c0001101:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0001107:	89 f2                	mov    edx,esi
c0001109:	83 ca 02             	or     edx,0x2
c000110c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000110f:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0001115:	8d 57 01             	lea    edx,[edi+0x1]
c0001118:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c000111e:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0001124:	7e 06                	jle    c000112c <sYSMALLOc+0xdb>
c0001126:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c000112c:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0001132:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0001138:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c000113e:	76 06                	jbe    c0001146 <sYSMALLOc+0xf5>
c0001140:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0001146:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c000114c:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0001152:	0f 83 41 01 00 00    	jae    c0001299 <sYSMALLOc+0x248>
c0001158:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c000115e:	e9 36 01 00 00       	jmp    c0001299 <sYSMALLOc+0x248>
c0001163:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001166:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001173:	83 e0 fc             	and    eax,0xfffffffc
c0001176:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000117a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000117e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0001182:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001186:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000118a:	83 c0 10             	add    eax,0x10
c000118d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0001191:	01 c5                	add    ebp,eax
c0001193:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c000119a:	74 04                	je     c00011a0 <sYSMALLOc+0x14f>
c000119c:	2b 6c 24 04          	sub    ebp,DWORD PTR [esp+0x4]
c00011a0:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c00011a4:	23 6c 24 14          	and    ebp,DWORD PTR [esp+0x14]
c00011a8:	89 ee                	mov    esi,ebp
c00011aa:	7f 19                	jg     c00011c5 <sYSMALLOc+0x174>
c00011ac:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c00011b3:	74 28                	je     c00011dd <sYSMALLOc+0x18c>
c00011b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00011b9:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c00011bd:	01 ee                	add    esi,ebp
c00011bf:	23 74 24 14          	and    esi,DWORD PTR [esp+0x14]
c00011c3:	eb 18                	jmp    c00011dd <sYSMALLOc+0x18c>
c00011c5:	83 ec 0c             	sub    esp,0xc
c00011c8:	55                   	push   ebp
c00011c9:	e8 a6 53 01 00       	call   c0016574 <sbrk_thunk>
c00011ce:	83 c4 10             	add    esp,0x10
c00011d1:	89 c7                	mov    edi,eax
c00011d3:	83 c8 ff             	or     eax,0xffffffff
c00011d6:	83 ff ff             	cmp    edi,0xffffffff
c00011d9:	75 42                	jne    c000121d <sYSMALLOc+0x1cc>
c00011db:	eb cf                	jmp    c00011ac <sYSMALLOc+0x15b>
c00011dd:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c00011e3:	77 05                	ja     c00011ea <sYSMALLOc+0x199>
c00011e5:	be 00 c0 00 00       	mov    esi,0xc000
c00011ea:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00011ee:	77 07                	ja     c00011f7 <sYSMALLOc+0x1a6>
c00011f0:	31 c0                	xor    eax,eax
c00011f2:	e9 00 02 00 00       	jmp    c00013f7 <sYSMALLOc+0x3a6>
c00011f7:	50                   	push   eax
c00011f8:	50                   	push   eax
c00011f9:	6a 00                	push   0x0
c00011fb:	6a ff                	push   0xffffffff
c00011fd:	6a 0c                	push   0xc
c00011ff:	6a 03                	push   0x3
c0001201:	56                   	push   esi
c0001202:	6a 00                	push   0x0
c0001204:	e8 a1 53 01 00       	call   c00165aa <mmap>
c0001209:	83 c4 20             	add    esp,0x20
c000120c:	83 f8 ff             	cmp    eax,0xffffffff
c000120f:	89 c7                	mov    edi,eax
c0001211:	74 dd                	je     c00011f0 <sYSMALLOc+0x19f>
c0001213:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000121a:	8d 04 30             	lea    eax,[eax+esi*1]
c000121d:	8b 8b 68 03 00 00    	mov    ecx,DWORD PTR [ebx+0x368]
c0001223:	01 f1                	add    ecx,esi
c0001225:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001229:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c000122f:	75 70                	jne    c00012a1 <sYSMALLOc+0x250>
c0001231:	83 f8 ff             	cmp    eax,0xffffffff
c0001234:	75 6b                	jne    c00012a1 <sYSMALLOc+0x250>
c0001236:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c000123a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000123e:	83 ce 01             	or     esi,0x1
c0001241:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0001244:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c000124a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001250:	73 06                	jae    c0001258 <sYSMALLOc+0x207>
c0001252:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001258:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000125e:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001264:	73 06                	jae    c000126c <sYSMALLOc+0x21b>
c0001266:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000126c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000126f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001272:	83 e2 fc             	and    edx,0xfffffffc
c0001275:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
c0001279:	0f 87 71 ff ff ff    	ja     c00011f0 <sYSMALLOc+0x19f>
c000127f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001283:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001286:	29 fa                	sub    edx,edi
c0001288:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000128b:	89 fb                	mov    ebx,edi
c000128d:	83 ca 01             	or     edx,0x1
c0001290:	83 cb 01             	or     ebx,0x1
c0001293:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001296:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001299:	83 c0 08             	add    eax,0x8
c000129c:	e9 56 01 00 00       	jmp    c00013f7 <sYSMALLOc+0x3a6>
c00012a1:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00012a7:	f6 c2 01             	test   dl,0x1
c00012aa:	74 1e                	je     c00012ca <sYSMALLOc+0x279>
c00012ac:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00012b1:	0f 84 bb 00 00 00    	je     c0001372 <sYSMALLOc+0x321>
c00012b7:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c00012bb:	0f 86 b1 00 00 00    	jbe    c0001372 <sYSMALLOc+0x321>
c00012c1:	83 e2 fe             	and    edx,0xfffffffe
c00012c4:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00012ca:	83 f8 ff             	cmp    eax,0xffffffff
c00012cd:	89 fd                	mov    ebp,edi
c00012cf:	75 24                	jne    c00012f5 <sYSMALLOc+0x2a4>
c00012d1:	83 ec 0c             	sub    esp,0xc
c00012d4:	89 fd                	mov    ebp,edi
c00012d6:	6a 00                	push   0x0
c00012d8:	e8 97 52 01 00       	call   c0016574 <sbrk_thunk>
c00012dd:	83 c4 10             	add    esp,0x10
c00012e0:	89 c2                	mov    edx,eax
c00012e2:	29 fa                	sub    edx,edi
c00012e4:	29 f2                	sub    edx,esi
c00012e6:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00012ec:	83 f8 ff             	cmp    eax,0xffffffff
c00012ef:	0f 84 4f ff ff ff    	je     c0001244 <sYSMALLOc+0x1f3>
c00012f5:	31 c9                	xor    ecx,ecx
c00012f7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c00012fa:	29 e8                	sub    eax,ebp
c00012fc:	01 c8                	add    eax,ecx
c00012fe:	83 c8 01             	or     eax,0x1
c0001301:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001304:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000130a:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000130f:	0f 84 2f ff ff ff    	je     c0001244 <sYSMALLOc+0x1f3>
c0001315:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0001319:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000131d:	83 ee 0c             	sub    esi,0xc
c0001320:	83 e6 f8             	and    esi,0xfffffff8
c0001323:	89 f0                	mov    eax,esi
c0001325:	83 c8 01             	or     eax,0x1
c0001328:	83 fe 0f             	cmp    esi,0xf
c000132b:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000132e:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c0001336:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c000133e:	0f 86 00 ff ff ff    	jbe    c0001244 <sYSMALLOc+0x1f3>
c0001344:	83 ec 0c             	sub    esp,0xc
c0001347:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000134d:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001357:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000135b:	83 c0 08             	add    eax,0x8
c000135e:	50                   	push   eax
c000135f:	e8 d9 fb ff ff       	call   c0000f3d <dlfree>
c0001364:	83 c4 10             	add    esp,0x10
c0001367:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000136d:	e9 d2 fe ff ff       	jmp    c0001244 <sYSMALLOc+0x1f3>
c0001372:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001377:	74 0e                	je     c0001387 <sYSMALLOc+0x336>
c0001379:	89 f8                	mov    eax,edi
c000137b:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000137f:	01 c1                	add    ecx,eax
c0001381:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0001387:	89 fa                	mov    edx,edi
c0001389:	83 e2 07             	and    edx,0x7
c000138c:	74 0c                	je     c000139a <sYSMALLOc+0x349>
c000138e:	b8 08 00 00 00       	mov    eax,0x8
c0001393:	29 d0                	sub    eax,edx
c0001395:	8d 2c 07             	lea    ebp,[edi+eax*1]
c0001398:	eb 04                	jmp    c000139e <sYSMALLOc+0x34d>
c000139a:	89 fd                	mov    ebp,edi
c000139c:	31 c0                	xor    eax,eax
c000139e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00013a2:	83 ec 0c             	sub    esp,0xc
c00013a5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00013a9:	8d 14 06             	lea    edx,[esi+eax*1]
c00013ac:	01 fa                	add    edx,edi
c00013ae:	01 d1                	add    ecx,edx
c00013b0:	29 d0                	sub    eax,edx
c00013b2:	23 4c 24 20          	and    ecx,DWORD PTR [esp+0x20]
c00013b6:	01 c1                	add    ecx,eax
c00013b8:	51                   	push   ecx
c00013b9:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00013bd:	e8 b2 51 01 00       	call   c0016574 <sbrk_thunk>
c00013c2:	83 c4 10             	add    esp,0x10
c00013c5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013c9:	83 f8 ff             	cmp    eax,0xffffffff
c00013cc:	75 12                	jne    c00013e0 <sYSMALLOc+0x38f>
c00013ce:	83 ec 0c             	sub    esp,0xc
c00013d1:	6a 00                	push   0x0
c00013d3:	e8 9c 51 01 00       	call   c0016574 <sbrk_thunk>
c00013d8:	83 c4 10             	add    esp,0x10
c00013db:	e9 0c ff ff ff       	jmp    c00012ec <sYSMALLOc+0x29b>
c00013e0:	39 f8                	cmp    eax,edi
c00013e2:	0f 83 0f ff ff ff    	jae    c00012f7 <sYSMALLOc+0x2a6>
c00013e8:	8d 04 37             	lea    eax,[edi+esi*1]
c00013eb:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c00013f2:	e9 f5 fe ff ff       	jmp    c00012ec <sYSMALLOc+0x29b>
c00013f7:	83 c4 2c             	add    esp,0x2c
c00013fa:	5b                   	pop    ebx
c00013fb:	5e                   	pop    esi
c00013fc:	5f                   	pop    edi
c00013fd:	5d                   	pop    ebp
c00013fe:	c3                   	ret    

c00013ff <dlmalloc>:
c00013ff:	55                   	push   ebp
c0001400:	57                   	push   edi
c0001401:	56                   	push   esi
c0001402:	53                   	push   ebx
c0001403:	83 ec 1c             	sub    esp,0x1c
c0001406:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000140a:	83 f8 df             	cmp    eax,0xffffffdf
c000140d:	0f 87 70 03 00 00    	ja     c0001783 <dlmalloc+0x384>
c0001413:	83 c0 0b             	add    eax,0xb
c0001416:	be 10 00 00 00       	mov    esi,0x10
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 05                	jbe    c0001425 <dlmalloc+0x26>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 c6                	mov    esi,eax
c0001425:	8b 3d e0 78 03 c0    	mov    edi,DWORD PTR ds:0xc00378e0
c000142b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001431:	75 17                	jne    c000144a <dlmalloc+0x4b>
c0001433:	85 ff                	test   edi,edi
c0001435:	0f 85 05 03 00 00    	jne    c0001740 <dlmalloc+0x341>
c000143b:	b8 e0 78 03 c0       	mov    eax,0xc00378e0
c0001440:	e8 11 fa ff ff       	call   c0000e56 <malloc_consolidate>
c0001445:	e9 f6 02 00 00       	jmp    c0001740 <dlmalloc+0x341>
c000144a:	39 f7                	cmp    edi,esi
c000144c:	72 1f                	jb     c000146d <dlmalloc+0x6e>
c000144e:	89 f2                	mov    edx,esi
c0001450:	c1 ea 03             	shr    edx,0x3
c0001453:	83 ea 02             	sub    edx,0x2
c0001456:	8b 04 95 e4 78 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc871c]
c000145d:	85 c0                	test   eax,eax
c000145f:	74 0c                	je     c000146d <dlmalloc+0x6e>
c0001461:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001464:	89 0c 95 e4 78 03 c0 	mov    DWORD PTR [edx*4-0x3ffc871c],ecx
c000146b:	eb 30                	jmp    c000149d <dlmalloc+0x9e>
c000146d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001473:	89 f0                	mov    eax,esi
c0001475:	77 2e                	ja     c00014a5 <dlmalloc+0xa6>
c0001477:	c1 e8 03             	shr    eax,0x3
c000147a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000147e:	8d 14 c5 14 79 03 c0 	lea    edx,[eax*8-0x3ffc86ec]
c0001485:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001488:	8d 5a f8             	lea    ebx,[edx-0x8]
c000148b:	39 c3                	cmp    ebx,eax
c000148d:	74 2e                	je     c00014bd <dlmalloc+0xbe>
c000148f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001492:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001497:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000149a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000149d:	83 c0 08             	add    eax,0x8
c00014a0:	e9 e0 02 00 00       	jmp    c0001785 <dlmalloc+0x386>
c00014a5:	e8 28 f9 ff ff       	call   c0000dd2 <largebin_index>
c00014aa:	83 e7 02             	and    edi,0x2
c00014ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00014b1:	74 0a                	je     c00014bd <dlmalloc+0xbe>
c00014b3:	b8 e0 78 03 c0       	mov    eax,0xc00378e0
c00014b8:	e8 99 f9 ff ff       	call   c0000e56 <malloc_consolidate>
c00014bd:	8d 46 10             	lea    eax,[esi+0x10]
c00014c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014c4:	8b 1d 20 79 03 c0    	mov    ebx,DWORD PTR ds:0xc0037920
c00014ca:	81 fb 14 79 03 c0    	cmp    ebx,0xc0037914
c00014d0:	0f 84 13 01 00 00    	je     c00015e9 <dlmalloc+0x1ea>
c00014d6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00014d9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00014dc:	83 e7 fc             	and    edi,0xfffffffc
c00014df:	81 fe ff 00 00 00    	cmp    esi,0xff
c00014e5:	77 4c                	ja     c0001533 <dlmalloc+0x134>
c00014e7:	3d 14 79 03 c0       	cmp    eax,0xc0037914
c00014ec:	75 45                	jne    c0001533 <dlmalloc+0x134>
c00014ee:	39 1d 10 79 03 c0    	cmp    DWORD PTR ds:0xc0037910,ebx
c00014f4:	75 3d                	jne    c0001533 <dlmalloc+0x134>
c00014f6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00014fa:	73 37                	jae    c0001533 <dlmalloc+0x134>
c00014fc:	8d 04 33             	lea    eax,[ebx+esi*1]
c00014ff:	89 fa                	mov    edx,edi
c0001501:	a3 1c 79 03 c0       	mov    ds:0xc003791c,eax
c0001506:	29 f2                	sub    edx,esi
c0001508:	83 ce 01             	or     esi,0x1
c000150b:	a3 20 79 03 c0       	mov    ds:0xc0037920,eax
c0001510:	89 d1                	mov    ecx,edx
c0001512:	a3 10 79 03 c0       	mov    ds:0xc0037910,eax
c0001517:	83 c9 01             	or     ecx,0x1
c000151a:	c7 40 08 14 79 03 c0 	mov    DWORD PTR [eax+0x8],0xc0037914
c0001521:	c7 40 0c 14 79 03 c0 	mov    DWORD PTR [eax+0xc],0xc0037914
c0001528:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000152b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000152e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001531:	eb 15                	jmp    c0001548 <dlmalloc+0x149>
c0001533:	a3 20 79 03 c0       	mov    ds:0xc0037920,eax
c0001538:	39 fe                	cmp    esi,edi
c000153a:	c7 40 08 14 79 03 c0 	mov    DWORD PTR [eax+0x8],0xc0037914
c0001541:	75 0d                	jne    c0001550 <dlmalloc+0x151>
c0001543:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001548:	8d 43 08             	lea    eax,[ebx+0x8]
c000154b:	e9 35 02 00 00       	jmp    c0001785 <dlmalloc+0x386>
c0001550:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001556:	89 f8                	mov    eax,edi
c0001558:	77 19                	ja     c0001573 <dlmalloc+0x174>
c000155a:	c1 e8 03             	shr    eax,0x3
c000155d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001560:	83 c2 0d             	add    edx,0xd
c0001563:	8d 2c 95 d8 78 03 c0 	lea    ebp,[edx*4-0x3ffc8728]
c000156a:	8b 14 95 e0 78 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc8720]
c0001571:	eb 46                	jmp    c00015b9 <dlmalloc+0x1ba>
c0001573:	e8 5a f8 ff ff       	call   c0000dd2 <largebin_index>
c0001578:	8d 14 00             	lea    edx,[eax+eax*1]
c000157b:	83 c2 0d             	add    edx,0xd
c000157e:	8d 0c 95 e0 78 03 c0 	lea    ecx,[edx*4-0x3ffc8720]
c0001585:	8b 14 95 e0 78 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc8720]
c000158c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000158f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001593:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001597:	89 d5                	mov    ebp,edx
c0001599:	74 1e                	je     c00015b9 <dlmalloc+0x1ba>
c000159b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000159e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00015a1:	77 12                	ja     c00015b5 <dlmalloc+0x1b6>
c00015a3:	83 cf 01             	or     edi,0x1
c00015a6:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00015a9:	76 05                	jbe    c00015b0 <dlmalloc+0x1b1>
c00015ab:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00015ae:	eb f6                	jmp    c00015a6 <dlmalloc+0x1a7>
c00015b0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00015b3:	eb 04                	jmp    c00015b9 <dlmalloc+0x1ba>
c00015b5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00015b9:	89 c7                	mov    edi,eax
c00015bb:	88 c1                	mov    cl,al
c00015bd:	c1 ff 05             	sar    edi,0x5
c00015c0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00015c4:	bf 01 00 00 00       	mov    edi,0x1
c00015c9:	d3 e7                	shl    edi,cl
c00015cb:	89 f8                	mov    eax,edi
c00015cd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00015d1:	09 04 bd 14 7c 03 c0 	or     DWORD PTR [edi*4-0x3ffc83ec],eax
c00015d8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00015db:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00015de:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00015e1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00015e4:	e9 db fe ff ff       	jmp    c00014c4 <dlmalloc+0xc5>
c00015e9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00015ef:	76 78                	jbe    c0001669 <dlmalloc+0x26a>
c00015f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00015f5:	8d 04 c5 14 79 03 c0 	lea    eax,[eax*8-0x3ffc86ec]
c00015fc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00015ff:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001602:	39 ca                	cmp    edx,ecx
c0001604:	74 63                	je     c0001669 <dlmalloc+0x26a>
c0001606:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001609:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000160c:	83 e3 fc             	and    ebx,0xfffffffc
c000160f:	39 de                	cmp    esi,ebx
c0001611:	77 52                	ja     c0001665 <dlmalloc+0x266>
c0001613:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001616:	89 df                	mov    edi,ebx
c0001618:	01 d3                	add    ebx,edx
c000161a:	29 f7                	sub    edi,esi
c000161c:	83 ff 0f             	cmp    edi,0xf
c000161f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001622:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001625:	8d 42 08             	lea    eax,[edx+0x8]
c0001628:	77 09                	ja     c0001633 <dlmalloc+0x234>
c000162a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000162e:	e9 52 01 00 00       	jmp    c0001785 <dlmalloc+0x386>
c0001633:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001636:	83 ce 01             	or     esi,0x1
c0001639:	89 0d 1c 79 03 c0    	mov    DWORD PTR ds:0xc003791c,ecx
c000163f:	89 0d 20 79 03 c0    	mov    DWORD PTR ds:0xc0037920,ecx
c0001645:	c7 41 08 14 79 03 c0 	mov    DWORD PTR [ecx+0x8],0xc0037914
c000164c:	c7 41 0c 14 79 03 c0 	mov    DWORD PTR [ecx+0xc],0xc0037914
c0001653:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001656:	89 fa                	mov    edx,edi
c0001658:	83 ca 01             	or     edx,0x1
c000165b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000165e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001660:	e9 20 01 00 00       	jmp    c0001785 <dlmalloc+0x386>
c0001665:	89 c2                	mov    edx,eax
c0001667:	eb 99                	jmp    c0001602 <dlmalloc+0x203>
c0001669:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000166d:	b8 01 00 00 00       	mov    eax,0x1
c0001672:	41                   	inc    ecx
c0001673:	8d 14 cd 0c 79 03 c0 	lea    edx,[ecx*8-0x3ffc86f4]
c000167a:	89 cb                	mov    ebx,ecx
c000167c:	c1 eb 05             	shr    ebx,0x5
c000167f:	8b 3c 9d 14 7c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc83ec]
c0001686:	d3 e0                	shl    eax,cl
c0001688:	39 f8                	cmp    eax,edi
c000168a:	77 04                	ja     c0001690 <dlmalloc+0x291>
c000168c:	85 c0                	test   eax,eax
c000168e:	75 26                	jne    c00016b6 <dlmalloc+0x2b7>
c0001690:	43                   	inc    ebx
c0001691:	83 fb 02             	cmp    ebx,0x2
c0001694:	0f 87 a6 00 00 00    	ja     c0001740 <dlmalloc+0x341>
c000169a:	8b 3c 9d 14 7c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc83ec]
c00016a1:	85 ff                	test   edi,edi
c00016a3:	74 eb                	je     c0001690 <dlmalloc+0x291>
c00016a5:	89 d8                	mov    eax,ebx
c00016a7:	c1 e0 06             	shl    eax,0x6
c00016aa:	8d 14 85 0c 79 03 c0 	lea    edx,[eax*4-0x3ffc86f4]
c00016b1:	b8 01 00 00 00       	mov    eax,0x1
c00016b6:	85 f8                	test   eax,edi
c00016b8:	75 07                	jne    c00016c1 <dlmalloc+0x2c2>
c00016ba:	83 c2 08             	add    edx,0x8
c00016bd:	01 c0                	add    eax,eax
c00016bf:	eb f5                	jmp    c00016b6 <dlmalloc+0x2b7>
c00016c1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00016c4:	39 ca                	cmp    edx,ecx
c00016c6:	75 14                	jne    c00016dc <dlmalloc+0x2dd>
c00016c8:	89 c1                	mov    ecx,eax
c00016ca:	83 c2 08             	add    edx,0x8
c00016cd:	f7 d1                	not    ecx
c00016cf:	01 c0                	add    eax,eax
c00016d1:	21 cf                	and    edi,ecx
c00016d3:	89 3c 9d 14 7c 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc83ec],edi
c00016da:	eb ac                	jmp    c0001688 <dlmalloc+0x289>
c00016dc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00016df:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00016e2:	83 e0 fc             	and    eax,0xfffffffc
c00016e5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00016e8:	89 c3                	mov    ebx,eax
c00016ea:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00016ed:	8d 14 01             	lea    edx,[ecx+eax*1]
c00016f0:	29 f3                	sub    ebx,esi
c00016f2:	8d 41 08             	lea    eax,[ecx+0x8]
c00016f5:	83 fb 0f             	cmp    ebx,0xf
c00016f8:	77 09                	ja     c0001703 <dlmalloc+0x304>
c00016fa:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00016fe:	e9 82 00 00 00       	jmp    c0001785 <dlmalloc+0x386>
c0001703:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001706:	81 fe ff 00 00 00    	cmp    esi,0xff
c000170c:	89 3d 1c 79 03 c0    	mov    DWORD PTR ds:0xc003791c,edi
c0001712:	89 3d 20 79 03 c0    	mov    DWORD PTR ds:0xc0037920,edi
c0001718:	c7 47 08 14 79 03 c0 	mov    DWORD PTR [edi+0x8],0xc0037914
c000171f:	c7 47 0c 14 79 03 c0 	mov    DWORD PTR [edi+0xc],0xc0037914
c0001726:	77 06                	ja     c000172e <dlmalloc+0x32f>
c0001728:	89 3d 10 79 03 c0    	mov    DWORD PTR ds:0xc0037910,edi
c000172e:	83 ce 01             	or     esi,0x1
c0001731:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001734:	89 d9                	mov    ecx,ebx
c0001736:	83 c9 01             	or     ecx,0x1
c0001739:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000173c:	89 1a                	mov    DWORD PTR [edx],ebx
c000173e:	eb 45                	jmp    c0001785 <dlmalloc+0x386>
c0001740:	a1 0c 79 03 c0       	mov    eax,ds:0xc003790c
c0001745:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001748:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000174b:	83 e2 fc             	and    edx,0xfffffffc
c000174e:	39 d1                	cmp    ecx,edx
c0001750:	77 1e                	ja     c0001770 <dlmalloc+0x371>
c0001752:	89 f3                	mov    ebx,esi
c0001754:	29 f2                	sub    edx,esi
c0001756:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001759:	83 cb 01             	or     ebx,0x1
c000175c:	89 0d 0c 79 03 c0    	mov    DWORD PTR ds:0xc003790c,ecx
c0001762:	83 ca 01             	or     edx,0x1
c0001765:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001768:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000176b:	e9 2d fd ff ff       	jmp    c000149d <dlmalloc+0x9e>
c0001770:	83 c4 1c             	add    esp,0x1c
c0001773:	89 f0                	mov    eax,esi
c0001775:	5b                   	pop    ebx
c0001776:	ba e0 78 03 c0       	mov    edx,0xc00378e0
c000177b:	5e                   	pop    esi
c000177c:	5f                   	pop    edi
c000177d:	5d                   	pop    ebp
c000177e:	e9 ce f8 ff ff       	jmp    c0001051 <sYSMALLOc>
c0001783:	31 c0                	xor    eax,eax
c0001785:	83 c4 1c             	add    esp,0x1c
c0001788:	5b                   	pop    ebx
c0001789:	5e                   	pop    esi
c000178a:	5f                   	pop    edi
c000178b:	5d                   	pop    ebp
c000178c:	c3                   	ret    

c000178d <iALLOc>:
c000178d:	55                   	push   ebp
c000178e:	89 c5                	mov    ebp,eax
c0001790:	57                   	push   edi
c0001791:	56                   	push   esi
c0001792:	53                   	push   ebx
c0001793:	83 ec 2c             	sub    esp,0x2c
c0001796:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000179a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000179e:	83 3d e0 78 03 c0 00 	cmp    DWORD PTR ds:0xc00378e0,0x0
c00017a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017a9:	75 12                	jne    c00017bd <iALLOc+0x30>
c00017ab:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00017af:	b8 e0 78 03 c0       	mov    eax,0xc00378e0
c00017b4:	e8 9d f6 ff ff       	call   c0000e56 <malloc_consolidate>
c00017b9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00017bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00017c2:	74 12                	je     c00017d6 <iALLOc+0x49>
c00017c4:	85 ed                	test   ebp,ebp
c00017c6:	0f 84 64 01 00 00    	je     c0001930 <iALLOc+0x1a3>
c00017cc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00017d4:	eb 33                	jmp    c0001809 <iALLOc+0x7c>
c00017d6:	85 ed                	test   ebp,ebp
c00017d8:	75 14                	jne    c00017ee <iALLOc+0x61>
c00017da:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00017e2:	83 c4 2c             	add    esp,0x2c
c00017e5:	5b                   	pop    ebx
c00017e6:	5e                   	pop    esi
c00017e7:	5f                   	pop    edi
c00017e8:	5d                   	pop    ebp
c00017e9:	e9 11 fc ff ff       	jmp    c00013ff <dlmalloc>
c00017ee:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00017f6:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00017fd:	83 f8 0f             	cmp    eax,0xf
c0001800:	76 07                	jbe    c0001809 <iALLOc+0x7c>
c0001802:	83 e0 f8             	and    eax,0xfffffff8
c0001805:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001809:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000180e:	75 09                	jne    c0001819 <iALLOc+0x8c>
c0001810:	89 d0                	mov    eax,edx
c0001812:	31 f6                	xor    esi,esi
c0001814:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001817:	eb 3b                	jmp    c0001854 <iALLOc+0xc7>
c0001819:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001821:	8b 02                	mov    eax,DWORD PTR [edx]
c0001823:	83 c0 0b             	add    eax,0xb
c0001826:	83 f8 0f             	cmp    eax,0xf
c0001829:	76 07                	jbe    c0001832 <iALLOc+0xa5>
c000182b:	83 e0 f8             	and    eax,0xfffffff8
c000182e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001832:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001836:	0f af f5             	imul   esi,ebp
c0001839:	eb 25                	jmp    c0001860 <iALLOc+0xd3>
c000183b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000183d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001840:	bb 10 00 00 00       	mov    ebx,0x10
c0001845:	83 f9 0f             	cmp    ecx,0xf
c0001848:	76 05                	jbe    c000184f <iALLOc+0xc2>
c000184a:	83 e1 f8             	and    ecx,0xfffffff8
c000184d:	89 cb                	mov    ebx,ecx
c000184f:	01 de                	add    esi,ebx
c0001851:	83 c0 04             	add    eax,0x4
c0001854:	39 c7                	cmp    edi,eax
c0001856:	75 e3                	jne    c000183b <iALLOc+0xae>
c0001858:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001860:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001864:	83 ec 0c             	sub    esp,0xc
c0001867:	8b 1d 34 7c 03 c0    	mov    ebx,DWORD PTR ds:0xc0037c34
c000186d:	c7 05 34 7c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037c34,0x0
c0001877:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000187b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000187f:	50                   	push   eax
c0001880:	e8 7a fb ff ff       	call   c00013ff <dlmalloc>
c0001885:	83 c4 10             	add    esp,0x10
c0001888:	89 1d 34 7c 03 c0    	mov    DWORD PTR ds:0xc0037c34,ebx
c000188e:	85 c0                	test   eax,eax
c0001890:	0f 84 92 00 00 00    	je     c0001928 <iALLOc+0x19b>
c0001896:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001899:	8d 78 f8             	lea    edi,[eax-0x8]
c000189c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00018a0:	83 e3 fc             	and    ebx,0xfffffffc
c00018a3:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00018a8:	74 1e                	je     c00018c8 <iALLOc+0x13b>
c00018aa:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00018ae:	89 d9                	mov    ecx,ebx
c00018b0:	52                   	push   edx
c00018b1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00018b5:	83 e9 04             	sub    ecx,0x4
c00018b8:	51                   	push   ecx
c00018b9:	6a 00                	push   0x0
c00018bb:	50                   	push   eax
c00018bc:	e8 2f ec ff ff       	call   c00004f0 <memset>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00018c8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00018cd:	75 14                	jne    c00018e3 <iALLOc+0x156>
c00018cf:	8d 04 37             	lea    eax,[edi+esi*1]
c00018d2:	29 f3                	sub    ebx,esi
c00018d4:	8d 48 08             	lea    ecx,[eax+0x8]
c00018d7:	83 cb 01             	or     ebx,0x1
c00018da:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00018dd:	89 f3                	mov    ebx,esi
c00018df:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00018e3:	31 c0                	xor    eax,eax
c00018e5:	4d                   	dec    ebp
c00018e6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018ea:	8d 4f 08             	lea    ecx,[edi+0x8]
c00018ed:	39 c5                	cmp    ebp,eax
c00018ef:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00018f2:	74 2c                	je     c0001920 <iALLOc+0x193>
c00018f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00018f8:	85 c9                	test   ecx,ecx
c00018fa:	75 15                	jne    c0001911 <iALLOc+0x184>
c00018fc:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00018ff:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001902:	b9 10 00 00 00       	mov    ecx,0x10
c0001907:	83 fe 0f             	cmp    esi,0xf
c000190a:	76 05                	jbe    c0001911 <iALLOc+0x184>
c000190c:	83 e6 f8             	and    esi,0xfffffff8
c000190f:	89 f1                	mov    ecx,esi
c0001911:	89 ce                	mov    esi,ecx
c0001913:	29 cb                	sub    ebx,ecx
c0001915:	83 ce 01             	or     esi,0x1
c0001918:	40                   	inc    eax
c0001919:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000191c:	01 cf                	add    edi,ecx
c000191e:	eb c6                	jmp    c00018e6 <iALLOc+0x159>
c0001920:	83 cb 01             	or     ebx,0x1
c0001923:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001926:	eb 08                	jmp    c0001930 <iALLOc+0x1a3>
c0001928:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001930:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001934:	83 c4 2c             	add    esp,0x2c
c0001937:	5b                   	pop    ebx
c0001938:	5e                   	pop    esi
c0001939:	5f                   	pop    edi
c000193a:	5d                   	pop    ebp
c000193b:	c3                   	ret    

c000193c <dlrealloc>:
c000193c:	55                   	push   ebp
c000193d:	57                   	push   edi
c000193e:	56                   	push   esi
c000193f:	53                   	push   ebx
c0001940:	83 ec 1c             	sub    esp,0x1c
c0001943:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001947:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000194b:	85 db                	test   ebx,ebx
c000194d:	75 10                	jne    c000195f <dlrealloc+0x23>
c000194f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001953:	83 c4 1c             	add    esp,0x1c
c0001956:	5b                   	pop    ebx
c0001957:	5e                   	pop    esi
c0001958:	5f                   	pop    edi
c0001959:	5d                   	pop    ebp
c000195a:	e9 a0 fa ff ff       	jmp    c00013ff <dlmalloc>
c000195f:	83 f8 df             	cmp    eax,0xffffffdf
c0001962:	0f 87 a6 01 00 00    	ja     c0001b0e <dlrealloc+0x1d2>
c0001968:	83 c0 0b             	add    eax,0xb
c000196b:	bd 10 00 00 00       	mov    ebp,0x10
c0001970:	83 f8 0f             	cmp    eax,0xf
c0001973:	76 05                	jbe    c000197a <dlrealloc+0x3e>
c0001975:	83 e0 f8             	and    eax,0xfffffff8
c0001978:	89 c5                	mov    ebp,eax
c000197a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000197d:	89 ce                	mov    esi,ecx
c000197f:	83 e6 fc             	and    esi,0xfffffffc
c0001982:	f6 c1 02             	test   cl,0x2
c0001985:	0f 85 4e 01 00 00    	jne    c0001ad9 <dlrealloc+0x19d>
c000198b:	8d 7b f8             	lea    edi,[ebx-0x8]
c000198e:	39 f5                	cmp    ebp,esi
c0001990:	0f 86 04 01 00 00    	jbe    c0001a9a <dlrealloc+0x15e>
c0001996:	8d 14 37             	lea    edx,[edi+esi*1]
c0001999:	39 15 0c 79 03 c0    	cmp    DWORD PTR ds:0xc003790c,edx
c000199f:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00019a2:	75 33                	jne    c00019d7 <dlrealloc+0x9b>
c00019a4:	83 e0 fc             	and    eax,0xfffffffc
c00019a7:	01 f0                	add    eax,esi
c00019a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00019ad:	8d 45 10             	lea    eax,[ebp+0x10]
c00019b0:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00019b4:	77 49                	ja     c00019ff <dlrealloc+0xc3>
c00019b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00019ba:	83 e1 01             	and    ecx,0x1
c00019bd:	01 ef                	add    edi,ebp
c00019bf:	09 e9                	or     ecx,ebp
c00019c1:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00019c4:	89 3d 0c 79 03 c0    	mov    DWORD PTR ds:0xc003790c,edi
c00019ca:	29 e8                	sub    eax,ebp
c00019cc:	83 c8 01             	or     eax,0x1
c00019cf:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00019d2:	e9 39 01 00 00       	jmp    c0001b10 <dlrealloc+0x1d4>
c00019d7:	89 c1                	mov    ecx,eax
c00019d9:	83 e1 fe             	and    ecx,0xfffffffe
c00019dc:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00019e1:	75 1c                	jne    c00019ff <dlrealloc+0xc3>
c00019e3:	83 e0 fc             	and    eax,0xfffffffc
c00019e6:	01 f0                	add    eax,esi
c00019e8:	39 c5                	cmp    ebp,eax
c00019ea:	77 13                	ja     c00019ff <dlrealloc+0xc3>
c00019ec:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00019ef:	89 c6                	mov    esi,eax
c00019f1:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00019f4:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00019f7:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00019fa:	e9 9b 00 00 00       	jmp    c0001a9a <dlrealloc+0x15e>
c00019ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001a03:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001a06:	83 ec 0c             	sub    esp,0xc
c0001a09:	50                   	push   eax
c0001a0a:	e8 f0 f9 ff ff       	call   c00013ff <dlmalloc>
c0001a0f:	83 c4 10             	add    esp,0x10
c0001a12:	85 c0                	test   eax,eax
c0001a14:	0f 84 f4 00 00 00    	je     c0001b0e <dlrealloc+0x1d2>
c0001a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001a1e:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001a21:	39 ca                	cmp    edx,ecx
c0001a23:	75 0a                	jne    c0001a2f <dlrealloc+0xf3>
c0001a25:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001a28:	83 e0 fc             	and    eax,0xfffffffc
c0001a2b:	01 c6                	add    esi,eax
c0001a2d:	eb 6b                	jmp    c0001a9a <dlrealloc+0x15e>
c0001a2f:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001a32:	83 f9 27             	cmp    ecx,0x27
c0001a35:	76 08                	jbe    c0001a3f <dlrealloc+0x103>
c0001a37:	89 de                	mov    esi,ebx
c0001a39:	89 c7                	mov    edi,eax
c0001a3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a3d:	eb 43                	jmp    c0001a82 <dlrealloc+0x146>
c0001a3f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001a41:	83 f9 13             	cmp    ecx,0x13
c0001a44:	89 10                	mov    DWORD PTR [eax],edx
c0001a46:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001a49:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001a4c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001a4f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001a52:	76 2e                	jbe    c0001a82 <dlrealloc+0x146>
c0001a54:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001a57:	83 f9 1b             	cmp    ecx,0x1b
c0001a5a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001a5d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001a60:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001a63:	76 1d                	jbe    c0001a82 <dlrealloc+0x146>
c0001a65:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001a68:	83 f9 23             	cmp    ecx,0x23
c0001a6b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001a6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001a71:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001a74:	76 0c                	jbe    c0001a82 <dlrealloc+0x146>
c0001a76:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001a79:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001a7c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001a7f:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001a82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001a86:	83 ec 0c             	sub    esp,0xc
c0001a89:	53                   	push   ebx
c0001a8a:	e8 ae f4 ff ff       	call   c0000f3d <dlfree>
c0001a8f:	83 c4 10             	add    esp,0x10
c0001a92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001a96:	89 c3                	mov    ebx,eax
c0001a98:	eb 76                	jmp    c0001b10 <dlrealloc+0x1d4>
c0001a9a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001a9d:	8d 04 37             	lea    eax,[edi+esi*1]
c0001aa0:	89 f2                	mov    edx,esi
c0001aa2:	29 ea                	sub    edx,ebp
c0001aa4:	83 e1 01             	and    ecx,0x1
c0001aa7:	83 fa 0f             	cmp    edx,0xf
c0001aaa:	77 0b                	ja     c0001ab7 <dlrealloc+0x17b>
c0001aac:	09 f1                	or     ecx,esi
c0001aae:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c0001ab1:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001ab5:	eb 59                	jmp    c0001b10 <dlrealloc+0x1d4>
c0001ab7:	01 ef                	add    edi,ebp
c0001ab9:	83 ca 01             	or     edx,0x1
c0001abc:	09 cd                	or     ebp,ecx
c0001abe:	83 ec 0c             	sub    esp,0xc
c0001ac1:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c0001ac4:	83 c7 08             	add    edi,0x8
c0001ac7:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001aca:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001ace:	57                   	push   edi
c0001acf:	e8 69 f4 ff ff       	call   c0000f3d <dlfree>
c0001ad4:	83 c4 10             	add    esp,0x10
c0001ad7:	eb 37                	jmp    c0001b10 <dlrealloc+0x1d4>
c0001ad9:	8d 45 04             	lea    eax,[ebp+0x4]
c0001adc:	39 f0                	cmp    eax,esi
c0001ade:	76 30                	jbe    c0001b10 <dlrealloc+0x1d4>
c0001ae0:	83 ec 0c             	sub    esp,0xc
c0001ae3:	83 ed 07             	sub    ebp,0x7
c0001ae6:	55                   	push   ebp
c0001ae7:	e8 13 f9 ff ff       	call   c00013ff <dlmalloc>
c0001aec:	83 c4 10             	add    esp,0x10
c0001aef:	85 c0                	test   eax,eax
c0001af1:	89 c5                	mov    ebp,eax
c0001af3:	74 19                	je     c0001b0e <dlrealloc+0x1d2>
c0001af5:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001af8:	89 c7                	mov    edi,eax
c0001afa:	89 de                	mov    esi,ebx
c0001afc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001afe:	83 ec 0c             	sub    esp,0xc
c0001b01:	53                   	push   ebx
c0001b02:	89 eb                	mov    ebx,ebp
c0001b04:	e8 34 f4 ff ff       	call   c0000f3d <dlfree>
c0001b09:	83 c4 10             	add    esp,0x10
c0001b0c:	eb 02                	jmp    c0001b10 <dlrealloc+0x1d4>
c0001b0e:	31 db                	xor    ebx,ebx
c0001b10:	83 c4 1c             	add    esp,0x1c
c0001b13:	89 d8                	mov    eax,ebx
c0001b15:	5b                   	pop    ebx
c0001b16:	5e                   	pop    esi
c0001b17:	5f                   	pop    edi
c0001b18:	5d                   	pop    ebp
c0001b19:	c3                   	ret    

c0001b1a <dlmemalign>:
c0001b1a:	55                   	push   ebp
c0001b1b:	57                   	push   edi
c0001b1c:	56                   	push   esi
c0001b1d:	53                   	push   ebx
c0001b1e:	83 ec 0c             	sub    esp,0xc
c0001b21:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001b25:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001b29:	83 fa 08             	cmp    edx,0x8
c0001b2c:	77 10                	ja     c0001b3e <dlmemalign+0x24>
c0001b2e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001b32:	83 c4 0c             	add    esp,0xc
c0001b35:	5b                   	pop    ebx
c0001b36:	5e                   	pop    esi
c0001b37:	5f                   	pop    edi
c0001b38:	5d                   	pop    ebp
c0001b39:	e9 c1 f8 ff ff       	jmp    c00013ff <dlmalloc>
c0001b3e:	83 fa 0f             	cmp    edx,0xf
c0001b41:	bf 10 00 00 00       	mov    edi,0x10
c0001b46:	76 13                	jbe    c0001b5b <dlmemalign+0x41>
c0001b48:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001b4b:	85 d1                	test   ecx,edx
c0001b4d:	75 04                	jne    c0001b53 <dlmemalign+0x39>
c0001b4f:	89 d7                	mov    edi,edx
c0001b51:	eb 08                	jmp    c0001b5b <dlmemalign+0x41>
c0001b53:	39 d7                	cmp    edi,edx
c0001b55:	73 04                	jae    c0001b5b <dlmemalign+0x41>
c0001b57:	01 ff                	add    edi,edi
c0001b59:	eb f8                	jmp    c0001b53 <dlmemalign+0x39>
c0001b5b:	83 f8 df             	cmp    eax,0xffffffdf
c0001b5e:	76 07                	jbe    c0001b67 <dlmemalign+0x4d>
c0001b60:	31 c0                	xor    eax,eax
c0001b62:	e9 ce 00 00 00       	jmp    c0001c35 <dlmemalign+0x11b>
c0001b67:	83 c0 0b             	add    eax,0xb
c0001b6a:	bd 10 00 00 00       	mov    ebp,0x10
c0001b6f:	83 f8 0f             	cmp    eax,0xf
c0001b72:	76 05                	jbe    c0001b79 <dlmemalign+0x5f>
c0001b74:	83 e0 f8             	and    eax,0xfffffff8
c0001b77:	89 c5                	mov    ebp,eax
c0001b79:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001b7d:	83 ec 0c             	sub    esp,0xc
c0001b80:	50                   	push   eax
c0001b81:	e8 79 f8 ff ff       	call   c00013ff <dlmalloc>
c0001b86:	83 c4 10             	add    esp,0x10
c0001b89:	85 c0                	test   eax,eax
c0001b8b:	89 c1                	mov    ecx,eax
c0001b8d:	74 d1                	je     c0001b60 <dlmemalign+0x46>
c0001b8f:	8d 70 f8             	lea    esi,[eax-0x8]
c0001b92:	31 d2                	xor    edx,edx
c0001b94:	f7 f7                	div    edi
c0001b96:	85 d2                	test   edx,edx
c0001b98:	74 62                	je     c0001bfc <dlmemalign+0xe2>
c0001b9a:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001b9e:	89 f8                	mov    eax,edi
c0001ba0:	f7 d8                	neg    eax
c0001ba2:	21 c3                	and    ebx,eax
c0001ba4:	83 eb 08             	sub    ebx,0x8
c0001ba7:	89 d8                	mov    eax,ebx
c0001ba9:	29 f0                	sub    eax,esi
c0001bab:	83 f8 0f             	cmp    eax,0xf
c0001bae:	77 02                	ja     c0001bb2 <dlmemalign+0x98>
c0001bb0:	01 fb                	add    ebx,edi
c0001bb2:	89 d8                	mov    eax,ebx
c0001bb4:	29 f0                	sub    eax,esi
c0001bb6:	89 c6                	mov    esi,eax
c0001bb8:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001bbb:	89 c2                	mov    edx,eax
c0001bbd:	83 e2 fc             	and    edx,0xfffffffc
c0001bc0:	29 f2                	sub    edx,esi
c0001bc2:	a8 02                	test   al,0x2
c0001bc4:	74 10                	je     c0001bd6 <dlmemalign+0xbc>
c0001bc6:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001bc9:	83 ca 02             	or     edx,0x2
c0001bcc:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001bcf:	8d 43 08             	lea    eax,[ebx+0x8]
c0001bd2:	89 33                	mov    DWORD PTR [ebx],esi
c0001bd4:	eb 5f                	jmp    c0001c35 <dlmemalign+0x11b>
c0001bd6:	89 d0                	mov    eax,edx
c0001bd8:	83 ec 0c             	sub    esp,0xc
c0001bdb:	83 c8 01             	or     eax,0x1
c0001bde:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001be1:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001be6:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001be9:	83 e0 01             	and    eax,0x1
c0001bec:	09 f0                	or     eax,esi
c0001bee:	89 de                	mov    esi,ebx
c0001bf0:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001bf3:	51                   	push   ecx
c0001bf4:	e8 44 f3 ff ff       	call   c0000f3d <dlfree>
c0001bf9:	83 c4 10             	add    esp,0x10
c0001bfc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001bff:	a8 02                	test   al,0x2
c0001c01:	75 2f                	jne    c0001c32 <dlmemalign+0x118>
c0001c03:	8d 55 10             	lea    edx,[ebp+0x10]
c0001c06:	83 e0 fc             	and    eax,0xfffffffc
c0001c09:	39 c2                	cmp    edx,eax
c0001c0b:	73 25                	jae    c0001c32 <dlmemalign+0x118>
c0001c0d:	29 e8                	sub    eax,ebp
c0001c0f:	83 ec 0c             	sub    esp,0xc
c0001c12:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001c15:	83 c8 01             	or     eax,0x1
c0001c18:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001c1b:	83 c2 08             	add    edx,0x8
c0001c1e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001c21:	83 e0 01             	and    eax,0x1
c0001c24:	09 c5                	or     ebp,eax
c0001c26:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001c29:	52                   	push   edx
c0001c2a:	e8 0e f3 ff ff       	call   c0000f3d <dlfree>
c0001c2f:	83 c4 10             	add    esp,0x10
c0001c32:	8d 46 08             	lea    eax,[esi+0x8]
c0001c35:	83 c4 0c             	add    esp,0xc
c0001c38:	5b                   	pop    ebx
c0001c39:	5e                   	pop    esi
c0001c3a:	5f                   	pop    edi
c0001c3b:	5d                   	pop    ebp
c0001c3c:	c3                   	ret    

c0001c3d <dlcalloc>:
c0001c3d:	53                   	push   ebx
c0001c3e:	83 ec 14             	sub    esp,0x14
c0001c41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001c45:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001c4a:	50                   	push   eax
c0001c4b:	e8 af f7 ff ff       	call   c00013ff <dlmalloc>
c0001c50:	83 c4 10             	add    esp,0x10
c0001c53:	85 c0                	test   eax,eax
c0001c55:	89 c3                	mov    ebx,eax
c0001c57:	74 6e                	je     c0001cc7 <dlcalloc+0x8a>
c0001c59:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001c5c:	a8 02                	test   al,0x2
c0001c5e:	75 67                	jne    c0001cc7 <dlcalloc+0x8a>
c0001c60:	83 e0 fc             	and    eax,0xfffffffc
c0001c63:	83 e8 04             	sub    eax,0x4
c0001c66:	83 f8 27             	cmp    eax,0x27
c0001c69:	76 0f                	jbe    c0001c7a <dlcalloc+0x3d>
c0001c6b:	52                   	push   edx
c0001c6c:	50                   	push   eax
c0001c6d:	6a 00                	push   0x0
c0001c6f:	53                   	push   ebx
c0001c70:	e8 7b e8 ff ff       	call   c00004f0 <memset>
c0001c75:	83 c4 10             	add    esp,0x10
c0001c78:	eb 4d                	jmp    c0001cc7 <dlcalloc+0x8a>
c0001c7a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001c80:	83 f8 13             	cmp    eax,0x13
c0001c83:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001c8a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001c91:	76 34                	jbe    c0001cc7 <dlcalloc+0x8a>
c0001c93:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001c9a:	83 f8 1b             	cmp    eax,0x1b
c0001c9d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001ca4:	76 21                	jbe    c0001cc7 <dlcalloc+0x8a>
c0001ca6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001cad:	83 f8 23             	cmp    eax,0x23
c0001cb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001cb7:	76 0e                	jbe    c0001cc7 <dlcalloc+0x8a>
c0001cb9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001cc0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001cc7:	83 c4 08             	add    esp,0x8
c0001cca:	89 d8                	mov    eax,ebx
c0001ccc:	5b                   	pop    ebx
c0001ccd:	c3                   	ret    

c0001cce <dlcfree>:
c0001cce:	e9 6a f2 ff ff       	jmp    c0000f3d <dlfree>

c0001cd3 <dlindependent_calloc>:
c0001cd3:	83 ec 28             	sub    esp,0x28
c0001cd6:	b9 03 00 00 00       	mov    ecx,0x3
c0001cdb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001cdf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001ce3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001ce7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001ceb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001cef:	e8 99 fa ff ff       	call   c000178d <iALLOc>
c0001cf4:	83 c4 2c             	add    esp,0x2c
c0001cf7:	c3                   	ret    

c0001cf8 <dlindependent_comalloc>:
c0001cf8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001cfc:	31 c9                	xor    ecx,ecx
c0001cfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001d02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001d06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001d0a:	e9 7e fa ff ff       	jmp    c000178d <iALLOc>

c0001d0f <dlvalloc>:
c0001d0f:	83 ec 0c             	sub    esp,0xc
c0001d12:	83 3d e0 78 03 c0 00 	cmp    DWORD PTR ds:0xc00378e0,0x0
c0001d19:	75 0a                	jne    c0001d25 <dlvalloc+0x16>
c0001d1b:	b8 e0 78 03 c0       	mov    eax,0xc00378e0
c0001d20:	e8 31 f1 ff ff       	call   c0000e56 <malloc_consolidate>
c0001d25:	50                   	push   eax
c0001d26:	50                   	push   eax
c0001d27:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001d2b:	ff 35 3c 7c 03 c0    	push   DWORD PTR ds:0xc0037c3c
c0001d31:	e8 e4 fd ff ff       	call   c0001b1a <dlmemalign>
c0001d36:	83 c4 1c             	add    esp,0x1c
c0001d39:	c3                   	ret    

c0001d3a <dlpvalloc>:
c0001d3a:	83 ec 0c             	sub    esp,0xc
c0001d3d:	83 3d e0 78 03 c0 00 	cmp    DWORD PTR ds:0xc00378e0,0x0
c0001d44:	75 0a                	jne    c0001d50 <dlpvalloc+0x16>
c0001d46:	b8 e0 78 03 c0       	mov    eax,0xc00378e0
c0001d4b:	e8 06 f1 ff ff       	call   c0000e56 <malloc_consolidate>
c0001d50:	52                   	push   edx
c0001d51:	a1 3c 7c 03 c0       	mov    eax,ds:0xc0037c3c
c0001d56:	52                   	push   edx
c0001d57:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001d5b:	89 c1                	mov    ecx,eax
c0001d5d:	f7 d9                	neg    ecx
c0001d5f:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001d63:	21 ca                	and    edx,ecx
c0001d65:	52                   	push   edx
c0001d66:	50                   	push   eax
c0001d67:	e8 ae fd ff ff       	call   c0001b1a <dlmemalign>
c0001d6c:	83 c4 1c             	add    esp,0x1c
c0001d6f:	c3                   	ret    

c0001d70 <dlmalloc_trim>:
c0001d70:	b8 e0 78 03 c0       	mov    eax,0xc00378e0
c0001d75:	e8 dc f0 ff ff       	call   c0000e56 <malloc_consolidate>
c0001d7a:	31 c0                	xor    eax,eax
c0001d7c:	c3                   	ret    

c0001d7d <dlmalloc_usable_size>:
c0001d7d:	53                   	push   ebx
c0001d7e:	31 c0                	xor    eax,eax
c0001d80:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001d84:	85 c9                	test   ecx,ecx
c0001d86:	74 24                	je     c0001dac <dlmalloc_usable_size+0x2f>
c0001d88:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001d8b:	f6 c2 02             	test   dl,0x2
c0001d8e:	74 08                	je     c0001d98 <dlmalloc_usable_size+0x1b>
c0001d90:	83 e2 fc             	and    edx,0xfffffffc
c0001d93:	8d 42 f8             	lea    eax,[edx-0x8]
c0001d96:	eb 14                	jmp    c0001dac <dlmalloc_usable_size+0x2f>
c0001d98:	89 d3                	mov    ebx,edx
c0001d9a:	31 c0                	xor    eax,eax
c0001d9c:	83 e3 fe             	and    ebx,0xfffffffe
c0001d9f:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001da4:	74 06                	je     c0001dac <dlmalloc_usable_size+0x2f>
c0001da6:	83 e2 fc             	and    edx,0xfffffffc
c0001da9:	8d 42 fc             	lea    eax,[edx-0x4]
c0001dac:	5b                   	pop    ebx
c0001dad:	c3                   	ret    

c0001dae <dlmallinfo>:
c0001dae:	55                   	push   ebp
c0001daf:	57                   	push   edi
c0001db0:	56                   	push   esi
c0001db1:	53                   	push   ebx
c0001db2:	83 ec 08             	sub    esp,0x8
c0001db5:	83 3d 0c 79 03 c0 00 	cmp    DWORD PTR ds:0xc003790c,0x0
c0001dbc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001dc0:	75 0a                	jne    c0001dcc <dlmallinfo+0x1e>
c0001dc2:	b8 e0 78 03 c0       	mov    eax,0xc00378e0
c0001dc7:	e8 8a f0 ff ff       	call   c0000e56 <malloc_consolidate>
c0001dcc:	a1 0c 79 03 c0       	mov    eax,ds:0xc003790c
c0001dd1:	31 ed                	xor    ebp,ebp
c0001dd3:	31 c9                	xor    ecx,ecx
c0001dd5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001dd8:	83 e0 fc             	and    eax,0xfffffffc
c0001ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ddf:	31 c0                	xor    eax,eax
c0001de1:	8b 14 85 e4 78 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc871c]
c0001de8:	85 d2                	test   edx,edx
c0001dea:	74 0e                	je     c0001dfa <dlmallinfo+0x4c>
c0001dec:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001def:	45                   	inc    ebp
c0001df0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001df3:	83 e6 fc             	and    esi,0xfffffffc
c0001df6:	01 f1                	add    ecx,esi
c0001df8:	eb ee                	jmp    c0001de8 <dlmallinfo+0x3a>
c0001dfa:	40                   	inc    eax
c0001dfb:	83 f8 0a             	cmp    eax,0xa
c0001dfe:	75 e1                	jne    c0001de1 <dlmallinfo+0x33>
c0001e00:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001e07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001e0b:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001e0e:	b8 14 79 03 c0       	mov    eax,0xc0037914
c0001e13:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001e16:	39 f0                	cmp    eax,esi
c0001e18:	74 10                	je     c0001e2a <dlmallinfo+0x7c>
c0001e1a:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001e1d:	ff 04 24             	inc    DWORD PTR [esp]
c0001e20:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001e23:	83 e7 fc             	and    edi,0xfffffffc
c0001e26:	01 fa                	add    edx,edi
c0001e28:	eb ec                	jmp    c0001e16 <dlmallinfo+0x68>
c0001e2a:	83 c0 08             	add    eax,0x8
c0001e2d:	3d 0c 7c 03 c0       	cmp    eax,0xc0037c0c
c0001e32:	75 df                	jne    c0001e13 <dlmallinfo+0x65>
c0001e34:	8b 35 30 7c 03 c0    	mov    esi,DWORD PTR ds:0xc0037c30
c0001e3a:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001e3d:	a1 48 7c 03 c0       	mov    eax,ds:0xc0037c48
c0001e42:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001e45:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001e48:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001e4b:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001e4e:	8b 35 44 7c 03 c0    	mov    esi,DWORD PTR ds:0xc0037c44
c0001e54:	89 03                	mov    DWORD PTR [ebx],eax
c0001e56:	29 d0                	sub    eax,edx
c0001e58:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001e5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001e5f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001e62:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001e65:	8b 35 54 7c 03 c0    	mov    esi,DWORD PTR ds:0xc0037c54
c0001e6b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001e6e:	89 d8                	mov    eax,ebx
c0001e70:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001e73:	83 c4 08             	add    esp,0x8
c0001e76:	5b                   	pop    ebx
c0001e77:	5e                   	pop    esi
c0001e78:	5f                   	pop    edi
c0001e79:	5d                   	pop    ebp
c0001e7a:	c2 04 00             	ret    0x4

c0001e7d <dlmalloc_stats>:
c0001e7d:	83 ec 30             	sub    esp,0x30
c0001e80:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001e84:	50                   	push   eax
c0001e85:	e8 24 ff ff ff       	call   c0001dae <dlmallinfo>
c0001e8a:	83 c4 30             	add    esp,0x30
c0001e8d:	c3                   	ret    

c0001e8e <dlmallopt>:
c0001e8e:	56                   	push   esi
c0001e8f:	b8 e0 78 03 c0       	mov    eax,0xc00378e0
c0001e94:	53                   	push   ebx
c0001e95:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001e99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001e9d:	e8 b4 ef ff ff       	call   c0000e56 <malloc_consolidate>
c0001ea2:	8d 46 04             	lea    eax,[esi+0x4]
c0001ea5:	83 f8 05             	cmp    eax,0x5
c0001ea8:	77 5d                	ja     c0001f07 <dlmallopt+0x79>
c0001eaa:	ff 24 85 40 fd 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd02c0]
c0001eb1:	83 fb 50             	cmp    ebx,0x50
c0001eb4:	77 51                	ja     c0001f07 <dlmallopt+0x79>
c0001eb6:	85 db                	test   ebx,ebx
c0001eb8:	ba 08 00 00 00       	mov    edx,0x8
c0001ebd:	74 12                	je     c0001ed1 <dlmallopt+0x43>
c0001ebf:	83 c3 0b             	add    ebx,0xb
c0001ec2:	ba 10 00 00 00       	mov    edx,0x10
c0001ec7:	83 fb 0f             	cmp    ebx,0xf
c0001eca:	76 05                	jbe    c0001ed1 <dlmallopt+0x43>
c0001ecc:	89 da                	mov    edx,ebx
c0001ece:	83 e2 f8             	and    edx,0xfffffff8
c0001ed1:	a1 e0 78 03 c0       	mov    eax,ds:0xc00378e0
c0001ed6:	83 e0 03             	and    eax,0x3
c0001ed9:	09 d0                	or     eax,edx
c0001edb:	a3 e0 78 03 c0       	mov    ds:0xc00378e0,eax
c0001ee0:	eb 27                	jmp    c0001f09 <dlmallopt+0x7b>
c0001ee2:	89 1d 24 7c 03 c0    	mov    DWORD PTR ds:0xc0037c24,ebx
c0001ee8:	eb 16                	jmp    c0001f00 <dlmallopt+0x72>
c0001eea:	89 1d 28 7c 03 c0    	mov    DWORD PTR ds:0xc0037c28,ebx
c0001ef0:	eb 0e                	jmp    c0001f00 <dlmallopt+0x72>
c0001ef2:	89 1d 2c 7c 03 c0    	mov    DWORD PTR ds:0xc0037c2c,ebx
c0001ef8:	eb 06                	jmp    c0001f00 <dlmallopt+0x72>
c0001efa:	89 1d 34 7c 03 c0    	mov    DWORD PTR ds:0xc0037c34,ebx
c0001f00:	be 01 00 00 00       	mov    esi,0x1
c0001f05:	eb 02                	jmp    c0001f09 <dlmallopt+0x7b>
c0001f07:	31 f6                	xor    esi,esi
c0001f09:	5b                   	pop    ebx
c0001f0a:	89 f0                	mov    eax,esi
c0001f0c:	5e                   	pop    esi
c0001f0d:	c3                   	ret    
c0001f0e:	66 90                	xchg   ax,ax

c0001f10 <isblank>:
c0001f10:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001f15:	74 09                	je     c0001f20 <isblank+0x10>
c0001f17:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001f1c:	75 0a                	jne    c0001f28 <isblank+0x18>
c0001f1e:	66 90                	xchg   ax,ax
c0001f20:	b8 01 00 00 00       	mov    eax,0x1
c0001f25:	c3                   	ret    
c0001f26:	66 90                	xchg   ax,ax
c0001f28:	b8 00 00 00 00       	mov    eax,0x0
c0001f2d:	c3                   	ret    
c0001f2e:	66 90                	xchg   ax,ax

c0001f30 <iscntrl>:
c0001f30:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001f35:	7e 09                	jle    c0001f40 <iscntrl+0x10>
c0001f37:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001f3c:	75 0a                	jne    c0001f48 <iscntrl+0x18>
c0001f3e:	66 90                	xchg   ax,ax
c0001f40:	b8 01 00 00 00       	mov    eax,0x1
c0001f45:	c3                   	ret    
c0001f46:	66 90                	xchg   ax,ax
c0001f48:	b8 00 00 00 00       	mov    eax,0x0
c0001f4d:	c3                   	ret    
c0001f4e:	66 90                	xchg   ax,ax

c0001f50 <isdigit>:
c0001f50:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001f55:	7e 0d                	jle    c0001f64 <isdigit+0x14>
c0001f57:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001f5c:	7f 06                	jg     c0001f64 <isdigit+0x14>
c0001f5e:	b8 01 00 00 00       	mov    eax,0x1
c0001f63:	c3                   	ret    
c0001f64:	b8 00 00 00 00       	mov    eax,0x0
c0001f69:	c3                   	ret    
c0001f6a:	66 90                	xchg   ax,ax

c0001f6c <islower>:
c0001f6c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f71:	7e 0d                	jle    c0001f80 <islower+0x14>
c0001f73:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001f78:	7f 06                	jg     c0001f80 <islower+0x14>
c0001f7a:	b8 01 00 00 00       	mov    eax,0x1
c0001f7f:	c3                   	ret    
c0001f80:	b8 00 00 00 00       	mov    eax,0x0
c0001f85:	c3                   	ret    
c0001f86:	66 90                	xchg   ax,ax

c0001f88 <isspace>:
c0001f88:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001f8d:	7c 19                	jl     c0001fa8 <isspace+0x20>
c0001f8f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001f94:	7e 0a                	jle    c0001fa0 <isspace+0x18>
c0001f96:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001f9b:	75 0b                	jne    c0001fa8 <isspace+0x20>
c0001f9d:	8d 76 00             	lea    esi,[esi+0x0]
c0001fa0:	b8 01 00 00 00       	mov    eax,0x1
c0001fa5:	c3                   	ret    
c0001fa6:	66 90                	xchg   ax,ax
c0001fa8:	b8 00 00 00 00       	mov    eax,0x0
c0001fad:	c3                   	ret    
c0001fae:	66 90                	xchg   ax,ax

c0001fb0 <isupper>:
c0001fb0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001fb5:	7e 0d                	jle    c0001fc4 <isupper+0x14>
c0001fb7:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001fbc:	7f 06                	jg     c0001fc4 <isupper+0x14>
c0001fbe:	b8 01 00 00 00       	mov    eax,0x1
c0001fc3:	c3                   	ret    
c0001fc4:	b8 00 00 00 00       	mov    eax,0x0
c0001fc9:	c3                   	ret    
c0001fca:	66 90                	xchg   ax,ax

c0001fcc <isalpha>:
c0001fcc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001fd0:	e8 db ff ff ff       	call   c0001fb0 <isupper>
c0001fd5:	83 c4 04             	add    esp,0x4
c0001fd8:	85 c0                	test   eax,eax
c0001fda:	75 10                	jne    c0001fec <isalpha+0x20>
c0001fdc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001fe0:	e8 87 ff ff ff       	call   c0001f6c <islower>
c0001fe5:	83 c4 04             	add    esp,0x4
c0001fe8:	85 c0                	test   eax,eax
c0001fea:	74 08                	je     c0001ff4 <isalpha+0x28>
c0001fec:	b8 01 00 00 00       	mov    eax,0x1
c0001ff1:	c3                   	ret    
c0001ff2:	66 90                	xchg   ax,ax
c0001ff4:	b8 00 00 00 00       	mov    eax,0x0
c0001ff9:	c3                   	ret    
c0001ffa:	66 90                	xchg   ax,ax

c0001ffc <isalnum>:
c0001ffc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002000:	e8 c7 ff ff ff       	call   c0001fcc <isalpha>
c0002005:	83 c4 04             	add    esp,0x4
c0002008:	85 c0                	test   eax,eax
c000200a:	75 10                	jne    c000201c <isalnum+0x20>
c000200c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002010:	e8 3b ff ff ff       	call   c0001f50 <isdigit>
c0002015:	83 c4 04             	add    esp,0x4
c0002018:	85 c0                	test   eax,eax
c000201a:	74 08                	je     c0002024 <isalnum+0x28>
c000201c:	b8 01 00 00 00       	mov    eax,0x1
c0002021:	c3                   	ret    
c0002022:	66 90                	xchg   ax,ax
c0002024:	b8 00 00 00 00       	mov    eax,0x0
c0002029:	c3                   	ret    
c000202a:	66 90                	xchg   ax,ax

c000202c <ispunct>:
c000202c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002030:	e8 c7 ff ff ff       	call   c0001ffc <isalnum>
c0002035:	83 c4 04             	add    esp,0x4
c0002038:	85 c0                	test   eax,eax
c000203a:	75 28                	jne    c0002064 <ispunct+0x38>
c000203c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002040:	e8 43 ff ff ff       	call   c0001f88 <isspace>
c0002045:	83 c4 04             	add    esp,0x4
c0002048:	85 c0                	test   eax,eax
c000204a:	75 18                	jne    c0002064 <ispunct+0x38>
c000204c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002050:	e8 db fe ff ff       	call   c0001f30 <iscntrl>
c0002055:	83 c4 04             	add    esp,0x4
c0002058:	85 c0                	test   eax,eax
c000205a:	75 08                	jne    c0002064 <ispunct+0x38>
c000205c:	b8 01 00 00 00       	mov    eax,0x1
c0002061:	c3                   	ret    
c0002062:	66 90                	xchg   ax,ax
c0002064:	b8 00 00 00 00       	mov    eax,0x0
c0002069:	c3                   	ret    
c000206a:	66 90                	xchg   ax,ax

c000206c <isgraph>:
c000206c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002070:	e8 87 ff ff ff       	call   c0001ffc <isalnum>
c0002075:	83 c4 04             	add    esp,0x4
c0002078:	85 c0                	test   eax,eax
c000207a:	75 10                	jne    c000208c <isgraph+0x20>
c000207c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002080:	e8 a7 ff ff ff       	call   c000202c <ispunct>
c0002085:	83 c4 04             	add    esp,0x4
c0002088:	85 c0                	test   eax,eax
c000208a:	74 08                	je     c0002094 <isgraph+0x28>
c000208c:	b8 01 00 00 00       	mov    eax,0x1
c0002091:	c3                   	ret    
c0002092:	66 90                	xchg   ax,ax
c0002094:	b8 00 00 00 00       	mov    eax,0x0
c0002099:	c3                   	ret    
c000209a:	66 90                	xchg   ax,ax

c000209c <isprint>:
c000209c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00020a0:	e8 c7 ff ff ff       	call   c000206c <isgraph>
c00020a5:	83 c4 04             	add    esp,0x4
c00020a8:	85 c0                	test   eax,eax
c00020aa:	75 08                	jne    c00020b4 <isprint+0x18>
c00020ac:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c00020b1:	75 09                	jne    c00020bc <isprint+0x20>
c00020b3:	90                   	nop
c00020b4:	b8 01 00 00 00       	mov    eax,0x1
c00020b9:	c3                   	ret    
c00020ba:	66 90                	xchg   ax,ax
c00020bc:	b8 00 00 00 00       	mov    eax,0x0
c00020c1:	c3                   	ret    
c00020c2:	66 90                	xchg   ax,ax

c00020c4 <isxdigit>:
c00020c4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00020c8:	e8 83 fe ff ff       	call   c0001f50 <isdigit>
c00020cd:	83 c4 04             	add    esp,0x4
c00020d0:	85 c0                	test   eax,eax
c00020d2:	75 20                	jne    c00020f4 <isxdigit+0x30>
c00020d4:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c00020d9:	7e 09                	jle    c00020e4 <isxdigit+0x20>
c00020db:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c00020e0:	7e 12                	jle    c00020f4 <isxdigit+0x30>
c00020e2:	66 90                	xchg   ax,ax
c00020e4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c00020e9:	7e 11                	jle    c00020fc <isxdigit+0x38>
c00020eb:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c00020f0:	7f 0a                	jg     c00020fc <isxdigit+0x38>
c00020f2:	66 90                	xchg   ax,ax
c00020f4:	b8 01 00 00 00       	mov    eax,0x1
c00020f9:	c3                   	ret    
c00020fa:	66 90                	xchg   ax,ax
c00020fc:	b8 00 00 00 00       	mov    eax,0x0
c0002101:	c3                   	ret    

c0002102 <disk_status>:
c0002102:	31 c0                	xor    eax,eax
c0002104:	c3                   	ret    

c0002105 <disk_initialize>:
c0002105:	31 c0                	xor    eax,eax
c0002107:	c3                   	ret    

c0002108 <disk_read>:
c0002108:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000210d:	0f b6 04 85 20 13 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbece0]
c0002115:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002119:	e9 4e 6d 02 00       	jmp    c0028e6c <fatWrapperReadDisk>

c000211e <disk_write>:
c000211e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0002123:	0f b6 04 85 20 13 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbece0]
c000212b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000212f:	e9 78 6d 02 00       	jmp    c0028eac <fatWrapperWriteDisk>

c0002134 <disk_ioctl>:
c0002134:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002139:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000213d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0002142:	0f b6 04 85 20 13 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbece0]
c000214a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000214e:	e9 99 6d 02 00       	jmp    c0028eec <fatWrapperIoctl>

c0002153 <ld_word>:
c0002153:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002157:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000215a:	c1 e2 08             	shl    edx,0x8
c000215d:	09 d0                	or     eax,edx
c000215f:	c3                   	ret    

c0002160 <ld_dword>:
c0002160:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002164:	89 d1                	mov    ecx,edx
c0002166:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c000216a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000216d:	c1 e1 08             	shl    ecx,0x8
c0002170:	09 ca                	or     edx,ecx
c0002172:	c1 e2 08             	shl    edx,0x8
c0002175:	09 d0                	or     eax,edx
c0002177:	c3                   	ret    

c0002178 <st_word>:
c0002178:	66 89 10             	mov    WORD PTR [eax],dx
c000217b:	c3                   	ret    

c000217c <st_dword>:
c000217c:	89 10                	mov    DWORD PTR [eax],edx
c000217e:	c3                   	ret    

c000217f <mem_cpy>:
c000217f:	85 c9                	test   ecx,ecx
c0002181:	74 10                	je     c0002193 <mem_cpy+0x14>
c0002183:	57                   	push   edi
c0002184:	01 c1                	add    ecx,eax
c0002186:	56                   	push   esi
c0002187:	89 c7                	mov    edi,eax
c0002189:	89 d6                	mov    esi,edx
c000218b:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000218c:	39 f9                	cmp    ecx,edi
c000218e:	75 fb                	jne    c000218b <mem_cpy+0xc>
c0002190:	5e                   	pop    esi
c0002191:	5f                   	pop    edi
c0002192:	c3                   	ret    
c0002193:	c3                   	ret    

c0002194 <mem_set>:
c0002194:	01 c1                	add    ecx,eax
c0002196:	88 10                	mov    BYTE PTR [eax],dl
c0002198:	40                   	inc    eax
c0002199:	39 c8                	cmp    eax,ecx
c000219b:	75 f9                	jne    c0002196 <mem_set+0x2>
c000219d:	c3                   	ret    

c000219e <mem_cmp>:
c000219e:	57                   	push   edi
c000219f:	56                   	push   esi
c00021a0:	89 c6                	mov    esi,eax
c00021a2:	53                   	push   ebx
c00021a3:	46                   	inc    esi
c00021a4:	42                   	inc    edx
c00021a5:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c00021a9:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c00021ad:	29 fb                	sub    ebx,edi
c00021af:	89 cf                	mov    edi,ecx
c00021b1:	29 f7                	sub    edi,esi
c00021b3:	01 c7                	add    edi,eax
c00021b5:	74 04                	je     c00021bb <mem_cmp+0x1d>
c00021b7:	85 db                	test   ebx,ebx
c00021b9:	74 e8                	je     c00021a3 <mem_cmp+0x5>
c00021bb:	89 d8                	mov    eax,ebx
c00021bd:	5b                   	pop    ebx
c00021be:	5e                   	pop    esi
c00021bf:	5f                   	pop    edi
c00021c0:	c3                   	ret    

c00021c1 <chk_chr>:
c00021c1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00021c4:	85 c9                	test   ecx,ecx
c00021c6:	74 07                	je     c00021cf <chk_chr+0xe>
c00021c8:	39 d1                	cmp    ecx,edx
c00021ca:	74 03                	je     c00021cf <chk_chr+0xe>
c00021cc:	40                   	inc    eax
c00021cd:	eb f2                	jmp    c00021c1 <chk_chr>
c00021cf:	89 c8                	mov    eax,ecx
c00021d1:	c3                   	ret    

c00021d2 <dbc_1st>:
c00021d2:	31 c0                	xor    eax,eax
c00021d4:	c3                   	ret    

c00021d5 <dbc_2nd>:
c00021d5:	31 c0                	xor    eax,eax
c00021d7:	c3                   	ret    

c00021d8 <tchar2uni>:
c00021d8:	57                   	push   edi
c00021d9:	56                   	push   esi
c00021da:	53                   	push   ebx
c00021db:	8b 18                	mov    ebx,DWORD PTR [eax]
c00021dd:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00021df:	8d 73 01             	lea    esi,[ebx+0x1]
c00021e2:	f6 c1 80             	test   cl,0x80
c00021e5:	75 0a                	jne    c00021f1 <tchar2uni+0x19>
c00021e7:	0f b6 d1             	movzx  edx,cl
c00021ea:	89 f3                	mov    ebx,esi
c00021ec:	e9 b2 00 00 00       	jmp    c00022a3 <tchar2uni+0xcb>
c00021f1:	89 ca                	mov    edx,ecx
c00021f3:	81 e2 e0 00 00 00    	and    edx,0xe0
c00021f9:	81 fa c0 00 00 00    	cmp    edx,0xc0
c00021ff:	89 ca                	mov    edx,ecx
c0002201:	75 0a                	jne    c000220d <tchar2uni+0x35>
c0002203:	83 e2 1f             	and    edx,0x1f
c0002206:	b9 01 00 00 00       	mov    ecx,0x1
c000220b:	eb 37                	jmp    c0002244 <tchar2uni+0x6c>
c000220d:	81 e2 f0 00 00 00    	and    edx,0xf0
c0002213:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002219:	75 0c                	jne    c0002227 <tchar2uni+0x4f>
c000221b:	89 ca                	mov    edx,ecx
c000221d:	b9 02 00 00 00       	mov    ecx,0x2
c0002222:	83 e2 0f             	and    edx,0xf
c0002225:	eb 1d                	jmp    c0002244 <tchar2uni+0x6c>
c0002227:	89 cf                	mov    edi,ecx
c0002229:	83 ca ff             	or     edx,0xffffffff
c000222c:	81 e7 f8 00 00 00    	and    edi,0xf8
c0002232:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0002238:	75 70                	jne    c00022aa <tchar2uni+0xd2>
c000223a:	89 ca                	mov    edx,ecx
c000223c:	b9 03 00 00 00       	mov    ecx,0x3
c0002241:	83 e2 07             	and    edx,0x7
c0002244:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0002248:	46                   	inc    esi
c0002249:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c000224c:	89 cf                	mov    edi,ecx
c000224e:	81 e7 c0 00 00 00    	and    edi,0xc0
c0002254:	83 c7 80             	add    edi,0xffffff80
c0002257:	75 4e                	jne    c00022a7 <tchar2uni+0xcf>
c0002259:	c1 e2 06             	shl    edx,0x6
c000225c:	83 e1 3f             	and    ecx,0x3f
c000225f:	09 ca                	or     edx,ecx
c0002261:	39 de                	cmp    esi,ebx
c0002263:	75 e3                	jne    c0002248 <tchar2uni+0x70>
c0002265:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c000226b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002271:	76 34                	jbe    c00022a7 <tchar2uni+0xcf>
c0002273:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002276:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c000227c:	77 29                	ja     c00022a7 <tchar2uni+0xcf>
c000227e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002284:	76 1d                	jbe    c00022a3 <tchar2uni+0xcb>
c0002286:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c000228c:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002292:	c1 e1 06             	shl    ecx,0x6
c0002295:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c000229b:	09 ca                	or     edx,ecx
c000229d:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c00022a3:	89 18                	mov    DWORD PTR [eax],ebx
c00022a5:	eb 03                	jmp    c00022aa <tchar2uni+0xd2>
c00022a7:	83 ca ff             	or     edx,0xffffffff
c00022aa:	5b                   	pop    ebx
c00022ab:	89 d0                	mov    eax,edx
c00022ad:	5e                   	pop    esi
c00022ae:	5f                   	pop    edi
c00022af:	c3                   	ret    

c00022b0 <put_utf>:
c00022b0:	53                   	push   ebx
c00022b1:	83 f8 7f             	cmp    eax,0x7f
c00022b4:	89 c3                	mov    ebx,eax
c00022b6:	b0 00                	mov    al,0x0
c00022b8:	77 11                	ja     c00022cb <put_utf+0x1b>
c00022ba:	85 c9                	test   ecx,ecx
c00022bc:	0f 84 e5 00 00 00    	je     c00023a7 <put_utf+0xf7>
c00022c2:	88 1a                	mov    BYTE PTR [edx],bl
c00022c4:	b0 01                	mov    al,0x1
c00022c6:	e9 dc 00 00 00       	jmp    c00023a7 <put_utf+0xf7>
c00022cb:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00022d1:	77 23                	ja     c00022f6 <put_utf+0x46>
c00022d3:	83 f9 01             	cmp    ecx,0x1
c00022d6:	0f 86 cb 00 00 00    	jbe    c00023a7 <put_utf+0xf7>
c00022dc:	89 d8                	mov    eax,ebx
c00022de:	83 e3 3f             	and    ebx,0x3f
c00022e1:	c1 e8 06             	shr    eax,0x6
c00022e4:	83 cb 80             	or     ebx,0xffffff80
c00022e7:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00022ea:	83 c8 c0             	or     eax,0xffffffc0
c00022ed:	88 02                	mov    BYTE PTR [edx],al
c00022ef:	b0 02                	mov    al,0x2
c00022f1:	e9 b1 00 00 00       	jmp    c00023a7 <put_utf+0xf7>
c00022f6:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c00022fc:	77 40                	ja     c000233e <put_utf+0x8e>
c00022fe:	83 f9 02             	cmp    ecx,0x2
c0002301:	0f 86 a0 00 00 00    	jbe    c00023a7 <put_utf+0xf7>
c0002307:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c000230d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002313:	0f 86 8e 00 00 00    	jbe    c00023a7 <put_utf+0xf7>
c0002319:	89 d8                	mov    eax,ebx
c000231b:	c1 e8 0c             	shr    eax,0xc
c000231e:	83 c8 e0             	or     eax,0xffffffe0
c0002321:	88 02                	mov    BYTE PTR [edx],al
c0002323:	89 d8                	mov    eax,ebx
c0002325:	83 e3 3f             	and    ebx,0x3f
c0002328:	c1 e8 06             	shr    eax,0x6
c000232b:	83 cb 80             	or     ebx,0xffffff80
c000232e:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0002331:	83 e0 3f             	and    eax,0x3f
c0002334:	83 c8 80             	or     eax,0xffffff80
c0002337:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000233a:	b0 03                	mov    al,0x3
c000233c:	eb 69                	jmp    c00023a7 <put_utf+0xf7>
c000233e:	83 f9 03             	cmp    ecx,0x3
c0002341:	76 64                	jbe    c00023a7 <put_utf+0xf7>
c0002343:	89 d9                	mov    ecx,ebx
c0002345:	0f b7 c3             	movzx  eax,bx
c0002348:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000234e:	66 31 c9             	xor    cx,cx
c0002351:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002357:	c1 e9 06             	shr    ecx,0x6
c000235a:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0002360:	77 43                	ja     c00023a5 <put_utf+0xf5>
c0002362:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002368:	77 3b                	ja     c00023a5 <put_utf+0xf5>
c000236a:	09 cb                	or     ebx,ecx
c000236c:	81 c3 00 00 01 00    	add    ebx,0x10000
c0002372:	89 d8                	mov    eax,ebx
c0002374:	c1 e8 12             	shr    eax,0x12
c0002377:	83 c8 f0             	or     eax,0xfffffff0
c000237a:	88 02                	mov    BYTE PTR [edx],al
c000237c:	89 d8                	mov    eax,ebx
c000237e:	c1 e8 0c             	shr    eax,0xc
c0002381:	83 e0 3f             	and    eax,0x3f
c0002384:	83 c8 80             	or     eax,0xffffff80
c0002387:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000238a:	89 d8                	mov    eax,ebx
c000238c:	83 e3 3f             	and    ebx,0x3f
c000238f:	c1 e8 06             	shr    eax,0x6
c0002392:	83 cb 80             	or     ebx,0xffffff80
c0002395:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002398:	83 e0 3f             	and    eax,0x3f
c000239b:	83 c8 80             	or     eax,0xffffff80
c000239e:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c00023a1:	b0 04                	mov    al,0x4
c00023a3:	eb 02                	jmp    c00023a7 <put_utf+0xf7>
c00023a5:	31 c0                	xor    eax,eax
c00023a7:	5b                   	pop    ebx
c00023a8:	c3                   	ret    

c00023a9 <clst2sect>:
c00023a9:	8d 4a fe             	lea    ecx,[edx-0x2]
c00023ac:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00023af:	83 ea 02             	sub    edx,0x2
c00023b2:	39 ca                	cmp    edx,ecx
c00023b4:	76 0d                	jbe    c00023c3 <clst2sect+0x1a>
c00023b6:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00023ba:	0f af d1             	imul   edx,ecx
c00023bd:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c00023c0:	89 d0                	mov    eax,edx
c00023c2:	c3                   	ret    
c00023c3:	31 c0                	xor    eax,eax
c00023c5:	c3                   	ret    

c00023c6 <pick_lfn>:
c00023c6:	55                   	push   ebp
c00023c7:	57                   	push   edi
c00023c8:	89 c7                	mov    edi,eax
c00023ca:	56                   	push   esi
c00023cb:	53                   	push   ebx
c00023cc:	89 d3                	mov    ebx,edx
c00023ce:	8d 42 1a             	lea    eax,[edx+0x1a]
c00023d1:	e8 7d fd ff ff       	call   c0002153 <ld_word>
c00023d6:	66 85 c0             	test   ax,ax
c00023d9:	74 04                	je     c00023df <pick_lfn+0x19>
c00023db:	31 c0                	xor    eax,eax
c00023dd:	eb 62                	jmp    c0002441 <pick_lfn+0x7b>
c00023df:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00023e2:	bd 01 00 00 00       	mov    ebp,0x1
c00023e7:	31 f6                	xor    esi,esi
c00023e9:	83 e1 bf             	and    ecx,0xffffffbf
c00023ec:	49                   	dec    ecx
c00023ed:	6b c9 0d             	imul   ecx,ecx,0xd
c00023f0:	0f b6 86 a0 fe 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffd0160]
c00023f7:	01 d8                	add    eax,ebx
c00023f9:	e8 55 fd ff ff       	call   c0002153 <ld_word>
c00023fe:	66 85 ed             	test   bp,bp
c0002401:	74 11                	je     c0002414 <pick_lfn+0x4e>
c0002403:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002409:	77 d0                	ja     c00023db <pick_lfn+0x15>
c000240b:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c000240f:	89 c5                	mov    ebp,eax
c0002411:	41                   	inc    ecx
c0002412:	eb 0a                	jmp    c000241e <pick_lfn+0x58>
c0002414:	0f b7 c0             	movzx  eax,ax
c0002417:	3d ff ff 00 00       	cmp    eax,0xffff
c000241c:	75 bd                	jne    c00023db <pick_lfn+0x15>
c000241e:	46                   	inc    esi
c000241f:	83 fe 0d             	cmp    esi,0xd
c0002422:	75 cc                	jne    c00023f0 <pick_lfn+0x2a>
c0002424:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002427:	74 13                	je     c000243c <pick_lfn+0x76>
c0002429:	66 85 ed             	test   bp,bp
c000242c:	74 0e                	je     c000243c <pick_lfn+0x76>
c000242e:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002434:	77 a5                	ja     c00023db <pick_lfn+0x15>
c0002436:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c000243c:	b8 01 00 00 00       	mov    eax,0x1
c0002441:	5b                   	pop    ebx
c0002442:	5e                   	pop    esi
c0002443:	5f                   	pop    edi
c0002444:	5d                   	pop    ebp
c0002445:	c3                   	ret    

c0002446 <put_lfn>:
c0002446:	55                   	push   ebp
c0002447:	57                   	push   edi
c0002448:	89 d7                	mov    edi,edx
c000244a:	56                   	push   esi
c000244b:	31 f6                	xor    esi,esi
c000244d:	53                   	push   ebx
c000244e:	83 ec 0c             	sub    esp,0xc
c0002451:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002455:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002459:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000245f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002463:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002466:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002469:	31 d2                	xor    edx,edx
c000246b:	e8 08 fd ff ff       	call   c0002178 <st_word>
c0002470:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002477:	0f b6 d9             	movzx  ebx,cl
c000247a:	4b                   	dec    ebx
c000247b:	6b db 0d             	imul   ebx,ebx,0xd
c000247e:	0f b7 c6             	movzx  eax,si
c0002481:	3d ff ff 00 00       	cmp    eax,0xffff
c0002486:	74 09                	je     c0002491 <put_lfn+0x4b>
c0002488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000248c:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002490:	43                   	inc    ebx
c0002491:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002494:	0f b7 ee             	movzx  ebp,si
c0002497:	89 ea                	mov    edx,ebp
c0002499:	0f b6 80 a0 fe 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd0160]
c00024a0:	01 f8                	add    eax,edi
c00024a2:	e8 d1 fc ff ff       	call   c0002178 <st_word>
c00024a7:	85 ed                	test   ebp,ebp
c00024a9:	75 05                	jne    c00024b0 <put_lfn+0x6a>
c00024ab:	be ff ff 00 00       	mov    esi,0xffff
c00024b0:	ff 04 24             	inc    DWORD PTR [esp]
c00024b3:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c00024b7:	75 c5                	jne    c000247e <put_lfn+0x38>
c00024b9:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00024bf:	74 0b                	je     c00024cc <put_lfn+0x86>
c00024c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00024c5:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00024ca:	75 07                	jne    c00024d3 <put_lfn+0x8d>
c00024cc:	83 c9 40             	or     ecx,0x40
c00024cf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00024d3:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00024d7:	88 07                	mov    BYTE PTR [edi],al
c00024d9:	83 c4 0c             	add    esp,0xc
c00024dc:	5b                   	pop    ebx
c00024dd:	5e                   	pop    esi
c00024de:	5f                   	pop    edi
c00024df:	5d                   	pop    ebp
c00024e0:	c3                   	ret    

c00024e1 <gen_numname>:
c00024e1:	57                   	push   edi
c00024e2:	89 cf                	mov    edi,ecx
c00024e4:	56                   	push   esi
c00024e5:	b9 0b 00 00 00       	mov    ecx,0xb
c00024ea:	53                   	push   ebx
c00024eb:	89 c6                	mov    esi,eax
c00024ed:	83 ec 10             	sub    esp,0x10
c00024f0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00024f4:	e8 86 fc ff ff       	call   c000217f <mem_cpy>
c00024f9:	83 fb 05             	cmp    ebx,0x5
c00024fc:	76 30                	jbe    c000252e <gen_numname+0x4d>
c00024fe:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002501:	66 85 c0             	test   ax,ax
c0002504:	74 28                	je     c000252e <gen_numname+0x4d>
c0002506:	83 c7 02             	add    edi,0x2
c0002509:	ba 10 00 00 00       	mov    edx,0x10
c000250e:	89 c1                	mov    ecx,eax
c0002510:	01 db                	add    ebx,ebx
c0002512:	c1 e0 10             	shl    eax,0x10
c0002515:	83 e1 01             	and    ecx,0x1
c0002518:	c1 e8 11             	shr    eax,0x11
c000251b:	01 cb                	add    ebx,ecx
c000251d:	0f ba e3 10          	bt     ebx,0x10
c0002521:	73 06                	jae    c0002529 <gen_numname+0x48>
c0002523:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002529:	4a                   	dec    edx
c000252a:	75 e2                	jne    c000250e <gen_numname+0x2d>
c000252c:	eb d0                	jmp    c00024fe <gen_numname+0x1d>
c000252e:	b8 07 00 00 00       	mov    eax,0x7
c0002533:	89 d9                	mov    ecx,ebx
c0002535:	83 e1 0f             	and    ecx,0xf
c0002538:	8d 79 30             	lea    edi,[ecx+0x30]
c000253b:	83 ff 39             	cmp    edi,0x39
c000253e:	89 fa                	mov    edx,edi
c0002540:	76 03                	jbe    c0002545 <gen_numname+0x64>
c0002542:	8d 51 37             	lea    edx,[ecx+0x37]
c0002545:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002548:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000254c:	89 da                	mov    edx,ebx
c000254e:	c1 ea 04             	shr    edx,0x4
c0002551:	83 fb 0f             	cmp    ebx,0xf
c0002554:	76 06                	jbe    c000255c <gen_numname+0x7b>
c0002556:	89 c8                	mov    eax,ecx
c0002558:	89 d3                	mov    ebx,edx
c000255a:	eb d7                	jmp    c0002533 <gen_numname+0x52>
c000255c:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0002561:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002564:	31 d2                	xor    edx,edx
c0002566:	8d 04 16             	lea    eax,[esi+edx*1]
c0002569:	39 ca                	cmp    edx,ecx
c000256b:	73 19                	jae    c0002586 <gen_numname+0xa5>
c000256d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002570:	83 f8 20             	cmp    eax,0x20
c0002573:	74 11                	je     c0002586 <gen_numname+0xa5>
c0002575:	e8 58 fc ff ff       	call   c00021d2 <dbc_1st>
c000257a:	85 c0                	test   eax,eax
c000257c:	74 05                	je     c0002583 <gen_numname+0xa2>
c000257e:	39 d3                	cmp    ebx,edx
c0002580:	74 04                	je     c0002586 <gen_numname+0xa5>
c0002582:	42                   	inc    edx
c0002583:	42                   	inc    edx
c0002584:	eb e0                	jmp    c0002566 <gen_numname+0x85>
c0002586:	83 f9 07             	cmp    ecx,0x7
c0002589:	b0 20                	mov    al,0x20
c000258b:	77 05                	ja     c0002592 <gen_numname+0xb1>
c000258d:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002591:	41                   	inc    ecx
c0002592:	42                   	inc    edx
c0002593:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002597:	83 fa 07             	cmp    edx,0x7
c000259a:	76 ea                	jbe    c0002586 <gen_numname+0xa5>
c000259c:	83 c4 10             	add    esp,0x10
c000259f:	5b                   	pop    ebx
c00025a0:	5e                   	pop    esi
c00025a1:	5f                   	pop    edi
c00025a2:	c3                   	ret    

c00025a3 <sum_sfn>:
c00025a3:	53                   	push   ebx
c00025a4:	31 c9                	xor    ecx,ecx
c00025a6:	31 db                	xor    ebx,ebx
c00025a8:	0f b6 d1             	movzx  edx,cl
c00025ab:	d1 ea                	shr    edx,1
c00025ad:	c1 e1 07             	shl    ecx,0x7
c00025b0:	09 ca                	or     edx,ecx
c00025b2:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c00025b5:	43                   	inc    ebx
c00025b6:	01 ca                	add    edx,ecx
c00025b8:	83 fb 0b             	cmp    ebx,0xb
c00025bb:	88 d1                	mov    cl,dl
c00025bd:	75 e9                	jne    c00025a8 <sum_sfn+0x5>
c00025bf:	5b                   	pop    ebx
c00025c0:	88 d0                	mov    al,dl
c00025c2:	c3                   	ret    

c00025c3 <get_ldnumber>:
c00025c3:	55                   	push   ebp
c00025c4:	57                   	push   edi
c00025c5:	56                   	push   esi
c00025c6:	83 ce ff             	or     esi,0xffffffff
c00025c9:	53                   	push   ebx
c00025ca:	8b 10                	mov    edx,DWORD PTR [eax]
c00025cc:	85 d2                	test   edx,edx
c00025ce:	74 38                	je     c0002608 <get_ldnumber+0x45>
c00025d0:	89 c5                	mov    ebp,eax
c00025d2:	89 d1                	mov    ecx,edx
c00025d4:	41                   	inc    ecx
c00025d5:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c00025d9:	80 fb 1f             	cmp    bl,0x1f
c00025dc:	76 05                	jbe    c00025e3 <get_ldnumber+0x20>
c00025de:	83 fb 3a             	cmp    ebx,0x3a
c00025e1:	75 f1                	jne    c00025d4 <get_ldnumber+0x11>
c00025e3:	31 f6                	xor    esi,esi
c00025e5:	83 fb 3a             	cmp    ebx,0x3a
c00025e8:	75 1e                	jne    c0002608 <get_ldnumber+0x45>
c00025ea:	8a 1a                	mov    bl,BYTE PTR [edx]
c00025ec:	83 ce ff             	or     esi,0xffffffff
c00025ef:	8d 7b d0             	lea    edi,[ebx-0x30]
c00025f2:	89 f8                	mov    eax,edi
c00025f4:	3c 09                	cmp    al,0x9
c00025f6:	77 10                	ja     c0002608 <get_ldnumber+0x45>
c00025f8:	83 c2 02             	add    edx,0x2
c00025fb:	39 d1                	cmp    ecx,edx
c00025fd:	75 09                	jne    c0002608 <get_ldnumber+0x45>
c00025ff:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0002602:	0f be f3             	movsx  esi,bl
c0002605:	83 ee 30             	sub    esi,0x30
c0002608:	5b                   	pop    ebx
c0002609:	89 f0                	mov    eax,esi
c000260b:	5e                   	pop    esi
c000260c:	5f                   	pop    edi
c000260d:	5d                   	pop    ebp
c000260e:	c3                   	ret    

c000260f <validate>:
c000260f:	56                   	push   esi
c0002610:	85 c0                	test   eax,eax
c0002612:	53                   	push   ebx
c0002613:	89 d6                	mov    esi,edx
c0002615:	51                   	push   ecx
c0002616:	75 09                	jne    c0002621 <validate+0x12>
c0002618:	b8 09 00 00 00       	mov    eax,0x9
c000261d:	31 c9                	xor    ecx,ecx
c000261f:	eb 2e                	jmp    c000264f <validate+0x40>
c0002621:	89 c3                	mov    ebx,eax
c0002623:	8b 00                	mov    eax,DWORD PTR [eax]
c0002625:	85 c0                	test   eax,eax
c0002627:	74 ef                	je     c0002618 <validate+0x9>
c0002629:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000262c:	74 ea                	je     c0002618 <validate+0x9>
c000262e:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0002631:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c0002635:	75 e1                	jne    c0002618 <validate+0x9>
c0002637:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000263b:	83 ec 0c             	sub    esp,0xc
c000263e:	50                   	push   eax
c000263f:	e8 be fa ff ff       	call   c0002102 <disk_status>
c0002644:	83 c4 10             	add    esp,0x10
c0002647:	a8 01                	test   al,0x1
c0002649:	75 cd                	jne    c0002618 <validate+0x9>
c000264b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000264d:	31 c0                	xor    eax,eax
c000264f:	89 0e                	mov    DWORD PTR [esi],ecx
c0002651:	5a                   	pop    edx
c0002652:	5b                   	pop    ebx
c0002653:	5e                   	pop    esi
c0002654:	c3                   	ret    

c0002655 <sync_window>:
c0002655:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002659:	74 58                	je     c00026b3 <sync_window+0x5e>
c000265b:	56                   	push   esi
c000265c:	53                   	push   ebx
c000265d:	89 c3                	mov    ebx,eax
c000265f:	51                   	push   ecx
c0002660:	6a 01                	push   0x1
c0002662:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002665:	8d 70 34             	lea    esi,[eax+0x34]
c0002668:	56                   	push   esi
c0002669:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000266d:	50                   	push   eax
c000266e:	e8 ab fa ff ff       	call   c000211e <disk_write>
c0002673:	83 c4 10             	add    esp,0x10
c0002676:	ba 01 00 00 00       	mov    edx,0x1
c000267b:	85 c0                	test   eax,eax
c000267d:	75 2e                	jne    c00026ad <sync_window+0x58>
c000267f:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002683:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002686:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002689:	89 c1                	mov    ecx,eax
c000268b:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000268e:	39 d1                	cmp    ecx,edx
c0002690:	73 19                	jae    c00026ab <sync_window+0x56>
c0002692:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002696:	75 13                	jne    c00026ab <sync_window+0x56>
c0002698:	6a 01                	push   0x1
c000269a:	01 d0                	add    eax,edx
c000269c:	50                   	push   eax
c000269d:	56                   	push   esi
c000269e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00026a2:	50                   	push   eax
c00026a3:	e8 76 fa ff ff       	call   c000211e <disk_write>
c00026a8:	83 c4 10             	add    esp,0x10
c00026ab:	31 d2                	xor    edx,edx
c00026ad:	89 d0                	mov    eax,edx
c00026af:	5a                   	pop    edx
c00026b0:	5b                   	pop    ebx
c00026b1:	5e                   	pop    esi
c00026b2:	c3                   	ret    
c00026b3:	31 d2                	xor    edx,edx
c00026b5:	89 d0                	mov    eax,edx
c00026b7:	c3                   	ret    

c00026b8 <move_window>:
c00026b8:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c00026bb:	74 3a                	je     c00026f7 <move_window+0x3f>
c00026bd:	56                   	push   esi
c00026be:	89 d6                	mov    esi,edx
c00026c0:	53                   	push   ebx
c00026c1:	89 c3                	mov    ebx,eax
c00026c3:	51                   	push   ecx
c00026c4:	e8 8c ff ff ff       	call   c0002655 <sync_window>
c00026c9:	85 c0                	test   eax,eax
c00026cb:	75 2d                	jne    c00026fa <move_window+0x42>
c00026cd:	6a 01                	push   0x1
c00026cf:	56                   	push   esi
c00026d0:	8d 43 34             	lea    eax,[ebx+0x34]
c00026d3:	50                   	push   eax
c00026d4:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00026d8:	50                   	push   eax
c00026d9:	e8 2a fa ff ff       	call   c0002108 <disk_read>
c00026de:	83 c4 10             	add    esp,0x10
c00026e1:	89 c2                	mov    edx,eax
c00026e3:	31 c0                	xor    eax,eax
c00026e5:	85 d2                	test   edx,edx
c00026e7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00026ec:	0f 45 f2             	cmovne esi,edx
c00026ef:	0f 95 c0             	setne  al
c00026f2:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00026f5:	eb 03                	jmp    c00026fa <move_window+0x42>
c00026f7:	31 c0                	xor    eax,eax
c00026f9:	c3                   	ret    
c00026fa:	5a                   	pop    edx
c00026fb:	5b                   	pop    ebx
c00026fc:	5e                   	pop    esi
c00026fd:	c3                   	ret    

c00026fe <check_fs>:
c00026fe:	53                   	push   ebx
c00026ff:	89 c3                	mov    ebx,eax
c0002701:	83 ec 08             	sub    esp,0x8
c0002704:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002708:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000270f:	e8 a4 ff ff ff       	call   c00026b8 <move_window>
c0002714:	ba 04 00 00 00       	mov    edx,0x4
c0002719:	85 c0                	test   eax,eax
c000271b:	75 68                	jne    c0002785 <check_fs+0x87>
c000271d:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002723:	e8 2b fa ff ff       	call   c0002153 <ld_word>
c0002728:	ba 03 00 00 00       	mov    edx,0x3
c000272d:	66 3d 55 aa          	cmp    ax,0xaa55
c0002731:	75 52                	jne    c0002785 <check_fs+0x87>
c0002733:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c0002736:	8d 50 18             	lea    edx,[eax+0x18]
c0002739:	80 fa 01             	cmp    dl,0x1
c000273c:	76 09                	jbe    c0002747 <check_fs+0x49>
c000273e:	3c eb                	cmp    al,0xeb
c0002740:	ba 02 00 00 00       	mov    edx,0x2
c0002745:	75 3e                	jne    c0002785 <check_fs+0x87>
c0002747:	ba c0 3b 03 c0       	mov    edx,0xc0033bc0
c000274c:	b9 03 00 00 00       	mov    ecx,0x3
c0002751:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002754:	e8 45 fa ff ff       	call   c000219e <mem_cmp>
c0002759:	31 d2                	xor    edx,edx
c000275b:	85 c0                	test   eax,eax
c000275d:	74 26                	je     c0002785 <check_fs+0x87>
c000275f:	ba 58 fd 02 c0       	mov    edx,0xc002fd58
c0002764:	b9 05 00 00 00       	mov    ecx,0x5
c0002769:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000276f:	e8 2a fa ff ff       	call   c000219e <mem_cmp>
c0002774:	31 d2                	xor    edx,edx
c0002776:	85 c0                	test   eax,eax
c0002778:	74 0b                	je     c0002785 <check_fs+0x87>
c000277a:	31 d2                	xor    edx,edx
c000277c:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002780:	0f 95 c2             	setne  dl
c0002783:	01 d2                	add    edx,edx
c0002785:	83 c4 08             	add    esp,0x8
c0002788:	89 d0                	mov    eax,edx
c000278a:	5b                   	pop    ebx
c000278b:	c3                   	ret    

c000278c <find_volume>:
c000278c:	55                   	push   ebp
c000278d:	57                   	push   edi
c000278e:	56                   	push   esi
c000278f:	89 c6                	mov    esi,eax
c0002791:	53                   	push   ebx
c0002792:	89 d3                	mov    ebx,edx
c0002794:	83 ec 2c             	sub    esp,0x2c
c0002797:	31 d2                	xor    edx,edx
c0002799:	e8 60 ff ff ff       	call   c00026fe <check_fs>
c000279e:	85 db                	test   ebx,ebx
c00027a0:	0f 94 c2             	sete   dl
c00027a3:	83 f8 02             	cmp    eax,0x2
c00027a6:	74 07                	je     c00027af <find_volume+0x23>
c00027a8:	77 63                	ja     c000280d <find_volume+0x81>
c00027aa:	f6 c2 01             	test   dl,0x1
c00027ad:	75 5e                	jne    c000280d <find_volume+0x81>
c00027af:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c00027b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027b9:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c00027bf:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c00027c3:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00027c7:	89 f8                	mov    eax,edi
c00027c9:	83 c7 10             	add    edi,0x10
c00027cc:	e8 8f f9 ff ff       	call   c0002160 <ld_dword>
c00027d1:	83 c5 04             	add    ebp,0x4
c00027d4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00027d8:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00027db:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c00027df:	75 e2                	jne    c00027c3 <find_volume+0x37>
c00027e1:	83 fb 01             	cmp    ebx,0x1
c00027e4:	0f b6 fa             	movzx  edi,dl
c00027e7:	83 d3 ff             	adc    ebx,0xffffffff
c00027ea:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00027ee:	b8 03 00 00 00       	mov    eax,0x3
c00027f3:	85 d2                	test   edx,edx
c00027f5:	74 07                	je     c00027fe <find_volume+0x72>
c00027f7:	89 f0                	mov    eax,esi
c00027f9:	e8 00 ff ff ff       	call   c00026fe <check_fs>
c00027fe:	83 f8 01             	cmp    eax,0x1
c0002801:	76 0a                	jbe    c000280d <find_volume+0x81>
c0002803:	85 ff                	test   edi,edi
c0002805:	74 06                	je     c000280d <find_volume+0x81>
c0002807:	43                   	inc    ebx
c0002808:	83 fb 03             	cmp    ebx,0x3
c000280b:	76 dd                	jbe    c00027ea <find_volume+0x5e>
c000280d:	83 c4 2c             	add    esp,0x2c
c0002810:	5b                   	pop    ebx
c0002811:	5e                   	pop    esi
c0002812:	5f                   	pop    edi
c0002813:	5d                   	pop    ebp
c0002814:	c3                   	ret    

c0002815 <mount_volume>:
c0002815:	55                   	push   ebp
c0002816:	89 d5                	mov    ebp,edx
c0002818:	57                   	push   edi
c0002819:	89 cf                	mov    edi,ecx
c000281b:	56                   	push   esi
c000281c:	53                   	push   ebx
c000281d:	bb 0b 00 00 00       	mov    ebx,0xb
c0002822:	83 ec 2c             	sub    esp,0x2c
c0002825:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000282b:	e8 93 fd ff ff       	call   c00025c3 <get_ldnumber>
c0002830:	85 c0                	test   eax,eax
c0002832:	0f 88 d0 02 00 00    	js     c0002b08 <mount_volume+0x2f3>
c0002838:	8b 34 85 80 7c 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc8380]
c000283f:	89 c2                	mov    edx,eax
c0002841:	bb 0c 00 00 00       	mov    ebx,0xc
c0002846:	85 f6                	test   esi,esi
c0002848:	0f 84 ba 02 00 00    	je     c0002b08 <mount_volume+0x2f3>
c000284e:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c0002851:	83 e7 fe             	and    edi,0xfffffffe
c0002854:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002857:	74 3c                	je     c0002895 <mount_volume+0x80>
c0002859:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000285d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002861:	83 ec 0c             	sub    esp,0xc
c0002864:	50                   	push   eax
c0002865:	e8 98 f8 ff ff       	call   c0002102 <disk_status>
c000286a:	83 c4 10             	add    esp,0x10
c000286d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002871:	a8 01                	test   al,0x1
c0002873:	75 20                	jne    c0002895 <mount_volume+0x80>
c0002875:	31 db                	xor    ebx,ebx
c0002877:	81 e7 fe 00 00 00    	and    edi,0xfe
c000287d:	0f 84 85 02 00 00    	je     c0002b08 <mount_volume+0x2f3>
c0002883:	a8 04                	test   al,0x4
c0002885:	0f 84 7d 02 00 00    	je     c0002b08 <mount_volume+0x2f3>
c000288b:	bb 0a 00 00 00       	mov    ebx,0xa
c0002890:	e9 73 02 00 00       	jmp    c0002b08 <mount_volume+0x2f3>
c0002895:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002898:	83 ec 0c             	sub    esp,0xc
c000289b:	0f b6 c2             	movzx  eax,dl
c000289e:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c00028a1:	bb 03 00 00 00       	mov    ebx,0x3
c00028a6:	50                   	push   eax
c00028a7:	e8 59 f8 ff ff       	call   c0002105 <disk_initialize>
c00028ac:	83 c4 10             	add    esp,0x10
c00028af:	a8 01                	test   al,0x1
c00028b1:	0f 85 51 02 00 00    	jne    c0002b08 <mount_volume+0x2f3>
c00028b7:	81 e7 fe 00 00 00    	and    edi,0xfe
c00028bd:	74 04                	je     c00028c3 <mount_volume+0xae>
c00028bf:	a8 04                	test   al,0x4
c00028c1:	75 c8                	jne    c000288b <mount_volume+0x76>
c00028c3:	31 d2                	xor    edx,edx
c00028c5:	89 f0                	mov    eax,esi
c00028c7:	e8 c0 fe ff ff       	call   c000278c <find_volume>
c00028cc:	bb 01 00 00 00       	mov    ebx,0x1
c00028d1:	83 f8 04             	cmp    eax,0x4
c00028d4:	0f 84 2e 02 00 00    	je     c0002b08 <mount_volume+0x2f3>
c00028da:	83 f8 01             	cmp    eax,0x1
c00028dd:	76 0a                	jbe    c00028e9 <mount_volume+0xd4>
c00028df:	bb 0d 00 00 00       	mov    ebx,0xd
c00028e4:	e9 1f 02 00 00       	jmp    c0002b08 <mount_volume+0x2f3>
c00028e9:	8d 46 3f             	lea    eax,[esi+0x3f]
c00028ec:	e8 62 f8 ff ff       	call   c0002153 <ld_word>
c00028f1:	66 3d 00 02          	cmp    ax,0x200
c00028f5:	75 e8                	jne    c00028df <mount_volume+0xca>
c00028f7:	8d 46 4a             	lea    eax,[esi+0x4a]
c00028fa:	e8 54 f8 ff ff       	call   c0002153 <ld_word>
c00028ff:	0f b7 c0             	movzx  eax,ax
c0002902:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002906:	85 c0                	test   eax,eax
c0002908:	75 0c                	jne    c0002916 <mount_volume+0x101>
c000290a:	8d 46 58             	lea    eax,[esi+0x58]
c000290d:	e8 4e f8 ff ff       	call   c0002160 <ld_dword>
c0002912:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002916:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002919:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000291c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002920:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002924:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002927:	89 e8                	mov    eax,ebp
c0002929:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000292c:	8d 45 ff             	lea    eax,[ebp-0x1]
c000292f:	3c 01                	cmp    al,0x1
c0002931:	77 ac                	ja     c00028df <mount_volume+0xca>
c0002933:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c0002937:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c000293b:	66 85 c0             	test   ax,ax
c000293e:	89 c3                	mov    ebx,eax
c0002940:	74 9d                	je     c00028df <mount_volume+0xca>
c0002942:	8d 40 ff             	lea    eax,[eax-0x1]
c0002945:	85 d8                	test   eax,ebx
c0002947:	75 96                	jne    c00028df <mount_volume+0xca>
c0002949:	8d 46 45             	lea    eax,[esi+0x45]
c000294c:	e8 02 f8 ff ff       	call   c0002153 <ld_word>
c0002951:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002955:	a8 0f                	test   al,0xf
c0002957:	89 c7                	mov    edi,eax
c0002959:	75 84                	jne    c00028df <mount_volume+0xca>
c000295b:	8d 46 47             	lea    eax,[esi+0x47]
c000295e:	e8 f0 f7 ff ff       	call   c0002153 <ld_word>
c0002963:	0f b7 d0             	movzx  edx,ax
c0002966:	85 d2                	test   edx,edx
c0002968:	75 0a                	jne    c0002974 <mount_volume+0x15f>
c000296a:	8d 46 54             	lea    eax,[esi+0x54]
c000296d:	e8 ee f7 ff ff       	call   c0002160 <ld_dword>
c0002972:	89 c2                	mov    edx,eax
c0002974:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002978:	8d 46 42             	lea    eax,[esi+0x42]
c000297b:	e8 d3 f7 ff ff       	call   c0002153 <ld_word>
c0002980:	0f b7 c8             	movzx  ecx,ax
c0002983:	85 c9                	test   ecx,ecx
c0002985:	0f 84 54 ff ff ff    	je     c00028df <mount_volume+0xca>
c000298b:	89 e8                	mov    eax,ebp
c000298d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002991:	0f b6 e8             	movzx  ebp,al
c0002994:	0f b7 c7             	movzx  eax,di
c0002997:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c000299c:	c1 e8 04             	shr    eax,0x4
c000299f:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00029a3:	01 e8                	add    eax,ebp
c00029a5:	01 c8                	add    eax,ecx
c00029a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00029ab:	39 c2                	cmp    edx,eax
c00029ad:	0f 82 2c ff ff ff    	jb     c00028df <mount_volume+0xca>
c00029b3:	29 c2                	sub    edx,eax
c00029b5:	89 d5                	mov    ebp,edx
c00029b7:	89 d0                	mov    eax,edx
c00029b9:	31 d2                	xor    edx,edx
c00029bb:	f7 f3                	div    ebx
c00029bd:	39 dd                	cmp    ebp,ebx
c00029bf:	0f 82 1a ff ff ff    	jb     c00028df <mount_volume+0xca>
c00029c5:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00029ca:	0f 87 0f ff ff ff    	ja     c00028df <mount_volume+0xca>
c00029d0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00029d5:	0f 86 1e 01 00 00    	jbe    c0002af9 <mount_volume+0x2e4>
c00029db:	bb 03 00 00 00       	mov    ebx,0x3
c00029e0:	8d 68 02             	lea    ebp,[eax+0x2]
c00029e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e7:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00029ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00029ee:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00029f2:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00029f5:	01 c8                	add    eax,ecx
c00029f7:	83 fb 03             	cmp    ebx,0x3
c00029fa:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00029fd:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002a00:	75 23                	jne    c0002a25 <mount_volume+0x210>
c0002a02:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002a05:	e8 49 f7 ff ff       	call   c0002153 <ld_word>
c0002a0a:	09 c7                	or     edi,eax
c0002a0c:	66 85 ff             	test   di,di
c0002a0f:	0f 85 ca fe ff ff    	jne    c00028df <mount_volume+0xca>
c0002a15:	8d 46 60             	lea    eax,[esi+0x60]
c0002a18:	e8 43 f7 ff ff       	call   c0002160 <ld_dword>
c0002a1d:	c1 e5 02             	shl    ebp,0x2
c0002a20:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002a23:	eb 25                	jmp    c0002a4a <mount_volume+0x235>
c0002a25:	66 85 ff             	test   di,di
c0002a28:	0f 84 b1 fe ff ff    	je     c00028df <mount_volume+0xca>
c0002a2e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002a32:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c0002a36:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c0002a3a:	83 e5 01             	and    ebp,0x1
c0002a3d:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002a40:	d1 ea                	shr    edx,1
c0002a42:	01 d5                	add    ebp,edx
c0002a44:	83 fb 02             	cmp    ebx,0x2
c0002a47:	0f 44 ef             	cmove  ebp,edi
c0002a4a:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c0002a50:	c1 ed 09             	shr    ebp,0x9
c0002a53:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a57:	0f 87 82 fe ff ff    	ja     c00028df <mount_volume+0xca>
c0002a5d:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002a64:	83 fb 03             	cmp    ebx,0x3
c0002a67:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002a6e:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002a72:	75 6e                	jne    c0002ae2 <mount_volume+0x2cd>
c0002a74:	8d 46 64             	lea    eax,[esi+0x64]
c0002a77:	e8 d7 f6 ff ff       	call   c0002153 <ld_word>
c0002a7c:	66 48                	dec    ax
c0002a7e:	75 62                	jne    c0002ae2 <mount_volume+0x2cd>
c0002a80:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002a84:	89 f0                	mov    eax,esi
c0002a86:	42                   	inc    edx
c0002a87:	e8 2c fc ff ff       	call   c00026b8 <move_window>
c0002a8c:	85 c0                	test   eax,eax
c0002a8e:	75 52                	jne    c0002ae2 <mount_volume+0x2cd>
c0002a90:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002a94:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002a9a:	e8 b4 f6 ff ff       	call   c0002153 <ld_word>
c0002a9f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002aa3:	75 3d                	jne    c0002ae2 <mount_volume+0x2cd>
c0002aa5:	8d 46 34             	lea    eax,[esi+0x34]
c0002aa8:	e8 b3 f6 ff ff       	call   c0002160 <ld_dword>
c0002aad:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002ab2:	75 2e                	jne    c0002ae2 <mount_volume+0x2cd>
c0002ab4:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002aba:	e8 a1 f6 ff ff       	call   c0002160 <ld_dword>
c0002abf:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002ac4:	75 1c                	jne    c0002ae2 <mount_volume+0x2cd>
c0002ac6:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002acc:	e8 8f f6 ff ff       	call   c0002160 <ld_dword>
c0002ad1:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002ad4:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002ada:	e8 81 f6 ff ff       	call   c0002160 <ld_dword>
c0002adf:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002ae2:	88 1e                	mov    BYTE PTR [esi],bl
c0002ae4:	66 a1 60 7c 03 c0    	mov    ax,ds:0xc0037c60
c0002aea:	31 db                	xor    ebx,ebx
c0002aec:	40                   	inc    eax
c0002aed:	66 a3 60 7c 03 c0    	mov    ds:0xc0037c60,ax
c0002af3:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002af7:	eb 0f                	jmp    c0002b08 <mount_volume+0x2f3>
c0002af9:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002afe:	19 db                	sbb    ebx,ebx
c0002b00:	83 c3 02             	add    ebx,0x2
c0002b03:	e9 d8 fe ff ff       	jmp    c00029e0 <mount_volume+0x1cb>
c0002b08:	83 c4 2c             	add    esp,0x2c
c0002b0b:	89 d8                	mov    eax,ebx
c0002b0d:	5b                   	pop    ebx
c0002b0e:	5e                   	pop    esi
c0002b0f:	5f                   	pop    edi
c0002b10:	5d                   	pop    ebp
c0002b11:	c3                   	ret    

c0002b12 <put_fat>:
c0002b12:	55                   	push   ebp
c0002b13:	bd 02 00 00 00       	mov    ebp,0x2
c0002b18:	57                   	push   edi
c0002b19:	56                   	push   esi
c0002b1a:	53                   	push   ebx
c0002b1b:	83 ec 1c             	sub    esp,0x1c
c0002b1e:	83 fa 01             	cmp    edx,0x1
c0002b21:	0f 86 38 01 00 00    	jbe    c0002c5f <put_fat+0x14d>
c0002b27:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002b2a:	0f 86 2f 01 00 00    	jbe    c0002c5f <put_fat+0x14d>
c0002b30:	89 c6                	mov    esi,eax
c0002b32:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002b35:	89 cf                	mov    edi,ecx
c0002b37:	89 d3                	mov    ebx,edx
c0002b39:	83 f8 02             	cmp    eax,0x2
c0002b3c:	0f 84 b1 00 00 00    	je     c0002bf3 <put_fat+0xe1>
c0002b42:	83 f8 03             	cmp    eax,0x3
c0002b45:	0f 84 d5 00 00 00    	je     c0002c20 <put_fat+0x10e>
c0002b4b:	48                   	dec    eax
c0002b4c:	0f 85 0d 01 00 00    	jne    c0002c5f <put_fat+0x14d>
c0002b52:	89 d1                	mov    ecx,edx
c0002b54:	89 f0                	mov    eax,esi
c0002b56:	d1 e9                	shr    ecx,1
c0002b58:	01 d1                	add    ecx,edx
c0002b5a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b5e:	89 ca                	mov    edx,ecx
c0002b60:	c1 ea 09             	shr    edx,0x9
c0002b63:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002b66:	e8 4d fb ff ff       	call   c00026b8 <move_window>
c0002b6b:	85 c0                	test   eax,eax
c0002b6d:	89 c5                	mov    ebp,eax
c0002b6f:	0f 85 ea 00 00 00    	jne    c0002c5f <put_fat+0x14d>
c0002b75:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002b79:	8d 46 34             	lea    eax,[esi+0x34]
c0002b7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b80:	8d 41 01             	lea    eax,[ecx+0x1]
c0002b83:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002b89:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b8d:	83 e3 01             	and    ebx,0x1
c0002b90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b94:	89 f8                	mov    eax,edi
c0002b96:	74 11                	je     c0002ba9 <put_fat+0x97>
c0002b98:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002b9a:	89 f8                	mov    eax,edi
c0002b9c:	c1 e0 04             	shl    eax,0x4
c0002b9f:	25 f0 0f 00 00       	and    eax,0xff0
c0002ba4:	83 e2 0f             	and    edx,0xf
c0002ba7:	09 d0                	or     eax,edx
c0002ba9:	88 01                	mov    BYTE PTR [ecx],al
c0002bab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002baf:	89 f0                	mov    eax,esi
c0002bb1:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bb5:	c1 ea 09             	shr    edx,0x9
c0002bb8:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002bbb:	e8 f8 fa ff ff       	call   c00026b8 <move_window>
c0002bc0:	85 c0                	test   eax,eax
c0002bc2:	89 c5                	mov    ebp,eax
c0002bc4:	0f 85 95 00 00 00    	jne    c0002c5f <put_fat+0x14d>
c0002bca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002bce:	25 ff 01 00 00       	and    eax,0x1ff
c0002bd3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002bd7:	85 db                	test   ebx,ebx
c0002bd9:	74 07                	je     c0002be2 <put_fat+0xd0>
c0002bdb:	c1 ef 04             	shr    edi,0x4
c0002bde:	89 f9                	mov    ecx,edi
c0002be0:	eb 0d                	jmp    c0002bef <put_fat+0xdd>
c0002be2:	8a 08                	mov    cl,BYTE PTR [eax]
c0002be4:	c1 ef 08             	shr    edi,0x8
c0002be7:	83 e7 0f             	and    edi,0xf
c0002bea:	83 e1 f0             	and    ecx,0xfffffff0
c0002bed:	09 f9                	or     ecx,edi
c0002bef:	88 08                	mov    BYTE PTR [eax],cl
c0002bf1:	eb 27                	jmp    c0002c1a <put_fat+0x108>
c0002bf3:	c1 ea 08             	shr    edx,0x8
c0002bf6:	89 f0                	mov    eax,esi
c0002bf8:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002bfb:	e8 b8 fa ff ff       	call   c00026b8 <move_window>
c0002c00:	85 c0                	test   eax,eax
c0002c02:	89 c5                	mov    ebp,eax
c0002c04:	75 59                	jne    c0002c5f <put_fat+0x14d>
c0002c06:	01 db                	add    ebx,ebx
c0002c08:	0f b7 d7             	movzx  edx,di
c0002c0b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c11:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002c15:	e8 5e f5 ff ff       	call   c0002178 <st_word>
c0002c1a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c1e:	eb 3f                	jmp    c0002c5f <put_fat+0x14d>
c0002c20:	c1 ea 07             	shr    edx,0x7
c0002c23:	89 f0                	mov    eax,esi
c0002c25:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002c28:	e8 8b fa ff ff       	call   c00026b8 <move_window>
c0002c2d:	85 c0                	test   eax,eax
c0002c2f:	89 c5                	mov    ebp,eax
c0002c31:	75 2c                	jne    c0002c5f <put_fat+0x14d>
c0002c33:	c1 e3 02             	shl    ebx,0x2
c0002c36:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002c3c:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002c42:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002c46:	89 d8                	mov    eax,ebx
c0002c48:	e8 13 f5 ff ff       	call   c0002160 <ld_dword>
c0002c4d:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c52:	09 f8                	or     eax,edi
c0002c54:	89 c2                	mov    edx,eax
c0002c56:	89 d8                	mov    eax,ebx
c0002c58:	e8 1f f5 ff ff       	call   c000217c <st_dword>
c0002c5d:	eb bb                	jmp    c0002c1a <put_fat+0x108>
c0002c5f:	83 c4 1c             	add    esp,0x1c
c0002c62:	89 e8                	mov    eax,ebp
c0002c64:	5b                   	pop    ebx
c0002c65:	5e                   	pop    esi
c0002c66:	5f                   	pop    edi
c0002c67:	5d                   	pop    ebp
c0002c68:	c3                   	ret    

c0002c69 <dir_clear>:
c0002c69:	55                   	push   ebp
c0002c6a:	57                   	push   edi
c0002c6b:	56                   	push   esi
c0002c6c:	89 c6                	mov    esi,eax
c0002c6e:	53                   	push   ebx
c0002c6f:	83 ec 1c             	sub    esp,0x1c
c0002c72:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002c76:	e8 da f9 ff ff       	call   c0002655 <sync_window>
c0002c7b:	85 c0                	test   eax,eax
c0002c7d:	0f 85 c1 00 00 00    	jne    c0002d44 <dir_clear+0xdb>
c0002c83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c87:	89 f0                	mov    eax,esi
c0002c89:	e8 1b f7 ff ff       	call   c00023a9 <clst2sect>
c0002c8e:	31 d2                	xor    edx,edx
c0002c90:	b9 00 02 00 00       	mov    ecx,0x200
c0002c95:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002c98:	89 c5                	mov    ebp,eax
c0002c9a:	8d 46 34             	lea    eax,[esi+0x34]
c0002c9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002ca1:	e8 ee f4 ff ff       	call   c0002194 <mem_set>
c0002ca6:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002caa:	b8 00 80 00 00       	mov    eax,0x8000
c0002caf:	c1 e3 09             	shl    ebx,0x9
c0002cb2:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002cb8:	0f 47 d8             	cmova  ebx,eax
c0002cbb:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002cc1:	76 16                	jbe    c0002cd9 <dir_clear+0x70>
c0002cc3:	83 ec 0c             	sub    esp,0xc
c0002cc6:	53                   	push   ebx
c0002cc7:	e8 cc 32 00 00       	call   c0005f98 <ff_memalloc>
c0002ccc:	83 c4 10             	add    esp,0x10
c0002ccf:	85 c0                	test   eax,eax
c0002cd1:	89 c7                	mov    edi,eax
c0002cd3:	75 76                	jne    c0002d4b <dir_clear+0xe2>
c0002cd5:	d1 eb                	shr    ebx,1
c0002cd7:	eb e2                	jmp    c0002cbb <dir_clear+0x52>
c0002cd9:	31 db                	xor    ebx,ebx
c0002cdb:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002cdf:	39 d8                	cmp    eax,ebx
c0002ce1:	76 53                	jbe    c0002d36 <dir_clear+0xcd>
c0002ce3:	6a 01                	push   0x1
c0002ce5:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ce8:	50                   	push   eax
c0002ce9:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002ced:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002cf1:	50                   	push   eax
c0002cf2:	e8 27 f4 ff ff       	call   c000211e <disk_write>
c0002cf7:	83 c4 10             	add    esp,0x10
c0002cfa:	85 c0                	test   eax,eax
c0002cfc:	75 38                	jne    c0002d36 <dir_clear+0xcd>
c0002cfe:	43                   	inc    ebx
c0002cff:	eb da                	jmp    c0002cdb <dir_clear+0x72>
c0002d01:	52                   	push   edx
c0002d02:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002d05:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002d09:	50                   	push   eax
c0002d0a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002d0e:	57                   	push   edi
c0002d0f:	50                   	push   eax
c0002d10:	e8 09 f4 ff ff       	call   c000211e <disk_write>
c0002d15:	83 c4 10             	add    esp,0x10
c0002d18:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d1c:	85 c0                	test   eax,eax
c0002d1e:	75 0a                	jne    c0002d2a <dir_clear+0xc1>
c0002d20:	01 d3                	add    ebx,edx
c0002d22:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002d26:	39 d8                	cmp    eax,ebx
c0002d28:	77 d7                	ja     c0002d01 <dir_clear+0x98>
c0002d2a:	83 ec 0c             	sub    esp,0xc
c0002d2d:	57                   	push   edi
c0002d2e:	e8 7d 32 00 00       	call   c0005fb0 <ff_memfree>
c0002d33:	83 c4 10             	add    esp,0x10
c0002d36:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002d3a:	39 d8                	cmp    eax,ebx
c0002d3c:	0f 95 c0             	setne  al
c0002d3f:	0f b6 c0             	movzx  eax,al
c0002d42:	eb 19                	jmp    c0002d5d <dir_clear+0xf4>
c0002d44:	b8 01 00 00 00       	mov    eax,0x1
c0002d49:	eb 12                	jmp    c0002d5d <dir_clear+0xf4>
c0002d4b:	89 d9                	mov    ecx,ebx
c0002d4d:	31 d2                	xor    edx,edx
c0002d4f:	e8 40 f4 ff ff       	call   c0002194 <mem_set>
c0002d54:	89 da                	mov    edx,ebx
c0002d56:	31 db                	xor    ebx,ebx
c0002d58:	c1 ea 09             	shr    edx,0x9
c0002d5b:	eb c5                	jmp    c0002d22 <dir_clear+0xb9>
c0002d5d:	83 c4 1c             	add    esp,0x1c
c0002d60:	5b                   	pop    ebx
c0002d61:	5e                   	pop    esi
c0002d62:	5f                   	pop    edi
c0002d63:	5d                   	pop    ebp
c0002d64:	c3                   	ret    

c0002d65 <create_name>:
c0002d65:	55                   	push   ebp
c0002d66:	89 c5                	mov    ebp,eax
c0002d68:	57                   	push   edi
c0002d69:	89 d7                	mov    edi,edx
c0002d6b:	56                   	push   esi
c0002d6c:	31 f6                	xor    esi,esi
c0002d6e:	53                   	push   ebx
c0002d6f:	83 ec 3c             	sub    esp,0x3c
c0002d72:	8b 02                	mov    eax,DWORD PTR [edx]
c0002d74:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002d78:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002d7b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002d7e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d82:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002d86:	e8 4d f4 ff ff       	call   c00021d8 <tchar2uni>
c0002d8b:	83 f8 ff             	cmp    eax,0xffffffff
c0002d8e:	89 c3                	mov    ebx,eax
c0002d90:	75 0a                	jne    c0002d9c <create_name+0x37>
c0002d92:	b8 06 00 00 00       	mov    eax,0x6
c0002d97:	e9 7c 02 00 00       	jmp    c0003018 <create_name+0x2b3>
c0002d9c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002da1:	76 0c                	jbe    c0002daf <create_name+0x4a>
c0002da3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002da7:	c1 e8 10             	shr    eax,0x10
c0002daa:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002dae:	46                   	inc    esi
c0002daf:	0f b7 d3             	movzx  edx,bx
c0002db2:	89 d8                	mov    eax,ebx
c0002db4:	83 fa 1f             	cmp    edx,0x1f
c0002db7:	76 30                	jbe    c0002de9 <create_name+0x84>
c0002db9:	83 fa 2f             	cmp    edx,0x2f
c0002dbc:	74 2b                	je     c0002de9 <create_name+0x84>
c0002dbe:	83 fa 5c             	cmp    edx,0x5c
c0002dc1:	74 35                	je     c0002df8 <create_name+0x93>
c0002dc3:	83 fa 7f             	cmp    edx,0x7f
c0002dc6:	77 0e                	ja     c0002dd6 <create_name+0x71>
c0002dc8:	b8 5e fd 02 c0       	mov    eax,0xc002fd5e
c0002dcd:	e8 ef f3 ff ff       	call   c00021c1 <chk_chr>
c0002dd2:	85 c0                	test   eax,eax
c0002dd4:	75 bc                	jne    c0002d92 <create_name+0x2d>
c0002dd6:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002ddc:	77 b4                	ja     c0002d92 <create_name+0x2d>
c0002dde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002de2:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002de6:	46                   	inc    esi
c0002de7:	eb 99                	jmp    c0002d82 <create_name+0x1d>
c0002de9:	66 83 f8 1f          	cmp    ax,0x1f
c0002ded:	b3 04                	mov    bl,0x4
c0002def:	76 1a                	jbe    c0002e0b <create_name+0xa6>
c0002df1:	eb 05                	jmp    c0002df8 <create_name+0x93>
c0002df3:	40                   	inc    eax
c0002df4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002df8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002dfc:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002dff:	83 fa 2f             	cmp    edx,0x2f
c0002e02:	74 ef                	je     c0002df3 <create_name+0x8e>
c0002e04:	83 fa 5c             	cmp    edx,0x5c
c0002e07:	74 ea                	je     c0002df3 <create_name+0x8e>
c0002e09:	31 db                	xor    ebx,ebx
c0002e0b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e0f:	89 07                	mov    DWORD PTR [edi],eax
c0002e11:	85 f6                	test   esi,esi
c0002e13:	74 16                	je     c0002e2b <create_name+0xc6>
c0002e15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002e19:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002e1e:	83 f8 20             	cmp    eax,0x20
c0002e21:	74 05                	je     c0002e28 <create_name+0xc3>
c0002e23:	83 f8 2e             	cmp    eax,0x2e
c0002e26:	75 03                	jne    c0002e2b <create_name+0xc6>
c0002e28:	4e                   	dec    esi
c0002e29:	eb e6                	jmp    c0002e11 <create_name+0xac>
c0002e2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002e2f:	31 ff                	xor    edi,edi
c0002e31:	85 f6                	test   esi,esi
c0002e33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002e39:	0f 84 53 ff ff ff    	je     c0002d92 <create_name+0x2d>
c0002e3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002e43:	8d 57 01             	lea    edx,[edi+0x1]
c0002e46:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002e4a:	83 f8 20             	cmp    eax,0x20
c0002e4d:	75 04                	jne    c0002e53 <create_name+0xee>
c0002e4f:	89 d7                	mov    edi,edx
c0002e51:	eb ec                	jmp    c0002e3f <create_name+0xda>
c0002e53:	85 ff                	test   edi,edi
c0002e55:	75 05                	jne    c0002e5c <create_name+0xf7>
c0002e57:	83 f8 2e             	cmp    eax,0x2e
c0002e5a:	75 08                	jne    c0002e64 <create_name+0xff>
c0002e5c:	83 cb 03             	or     ebx,0x3
c0002e5f:	eb 03                	jmp    c0002e64 <create_name+0xff>
c0002e61:	4e                   	dec    esi
c0002e62:	74 0c                	je     c0002e70 <create_name+0x10b>
c0002e64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002e68:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002e6e:	75 f1                	jne    c0002e61 <create_name+0xfc>
c0002e70:	b9 0b 00 00 00       	mov    ecx,0xb
c0002e75:	ba 20 00 00 00       	mov    edx,0x20
c0002e7a:	8d 45 20             	lea    eax,[ebp+0x20]
c0002e7d:	e8 12 f3 ff ff       	call   c0002194 <mem_set>
c0002e82:	31 c9                	xor    ecx,ecx
c0002e84:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002e8c:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002e91:	8d 47 01             	lea    eax,[edi+0x1]
c0002e94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002e9c:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ea0:	85 c0                	test   eax,eax
c0002ea2:	89 c7                	mov    edi,eax
c0002ea4:	0f 84 1d 01 00 00    	je     c0002fc7 <create_name+0x262>
c0002eaa:	83 f8 20             	cmp    eax,0x20
c0002ead:	74 0b                	je     c0002eba <create_name+0x155>
c0002eaf:	83 f8 2e             	cmp    eax,0x2e
c0002eb2:	75 0f                	jne    c0002ec3 <create_name+0x15e>
c0002eb4:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002eb8:	74 09                	je     c0002ec3 <create_name+0x15e>
c0002eba:	83 cb 03             	or     ebx,0x3
c0002ebd:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002ec1:	eb ce                	jmp    c0002e91 <create_name+0x12c>
c0002ec3:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002ec7:	73 06                	jae    c0002ecf <create_name+0x16a>
c0002ec9:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ecd:	75 3a                	jne    c0002f09 <create_name+0x1a4>
c0002ecf:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002ed4:	75 08                	jne    c0002ede <create_name+0x179>
c0002ed6:	83 cb 03             	or     ebx,0x3
c0002ed9:	e9 e9 00 00 00       	jmp    c0002fc7 <create_name+0x262>
c0002ede:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ee2:	74 0d                	je     c0002ef1 <create_name+0x18c>
c0002ee4:	83 cb 03             	or     ebx,0x3
c0002ee7:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002eeb:	0f 87 d6 00 00 00    	ja     c0002fc7 <create_name+0x262>
c0002ef1:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002ef6:	b9 08 00 00 00       	mov    ecx,0x8
c0002efb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002eff:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002f07:	eb b4                	jmp    c0002ebd <create_name+0x158>
c0002f09:	0f b7 c7             	movzx  eax,di
c0002f0c:	83 f8 7f             	cmp    eax,0x7f
c0002f0f:	76 66                	jbe    c0002f77 <create_name+0x212>
c0002f11:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002f15:	89 d9                	mov    ecx,ebx
c0002f17:	83 c9 02             	or     ecx,0x2
c0002f1a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002f1e:	52                   	push   edx
c0002f1f:	52                   	push   edx
c0002f20:	68 b5 01 00 00       	push   0x1b5
c0002f25:	50                   	push   eax
c0002f26:	e8 9d 30 00 00       	call   c0005fc8 <ff_uni2oem>
c0002f2b:	83 c4 10             	add    esp,0x10
c0002f2e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002f32:	a8 80                	test   al,0x80
c0002f34:	89 c7                	mov    edi,eax
c0002f36:	74 0c                	je     c0002f44 <create_name+0x1df>
c0002f38:	83 e7 7f             	and    edi,0x7f
c0002f3b:	0f b6 bf 20 fe 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffd01e0]
c0002f42:	eb 2a                	jmp    c0002f6e <create_name+0x209>
c0002f44:	0f b7 c0             	movzx  eax,ax
c0002f47:	3d ff 00 00 00       	cmp    eax,0xff
c0002f4c:	76 20                	jbe    c0002f6e <create_name+0x209>
c0002f4e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002f52:	4a                   	dec    edx
c0002f53:	39 ca                	cmp    edx,ecx
c0002f55:	77 0c                	ja     c0002f63 <create_name+0x1fe>
c0002f57:	83 cb 03             	or     ebx,0x3
c0002f5a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002f5e:	e9 5a ff ff ff       	jmp    c0002ebd <create_name+0x158>
c0002f63:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002f67:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002f6b:	41                   	inc    ecx
c0002f6c:	eb 4d                	jmp    c0002fbb <create_name+0x256>
c0002f6e:	66 85 ff             	test   di,di
c0002f71:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002f75:	74 19                	je     c0002f90 <create_name+0x22b>
c0002f77:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002f7b:	0f b7 d7             	movzx  edx,di
c0002f7e:	b8 67 fd 02 c0       	mov    eax,0xc002fd67
c0002f83:	e8 39 f2 ff ff       	call   c00021c1 <chk_chr>
c0002f88:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002f8c:	85 c0                	test   eax,eax
c0002f8e:	74 0a                	je     c0002f9a <create_name+0x235>
c0002f90:	83 cb 03             	or     ebx,0x3
c0002f93:	bf 5f 00 00 00       	mov    edi,0x5f
c0002f98:	eb 21                	jmp    c0002fbb <create_name+0x256>
c0002f9a:	8d 47 bf             	lea    eax,[edi-0x41]
c0002f9d:	66 83 f8 19          	cmp    ax,0x19
c0002fa1:	77 07                	ja     c0002faa <create_name+0x245>
c0002fa3:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002fa8:	eb 11                	jmp    c0002fbb <create_name+0x256>
c0002faa:	8d 47 9f             	lea    eax,[edi-0x61]
c0002fad:	66 83 f8 19          	cmp    ax,0x19
c0002fb1:	77 08                	ja     c0002fbb <create_name+0x256>
c0002fb3:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002fb8:	83 ef 20             	sub    edi,0x20
c0002fbb:	89 f8                	mov    eax,edi
c0002fbd:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002fc1:	41                   	inc    ecx
c0002fc2:	e9 f6 fe ff ff       	jmp    c0002ebd <create_name+0x158>
c0002fc7:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002fcb:	75 04                	jne    c0002fd1 <create_name+0x26c>
c0002fcd:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002fd1:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002fd6:	75 05                	jne    c0002fdd <create_name+0x278>
c0002fd8:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002fdd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002fe1:	83 e0 0c             	and    eax,0xc
c0002fe4:	83 f8 0c             	cmp    eax,0xc
c0002fe7:	74 0c                	je     c0002ff5 <create_name+0x290>
c0002fe9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002fed:	83 e0 03             	and    eax,0x3
c0002ff0:	83 f8 03             	cmp    eax,0x3
c0002ff3:	75 05                	jne    c0002ffa <create_name+0x295>
c0002ff5:	83 cb 02             	or     ebx,0x2
c0002ff8:	eb 19                	jmp    c0003013 <create_name+0x2ae>
c0002ffa:	f6 c3 02             	test   bl,0x2
c0002ffd:	75 14                	jne    c0003013 <create_name+0x2ae>
c0002fff:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0003004:	74 03                	je     c0003009 <create_name+0x2a4>
c0003006:	83 cb 10             	or     ebx,0x10
c0003009:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c000300e:	74 03                	je     c0003013 <create_name+0x2ae>
c0003010:	83 cb 08             	or     ebx,0x8
c0003013:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0003016:	31 c0                	xor    eax,eax
c0003018:	83 c4 3c             	add    esp,0x3c
c000301b:	5b                   	pop    ebx
c000301c:	5e                   	pop    esi
c000301d:	5f                   	pop    edi
c000301e:	5d                   	pop    ebp
c000301f:	c3                   	ret    

c0003020 <cmp_lfn>:
c0003020:	55                   	push   ebp
c0003021:	57                   	push   edi
c0003022:	89 d7                	mov    edi,edx
c0003024:	56                   	push   esi
c0003025:	53                   	push   ebx
c0003026:	83 ec 1c             	sub    esp,0x1c
c0003029:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000302d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003030:	e8 1e f1 ff ff       	call   c0002153 <ld_word>
c0003035:	66 85 c0             	test   ax,ax
c0003038:	74 07                	je     c0003041 <cmp_lfn+0x21>
c000303a:	31 c0                	xor    eax,eax
c000303c:	e9 a4 00 00 00       	jmp    c00030e5 <cmp_lfn+0xc5>
c0003041:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003043:	bd 01 00 00 00       	mov    ebp,0x1
c0003048:	31 c9                	xor    ecx,ecx
c000304a:	83 e3 3f             	and    ebx,0x3f
c000304d:	4b                   	dec    ebx
c000304e:	6b db 0d             	imul   ebx,ebx,0xd
c0003051:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003055:	0f b6 81 a0 fe 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffd0160]
c000305c:	01 f8                	add    eax,edi
c000305e:	e8 f0 f0 ff ff       	call   c0002153 <ld_word>
c0003063:	66 85 ed             	test   bp,bp
c0003066:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000306a:	0f b7 f0             	movzx  esi,ax
c000306d:	74 44                	je     c00030b3 <cmp_lfn+0x93>
c000306f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003073:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003079:	77 bf                	ja     c000303a <cmp_lfn+0x1a>
c000307b:	83 ec 0c             	sub    esp,0xc
c000307e:	0f b7 c6             	movzx  eax,si
c0003081:	50                   	push   eax
c0003082:	e8 55 30 00 00       	call   c00060dc <ff_wtoupper>
c0003087:	89 c5                	mov    ebp,eax
c0003089:	8d 43 01             	lea    eax,[ebx+0x1]
c000308c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003090:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0003094:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003098:	89 04 24             	mov    DWORD PTR [esp],eax
c000309b:	e8 3c 30 00 00       	call   c00060dc <ff_wtoupper>
c00030a0:	83 c4 10             	add    esp,0x10
c00030a3:	39 c5                	cmp    ebp,eax
c00030a5:	75 93                	jne    c000303a <cmp_lfn+0x1a>
c00030a7:	89 f5                	mov    ebp,esi
c00030a9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00030ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00030b1:	eb 0c                	jmp    c00030bf <cmp_lfn+0x9f>
c00030b3:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00030b9:	0f 85 7b ff ff ff    	jne    c000303a <cmp_lfn+0x1a>
c00030bf:	41                   	inc    ecx
c00030c0:	83 f9 0d             	cmp    ecx,0xd
c00030c3:	75 8c                	jne    c0003051 <cmp_lfn+0x31>
c00030c5:	f6 07 40             	test   BYTE PTR [edi],0x40
c00030c8:	74 16                	je     c00030e0 <cmp_lfn+0xc0>
c00030ca:	66 85 ed             	test   bp,bp
c00030cd:	74 11                	je     c00030e0 <cmp_lfn+0xc0>
c00030cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00030d3:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00030d8:	0f 94 c0             	sete   al
c00030db:	0f b6 c0             	movzx  eax,al
c00030de:	eb 05                	jmp    c00030e5 <cmp_lfn+0xc5>
c00030e0:	b8 01 00 00 00       	mov    eax,0x1
c00030e5:	83 c4 1c             	add    esp,0x1c
c00030e8:	5b                   	pop    ebx
c00030e9:	5e                   	pop    esi
c00030ea:	5f                   	pop    edi
c00030eb:	5d                   	pop    ebp
c00030ec:	c3                   	ret    

c00030ed <sync_fs>:
c00030ed:	56                   	push   esi
c00030ee:	53                   	push   ebx
c00030ef:	53                   	push   ebx
c00030f0:	89 c3                	mov    ebx,eax
c00030f2:	e8 5e f5 ff ff       	call   c0002655 <sync_window>
c00030f7:	85 c0                	test   eax,eax
c00030f9:	0f 85 9a 00 00 00    	jne    c0003199 <sync_fs+0xac>
c00030ff:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0003102:	75 7b                	jne    c000317f <sync_fs+0x92>
c0003104:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0003108:	75 75                	jne    c000317f <sync_fs+0x92>
c000310a:	8d 73 34             	lea    esi,[ebx+0x34]
c000310d:	b9 00 02 00 00       	mov    ecx,0x200
c0003112:	31 d2                	xor    edx,edx
c0003114:	89 f0                	mov    eax,esi
c0003116:	e8 79 f0 ff ff       	call   c0002194 <mem_set>
c000311b:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0003121:	ba 55 aa 00 00       	mov    edx,0xaa55
c0003126:	e8 4d f0 ff ff       	call   c0002178 <st_word>
c000312b:	ba 52 52 61 41       	mov    edx,0x41615252
c0003130:	89 f0                	mov    eax,esi
c0003132:	e8 45 f0 ff ff       	call   c000217c <st_dword>
c0003137:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c000313d:	ba 72 72 41 61       	mov    edx,0x61417272
c0003142:	e8 35 f0 ff ff       	call   c000217c <st_dword>
c0003147:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000314a:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0003150:	e8 27 f0 ff ff       	call   c000217c <st_dword>
c0003155:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003158:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c000315e:	e8 19 f0 ff ff       	call   c000217c <st_dword>
c0003163:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0003166:	6a 01                	push   0x1
c0003168:	40                   	inc    eax
c0003169:	50                   	push   eax
c000316a:	56                   	push   esi
c000316b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000316e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003172:	50                   	push   eax
c0003173:	e8 a6 ef ff ff       	call   c000211e <disk_write>
c0003178:	83 c4 10             	add    esp,0x10
c000317b:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000317f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003183:	51                   	push   ecx
c0003184:	6a 00                	push   0x0
c0003186:	6a 00                	push   0x0
c0003188:	50                   	push   eax
c0003189:	e8 a6 ef ff ff       	call   c0002134 <disk_ioctl>
c000318e:	83 c4 10             	add    esp,0x10
c0003191:	85 c0                	test   eax,eax
c0003193:	0f 95 c0             	setne  al
c0003196:	0f b6 c0             	movzx  eax,al
c0003199:	5a                   	pop    edx
c000319a:	5b                   	pop    ebx
c000319b:	5e                   	pop    esi
c000319c:	c3                   	ret    

c000319d <create_partition>:
c000319d:	55                   	push   ebp
c000319e:	0f b6 c0             	movzx  eax,al
c00031a1:	57                   	push   edi
c00031a2:	56                   	push   esi
c00031a3:	53                   	push   ebx
c00031a4:	83 ec 40             	sub    esp,0x40
c00031a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00031ab:	8d 44 24 30          	lea    eax,[esp+0x30]
c00031af:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00031b3:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00031b7:	50                   	push   eax
c00031b8:	6a 01                	push   0x1
c00031ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00031be:	e8 71 ef ff ff       	call   c0002134 <disk_ioctl>
c00031c3:	83 c4 10             	add    esp,0x10
c00031c6:	85 c0                	test   eax,eax
c00031c8:	0f 85 68 01 00 00    	jne    c0003336 <create_partition+0x199>
c00031ce:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00031d2:	b9 05 00 00 00       	mov    ecx,0x5
c00031d7:	be 08 00 00 00       	mov    esi,0x8
c00031dc:	89 f0                	mov    eax,esi
c00031de:	31 d2                	xor    edx,edx
c00031e0:	0f b6 d8             	movzx  ebx,al
c00031e3:	89 e8                	mov    eax,ebp
c00031e5:	f7 f3                	div    ebx
c00031e7:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00031ec:	76 0a                	jbe    c00031f8 <create_partition+0x5b>
c00031ee:	d1 e6                	shl    esi,1
c00031f0:	49                   	dec    ecx
c00031f1:	75 e9                	jne    c00031dc <create_partition+0x3f>
c00031f3:	be ff ff ff ff       	mov    esi,0xffffffff
c00031f8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031fc:	b9 00 02 00 00       	mov    ecx,0x200
c0003201:	31 d2                	xor    edx,edx
c0003203:	e8 8c ef ff ff       	call   c0002194 <mem_set>
c0003208:	b9 64 00 00 00       	mov    ecx,0x64
c000320d:	89 e8                	mov    eax,ebp
c000320f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003217:	31 d2                	xor    edx,edx
c0003219:	f7 f1                	div    ecx
c000321b:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003220:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003224:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003228:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c000322e:	89 f0                	mov    eax,esi
c0003230:	0f b6 c0             	movzx  eax,al
c0003233:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003237:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000323c:	0f 96 c0             	setbe  al
c000323f:	31 d2                	xor    edx,edx
c0003241:	85 c9                	test   ecx,ecx
c0003243:	0f 95 c2             	setne  dl
c0003246:	85 c2                	test   edx,eax
c0003248:	0f 84 b7 00 00 00    	je     c0003305 <create_partition+0x168>
c000324e:	39 e9                	cmp    ecx,ebp
c0003250:	0f 83 af 00 00 00    	jae    c0003305 <create_partition+0x168>
c0003256:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000325a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000325e:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0003261:	83 fe 64             	cmp    esi,0x64
c0003264:	77 0b                	ja     c0003271 <create_partition+0xd4>
c0003266:	74 07                	je     c000326f <create_partition+0xd2>
c0003268:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c000326d:	eb 02                	jmp    c0003271 <create_partition+0xd4>
c000326f:	89 ee                	mov    esi,ebp
c0003271:	89 ca                	mov    edx,ecx
c0003273:	31 c0                	xor    eax,eax
c0003275:	01 f2                	add    edx,esi
c0003277:	0f 92 c0             	setb   al
c000327a:	39 ea                	cmp    edx,ebp
c000327c:	77 04                	ja     c0003282 <create_partition+0xe5>
c000327e:	85 c0                	test   eax,eax
c0003280:	74 06                	je     c0003288 <create_partition+0xeb>
c0003282:	89 ee                	mov    esi,ebp
c0003284:	29 ce                	sub    esi,ecx
c0003286:	eb 04                	jmp    c000328c <create_partition+0xef>
c0003288:	85 f6                	test   esi,esi
c000328a:	74 79                	je     c0003305 <create_partition+0x168>
c000328c:	89 ca                	mov    edx,ecx
c000328e:	89 d8                	mov    eax,ebx
c0003290:	e8 e7 ee ff ff       	call   c000217c <st_dword>
c0003295:	8d 43 04             	lea    eax,[ebx+0x4]
c0003298:	89 f2                	mov    edx,esi
c000329a:	e8 dd ee ff ff       	call   c000217c <st_dword>
c000329f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00032a3:	bf 3f 00 00 00       	mov    edi,0x3f
c00032a8:	31 d2                	xor    edx,edx
c00032aa:	83 c3 10             	add    ebx,0x10
c00032ad:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00032b1:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c00032b4:	89 c8                	mov    eax,ecx
c00032b6:	01 f1                	add    ecx,esi
c00032b8:	f7 f7                	div    edi
c00032ba:	89 d7                	mov    edi,edx
c00032bc:	31 d2                	xor    edx,edx
c00032be:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c00032c2:	47                   	inc    edi
c00032c3:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c00032c6:	89 c2                	mov    edx,eax
c00032c8:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c00032cb:	c1 ea 02             	shr    edx,0x2
c00032ce:	8d 41 ff             	lea    eax,[ecx-0x1]
c00032d1:	83 e2 c0             	and    edx,0xffffffc0
c00032d4:	09 fa                	or     edx,edi
c00032d6:	bf 3f 00 00 00       	mov    edi,0x3f
c00032db:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c00032de:	31 d2                	xor    edx,edx
c00032e0:	f7 f7                	div    edi
c00032e2:	89 d6                	mov    esi,edx
c00032e4:	31 d2                	xor    edx,edx
c00032e6:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c00032ea:	46                   	inc    esi
c00032eb:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c00032ee:	89 c7                	mov    edi,eax
c00032f0:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c00032f3:	c1 ef 02             	shr    edi,0x2
c00032f6:	83 e7 c0             	and    edi,0xffffffc0
c00032f9:	09 fe                	or     esi,edi
c00032fb:	89 f2                	mov    edx,esi
c00032fd:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003300:	e9 32 ff ff ff       	jmp    c0003237 <create_partition+0x9a>
c0003305:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003309:	ba 55 aa 00 00       	mov    edx,0xaa55
c000330e:	05 fe 01 00 00       	add    eax,0x1fe
c0003313:	e8 60 ee ff ff       	call   c0002178 <st_word>
c0003318:	6a 01                	push   0x1
c000331a:	6a 00                	push   0x0
c000331c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0003320:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003324:	e8 f5 ed ff ff       	call   c000211e <disk_write>
c0003329:	83 c4 10             	add    esp,0x10
c000332c:	85 c0                	test   eax,eax
c000332e:	0f 95 c0             	setne  al
c0003331:	0f b6 c0             	movzx  eax,al
c0003334:	eb 05                	jmp    c000333b <create_partition+0x19e>
c0003336:	b8 01 00 00 00       	mov    eax,0x1
c000333b:	83 c4 3c             	add    esp,0x3c
c000333e:	5b                   	pop    ebx
c000333f:	5e                   	pop    esi
c0003340:	5f                   	pop    edi
c0003341:	5d                   	pop    ebp
c0003342:	c3                   	ret    

c0003343 <get_fileinfo>:
c0003343:	55                   	push   ebp
c0003344:	57                   	push   edi
c0003345:	56                   	push   esi
c0003346:	53                   	push   ebx
c0003347:	83 ec 1c             	sub    esp,0x1c
c000334a:	8b 30                	mov    esi,DWORD PTR [eax]
c000334c:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0003350:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003354:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003358:	0f 84 de 01 00 00    	je     c000353c <get_fileinfo+0x1f9>
c000335e:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0003362:	89 d3                	mov    ebx,edx
c0003364:	89 c6                	mov    esi,eax
c0003366:	74 7d                	je     c00033e5 <get_fileinfo+0xa2>
c0003368:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003370:	31 ff                	xor    edi,edi
c0003372:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003379:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000337d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003381:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003384:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003388:	85 c0                	test   eax,eax
c000338a:	89 c2                	mov    edx,eax
c000338c:	74 44                	je     c00033d2 <get_fileinfo+0x8f>
c000338e:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0003393:	85 ed                	test   ebp,ebp
c0003395:	75 0d                	jne    c00033a4 <get_fileinfo+0x61>
c0003397:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000339d:	66 81 f9 ff 07       	cmp    cx,0x7ff
c00033a2:	76 20                	jbe    c00033c4 <get_fileinfo+0x81>
c00033a4:	c1 e5 10             	shl    ebp,0x10
c00033a7:	b9 ff 00 00 00       	mov    ecx,0xff
c00033ac:	29 f9                	sub    ecx,edi
c00033ae:	09 e8                	or     eax,ebp
c00033b0:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c00033b4:	e8 f7 ee ff ff       	call   c00022b0 <put_utf>
c00033b9:	0f b6 c0             	movzx  eax,al
c00033bc:	85 c0                	test   eax,eax
c00033be:	74 10                	je     c00033d0 <get_fileinfo+0x8d>
c00033c0:	01 c7                	add    edi,eax
c00033c2:	31 d2                	xor    edx,edx
c00033c4:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c00033c9:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c00033ce:	eb a9                	jmp    c0003379 <get_fileinfo+0x36>
c00033d0:	31 ff                	xor    edi,edi
c00033d2:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c00033d8:	b8 00 00 00 00       	mov    eax,0x0
c00033dd:	0f 45 f8             	cmovne edi,eax
c00033e0:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00033e5:	31 ff                	xor    edi,edi
c00033e7:	31 c9                	xor    ecx,ecx
c00033e9:	83 f9 0a             	cmp    ecx,0xa
c00033ec:	0f 87 ac 00 00 00    	ja     c000349e <get_fileinfo+0x15b>
c00033f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033f5:	8d 69 01             	lea    ebp,[ecx+0x1]
c00033f8:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00033fc:	83 f8 20             	cmp    eax,0x20
c00033ff:	89 c2                	mov    edx,eax
c0003401:	0f 84 90 00 00 00    	je     c0003497 <get_fileinfo+0x154>
c0003407:	83 f8 05             	cmp    eax,0x5
c000340a:	75 05                	jne    c0003411 <get_fileinfo+0xce>
c000340c:	ba e5 00 00 00       	mov    edx,0xe5
c0003411:	83 fd 09             	cmp    ebp,0x9
c0003414:	75 0b                	jne    c0003421 <get_fileinfo+0xde>
c0003416:	83 ff 0b             	cmp    edi,0xb
c0003419:	77 06                	ja     c0003421 <get_fileinfo+0xde>
c000341b:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003420:	47                   	inc    edi
c0003421:	0f b7 c2             	movzx  eax,dx
c0003424:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003428:	e8 a5 ed ff ff       	call   c00021d2 <dbc_1st>
c000342d:	85 c0                	test   eax,eax
c000342f:	74 2f                	je     c0003460 <get_fileinfo+0x11d>
c0003431:	83 fd 08             	cmp    ebp,0x8
c0003434:	74 2a                	je     c0003460 <get_fileinfo+0x11d>
c0003436:	83 fd 0b             	cmp    ebp,0xb
c0003439:	74 25                	je     c0003460 <get_fileinfo+0x11d>
c000343b:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000343e:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0003442:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003446:	e8 8a ed ff ff       	call   c00021d5 <dbc_2nd>
c000344b:	85 c0                	test   eax,eax
c000344d:	74 11                	je     c0003460 <get_fileinfo+0x11d>
c000344f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003453:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003456:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c000345b:	c1 e0 08             	shl    eax,0x8
c000345e:	09 c2                	or     edx,eax
c0003460:	50                   	push   eax
c0003461:	0f b7 d2             	movzx  edx,dx
c0003464:	50                   	push   eax
c0003465:	68 b5 01 00 00       	push   0x1b5
c000346a:	52                   	push   edx
c000346b:	e8 f4 2b 00 00       	call   c0006064 <ff_oem2uni>
c0003470:	83 c4 10             	add    esp,0x10
c0003473:	0f b7 c0             	movzx  eax,ax
c0003476:	85 c0                	test   eax,eax
c0003478:	75 04                	jne    c000347e <get_fileinfo+0x13b>
c000347a:	31 ff                	xor    edi,edi
c000347c:	eb 20                	jmp    c000349e <get_fileinfo+0x15b>
c000347e:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003482:	b9 0c 00 00 00       	mov    ecx,0xc
c0003487:	29 f9                	sub    ecx,edi
c0003489:	e8 22 ee ff ff       	call   c00022b0 <put_utf>
c000348e:	0f b6 c0             	movzx  eax,al
c0003491:	85 c0                	test   eax,eax
c0003493:	74 e5                	je     c000347a <get_fileinfo+0x137>
c0003495:	01 c7                	add    edi,eax
c0003497:	89 e9                	mov    ecx,ebp
c0003499:	e9 4b ff ff ff       	jmp    c00033e9 <get_fileinfo+0xa6>
c000349e:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c00034a3:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c00034a7:	75 5f                	jne    c0003508 <get_fileinfo+0x1c5>
c00034a9:	85 ff                	test   edi,edi
c00034ab:	75 0b                	jne    c00034b8 <get_fileinfo+0x175>
c00034ad:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c00034b1:	ba 01 00 00 00       	mov    edx,0x1
c00034b6:	eb 3e                	jmp    c00034f6 <get_fileinfo+0x1b3>
c00034b8:	bf 08 00 00 00       	mov    edi,0x8
c00034bd:	31 d2                	xor    edx,edx
c00034bf:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c00034c5:	84 c0                	test   al,al
c00034c7:	74 2d                	je     c00034f6 <get_fileinfo+0x1b3>
c00034c9:	66 83 f8 2e          	cmp    ax,0x2e
c00034cd:	74 1b                	je     c00034ea <get_fileinfo+0x1a7>
c00034cf:	8d 48 bf             	lea    ecx,[eax-0x41]
c00034d2:	66 83 f9 19          	cmp    cx,0x19
c00034d6:	77 17                	ja     c00034ef <get_fileinfo+0x1ac>
c00034d8:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00034db:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c00034de:	21 f9                	and    ecx,edi
c00034e0:	80 e1 18             	and    cl,0x18
c00034e3:	74 0a                	je     c00034ef <get_fileinfo+0x1ac>
c00034e5:	83 c0 20             	add    eax,0x20
c00034e8:	eb 05                	jmp    c00034ef <get_fileinfo+0x1ac>
c00034ea:	bf 10 00 00 00       	mov    edi,0x10
c00034ef:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00034f3:	42                   	inc    edx
c00034f4:	eb c9                	jmp    c00034bf <get_fileinfo+0x17c>
c00034f6:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00034fb:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00034fe:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003502:	75 04                	jne    c0003508 <get_fileinfo+0x1c5>
c0003504:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003508:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000350b:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000350e:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003511:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003514:	83 c0 1c             	add    eax,0x1c
c0003517:	e8 44 ec ff ff       	call   c0002160 <ld_dword>
c000351c:	89 03                	mov    DWORD PTR [ebx],eax
c000351e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003521:	83 c0 16             	add    eax,0x16
c0003524:	e8 2a ec ff ff       	call   c0002153 <ld_word>
c0003529:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c000352d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003530:	83 c0 18             	add    eax,0x18
c0003533:	e8 1b ec ff ff       	call   c0002153 <ld_word>
c0003538:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000353c:	83 c4 1c             	add    esp,0x1c
c000353f:	5b                   	pop    ebx
c0003540:	5e                   	pop    esi
c0003541:	5f                   	pop    edi
c0003542:	5d                   	pop    ebp
c0003543:	c3                   	ret    

c0003544 <ld_clust.isra.0>:
c0003544:	56                   	push   esi
c0003545:	89 c6                	mov    esi,eax
c0003547:	53                   	push   ebx
c0003548:	89 d3                	mov    ebx,edx
c000354a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000354d:	e8 01 ec ff ff       	call   c0002153 <ld_word>
c0003552:	0f b7 c8             	movzx  ecx,ax
c0003555:	89 f0                	mov    eax,esi
c0003557:	3c 03                	cmp    al,0x3
c0003559:	75 0d                	jne    c0003568 <ld_clust.isra.0+0x24>
c000355b:	8d 43 14             	lea    eax,[ebx+0x14]
c000355e:	e8 f0 eb ff ff       	call   c0002153 <ld_word>
c0003563:	c1 e0 10             	shl    eax,0x10
c0003566:	09 c1                	or     ecx,eax
c0003568:	5b                   	pop    ebx
c0003569:	89 c8                	mov    eax,ecx
c000356b:	5e                   	pop    esi
c000356c:	c3                   	ret    

c000356d <st_clust.isra.1>:
c000356d:	56                   	push   esi
c000356e:	89 c6                	mov    esi,eax
c0003570:	53                   	push   ebx
c0003571:	89 d3                	mov    ebx,edx
c0003573:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003576:	0f b7 d1             	movzx  edx,cx
c0003579:	e8 fa eb ff ff       	call   c0002178 <st_word>
c000357e:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003581:	75 0f                	jne    c0003592 <st_clust.isra.1+0x25>
c0003583:	8d 43 14             	lea    eax,[ebx+0x14]
c0003586:	5b                   	pop    ebx
c0003587:	c1 e9 10             	shr    ecx,0x10
c000358a:	89 ca                	mov    edx,ecx
c000358c:	5e                   	pop    esi
c000358d:	e9 e6 eb ff ff       	jmp    c0002178 <st_word>
c0003592:	5b                   	pop    ebx
c0003593:	5e                   	pop    esi
c0003594:	c3                   	ret    

c0003595 <get_fat.isra.2>:
c0003595:	83 fa 01             	cmp    edx,0x1
c0003598:	b9 01 00 00 00       	mov    ecx,0x1
c000359d:	0f 86 f4 00 00 00    	jbe    c0003697 <get_fat.isra.2+0x102>
c00035a3:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c00035a6:	0f 83 eb 00 00 00    	jae    c0003697 <get_fat.isra.2+0x102>
c00035ac:	55                   	push   ebp
c00035ad:	57                   	push   edi
c00035ae:	56                   	push   esi
c00035af:	89 c6                	mov    esi,eax
c00035b1:	53                   	push   ebx
c00035b2:	89 d3                	mov    ebx,edx
c00035b4:	83 ec 0c             	sub    esp,0xc
c00035b7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00035ba:	83 f8 02             	cmp    eax,0x2
c00035bd:	74 79                	je     c0003638 <get_fat.isra.2+0xa3>
c00035bf:	83 f8 03             	cmp    eax,0x3
c00035c2:	0f 84 97 00 00 00    	je     c000365f <get_fat.isra.2+0xca>
c00035c8:	48                   	dec    eax
c00035c9:	0f 85 be 00 00 00    	jne    c000368d <get_fat.isra.2+0xf8>
c00035cf:	89 d7                	mov    edi,edx
c00035d1:	89 f0                	mov    eax,esi
c00035d3:	d1 ef                	shr    edi,1
c00035d5:	01 d7                	add    edi,edx
c00035d7:	89 fa                	mov    edx,edi
c00035d9:	c1 ea 09             	shr    edx,0x9
c00035dc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00035df:	e8 d4 f0 ff ff       	call   c00026b8 <move_window>
c00035e4:	85 c0                	test   eax,eax
c00035e6:	74 08                	je     c00035f0 <get_fat.isra.2+0x5b>
c00035e8:	83 c9 ff             	or     ecx,0xffffffff
c00035eb:	e9 9d 00 00 00       	jmp    c000368d <get_fat.isra.2+0xf8>
c00035f0:	8d 6f 01             	lea    ebp,[edi+0x1]
c00035f3:	89 f0                	mov    eax,esi
c00035f5:	89 ea                	mov    edx,ebp
c00035f7:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00035fd:	c1 ea 09             	shr    edx,0x9
c0003600:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c0003605:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003608:	e8 ab f0 ff ff       	call   c00026b8 <move_window>
c000360d:	85 c0                	test   eax,eax
c000360f:	75 d7                	jne    c00035e8 <get_fat.isra.2+0x53>
c0003611:	89 f8                	mov    eax,edi
c0003613:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003619:	0f b6 f8             	movzx  edi,al
c000361c:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c0003621:	c1 e0 08             	shl    eax,0x8
c0003624:	09 f8                	or     eax,edi
c0003626:	89 c1                	mov    ecx,eax
c0003628:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000362e:	80 e3 01             	and    bl,0x1
c0003631:	74 5a                	je     c000368d <get_fat.isra.2+0xf8>
c0003633:	c1 e8 04             	shr    eax,0x4
c0003636:	eb 53                	jmp    c000368b <get_fat.isra.2+0xf6>
c0003638:	c1 ea 08             	shr    edx,0x8
c000363b:	89 f0                	mov    eax,esi
c000363d:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003640:	e8 73 f0 ff ff       	call   c00026b8 <move_window>
c0003645:	85 c0                	test   eax,eax
c0003647:	75 9f                	jne    c00035e8 <get_fat.isra.2+0x53>
c0003649:	01 db                	add    ebx,ebx
c000364b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0003651:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003655:	e8 f9 ea ff ff       	call   c0002153 <ld_word>
c000365a:	0f b7 c8             	movzx  ecx,ax
c000365d:	eb 2e                	jmp    c000368d <get_fat.isra.2+0xf8>
c000365f:	c1 ea 07             	shr    edx,0x7
c0003662:	89 f0                	mov    eax,esi
c0003664:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003667:	e8 4c f0 ff ff       	call   c00026b8 <move_window>
c000366c:	85 c0                	test   eax,eax
c000366e:	0f 85 74 ff ff ff    	jne    c00035e8 <get_fat.isra.2+0x53>
c0003674:	c1 e3 02             	shl    ebx,0x2
c0003677:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c000367d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003681:	e8 da ea ff ff       	call   c0002160 <ld_dword>
c0003686:	25 ff ff ff 0f       	and    eax,0xfffffff
c000368b:	89 c1                	mov    ecx,eax
c000368d:	83 c4 0c             	add    esp,0xc
c0003690:	89 c8                	mov    eax,ecx
c0003692:	5b                   	pop    ebx
c0003693:	5e                   	pop    esi
c0003694:	5f                   	pop    edi
c0003695:	5d                   	pop    ebp
c0003696:	c3                   	ret    
c0003697:	89 c8                	mov    eax,ecx
c0003699:	c3                   	ret    

c000369a <dir_sdi>:
c000369a:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c00036a0:	0f 87 b6 00 00 00    	ja     c000375c <dir_sdi+0xc2>
c00036a6:	55                   	push   ebp
c00036a7:	57                   	push   edi
c00036a8:	56                   	push   esi
c00036a9:	53                   	push   ebx
c00036aa:	89 d3                	mov    ebx,edx
c00036ac:	83 ec 1c             	sub    esp,0x1c
c00036af:	f6 c2 1f             	test   dl,0x1f
c00036b2:	74 0a                	je     c00036be <dir_sdi+0x24>
c00036b4:	b8 02 00 00 00       	mov    eax,0x2
c00036b9:	e9 96 00 00 00       	jmp    c0003754 <dir_sdi+0xba>
c00036be:	89 c6                	mov    esi,eax
c00036c0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036c2:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c00036c5:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c00036c8:	85 ff                	test   edi,edi
c00036ca:	75 21                	jne    c00036ed <dir_sdi+0x53>
c00036cc:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c00036d0:	76 07                	jbe    c00036d9 <dir_sdi+0x3f>
c00036d2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00036d5:	85 c0                	test   eax,eax
c00036d7:	75 12                	jne    c00036eb <dir_sdi+0x51>
c00036d9:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00036dd:	89 da                	mov    edx,ebx
c00036df:	c1 ea 05             	shr    edx,0x5
c00036e2:	39 c2                	cmp    edx,eax
c00036e4:	73 ce                	jae    c00036b4 <dir_sdi+0x1a>
c00036e6:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00036e9:	eb 3c                	jmp    c0003727 <dir_sdi+0x8d>
c00036eb:	89 c7                	mov    edi,eax
c00036ed:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00036f1:	c1 e1 09             	shl    ecx,0x9
c00036f4:	39 cb                	cmp    ebx,ecx
c00036f6:	72 26                	jb     c000371e <dir_sdi+0x84>
c00036f8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036fc:	8b 06                	mov    eax,DWORD PTR [esi]
c00036fe:	89 fa                	mov    edx,edi
c0003700:	e8 90 fe ff ff       	call   c0003595 <get_fat.isra.2>
c0003705:	83 f8 ff             	cmp    eax,0xffffffff
c0003708:	89 c7                	mov    edi,eax
c000370a:	74 43                	je     c000374f <dir_sdi+0xb5>
c000370c:	83 f8 01             	cmp    eax,0x1
c000370f:	76 a3                	jbe    c00036b4 <dir_sdi+0x1a>
c0003711:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003714:	76 9e                	jbe    c00036b4 <dir_sdi+0x1a>
c0003716:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000371a:	29 cb                	sub    ebx,ecx
c000371c:	eb d6                	jmp    c00036f4 <dir_sdi+0x5a>
c000371e:	89 fa                	mov    edx,edi
c0003720:	89 e8                	mov    eax,ebp
c0003722:	e8 82 ec ff ff       	call   c00023a9 <clst2sect>
c0003727:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000372a:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c000372d:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003730:	85 d2                	test   edx,edx
c0003732:	74 80                	je     c00036b4 <dir_sdi+0x1a>
c0003734:	89 d8                	mov    eax,ebx
c0003736:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000373c:	c1 e8 09             	shr    eax,0x9
c000373f:	01 d0                	add    eax,edx
c0003741:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003744:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003748:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000374b:	31 c0                	xor    eax,eax
c000374d:	eb 05                	jmp    c0003754 <dir_sdi+0xba>
c000374f:	b8 01 00 00 00       	mov    eax,0x1
c0003754:	83 c4 1c             	add    esp,0x1c
c0003757:	5b                   	pop    ebx
c0003758:	5e                   	pop    esi
c0003759:	5f                   	pop    edi
c000375a:	5d                   	pop    ebp
c000375b:	c3                   	ret    
c000375c:	b8 02 00 00 00       	mov    eax,0x2
c0003761:	c3                   	ret    

c0003762 <create_chain>:
c0003762:	55                   	push   ebp
c0003763:	89 c5                	mov    ebp,eax
c0003765:	57                   	push   edi
c0003766:	89 d7                	mov    edi,edx
c0003768:	56                   	push   esi
c0003769:	53                   	push   ebx
c000376a:	83 ec 1c             	sub    esp,0x1c
c000376d:	85 d2                	test   edx,edx
c000376f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003771:	75 0e                	jne    c0003781 <create_chain+0x1f>
c0003773:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003776:	85 c9                	test   ecx,ecx
c0003778:	74 32                	je     c00037ac <create_chain+0x4a>
c000377a:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000377d:	77 32                	ja     c00037b1 <create_chain+0x4f>
c000377f:	eb 2b                	jmp    c00037ac <create_chain+0x4a>
c0003781:	89 d8                	mov    eax,ebx
c0003783:	e8 0d fe ff ff       	call   c0003595 <get_fat.isra.2>
c0003788:	83 f8 01             	cmp    eax,0x1
c000378b:	77 0a                	ja     c0003797 <create_chain+0x35>
c000378d:	b8 01 00 00 00       	mov    eax,0x1
c0003792:	e9 fd 00 00 00       	jmp    c0003894 <create_chain+0x132>
c0003797:	83 f8 ff             	cmp    eax,0xffffffff
c000379a:	0f 84 f1 00 00 00    	je     c0003891 <create_chain+0x12f>
c00037a0:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00037a3:	89 f9                	mov    ecx,edi
c00037a5:	76 0a                	jbe    c00037b1 <create_chain+0x4f>
c00037a7:	e9 e8 00 00 00       	jmp    c0003894 <create_chain+0x132>
c00037ac:	b9 01 00 00 00       	mov    ecx,0x1
c00037b1:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00037b5:	75 07                	jne    c00037be <create_chain+0x5c>
c00037b7:	31 c0                	xor    eax,eax
c00037b9:	e9 d6 00 00 00       	jmp    c0003894 <create_chain+0x132>
c00037be:	39 f9                	cmp    ecx,edi
c00037c0:	75 49                	jne    c000380b <create_chain+0xa9>
c00037c2:	8d 71 01             	lea    esi,[ecx+0x1]
c00037c5:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00037c8:	77 05                	ja     c00037cf <create_chain+0x6d>
c00037ca:	be 02 00 00 00       	mov    esi,0x2
c00037cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00037d3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00037d6:	89 f2                	mov    edx,esi
c00037d8:	e8 b8 fd ff ff       	call   c0003595 <get_fat.isra.2>
c00037dd:	83 f8 01             	cmp    eax,0x1
c00037e0:	0f 84 ae 00 00 00    	je     c0003894 <create_chain+0x132>
c00037e6:	83 f8 ff             	cmp    eax,0xffffffff
c00037e9:	0f 84 a5 00 00 00    	je     c0003894 <create_chain+0x132>
c00037ef:	85 c0                	test   eax,eax
c00037f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00037f5:	74 10                	je     c0003807 <create_chain+0xa5>
c00037f7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037fa:	83 f8 01             	cmp    eax,0x1
c00037fd:	76 0c                	jbe    c000380b <create_chain+0xa9>
c00037ff:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003802:	0f 47 c8             	cmova  ecx,eax
c0003805:	eb 04                	jmp    c000380b <create_chain+0xa9>
c0003807:	85 f6                	test   esi,esi
c0003809:	75 3b                	jne    c0003846 <create_chain+0xe4>
c000380b:	89 ce                	mov    esi,ecx
c000380d:	46                   	inc    esi
c000380e:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003811:	77 0a                	ja     c000381d <create_chain+0xbb>
c0003813:	83 f9 01             	cmp    ecx,0x1
c0003816:	76 9f                	jbe    c00037b7 <create_chain+0x55>
c0003818:	be 02 00 00 00       	mov    esi,0x2
c000381d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003821:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003824:	89 f2                	mov    edx,esi
c0003826:	e8 6a fd ff ff       	call   c0003595 <get_fat.isra.2>
c000382b:	85 c0                	test   eax,eax
c000382d:	74 17                	je     c0003846 <create_chain+0xe4>
c000382f:	83 f8 01             	cmp    eax,0x1
c0003832:	74 60                	je     c0003894 <create_chain+0x132>
c0003834:	83 f8 ff             	cmp    eax,0xffffffff
c0003837:	74 5b                	je     c0003894 <create_chain+0x132>
c0003839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000383d:	39 ce                	cmp    esi,ecx
c000383f:	75 cc                	jne    c000380d <create_chain+0xab>
c0003841:	e9 71 ff ff ff       	jmp    c00037b7 <create_chain+0x55>
c0003846:	83 c9 ff             	or     ecx,0xffffffff
c0003849:	89 f2                	mov    edx,esi
c000384b:	89 d8                	mov    eax,ebx
c000384d:	e8 c0 f2 ff ff       	call   c0002b12 <put_fat>
c0003852:	85 c0                	test   eax,eax
c0003854:	75 0f                	jne    c0003865 <create_chain+0x103>
c0003856:	85 ff                	test   edi,edi
c0003858:	74 0b                	je     c0003865 <create_chain+0x103>
c000385a:	89 f1                	mov    ecx,esi
c000385c:	89 fa                	mov    edx,edi
c000385e:	89 d8                	mov    eax,ebx
c0003860:	e8 ad f2 ff ff       	call   c0002b12 <put_fat>
c0003865:	85 c0                	test   eax,eax
c0003867:	75 21                	jne    c000388a <create_chain+0x128>
c0003869:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000386c:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000386f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003872:	8d 57 fe             	lea    edx,[edi-0x2]
c0003875:	39 d0                	cmp    eax,edx
c0003877:	77 04                	ja     c000387d <create_chain+0x11b>
c0003879:	48                   	dec    eax
c000387a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000387d:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003880:	83 c8 01             	or     eax,0x1
c0003883:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003886:	89 f0                	mov    eax,esi
c0003888:	eb 0a                	jmp    c0003894 <create_chain+0x132>
c000388a:	48                   	dec    eax
c000388b:	0f 85 fc fe ff ff    	jne    c000378d <create_chain+0x2b>
c0003891:	83 c8 ff             	or     eax,0xffffffff
c0003894:	83 c4 1c             	add    esp,0x1c
c0003897:	5b                   	pop    ebx
c0003898:	5e                   	pop    esi
c0003899:	5f                   	pop    edi
c000389a:	5d                   	pop    ebp
c000389b:	c3                   	ret    

c000389c <remove_chain>:
c000389c:	55                   	push   ebp
c000389d:	57                   	push   edi
c000389e:	56                   	push   esi
c000389f:	89 d6                	mov    esi,edx
c00038a1:	53                   	push   ebx
c00038a2:	83 ec 0c             	sub    esp,0xc
c00038a5:	83 fa 01             	cmp    edx,0x1
c00038a8:	8b 18                	mov    ebx,DWORD PTR [eax]
c00038aa:	76 6a                	jbe    c0003916 <remove_chain+0x7a>
c00038ac:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c00038af:	76 65                	jbe    c0003916 <remove_chain+0x7a>
c00038b1:	85 c9                	test   ecx,ecx
c00038b3:	89 c5                	mov    ebp,eax
c00038b5:	89 ca                	mov    edx,ecx
c00038b7:	74 0e                	je     c00038c7 <remove_chain+0x2b>
c00038b9:	83 c9 ff             	or     ecx,0xffffffff
c00038bc:	89 d8                	mov    eax,ebx
c00038be:	e8 4f f2 ff ff       	call   c0002b12 <put_fat>
c00038c3:	85 c0                	test   eax,eax
c00038c5:	75 5b                	jne    c0003922 <remove_chain+0x86>
c00038c7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00038ca:	89 f2                	mov    edx,esi
c00038cc:	e8 c4 fc ff ff       	call   c0003595 <get_fat.isra.2>
c00038d1:	85 c0                	test   eax,eax
c00038d3:	89 c7                	mov    edi,eax
c00038d5:	75 04                	jne    c00038db <remove_chain+0x3f>
c00038d7:	31 c0                	xor    eax,eax
c00038d9:	eb 47                	jmp    c0003922 <remove_chain+0x86>
c00038db:	83 f8 01             	cmp    eax,0x1
c00038de:	74 36                	je     c0003916 <remove_chain+0x7a>
c00038e0:	83 f8 ff             	cmp    eax,0xffffffff
c00038e3:	74 38                	je     c000391d <remove_chain+0x81>
c00038e5:	31 c9                	xor    ecx,ecx
c00038e7:	89 f2                	mov    edx,esi
c00038e9:	89 d8                	mov    eax,ebx
c00038eb:	e8 22 f2 ff ff       	call   c0002b12 <put_fat>
c00038f0:	85 c0                	test   eax,eax
c00038f2:	75 2e                	jne    c0003922 <remove_chain+0x86>
c00038f4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038f7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00038fa:	8d 4a fe             	lea    ecx,[edx-0x2]
c00038fd:	39 c8                	cmp    eax,ecx
c00038ff:	73 0d                	jae    c000390e <remove_chain+0x72>
c0003901:	40                   	inc    eax
c0003902:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003905:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003908:	83 c8 01             	or     eax,0x1
c000390b:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000390e:	39 fa                	cmp    edx,edi
c0003910:	89 fe                	mov    esi,edi
c0003912:	77 b3                	ja     c00038c7 <remove_chain+0x2b>
c0003914:	eb c1                	jmp    c00038d7 <remove_chain+0x3b>
c0003916:	b8 02 00 00 00       	mov    eax,0x2
c000391b:	eb 05                	jmp    c0003922 <remove_chain+0x86>
c000391d:	b8 01 00 00 00       	mov    eax,0x1
c0003922:	83 c4 0c             	add    esp,0xc
c0003925:	5b                   	pop    ebx
c0003926:	5e                   	pop    esi
c0003927:	5f                   	pop    edi
c0003928:	5d                   	pop    ebp
c0003929:	c3                   	ret    

c000392a <dir_next>:
c000392a:	55                   	push   ebp
c000392b:	57                   	push   edi
c000392c:	56                   	push   esi
c000392d:	53                   	push   ebx
c000392e:	83 ec 1c             	sub    esp,0x1c
c0003931:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003934:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003936:	83 c7 20             	add    edi,0x20
c0003939:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c000393f:	76 07                	jbe    c0003948 <dir_next+0x1e>
c0003941:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003948:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c000394b:	b9 04 00 00 00       	mov    ecx,0x4
c0003950:	85 f6                	test   esi,esi
c0003952:	0f 84 cd 00 00 00    	je     c0003a25 <dir_next+0xfb>
c0003958:	89 c3                	mov    ebx,eax
c000395a:	89 f8                	mov    eax,edi
c000395c:	25 ff 01 00 00       	and    eax,0x1ff
c0003961:	89 d1                	mov    ecx,edx
c0003963:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003967:	0f 85 a8 00 00 00    	jne    c0003a15 <dir_next+0xeb>
c000396d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003970:	46                   	inc    esi
c0003971:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003974:	85 d2                	test   edx,edx
c0003976:	75 22                	jne    c000399a <dir_next+0x70>
c0003978:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000397c:	89 fa                	mov    edx,edi
c000397e:	c1 ea 05             	shr    edx,0x5
c0003981:	39 c2                	cmp    edx,eax
c0003983:	0f 82 8c 00 00 00    	jb     c0003a15 <dir_next+0xeb>
c0003989:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003990:	b9 04 00 00 00       	mov    ecx,0x4
c0003995:	e9 8b 00 00 00       	jmp    c0003a25 <dir_next+0xfb>
c000399a:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000399e:	89 fe                	mov    esi,edi
c00039a0:	c1 ee 09             	shr    esi,0x9
c00039a3:	48                   	dec    eax
c00039a4:	85 f0                	test   eax,esi
c00039a6:	75 6d                	jne    c0003a15 <dir_next+0xeb>
c00039a8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00039ac:	89 e8                	mov    eax,ebp
c00039ae:	e8 e2 fb ff ff       	call   c0003595 <get_fat.isra.2>
c00039b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00039b7:	83 f8 01             	cmp    eax,0x1
c00039ba:	89 c6                	mov    esi,eax
c00039bc:	77 07                	ja     c00039c5 <dir_next+0x9b>
c00039be:	b9 02 00 00 00       	mov    ecx,0x2
c00039c3:	eb 60                	jmp    c0003a25 <dir_next+0xfb>
c00039c5:	83 f8 ff             	cmp    eax,0xffffffff
c00039c8:	75 07                	jne    c00039d1 <dir_next+0xa7>
c00039ca:	b9 01 00 00 00       	mov    ecx,0x1
c00039cf:	eb 54                	jmp    c0003a25 <dir_next+0xfb>
c00039d1:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00039d4:	77 30                	ja     c0003a06 <dir_next+0xdc>
c00039d6:	85 c9                	test   ecx,ecx
c00039d8:	74 af                	je     c0003989 <dir_next+0x5f>
c00039da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00039dd:	89 d8                	mov    eax,ebx
c00039df:	e8 7e fd ff ff       	call   c0003762 <create_chain>
c00039e4:	b9 07 00 00 00       	mov    ecx,0x7
c00039e9:	85 c0                	test   eax,eax
c00039eb:	89 c6                	mov    esi,eax
c00039ed:	74 36                	je     c0003a25 <dir_next+0xfb>
c00039ef:	83 f8 01             	cmp    eax,0x1
c00039f2:	74 ca                	je     c00039be <dir_next+0x94>
c00039f4:	83 f8 ff             	cmp    eax,0xffffffff
c00039f7:	74 d1                	je     c00039ca <dir_next+0xa0>
c00039f9:	89 c2                	mov    edx,eax
c00039fb:	89 e8                	mov    eax,ebp
c00039fd:	e8 67 f2 ff ff       	call   c0002c69 <dir_clear>
c0003a02:	85 c0                	test   eax,eax
c0003a04:	75 c4                	jne    c00039ca <dir_next+0xa0>
c0003a06:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003a09:	89 f2                	mov    edx,esi
c0003a0b:	89 e8                	mov    eax,ebp
c0003a0d:	e8 97 e9 ff ff       	call   c00023a9 <clst2sect>
c0003a12:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003a15:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a1c:	31 c9                	xor    ecx,ecx
c0003a1e:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003a22:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003a25:	83 c4 1c             	add    esp,0x1c
c0003a28:	89 c8                	mov    eax,ecx
c0003a2a:	5b                   	pop    ebx
c0003a2b:	5e                   	pop    esi
c0003a2c:	5f                   	pop    edi
c0003a2d:	5d                   	pop    ebp
c0003a2e:	c3                   	ret    

c0003a2f <dir_alloc>:
c0003a2f:	55                   	push   ebp
c0003a30:	89 c5                	mov    ebp,eax
c0003a32:	57                   	push   edi
c0003a33:	89 d7                	mov    edi,edx
c0003a35:	56                   	push   esi
c0003a36:	31 d2                	xor    edx,edx
c0003a38:	53                   	push   ebx
c0003a39:	83 ec 0c             	sub    esp,0xc
c0003a3c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a3e:	e8 57 fc ff ff       	call   c000369a <dir_sdi>
c0003a43:	85 c0                	test   eax,eax
c0003a45:	75 3b                	jne    c0003a82 <dir_alloc+0x53>
c0003a47:	31 db                	xor    ebx,ebx
c0003a49:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003a4c:	89 f0                	mov    eax,esi
c0003a4e:	e8 65 ec ff ff       	call   c00026b8 <move_window>
c0003a53:	85 c0                	test   eax,eax
c0003a55:	75 2b                	jne    c0003a82 <dir_alloc+0x53>
c0003a57:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003a5a:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003a5d:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003a63:	74 04                	je     c0003a69 <dir_alloc+0x3a>
c0003a65:	85 d2                	test   edx,edx
c0003a67:	75 07                	jne    c0003a70 <dir_alloc+0x41>
c0003a69:	43                   	inc    ebx
c0003a6a:	39 fb                	cmp    ebx,edi
c0003a6c:	75 04                	jne    c0003a72 <dir_alloc+0x43>
c0003a6e:	eb 1c                	jmp    c0003a8c <dir_alloc+0x5d>
c0003a70:	31 db                	xor    ebx,ebx
c0003a72:	ba 01 00 00 00       	mov    edx,0x1
c0003a77:	89 e8                	mov    eax,ebp
c0003a79:	e8 ac fe ff ff       	call   c000392a <dir_next>
c0003a7e:	85 c0                	test   eax,eax
c0003a80:	74 c7                	je     c0003a49 <dir_alloc+0x1a>
c0003a82:	83 f8 04             	cmp    eax,0x4
c0003a85:	75 05                	jne    c0003a8c <dir_alloc+0x5d>
c0003a87:	b8 07 00 00 00       	mov    eax,0x7
c0003a8c:	83 c4 0c             	add    esp,0xc
c0003a8f:	5b                   	pop    ebx
c0003a90:	5e                   	pop    esi
c0003a91:	5f                   	pop    edi
c0003a92:	5d                   	pop    ebp
c0003a93:	c3                   	ret    

c0003a94 <dir_read>:
c0003a94:	55                   	push   ebp
c0003a95:	57                   	push   edi
c0003a96:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a9b:	56                   	push   esi
c0003a9c:	be 04 00 00 00       	mov    esi,0x4
c0003aa1:	53                   	push   ebx
c0003aa2:	89 c3                	mov    ebx,eax
c0003aa4:	83 ec 1c             	sub    esp,0x1c
c0003aa7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003aab:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003aad:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003ab2:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab5:	85 d2                	test   edx,edx
c0003ab7:	0f 84 e3 00 00 00    	je     c0003ba0 <dir_read+0x10c>
c0003abd:	89 e8                	mov    eax,ebp
c0003abf:	e8 f4 eb ff ff       	call   c00026b8 <move_window>
c0003ac4:	85 c0                	test   eax,eax
c0003ac6:	89 c6                	mov    esi,eax
c0003ac8:	0f 85 dd 00 00 00    	jne    c0003bab <dir_read+0x117>
c0003ace:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003ad1:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003ad4:	88 04 24             	mov    BYTE PTR [esp],al
c0003ad7:	85 c0                	test   eax,eax
c0003ad9:	0f 84 c7 00 00 00    	je     c0003ba6 <dir_read+0x112>
c0003adf:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003ae2:	83 e1 3f             	and    ecx,0x3f
c0003ae5:	3d e5 00 00 00       	cmp    eax,0xe5
c0003aea:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003aed:	0f 84 93 00 00 00    	je     c0003b86 <dir_read+0xf2>
c0003af3:	83 f8 2e             	cmp    eax,0x2e
c0003af6:	0f 84 8a 00 00 00    	je     c0003b86 <dir_read+0xf2>
c0003afc:	0f b6 c9             	movzx  ecx,cl
c0003aff:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003b03:	83 e1 df             	and    ecx,0xffffffdf
c0003b06:	83 f9 08             	cmp    ecx,0x8
c0003b09:	0f 94 c1             	sete   cl
c0003b0c:	0f b6 c9             	movzx  ecx,cl
c0003b0f:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003b13:	75 71                	jne    c0003b86 <dir_read+0xf2>
c0003b15:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003b1a:	75 4a                	jne    c0003b66 <dir_read+0xd2>
c0003b1c:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c0003b20:	74 16                	je     c0003b38 <dir_read+0xa4>
c0003b22:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003b25:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003b2c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003b30:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b33:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b36:	eb 0e                	jmp    c0003b46 <dir_read+0xb2>
c0003b38:	89 f9                	mov    ecx,edi
c0003b3a:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b3f:	0f b6 c9             	movzx  ecx,cl
c0003b42:	39 c1                	cmp    ecx,eax
c0003b44:	75 45                	jne    c0003b8b <dir_read+0xf7>
c0003b46:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b4a:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b4f:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c0003b52:	75 37                	jne    c0003b8b <dir_read+0xf7>
c0003b54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003b57:	e8 6a e8 ff ff       	call   c00023c6 <pick_lfn>
c0003b5c:	85 c0                	test   eax,eax
c0003b5e:	74 2b                	je     c0003b8b <dir_read+0xf7>
c0003b60:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003b63:	4f                   	dec    edi
c0003b64:	eb 25                	jmp    c0003b8b <dir_read+0xf7>
c0003b66:	89 f8                	mov    eax,edi
c0003b68:	84 c0                	test   al,al
c0003b6a:	75 11                	jne    c0003b7d <dir_read+0xe9>
c0003b6c:	89 d0                	mov    eax,edx
c0003b6e:	e8 30 ea ff ff       	call   c00025a3 <sum_sfn>
c0003b73:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003b77:	75 04                	jne    c0003b7d <dir_read+0xe9>
c0003b79:	31 f6                	xor    esi,esi
c0003b7b:	eb 35                	jmp    c0003bb2 <dir_read+0x11e>
c0003b7d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b84:	eb 2c                	jmp    c0003bb2 <dir_read+0x11e>
c0003b86:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b8b:	31 d2                	xor    edx,edx
c0003b8d:	89 d8                	mov    eax,ebx
c0003b8f:	e8 96 fd ff ff       	call   c000392a <dir_next>
c0003b94:	85 c0                	test   eax,eax
c0003b96:	89 c6                	mov    esi,eax
c0003b98:	0f 84 14 ff ff ff    	je     c0003ab2 <dir_read+0x1e>
c0003b9e:	eb 0b                	jmp    c0003bab <dir_read+0x117>
c0003ba0:	85 f6                	test   esi,esi
c0003ba2:	74 d5                	je     c0003b79 <dir_read+0xe5>
c0003ba4:	eb 05                	jmp    c0003bab <dir_read+0x117>
c0003ba6:	be 04 00 00 00       	mov    esi,0x4
c0003bab:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003bb2:	83 c4 1c             	add    esp,0x1c
c0003bb5:	89 f0                	mov    eax,esi
c0003bb7:	5b                   	pop    ebx
c0003bb8:	5e                   	pop    esi
c0003bb9:	5f                   	pop    edi
c0003bba:	5d                   	pop    ebp
c0003bbb:	c3                   	ret    

c0003bbc <dir_remove>:
c0003bbc:	57                   	push   edi
c0003bbd:	56                   	push   esi
c0003bbe:	53                   	push   ebx
c0003bbf:	89 c3                	mov    ebx,eax
c0003bc1:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003bc4:	8b 30                	mov    esi,DWORD PTR [eax]
c0003bc6:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003bc9:	83 fa ff             	cmp    edx,0xffffffff
c0003bcc:	74 09                	je     c0003bd7 <dir_remove+0x1b>
c0003bce:	e8 c7 fa ff ff       	call   c000369a <dir_sdi>
c0003bd3:	85 c0                	test   eax,eax
c0003bd5:	75 34                	jne    c0003c0b <dir_remove+0x4f>
c0003bd7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bda:	89 f0                	mov    eax,esi
c0003bdc:	e8 d7 ea ff ff       	call   c00026b8 <move_window>
c0003be1:	85 c0                	test   eax,eax
c0003be3:	75 1c                	jne    c0003c01 <dir_remove+0x45>
c0003be5:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be8:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003beb:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003bef:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003bf2:	73 17                	jae    c0003c0b <dir_remove+0x4f>
c0003bf4:	31 d2                	xor    edx,edx
c0003bf6:	89 d8                	mov    eax,ebx
c0003bf8:	e8 2d fd ff ff       	call   c000392a <dir_next>
c0003bfd:	85 c0                	test   eax,eax
c0003bff:	74 d6                	je     c0003bd7 <dir_remove+0x1b>
c0003c01:	83 f8 04             	cmp    eax,0x4
c0003c04:	75 05                	jne    c0003c0b <dir_remove+0x4f>
c0003c06:	b8 02 00 00 00       	mov    eax,0x2
c0003c0b:	5b                   	pop    ebx
c0003c0c:	5e                   	pop    esi
c0003c0d:	5f                   	pop    edi
c0003c0e:	c3                   	ret    

c0003c0f <dir_find>:
c0003c0f:	55                   	push   ebp
c0003c10:	31 d2                	xor    edx,edx
c0003c12:	57                   	push   edi
c0003c13:	56                   	push   esi
c0003c14:	53                   	push   ebx
c0003c15:	89 c3                	mov    ebx,eax
c0003c17:	83 ec 1c             	sub    esp,0x1c
c0003c1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0003c1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c20:	89 d8                	mov    eax,ebx
c0003c22:	e8 73 fa ff ff       	call   c000369a <dir_sdi>
c0003c27:	85 c0                	test   eax,eax
c0003c29:	89 c6                	mov    esi,eax
c0003c2b:	0f 85 22 01 00 00    	jne    c0003d53 <dir_find+0x144>
c0003c31:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003c38:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003c3d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003c42:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003c45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c49:	e8 6a ea ff ff       	call   c00026b8 <move_window>
c0003c4e:	85 c0                	test   eax,eax
c0003c50:	89 c6                	mov    esi,eax
c0003c52:	0f 85 fb 00 00 00    	jne    c0003d53 <dir_find+0x144>
c0003c58:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003c5b:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	89 d1                	mov    ecx,edx
c0003c62:	0f 84 e6 00 00 00    	je     c0003d4e <dir_find+0x13f>
c0003c68:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003c6b:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003c6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c73:	83 e0 3f             	and    eax,0x3f
c0003c76:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003c7c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003c7f:	0f 84 a8 00 00 00    	je     c0003d2d <dir_find+0x11e>
c0003c85:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003c8a:	0f b6 c0             	movzx  eax,al
c0003c8d:	74 0b                	je     c0003c9a <dir_find+0x8b>
c0003c8f:	83 f8 0f             	cmp    eax,0xf
c0003c92:	0f 85 95 00 00 00    	jne    c0003d2d <dir_find+0x11e>
c0003c98:	eb 05                	jmp    c0003c9f <dir_find+0x90>
c0003c9a:	83 f8 0f             	cmp    eax,0xf
c0003c9d:	75 62                	jne    c0003d01 <dir_find+0xf2>
c0003c9f:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003ca3:	0f 85 90 00 00 00    	jne    c0003d39 <dir_find+0x12a>
c0003ca9:	f6 c1 40             	test   cl,0x40
c0003cac:	74 15                	je     c0003cc3 <dir_find+0xb4>
c0003cae:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003cb1:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003cb7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003cbb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003cbe:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003cc1:	eb 11                	jmp    c0003cd4 <dir_find+0xc5>
c0003cc3:	89 e8                	mov    eax,ebp
c0003cc5:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003cca:	0f b6 d0             	movzx  edx,al
c0003ccd:	0f b6 c1             	movzx  eax,cl
c0003cd0:	39 c2                	cmp    edx,eax
c0003cd2:	75 65                	jne    c0003d39 <dir_find+0x12a>
c0003cd4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003cd8:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003cdd:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003ce0:	75 57                	jne    c0003d39 <dir_find+0x12a>
c0003ce2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ce6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cea:	89 fa                	mov    edx,edi
c0003cec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cef:	e8 2c f3 ff ff       	call   c0003020 <cmp_lfn>
c0003cf4:	85 c0                	test   eax,eax
c0003cf6:	74 41                	je     c0003d39 <dir_find+0x12a>
c0003cf8:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003cfc:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003cff:	eb 38                	jmp    c0003d39 <dir_find+0x12a>
c0003d01:	89 e8                	mov    eax,ebp
c0003d03:	84 c0                	test   al,al
c0003d05:	75 0d                	jne    c0003d14 <dir_find+0x105>
c0003d07:	89 f8                	mov    eax,edi
c0003d09:	e8 95 e8 ff ff       	call   c00025a3 <sum_sfn>
c0003d0e:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003d12:	74 3f                	je     c0003d53 <dir_find+0x144>
c0003d14:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003d18:	75 13                	jne    c0003d2d <dir_find+0x11e>
c0003d1a:	8d 53 20             	lea    edx,[ebx+0x20]
c0003d1d:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d22:	89 f8                	mov    eax,edi
c0003d24:	e8 75 e4 ff ff       	call   c000219e <mem_cmp>
c0003d29:	85 c0                	test   eax,eax
c0003d2b:	74 26                	je     c0003d53 <dir_find+0x144>
c0003d2d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003d34:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003d39:	31 d2                	xor    edx,edx
c0003d3b:	89 d8                	mov    eax,ebx
c0003d3d:	e8 e8 fb ff ff       	call   c000392a <dir_next>
c0003d42:	85 c0                	test   eax,eax
c0003d44:	89 c6                	mov    esi,eax
c0003d46:	0f 84 f6 fe ff ff    	je     c0003c42 <dir_find+0x33>
c0003d4c:	eb 05                	jmp    c0003d53 <dir_find+0x144>
c0003d4e:	be 04 00 00 00       	mov    esi,0x4
c0003d53:	83 c4 1c             	add    esp,0x1c
c0003d56:	89 f0                	mov    eax,esi
c0003d58:	5b                   	pop    ebx
c0003d59:	5e                   	pop    esi
c0003d5a:	5f                   	pop    edi
c0003d5b:	5d                   	pop    ebp
c0003d5c:	c3                   	ret    

c0003d5d <follow_path>:
c0003d5d:	56                   	push   esi
c0003d5e:	53                   	push   ebx
c0003d5f:	89 c3                	mov    ebx,eax
c0003d61:	83 ec 14             	sub    esp,0x14
c0003d64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003d68:	8b 30                	mov    esi,DWORD PTR [eax]
c0003d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d6e:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003d71:	83 fa 2f             	cmp    edx,0x2f
c0003d74:	75 07                	jne    c0003d7d <follow_path+0x20>
c0003d76:	40                   	inc    eax
c0003d77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d7b:	eb ed                	jmp    c0003d6a <follow_path+0xd>
c0003d7d:	83 fa 5c             	cmp    edx,0x5c
c0003d80:	74 f4                	je     c0003d76 <follow_path+0x19>
c0003d82:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003d89:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003d8c:	77 3e                	ja     c0003dcc <follow_path+0x6f>
c0003d8e:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003d92:	31 d2                	xor    edx,edx
c0003d94:	89 d8                	mov    eax,ebx
c0003d96:	e8 ff f8 ff ff       	call   c000369a <dir_sdi>
c0003d9b:	eb 57                	jmp    c0003df4 <follow_path+0x97>
c0003d9d:	89 d8                	mov    eax,ebx
c0003d9f:	e8 6b fe ff ff       	call   c0003c0f <dir_find>
c0003da4:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003da7:	85 c0                	test   eax,eax
c0003da9:	75 32                	jne    c0003ddd <follow_path+0x80>
c0003dab:	80 e2 04             	and    dl,0x4
c0003dae:	75 44                	jne    c0003df4 <follow_path+0x97>
c0003db0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003db4:	74 39                	je     c0003def <follow_path+0x92>
c0003db6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003db9:	25 ff 01 00 00       	and    eax,0x1ff
c0003dbe:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003dc2:	8a 06                	mov    al,BYTE PTR [esi]
c0003dc4:	e8 7b f7 ff ff       	call   c0003544 <ld_clust.isra.0>
c0003dc9:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003dcc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003dd0:	89 d8                	mov    eax,ebx
c0003dd2:	e8 8e ef ff ff       	call   c0002d65 <create_name>
c0003dd7:	85 c0                	test   eax,eax
c0003dd9:	74 c2                	je     c0003d9d <follow_path+0x40>
c0003ddb:	eb 17                	jmp    c0003df4 <follow_path+0x97>
c0003ddd:	83 f8 04             	cmp    eax,0x4
c0003de0:	75 12                	jne    c0003df4 <follow_path+0x97>
c0003de2:	80 e2 04             	and    dl,0x4
c0003de5:	ba 05 00 00 00       	mov    edx,0x5
c0003dea:	0f 44 c2             	cmove  eax,edx
c0003ded:	eb 05                	jmp    c0003df4 <follow_path+0x97>
c0003def:	b8 05 00 00 00       	mov    eax,0x5
c0003df4:	83 c4 14             	add    esp,0x14
c0003df7:	5b                   	pop    ebx
c0003df8:	5e                   	pop    esi
c0003df9:	c3                   	ret    

c0003dfa <dir_register>:
c0003dfa:	55                   	push   ebp
c0003dfb:	57                   	push   edi
c0003dfc:	56                   	push   esi
c0003dfd:	be 06 00 00 00       	mov    esi,0x6
c0003e02:	53                   	push   ebx
c0003e03:	83 ec 2c             	sub    esp,0x2c
c0003e06:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003e09:	80 e2 a0             	and    dl,0xa0
c0003e0c:	0f 85 66 01 00 00    	jne    c0003f78 <dir_register+0x17e>
c0003e12:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003e1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003e1c:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003e1f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e23:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003e28:	74 06                	je     c0003e30 <dir_register+0x36>
c0003e2a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003e2e:	eb ef                	jmp    c0003e1f <dir_register+0x25>
c0003e30:	89 c3                	mov    ebx,eax
c0003e32:	b9 0c 00 00 00       	mov    ecx,0xc
c0003e37:	8d 40 20             	lea    eax,[eax+0x20]
c0003e3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e3e:	89 c2                	mov    edx,eax
c0003e40:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003e44:	e8 36 e3 ff ff       	call   c000217f <mem_cpy>
c0003e49:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003e4e:	74 48                	je     c0003e98 <dir_register+0x9e>
c0003e50:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003e54:	bd 01 00 00 00       	mov    ebp,0x1
c0003e59:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003e5c:	55                   	push   ebp
c0003e5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003e61:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003e65:	e8 77 e6 ff ff       	call   c00024e1 <gen_numname>
c0003e6a:	58                   	pop    eax
c0003e6b:	89 d8                	mov    eax,ebx
c0003e6d:	e8 9d fd ff ff       	call   c0003c0f <dir_find>
c0003e72:	85 c0                	test   eax,eax
c0003e74:	89 c6                	mov    esi,eax
c0003e76:	75 10                	jne    c0003e88 <dir_register+0x8e>
c0003e78:	45                   	inc    ebp
c0003e79:	83 fd 64             	cmp    ebp,0x64
c0003e7c:	75 db                	jne    c0003e59 <dir_register+0x5f>
c0003e7e:	be 07 00 00 00       	mov    esi,0x7
c0003e83:	e9 f0 00 00 00       	jmp    c0003f78 <dir_register+0x17e>
c0003e88:	83 f8 04             	cmp    eax,0x4
c0003e8b:	0f 85 e7 00 00 00    	jne    c0003f78 <dir_register+0x17e>
c0003e91:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003e95:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003e98:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003e9d:	bd 01 00 00 00       	mov    ebp,0x1
c0003ea2:	74 13                	je     c0003eb7 <dir_register+0xbd>
c0003ea4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ea8:	b9 0d 00 00 00       	mov    ecx,0xd
c0003ead:	31 d2                	xor    edx,edx
c0003eaf:	83 c0 0c             	add    eax,0xc
c0003eb2:	f7 f1                	div    ecx
c0003eb4:	8d 68 01             	lea    ebp,[eax+0x1]
c0003eb7:	89 ea                	mov    edx,ebp
c0003eb9:	89 d8                	mov    eax,ebx
c0003ebb:	e8 6f fb ff ff       	call   c0003a2f <dir_alloc>
c0003ec0:	85 c0                	test   eax,eax
c0003ec2:	89 c6                	mov    esi,eax
c0003ec4:	0f 85 ae 00 00 00    	jne    c0003f78 <dir_register+0x17e>
c0003eca:	4d                   	dec    ebp
c0003ecb:	74 6b                	je     c0003f38 <dir_register+0x13e>
c0003ecd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003ed0:	89 e8                	mov    eax,ebp
c0003ed2:	c1 e0 05             	shl    eax,0x5
c0003ed5:	29 c2                	sub    edx,eax
c0003ed7:	89 d8                	mov    eax,ebx
c0003ed9:	e8 bc f7 ff ff       	call   c000369a <dir_sdi>
c0003ede:	85 c0                	test   eax,eax
c0003ee0:	89 c6                	mov    esi,eax
c0003ee2:	0f 85 90 00 00 00    	jne    c0003f78 <dir_register+0x17e>
c0003ee8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eec:	e8 b2 e6 ff ff       	call   c00025a3 <sum_sfn>
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003efb:	89 f8                	mov    eax,edi
c0003efd:	e8 b6 e7 ff ff       	call   c00026b8 <move_window>
c0003f02:	85 c0                	test   eax,eax
c0003f04:	89 c6                	mov    esi,eax
c0003f06:	75 70                	jne    c0003f78 <dir_register+0x17e>
c0003f08:	83 ec 0c             	sub    esp,0xc
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003f10:	0f b6 c8             	movzx  ecx,al
c0003f13:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003f16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003f1a:	e8 27 e5 ff ff       	call   c0002446 <put_lfn>
c0003f1f:	31 d2                	xor    edx,edx
c0003f21:	89 d8                	mov    eax,ebx
c0003f23:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003f27:	e8 fe f9 ff ff       	call   c000392a <dir_next>
c0003f2c:	83 c4 10             	add    esp,0x10
c0003f2f:	85 c0                	test   eax,eax
c0003f31:	89 c6                	mov    esi,eax
c0003f33:	75 43                	jne    c0003f78 <dir_register+0x17e>
c0003f35:	4d                   	dec    ebp
c0003f36:	75 c0                	jne    c0003ef8 <dir_register+0xfe>
c0003f38:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f3b:	89 f8                	mov    eax,edi
c0003f3d:	e8 76 e7 ff ff       	call   c00026b8 <move_window>
c0003f42:	85 c0                	test   eax,eax
c0003f44:	89 c6                	mov    esi,eax
c0003f46:	75 30                	jne    c0003f78 <dir_register+0x17e>
c0003f48:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f4b:	b9 20 00 00 00       	mov    ecx,0x20
c0003f50:	31 d2                	xor    edx,edx
c0003f52:	e8 3d e2 ff ff       	call   c0002194 <mem_set>
c0003f57:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0003f5f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f63:	e8 17 e2 ff ff       	call   c000217f <mem_cpy>
c0003f68:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003f6b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003f6e:	83 e0 18             	and    eax,0x18
c0003f71:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003f74:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003f78:	83 c4 2c             	add    esp,0x2c
c0003f7b:	89 f0                	mov    eax,esi
c0003f7d:	5b                   	pop    ebx
c0003f7e:	5e                   	pop    esi
c0003f7f:	5f                   	pop    edi
c0003f80:	5d                   	pop    ebp
c0003f81:	c3                   	ret    

c0003f82 <f_mount>:
c0003f82:	53                   	push   ebx
c0003f83:	83 ec 18             	sub    esp,0x18
c0003f86:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003f8a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003f8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f92:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003f96:	e8 28 e6 ff ff       	call   c00025c3 <get_ldnumber>
c0003f9b:	89 c2                	mov    edx,eax
c0003f9d:	b8 0b 00 00 00       	mov    eax,0xb
c0003fa2:	85 d2                	test   edx,edx
c0003fa4:	78 39                	js     c0003fdf <f_mount+0x5d>
c0003fa6:	8b 04 95 80 7c 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc8380]
c0003fad:	85 c0                	test   eax,eax
c0003faf:	74 03                	je     c0003fb4 <f_mount+0x32>
c0003fb1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003fb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003fb8:	85 c0                	test   eax,eax
c0003fba:	74 03                	je     c0003fbf <f_mount+0x3d>
c0003fbc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003fbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003fc3:	89 04 95 80 7c 03 c0 	mov    DWORD PTR [edx*4-0x3ffc8380],eax
c0003fca:	31 c0                	xor    eax,eax
c0003fcc:	84 db                	test   bl,bl
c0003fce:	74 0f                	je     c0003fdf <f_mount+0x5d>
c0003fd0:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003fd4:	31 c9                	xor    ecx,ecx
c0003fd6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003fda:	e8 36 e8 ff ff       	call   c0002815 <mount_volume>
c0003fdf:	83 c4 18             	add    esp,0x18
c0003fe2:	5b                   	pop    ebx
c0003fe3:	c3                   	ret    

c0003fe4 <f_open>:
c0003fe4:	55                   	push   ebp
c0003fe5:	b8 09 00 00 00       	mov    eax,0x9
c0003fea:	57                   	push   edi
c0003feb:	56                   	push   esi
c0003fec:	53                   	push   ebx
c0003fed:	83 ec 5c             	sub    esp,0x5c
c0003ff0:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003ff4:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003ff8:	85 db                	test   ebx,ebx
c0003ffa:	0f 84 9f 02 00 00    	je     c000429f <f_open+0x2bb>
c0004000:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004004:	89 fd                	mov    ebp,edi
c0004006:	83 e5 3f             	and    ebp,0x3f
c0004009:	89 e8                	mov    eax,ebp
c000400b:	89 ee                	mov    esi,ebp
c000400d:	0f b6 c8             	movzx  ecx,al
c0004010:	8d 44 24 74          	lea    eax,[esp+0x74]
c0004014:	e8 fc e7 ff ff       	call   c0002815 <mount_volume>
c0004019:	85 c0                	test   eax,eax
c000401b:	0f 85 78 02 00 00    	jne    c0004299 <f_open+0x2b5>
c0004021:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004025:	83 ec 0c             	sub    esp,0xc
c0004028:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000402c:	68 00 02 00 00       	push   0x200
c0004031:	e8 62 1f 00 00       	call   c0005f98 <ff_memalloc>
c0004036:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000403a:	83 c4 10             	add    esp,0x10
c000403d:	b8 11 00 00 00       	mov    eax,0x11
c0004042:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0004047:	0f 84 52 02 00 00    	je     c000429f <f_open+0x2bb>
c000404d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004051:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004055:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004059:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c000405c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004060:	e8 f8 fc ff ff       	call   c0003d5d <follow_path>
c0004065:	85 c0                	test   eax,eax
c0004067:	75 0d                	jne    c0004076 <f_open+0x92>
c0004069:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c000406e:	ba 06 00 00 00       	mov    edx,0x6
c0004073:	0f 45 c2             	cmovne eax,edx
c0004076:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000407c:	0f 84 d5 00 00 00    	je     c0004157 <f_open+0x173>
c0004082:	85 c0                	test   eax,eax
c0004084:	74 21                	je     c00040a7 <f_open+0xc3>
c0004086:	83 f8 04             	cmp    eax,0x4
c0004089:	0f 85 ef 01 00 00    	jne    c000427e <f_open+0x29a>
c000408f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004093:	e8 62 fd ff ff       	call   c0003dfa <dir_register>
c0004098:	85 c0                	test   eax,eax
c000409a:	0f 85 de 01 00 00    	jne    c000427e <f_open+0x29a>
c00040a0:	83 cd 08             	or     ebp,0x8
c00040a3:	89 ee                	mov    esi,ebp
c00040a5:	eb 2c                	jmp    c00040d3 <f_open+0xef>
c00040a7:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c00040ab:	b8 07 00 00 00       	mov    eax,0x7
c00040b0:	80 e2 11             	and    dl,0x11
c00040b3:	0f 85 c5 01 00 00    	jne    c000427e <f_open+0x29a>
c00040b9:	f7 c7 04 00 00 00    	test   edi,0x4
c00040bf:	b8 08 00 00 00       	mov    eax,0x8
c00040c4:	0f 85 b4 01 00 00    	jne    c000427e <f_open+0x29a>
c00040ca:	83 e7 08             	and    edi,0x8
c00040cd:	0f 84 b1 00 00 00    	je     c0004184 <f_open+0x1a0>
c00040d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040d7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00040db:	8a 00                	mov    al,BYTE PTR [eax]
c00040dd:	89 ea                	mov    edx,ebp
c00040df:	e8 60 f4 ff ff       	call   c0003544 <ld_clust.isra.0>
c00040e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00040e9:	89 c7                	mov    edi,eax
c00040eb:	8d 45 0e             	lea    eax,[ebp+0xe]
c00040ee:	e8 89 e0 ff ff       	call   c000217c <st_dword>
c00040f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00040f7:	31 c9                	xor    ecx,ecx
c00040f9:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c00040fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004101:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004105:	e8 63 f4 ff ff       	call   c000356d <st_clust.isra.1>
c000410a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000410e:	31 d2                	xor    edx,edx
c0004110:	83 c0 1c             	add    eax,0x1c
c0004113:	e8 64 e0 ff ff       	call   c000217c <st_dword>
c0004118:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000411c:	85 ff                	test   edi,edi
c000411e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004122:	74 60                	je     c0004184 <f_open+0x1a0>
c0004124:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004128:	31 c9                	xor    ecx,ecx
c000412a:	89 fa                	mov    edx,edi
c000412c:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c000412f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004133:	e8 64 f7 ff ff       	call   c000389c <remove_chain>
c0004138:	85 c0                	test   eax,eax
c000413a:	0f 85 3e 01 00 00    	jne    c000427e <f_open+0x29a>
c0004140:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004144:	89 ea                	mov    edx,ebp
c0004146:	4f                   	dec    edi
c0004147:	e8 6c e5 ff ff       	call   c00026b8 <move_window>
c000414c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004150:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0004153:	85 c0                	test   eax,eax
c0004155:	eb 27                	jmp    c000417e <f_open+0x19a>
c0004157:	85 c0                	test   eax,eax
c0004159:	0f 85 1f 01 00 00    	jne    c000427e <f_open+0x29a>
c000415f:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004163:	b8 04 00 00 00       	mov    eax,0x4
c0004168:	f6 c2 10             	test   dl,0x10
c000416b:	0f 85 0d 01 00 00    	jne    c000427e <f_open+0x29a>
c0004171:	83 e7 02             	and    edi,0x2
c0004174:	74 0e                	je     c0004184 <f_open+0x1a0>
c0004176:	b8 07 00 00 00       	mov    eax,0x7
c000417b:	80 e2 01             	and    dl,0x1
c000417e:	0f 85 fa 00 00 00    	jne    c000427e <f_open+0x29a>
c0004184:	f7 c6 08 00 00 00    	test   esi,0x8
c000418a:	74 03                	je     c000418f <f_open+0x1ab>
c000418c:	83 ce 40             	or     esi,0x40
c000418f:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004193:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004197:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c000419a:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000419d:	89 fa                	mov    edx,edi
c000419f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00041a2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00041a5:	e8 9a f3 ff ff       	call   c0003544 <ld_clust.isra.0>
c00041aa:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00041ad:	8d 47 1c             	lea    eax,[edi+0x1c]
c00041b0:	e8 ab df ff ff       	call   c0002160 <ld_dword>
c00041b5:	8d 7b 28             	lea    edi,[ebx+0x28]
c00041b8:	31 d2                	xor    edx,edx
c00041ba:	89 2b                	mov    DWORD PTR [ebx],ebp
c00041bc:	b9 00 02 00 00       	mov    ecx,0x200
c00041c1:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00041c4:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c00041c8:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c00041cc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00041d3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00041da:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00041de:	89 f0                	mov    eax,esi
c00041e0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00041e3:	89 f8                	mov    eax,edi
c00041e5:	e8 aa df ff ff       	call   c0002194 <mem_set>
c00041ea:	83 e6 20             	and    esi,0x20
c00041ed:	75 07                	jne    c00041f6 <f_open+0x212>
c00041ef:	31 c0                	xor    eax,eax
c00041f1:	e9 88 00 00 00       	jmp    c000427e <f_open+0x29a>
c00041f6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00041f9:	85 f6                	test   esi,esi
c00041fb:	74 f2                	je     c00041ef <f_open+0x20b>
c00041fd:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004200:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004204:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004207:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000420b:	31 c0                	xor    eax,eax
c000420d:	c1 e5 09             	shl    ebp,0x9
c0004210:	85 c0                	test   eax,eax
c0004212:	75 23                	jne    c0004237 <f_open+0x253>
c0004214:	39 ee                	cmp    esi,ebp
c0004216:	76 1f                	jbe    c0004237 <f_open+0x253>
c0004218:	8b 03                	mov    eax,DWORD PTR [ebx]
c000421a:	e8 76 f3 ff ff       	call   c0003595 <get_fat.isra.2>
c000421f:	89 c2                	mov    edx,eax
c0004221:	b8 02 00 00 00       	mov    eax,0x2
c0004226:	83 fa 01             	cmp    edx,0x1
c0004229:	76 08                	jbe    c0004233 <f_open+0x24f>
c000422b:	31 c0                	xor    eax,eax
c000422d:	83 fa ff             	cmp    edx,0xffffffff
c0004230:	0f 94 c0             	sete   al
c0004233:	29 ee                	sub    esi,ebp
c0004235:	eb d9                	jmp    c0004210 <f_open+0x22c>
c0004237:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000423a:	85 c0                	test   eax,eax
c000423c:	75 40                	jne    c000427e <f_open+0x29a>
c000423e:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004244:	74 a9                	je     c00041ef <f_open+0x20b>
c0004246:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000424a:	89 e8                	mov    eax,ebp
c000424c:	e8 58 e1 ff ff       	call   c00023a9 <clst2sect>
c0004251:	89 c2                	mov    edx,eax
c0004253:	b8 02 00 00 00       	mov    eax,0x2
c0004258:	85 d2                	test   edx,edx
c000425a:	74 22                	je     c000427e <f_open+0x29a>
c000425c:	c1 ee 09             	shr    esi,0x9
c000425f:	8d 04 16             	lea    eax,[esi+edx*1]
c0004262:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004265:	6a 01                	push   0x1
c0004267:	50                   	push   eax
c0004268:	57                   	push   edi
c0004269:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000426d:	50                   	push   eax
c000426e:	e8 95 de ff ff       	call   c0002108 <disk_read>
c0004273:	83 c4 10             	add    esp,0x10
c0004276:	85 c0                	test   eax,eax
c0004278:	0f 95 c0             	setne  al
c000427b:	0f b6 c0             	movzx  eax,al
c000427e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004282:	83 ec 0c             	sub    esp,0xc
c0004285:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0004289:	e8 22 1d 00 00       	call   c0005fb0 <ff_memfree>
c000428e:	83 c4 10             	add    esp,0x10
c0004291:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004295:	85 c0                	test   eax,eax
c0004297:	74 06                	je     c000429f <f_open+0x2bb>
c0004299:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000429f:	83 c4 5c             	add    esp,0x5c
c00042a2:	5b                   	pop    ebx
c00042a3:	5e                   	pop    esi
c00042a4:	5f                   	pop    edi
c00042a5:	5d                   	pop    ebp
c00042a6:	c3                   	ret    

c00042a7 <f_read>:
c00042a7:	55                   	push   ebp
c00042a8:	57                   	push   edi
c00042a9:	56                   	push   esi
c00042aa:	53                   	push   ebx
c00042ab:	83 ec 2c             	sub    esp,0x2c
c00042ae:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00042b2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00042b6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00042ba:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00042be:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00042c4:	89 d8                	mov    eax,ebx
c00042c6:	e8 44 e3 ff ff       	call   c000260f <validate>
c00042cb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00042cf:	85 c0                	test   eax,eax
c00042d1:	0f 85 a5 01 00 00    	jne    c000447c <f_read+0x1d5>
c00042d7:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c00042db:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00042df:	85 c0                	test   eax,eax
c00042e1:	0f 85 95 01 00 00    	jne    c000447c <f_read+0x1d5>
c00042e7:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c00042eb:	0f 84 83 01 00 00    	je     c0004474 <f_read+0x1cd>
c00042f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00042f4:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c00042f7:	39 f8                	cmp    eax,edi
c00042f9:	0f 46 f8             	cmovbe edi,eax
c00042fc:	85 ff                	test   edi,edi
c00042fe:	0f 84 78 01 00 00    	je     c000447c <f_read+0x1d5>
c0004304:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004307:	a9 ff 01 00 00       	test   eax,0x1ff
c000430c:	0f 85 2b 01 00 00    	jne    c000443d <f_read+0x196>
c0004312:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004316:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c000431a:	89 c2                	mov    edx,eax
c000431c:	c1 ea 09             	shr    edx,0x9
c000431f:	4d                   	dec    ebp
c0004320:	21 d5                	and    ebp,edx
c0004322:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0004326:	75 42                	jne    c000436a <f_read+0xc3>
c0004328:	85 c0                	test   eax,eax
c000432a:	75 05                	jne    c0004331 <f_read+0x8a>
c000432c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000432f:	eb 0a                	jmp    c000433b <f_read+0x94>
c0004331:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004334:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004336:	e8 5a f2 ff ff       	call   c0003595 <get_fat.isra.2>
c000433b:	83 f8 01             	cmp    eax,0x1
c000433e:	77 11                	ja     c0004351 <f_read+0xaa>
c0004340:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004344:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c000434c:	e9 2b 01 00 00       	jmp    c000447c <f_read+0x1d5>
c0004351:	83 f8 ff             	cmp    eax,0xffffffff
c0004354:	75 11                	jne    c0004367 <f_read+0xc0>
c0004356:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000435a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0004362:	e9 15 01 00 00       	jmp    c000447c <f_read+0x1d5>
c0004367:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000436a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000436e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004371:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004375:	89 c8                	mov    eax,ecx
c0004377:	e8 2d e0 ff ff       	call   c00023a9 <clst2sect>
c000437c:	85 c0                	test   eax,eax
c000437e:	74 c0                	je     c0004340 <f_read+0x99>
c0004380:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004384:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c000438a:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000438d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004391:	76 58                	jbe    c00043eb <f_read+0x144>
c0004393:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004397:	89 fe                	mov    esi,edi
c0004399:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000439d:	c1 ee 09             	shr    esi,0x9
c00043a0:	01 f2                	add    edx,esi
c00043a2:	39 c2                	cmp    edx,eax
c00043a4:	76 06                	jbe    c00043ac <f_read+0x105>
c00043a6:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043aa:	89 c6                	mov    esi,eax
c00043ac:	56                   	push   esi
c00043ad:	55                   	push   ebp
c00043ae:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043b2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043b6:	50                   	push   eax
c00043b7:	e8 4c dd ff ff       	call   c0002108 <disk_read>
c00043bc:	83 c4 10             	add    esp,0x10
c00043bf:	85 c0                	test   eax,eax
c00043c1:	75 93                	jne    c0004356 <f_read+0xaf>
c00043c3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043c7:	74 1d                	je     c00043e6 <f_read+0x13f>
c00043c9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00043cc:	29 e8                	sub    eax,ebp
c00043ce:	39 f0                	cmp    eax,esi
c00043d0:	73 14                	jae    c00043e6 <f_read+0x13f>
c00043d2:	c1 e0 09             	shl    eax,0x9
c00043d5:	b9 00 02 00 00       	mov    ecx,0x200
c00043da:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00043de:	8d 53 28             	lea    edx,[ebx+0x28]
c00043e1:	e8 99 dd ff ff       	call   c000217f <mem_cpy>
c00043e6:	c1 e6 09             	shl    esi,0x9
c00043e9:	eb 75                	jmp    c0004460 <f_read+0x1b9>
c00043eb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00043ee:	39 e8                	cmp    eax,ebp
c00043f0:	74 48                	je     c000443a <f_read+0x193>
c00043f2:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043f6:	8d 73 28             	lea    esi,[ebx+0x28]
c00043f9:	74 22                	je     c000441d <f_read+0x176>
c00043fb:	6a 01                	push   0x1
c00043fd:	50                   	push   eax
c00043fe:	56                   	push   esi
c00043ff:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004403:	50                   	push   eax
c0004404:	e8 15 dd ff ff       	call   c000211e <disk_write>
c0004409:	83 c4 10             	add    esp,0x10
c000440c:	85 c0                	test   eax,eax
c000440e:	0f 85 42 ff ff ff    	jne    c0004356 <f_read+0xaf>
c0004414:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004417:	83 e0 7f             	and    eax,0x7f
c000441a:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000441d:	6a 01                	push   0x1
c000441f:	55                   	push   ebp
c0004420:	56                   	push   esi
c0004421:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004425:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004429:	50                   	push   eax
c000442a:	e8 d9 dc ff ff       	call   c0002108 <disk_read>
c000442f:	83 c4 10             	add    esp,0x10
c0004432:	85 c0                	test   eax,eax
c0004434:	0f 85 1c ff ff ff    	jne    c0004356 <f_read+0xaf>
c000443a:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c000443d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004440:	be 00 02 00 00       	mov    esi,0x200
c0004445:	25 ff 01 00 00       	and    eax,0x1ff
c000444a:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000444e:	29 c6                	sub    esi,eax
c0004450:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004454:	39 f7                	cmp    edi,esi
c0004456:	0f 46 f7             	cmovbe esi,edi
c0004459:	89 f1                	mov    ecx,esi
c000445b:	e8 1f dd ff ff       	call   c000217f <mem_cpy>
c0004460:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004464:	29 f7                	sub    edi,esi
c0004466:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000446a:	01 30                	add    DWORD PTR [eax],esi
c000446c:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000446f:	e9 88 fe ff ff       	jmp    c00042fc <f_read+0x55>
c0004474:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c000447c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004480:	83 c4 2c             	add    esp,0x2c
c0004483:	5b                   	pop    ebx
c0004484:	5e                   	pop    esi
c0004485:	5f                   	pop    edi
c0004486:	5d                   	pop    ebp
c0004487:	c3                   	ret    

c0004488 <f_write>:
c0004488:	55                   	push   ebp
c0004489:	57                   	push   edi
c000448a:	56                   	push   esi
c000448b:	53                   	push   ebx
c000448c:	83 ec 2c             	sub    esp,0x2c
c000448f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004493:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004497:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000449b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00044a1:	89 d8                	mov    eax,ebx
c00044a3:	e8 67 e1 ff ff       	call   c000260f <validate>
c00044a8:	85 c0                	test   eax,eax
c00044aa:	89 c7                	mov    edi,eax
c00044ac:	0f 85 13 02 00 00    	jne    c00046c5 <f_write+0x23d>
c00044b2:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c00044b6:	85 ff                	test   edi,edi
c00044b8:	0f 85 07 02 00 00    	jne    c00046c5 <f_write+0x23d>
c00044be:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044c2:	0f 84 f8 01 00 00    	je     c00046c0 <f_write+0x238>
c00044c8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044cb:	89 c1                	mov    ecx,eax
c00044cd:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00044d1:	0f 83 ed 00 00 00    	jae    c00045c4 <f_write+0x13c>
c00044d7:	f7 d0                	not    eax
c00044d9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00044dd:	e9 e2 00 00 00       	jmp    c00045c4 <f_write+0x13c>
c00044e2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044e5:	a9 ff 01 00 00       	test   eax,0x1ff
c00044ea:	0f 85 9b 01 00 00    	jne    c000468b <f_write+0x203>
c00044f0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00044f4:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00044f8:	89 c2                	mov    edx,eax
c00044fa:	c1 ea 09             	shr    edx,0x9
c00044fd:	4d                   	dec    ebp
c00044fe:	21 d5                	and    ebp,edx
c0004500:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0004504:	0f 84 c7 00 00 00    	je     c00045d1 <f_write+0x149>
c000450a:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000450e:	0f 85 23 01 00 00    	jne    c0004637 <f_write+0x1af>
c0004514:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004518:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000451b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000451f:	89 c8                	mov    eax,ecx
c0004521:	e8 83 de ff ff       	call   c00023a9 <clst2sect>
c0004526:	85 c0                	test   eax,eax
c0004528:	0f 84 d3 00 00 00    	je     c0004601 <f_write+0x179>
c000452e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004532:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000453a:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000453d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004541:	0f 86 1c 01 00 00    	jbe    c0004663 <f_write+0x1db>
c0004547:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000454b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000454f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004553:	c1 ee 09             	shr    esi,0x9
c0004556:	01 f2                	add    edx,esi
c0004558:	39 c2                	cmp    edx,eax
c000455a:	76 06                	jbe    c0004562 <f_write+0xda>
c000455c:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004560:	89 c6                	mov    esi,eax
c0004562:	56                   	push   esi
c0004563:	55                   	push   ebp
c0004564:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004568:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000456c:	50                   	push   eax
c000456d:	e8 ac db ff ff       	call   c000211e <disk_write>
c0004572:	83 c4 10             	add    esp,0x10
c0004575:	85 c0                	test   eax,eax
c0004577:	0f 85 97 00 00 00    	jne    c0004614 <f_write+0x18c>
c000457d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004580:	29 ea                	sub    edx,ebp
c0004582:	39 f2                	cmp    edx,esi
c0004584:	73 1d                	jae    c00045a3 <f_write+0x11b>
c0004586:	c1 e2 09             	shl    edx,0x9
c0004589:	b9 00 02 00 00       	mov    ecx,0x200
c000458e:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004592:	8d 43 28             	lea    eax,[ebx+0x28]
c0004595:	e8 e5 db ff ff       	call   c000217f <mem_cpy>
c000459a:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000459d:	83 e0 7f             	and    eax,0x7f
c00045a0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045a3:	c1 e6 09             	shl    esi,0x9
c00045a6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00045aa:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00045ae:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00045b2:	01 30                	add    DWORD PTR [eax],esi
c00045b4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00045b7:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c00045ba:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00045bd:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c00045c1:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00045c4:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00045c9:	0f 85 13 ff ff ff    	jne    c00044e2 <f_write+0x5a>
c00045cf:	eb 1d                	jmp    c00045ee <f_write+0x166>
c00045d1:	85 c0                	test   eax,eax
c00045d3:	75 0b                	jne    c00045e0 <f_write+0x158>
c00045d5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00045d8:	31 d2                	xor    edx,edx
c00045da:	85 c0                	test   eax,eax
c00045dc:	75 1e                	jne    c00045fc <f_write+0x174>
c00045de:	eb 03                	jmp    c00045e3 <f_write+0x15b>
c00045e0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 78 f1 ff ff       	call   c0003762 <create_chain>
c00045ea:	85 c0                	test   eax,eax
c00045ec:	75 0e                	jne    c00045fc <f_write+0x174>
c00045ee:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045f1:	83 c8 40             	or     eax,0x40
c00045f4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045f7:	e9 c9 00 00 00       	jmp    c00046c5 <f_write+0x23d>
c00045fc:	83 f8 01             	cmp    eax,0x1
c00045ff:	75 0e                	jne    c000460f <f_write+0x187>
c0004601:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004605:	bf 02 00 00 00       	mov    edi,0x2
c000460a:	e9 b6 00 00 00       	jmp    c00046c5 <f_write+0x23d>
c000460f:	83 f8 ff             	cmp    eax,0xffffffff
c0004612:	75 0e                	jne    c0004622 <f_write+0x19a>
c0004614:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004618:	bf 01 00 00 00       	mov    edi,0x1
c000461d:	e9 a3 00 00 00       	jmp    c00046c5 <f_write+0x23d>
c0004622:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004626:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004629:	0f 85 db fe ff ff    	jne    c000450a <f_write+0x82>
c000462f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004632:	e9 d3 fe ff ff       	jmp    c000450a <f_write+0x82>
c0004637:	6a 01                	push   0x1
c0004639:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000463c:	8d 43 28             	lea    eax,[ebx+0x28]
c000463f:	50                   	push   eax
c0004640:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004644:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004648:	50                   	push   eax
c0004649:	e8 d0 da ff ff       	call   c000211e <disk_write>
c000464e:	83 c4 10             	add    esp,0x10
c0004651:	85 c0                	test   eax,eax
c0004653:	75 bf                	jne    c0004614 <f_write+0x18c>
c0004655:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004658:	83 e0 7f             	and    eax,0x7f
c000465b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000465e:	e9 b1 fe ff ff       	jmp    c0004514 <f_write+0x8c>
c0004663:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004666:	74 20                	je     c0004688 <f_write+0x200>
c0004668:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000466b:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000466e:	76 18                	jbe    c0004688 <f_write+0x200>
c0004670:	6a 01                	push   0x1
c0004672:	55                   	push   ebp
c0004673:	8d 43 28             	lea    eax,[ebx+0x28]
c0004676:	50                   	push   eax
c0004677:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000467b:	50                   	push   eax
c000467c:	e8 87 da ff ff       	call   c0002108 <disk_read>
c0004681:	83 c4 10             	add    esp,0x10
c0004684:	85 c0                	test   eax,eax
c0004686:	75 8c                	jne    c0004614 <f_write+0x18c>
c0004688:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c000468b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000468e:	be 00 02 00 00       	mov    esi,0x200
c0004693:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004697:	25 ff 01 00 00       	and    eax,0x1ff
c000469c:	29 c6                	sub    esi,eax
c000469e:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c00046a2:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00046a6:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c00046ab:	89 f1                	mov    ecx,esi
c00046ad:	e8 cd da ff ff       	call   c000217f <mem_cpy>
c00046b2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00046b5:	83 c8 80             	or     eax,0xffffff80
c00046b8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00046bb:	e9 e6 fe ff ff       	jmp    c00045a6 <f_write+0x11e>
c00046c0:	bf 07 00 00 00       	mov    edi,0x7
c00046c5:	83 c4 2c             	add    esp,0x2c
c00046c8:	89 f8                	mov    eax,edi
c00046ca:	5b                   	pop    ebx
c00046cb:	5e                   	pop    esi
c00046cc:	5f                   	pop    edi
c00046cd:	5d                   	pop    ebp
c00046ce:	c3                   	ret    

c00046cf <f_sync>:
c00046cf:	56                   	push   esi
c00046d0:	53                   	push   ebx
c00046d1:	83 ec 14             	sub    esp,0x14
c00046d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046d8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046dc:	89 d8                	mov    eax,ebx
c00046de:	e8 2c df ff ff       	call   c000260f <validate>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	0f 85 a3 00 00 00    	jne    c000478e <f_sync+0xbf>
c00046eb:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00046ee:	f6 c2 40             	test   dl,0x40
c00046f1:	0f 84 97 00 00 00    	je     c000478e <f_sync+0xbf>
c00046f7:	80 e2 80             	and    dl,0x80
c00046fa:	74 2e                	je     c000472a <f_sync+0x5b>
c00046fc:	6a 01                	push   0x1
c00046fe:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004701:	8d 43 28             	lea    eax,[ebx+0x28]
c0004704:	50                   	push   eax
c0004705:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004709:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000470d:	50                   	push   eax
c000470e:	e8 0b da ff ff       	call   c000211e <disk_write>
c0004713:	83 c4 10             	add    esp,0x10
c0004716:	89 c2                	mov    edx,eax
c0004718:	b8 01 00 00 00       	mov    eax,0x1
c000471d:	85 d2                	test   edx,edx
c000471f:	75 6d                	jne    c000478e <f_sync+0xbf>
c0004721:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004724:	83 e0 7f             	and    eax,0x7f
c0004727:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000472a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000472d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004731:	e8 82 df ff ff       	call   c00026b8 <move_window>
c0004736:	85 c0                	test   eax,eax
c0004738:	75 54                	jne    c000478e <f_sync+0xbf>
c000473a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c000473d:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c0004740:	89 f2                	mov    edx,esi
c0004742:	83 c8 20             	or     eax,0x20
c0004745:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004748:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000474b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000474d:	e8 1b ee ff ff       	call   c000356d <st_clust.isra.1>
c0004752:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004755:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004758:	e8 1f da ff ff       	call   c000217c <st_dword>
c000475d:	8d 46 16             	lea    eax,[esi+0x16]
c0004760:	ba 00 00 21 50       	mov    edx,0x50210000
c0004765:	e8 12 da ff ff       	call   c000217c <st_dword>
c000476a:	8d 46 12             	lea    eax,[esi+0x12]
c000476d:	31 d2                	xor    edx,edx
c000476f:	e8 04 da ff ff       	call   c0002178 <st_word>
c0004774:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004778:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000477c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004780:	e8 68 e9 ff ff       	call   c00030ed <sync_fs>
c0004785:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004788:	83 e2 bf             	and    edx,0xffffffbf
c000478b:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000478e:	83 c4 14             	add    esp,0x14
c0004791:	5b                   	pop    ebx
c0004792:	5e                   	pop    esi
c0004793:	c3                   	ret    

c0004794 <f_close>:
c0004794:	53                   	push   ebx
c0004795:	83 ec 24             	sub    esp,0x24
c0004798:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000479c:	53                   	push   ebx
c000479d:	e8 2d ff ff ff       	call   c00046cf <f_sync>
c00047a2:	83 c4 10             	add    esp,0x10
c00047a5:	85 c0                	test   eax,eax
c00047a7:	75 15                	jne    c00047be <f_close+0x2a>
c00047a9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047ad:	89 d8                	mov    eax,ebx
c00047af:	e8 5b de ff ff       	call   c000260f <validate>
c00047b4:	85 c0                	test   eax,eax
c00047b6:	75 06                	jne    c00047be <f_close+0x2a>
c00047b8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00047be:	83 c4 18             	add    esp,0x18
c00047c1:	5b                   	pop    ebx
c00047c2:	c3                   	ret    

c00047c3 <f_lseek>:
c00047c3:	55                   	push   ebp
c00047c4:	57                   	push   edi
c00047c5:	56                   	push   esi
c00047c6:	53                   	push   ebx
c00047c7:	83 ec 2c             	sub    esp,0x2c
c00047ca:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00047ce:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00047d2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00047d6:	89 d8                	mov    eax,ebx
c00047d8:	e8 32 de ff ff       	call   c000260f <validate>
c00047dd:	85 c0                	test   eax,eax
c00047df:	89 c5                	mov    ebp,eax
c00047e1:	0f 85 82 01 00 00    	jne    c0004969 <f_lseek+0x1a6>
c00047e7:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00047eb:	85 ed                	test   ebp,ebp
c00047ed:	0f 85 76 01 00 00    	jne    c0004969 <f_lseek+0x1a6>
c00047f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00047f6:	39 f0                	cmp    eax,esi
c00047f8:	73 07                	jae    c0004801 <f_lseek+0x3e>
c00047fa:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047fe:	0f 44 f0             	cmove  esi,eax
c0004801:	85 f6                	test   esi,esi
c0004803:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004806:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000480d:	75 07                	jne    c0004816 <f_lseek+0x53>
c000480f:	31 f6                	xor    esi,esi
c0004811:	e9 e2 00 00 00       	jmp    c00048f8 <f_lseek+0x135>
c0004816:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000481a:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000481e:	c1 e7 09             	shl    edi,0x9
c0004821:	85 c9                	test   ecx,ecx
c0004823:	74 28                	je     c000484d <f_lseek+0x8a>
c0004825:	31 d2                	xor    edx,edx
c0004827:	49                   	dec    ecx
c0004828:	8d 46 ff             	lea    eax,[esi-0x1]
c000482b:	f7 f7                	div    edi
c000482d:	31 d2                	xor    edx,edx
c000482f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004833:	89 c8                	mov    eax,ecx
c0004835:	f7 f7                	div    edi
c0004837:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000483b:	72 10                	jb     c000484d <f_lseek+0x8a>
c000483d:	89 f8                	mov    eax,edi
c000483f:	f7 d8                	neg    eax
c0004841:	21 c1                	and    ecx,eax
c0004843:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004846:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004849:	29 ce                	sub    esi,ecx
c000484b:	eb 3c                	jmp    c0004889 <f_lseek+0xc6>
c000484d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004850:	85 c0                	test   eax,eax
c0004852:	75 32                	jne    c0004886 <f_lseek+0xc3>
c0004854:	31 d2                	xor    edx,edx
c0004856:	89 d8                	mov    eax,ebx
c0004858:	e8 05 ef ff ff       	call   c0003762 <create_chain>
c000485d:	83 f8 01             	cmp    eax,0x1
c0004860:	75 0e                	jne    c0004870 <f_lseek+0xad>
c0004862:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004866:	bd 02 00 00 00       	mov    ebp,0x2
c000486b:	e9 f9 00 00 00       	jmp    c0004969 <f_lseek+0x1a6>
c0004870:	83 f8 ff             	cmp    eax,0xffffffff
c0004873:	75 0e                	jne    c0004883 <f_lseek+0xc0>
c0004875:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004879:	bd 01 00 00 00       	mov    ebp,0x1
c000487e:	e9 e6 00 00 00       	jmp    c0004969 <f_lseek+0x1a6>
c0004883:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004886:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004889:	85 c0                	test   eax,eax
c000488b:	74 82                	je     c000480f <f_lseek+0x4c>
c000488d:	39 fe                	cmp    esi,edi
c000488f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004892:	76 3d                	jbe    c00048d1 <f_lseek+0x10e>
c0004894:	01 fa                	add    edx,edi
c0004896:	29 fe                	sub    esi,edi
c0004898:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000489c:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000489f:	89 c2                	mov    edx,eax
c00048a1:	74 0d                	je     c00048b0 <f_lseek+0xed>
c00048a3:	89 d8                	mov    eax,ebx
c00048a5:	e8 b8 ee ff ff       	call   c0003762 <create_chain>
c00048aa:	85 c0                	test   eax,eax
c00048ac:	75 09                	jne    c00048b7 <f_lseek+0xf4>
c00048ae:	eb 1f                	jmp    c00048cf <f_lseek+0x10c>
c00048b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00048b2:	e8 de ec ff ff       	call   c0003595 <get_fat.isra.2>
c00048b7:	83 f8 ff             	cmp    eax,0xffffffff
c00048ba:	74 b9                	je     c0004875 <f_lseek+0xb2>
c00048bc:	83 f8 01             	cmp    eax,0x1
c00048bf:	76 a1                	jbe    c0004862 <f_lseek+0x9f>
c00048c1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00048c5:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c00048c8:	76 98                	jbe    c0004862 <f_lseek+0x9f>
c00048ca:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00048cd:	eb be                	jmp    c000488d <f_lseek+0xca>
c00048cf:	31 f6                	xor    esi,esi
c00048d1:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c00048d4:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00048da:	0f 84 2f ff ff ff    	je     c000480f <f_lseek+0x4c>
c00048e0:	89 c2                	mov    edx,eax
c00048e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048e6:	e8 be da ff ff       	call   c00023a9 <clst2sect>
c00048eb:	85 c0                	test   eax,eax
c00048ed:	0f 84 6f ff ff ff    	je     c0004862 <f_lseek+0x9f>
c00048f3:	c1 ee 09             	shr    esi,0x9
c00048f6:	01 c6                	add    esi,eax
c00048f8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00048fb:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00048fe:	76 0c                	jbe    c000490c <f_lseek+0x149>
c0004900:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004903:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004906:	83 ca 40             	or     edx,0x40
c0004909:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000490c:	a9 ff 01 00 00       	test   eax,0x1ff
c0004911:	74 56                	je     c0004969 <f_lseek+0x1a6>
c0004913:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004916:	39 f0                	cmp    eax,esi
c0004918:	74 4f                	je     c0004969 <f_lseek+0x1a6>
c000491a:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000491e:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004921:	74 26                	je     c0004949 <f_lseek+0x186>
c0004923:	6a 01                	push   0x1
c0004925:	50                   	push   eax
c0004926:	57                   	push   edi
c0004927:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000492b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000492f:	50                   	push   eax
c0004930:	e8 e9 d7 ff ff       	call   c000211e <disk_write>
c0004935:	83 c4 10             	add    esp,0x10
c0004938:	85 c0                	test   eax,eax
c000493a:	0f 85 35 ff ff ff    	jne    c0004875 <f_lseek+0xb2>
c0004940:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004943:	83 e0 7f             	and    eax,0x7f
c0004946:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004949:	6a 01                	push   0x1
c000494b:	56                   	push   esi
c000494c:	57                   	push   edi
c000494d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004951:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004955:	50                   	push   eax
c0004956:	e8 ad d7 ff ff       	call   c0002108 <disk_read>
c000495b:	83 c4 10             	add    esp,0x10
c000495e:	85 c0                	test   eax,eax
c0004960:	0f 85 0f ff ff ff    	jne    c0004875 <f_lseek+0xb2>
c0004966:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004969:	83 c4 2c             	add    esp,0x2c
c000496c:	89 e8                	mov    eax,ebp
c000496e:	5b                   	pop    ebx
c000496f:	5e                   	pop    esi
c0004970:	5f                   	pop    edi
c0004971:	5d                   	pop    ebp
c0004972:	c3                   	ret    

c0004973 <f_opendir>:
c0004973:	56                   	push   esi
c0004974:	b8 09 00 00 00       	mov    eax,0x9
c0004979:	53                   	push   ebx
c000497a:	83 ec 24             	sub    esp,0x24
c000497d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004981:	85 db                	test   ebx,ebx
c0004983:	0f 84 af 00 00 00    	je     c0004a38 <f_opendir+0xc5>
c0004989:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000498d:	31 c9                	xor    ecx,ecx
c000498f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004993:	e8 7d de ff ff       	call   c0002815 <mount_volume>
c0004998:	85 c0                	test   eax,eax
c000499a:	0f 85 92 00 00 00    	jne    c0004a32 <f_opendir+0xbf>
c00049a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049a4:	83 ec 0c             	sub    esp,0xc
c00049a7:	89 03                	mov    DWORD PTR [ebx],eax
c00049a9:	68 00 02 00 00       	push   0x200
c00049ae:	e8 e5 15 00 00       	call   c0005f98 <ff_memalloc>
c00049b3:	83 c4 10             	add    esp,0x10
c00049b6:	89 c6                	mov    esi,eax
c00049b8:	b8 11 00 00 00       	mov    eax,0x11
c00049bd:	85 f6                	test   esi,esi
c00049bf:	74 77                	je     c0004a38 <f_opendir+0xc5>
c00049c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049c5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00049c9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049cc:	89 d8                	mov    eax,ebx
c00049ce:	e8 8a f3 ff ff       	call   c0003d5d <follow_path>
c00049d3:	85 c0                	test   eax,eax
c00049d5:	75 37                	jne    c0004a0e <f_opendir+0x9b>
c00049d7:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c00049db:	75 1c                	jne    c00049f9 <f_opendir+0x86>
c00049dd:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00049e1:	b8 05 00 00 00       	mov    eax,0x5
c00049e6:	74 26                	je     c0004a0e <f_opendir+0x9b>
c00049e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049ec:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00049ef:	8a 00                	mov    al,BYTE PTR [eax]
c00049f1:	e8 4e eb ff ff       	call   c0003544 <ld_clust.isra.0>
c00049f6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00049f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004a03:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004a07:	89 d8                	mov    eax,ebx
c0004a09:	e8 8c ec ff ff       	call   c000369a <dir_sdi>
c0004a0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a12:	83 ec 0c             	sub    esp,0xc
c0004a15:	56                   	push   esi
c0004a16:	e8 95 15 00 00       	call   c0005fb0 <ff_memfree>
c0004a1b:	83 c4 10             	add    esp,0x10
c0004a1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a22:	83 f8 04             	cmp    eax,0x4
c0004a25:	74 06                	je     c0004a2d <f_opendir+0xba>
c0004a27:	85 c0                	test   eax,eax
c0004a29:	74 0d                	je     c0004a38 <f_opendir+0xc5>
c0004a2b:	eb 05                	jmp    c0004a32 <f_opendir+0xbf>
c0004a2d:	b8 05 00 00 00       	mov    eax,0x5
c0004a32:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004a38:	83 c4 24             	add    esp,0x24
c0004a3b:	5b                   	pop    ebx
c0004a3c:	5e                   	pop    esi
c0004a3d:	c3                   	ret    

c0004a3e <f_closedir>:
c0004a3e:	53                   	push   ebx
c0004a3f:	83 ec 18             	sub    esp,0x18
c0004a42:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004a46:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004a4a:	89 d8                	mov    eax,ebx
c0004a4c:	e8 be db ff ff       	call   c000260f <validate>
c0004a51:	85 c0                	test   eax,eax
c0004a53:	75 06                	jne    c0004a5b <f_closedir+0x1d>
c0004a55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004a5b:	83 c4 18             	add    esp,0x18
c0004a5e:	5b                   	pop    ebx
c0004a5f:	c3                   	ret    

c0004a60 <f_readdir>:
c0004a60:	57                   	push   edi
c0004a61:	56                   	push   esi
c0004a62:	53                   	push   ebx
c0004a63:	83 ec 20             	sub    esp,0x20
c0004a66:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004a6a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a6e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004a72:	89 d8                	mov    eax,ebx
c0004a74:	e8 96 db ff ff       	call   c000260f <validate>
c0004a79:	85 c0                	test   eax,eax
c0004a7b:	75 6e                	jne    c0004aeb <f_readdir+0x8b>
c0004a7d:	85 ff                	test   edi,edi
c0004a7f:	75 0b                	jne    c0004a8c <f_readdir+0x2c>
c0004a81:	31 d2                	xor    edx,edx
c0004a83:	89 d8                	mov    eax,ebx
c0004a85:	e8 10 ec ff ff       	call   c000369a <dir_sdi>
c0004a8a:	eb 5f                	jmp    c0004aeb <f_readdir+0x8b>
c0004a8c:	83 ec 0c             	sub    esp,0xc
c0004a8f:	68 00 02 00 00       	push   0x200
c0004a94:	e8 ff 14 00 00       	call   c0005f98 <ff_memalloc>
c0004a99:	83 c4 10             	add    esp,0x10
c0004a9c:	89 c6                	mov    esi,eax
c0004a9e:	b8 11 00 00 00       	mov    eax,0x11
c0004aa3:	85 f6                	test   esi,esi
c0004aa5:	74 44                	je     c0004aeb <f_readdir+0x8b>
c0004aa7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004aab:	31 d2                	xor    edx,edx
c0004aad:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ab0:	89 d8                	mov    eax,ebx
c0004ab2:	e8 dd ef ff ff       	call   c0003a94 <dir_read>
c0004ab7:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004abc:	75 19                	jne    c0004ad7 <f_readdir+0x77>
c0004abe:	89 fa                	mov    edx,edi
c0004ac0:	89 d8                	mov    eax,ebx
c0004ac2:	e8 7c e8 ff ff       	call   c0003343 <get_fileinfo>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	89 d8                	mov    eax,ebx
c0004acb:	e8 5a ee ff ff       	call   c000392a <dir_next>
c0004ad0:	83 f8 04             	cmp    eax,0x4
c0004ad3:	75 02                	jne    c0004ad7 <f_readdir+0x77>
c0004ad5:	31 c0                	xor    eax,eax
c0004ad7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004adb:	83 ec 0c             	sub    esp,0xc
c0004ade:	56                   	push   esi
c0004adf:	e8 cc 14 00 00       	call   c0005fb0 <ff_memfree>
c0004ae4:	83 c4 10             	add    esp,0x10
c0004ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aeb:	83 c4 20             	add    esp,0x20
c0004aee:	5b                   	pop    ebx
c0004aef:	5e                   	pop    esi
c0004af0:	5f                   	pop    edi
c0004af1:	c3                   	ret    

c0004af2 <f_stat>:
c0004af2:	57                   	push   edi
c0004af3:	31 c9                	xor    ecx,ecx
c0004af5:	56                   	push   esi
c0004af6:	53                   	push   ebx
c0004af7:	83 ec 30             	sub    esp,0x30
c0004afa:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004afe:	89 e2                	mov    edx,esp
c0004b00:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004b04:	e8 0c dd ff ff       	call   c0002815 <mount_volume>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	89 c3                	mov    ebx,eax
c0004b0d:	75 59                	jne    c0004b68 <f_stat+0x76>
c0004b0f:	83 ec 0c             	sub    esp,0xc
c0004b12:	bb 11 00 00 00       	mov    ebx,0x11
c0004b17:	68 00 02 00 00       	push   0x200
c0004b1c:	e8 77 14 00 00       	call   c0005f98 <ff_memalloc>
c0004b21:	83 c4 10             	add    esp,0x10
c0004b24:	85 c0                	test   eax,eax
c0004b26:	89 c6                	mov    esi,eax
c0004b28:	74 3e                	je     c0004b68 <f_stat+0x76>
c0004b2a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004b2d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004b31:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004b34:	89 e0                	mov    eax,esp
c0004b36:	e8 22 f2 ff ff       	call   c0003d5d <follow_path>
c0004b3b:	85 c0                	test   eax,eax
c0004b3d:	89 c3                	mov    ebx,eax
c0004b3f:	75 1b                	jne    c0004b5c <f_stat+0x6a>
c0004b41:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004b46:	75 0f                	jne    c0004b57 <f_stat+0x65>
c0004b48:	85 ff                	test   edi,edi
c0004b4a:	74 10                	je     c0004b5c <f_stat+0x6a>
c0004b4c:	89 fa                	mov    edx,edi
c0004b4e:	89 e0                	mov    eax,esp
c0004b50:	e8 ee e7 ff ff       	call   c0003343 <get_fileinfo>
c0004b55:	eb 05                	jmp    c0004b5c <f_stat+0x6a>
c0004b57:	bb 06 00 00 00       	mov    ebx,0x6
c0004b5c:	83 ec 0c             	sub    esp,0xc
c0004b5f:	56                   	push   esi
c0004b60:	e8 4b 14 00 00       	call   c0005fb0 <ff_memfree>
c0004b65:	83 c4 10             	add    esp,0x10
c0004b68:	83 c4 30             	add    esp,0x30
c0004b6b:	89 d8                	mov    eax,ebx
c0004b6d:	5b                   	pop    ebx
c0004b6e:	5e                   	pop    esi
c0004b6f:	5f                   	pop    edi
c0004b70:	c3                   	ret    

c0004b71 <f_getfree>:
c0004b71:	55                   	push   ebp
c0004b72:	31 c9                	xor    ecx,ecx
c0004b74:	57                   	push   edi
c0004b75:	56                   	push   esi
c0004b76:	53                   	push   ebx
c0004b77:	83 ec 2c             	sub    esp,0x2c
c0004b7a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b7e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004b82:	e8 8e dc ff ff       	call   c0002815 <mount_volume>
c0004b87:	85 c0                	test   eax,eax
c0004b89:	89 c6                	mov    esi,eax
c0004b8b:	0f 85 df 00 00 00    	jne    c0004c70 <f_getfree+0xff>
c0004b91:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004b95:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004b99:	89 18                	mov    DWORD PTR [eax],ebx
c0004b9b:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004b9e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004ba1:	8d 57 fe             	lea    edx,[edi-0x2]
c0004ba4:	39 d0                	cmp    eax,edx
c0004ba6:	77 0b                	ja     c0004bb3 <f_getfree+0x42>
c0004ba8:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004bac:	89 01                	mov    DWORD PTR [ecx],eax
c0004bae:	e9 bd 00 00 00       	jmp    c0004c70 <f_getfree+0xff>
c0004bb3:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004bb6:	75 29                	jne    c0004be1 <f_getfree+0x70>
c0004bb8:	bf 02 00 00 00       	mov    edi,0x2
c0004bbd:	31 ed                	xor    ebp,ebp
c0004bbf:	89 fa                	mov    edx,edi
c0004bc1:	89 d8                	mov    eax,ebx
c0004bc3:	e8 cd e9 ff ff       	call   c0003595 <get_fat.isra.2>
c0004bc8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bcb:	74 7d                	je     c0004c4a <f_getfree+0xd9>
c0004bcd:	83 f8 01             	cmp    eax,0x1
c0004bd0:	74 7f                	je     c0004c51 <f_getfree+0xe0>
c0004bd2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bd6:	83 d5 00             	adc    ebp,0x0
c0004bd9:	47                   	inc    edi
c0004bda:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004bdd:	77 e0                	ja     c0004bbf <f_getfree+0x4e>
c0004bdf:	eb 79                	jmp    c0004c5a <f_getfree+0xe9>
c0004be1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 db                	xor    ebx,ebx
c0004be8:	85 db                	test   ebx,ebx
c0004bea:	75 18                	jne    c0004c04 <f_getfree+0x93>
c0004bec:	8d 42 01             	lea    eax,[edx+0x1]
c0004bef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bf3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bf7:	e8 bc da ff ff       	call   c00026b8 <move_window>
c0004bfc:	85 c0                	test   eax,eax
c0004bfe:	75 58                	jne    c0004c58 <f_getfree+0xe7>
c0004c00:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004c04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c08:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004c0c:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004c0f:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004c13:	75 13                	jne    c0004c28 <f_getfree+0xb7>
c0004c15:	e8 39 d5 ff ff       	call   c0002153 <ld_word>
c0004c1a:	0f b7 c0             	movzx  eax,ax
c0004c1d:	83 f8 01             	cmp    eax,0x1
c0004c20:	83 d5 00             	adc    ebp,0x0
c0004c23:	83 c3 02             	add    ebx,0x2
c0004c26:	eb 13                	jmp    c0004c3b <f_getfree+0xca>
c0004c28:	e8 33 d5 ff ff       	call   c0002160 <ld_dword>
c0004c2d:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004c32:	83 f8 01             	cmp    eax,0x1
c0004c35:	83 d5 00             	adc    ebp,0x0
c0004c38:	83 c3 04             	add    ebx,0x4
c0004c3b:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004c41:	4f                   	dec    edi
c0004c42:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004c46:	75 a0                	jne    c0004be8 <f_getfree+0x77>
c0004c48:	eb 10                	jmp    c0004c5a <f_getfree+0xe9>
c0004c4a:	be 01 00 00 00       	mov    esi,0x1
c0004c4f:	eb 09                	jmp    c0004c5a <f_getfree+0xe9>
c0004c51:	be 02 00 00 00       	mov    esi,0x2
c0004c56:	eb 02                	jmp    c0004c5a <f_getfree+0xe9>
c0004c58:	89 c6                	mov    esi,eax
c0004c5a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004c5e:	89 28                	mov    DWORD PTR [eax],ebp
c0004c60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c64:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004c67:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004c6a:	83 ca 01             	or     edx,0x1
c0004c6d:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004c70:	83 c4 2c             	add    esp,0x2c
c0004c73:	89 f0                	mov    eax,esi
c0004c75:	5b                   	pop    ebx
c0004c76:	5e                   	pop    esi
c0004c77:	5f                   	pop    edi
c0004c78:	5d                   	pop    ebp
c0004c79:	c3                   	ret    

c0004c7a <f_truncate>:
c0004c7a:	56                   	push   esi
c0004c7b:	53                   	push   ebx
c0004c7c:	83 ec 14             	sub    esp,0x14
c0004c7f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004c83:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c87:	89 d8                	mov    eax,ebx
c0004c89:	e8 81 d9 ff ff       	call   c000260f <validate>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	89 c6                	mov    esi,eax
c0004c92:	0f 85 c4 00 00 00    	jne    c0004d5c <f_truncate+0xe2>
c0004c98:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004c9c:	85 f6                	test   esi,esi
c0004c9e:	0f 85 b8 00 00 00    	jne    c0004d5c <f_truncate+0xe2>
c0004ca4:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004ca8:	0f 84 a9 00 00 00    	je     c0004d57 <f_truncate+0xdd>
c0004cae:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004cb1:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004cb4:	0f 83 a2 00 00 00    	jae    c0004d5c <f_truncate+0xe2>
c0004cba:	85 c0                	test   eax,eax
c0004cbc:	75 15                	jne    c0004cd3 <f_truncate+0x59>
c0004cbe:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004cc1:	31 c9                	xor    ecx,ecx
c0004cc3:	89 d8                	mov    eax,ebx
c0004cc5:	e8 d2 eb ff ff       	call   c000389c <remove_chain>
c0004cca:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004cd1:	eb 35                	jmp    c0004d08 <f_truncate+0x8e>
c0004cd3:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004cd6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004cd8:	e8 b8 e8 ff ff       	call   c0003595 <get_fat.isra.2>
c0004cdd:	89 c2                	mov    edx,eax
c0004cdf:	b8 01 00 00 00       	mov    eax,0x1
c0004ce4:	83 fa ff             	cmp    edx,0xffffffff
c0004ce7:	74 1f                	je     c0004d08 <f_truncate+0x8e>
c0004ce9:	83 fa 01             	cmp    edx,0x1
c0004cec:	b8 02 00 00 00       	mov    eax,0x2
c0004cf1:	74 15                	je     c0004d08 <f_truncate+0x8e>
c0004cf3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004cf7:	31 c0                	xor    eax,eax
c0004cf9:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004cfc:	76 0a                	jbe    c0004d08 <f_truncate+0x8e>
c0004cfe:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004d01:	89 d8                	mov    eax,ebx
c0004d03:	e8 94 eb ff ff       	call   c000389c <remove_chain>
c0004d08:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004d0b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004d0e:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004d11:	83 ca 40             	or     edx,0x40
c0004d14:	85 c0                	test   eax,eax
c0004d16:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004d19:	75 35                	jne    c0004d50 <f_truncate+0xd6>
c0004d1b:	80 e2 80             	and    dl,0x80
c0004d1e:	74 3c                	je     c0004d5c <f_truncate+0xe2>
c0004d20:	6a 01                	push   0x1
c0004d22:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004d25:	8d 43 28             	lea    eax,[ebx+0x28]
c0004d28:	50                   	push   eax
c0004d29:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004d2d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004d31:	50                   	push   eax
c0004d32:	e8 e7 d3 ff ff       	call   c000211e <disk_write>
c0004d37:	83 c4 10             	add    esp,0x10
c0004d3a:	85 c0                	test   eax,eax
c0004d3c:	75 0d                	jne    c0004d4b <f_truncate+0xd1>
c0004d3e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004d41:	31 f6                	xor    esi,esi
c0004d43:	83 e0 7f             	and    eax,0x7f
c0004d46:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004d49:	eb 11                	jmp    c0004d5c <f_truncate+0xe2>
c0004d4b:	b8 01 00 00 00       	mov    eax,0x1
c0004d50:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004d53:	89 c6                	mov    esi,eax
c0004d55:	eb 05                	jmp    c0004d5c <f_truncate+0xe2>
c0004d57:	be 07 00 00 00       	mov    esi,0x7
c0004d5c:	83 c4 14             	add    esp,0x14
c0004d5f:	89 f0                	mov    eax,esi
c0004d61:	5b                   	pop    ebx
c0004d62:	5e                   	pop    esi
c0004d63:	c3                   	ret    

c0004d64 <f_unlink>:
c0004d64:	55                   	push   ebp
c0004d65:	b9 02 00 00 00       	mov    ecx,0x2
c0004d6a:	57                   	push   edi
c0004d6b:	56                   	push   esi
c0004d6c:	53                   	push   ebx
c0004d6d:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004d73:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d77:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004d7e:	e8 92 da ff ff       	call   c0002815 <mount_volume>
c0004d83:	85 c0                	test   eax,eax
c0004d85:	0f 85 ee 00 00 00    	jne    c0004e79 <f_unlink+0x115>
c0004d8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d96:	68 00 02 00 00       	push   0x200
c0004d9b:	e8 f8 11 00 00       	call   c0005f98 <ff_memalloc>
c0004da0:	83 c4 10             	add    esp,0x10
c0004da3:	89 c3                	mov    ebx,eax
c0004da5:	b8 11 00 00 00       	mov    eax,0x11
c0004daa:	85 db                	test   ebx,ebx
c0004dac:	0f 84 c7 00 00 00    	je     c0004e79 <f_unlink+0x115>
c0004db2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004db6:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004dbd:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004dc0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dc4:	e8 94 ef ff ff       	call   c0003d5d <follow_path>
c0004dc9:	85 c0                	test   eax,eax
c0004dcb:	0f 85 94 00 00 00    	jne    c0004e65 <f_unlink+0x101>
c0004dd1:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004dd6:	b8 06 00 00 00       	mov    eax,0x6
c0004ddb:	0f 85 84 00 00 00    	jne    c0004e65 <f_unlink+0x101>
c0004de1:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004de6:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004dec:	74 07                	je     c0004df5 <f_unlink+0x91>
c0004dee:	b8 07 00 00 00       	mov    eax,0x7
c0004df3:	eb 70                	jmp    c0004e65 <f_unlink+0x101>
c0004df5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004dfd:	8a 07                	mov    al,BYTE PTR [edi]
c0004dff:	e8 40 e7 ff ff       	call   c0003544 <ld_clust.isra.0>
c0004e04:	83 e5 10             	and    ebp,0x10
c0004e07:	89 c6                	mov    esi,eax
c0004e09:	75 20                	jne    c0004e2b <f_unlink+0xc7>
c0004e0b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e0f:	e8 a8 ed ff ff       	call   c0003bbc <dir_remove>
c0004e14:	85 c0                	test   eax,eax
c0004e16:	75 40                	jne    c0004e58 <f_unlink+0xf4>
c0004e18:	85 f6                	test   esi,esi
c0004e1a:	74 3c                	je     c0004e58 <f_unlink+0xf4>
c0004e1c:	31 c9                	xor    ecx,ecx
c0004e1e:	89 f2                	mov    edx,esi
c0004e20:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e24:	e8 73 ea ff ff       	call   c000389c <remove_chain>
c0004e29:	eb 2d                	jmp    c0004e58 <f_unlink+0xf4>
c0004e2b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004e2f:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004e33:	31 d2                	xor    edx,edx
c0004e35:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004e39:	e8 5c e8 ff ff       	call   c000369a <dir_sdi>
c0004e3e:	85 c0                	test   eax,eax
c0004e40:	75 23                	jne    c0004e65 <f_unlink+0x101>
c0004e42:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004e46:	31 d2                	xor    edx,edx
c0004e48:	e8 47 ec ff ff       	call   c0003a94 <dir_read>
c0004e4d:	85 c0                	test   eax,eax
c0004e4f:	74 9d                	je     c0004dee <f_unlink+0x8a>
c0004e51:	83 f8 04             	cmp    eax,0x4
c0004e54:	75 0f                	jne    c0004e65 <f_unlink+0x101>
c0004e56:	eb b3                	jmp    c0004e0b <f_unlink+0xa7>
c0004e58:	85 c0                	test   eax,eax
c0004e5a:	75 09                	jne    c0004e65 <f_unlink+0x101>
c0004e5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e60:	e8 88 e2 ff ff       	call   c00030ed <sync_fs>
c0004e65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e69:	83 ec 0c             	sub    esp,0xc
c0004e6c:	53                   	push   ebx
c0004e6d:	e8 3e 11 00 00       	call   c0005fb0 <ff_memfree>
c0004e72:	83 c4 10             	add    esp,0x10
c0004e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e79:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004e7f:	5b                   	pop    ebx
c0004e80:	5e                   	pop    esi
c0004e81:	5f                   	pop    edi
c0004e82:	5d                   	pop    ebp
c0004e83:	c3                   	ret    

c0004e84 <f_mkdir>:
c0004e84:	57                   	push   edi
c0004e85:	b9 02 00 00 00       	mov    ecx,0x2
c0004e8a:	56                   	push   esi
c0004e8b:	53                   	push   ebx
c0004e8c:	83 ec 50             	sub    esp,0x50
c0004e8f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004e93:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e97:	e8 79 d9 ff ff       	call   c0002815 <mount_volume>
c0004e9c:	85 c0                	test   eax,eax
c0004e9e:	89 c3                	mov    ebx,eax
c0004ea0:	0f 85 70 01 00 00    	jne    c0005016 <f_mkdir+0x192>
c0004ea6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004eaa:	83 ec 0c             	sub    esp,0xc
c0004ead:	bb 11 00 00 00       	mov    ebx,0x11
c0004eb2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004eb6:	68 00 02 00 00       	push   0x200
c0004ebb:	e8 d8 10 00 00       	call   c0005f98 <ff_memalloc>
c0004ec0:	83 c4 10             	add    esp,0x10
c0004ec3:	85 c0                	test   eax,eax
c0004ec5:	89 c7                	mov    edi,eax
c0004ec7:	0f 84 49 01 00 00    	je     c0005016 <f_mkdir+0x192>
c0004ecd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ed1:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ed5:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004ed8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004edc:	e8 7c ee ff ff       	call   c0003d5d <follow_path>
c0004ee1:	85 c0                	test   eax,eax
c0004ee3:	89 c3                	mov    ebx,eax
c0004ee5:	74 3e                	je     c0004f25 <f_mkdir+0xa1>
c0004ee7:	83 f8 04             	cmp    eax,0x4
c0004eea:	75 3e                	jne    c0004f2a <f_mkdir+0xa6>
c0004eec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ef0:	31 d2                	xor    edx,edx
c0004ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004ef6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004efa:	e8 63 e8 ff ff       	call   c0003762 <create_chain>
c0004eff:	85 c0                	test   eax,eax
c0004f01:	89 c6                	mov    esi,eax
c0004f03:	74 0c                	je     c0004f11 <f_mkdir+0x8d>
c0004f05:	83 f8 01             	cmp    eax,0x1
c0004f08:	bb 02 00 00 00       	mov    ebx,0x2
c0004f0d:	74 07                	je     c0004f16 <f_mkdir+0x92>
c0004f0f:	eb 2a                	jmp    c0004f3b <f_mkdir+0xb7>
c0004f11:	bb 07 00 00 00       	mov    ebx,0x7
c0004f16:	31 c9                	xor    ecx,ecx
c0004f18:	89 f2                	mov    edx,esi
c0004f1a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004f1e:	e8 79 e9 ff ff       	call   c000389c <remove_chain>
c0004f23:	eb 05                	jmp    c0004f2a <f_mkdir+0xa6>
c0004f25:	bb 08 00 00 00       	mov    ebx,0x8
c0004f2a:	83 ec 0c             	sub    esp,0xc
c0004f2d:	57                   	push   edi
c0004f2e:	e8 7d 10 00 00       	call   c0005fb0 <ff_memfree>
c0004f33:	83 c4 10             	add    esp,0x10
c0004f36:	e9 db 00 00 00       	jmp    c0005016 <f_mkdir+0x192>
c0004f3b:	83 f8 ff             	cmp    eax,0xffffffff
c0004f3e:	bb 01 00 00 00       	mov    ebx,0x1
c0004f43:	74 d1                	je     c0004f16 <f_mkdir+0x92>
c0004f45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f49:	89 f2                	mov    edx,esi
c0004f4b:	e8 19 dd ff ff       	call   c0002c69 <dir_clear>
c0004f50:	85 c0                	test   eax,eax
c0004f52:	89 c3                	mov    ebx,eax
c0004f54:	75 c0                	jne    c0004f16 <f_mkdir+0x92>
c0004f56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0004f5f:	ba 20 00 00 00       	mov    edx,0x20
c0004f64:	83 c0 34             	add    eax,0x34
c0004f67:	e8 28 d2 ff ff       	call   c0002194 <mem_set>
c0004f6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f70:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f75:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004f79:	83 c0 4a             	add    eax,0x4a
c0004f7c:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004f80:	e8 f7 d1 ff ff       	call   c000217c <st_dword>
c0004f85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f89:	89 f1                	mov    ecx,esi
c0004f8b:	8d 50 34             	lea    edx,[eax+0x34]
c0004f8e:	e8 da e5 ff ff       	call   c000356d <st_clust.isra.1>
c0004f93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f97:	b9 20 00 00 00       	mov    ecx,0x20
c0004f9c:	8d 50 34             	lea    edx,[eax+0x34]
c0004f9f:	83 c0 54             	add    eax,0x54
c0004fa2:	e8 d8 d1 ff ff       	call   c000217f <mem_cpy>
c0004fa7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fab:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004faf:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004fb3:	8d 50 54             	lea    edx,[eax+0x54]
c0004fb6:	e8 b2 e5 ff ff       	call   c000356d <st_clust.isra.1>
c0004fbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fbf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fc3:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004fc7:	e8 2e ee ff ff       	call   c0003dfa <dir_register>
c0004fcc:	85 c0                	test   eax,eax
c0004fce:	89 c3                	mov    ebx,eax
c0004fd0:	0f 85 40 ff ff ff    	jne    c0004f16 <f_mkdir+0x92>
c0004fd6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fda:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fdf:	83 c0 16             	add    eax,0x16
c0004fe2:	e8 95 d1 ff ff       	call   c000217c <st_dword>
c0004fe7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004feb:	89 f1                	mov    ecx,esi
c0004fed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ff1:	e8 77 e5 ff ff       	call   c000356d <st_clust.isra.1>
c0004ff6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ffa:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005002:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005006:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000500a:	e8 de e0 ff ff       	call   c00030ed <sync_fs>
c000500f:	89 c3                	mov    ebx,eax
c0005011:	e9 14 ff ff ff       	jmp    c0004f2a <f_mkdir+0xa6>
c0005016:	83 c4 50             	add    esp,0x50
c0005019:	89 d8                	mov    eax,ebx
c000501b:	5b                   	pop    ebx
c000501c:	5e                   	pop    esi
c000501d:	5f                   	pop    edi
c000501e:	c3                   	ret    

c000501f <f_rename>:
c000501f:	57                   	push   edi
c0005020:	56                   	push   esi
c0005021:	53                   	push   ebx
c0005022:	81 ec a0 00 00 00    	sub    esp,0xa0
c0005028:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c000502f:	e8 8f d5 ff ff       	call   c00025c3 <get_ldnumber>
c0005034:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005038:	b9 02 00 00 00       	mov    ecx,0x2
c000503d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0005044:	e8 cc d7 ff ff       	call   c0002815 <mount_volume>
c0005049:	85 c0                	test   eax,eax
c000504b:	0f 85 7c 01 00 00    	jne    c00051cd <f_rename+0x1ae>
c0005051:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005055:	83 ec 0c             	sub    esp,0xc
c0005058:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000505c:	68 00 02 00 00       	push   0x200
c0005061:	e8 32 0f 00 00       	call   c0005f98 <ff_memalloc>
c0005066:	83 c4 10             	add    esp,0x10
c0005069:	89 c6                	mov    esi,eax
c000506b:	b8 11 00 00 00       	mov    eax,0x11
c0005070:	85 f6                	test   esi,esi
c0005072:	0f 84 55 01 00 00    	je     c00051cd <f_rename+0x1ae>
c0005078:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000507c:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0005083:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005086:	8d 44 24 40          	lea    eax,[esp+0x40]
c000508a:	e8 ce ec ff ff       	call   c0003d5d <follow_path>
c000508f:	85 c0                	test   eax,eax
c0005091:	0f 85 22 01 00 00    	jne    c00051b9 <f_rename+0x19a>
c0005097:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c000509b:	b8 06 00 00 00       	mov    eax,0x6
c00050a0:	80 e2 a0             	and    dl,0xa0
c00050a3:	0f 85 10 01 00 00    	jne    c00051b9 <f_rename+0x19a>
c00050a9:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00050ad:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b1:	b9 20 00 00 00       	mov    ecx,0x20
c00050b6:	e8 c4 d0 ff ff       	call   c000217f <mem_cpy>
c00050bb:	8d 54 24 40          	lea    edx,[esp+0x40]
c00050bf:	b9 30 00 00 00       	mov    ecx,0x30
c00050c4:	8d 44 24 70          	lea    eax,[esp+0x70]
c00050c8:	e8 b2 d0 ff ff       	call   c000217f <mem_cpy>
c00050cd:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c00050d4:	8d 44 24 70          	lea    eax,[esp+0x70]
c00050d8:	e8 80 ec ff ff       	call   c0003d5d <follow_path>
c00050dd:	85 c0                	test   eax,eax
c00050df:	75 20                	jne    c0005101 <f_rename+0xe2>
c00050e1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00050e5:	b8 08 00 00 00       	mov    eax,0x8
c00050ea:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c00050ee:	0f 85 c5 00 00 00    	jne    c00051b9 <f_rename+0x19a>
c00050f4:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00050f8:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c00050ff:	eb 03                	jmp    c0005104 <f_rename+0xe5>
c0005101:	83 f8 04             	cmp    eax,0x4
c0005104:	0f 85 af 00 00 00    	jne    c00051b9 <f_rename+0x19a>
c000510a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000510e:	e8 e7 ec ff ff       	call   c0003dfa <dir_register>
c0005113:	85 c0                	test   eax,eax
c0005115:	0f 85 9e 00 00 00    	jne    c00051b9 <f_rename+0x19a>
c000511b:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0005122:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0005126:	b9 13 00 00 00       	mov    ecx,0x13
c000512b:	8d 43 0d             	lea    eax,[ebx+0xd]
c000512e:	e8 4c d0 ff ff       	call   c000217f <mem_cpy>
c0005133:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0005137:	a8 10                	test   al,0x10
c0005139:	75 03                	jne    c000513e <f_rename+0x11f>
c000513b:	83 c8 20             	or     eax,0x20
c000513e:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0005141:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005145:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005149:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c000514d:	74 54                	je     c00051a3 <f_rename+0x184>
c000514f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0005153:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0005157:	74 4a                	je     c00051a3 <f_rename+0x184>
c0005159:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000515d:	89 da                	mov    edx,ebx
c000515f:	8a 07                	mov    al,BYTE PTR [edi]
c0005161:	e8 de e3 ff ff       	call   c0003544 <ld_clust.isra.0>
c0005166:	89 c2                	mov    edx,eax
c0005168:	89 f8                	mov    eax,edi
c000516a:	e8 3a d2 ff ff       	call   c00023a9 <clst2sect>
c000516f:	89 c2                	mov    edx,eax
c0005171:	b8 02 00 00 00       	mov    eax,0x2
c0005176:	85 d2                	test   edx,edx
c0005178:	74 3f                	je     c00051b9 <f_rename+0x19a>
c000517a:	89 f8                	mov    eax,edi
c000517c:	e8 37 d5 ff ff       	call   c00026b8 <move_window>
c0005181:	85 c0                	test   eax,eax
c0005183:	75 34                	jne    c00051b9 <f_rename+0x19a>
c0005185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005189:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000518d:	75 14                	jne    c00051a3 <f_rename+0x184>
c000518f:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005193:	8d 50 54             	lea    edx,[eax+0x54]
c0005196:	e8 d2 e3 ff ff       	call   c000356d <st_clust.isra.1>
c000519b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000519f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051a3:	8d 44 24 40          	lea    eax,[esp+0x40]
c00051a7:	e8 10 ea ff ff       	call   c0003bbc <dir_remove>
c00051ac:	85 c0                	test   eax,eax
c00051ae:	75 09                	jne    c00051b9 <f_rename+0x19a>
c00051b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051b4:	e8 34 df ff ff       	call   c00030ed <sync_fs>
c00051b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051bd:	83 ec 0c             	sub    esp,0xc
c00051c0:	56                   	push   esi
c00051c1:	e8 ea 0d 00 00       	call   c0005fb0 <ff_memfree>
c00051c6:	83 c4 10             	add    esp,0x10
c00051c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051cd:	81 c4 a0 00 00 00    	add    esp,0xa0
c00051d3:	5b                   	pop    ebx
c00051d4:	5e                   	pop    esi
c00051d5:	5f                   	pop    edi
c00051d6:	c3                   	ret    

c00051d7 <f_chmod>:
c00051d7:	57                   	push   edi
c00051d8:	b9 02 00 00 00       	mov    ecx,0x2
c00051dd:	56                   	push   esi
c00051de:	53                   	push   ebx
c00051df:	83 ec 50             	sub    esp,0x50
c00051e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051e6:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c00051ea:	8d 44 24 60          	lea    eax,[esp+0x60]
c00051ee:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c00051f2:	e8 1e d6 ff ff       	call   c0002815 <mount_volume>
c00051f7:	85 c0                	test   eax,eax
c00051f9:	0f 85 81 00 00 00    	jne    c0005280 <f_chmod+0xa9>
c00051ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005203:	83 ec 0c             	sub    esp,0xc
c0005206:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000520a:	68 00 02 00 00       	push   0x200
c000520f:	e8 84 0d 00 00       	call   c0005f98 <ff_memalloc>
c0005214:	83 c4 10             	add    esp,0x10
c0005217:	89 c6                	mov    esi,eax
c0005219:	b8 11 00 00 00       	mov    eax,0x11
c000521e:	85 f6                	test   esi,esi
c0005220:	74 5e                	je     c0005280 <f_chmod+0xa9>
c0005222:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005226:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000522a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000522d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005231:	e8 27 eb ff ff       	call   c0003d5d <follow_path>
c0005236:	85 c0                	test   eax,eax
c0005238:	75 32                	jne    c000526c <f_chmod+0x95>
c000523a:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000523e:	b8 06 00 00 00       	mov    eax,0x6
c0005243:	80 e2 a0             	and    dl,0xa0
c0005246:	75 24                	jne    c000526c <f_chmod+0x95>
c0005248:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524c:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c000524f:	31 d7                	xor    edi,edx
c0005251:	21 fb                	and    ebx,edi
c0005253:	83 e3 27             	and    ebx,0x27
c0005256:	31 d3                	xor    ebx,edx
c0005258:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c000525b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000525f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005263:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005267:	e8 81 de ff ff       	call   c00030ed <sync_fs>
c000526c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005270:	83 ec 0c             	sub    esp,0xc
c0005273:	56                   	push   esi
c0005274:	e8 37 0d 00 00       	call   c0005fb0 <ff_memfree>
c0005279:	83 c4 10             	add    esp,0x10
c000527c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005280:	83 c4 50             	add    esp,0x50
c0005283:	5b                   	pop    ebx
c0005284:	5e                   	pop    esi
c0005285:	5f                   	pop    edi
c0005286:	c3                   	ret    

c0005287 <f_utime>:
c0005287:	56                   	push   esi
c0005288:	b9 02 00 00 00       	mov    ecx,0x2
c000528d:	53                   	push   ebx
c000528e:	83 ec 54             	sub    esp,0x54
c0005291:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005295:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005299:	8d 44 24 60          	lea    eax,[esp+0x60]
c000529d:	e8 73 d5 ff ff       	call   c0002815 <mount_volume>
c00052a2:	85 c0                	test   eax,eax
c00052a4:	0f 85 87 00 00 00    	jne    c0005331 <f_utime+0xaa>
c00052aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052ae:	83 ec 0c             	sub    esp,0xc
c00052b1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00052b5:	68 00 02 00 00       	push   0x200
c00052ba:	e8 d9 0c 00 00       	call   c0005f98 <ff_memalloc>
c00052bf:	83 c4 10             	add    esp,0x10
c00052c2:	89 c3                	mov    ebx,eax
c00052c4:	b8 11 00 00 00       	mov    eax,0x11
c00052c9:	85 db                	test   ebx,ebx
c00052cb:	74 64                	je     c0005331 <f_utime+0xaa>
c00052cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052d1:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00052d5:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00052d8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00052dc:	e8 7c ea ff ff       	call   c0003d5d <follow_path>
c00052e1:	85 c0                	test   eax,eax
c00052e3:	75 38                	jne    c000531d <f_utime+0x96>
c00052e5:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00052e9:	b8 06 00 00 00       	mov    eax,0x6
c00052ee:	80 e2 a0             	and    dl,0xa0
c00052f1:	75 2a                	jne    c000531d <f_utime+0x96>
c00052f3:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c00052f7:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c00052fb:	c1 e2 10             	shl    edx,0x10
c00052fe:	09 c2                	or     edx,eax
c0005300:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005304:	83 c0 16             	add    eax,0x16
c0005307:	e8 70 ce ff ff       	call   c000217c <st_dword>
c000530c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005310:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005314:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005318:	e8 d0 dd ff ff       	call   c00030ed <sync_fs>
c000531d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005321:	83 ec 0c             	sub    esp,0xc
c0005324:	53                   	push   ebx
c0005325:	e8 86 0c 00 00       	call   c0005fb0 <ff_memfree>
c000532a:	83 c4 10             	add    esp,0x10
c000532d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005331:	83 c4 54             	add    esp,0x54
c0005334:	5b                   	pop    ebx
c0005335:	5e                   	pop    esi
c0005336:	c3                   	ret    

c0005337 <f_getlabel>:
c0005337:	55                   	push   ebp
c0005338:	31 c9                	xor    ecx,ecx
c000533a:	57                   	push   edi
c000533b:	56                   	push   esi
c000533c:	53                   	push   ebx
c000533d:	83 ec 5c             	sub    esp,0x5c
c0005340:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005344:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005348:	8d 44 24 70          	lea    eax,[esp+0x70]
c000534c:	e8 c4 d4 ff ff       	call   c0002815 <mount_volume>
c0005351:	85 c0                	test   eax,eax
c0005353:	89 c3                	mov    ebx,eax
c0005355:	0f 85 d9 00 00 00    	jne    c0005434 <f_getlabel+0xfd>
c000535b:	85 ff                	test   edi,edi
c000535d:	0f 84 d1 00 00 00    	je     c0005434 <f_getlabel+0xfd>
c0005363:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000536b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000536f:	31 d2                	xor    edx,edx
c0005371:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005375:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005379:	e8 1c e3 ff ff       	call   c000369a <dir_sdi>
c000537e:	85 c0                	test   eax,eax
c0005380:	89 c3                	mov    ebx,eax
c0005382:	0f 85 a2 00 00 00    	jne    c000542a <f_getlabel+0xf3>
c0005388:	8d 44 24 20          	lea    eax,[esp+0x20]
c000538c:	ba 01 00 00 00       	mov    edx,0x1
c0005391:	e8 fe e6 ff ff       	call   c0003a94 <dir_read>
c0005396:	85 c0                	test   eax,eax
c0005398:	89 c3                	mov    ebx,eax
c000539a:	0f 85 8a 00 00 00    	jne    c000542a <f_getlabel+0xf3>
c00053a0:	31 f6                	xor    esi,esi
c00053a2:	31 d2                	xor    edx,edx
c00053a4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053a8:	8d 6a 01             	lea    ebp,[edx+0x1]
c00053ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00053af:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c00053b3:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c00053b8:	89 c8                	mov    eax,ecx
c00053ba:	e8 13 ce ff ff       	call   c00021d2 <dbc_1st>
c00053bf:	85 c0                	test   eax,eax
c00053c1:	74 19                	je     c00053dc <f_getlabel+0xa5>
c00053c3:	83 fd 0b             	cmp    ebp,0xb
c00053c6:	74 14                	je     c00053dc <f_getlabel+0xa5>
c00053c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00053cc:	c1 e1 08             	shl    ecx,0x8
c00053cf:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00053d3:	8d 6a 02             	lea    ebp,[edx+0x2]
c00053d6:	09 c1                	or     ecx,eax
c00053d8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00053dc:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00053e1:	52                   	push   edx
c00053e2:	52                   	push   edx
c00053e3:	68 b5 01 00 00       	push   0x1b5
c00053e8:	50                   	push   eax
c00053e9:	e8 76 0c 00 00       	call   c0006064 <ff_oem2uni>
c00053ee:	83 c4 10             	add    esp,0x10
c00053f1:	0f b7 c0             	movzx  eax,ax
c00053f4:	85 c0                	test   eax,eax
c00053f6:	74 1f                	je     c0005417 <f_getlabel+0xe0>
c00053f8:	8d 14 37             	lea    edx,[edi+esi*1]
c00053fb:	b9 04 00 00 00       	mov    ecx,0x4
c0005400:	e8 ab ce ff ff       	call   c00022b0 <put_utf>
c0005405:	0f b6 c0             	movzx  eax,al
c0005408:	85 c0                	test   eax,eax
c000540a:	74 0b                	je     c0005417 <f_getlabel+0xe0>
c000540c:	01 c6                	add    esi,eax
c000540e:	83 fd 0b             	cmp    ebp,0xb
c0005411:	74 06                	je     c0005419 <f_getlabel+0xe2>
c0005413:	89 ea                	mov    edx,ebp
c0005415:	eb 8d                	jmp    c00053a4 <f_getlabel+0x6d>
c0005417:	31 f6                	xor    esi,esi
c0005419:	01 fe                	add    esi,edi
c000541b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000541e:	39 f7                	cmp    edi,esi
c0005420:	74 12                	je     c0005434 <f_getlabel+0xfd>
c0005422:	4e                   	dec    esi
c0005423:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c0005426:	74 f3                	je     c000541b <f_getlabel+0xe4>
c0005428:	eb 0a                	jmp    c0005434 <f_getlabel+0xfd>
c000542a:	83 fb 04             	cmp    ebx,0x4
c000542d:	75 05                	jne    c0005434 <f_getlabel+0xfd>
c000542f:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0005432:	31 db                	xor    ebx,ebx
c0005434:	85 db                	test   ebx,ebx
c0005436:	75 49                	jne    c0005481 <f_getlabel+0x14a>
c0005438:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c000543d:	74 42                	je     c0005481 <f_getlabel+0x14a>
c000543f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005443:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005446:	e8 6d d2 ff ff       	call   c00026b8 <move_window>
c000544b:	85 c0                	test   eax,eax
c000544d:	89 c3                	mov    ebx,eax
c000544f:	75 30                	jne    c0005481 <f_getlabel+0x14a>
c0005451:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005455:	b8 43 00 00 00       	mov    eax,0x43
c000545a:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c000545d:	83 f9 03             	cmp    ecx,0x3
c0005460:	74 10                	je     c0005472 <f_getlabel+0x13b>
c0005462:	83 f9 04             	cmp    ecx,0x4
c0005465:	b8 64 00 00 00       	mov    eax,0x64
c000546a:	b9 27 00 00 00       	mov    ecx,0x27
c000546f:	0f 45 c1             	cmovne eax,ecx
c0005472:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005476:	e8 e5 cc ff ff       	call   c0002160 <ld_dword>
c000547b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000547f:	89 07                	mov    DWORD PTR [edi],eax
c0005481:	83 c4 5c             	add    esp,0x5c
c0005484:	89 d8                	mov    eax,ebx
c0005486:	5b                   	pop    ebx
c0005487:	5e                   	pop    esi
c0005488:	5f                   	pop    edi
c0005489:	5d                   	pop    ebp
c000548a:	c3                   	ret    

c000548b <f_setlabel>:
c000548b:	57                   	push   edi
c000548c:	b9 02 00 00 00       	mov    ecx,0x2
c0005491:	56                   	push   esi
c0005492:	53                   	push   ebx
c0005493:	83 ec 50             	sub    esp,0x50
c0005496:	8d 54 24 04          	lea    edx,[esp+0x4]
c000549a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000549e:	e8 72 d3 ff ff       	call   c0002815 <mount_volume>
c00054a3:	85 c0                	test   eax,eax
c00054a5:	89 c6                	mov    esi,eax
c00054a7:	0f 85 65 01 00 00    	jne    c0005612 <f_setlabel+0x187>
c00054ad:	b9 0b 00 00 00       	mov    ecx,0xb
c00054b2:	ba 20 00 00 00       	mov    edx,0x20
c00054b7:	8d 44 24 0a          	lea    eax,[esp+0xa]
c00054bb:	31 db                	xor    ebx,ebx
c00054bd:	e8 d2 cc ff ff       	call   c0002194 <mem_set>
c00054c2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00054c6:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00054c9:	76 5d                	jbe    c0005528 <f_setlabel+0x9d>
c00054cb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00054cf:	e8 04 cd ff ff       	call   c00021d8 <tchar2uni>
c00054d4:	3d ff ff 00 00       	cmp    eax,0xffff
c00054d9:	76 0a                	jbe    c00054e5 <f_setlabel+0x5a>
c00054db:	be 06 00 00 00       	mov    esi,0x6
c00054e0:	e9 2d 01 00 00       	jmp    c0005612 <f_setlabel+0x187>
c00054e5:	83 ec 0c             	sub    esp,0xc
c00054e8:	50                   	push   eax
c00054e9:	e8 ee 0b 00 00       	call   c00060dc <ff_wtoupper>
c00054ee:	5a                   	pop    edx
c00054ef:	59                   	pop    ecx
c00054f0:	68 b5 01 00 00       	push   0x1b5
c00054f5:	50                   	push   eax
c00054f6:	e8 cd 0a 00 00       	call   c0005fc8 <ff_uni2oem>
c00054fb:	83 c4 10             	add    esp,0x10
c00054fe:	0f b7 f0             	movzx  esi,ax
c0005501:	85 f6                	test   esi,esi
c0005503:	89 f7                	mov    edi,esi
c0005505:	74 d4                	je     c00054db <f_setlabel+0x50>
c0005507:	89 f2                	mov    edx,esi
c0005509:	b8 f0 fd 02 c0       	mov    eax,0xc002fdf0
c000550e:	e8 ae cc ff ff       	call   c00021c1 <chk_chr>
c0005513:	85 c0                	test   eax,eax
c0005515:	75 c4                	jne    c00054db <f_setlabel+0x50>
c0005517:	81 fe ff 00 00 00    	cmp    esi,0xff
c000551d:	0f 87 c9 00 00 00    	ja     c00055ec <f_setlabel+0x161>
c0005523:	e9 e0 00 00 00       	jmp    c0005608 <f_setlabel+0x17d>
c0005528:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c000552d:	74 ac                	je     c00054db <f_setlabel+0x50>
c000552f:	85 db                	test   ebx,ebx
c0005531:	74 0e                	je     c0005541 <f_setlabel+0xb6>
c0005533:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005538:	8d 43 ff             	lea    eax,[ebx-0x1]
c000553b:	75 04                	jne    c0005541 <f_setlabel+0xb6>
c000553d:	89 c3                	mov    ebx,eax
c000553f:	eb ee                	jmp    c000552f <f_setlabel+0xa4>
c0005541:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005549:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000554d:	31 d2                	xor    edx,edx
c000554f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005553:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005557:	e8 3e e1 ff ff       	call   c000369a <dir_sdi>
c000555c:	85 c0                	test   eax,eax
c000555e:	89 c6                	mov    esi,eax
c0005560:	0f 85 ac 00 00 00    	jne    c0005612 <f_setlabel+0x187>
c0005566:	8d 44 24 20          	lea    eax,[esp+0x20]
c000556a:	ba 01 00 00 00       	mov    edx,0x1
c000556f:	e8 20 e5 ff ff       	call   c0003a94 <dir_read>
c0005574:	85 c0                	test   eax,eax
c0005576:	75 18                	jne    c0005590 <f_setlabel+0x105>
c0005578:	85 db                	test   ebx,ebx
c000557a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000557e:	74 0b                	je     c000558b <f_setlabel+0x100>
c0005580:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005584:	b9 0b 00 00 00       	mov    ecx,0xb
c0005589:	eb 47                	jmp    c00055d2 <f_setlabel+0x147>
c000558b:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000558e:	eb 47                	jmp    c00055d7 <f_setlabel+0x14c>
c0005590:	83 f8 04             	cmp    eax,0x4
c0005593:	75 53                	jne    c00055e8 <f_setlabel+0x15d>
c0005595:	85 db                	test   ebx,ebx
c0005597:	74 79                	je     c0005612 <f_setlabel+0x187>
c0005599:	8d 44 24 20          	lea    eax,[esp+0x20]
c000559d:	ba 01 00 00 00       	mov    edx,0x1
c00055a2:	e8 88 e4 ff ff       	call   c0003a2f <dir_alloc>
c00055a7:	85 c0                	test   eax,eax
c00055a9:	89 c6                	mov    esi,eax
c00055ab:	75 65                	jne    c0005612 <f_setlabel+0x187>
c00055ad:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00055b1:	b9 20 00 00 00       	mov    ecx,0x20
c00055b6:	31 d2                	xor    edx,edx
c00055b8:	e8 d7 cb ff ff       	call   c0002194 <mem_set>
c00055bd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00055c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00055c6:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00055ca:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00055ce:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00055d2:	e8 a8 cb ff ff       	call   c000217f <mem_cpy>
c00055d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00055db:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00055df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00055e3:	e8 05 db ff ff       	call   c00030ed <sync_fs>
c00055e8:	89 c6                	mov    esi,eax
c00055ea:	eb 26                	jmp    c0005612 <f_setlabel+0x187>
c00055ec:	83 fb 09             	cmp    ebx,0x9
c00055ef:	0f 87 e6 fe ff ff    	ja     c00054db <f_setlabel+0x50>
c00055f5:	89 f0                	mov    eax,esi
c00055f7:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00055fb:	43                   	inc    ebx
c00055fc:	89 f8                	mov    eax,edi
c00055fe:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005602:	43                   	inc    ebx
c0005603:	e9 ba fe ff ff       	jmp    c00054c2 <f_setlabel+0x37>
c0005608:	83 fb 0a             	cmp    ebx,0xa
c000560b:	76 ef                	jbe    c00055fc <f_setlabel+0x171>
c000560d:	e9 c9 fe ff ff       	jmp    c00054db <f_setlabel+0x50>
c0005612:	83 c4 50             	add    esp,0x50
c0005615:	89 f0                	mov    eax,esi
c0005617:	5b                   	pop    ebx
c0005618:	5e                   	pop    esi
c0005619:	5f                   	pop    edi
c000561a:	c3                   	ret    

c000561b <f_expand>:
c000561b:	55                   	push   ebp
c000561c:	57                   	push   edi
c000561d:	56                   	push   esi
c000561e:	53                   	push   ebx
c000561f:	83 ec 2c             	sub    esp,0x2c
c0005622:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005626:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000562e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005632:	89 d8                	mov    eax,ebx
c0005634:	e8 d6 cf ff ff       	call   c000260f <validate>
c0005639:	85 c0                	test   eax,eax
c000563b:	89 c6                	mov    esi,eax
c000563d:	0f 85 3b 01 00 00    	jne    c000577e <f_expand+0x163>
c0005643:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005647:	85 f6                	test   esi,esi
c0005649:	0f 85 2f 01 00 00    	jne    c000577e <f_expand+0x163>
c000564f:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005654:	75 0a                	jne    c0005660 <f_expand+0x45>
c0005656:	be 07 00 00 00       	mov    esi,0x7
c000565b:	e9 1e 01 00 00       	jmp    c000577e <f_expand+0x163>
c0005660:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005664:	75 f0                	jne    c0005656 <f_expand+0x3b>
c0005666:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000566a:	74 ea                	je     c0005656 <f_expand+0x3b>
c000566c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005670:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005674:	c1 e7 09             	shl    edi,0x9
c0005677:	8d 47 ff             	lea    eax,[edi-0x1]
c000567a:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000567e:	0f 95 c0             	setne  al
c0005681:	31 d2                	xor    edx,edx
c0005683:	0f b6 c0             	movzx  eax,al
c0005686:	89 c5                	mov    ebp,eax
c0005688:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000568c:	f7 f7                	div    edi
c000568e:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c0005691:	01 e8                	add    eax,ebp
c0005693:	83 ff 01             	cmp    edi,0x1
c0005696:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000569a:	76 05                	jbe    c00056a1 <f_expand+0x86>
c000569c:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000569f:	77 05                	ja     c00056a6 <f_expand+0x8b>
c00056a1:	bf 02 00 00 00       	mov    edi,0x2
c00056a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00056a9:	89 fd                	mov    ebp,edi
c00056ab:	31 c9                	xor    ecx,ecx
c00056ad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00056b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00056b3:	89 ea                	mov    edx,ebp
c00056b5:	45                   	inc    ebp
c00056b6:	e8 da de ff ff       	call   c0003595 <get_fat.isra.2>
c00056bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00056bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00056c3:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00056c6:	77 05                	ja     c00056cd <f_expand+0xb2>
c00056c8:	bd 02 00 00 00       	mov    ebp,0x2
c00056cd:	83 f8 01             	cmp    eax,0x1
c00056d0:	74 20                	je     c00056f2 <f_expand+0xd7>
c00056d2:	83 f8 ff             	cmp    eax,0xffffffff
c00056d5:	74 25                	je     c00056fc <f_expand+0xe1>
c00056d7:	85 c0                	test   eax,eax
c00056d9:	75 09                	jne    c00056e4 <f_expand+0xc9>
c00056db:	41                   	inc    ecx
c00056dc:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00056e0:	75 07                	jne    c00056e9 <f_expand+0xce>
c00056e2:	eb 1f                	jmp    c0005703 <f_expand+0xe8>
c00056e4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00056e7:	31 c9                	xor    ecx,ecx
c00056e9:	39 fd                	cmp    ebp,edi
c00056eb:	75 c0                	jne    c00056ad <f_expand+0x92>
c00056ed:	e9 64 ff ff ff       	jmp    c0005656 <f_expand+0x3b>
c00056f2:	be 02 00 00 00       	mov    esi,0x2
c00056f7:	e9 82 00 00 00       	jmp    c000577e <f_expand+0x163>
c00056fc:	be 01 00 00 00       	mov    esi,0x1
c0005701:	eb 7b                	jmp    c000577e <f_expand+0x163>
c0005703:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005708:	74 2b                	je     c0005735 <f_expand+0x11a>
c000570a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000570d:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005711:	85 ed                	test   ebp,ebp
c0005713:	74 24                	je     c0005739 <f_expand+0x11e>
c0005715:	83 c9 ff             	or     ecx,0xffffffff
c0005718:	83 fd 01             	cmp    ebp,0x1
c000571b:	74 03                	je     c0005720 <f_expand+0x105>
c000571d:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005720:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005724:	89 fa                	mov    edx,edi
c0005726:	e8 e7 d3 ff ff       	call   c0002b12 <put_fat>
c000572b:	85 c0                	test   eax,eax
c000572d:	75 4d                	jne    c000577c <f_expand+0x161>
c000572f:	89 f8                	mov    eax,edi
c0005731:	4d                   	dec    ebp
c0005732:	47                   	inc    edi
c0005733:	eb dc                	jmp    c0005711 <f_expand+0xf6>
c0005735:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005738:	48                   	dec    eax
c0005739:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000573d:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005742:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005745:	74 37                	je     c000577e <f_expand+0x163>
c0005747:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000574a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000574d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005751:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005754:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005757:	83 c8 40             	or     eax,0x40
c000575a:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000575d:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005760:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005763:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005766:	39 c8                	cmp    eax,ecx
c0005768:	77 14                	ja     c000577e <f_expand+0x163>
c000576a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000576e:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005771:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005774:	83 c8 01             	or     eax,0x1
c0005777:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000577a:	eb 02                	jmp    c000577e <f_expand+0x163>
c000577c:	89 c6                	mov    esi,eax
c000577e:	83 c4 2c             	add    esp,0x2c
c0005781:	89 f0                	mov    eax,esi
c0005783:	5b                   	pop    ebx
c0005784:	5e                   	pop    esi
c0005785:	5f                   	pop    edi
c0005786:	5d                   	pop    ebp
c0005787:	c3                   	ret    

c0005788 <f_mkfs>:
c0005788:	55                   	push   ebp
c0005789:	57                   	push   edi
c000578a:	56                   	push   esi
c000578b:	be 0b 00 00 00       	mov    esi,0xb
c0005790:	53                   	push   ebx
c0005791:	83 ec 5c             	sub    esp,0x5c
c0005794:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005798:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000579c:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c00057a0:	e8 1e ce ff ff       	call   c00025c3 <get_ldnumber>
c00057a5:	85 c0                	test   eax,eax
c00057a7:	0f 88 e0 07 00 00    	js     c0005f8d <f_mkfs+0x805>
c00057ad:	8b 14 85 80 7c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc8380]
c00057b4:	85 d2                	test   edx,edx
c00057b6:	74 03                	je     c00057bb <f_mkfs+0x33>
c00057b8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00057bb:	85 db                	test   ebx,ebx
c00057bd:	75 05                	jne    c00057c4 <f_mkfs+0x3c>
c00057bf:	bb e0 fd 02 c0       	mov    ebx,0xc002fde0
c00057c4:	0f b6 c0             	movzx  eax,al
c00057c7:	83 ec 0c             	sub    esp,0xc
c00057ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00057ce:	be 03 00 00 00       	mov    esi,0x3
c00057d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00057d7:	e8 29 c9 ff ff       	call   c0002105 <disk_initialize>
c00057dc:	83 c4 10             	add    esp,0x10
c00057df:	a8 01                	test   al,0x1
c00057e1:	0f 85 a6 07 00 00    	jne    c0005f8d <f_mkfs+0x805>
c00057e7:	a8 04                	test   al,0x4
c00057e9:	be 0a 00 00 00       	mov    esi,0xa
c00057ee:	0f 85 99 07 00 00    	jne    c0005f8d <f_mkfs+0x805>
c00057f4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00057f7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00057fb:	85 c0                	test   eax,eax
c00057fd:	75 20                	jne    c000581f <f_mkfs+0x97>
c00057ff:	51                   	push   ecx
c0005800:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005804:	50                   	push   eax
c0005805:	6a 03                	push   0x3
c0005807:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000580b:	e8 24 c9 ff ff       	call   c0002134 <disk_ioctl>
c0005810:	83 c4 10             	add    esp,0x10
c0005813:	85 c0                	test   eax,eax
c0005815:	74 08                	je     c000581f <f_mkfs+0x97>
c0005817:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000581f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0005823:	8d 42 ff             	lea    eax,[edx-0x1]
c0005826:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000582b:	77 04                	ja     c0005831 <f_mkfs+0xa9>
c000582d:	85 c2                	test   edx,eax
c000582f:	74 08                	je     c0005839 <f_mkfs+0xb1>
c0005831:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c0005839:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000583c:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0005840:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005844:	48                   	dec    eax
c0005845:	3c 01                	cmp    al,0x1
c0005847:	76 05                	jbe    c000584e <f_mkfs+0xc6>
c0005849:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000584e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005851:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005855:	48                   	dec    eax
c0005856:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000585b:	77 15                	ja     c0005872 <f_mkfs+0xea>
c000585d:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c0005862:	b8 00 02 00 00       	mov    eax,0x200
c0005867:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c000586c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005870:	eb 08                	jmp    c000587a <f_mkfs+0xf2>
c0005872:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c000587a:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000587d:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005883:	77 0f                	ja     c0005894 <f_mkfs+0x10c>
c0005885:	8d 47 ff             	lea    eax,[edi-0x1]
c0005888:	85 f8                	test   eax,edi
c000588a:	b8 00 00 00 00       	mov    eax,0x0
c000588f:	0f 45 f8             	cmovne edi,eax
c0005892:	eb 02                	jmp    c0005896 <f_mkfs+0x10e>
c0005894:	31 ff                	xor    edi,edi
c0005896:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000589e:	77 0a                	ja     c00058aa <f_mkfs+0x122>
c00058a0:	be 11 00 00 00       	mov    esi,0x11
c00058a5:	e9 e3 06 00 00       	jmp    c0005f8d <f_mkfs+0x805>
c00058aa:	85 ed                	test   ebp,ebp
c00058ac:	8b 33                	mov    esi,DWORD PTR [ebx]
c00058ae:	89 eb                	mov    ebx,ebp
c00058b0:	75 1e                	jne    c00058d0 <f_mkfs+0x148>
c00058b2:	83 ec 0c             	sub    esp,0xc
c00058b5:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00058bc:	25 00 fe ff ff       	and    eax,0xfffffe00
c00058c1:	50                   	push   eax
c00058c2:	e8 d1 06 00 00       	call   c0005f98 <ff_memalloc>
c00058c7:	83 c4 10             	add    esp,0x10
c00058ca:	85 c0                	test   eax,eax
c00058cc:	89 c3                	mov    ebx,eax
c00058ce:	74 d0                	je     c00058a0 <f_mkfs+0x118>
c00058d0:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c00058d8:	52                   	push   edx
c00058d9:	8d 44 24 48          	lea    eax,[esp+0x48]
c00058dd:	50                   	push   eax
c00058de:	6a 01                	push   0x1
c00058e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00058e4:	e8 4b c8 ff ff       	call   c0002134 <disk_ioctl>
c00058e9:	83 c4 10             	add    esp,0x10
c00058ec:	85 c0                	test   eax,eax
c00058ee:	0f 85 42 06 00 00    	jne    c0005f36 <f_mkfs+0x7ae>
c00058f4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00058fc:	89 f0                	mov    eax,esi
c00058fe:	83 e0 08             	and    eax,0x8
c0005901:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005905:	75 18                	jne    c000591f <f_mkfs+0x197>
c0005907:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000590b:	83 f8 3f             	cmp    eax,0x3f
c000590e:	76 0f                	jbe    c000591f <f_mkfs+0x197>
c0005910:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c0005918:	83 e8 3f             	sub    eax,0x3f
c000591b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000591f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005923:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005927:	83 f8 7f             	cmp    eax,0x7f
c000592a:	0f 86 5f 02 00 00    	jbe    c0005b8f <f_mkfs+0x407>
c0005930:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c0005936:	b9 80 00 00 00       	mov    ecx,0x80
c000593b:	77 05                	ja     c0005942 <f_mkfs+0x1ba>
c000593d:	c1 ef 09             	shr    edi,0x9
c0005940:	89 f9                	mov    ecx,edi
c0005942:	89 f0                	mov    eax,esi
c0005944:	89 f7                	mov    edi,esi
c0005946:	83 e0 01             	and    eax,0x1
c0005949:	83 e7 02             	and    edi,0x2
c000594c:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c0005950:	0f b6 c0             	movzx  eax,al
c0005953:	74 0a                	je     c000595f <f_mkfs+0x1d7>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 84 53 01 00 00    	je     c0005ab0 <f_mkfs+0x328>
c000595d:	eb 37                	jmp    c0005996 <f_mkfs+0x20e>
c000595f:	85 c0                	test   eax,eax
c0005961:	be 13 00 00 00       	mov    esi,0x13
c0005966:	75 2e                	jne    c0005996 <f_mkfs+0x20e>
c0005968:	e9 e0 05 00 00       	jmp    c0005f4d <f_mkfs+0x7c5>
c000596d:	83 f8 02             	cmp    eax,0x2
c0005970:	0f 85 11 02 00 00    	jne    c0005b87 <f_mkfs+0x3ff>
c0005976:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c000597c:	0f 86 e8 01 00 00    	jbe    c0005b6a <f_mkfs+0x3e2>
c0005982:	85 c9                	test   ecx,ecx
c0005984:	0f 85 d5 05 00 00    	jne    c0005f5f <f_mkfs+0x7d7>
c000598a:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000598d:	83 f9 40             	cmp    ecx,0x40
c0005990:	0f 87 d9 05 00 00    	ja     c0005f6f <f_mkfs+0x7e7>
c0005996:	85 c9                	test   ecx,ecx
c0005998:	89 cf                	mov    edi,ecx
c000599a:	75 1c                	jne    c00059b8 <f_mkfs+0x230>
c000599c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00059a0:	b8 c0 fd 02 c0       	mov    eax,0xc002fdc0
c00059a5:	bf 01 00 00 00       	mov    edi,0x1
c00059aa:	c1 ee 0c             	shr    esi,0xc
c00059ad:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00059b0:	85 d2                	test   edx,edx
c00059b2:	0f 85 67 01 00 00    	jne    c0005b1f <f_mkfs+0x397>
c00059b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00059bc:	31 d2                	xor    edx,edx
c00059be:	f7 f7                	div    edi
c00059c0:	3d f5 0f 00 00       	cmp    eax,0xff5
c00059c5:	0f 86 66 01 00 00    	jbe    c0005b31 <f_mkfs+0x3a9>
c00059cb:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c00059d0:	83 c0 02             	add    eax,0x2
c00059d3:	01 c0                	add    eax,eax
c00059d5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00059dd:	05 ff 01 00 00       	add    eax,0x1ff
c00059e2:	c1 e8 09             	shr    eax,0x9
c00059e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00059e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ed:	c1 e0 05             	shl    eax,0x5
c00059f0:	c1 e8 09             	shr    eax,0x9
c00059f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00059f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00059fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005a00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a04:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005a08:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005a0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a10:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005a15:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005a19:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005a1d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005a21:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0005a25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005a29:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005a2d:	f7 d8                	neg    eax
c0005a2f:	21 c6                	and    esi,eax
c0005a31:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a36:	29 d6                	sub    esi,edx
c0005a38:	83 f8 03             	cmp    eax,0x3
c0005a3b:	0f 85 03 01 00 00    	jne    c0005b44 <f_mkfs+0x3bc>
c0005a41:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005a45:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005a49:	89 f8                	mov    eax,edi
c0005a4b:	c1 e0 04             	shl    eax,0x4
c0005a4e:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c0005a52:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005a56:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005a5a:	0f 82 2f 01 00 00    	jb     c0005b8f <f_mkfs+0x407>
c0005a60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005a64:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005a68:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005a6c:	89 c2                	mov    edx,eax
c0005a6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a72:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005a77:	29 c2                	sub    edx,eax
c0005a79:	89 d0                	mov    eax,edx
c0005a7b:	31 d2                	xor    edx,edx
c0005a7d:	f7 f7                	div    edi
c0005a7f:	89 c6                	mov    esi,eax
c0005a81:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a86:	83 f8 03             	cmp    eax,0x3
c0005a89:	0f 85 de fe ff ff    	jne    c000596d <f_mkfs+0x1e5>
c0005a8f:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005a95:	0f 87 03 01 00 00    	ja     c0005b9e <f_mkfs+0x416>
c0005a9b:	85 c9                	test   ecx,ecx
c0005a9d:	0f 85 ec 00 00 00    	jne    c0005b8f <f_mkfs+0x407>
c0005aa3:	83 ff 01             	cmp    edi,0x1
c0005aa6:	0f 86 e3 00 00 00    	jbe    c0005b8f <f_mkfs+0x407>
c0005aac:	d1 ef                	shr    edi,1
c0005aae:	89 f9                	mov    ecx,edi
c0005ab0:	85 c9                	test   ecx,ecx
c0005ab2:	89 ce                	mov    esi,ecx
c0005ab4:	75 25                	jne    c0005adb <f_mkfs+0x353>
c0005ab6:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005aba:	b8 d0 fd 02 c0       	mov    eax,0xc002fdd0
c0005abf:	b9 01 00 00 00       	mov    ecx,0x1
c0005ac4:	c1 ee 11             	shr    esi,0x11
c0005ac7:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005aca:	85 d2                	test   edx,edx
c0005acc:	74 0b                	je     c0005ad9 <f_mkfs+0x351>
c0005ace:	83 c0 02             	add    eax,0x2
c0005ad1:	39 f2                	cmp    edx,esi
c0005ad3:	77 04                	ja     c0005ad9 <f_mkfs+0x351>
c0005ad5:	01 c9                	add    ecx,ecx
c0005ad7:	eb ee                	jmp    c0005ac7 <f_mkfs+0x33f>
c0005ad9:	31 f6                	xor    esi,esi
c0005adb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005adf:	31 d2                	xor    edx,edx
c0005ae1:	f7 f1                	div    ecx
c0005ae3:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005aea:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005aef:	c1 ea 09             	shr    edx,0x9
c0005af2:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005af7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005afb:	0f 87 8e 00 00 00    	ja     c0005b8f <f_mkfs+0x407>
c0005b01:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005b09:	89 cf                	mov    edi,ecx
c0005b0b:	89 f1                	mov    ecx,esi
c0005b0d:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005b15:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005b1a:	e9 d8 fe ff ff       	jmp    c00059f7 <f_mkfs+0x26f>
c0005b1f:	83 c0 02             	add    eax,0x2
c0005b22:	39 f2                	cmp    edx,esi
c0005b24:	0f 87 8e fe ff ff    	ja     c00059b8 <f_mkfs+0x230>
c0005b2a:	01 ff                	add    edi,edi
c0005b2c:	e9 7c fe ff ff       	jmp    c00059ad <f_mkfs+0x225>
c0005b31:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005b36:	8d 04 40             	lea    eax,[eax+eax*2]
c0005b39:	40                   	inc    eax
c0005b3a:	d1 e8                	shr    eax,1
c0005b3c:	83 c0 03             	add    eax,0x3
c0005b3f:	e9 91 fe ff ff       	jmp    c00059d5 <f_mkfs+0x24d>
c0005b44:	31 d2                	xor    edx,edx
c0005b46:	89 f0                	mov    eax,esi
c0005b48:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005b4c:	85 d2                	test   edx,edx
c0005b4e:	74 09                	je     c0005b59 <f_mkfs+0x3d1>
c0005b50:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005b54:	4e                   	dec    esi
c0005b55:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005b59:	89 f0                	mov    eax,esi
c0005b5b:	31 d2                	xor    edx,edx
c0005b5d:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005b61:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005b65:	e9 df fe ff ff       	jmp    c0005a49 <f_mkfs+0x2c1>
c0005b6a:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005b70:	77 2c                	ja     c0005b9e <f_mkfs+0x416>
c0005b72:	85 c9                	test   ecx,ecx
c0005b74:	75 19                	jne    c0005b8f <f_mkfs+0x407>
c0005b76:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005b79:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005b7f:	0f 86 11 fe ff ff    	jbe    c0005996 <f_mkfs+0x20e>
c0005b85:	eb 08                	jmp    c0005b8f <f_mkfs+0x407>
c0005b87:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005b8d:	76 0a                	jbe    c0005b99 <f_mkfs+0x411>
c0005b8f:	be 0e 00 00 00       	mov    esi,0xe
c0005b94:	e9 b4 03 00 00       	jmp    c0005f4d <f_mkfs+0x7c5>
c0005b99:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005b9e:	31 d2                	xor    edx,edx
c0005ba0:	b9 00 02 00 00       	mov    ecx,0x200
c0005ba5:	89 d8                	mov    eax,ebx
c0005ba7:	e8 e8 c5 ff ff       	call   c0002194 <mem_set>
c0005bac:	b9 0b 00 00 00       	mov    ecx,0xb
c0005bb1:	ba 6e fd 02 c0       	mov    edx,0xc002fd6e
c0005bb6:	89 d8                	mov    eax,ebx
c0005bb8:	e8 c2 c5 ff ff       	call   c000217f <mem_cpy>
c0005bbd:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005bc0:	ba 00 02 00 00       	mov    edx,0x200
c0005bc5:	e8 ae c5 ff ff       	call   c0002178 <st_word>
c0005bca:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005bcf:	89 f8                	mov    eax,edi
c0005bd1:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005bd4:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005bd7:	e8 9c c5 ff ff       	call   c0002178 <st_word>
c0005bdc:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005be0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005be3:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005be8:	83 f8 03             	cmp    eax,0x3
c0005beb:	b8 00 00 00 00       	mov    eax,0x0
c0005bf0:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c0005bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005bf9:	8d 43 11             	lea    eax,[ebx+0x11]
c0005bfc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005c00:	e8 73 c5 ff ff       	call   c0002178 <st_word>
c0005c05:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005c09:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005c0f:	77 0a                	ja     c0005c1b <f_mkfs+0x493>
c0005c11:	8d 43 13             	lea    eax,[ebx+0x13]
c0005c14:	e8 5f c5 ff ff       	call   c0002178 <st_word>
c0005c19:	eb 08                	jmp    c0005c23 <f_mkfs+0x49b>
c0005c1b:	8d 43 20             	lea    eax,[ebx+0x20]
c0005c1e:	e8 59 c5 ff ff       	call   c000217c <st_dword>
c0005c23:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005c27:	8d 43 18             	lea    eax,[ebx+0x18]
c0005c2a:	ba 3f 00 00 00       	mov    edx,0x3f
c0005c2f:	e8 44 c5 ff ff       	call   c0002178 <st_word>
c0005c34:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005c37:	ba ff 00 00 00       	mov    edx,0xff
c0005c3c:	e8 37 c5 ff ff       	call   c0002178 <st_word>
c0005c41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c45:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005c48:	e8 2f c5 ff ff       	call   c000217c <st_dword>
c0005c4d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c52:	83 f8 03             	cmp    eax,0x3
c0005c55:	75 57                	jne    c0005cae <f_mkfs+0x526>
c0005c57:	8d 43 43             	lea    eax,[ebx+0x43]
c0005c5a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005c5f:	e8 18 c5 ff ff       	call   c000217c <st_dword>
c0005c64:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005c68:	8d 43 24             	lea    eax,[ebx+0x24]
c0005c6b:	e8 0c c5 ff ff       	call   c000217c <st_dword>
c0005c70:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005c73:	ba 02 00 00 00       	mov    edx,0x2
c0005c78:	e8 ff c4 ff ff       	call   c000217c <st_dword>
c0005c7d:	8d 43 30             	lea    eax,[ebx+0x30]
c0005c80:	ba 01 00 00 00       	mov    edx,0x1
c0005c85:	e8 ee c4 ff ff       	call   c0002178 <st_word>
c0005c8a:	8d 43 32             	lea    eax,[ebx+0x32]
c0005c8d:	ba 06 00 00 00       	mov    edx,0x6
c0005c92:	e8 e1 c4 ff ff       	call   c0002178 <st_word>
c0005c97:	8d 43 47             	lea    eax,[ebx+0x47]
c0005c9a:	b9 13 00 00 00       	mov    ecx,0x13
c0005c9f:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005ca3:	ba 7a fd 02 c0       	mov    edx,0xc002fd7a
c0005ca8:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005cac:	eb 2f                	jmp    c0005cdd <f_mkfs+0x555>
c0005cae:	8d 43 27             	lea    eax,[ebx+0x27]
c0005cb1:	ba 00 00 21 50       	mov    edx,0x50210000
c0005cb6:	e8 c1 c4 ff ff       	call   c000217c <st_dword>
c0005cbb:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005cc0:	8d 43 16             	lea    eax,[ebx+0x16]
c0005cc3:	e8 b0 c4 ff ff       	call   c0002178 <st_word>
c0005cc8:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005ccb:	b9 13 00 00 00       	mov    ecx,0x13
c0005cd0:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005cd4:	ba 8e fd 02 c0       	mov    edx,0xc002fd8e
c0005cd9:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005cdd:	e8 9d c4 ff ff       	call   c000217f <mem_cpy>
c0005ce2:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005ce8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005ced:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cf1:	e8 82 c4 ff ff       	call   c0002178 <st_word>
c0005cf6:	6a 01                	push   0x1
c0005cf8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cfc:	53                   	push   ebx
c0005cfd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d01:	e8 18 c4 ff ff       	call   c000211e <disk_write>
c0005d06:	83 c4 10             	add    esp,0x10
c0005d09:	85 c0                	test   eax,eax
c0005d0b:	0f 85 25 02 00 00    	jne    c0005f36 <f_mkfs+0x7ae>
c0005d11:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d16:	83 f8 03             	cmp    eax,0x3
c0005d19:	0f 85 98 00 00 00    	jne    c0005db7 <f_mkfs+0x62f>
c0005d1f:	6a 01                	push   0x1
c0005d21:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d25:	83 c0 06             	add    eax,0x6
c0005d28:	50                   	push   eax
c0005d29:	53                   	push   ebx
c0005d2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d2e:	e8 eb c3 ff ff       	call   c000211e <disk_write>
c0005d33:	b9 00 02 00 00       	mov    ecx,0x200
c0005d38:	31 d2                	xor    edx,edx
c0005d3a:	89 d8                	mov    eax,ebx
c0005d3c:	e8 53 c4 ff ff       	call   c0002194 <mem_set>
c0005d41:	ba 52 52 61 41       	mov    edx,0x41615252
c0005d46:	89 d8                	mov    eax,ebx
c0005d48:	e8 2f c4 ff ff       	call   c000217c <st_dword>
c0005d4d:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005d53:	ba 72 72 41 61       	mov    edx,0x61417272
c0005d58:	e8 1f c4 ff ff       	call   c000217c <st_dword>
c0005d5d:	8d 56 ff             	lea    edx,[esi-0x1]
c0005d60:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005d66:	e8 11 c4 ff ff       	call   c000217c <st_dword>
c0005d6b:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005d71:	ba 02 00 00 00       	mov    edx,0x2
c0005d76:	e8 01 c4 ff ff       	call   c000217c <st_dword>
c0005d7b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005d81:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005d86:	e8 ed c3 ff ff       	call   c0002178 <st_word>
c0005d8b:	6a 01                	push   0x1
c0005d8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005d91:	83 c0 07             	add    eax,0x7
c0005d94:	50                   	push   eax
c0005d95:	53                   	push   ebx
c0005d96:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005d9a:	e8 7f c3 ff ff       	call   c000211e <disk_write>
c0005d9f:	83 c4 20             	add    esp,0x20
c0005da2:	6a 01                	push   0x1
c0005da4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005da8:	40                   	inc    eax
c0005da9:	50                   	push   eax
c0005daa:	53                   	push   ebx
c0005dab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005daf:	e8 6a c3 ff ff       	call   c000211e <disk_write>
c0005db4:	83 c4 10             	add    esp,0x10
c0005db7:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005dbb:	31 d2                	xor    edx,edx
c0005dbd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005dc1:	c1 e8 09             	shr    eax,0x9
c0005dc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dc8:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005dce:	89 d8                	mov    eax,ebx
c0005dd0:	e8 bf c3 ff ff       	call   c0002194 <mem_set>
c0005dd5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005dda:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005ddf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005de7:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005dec:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005df0:	83 f8 01             	cmp    eax,0x1
c0005df3:	0f 44 d1             	cmove  edx,ecx
c0005df6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005dfa:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005dff:	75 21                	jne    c0005e22 <f_mkfs+0x69a>
c0005e01:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005e06:	89 d8                	mov    eax,ebx
c0005e08:	e8 6f c3 ff ff       	call   c000217c <st_dword>
c0005e0d:	8d 43 04             	lea    eax,[ebx+0x4]
c0005e10:	83 ca ff             	or     edx,0xffffffff
c0005e13:	e8 64 c3 ff ff       	call   c000217c <st_dword>
c0005e18:	8d 43 08             	lea    eax,[ebx+0x8]
c0005e1b:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005e20:	eb 06                	jmp    c0005e28 <f_mkfs+0x6a0>
c0005e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005e26:	89 d8                	mov    eax,ebx
c0005e28:	e8 4f c3 ff ff       	call   c000217c <st_dword>
c0005e2d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005e35:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005e39:	0f 46 c6             	cmovbe eax,esi
c0005e3c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005e40:	50                   	push   eax
c0005e41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005e45:	53                   	push   ebx
c0005e46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005e4a:	e8 cf c2 ff ff       	call   c000211e <disk_write>
c0005e4f:	83 c4 10             	add    esp,0x10
c0005e52:	85 c0                	test   eax,eax
c0005e54:	0f 85 dc 00 00 00    	jne    c0005f36 <f_mkfs+0x7ae>
c0005e5a:	b9 00 02 00 00       	mov    ecx,0x200
c0005e5f:	31 d2                	xor    edx,edx
c0005e61:	89 d8                	mov    eax,ebx
c0005e63:	e8 2c c3 ff ff       	call   c0002194 <mem_set>
c0005e68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005e6c:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005e70:	29 ce                	sub    esi,ecx
c0005e72:	75 bd                	jne    c0005e31 <f_mkfs+0x6a9>
c0005e74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e78:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005e80:	40                   	inc    eax
c0005e81:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005e85:	0f 87 6f ff ff ff    	ja     c0005dfa <f_mkfs+0x672>
c0005e8b:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005e90:	83 f8 03             	cmp    eax,0x3
c0005e93:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005e98:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e9c:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005ea0:	0f 46 f7             	cmovbe esi,edi
c0005ea3:	56                   	push   esi
c0005ea4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ea8:	53                   	push   ebx
c0005ea9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ead:	e8 6c c2 ff ff       	call   c000211e <disk_write>
c0005eb2:	83 c4 10             	add    esp,0x10
c0005eb5:	85 c0                	test   eax,eax
c0005eb7:	75 7d                	jne    c0005f36 <f_mkfs+0x7ae>
c0005eb9:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005ebd:	29 f7                	sub    edi,esi
c0005ebf:	75 d7                	jne    c0005e98 <f_mkfs+0x710>
c0005ec1:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ec6:	b9 0c 00 00 00       	mov    ecx,0xc
c0005ecb:	83 f8 03             	cmp    eax,0x3
c0005ece:	74 1e                	je     c0005eee <f_mkfs+0x766>
c0005ed0:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005ed8:	b9 06 00 00 00       	mov    ecx,0x6
c0005edd:	77 0f                	ja     c0005eee <f_mkfs+0x766>
c0005edf:	83 f8 02             	cmp    eax,0x2
c0005ee2:	b9 04 00 00 00       	mov    ecx,0x4
c0005ee7:	74 05                	je     c0005eee <f_mkfs+0x766>
c0005ee9:	b9 01 00 00 00       	mov    ecx,0x1
c0005eee:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005ef3:	75 2a                	jne    c0005f1f <f_mkfs+0x797>
c0005ef5:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005efd:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005f01:	83 ec 0c             	sub    esp,0xc
c0005f04:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005f08:	53                   	push   ebx
c0005f09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f0d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005f11:	e8 87 d2 ff ff       	call   c000319d <create_partition>
c0005f16:	83 c4 10             	add    esp,0x10
c0005f19:	85 c0                	test   eax,eax
c0005f1b:	89 c6                	mov    esi,eax
c0005f1d:	75 2e                	jne    c0005f4d <f_mkfs+0x7c5>
c0005f1f:	50                   	push   eax
c0005f20:	31 f6                	xor    esi,esi
c0005f22:	6a 00                	push   0x0
c0005f24:	6a 00                	push   0x0
c0005f26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005f2a:	e8 05 c2 ff ff       	call   c0002134 <disk_ioctl>
c0005f2f:	83 c4 10             	add    esp,0x10
c0005f32:	85 c0                	test   eax,eax
c0005f34:	74 17                	je     c0005f4d <f_mkfs+0x7c5>
c0005f36:	85 ed                	test   ebp,ebp
c0005f38:	75 0c                	jne    c0005f46 <f_mkfs+0x7be>
c0005f3a:	83 ec 0c             	sub    esp,0xc
c0005f3d:	53                   	push   ebx
c0005f3e:	e8 6d 00 00 00       	call   c0005fb0 <ff_memfree>
c0005f43:	83 c4 10             	add    esp,0x10
c0005f46:	be 01 00 00 00       	mov    esi,0x1
c0005f4b:	eb 40                	jmp    c0005f8d <f_mkfs+0x805>
c0005f4d:	85 ed                	test   ebp,ebp
c0005f4f:	75 3c                	jne    c0005f8d <f_mkfs+0x805>
c0005f51:	83 ec 0c             	sub    esp,0xc
c0005f54:	53                   	push   ebx
c0005f55:	e8 56 00 00 00       	call   c0005fb0 <ff_memfree>
c0005f5a:	83 c4 10             	add    esp,0x10
c0005f5d:	eb 2e                	jmp    c0005f8d <f_mkfs+0x805>
c0005f5f:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005f64:	0f 85 46 fb ff ff    	jne    c0005ab0 <f_mkfs+0x328>
c0005f6a:	e9 20 fc ff ff       	jmp    c0005b8f <f_mkfs+0x407>
c0005f6f:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005f74:	0f 85 3c fb ff ff    	jne    c0005ab6 <f_mkfs+0x32e>
c0005f7a:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005f80:	89 cf                	mov    edi,ecx
c0005f82:	0f 86 30 fa ff ff    	jbe    c00059b8 <f_mkfs+0x230>
c0005f88:	e9 02 fc ff ff       	jmp    c0005b8f <f_mkfs+0x407>
c0005f8d:	83 c4 5c             	add    esp,0x5c
c0005f90:	89 f0                	mov    eax,esi
c0005f92:	5b                   	pop    ebx
c0005f93:	5e                   	pop    esi
c0005f94:	5f                   	pop    edi
c0005f95:	5d                   	pop    ebp
c0005f96:	c3                   	ret    
c0005f97:	90                   	nop

c0005f98 <ff_memalloc>:
c0005f98:	83 ec 0c             	sub    esp,0xc
c0005f9b:	83 ec 0c             	sub    esp,0xc
c0005f9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005fa2:	e8 e1 06 01 00       	call   c0016688 <malloc>
c0005fa7:	83 c4 10             	add    esp,0x10
c0005faa:	83 c4 0c             	add    esp,0xc
c0005fad:	c3                   	ret    
c0005fae:	66 90                	xchg   ax,ax

c0005fb0 <ff_memfree>:
c0005fb0:	83 ec 0c             	sub    esp,0xc
c0005fb3:	83 ec 0c             	sub    esp,0xc
c0005fb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005fba:	e8 d9 06 01 00       	call   c0016698 <free>
c0005fbf:	83 c4 10             	add    esp,0x10
c0005fc2:	90                   	nop
c0005fc3:	83 c4 0c             	add    esp,0xc
c0005fc6:	c3                   	ret    
c0005fc7:	90                   	nop

c0005fc8 <ff_uni2oem>:
c0005fc8:	83 ec 14             	sub    esp,0x14
c0005fcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fcf:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005fd3:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005fda:	c7 44 24 0c c0 01 03 c0 	mov    DWORD PTR [esp+0xc],0xc00301c0
c0005fe2:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005fe7:	77 0b                	ja     c0005ff4 <ff_uni2oem+0x2c>
c0005fe9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fed:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ff2:	eb 64                	jmp    c0006058 <ff_uni2oem+0x90>
c0005ff4:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ffc:	77 5a                	ja     c0006058 <ff_uni2oem+0x90>
c0005ffe:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0006002:	3d b5 01 00 00       	cmp    eax,0x1b5
c0006007:	75 4f                	jne    c0006058 <ff_uni2oem+0x90>
c0006009:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0006010:	eb 12                	jmp    c0006024 <ff_uni2oem+0x5c>
c0006012:	66 90                	xchg   ax,ax
c0006014:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0006019:	83 c0 01             	add    eax,0x1
c000601c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0006021:	8d 76 00             	lea    esi,[esi+0x0]
c0006024:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0006029:	83 f8 7f             	cmp    eax,0x7f
c000602c:	77 1a                	ja     c0006048 <ff_uni2oem+0x80>
c000602e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0006033:	8d 14 00             	lea    edx,[eax+eax*1]
c0006036:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000603a:	01 d0                	add    eax,edx
c000603c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000603f:	0f b7 c0             	movzx  eax,ax
c0006042:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0006046:	75 cc                	jne    c0006014 <ff_uni2oem+0x4c>
c0006048:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000604d:	83 e8 80             	sub    eax,0xffffff80
c0006050:	0f b6 c0             	movzx  eax,al
c0006053:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0006058:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000605d:	83 c4 14             	add    esp,0x14
c0006060:	c3                   	ret    
c0006061:	8d 76 00             	lea    esi,[esi+0x0]

c0006064 <ff_oem2uni>:
c0006064:	83 ec 18             	sub    esp,0x18
c0006067:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000606b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000606f:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0006074:	66 89 04 24          	mov    WORD PTR [esp],ax
c0006078:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000607f:	c7 44 24 10 c0 01 03 c0 	mov    DWORD PTR [esp+0x10],0xc00301c0
c0006087:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000608c:	83 f8 7f             	cmp    eax,0x7f
c000608f:	77 0b                	ja     c000609c <ff_oem2uni+0x38>
c0006091:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006095:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000609a:	eb 34                	jmp    c00060d0 <ff_oem2uni+0x6c>
c000609c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00060a0:	3d b5 01 00 00       	cmp    eax,0x1b5
c00060a5:	75 29                	jne    c00060d0 <ff_oem2uni+0x6c>
c00060a7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060ac:	3d ff 00 00 00       	cmp    eax,0xff
c00060b1:	77 1d                	ja     c00060d0 <ff_oem2uni+0x6c>
c00060b3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060b8:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00060bd:	8d 14 00             	lea    edx,[eax+eax*1]
c00060c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060c4:	01 d0                	add    eax,edx
c00060c6:	66 8b 00             	mov    ax,WORD PTR [eax]
c00060c9:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00060ce:	66 90                	xchg   ax,ax
c00060d0:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00060d5:	83 c4 18             	add    esp,0x18
c00060d8:	c3                   	ret    
c00060d9:	8d 76 00             	lea    esi,[esi+0x0]

c00060dc <ff_wtoupper>:
c00060dc:	83 ec 10             	sub    esp,0x10
c00060df:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00060e7:	0f 87 a7 01 00 00    	ja     c0006294 <ff_wtoupper+0x1b8>
c00060ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00060f1:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060f6:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00060fb:	3d ff 0f 00 00       	cmp    eax,0xfff
c0006100:	77 0a                	ja     c000610c <ff_wtoupper+0x30>
c0006102:	b8 c0 ff 02 c0       	mov    eax,0xc002ffc0
c0006107:	eb 0b                	jmp    c0006114 <ff_wtoupper+0x38>
c0006109:	8d 76 00             	lea    esi,[esi+0x0]
c000610c:	b8 00 ff 02 c0       	mov    eax,0xc002ff00
c0006111:	8d 76 00             	lea    esi,[esi+0x0]
c0006114:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006118:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000611c:	8d 50 02             	lea    edx,[eax+0x2]
c000611f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006123:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006126:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000612b:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006130:	85 c0                	test   eax,eax
c0006132:	0f 84 50 01 00 00    	je     c0006288 <ff_wtoupper+0x1ac>
c0006138:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000613d:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006142:	39 c2                	cmp    edx,eax
c0006144:	0f 82 3e 01 00 00    	jb     c0006288 <ff_wtoupper+0x1ac>
c000614a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000614e:	8d 50 02             	lea    edx,[eax+0x2]
c0006151:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006155:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006158:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000615d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006162:	c1 e8 08             	shr    eax,0x8
c0006165:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000616a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000616f:	0f b6 c0             	movzx  eax,al
c0006172:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006177:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000617c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0006181:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0006186:	01 ca                	add    edx,ecx
c0006188:	39 d0                	cmp    eax,edx
c000618a:	0f 8d d4 00 00 00    	jge    c0006264 <ff_wtoupper+0x188>
c0006190:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006195:	83 f8 08             	cmp    eax,0x8
c0006198:	0f 87 e6 00 00 00    	ja     c0006284 <ff_wtoupper+0x1a8>
c000619e:	8b 04 85 c0 fe 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0140]
c00061a5:	ff e0                	jmp    eax
c00061a7:	90                   	nop
c00061a8:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00061ad:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00061b2:	29 c2                	sub    edx,eax
c00061b4:	89 d0                	mov    eax,edx
c00061b6:	8d 14 00             	lea    edx,[eax+eax*1]
c00061b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061bd:	01 d0                	add    eax,edx
c00061bf:	66 8b 00             	mov    ax,WORD PTR [eax]
c00061c2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061c7:	e9 94 00 00 00       	jmp    c0006260 <ff_wtoupper+0x184>
c00061cc:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00061d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00061d5:	89 d1                	mov    ecx,edx
c00061d7:	29 c1                	sub    ecx,eax
c00061d9:	89 c8                	mov    eax,ecx
c00061db:	83 e0 01             	and    eax,0x1
c00061de:	89 c2                	mov    edx,eax
c00061e0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00061e5:	29 d0                	sub    eax,edx
c00061e7:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061ec:	eb 72                	jmp    c0006260 <ff_wtoupper+0x184>
c00061ee:	66 90                	xchg   ax,ax
c00061f0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00061f5:	83 e8 10             	sub    eax,0x10
c00061f8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061fd:	eb 61                	jmp    c0006260 <ff_wtoupper+0x184>
c00061ff:	90                   	nop
c0006200:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006205:	83 e8 20             	sub    eax,0x20
c0006208:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000620d:	eb 51                	jmp    c0006260 <ff_wtoupper+0x184>
c000620f:	90                   	nop
c0006210:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006215:	83 e8 30             	sub    eax,0x30
c0006218:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000621d:	eb 41                	jmp    c0006260 <ff_wtoupper+0x184>
c000621f:	90                   	nop
c0006220:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006225:	83 e8 1a             	sub    eax,0x1a
c0006228:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000622d:	eb 31                	jmp    c0006260 <ff_wtoupper+0x184>
c000622f:	90                   	nop
c0006230:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006235:	83 c0 08             	add    eax,0x8
c0006238:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000623d:	eb 21                	jmp    c0006260 <ff_wtoupper+0x184>
c000623f:	90                   	nop
c0006240:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006245:	83 e8 50             	sub    eax,0x50
c0006248:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000624d:	eb 11                	jmp    c0006260 <ff_wtoupper+0x184>
c000624f:	90                   	nop
c0006250:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006255:	2d 60 1c 00 00       	sub    eax,0x1c60
c000625a:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000625f:	90                   	nop
c0006260:	eb 22                	jmp    c0006284 <ff_wtoupper+0x1a8>
c0006262:	66 90                	xchg   ax,ax
c0006264:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006269:	85 c0                	test   eax,eax
c000626b:	0f 85 a7 fe ff ff    	jne    c0006118 <ff_wtoupper+0x3c>
c0006271:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006276:	d1 e0                	shl    eax,1
c0006278:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000627c:	e9 97 fe ff ff       	jmp    c0006118 <ff_wtoupper+0x3c>
c0006281:	8d 76 00             	lea    esi,[esi+0x0]
c0006284:	90                   	nop
c0006285:	8d 76 00             	lea    esi,[esi+0x0]
c0006288:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000628d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006291:	8d 76 00             	lea    esi,[esi+0x0]
c0006294:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006298:	83 c4 10             	add    esp,0x10
c000629b:	c3                   	ret    

c000629c <utf2ucs>:
c000629c:	57                   	push   edi
c000629d:	31 c9                	xor    ecx,ecx
c000629f:	56                   	push   esi
c00062a0:	89 d7                	mov    edi,edx
c00062a2:	53                   	push   ebx
c00062a3:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c00062a7:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c00062ab:	89 de                	mov    esi,ebx
c00062ad:	c1 fe 08             	sar    esi,0x8
c00062b0:	89 f2                	mov    edx,esi
c00062b2:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c00062b5:	41                   	inc    ecx
c00062b6:	85 db                	test   ebx,ebx
c00062b8:	75 e9                	jne    c00062a3 <utf2ucs+0x7>
c00062ba:	5b                   	pop    ebx
c00062bb:	5e                   	pop    esi
c00062bc:	5f                   	pop    edi
c00062bd:	c3                   	ret    

c00062be <ucs2utfn>:
c00062be:	83 e1 fe             	and    ecx,0xfffffffe
c00062c1:	01 d1                	add    ecx,edx
c00062c3:	39 d1                	cmp    ecx,edx
c00062c5:	75 04                	jne    c00062cb <ucs2utfn+0xd>
c00062c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00062ca:	c3                   	ret    
c00062cb:	57                   	push   edi
c00062cc:	56                   	push   esi
c00062cd:	53                   	push   ebx
c00062ce:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c00062d1:	83 c2 02             	add    edx,0x2
c00062d4:	89 de                	mov    esi,ebx
c00062d6:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c00062da:	c1 e6 08             	shl    esi,0x8
c00062dd:	09 f3                	or     ebx,esi
c00062df:	83 fb 3b             	cmp    ebx,0x3b
c00062e2:	74 50                	je     c0006334 <ucs2utfn+0x76>
c00062e4:	83 fb 7f             	cmp    ebx,0x7f
c00062e7:	7f 05                	jg     c00062ee <ucs2utfn+0x30>
c00062e9:	88 18                	mov    BYTE PTR [eax],bl
c00062eb:	40                   	inc    eax
c00062ec:	eb 42                	jmp    c0006330 <ucs2utfn+0x72>
c00062ee:	89 df                	mov    edi,ebx
c00062f0:	89 de                	mov    esi,ebx
c00062f2:	c1 fe 06             	sar    esi,0x6
c00062f5:	83 e7 3f             	and    edi,0x3f
c00062f8:	83 cf 80             	or     edi,0xffffff80
c00062fb:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006301:	7f 12                	jg     c0006315 <ucs2utfn+0x57>
c0006303:	83 ce c0             	or     esi,0xffffffc0
c0006306:	83 c0 02             	add    eax,0x2
c0006309:	89 f3                	mov    ebx,esi
c000630b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c000630e:	89 fb                	mov    ebx,edi
c0006310:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0006313:	eb 1b                	jmp    c0006330 <ucs2utfn+0x72>
c0006315:	c1 fb 0c             	sar    ebx,0xc
c0006318:	83 e6 3f             	and    esi,0x3f
c000631b:	83 cb e0             	or     ebx,0xffffffe0
c000631e:	83 ce 80             	or     esi,0xffffff80
c0006321:	88 18                	mov    BYTE PTR [eax],bl
c0006323:	89 f3                	mov    ebx,esi
c0006325:	83 c0 03             	add    eax,0x3
c0006328:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c000632b:	89 fb                	mov    ebx,edi
c000632d:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0006330:	39 d1                	cmp    ecx,edx
c0006332:	75 9a                	jne    c00062ce <ucs2utfn+0x10>
c0006334:	5b                   	pop    ebx
c0006335:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006338:	5e                   	pop    esi
c0006339:	5f                   	pop    edi
c000633a:	c3                   	ret    

c000633b <isjoliet>:
c000633b:	31 d2                	xor    edx,edx
c000633d:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0006340:	75 26                	jne    c0006368 <isjoliet+0x2d>
c0006342:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006346:	75 20                	jne    c0006368 <isjoliet+0x2d>
c0006348:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c000634c:	ba 02 00 00 00       	mov    edx,0x2
c0006351:	83 f8 43             	cmp    eax,0x43
c0006354:	74 12                	je     c0006368 <isjoliet+0x2d>
c0006356:	83 f8 45             	cmp    eax,0x45
c0006359:	ba 03 00 00 00       	mov    edx,0x3
c000635e:	74 08                	je     c0006368 <isjoliet+0x2d>
c0006360:	31 d2                	xor    edx,edx
c0006362:	83 f8 40             	cmp    eax,0x40
c0006365:	0f 94 c2             	sete   dl
c0006368:	89 d0                	mov    eax,edx
c000636a:	c3                   	ret    

c000636b <htohl_32>:
c000636b:	8b 00                	mov    eax,DWORD PTR [eax]
c000636d:	c3                   	ret    

c000636e <iso_733>:
c000636e:	eb fb                	jmp    c000636b <htohl_32>

c0006370 <bgrad_cache>:
c0006370:	83 fa 0e             	cmp    edx,0xe
c0006373:	77 16                	ja     c000638b <bgrad_cache+0x1b>
c0006375:	53                   	push   ebx
c0006376:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006379:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000637d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006380:	42                   	inc    edx
c0006381:	83 fa 0f             	cmp    edx,0xf
c0006384:	75 f3                	jne    c0006379 <bgrad_cache+0x9>
c0006386:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006389:	5b                   	pop    ebx
c000638a:	c3                   	ret    
c000638b:	c3                   	ret    

c000638c <ucscompare>:
c000638c:	55                   	push   ebp
c000638d:	57                   	push   edi
c000638e:	89 c7                	mov    edi,eax
c0006390:	56                   	push   esi
c0006391:	89 d6                	mov    esi,edx
c0006393:	53                   	push   ebx
c0006394:	31 d2                	xor    edx,edx
c0006396:	83 ec 1c             	sub    esp,0x1c
c0006399:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000639d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c00063a2:	c1 e3 08             	shl    ebx,0x8
c00063a5:	09 c3                	or     ebx,eax
c00063a7:	39 ca                	cmp    edx,ecx
c00063a9:	7d 42                	jge    c00063ed <ucscompare+0x61>
c00063ab:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00063af:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c00063b3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00063b7:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c00063bc:	c1 e0 08             	shl    eax,0x8
c00063bf:	09 e8                	or     eax,ebp
c00063c1:	83 f8 3b             	cmp    eax,0x3b
c00063c4:	74 27                	je     c00063ed <ucscompare+0x61>
c00063c6:	83 ec 0c             	sub    esp,0xc
c00063c9:	50                   	push   eax
c00063ca:	e8 b1 a5 ff ff       	call   c0000980 <tolower>
c00063cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00063d2:	89 c5                	mov    ebp,eax
c00063d4:	e8 a7 a5 ff ff       	call   c0000980 <tolower>
c00063d9:	83 c4 10             	add    esp,0x10
c00063dc:	39 c5                	cmp    ebp,eax
c00063de:	75 20                	jne    c0006400 <ucscompare+0x74>
c00063e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00063e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00063e8:	83 c2 02             	add    edx,0x2
c00063eb:	eb ac                	jmp    c0006399 <ucscompare+0xd>
c00063ed:	83 fb 2f             	cmp    ebx,0x2f
c00063f0:	0f 95 c2             	setne  dl
c00063f3:	31 c0                	xor    eax,eax
c00063f5:	85 db                	test   ebx,ebx
c00063f7:	0f 95 c0             	setne  al
c00063fa:	21 d0                	and    eax,edx
c00063fc:	f7 d8                	neg    eax
c00063fe:	eb 03                	jmp    c0006403 <ucscompare+0x77>
c0006400:	83 c8 ff             	or     eax,0xffffffff
c0006403:	83 c4 1c             	add    esp,0x1c
c0006406:	5b                   	pop    ebx
c0006407:	5e                   	pop    esi
c0006408:	5f                   	pop    edi
c0006409:	5d                   	pop    ebp
c000640a:	c3                   	ret    

c000640b <fncompare>:
c000640b:	55                   	push   ebp
c000640c:	57                   	push   edi
c000640d:	89 c7                	mov    edi,eax
c000640f:	56                   	push   esi
c0006410:	89 ce                	mov    esi,ecx
c0006412:	53                   	push   ebx
c0006413:	31 db                	xor    ebx,ebx
c0006415:	83 ec 1c             	sub    esp,0x1c
c0006418:	39 d3                	cmp    ebx,edx
c000641a:	7d 45                	jge    c0006461 <fncompare+0x56>
c000641c:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006420:	83 f8 3b             	cmp    eax,0x3b
c0006423:	74 3c                	je     c0006461 <fncompare+0x56>
c0006425:	83 f8 2e             	cmp    eax,0x2e
c0006428:	75 0e                	jne    c0006438 <fncompare+0x2d>
c000642a:	8d 4a ff             	lea    ecx,[edx-0x1]
c000642d:	39 d9                	cmp    ecx,ebx
c000642f:	74 30                	je     c0006461 <fncompare+0x56>
c0006431:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0006436:	74 29                	je     c0006461 <fncompare+0x56>
c0006438:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000643c:	83 ec 0c             	sub    esp,0xc
c000643f:	50                   	push   eax
c0006440:	e8 3b a5 ff ff       	call   c0000980 <tolower>
c0006445:	89 c5                	mov    ebp,eax
c0006447:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c000644b:	89 04 24             	mov    DWORD PTR [esp],eax
c000644e:	e8 2d a5 ff ff       	call   c0000980 <tolower>
c0006453:	83 c4 10             	add    esp,0x10
c0006456:	39 c5                	cmp    ebp,eax
c0006458:	75 1e                	jne    c0006478 <fncompare+0x6d>
c000645a:	43                   	inc    ebx
c000645b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645f:	eb b7                	jmp    c0006418 <fncompare+0xd>
c0006461:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006465:	83 fa 2f             	cmp    edx,0x2f
c0006468:	0f 95 c1             	setne  cl
c000646b:	31 c0                	xor    eax,eax
c000646d:	85 d2                	test   edx,edx
c000646f:	0f 95 c0             	setne  al
c0006472:	21 c8                	and    eax,ecx
c0006474:	f7 d8                	neg    eax
c0006476:	eb 03                	jmp    c000647b <fncompare+0x70>
c0006478:	83 c8 ff             	or     eax,0xffffffff
c000647b:	83 c4 1c             	add    esp,0x1c
c000647e:	5b                   	pop    ebx
c000647f:	5e                   	pop    esi
c0006480:	5f                   	pop    edi
c0006481:	5d                   	pop    ebp
c0006482:	c3                   	ret    

c0006483 <bclear_cache>:
c0006483:	83 ec 18             	sub    esp,0x18
c0006486:	68 c0 02 03 c0       	push   0xc00302c0
c000648b:	e8 80 33 02 00       	call   c0029810 <iso_kprintf>
c0006490:	83 c4 10             	add    esp,0x10
c0006493:	31 c0                	xor    eax,eax
c0006495:	8b 14 85 20 70 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc8fe0]
c000649c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c00064a2:	8b 14 85 80 70 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc8f80]
c00064a9:	40                   	inc    eax
c00064aa:	83 f8 10             	cmp    eax,0x10
c00064ad:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c00064b3:	75 e0                	jne    c0006495 <bclear_cache+0x12>
c00064b5:	83 c4 0c             	add    esp,0xc
c00064b8:	c3                   	ret    

c00064b9 <bclear>:
c00064b9:	eb c8                	jmp    c0006483 <bclear_cache>

c00064bb <iso_break_all>:
c00064bb:	83 ec 18             	sub    esp,0x18
c00064be:	68 ce 02 03 c0       	push   0xc00302ce
c00064c3:	e8 48 33 02 00       	call   c0029810 <iso_kprintf>
c00064c8:	83 c4 10             	add    esp,0x10
c00064cb:	31 c0                	xor    eax,eax
c00064cd:	c7 80 b0 7d 03 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffc8250],0x1
c00064d7:	05 94 00 00 00       	add    eax,0x94
c00064dc:	3d 40 09 00 00       	cmp    eax,0x940
c00064e1:	75 ea                	jne    c00064cd <iso_break_all+0x12>
c00064e3:	83 c4 0c             	add    esp,0xc
c00064e6:	c3                   	ret    

c00064e7 <isoReadDiscSector>:
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f be 05 60 70 03 c0 	movsx  eax,BYTE PTR ds:0xc0037060
c00064f1:	50                   	push   eax
c00064f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00064f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00064fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00064fe:	e8 b1 32 02 00       	call   c00297b4 <isoReadDiscSectorHelper>
c0006503:	83 c4 1c             	add    esp,0x1c
c0006506:	c3                   	ret    

c0006507 <bread_cache>:
c0006507:	55                   	push   ebp
c0006508:	57                   	push   edi
c0006509:	89 d7                	mov    edi,edx
c000650b:	56                   	push   esi
c000650c:	ba 0f 00 00 00       	mov    edx,0xf
c0006511:	53                   	push   ebx
c0006512:	89 c6                	mov    esi,eax
c0006514:	83 ec 0c             	sub    esp,0xc
c0006517:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c000651a:	39 38                	cmp    DWORD PTR [eax],edi
c000651c:	74 3c                	je     c000655a <bread_cache+0x53>
c000651e:	4a                   	dec    edx
c000651f:	83 fa ff             	cmp    edx,0xffffffff
c0006522:	75 f3                	jne    c0006517 <bread_cache+0x10>
c0006524:	31 db                	xor    ebx,ebx
c0006526:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0006529:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c000652c:	74 08                	je     c0006536 <bread_cache+0x2f>
c000652e:	43                   	inc    ebx
c000652f:	83 fb 10             	cmp    ebx,0x10
c0006532:	75 f2                	jne    c0006526 <bread_cache+0x1f>
c0006534:	31 db                	xor    ebx,ebx
c0006536:	50                   	push   eax
c0006537:	6a 01                	push   0x1
c0006539:	57                   	push   edi
c000653a:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c000653d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006540:	83 c0 04             	add    eax,0x4
c0006543:	50                   	push   eax
c0006544:	e8 9e ff ff ff       	call   c00064e7 <isoReadDiscSector>
c0006549:	83 c4 10             	add    esp,0x10
c000654c:	83 c9 ff             	or     ecx,0xffffffff
c000654f:	85 c0                	test   eax,eax
c0006551:	78 13                	js     c0006566 <bread_cache+0x5f>
c0006553:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006556:	89 da                	mov    edx,ebx
c0006558:	89 38                	mov    DWORD PTR [eax],edi
c000655a:	89 f0                	mov    eax,esi
c000655c:	e8 0f fe ff ff       	call   c0006370 <bgrad_cache>
c0006561:	b9 0f 00 00 00       	mov    ecx,0xf
c0006566:	83 c4 0c             	add    esp,0xc
c0006569:	89 c8                	mov    eax,ecx
c000656b:	5b                   	pop    ebx
c000656c:	5e                   	pop    esi
c000656d:	5f                   	pop    edi
c000656e:	5d                   	pop    ebp
c000656f:	c3                   	ret    

c0006570 <biread>:
c0006570:	89 c2                	mov    edx,eax
c0006572:	b8 80 70 03 c0       	mov    eax,0xc0037080
c0006577:	eb 8e                	jmp    c0006507 <bread_cache>

c0006579 <bdread>:
c0006579:	89 c2                	mov    edx,eax
c000657b:	b8 20 70 03 c0       	mov    eax,0xc0037020
c0006580:	eb 85                	jmp    c0006507 <bread_cache>

c0006582 <strnicmp>:
c0006582:	55                   	push   ebp
c0006583:	57                   	push   edi
c0006584:	31 ff                	xor    edi,edi
c0006586:	56                   	push   esi
c0006587:	53                   	push   ebx
c0006588:	83 ec 0c             	sub    esp,0xc
c000658b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000658f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006593:	74 43                	je     c00065d8 <strnicmp+0x56>
c0006595:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006599:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000659d:	85 c0                	test   eax,eax
c000659f:	74 37                	je     c00065d8 <strnicmp+0x56>
c00065a1:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c00065a5:	85 d2                	test   edx,edx
c00065a7:	74 2f                	je     c00065d8 <strnicmp+0x56>
c00065a9:	8d 6f 01             	lea    ebp,[edi+0x1]
c00065ac:	39 d0                	cmp    eax,edx
c00065ae:	75 04                	jne    c00065b4 <strnicmp+0x32>
c00065b0:	89 ef                	mov    edi,ebp
c00065b2:	eb db                	jmp    c000658f <strnicmp+0xd>
c00065b4:	83 ec 0c             	sub    esp,0xc
c00065b7:	50                   	push   eax
c00065b8:	e8 c3 a3 ff ff       	call   c0000980 <tolower>
c00065bd:	89 c3                	mov    ebx,eax
c00065bf:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c00065c3:	89 ef                	mov    edi,ebp
c00065c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00065c8:	e8 b3 a3 ff ff       	call   c0000980 <tolower>
c00065cd:	83 c4 10             	add    esp,0x10
c00065d0:	29 c3                	sub    ebx,eax
c00065d2:	89 d8                	mov    eax,ebx
c00065d4:	74 b9                	je     c000658f <strnicmp+0xd>
c00065d6:	eb 02                	jmp    c00065da <strnicmp+0x58>
c00065d8:	31 c0                	xor    eax,eax
c00065da:	83 c4 0c             	add    esp,0xc
c00065dd:	5b                   	pop    ebx
c00065de:	5e                   	pop    esi
c00065df:	5f                   	pop    edi
c00065e0:	5d                   	pop    ebp
c00065e1:	c3                   	ret    

c00065e2 <find_object>:
c00065e2:	55                   	push   ebp
c00065e3:	57                   	push   edi
c00065e4:	89 c7                	mov    edi,eax
c00065e6:	56                   	push   esi
c00065e7:	53                   	push   ebx
c00065e8:	89 d3                	mov    ebx,edx
c00065ea:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00065f0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00065f4:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00065fb:	83 3d 94 86 03 c0 00 	cmp    DWORD PTR ds:0xc0038694,0x0
c0006602:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006606:	74 0b                	je     c0006613 <find_object+0x31>
c0006608:	8d 44 24 20          	lea    eax,[esp+0x20]
c000660c:	89 fa                	mov    edx,edi
c000660e:	e8 89 fc ff ff       	call   c000629c <utf2ucs>
c0006613:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006616:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000661a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000661f:	7e 11                	jle    c0006632 <find_object+0x50>
c0006621:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006625:	e8 46 ff ff ff       	call   c0006570 <biread>
c000662a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000662e:	85 c0                	test   eax,eax
c0006630:	79 07                	jns    c0006639 <find_object+0x57>
c0006632:	31 db                	xor    ebx,ebx
c0006634:	e9 47 01 00 00       	jmp    c0006780 <find_object+0x19e>
c0006639:	31 ed                	xor    ebp,ebp
c000663b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000663f:	8b 04 85 80 70 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc8f80]
c0006646:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c000664a:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c000664d:	85 f6                	test   esi,esi
c000664f:	75 0e                	jne    c000665f <find_object+0x7d>
c0006651:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006655:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c000665d:	eb bb                	jmp    c000661a <find_object+0x38>
c000665f:	8b 0d 94 86 03 c0    	mov    ecx,DWORD PTR ds:0xc0038694
c0006665:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006669:	85 c9                	test   ecx,ecx
c000666b:	89 d0                	mov    eax,edx
c000666d:	74 2b                	je     c000669a <find_object+0xb8>
c000666f:	8d 43 21             	lea    eax,[ebx+0x21]
c0006672:	89 d1                	mov    ecx,edx
c0006674:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006678:	e8 0f fd ff ff       	call   c000638c <ucscompare>
c000667d:	85 c0                	test   eax,eax
c000667f:	0f 84 cd 00 00 00    	je     c0006752 <find_object+0x170>
c0006685:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006688:	01 c5                	add    ebp,eax
c000668a:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c0006690:	7f bf                	jg     c0006651 <find_object+0x6f>
c0006692:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006696:	7f a3                	jg     c000663b <find_object+0x59>
c0006698:	eb b7                	jmp    c0006651 <find_object+0x6f>
c000669a:	29 d6                	sub    esi,edx
c000669c:	a8 01                	test   al,0x1
c000669e:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c00066a2:	74 05                	je     c00066a9 <find_object+0xc7>
c00066a4:	83 ee 21             	sub    esi,0x21
c00066a7:	eb 6a                	jmp    c0006713 <find_object+0x131>
c00066a9:	42                   	inc    edx
c00066aa:	83 ee 22             	sub    esi,0x22
c00066ad:	eb 64                	jmp    c0006713 <find_object+0x131>
c00066af:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00066b2:	48                   	dec    eax
c00066b3:	3c 01                	cmp    al,0x1
c00066b5:	77 61                	ja     c0006718 <find_object+0x136>
c00066b7:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00066bb:	50                   	push   eax
c00066bc:	6a 02                	push   0x2
c00066be:	68 dd 02 03 c0       	push   0xc00302dd
c00066c3:	52                   	push   edx
c00066c4:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00066c8:	e8 43 a1 ff ff       	call   c0000810 <strncmp>
c00066cd:	83 c4 10             	add    esp,0x10
c00066d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00066d4:	85 c0                	test   eax,eax
c00066d6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00066da:	75 2f                	jne    c000670b <find_object+0x129>
c00066dc:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c00066e0:	50                   	push   eax
c00066e1:	8d 42 05             	lea    eax,[edx+0x5]
c00066e4:	83 e9 05             	sub    ecx,0x5
c00066e7:	51                   	push   ecx
c00066e8:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00066ec:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00066f0:	50                   	push   eax
c00066f1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00066f5:	50                   	push   eax
c00066f6:	e8 95 9f ff ff       	call   c0000690 <strncpy>
c00066fb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00066ff:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c0006704:	83 c4 10             	add    esp,0x10
c0006707:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000670b:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000670f:	29 c6                	sub    esi,eax
c0006711:	01 c2                	add    edx,eax
c0006713:	83 fe 03             	cmp    esi,0x3
c0006716:	7f 97                	jg     c00066af <find_object+0xcd>
c0006718:	85 c9                	test   ecx,ecx
c000671a:	7e 40                	jle    c000675c <find_object+0x17a>
c000671c:	51                   	push   ecx
c000671d:	51                   	push   ecx
c000671e:	6a 2f                	push   0x2f
c0006720:	57                   	push   edi
c0006721:	e8 aa a0 ff ff       	call   c00007d0 <strchr>
c0006726:	83 c4 10             	add    esp,0x10
c0006729:	85 c0                	test   eax,eax
c000672b:	74 04                	je     c0006731 <find_object+0x14f>
c000672d:	29 f8                	sub    eax,edi
c000672f:	eb 0c                	jmp    c000673d <find_object+0x15b>
c0006731:	83 ec 0c             	sub    esp,0xc
c0006734:	57                   	push   edi
c0006735:	e8 46 9e ff ff       	call   c0000580 <strlen>
c000673a:	83 c4 10             	add    esp,0x10
c000673d:	52                   	push   edx
c000673e:	50                   	push   eax
c000673f:	57                   	push   edi
c0006740:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006744:	50                   	push   eax
c0006745:	e8 38 fe ff ff       	call   c0006582 <strnicmp>
c000674a:	83 c4 10             	add    esp,0x10
c000674d:	e9 2b ff ff ff       	jmp    c000667d <find_object+0x9b>
c0006752:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006756:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000675a:	eb 1e                	jmp    c000677a <find_object+0x198>
c000675c:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006760:	8d 43 21             	lea    eax,[ebx+0x21]
c0006763:	89 f9                	mov    ecx,edi
c0006765:	e8 a1 fc ff ff       	call   c000640b <fncompare>
c000676a:	85 c0                	test   eax,eax
c000676c:	0f 85 13 ff ff ff    	jne    c0006685 <find_object+0xa3>
c0006772:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006776:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000677a:	0f 85 05 ff ff ff    	jne    c0006685 <find_object+0xa3>
c0006780:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006786:	89 d8                	mov    eax,ebx
c0006788:	5b                   	pop    ebx
c0006789:	5e                   	pop    esi
c000678a:	5f                   	pop    edi
c000678b:	5d                   	pop    ebp
c000678c:	c3                   	ret    

c000678d <find_object_path>:
c000678d:	55                   	push   ebp
c000678e:	57                   	push   edi
c000678f:	89 d7                	mov    edi,edx
c0006791:	56                   	push   esi
c0006792:	89 c6                	mov    esi,eax
c0006794:	53                   	push   ebx
c0006795:	89 cb                	mov    ebx,ecx
c0006797:	83 ec 0c             	sub    esp,0xc
c000679a:	50                   	push   eax
c000679b:	50                   	push   eax
c000679c:	6a 2f                	push   0x2f
c000679e:	56                   	push   esi
c000679f:	e8 2c a0 ff ff       	call   c00007d0 <strchr>
c00067a4:	83 c4 10             	add    esp,0x10
c00067a7:	85 c0                	test   eax,eax
c00067a9:	89 c5                	mov    ebp,eax
c00067ab:	74 3a                	je     c00067e7 <find_object_path+0x5a>
c00067ad:	39 ee                	cmp    esi,ebp
c00067af:	74 31                	je     c00067e2 <find_object_path+0x55>
c00067b1:	8d 43 0a             	lea    eax,[ebx+0xa]
c00067b4:	e8 b5 fb ff ff       	call   c000636e <iso_733>
c00067b9:	89 c2                	mov    edx,eax
c00067bb:	8d 43 02             	lea    eax,[ebx+0x2]
c00067be:	e8 ab fb ff ff       	call   c000636e <iso_733>
c00067c3:	83 ec 0c             	sub    esp,0xc
c00067c6:	52                   	push   edx
c00067c7:	89 c1                	mov    ecx,eax
c00067c9:	ba 01 00 00 00       	mov    edx,0x1
c00067ce:	89 f0                	mov    eax,esi
c00067d0:	e8 0d fe ff ff       	call   c00065e2 <find_object>
c00067d5:	83 c4 10             	add    esp,0x10
c00067d8:	85 c0                	test   eax,eax
c00067da:	89 c3                	mov    ebx,eax
c00067dc:	75 04                	jne    c00067e2 <find_object_path+0x55>
c00067de:	31 db                	xor    ebx,ebx
c00067e0:	eb 36                	jmp    c0006818 <find_object_path+0x8b>
c00067e2:	8d 75 01             	lea    esi,[ebp+0x1]
c00067e5:	eb b3                	jmp    c000679a <find_object_path+0xd>
c00067e7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00067ea:	74 28                	je     c0006814 <find_object_path+0x87>
c00067ec:	8d 43 0a             	lea    eax,[ebx+0xa]
c00067ef:	e8 7a fb ff ff       	call   c000636e <iso_733>
c00067f4:	89 c2                	mov    edx,eax
c00067f6:	8d 43 02             	lea    eax,[ebx+0x2]
c00067f9:	e8 70 fb ff ff       	call   c000636e <iso_733>
c00067fe:	83 ec 0c             	sub    esp,0xc
c0006801:	52                   	push   edx
c0006802:	89 c1                	mov    ecx,eax
c0006804:	89 fa                	mov    edx,edi
c0006806:	89 f0                	mov    eax,esi
c0006808:	e8 d5 fd ff ff       	call   c00065e2 <find_object>
c000680d:	83 c4 10             	add    esp,0x10
c0006810:	89 c3                	mov    ebx,eax
c0006812:	eb 04                	jmp    c0006818 <find_object_path+0x8b>
c0006814:	85 ff                	test   edi,edi
c0006816:	74 c6                	je     c00067de <find_object_path+0x51>
c0006818:	83 c4 0c             	add    esp,0xc
c000681b:	89 d8                	mov    eax,ebx
c000681d:	5b                   	pop    ebx
c000681e:	5e                   	pop    esi
c000681f:	5f                   	pop    edi
c0006820:	5d                   	pop    ebp
c0006821:	c3                   	ret    

c0006822 <stricmp>:
c0006822:	57                   	push   edi
c0006823:	56                   	push   esi
c0006824:	31 f6                	xor    esi,esi
c0006826:	53                   	push   ebx
c0006827:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000682b:	83 ec 0c             	sub    esp,0xc
c000682e:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c0006832:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006836:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c000683a:	46                   	inc    esi
c000683b:	50                   	push   eax
c000683c:	e8 1f a1 ff ff       	call   c0000960 <toupper>
c0006841:	89 04 24             	mov    DWORD PTR [esp],eax
c0006844:	e8 37 a1 ff ff       	call   c0000980 <tolower>
c0006849:	89 3c 24             	mov    DWORD PTR [esp],edi
c000684c:	89 c3                	mov    ebx,eax
c000684e:	e8 0d a1 ff ff       	call   c0000960 <toupper>
c0006853:	89 04 24             	mov    DWORD PTR [esp],eax
c0006856:	e8 25 a1 ff ff       	call   c0000980 <tolower>
c000685b:	83 c4 10             	add    esp,0x10
c000685e:	39 c3                	cmp    ebx,eax
c0006860:	75 04                	jne    c0006866 <stricmp+0x44>
c0006862:	85 db                	test   ebx,ebx
c0006864:	75 c1                	jne    c0006827 <stricmp+0x5>
c0006866:	29 c3                	sub    ebx,eax
c0006868:	89 d8                	mov    eax,ebx
c000686a:	5b                   	pop    ebx
c000686b:	5e                   	pop    esi
c000686c:	5f                   	pop    edi
c000686d:	c3                   	ret    

c000686e <iso_open>:
c000686e:	57                   	push   edi
c000686f:	31 c0                	xor    eax,eax
c0006871:	56                   	push   esi
c0006872:	b9 60 86 03 c0       	mov    ecx,0xc0038660
c0006877:	53                   	push   ebx
c0006878:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000687d:	0f 95 c0             	setne  al
c0006880:	89 c2                	mov    edx,eax
c0006882:	89 c6                	mov    esi,eax
c0006884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006888:	e8 00 ff ff ff       	call   c000678d <find_object_path>
c000688d:	83 ca ff             	or     edx,0xffffffff
c0006890:	85 c0                	test   eax,eax
c0006892:	74 5e                	je     c00068f2 <iso_open+0x84>
c0006894:	89 c1                	mov    ecx,eax
c0006896:	31 d2                	xor    edx,edx
c0006898:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000689e:	83 bf 20 7d 03 c0 00 	cmp    DWORD PTR [edi-0x3ffc82e0],0x0
c00068a5:	75 42                	jne    c00068e9 <iso_open+0x7b>
c00068a7:	c7 87 20 7d 03 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffc82e0],0xffffffff
c00068b1:	8d 41 02             	lea    eax,[ecx+0x2]
c00068b4:	e8 b5 fa ff ff       	call   c000636e <iso_733>
c00068b9:	89 b7 24 7d 03 c0    	mov    DWORD PTR [edi-0x3ffc82dc],esi
c00068bf:	c7 87 28 7d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc82d8],0x0
c00068c9:	89 87 20 7d 03 c0    	mov    DWORD PTR [edi-0x3ffc82e0],eax
c00068cf:	8d 41 0a             	lea    eax,[ecx+0xa]
c00068d2:	e8 97 fa ff ff       	call   c000636e <iso_733>
c00068d7:	c7 87 b0 7d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc8250],0x0
c00068e1:	89 87 2c 7d 03 c0    	mov    DWORD PTR [edi-0x3ffc82d4],eax
c00068e7:	eb 09                	jmp    c00068f2 <iso_open+0x84>
c00068e9:	42                   	inc    edx
c00068ea:	83 fa 10             	cmp    edx,0x10
c00068ed:	75 a9                	jne    c0006898 <iso_open+0x2a>
c00068ef:	83 ca ff             	or     edx,0xffffffff
c00068f2:	5b                   	pop    ebx
c00068f3:	89 d0                	mov    eax,edx
c00068f5:	5e                   	pop    esi
c00068f6:	5f                   	pop    edi
c00068f7:	c3                   	ret    

c00068f8 <iso_close>:
c00068f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00068fc:	83 f8 0f             	cmp    eax,0xf
c00068ff:	7f 10                	jg     c0006911 <iso_close+0x19>
c0006901:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006907:	c7 80 20 7d 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc82e0],0x0
c0006911:	e9 6d fb ff ff       	jmp    c0006483 <bclear_cache>

c0006916 <iso_read>:
c0006916:	55                   	push   ebp
c0006917:	57                   	push   edi
c0006918:	56                   	push   esi
c0006919:	53                   	push   ebx
c000691a:	83 ec 1c             	sub    esp,0x1c
c000691d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0006921:	83 fd 0f             	cmp    ebp,0xf
c0006924:	7e 0a                	jle    c0006930 <iso_read+0x1a>
c0006926:	83 c8 ff             	or     eax,0xffffffff
c0006929:	89 c2                	mov    edx,eax
c000692b:	e9 f4 00 00 00       	jmp    c0006a24 <iso_read+0x10e>
c0006930:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c0006936:	83 bd 20 7d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc82e0],0x0
c000693d:	74 e7                	je     c0006926 <iso_read+0x10>
c000693f:	8b 95 b0 7d 03 c0    	mov    edx,DWORD PTR [ebp-0x3ffc8250]
c0006945:	85 d2                	test   edx,edx
c0006947:	75 dd                	jne    c0006926 <iso_read+0x10>
c0006949:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000694e:	0f 84 cd 00 00 00    	je     c0006a21 <iso_read+0x10b>
c0006954:	8b 85 28 7d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc82d8]
c000695a:	8b 9d 2c 7d 03 c0    	mov    ebx,DWORD PTR [ebp-0x3ffc82d4]
c0006960:	29 c3                	sub    ebx,eax
c0006962:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006966:	89 d9                	mov    ecx,ebx
c0006968:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c000696d:	85 c9                	test   ecx,ecx
c000696f:	0f 84 ac 00 00 00    	je     c0006a21 <iso_read+0x10b>
c0006975:	89 c6                	mov    esi,eax
c0006977:	bb 00 08 00 00       	mov    ebx,0x800
c000697c:	c1 e8 0b             	shr    eax,0xb
c000697f:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006985:	03 85 20 7d 03 c0    	add    eax,DWORD PTR [ebp-0x3ffc82e0]
c000698b:	29 f3                	sub    ebx,esi
c000698d:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006993:	75 3f                	jne    c00069d4 <iso_read+0xbe>
c0006995:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000699b:	7e 37                	jle    c00069d4 <iso_read+0xbe>
c000699d:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c00069a3:	be 20 00 00 00       	mov    esi,0x20
c00069a8:	7f 05                	jg     c00069af <iso_read+0x99>
c00069aa:	89 ce                	mov    esi,ecx
c00069ac:	c1 fe 0b             	sar    esi,0xb
c00069af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00069b3:	89 f3                	mov    ebx,esi
c00069b5:	52                   	push   edx
c00069b6:	56                   	push   esi
c00069b7:	50                   	push   eax
c00069b8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00069bc:	c1 e3 0b             	shl    ebx,0xb
c00069bf:	e8 23 fb ff ff       	call   c00064e7 <isoReadDiscSector>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	7f 3d                	jg     c0006a0c <iso_read+0xf6>
c00069cf:	e9 52 ff ff ff       	jmp    c0006926 <iso_read+0x10>
c00069d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00069d8:	39 d9                	cmp    ecx,ebx
c00069da:	0f 4e d9             	cmovle ebx,ecx
c00069dd:	e8 97 fb ff ff       	call   c0006579 <bdread>
c00069e2:	85 c0                	test   eax,eax
c00069e4:	0f 88 3c ff ff ff    	js     c0006926 <iso_read+0x10>
c00069ea:	8b 0c 85 20 70 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc8fe0]
c00069f1:	8b 85 28 7d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc82d8]
c00069f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00069fb:	25 ff 07 00 00       	and    eax,0x7ff
c0006a00:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006a04:	89 d9                	mov    ecx,ebx
c0006a06:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006a08:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006a0c:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006a10:	01 da                	add    edx,ebx
c0006a12:	01 9d 28 7d 03 c0    	add    DWORD PTR [ebp-0x3ffc82d8],ebx
c0006a18:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c0006a1c:	e9 28 ff ff ff       	jmp    c0006949 <iso_read+0x33>
c0006a21:	89 d0                	mov    eax,edx
c0006a23:	99                   	cdq    
c0006a24:	83 c4 1c             	add    esp,0x1c
c0006a27:	5b                   	pop    ebx
c0006a28:	5e                   	pop    esi
c0006a29:	5f                   	pop    edi
c0006a2a:	5d                   	pop    ebp
c0006a2b:	c3                   	ret    

c0006a2c <iso_seek>:
c0006a2c:	55                   	push   ebp
c0006a2d:	83 c8 ff             	or     eax,0xffffffff
c0006a30:	57                   	push   edi
c0006a31:	89 c2                	mov    edx,eax
c0006a33:	56                   	push   esi
c0006a34:	53                   	push   ebx
c0006a35:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006a39:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0006a3d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006a41:	83 fe 0f             	cmp    esi,0xf
c0006a44:	7f 65                	jg     c0006aab <iso_seek+0x7f>
c0006a46:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006a4c:	83 bd 20 7d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc82e0],0x0
c0006a53:	8d 8d 20 7d 03 c0    	lea    ecx,[ebp-0x3ffc82e0]
c0006a59:	74 50                	je     c0006aab <iso_seek+0x7f>
c0006a5b:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006a62:	75 47                	jne    c0006aab <iso_seek+0x7f>
c0006a64:	83 fb 01             	cmp    ebx,0x1
c0006a67:	74 0e                	je     c0006a77 <iso_seek+0x4b>
c0006a69:	83 fb 02             	cmp    ebx,0x2
c0006a6c:	74 0e                	je     c0006a7c <iso_seek+0x50>
c0006a6e:	85 db                	test   ebx,ebx
c0006a70:	75 39                	jne    c0006aab <iso_seek+0x7f>
c0006a72:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006a75:	eb 0d                	jmp    c0006a84 <iso_seek+0x58>
c0006a77:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006a7a:	eb 08                	jmp    c0006a84 <iso_seek+0x58>
c0006a7c:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006a7f:	01 f8                	add    eax,edi
c0006a81:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006a84:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006a8a:	8b 88 2c 7d 03 c0    	mov    ecx,DWORD PTR [eax-0x3ffc82d4]
c0006a90:	05 20 7d 03 c0       	add    eax,0xc0037d20
c0006a95:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006a98:	76 03                	jbe    c0006a9d <iso_seek+0x71>
c0006a9a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006a9d:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006aa3:	8b 82 28 7d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc82d8]
c0006aa9:	31 d2                	xor    edx,edx
c0006aab:	5b                   	pop    ebx
c0006aac:	5e                   	pop    esi
c0006aad:	5f                   	pop    edi
c0006aae:	5d                   	pop    ebp
c0006aaf:	c3                   	ret    

c0006ab0 <iso_tell>:
c0006ab0:	53                   	push   ebx
c0006ab1:	83 c8 ff             	or     eax,0xffffffff
c0006ab4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006ab8:	89 c2                	mov    edx,eax
c0006aba:	83 f9 0f             	cmp    ecx,0xf
c0006abd:	7f 20                	jg     c0006adf <iso_tell+0x2f>
c0006abf:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006ac5:	83 bb 20 7d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc82e0],0x0
c0006acc:	74 11                	je     c0006adf <iso_tell+0x2f>
c0006ace:	83 bb b0 7d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc8250],0x0
c0006ad5:	75 08                	jne    c0006adf <iso_tell+0x2f>
c0006ad7:	8b 83 28 7d 03 c0    	mov    eax,DWORD PTR [ebx-0x3ffc82d8]
c0006add:	31 d2                	xor    edx,edx
c0006adf:	5b                   	pop    ebx
c0006ae0:	c3                   	ret    

c0006ae1 <iso_total>:
c0006ae1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006ae5:	83 c8 ff             	or     eax,0xffffffff
c0006ae8:	83 fa 0f             	cmp    edx,0xf
c0006aeb:	7f 1e                	jg     c0006b0b <iso_total+0x2a>
c0006aed:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006af3:	83 ba 20 7d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc82e0],0x0
c0006afa:	74 0f                	je     c0006b0b <iso_total+0x2a>
c0006afc:	83 ba b0 7d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc8250],0x0
c0006b03:	75 06                	jne    c0006b0b <iso_total+0x2a>
c0006b05:	8b 82 2c 7d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc82d4]
c0006b0b:	c3                   	ret    

c0006b0c <fn_postprocess>:
c0006b0c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006b10:	89 d0                	mov    eax,edx
c0006b12:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0006b15:	85 c9                	test   ecx,ecx
c0006b17:	74 08                	je     c0006b21 <fn_postprocess+0x15>
c0006b19:	83 f9 3b             	cmp    ecx,0x3b
c0006b1c:	74 03                	je     c0006b21 <fn_postprocess+0x15>
c0006b1e:	40                   	inc    eax
c0006b1f:	eb f1                	jmp    c0006b12 <fn_postprocess+0x6>
c0006b21:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006b24:	39 d0                	cmp    eax,edx
c0006b26:	76 0a                	jbe    c0006b32 <fn_postprocess+0x26>
c0006b28:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c0006b2c:	75 04                	jne    c0006b32 <fn_postprocess+0x26>
c0006b2e:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c0006b32:	c3                   	ret    

c0006b33 <iso_readdir>:
c0006b33:	55                   	push   ebp
c0006b34:	57                   	push   edi
c0006b35:	56                   	push   esi
c0006b36:	53                   	push   ebx
c0006b37:	83 ec 1c             	sub    esp,0x1c
c0006b3a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006b3e:	83 fb 0f             	cmp    ebx,0xf
c0006b41:	7f 28                	jg     c0006b6b <iso_readdir+0x38>
c0006b43:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b49:	83 b8 20 7d 03 c0 00 	cmp    DWORD PTR [eax-0x3ffc82e0],0x0
c0006b50:	8d b8 20 7d 03 c0    	lea    edi,[eax-0x3ffc82e0]
c0006b56:	74 13                	je     c0006b6b <iso_readdir+0x38>
c0006b58:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006b5c:	74 0d                	je     c0006b6b <iso_readdir+0x38>
c0006b5e:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006b65:	0f 84 b1 00 00 00    	je     c0006c1c <iso_readdir+0xe9>
c0006b6b:	83 ec 0c             	sub    esp,0xc
c0006b6e:	68 e0 02 03 c0       	push   0xc00302e0
c0006b73:	e8 98 2c 02 00       	call   c0029810 <iso_kprintf>
c0006b78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006b7b:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006b81:	e8 a6 2c 02 00       	call   c002982c <iso_kprintfd>
c0006b86:	c7 04 24 e5 02 03 c0 	mov    DWORD PTR [esp],0xc00302e5
c0006b8d:	e8 7e 2c 02 00       	call   c0029810 <iso_kprintf>
c0006b92:	58                   	pop    eax
c0006b93:	ff b3 20 7d 03 c0    	push   DWORD PTR [ebx-0x3ffc82e0]
c0006b99:	e8 8e 2c 02 00       	call   c002982c <iso_kprintfd>
c0006b9e:	c7 04 24 eb 02 03 c0 	mov    DWORD PTR [esp],0xc00302eb
c0006ba5:	e8 66 2c 02 00       	call   c0029810 <iso_kprintf>
c0006baa:	58                   	pop    eax
c0006bab:	ff b3 24 7d 03 c0    	push   DWORD PTR [ebx-0x3ffc82dc]
c0006bb1:	e8 76 2c 02 00       	call   c002982c <iso_kprintfd>
c0006bb6:	c7 04 24 f1 02 03 c0 	mov    DWORD PTR [esp],0xc00302f1
c0006bbd:	e8 4e 2c 02 00       	call   c0029810 <iso_kprintf>
c0006bc2:	58                   	pop    eax
c0006bc3:	ff b3 b0 7d 03 c0    	push   DWORD PTR [ebx-0x3ffc8250]
c0006bc9:	e8 5e 2c 02 00       	call   c002982c <iso_kprintfd>
c0006bce:	83 c4 10             	add    esp,0x10
c0006bd1:	eb 42                	jmp    c0006c15 <iso_readdir+0xe2>
c0006bd3:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006bd6:	8b 34 85 80 70 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc8f80]
c0006bdd:	89 d1                	mov    ecx,edx
c0006bdf:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006be5:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006be9:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006bec:	75 35                	jne    c0006c23 <iso_readdir+0xf0>
c0006bee:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006bf4:	81 c2 00 08 00 00    	add    edx,0x800
c0006bfa:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006bfd:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006c00:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006c03:	73 1e                	jae    c0006c23 <iso_readdir+0xf0>
c0006c05:	8b 07                	mov    eax,DWORD PTR [edi]
c0006c07:	c1 ea 0b             	shr    edx,0xb
c0006c0a:	01 d0                	add    eax,edx
c0006c0c:	e8 5f f9 ff ff       	call   c0006570 <biread>
c0006c11:	85 c0                	test   eax,eax
c0006c13:	79 be                	jns    c0006bd3 <iso_readdir+0xa0>
c0006c15:	31 c0                	xor    eax,eax
c0006c17:	e9 6a 01 00 00       	jmp    c0006d86 <iso_readdir+0x253>
c0006c1c:	31 f6                	xor    esi,esi
c0006c1e:	83 c8 ff             	or     eax,0xffffffff
c0006c21:	eb da                	jmp    c0006bfd <iso_readdir+0xca>
c0006c23:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006c29:	8b ba 28 7d 03 c0    	mov    edi,DWORD PTR [edx-0x3ffc82d8]
c0006c2f:	81 c2 20 7d 03 c0    	add    edx,0xc0037d20
c0006c35:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006c38:	73 db                	jae    c0006c15 <iso_readdir+0xe2>
c0006c3a:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006c3e:	75 34                	jne    c0006c74 <iso_readdir+0x141>
c0006c40:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006c44:	75 2e                	jne    c0006c74 <iso_readdir+0x141>
c0006c46:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006c49:	8b 34 85 80 70 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc8f80]
c0006c50:	01 f9                	add    ecx,edi
c0006c52:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006c55:	89 c8                	mov    eax,ecx
c0006c57:	25 ff 07 00 00       	and    eax,0x7ff
c0006c5c:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006c61:	01 c8                	add    eax,ecx
c0006c63:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006c66:	25 ff 07 00 00       	and    eax,0x7ff
c0006c6b:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006c6f:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006c72:	74 a1                	je     c0006c15 <iso_readdir+0xe2>
c0006c74:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006c7a:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006c7e:	83 3d 94 86 03 c0 00 	cmp    DWORD PTR ds:0xc0038694,0x0
c0006c85:	8d 56 21             	lea    edx,[esi+0x21]
c0006c88:	8d af 38 7d 03 c0    	lea    ebp,[edi-0x3ffc82c8]
c0006c8e:	74 0c                	je     c0006c9c <iso_readdir+0x169>
c0006c90:	89 e8                	mov    eax,ebp
c0006c92:	e8 27 f6 ff ff       	call   c00062be <ucs2utfn>
c0006c97:	e9 b1 00 00 00       	jmp    c0006d4d <iso_readdir+0x21a>
c0006c9c:	50                   	push   eax
c0006c9d:	51                   	push   ecx
c0006c9e:	52                   	push   edx
c0006c9f:	55                   	push   ebp
c0006ca0:	e8 eb 99 ff ff       	call   c0000690 <strncpy>
c0006ca5:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006ca9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006cac:	c6 84 07 38 7d 03 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffc82c8],0x0
c0006cb4:	e8 53 fe ff ff       	call   c0006b0c <fn_postprocess>
c0006cb9:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006cbd:	83 c4 10             	add    esp,0x10
c0006cc0:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006cc3:	89 d1                	mov    ecx,edx
c0006cc5:	29 d0                	sub    eax,edx
c0006cc7:	80 e1 01             	and    cl,0x1
c0006cca:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006cce:	74 05                	je     c0006cd5 <iso_readdir+0x1a2>
c0006cd0:	83 e8 21             	sub    eax,0x21
c0006cd3:	eb 04                	jmp    c0006cd9 <iso_readdir+0x1a6>
c0006cd5:	42                   	inc    edx
c0006cd6:	83 e8 22             	sub    eax,0x22
c0006cd9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006cdd:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006ce3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006ce7:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006cec:	7e 5f                	jle    c0006d4d <iso_readdir+0x21a>
c0006cee:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006cf1:	48                   	dec    eax
c0006cf2:	3c 01                	cmp    al,0x1
c0006cf4:	77 57                	ja     c0006d4d <iso_readdir+0x21a>
c0006cf6:	51                   	push   ecx
c0006cf7:	6a 02                	push   0x2
c0006cf9:	68 dd 02 03 c0       	push   0xc00302dd
c0006cfe:	52                   	push   edx
c0006cff:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006d03:	e8 08 9b ff ff       	call   c0000810 <strncmp>
c0006d08:	83 c4 10             	add    esp,0x10
c0006d0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006d0f:	85 c0                	test   eax,eax
c0006d11:	75 2e                	jne    c0006d41 <iso_readdir+0x20e>
c0006d13:	50                   	push   eax
c0006d14:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006d18:	83 e8 05             	sub    eax,0x5
c0006d1b:	50                   	push   eax
c0006d1c:	8d 42 05             	lea    eax,[edx+0x5]
c0006d1f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006d23:	50                   	push   eax
c0006d24:	55                   	push   ebp
c0006d25:	e8 66 99 ff ff       	call   c0000690 <strncpy>
c0006d2a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006d2e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006d32:	83 c4 10             	add    esp,0x10
c0006d35:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006d39:	c6 84 08 33 7d 03 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffc82cd],0x0
c0006d41:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006d45:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006d49:	01 c2                	add    edx,eax
c0006d4b:	eb 9a                	jmp    c0006ce7 <iso_readdir+0x1b4>
c0006d4d:	83 c8 ff             	or     eax,0xffffffff
c0006d50:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006d54:	89 c2                	mov    edx,eax
c0006d56:	75 0a                	jne    c0006d62 <iso_readdir+0x22f>
c0006d58:	8d 46 0a             	lea    eax,[esi+0xa]
c0006d5b:	e8 0e f6 ff ff       	call   c000636e <iso_733>
c0006d60:	31 d2                	xor    edx,edx
c0006d62:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006d68:	89 83 30 7d 03 c0    	mov    DWORD PTR [ebx-0x3ffc82d0],eax
c0006d6e:	89 93 34 7d 03 c0    	mov    DWORD PTR [ebx-0x3ffc82cc],edx
c0006d74:	81 c3 20 7d 03 c0    	add    ebx,0xc0037d20
c0006d7a:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006d7d:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006d80:	8d 87 30 7d 03 c0    	lea    eax,[edi-0x3ffc82d0]
c0006d86:	83 c4 1c             	add    esp,0x1c
c0006d89:	5b                   	pop    ebx
c0006d8a:	5e                   	pop    esi
c0006d8b:	5f                   	pop    edi
c0006d8c:	5d                   	pop    ebp
c0006d8d:	c3                   	ret    

c0006d8e <iso_reset>:
c0006d8e:	83 ec 18             	sub    esp,0x18
c0006d91:	68 fa 02 03 c0       	push   0xc00302fa
c0006d96:	e8 75 2a 02 00       	call   c0029810 <iso_kprintf>
c0006d9b:	e8 1b f7 ff ff       	call   c00064bb <iso_break_all>
c0006da0:	e8 14 f7 ff ff       	call   c00064b9 <bclear>
c0006da5:	31 c0                	xor    eax,eax
c0006da7:	83 c4 1c             	add    esp,0x1c
c0006daa:	c3                   	ret    

c0006dab <init_percd>:
c0006dab:	57                   	push   edi
c0006dac:	56                   	push   esi
c0006dad:	53                   	push   ebx
c0006dae:	bb 01 00 00 00       	mov    ebx,0x1
c0006db3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006db7:	a2 60 70 03 c0       	mov    ds:0xc0037060,al
c0006dbc:	e8 cd ff ff ff       	call   c0006d8e <iso_reset>
c0006dc1:	c7 05 94 86 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0038694,0x0
c0006dcb:	a1 8c 86 03 c0       	mov    eax,ds:0xc003868c
c0006dd0:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006dd4:	e8 97 f7 ff ff       	call   c0006570 <biread>
c0006dd9:	85 c0                	test   eax,eax
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	0f 88 ba 00 00 00    	js     c0006e9d <init_percd+0xf2>
c0006de3:	8b 04 85 80 70 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc8f80]
c0006dea:	52                   	push   edx
c0006deb:	6a 06                	push   0x6
c0006ded:	68 05 03 03 c0       	push   0xc0030305
c0006df2:	83 c0 04             	add    eax,0x4
c0006df5:	50                   	push   eax
c0006df6:	e8 85 95 ff ff       	call   c0000380 <memcmp>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	85 c0                	test   eax,eax
c0006e00:	74 08                	je     c0006e0a <init_percd+0x5f>
c0006e02:	43                   	inc    ebx
c0006e03:	83 fb 04             	cmp    ebx,0x4
c0006e06:	75 c3                	jne    c0006dcb <init_percd+0x20>
c0006e08:	eb 1a                	jmp    c0006e24 <init_percd+0x79>
c0006e0a:	8b 04 b5 80 70 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc8f80]
c0006e11:	83 c0 5c             	add    eax,0x5c
c0006e14:	e8 22 f5 ff ff       	call   c000633b <isjoliet>
c0006e19:	a3 94 86 03 c0       	mov    ds:0xc0038694,eax
c0006e1e:	85 c0                	test   eax,eax
c0006e20:	74 e0                	je     c0006e02 <init_percd+0x57>
c0006e22:	eb 3e                	jmp    c0006e62 <init_percd+0xb7>
c0006e24:	83 3d 94 86 03 c0 00 	cmp    DWORD PTR ds:0xc0038694,0x0
c0006e2b:	75 35                	jne    c0006e62 <init_percd+0xb7>
c0006e2d:	a1 8c 86 03 c0       	mov    eax,ds:0xc003868c
c0006e32:	83 c0 10             	add    eax,0x10
c0006e35:	e8 36 f7 ff ff       	call   c0006570 <biread>
c0006e3a:	85 c0                	test   eax,eax
c0006e3c:	89 c6                	mov    esi,eax
c0006e3e:	78 5f                	js     c0006e9f <init_percd+0xf4>
c0006e40:	50                   	push   eax
c0006e41:	8b 04 b5 80 70 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc8f80]
c0006e48:	83 cb ff             	or     ebx,0xffffffff
c0006e4b:	6a 06                	push   0x6
c0006e4d:	68 0c 03 03 c0       	push   0xc003030c
c0006e52:	83 c0 04             	add    eax,0x4
c0006e55:	50                   	push   eax
c0006e56:	e8 25 95 ff ff       	call   c0000380 <memcmp>
c0006e5b:	83 c4 10             	add    esp,0x10
c0006e5e:	85 c0                	test   eax,eax
c0006e60:	75 3d                	jne    c0006e9f <init_percd+0xf4>
c0006e62:	8b 34 b5 80 70 03 c0 	mov    esi,DWORD PTR [esi*4-0x3ffc8f80]
c0006e69:	bf 60 86 03 c0       	mov    edi,0xc0038660
c0006e6e:	b9 22 00 00 00       	mov    ecx,0x22
c0006e73:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006e79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006e7b:	b8 62 86 03 c0       	mov    eax,0xc0038662
c0006e80:	31 db                	xor    ebx,ebx
c0006e82:	e8 e7 f4 ff ff       	call   c000636e <iso_733>
c0006e87:	a3 88 86 03 c0       	mov    ds:0xc0038688,eax
c0006e8c:	b8 6a 86 03 c0       	mov    eax,0xc003866a
c0006e91:	e8 d8 f4 ff ff       	call   c000636e <iso_733>
c0006e96:	a3 84 86 03 c0       	mov    ds:0xc0038684,eax
c0006e9b:	eb 02                	jmp    c0006e9f <init_percd+0xf4>
c0006e9d:	89 c3                	mov    ebx,eax
c0006e9f:	89 d8                	mov    eax,ebx
c0006ea1:	5b                   	pop    ebx
c0006ea2:	5e                   	pop    esi
c0006ea3:	5f                   	pop    edi
c0006ea4:	c3                   	ret    

c0006ea5 <iso_ioctl>:
c0006ea5:	83 ec 18             	sub    esp,0x18
c0006ea8:	68 13 03 03 c0       	push   0xc0030313
c0006ead:	e8 5e 29 02 00       	call   c0029810 <iso_kprintf>
c0006eb2:	e8 d7 fe ff ff       	call   c0006d8e <iso_reset>
c0006eb7:	31 c0                	xor    eax,eax
c0006eb9:	83 c4 1c             	add    esp,0x1c
c0006ebc:	c3                   	ret    

c0006ebd <fs_iso9660_init>:
c0006ebd:	53                   	push   ebx
c0006ebe:	31 db                	xor    ebx,ebx
c0006ec0:	83 ec 14             	sub    esp,0x14
c0006ec3:	68 1e 03 03 c0       	push   0xc003031e
c0006ec8:	e8 43 29 02 00       	call   c0029810 <iso_kprintf>
c0006ecd:	83 c4 0c             	add    esp,0xc
c0006ed0:	68 40 09 00 00       	push   0x940
c0006ed5:	6a 00                	push   0x0
c0006ed7:	68 20 7d 03 c0       	push   0xc0037d20
c0006edc:	e8 0f 96 ff ff       	call   c00004f0 <memset>
c0006ee1:	c7 05 20 7d 03 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0037d20,0xffffffff
c0006eeb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006ef2:	e8 91 f7 00 00       	call   c0016688 <malloc>
c0006ef7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006efe:	a3 90 86 03 c0       	mov    ds:0xc0038690,eax
c0006f03:	e8 80 f7 00 00       	call   c0016688 <malloc>
c0006f08:	83 c4 10             	add    esp,0x10
c0006f0b:	a3 00 7d 03 c0       	mov    ds:0xc0037d00,eax
c0006f10:	83 ec 0c             	sub    esp,0xc
c0006f13:	68 04 08 00 00       	push   0x804
c0006f18:	e8 6b f7 00 00       	call   c0016688 <malloc>
c0006f1d:	89 04 9d 80 70 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc8f80],eax
c0006f24:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006f2a:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006f31:	e8 52 f7 00 00       	call   c0016688 <malloc>
c0006f36:	83 c4 10             	add    esp,0x10
c0006f39:	89 04 9d 20 70 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc8fe0],eax
c0006f40:	43                   	inc    ebx
c0006f41:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006f47:	83 fb 10             	cmp    ebx,0x10
c0006f4a:	75 c4                	jne    c0006f10 <fs_iso9660_init+0x53>
c0006f4c:	83 c4 08             	add    esp,0x8
c0006f4f:	31 c0                	xor    eax,eax
c0006f51:	5b                   	pop    ebx
c0006f52:	c3                   	ret    

c0006f53 <fs_iso9660_shutdown>:
c0006f53:	53                   	push   ebx
c0006f54:	31 db                	xor    ebx,ebx
c0006f56:	83 ec 08             	sub    esp,0x8
c0006f59:	83 ec 0c             	sub    esp,0xc
c0006f5c:	ff 34 9d 80 70 03 c0 	push   DWORD PTR [ebx*4-0x3ffc8f80]
c0006f63:	e8 30 f7 00 00       	call   c0016698 <free>
c0006f68:	58                   	pop    eax
c0006f69:	ff 34 9d 20 70 03 c0 	push   DWORD PTR [ebx*4-0x3ffc8fe0]
c0006f70:	43                   	inc    ebx
c0006f71:	e8 22 f7 00 00       	call   c0016698 <free>
c0006f76:	83 c4 10             	add    esp,0x10
c0006f79:	83 fb 10             	cmp    ebx,0x10
c0006f7c:	75 db                	jne    c0006f59 <fs_iso9660_shutdown+0x6>
c0006f7e:	a1 90 86 03 c0       	mov    eax,ds:0xc0038690
c0006f83:	85 c0                	test   eax,eax
c0006f85:	74 0c                	je     c0006f93 <fs_iso9660_shutdown+0x40>
c0006f87:	83 ec 0c             	sub    esp,0xc
c0006f8a:	50                   	push   eax
c0006f8b:	e8 08 f7 00 00       	call   c0016698 <free>
c0006f90:	83 c4 10             	add    esp,0x10
c0006f93:	a1 00 7d 03 c0       	mov    eax,ds:0xc0037d00
c0006f98:	85 c0                	test   eax,eax
c0006f9a:	74 0c                	je     c0006fa8 <fs_iso9660_shutdown+0x55>
c0006f9c:	83 ec 0c             	sub    esp,0xc
c0006f9f:	50                   	push   eax
c0006fa0:	e8 f3 f6 00 00       	call   c0016698 <free>
c0006fa5:	83 c4 10             	add    esp,0x10
c0006fa8:	c7 05 00 7d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037d00,0x0
c0006fb2:	31 c0                	xor    eax,eax
c0006fb4:	c7 05 90 86 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0038690,0x0
c0006fbe:	83 c4 08             	add    esp,0x8
c0006fc1:	5b                   	pop    ebx
c0006fc2:	c3                   	ret    
c0006fc3:	90                   	nop

c0006fc4 <lwip_init>:
c0006fc4:	83 ec 0c             	sub    esp,0xc
c0006fc7:	e8 5c 2c 00 00       	call   c0009c28 <stats_init>
c0006fcc:	e8 ff 9d ff ff       	call   c0000dd0 <sys_init>
c0006fd1:	e8 ae 01 00 00       	call   c0007184 <mem_init>
c0006fd6:	e8 09 0a 00 00       	call   c00079e4 <memp_init>
c0006fdb:	e8 ec 0c 00 00       	call   c0007ccc <netif_init>
c0006fe0:	e8 8b 9c ff ff       	call   c0000c70 <lwip_socket_init>
c0006fe5:	e8 06 9e 00 00       	call   c0010df0 <sys_timeouts_init>
c0006fea:	90                   	nop
c0006feb:	83 c4 0c             	add    esp,0xc
c0006fee:	c3                   	ret    
c0006fef:	90                   	nop

c0006ff0 <plug_holes>:
c0006ff0:	83 ec 1c             	sub    esp,0x1c
c0006ff3:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c0006ff8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006ffc:	73 16                	jae    c0007014 <plug_holes+0x24>
c0006ffe:	83 ec 08             	sub    esp,0x8
c0007001:	68 2f 03 03 c0       	push   0xc003032f
c0007006:	68 46 03 03 c0       	push   0xc0030346
c000700b:	e8 3c 8e 01 00       	call   c001fe4c <CPrintf>
c0007010:	83 c4 10             	add    esp,0x10
c0007013:	90                   	nop
c0007014:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c0007019:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000701d:	72 15                	jb     c0007034 <plug_holes+0x44>
c000701f:	83 ec 08             	sub    esp,0x8
c0007022:	68 53 03 03 c0       	push   0xc0030353
c0007027:	68 46 03 03 c0       	push   0xc0030346
c000702c:	e8 1b 8e 01 00       	call   c001fe4c <CPrintf>
c0007031:	83 c4 10             	add    esp,0x10
c0007034:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007038:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000703b:	0f b6 c0             	movzx  eax,al
c000703e:	85 c0                	test   eax,eax
c0007040:	74 16                	je     c0007058 <plug_holes+0x68>
c0007042:	83 ec 08             	sub    esp,0x8
c0007045:	68 6d 03 03 c0       	push   0xc003036d
c000704a:	68 46 03 03 c0       	push   0xc0030346
c000704f:	e8 f8 8d 01 00       	call   c001fe4c <CPrintf>
c0007054:	83 c4 10             	add    esp,0x10
c0007057:	90                   	nop
c0007058:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000705c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000705f:	0f b7 c0             	movzx  eax,ax
c0007062:	3d 40 06 00 00       	cmp    eax,0x640
c0007067:	76 17                	jbe    c0007080 <plug_holes+0x90>
c0007069:	83 ec 08             	sub    esp,0x8
c000706c:	68 00 04 03 c0       	push   0xc0030400
c0007071:	68 46 03 03 c0       	push   0xc0030346
c0007076:	e8 d1 8d 01 00       	call   c001fe4c <CPrintf>
c000707b:	83 c4 10             	add    esp,0x10
c000707e:	66 90                	xchg   ax,ax
c0007080:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c0007086:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000708a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000708d:	0f b7 c0             	movzx  eax,ax
c0007090:	01 d0                	add    eax,edx
c0007092:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007096:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000709a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000709e:	74 64                	je     c0007104 <plug_holes+0x114>
c00070a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070a4:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00070a7:	0f b6 c0             	movzx  eax,al
c00070aa:	85 c0                	test   eax,eax
c00070ac:	75 56                	jne    c0007104 <plug_holes+0x114>
c00070ae:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c00070b3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00070b7:	74 4b                	je     c0007104 <plug_holes+0x114>
c00070b9:	a1 9c 86 03 c0       	mov    eax,ds:0xc003869c
c00070be:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00070c2:	75 0c                	jne    c00070d0 <plug_holes+0xe0>
c00070c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00070c8:	a3 9c 86 03 c0       	mov    ds:0xc003869c,eax
c00070cd:	8d 76 00             	lea    esi,[esi+0x0]
c00070d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d4:	66 8b 10             	mov    dx,WORD PTR [eax]
c00070d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00070db:	66 89 10             	mov    WORD PTR [eax],dx
c00070de:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c00070e3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00070e7:	89 d1                	mov    ecx,edx
c00070e9:	29 c1                	sub    ecx,eax
c00070eb:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c00070f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070f5:	66 8b 00             	mov    ax,WORD PTR [eax]
c00070f8:	0f b7 c0             	movzx  eax,ax
c00070fb:	01 d0                	add    eax,edx
c00070fd:	89 ca                	mov    edx,ecx
c00070ff:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0007103:	90                   	nop
c0007104:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c000710a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000710e:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0007112:	0f b7 c0             	movzx  eax,ax
c0007115:	01 d0                	add    eax,edx
c0007117:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000711b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711f:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007123:	74 57                	je     c000717c <plug_holes+0x18c>
c0007125:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007129:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000712c:	0f b6 c0             	movzx  eax,al
c000712f:	85 c0                	test   eax,eax
c0007131:	75 49                	jne    c000717c <plug_holes+0x18c>
c0007133:	a1 9c 86 03 c0       	mov    eax,ds:0xc003869c
c0007138:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000713c:	75 0a                	jne    c0007148 <plug_holes+0x158>
c000713e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007142:	a3 9c 86 03 c0       	mov    ds:0xc003869c,eax
c0007147:	90                   	nop
c0007148:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000714c:	66 8b 10             	mov    dx,WORD PTR [eax]
c000714f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007153:	66 89 10             	mov    WORD PTR [eax],dx
c0007156:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c000715b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000715f:	89 d1                	mov    ecx,edx
c0007161:	29 c1                	sub    ecx,eax
c0007163:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c0007169:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000716d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007170:	0f b7 c0             	movzx  eax,ax
c0007173:	01 d0                	add    eax,edx
c0007175:	89 ca                	mov    edx,ecx
c0007177:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c000717b:	90                   	nop
c000717c:	90                   	nop
c000717d:	83 c4 1c             	add    esp,0x1c
c0007180:	c3                   	ret    
c0007181:	8d 76 00             	lea    esi,[esi+0x0]

c0007184 <mem_init>:
c0007184:	83 ec 1c             	sub    esp,0x1c
c0007187:	c7 05 a4 86 03 c0 c0 70 03 c0 	mov    DWORD PTR ds:0xc00386a4,0xc00370c0
c0007191:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c0007196:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000719a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000719e:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c00071a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00071a7:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c00071ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00071b1:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00071b5:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c00071ba:	05 40 06 00 00       	add    eax,0x640
c00071bf:	a3 a0 86 03 c0       	mov    ds:0xc00386a0,eax
c00071c4:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c00071c9:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c00071cd:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c00071d2:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c00071d7:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c00071dc:	66 c7 40 02 40 06    	mov    WORD PTR [eax+0x2],0x640
c00071e2:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c00071e7:	a3 9c 86 03 c0       	mov    ds:0xc003869c,eax
c00071ec:	66 c7 05 c8 77 03 c0 40 06 	mov    WORD PTR ds:0xc00377c8,0x640
c00071f5:	83 ec 08             	sub    esp,0x8
c00071f8:	6a 01                	push   0x1
c00071fa:	68 98 86 03 c0       	push   0xc0038698
c00071ff:	e8 9c 9a ff ff       	call   c0000ca0 <sys_sem_new>
c0007204:	83 c4 10             	add    esp,0x10
c0007207:	0f be c0             	movsx  eax,al
c000720a:	85 c0                	test   eax,eax
c000720c:	74 16                	je     c0007224 <mem_init+0xa0>
c000720e:	83 ec 08             	sub    esp,0x8
c0007211:	68 88 03 03 c0       	push   0xc0030388
c0007216:	68 46 03 03 c0       	push   0xc0030346
c000721b:	e8 2c 8c 01 00       	call   c001fe4c <CPrintf>
c0007220:	83 c4 10             	add    esp,0x10
c0007223:	90                   	nop
c0007224:	90                   	nop
c0007225:	83 c4 1c             	add    esp,0x1c
c0007228:	c3                   	ret    
c0007229:	8d 76 00             	lea    esi,[esi+0x0]

c000722c <mem_free>:
c000722c:	83 ec 1c             	sub    esp,0x1c
c000722f:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0007234:	0f 84 0e 01 00 00    	je     c0007348 <mem_free+0x11c>
c000723a:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c000723f:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007243:	72 0b                	jb     c0007250 <mem_free+0x24>
c0007245:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c000724a:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000724e:	72 18                	jb     c0007268 <mem_free+0x3c>
c0007250:	83 ec 08             	sub    esp,0x8
c0007253:	68 a3 03 03 c0       	push   0xc00303a3
c0007258:	68 46 03 03 c0       	push   0xc0030346
c000725d:	e8 ea 8b 01 00       	call   c001fe4c <CPrintf>
c0007262:	83 c4 10             	add    esp,0x10
c0007265:	8d 76 00             	lea    esi,[esi+0x0]
c0007268:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c000726d:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007271:	72 0d                	jb     c0007280 <mem_free+0x54>
c0007273:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c0007278:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000727c:	72 22                	jb     c00072a0 <mem_free+0x74>
c000727e:	66 90                	xchg   ax,ax
c0007280:	e8 b7 8b 01 00       	call   c001fe3c <CLockScheduler>
c0007285:	66 a1 d0 77 03 c0    	mov    ax,ds:0xc00377d0
c000728b:	83 c0 01             	add    eax,0x1
c000728e:	66 a3 d0 77 03 c0    	mov    ds:0xc00377d0,ax
c0007294:	e8 87 8b 01 00       	call   c001fe20 <CUnlockScheduler>
c0007299:	e9 ae 00 00 00       	jmp    c000734c <mem_free+0x120>
c000729e:	66 90                	xchg   ax,ax
c00072a0:	83 ec 08             	sub    esp,0x8
c00072a3:	6a 00                	push   0x0
c00072a5:	68 98 86 03 c0       	push   0xc0038698
c00072aa:	e8 49 9a ff ff       	call   c0000cf8 <sys_arch_sem_wait>
c00072af:	83 c4 10             	add    esp,0x10
c00072b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00072b6:	83 e8 06             	sub    eax,0x6
c00072b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00072bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072c1:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00072c4:	0f b6 c0             	movzx  eax,al
c00072c7:	85 c0                	test   eax,eax
c00072c9:	75 15                	jne    c00072e0 <mem_free+0xb4>
c00072cb:	83 ec 08             	sub    esp,0x8
c00072ce:	68 ba 03 03 c0       	push   0xc00303ba
c00072d3:	68 46 03 03 c0       	push   0xc0030346
c00072d8:	e8 6f 8b 01 00       	call   c001fe4c <CPrintf>
c00072dd:	83 c4 10             	add    esp,0x10
c00072e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072e4:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00072e8:	a1 9c 86 03 c0       	mov    eax,ds:0xc003869c
c00072ed:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00072f1:	73 09                	jae    c00072fc <mem_free+0xd0>
c00072f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072f7:	a3 9c 86 03 c0       	mov    ds:0xc003869c,eax
c00072fc:	66 8b 15 ca 77 03 c0 	mov    dx,WORD PTR ds:0xc00377ca
c0007303:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c0007308:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000730c:	29 c1                	sub    ecx,eax
c000730e:	89 c8                	mov    eax,ecx
c0007310:	89 c1                	mov    ecx,eax
c0007312:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007316:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007319:	29 c1                	sub    ecx,eax
c000731b:	89 c8                	mov    eax,ecx
c000731d:	01 d0                	add    eax,edx
c000731f:	66 a3 ca 77 03 c0    	mov    ds:0xc00377ca,ax
c0007325:	83 ec 0c             	sub    esp,0xc
c0007328:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000732c:	e8 bf fc ff ff       	call   c0006ff0 <plug_holes>
c0007331:	83 c4 10             	add    esp,0x10
c0007334:	83 ec 0c             	sub    esp,0xc
c0007337:	68 98 86 03 c0       	push   0xc0038698
c000733c:	e8 9f 99 ff ff       	call   c0000ce0 <sys_sem_signal>
c0007341:	83 c4 10             	add    esp,0x10
c0007344:	eb 06                	jmp    c000734c <mem_free+0x120>
c0007346:	66 90                	xchg   ax,ax
c0007348:	90                   	nop
c0007349:	8d 76 00             	lea    esi,[esi+0x0]
c000734c:	83 c4 1c             	add    esp,0x1c
c000734f:	c3                   	ret    

c0007350 <mem_trim>:
c0007350:	83 ec 2c             	sub    esp,0x2c
c0007353:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007357:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000735c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007361:	83 f8 0b             	cmp    eax,0xb
c0007364:	77 0a                	ja     c0007370 <mem_trim+0x20>
c0007366:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c000736d:	8d 76 00             	lea    esi,[esi+0x0]
c0007370:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007375:	3d 40 06 00 00       	cmp    eax,0x640
c000737a:	76 0c                	jbe    c0007388 <mem_trim+0x38>
c000737c:	b8 00 00 00 00       	mov    eax,0x0
c0007381:	e9 d6 02 00 00       	jmp    c000765c <mem_trim+0x30c>
c0007386:	66 90                	xchg   ax,ax
c0007388:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c000738d:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007391:	72 0d                	jb     c00073a0 <mem_trim+0x50>
c0007393:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c0007398:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000739c:	72 1a                	jb     c00073b8 <mem_trim+0x68>
c000739e:	66 90                	xchg   ax,ax
c00073a0:	83 ec 08             	sub    esp,0x8
c00073a3:	68 ce 03 03 c0       	push   0xc00303ce
c00073a8:	68 46 03 03 c0       	push   0xc0030346
c00073ad:	e8 9a 8a 01 00       	call   c001fe4c <CPrintf>
c00073b2:	83 c4 10             	add    esp,0x10
c00073b5:	8d 76 00             	lea    esi,[esi+0x0]
c00073b8:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c00073bd:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00073c1:	72 0d                	jb     c00073d0 <mem_trim+0x80>
c00073c3:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c00073c8:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00073cc:	72 26                	jb     c00073f4 <mem_trim+0xa4>
c00073ce:	66 90                	xchg   ax,ax
c00073d0:	e8 67 8a 01 00       	call   c001fe3c <CLockScheduler>
c00073d5:	66 a1 d0 77 03 c0    	mov    ax,ds:0xc00377d0
c00073db:	83 c0 01             	add    eax,0x1
c00073de:	66 a3 d0 77 03 c0    	mov    ds:0xc00377d0,ax
c00073e4:	e8 37 8a 01 00       	call   c001fe20 <CUnlockScheduler>
c00073e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00073ed:	e9 6a 02 00 00       	jmp    c000765c <mem_trim+0x30c>
c00073f2:	66 90                	xchg   ax,ax
c00073f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00073f8:	83 e8 06             	sub    eax,0x6
c00073fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00073ff:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c0007404:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007408:	29 c2                	sub    edx,eax
c000740a:	89 d0                	mov    eax,edx
c000740c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0007411:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007415:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007418:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000741d:	89 d1                	mov    ecx,edx
c000741f:	29 c1                	sub    ecx,eax
c0007421:	89 c8                	mov    eax,ecx
c0007423:	83 e8 06             	sub    eax,0x6
c0007426:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000742b:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007430:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007435:	39 c2                	cmp    edx,eax
c0007437:	76 17                	jbe    c0007450 <mem_trim+0x100>
c0007439:	83 ec 08             	sub    esp,0x8
c000743c:	68 2c 04 03 c0       	push   0xc003042c
c0007441:	68 46 03 03 c0       	push   0xc0030346
c0007446:	e8 01 8a 01 00       	call   c001fe4c <CPrintf>
c000744b:	83 c4 10             	add    esp,0x10
c000744e:	66 90                	xchg   ax,ax
c0007450:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007455:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c000745a:	39 c2                	cmp    edx,eax
c000745c:	76 0a                	jbe    c0007468 <mem_trim+0x118>
c000745e:	b8 00 00 00 00       	mov    eax,0x0
c0007463:	e9 f4 01 00 00       	jmp    c000765c <mem_trim+0x30c>
c0007468:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000746d:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007472:	39 c2                	cmp    edx,eax
c0007474:	75 0a                	jne    c0007480 <mem_trim+0x130>
c0007476:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000747a:	e9 dd 01 00 00       	jmp    c000765c <mem_trim+0x30c>
c000747f:	90                   	nop
c0007480:	83 ec 08             	sub    esp,0x8
c0007483:	6a 00                	push   0x0
c0007485:	68 98 86 03 c0       	push   0xc0038698
c000748a:	e8 69 98 ff ff       	call   c0000cf8 <sys_arch_sem_wait>
c000748f:	83 c4 10             	add    esp,0x10
c0007492:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c0007498:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000749c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000749f:	0f b7 c0             	movzx  eax,ax
c00074a2:	01 d0                	add    eax,edx
c00074a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00074a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00074ac:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00074af:	0f b6 c0             	movzx  eax,al
c00074b2:	85 c0                	test   eax,eax
c00074b4:	0f 85 c6 00 00 00    	jne    c0007580 <mem_trim+0x230>
c00074ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00074be:	66 8b 00             	mov    ax,WORD PTR [eax]
c00074c1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00074c6:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c00074cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00074cf:	01 d0                	add    eax,edx
c00074d1:	83 c0 06             	add    eax,0x6
c00074d4:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c00074d9:	a1 9c 86 03 c0       	mov    eax,ds:0xc003869c
c00074de:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00074e2:	75 14                	jne    c00074f8 <mem_trim+0x1a8>
c00074e4:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c00074ea:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00074ef:	01 d0                	add    eax,edx
c00074f1:	a3 9c 86 03 c0       	mov    ds:0xc003869c,eax
c00074f6:	66 90                	xchg   ax,ax
c00074f8:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c00074fe:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0007503:	01 d0                	add    eax,edx
c0007505:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007509:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000750d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007511:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007515:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c000751a:	66 89 10             	mov    WORD PTR [eax],dx
c000751d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007521:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0007526:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c000752a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000752e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007532:	66 89 10             	mov    WORD PTR [eax],dx
c0007535:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007539:	66 8b 00             	mov    ax,WORD PTR [eax]
c000753c:	0f b7 c0             	movzx  eax,ax
c000753f:	3d 40 06 00 00       	cmp    eax,0x640
c0007544:	74 1a                	je     c0007560 <mem_trim+0x210>
c0007546:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c000754c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007550:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007553:	0f b7 c0             	movzx  eax,ax
c0007556:	01 c2                	add    edx,eax
c0007558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000755c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007560:	66 a1 ca 77 03 c0    	mov    ax,ds:0xc00377ca
c0007566:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000756a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000756e:	29 d1                	sub    ecx,edx
c0007570:	89 ca                	mov    edx,ecx
c0007572:	01 d0                	add    eax,edx
c0007574:	66 a3 ca 77 03 c0    	mov    ds:0xc00377ca,ax
c000757a:	e9 c9 00 00 00       	jmp    c0007648 <mem_trim+0x2f8>
c000757f:	90                   	nop
c0007580:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007585:	8d 50 12             	lea    edx,[eax+0x12]
c0007588:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c000758d:	39 c2                	cmp    edx,eax
c000758f:	0f 87 b3 00 00 00    	ja     c0007648 <mem_trim+0x2f8>
c0007595:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000759a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000759e:	01 d0                	add    eax,edx
c00075a0:	83 c0 06             	add    eax,0x6
c00075a3:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c00075a8:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c00075ae:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00075b3:	01 d0                	add    eax,edx
c00075b5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00075b9:	a1 9c 86 03 c0       	mov    eax,ds:0xc003869c
c00075be:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00075c2:	73 0c                	jae    c00075d0 <mem_trim+0x280>
c00075c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00075c8:	a3 9c 86 03 c0       	mov    ds:0xc003869c,eax
c00075cd:	8d 76 00             	lea    esi,[esi+0x0]
c00075d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00075d4:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00075d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00075dc:	66 8b 10             	mov    dx,WORD PTR [eax]
c00075df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00075e3:	66 89 10             	mov    WORD PTR [eax],dx
c00075e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00075ea:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c00075ef:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00075f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00075f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00075fb:	66 89 10             	mov    WORD PTR [eax],dx
c00075fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007602:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007605:	0f b7 c0             	movzx  eax,ax
c0007608:	3d 40 06 00 00       	cmp    eax,0x640
c000760d:	74 1d                	je     c000762c <mem_trim+0x2dc>
c000760f:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c0007615:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007619:	66 8b 00             	mov    ax,WORD PTR [eax]
c000761c:	0f b7 c0             	movzx  eax,ax
c000761f:	01 c2                	add    edx,eax
c0007621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007625:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007629:	8d 76 00             	lea    esi,[esi+0x0]
c000762c:	66 a1 ca 77 03 c0    	mov    ax,ds:0xc00377ca
c0007632:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007636:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000763a:	29 d1                	sub    ecx,edx
c000763c:	89 ca                	mov    edx,ecx
c000763e:	01 d0                	add    eax,edx
c0007640:	66 a3 ca 77 03 c0    	mov    ds:0xc00377ca,ax
c0007646:	66 90                	xchg   ax,ax
c0007648:	83 ec 0c             	sub    esp,0xc
c000764b:	68 98 86 03 c0       	push   0xc0038698
c0007650:	e8 8b 96 ff ff       	call   c0000ce0 <sys_sem_signal>
c0007655:	83 c4 10             	add    esp,0x10
c0007658:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000765c:	83 c4 2c             	add    esp,0x2c
c000765f:	c3                   	ret    

c0007660 <mem_malloc>:
c0007660:	53                   	push   ebx
c0007661:	83 ec 28             	sub    esp,0x28
c0007664:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007668:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000766d:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007672:	85 c0                	test   eax,eax
c0007674:	75 0a                	jne    c0007680 <mem_malloc+0x20>
c0007676:	b8 00 00 00 00       	mov    eax,0x0
c000767b:	e9 f8 02 00 00       	jmp    c0007978 <mem_malloc+0x318>
c0007680:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007685:	83 f8 0b             	cmp    eax,0xb
c0007688:	77 0a                	ja     c0007694 <mem_malloc+0x34>
c000768a:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c0007691:	8d 76 00             	lea    esi,[esi+0x0]
c0007694:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007699:	3d 40 06 00 00       	cmp    eax,0x640
c000769e:	76 0c                	jbe    c00076ac <mem_malloc+0x4c>
c00076a0:	b8 00 00 00 00       	mov    eax,0x0
c00076a5:	e9 ce 02 00 00       	jmp    c0007978 <mem_malloc+0x318>
c00076aa:	66 90                	xchg   ax,ax
c00076ac:	83 ec 08             	sub    esp,0x8
c00076af:	6a 00                	push   0x0
c00076b1:	68 98 86 03 c0       	push   0xc0038698
c00076b6:	e8 3d 96 ff ff       	call   c0000cf8 <sys_arch_sem_wait>
c00076bb:	83 c4 10             	add    esp,0x10
c00076be:	8b 15 9c 86 03 c0    	mov    edx,DWORD PTR ds:0xc003869c
c00076c4:	a1 a4 86 03 c0       	mov    eax,ds:0xc00386a4
c00076c9:	29 c2                	sub    edx,eax
c00076cb:	89 d0                	mov    eax,edx
c00076cd:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00076d2:	e9 61 02 00 00       	jmp    c0007938 <mem_malloc+0x2d8>
c00076d7:	90                   	nop
c00076d8:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c00076de:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00076e3:	01 d0                	add    eax,edx
c00076e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00076e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076ed:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00076f0:	0f b6 c0             	movzx  eax,al
c00076f3:	85 c0                	test   eax,eax
c00076f5:	0f 85 25 02 00 00    	jne    c0007920 <mem_malloc+0x2c0>
c00076fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076ff:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007702:	0f b7 d0             	movzx  edx,ax
c0007705:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000770a:	29 c2                	sub    edx,eax
c000770c:	89 d0                	mov    eax,edx
c000770e:	8d 50 fa             	lea    edx,[eax-0x6]
c0007711:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007716:	39 c2                	cmp    edx,eax
c0007718:	0f 82 02 02 00 00    	jb     c0007920 <mem_malloc+0x2c0>
c000771e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007722:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007725:	0f b7 d0             	movzx  edx,ax
c0007728:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000772d:	29 c2                	sub    edx,eax
c000772f:	89 d0                	mov    eax,edx
c0007731:	8d 50 fa             	lea    edx,[eax-0x6]
c0007734:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007739:	83 c0 12             	add    eax,0x12
c000773c:	39 c2                	cmp    edx,eax
c000773e:	0f 82 c4 00 00 00    	jb     c0007808 <mem_malloc+0x1a8>
c0007744:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c0007749:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000774d:	01 d0                	add    eax,edx
c000774f:	83 c0 06             	add    eax,0x6
c0007752:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0007757:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c000775d:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0007762:	01 d0                	add    eax,edx
c0007764:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000776c:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007770:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007774:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007777:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000777b:	66 89 10             	mov    WORD PTR [eax],dx
c000777e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007782:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c0007787:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c000778b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000778f:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0007794:	66 89 10             	mov    WORD PTR [eax],dx
c0007797:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000779b:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c000779f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00077a3:	66 8b 00             	mov    ax,WORD PTR [eax]
c00077a6:	0f b7 c0             	movzx  eax,ax
c00077a9:	3d 40 06 00 00       	cmp    eax,0x640
c00077ae:	74 1c                	je     c00077cc <mem_malloc+0x16c>
c00077b0:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c00077b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00077ba:	66 8b 00             	mov    ax,WORD PTR [eax]
c00077bd:	0f b7 c0             	movzx  eax,ax
c00077c0:	01 c2                	add    edx,eax
c00077c2:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00077c7:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00077cb:	90                   	nop
c00077cc:	66 a1 ca 77 03 c0    	mov    ax,ds:0xc00377ca
c00077d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00077d6:	01 d0                	add    eax,edx
c00077d8:	83 c0 06             	add    eax,0x6
c00077db:	66 a3 ca 77 03 c0    	mov    ds:0xc00377ca,ax
c00077e1:	66 8b 15 cc 77 03 c0 	mov    dx,WORD PTR ds:0xc00377cc
c00077e8:	66 a1 ca 77 03 c0    	mov    ax,ds:0xc00377ca
c00077ee:	0f b7 d2             	movzx  edx,dx
c00077f1:	0f b7 c0             	movzx  eax,ax
c00077f4:	39 c2                	cmp    edx,eax
c00077f6:	73 64                	jae    c000785c <mem_malloc+0x1fc>
c00077f8:	66 a1 ca 77 03 c0    	mov    ax,ds:0xc00377ca
c00077fe:	66 a3 cc 77 03 c0    	mov    ds:0xc00377cc,ax
c0007804:	eb 56                	jmp    c000785c <mem_malloc+0x1fc>
c0007806:	66 90                	xchg   ax,ax
c0007808:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000780c:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c0007810:	66 8b 15 ca 77 03 c0 	mov    dx,WORD PTR ds:0xc00377ca
c0007817:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000781b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000781e:	8b 0d a4 86 03 c0    	mov    ecx,DWORD PTR ds:0xc00386a4
c0007824:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0007828:	29 cb                	sub    ebx,ecx
c000782a:	89 d9                	mov    ecx,ebx
c000782c:	29 c8                	sub    eax,ecx
c000782e:	01 d0                	add    eax,edx
c0007830:	66 a3 ca 77 03 c0    	mov    ds:0xc00377ca,ax
c0007836:	66 8b 15 cc 77 03 c0 	mov    dx,WORD PTR ds:0xc00377cc
c000783d:	66 a1 ca 77 03 c0    	mov    ax,ds:0xc00377ca
c0007843:	0f b7 d2             	movzx  edx,dx
c0007846:	0f b7 c0             	movzx  eax,ax
c0007849:	39 c2                	cmp    edx,eax
c000784b:	73 0f                	jae    c000785c <mem_malloc+0x1fc>
c000784d:	66 a1 ca 77 03 c0    	mov    ax,ds:0xc00377ca
c0007853:	66 a3 cc 77 03 c0    	mov    ds:0xc00377cc,ax
c0007859:	8d 76 00             	lea    esi,[esi+0x0]
c000785c:	a1 9c 86 03 c0       	mov    eax,ds:0xc003869c
c0007861:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0007865:	75 71                	jne    c00078d8 <mem_malloc+0x278>
c0007867:	eb 1b                	jmp    c0007884 <mem_malloc+0x224>
c0007869:	8d 76 00             	lea    esi,[esi+0x0]
c000786c:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c0007872:	a1 9c 86 03 c0       	mov    eax,ds:0xc003869c
c0007877:	66 8b 00             	mov    ax,WORD PTR [eax]
c000787a:	0f b7 c0             	movzx  eax,ax
c000787d:	01 d0                	add    eax,edx
c000787f:	a3 9c 86 03 c0       	mov    ds:0xc003869c,eax
c0007884:	a1 9c 86 03 c0       	mov    eax,ds:0xc003869c
c0007889:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000788c:	0f b6 c0             	movzx  eax,al
c000788f:	85 c0                	test   eax,eax
c0007891:	74 11                	je     c00078a4 <mem_malloc+0x244>
c0007893:	8b 15 9c 86 03 c0    	mov    edx,DWORD PTR ds:0xc003869c
c0007899:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c000789e:	39 c2                	cmp    edx,eax
c00078a0:	75 ca                	jne    c000786c <mem_malloc+0x20c>
c00078a2:	66 90                	xchg   ax,ax
c00078a4:	8b 15 9c 86 03 c0    	mov    edx,DWORD PTR ds:0xc003869c
c00078aa:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c00078af:	39 c2                	cmp    edx,eax
c00078b1:	74 25                	je     c00078d8 <mem_malloc+0x278>
c00078b3:	a1 9c 86 03 c0       	mov    eax,ds:0xc003869c
c00078b8:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00078bb:	0f b6 c0             	movzx  eax,al
c00078be:	85 c0                	test   eax,eax
c00078c0:	74 16                	je     c00078d8 <mem_malloc+0x278>
c00078c2:	83 ec 08             	sub    esp,0x8
c00078c5:	68 e5 03 03 c0       	push   0xc00303e5
c00078ca:	68 46 03 03 c0       	push   0xc0030346
c00078cf:	e8 78 85 01 00       	call   c001fe4c <CPrintf>
c00078d4:	83 c4 10             	add    esp,0x10
c00078d7:	90                   	nop
c00078d8:	83 ec 0c             	sub    esp,0xc
c00078db:	68 98 86 03 c0       	push   0xc0038698
c00078e0:	e8 fb 93 ff ff       	call   c0000ce0 <sys_sem_signal>
c00078e5:	83 c4 10             	add    esp,0x10
c00078e8:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00078ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f1:	01 d0                	add    eax,edx
c00078f3:	8d 50 06             	lea    edx,[eax+0x6]
c00078f6:	a1 a0 86 03 c0       	mov    eax,ds:0xc00386a0
c00078fb:	39 c2                	cmp    edx,eax
c00078fd:	76 15                	jbe    c0007914 <mem_malloc+0x2b4>
c00078ff:	83 ec 08             	sub    esp,0x8
c0007902:	68 4c 04 03 c0       	push   0xc003044c
c0007907:	68 46 03 03 c0       	push   0xc0030346
c000790c:	e8 3b 85 01 00       	call   c001fe4c <CPrintf>
c0007911:	83 c4 10             	add    esp,0x10
c0007914:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007918:	83 c0 06             	add    eax,0x6
c000791b:	eb 5b                	jmp    c0007978 <mem_malloc+0x318>
c000791d:	8d 76 00             	lea    esi,[esi+0x0]
c0007920:	8b 15 a4 86 03 c0    	mov    edx,DWORD PTR ds:0xc00386a4
c0007926:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000792b:	01 d0                	add    eax,edx
c000792d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007930:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0007935:	8d 76 00             	lea    esi,[esi+0x0]
c0007938:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000793d:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007942:	b9 40 06 00 00       	mov    ecx,0x640
c0007947:	29 d1                	sub    ecx,edx
c0007949:	89 ca                	mov    edx,ecx
c000794b:	39 d0                	cmp    eax,edx
c000794d:	0f 8c 85 fd ff ff    	jl     c00076d8 <mem_malloc+0x78>
c0007953:	66 a1 ce 77 03 c0    	mov    ax,ds:0xc00377ce
c0007959:	83 c0 01             	add    eax,0x1
c000795c:	66 a3 ce 77 03 c0    	mov    ds:0xc00377ce,ax
c0007962:	83 ec 0c             	sub    esp,0xc
c0007965:	68 98 86 03 c0       	push   0xc0038698
c000796a:	e8 71 93 ff ff       	call   c0000ce0 <sys_sem_signal>
c000796f:	83 c4 10             	add    esp,0x10
c0007972:	b8 00 00 00 00       	mov    eax,0x0
c0007977:	90                   	nop
c0007978:	83 c4 28             	add    esp,0x28
c000797b:	5b                   	pop    ebx
c000797c:	c3                   	ret    
c000797d:	8d 76 00             	lea    esi,[esi+0x0]

c0007980 <mem_calloc>:
c0007980:	83 ec 2c             	sub    esp,0x2c
c0007983:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007987:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000798b:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0007990:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0007995:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007999:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000799d:	0f af c2             	imul   eax,edx
c00079a0:	0f b7 c0             	movzx  eax,ax
c00079a3:	83 ec 0c             	sub    esp,0xc
c00079a6:	50                   	push   eax
c00079a7:	e8 b4 fc ff ff       	call   c0007660 <mem_malloc>
c00079ac:	83 c4 10             	add    esp,0x10
c00079af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00079b3:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00079b8:	74 22                	je     c00079dc <mem_calloc+0x5c>
c00079ba:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00079bf:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00079c4:	0f af c2             	imul   eax,edx
c00079c7:	83 ec 04             	sub    esp,0x4
c00079ca:	50                   	push   eax
c00079cb:	6a 00                	push   0x0
c00079cd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079d1:	e8 1a 8b ff ff       	call   c00004f0 <memset>
c00079d6:	83 c4 10             	add    esp,0x10
c00079d9:	8d 76 00             	lea    esi,[esi+0x0]
c00079dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00079e0:	83 c4 2c             	add    esp,0x2c
c00079e3:	c3                   	ret    

c00079e4 <memp_init>:
c00079e4:	83 ec 10             	sub    esp,0x10
c00079e7:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c00079ee:	eb 78                	jmp    c0007a68 <memp_init+0x84>
c00079f0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00079f5:	89 d0                	mov    eax,edx
c00079f7:	c1 e0 02             	shl    eax,0x2
c00079fa:	01 d0                	add    eax,edx
c00079fc:	d1 e0                	shl    eax,1
c00079fe:	05 d4 77 03 c0       	add    eax,0xc00377d4
c0007a03:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c0007a08:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007a0d:	89 d0                	mov    eax,edx
c0007a0f:	c1 e0 02             	shl    eax,0x2
c0007a12:	01 d0                	add    eax,edx
c0007a14:	d1 e0                	shl    eax,1
c0007a16:	05 d6 77 03 c0       	add    eax,0xc00377d6
c0007a1b:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c0007a20:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007a25:	89 d0                	mov    eax,edx
c0007a27:	c1 e0 02             	shl    eax,0x2
c0007a2a:	01 d0                	add    eax,edx
c0007a2c:	d1 e0                	shl    eax,1
c0007a2e:	05 d8 77 03 c0       	add    eax,0xc00377d8
c0007a33:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c0007a38:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007a3d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007a42:	66 8b 8c 00 9c 04 03 c0 	mov    cx,WORD PTR [eax+eax*1-0x3ffcfb64]
c0007a4a:	89 d0                	mov    eax,edx
c0007a4c:	c1 e0 02             	shl    eax,0x2
c0007a4f:	01 d0                	add    eax,edx
c0007a51:	d1 e0                	shl    eax,1
c0007a53:	05 d2 77 03 c0       	add    eax,0xc00377d2
c0007a58:	66 89 08             	mov    WORD PTR [eax],cx
c0007a5b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0007a60:	83 c0 01             	add    eax,0x1
c0007a63:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0007a68:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007a6d:	83 f8 0d             	cmp    eax,0xd
c0007a70:	0f 86 7a ff ff ff    	jbe    c00079f0 <memp_init+0xc>
c0007a76:	c7 44 24 0c c0 86 03 c0 	mov    DWORD PTR [esp+0xc],0xc00386c0
c0007a7e:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c0007a85:	e9 8a 00 00 00       	jmp    c0007b14 <memp_init+0x130>
c0007a8a:	66 90                	xchg   ax,ax
c0007a8c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007a91:	c7 04 85 60 b8 03 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffc47a0],0x0
c0007a9c:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0007aa3:	eb 47                	jmp    c0007aec <memp_init+0x108>
c0007aa5:	8d 76 00             	lea    esi,[esi+0x0]
c0007aa8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007aad:	8b 14 85 60 b8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc47a0]
c0007ab4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ab8:	89 10                	mov    DWORD PTR [eax],edx
c0007aba:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007abf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007ac3:	89 14 85 60 b8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc47a0],edx
c0007aca:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007acf:	66 8b 84 00 b8 04 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfb48]
c0007ad7:	0f b7 c0             	movzx  eax,ax
c0007ada:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0007ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ae2:	83 c0 01             	add    eax,0x1
c0007ae5:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0007aea:	66 90                	xchg   ax,ax
c0007aec:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007af1:	66 8b 84 00 9c 04 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfb64]
c0007af9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0007afe:	0f b7 c0             	movzx  eax,ax
c0007b01:	39 c2                	cmp    edx,eax
c0007b03:	72 a3                	jb     c0007aa8 <memp_init+0xc4>
c0007b05:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0007b0a:	83 c0 01             	add    eax,0x1
c0007b0d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0007b12:	66 90                	xchg   ax,ax
c0007b14:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007b19:	83 f8 0d             	cmp    eax,0xd
c0007b1c:	0f 86 6a ff ff ff    	jbe    c0007a8c <memp_init+0xa8>
c0007b22:	90                   	nop
c0007b23:	83 c4 10             	add    esp,0x10
c0007b26:	c3                   	ret    
c0007b27:	90                   	nop

c0007b28 <memp_malloc>:
c0007b28:	83 ec 1c             	sub    esp,0x1c
c0007b2b:	83 7c 24 20 0d       	cmp    DWORD PTR [esp+0x20],0xd
c0007b30:	76 22                	jbe    c0007b54 <memp_malloc+0x2c>
c0007b32:	83 ec 08             	sub    esp,0x8
c0007b35:	68 7c 04 03 c0       	push   0xc003047c
c0007b3a:	68 46 03 03 c0       	push   0xc0030346
c0007b3f:	e8 08 83 01 00       	call   c001fe4c <CPrintf>
c0007b44:	83 c4 10             	add    esp,0x10
c0007b47:	b8 00 00 00 00       	mov    eax,0x0
c0007b4c:	e9 ff 00 00 00       	jmp    c0007c50 <memp_malloc+0x128>
c0007b51:	8d 76 00             	lea    esi,[esi+0x0]
c0007b54:	e8 e3 82 01 00       	call   c001fe3c <CLockScheduler>
c0007b59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b5d:	8b 04 85 60 b8 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc47a0]
c0007b64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b68:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007b6d:	0f 84 a1 00 00 00    	je     c0007c14 <memp_malloc+0xec>
c0007b73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b77:	8b 10                	mov    edx,DWORD PTR [eax]
c0007b79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b7d:	89 14 85 60 b8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc47a0],edx
c0007b84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007b88:	89 d0                	mov    eax,edx
c0007b8a:	c1 e0 02             	shl    eax,0x2
c0007b8d:	01 d0                	add    eax,edx
c0007b8f:	d1 e0                	shl    eax,1
c0007b91:	05 d4 77 03 c0       	add    eax,0xc00377d4
c0007b96:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007b99:	83 c0 01             	add    eax,0x1
c0007b9c:	89 c1                	mov    ecx,eax
c0007b9e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007ba2:	89 d0                	mov    eax,edx
c0007ba4:	c1 e0 02             	shl    eax,0x2
c0007ba7:	01 d0                	add    eax,edx
c0007ba9:	d1 e0                	shl    eax,1
c0007bab:	05 d4 77 03 c0       	add    eax,0xc00377d4
c0007bb0:	66 89 08             	mov    WORD PTR [eax],cx
c0007bb3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007bb7:	89 d0                	mov    eax,edx
c0007bb9:	c1 e0 02             	shl    eax,0x2
c0007bbc:	01 d0                	add    eax,edx
c0007bbe:	d1 e0                	shl    eax,1
c0007bc0:	05 d6 77 03 c0       	add    eax,0xc00377d6
c0007bc5:	66 8b 08             	mov    cx,WORD PTR [eax]
c0007bc8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007bcc:	89 d0                	mov    eax,edx
c0007bce:	c1 e0 02             	shl    eax,0x2
c0007bd1:	01 d0                	add    eax,edx
c0007bd3:	d1 e0                	shl    eax,1
c0007bd5:	05 d4 77 03 c0       	add    eax,0xc00377d4
c0007bda:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007bdd:	0f b7 d1             	movzx  edx,cx
c0007be0:	0f b7 c0             	movzx  eax,ax
c0007be3:	39 c2                	cmp    edx,eax
c0007be5:	73 5d                	jae    c0007c44 <memp_malloc+0x11c>
c0007be7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007beb:	89 d0                	mov    eax,edx
c0007bed:	c1 e0 02             	shl    eax,0x2
c0007bf0:	01 d0                	add    eax,edx
c0007bf2:	d1 e0                	shl    eax,1
c0007bf4:	05 d4 77 03 c0       	add    eax,0xc00377d4
c0007bf9:	66 8b 08             	mov    cx,WORD PTR [eax]
c0007bfc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007c00:	89 d0                	mov    eax,edx
c0007c02:	c1 e0 02             	shl    eax,0x2
c0007c05:	01 d0                	add    eax,edx
c0007c07:	d1 e0                	shl    eax,1
c0007c09:	05 d6 77 03 c0       	add    eax,0xc00377d6
c0007c0e:	66 89 08             	mov    WORD PTR [eax],cx
c0007c11:	eb 31                	jmp    c0007c44 <memp_malloc+0x11c>
c0007c13:	90                   	nop
c0007c14:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007c18:	89 d0                	mov    eax,edx
c0007c1a:	c1 e0 02             	shl    eax,0x2
c0007c1d:	01 d0                	add    eax,edx
c0007c1f:	d1 e0                	shl    eax,1
c0007c21:	05 d8 77 03 c0       	add    eax,0xc00377d8
c0007c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007c29:	83 c0 01             	add    eax,0x1
c0007c2c:	89 c1                	mov    ecx,eax
c0007c2e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007c32:	89 d0                	mov    eax,edx
c0007c34:	c1 e0 02             	shl    eax,0x2
c0007c37:	01 d0                	add    eax,edx
c0007c39:	d1 e0                	shl    eax,1
c0007c3b:	05 d8 77 03 c0       	add    eax,0xc00377d8
c0007c40:	66 89 08             	mov    WORD PTR [eax],cx
c0007c43:	90                   	nop
c0007c44:	e8 d7 81 01 00       	call   c001fe20 <CUnlockScheduler>
c0007c49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c4d:	8d 76 00             	lea    esi,[esi+0x0]
c0007c50:	83 c4 1c             	add    esp,0x1c
c0007c53:	c3                   	ret    

c0007c54 <memp_free>:
c0007c54:	83 ec 1c             	sub    esp,0x1c
c0007c57:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007c5c:	74 66                	je     c0007cc4 <memp_free+0x70>
c0007c5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007c62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c66:	e8 d1 81 01 00       	call   c001fe3c <CLockScheduler>
c0007c6b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007c6f:	89 d0                	mov    eax,edx
c0007c71:	c1 e0 02             	shl    eax,0x2
c0007c74:	01 d0                	add    eax,edx
c0007c76:	d1 e0                	shl    eax,1
c0007c78:	05 d4 77 03 c0       	add    eax,0xc00377d4
c0007c7d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007c80:	83 e8 01             	sub    eax,0x1
c0007c83:	89 c1                	mov    ecx,eax
c0007c85:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007c89:	89 d0                	mov    eax,edx
c0007c8b:	c1 e0 02             	shl    eax,0x2
c0007c8e:	01 d0                	add    eax,edx
c0007c90:	d1 e0                	shl    eax,1
c0007c92:	05 d4 77 03 c0       	add    eax,0xc00377d4
c0007c97:	66 89 08             	mov    WORD PTR [eax],cx
c0007c9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007c9e:	8b 14 85 60 b8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc47a0]
c0007ca5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ca9:	89 10                	mov    DWORD PTR [eax],edx
c0007cab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007caf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007cb3:	89 14 85 60 b8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc47a0],edx
c0007cba:	e8 61 81 01 00       	call   c001fe20 <CUnlockScheduler>
c0007cbf:	eb 07                	jmp    c0007cc8 <memp_free+0x74>
c0007cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0007cc4:	90                   	nop
c0007cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0007cc8:	83 c4 1c             	add    esp,0x1c
c0007ccb:	c3                   	ret    

c0007ccc <netif_init>:
c0007ccc:	90                   	nop
c0007ccd:	c3                   	ret    
c0007cce:	66 90                	xchg   ax,ax

c0007cd0 <netif_find>:
c0007cd0:	83 ec 10             	sub    esp,0x10
c0007cd3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007cd8:	75 0a                	jne    c0007ce4 <netif_find+0x14>
c0007cda:	b8 00 00 00 00       	mov    eax,0x0
c0007cdf:	e9 80 00 00 00       	jmp    c0007d64 <netif_find+0x94>
c0007ce4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007ce8:	83 c0 02             	add    eax,0x2
c0007ceb:	8a 00                	mov    al,BYTE PTR [eax]
c0007ced:	83 e8 30             	sub    eax,0x30
c0007cf0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0007cf4:	a1 10 77 03 c0       	mov    eax,ds:0xc0037710
c0007cf9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007cfd:	eb 59                	jmp    c0007d58 <netif_find+0x88>
c0007cff:	90                   	nop
c0007d00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d04:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0007d07:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0007d0c:	0f b6 c0             	movzx  eax,al
c0007d0f:	39 c2                	cmp    edx,eax
c0007d11:	75 39                	jne    c0007d4c <netif_find+0x7c>
c0007d13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d17:	8a 10                	mov    dl,BYTE PTR [eax]
c0007d19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d1d:	8a 40 2a             	mov    al,BYTE PTR [eax+0x2a]
c0007d20:	0f be d2             	movsx  edx,dl
c0007d23:	0f be c0             	movsx  eax,al
c0007d26:	39 c2                	cmp    edx,eax
c0007d28:	75 22                	jne    c0007d4c <netif_find+0x7c>
c0007d2a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d2e:	83 c0 01             	add    eax,0x1
c0007d31:	8a 10                	mov    dl,BYTE PTR [eax]
c0007d33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d37:	8a 40 2b             	mov    al,BYTE PTR [eax+0x2b]
c0007d3a:	0f be d2             	movsx  edx,dl
c0007d3d:	0f be c0             	movsx  eax,al
c0007d40:	39 c2                	cmp    edx,eax
c0007d42:	75 08                	jne    c0007d4c <netif_find+0x7c>
c0007d44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d48:	eb 1a                	jmp    c0007d64 <netif_find+0x94>
c0007d4a:	66 90                	xchg   ax,ax
c0007d4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d50:	8b 00                	mov    eax,DWORD PTR [eax]
c0007d52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007d56:	66 90                	xchg   ax,ax
c0007d58:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007d5d:	75 a1                	jne    c0007d00 <netif_find+0x30>
c0007d5f:	b8 00 00 00 00       	mov    eax,0x0
c0007d64:	83 c4 10             	add    esp,0x10
c0007d67:	c3                   	ret    

c0007d68 <netif_set_ipaddr>:
c0007d68:	83 ec 1c             	sub    esp,0x1c
c0007d6b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007d6f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007d71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007d75:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007d78:	39 c2                	cmp    edx,eax
c0007d7a:	0f 84 bc 00 00 00    	je     c0007e3c <netif_set_ipaddr+0xd4>
c0007d80:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c0007d85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007d89:	eb 45                	jmp    c0007dd0 <netif_set_ipaddr+0x68>
c0007d8b:	90                   	nop
c0007d8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d90:	8b 10                	mov    edx,DWORD PTR [eax]
c0007d92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007d96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007d99:	39 c2                	cmp    edx,eax
c0007d9b:	75 27                	jne    c0007dc4 <netif_set_ipaddr+0x5c>
c0007d9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007da1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007da4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007da8:	83 ec 0c             	sub    esp,0xc
c0007dab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007daf:	e8 8c 36 00 00       	call   c000b440 <tcp_abort>
c0007db4:	83 c4 10             	add    esp,0x10
c0007db7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dbb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007dbf:	eb 0f                	jmp    c0007dd0 <netif_set_ipaddr+0x68>
c0007dc1:	8d 76 00             	lea    esi,[esi+0x0]
c0007dc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007dc8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007dcb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007dcf:	90                   	nop
c0007dd0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007dd5:	75 b5                	jne    c0007d8c <netif_set_ipaddr+0x24>
c0007dd7:	a1 78 78 03 c0       	mov    eax,ds:0xc0037878
c0007ddc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007de0:	eb 52                	jmp    c0007e34 <netif_set_ipaddr+0xcc>
c0007de2:	66 90                	xchg   ax,ax
c0007de4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007de8:	85 c0                	test   eax,eax
c0007dea:	74 3c                	je     c0007e28 <netif_set_ipaddr+0xc0>
c0007dec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007df0:	8b 00                	mov    eax,DWORD PTR [eax]
c0007df2:	85 c0                	test   eax,eax
c0007df4:	74 32                	je     c0007e28 <netif_set_ipaddr+0xc0>
c0007df6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dfa:	8b 10                	mov    edx,DWORD PTR [eax]
c0007dfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007e03:	39 c2                	cmp    edx,eax
c0007e05:	75 21                	jne    c0007e28 <netif_set_ipaddr+0xc0>
c0007e07:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007e0c:	74 0a                	je     c0007e18 <netif_set_ipaddr+0xb0>
c0007e0e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007e12:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e14:	eb 0a                	jmp    c0007e20 <netif_set_ipaddr+0xb8>
c0007e16:	66 90                	xchg   ax,ax
c0007e18:	b8 00 00 00 00       	mov    eax,0x0
c0007e1d:	8d 76 00             	lea    esi,[esi+0x0]
c0007e20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007e24:	89 02                	mov    DWORD PTR [edx],eax
c0007e26:	66 90                	xchg   ax,ax
c0007e28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e2c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007e2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e33:	90                   	nop
c0007e34:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e39:	75 a9                	jne    c0007de4 <netif_set_ipaddr+0x7c>
c0007e3b:	90                   	nop
c0007e3c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007e41:	74 09                	je     c0007e4c <netif_set_ipaddr+0xe4>
c0007e43:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007e47:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e49:	eb 09                	jmp    c0007e54 <netif_set_ipaddr+0xec>
c0007e4b:	90                   	nop
c0007e4c:	b8 00 00 00 00       	mov    eax,0x0
c0007e51:	8d 76 00             	lea    esi,[esi+0x0]
c0007e54:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007e58:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0007e5b:	90                   	nop
c0007e5c:	83 c4 1c             	add    esp,0x1c
c0007e5f:	c3                   	ret    

c0007e60 <netif_set_gw>:
c0007e60:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e65:	74 09                	je     c0007e70 <netif_set_gw+0x10>
c0007e67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e6d:	eb 09                	jmp    c0007e78 <netif_set_gw+0x18>
c0007e6f:	90                   	nop
c0007e70:	b8 00 00 00 00       	mov    eax,0x0
c0007e75:	8d 76 00             	lea    esi,[esi+0x0]
c0007e78:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007e7c:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0007e7f:	90                   	nop
c0007e80:	c3                   	ret    
c0007e81:	8d 76 00             	lea    esi,[esi+0x0]

c0007e84 <netif_set_netmask>:
c0007e84:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e89:	74 09                	je     c0007e94 <netif_set_netmask+0x10>
c0007e8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e91:	eb 09                	jmp    c0007e9c <netif_set_netmask+0x18>
c0007e93:	90                   	nop
c0007e94:	b8 00 00 00 00       	mov    eax,0x0
c0007e99:	8d 76 00             	lea    esi,[esi+0x0]
c0007e9c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007ea0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0007ea3:	90                   	nop
c0007ea4:	c3                   	ret    
c0007ea5:	8d 76 00             	lea    esi,[esi+0x0]

c0007ea8 <netif_set_addr>:
c0007ea8:	83 ec 0c             	sub    esp,0xc
c0007eab:	83 ec 08             	sub    esp,0x8
c0007eae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007eb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007eb6:	e8 ad fe ff ff       	call   c0007d68 <netif_set_ipaddr>
c0007ebb:	83 c4 10             	add    esp,0x10
c0007ebe:	83 ec 08             	sub    esp,0x8
c0007ec1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007ec5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ec9:	e8 b6 ff ff ff       	call   c0007e84 <netif_set_netmask>
c0007ece:	83 c4 10             	add    esp,0x10
c0007ed1:	83 ec 08             	sub    esp,0x8
c0007ed4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ed8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007edc:	e8 7f ff ff ff       	call   c0007e60 <netif_set_gw>
c0007ee1:	83 c4 10             	add    esp,0x10
c0007ee4:	90                   	nop
c0007ee5:	83 c4 0c             	add    esp,0xc
c0007ee8:	c3                   	ret    
c0007ee9:	8d 76 00             	lea    esi,[esi+0x0]

c0007eec <netif_add>:
c0007eec:	83 ec 0c             	sub    esp,0xc
c0007eef:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007ef4:	75 16                	jne    c0007f0c <netif_add+0x20>
c0007ef6:	83 ec 08             	sub    esp,0x8
c0007ef9:	68 d4 04 03 c0       	push   0xc00304d4
c0007efe:	68 46 03 03 c0       	push   0xc0030346
c0007f03:	e8 44 7f 01 00       	call   c001fe4c <CPrintf>
c0007f08:	83 c4 10             	add    esp,0x10
c0007f0b:	90                   	nop
c0007f0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f10:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0007f17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f1b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0007f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f26:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0007f2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f31:	c6 40 29 00          	mov    BYTE PTR [eax+0x29],0x0
c0007f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f39:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007f3d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0007f40:	a0 98 b8 03 c0       	mov    al,ds:0xc003b898
c0007f45:	8d 50 01             	lea    edx,[eax+0x1]
c0007f48:	88 15 98 b8 03 c0    	mov    BYTE PTR ds:0xc003b898,dl
c0007f4e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007f52:	88 42 2c             	mov    BYTE PTR [edx+0x2c],al
c0007f55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f59:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007f5d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0007f60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f70:	e8 33 ff ff ff       	call   c0007ea8 <netif_set_addr>
c0007f75:	83 c4 10             	add    esp,0x10
c0007f78:	83 ec 0c             	sub    esp,0xc
c0007f7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f7f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f83:	ff d0                	call   eax
c0007f85:	83 c4 10             	add    esp,0x10
c0007f88:	0f be c0             	movsx  eax,al
c0007f8b:	85 c0                	test   eax,eax
c0007f8d:	74 09                	je     c0007f98 <netif_add+0xac>
c0007f8f:	b8 00 00 00 00       	mov    eax,0x0
c0007f94:	eb 1e                	jmp    c0007fb4 <netif_add+0xc8>
c0007f96:	66 90                	xchg   ax,ax
c0007f98:	8b 15 10 77 03 c0    	mov    edx,DWORD PTR ds:0xc0037710
c0007f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fa2:	89 10                	mov    DWORD PTR [eax],edx
c0007fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fa8:	a3 10 77 03 c0       	mov    ds:0xc0037710,eax
c0007fad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0007fb4:	83 c4 0c             	add    esp,0xc
c0007fb7:	c3                   	ret    

c0007fb8 <netif_set_default>:
c0007fb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007fbc:	a3 14 77 03 c0       	mov    ds:0xc0037714,eax
c0007fc1:	90                   	nop
c0007fc2:	c3                   	ret    
c0007fc3:	90                   	nop

c0007fc4 <netif_set_up>:
c0007fc4:	83 ec 0c             	sub    esp,0xc
c0007fc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fcb:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fce:	0f b6 c0             	movzx  eax,al
c0007fd1:	83 e0 01             	and    eax,0x1
c0007fd4:	75 4a                	jne    c0008020 <netif_set_up+0x5c>
c0007fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fda:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fdd:	83 c8 01             	or     eax,0x1
c0007fe0:	88 c2                	mov    dl,al
c0007fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fe6:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007fe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fed:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007ff0:	0f b6 c0             	movzx  eax,al
c0007ff3:	83 e0 10             	and    eax,0x10
c0007ff6:	74 28                	je     c0008020 <netif_set_up+0x5c>
c0007ff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ffc:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fff:	0f b6 c0             	movzx  eax,al
c0008002:	83 e0 20             	and    eax,0x20
c0008005:	74 19                	je     c0008020 <netif_set_up+0x5c>
c0008007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000800b:	83 c0 04             	add    eax,0x4
c000800e:	83 ec 08             	sub    esp,0x8
c0008011:	50                   	push   eax
c0008012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008016:	e8 55 a6 00 00       	call   c0012670 <etharp_request>
c000801b:	83 c4 10             	add    esp,0x10
c000801e:	66 90                	xchg   ax,ax
c0008020:	90                   	nop
c0008021:	83 c4 0c             	add    esp,0xc
c0008024:	c3                   	ret    
c0008025:	8d 76 00             	lea    esi,[esi+0x0]

c0008028 <netif_set_down>:
c0008028:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000802c:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c000802f:	0f b6 c0             	movzx  eax,al
c0008032:	83 e0 01             	and    eax,0x1
c0008035:	74 15                	je     c000804c <netif_set_down+0x24>
c0008037:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000803b:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c000803e:	83 e0 fe             	and    eax,0xfffffffe
c0008041:	88 c2                	mov    dl,al
c0008043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008047:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c000804a:	66 90                	xchg   ax,ax
c000804c:	90                   	nop
c000804d:	c3                   	ret    
c000804e:	66 90                	xchg   ax,ax

c0008050 <netif_remove>:
c0008050:	83 ec 10             	sub    esp,0x10
c0008053:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008058:	0f 84 92 00 00 00    	je     c00080f0 <netif_remove+0xa0>
c000805e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008062:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008065:	83 e0 01             	and    eax,0x1
c0008068:	0f b6 c0             	movzx  eax,al
c000806b:	85 c0                	test   eax,eax
c000806d:	74 0d                	je     c000807c <netif_remove+0x2c>
c000806f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008073:	e8 b0 ff ff ff       	call   c0008028 <netif_set_down>
c0008078:	83 c4 04             	add    esp,0x4
c000807b:	90                   	nop
c000807c:	a1 10 77 03 c0       	mov    eax,ds:0xc0037710
c0008081:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0008085:	75 0d                	jne    c0008094 <netif_remove+0x44>
c0008087:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000808b:	8b 00                	mov    eax,DWORD PTR [eax]
c000808d:	a3 10 77 03 c0       	mov    ds:0xc0037710,eax
c0008092:	eb 44                	jmp    c00080d8 <netif_remove+0x88>
c0008094:	a1 10 77 03 c0       	mov    eax,ds:0xc0037710
c0008099:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000809d:	eb 29                	jmp    c00080c8 <netif_remove+0x78>
c000809f:	90                   	nop
c00080a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00080a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00080a6:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00080aa:	75 10                	jne    c00080bc <netif_remove+0x6c>
c00080ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00080b0:	8b 10                	mov    edx,DWORD PTR [eax]
c00080b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00080b6:	89 10                	mov    DWORD PTR [eax],edx
c00080b8:	eb 16                	jmp    c00080d0 <netif_remove+0x80>
c00080ba:	66 90                	xchg   ax,ax
c00080bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00080c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00080c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00080c6:	66 90                	xchg   ax,ax
c00080c8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00080cd:	75 d1                	jne    c00080a0 <netif_remove+0x50>
c00080cf:	90                   	nop
c00080d0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00080d5:	74 1d                	je     c00080f4 <netif_remove+0xa4>
c00080d7:	90                   	nop
c00080d8:	a1 14 77 03 c0       	mov    eax,ds:0xc0037714
c00080dd:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00080e1:	75 15                	jne    c00080f8 <netif_remove+0xa8>
c00080e3:	6a 00                	push   0x0
c00080e5:	e8 ce fe ff ff       	call   c0007fb8 <netif_set_default>
c00080ea:	83 c4 04             	add    esp,0x4
c00080ed:	eb 09                	jmp    c00080f8 <netif_remove+0xa8>
c00080ef:	90                   	nop
c00080f0:	90                   	nop
c00080f1:	eb 05                	jmp    c00080f8 <netif_remove+0xa8>
c00080f3:	90                   	nop
c00080f4:	90                   	nop
c00080f5:	8d 76 00             	lea    esi,[esi+0x0]
c00080f8:	83 c4 10             	add    esp,0x10
c00080fb:	c3                   	ret    

c00080fc <netif_set_link_up>:
c00080fc:	83 ec 0c             	sub    esp,0xc
c00080ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008103:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008106:	0f b6 c0             	movzx  eax,al
c0008109:	83 e0 10             	and    eax,0x10
c000810c:	75 4a                	jne    c0008158 <netif_set_link_up+0x5c>
c000810e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008112:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008115:	83 c8 10             	or     eax,0x10
c0008118:	88 c2                	mov    dl,al
c000811a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000811e:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0008121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008125:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008128:	0f b6 c0             	movzx  eax,al
c000812b:	83 e0 01             	and    eax,0x1
c000812e:	74 28                	je     c0008158 <netif_set_link_up+0x5c>
c0008130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008134:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008137:	0f b6 c0             	movzx  eax,al
c000813a:	83 e0 20             	and    eax,0x20
c000813d:	74 19                	je     c0008158 <netif_set_link_up+0x5c>
c000813f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008143:	83 c0 04             	add    eax,0x4
c0008146:	83 ec 08             	sub    esp,0x8
c0008149:	50                   	push   eax
c000814a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000814e:	e8 1d a5 00 00       	call   c0012670 <etharp_request>
c0008153:	83 c4 10             	add    esp,0x10
c0008156:	66 90                	xchg   ax,ax
c0008158:	90                   	nop
c0008159:	83 c4 0c             	add    esp,0xc
c000815c:	c3                   	ret    
c000815d:	8d 76 00             	lea    esi,[esi+0x0]

c0008160 <netif_set_link_down>:
c0008160:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008164:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008167:	0f b6 c0             	movzx  eax,al
c000816a:	83 e0 10             	and    eax,0x10
c000816d:	74 15                	je     c0008184 <netif_set_link_down+0x24>
c000816f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008173:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008176:	83 e0 ef             	and    eax,0xffffffef
c0008179:	88 c2                	mov    dl,al
c000817b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000817f:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0008182:	66 90                	xchg   ax,ax
c0008184:	90                   	nop
c0008185:	c3                   	ret    
c0008186:	66 90                	xchg   ax,ax

c0008188 <pbuf_free_ooseq>:
c0008188:	83 ec 1c             	sub    esp,0x1c
c000818b:	e8 ac 7c 01 00       	call   c001fe3c <CLockScheduler>
c0008190:	c6 05 99 b8 03 c0 00 	mov    BYTE PTR ds:0xc003b899,0x0
c0008197:	e8 84 7c 01 00       	call   c001fe20 <CUnlockScheduler>
c000819c:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c00081a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00081a5:	eb 41                	jmp    c00081e8 <pbuf_free_ooseq+0x60>
c00081a7:	90                   	nop
c00081a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00081ac:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c00081b2:	85 c0                	test   eax,eax
c00081b4:	74 26                	je     c00081dc <pbuf_free_ooseq+0x54>
c00081b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00081ba:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c00081c0:	83 ec 0c             	sub    esp,0xc
c00081c3:	50                   	push   eax
c00081c4:	e8 1b 20 00 00       	call   c000a1e4 <tcp_segs_free>
c00081c9:	83 c4 10             	add    esp,0x10
c00081cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00081d0:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c00081da:	eb 14                	jmp    c00081f0 <pbuf_free_ooseq+0x68>
c00081dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00081e0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00081e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00081e7:	90                   	nop
c00081e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00081ed:	75 b9                	jne    c00081a8 <pbuf_free_ooseq+0x20>
c00081ef:	90                   	nop
c00081f0:	83 c4 1c             	add    esp,0x1c
c00081f3:	c3                   	ret    

c00081f4 <pbuf_pool_is_empty>:
c00081f4:	83 ec 1c             	sub    esp,0x1c
c00081f7:	e8 40 7c 01 00       	call   c001fe3c <CLockScheduler>
c00081fc:	a0 99 b8 03 c0       	mov    al,ds:0xc003b899
c0008201:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008205:	c6 05 99 b8 03 c0 01 	mov    BYTE PTR ds:0xc003b899,0x1
c000820c:	e8 0f 7c 01 00       	call   c001fe20 <CUnlockScheduler>
c0008211:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0008216:	85 c0                	test   eax,eax
c0008218:	75 2e                	jne    c0008248 <pbuf_pool_is_empty+0x54>
c000821a:	83 ec 04             	sub    esp,0x4
c000821d:	6a 00                	push   0x0
c000821f:	6a 00                	push   0x0
c0008221:	68 88 81 00 c0       	push   0xc0008188
c0008226:	e8 5d 8a ff ff       	call   c0000c88 <tcpip_callback_with_block>
c000822b:	83 c4 10             	add    esp,0x10
c000822e:	0f be c0             	movsx  eax,al
c0008231:	85 c0                	test   eax,eax
c0008233:	74 13                	je     c0008248 <pbuf_pool_is_empty+0x54>
c0008235:	e8 02 7c 01 00       	call   c001fe3c <CLockScheduler>
c000823a:	c6 05 99 b8 03 c0 00 	mov    BYTE PTR ds:0xc003b899,0x0
c0008241:	e8 da 7b 01 00       	call   c001fe20 <CUnlockScheduler>
c0008246:	66 90                	xchg   ax,ax
c0008248:	90                   	nop
c0008249:	83 c4 1c             	add    esp,0x1c
c000824c:	c3                   	ret    
c000824d:	8d 76 00             	lea    esi,[esi+0x0]

c0008250 <pbuf_alloced_custom>:
c0008250:	83 ec 2c             	sub    esp,0x2c
c0008253:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0008257:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000825b:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0008260:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008265:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c000826c:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0008271:	74 29                	je     c000829c <pbuf_alloced_custom+0x4c>
c0008273:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008278:	74 12                	je     c000828c <pbuf_alloced_custom+0x3c>
c000827a:	83 7c 24 30 02       	cmp    DWORD PTR [esp+0x30],0x2
c000827f:	74 2b                	je     c00082ac <pbuf_alloced_custom+0x5c>
c0008281:	83 7c 24 30 03       	cmp    DWORD PTR [esp+0x30],0x3
c0008286:	74 54                	je     c00082dc <pbuf_alloced_custom+0x8c>
c0008288:	eb 32                	jmp    c00082bc <pbuf_alloced_custom+0x6c>
c000828a:	66 90                	xchg   ax,ax
c000828c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008291:	83 c0 14             	add    eax,0x14
c0008294:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008299:	8d 76 00             	lea    esi,[esi+0x0]
c000829c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00082a1:	83 c0 14             	add    eax,0x14
c00082a4:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00082a9:	8d 76 00             	lea    esi,[esi+0x0]
c00082ac:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00082b1:	83 c0 0e             	add    eax,0xe
c00082b4:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00082b9:	eb 25                	jmp    c00082e0 <pbuf_alloced_custom+0x90>
c00082bb:	90                   	nop
c00082bc:	83 ec 08             	sub    esp,0x8
c00082bf:	68 ec 04 03 c0       	push   0xc00304ec
c00082c4:	68 46 03 03 c0       	push   0xc0030346
c00082c9:	e8 7e 7b 01 00       	call   c001fe4c <CPrintf>
c00082ce:	83 c4 10             	add    esp,0x10
c00082d1:	b8 00 00 00 00       	mov    eax,0x0
c00082d6:	e9 95 00 00 00       	jmp    c0008370 <pbuf_alloced_custom+0x120>
c00082db:	90                   	nop
c00082dc:	90                   	nop
c00082dd:	8d 76 00             	lea    esi,[esi+0x0]
c00082e0:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00082e5:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00082ea:	01 c2                	add    edx,eax
c00082ec:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00082f1:	39 c2                	cmp    edx,eax
c00082f3:	7d 07                	jge    c00082fc <pbuf_alloced_custom+0xac>
c00082f5:	b8 00 00 00 00       	mov    eax,0x0
c00082fa:	eb 74                	jmp    c0008370 <pbuf_alloced_custom+0x120>
c00082fc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008300:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008306:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000830b:	74 17                	je     c0008324 <pbuf_alloced_custom+0xd4>
c000830d:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0008312:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008316:	01 c2                	add    edx,eax
c0008318:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000831c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000831f:	eb 0f                	jmp    c0008330 <pbuf_alloced_custom+0xe0>
c0008321:	8d 76 00             	lea    esi,[esi+0x0]
c0008324:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008328:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000832f:	90                   	nop
c0008330:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008334:	c6 40 0d 02          	mov    BYTE PTR [eax+0xd],0x2
c0008338:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000833c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008340:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008344:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008348:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000834b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000834f:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0008353:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008357:	88 c2                	mov    dl,al
c0008359:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000835d:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008360:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008364:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c000836a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000836e:	66 90                	xchg   ax,ax
c0008370:	83 c4 2c             	add    esp,0x2c
c0008373:	c3                   	ret    

c0008374 <pbuf_header>:
c0008374:	83 ec 2c             	sub    esp,0x2c
c0008377:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000837b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008380:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008385:	75 15                	jne    c000839c <pbuf_header+0x28>
c0008387:	83 ec 08             	sub    esp,0x8
c000838a:	68 76 07 03 c0       	push   0xc0030776
c000838f:	68 46 03 03 c0       	push   0xc0030346
c0008394:	e8 b3 7a 01 00       	call   c001fe4c <CPrintf>
c0008399:	83 c4 10             	add    esp,0x10
c000839c:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c00083a1:	85 c0                	test   eax,eax
c00083a3:	74 07                	je     c00083ac <pbuf_header+0x38>
c00083a5:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00083aa:	75 08                	jne    c00083b4 <pbuf_header+0x40>
c00083ac:	b0 00                	mov    al,0x0
c00083ae:	e9 5d 01 00 00       	jmp    c0008510 <pbuf_header+0x19c>
c00083b3:	90                   	nop
c00083b4:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c00083b9:	85 c0                	test   eax,eax
c00083bb:	79 3b                	jns    c00083f8 <pbuf_header+0x84>
c00083bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083c1:	f7 d8                	neg    eax
c00083c3:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00083c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00083cc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00083d0:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00083d5:	0f b7 c0             	movzx  eax,ax
c00083d8:	39 c2                	cmp    edx,eax
c00083da:	76 28                	jbe    c0008404 <pbuf_header+0x90>
c00083dc:	83 ec 08             	sub    esp,0x8
c00083df:	68 c7 06 03 c0       	push   0xc00306c7
c00083e4:	68 46 03 03 c0       	push   0xc0030346
c00083e9:	e8 5e 7a 01 00       	call   c001fe4c <CPrintf>
c00083ee:	83 c4 10             	add    esp,0x10
c00083f1:	b0 01                	mov    al,0x1
c00083f3:	e9 18 01 00 00       	jmp    c0008510 <pbuf_header+0x19c>
c00083f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083fc:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008401:	8d 76 00             	lea    esi,[esi+0x0]
c0008404:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008408:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000840b:	0f b6 c0             	movzx  eax,al
c000840e:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c0008413:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008417:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000841a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000841e:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008423:	85 c0                	test   eax,eax
c0008425:	74 0d                	je     c0008434 <pbuf_header+0xc0>
c0008427:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000842c:	83 f8 03             	cmp    eax,0x3
c000842f:	75 3f                	jne    c0008470 <pbuf_header+0xfc>
c0008431:	8d 76 00             	lea    esi,[esi+0x0]
c0008434:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008438:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000843b:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c0008440:	f7 da                	neg    edx
c0008442:	01 c2                	add    edx,eax
c0008444:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008448:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000844b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000844f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008452:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008456:	83 c2 10             	add    edx,0x10
c0008459:	39 d0                	cmp    eax,edx
c000845b:	73 7f                	jae    c00084dc <pbuf_header+0x168>
c000845d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008461:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008465:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008468:	b0 01                	mov    al,0x1
c000846a:	e9 a1 00 00 00       	jmp    c0008510 <pbuf_header+0x19c>
c000846f:	90                   	nop
c0008470:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008475:	83 f8 02             	cmp    eax,0x2
c0008478:	74 0a                	je     c0008484 <pbuf_header+0x110>
c000847a:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000847f:	83 f8 01             	cmp    eax,0x1
c0008482:	75 3c                	jne    c00084c0 <pbuf_header+0x14c>
c0008484:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c0008489:	85 c0                	test   eax,eax
c000848b:	79 2f                	jns    c00084bc <pbuf_header+0x148>
c000848d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008491:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008495:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000849a:	0f b7 c0             	movzx  eax,ax
c000849d:	39 c2                	cmp    edx,eax
c000849f:	77 1b                	ja     c00084bc <pbuf_header+0x148>
c00084a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00084a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00084a8:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c00084ad:	f7 da                	neg    edx
c00084af:	01 c2                	add    edx,eax
c00084b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00084b5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00084b8:	eb 22                	jmp    c00084dc <pbuf_header+0x168>
c00084ba:	66 90                	xchg   ax,ax
c00084bc:	b0 01                	mov    al,0x1
c00084be:	eb 50                	jmp    c0008510 <pbuf_header+0x19c>
c00084c0:	83 ec 08             	sub    esp,0x8
c00084c3:	68 e5 06 03 c0       	push   0xc00306e5
c00084c8:	68 46 03 03 c0       	push   0xc0030346
c00084cd:	e8 7a 79 01 00       	call   c001fe4c <CPrintf>
c00084d2:	83 c4 10             	add    esp,0x10
c00084d5:	b0 01                	mov    al,0x1
c00084d7:	eb 37                	jmp    c0008510 <pbuf_header+0x19c>
c00084d9:	8d 76 00             	lea    esi,[esi+0x0]
c00084dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00084e0:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00084e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084e8:	01 d0                	add    eax,edx
c00084ea:	89 c2                	mov    edx,eax
c00084ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00084f0:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c00084f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00084f8:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00084fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ff:	01 d0                	add    eax,edx
c0008501:	89 c2                	mov    edx,eax
c0008503:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008507:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000850b:	b0 00                	mov    al,0x0
c000850d:	8d 76 00             	lea    esi,[esi+0x0]
c0008510:	83 c4 2c             	add    esp,0x2c
c0008513:	c3                   	ret    

c0008514 <pbuf_free>:
c0008514:	83 ec 1c             	sub    esp,0x1c
c0008517:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000851c:	75 26                	jne    c0008544 <pbuf_free+0x30>
c000851e:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008523:	75 17                	jne    c000853c <pbuf_free+0x28>
c0008525:	83 ec 08             	sub    esp,0x8
c0008528:	68 76 07 03 c0       	push   0xc0030776
c000852d:	68 46 03 03 c0       	push   0xc0030346
c0008532:	e8 15 79 01 00       	call   c001fe4c <CPrintf>
c0008537:	83 c4 10             	add    esp,0x10
c000853a:	66 90                	xchg   ax,ax
c000853c:	b0 00                	mov    al,0x0
c000853e:	e9 a9 01 00 00       	jmp    c00086ec <pbuf_free+0x1d8>
c0008543:	90                   	nop
c0008544:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008548:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000854b:	0f b6 c0             	movzx  eax,al
c000854e:	85 c0                	test   eax,eax
c0008550:	74 42                	je     c0008594 <pbuf_free+0x80>
c0008552:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008556:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008559:	0f b6 c0             	movzx  eax,al
c000855c:	83 f8 01             	cmp    eax,0x1
c000855f:	74 33                	je     c0008594 <pbuf_free+0x80>
c0008561:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008565:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008568:	0f b6 c0             	movzx  eax,al
c000856b:	83 f8 02             	cmp    eax,0x2
c000856e:	74 24                	je     c0008594 <pbuf_free+0x80>
c0008570:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008574:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008577:	0f b6 c0             	movzx  eax,al
c000857a:	83 f8 03             	cmp    eax,0x3
c000857d:	74 15                	je     c0008594 <pbuf_free+0x80>
c000857f:	83 ec 08             	sub    esp,0x8
c0008582:	68 f3 06 03 c0       	push   0xc00306f3
c0008587:	68 46 03 03 c0       	push   0xc0030346
c000858c:	e8 bb 78 01 00       	call   c001fe4c <CPrintf>
c0008591:	83 c4 10             	add    esp,0x10
c0008594:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008599:	e9 3e 01 00 00       	jmp    c00086dc <pbuf_free+0x1c8>
c000859e:	66 90                	xchg   ax,ax
c00085a0:	e8 97 78 01 00       	call   c001fe3c <CLockScheduler>
c00085a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085a9:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c00085ad:	0f b7 c0             	movzx  eax,ax
c00085b0:	85 c0                	test   eax,eax
c00085b2:	75 18                	jne    c00085cc <pbuf_free+0xb8>
c00085b4:	83 ec 08             	sub    esp,0x8
c00085b7:	68 08 07 03 c0       	push   0xc0030708
c00085bc:	68 46 03 03 c0       	push   0xc0030346
c00085c1:	e8 86 78 01 00       	call   c001fe4c <CPrintf>
c00085c6:	83 c4 10             	add    esp,0x10
c00085c9:	8d 76 00             	lea    esi,[esi+0x0]
c00085cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085d0:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c00085d4:	83 e8 01             	sub    eax,0x1
c00085d7:	89 c2                	mov    edx,eax
c00085d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085dd:	66 89 50 0e          	mov    WORD PTR [eax+0xe],dx
c00085e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085e5:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c00085e9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00085ee:	e8 2d 78 01 00       	call   c001fe20 <CUnlockScheduler>
c00085f3:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00085f8:	85 c0                	test   eax,eax
c00085fa:	0f 85 d4 00 00 00    	jne    c00086d4 <pbuf_free+0x1c0>
c0008600:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008604:	8b 00                	mov    eax,DWORD PTR [eax]
c0008606:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000860a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000860e:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008611:	0f b6 c0             	movzx  eax,al
c0008614:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008619:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000861d:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008620:	0f b6 c0             	movzx  eax,al
c0008623:	83 e0 02             	and    eax,0x2
c0008626:	74 3c                	je     c0008664 <pbuf_free+0x150>
c0008628:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000862c:	89 04 24             	mov    DWORD PTR [esp],eax
c000862f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008632:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0008635:	85 c0                	test   eax,eax
c0008637:	75 17                	jne    c0008650 <pbuf_free+0x13c>
c0008639:	83 ec 08             	sub    esp,0x8
c000863c:	68 10 05 03 c0       	push   0xc0030510
c0008641:	68 46 03 03 c0       	push   0xc0030346
c0008646:	e8 01 78 01 00       	call   c001fe4c <CPrintf>
c000864b:	83 c4 10             	add    esp,0x10
c000864e:	66 90                	xchg   ax,ax
c0008650:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008653:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0008656:	83 ec 0c             	sub    esp,0xc
c0008659:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000865d:	ff d0                	call   eax
c000865f:	83 c4 10             	add    esp,0x10
c0008662:	eb 58                	jmp    c00086bc <pbuf_free+0x1a8>
c0008664:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008669:	83 f8 03             	cmp    eax,0x3
c000866c:	75 16                	jne    c0008684 <pbuf_free+0x170>
c000866e:	83 ec 08             	sub    esp,0x8
c0008671:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008675:	6a 0d                	push   0xd
c0008677:	e8 d8 f5 ff ff       	call   c0007c54 <memp_free>
c000867c:	83 c4 10             	add    esp,0x10
c000867f:	eb 3b                	jmp    c00086bc <pbuf_free+0x1a8>
c0008681:	8d 76 00             	lea    esi,[esi+0x0]
c0008684:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008689:	83 f8 01             	cmp    eax,0x1
c000868c:	74 0a                	je     c0008698 <pbuf_free+0x184>
c000868e:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008693:	83 f8 02             	cmp    eax,0x2
c0008696:	75 14                	jne    c00086ac <pbuf_free+0x198>
c0008698:	83 ec 08             	sub    esp,0x8
c000869b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000869f:	6a 0c                	push   0xc
c00086a1:	e8 ae f5 ff ff       	call   c0007c54 <memp_free>
c00086a6:	83 c4 10             	add    esp,0x10
c00086a9:	eb 11                	jmp    c00086bc <pbuf_free+0x1a8>
c00086ab:	90                   	nop
c00086ac:	83 ec 0c             	sub    esp,0xc
c00086af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00086b3:	e8 74 eb ff ff       	call   c000722c <mem_free>
c00086b8:	83 c4 10             	add    esp,0x10
c00086bb:	90                   	nop
c00086bc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00086c0:	83 c0 01             	add    eax,0x1
c00086c3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00086c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00086cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086cf:	eb 0b                	jmp    c00086dc <pbuf_free+0x1c8>
c00086d1:	8d 76 00             	lea    esi,[esi+0x0]
c00086d4:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00086dc:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00086e1:	0f 85 b9 fe ff ff    	jne    c00085a0 <pbuf_free+0x8c>
c00086e7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00086eb:	90                   	nop
c00086ec:	83 c4 1c             	add    esp,0x1c
c00086ef:	c3                   	ret    

c00086f0 <pbuf_alloc>:
c00086f0:	83 ec 3c             	sub    esp,0x3c
c00086f3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00086f7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00086fc:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c0008703:	83 7c 24 40 01       	cmp    DWORD PTR [esp+0x40],0x1
c0008708:	74 2a                	je     c0008734 <pbuf_alloc+0x44>
c000870a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000870f:	74 13                	je     c0008724 <pbuf_alloc+0x34>
c0008711:	83 7c 24 40 02       	cmp    DWORD PTR [esp+0x40],0x2
c0008716:	74 2c                	je     c0008744 <pbuf_alloc+0x54>
c0008718:	83 7c 24 40 03       	cmp    DWORD PTR [esp+0x40],0x3
c000871d:	74 55                	je     c0008774 <pbuf_alloc+0x84>
c000871f:	eb 33                	jmp    c0008754 <pbuf_alloc+0x64>
c0008721:	8d 76 00             	lea    esi,[esi+0x0]
c0008724:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0008729:	83 c0 14             	add    eax,0x14
c000872c:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c0008731:	8d 76 00             	lea    esi,[esi+0x0]
c0008734:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0008739:	83 c0 14             	add    eax,0x14
c000873c:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c0008741:	8d 76 00             	lea    esi,[esi+0x0]
c0008744:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0008749:	83 c0 0e             	add    eax,0xe
c000874c:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c0008751:	eb 25                	jmp    c0008778 <pbuf_alloc+0x88>
c0008753:	90                   	nop
c0008754:	83 ec 08             	sub    esp,0x8
c0008757:	68 1e 07 03 c0       	push   0xc003071e
c000875c:	68 46 03 03 c0       	push   0xc0030346
c0008761:	e8 e6 76 01 00       	call   c001fe4c <CPrintf>
c0008766:	83 c4 10             	add    esp,0x10
c0008769:	b8 00 00 00 00       	mov    eax,0x0
c000876e:	e9 71 03 00 00       	jmp    c0008ae4 <pbuf_alloc+0x3f4>
c0008773:	90                   	nop
c0008774:	90                   	nop
c0008775:	8d 76 00             	lea    esi,[esi+0x0]
c0008778:	83 7c 24 48 02       	cmp    DWORD PTR [esp+0x48],0x2
c000877d:	77 11                	ja     c0008790 <pbuf_alloc+0xa0>
c000877f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0008784:	0f 85 c6 02 00 00    	jne    c0008a50 <pbuf_alloc+0x360>
c000878a:	e9 41 02 00 00       	jmp    c00089d0 <pbuf_alloc+0x2e0>
c000878f:	90                   	nop
c0008790:	83 7c 24 48 03       	cmp    DWORD PTR [esp+0x48],0x3
c0008795:	0f 85 15 03 00 00    	jne    c0008ab0 <pbuf_alloc+0x3c0>
c000879b:	83 ec 0c             	sub    esp,0xc
c000879e:	6a 0d                	push   0xd
c00087a0:	e8 83 f3 ff ff       	call   c0007b28 <memp_malloc>
c00087a5:	83 c4 10             	add    esp,0x10
c00087a8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00087ac:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00087b1:	75 11                	jne    c00087c4 <pbuf_alloc+0xd4>
c00087b3:	e8 3c fa ff ff       	call   c00081f4 <pbuf_pool_is_empty>
c00087b8:	b8 00 00 00 00       	mov    eax,0x0
c00087bd:	e9 22 03 00 00       	jmp    c0008ae4 <pbuf_alloc+0x3f4>
c00087c2:	66 90                	xchg   ax,ax
c00087c4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00087c8:	88 c2                	mov    dl,al
c00087ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087ce:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00087d1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087d5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00087db:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00087e0:	8d 50 10             	lea    edx,[eax+0x10]
c00087e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087e7:	01 c2                	add    edx,eax
c00087e9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087ed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00087f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00087f8:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c00087fc:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008801:	ba 4e 02 00 00       	mov    edx,0x24e
c0008806:	29 c2                	sub    edx,eax
c0008808:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000880d:	39 c2                	cmp    edx,eax
c000880f:	0f 4e c2             	cmovle eax,edx
c0008812:	89 c2                	mov    edx,eax
c0008814:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008818:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c000881c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008820:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008823:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008827:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000882b:	0f b7 c0             	movzx  eax,ax
c000882e:	01 c2                	add    edx,eax
c0008830:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008834:	05 5e 02 00 00       	add    eax,0x25e
c0008839:	39 c2                	cmp    edx,eax
c000883b:	76 17                	jbe    c0008854 <pbuf_alloc+0x164>
c000883d:	83 ec 08             	sub    esp,0x8
c0008840:	68 34 05 03 c0       	push   0xc0030534
c0008845:	68 46 03 03 c0       	push   0xc0030346
c000884a:	e8 fd 75 01 00       	call   c001fe4c <CPrintf>
c000884f:	83 c4 10             	add    esp,0x10
c0008852:	66 90                	xchg   ax,ax
c0008854:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008859:	ba 4e 02 00 00       	mov    edx,0x24e
c000885e:	29 c2                	sub    edx,eax
c0008860:	89 d0                	mov    eax,edx
c0008862:	85 c0                	test   eax,eax
c0008864:	7f 16                	jg     c000887c <pbuf_alloc+0x18c>
c0008866:	83 ec 08             	sub    esp,0x8
c0008869:	68 68 05 03 c0       	push   0xc0030568
c000886e:	68 46 03 03 c0       	push   0xc0030346
c0008873:	e8 d4 75 01 00       	call   c001fe4c <CPrintf>
c0008878:	83 c4 10             	add    esp,0x10
c000887b:	90                   	nop
c000887c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008880:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008886:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000888a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000888e:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008893:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008897:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000889b:	0f b7 c0             	movzx  eax,ax
c000889e:	29 c2                	sub    edx,eax
c00088a0:	89 d0                	mov    eax,edx
c00088a2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00088a6:	e9 15 01 00 00       	jmp    c00089c0 <pbuf_alloc+0x2d0>
c00088ab:	90                   	nop
c00088ac:	83 ec 0c             	sub    esp,0xc
c00088af:	6a 0d                	push   0xd
c00088b1:	e8 72 f2 ff ff       	call   c0007b28 <memp_malloc>
c00088b6:	83 c4 10             	add    esp,0x10
c00088b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00088bd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00088c2:	75 20                	jne    c00088e4 <pbuf_alloc+0x1f4>
c00088c4:	e8 2b f9 ff ff       	call   c00081f4 <pbuf_pool_is_empty>
c00088c9:	83 ec 0c             	sub    esp,0xc
c00088cc:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00088d0:	e8 3f fc ff ff       	call   c0008514 <pbuf_free>
c00088d5:	83 c4 10             	add    esp,0x10
c00088d8:	b8 00 00 00 00       	mov    eax,0x0
c00088dd:	e9 02 02 00 00       	jmp    c0008ae4 <pbuf_alloc+0x3f4>
c00088e2:	66 90                	xchg   ax,ax
c00088e4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00088e8:	88 c2                	mov    dl,al
c00088ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088ee:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00088f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088f5:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c00088f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008903:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008907:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000890b:	89 10                	mov    DWORD PTR [eax],edx
c000890d:	81 7c 24 20 fe ff 00 00 	cmp    DWORD PTR [esp+0x20],0xfffe
c0008915:	7e 15                	jle    c000892c <pbuf_alloc+0x23c>
c0008917:	83 ec 08             	sub    esp,0x8
c000891a:	68 39 07 03 c0       	push   0xc0030739
c000891f:	68 46 03 03 c0       	push   0xc0030346
c0008924:	e8 23 75 01 00       	call   c001fe4c <CPrintf>
c0008929:	83 c4 10             	add    esp,0x10
c000892c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008930:	89 c2                	mov    edx,eax
c0008932:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008936:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000893a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000893e:	0f b7 d0             	movzx  edx,ax
c0008941:	81 fa 4e 02 00 00    	cmp    edx,0x24e
c0008947:	76 07                	jbe    c0008950 <pbuf_alloc+0x260>
c0008949:	b8 4e 02 00 00       	mov    eax,0x24e
c000894e:	66 90                	xchg   ax,ax
c0008950:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008954:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008958:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000895c:	8d 50 10             	lea    edx,[eax+0x10]
c000895f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008963:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008966:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000896a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000896d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008971:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008975:	0f b7 c0             	movzx  eax,ax
c0008978:	01 c2                	add    edx,eax
c000897a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000897e:	05 5e 02 00 00       	add    eax,0x25e
c0008983:	39 c2                	cmp    edx,eax
c0008985:	76 15                	jbe    c000899c <pbuf_alloc+0x2ac>
c0008987:	83 ec 08             	sub    esp,0x8
c000898a:	68 34 05 03 c0       	push   0xc0030534
c000898f:	68 46 03 03 c0       	push   0xc0030346
c0008994:	e8 b3 74 01 00       	call   c001fe4c <CPrintf>
c0008999:	83 c4 10             	add    esp,0x10
c000899c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089a0:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c00089a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089aa:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00089ae:	0f b7 c0             	movzx  eax,ax
c00089b1:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c00089b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089b9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00089bd:	8d 76 00             	lea    esi,[esi+0x0]
c00089c0:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00089c5:	0f 8f e1 fe ff ff    	jg     c00088ac <pbuf_alloc+0x1bc>
c00089cb:	e9 fc 00 00 00       	jmp    c0008acc <pbuf_alloc+0x3dc>
c00089d0:	66 8b 54 24 26       	mov    dx,WORD PTR [esp+0x26]
c00089d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00089d9:	01 d0                	add    eax,edx
c00089db:	83 c0 10             	add    eax,0x10
c00089de:	0f b7 c0             	movzx  eax,ax
c00089e1:	83 ec 0c             	sub    esp,0xc
c00089e4:	50                   	push   eax
c00089e5:	e8 76 ec ff ff       	call   c0007660 <mem_malloc>
c00089ea:	83 c4 10             	add    esp,0x10
c00089ed:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00089f1:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00089f6:	75 0c                	jne    c0008a04 <pbuf_alloc+0x314>
c00089f8:	b8 00 00 00 00       	mov    eax,0x0
c00089fd:	e9 e2 00 00 00       	jmp    c0008ae4 <pbuf_alloc+0x3f4>
c0008a02:	66 90                	xchg   ax,ax
c0008a04:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008a09:	8d 50 10             	lea    edx,[eax+0x10]
c0008a0c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a10:	01 c2                	add    edx,eax
c0008a12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a16:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008a19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a1d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008a21:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008a25:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a29:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008a2c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a30:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0008a34:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a38:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a3e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008a42:	88 c2                	mov    dl,al
c0008a44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a48:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008a4b:	eb 7f                	jmp    c0008acc <pbuf_alloc+0x3dc>
c0008a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0008a50:	83 ec 0c             	sub    esp,0xc
c0008a53:	6a 0c                	push   0xc
c0008a55:	e8 ce f0 ff ff       	call   c0007b28 <memp_malloc>
c0008a5a:	83 c4 10             	add    esp,0x10
c0008a5d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0008a61:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0008a66:	75 08                	jne    c0008a70 <pbuf_alloc+0x380>
c0008a68:	b8 00 00 00 00       	mov    eax,0x0
c0008a6d:	eb 75                	jmp    c0008ae4 <pbuf_alloc+0x3f4>
c0008a6f:	90                   	nop
c0008a70:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a74:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008a7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008a83:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008a87:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a8b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008a8e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a92:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0008a96:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a9a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008aa0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008aa4:	88 c2                	mov    dl,al
c0008aa6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008aaa:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008aad:	eb 1d                	jmp    c0008acc <pbuf_alloc+0x3dc>
c0008aaf:	90                   	nop
c0008ab0:	83 ec 08             	sub    esp,0x8
c0008ab3:	68 4d 07 03 c0       	push   0xc003074d
c0008ab8:	68 46 03 03 c0       	push   0xc0030346
c0008abd:	e8 8a 73 01 00       	call   c001fe4c <CPrintf>
c0008ac2:	83 c4 10             	add    esp,0x10
c0008ac5:	b8 00 00 00 00       	mov    eax,0x0
c0008aca:	eb 18                	jmp    c0008ae4 <pbuf_alloc+0x3f4>
c0008acc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ad0:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008ad6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ada:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c0008ade:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ae2:	66 90                	xchg   ax,ax
c0008ae4:	83 c4 3c             	add    esp,0x3c
c0008ae7:	c3                   	ret    

c0008ae8 <pbuf_realloc>:
c0008ae8:	83 ec 2c             	sub    esp,0x2c
c0008aeb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008aef:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008af4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008af9:	75 15                	jne    c0008b10 <pbuf_realloc+0x28>
c0008afb:	83 ec 08             	sub    esp,0x8
c0008afe:	68 68 07 03 c0       	push   0xc0030768
c0008b03:	68 46 03 03 c0       	push   0xc0030346
c0008b08:	e8 3f 73 01 00       	call   c001fe4c <CPrintf>
c0008b0d:	83 c4 10             	add    esp,0x10
c0008b10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b14:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008b17:	0f b6 c0             	movzx  eax,al
c0008b1a:	83 f8 03             	cmp    eax,0x3
c0008b1d:	74 41                	je     c0008b60 <pbuf_realloc+0x78>
c0008b1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b23:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008b26:	0f b6 c0             	movzx  eax,al
c0008b29:	83 f8 01             	cmp    eax,0x1
c0008b2c:	74 32                	je     c0008b60 <pbuf_realloc+0x78>
c0008b2e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b32:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008b35:	0f b6 c0             	movzx  eax,al
c0008b38:	85 c0                	test   eax,eax
c0008b3a:	74 24                	je     c0008b60 <pbuf_realloc+0x78>
c0008b3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b40:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008b43:	0f b6 c0             	movzx  eax,al
c0008b46:	83 f8 02             	cmp    eax,0x2
c0008b49:	74 15                	je     c0008b60 <pbuf_realloc+0x78>
c0008b4b:	83 ec 08             	sub    esp,0x8
c0008b4e:	68 80 07 03 c0       	push   0xc0030780
c0008b53:	68 46 03 03 c0       	push   0xc0030346
c0008b58:	e8 ef 72 01 00       	call   c001fe4c <CPrintf>
c0008b5d:	83 c4 10             	add    esp,0x10
c0008b60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b64:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008b67:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008b6c:	0f b7 c0             	movzx  eax,ax
c0008b6f:	39 c2                	cmp    edx,eax
c0008b71:	0f 83 71 01 00 00    	jae    c0008ce8 <pbuf_realloc+0x200>
c0008b77:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008b7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b80:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008b83:	0f b7 c0             	movzx  eax,ax
c0008b86:	29 c2                	sub    edx,eax
c0008b88:	89 d0                	mov    eax,edx
c0008b8a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008b8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b92:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0008b97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b9b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b9f:	eb 7b                	jmp    c0008c1c <pbuf_realloc+0x134>
c0008ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0008ba4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ba8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008bac:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0008bb1:	89 d1                	mov    ecx,edx
c0008bb3:	29 c1                	sub    ecx,eax
c0008bb5:	89 c8                	mov    eax,ecx
c0008bb7:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0008bbc:	81 7c 24 14 fe ff 00 00 	cmp    DWORD PTR [esp+0x14],0xfffe
c0008bc4:	7e 16                	jle    c0008bdc <pbuf_realloc+0xf4>
c0008bc6:	83 ec 08             	sub    esp,0x8
c0008bc9:	68 9b 07 03 c0       	push   0xc003079b
c0008bce:	68 46 03 03 c0       	push   0xc0030346
c0008bd3:	e8 74 72 01 00       	call   c001fe4c <CPrintf>
c0008bd8:	83 c4 10             	add    esp,0x10
c0008bdb:	90                   	nop
c0008bdc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008be0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008be3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008be7:	01 d0                	add    eax,edx
c0008be9:	89 c2                	mov    edx,eax
c0008beb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bef:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008bf3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bf7:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bf9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008bfd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008c02:	75 18                	jne    c0008c1c <pbuf_realloc+0x134>
c0008c04:	83 ec 08             	sub    esp,0x8
c0008c07:	68 ac 07 03 c0       	push   0xc00307ac
c0008c0c:	68 46 03 03 c0       	push   0xc0030346
c0008c11:	e8 36 72 01 00       	call   c001fe4c <CPrintf>
c0008c16:	83 c4 10             	add    esp,0x10
c0008c19:	8d 76 00             	lea    esi,[esi+0x0]
c0008c1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c20:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c24:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0008c29:	0f b7 c0             	movzx  eax,ax
c0008c2c:	39 c2                	cmp    edx,eax
c0008c2e:	0f 87 70 ff ff ff    	ja     c0008ba4 <pbuf_realloc+0xbc>
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008c3b:	0f b6 c0             	movzx  eax,al
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	75 5e                	jne    c0008ca0 <pbuf_realloc+0x1b8>
c0008c42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c46:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c4a:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0008c4f:	0f b7 c0             	movzx  eax,ax
c0008c52:	39 c2                	cmp    edx,eax
c0008c54:	74 4a                	je     c0008ca0 <pbuf_realloc+0x1b8>
c0008c56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c5d:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0008c61:	89 c2                	mov    edx,eax
c0008c63:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0008c68:	01 d0                	add    eax,edx
c0008c6a:	0f b7 c0             	movzx  eax,ax
c0008c6d:	83 ec 08             	sub    esp,0x8
c0008c70:	50                   	push   eax
c0008c71:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008c75:	e8 d6 e6 ff ff       	call   c0007350 <mem_trim>
c0008c7a:	83 c4 10             	add    esp,0x10
c0008c7d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008c81:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008c86:	75 18                	jne    c0008ca0 <pbuf_realloc+0x1b8>
c0008c88:	83 ec 08             	sub    esp,0x8
c0008c8b:	68 c4 07 03 c0       	push   0xc00307c4
c0008c90:	68 46 03 03 c0       	push   0xc0030346
c0008c95:	e8 b2 71 01 00       	call   c001fe4c <CPrintf>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0008ca0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ca4:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0008ca9:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0008cad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008cb1:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008cb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008cb9:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008cbd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008cc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0008cc3:	85 c0                	test   eax,eax
c0008cc5:	74 15                	je     c0008cdc <pbuf_realloc+0x1f4>
c0008cc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ccb:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ccd:	83 ec 0c             	sub    esp,0xc
c0008cd0:	50                   	push   eax
c0008cd1:	e8 3e f8 ff ff       	call   c0008514 <pbuf_free>
c0008cd6:	83 c4 10             	add    esp,0x10
c0008cd9:	8d 76 00             	lea    esi,[esi+0x0]
c0008cdc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ce0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008ce6:	eb 04                	jmp    c0008cec <pbuf_realloc+0x204>
c0008ce8:	90                   	nop
c0008ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0008cec:	83 c4 2c             	add    esp,0x2c
c0008cef:	c3                   	ret    

c0008cf0 <pbuf_clen>:
c0008cf0:	83 ec 10             	sub    esp,0x10
c0008cf3:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008cf8:	eb 1a                	jmp    c0008d14 <pbuf_clen+0x24>
c0008cfa:	66 90                	xchg   ax,ax
c0008cfc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008d00:	83 c0 01             	add    eax,0x1
c0008d03:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008d07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008d0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d0d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008d11:	8d 76 00             	lea    esi,[esi+0x0]
c0008d14:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008d19:	75 e1                	jne    c0008cfc <pbuf_clen+0xc>
c0008d1b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008d1f:	83 c4 10             	add    esp,0x10
c0008d22:	c3                   	ret    
c0008d23:	90                   	nop

c0008d24 <pbuf_ref>:
c0008d24:	83 ec 0c             	sub    esp,0xc
c0008d27:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0008d2c:	74 22                	je     c0008d50 <pbuf_ref+0x2c>
c0008d2e:	e8 09 71 01 00       	call   c001fe3c <CLockScheduler>
c0008d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d37:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008d3b:	83 c0 01             	add    eax,0x1
c0008d3e:	89 c2                	mov    edx,eax
c0008d40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d44:	66 89 50 0e          	mov    WORD PTR [eax+0xe],dx
c0008d48:	e8 d3 70 01 00       	call   c001fe20 <CUnlockScheduler>
c0008d4d:	8d 76 00             	lea    esi,[esi+0x0]
c0008d50:	90                   	nop
c0008d51:	83 c4 0c             	add    esp,0xc
c0008d54:	c3                   	ret    
c0008d55:	8d 76 00             	lea    esi,[esi+0x0]

c0008d58 <pbuf_cat>:
c0008d58:	83 ec 1c             	sub    esp,0x1c
c0008d5b:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008d60:	74 0a                	je     c0008d6c <pbuf_cat+0x14>
c0008d62:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008d67:	75 1f                	jne    c0008d88 <pbuf_cat+0x30>
c0008d69:	8d 76 00             	lea    esi,[esi+0x0]
c0008d6c:	83 ec 08             	sub    esp,0x8
c0008d6f:	68 9c 05 03 c0       	push   0xc003059c
c0008d74:	68 46 03 03 c0       	push   0xc0030346
c0008d79:	e8 ce 70 01 00       	call   c001fe4c <CPrintf>
c0008d7e:	83 c4 10             	add    esp,0x10
c0008d81:	e9 ae 00 00 00       	jmp    c0008e34 <pbuf_cat+0xdc>
c0008d86:	66 90                	xchg   ax,ax
c0008d88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008d90:	eb 26                	jmp    c0008db8 <pbuf_cat+0x60>
c0008d92:	66 90                	xchg   ax,ax
c0008d94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008d9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008d9f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008da2:	01 d0                	add    eax,edx
c0008da4:	89 c2                	mov    edx,eax
c0008da6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008daa:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008dae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008db2:	8b 00                	mov    eax,DWORD PTR [eax]
c0008db4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008db8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008dbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0008dbe:	85 c0                	test   eax,eax
c0008dc0:	75 d2                	jne    c0008d94 <pbuf_cat+0x3c>
c0008dc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008dc6:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008dc9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008dcd:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008dd1:	0f b7 d2             	movzx  edx,dx
c0008dd4:	0f b7 c0             	movzx  eax,ax
c0008dd7:	39 c2                	cmp    edx,eax
c0008dd9:	74 15                	je     c0008df0 <pbuf_cat+0x98>
c0008ddb:	83 ec 08             	sub    esp,0x8
c0008dde:	68 d4 05 03 c0       	push   0xc00305d4
c0008de3:	68 46 03 03 c0       	push   0xc0030346
c0008de8:	e8 5f 70 01 00       	call   c001fe4c <CPrintf>
c0008ded:	83 c4 10             	add    esp,0x10
c0008df0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008df4:	8b 00                	mov    eax,DWORD PTR [eax]
c0008df6:	85 c0                	test   eax,eax
c0008df8:	74 16                	je     c0008e10 <pbuf_cat+0xb8>
c0008dfa:	83 ec 08             	sub    esp,0x8
c0008dfd:	68 e0 07 03 c0       	push   0xc00307e0
c0008e02:	68 46 03 03 c0       	push   0xc0030346
c0008e07:	e8 40 70 01 00       	call   c001fe4c <CPrintf>
c0008e0c:	83 c4 10             	add    esp,0x10
c0008e0f:	90                   	nop
c0008e10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008e14:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008e17:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e1b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e1e:	01 d0                	add    eax,edx
c0008e20:	89 c2                	mov    edx,eax
c0008e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008e26:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008e2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008e2e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e32:	89 10                	mov    DWORD PTR [eax],edx
c0008e34:	83 c4 1c             	add    esp,0x1c
c0008e37:	c3                   	ret    

c0008e38 <pbuf_chain>:
c0008e38:	83 ec 0c             	sub    esp,0xc
c0008e3b:	83 ec 08             	sub    esp,0x8
c0008e3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e46:	e8 0d ff ff ff       	call   c0008d58 <pbuf_cat>
c0008e4b:	83 c4 10             	add    esp,0x10
c0008e4e:	83 ec 0c             	sub    esp,0xc
c0008e51:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008e55:	e8 ca fe ff ff       	call   c0008d24 <pbuf_ref>
c0008e5a:	83 c4 10             	add    esp,0x10
c0008e5d:	90                   	nop
c0008e5e:	83 c4 0c             	add    esp,0xc
c0008e61:	c3                   	ret    
c0008e62:	66 90                	xchg   ax,ax

c0008e64 <pbuf_dechain>:
c0008e64:	83 ec 1c             	sub    esp,0x1c
c0008e67:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0008e6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e70:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e76:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008e7b:	0f 84 8b 00 00 00    	je     c0008f0c <pbuf_dechain+0xa8>
c0008e81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008e85:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e88:	0f b7 d0             	movzx  edx,ax
c0008e8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e8f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e92:	0f b7 c8             	movzx  ecx,ax
c0008e95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e99:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e9d:	0f b7 c0             	movzx  eax,ax
c0008ea0:	29 c1                	sub    ecx,eax
c0008ea2:	89 c8                	mov    eax,ecx
c0008ea4:	39 c2                	cmp    edx,eax
c0008ea6:	74 18                	je     c0008ec0 <pbuf_dechain+0x5c>
c0008ea8:	83 ec 08             	sub    esp,0x8
c0008eab:	68 04 06 03 c0       	push   0xc0030604
c0008eb0:	68 46 03 03 c0       	push   0xc0030346
c0008eb5:	e8 92 6f 01 00       	call   c001fe4c <CPrintf>
c0008eba:	83 c4 10             	add    esp,0x10
c0008ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0008ec0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ec4:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008ec7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ecb:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008ecf:	89 d1                	mov    ecx,edx
c0008ed1:	29 c1                	sub    ecx,eax
c0008ed3:	89 c8                	mov    eax,ecx
c0008ed5:	89 c2                	mov    edx,eax
c0008ed7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008edb:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ee3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008ee9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008eed:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008ef1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ef5:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008ef9:	83 ec 0c             	sub    esp,0xc
c0008efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f00:	e8 0f f6 ff ff       	call   c0008514 <pbuf_free>
c0008f05:	83 c4 10             	add    esp,0x10
c0008f08:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008f0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f10:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008f13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f17:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008f1b:	0f b7 d2             	movzx  edx,dx
c0008f1e:	0f b7 c0             	movzx  eax,ax
c0008f21:	39 c2                	cmp    edx,eax
c0008f23:	74 17                	je     c0008f3c <pbuf_dechain+0xd8>
c0008f25:	83 ec 08             	sub    esp,0x8
c0008f28:	68 f0 07 03 c0       	push   0xc00307f0
c0008f2d:	68 46 03 03 c0       	push   0xc0030346
c0008f32:	e8 15 6f 01 00       	call   c001fe4c <CPrintf>
c0008f37:	83 c4 10             	add    esp,0x10
c0008f3a:	66 90                	xchg   ax,ax
c0008f3c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0008f41:	85 c0                	test   eax,eax
c0008f43:	75 07                	jne    c0008f4c <pbuf_dechain+0xe8>
c0008f45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008f49:	eb 09                	jmp    c0008f54 <pbuf_dechain+0xf0>
c0008f4b:	90                   	nop
c0008f4c:	b8 00 00 00 00       	mov    eax,0x0
c0008f51:	8d 76 00             	lea    esi,[esi+0x0]
c0008f54:	83 c4 1c             	add    esp,0x1c
c0008f57:	c3                   	ret    

c0008f58 <pbuf_copy>:
c0008f58:	53                   	push   ebx
c0008f59:	83 ec 18             	sub    esp,0x18
c0008f5c:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0008f63:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0008f6a:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008f6f:	74 1f                	je     c0008f90 <pbuf_copy+0x38>
c0008f71:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008f76:	74 18                	je     c0008f90 <pbuf_copy+0x38>
c0008f78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f7c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008f7f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f83:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008f86:	0f b7 d2             	movzx  edx,dx
c0008f89:	0f b7 c0             	movzx  eax,ax
c0008f8c:	39 c2                	cmp    edx,eax
c0008f8e:	73 1c                	jae    c0008fac <pbuf_copy+0x54>
c0008f90:	83 ec 08             	sub    esp,0x8
c0008f93:	68 28 06 03 c0       	push   0xc0030628
c0008f98:	68 46 03 03 c0       	push   0xc0030346
c0008f9d:	e8 aa 6e 01 00       	call   c001fe4c <CPrintf>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	b0 f2                	mov    al,0xf2
c0008fa7:	e9 0c 02 00 00       	jmp    c00091b8 <pbuf_copy+0x260>
c0008fac:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008fb1:	75 15                	jne    c0008fc8 <pbuf_copy+0x70>
c0008fb3:	83 ec 08             	sub    esp,0x8
c0008fb6:	68 05 08 03 c0       	push   0xc0030805
c0008fbb:	68 46 03 03 c0       	push   0xc0030346
c0008fc0:	e8 87 6e 01 00       	call   c001fe4c <CPrintf>
c0008fc5:	83 c4 10             	add    esp,0x10
c0008fc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fcc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008fd0:	0f b7 d0             	movzx  edx,ax
c0008fd3:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0008fd8:	89 d1                	mov    ecx,edx
c0008fda:	29 c1                	sub    ecx,eax
c0008fdc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008fe0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008fe4:	0f b7 d0             	movzx  edx,ax
c0008fe7:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0008fec:	29 c2                	sub    edx,eax
c0008fee:	89 d0                	mov    eax,edx
c0008ff0:	39 c1                	cmp    ecx,eax
c0008ff2:	7c 1c                	jl     c0009010 <pbuf_copy+0xb8>
c0008ff4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008ff8:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008ffc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009000:	89 d3                	mov    ebx,edx
c0009002:	29 c3                	sub    ebx,eax
c0009004:	89 d8                	mov    eax,ebx
c0009006:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000900b:	eb 1b                	jmp    c0009028 <pbuf_copy+0xd0>
c000900d:	8d 76 00             	lea    esi,[esi+0x0]
c0009010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009014:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0009018:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000901d:	89 d3                	mov    ebx,edx
c000901f:	29 c3                	sub    ebx,eax
c0009021:	89 d8                	mov    eax,ebx
c0009023:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0009028:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000902d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009031:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0009034:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009039:	01 d1                	add    ecx,edx
c000903b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000903f:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0009042:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009047:	01 da                	add    edx,ebx
c0009049:	83 ec 04             	sub    esp,0x4
c000904c:	50                   	push   eax
c000904d:	51                   	push   ecx
c000904e:	52                   	push   edx
c000904f:	e8 26 73 ff ff       	call   c000037a <memcpy>
c0009054:	83 c4 10             	add    esp,0x10
c0009057:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c000905c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0009061:	01 d0                	add    eax,edx
c0009063:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0009068:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000906c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0009071:	01 d0                	add    eax,edx
c0009073:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009078:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000907c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009080:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009085:	0f b7 c0             	movzx  eax,ax
c0009088:	39 c2                	cmp    edx,eax
c000908a:	76 18                	jbe    c00090a4 <pbuf_copy+0x14c>
c000908c:	83 ec 08             	sub    esp,0x8
c000908f:	68 12 08 03 c0       	push   0xc0030812
c0009094:	68 46 03 03 c0       	push   0xc0030346
c0009099:	e8 ae 6d 01 00       	call   c001fe4c <CPrintf>
c000909e:	83 c4 10             	add    esp,0x10
c00090a1:	8d 76 00             	lea    esi,[esi+0x0]
c00090a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00090a8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00090ac:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c00090b1:	0f b7 c0             	movzx  eax,ax
c00090b4:	39 c2                	cmp    edx,eax
c00090b6:	75 14                	jne    c00090cc <pbuf_copy+0x174>
c00090b8:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c00090bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00090c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00090c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090c9:	8d 76 00             	lea    esi,[esi+0x0]
c00090cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00090d0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00090d4:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00090d9:	0f b7 c0             	movzx  eax,ax
c00090dc:	39 c2                	cmp    edx,eax
c00090de:	76 18                	jbe    c00090f8 <pbuf_copy+0x1a0>
c00090e0:	83 ec 08             	sub    esp,0x8
c00090e3:	68 29 08 03 c0       	push   0xc0030829
c00090e8:	68 46 03 03 c0       	push   0xc0030346
c00090ed:	e8 5a 6d 01 00       	call   c001fe4c <CPrintf>
c00090f2:	83 c4 10             	add    esp,0x10
c00090f5:	8d 76 00             	lea    esi,[esi+0x0]
c00090f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00090fc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009100:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009105:	0f b7 c0             	movzx  eax,ax
c0009108:	39 c2                	cmp    edx,eax
c000910a:	72 14                	jb     c0009120 <pbuf_copy+0x1c8>
c000910c:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0009113:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009117:	8b 00                	mov    eax,DWORD PTR [eax]
c0009119:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000911d:	8d 76 00             	lea    esi,[esi+0x0]
c0009120:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0009125:	74 3d                	je     c0009164 <pbuf_copy+0x20c>
c0009127:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000912b:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000912f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009133:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009136:	0f b7 d2             	movzx  edx,dx
c0009139:	0f b7 c0             	movzx  eax,ax
c000913c:	39 c2                	cmp    edx,eax
c000913e:	75 24                	jne    c0009164 <pbuf_copy+0x20c>
c0009140:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009144:	8b 00                	mov    eax,DWORD PTR [eax]
c0009146:	85 c0                	test   eax,eax
c0009148:	74 1a                	je     c0009164 <pbuf_copy+0x20c>
c000914a:	83 ec 08             	sub    esp,0x8
c000914d:	68 58 06 03 c0       	push   0xc0030658
c0009152:	68 46 03 03 c0       	push   0xc0030346
c0009157:	e8 f0 6c 01 00       	call   c001fe4c <CPrintf>
c000915c:	83 c4 10             	add    esp,0x10
c000915f:	b0 fa                	mov    al,0xfa
c0009161:	eb 55                	jmp    c00091b8 <pbuf_copy+0x260>
c0009163:	90                   	nop
c0009164:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0009169:	74 3d                	je     c00091a8 <pbuf_copy+0x250>
c000916b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000916f:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0009173:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009177:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000917a:	0f b7 d2             	movzx  edx,dx
c000917d:	0f b7 c0             	movzx  eax,ax
c0009180:	39 c2                	cmp    edx,eax
c0009182:	75 24                	jne    c00091a8 <pbuf_copy+0x250>
c0009184:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009188:	8b 00                	mov    eax,DWORD PTR [eax]
c000918a:	85 c0                	test   eax,eax
c000918c:	74 1a                	je     c00091a8 <pbuf_copy+0x250>
c000918e:	83 ec 08             	sub    esp,0x8
c0009191:	68 58 06 03 c0       	push   0xc0030658
c0009196:	68 46 03 03 c0       	push   0xc0030346
c000919b:	e8 ac 6c 01 00       	call   c001fe4c <CPrintf>
c00091a0:	83 c4 10             	add    esp,0x10
c00091a3:	b0 fa                	mov    al,0xfa
c00091a5:	eb 11                	jmp    c00091b8 <pbuf_copy+0x260>
c00091a7:	90                   	nop
c00091a8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00091ad:	0f 85 f9 fd ff ff    	jne    c0008fac <pbuf_copy+0x54>
c00091b3:	b0 00                	mov    al,0x0
c00091b5:	8d 76 00             	lea    esi,[esi+0x0]
c00091b8:	83 c4 18             	add    esp,0x18
c00091bb:	5b                   	pop    ebx
c00091bc:	c3                   	ret    
c00091bd:	8d 76 00             	lea    esi,[esi+0x0]

c00091c0 <pbuf_copy_partial>:
c00091c0:	53                   	push   ebx
c00091c1:	83 ec 28             	sub    esp,0x28
c00091c4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00091c8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00091cc:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c00091d1:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00091d6:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00091dd:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00091e2:	75 20                	jne    c0009204 <pbuf_copy_partial+0x44>
c00091e4:	83 ec 08             	sub    esp,0x8
c00091e7:	68 84 06 03 c0       	push   0xc0030684
c00091ec:	68 46 03 03 c0       	push   0xc0030346
c00091f1:	e8 56 6c 01 00       	call   c001fe4c <CPrintf>
c00091f6:	83 c4 10             	add    esp,0x10
c00091f9:	b8 00 00 00 00       	mov    eax,0x0
c00091fe:	e9 59 01 00 00       	jmp    c000935c <pbuf_copy_partial+0x19c>
c0009203:	90                   	nop
c0009204:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009209:	75 21                	jne    c000922c <pbuf_copy_partial+0x6c>
c000920b:	83 ec 08             	sub    esp,0x8
c000920e:	68 a4 06 03 c0       	push   0xc00306a4
c0009213:	68 46 03 03 c0       	push   0xc0030346
c0009218:	e8 2f 6c 01 00       	call   c001fe4c <CPrintf>
c000921d:	83 c4 10             	add    esp,0x10
c0009220:	b8 00 00 00 00       	mov    eax,0x0
c0009225:	e9 32 01 00 00       	jmp    c000935c <pbuf_copy_partial+0x19c>
c000922a:	66 90                	xchg   ax,ax
c000922c:	66 c7 44 24 1a 00 00 	mov    WORD PTR [esp+0x1a],0x0
c0009233:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0009238:	74 0a                	je     c0009244 <pbuf_copy_partial+0x84>
c000923a:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000923f:	75 0f                	jne    c0009250 <pbuf_copy_partial+0x90>
c0009241:	8d 76 00             	lea    esi,[esi+0x0]
c0009244:	b8 00 00 00 00       	mov    eax,0x0
c0009249:	e9 0e 01 00 00       	jmp    c000935c <pbuf_copy_partial+0x19c>
c000924e:	66 90                	xchg   ax,ax
c0009250:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009254:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009258:	e9 e3 00 00 00       	jmp    c0009340 <pbuf_copy_partial+0x180>
c000925d:	8d 76 00             	lea    esi,[esi+0x0]
c0009260:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0009265:	85 c0                	test   eax,eax
c0009267:	74 33                	je     c000929c <pbuf_copy_partial+0xdc>
c0009269:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000926d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009271:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0009276:	0f b7 c0             	movzx  eax,ax
c0009279:	39 c2                	cmp    edx,eax
c000927b:	72 1f                	jb     c000929c <pbuf_copy_partial+0xdc>
c000927d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009281:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009285:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009289:	89 d3                	mov    ebx,edx
c000928b:	29 c3                	sub    ebx,eax
c000928d:	89 d8                	mov    eax,ebx
c000928f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0009294:	e9 9b 00 00 00       	jmp    c0009334 <pbuf_copy_partial+0x174>
c0009299:	8d 76 00             	lea    esi,[esi+0x0]
c000929c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092a0:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00092a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00092a8:	89 d1                	mov    ecx,edx
c00092aa:	29 c1                	sub    ecx,eax
c00092ac:	89 c8                	mov    eax,ecx
c00092ae:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00092b3:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c00092b8:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00092bd:	39 c2                	cmp    edx,eax
c00092bf:	76 0b                	jbe    c00092cc <pbuf_copy_partial+0x10c>
c00092c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00092c5:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00092ca:	66 90                	xchg   ax,ax
c00092cc:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00092d1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00092d5:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00092d8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00092dd:	01 d1                	add    ecx,edx
c00092df:	0f b7 5c 24 1a       	movzx  ebx,WORD PTR [esp+0x1a]
c00092e4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00092e8:	01 da                	add    edx,ebx
c00092ea:	83 ec 04             	sub    esp,0x4
c00092ed:	50                   	push   eax
c00092ee:	51                   	push   ecx
c00092ef:	52                   	push   edx
c00092f0:	e8 85 70 ff ff       	call   c000037a <memcpy>
c00092f5:	83 c4 10             	add    esp,0x10
c00092f8:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00092fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009301:	01 d0                	add    eax,edx
c0009303:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009308:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000930d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009311:	01 d0                	add    eax,edx
c0009313:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0009318:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000931c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009320:	89 d3                	mov    ebx,edx
c0009322:	29 c3                	sub    ebx,eax
c0009324:	89 d8                	mov    eax,ebx
c0009326:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000932b:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0009332:	66 90                	xchg   ax,ax
c0009334:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009338:	8b 00                	mov    eax,DWORD PTR [eax]
c000933a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000933e:	66 90                	xchg   ax,ax
c0009340:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009345:	85 c0                	test   eax,eax
c0009347:	74 0b                	je     c0009354 <pbuf_copy_partial+0x194>
c0009349:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000934e:	0f 85 0c ff ff ff    	jne    c0009260 <pbuf_copy_partial+0xa0>
c0009354:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0009359:	8d 76 00             	lea    esi,[esi+0x0]
c000935c:	83 c4 28             	add    esp,0x28
c000935f:	5b                   	pop    ebx
c0009360:	c3                   	ret    
c0009361:	8d 76 00             	lea    esi,[esi+0x0]

c0009364 <pbuf_take>:
c0009364:	83 ec 2c             	sub    esp,0x2c
c0009367:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000936b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009370:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009374:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0009379:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0009380:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0009385:	75 1d                	jne    c00093a4 <pbuf_take+0x40>
c0009387:	83 ec 08             	sub    esp,0x8
c000938a:	68 44 08 03 c0       	push   0xc0030844
c000938f:	68 46 03 03 c0       	push   0xc0030346
c0009394:	e8 b3 6a 01 00       	call   c001fe4c <CPrintf>
c0009399:	83 c4 10             	add    esp,0x10
c000939c:	b0 00                	mov    al,0x0
c000939e:	e9 3d 01 00 00       	jmp    c00094e0 <pbuf_take+0x17c>
c00093a3:	90                   	nop
c00093a4:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00093a9:	75 1d                	jne    c00093c8 <pbuf_take+0x64>
c00093ab:	83 ec 08             	sub    esp,0x8
c00093ae:	68 5b 08 03 c0       	push   0xc003085b
c00093b3:	68 46 03 03 c0       	push   0xc0030346
c00093b8:	e8 8f 6a 01 00       	call   c001fe4c <CPrintf>
c00093bd:	83 c4 10             	add    esp,0x10
c00093c0:	b0 00                	mov    al,0x0
c00093c2:	e9 19 01 00 00       	jmp    c00094e0 <pbuf_take+0x17c>
c00093c7:	90                   	nop
c00093c8:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00093cd:	74 1d                	je     c00093ec <pbuf_take+0x88>
c00093cf:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00093d4:	74 16                	je     c00093ec <pbuf_take+0x88>
c00093d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00093dd:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00093e2:	0f b7 c0             	movzx  eax,ax
c00093e5:	39 c2                	cmp    edx,eax
c00093e7:	76 0b                	jbe    c00093f4 <pbuf_take+0x90>
c00093e9:	8d 76 00             	lea    esi,[esi+0x0]
c00093ec:	b0 f2                	mov    al,0xf2
c00093ee:	e9 ed 00 00 00       	jmp    c00094e0 <pbuf_take+0x17c>
c00093f3:	90                   	nop
c00093f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093f8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00093fc:	e9 9f 00 00 00       	jmp    c00094a0 <pbuf_take+0x13c>
c0009401:	8d 76 00             	lea    esi,[esi+0x0]
c0009404:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009409:	75 15                	jne    c0009420 <pbuf_take+0xbc>
c000940b:	83 ec 08             	sub    esp,0x8
c000940e:	68 76 08 03 c0       	push   0xc0030876
c0009413:	68 46 03 03 c0       	push   0xc0030346
c0009418:	e8 2f 6a 01 00       	call   c001fe4c <CPrintf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009424:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0009429:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000942d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009431:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0009436:	0f b7 c0             	movzx  eax,ax
c0009439:	39 c2                	cmp    edx,eax
c000943b:	76 0f                	jbe    c000944c <pbuf_take+0xe8>
c000943d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009441:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009445:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000944a:	66 90                	xchg   ax,ax
c000944c:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0009451:	0f b7 4c 24 16       	movzx  ecx,WORD PTR [esp+0x16]
c0009456:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000945a:	01 c1                	add    ecx,eax
c000945c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009460:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009463:	83 ec 04             	sub    esp,0x4
c0009466:	52                   	push   edx
c0009467:	51                   	push   ecx
c0009468:	50                   	push   eax
c0009469:	e8 0c 6f ff ff       	call   c000037a <memcpy>
c000946e:	83 c4 10             	add    esp,0x10
c0009471:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009475:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000947a:	89 d1                	mov    ecx,edx
c000947c:	29 c1                	sub    ecx,eax
c000947e:	89 c8                	mov    eax,ecx
c0009480:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0009485:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000948a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000948f:	01 d0                	add    eax,edx
c0009491:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009496:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000949a:	8b 00                	mov    eax,DWORD PTR [eax]
c000949c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00094a0:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00094a5:	85 c0                	test   eax,eax
c00094a7:	0f 85 57 ff ff ff    	jne    c0009404 <pbuf_take+0xa0>
c00094ad:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00094b2:	85 c0                	test   eax,eax
c00094b4:	75 0e                	jne    c00094c4 <pbuf_take+0x160>
c00094b6:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c00094bb:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00094c0:	39 c2                	cmp    edx,eax
c00094c2:	74 18                	je     c00094dc <pbuf_take+0x178>
c00094c4:	83 ec 08             	sub    esp,0x8
c00094c7:	68 8e 08 03 c0       	push   0xc003088e
c00094cc:	68 46 03 03 c0       	push   0xc0030346
c00094d1:	e8 76 69 01 00       	call   c001fe4c <CPrintf>
c00094d6:	83 c4 10             	add    esp,0x10
c00094d9:	8d 76 00             	lea    esi,[esi+0x0]
c00094dc:	b0 00                	mov    al,0x0
c00094de:	66 90                	xchg   ax,ax
c00094e0:	83 c4 2c             	add    esp,0x2c
c00094e3:	c3                   	ret    

c00094e4 <pbuf_coalesce>:
c00094e4:	83 ec 1c             	sub    esp,0x1c
c00094e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00094ed:	85 c0                	test   eax,eax
c00094ef:	75 07                	jne    c00094f8 <pbuf_coalesce+0x14>
c00094f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094f5:	eb 7d                	jmp    c0009574 <pbuf_coalesce+0x90>
c00094f7:	90                   	nop
c00094f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094fc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00094ff:	0f b7 c0             	movzx  eax,ax
c0009502:	83 ec 04             	sub    esp,0x4
c0009505:	6a 00                	push   0x0
c0009507:	50                   	push   eax
c0009508:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000950c:	e8 df f1 ff ff       	call   c00086f0 <pbuf_alloc>
c0009511:	83 c4 10             	add    esp,0x10
c0009514:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009518:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000951d:	75 09                	jne    c0009528 <pbuf_coalesce+0x44>
c000951f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009523:	eb 4f                	jmp    c0009574 <pbuf_coalesce+0x90>
c0009525:	8d 76 00             	lea    esi,[esi+0x0]
c0009528:	83 ec 08             	sub    esp,0x8
c000952b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000952f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009533:	e8 20 fa ff ff       	call   c0008f58 <pbuf_copy>
c0009538:	83 c4 10             	add    esp,0x10
c000953b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000953f:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c0009544:	85 c0                	test   eax,eax
c0009546:	74 18                	je     c0009560 <pbuf_coalesce+0x7c>
c0009548:	83 ec 08             	sub    esp,0x8
c000954b:	68 a4 08 03 c0       	push   0xc00308a4
c0009550:	68 46 03 03 c0       	push   0xc0030346
c0009555:	e8 f2 68 01 00       	call   c001fe4c <CPrintf>
c000955a:	83 c4 10             	add    esp,0x10
c000955d:	8d 76 00             	lea    esi,[esi+0x0]
c0009560:	83 ec 0c             	sub    esp,0xc
c0009563:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009567:	e8 a8 ef ff ff       	call   c0008514 <pbuf_free>
c000956c:	83 c4 10             	add    esp,0x10
c000956f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009573:	90                   	nop
c0009574:	83 c4 1c             	add    esp,0x1c
c0009577:	c3                   	ret    

c0009578 <pbuf_get_at>:
c0009578:	83 ec 14             	sub    esp,0x14
c000957b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000957f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0009583:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009586:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000958b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000958f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009593:	eb 27                	jmp    c00095bc <pbuf_get_at+0x44>
c0009595:	8d 76 00             	lea    esi,[esi+0x0]
c0009598:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000959c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00095a0:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c00095a5:	89 d1                	mov    ecx,edx
c00095a7:	29 c1                	sub    ecx,eax
c00095a9:	89 c8                	mov    eax,ecx
c00095ab:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00095b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00095b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00095ba:	66 90                	xchg   ax,ax
c00095bc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00095c1:	74 15                	je     c00095d8 <pbuf_get_at+0x60>
c00095c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095c7:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00095cb:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c00095d0:	0f b7 c0             	movzx  eax,ax
c00095d3:	39 c2                	cmp    edx,eax
c00095d5:	73 c1                	jae    c0009598 <pbuf_get_at+0x20>
c00095d7:	90                   	nop
c00095d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00095dd:	74 29                	je     c0009608 <pbuf_get_at+0x90>
c00095df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095e3:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00095e7:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c00095ec:	0f b7 c0             	movzx  eax,ax
c00095ef:	39 c2                	cmp    edx,eax
c00095f1:	73 15                	jae    c0009608 <pbuf_get_at+0x90>
c00095f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095f7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00095fa:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00095ff:	01 d0                	add    eax,edx
c0009601:	8a 00                	mov    al,BYTE PTR [eax]
c0009603:	eb 07                	jmp    c000960c <pbuf_get_at+0x94>
c0009605:	8d 76 00             	lea    esi,[esi+0x0]
c0009608:	b0 00                	mov    al,0x0
c000960a:	66 90                	xchg   ax,ax
c000960c:	83 c4 14             	add    esp,0x14
c000960f:	c3                   	ret    

c0009610 <pbuf_memcmp>:
c0009610:	83 ec 18             	sub    esp,0x18
c0009613:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009617:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000961b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0009620:	66 89 04 24          	mov    WORD PTR [esp],ax
c0009624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009628:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000962d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009631:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009635:	eb 25                	jmp    c000965c <pbuf_memcmp+0x4c>
c0009637:	90                   	nop
c0009638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000963c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009640:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009645:	89 d1                	mov    ecx,edx
c0009647:	29 c1                	sub    ecx,eax
c0009649:	89 c8                	mov    eax,ecx
c000964b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009654:	8b 00                	mov    eax,DWORD PTR [eax]
c0009656:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000965a:	66 90                	xchg   ax,ax
c000965c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0009661:	74 15                	je     c0009678 <pbuf_memcmp+0x68>
c0009663:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009667:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000966b:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009670:	0f b7 c0             	movzx  eax,ax
c0009673:	39 c2                	cmp    edx,eax
c0009675:	73 c1                	jae    c0009638 <pbuf_memcmp+0x28>
c0009677:	90                   	nop
c0009678:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000967d:	0f 84 8d 00 00 00    	je     c0009710 <pbuf_memcmp+0x100>
c0009683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009687:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000968b:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009690:	0f b7 c0             	movzx  eax,ax
c0009693:	39 c2                	cmp    edx,eax
c0009695:	73 79                	jae    c0009710 <pbuf_memcmp+0x100>
c0009697:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c000969e:	eb 5c                	jmp    c00096fc <pbuf_memcmp+0xec>
c00096a0:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00096a5:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00096aa:	01 d0                	add    eax,edx
c00096ac:	0f b7 c0             	movzx  eax,ax
c00096af:	50                   	push   eax
c00096b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b4:	e8 bf fe ff ff       	call   c0009578 <pbuf_get_at>
c00096b9:	83 c4 08             	add    esp,0x8
c00096bc:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00096c0:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c00096c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00096c9:	01 d0                	add    eax,edx
c00096cb:	8a 00                	mov    al,BYTE PTR [eax]
c00096cd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00096d1:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
c00096d6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00096db:	39 c2                	cmp    edx,eax
c00096dd:	74 0d                	je     c00096ec <pbuf_memcmp+0xdc>
c00096df:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00096e4:	83 c0 01             	add    eax,0x1
c00096e7:	eb 2f                	jmp    c0009718 <pbuf_memcmp+0x108>
c00096e9:	8d 76 00             	lea    esi,[esi+0x0]
c00096ec:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00096f1:	83 c0 01             	add    eax,0x1
c00096f4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00096f9:	8d 76 00             	lea    esi,[esi+0x0]
c00096fc:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009701:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0009705:	39 c2                	cmp    edx,eax
c0009707:	72 97                	jb     c00096a0 <pbuf_memcmp+0x90>
c0009709:	b8 00 00 00 00       	mov    eax,0x0
c000970e:	eb 08                	jmp    c0009718 <pbuf_memcmp+0x108>
c0009710:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009715:	8d 76 00             	lea    esi,[esi+0x0]
c0009718:	83 c4 18             	add    esp,0x18
c000971b:	c3                   	ret    

c000971c <pbuf_memfind>:
c000971c:	83 ec 18             	sub    esp,0x18
c000971f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009723:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009727:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000972c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0009730:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009734:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0009737:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000973b:	89 d1                	mov    ecx,edx
c000973d:	29 c1                	sub    ecx,eax
c000973f:	89 c8                	mov    eax,ecx
c0009741:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0009746:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000974a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000974d:	0f b7 c0             	movzx  eax,ax
c0009750:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c0009755:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c0009759:	01 ca                	add    edx,ecx
c000975b:	39 d0                	cmp    eax,edx
c000975d:	7c 65                	jl     c00097c4 <pbuf_memfind+0xa8>
c000975f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009762:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009767:	eb 4b                	jmp    c00097b4 <pbuf_memfind+0x98>
c0009769:	8d 76 00             	lea    esi,[esi+0x0]
c000976c:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0009771:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0009776:	52                   	push   edx
c0009777:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000977b:	50                   	push   eax
c000977c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009780:	e8 8b fe ff ff       	call   c0009610 <pbuf_memcmp>
c0009785:	83 c4 10             	add    esp,0x10
c0009788:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000978d:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0009792:	85 c0                	test   eax,eax
c0009794:	75 0a                	jne    c00097a0 <pbuf_memfind+0x84>
c0009796:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000979b:	eb 2f                	jmp    c00097cc <pbuf_memfind+0xb0>
c000979d:	8d 76 00             	lea    esi,[esi+0x0]
c00097a0:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00097a5:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00097aa:	01 d0                	add    eax,edx
c00097ac:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00097b1:	8d 76 00             	lea    esi,[esi+0x0]
c00097b4:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c00097b9:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00097be:	39 c2                	cmp    edx,eax
c00097c0:	76 aa                	jbe    c000976c <pbuf_memfind+0x50>
c00097c2:	66 90                	xchg   ax,ax
c00097c4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00097c9:	8d 76 00             	lea    esi,[esi+0x0]
c00097cc:	83 c4 18             	add    esp,0x18
c00097cf:	c3                   	ret    

c00097d0 <pbuf_strstr>:
c00097d0:	83 ec 1c             	sub    esp,0x1c
c00097d3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00097d8:	74 1e                	je     c00097f8 <pbuf_strstr+0x28>
c00097da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00097de:	8a 00                	mov    al,BYTE PTR [eax]
c00097e0:	0f be c0             	movsx  eax,al
c00097e3:	85 c0                	test   eax,eax
c00097e5:	74 11                	je     c00097f8 <pbuf_strstr+0x28>
c00097e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00097eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00097ee:	0f b7 c0             	movzx  eax,ax
c00097f1:	3d ff ff 00 00       	cmp    eax,0xffff
c00097f6:	75 08                	jne    c0009800 <pbuf_strstr+0x30>
c00097f8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00097fd:	eb 41                	jmp    c0009840 <pbuf_strstr+0x70>
c00097ff:	90                   	nop
c0009800:	83 ec 0c             	sub    esp,0xc
c0009803:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009807:	e8 74 6d ff ff       	call   c0000580 <strlen>
c000980c:	83 c4 10             	add    esp,0x10
c000980f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009813:	81 7c 24 0c fe ff 00 00 	cmp    DWORD PTR [esp+0xc],0xfffe
c000981b:	76 07                	jbe    c0009824 <pbuf_strstr+0x54>
c000981d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009822:	eb 1c                	jmp    c0009840 <pbuf_strstr+0x70>
c0009824:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009828:	0f b7 c0             	movzx  eax,ax
c000982b:	6a 00                	push   0x0
c000982d:	50                   	push   eax
c000982e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009832:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009836:	e8 e1 fe ff ff       	call   c000971c <pbuf_memfind>
c000983b:	83 c4 10             	add    esp,0x10
c000983e:	66 90                	xchg   ax,ax
c0009840:	83 c4 1c             	add    esp,0x1c
c0009843:	c3                   	ret    

c0009844 <raw_input>:
c0009844:	83 ec 2c             	sub    esp,0x2c
c0009847:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000984c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009850:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009853:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000985b:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000985e:	0f b6 c0             	movzx  eax,al
c0009861:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0009866:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000986e:	a1 9c b8 03 c0       	mov    eax,ds:0xc003b89c
c0009873:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009877:	e9 b8 00 00 00       	jmp    c0009934 <raw_input+0xf0>
c000987c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009880:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0009883:	0f b6 d0             	movzx  edx,al
c0009886:	0f bf 44 24 0e       	movsx  eax,WORD PTR [esp+0xe]
c000988b:	39 c2                	cmp    edx,eax
c000988d:	0f 85 8d 00 00 00    	jne    c0009920 <raw_input+0xdc>
c0009893:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009897:	85 c0                	test   eax,eax
c0009899:	74 19                	je     c00098b4 <raw_input+0x70>
c000989b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000989f:	8b 00                	mov    eax,DWORD PTR [eax]
c00098a1:	85 c0                	test   eax,eax
c00098a3:	74 0f                	je     c00098b4 <raw_input+0x70>
c00098a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098a9:	8b 10                	mov    edx,DWORD PTR [eax]
c00098ab:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c00098b0:	39 c2                	cmp    edx,eax
c00098b2:	75 6c                	jne    c0009920 <raw_input+0xdc>
c00098b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098b8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00098bb:	85 c0                	test   eax,eax
c00098bd:	74 61                	je     c0009920 <raw_input+0xdc>
c00098bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098c3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00098c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00098ca:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c00098cd:	68 90 78 03 c0       	push   0xc0037890
c00098d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00098d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098da:	52                   	push   edx
c00098db:	ff d0                	call   eax
c00098dd:	83 c4 10             	add    esp,0x10
c00098e0:	0f b6 c0             	movzx  eax,al
c00098e3:	85 c0                	test   eax,eax
c00098e5:	74 39                	je     c0009920 <raw_input+0xdc>
c00098e7:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00098ef:	c6 44 24 17 01       	mov    BYTE PTR [esp+0x17],0x1
c00098f4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00098f9:	74 25                	je     c0009920 <raw_input+0xdc>
c00098fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098ff:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0009902:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009906:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009909:	8b 15 9c b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b89c
c000990f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009913:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009916:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000991a:	a3 9c b8 03 c0       	mov    ds:0xc003b89c,eax
c000991f:	90                   	nop
c0009920:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009924:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009928:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000992c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000992f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009933:	90                   	nop
c0009934:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0009939:	85 c0                	test   eax,eax
c000993b:	75 0b                	jne    c0009948 <raw_input+0x104>
c000993d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009942:	0f 85 34 ff ff ff    	jne    c000987c <raw_input+0x38>
c0009948:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000994c:	83 c4 2c             	add    esp,0x2c
c000994f:	c3                   	ret    

c0009950 <raw_bind>:
c0009950:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009955:	74 09                	je     c0009960 <raw_bind+0x10>
c0009957:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000995b:	8b 00                	mov    eax,DWORD PTR [eax]
c000995d:	eb 09                	jmp    c0009968 <raw_bind+0x18>
c000995f:	90                   	nop
c0009960:	b8 00 00 00 00       	mov    eax,0x0
c0009965:	8d 76 00             	lea    esi,[esi+0x0]
c0009968:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000996c:	89 02                	mov    DWORD PTR [edx],eax
c000996e:	b0 00                	mov    al,0x0
c0009970:	c3                   	ret    
c0009971:	8d 76 00             	lea    esi,[esi+0x0]

c0009974 <raw_connect>:
c0009974:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009979:	74 09                	je     c0009984 <raw_connect+0x10>
c000997b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000997f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009981:	eb 09                	jmp    c000998c <raw_connect+0x18>
c0009983:	90                   	nop
c0009984:	b8 00 00 00 00       	mov    eax,0x0
c0009989:	8d 76 00             	lea    esi,[esi+0x0]
c000998c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009990:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009993:	b0 00                	mov    al,0x0
c0009995:	c3                   	ret    
c0009996:	66 90                	xchg   ax,ax

c0009998 <raw_recv>:
c0009998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000999c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00099a0:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00099a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00099a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099ab:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00099ae:	90                   	nop
c00099af:	c3                   	ret    

c00099b0 <raw_sendto>:
c00099b0:	83 ec 1c             	sub    esp,0x1c
c00099b3:	83 ec 08             	sub    esp,0x8
c00099b6:	6a 14                	push   0x14
c00099b8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00099bc:	e8 b3 e9 ff ff       	call   c0008374 <pbuf_header>
c00099c1:	83 c4 10             	add    esp,0x10
c00099c4:	0f b6 c0             	movzx  eax,al
c00099c7:	85 c0                	test   eax,eax
c00099c9:	74 49                	je     c0009a14 <raw_sendto+0x64>
c00099cb:	83 ec 04             	sub    esp,0x4
c00099ce:	6a 00                	push   0x0
c00099d0:	6a 00                	push   0x0
c00099d2:	6a 01                	push   0x1
c00099d4:	e8 17 ed ff ff       	call   c00086f0 <pbuf_alloc>
c00099d9:	83 c4 10             	add    esp,0x10
c00099dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00099e0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00099e5:	75 09                	jne    c00099f0 <raw_sendto+0x40>
c00099e7:	b0 ff                	mov    al,0xff
c00099e9:	e9 2a 01 00 00       	jmp    c0009b18 <raw_sendto+0x168>
c00099ee:	66 90                	xchg   ax,ax
c00099f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00099f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00099f7:	0f b7 c0             	movzx  eax,ax
c00099fa:	85 c0                	test   eax,eax
c00099fc:	74 52                	je     c0009a50 <raw_sendto+0xa0>
c00099fe:	83 ec 08             	sub    esp,0x8
c0009a01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a09:	e8 2a f4 ff ff       	call   c0008e38 <pbuf_chain>
c0009a0e:	83 c4 10             	add    esp,0x10
c0009a11:	eb 3d                	jmp    c0009a50 <raw_sendto+0xa0>
c0009a13:	90                   	nop
c0009a14:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009a18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a1c:	83 ec 08             	sub    esp,0x8
c0009a1f:	6a ec                	push   0xffffffec
c0009a21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a25:	e8 4a e9 ff ff       	call   c0008374 <pbuf_header>
c0009a2a:	83 c4 10             	add    esp,0x10
c0009a2d:	0f b6 c0             	movzx  eax,al
c0009a30:	85 c0                	test   eax,eax
c0009a32:	74 1c                	je     c0009a50 <raw_sendto+0xa0>
c0009a34:	83 ec 08             	sub    esp,0x8
c0009a37:	68 b8 08 03 c0       	push   0xc00308b8
c0009a3c:	68 46 03 03 c0       	push   0xc0030346
c0009a41:	e8 06 64 01 00       	call   c001fe4c <CPrintf>
c0009a46:	83 c4 10             	add    esp,0x10
c0009a49:	b0 ff                	mov    al,0xff
c0009a4b:	e9 c8 00 00 00       	jmp    c0009b18 <raw_sendto+0x168>
c0009a50:	83 ec 0c             	sub    esp,0xc
c0009a53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a57:	e8 00 9e 00 00       	call   c001385c <ip_route>
c0009a5c:	83 c4 10             	add    esp,0x10
c0009a5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a63:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0009a68:	75 22                	jne    c0009a8c <raw_sendto+0xdc>
c0009a6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a6e:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0009a72:	74 10                	je     c0009a84 <raw_sendto+0xd4>
c0009a74:	83 ec 0c             	sub    esp,0xc
c0009a77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a7b:	e8 94 ea ff ff       	call   c0008514 <pbuf_free>
c0009a80:	83 c4 10             	add    esp,0x10
c0009a83:	90                   	nop
c0009a84:	b0 fc                	mov    al,0xfc
c0009a86:	e9 8d 00 00 00       	jmp    c0009b18 <raw_sendto+0x168>
c0009a8b:	90                   	nop
c0009a8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009a90:	85 c0                	test   eax,eax
c0009a92:	74 0c                	je     c0009aa0 <raw_sendto+0xf0>
c0009a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009a98:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a9a:	85 c0                	test   eax,eax
c0009a9c:	75 12                	jne    c0009ab0 <raw_sendto+0x100>
c0009a9e:	66 90                	xchg   ax,ax
c0009aa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aa4:	83 c0 04             	add    eax,0x4
c0009aa7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009aab:	eb 0b                	jmp    c0009ab8 <raw_sendto+0x108>
c0009aad:	8d 76 00             	lea    esi,[esi+0x0]
c0009ab0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ab4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009ab8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009abc:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0009abf:	0f b6 c8             	movzx  ecx,al
c0009ac2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ac6:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0009ac9:	0f b6 d0             	movzx  edx,al
c0009acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ad0:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0009ad3:	0f b6 c0             	movzx  eax,al
c0009ad6:	83 ec 04             	sub    esp,0x4
c0009ad9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009add:	51                   	push   ecx
c0009ade:	52                   	push   edx
c0009adf:	50                   	push   eax
c0009ae0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ae8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009aec:	e8 43 a2 00 00       	call   c0013d34 <ip_output_if>
c0009af1:	83 c4 20             	add    esp,0x20
c0009af4:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0009af8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009afc:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0009b00:	74 12                	je     c0009b14 <raw_sendto+0x164>
c0009b02:	83 ec 0c             	sub    esp,0xc
c0009b05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b09:	e8 06 ea ff ff       	call   c0008514 <pbuf_free>
c0009b0e:	83 c4 10             	add    esp,0x10
c0009b11:	8d 76 00             	lea    esi,[esi+0x0]
c0009b14:	8a 44 24 03          	mov    al,BYTE PTR [esp+0x3]
c0009b18:	83 c4 1c             	add    esp,0x1c
c0009b1b:	c3                   	ret    

c0009b1c <raw_send>:
c0009b1c:	83 ec 0c             	sub    esp,0xc
c0009b1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b23:	83 c0 04             	add    eax,0x4
c0009b26:	83 ec 04             	sub    esp,0x4
c0009b29:	50                   	push   eax
c0009b2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b32:	e8 79 fe ff ff       	call   c00099b0 <raw_sendto>
c0009b37:	83 c4 10             	add    esp,0x10
c0009b3a:	83 c4 0c             	add    esp,0xc
c0009b3d:	c3                   	ret    
c0009b3e:	66 90                	xchg   ax,ax

c0009b40 <raw_remove>:
c0009b40:	83 ec 1c             	sub    esp,0x1c
c0009b43:	a1 9c b8 03 c0       	mov    eax,ds:0xc003b89c
c0009b48:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0009b4c:	75 12                	jne    c0009b60 <raw_remove+0x20>
c0009b4e:	a1 9c b8 03 c0       	mov    eax,ds:0xc003b89c
c0009b53:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b56:	a3 9c b8 03 c0       	mov    ds:0xc003b89c,eax
c0009b5b:	eb 4b                	jmp    c0009ba8 <raw_remove+0x68>
c0009b5d:	8d 76 00             	lea    esi,[esi+0x0]
c0009b60:	a1 9c b8 03 c0       	mov    eax,ds:0xc003b89c
c0009b65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b69:	eb 35                	jmp    c0009ba0 <raw_remove+0x60>
c0009b6b:	90                   	nop
c0009b6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b70:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b73:	85 c0                	test   eax,eax
c0009b75:	74 1d                	je     c0009b94 <raw_remove+0x54>
c0009b77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b7b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b7e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0009b82:	75 10                	jne    c0009b94 <raw_remove+0x54>
c0009b84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b88:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0009b8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b8f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009b92:	66 90                	xchg   ax,ax
c0009b94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b98:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b9f:	90                   	nop
c0009ba0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009ba5:	75 c5                	jne    c0009b6c <raw_remove+0x2c>
c0009ba7:	90                   	nop
c0009ba8:	83 ec 08             	sub    esp,0x8
c0009bab:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009baf:	6a 00                	push   0x0
c0009bb1:	e8 9e e0 ff ff       	call   c0007c54 <memp_free>
c0009bb6:	83 c4 10             	add    esp,0x10
c0009bb9:	90                   	nop
c0009bba:	83 c4 1c             	add    esp,0x1c
c0009bbd:	c3                   	ret    
c0009bbe:	66 90                	xchg   ax,ax

c0009bc0 <raw_new>:
c0009bc0:	83 ec 2c             	sub    esp,0x2c
c0009bc3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bc7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009bcb:	83 ec 0c             	sub    esp,0xc
c0009bce:	6a 00                	push   0x0
c0009bd0:	e8 53 df ff ff       	call   c0007b28 <memp_malloc>
c0009bd5:	83 c4 10             	add    esp,0x10
c0009bd8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009bdc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009be1:	74 3d                	je     c0009c20 <raw_new+0x60>
c0009be3:	83 ec 04             	sub    esp,0x4
c0009be6:	6a 1c                	push   0x1c
c0009be8:	6a 00                	push   0x0
c0009bea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009bee:	e8 fd 68 ff ff       	call   c00004f0 <memset>
c0009bf3:	83 c4 10             	add    esp,0x10
c0009bf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bfa:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009bfe:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0009c01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c05:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c0009c09:	8b 15 9c b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b89c
c0009c0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c13:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009c16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c1a:	a3 9c b8 03 c0       	mov    ds:0xc003b89c,eax
c0009c1f:	90                   	nop
c0009c20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c24:	83 c4 2c             	add    esp,0x2c
c0009c27:	c3                   	ret    

c0009c28 <stats_init>:
c0009c28:	90                   	nop
c0009c29:	c3                   	ret    
c0009c2a:	66 90                	xchg   ax,ax

c0009c2c <sys_msleep>:
c0009c2c:	83 ec 1c             	sub    esp,0x1c
c0009c2f:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0009c34:	74 46                	je     c0009c7c <sys_msleep+0x50>
c0009c36:	83 ec 08             	sub    esp,0x8
c0009c39:	6a 00                	push   0x0
c0009c3b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009c3f:	50                   	push   eax
c0009c40:	e8 5b 70 ff ff       	call   c0000ca0 <sys_sem_new>
c0009c45:	83 c4 10             	add    esp,0x10
c0009c48:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009c4c:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0009c51:	85 c0                	test   eax,eax
c0009c53:	75 27                	jne    c0009c7c <sys_msleep+0x50>
c0009c55:	83 ec 08             	sub    esp,0x8
c0009c58:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009c5c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009c60:	50                   	push   eax
c0009c61:	e8 92 70 ff ff       	call   c0000cf8 <sys_arch_sem_wait>
c0009c66:	83 c4 10             	add    esp,0x10
c0009c69:	83 ec 0c             	sub    esp,0xc
c0009c6c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009c70:	50                   	push   eax
c0009c71:	e8 52 70 ff ff       	call   c0000cc8 <sys_sem_free>
c0009c76:	83 c4 10             	add    esp,0x10
c0009c79:	8d 76 00             	lea    esi,[esi+0x0]
c0009c7c:	90                   	nop
c0009c7d:	83 c4 1c             	add    esp,0x1c
c0009c80:	c3                   	ret    
c0009c81:	66 90                	xchg   ax,ax
c0009c83:	90                   	nop

c0009c84 <tcp_accept_null>:
c0009c84:	83 ec 04             	sub    esp,0x4
c0009c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c8b:	88 04 24             	mov    BYTE PTR [esp],al
c0009c8e:	b0 f6                	mov    al,0xf6
c0009c90:	83 c4 04             	add    esp,0x4
c0009c93:	c3                   	ret    

c0009c94 <tcp_listen_with_backlog>:
c0009c94:	83 ec 2c             	sub    esp,0x2c
c0009c97:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009c9b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009c9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ca3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009ca6:	85 c0                	test   eax,eax
c0009ca8:	74 22                	je     c0009ccc <tcp_listen_with_backlog+0x38>
c0009caa:	83 ec 08             	sub    esp,0x8
c0009cad:	68 e0 08 03 c0       	push   0xc00308e0
c0009cb2:	68 46 03 03 c0       	push   0xc0030346
c0009cb7:	e8 90 61 01 00       	call   c001fe4c <CPrintf>
c0009cbc:	83 c4 10             	add    esp,0x10
c0009cbf:	b8 00 00 00 00       	mov    eax,0x0
c0009cc4:	e9 77 01 00 00       	jmp    c0009e40 <tcp_listen_with_backlog+0x1ac>
c0009cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0009ccc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cd0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd3:	83 f8 01             	cmp    eax,0x1
c0009cd6:	75 0c                	jne    c0009ce4 <tcp_listen_with_backlog+0x50>
c0009cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cdc:	e9 5f 01 00 00       	jmp    c0009e40 <tcp_listen_with_backlog+0x1ac>
c0009ce1:	8d 76 00             	lea    esi,[esi+0x0]
c0009ce4:	83 ec 0c             	sub    esp,0xc
c0009ce7:	6a 03                	push   0x3
c0009ce9:	e8 3a de ff ff       	call   c0007b28 <memp_malloc>
c0009cee:	83 c4 10             	add    esp,0x10
c0009cf1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cf5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009cfa:	75 0c                	jne    c0009d08 <tcp_listen_with_backlog+0x74>
c0009cfc:	b8 00 00 00 00       	mov    eax,0x0
c0009d01:	e9 3a 01 00 00       	jmp    c0009e40 <tcp_listen_with_backlog+0x1ac>
c0009d06:	66 90                	xchg   ax,ax
c0009d08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d0c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0009d0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d13:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0009d16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d1a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0009d1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d21:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c0009d25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d29:	c7 40 10 01 00 00 00 	mov    DWORD PTR [eax+0x10],0x1
c0009d30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d34:	8a 50 14             	mov    dl,BYTE PTR [eax+0x14]
c0009d37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d3b:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c0009d3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d42:	8a 50 08             	mov    dl,BYTE PTR [eax+0x8]
c0009d45:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d49:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d50:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c0009d53:	83 c8 02             	or     eax,0x2
c0009d56:	88 c2                	mov    dl,al
c0009d58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d5c:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009d5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d63:	8a 50 0a             	mov    dl,BYTE PTR [eax+0xa]
c0009d66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d6a:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c0009d6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d71:	8a 50 09             	mov    dl,BYTE PTR [eax+0x9]
c0009d74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d78:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0009d7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d7f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009d81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d85:	89 10                	mov    DWORD PTR [eax],edx
c0009d87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d8b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009d8e:	0f b7 c0             	movzx  eax,ax
c0009d91:	85 c0                	test   eax,eax
c0009d93:	74 6f                	je     c0009e04 <tcp_listen_with_backlog+0x170>
c0009d95:	a1 80 78 03 c0       	mov    eax,ds:0xc0037880
c0009d9a:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009d9e:	75 10                	jne    c0009db0 <tcp_listen_with_backlog+0x11c>
c0009da0:	a1 80 78 03 c0       	mov    eax,ds:0xc0037880
c0009da5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009da8:	a3 80 78 03 c0       	mov    ds:0xc0037880,eax
c0009dad:	eb 49                	jmp    c0009df8 <tcp_listen_with_backlog+0x164>
c0009daf:	90                   	nop
c0009db0:	a1 80 78 03 c0       	mov    eax,ds:0xc0037880
c0009db5:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c0009dba:	eb 30                	jmp    c0009dec <tcp_listen_with_backlog+0x158>
c0009dbc:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c0009dc1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009dc4:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009dc8:	75 12                	jne    c0009ddc <tcp_listen_with_backlog+0x148>
c0009dca:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c0009dcf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009dd3:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009dd6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009dd9:	eb 1d                	jmp    c0009df8 <tcp_listen_with_backlog+0x164>
c0009ddb:	90                   	nop
c0009ddc:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c0009de1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009de4:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c0009de9:	8d 76 00             	lea    esi,[esi+0x0]
c0009dec:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c0009df1:	85 c0                	test   eax,eax
c0009df3:	75 c7                	jne    c0009dbc <tcp_listen_with_backlog+0x128>
c0009df5:	8d 76 00             	lea    esi,[esi+0x0]
c0009df8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dfc:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0009e03:	90                   	nop
c0009e04:	83 ec 08             	sub    esp,0x8
c0009e07:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009e0b:	6a 02                	push   0x2
c0009e0d:	e8 42 de ff ff       	call   c0007c54 <memp_free>
c0009e12:	83 c4 10             	add    esp,0x10
c0009e15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e19:	c7 40 1c 84 9c 00 c0 	mov    DWORD PTR [eax+0x1c],0xc0009c84
c0009e20:	8b 15 78 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037878
c0009e26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e2a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e31:	a3 78 78 03 c0       	mov    ds:0xc0037878,eax
c0009e36:	e8 21 6f 00 00       	call   c0010d5c <tcp_timer_needed>
c0009e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e3f:	90                   	nop
c0009e40:	83 c4 2c             	add    esp,0x2c
c0009e43:	c3                   	ret    

c0009e44 <tcp_update_rcv_ann_wnd>:
c0009e44:	83 ec 1c             	sub    esp,0x1c
c0009e47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e4b:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009e4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e52:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009e55:	0f b7 c0             	movzx  eax,ax
c0009e58:	01 d0                	add    eax,edx
c0009e5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e62:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009e65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e69:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009e6c:	0f b7 c8             	movzx  ecx,ax
c0009e6f:	81 f9 30 04 00 00    	cmp    ecx,0x430
c0009e75:	76 05                	jbe    c0009e7c <tcp_update_rcv_ann_wnd+0x38>
c0009e77:	b8 30 04 00 00       	mov    eax,0x430
c0009e7c:	0f b7 c0             	movzx  eax,ax
c0009e7f:	01 c2                	add    edx,eax
c0009e81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e85:	29 d0                	sub    eax,edx
c0009e87:	78 23                	js     c0009eac <tcp_update_rcv_ann_wnd+0x68>
c0009e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e8d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0009e90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e94:	66 89 50 2e          	mov    WORD PTR [eax+0x2e],dx
c0009e98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e9c:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009e9f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009ea3:	29 c2                	sub    edx,eax
c0009ea5:	89 d0                	mov    eax,edx
c0009ea7:	eb 77                	jmp    c0009f20 <tcp_update_rcv_ann_wnd+0xdc>
c0009ea9:	8d 76 00             	lea    esi,[esi+0x0]
c0009eac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009eb0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009eb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009eb7:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009eba:	29 c2                	sub    edx,eax
c0009ebc:	89 d0                	mov    eax,edx
c0009ebe:	85 c0                	test   eax,eax
c0009ec0:	7e 0e                	jle    c0009ed0 <tcp_update_rcv_ann_wnd+0x8c>
c0009ec2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ec6:	66 c7 40 2e 00 00    	mov    WORD PTR [eax+0x2e],0x0
c0009ecc:	eb 4a                	jmp    c0009f18 <tcp_update_rcv_ann_wnd+0xd4>
c0009ece:	66 90                	xchg   ax,ax
c0009ed0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ed4:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009ed7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009edb:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0009ede:	29 c2                	sub    edx,eax
c0009ee0:	89 d0                	mov    eax,edx
c0009ee2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ee6:	81 7c 24 08 ff ff 00 00 	cmp    DWORD PTR [esp+0x8],0xffff
c0009eee:	76 18                	jbe    c0009f08 <tcp_update_rcv_ann_wnd+0xc4>
c0009ef0:	83 ec 08             	sub    esp,0x8
c0009ef3:	68 14 0b 03 c0       	push   0xc0030b14
c0009ef8:	68 46 03 03 c0       	push   0xc0030346
c0009efd:	e8 4a 5f 01 00       	call   c001fe4c <CPrintf>
c0009f02:	83 c4 10             	add    esp,0x10
c0009f05:	8d 76 00             	lea    esi,[esi+0x0]
c0009f08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f0c:	89 c2                	mov    edx,eax
c0009f0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f12:	66 89 50 2e          	mov    WORD PTR [eax+0x2e],dx
c0009f16:	66 90                	xchg   ax,ax
c0009f18:	b8 00 00 00 00       	mov    eax,0x0
c0009f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0009f20:	83 c4 1c             	add    esp,0x1c
c0009f23:	c3                   	ret    

c0009f24 <tcp_recved>:
c0009f24:	83 ec 2c             	sub    esp,0x2c
c0009f27:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f2b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009f30:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009f35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f39:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009f3c:	0f b7 c0             	movzx  eax,ax
c0009f3f:	b9 ff ff 00 00       	mov    ecx,0xffff
c0009f44:	29 c1                	sub    ecx,eax
c0009f46:	89 c8                	mov    eax,ecx
c0009f48:	39 c2                	cmp    edx,eax
c0009f4a:	7e 18                	jle    c0009f64 <tcp_recved+0x40>
c0009f4c:	83 ec 08             	sub    esp,0x8
c0009f4f:	68 04 09 03 c0       	push   0xc0030904
c0009f54:	68 46 03 03 c0       	push   0xc0030346
c0009f59:	e8 ee 5e 01 00       	call   c001fe4c <CPrintf>
c0009f5e:	83 c4 10             	add    esp,0x10
c0009f61:	8d 76 00             	lea    esi,[esi+0x0]
c0009f64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f68:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009f6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f6f:	01 d0                	add    eax,edx
c0009f71:	89 c2                	mov    edx,eax
c0009f73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f77:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c0009f7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f7f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009f82:	0f b7 c0             	movzx  eax,ax
c0009f85:	3d 60 08 00 00       	cmp    eax,0x860
c0009f8a:	76 0c                	jbe    c0009f98 <tcp_recved+0x74>
c0009f8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f90:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c0009f96:	66 90                	xchg   ax,ax
c0009f98:	83 ec 0c             	sub    esp,0xc
c0009f9b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f9f:	e8 a0 fe ff ff       	call   c0009e44 <tcp_update_rcv_ann_wnd>
c0009fa4:	83 c4 10             	add    esp,0x10
c0009fa7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009fab:	81 7c 24 1c 17 02 00 00 	cmp    DWORD PTR [esp+0x1c],0x217
c0009fb3:	7e 23                	jle    c0009fd8 <tcp_recved+0xb4>
c0009fb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fb9:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0009fbc:	83 c8 02             	or     eax,0x2
c0009fbf:	88 c2                	mov    dl,al
c0009fc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fc5:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0009fc8:	83 ec 0c             	sub    esp,0xc
c0009fcb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fcf:	e8 e0 60 00 00       	call   c00100b4 <tcp_output>
c0009fd4:	83 c4 10             	add    esp,0x10
c0009fd7:	90                   	nop
c0009fd8:	90                   	nop
c0009fd9:	83 c4 2c             	add    esp,0x2c
c0009fdc:	c3                   	ret    
c0009fdd:	8d 76 00             	lea    esi,[esi+0x0]

c0009fe0 <tcp_new_port>:
c0009fe0:	83 ec 10             	sub    esp,0x10
c0009fe3:	90                   	nop
c0009fe4:	66 a1 d4 44 03 c0    	mov    ax,ds:0xc00344d4
c0009fea:	8d 50 01             	lea    edx,[eax+0x1]
c0009fed:	66 89 15 d4 44 03 c0 	mov    WORD PTR ds:0xc00344d4,dx
c0009ff4:	0f b7 c0             	movzx  eax,ax
c0009ff7:	3d ff ff 00 00       	cmp    eax,0xffff
c0009ffc:	75 0a                	jne    c000a008 <tcp_new_port+0x28>
c0009ffe:	66 c7 05 d4 44 03 c0 00 c0 	mov    WORD PTR ds:0xc00344d4,0xc000
c000a007:	90                   	nop
c000a008:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a010:	eb 4a                	jmp    c000a05c <tcp_new_port+0x7c>
c000a012:	66 90                	xchg   ax,ax
c000a014:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a018:	8b 04 85 20 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf3e0]
c000a01f:	8b 00                	mov    eax,DWORD PTR [eax]
c000a021:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a025:	eb 29                	jmp    c000a050 <tcp_new_port+0x70>
c000a027:	90                   	nop
c000a028:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a02c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000a02f:	66 a1 d4 44 03 c0    	mov    ax,ds:0xc00344d4
c000a035:	0f b7 d2             	movzx  edx,dx
c000a038:	0f b7 c0             	movzx  eax,ax
c000a03b:	39 c2                	cmp    edx,eax
c000a03d:	75 05                	jne    c000a044 <tcp_new_port+0x64>
c000a03f:	eb a3                	jmp    c0009fe4 <tcp_new_port+0x4>
c000a041:	8d 76 00             	lea    esi,[esi+0x0]
c000a044:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a048:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a04b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a04f:	90                   	nop
c000a050:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000a055:	75 d1                	jne    c000a028 <tcp_new_port+0x48>
c000a057:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000a05c:	83 7c 24 0c 03       	cmp    DWORD PTR [esp+0xc],0x3
c000a061:	7e b1                	jle    c000a014 <tcp_new_port+0x34>
c000a063:	66 a1 d4 44 03 c0    	mov    ax,ds:0xc00344d4
c000a069:	83 c4 10             	add    esp,0x10
c000a06c:	c3                   	ret    
c000a06d:	8d 76 00             	lea    esi,[esi+0x0]

c000a070 <tcp_bind>:
c000a070:	83 ec 2c             	sub    esp,0x2c
c000a073:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a077:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000a07c:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000a084:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a088:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a08b:	85 c0                	test   eax,eax
c000a08d:	74 1d                	je     c000a0ac <tcp_bind+0x3c>
c000a08f:	83 ec 08             	sub    esp,0x8
c000a092:	68 28 09 03 c0       	push   0xc0030928
c000a097:	68 46 03 03 c0       	push   0xc0030346
c000a09c:	e8 ab 5d 01 00       	call   c001fe4c <CPrintf>
c000a0a1:	83 c4 10             	add    esp,0x10
c000a0a4:	b0 fa                	mov    al,0xfa
c000a0a6:	e9 f1 00 00 00       	jmp    c000a19c <tcp_bind+0x12c>
c000a0ab:	90                   	nop
c000a0ac:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000a0b1:	85 c0                	test   eax,eax
c000a0b3:	75 0b                	jne    c000a0c0 <tcp_bind+0x50>
c000a0b5:	e8 26 ff ff ff       	call   c0009fe0 <tcp_new_port>
c000a0ba:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000a0bf:	90                   	nop
c000a0c0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0c8:	eb 7a                	jmp    c000a144 <tcp_bind+0xd4>
c000a0ca:	66 90                	xchg   ax,ax
c000a0cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a0d0:	8b 04 85 20 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf3e0]
c000a0d7:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0dd:	eb 59                	jmp    c000a138 <tcp_bind+0xc8>
c000a0df:	90                   	nop
c000a0e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0e4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a0e7:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000a0ec:	0f b7 c0             	movzx  eax,ax
c000a0ef:	39 c2                	cmp    edx,eax
c000a0f1:	75 39                	jne    c000a12c <tcp_bind+0xbc>
c000a0f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0f7:	85 c0                	test   eax,eax
c000a0f9:	74 2d                	je     c000a128 <tcp_bind+0xb8>
c000a0fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0ff:	8b 00                	mov    eax,DWORD PTR [eax]
c000a101:	85 c0                	test   eax,eax
c000a103:	74 23                	je     c000a128 <tcp_bind+0xb8>
c000a105:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000a10a:	74 1c                	je     c000a128 <tcp_bind+0xb8>
c000a10c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a110:	8b 00                	mov    eax,DWORD PTR [eax]
c000a112:	85 c0                	test   eax,eax
c000a114:	74 12                	je     c000a128 <tcp_bind+0xb8>
c000a116:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a11a:	8b 10                	mov    edx,DWORD PTR [eax]
c000a11c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a120:	8b 00                	mov    eax,DWORD PTR [eax]
c000a122:	39 c2                	cmp    edx,eax
c000a124:	75 06                	jne    c000a12c <tcp_bind+0xbc>
c000a126:	66 90                	xchg   ax,ax
c000a128:	b0 f8                	mov    al,0xf8
c000a12a:	eb 70                	jmp    c000a19c <tcp_bind+0x12c>
c000a12c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a130:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a133:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a137:	90                   	nop
c000a138:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a13d:	75 a1                	jne    c000a0e0 <tcp_bind+0x70>
c000a13f:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a144:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a148:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c000a14c:	0f 8c 7a ff ff ff    	jl     c000a0cc <tcp_bind+0x5c>
c000a152:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000a157:	74 17                	je     c000a170 <tcp_bind+0x100>
c000a159:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a15d:	8b 00                	mov    eax,DWORD PTR [eax]
c000a15f:	85 c0                	test   eax,eax
c000a161:	74 0d                	je     c000a170 <tcp_bind+0x100>
c000a163:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a167:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a16b:	8b 12                	mov    edx,DWORD PTR [edx]
c000a16d:	89 10                	mov    DWORD PTR [eax],edx
c000a16f:	90                   	nop
c000a170:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a174:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a178:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c000a17c:	8b 15 80 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037880
c000a182:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a186:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a189:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a18d:	a3 80 78 03 c0       	mov    ds:0xc0037880,eax
c000a192:	e8 c5 6b 00 00       	call   c0010d5c <tcp_timer_needed>
c000a197:	b0 00                	mov    al,0x0
c000a199:	8d 76 00             	lea    esi,[esi+0x0]
c000a19c:	83 c4 2c             	add    esp,0x2c
c000a19f:	c3                   	ret    

c000a1a0 <tcp_seg_free>:
c000a1a0:	83 ec 0c             	sub    esp,0xc
c000a1a3:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000a1a8:	74 32                	je     c000a1dc <tcp_seg_free+0x3c>
c000a1aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a1b1:	85 c0                	test   eax,eax
c000a1b3:	74 13                	je     c000a1c8 <tcp_seg_free+0x28>
c000a1b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1b9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a1bc:	83 ec 0c             	sub    esp,0xc
c000a1bf:	50                   	push   eax
c000a1c0:	e8 4f e3 ff ff       	call   c0008514 <pbuf_free>
c000a1c5:	83 c4 10             	add    esp,0x10
c000a1c8:	83 ec 08             	sub    esp,0x8
c000a1cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a1cf:	6a 04                	push   0x4
c000a1d1:	e8 7e da ff ff       	call   c0007c54 <memp_free>
c000a1d6:	83 c4 10             	add    esp,0x10
c000a1d9:	8d 76 00             	lea    esi,[esi+0x0]
c000a1dc:	90                   	nop
c000a1dd:	83 c4 0c             	add    esp,0xc
c000a1e0:	c3                   	ret    
c000a1e1:	8d 76 00             	lea    esi,[esi+0x0]

c000a1e4 <tcp_segs_free>:
c000a1e4:	83 ec 1c             	sub    esp,0x1c
c000a1e7:	eb 27                	jmp    c000a210 <tcp_segs_free+0x2c>
c000a1e9:	8d 76 00             	lea    esi,[esi+0x0]
c000a1ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a1f0:	8b 00                	mov    eax,DWORD PTR [eax]
c000a1f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a1f6:	83 ec 0c             	sub    esp,0xc
c000a1f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1fd:	e8 9e ff ff ff       	call   c000a1a0 <tcp_seg_free>
c000a202:	83 c4 10             	add    esp,0x10
c000a205:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a209:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a20d:	8d 76 00             	lea    esi,[esi+0x0]
c000a210:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000a215:	75 d5                	jne    c000a1ec <tcp_segs_free+0x8>
c000a217:	90                   	nop
c000a218:	83 c4 1c             	add    esp,0x1c
c000a21b:	c3                   	ret    

c000a21c <tcp_setprio>:
c000a21c:	83 ec 04             	sub    esp,0x4
c000a21f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a223:	88 04 24             	mov    BYTE PTR [esp],al
c000a226:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a22a:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a22d:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000a230:	90                   	nop
c000a231:	83 c4 04             	add    esp,0x4
c000a234:	c3                   	ret    
c000a235:	8d 76 00             	lea    esi,[esi+0x0]

c000a238 <tcp_seg_copy>:
c000a238:	83 ec 1c             	sub    esp,0x1c
c000a23b:	83 ec 0c             	sub    esp,0xc
c000a23e:	6a 04                	push   0x4
c000a240:	e8 e3 d8 ff ff       	call   c0007b28 <memp_malloc>
c000a245:	83 c4 10             	add    esp,0x10
c000a248:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a24c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a251:	75 09                	jne    c000a25c <tcp_seg_copy+0x24>
c000a253:	b8 00 00 00 00       	mov    eax,0x0
c000a258:	eb 2e                	jmp    c000a288 <tcp_seg_copy+0x50>
c000a25a:	66 90                	xchg   ax,ax
c000a25c:	83 ec 04             	sub    esp,0x4
c000a25f:	6a 10                	push   0x10
c000a261:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a265:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a269:	e8 0c 61 ff ff       	call   c000037a <memcpy>
c000a26e:	83 c4 10             	add    esp,0x10
c000a271:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a275:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	50                   	push   eax
c000a27c:	e8 a3 ea ff ff       	call   c0008d24 <pbuf_ref>
c000a281:	83 c4 10             	add    esp,0x10
c000a284:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a288:	83 c4 1c             	add    esp,0x1c
c000a28b:	c3                   	ret    

c000a28c <tcp_arg>:
c000a28c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a290:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a294:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a297:	90                   	nop
c000a298:	c3                   	ret    
c000a299:	8d 76 00             	lea    esi,[esi+0x0]

c000a29c <tcp_recv>:
c000a29c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a2a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a2a4:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
c000a2aa:	90                   	nop
c000a2ab:	c3                   	ret    

c000a2ac <tcp_sent>:
c000a2ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a2b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a2b4:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
c000a2ba:	90                   	nop
c000a2bb:	c3                   	ret    

c000a2bc <tcp_err>:
c000a2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a2c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a2c4:	89 90 98 00 00 00    	mov    DWORD PTR [eax+0x98],edx
c000a2ca:	90                   	nop
c000a2cb:	c3                   	ret    

c000a2cc <tcp_accept>:
c000a2cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a2d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a2d4:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000a2d7:	90                   	nop
c000a2d8:	c3                   	ret    
c000a2d9:	8d 76 00             	lea    esi,[esi+0x0]

c000a2dc <tcp_poll>:
c000a2dc:	83 ec 04             	sub    esp,0x4
c000a2df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2e3:	88 04 24             	mov    BYTE PTR [esp],al
c000a2e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a2ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a2ee:	89 90 94 00 00 00    	mov    DWORD PTR [eax+0x94],edx
c000a2f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a2f8:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a2fb:	88 50 39             	mov    BYTE PTR [eax+0x39],dl
c000a2fe:	90                   	nop
c000a2ff:	83 c4 04             	add    esp,0x4
c000a302:	c3                   	ret    
c000a303:	90                   	nop

c000a304 <tcp_pcb_purge>:
c000a304:	83 ec 0c             	sub    esp,0xc
c000a307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a30b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a30e:	85 c0                	test   eax,eax
c000a310:	0f 84 ca 00 00 00    	je     c000a3e0 <tcp_pcb_purge+0xdc>
c000a316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a31a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a31d:	83 f8 0a             	cmp    eax,0xa
c000a320:	0f 84 ba 00 00 00    	je     c000a3e0 <tcp_pcb_purge+0xdc>
c000a326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a32a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a32d:	83 f8 01             	cmp    eax,0x1
c000a330:	0f 84 aa 00 00 00    	je     c000a3e0 <tcp_pcb_purge+0xdc>
c000a336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a33a:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a340:	85 c0                	test   eax,eax
c000a342:	74 24                	je     c000a368 <tcp_pcb_purge+0x64>
c000a344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a348:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a34e:	83 ec 0c             	sub    esp,0xc
c000a351:	50                   	push   eax
c000a352:	e8 bd e1 ff ff       	call   c0008514 <pbuf_free>
c000a357:	83 c4 10             	add    esp,0x10
c000a35a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a35e:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000a368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a36c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a372:	83 ec 0c             	sub    esp,0xc
c000a375:	50                   	push   eax
c000a376:	e8 69 fe ff ff       	call   c000a1e4 <tcp_segs_free>
c000a37b:	83 c4 10             	add    esp,0x10
c000a37e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a382:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a38c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a390:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000a396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a39a:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000a39d:	83 ec 0c             	sub    esp,0xc
c000a3a0:	50                   	push   eax
c000a3a1:	e8 3e fe ff ff       	call   c000a1e4 <tcp_segs_free>
c000a3a6:	83 c4 10             	add    esp,0x10
c000a3a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3ad:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a3b0:	83 ec 0c             	sub    esp,0xc
c000a3b3:	50                   	push   eax
c000a3b4:	e8 2b fe ff ff       	call   c000a1e4 <tcp_segs_free>
c000a3b9:	83 c4 10             	add    esp,0x10
c000a3bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3c0:	c7 40 78 00 00 00 00 	mov    DWORD PTR [eax+0x78],0x0
c000a3c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3cb:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c000a3ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3d2:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000a3d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3d9:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000a3df:	90                   	nop
c000a3e0:	90                   	nop
c000a3e1:	83 c4 0c             	add    esp,0xc
c000a3e4:	c3                   	ret    
c000a3e5:	8d 76 00             	lea    esi,[esi+0x0]

c000a3e8 <tcp_slowtmr>:
c000a3e8:	57                   	push   edi
c000a3e9:	56                   	push   esi
c000a3ea:	53                   	push   ebx
c000a3eb:	83 ec 20             	sub    esp,0x20
c000a3ee:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a3f3:	a1 74 78 03 c0       	mov    eax,ds:0xc0037874
c000a3f8:	83 c0 01             	add    eax,0x1
c000a3fb:	a3 74 78 03 c0       	mov    ds:0xc0037874,eax
c000a400:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a408:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000a40d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a411:	e9 0e 06 00 00       	jmp    c000aa24 <tcp_slowtmr+0x63c>
c000a416:	66 90                	xchg   ax,ax
c000a418:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a41c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a41f:	85 c0                	test   eax,eax
c000a421:	75 15                	jne    c000a438 <tcp_slowtmr+0x50>
c000a423:	83 ec 08             	sub    esp,0x8
c000a426:	68 50 09 03 c0       	push   0xc0030950
c000a42b:	68 46 03 03 c0       	push   0xc0030346
c000a430:	e8 17 5a 01 00       	call   c001fe4c <CPrintf>
c000a435:	83 c4 10             	add    esp,0x10
c000a438:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a43c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a43f:	83 f8 01             	cmp    eax,0x1
c000a442:	75 18                	jne    c000a45c <tcp_slowtmr+0x74>
c000a444:	83 ec 08             	sub    esp,0x8
c000a447:	68 7c 09 03 c0       	push   0xc003097c
c000a44c:	68 46 03 03 c0       	push   0xc0030346
c000a451:	e8 f6 59 01 00       	call   c001fe4c <CPrintf>
c000a456:	83 c4 10             	add    esp,0x10
c000a459:	8d 76 00             	lea    esi,[esi+0x0]
c000a45c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a460:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a463:	83 f8 0a             	cmp    eax,0xa
c000a466:	75 18                	jne    c000a480 <tcp_slowtmr+0x98>
c000a468:	83 ec 08             	sub    esp,0x8
c000a46b:	68 a8 09 03 c0       	push   0xc00309a8
c000a470:	68 46 03 03 c0       	push   0xc0030346
c000a475:	e8 d2 59 01 00       	call   c001fe4c <CPrintf>
c000a47a:	83 c4 10             	add    esp,0x10
c000a47d:	8d 76 00             	lea    esi,[esi+0x0]
c000a480:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a485:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000a48a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a48e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a491:	83 f8 02             	cmp    eax,0x2
c000a494:	75 22                	jne    c000a4b8 <tcp_slowtmr+0xd0>
c000a496:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a49a:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a49d:	0f b6 c0             	movzx  eax,al
c000a4a0:	83 f8 06             	cmp    eax,0x6
c000a4a3:	75 13                	jne    c000a4b8 <tcp_slowtmr+0xd0>
c000a4a5:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a4a9:	83 c0 01             	add    eax,0x1
c000a4ac:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a4b0:	e9 eb 01 00 00       	jmp    c000a6a0 <tcp_slowtmr+0x2b8>
c000a4b5:	8d 76 00             	lea    esi,[esi+0x0]
c000a4b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4bc:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a4bf:	0f b6 c0             	movzx  eax,al
c000a4c2:	83 f8 0c             	cmp    eax,0xc
c000a4c5:	75 11                	jne    c000a4d8 <tcp_slowtmr+0xf0>
c000a4c7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a4cb:	83 c0 01             	add    eax,0x1
c000a4ce:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a4d2:	e9 c9 01 00 00       	jmp    c000a6a0 <tcp_slowtmr+0x2b8>
c000a4d7:	90                   	nop
c000a4d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4dc:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a4e2:	0f b6 c0             	movzx  eax,al
c000a4e5:	85 c0                	test   eax,eax
c000a4e7:	0f 84 8f 00 00 00    	je     c000a57c <tcp_slowtmr+0x194>
c000a4ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4f1:	8b 80 a0 00 00 00    	mov    eax,DWORD PTR [eax+0xa0]
c000a4f7:	8d 50 01             	lea    edx,[eax+0x1]
c000a4fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4fe:	89 90 a0 00 00 00    	mov    DWORD PTR [eax+0xa0],edx
c000a504:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a508:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
c000a50e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a512:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a518:	0f b6 c0             	movzx  eax,al
c000a51b:	83 e8 01             	sub    eax,0x1
c000a51e:	8a 80 30 0c 03 c0    	mov    al,BYTE PTR [eax-0x3ffcf3d0]
c000a524:	0f b6 c0             	movzx  eax,al
c000a527:	39 c2                	cmp    edx,eax
c000a529:	0f 82 71 01 00 00    	jb     c000a6a0 <tcp_slowtmr+0x2b8>
c000a52f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a533:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c000a53d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a541:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a547:	0f b6 c0             	movzx  eax,al
c000a54a:	83 f8 06             	cmp    eax,0x6
c000a54d:	77 19                	ja     c000a568 <tcp_slowtmr+0x180>
c000a54f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a553:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a559:	83 c0 01             	add    eax,0x1
c000a55c:	88 c2                	mov    dl,al
c000a55e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a562:	88 90 a4 00 00 00    	mov    BYTE PTR [eax+0xa4],dl
c000a568:	83 ec 0c             	sub    esp,0xc
c000a56b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a56f:	e8 58 64 00 00       	call   c00109cc <tcp_zero_window_probe>
c000a574:	83 c4 10             	add    esp,0x10
c000a577:	e9 24 01 00 00       	jmp    c000a6a0 <tcp_slowtmr+0x2b8>
c000a57c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a580:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a584:	98                   	cwde   
c000a585:	85 c0                	test   eax,eax
c000a587:	78 17                	js     c000a5a0 <tcp_slowtmr+0x1b8>
c000a589:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a58d:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a591:	83 c0 01             	add    eax,0x1
c000a594:	89 c2                	mov    edx,eax
c000a596:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a59a:	66 89 50 3a          	mov    WORD PTR [eax+0x3a],dx
c000a59e:	66 90                	xchg   ax,ax
c000a5a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5a4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a5a7:	85 c0                	test   eax,eax
c000a5a9:	0f 84 f1 00 00 00    	je     c000a6a0 <tcp_slowtmr+0x2b8>
c000a5af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5b3:	66 8b 50 3a          	mov    dx,WORD PTR [eax+0x3a]
c000a5b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5bb:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a5be:	0f bf d2             	movsx  edx,dx
c000a5c1:	98                   	cwde   
c000a5c2:	39 c2                	cmp    edx,eax
c000a5c4:	0f 8c d6 00 00 00    	jl     c000a6a0 <tcp_slowtmr+0x2b8>
c000a5ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a5d1:	83 f8 02             	cmp    eax,0x2
c000a5d4:	74 3e                	je     c000a614 <tcp_slowtmr+0x22c>
c000a5d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5da:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000a5dd:	98                   	cwde   
c000a5de:	c1 f8 03             	sar    eax,0x3
c000a5e1:	0f bf d0             	movsx  edx,ax
c000a5e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5e8:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000a5ec:	98                   	cwde   
c000a5ed:	01 c2                	add    edx,eax
c000a5ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5f3:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a5f6:	0f b6 c0             	movzx  eax,al
c000a5f9:	8a 80 38 0c 03 c0    	mov    al,BYTE PTR [eax-0x3ffcf3c8]
c000a5ff:	0f b6 c0             	movzx  eax,al
c000a602:	88 c1                	mov    cl,al
c000a604:	d3 e2                	shl    edx,cl
c000a606:	89 d0                	mov    eax,edx
c000a608:	89 c2                	mov    edx,eax
c000a60a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a60e:	66 89 50 4c          	mov    WORD PTR [eax+0x4c],dx
c000a612:	66 90                	xchg   ax,ax
c000a614:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a618:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000a61e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a622:	8b 48 60             	mov    ecx,DWORD PTR [eax+0x60]
c000a625:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a629:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000a62d:	89 c8                	mov    eax,ecx
c000a62f:	0f b7 d8             	movzx  ebx,ax
c000a632:	0f b7 ca             	movzx  ecx,dx
c000a635:	39 cb                	cmp    ebx,ecx
c000a637:	76 03                	jbe    c000a63c <tcp_slowtmr+0x254>
c000a639:	89 d0                	mov    eax,edx
c000a63b:	90                   	nop
c000a63c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000a641:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000a646:	d1 e8                	shr    eax,1
c000a648:	89 c2                	mov    edx,eax
c000a64a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a64e:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000a652:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a656:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000a659:	0f b7 d0             	movzx  edx,ax
c000a65c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a660:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a663:	0f b7 c0             	movzx  eax,ax
c000a666:	d1 e0                	shl    eax,1
c000a668:	39 c2                	cmp    edx,eax
c000a66a:	7d 14                	jge    c000a680 <tcp_slowtmr+0x298>
c000a66c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a670:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a673:	d1 e0                	shl    eax,1
c000a675:	89 c2                	mov    edx,eax
c000a677:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a67b:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000a67f:	90                   	nop
c000a680:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a684:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a687:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a68b:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000a68f:	83 ec 0c             	sub    esp,0xc
c000a692:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a696:	e8 21 60 00 00       	call   c00106bc <tcp_rexmit_rto>
c000a69b:	83 c4 10             	add    esp,0x10
c000a69e:	66 90                	xchg   ax,ax
c000a6a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6a4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a6a7:	83 f8 06             	cmp    eax,0x6
c000a6aa:	75 24                	jne    c000a6d0 <tcp_slowtmr+0x2e8>
c000a6ac:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000a6b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6b6:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a6b9:	29 c2                	sub    edx,eax
c000a6bb:	89 d0                	mov    eax,edx
c000a6bd:	83 f8 28             	cmp    eax,0x28
c000a6c0:	76 0e                	jbe    c000a6d0 <tcp_slowtmr+0x2e8>
c000a6c2:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a6c6:	83 c0 01             	add    eax,0x1
c000a6c9:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a6cd:	8d 76 00             	lea    esi,[esi+0x0]
c000a6d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6d4:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000a6d7:	0f b6 c0             	movzx  eax,al
c000a6da:	83 e0 08             	and    eax,0x8
c000a6dd:	0f 84 cd 00 00 00    	je     c000a7b0 <tcp_slowtmr+0x3c8>
c000a6e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6e7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a6ea:	83 f8 04             	cmp    eax,0x4
c000a6ed:	74 11                	je     c000a700 <tcp_slowtmr+0x318>
c000a6ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a6f6:	83 f8 07             	cmp    eax,0x7
c000a6f9:	0f 85 b1 00 00 00    	jne    c000a7b0 <tcp_slowtmr+0x3c8>
c000a6ff:	90                   	nop
c000a700:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000a706:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a70a:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a70d:	89 d1                	mov    ecx,edx
c000a70f:	29 c1                	sub    ecx,eax
c000a711:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a715:	8b 80 9c 00 00 00    	mov    eax,DWORD PTR [eax+0x9c]
c000a71b:	05 b8 4c 0a 00       	add    eax,0xa4cb8
c000a720:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a725:	f7 e2                	mul    edx
c000a727:	89 d0                	mov    eax,edx
c000a729:	c1 e8 05             	shr    eax,0x5
c000a72c:	39 c1                	cmp    ecx,eax
c000a72e:	76 18                	jbe    c000a748 <tcp_slowtmr+0x360>
c000a730:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a734:	83 c0 01             	add    eax,0x1
c000a737:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a73b:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c000a73f:	83 c0 01             	add    eax,0x1
c000a742:	88 44 24 16          	mov    BYTE PTR [esp+0x16],al
c000a746:	eb 68                	jmp    c000a7b0 <tcp_slowtmr+0x3c8>
c000a748:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000a74e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a752:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a755:	89 d1                	mov    ecx,edx
c000a757:	29 c1                	sub    ecx,eax
c000a759:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a75d:	8b 90 9c 00 00 00    	mov    edx,DWORD PTR [eax+0x9c]
c000a763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a767:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a76d:	0f b6 c0             	movzx  eax,al
c000a770:	69 c0 f8 24 01 00    	imul   eax,eax,0x124f8
c000a776:	01 d0                	add    eax,edx
c000a778:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a77d:	f7 e2                	mul    edx
c000a77f:	89 d0                	mov    eax,edx
c000a781:	c1 e8 05             	shr    eax,0x5
c000a784:	39 c1                	cmp    ecx,eax
c000a786:	76 28                	jbe    c000a7b0 <tcp_slowtmr+0x3c8>
c000a788:	83 ec 0c             	sub    esp,0xc
c000a78b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a78f:	e8 6c 61 00 00       	call   c0010900 <tcp_keepalive>
c000a794:	83 c4 10             	add    esp,0x10
c000a797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a79b:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a7a1:	83 c0 01             	add    eax,0x1
c000a7a4:	88 c2                	mov    dl,al
c000a7a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7aa:	88 90 a5 00 00 00    	mov    BYTE PTR [eax+0xa5],dl
c000a7b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7b4:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a7ba:	85 c0                	test   eax,eax
c000a7bc:	74 4e                	je     c000a80c <tcp_slowtmr+0x424>
c000a7be:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000a7c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7c8:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a7cb:	89 d1                	mov    ecx,edx
c000a7cd:	29 c1                	sub    ecx,eax
c000a7cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7d3:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a7d6:	0f bf d0             	movsx  edx,ax
c000a7d9:	89 d0                	mov    eax,edx
c000a7db:	d1 e0                	shl    eax,1
c000a7dd:	01 d0                	add    eax,edx
c000a7df:	d1 e0                	shl    eax,1
c000a7e1:	39 c1                	cmp    ecx,eax
c000a7e3:	72 27                	jb     c000a80c <tcp_slowtmr+0x424>
c000a7e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7e9:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a7ef:	83 ec 0c             	sub    esp,0xc
c000a7f2:	50                   	push   eax
c000a7f3:	e8 ec f9 ff ff       	call   c000a1e4 <tcp_segs_free>
c000a7f8:	83 c4 10             	add    esp,0x10
c000a7fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7ff:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a809:	8d 76 00             	lea    esi,[esi+0x0]
c000a80c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a810:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a813:	83 f8 03             	cmp    eax,0x3
c000a816:	75 24                	jne    c000a83c <tcp_slowtmr+0x454>
c000a818:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000a81e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a822:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a825:	29 c2                	sub    edx,eax
c000a827:	89 d0                	mov    eax,edx
c000a829:	83 f8 28             	cmp    eax,0x28
c000a82c:	76 0e                	jbe    c000a83c <tcp_slowtmr+0x454>
c000a82e:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a832:	83 c0 01             	add    eax,0x1
c000a835:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a839:	8d 76 00             	lea    esi,[esi+0x0]
c000a83c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a840:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a843:	83 f8 09             	cmp    eax,0x9
c000a846:	75 24                	jne    c000a86c <tcp_slowtmr+0x484>
c000a848:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000a84e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a852:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a855:	29 c2                	sub    edx,eax
c000a857:	89 d0                	mov    eax,edx
c000a859:	3d f0 00 00 00       	cmp    eax,0xf0
c000a85e:	76 0c                	jbe    c000a86c <tcp_slowtmr+0x484>
c000a860:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a864:	83 c0 01             	add    eax,0x1
c000a867:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a86b:	90                   	nop
c000a86c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000a871:	85 c0                	test   eax,eax
c000a873:	0f 84 13 01 00 00    	je     c000a98c <tcp_slowtmr+0x5a4>
c000a879:	83 ec 0c             	sub    esp,0xc
c000a87c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a880:	e8 7f fa ff ff       	call   c000a304 <tcp_pcb_purge>
c000a885:	83 c4 10             	add    esp,0x10
c000a888:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a88d:	74 31                	je     c000a8c0 <tcp_slowtmr+0x4d8>
c000a88f:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000a894:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a898:	75 16                	jne    c000a8b0 <tcp_slowtmr+0x4c8>
c000a89a:	83 ec 08             	sub    esp,0x8
c000a89d:	68 d8 09 03 c0       	push   0xc00309d8
c000a8a2:	68 46 03 03 c0       	push   0xc0030346
c000a8a7:	e8 a0 55 01 00       	call   c001fe4c <CPrintf>
c000a8ac:	83 c4 10             	add    esp,0x10
c000a8af:	90                   	nop
c000a8b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8b4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a8b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a8bb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a8be:	eb 2c                	jmp    c000a8ec <tcp_slowtmr+0x504>
c000a8c0:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000a8c5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a8c9:	74 15                	je     c000a8e0 <tcp_slowtmr+0x4f8>
c000a8cb:	83 ec 08             	sub    esp,0x8
c000a8ce:	68 04 0a 03 c0       	push   0xc0030a04
c000a8d3:	68 46 03 03 c0       	push   0xc0030346
c000a8d8:	e8 6f 55 01 00       	call   c001fe4c <CPrintf>
c000a8dd:	83 c4 10             	add    esp,0x10
c000a8e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8e4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a8e7:	a3 70 78 03 c0       	mov    ds:0xc0037870,eax
c000a8ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8f0:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a8f6:	85 c0                	test   eax,eax
c000a8f8:	74 1e                	je     c000a918 <tcp_slowtmr+0x530>
c000a8fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8fe:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a904:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a908:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a90b:	83 ec 08             	sub    esp,0x8
c000a90e:	6a f6                	push   0xfffffff6
c000a910:	52                   	push   edx
c000a911:	ff d0                	call   eax
c000a913:	83 c4 10             	add    esp,0x10
c000a916:	66 90                	xchg   ax,ax
c000a918:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000a91d:	85 c0                	test   eax,eax
c000a91f:	74 3f                	je     c000a960 <tcp_slowtmr+0x578>
c000a921:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a925:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000a929:	0f b7 f0             	movzx  esi,ax
c000a92c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a930:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a933:	0f b7 d8             	movzx  ebx,ax
c000a936:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a93a:	8d 78 04             	lea    edi,[eax+0x4]
c000a93d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a945:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a948:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a94c:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000a94f:	83 ec 08             	sub    esp,0x8
c000a952:	56                   	push   esi
c000a953:	53                   	push   ebx
c000a954:	57                   	push   edi
c000a955:	51                   	push   ecx
c000a956:	52                   	push   edx
c000a957:	50                   	push   eax
c000a958:	e8 e3 5b 00 00       	call   c0010540 <tcp_rst>
c000a95d:	83 c4 20             	add    esp,0x20
c000a960:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a964:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a968:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a96c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a96f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a973:	83 ec 08             	sub    esp,0x8
c000a976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a97a:	6a 02                	push   0x2
c000a97c:	e8 d3 d2 ff ff       	call   c0007c54 <memp_free>
c000a981:	83 c4 10             	add    esp,0x10
c000a984:	e9 9b 00 00 00       	jmp    c000aa24 <tcp_slowtmr+0x63c>
c000a989:	8d 76 00             	lea    esi,[esi+0x0]
c000a98c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a990:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a994:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a998:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a99b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a99f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9a3:	8a 40 38             	mov    al,BYTE PTR [eax+0x38]
c000a9a6:	83 c0 01             	add    eax,0x1
c000a9a9:	88 c2                	mov    dl,al
c000a9ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9af:	88 50 38             	mov    BYTE PTR [eax+0x38],dl
c000a9b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9b6:	8a 50 38             	mov    dl,BYTE PTR [eax+0x38]
c000a9b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9bd:	8a 40 39             	mov    al,BYTE PTR [eax+0x39]
c000a9c0:	0f b6 d2             	movzx  edx,dl
c000a9c3:	0f b6 c0             	movzx  eax,al
c000a9c6:	39 c2                	cmp    edx,eax
c000a9c8:	72 5a                	jb     c000aa24 <tcp_slowtmr+0x63c>
c000a9ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9ce:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000a9d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9d6:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a9dc:	85 c0                	test   eax,eax
c000a9de:	74 24                	je     c000aa04 <tcp_slowtmr+0x61c>
c000a9e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9e4:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a9ea:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a9ee:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a9f1:	83 ec 08             	sub    esp,0x8
c000a9f4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a9f8:	52                   	push   edx
c000a9f9:	ff d0                	call   eax
c000a9fb:	83 c4 10             	add    esp,0x10
c000a9fe:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000aa02:	eb 08                	jmp    c000aa0c <tcp_slowtmr+0x624>
c000aa04:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000aa09:	8d 76 00             	lea    esi,[esi+0x0]
c000aa0c:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c000aa11:	85 c0                	test   eax,eax
c000aa13:	75 0f                	jne    c000aa24 <tcp_slowtmr+0x63c>
c000aa15:	83 ec 0c             	sub    esp,0xc
c000aa18:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aa1c:	e8 93 56 00 00       	call   c00100b4 <tcp_output>
c000aa21:	83 c4 10             	add    esp,0x10
c000aa24:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000aa29:	0f 85 e9 f9 ff ff    	jne    c000a418 <tcp_slowtmr+0x30>
c000aa2f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000aa37:	a1 84 78 03 c0       	mov    eax,ds:0xc0037884
c000aa3c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000aa40:	e9 0b 01 00 00       	jmp    c000ab50 <tcp_slowtmr+0x768>
c000aa45:	8d 76 00             	lea    esi,[esi+0x0]
c000aa48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa4c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aa4f:	83 f8 0a             	cmp    eax,0xa
c000aa52:	74 18                	je     c000aa6c <tcp_slowtmr+0x684>
c000aa54:	83 ec 08             	sub    esp,0x8
c000aa57:	68 30 0a 03 c0       	push   0xc0030a30
c000aa5c:	68 46 03 03 c0       	push   0xc0030346
c000aa61:	e8 e6 53 01 00       	call   c001fe4c <CPrintf>
c000aa66:	83 c4 10             	add    esp,0x10
c000aa69:	8d 76 00             	lea    esi,[esi+0x0]
c000aa6c:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000aa71:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000aa77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa7b:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000aa7e:	29 c2                	sub    edx,eax
c000aa80:	89 d0                	mov    eax,edx
c000aa82:	3d f0 00 00 00       	cmp    eax,0xf0
c000aa87:	76 0b                	jbe    c000aa94 <tcp_slowtmr+0x6ac>
c000aa89:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000aa8d:	83 c0 01             	add    eax,0x1
c000aa90:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000aa94:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000aa99:	85 c0                	test   eax,eax
c000aa9b:	0f 84 9b 00 00 00    	je     c000ab3c <tcp_slowtmr+0x754>
c000aaa1:	83 ec 0c             	sub    esp,0xc
c000aaa4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aaa8:	e8 57 f8 ff ff       	call   c000a304 <tcp_pcb_purge>
c000aaad:	83 c4 10             	add    esp,0x10
c000aab0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000aab5:	74 31                	je     c000aae8 <tcp_slowtmr+0x700>
c000aab7:	a1 84 78 03 c0       	mov    eax,ds:0xc0037884
c000aabc:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000aac0:	75 16                	jne    c000aad8 <tcp_slowtmr+0x6f0>
c000aac2:	83 ec 08             	sub    esp,0x8
c000aac5:	68 60 0a 03 c0       	push   0xc0030a60
c000aaca:	68 46 03 03 c0       	push   0xc0030346
c000aacf:	e8 78 53 01 00       	call   c001fe4c <CPrintf>
c000aad4:	83 c4 10             	add    esp,0x10
c000aad7:	90                   	nop
c000aad8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aadc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000aadf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aae3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000aae6:	eb 2c                	jmp    c000ab14 <tcp_slowtmr+0x72c>
c000aae8:	a1 84 78 03 c0       	mov    eax,ds:0xc0037884
c000aaed:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000aaf1:	74 15                	je     c000ab08 <tcp_slowtmr+0x720>
c000aaf3:	83 ec 08             	sub    esp,0x8
c000aaf6:	68 88 0a 03 c0       	push   0xc0030a88
c000aafb:	68 46 03 03 c0       	push   0xc0030346
c000ab00:	e8 47 53 01 00       	call   c001fe4c <CPrintf>
c000ab05:	83 c4 10             	add    esp,0x10
c000ab08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab0c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab0f:	a3 84 78 03 c0       	mov    ds:0xc0037884,eax
c000ab14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab20:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab23:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ab27:	83 ec 08             	sub    esp,0x8
c000ab2a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ab2e:	6a 02                	push   0x2
c000ab30:	e8 1f d1 ff ff       	call   c0007c54 <memp_free>
c000ab35:	83 c4 10             	add    esp,0x10
c000ab38:	eb 16                	jmp    c000ab50 <tcp_slowtmr+0x768>
c000ab3a:	66 90                	xchg   ax,ax
c000ab3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab48:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ab4f:	90                   	nop
c000ab50:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000ab55:	0f 85 ed fe ff ff    	jne    c000aa48 <tcp_slowtmr+0x660>
c000ab5b:	90                   	nop
c000ab5c:	83 c4 20             	add    esp,0x20
c000ab5f:	5b                   	pop    ebx
c000ab60:	5e                   	pop    esi
c000ab61:	5f                   	pop    edi
c000ab62:	c3                   	ret    
c000ab63:	90                   	nop

c000ab64 <tcp_pcb_remove>:
c000ab64:	83 ec 0c             	sub    esp,0xc
c000ab67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab6b:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab6d:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000ab71:	75 11                	jne    c000ab84 <tcp_pcb_remove+0x20>
c000ab73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab77:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab79:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ab7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab80:	89 10                	mov    DWORD PTR [eax],edx
c000ab82:	eb 4c                	jmp    c000abd0 <tcp_pcb_remove+0x6c>
c000ab84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab88:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab8a:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000ab8f:	eb 33                	jmp    c000abc4 <tcp_pcb_remove+0x60>
c000ab91:	8d 76 00             	lea    esi,[esi+0x0]
c000ab94:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ab99:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab9c:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000aba0:	75 12                	jne    c000abb4 <tcp_pcb_remove+0x50>
c000aba2:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000aba7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000abab:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000abae:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000abb1:	eb 1d                	jmp    c000abd0 <tcp_pcb_remove+0x6c>
c000abb3:	90                   	nop
c000abb4:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000abb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000abbc:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000abc1:	8d 76 00             	lea    esi,[esi+0x0]
c000abc4:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000abc9:	85 c0                	test   eax,eax
c000abcb:	75 c7                	jne    c000ab94 <tcp_pcb_remove+0x30>
c000abcd:	8d 76 00             	lea    esi,[esi+0x0]
c000abd0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abd4:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000abe2:	e8 1d f7 ff ff       	call   c000a304 <tcp_pcb_purge>
c000abe7:	83 c4 10             	add    esp,0x10
c000abea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abee:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000abf1:	83 f8 0a             	cmp    eax,0xa
c000abf4:	74 3e                	je     c000ac34 <tcp_pcb_remove+0xd0>
c000abf6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abfa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000abfd:	83 f8 01             	cmp    eax,0x1
c000ac00:	74 32                	je     c000ac34 <tcp_pcb_remove+0xd0>
c000ac02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac06:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ac09:	0f b6 c0             	movzx  eax,al
c000ac0c:	83 e0 01             	and    eax,0x1
c000ac0f:	74 23                	je     c000ac34 <tcp_pcb_remove+0xd0>
c000ac11:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac15:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ac18:	83 c8 02             	or     eax,0x2
c000ac1b:	88 c2                	mov    dl,al
c000ac1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac21:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ac24:	83 ec 0c             	sub    esp,0xc
c000ac27:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ac2b:	e8 84 54 00 00       	call   c00100b4 <tcp_output>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	90                   	nop
c000ac34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac38:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ac3b:	83 f8 01             	cmp    eax,0x1
c000ac3e:	74 64                	je     c000aca4 <tcp_pcb_remove+0x140>
c000ac40:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac44:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ac47:	85 c0                	test   eax,eax
c000ac49:	74 15                	je     c000ac60 <tcp_pcb_remove+0xfc>
c000ac4b:	83 ec 08             	sub    esp,0x8
c000ac4e:	68 2e 0b 03 c0       	push   0xc0030b2e
c000ac53:	68 46 03 03 c0       	push   0xc0030346
c000ac58:	e8 ef 51 01 00       	call   c001fe4c <CPrintf>
c000ac5d:	83 c4 10             	add    esp,0x10
c000ac60:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac64:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ac67:	85 c0                	test   eax,eax
c000ac69:	74 15                	je     c000ac80 <tcp_pcb_remove+0x11c>
c000ac6b:	83 ec 08             	sub    esp,0x8
c000ac6e:	68 46 0b 03 c0       	push   0xc0030b46
c000ac73:	68 46 03 03 c0       	push   0xc0030346
c000ac78:	e8 cf 51 01 00       	call   c001fe4c <CPrintf>
c000ac7d:	83 c4 10             	add    esp,0x10
c000ac80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac84:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ac8a:	85 c0                	test   eax,eax
c000ac8c:	74 16                	je     c000aca4 <tcp_pcb_remove+0x140>
c000ac8e:	83 ec 08             	sub    esp,0x8
c000ac91:	68 5f 0b 03 c0       	push   0xc0030b5f
c000ac96:	68 46 03 03 c0       	push   0xc0030346
c000ac9b:	e8 ac 51 01 00       	call   c001fe4c <CPrintf>
c000aca0:	83 c4 10             	add    esp,0x10
c000aca3:	90                   	nop
c000aca4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aca8:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000acaf:	90                   	nop
c000acb0:	83 c4 0c             	add    esp,0xc
c000acb3:	c3                   	ret    

c000acb4 <tcp_close_shutdown>:
c000acb4:	57                   	push   edi
c000acb5:	56                   	push   esi
c000acb6:	53                   	push   ebx
c000acb7:	83 ec 20             	sub    esp,0x20
c000acba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000acbe:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000acc2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000acc7:	85 c0                	test   eax,eax
c000acc9:	0f 84 41 01 00 00    	je     c000ae10 <tcp_close_shutdown+0x15c>
c000accf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000acd3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000acd6:	83 f8 01             	cmp    eax,0x1
c000acd9:	0f 84 31 01 00 00    	je     c000ae10 <tcp_close_shutdown+0x15c>
c000acdf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ace3:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000ace9:	85 c0                	test   eax,eax
c000aceb:	75 17                	jne    c000ad04 <tcp_close_shutdown+0x50>
c000aced:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000acf1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000acf4:	0f b7 c0             	movzx  eax,ax
c000acf7:	3d 60 08 00 00       	cmp    eax,0x860
c000acfc:	0f 84 0e 01 00 00    	je     c000ae10 <tcp_close_shutdown+0x15c>
c000ad02:	66 90                	xchg   ax,ax
c000ad04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad08:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ad0b:	0f b6 c0             	movzx  eax,al
c000ad0e:	83 e0 10             	and    eax,0x10
c000ad11:	75 15                	jne    c000ad28 <tcp_close_shutdown+0x74>
c000ad13:	83 ec 08             	sub    esp,0x8
c000ad16:	68 76 0b 03 c0       	push   0xc0030b76
c000ad1b:	68 46 03 03 c0       	push   0xc0030346
c000ad20:	e8 27 51 01 00       	call   c001fe4c <CPrintf>
c000ad25:	83 c4 10             	add    esp,0x10
c000ad28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad2c:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ad30:	0f b7 f0             	movzx  esi,ax
c000ad33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad37:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ad3a:	0f b7 d8             	movzx  ebx,ax
c000ad3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad41:	8d 78 04             	lea    edi,[eax+0x4]
c000ad44:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ad48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad4c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ad4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad53:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000ad56:	83 ec 08             	sub    esp,0x8
c000ad59:	56                   	push   esi
c000ad5a:	53                   	push   ebx
c000ad5b:	57                   	push   edi
c000ad5c:	51                   	push   ecx
c000ad5d:	52                   	push   edx
c000ad5e:	50                   	push   eax
c000ad5f:	e8 dc 57 00 00       	call   c0010540 <tcp_rst>
c000ad64:	83 c4 20             	add    esp,0x20
c000ad67:	83 ec 0c             	sub    esp,0xc
c000ad6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad6e:	e8 91 f5 ff ff       	call   c000a304 <tcp_pcb_purge>
c000ad73:	83 c4 10             	add    esp,0x10
c000ad76:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000ad7b:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ad7f:	75 0f                	jne    c000ad90 <tcp_close_shutdown+0xdc>
c000ad81:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000ad86:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ad89:	a3 70 78 03 c0       	mov    ds:0xc0037870,eax
c000ad8e:	eb 48                	jmp    c000add8 <tcp_close_shutdown+0x124>
c000ad90:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000ad95:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000ad9a:	eb 30                	jmp    c000adcc <tcp_close_shutdown+0x118>
c000ad9c:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ada1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ada4:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ada8:	75 12                	jne    c000adbc <tcp_close_shutdown+0x108>
c000adaa:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000adaf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000adb3:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000adb6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000adb9:	eb 1d                	jmp    c000add8 <tcp_close_shutdown+0x124>
c000adbb:	90                   	nop
c000adbc:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000adc1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000adc4:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000adc9:	8d 76 00             	lea    esi,[esi+0x0]
c000adcc:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000add1:	85 c0                	test   eax,eax
c000add3:	75 c7                	jne    c000ad9c <tcp_close_shutdown+0xe8>
c000add5:	8d 76 00             	lea    esi,[esi+0x0]
c000add8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000addc:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ade3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ade7:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000adee:	8b 15 84 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037884
c000adf4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adf8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000adfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adff:	a3 84 78 03 c0       	mov    ds:0xc0037884,eax
c000ae04:	e8 53 5f 00 00       	call   c0010d5c <tcp_timer_needed>
c000ae09:	b0 00                	mov    al,0x0
c000ae0b:	e9 f4 01 00 00       	jmp    c000b004 <tcp_close_shutdown+0x350>
c000ae10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae14:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ae17:	83 f8 07             	cmp    eax,0x7
c000ae1a:	0f 87 a4 01 00 00    	ja     c000afc4 <tcp_close_shutdown+0x310>
c000ae20:	8b 04 85 00 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf400]
c000ae27:	ff e0                	jmp    eax
c000ae29:	8d 76 00             	lea    esi,[esi+0x0]
c000ae2c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ae31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae35:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ae38:	0f b7 c0             	movzx  eax,ax
c000ae3b:	85 c0                	test   eax,eax
c000ae3d:	74 71                	je     c000aeb0 <tcp_close_shutdown+0x1fc>
c000ae3f:	a1 80 78 03 c0       	mov    eax,ds:0xc0037880
c000ae44:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ae48:	75 12                	jne    c000ae5c <tcp_close_shutdown+0x1a8>
c000ae4a:	a1 80 78 03 c0       	mov    eax,ds:0xc0037880
c000ae4f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae52:	a3 80 78 03 c0       	mov    ds:0xc0037880,eax
c000ae57:	eb 4b                	jmp    c000aea4 <tcp_close_shutdown+0x1f0>
c000ae59:	8d 76 00             	lea    esi,[esi+0x0]
c000ae5c:	a1 80 78 03 c0       	mov    eax,ds:0xc0037880
c000ae61:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000ae66:	eb 30                	jmp    c000ae98 <tcp_close_shutdown+0x1e4>
c000ae68:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ae6d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae70:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ae74:	75 12                	jne    c000ae88 <tcp_close_shutdown+0x1d4>
c000ae76:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ae7b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ae7f:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ae82:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ae85:	eb 1d                	jmp    c000aea4 <tcp_close_shutdown+0x1f0>
c000ae87:	90                   	nop
c000ae88:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ae8d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae90:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000ae95:	8d 76 00             	lea    esi,[esi+0x0]
c000ae98:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ae9d:	85 c0                	test   eax,eax
c000ae9f:	75 c7                	jne    c000ae68 <tcp_close_shutdown+0x1b4>
c000aea1:	8d 76 00             	lea    esi,[esi+0x0]
c000aea4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aea8:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000aeaf:	90                   	nop
c000aeb0:	83 ec 08             	sub    esp,0x8
c000aeb3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000aeb7:	6a 02                	push   0x2
c000aeb9:	e8 96 cd ff ff       	call   c0007c54 <memp_free>
c000aebe:	83 c4 10             	add    esp,0x10
c000aec1:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000aec9:	e9 12 01 00 00       	jmp    c000afe0 <tcp_close_shutdown+0x32c>
c000aece:	66 90                	xchg   ax,ax
c000aed0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000aed5:	83 ec 08             	sub    esp,0x8
c000aed8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000aedc:	68 78 78 03 c0       	push   0xc0037878
c000aee1:	e8 7e fc ff ff       	call   c000ab64 <tcp_pcb_remove>
c000aee6:	83 c4 10             	add    esp,0x10
c000aee9:	83 ec 08             	sub    esp,0x8
c000aeec:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000aef0:	6a 03                	push   0x3
c000aef2:	e8 5d cd ff ff       	call   c0007c54 <memp_free>
c000aef7:	83 c4 10             	add    esp,0x10
c000aefa:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000af02:	e9 d9 00 00 00       	jmp    c000afe0 <tcp_close_shutdown+0x32c>
c000af07:	90                   	nop
c000af08:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000af0d:	83 ec 08             	sub    esp,0x8
c000af10:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000af14:	68 70 78 03 c0       	push   0xc0037870
c000af19:	e8 46 fc ff ff       	call   c000ab64 <tcp_pcb_remove>
c000af1e:	83 c4 10             	add    esp,0x10
c000af21:	83 ec 08             	sub    esp,0x8
c000af24:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000af28:	6a 02                	push   0x2
c000af2a:	e8 25 cd ff ff       	call   c0007c54 <memp_free>
c000af2f:	83 c4 10             	add    esp,0x10
c000af32:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000af3a:	e9 a1 00 00 00       	jmp    c000afe0 <tcp_close_shutdown+0x32c>
c000af3f:	90                   	nop
c000af40:	83 ec 0c             	sub    esp,0xc
c000af43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000af47:	e8 b8 4d 00 00       	call   c000fd04 <tcp_send_fin>
c000af4c:	83 c4 10             	add    esp,0x10
c000af4f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000af53:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000af58:	85 c0                	test   eax,eax
c000af5a:	75 78                	jne    c000afd4 <tcp_close_shutdown+0x320>
c000af5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af60:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000af67:	eb 6b                	jmp    c000afd4 <tcp_close_shutdown+0x320>
c000af69:	8d 76 00             	lea    esi,[esi+0x0]
c000af6c:	83 ec 0c             	sub    esp,0xc
c000af6f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000af73:	e8 8c 4d 00 00       	call   c000fd04 <tcp_send_fin>
c000af78:	83 c4 10             	add    esp,0x10
c000af7b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000af7f:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000af84:	85 c0                	test   eax,eax
c000af86:	75 50                	jne    c000afd8 <tcp_close_shutdown+0x324>
c000af88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af8c:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000af93:	eb 43                	jmp    c000afd8 <tcp_close_shutdown+0x324>
c000af95:	8d 76 00             	lea    esi,[esi+0x0]
c000af98:	83 ec 0c             	sub    esp,0xc
c000af9b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000af9f:	e8 60 4d 00 00       	call   c000fd04 <tcp_send_fin>
c000afa4:	83 c4 10             	add    esp,0x10
c000afa7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000afab:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000afb0:	85 c0                	test   eax,eax
c000afb2:	75 28                	jne    c000afdc <tcp_close_shutdown+0x328>
c000afb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000afb8:	c7 40 10 09 00 00 00 	mov    DWORD PTR [eax+0x10],0x9
c000afbf:	eb 1b                	jmp    c000afdc <tcp_close_shutdown+0x328>
c000afc1:	8d 76 00             	lea    esi,[esi+0x0]
c000afc4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000afc9:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000afd1:	eb 0d                	jmp    c000afe0 <tcp_close_shutdown+0x32c>
c000afd3:	90                   	nop
c000afd4:	90                   	nop
c000afd5:	eb 09                	jmp    c000afe0 <tcp_close_shutdown+0x32c>
c000afd7:	90                   	nop
c000afd8:	90                   	nop
c000afd9:	eb 05                	jmp    c000afe0 <tcp_close_shutdown+0x32c>
c000afdb:	90                   	nop
c000afdc:	90                   	nop
c000afdd:	8d 76 00             	lea    esi,[esi+0x0]
c000afe0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000afe5:	74 19                	je     c000b000 <tcp_close_shutdown+0x34c>
c000afe7:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000afec:	85 c0                	test   eax,eax
c000afee:	75 10                	jne    c000b000 <tcp_close_shutdown+0x34c>
c000aff0:	83 ec 0c             	sub    esp,0xc
c000aff3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aff7:	e8 b8 50 00 00       	call   c00100b4 <tcp_output>
c000affc:	83 c4 10             	add    esp,0x10
c000afff:	90                   	nop
c000b000:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000b004:	83 c4 20             	add    esp,0x20
c000b007:	5b                   	pop    ebx
c000b008:	5e                   	pop    esi
c000b009:	5f                   	pop    edi
c000b00a:	c3                   	ret    
c000b00b:	90                   	nop

c000b00c <tcp_close>:
c000b00c:	83 ec 0c             	sub    esp,0xc
c000b00f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b013:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b016:	83 f8 01             	cmp    eax,0x1
c000b019:	74 15                	je     c000b030 <tcp_close+0x24>
c000b01b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b01f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b022:	83 c8 10             	or     eax,0x10
c000b025:	88 c2                	mov    dl,al
c000b027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b02b:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b02e:	66 90                	xchg   ax,ax
c000b030:	83 ec 08             	sub    esp,0x8
c000b033:	6a 01                	push   0x1
c000b035:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b039:	e8 76 fc ff ff       	call   c000acb4 <tcp_close_shutdown>
c000b03e:	83 c4 10             	add    esp,0x10
c000b041:	83 c4 0c             	add    esp,0xc
c000b044:	c3                   	ret    
c000b045:	8d 76 00             	lea    esi,[esi+0x0]

c000b048 <tcp_recv_null>:
c000b048:	83 ec 1c             	sub    esp,0x1c
c000b04b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b04f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b053:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000b058:	74 2e                	je     c000b088 <tcp_recv_null+0x40>
c000b05a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b05e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b061:	0f b7 c0             	movzx  eax,ax
c000b064:	83 ec 08             	sub    esp,0x8
c000b067:	50                   	push   eax
c000b068:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b06c:	e8 b3 ee ff ff       	call   c0009f24 <tcp_recved>
c000b071:	83 c4 10             	add    esp,0x10
c000b074:	83 ec 0c             	sub    esp,0xc
c000b077:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b07b:	e8 94 d4 ff ff       	call   c0008514 <pbuf_free>
c000b080:	83 c4 10             	add    esp,0x10
c000b083:	eb 1f                	jmp    c000b0a4 <tcp_recv_null+0x5c>
c000b085:	8d 76 00             	lea    esi,[esi+0x0]
c000b088:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c000b08d:	85 c0                	test   eax,eax
c000b08f:	75 13                	jne    c000b0a4 <tcp_recv_null+0x5c>
c000b091:	83 ec 0c             	sub    esp,0xc
c000b094:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b098:	e8 6f ff ff ff       	call   c000b00c <tcp_close>
c000b09d:	83 c4 10             	add    esp,0x10
c000b0a0:	eb 06                	jmp    c000b0a8 <tcp_recv_null+0x60>
c000b0a2:	66 90                	xchg   ax,ax
c000b0a4:	b0 00                	mov    al,0x0
c000b0a6:	66 90                	xchg   ax,ax
c000b0a8:	83 c4 1c             	add    esp,0x1c
c000b0ab:	c3                   	ret    

c000b0ac <tcp_fasttmr>:
c000b0ac:	83 ec 1c             	sub    esp,0x1c
c000b0af:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000b0b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b0b8:	e9 03 01 00 00       	jmp    c000b1c0 <tcp_fasttmr+0x114>
c000b0bd:	8d 76 00             	lea    esi,[esi+0x0]
c000b0c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0c4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b0c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b0cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0cf:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b0d5:	85 c0                	test   eax,eax
c000b0d7:	0f 84 8f 00 00 00    	je     c000b16c <tcp_fasttmr+0xc0>
c000b0dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0e1:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000b0e7:	85 c0                	test   eax,eax
c000b0e9:	74 31                	je     c000b11c <tcp_fasttmr+0x70>
c000b0eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0ef:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000b0f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b0f9:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000b0ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b103:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000b106:	6a 00                	push   0x0
c000b108:	51                   	push   ecx
c000b109:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b10d:	52                   	push   edx
c000b10e:	ff d0                	call   eax
c000b110:	83 c4 10             	add    esp,0x10
c000b113:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000b117:	eb 23                	jmp    c000b13c <tcp_fasttmr+0x90>
c000b119:	8d 76 00             	lea    esi,[esi+0x0]
c000b11c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b120:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b126:	6a 00                	push   0x0
c000b128:	50                   	push   eax
c000b129:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b12d:	6a 00                	push   0x0
c000b12f:	e8 14 ff ff ff       	call   c000b048 <tcp_recv_null>
c000b134:	83 c4 10             	add    esp,0x10
c000b137:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000b13b:	90                   	nop
c000b13c:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000b141:	85 c0                	test   eax,eax
c000b143:	75 13                	jne    c000b158 <tcp_fasttmr+0xac>
c000b145:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b149:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000b153:	eb 17                	jmp    c000b16c <tcp_fasttmr+0xc0>
c000b155:	8d 76 00             	lea    esi,[esi+0x0]
c000b158:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000b15d:	83 f8 f6             	cmp    eax,0xfffffff6
c000b160:	75 0a                	jne    c000b16c <tcp_fasttmr+0xc0>
c000b162:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b16a:	66 90                	xchg   ax,ax
c000b16c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b171:	74 45                	je     c000b1b8 <tcp_fasttmr+0x10c>
c000b173:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b177:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b17a:	0f b6 c0             	movzx  eax,al
c000b17d:	83 e0 01             	and    eax,0x1
c000b180:	74 36                	je     c000b1b8 <tcp_fasttmr+0x10c>
c000b182:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b186:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b189:	83 c8 02             	or     eax,0x2
c000b18c:	88 c2                	mov    dl,al
c000b18e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b192:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b195:	83 ec 0c             	sub    esp,0xc
c000b198:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b19c:	e8 13 4f 00 00       	call   c00100b4 <tcp_output>
c000b1a1:	83 c4 10             	add    esp,0x10
c000b1a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b1a8:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b1ab:	83 e0 fc             	and    eax,0xfffffffc
c000b1ae:	88 c2                	mov    dl,al
c000b1b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b1b4:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b1b7:	90                   	nop
c000b1b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b1c0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b1c5:	0f 85 f5 fe ff ff    	jne    c000b0c0 <tcp_fasttmr+0x14>
c000b1cb:	90                   	nop
c000b1cc:	83 c4 1c             	add    esp,0x1c
c000b1cf:	c3                   	ret    

c000b1d0 <tcp_tmr>:
c000b1d0:	83 ec 0c             	sub    esp,0xc
c000b1d3:	e8 d4 fe ff ff       	call   c000b0ac <tcp_fasttmr>
c000b1d8:	a0 a0 b8 03 c0       	mov    al,ds:0xc003b8a0
c000b1dd:	83 c0 01             	add    eax,0x1
c000b1e0:	a2 a0 b8 03 c0       	mov    ds:0xc003b8a0,al
c000b1e5:	a0 a0 b8 03 c0       	mov    al,ds:0xc003b8a0
c000b1ea:	0f b6 c0             	movzx  eax,al
c000b1ed:	83 e0 01             	and    eax,0x1
c000b1f0:	74 06                	je     c000b1f8 <tcp_tmr+0x28>
c000b1f2:	e8 f1 f1 ff ff       	call   c000a3e8 <tcp_slowtmr>
c000b1f7:	90                   	nop
c000b1f8:	90                   	nop
c000b1f9:	83 c4 0c             	add    esp,0xc
c000b1fc:	c3                   	ret    
c000b1fd:	8d 76 00             	lea    esi,[esi+0x0]

c000b200 <tcp_shutdown>:
c000b200:	83 ec 0c             	sub    esp,0xc
c000b203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b207:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b20a:	83 f8 01             	cmp    eax,0x1
c000b20d:	75 09                	jne    c000b218 <tcp_shutdown+0x18>
c000b20f:	b0 f3                	mov    al,0xf3
c000b211:	e9 92 00 00 00       	jmp    c000b2a8 <tcp_shutdown+0xa8>
c000b216:	66 90                	xchg   ax,ax
c000b218:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b21d:	74 49                	je     c000b268 <tcp_shutdown+0x68>
c000b21f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b223:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b229:	85 c0                	test   eax,eax
c000b22b:	74 27                	je     c000b254 <tcp_shutdown+0x54>
c000b22d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b231:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b237:	83 ec 0c             	sub    esp,0xc
c000b23a:	50                   	push   eax
c000b23b:	e8 d4 d2 ff ff       	call   c0008514 <pbuf_free>
c000b240:	83 c4 10             	add    esp,0x10
c000b243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b247:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000b251:	8d 76 00             	lea    esi,[esi+0x0]
c000b254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b258:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b25b:	83 c8 10             	or     eax,0x10
c000b25e:	88 c2                	mov    dl,al
c000b260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b264:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b267:	90                   	nop
c000b268:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b26d:	74 2d                	je     c000b29c <tcp_shutdown+0x9c>
c000b26f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b273:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b276:	83 f8 03             	cmp    eax,0x3
c000b279:	72 25                	jb     c000b2a0 <tcp_shutdown+0xa0>
c000b27b:	83 f8 04             	cmp    eax,0x4
c000b27e:	76 08                	jbe    c000b288 <tcp_shutdown+0x88>
c000b280:	83 f8 07             	cmp    eax,0x7
c000b283:	75 1b                	jne    c000b2a0 <tcp_shutdown+0xa0>
c000b285:	8d 76 00             	lea    esi,[esi+0x0]
c000b288:	83 ec 08             	sub    esp,0x8
c000b28b:	6a 00                	push   0x0
c000b28d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b291:	e8 1e fa ff ff       	call   c000acb4 <tcp_close_shutdown>
c000b296:	83 c4 10             	add    esp,0x10
c000b299:	eb 0d                	jmp    c000b2a8 <tcp_shutdown+0xa8>
c000b29b:	90                   	nop
c000b29c:	90                   	nop
c000b29d:	eb 05                	jmp    c000b2a4 <tcp_shutdown+0xa4>
c000b29f:	90                   	nop
c000b2a0:	90                   	nop
c000b2a1:	8d 76 00             	lea    esi,[esi+0x0]
c000b2a4:	b0 00                	mov    al,0x0
c000b2a6:	66 90                	xchg   ax,ax
c000b2a8:	83 c4 0c             	add    esp,0xc
c000b2ab:	c3                   	ret    

c000b2ac <tcp_abandon>:
c000b2ac:	83 ec 2c             	sub    esp,0x2c
c000b2af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2b3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b2b6:	83 f8 01             	cmp    eax,0x1
c000b2b9:	75 15                	jne    c000b2d0 <tcp_abandon+0x24>
c000b2bb:	83 ec 08             	sub    esp,0x8
c000b2be:	68 b0 0a 03 c0       	push   0xc0030ab0
c000b2c3:	68 46 03 03 c0       	push   0xc0030346
c000b2c8:	e8 7f 4b 01 00       	call   c001fe4c <CPrintf>
c000b2cd:	83 c4 10             	add    esp,0x10
c000b2d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b2d7:	83 f8 0a             	cmp    eax,0xa
c000b2da:	75 2c                	jne    c000b308 <tcp_abandon+0x5c>
c000b2dc:	83 ec 08             	sub    esp,0x8
c000b2df:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b2e3:	68 84 78 03 c0       	push   0xc0037884
c000b2e8:	e8 77 f8 ff ff       	call   c000ab64 <tcp_pcb_remove>
c000b2ed:	83 c4 10             	add    esp,0x10
c000b2f0:	83 ec 08             	sub    esp,0x8
c000b2f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b2f7:	6a 02                	push   0x2
c000b2f9:	e8 56 c9 ff ff       	call   c0007c54 <memp_free>
c000b2fe:	83 c4 10             	add    esp,0x10
c000b301:	e9 32 01 00 00       	jmp    c000b438 <tcp_abandon+0x18c>
c000b306:	66 90                	xchg   ax,ax
c000b308:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b30c:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000b30f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b313:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b317:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b31a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b31e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b322:	8b 00                	mov    eax,DWORD PTR [eax]
c000b324:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b328:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b32c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b32f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b333:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b337:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b33a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000b33f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b343:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000b347:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c000b34c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b350:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000b356:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b35a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b35e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000b361:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b365:	83 ec 08             	sub    esp,0x8
c000b368:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b36c:	68 70 78 03 c0       	push   0xc0037870
c000b371:	e8 ee f7 ff ff       	call   c000ab64 <tcp_pcb_remove>
c000b376:	83 c4 10             	add    esp,0x10
c000b379:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b37d:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b380:	85 c0                	test   eax,eax
c000b382:	74 14                	je     c000b398 <tcp_abandon+0xec>
c000b384:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b388:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b38b:	83 ec 0c             	sub    esp,0xc
c000b38e:	50                   	push   eax
c000b38f:	e8 50 ee ff ff       	call   c000a1e4 <tcp_segs_free>
c000b394:	83 c4 10             	add    esp,0x10
c000b397:	90                   	nop
c000b398:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b39c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b39f:	85 c0                	test   eax,eax
c000b3a1:	74 15                	je     c000b3b8 <tcp_abandon+0x10c>
c000b3a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b3a7:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b3aa:	83 ec 0c             	sub    esp,0xc
c000b3ad:	50                   	push   eax
c000b3ae:	e8 31 ee ff ff       	call   c000a1e4 <tcp_segs_free>
c000b3b3:	83 c4 10             	add    esp,0x10
c000b3b6:	66 90                	xchg   ax,ax
c000b3b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b3bc:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b3c2:	85 c0                	test   eax,eax
c000b3c4:	74 16                	je     c000b3dc <tcp_abandon+0x130>
c000b3c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b3ca:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b3d0:	83 ec 0c             	sub    esp,0xc
c000b3d3:	50                   	push   eax
c000b3d4:	e8 0b ee ff ff       	call   c000a1e4 <tcp_segs_free>
c000b3d9:	83 c4 10             	add    esp,0x10
c000b3dc:	83 ec 08             	sub    esp,0x8
c000b3df:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b3e3:	6a 02                	push   0x2
c000b3e5:	e8 6a c8 ff ff       	call   c0007c54 <memp_free>
c000b3ea:	83 c4 10             	add    esp,0x10
c000b3ed:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000b3f2:	74 14                	je     c000b408 <tcp_abandon+0x15c>
c000b3f4:	83 ec 08             	sub    esp,0x8
c000b3f7:	6a f6                	push   0xfffffff6
c000b3f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b3fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b401:	ff d0                	call   eax
c000b403:	83 c4 10             	add    esp,0x10
c000b406:	66 90                	xchg   ax,ax
c000b408:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b40d:	74 29                	je     c000b438 <tcp_abandon+0x18c>
c000b40f:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c000b414:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c000b419:	83 ec 08             	sub    esp,0x8
c000b41c:	52                   	push   edx
c000b41d:	50                   	push   eax
c000b41e:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b422:	50                   	push   eax
c000b423:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b427:	50                   	push   eax
c000b428:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b42c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b430:	e8 0b 51 00 00       	call   c0010540 <tcp_rst>
c000b435:	83 c4 20             	add    esp,0x20
c000b438:	90                   	nop
c000b439:	83 c4 2c             	add    esp,0x2c
c000b43c:	c3                   	ret    
c000b43d:	8d 76 00             	lea    esi,[esi+0x0]

c000b440 <tcp_abort>:
c000b440:	83 ec 0c             	sub    esp,0xc
c000b443:	83 ec 08             	sub    esp,0x8
c000b446:	6a 01                	push   0x1
c000b448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b44c:	e8 5b fe ff ff       	call   c000b2ac <tcp_abandon>
c000b451:	83 c4 10             	add    esp,0x10
c000b454:	90                   	nop
c000b455:	83 c4 0c             	add    esp,0xc
c000b458:	c3                   	ret    
c000b459:	8d 76 00             	lea    esi,[esi+0x0]

c000b45c <tcp_kill_prio>:
c000b45c:	83 ec 2c             	sub    esp,0x2c
c000b45f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b463:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b467:	c6 44 24 13 7f       	mov    BYTE PTR [esp+0x13],0x7f
c000b46c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b474:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b47c:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000b481:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b485:	eb 75                	jmp    c000b4fc <tcp_kill_prio+0xa0>
c000b487:	90                   	nop
c000b488:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b48c:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b48f:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c000b494:	0f b6 c0             	movzx  eax,al
c000b497:	39 c2                	cmp    edx,eax
c000b499:	72 55                	jb     c000b4f0 <tcp_kill_prio+0x94>
c000b49b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b49f:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b4a2:	0f b6 54 24 13       	movzx  edx,BYTE PTR [esp+0x13]
c000b4a7:	0f b6 c0             	movzx  eax,al
c000b4aa:	39 c2                	cmp    edx,eax
c000b4ac:	72 42                	jb     c000b4f0 <tcp_kill_prio+0x94>
c000b4ae:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000b4b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4b8:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b4bb:	29 c2                	sub    edx,eax
c000b4bd:	89 d0                	mov    eax,edx
c000b4bf:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000b4c3:	77 2b                	ja     c000b4f0 <tcp_kill_prio+0x94>
c000b4c5:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000b4cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4cf:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b4d2:	29 c2                	sub    edx,eax
c000b4d4:	89 d0                	mov    eax,edx
c000b4d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b4da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b4e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4e6:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b4e9:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b4ed:	8d 76 00             	lea    esi,[esi+0x0]
c000b4f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4f4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b4f7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b4fb:	90                   	nop
c000b4fc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b501:	75 85                	jne    c000b488 <tcp_kill_prio+0x2c>
c000b503:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b508:	74 12                	je     c000b51c <tcp_kill_prio+0xc0>
c000b50a:	83 ec 0c             	sub    esp,0xc
c000b50d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b511:	e8 2a ff ff ff       	call   c000b440 <tcp_abort>
c000b516:	83 c4 10             	add    esp,0x10
c000b519:	8d 76 00             	lea    esi,[esi+0x0]
c000b51c:	90                   	nop
c000b51d:	83 c4 2c             	add    esp,0x2c
c000b520:	c3                   	ret    
c000b521:	8d 76 00             	lea    esi,[esi+0x0]

c000b524 <tcp_kill_timewait>:
c000b524:	83 ec 1c             	sub    esp,0x1c
c000b527:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b52f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000b537:	a1 84 78 03 c0       	mov    eax,ds:0xc0037884
c000b53c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b540:	eb 42                	jmp    c000b584 <tcp_kill_timewait+0x60>
c000b542:	66 90                	xchg   ax,ax
c000b544:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000b54a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b54e:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b551:	29 c2                	sub    edx,eax
c000b553:	89 d0                	mov    eax,edx
c000b555:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b559:	77 1d                	ja     c000b578 <tcp_kill_timewait+0x54>
c000b55b:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000b561:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b565:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b568:	29 c2                	sub    edx,eax
c000b56a:	89 d0                	mov    eax,edx
c000b56c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b570:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b574:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b578:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b57c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b57f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b583:	90                   	nop
c000b584:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b589:	75 b9                	jne    c000b544 <tcp_kill_timewait+0x20>
c000b58b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b590:	74 12                	je     c000b5a4 <tcp_kill_timewait+0x80>
c000b592:	83 ec 0c             	sub    esp,0xc
c000b595:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b599:	e8 a2 fe ff ff       	call   c000b440 <tcp_abort>
c000b59e:	83 c4 10             	add    esp,0x10
c000b5a1:	8d 76 00             	lea    esi,[esi+0x0]
c000b5a4:	90                   	nop
c000b5a5:	83 c4 1c             	add    esp,0x1c
c000b5a8:	c3                   	ret    
c000b5a9:	8d 76 00             	lea    esi,[esi+0x0]

c000b5ac <tcp_next_iss>:
c000b5ac:	8b 15 d0 44 03 c0    	mov    edx,DWORD PTR ds:0xc00344d0
c000b5b2:	a1 74 78 03 c0       	mov    eax,ds:0xc0037874
c000b5b7:	01 d0                	add    eax,edx
c000b5b9:	a3 d0 44 03 c0       	mov    ds:0xc00344d0,eax
c000b5be:	a1 d0 44 03 c0       	mov    eax,ds:0xc00344d0
c000b5c3:	c3                   	ret    

c000b5c4 <tcp_alloc>:
c000b5c4:	83 ec 2c             	sub    esp,0x2c
c000b5c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5cb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b5cf:	83 ec 0c             	sub    esp,0xc
c000b5d2:	6a 02                	push   0x2
c000b5d4:	e8 4f c5 ff ff       	call   c0007b28 <memp_malloc>
c000b5d9:	83 c4 10             	add    esp,0x10
c000b5dc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5e0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b5e5:	75 6d                	jne    c000b654 <tcp_alloc+0x90>
c000b5e7:	e8 38 ff ff ff       	call   c000b524 <tcp_kill_timewait>
c000b5ec:	83 ec 0c             	sub    esp,0xc
c000b5ef:	6a 02                	push   0x2
c000b5f1:	e8 32 c5 ff ff       	call   c0007b28 <memp_malloc>
c000b5f6:	83 c4 10             	add    esp,0x10
c000b5f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5fd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b602:	75 38                	jne    c000b63c <tcp_alloc+0x78>
c000b604:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000b609:	83 ec 0c             	sub    esp,0xc
c000b60c:	50                   	push   eax
c000b60d:	e8 4a fe ff ff       	call   c000b45c <tcp_kill_prio>
c000b612:	83 c4 10             	add    esp,0x10
c000b615:	83 ec 0c             	sub    esp,0xc
c000b618:	6a 02                	push   0x2
c000b61a:	e8 09 c5 ff ff       	call   c0007b28 <memp_malloc>
c000b61f:	83 c4 10             	add    esp,0x10
c000b622:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b626:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b62b:	74 0f                	je     c000b63c <tcp_alloc+0x78>
c000b62d:	66 a1 ec 77 03 c0    	mov    ax,ds:0xc00377ec
c000b633:	83 e8 01             	sub    eax,0x1
c000b636:	66 a3 ec 77 03 c0    	mov    ds:0xc00377ec,ax
c000b63c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b641:	74 11                	je     c000b654 <tcp_alloc+0x90>
c000b643:	66 a1 ec 77 03 c0    	mov    ax,ds:0xc00377ec
c000b649:	83 e8 01             	sub    eax,0x1
c000b64c:	66 a3 ec 77 03 c0    	mov    ds:0xc00377ec,ax
c000b652:	66 90                	xchg   ax,ax
c000b654:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b659:	0f 84 09 01 00 00    	je     c000b768 <tcp_alloc+0x1a4>
c000b65f:	83 ec 04             	sub    esp,0x4
c000b662:	68 a8 00 00 00       	push   0xa8
c000b667:	6a 00                	push   0x0
c000b669:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b66d:	e8 7e 4e ff ff       	call   c00004f0 <memset>
c000b672:	83 c4 10             	add    esp,0x10
c000b675:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b679:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000b67d:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000b680:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b684:	66 c7 40 72 00 01    	mov    WORD PTR [eax+0x72],0x100
c000b68a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b68e:	66 c7 40 74 00 00    	mov    WORD PTR [eax+0x74],0x0
c000b694:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b698:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b69e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6a2:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b6a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6ac:	c6 40 09 00          	mov    BYTE PTR [eax+0x9],0x0
c000b6b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6b4:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c000b6b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6bc:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b6c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6c6:	66 c7 40 4c 06 00    	mov    WORD PTR [eax+0x4c],0x6
c000b6cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6d0:	66 c7 40 48 00 00    	mov    WORD PTR [eax+0x48],0x0
c000b6d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6da:	66 c7 40 4a 06 00    	mov    WORD PTR [eax+0x4a],0x6
c000b6e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6e4:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000b6ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6ee:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b6f4:	e8 b3 fe ff ff       	call   c000b5ac <tcp_next_iss>
c000b6f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b6fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b701:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b705:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000b708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b70c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b710:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b713:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b717:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b71b:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b71e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b722:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b726:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b729:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000b72f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b733:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000b736:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b73a:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000b73e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b742:	c7 80 8c 00 00 00 48 b0 00 c0 	mov    DWORD PTR [eax+0x8c],0xc000b048
c000b74c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b750:	c7 80 9c 00 00 00 00 dd 6d 00 	mov    DWORD PTR [eax+0x9c],0x6ddd00
c000b75a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b75e:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000b765:	8d 76 00             	lea    esi,[esi+0x0]
c000b768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b76c:	83 c4 2c             	add    esp,0x2c
c000b76f:	c3                   	ret    

c000b770 <tcp_new>:
c000b770:	83 ec 0c             	sub    esp,0xc
c000b773:	83 ec 0c             	sub    esp,0xc
c000b776:	6a 40                	push   0x40
c000b778:	e8 47 fe ff ff       	call   c000b5c4 <tcp_alloc>
c000b77d:	83 c4 10             	add    esp,0x10
c000b780:	83 c4 0c             	add    esp,0xc
c000b783:	c3                   	ret    

c000b784 <tcp_eff_send_mss>:
c000b784:	53                   	push   ebx
c000b785:	83 ec 28             	sub    esp,0x28
c000b788:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b78c:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b791:	83 ec 0c             	sub    esp,0xc
c000b794:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b798:	e8 bf 80 00 00       	call   c001385c <ip_route>
c000b79d:	83 c4 10             	add    esp,0x10
c000b7a0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b7a4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b7a9:	74 3d                	je     c000b7e8 <tcp_eff_send_mss+0x64>
c000b7ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b7af:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b7b2:	0f b7 c0             	movzx  eax,ax
c000b7b5:	85 c0                	test   eax,eax
c000b7b7:	74 2f                	je     c000b7e8 <tcp_eff_send_mss+0x64>
c000b7b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b7bd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b7c0:	83 e8 28             	sub    eax,0x28
c000b7c3:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b7c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7cc:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000b7d1:	0f b7 d8             	movzx  ebx,ax
c000b7d4:	0f b7 ca             	movzx  ecx,dx
c000b7d7:	39 cb                	cmp    ebx,ecx
c000b7d9:	76 05                	jbe    c000b7e0 <tcp_eff_send_mss+0x5c>
c000b7db:	89 d0                	mov    eax,edx
c000b7dd:	8d 76 00             	lea    esi,[esi+0x0]
c000b7e0:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b7e5:	8d 76 00             	lea    esi,[esi+0x0]
c000b7e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b7ec:	83 c4 28             	add    esp,0x28
c000b7ef:	5b                   	pop    ebx
c000b7f0:	c3                   	ret    
c000b7f1:	8d 76 00             	lea    esi,[esi+0x0]

c000b7f4 <tcp_connect>:
c000b7f4:	83 ec 2c             	sub    esp,0x2c
c000b7f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b7fb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b800:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b804:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b807:	85 c0                	test   eax,eax
c000b809:	74 1d                	je     c000b828 <tcp_connect+0x34>
c000b80b:	83 ec 08             	sub    esp,0x8
c000b80e:	68 e4 0a 03 c0       	push   0xc0030ae4
c000b813:	68 46 03 03 c0       	push   0xc0030346
c000b818:	e8 2f 46 01 00       	call   c001fe4c <CPrintf>
c000b81d:	83 c4 10             	add    esp,0x10
c000b820:	b0 f7                	mov    al,0xf7
c000b822:	e9 41 02 00 00       	jmp    c000ba68 <tcp_connect+0x274>
c000b827:	90                   	nop
c000b828:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b82d:	74 25                	je     c000b854 <tcp_connect+0x60>
c000b82f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b833:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b837:	8b 12                	mov    edx,DWORD PTR [edx]
c000b839:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b83c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b840:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b844:	66 89 50 22          	mov    WORD PTR [eax+0x22],dx
c000b848:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b84c:	85 c0                	test   eax,eax
c000b84e:	74 18                	je     c000b868 <tcp_connect+0x74>
c000b850:	eb 0a                	jmp    c000b85c <tcp_connect+0x68>
c000b852:	66 90                	xchg   ax,ax
c000b854:	b0 fa                	mov    al,0xfa
c000b856:	e9 0d 02 00 00       	jmp    c000ba68 <tcp_connect+0x274>
c000b85b:	90                   	nop
c000b85c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b860:	8b 00                	mov    eax,DWORD PTR [eax]
c000b862:	85 c0                	test   eax,eax
c000b864:	75 3a                	jne    c000b8a0 <tcp_connect+0xac>
c000b866:	66 90                	xchg   ax,ax
c000b868:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b86c:	83 c0 04             	add    eax,0x4
c000b86f:	83 ec 0c             	sub    esp,0xc
c000b872:	50                   	push   eax
c000b873:	e8 e4 7f 00 00       	call   c001385c <ip_route>
c000b878:	83 c4 10             	add    esp,0x10
c000b87b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b87f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b884:	75 0a                	jne    c000b890 <tcp_connect+0x9c>
c000b886:	b0 fc                	mov    al,0xfc
c000b888:	e9 db 01 00 00       	jmp    c000ba68 <tcp_connect+0x274>
c000b88d:	8d 76 00             	lea    esi,[esi+0x0]
c000b890:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b894:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b897:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b89b:	89 10                	mov    DWORD PTR [eax],edx
c000b89d:	8d 76 00             	lea    esi,[esi+0x0]
c000b8a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8a4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b8a7:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b8ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8b0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b8b3:	0f b7 c0             	movzx  eax,ax
c000b8b6:	85 c0                	test   eax,eax
c000b8b8:	75 12                	jne    c000b8cc <tcp_connect+0xd8>
c000b8ba:	e8 21 e7 ff ff       	call   c0009fe0 <tcp_new_port>
c000b8bf:	89 c2                	mov    edx,eax
c000b8c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8c5:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c000b8c9:	8d 76 00             	lea    esi,[esi+0x0]
c000b8cc:	e8 db fc ff ff       	call   c000b5ac <tcp_next_iss>
c000b8d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8d9:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c000b8e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b8e8:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b8eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8ef:	8d 50 ff             	lea    edx,[eax-0x1]
c000b8f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8f6:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b8f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8fd:	8d 50 ff             	lea    edx,[eax-0x1]
c000b900:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b904:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b907:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b90b:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b911:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b915:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b91b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b91f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000b922:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b926:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000b929:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b92d:	66 c7 40 60 60 08    	mov    WORD PTR [eax+0x60],0x860
c000b933:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b937:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b93d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b941:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b944:	0f b7 c0             	movzx  eax,ax
c000b947:	83 ec 08             	sub    esp,0x8
c000b94a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b94e:	50                   	push   eax
c000b94f:	e8 30 fe ff ff       	call   c000b784 <tcp_eff_send_mss>
c000b954:	83 c4 10             	add    esp,0x10
c000b957:	89 c2                	mov    edx,eax
c000b959:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b95d:	66 89 50 3c          	mov    WORD PTR [eax+0x3c],dx
c000b961:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b965:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b96b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b96f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b972:	89 c2                	mov    edx,eax
c000b974:	c1 e2 02             	shl    edx,0x2
c000b977:	01 d0                	add    eax,edx
c000b979:	d1 e0                	shl    eax,1
c000b97b:	89 c2                	mov    edx,eax
c000b97d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b981:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000b985:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b989:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b98d:	89 90 90 00 00 00    	mov    DWORD PTR [eax+0x90],edx
c000b993:	83 ec 08             	sub    esp,0x8
c000b996:	6a 02                	push   0x2
c000b998:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b99c:	e8 73 40 00 00       	call   c000fa14 <tcp_enqueue_flags>
c000b9a1:	83 c4 10             	add    esp,0x10
c000b9a4:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b9a8:	0f be 44 24 13       	movsx  eax,BYTE PTR [esp+0x13]
c000b9ad:	85 c0                	test   eax,eax
c000b9af:	0f 85 af 00 00 00    	jne    c000ba64 <tcp_connect+0x270>
c000b9b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b9b9:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b9c0:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c000b9c5:	85 c0                	test   eax,eax
c000b9c7:	74 6f                	je     c000ba38 <tcp_connect+0x244>
c000b9c9:	a1 80 78 03 c0       	mov    eax,ds:0xc0037880
c000b9ce:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b9d2:	75 10                	jne    c000b9e4 <tcp_connect+0x1f0>
c000b9d4:	a1 80 78 03 c0       	mov    eax,ds:0xc0037880
c000b9d9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9dc:	a3 80 78 03 c0       	mov    ds:0xc0037880,eax
c000b9e1:	eb 49                	jmp    c000ba2c <tcp_connect+0x238>
c000b9e3:	90                   	nop
c000b9e4:	a1 80 78 03 c0       	mov    eax,ds:0xc0037880
c000b9e9:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000b9ee:	eb 30                	jmp    c000ba20 <tcp_connect+0x22c>
c000b9f0:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000b9f5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9f8:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b9fc:	75 12                	jne    c000ba10 <tcp_connect+0x21c>
c000b9fe:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ba03:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ba07:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ba0a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ba0d:	eb 1d                	jmp    c000ba2c <tcp_connect+0x238>
c000ba0f:	90                   	nop
c000ba10:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ba15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ba18:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000ba1d:	8d 76 00             	lea    esi,[esi+0x0]
c000ba20:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000ba25:	85 c0                	test   eax,eax
c000ba27:	75 c7                	jne    c000b9f0 <tcp_connect+0x1fc>
c000ba29:	8d 76 00             	lea    esi,[esi+0x0]
c000ba2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba30:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ba37:	90                   	nop
c000ba38:	8b 15 70 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037870
c000ba3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba42:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ba45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba49:	a3 70 78 03 c0       	mov    ds:0xc0037870,eax
c000ba4e:	e8 09 53 00 00       	call   c0010d5c <tcp_timer_needed>
c000ba53:	83 ec 0c             	sub    esp,0xc
c000ba56:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ba5a:	e8 55 46 00 00       	call   c00100b4 <tcp_output>
c000ba5f:	83 c4 10             	add    esp,0x10
c000ba62:	66 90                	xchg   ax,ax
c000ba64:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c000ba68:	83 c4 2c             	add    esp,0x2c
c000ba6b:	c3                   	ret    

c000ba6c <tcp_debug_state_str>:
c000ba6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba70:	8b 04 85 60 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf3a0]
c000ba77:	c3                   	ret    

c000ba78 <tcp_timewait_input>:
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 08             	sub    esp,0x8
c000ba7c:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000ba81:	0f b6 c0             	movzx  eax,al
c000ba84:	83 e0 04             	and    eax,0x4
c000ba87:	74 07                	je     c000ba90 <tcp_timewait_input+0x18>
c000ba89:	b0 00                	mov    al,0x0
c000ba8b:	e9 e8 00 00 00       	jmp    c000bb78 <tcp_timewait_input+0x100>
c000ba90:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000ba95:	0f b6 c0             	movzx  eax,al
c000ba98:	83 e0 02             	and    eax,0x2
c000ba9b:	0f 84 83 00 00 00    	je     c000bb24 <tcp_timewait_input+0xac>
c000baa1:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000baa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000baab:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000baae:	29 c2                	sub    edx,eax
c000bab0:	89 d0                	mov    eax,edx
c000bab2:	0f 88 88 00 00 00    	js     c000bb40 <tcp_timewait_input+0xc8>
c000bab8:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000babe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bac2:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000bac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bac9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000bacc:	0f b7 c0             	movzx  eax,ax
c000bacf:	01 c8                	add    eax,ecx
c000bad1:	29 c2                	sub    edx,eax
c000bad3:	89 d0                	mov    eax,edx
c000bad5:	85 c0                	test   eax,eax
c000bad7:	7f 67                	jg     c000bb40 <tcp_timewait_input+0xc8>
c000bad9:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000bade:	66 8b 00             	mov    ax,WORD PTR [eax]
c000bae1:	0f b7 c8             	movzx  ecx,ax
c000bae4:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000bae9:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000baed:	0f b7 d0             	movzx  edx,ax
c000baf0:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000baf6:	0f b7 d8             	movzx  ebx,ax
c000baf9:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000bafe:	01 c3                	add    ebx,eax
c000bb00:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000bb05:	83 ec 08             	sub    esp,0x8
c000bb08:	51                   	push   ecx
c000bb09:	52                   	push   edx
c000bb0a:	68 90 78 03 c0       	push   0xc0037890
c000bb0f:	68 98 78 03 c0       	push   0xc0037898
c000bb14:	53                   	push   ebx
c000bb15:	50                   	push   eax
c000bb16:	e8 25 4a 00 00       	call   c0010540 <tcp_rst>
c000bb1b:	83 c4 20             	add    esp,0x20
c000bb1e:	b0 00                	mov    al,0x0
c000bb20:	eb 56                	jmp    c000bb78 <tcp_timewait_input+0x100>
c000bb22:	66 90                	xchg   ax,ax
c000bb24:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000bb29:	0f b6 c0             	movzx  eax,al
c000bb2c:	83 e0 01             	and    eax,0x1
c000bb2f:	74 0f                	je     c000bb40 <tcp_timewait_input+0xc8>
c000bb31:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000bb37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb3b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000bb3e:	66 90                	xchg   ax,ax
c000bb40:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000bb46:	0f b7 c0             	movzx  eax,ax
c000bb49:	85 c0                	test   eax,eax
c000bb4b:	74 27                	je     c000bb74 <tcp_timewait_input+0xfc>
c000bb4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb51:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bb54:	83 c8 02             	or     eax,0x2
c000bb57:	88 c2                	mov    dl,al
c000bb59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb5d:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000bb60:	83 ec 0c             	sub    esp,0xc
c000bb63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb67:	e8 48 45 00 00       	call   c00100b4 <tcp_output>
c000bb6c:	83 c4 10             	add    esp,0x10
c000bb6f:	eb 07                	jmp    c000bb78 <tcp_timewait_input+0x100>
c000bb71:	8d 76 00             	lea    esi,[esi+0x0]
c000bb74:	b0 00                	mov    al,0x0
c000bb76:	66 90                	xchg   ax,ax
c000bb78:	83 c4 08             	add    esp,0x8
c000bb7b:	5b                   	pop    ebx
c000bb7c:	c3                   	ret    
c000bb7d:	8d 76 00             	lea    esi,[esi+0x0]

c000bb80 <tcp_oos_insert_segment>:
c000bb80:	53                   	push   ebx
c000bb81:	83 ec 18             	sub    esp,0x18
c000bb84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb88:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bb8b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000bb8f:	0f b7 c0             	movzx  eax,ax
c000bb92:	83 ec 0c             	sub    esp,0xc
c000bb95:	50                   	push   eax
c000bb96:	e8 81 50 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000bb9b:	83 c4 10             	add    esp,0x10
c000bb9e:	0f b7 c0             	movzx  eax,ax
c000bba1:	83 e0 01             	and    eax,0x1
c000bba4:	0f 84 8e 00 00 00    	je     c000bc38 <tcp_oos_insert_segment+0xb8>
c000bbaa:	83 ec 0c             	sub    esp,0xc
c000bbad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bbb1:	e8 2e e6 ff ff       	call   c000a1e4 <tcp_segs_free>
c000bbb6:	83 c4 10             	add    esp,0x10
c000bbb9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000bbc1:	e9 1a 01 00 00       	jmp    c000bce0 <tcp_oos_insert_segment+0x160>
c000bbc6:	66 90                	xchg   ax,ax
c000bbc8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bbcc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bbcf:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000bbd3:	0f b7 c0             	movzx  eax,ax
c000bbd6:	83 ec 0c             	sub    esp,0xc
c000bbd9:	50                   	push   eax
c000bbda:	e8 3d 50 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000bbdf:	83 c4 10             	add    esp,0x10
c000bbe2:	0f b7 c0             	movzx  eax,ax
c000bbe5:	83 e0 01             	and    eax,0x1
c000bbe8:	74 2a                	je     c000bc14 <tcp_oos_insert_segment+0x94>
c000bbea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbee:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bbf1:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000bbf5:	83 ec 0c             	sub    esp,0xc
c000bbf8:	6a 01                	push   0x1
c000bbfa:	e8 1d 50 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000bbff:	83 c4 10             	add    esp,0x10
c000bc02:	89 c2                	mov    edx,eax
c000bc04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc08:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc0b:	09 da                	or     edx,ebx
c000bc0d:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000bc11:	8d 76 00             	lea    esi,[esi+0x0]
c000bc14:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc1c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc20:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bc26:	83 ec 0c             	sub    esp,0xc
c000bc29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc2d:	e8 6e e5 ff ff       	call   c000a1a0 <tcp_seg_free>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	8d 76 00             	lea    esi,[esi+0x0]
c000bc38:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000bc3d:	74 35                	je     c000bc74 <tcp_oos_insert_segment+0xf4>
c000bc3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc43:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bc46:	0f b7 d0             	movzx  edx,ax
c000bc49:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000bc4e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000bc51:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc58:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000bc5b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc5f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bc62:	0f b7 c0             	movzx  eax,ax
c000bc65:	01 d0                	add    eax,edx
c000bc67:	29 c1                	sub    ecx,eax
c000bc69:	89 c8                	mov    eax,ecx
c000bc6b:	0f 89 57 ff ff ff    	jns    c000bbc8 <tcp_oos_insert_segment+0x48>
c000bc71:	8d 76 00             	lea    esi,[esi+0x0]
c000bc74:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000bc79:	74 65                	je     c000bce0 <tcp_oos_insert_segment+0x160>
c000bc7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc7f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bc82:	0f b7 d0             	movzx  edx,ax
c000bc85:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000bc8a:	01 c2                	add    edx,eax
c000bc8c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc90:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc93:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bc96:	29 c2                	sub    edx,eax
c000bc98:	89 d0                	mov    eax,edx
c000bc9a:	85 c0                	test   eax,eax
c000bc9c:	7e 42                	jle    c000bce0 <tcp_oos_insert_segment+0x160>
c000bc9e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bca2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bca5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bca8:	89 c2                	mov    edx,eax
c000bcaa:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000bcaf:	89 d3                	mov    ebx,edx
c000bcb1:	29 c3                	sub    ebx,eax
c000bcb3:	89 d8                	mov    eax,ebx
c000bcb5:	89 c2                	mov    edx,eax
c000bcb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcbb:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000bcbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcc3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bcc6:	0f b7 d0             	movzx  edx,ax
c000bcc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bccd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bcd0:	83 ec 08             	sub    esp,0x8
c000bcd3:	52                   	push   edx
c000bcd4:	50                   	push   eax
c000bcd5:	e8 0e ce ff ff       	call   c0008ae8 <pbuf_realloc>
c000bcda:	83 c4 10             	add    esp,0x10
c000bcdd:	8d 76 00             	lea    esi,[esi+0x0]
c000bce0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bce4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000bce8:	89 10                	mov    DWORD PTR [eax],edx
c000bcea:	90                   	nop
c000bceb:	83 c4 18             	add    esp,0x18
c000bcee:	5b                   	pop    ebx
c000bcef:	c3                   	ret    

c000bcf0 <tcp_receive>:
c000bcf0:	57                   	push   edi
c000bcf1:	56                   	push   esi
c000bcf2:	53                   	push   ebx
c000bcf3:	83 ec 30             	sub    esp,0x30
c000bcf6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bcfe:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000bd03:	0f b6 c0             	movzx  eax,al
c000bd06:	83 e0 10             	and    eax,0x10
c000bd09:	0f 84 f5 07 00 00    	je     c000c504 <tcp_receive+0x814>
c000bd0f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd13:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bd16:	0f b7 d0             	movzx  edx,ax
c000bd19:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd1d:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000bd20:	01 d0                	add    eax,edx
c000bd22:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bd26:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd2a:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000bd2d:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000bd32:	29 c2                	sub    edx,eax
c000bd34:	89 d0                	mov    eax,edx
c000bd36:	78 50                	js     c000bd88 <tcp_receive+0x98>
c000bd38:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd3c:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000bd3f:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000bd44:	39 c2                	cmp    edx,eax
c000bd46:	75 14                	jne    c000bd5c <tcp_receive+0x6c>
c000bd48:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd4c:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bd4f:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000bd54:	29 c2                	sub    edx,eax
c000bd56:	89 d0                	mov    eax,edx
c000bd58:	78 2e                	js     c000bd88 <tcp_receive+0x98>
c000bd5a:	66 90                	xchg   ax,ax
c000bd5c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd60:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bd63:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000bd68:	39 c2                	cmp    edx,eax
c000bd6a:	75 74                	jne    c000bde0 <tcp_receive+0xf0>
c000bd6c:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000bd71:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000bd75:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd79:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bd7c:	0f b7 d2             	movzx  edx,dx
c000bd7f:	0f b7 c0             	movzx  eax,ax
c000bd82:	39 c2                	cmp    edx,eax
c000bd84:	76 5a                	jbe    c000bde0 <tcp_receive+0xf0>
c000bd86:	66 90                	xchg   ax,ax
c000bd88:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000bd8d:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000bd91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd95:	66 89 50 60          	mov    WORD PTR [eax+0x60],dx
c000bd99:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000bd9f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bda3:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000bda6:	8b 15 b0 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b0
c000bdac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdb0:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000bdb3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdb7:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bdba:	0f b7 c0             	movzx  eax,ax
c000bdbd:	85 c0                	test   eax,eax
c000bdbf:	74 1f                	je     c000bde0 <tcp_receive+0xf0>
c000bdc1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdc5:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000bdcb:	0f b6 c0             	movzx  eax,al
c000bdce:	85 c0                	test   eax,eax
c000bdd0:	74 0e                	je     c000bde0 <tcp_receive+0xf0>
c000bdd2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdd6:	c6 80 a4 00 00 00 00 	mov    BYTE PTR [eax+0xa4],0x0
c000bddd:	8d 76 00             	lea    esi,[esi+0x0]
c000bde0:	8b 15 b0 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b0
c000bde6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdea:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bded:	29 c2                	sub    edx,eax
c000bdef:	89 d0                	mov    eax,edx
c000bdf1:	85 c0                	test   eax,eax
c000bdf3:	0f 8f 03 01 00 00    	jg     c000befc <tcp_receive+0x20c>
c000bdf9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdfd:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000be03:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000be09:	0f b7 c0             	movzx  eax,ax
c000be0c:	85 c0                	test   eax,eax
c000be0e:	0f 85 d0 00 00 00    	jne    c000bee4 <tcp_receive+0x1f4>
c000be14:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be18:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000be1b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be1f:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000be22:	0f b7 c0             	movzx  eax,ax
c000be25:	01 d0                	add    eax,edx
c000be27:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000be2b:	0f 85 b3 00 00 00    	jne    c000bee4 <tcp_receive+0x1f4>
c000be31:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be35:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000be39:	98                   	cwde   
c000be3a:	85 c0                	test   eax,eax
c000be3c:	0f 88 a2 00 00 00    	js     c000bee4 <tcp_receive+0x1f4>
c000be42:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be46:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000be49:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000be4e:	39 c2                	cmp    edx,eax
c000be50:	0f 85 8e 00 00 00    	jne    c000bee4 <tcp_receive+0x1f4>
c000be56:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000be5e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be62:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000be65:	83 c0 01             	add    eax,0x1
c000be68:	88 c2                	mov    dl,al
c000be6a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be6e:	88 50 54             	mov    BYTE PTR [eax+0x54],dl
c000be71:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be75:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000be78:	0f b6 c0             	movzx  eax,al
c000be7b:	83 f8 03             	cmp    eax,0x3
c000be7e:	76 44                	jbe    c000bec4 <tcp_receive+0x1d4>
c000be80:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be84:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000be88:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be8c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be8f:	01 d0                	add    eax,edx
c000be91:	89 c2                	mov    edx,eax
c000be93:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be97:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000be9b:	0f b7 d2             	movzx  edx,dx
c000be9e:	0f b7 c0             	movzx  eax,ax
c000bea1:	39 c2                	cmp    edx,eax
c000bea3:	76 3f                	jbe    c000bee4 <tcp_receive+0x1f4>
c000bea5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bea9:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bead:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000beb1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000beb4:	01 d0                	add    eax,edx
c000beb6:	89 c2                	mov    edx,eax
c000beb8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bebc:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000bec0:	eb 22                	jmp    c000bee4 <tcp_receive+0x1f4>
c000bec2:	66 90                	xchg   ax,ax
c000bec4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bec8:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000becb:	0f b6 c0             	movzx  eax,al
c000bece:	83 f8 03             	cmp    eax,0x3
c000bed1:	75 11                	jne    c000bee4 <tcp_receive+0x1f4>
c000bed3:	83 ec 0c             	sub    esp,0xc
c000bed6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000beda:	e8 35 49 00 00       	call   c0010814 <tcp_rexmit_fast>
c000bedf:	83 c4 10             	add    esp,0x10
c000bee2:	66 90                	xchg   ax,ax
c000bee4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bee9:	0f 85 a1 04 00 00    	jne    c000c390 <tcp_receive+0x6a0>
c000beef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bef3:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bef7:	e9 94 04 00 00       	jmp    c000c390 <tcp_receive+0x6a0>
c000befc:	8b 15 b0 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b0
c000bf02:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf06:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bf09:	29 c2                	sub    edx,eax
c000bf0b:	89 d0                	mov    eax,edx
c000bf0d:	83 e8 01             	sub    eax,0x1
c000bf10:	0f 88 52 03 00 00    	js     c000c268 <tcp_receive+0x578>
c000bf16:	8b 15 b0 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b0
c000bf1c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf20:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000bf23:	29 c2                	sub    edx,eax
c000bf25:	89 d0                	mov    eax,edx
c000bf27:	85 c0                	test   eax,eax
c000bf29:	0f 8f 39 03 00 00    	jg     c000c268 <tcp_receive+0x578>
c000bf2f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf33:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bf36:	0f b6 c0             	movzx  eax,al
c000bf39:	83 e0 04             	and    eax,0x4
c000bf3c:	74 22                	je     c000bf60 <tcp_receive+0x270>
c000bf3e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf42:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bf45:	83 e0 fb             	and    eax,0xfffffffb
c000bf48:	88 c2                	mov    dl,al
c000bf4a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf4e:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000bf51:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf55:	8b 50 58             	mov    edx,DWORD PTR [eax+0x58]
c000bf58:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf5c:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000bf60:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf64:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000bf68:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf6c:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000bf6f:	98                   	cwde   
c000bf70:	c1 f8 03             	sar    eax,0x3
c000bf73:	89 c2                	mov    edx,eax
c000bf75:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf79:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000bf7d:	01 d0                	add    eax,edx
c000bf7f:	89 c2                	mov    edx,eax
c000bf81:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf85:	66 89 50 4c          	mov    WORD PTR [eax+0x4c],dx
c000bf89:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000bf8e:	89 c2                	mov    edx,eax
c000bf90:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf94:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bf97:	89 d7                	mov    edi,edx
c000bf99:	29 c7                	sub    edi,eax
c000bf9b:	89 f8                	mov    eax,edi
c000bf9d:	89 c2                	mov    edx,eax
c000bf9f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfa3:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000bfa7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfab:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000bfaf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfb3:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000bfb6:	01 d0                	add    eax,edx
c000bfb8:	89 c2                	mov    edx,eax
c000bfba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfbe:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000bfc2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfc6:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bfca:	8b 15 b0 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b0
c000bfd0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfd4:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000bfd7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfdb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bfde:	83 f8 03             	cmp    eax,0x3
c000bfe1:	0f 86 dd 01 00 00    	jbe    c000c1c4 <tcp_receive+0x4d4>
c000bfe7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfeb:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bfef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bff3:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000bff6:	0f b7 d2             	movzx  edx,dx
c000bff9:	0f b7 c0             	movzx  eax,ax
c000bffc:	39 c2                	cmp    edx,eax
c000bffe:	73 4c                	jae    c000c04c <tcp_receive+0x35c>
c000c000:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c004:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000c008:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c00c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c00f:	01 d0                	add    eax,edx
c000c011:	89 c2                	mov    edx,eax
c000c013:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c017:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000c01b:	0f b7 d2             	movzx  edx,dx
c000c01e:	0f b7 c0             	movzx  eax,ax
c000c021:	39 c2                	cmp    edx,eax
c000c023:	0f 86 9b 01 00 00    	jbe    c000c1c4 <tcp_receive+0x4d4>
c000c029:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c02d:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000c031:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c035:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c038:	01 d0                	add    eax,edx
c000c03a:	89 c2                	mov    edx,eax
c000c03c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c040:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000c044:	e9 7b 01 00 00       	jmp    c000c1c4 <tcp_receive+0x4d4>
c000c049:	8d 76 00             	lea    esi,[esi+0x0]
c000c04c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c050:	66 8b 48 56          	mov    cx,WORD PTR [eax+0x56]
c000c054:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c058:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c05b:	0f b7 d0             	movzx  edx,ax
c000c05e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c062:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c065:	0f b7 c0             	movzx  eax,ax
c000c068:	0f af c2             	imul   eax,edx
c000c06b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c06f:	66 8b 52 56          	mov    dx,WORD PTR [edx+0x56]
c000c073:	0f b7 f2             	movzx  esi,dx
c000c076:	89 c2                	mov    edx,eax
c000c078:	c1 fa 1f             	sar    edx,0x1f
c000c07b:	f7 fe                	idiv   esi
c000c07d:	01 c8                	add    eax,ecx
c000c07f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000c084:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c088:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000c08c:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c000c091:	0f b7 c0             	movzx  eax,ax
c000c094:	39 c2                	cmp    edx,eax
c000c096:	0f 86 28 01 00 00    	jbe    c000c1c4 <tcp_receive+0x4d4>
c000c09c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0a0:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c000c0a5:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000c0a9:	e9 16 01 00 00       	jmp    c000c1c4 <tcp_receive+0x4d4>
c000c0ae:	66 90                	xchg   ax,ax
c000c0b0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0b4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c0b7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0bb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0bf:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c0c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000c0c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0c8:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000c0cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0cf:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000c0d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c0d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c0d9:	83 ec 0c             	sub    esp,0xc
c000c0dc:	50                   	push   eax
c000c0dd:	e8 0e cc ff ff       	call   c0008cf0 <pbuf_clen>
c000c0e2:	83 c4 10             	add    esp,0x10
c000c0e5:	0f b6 c0             	movzx  eax,al
c000c0e8:	0f b7 d3             	movzx  edx,bx
c000c0eb:	0f b7 c0             	movzx  eax,ax
c000c0ee:	39 c2                	cmp    edx,eax
c000c0f0:	73 16                	jae    c000c108 <tcp_receive+0x418>
c000c0f2:	83 ec 08             	sub    esp,0x8
c000c0f5:	68 8c 0c 03 c0       	push   0xc0030c8c
c000c0fa:	68 46 03 03 c0       	push   0xc0030346
c000c0ff:	e8 48 3d 01 00       	call   c001fe4c <CPrintf>
c000c104:	83 c4 10             	add    esp,0x10
c000c107:	90                   	nop
c000c108:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c10c:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c10f:	0f b7 c0             	movzx  eax,ax
c000c112:	85 c0                	test   eax,eax
c000c114:	74 36                	je     c000c14c <tcp_receive+0x45c>
c000c116:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c11a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c11d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c121:	0f b7 c0             	movzx  eax,ax
c000c124:	83 ec 0c             	sub    esp,0xc
c000c127:	50                   	push   eax
c000c128:	e8 ef 4a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c12d:	83 c4 10             	add    esp,0x10
c000c130:	0f b7 c0             	movzx  eax,ax
c000c133:	83 e0 01             	and    eax,0x1
c000c136:	74 14                	je     c000c14c <tcp_receive+0x45c>
c000c138:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c13c:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c13f:	83 e8 01             	sub    eax,0x1
c000c142:	89 c2                	mov    edx,eax
c000c144:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c148:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000c14c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c150:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c153:	83 ec 0c             	sub    esp,0xc
c000c156:	50                   	push   eax
c000c157:	e8 94 cb ff ff       	call   c0008cf0 <pbuf_clen>
c000c15c:	83 c4 10             	add    esp,0x10
c000c15f:	88 c1                	mov    cl,al
c000c161:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c165:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000c168:	0f b6 c1             	movzx  eax,cl
c000c16b:	89 d7                	mov    edi,edx
c000c16d:	29 c7                	sub    edi,eax
c000c16f:	89 f8                	mov    eax,edi
c000c171:	89 c2                	mov    edx,eax
c000c173:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c177:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000c17b:	83 ec 0c             	sub    esp,0xc
c000c17e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c182:	e8 19 e0 ff ff       	call   c000a1a0 <tcp_seg_free>
c000c187:	83 c4 10             	add    esp,0x10
c000c18a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c18e:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000c191:	0f b7 c0             	movzx  eax,ax
c000c194:	85 c0                	test   eax,eax
c000c196:	74 2c                	je     c000c1c4 <tcp_receive+0x4d4>
c000c198:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c19c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c19f:	85 c0                	test   eax,eax
c000c1a1:	75 21                	jne    c000c1c4 <tcp_receive+0x4d4>
c000c1a3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1a7:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c1aa:	85 c0                	test   eax,eax
c000c1ac:	75 16                	jne    c000c1c4 <tcp_receive+0x4d4>
c000c1ae:	83 ec 08             	sub    esp,0x8
c000c1b1:	68 b4 0c 03 c0       	push   0xc0030cb4
c000c1b6:	68 46 03 03 c0       	push   0xc0030346
c000c1bb:	e8 8c 3c 01 00       	call   c001fe4c <CPrintf>
c000c1c0:	83 c4 10             	add    esp,0x10
c000c1c3:	90                   	nop
c000c1c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1c8:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c1cb:	85 c0                	test   eax,eax
c000c1cd:	74 69                	je     c000c238 <tcp_receive+0x548>
c000c1cf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1d3:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c1d6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c1d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c1dc:	83 ec 0c             	sub    esp,0xc
c000c1df:	50                   	push   eax
c000c1e0:	e8 5b 4a ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000c1e5:	83 c4 10             	add    esp,0x10
c000c1e8:	89 c3                	mov    ebx,eax
c000c1ea:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1ee:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c1f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c1f4:	0f b7 f0             	movzx  esi,ax
c000c1f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1fb:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c1fe:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c201:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c205:	0f b7 c0             	movzx  eax,ax
c000c208:	83 ec 0c             	sub    esp,0xc
c000c20b:	50                   	push   eax
c000c20c:	e8 0b 4a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c211:	83 c4 10             	add    esp,0x10
c000c214:	0f b7 c0             	movzx  eax,ax
c000c217:	83 e0 03             	and    eax,0x3
c000c21a:	0f 95 c0             	setne  al
c000c21d:	0f b6 c0             	movzx  eax,al
c000c220:	01 f0                	add    eax,esi
c000c222:	8d 14 03             	lea    edx,[ebx+eax*1]
c000c225:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000c22a:	29 c2                	sub    edx,eax
c000c22c:	89 d0                	mov    eax,edx
c000c22e:	85 c0                	test   eax,eax
c000c230:	0f 8e 7a fe ff ff    	jle    c000c0b0 <tcp_receive+0x3c0>
c000c236:	66 90                	xchg   ax,ax
c000c238:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c23c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c23f:	85 c0                	test   eax,eax
c000c241:	75 0d                	jne    c000c250 <tcp_receive+0x560>
c000c243:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c247:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000c24d:	eb 0d                	jmp    c000c25c <tcp_receive+0x56c>
c000c24f:	90                   	nop
c000c250:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c254:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000c25a:	66 90                	xchg   ax,ax
c000c25c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c260:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000c264:	eb 0e                	jmp    c000c274 <tcp_receive+0x584>
c000c266:	66 90                	xchg   ax,ax
c000c268:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c26c:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000c272:	66 90                	xchg   ax,ax
c000c274:	e9 17 01 00 00       	jmp    c000c390 <tcp_receive+0x6a0>
c000c279:	8d 76 00             	lea    esi,[esi+0x0]
c000c27c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c280:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c283:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c287:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c28b:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c28e:	8b 10                	mov    edx,DWORD PTR [eax]
c000c290:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c294:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000c297:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c29b:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000c29e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c2a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c2a5:	83 ec 0c             	sub    esp,0xc
c000c2a8:	50                   	push   eax
c000c2a9:	e8 42 ca ff ff       	call   c0008cf0 <pbuf_clen>
c000c2ae:	83 c4 10             	add    esp,0x10
c000c2b1:	0f b6 c0             	movzx  eax,al
c000c2b4:	0f b7 d3             	movzx  edx,bx
c000c2b7:	0f b7 c0             	movzx  eax,ax
c000c2ba:	39 c2                	cmp    edx,eax
c000c2bc:	73 16                	jae    c000c2d4 <tcp_receive+0x5e4>
c000c2be:	83 ec 08             	sub    esp,0x8
c000c2c1:	68 8c 0c 03 c0       	push   0xc0030c8c
c000c2c6:	68 46 03 03 c0       	push   0xc0030346
c000c2cb:	e8 7c 3b 01 00       	call   c001fe4c <CPrintf>
c000c2d0:	83 c4 10             	add    esp,0x10
c000c2d3:	90                   	nop
c000c2d4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2d8:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c2db:	0f b7 c0             	movzx  eax,ax
c000c2de:	85 c0                	test   eax,eax
c000c2e0:	74 36                	je     c000c318 <tcp_receive+0x628>
c000c2e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c2e6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c2e9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c2ed:	0f b7 c0             	movzx  eax,ax
c000c2f0:	83 ec 0c             	sub    esp,0xc
c000c2f3:	50                   	push   eax
c000c2f4:	e8 23 49 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c2f9:	83 c4 10             	add    esp,0x10
c000c2fc:	0f b7 c0             	movzx  eax,ax
c000c2ff:	83 e0 01             	and    eax,0x1
c000c302:	74 14                	je     c000c318 <tcp_receive+0x628>
c000c304:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c308:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c30b:	83 e8 01             	sub    eax,0x1
c000c30e:	89 c2                	mov    edx,eax
c000c310:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c314:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000c318:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c31c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c31f:	83 ec 0c             	sub    esp,0xc
c000c322:	50                   	push   eax
c000c323:	e8 c8 c9 ff ff       	call   c0008cf0 <pbuf_clen>
c000c328:	83 c4 10             	add    esp,0x10
c000c32b:	88 c1                	mov    cl,al
c000c32d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c331:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000c334:	0f b6 c1             	movzx  eax,cl
c000c337:	89 d6                	mov    esi,edx
c000c339:	29 c6                	sub    esi,eax
c000c33b:	89 f0                	mov    eax,esi
c000c33d:	89 c2                	mov    edx,eax
c000c33f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c343:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000c347:	83 ec 0c             	sub    esp,0xc
c000c34a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c34e:	e8 4d de ff ff       	call   c000a1a0 <tcp_seg_free>
c000c353:	83 c4 10             	add    esp,0x10
c000c356:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c35a:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000c35d:	0f b7 c0             	movzx  eax,ax
c000c360:	85 c0                	test   eax,eax
c000c362:	74 2c                	je     c000c390 <tcp_receive+0x6a0>
c000c364:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c368:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c36b:	85 c0                	test   eax,eax
c000c36d:	75 21                	jne    c000c390 <tcp_receive+0x6a0>
c000c36f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c373:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c376:	85 c0                	test   eax,eax
c000c378:	75 16                	jne    c000c390 <tcp_receive+0x6a0>
c000c37a:	83 ec 08             	sub    esp,0x8
c000c37d:	68 b4 0c 03 c0       	push   0xc0030cb4
c000c382:	68 46 03 03 c0       	push   0xc0030346
c000c387:	e8 c0 3a 01 00       	call   c001fe4c <CPrintf>
c000c38c:	83 c4 10             	add    esp,0x10
c000c38f:	90                   	nop
c000c390:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c394:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c397:	85 c0                	test   eax,eax
c000c399:	74 7d                	je     c000c418 <tcp_receive+0x728>
c000c39b:	8b 1d b0 b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8b0
c000c3a1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3a5:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c3a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c3ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c3ae:	83 ec 0c             	sub    esp,0xc
c000c3b1:	50                   	push   eax
c000c3b2:	e8 89 48 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000c3b7:	83 c4 10             	add    esp,0x10
c000c3ba:	89 c6                	mov    esi,eax
c000c3bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3c0:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c3c3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c3c6:	0f b7 f8             	movzx  edi,ax
c000c3c9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3cd:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c3d0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c3d3:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c3d7:	0f b7 c0             	movzx  eax,ax
c000c3da:	83 ec 0c             	sub    esp,0xc
c000c3dd:	50                   	push   eax
c000c3de:	e8 39 48 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c3e3:	83 c4 10             	add    esp,0x10
c000c3e6:	0f b7 c0             	movzx  eax,ax
c000c3e9:	83 e0 03             	and    eax,0x3
c000c3ec:	0f 95 c0             	setne  al
c000c3ef:	0f b6 c0             	movzx  eax,al
c000c3f2:	01 f8                	add    eax,edi
c000c3f4:	01 f0                	add    eax,esi
c000c3f6:	29 c3                	sub    ebx,eax
c000c3f8:	89 d8                	mov    eax,ebx
c000c3fa:	78 1c                	js     c000c418 <tcp_receive+0x728>
c000c3fc:	8b 15 b0 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b0
c000c402:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c406:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000c409:	29 c2                	sub    edx,eax
c000c40b:	89 d0                	mov    eax,edx
c000c40d:	85 c0                	test   eax,eax
c000c40f:	0f 8e 67 fe ff ff    	jle    c000c27c <tcp_receive+0x58c>
c000c415:	8d 76 00             	lea    esi,[esi+0x0]
c000c418:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c41c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c41f:	85 c0                	test   eax,eax
c000c421:	0f 84 dd 00 00 00    	je     c000c504 <tcp_receive+0x814>
c000c427:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c42b:	8b 50 44             	mov    edx,DWORD PTR [eax+0x44]
c000c42e:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000c433:	29 c2                	sub    edx,eax
c000c435:	89 d0                	mov    eax,edx
c000c437:	0f 89 c7 00 00 00    	jns    c000c504 <tcp_receive+0x814>
c000c43d:	a1 74 78 03 c0       	mov    eax,ds:0xc0037874
c000c442:	89 c2                	mov    edx,eax
c000c444:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c448:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c44b:	89 d7                	mov    edi,edx
c000c44d:	29 c7                	sub    edi,eax
c000c44f:	89 f8                	mov    eax,edi
c000c451:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c456:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c45b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c45f:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c462:	98                   	cwde   
c000c463:	c1 f8 03             	sar    eax,0x3
c000c466:	89 d6                	mov    esi,edx
c000c468:	29 c6                	sub    esi,eax
c000c46a:	89 f0                	mov    eax,esi
c000c46c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c471:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c475:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c478:	89 c2                	mov    edx,eax
c000c47a:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c47f:	01 d0                	add    eax,edx
c000c481:	89 c2                	mov    edx,eax
c000c483:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c487:	66 89 50 48          	mov    WORD PTR [eax+0x48],dx
c000c48b:	0f bf 44 24 1e       	movsx  eax,WORD PTR [esp+0x1e]
c000c490:	85 c0                	test   eax,eax
c000c492:	79 0c                	jns    c000c4a0 <tcp_receive+0x7b0>
c000c494:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c499:	f7 d8                	neg    eax
c000c49b:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c4a0:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c4a5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4a9:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c4ad:	98                   	cwde   
c000c4ae:	c1 f8 02             	sar    eax,0x2
c000c4b1:	89 d7                	mov    edi,edx
c000c4b3:	29 c7                	sub    edi,eax
c000c4b5:	89 f8                	mov    eax,edi
c000c4b7:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c4bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4c0:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c4c4:	89 c2                	mov    edx,eax
c000c4c6:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c4cb:	01 d0                	add    eax,edx
c000c4cd:	89 c2                	mov    edx,eax
c000c4cf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4d3:	66 89 50 4a          	mov    WORD PTR [eax+0x4a],dx
c000c4d7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4db:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c4de:	98                   	cwde   
c000c4df:	c1 f8 03             	sar    eax,0x3
c000c4e2:	89 c2                	mov    edx,eax
c000c4e4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4e8:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c4ec:	01 d0                	add    eax,edx
c000c4ee:	89 c2                	mov    edx,eax
c000c4f0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4f4:	66 89 50 4c          	mov    WORD PTR [eax+0x4c],dx
c000c4f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4fc:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c000c503:	90                   	nop
c000c504:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000c50a:	0f b7 c0             	movzx  eax,ax
c000c50d:	85 c0                	test   eax,eax
c000c50f:	0f 84 43 0e 00 00    	je     c000d358 <tcp_receive+0x1668>
c000c515:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c519:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c51c:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000c521:	29 c2                	sub    edx,eax
c000c523:	89 d0                	mov    eax,edx
c000c525:	83 e8 01             	sub    eax,0x1
c000c528:	0f 88 c6 01 00 00    	js     c000c6f4 <tcp_receive+0xa04>
c000c52e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c532:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c535:	66 8b 15 aa b8 03 c0 	mov    dx,WORD PTR ds:0xc003b8aa
c000c53c:	0f b7 ca             	movzx  ecx,dx
c000c53f:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000c545:	01 ca                	add    edx,ecx
c000c547:	29 d0                	sub    eax,edx
c000c549:	83 c0 01             	add    eax,0x1
c000c54c:	85 c0                	test   eax,eax
c000c54e:	0f 8f a0 01 00 00    	jg     c000c6f4 <tcp_receive+0xa04>
c000c554:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c558:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c55b:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000c560:	29 c2                	sub    edx,eax
c000c562:	89 d0                	mov    eax,edx
c000c564:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c568:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000c56d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c571:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000c576:	85 c0                	test   eax,eax
c000c578:	75 16                	jne    c000c590 <tcp_receive+0x8a0>
c000c57a:	83 ec 08             	sub    esp,0x8
c000c57d:	68 b1 0e 03 c0       	push   0xc0030eb1
c000c582:	68 46 03 03 c0       	push   0xc0030346
c000c587:	e8 c0 38 01 00       	call   c001fe4c <CPrintf>
c000c58c:	83 c4 10             	add    esp,0x10
c000c58f:	90                   	nop
c000c590:	81 7c 24 20 fe 7f 00 00 	cmp    DWORD PTR [esp+0x20],0x7ffe
c000c598:	7e 16                	jle    c000c5b0 <tcp_receive+0x8c0>
c000c59a:	83 ec 08             	sub    esp,0x8
c000c59d:	68 c1 0e 03 c0       	push   0xc0030ec1
c000c5a2:	68 46 03 03 c0       	push   0xc0030346
c000c5a7:	e8 a0 38 01 00       	call   c001fe4c <CPrintf>
c000c5ac:	83 c4 10             	add    esp,0x10
c000c5af:	90                   	nop
c000c5b0:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000c5b5:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c5b9:	0f b7 c0             	movzx  eax,ax
c000c5bc:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c5c0:	0f 8e b6 00 00 00    	jle    c000c67c <tcp_receive+0x98c>
c000c5c6:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000c5cb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c5ce:	0f b7 c0             	movzx  eax,ax
c000c5d1:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c5d5:	7e 15                	jle    c000c5ec <tcp_receive+0x8fc>
c000c5d7:	83 ec 08             	sub    esp,0x8
c000c5da:	68 d0 0e 03 c0       	push   0xc0030ed0
c000c5df:	68 46 03 03 c0       	push   0xc0030346
c000c5e4:	e8 63 38 01 00       	call   c001fe4c <CPrintf>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000c5f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c5f4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c5f8:	29 d0                	sub    eax,edx
c000c5fa:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c000c5ff:	eb 33                	jmp    c000c634 <tcp_receive+0x944>
c000c601:	8d 76 00             	lea    esi,[esi+0x0]
c000c604:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c608:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c60c:	0f b7 c0             	movzx  eax,ax
c000c60f:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c000c613:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c617:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c61b:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000c61f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c623:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c000c629:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c62d:	8b 00                	mov    eax,DWORD PTR [eax]
c000c62f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c633:	90                   	nop
c000c634:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c638:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c63c:	0f b7 c0             	movzx  eax,ax
c000c63f:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c643:	7f bf                	jg     c000c604 <tcp_receive+0x914>
c000c645:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c649:	f7 d8                	neg    eax
c000c64b:	98                   	cwde   
c000c64c:	83 ec 08             	sub    esp,0x8
c000c64f:	50                   	push   eax
c000c650:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c654:	e8 1b bd ff ff       	call   c0008374 <pbuf_header>
c000c659:	83 c4 10             	add    esp,0x10
c000c65c:	0f b6 c0             	movzx  eax,al
c000c65f:	85 c0                	test   eax,eax
c000c661:	74 51                	je     c000c6b4 <tcp_receive+0x9c4>
c000c663:	83 ec 08             	sub    esp,0x8
c000c666:	68 e0 0e 03 c0       	push   0xc0030ee0
c000c66b:	68 46 03 03 c0       	push   0xc0030346
c000c670:	e8 d7 37 01 00       	call   c001fe4c <CPrintf>
c000c675:	83 c4 10             	add    esp,0x10
c000c678:	eb 3a                	jmp    c000c6b4 <tcp_receive+0x9c4>
c000c67a:	66 90                	xchg   ax,ax
c000c67c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c680:	f7 d8                	neg    eax
c000c682:	0f bf d0             	movsx  edx,ax
c000c685:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000c68a:	83 ec 08             	sub    esp,0x8
c000c68d:	52                   	push   edx
c000c68e:	50                   	push   eax
c000c68f:	e8 e0 bc ff ff       	call   c0008374 <pbuf_header>
c000c694:	83 c4 10             	add    esp,0x10
c000c697:	0f b6 c0             	movzx  eax,al
c000c69a:	85 c0                	test   eax,eax
c000c69c:	74 16                	je     c000c6b4 <tcp_receive+0x9c4>
c000c69e:	83 ec 08             	sub    esp,0x8
c000c6a1:	68 e0 0e 03 c0       	push   0xc0030ee0
c000c6a6:	68 46 03 03 c0       	push   0xc0030346
c000c6ab:	e8 9c 37 01 00       	call   c001fe4c <CPrintf>
c000c6b0:	83 c4 10             	add    esp,0x10
c000c6b3:	90                   	nop
c000c6b4:	8b 15 c8 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8c8
c000c6ba:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000c6bf:	89 c1                	mov    ecx,eax
c000c6c1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6c5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c6c8:	89 ce                	mov    esi,ecx
c000c6ca:	29 c6                	sub    esi,eax
c000c6cc:	89 f0                	mov    eax,esi
c000c6ce:	01 d0                	add    eax,edx
c000c6d0:	66 a3 c8 b8 03 c0    	mov    ds:0xc003b8c8,ax
c000c6d6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6da:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c6dd:	a3 b4 b8 03 c0       	mov    ds:0xc003b8b4,eax
c000c6e2:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c6e7:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000c6ed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000c6f0:	eb 2a                	jmp    c000c71c <tcp_receive+0xa2c>
c000c6f2:	66 90                	xchg   ax,ax
c000c6f4:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000c6fa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6fe:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c701:	29 c2                	sub    edx,eax
c000c703:	89 d0                	mov    eax,edx
c000c705:	79 15                	jns    c000c71c <tcp_receive+0xa2c>
c000c707:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c70b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000c70e:	83 c8 02             	or     eax,0x2
c000c711:	88 c2                	mov    dl,al
c000c713:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c717:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000c71a:	66 90                	xchg   ax,ax
c000c71c:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000c722:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c726:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c729:	29 c2                	sub    edx,eax
c000c72b:	89 d0                	mov    eax,edx
c000c72d:	0f 88 11 0c 00 00    	js     c000d344 <tcp_receive+0x1654>
c000c733:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000c739:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c73d:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000c740:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c744:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c747:	0f b7 c0             	movzx  eax,ax
c000c74a:	01 c8                	add    eax,ecx
c000c74c:	29 c2                	sub    edx,eax
c000c74e:	89 d0                	mov    eax,edx
c000c750:	83 c0 01             	add    eax,0x1
c000c753:	85 c0                	test   eax,eax
c000c755:	0f 8f e9 0b 00 00    	jg     c000d344 <tcp_receive+0x1654>
c000c75b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c75f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c762:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000c767:	39 c2                	cmp    edx,eax
c000c769:	0f 85 25 07 00 00    	jne    c000ce94 <tcp_receive+0x11a4>
c000c76f:	8b 1d c8 b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8c8
c000c775:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c77a:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c77e:	0f b7 c0             	movzx  eax,ax
c000c781:	83 ec 0c             	sub    esp,0xc
c000c784:	50                   	push   eax
c000c785:	e8 92 44 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c78a:	83 c4 10             	add    esp,0x10
c000c78d:	0f b7 c0             	movzx  eax,ax
c000c790:	83 e0 03             	and    eax,0x3
c000c793:	0f 95 c0             	setne  al
c000c796:	0f b6 c0             	movzx  eax,al
c000c799:	01 d8                	add    eax,ebx
c000c79b:	66 a3 aa b8 03 c0    	mov    ds:0xc003b8aa,ax
c000c7a1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c7a5:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c7a8:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000c7ae:	0f b7 d2             	movzx  edx,dx
c000c7b1:	0f b7 c0             	movzx  eax,ax
c000c7b4:	39 c2                	cmp    edx,eax
c000c7b6:	0f 83 30 01 00 00    	jae    c000c8ec <tcp_receive+0xbfc>
c000c7bc:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c7c1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c7c5:	0f b7 c0             	movzx  eax,ax
c000c7c8:	83 ec 0c             	sub    esp,0xc
c000c7cb:	50                   	push   eax
c000c7cc:	e8 4b 44 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c7d1:	83 c4 10             	add    esp,0x10
c000c7d4:	0f b7 c0             	movzx  eax,ax
c000c7d7:	83 e0 01             	and    eax,0x1
c000c7da:	74 48                	je     c000c824 <tcp_receive+0xb34>
c000c7dc:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c7e1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c7e5:	80 e4 c0             	and    ah,0xc0
c000c7e8:	89 c3                	mov    ebx,eax
c000c7ea:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c7ef:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c7f3:	0f b7 c0             	movzx  eax,ax
c000c7f6:	83 ec 0c             	sub    esp,0xc
c000c7f9:	50                   	push   eax
c000c7fa:	e8 1d 44 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c7ff:	83 c4 10             	add    esp,0x10
c000c802:	0f b7 c0             	movzx  eax,ax
c000c805:	83 e0 3e             	and    eax,0x3e
c000c808:	83 ec 0c             	sub    esp,0xc
c000c80b:	50                   	push   eax
c000c80c:	e8 0b 44 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c811:	83 c4 10             	add    esp,0x10
c000c814:	09 d8                	or     eax,ebx
c000c816:	89 c2                	mov    edx,eax
c000c818:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c81d:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000c821:	8d 76 00             	lea    esi,[esi+0x0]
c000c824:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c828:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c82b:	66 a3 c8 b8 03 c0    	mov    ds:0xc003b8c8,ax
c000c831:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c836:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c83a:	0f b7 c0             	movzx  eax,ax
c000c83d:	83 ec 0c             	sub    esp,0xc
c000c840:	50                   	push   eax
c000c841:	e8 d6 43 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c846:	83 c4 10             	add    esp,0x10
c000c849:	0f b7 c0             	movzx  eax,ax
c000c84c:	83 e0 02             	and    eax,0x2
c000c84f:	74 0f                	je     c000c860 <tcp_receive+0xb70>
c000c851:	a1 c8 b8 03 c0       	mov    eax,ds:0xc003b8c8
c000c856:	83 e8 01             	sub    eax,0x1
c000c859:	66 a3 c8 b8 03 c0    	mov    ds:0xc003b8c8,ax
c000c85f:	90                   	nop
c000c860:	a1 c8 b8 03 c0       	mov    eax,ds:0xc003b8c8
c000c865:	0f b7 d0             	movzx  edx,ax
c000c868:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000c86d:	83 ec 08             	sub    esp,0x8
c000c870:	52                   	push   edx
c000c871:	50                   	push   eax
c000c872:	e8 71 c2 ff ff       	call   c0008ae8 <pbuf_realloc>
c000c877:	83 c4 10             	add    esp,0x10
c000c87a:	8b 1d c8 b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8c8
c000c880:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c885:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c889:	0f b7 c0             	movzx  eax,ax
c000c88c:	83 ec 0c             	sub    esp,0xc
c000c88f:	50                   	push   eax
c000c890:	e8 87 43 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c895:	83 c4 10             	add    esp,0x10
c000c898:	0f b7 c0             	movzx  eax,ax
c000c89b:	83 e0 03             	and    eax,0x3
c000c89e:	0f 95 c0             	setne  al
c000c8a1:	0f b6 c0             	movzx  eax,al
c000c8a4:	01 d8                	add    eax,ebx
c000c8a6:	66 a3 aa b8 03 c0    	mov    ds:0xc003b8aa,ax
c000c8ac:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000c8b2:	0f b7 d0             	movzx  edx,ax
c000c8b5:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000c8ba:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000c8bd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8c1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c8c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8c8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c8cb:	0f b7 c0             	movzx  eax,ax
c000c8ce:	01 d0                	add    eax,edx
c000c8d0:	39 c1                	cmp    ecx,eax
c000c8d2:	74 18                	je     c000c8ec <tcp_receive+0xbfc>
c000c8d4:	83 ec 08             	sub    esp,0x8
c000c8d7:	68 d4 0c 03 c0       	push   0xc0030cd4
c000c8dc:	68 46 03 03 c0       	push   0xc0030346
c000c8e1:	e8 66 35 01 00       	call   c001fe4c <CPrintf>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	8d 76 00             	lea    esi,[esi+0x0]
c000c8ec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8f0:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c8f6:	85 c0                	test   eax,eax
c000c8f8:	0f 84 7e 02 00 00    	je     c000cb7c <tcp_receive+0xe8c>
c000c8fe:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c903:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c907:	0f b7 c0             	movzx  eax,ax
c000c90a:	83 ec 0c             	sub    esp,0xc
c000c90d:	50                   	push   eax
c000c90e:	e8 09 43 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c913:	83 c4 10             	add    esp,0x10
c000c916:	0f b7 c0             	movzx  eax,ax
c000c919:	83 e0 01             	and    eax,0x1
c000c91c:	74 4a                	je     c000c968 <tcp_receive+0xc78>
c000c91e:	eb 34                	jmp    c000c954 <tcp_receive+0xc64>
c000c920:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c924:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c92a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c92e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c932:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c938:	8b 10                	mov    edx,DWORD PTR [eax]
c000c93a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c93e:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000c944:	83 ec 0c             	sub    esp,0xc
c000c947:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c94b:	e8 50 d8 ff ff       	call   c000a1a0 <tcp_seg_free>
c000c950:	83 c4 10             	add    esp,0x10
c000c953:	90                   	nop
c000c954:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c958:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c95e:	85 c0                	test   eax,eax
c000c960:	75 be                	jne    c000c920 <tcp_receive+0xc30>
c000c962:	e9 15 02 00 00       	jmp    c000cb7c <tcp_receive+0xe8c>
c000c967:	90                   	nop
c000c968:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c96c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c972:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c976:	e9 bd 00 00 00       	jmp    c000ca38 <tcp_receive+0xd48>
c000c97b:	90                   	nop
c000c97c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c980:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c983:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c987:	0f b7 c0             	movzx  eax,ax
c000c98a:	83 ec 0c             	sub    esp,0xc
c000c98d:	50                   	push   eax
c000c98e:	e8 89 42 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c993:	83 c4 10             	add    esp,0x10
c000c996:	0f b7 c0             	movzx  eax,ax
c000c999:	83 e0 01             	and    eax,0x1
c000c99c:	74 76                	je     c000ca14 <tcp_receive+0xd24>
c000c99e:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c9a3:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c9a7:	0f b7 c0             	movzx  eax,ax
c000c9aa:	83 ec 0c             	sub    esp,0xc
c000c9ad:	50                   	push   eax
c000c9ae:	e8 69 42 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c9b3:	83 c4 10             	add    esp,0x10
c000c9b6:	0f b7 c0             	movzx  eax,ax
c000c9b9:	83 e0 02             	and    eax,0x2
c000c9bc:	75 56                	jne    c000ca14 <tcp_receive+0xd24>
c000c9be:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c9c3:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000c9c7:	83 ec 0c             	sub    esp,0xc
c000c9ca:	6a 01                	push   0x1
c000c9cc:	e8 4b 42 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c9d1:	83 c4 10             	add    esp,0x10
c000c9d4:	89 c2                	mov    edx,eax
c000c9d6:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c9db:	09 da                	or     edx,ebx
c000c9dd:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000c9e1:	8b 1d c8 b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8c8
c000c9e7:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000c9ec:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c9f0:	0f b7 c0             	movzx  eax,ax
c000c9f3:	83 ec 0c             	sub    esp,0xc
c000c9f6:	50                   	push   eax
c000c9f7:	e8 20 42 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c9fc:	83 c4 10             	add    esp,0x10
c000c9ff:	0f b7 c0             	movzx  eax,ax
c000ca02:	83 e0 03             	and    eax,0x3
c000ca05:	0f 95 c0             	setne  al
c000ca08:	0f b6 c0             	movzx  eax,al
c000ca0b:	01 d8                	add    eax,ebx
c000ca0d:	66 a3 aa b8 03 c0    	mov    ds:0xc003b8aa,ax
c000ca13:	90                   	nop
c000ca14:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca18:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca1c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca20:	8b 00                	mov    eax,DWORD PTR [eax]
c000ca22:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca26:	83 ec 0c             	sub    esp,0xc
c000ca29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca2d:	e8 6e d7 ff ff       	call   c000a1a0 <tcp_seg_free>
c000ca32:	83 c4 10             	add    esp,0x10
c000ca35:	8d 76 00             	lea    esi,[esi+0x0]
c000ca38:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000ca3d:	74 31                	je     c000ca70 <tcp_receive+0xd80>
c000ca3f:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000ca45:	0f b7 d0             	movzx  edx,ax
c000ca48:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000ca4d:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ca50:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca54:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca57:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ca5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca5e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ca61:	0f b7 c0             	movzx  eax,ax
c000ca64:	01 d0                	add    eax,edx
c000ca66:	29 c1                	sub    ecx,eax
c000ca68:	89 c8                	mov    eax,ecx
c000ca6a:	0f 89 0c ff ff ff    	jns    c000c97c <tcp_receive+0xc8c>
c000ca70:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000ca75:	0f 84 f1 00 00 00    	je     c000cb6c <tcp_receive+0xe7c>
c000ca7b:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000ca81:	0f b7 d0             	movzx  edx,ax
c000ca84:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000ca89:	01 c2                	add    edx,eax
c000ca8b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca8f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca92:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ca95:	29 c2                	sub    edx,eax
c000ca97:	89 d0                	mov    eax,edx
c000ca99:	85 c0                	test   eax,eax
c000ca9b:	0f 8e cb 00 00 00    	jle    c000cb6c <tcp_receive+0xe7c>
c000caa1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000caa5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000caa8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000caab:	89 c2                	mov    edx,eax
c000caad:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000cab2:	89 d7                	mov    edi,edx
c000cab4:	29 c7                	sub    edi,eax
c000cab6:	89 f8                	mov    eax,edi
c000cab8:	66 a3 c8 b8 03 c0    	mov    ds:0xc003b8c8,ax
c000cabe:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000cac3:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cac7:	0f b7 c0             	movzx  eax,ax
c000caca:	83 ec 0c             	sub    esp,0xc
c000cacd:	50                   	push   eax
c000cace:	e8 49 41 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cad3:	83 c4 10             	add    esp,0x10
c000cad6:	0f b7 c0             	movzx  eax,ax
c000cad9:	83 e0 02             	and    eax,0x2
c000cadc:	74 0e                	je     c000caec <tcp_receive+0xdfc>
c000cade:	a1 c8 b8 03 c0       	mov    eax,ds:0xc003b8c8
c000cae3:	83 e8 01             	sub    eax,0x1
c000cae6:	66 a3 c8 b8 03 c0    	mov    ds:0xc003b8c8,ax
c000caec:	a1 c8 b8 03 c0       	mov    eax,ds:0xc003b8c8
c000caf1:	0f b7 d0             	movzx  edx,ax
c000caf4:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000caf9:	83 ec 08             	sub    esp,0x8
c000cafc:	52                   	push   edx
c000cafd:	50                   	push   eax
c000cafe:	e8 e5 bf ff ff       	call   c0008ae8 <pbuf_realloc>
c000cb03:	83 c4 10             	add    esp,0x10
c000cb06:	8b 1d c8 b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8c8
c000cb0c:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000cb11:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cb15:	0f b7 c0             	movzx  eax,ax
c000cb18:	83 ec 0c             	sub    esp,0xc
c000cb1b:	50                   	push   eax
c000cb1c:	e8 fb 40 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cb21:	83 c4 10             	add    esp,0x10
c000cb24:	0f b7 c0             	movzx  eax,ax
c000cb27:	83 e0 03             	and    eax,0x3
c000cb2a:	0f 95 c0             	setne  al
c000cb2d:	0f b6 c0             	movzx  eax,al
c000cb30:	01 d8                	add    eax,ebx
c000cb32:	66 a3 aa b8 03 c0    	mov    ds:0xc003b8aa,ax
c000cb38:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000cb3e:	0f b7 d0             	movzx  edx,ax
c000cb41:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000cb46:	01 c2                	add    edx,eax
c000cb48:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cb4c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cb4f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cb52:	39 c2                	cmp    edx,eax
c000cb54:	74 16                	je     c000cb6c <tcp_receive+0xe7c>
c000cb56:	83 ec 08             	sub    esp,0x8
c000cb59:	68 0c 0d 03 c0       	push   0xc0030d0c
c000cb5e:	68 46 03 03 c0       	push   0xc0030346
c000cb63:	e8 e4 32 01 00       	call   c001fe4c <CPrintf>
c000cb68:	83 c4 10             	add    esp,0x10
c000cb6b:	90                   	nop
c000cb6c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb70:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cb74:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cb7a:	66 90                	xchg   ax,ax
c000cb7c:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000cb82:	0f b7 d0             	movzx  edx,ax
c000cb85:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000cb8a:	01 c2                	add    edx,eax
c000cb8c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb90:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000cb93:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb97:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000cb9a:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000cba0:	0f b7 d2             	movzx  edx,dx
c000cba3:	0f b7 c0             	movzx  eax,ax
c000cba6:	39 c2                	cmp    edx,eax
c000cba8:	73 16                	jae    c000cbc0 <tcp_receive+0xed0>
c000cbaa:	83 ec 08             	sub    esp,0x8
c000cbad:	68 48 0d 03 c0       	push   0xc0030d48
c000cbb2:	68 46 03 03 c0       	push   0xc0030346
c000cbb7:	e8 90 32 01 00       	call   c001fe4c <CPrintf>
c000cbbc:	83 c4 10             	add    esp,0x10
c000cbbf:	90                   	nop
c000cbc0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbc4:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000cbc7:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000cbcd:	89 d6                	mov    esi,edx
c000cbcf:	29 c6                	sub    esi,eax
c000cbd1:	89 f0                	mov    eax,esi
c000cbd3:	89 c2                	mov    edx,eax
c000cbd5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbd9:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c000cbdd:	83 ec 0c             	sub    esp,0xc
c000cbe0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cbe4:	e8 5b d2 ff ff       	call   c0009e44 <tcp_update_rcv_ann_wnd>
c000cbe9:	83 c4 10             	add    esp,0x10
c000cbec:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000cbf1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cbf4:	0f b7 c0             	movzx  eax,ax
c000cbf7:	85 c0                	test   eax,eax
c000cbf9:	74 15                	je     c000cc10 <tcp_receive+0xf20>
c000cbfb:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000cc00:	a3 a4 b8 03 c0       	mov    ds:0xc003b8a4,eax
c000cc05:	c7 05 c4 b8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b8c4,0x0
c000cc0f:	90                   	nop
c000cc10:	a1 cc b8 03 c0       	mov    eax,ds:0xc003b8cc
c000cc15:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cc19:	0f b7 c0             	movzx  eax,ax
c000cc1c:	83 ec 0c             	sub    esp,0xc
c000cc1f:	50                   	push   eax
c000cc20:	e8 f7 3f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cc25:	83 c4 10             	add    esp,0x10
c000cc28:	0f b7 c0             	movzx  eax,ax
c000cc2b:	83 e0 01             	and    eax,0x1
c000cc2e:	0f 84 dc 01 00 00    	je     c000ce10 <tcp_receive+0x1120>
c000cc34:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000cc39:	83 c8 20             	or     eax,0x20
c000cc3c:	a2 a8 b8 03 c0       	mov    ds:0xc003b8a8,al
c000cc41:	e9 ca 01 00 00       	jmp    c000ce10 <tcp_receive+0x1120>
c000cc46:	66 90                	xchg   ax,ax
c000cc48:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc4c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc56:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc5a:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc60:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc63:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cc66:	a3 b4 b8 03 c0       	mov    ds:0xc003b8b4,eax
c000cc6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc6f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cc72:	0f b7 d8             	movzx  ebx,ax
c000cc75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc79:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc7c:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cc80:	0f b7 c0             	movzx  eax,ax
c000cc83:	83 ec 0c             	sub    esp,0xc
c000cc86:	50                   	push   eax
c000cc87:	e8 90 3f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cc8c:	83 c4 10             	add    esp,0x10
c000cc8f:	0f b7 c0             	movzx  eax,ax
c000cc92:	83 e0 03             	and    eax,0x3
c000cc95:	0f 95 c0             	setne  al
c000cc98:	0f b6 c0             	movzx  eax,al
c000cc9b:	8d 14 03             	lea    edx,[ebx+eax*1]
c000cc9e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cca2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cca5:	01 c2                	add    edx,eax
c000cca7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccab:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000ccae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccb2:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ccb5:	0f b7 d8             	movzx  ebx,ax
c000ccb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ccbc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ccbf:	0f b7 f0             	movzx  esi,ax
c000ccc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ccc6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ccc9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cccd:	0f b7 c0             	movzx  eax,ax
c000ccd0:	83 ec 0c             	sub    esp,0xc
c000ccd3:	50                   	push   eax
c000ccd4:	e8 43 3f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ccd9:	83 c4 10             	add    esp,0x10
c000ccdc:	0f b7 c0             	movzx  eax,ax
c000ccdf:	83 e0 03             	and    eax,0x3
c000cce2:	0f 95 c0             	setne  al
c000cce5:	0f b6 c0             	movzx  eax,al
c000cce8:	01 f0                	add    eax,esi
c000ccea:	39 c3                	cmp    ebx,eax
c000ccec:	7d 16                	jge    c000cd04 <tcp_receive+0x1014>
c000ccee:	83 ec 08             	sub    esp,0x8
c000ccf1:	68 68 0d 03 c0       	push   0xc0030d68
c000ccf6:	68 46 03 03 c0       	push   0xc0030346
c000ccfb:	e8 4c 31 01 00       	call   c001fe4c <CPrintf>
c000cd00:	83 c4 10             	add    esp,0x10
c000cd03:	90                   	nop
c000cd04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd08:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cd0b:	0f b7 d8             	movzx  ebx,ax
c000cd0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd12:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cd15:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cd19:	0f b7 c0             	movzx  eax,ax
c000cd1c:	83 ec 0c             	sub    esp,0xc
c000cd1f:	50                   	push   eax
c000cd20:	e8 f7 3e ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cd25:	83 c4 10             	add    esp,0x10
c000cd28:	0f b7 c0             	movzx  eax,ax
c000cd2b:	83 e0 03             	and    eax,0x3
c000cd2e:	0f 95 c0             	setne  al
c000cd31:	0f b6 c0             	movzx  eax,al
c000cd34:	8d 14 03             	lea    edx,[ebx+eax*1]
c000cd37:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd3b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cd3e:	29 d0                	sub    eax,edx
c000cd40:	89 c2                	mov    edx,eax
c000cd42:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd46:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c000cd4a:	83 ec 0c             	sub    esp,0xc
c000cd4d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cd51:	e8 ee d0 ff ff       	call   c0009e44 <tcp_update_rcv_ann_wnd>
c000cd56:	83 c4 10             	add    esp,0x10
c000cd59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd5d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cd60:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cd63:	0f b7 c0             	movzx  eax,ax
c000cd66:	85 c0                	test   eax,eax
c000cd68:	74 3e                	je     c000cda8 <tcp_receive+0x10b8>
c000cd6a:	a1 a4 b8 03 c0       	mov    eax,ds:0xc003b8a4
c000cd6f:	85 c0                	test   eax,eax
c000cd71:	74 1d                	je     c000cd90 <tcp_receive+0x10a0>
c000cd73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd77:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cd7a:	a1 a4 b8 03 c0       	mov    eax,ds:0xc003b8a4
c000cd7f:	83 ec 08             	sub    esp,0x8
c000cd82:	52                   	push   edx
c000cd83:	50                   	push   eax
c000cd84:	e8 cf bf ff ff       	call   c0008d58 <pbuf_cat>
c000cd89:	83 c4 10             	add    esp,0x10
c000cd8c:	eb 0e                	jmp    c000cd9c <tcp_receive+0x10ac>
c000cd8e:	66 90                	xchg   ax,ax
c000cd90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cd97:	a3 a4 b8 03 c0       	mov    ds:0xc003b8a4,eax
c000cd9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cda0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cda7:	90                   	nop
c000cda8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cdac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cdaf:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cdb3:	0f b7 c0             	movzx  eax,ax
c000cdb6:	83 ec 0c             	sub    esp,0xc
c000cdb9:	50                   	push   eax
c000cdba:	e8 5d 3e ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cdbf:	83 c4 10             	add    esp,0x10
c000cdc2:	0f b7 c0             	movzx  eax,ax
c000cdc5:	83 e0 01             	and    eax,0x1
c000cdc8:	74 26                	je     c000cdf0 <tcp_receive+0x1100>
c000cdca:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000cdcf:	83 c8 20             	or     eax,0x20
c000cdd2:	a2 a8 b8 03 c0       	mov    ds:0xc003b8a8,al
c000cdd7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cddb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000cdde:	83 f8 04             	cmp    eax,0x4
c000cde1:	75 0d                	jne    c000cdf0 <tcp_receive+0x1100>
c000cde3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cde7:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000cdee:	66 90                	xchg   ax,ax
c000cdf0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cdf4:	8b 10                	mov    edx,DWORD PTR [eax]
c000cdf6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cdfa:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000ce00:	83 ec 0c             	sub    esp,0xc
c000ce03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce07:	e8 94 d3 ff ff       	call   c000a1a0 <tcp_seg_free>
c000ce0c:	83 c4 10             	add    esp,0x10
c000ce0f:	90                   	nop
c000ce10:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce14:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ce1a:	85 c0                	test   eax,eax
c000ce1c:	74 22                	je     c000ce40 <tcp_receive+0x1150>
c000ce1e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce22:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ce28:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce2b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ce2e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce32:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000ce35:	39 c2                	cmp    edx,eax
c000ce37:	0f 84 0b fe ff ff    	je     c000cc48 <tcp_receive+0xf58>
c000ce3d:	8d 76 00             	lea    esi,[esi+0x0]
c000ce40:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce44:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ce47:	0f b6 c0             	movzx  eax,al
c000ce4a:	83 e0 01             	and    eax,0x1
c000ce4d:	74 2d                	je     c000ce7c <tcp_receive+0x118c>
c000ce4f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce53:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ce56:	83 e0 fe             	and    eax,0xfffffffe
c000ce59:	88 c2                	mov    dl,al
c000ce5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce5f:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ce62:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce66:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ce69:	83 c8 02             	or     eax,0x2
c000ce6c:	88 c2                	mov    dl,al
c000ce6e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce72:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ce75:	e9 2e 05 00 00       	jmp    c000d3a8 <tcp_receive+0x16b8>
c000ce7a:	66 90                	xchg   ax,ax
c000ce7c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce80:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ce83:	83 c8 01             	or     eax,0x1
c000ce86:	88 c2                	mov    dl,al
c000ce88:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce8c:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ce8f:	e9 14 05 00 00       	jmp    c000d3a8 <tcp_receive+0x16b8>
c000ce94:	83 ec 0c             	sub    esp,0xc
c000ce97:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ce9b:	e8 00 2f 00 00       	call   c000fda0 <tcp_send_empty_ack>
c000cea0:	83 c4 10             	add    esp,0x10
c000cea3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cea7:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cead:	85 c0                	test   eax,eax
c000ceaf:	75 23                	jne    c000ced4 <tcp_receive+0x11e4>
c000ceb1:	83 ec 0c             	sub    esp,0xc
c000ceb4:	68 c0 b8 03 c0       	push   0xc003b8c0
c000ceb9:	e8 7a d3 ff ff       	call   c000a238 <tcp_seg_copy>
c000cebe:	83 c4 10             	add    esp,0x10
c000cec1:	89 c2                	mov    edx,eax
c000cec3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cec7:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cecd:	e9 d6 04 00 00       	jmp    c000d3a8 <tcp_receive+0x16b8>
c000ced2:	66 90                	xchg   ax,ax
c000ced4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000cedc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cee0:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cee6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ceea:	e9 2d 04 00 00       	jmp    c000d31c <tcp_receive+0x162c>
c000ceef:	90                   	nop
c000cef0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cef4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cef7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cefa:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000ceff:	39 c2                	cmp    edx,eax
c000cf01:	75 75                	jne    c000cf78 <tcp_receive+0x1288>
c000cf03:	8b 15 c8 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8c8
c000cf09:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf0d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cf10:	0f b7 d2             	movzx  edx,dx
c000cf13:	0f b7 c0             	movzx  eax,ax
c000cf16:	39 c2                	cmp    edx,eax
c000cf18:	0f 86 0e 04 00 00    	jbe    c000d32c <tcp_receive+0x163c>
c000cf1e:	83 ec 0c             	sub    esp,0xc
c000cf21:	68 c0 b8 03 c0       	push   0xc003b8c0
c000cf26:	e8 0d d3 ff ff       	call   c000a238 <tcp_seg_copy>
c000cf2b:	83 c4 10             	add    esp,0x10
c000cf2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf32:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cf37:	0f 84 f3 03 00 00    	je     c000d330 <tcp_receive+0x1640>
c000cf3d:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cf42:	74 0c                	je     c000cf50 <tcp_receive+0x1260>
c000cf44:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cf48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf4c:	89 10                	mov    DWORD PTR [eax],edx
c000cf4e:	eb 10                	jmp    c000cf60 <tcp_receive+0x1270>
c000cf50:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cf54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf58:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cf5e:	66 90                	xchg   ax,ax
c000cf60:	83 ec 08             	sub    esp,0x8
c000cf63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6b:	e8 10 ec ff ff       	call   c000bb80 <tcp_oos_insert_segment>
c000cf70:	83 c4 10             	add    esp,0x10
c000cf73:	e9 b8 03 00 00       	jmp    c000d330 <tcp_receive+0x1640>
c000cf78:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cf7d:	75 61                	jne    c000cfe0 <tcp_receive+0x12f0>
c000cf7f:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000cf85:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cf8f:	29 c2                	sub    edx,eax
c000cf91:	89 d0                	mov    eax,edx
c000cf93:	0f 89 2b 01 00 00    	jns    c000d0c4 <tcp_receive+0x13d4>
c000cf99:	83 ec 0c             	sub    esp,0xc
c000cf9c:	68 c0 b8 03 c0       	push   0xc003b8c0
c000cfa1:	e8 92 d2 ff ff       	call   c000a238 <tcp_seg_copy>
c000cfa6:	83 c4 10             	add    esp,0x10
c000cfa9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfad:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cfb2:	0f 84 7c 03 00 00    	je     c000d334 <tcp_receive+0x1644>
c000cfb8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cfbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cfc0:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cfc6:	83 ec 08             	sub    esp,0x8
c000cfc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfcd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd1:	e8 aa eb ff ff       	call   c000bb80 <tcp_oos_insert_segment>
c000cfd6:	83 c4 10             	add    esp,0x10
c000cfd9:	e9 56 03 00 00       	jmp    c000d334 <tcp_receive+0x1644>
c000cfde:	66 90                	xchg   ax,ax
c000cfe0:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000cfe6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cfea:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cfed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cff0:	29 c2                	sub    edx,eax
c000cff2:	89 d0                	mov    eax,edx
c000cff4:	83 e8 01             	sub    eax,0x1
c000cff7:	0f 88 c7 00 00 00    	js     c000d0c4 <tcp_receive+0x13d4>
c000cffd:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000d003:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d007:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d00a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d00d:	29 c2                	sub    edx,eax
c000d00f:	89 d0                	mov    eax,edx
c000d011:	83 c0 01             	add    eax,0x1
c000d014:	85 c0                	test   eax,eax
c000d016:	0f 8f a8 00 00 00    	jg     c000d0c4 <tcp_receive+0x13d4>
c000d01c:	83 ec 0c             	sub    esp,0xc
c000d01f:	68 c0 b8 03 c0       	push   0xc003b8c0
c000d024:	e8 0f d2 ff ff       	call   c000a238 <tcp_seg_copy>
c000d029:	83 c4 10             	add    esp,0x10
c000d02c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d030:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000d035:	0f 84 fd 02 00 00    	je     c000d338 <tcp_receive+0x1648>
c000d03b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d03f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d042:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d045:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d049:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d04c:	0f b7 c0             	movzx  eax,ax
c000d04f:	01 c2                	add    edx,eax
c000d051:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d056:	29 c2                	sub    edx,eax
c000d058:	89 d0                	mov    eax,edx
c000d05a:	85 c0                	test   eax,eax
c000d05c:	7e 42                	jle    c000d0a0 <tcp_receive+0x13b0>
c000d05e:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d063:	89 c2                	mov    edx,eax
c000d065:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d069:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d06c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d06f:	89 d7                	mov    edi,edx
c000d071:	29 c7                	sub    edi,eax
c000d073:	89 f8                	mov    eax,edi
c000d075:	89 c2                	mov    edx,eax
c000d077:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d07b:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000d07f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d083:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d086:	0f b7 d0             	movzx  edx,ax
c000d089:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d08d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d090:	83 ec 08             	sub    esp,0x8
c000d093:	52                   	push   edx
c000d094:	50                   	push   eax
c000d095:	e8 4e ba ff ff       	call   c0008ae8 <pbuf_realloc>
c000d09a:	83 c4 10             	add    esp,0x10
c000d09d:	8d 76 00             	lea    esi,[esi+0x0]
c000d0a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d0a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0a8:	89 10                	mov    DWORD PTR [eax],edx
c000d0aa:	83 ec 08             	sub    esp,0x8
c000d0ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b5:	e8 c6 ea ff ff       	call   c000bb80 <tcp_oos_insert_segment>
c000d0ba:	83 c4 10             	add    esp,0x10
c000d0bd:	e9 76 02 00 00       	jmp    c000d338 <tcp_receive+0x1648>
c000d0c2:	66 90                	xchg   ax,ax
c000d0c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0ca:	85 c0                	test   eax,eax
c000d0cc:	0f 85 36 02 00 00    	jne    c000d308 <tcp_receive+0x1618>
c000d0d2:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000d0d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0dc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d0df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d0e2:	29 c2                	sub    edx,eax
c000d0e4:	89 d0                	mov    eax,edx
c000d0e6:	85 c0                	test   eax,eax
c000d0e8:	0f 8e 1a 02 00 00    	jle    c000d308 <tcp_receive+0x1618>
c000d0ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0f2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d0f5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d0f9:	0f b7 c0             	movzx  eax,ax
c000d0fc:	83 ec 0c             	sub    esp,0xc
c000d0ff:	50                   	push   eax
c000d100:	e8 17 3b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d105:	83 c4 10             	add    esp,0x10
c000d108:	0f b7 c0             	movzx  eax,ax
c000d10b:	83 e0 01             	and    eax,0x1
c000d10e:	0f 85 28 02 00 00    	jne    c000d33c <tcp_receive+0x164c>
c000d114:	83 ec 0c             	sub    esp,0xc
c000d117:	68 c0 b8 03 c0       	push   0xc003b8c0
c000d11c:	e8 17 d1 ff ff       	call   c000a238 <tcp_seg_copy>
c000d121:	83 c4 10             	add    esp,0x10
c000d124:	89 c2                	mov    edx,eax
c000d126:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d12a:	89 10                	mov    DWORD PTR [eax],edx
c000d12c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d130:	8b 00                	mov    eax,DWORD PTR [eax]
c000d132:	85 c0                	test   eax,eax
c000d134:	0f 84 06 02 00 00    	je     c000d340 <tcp_receive+0x1650>
c000d13a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d13e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d141:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d144:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d148:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d14b:	0f b7 c0             	movzx  eax,ax
c000d14e:	01 c2                	add    edx,eax
c000d150:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d155:	29 c2                	sub    edx,eax
c000d157:	89 d0                	mov    eax,edx
c000d159:	85 c0                	test   eax,eax
c000d15b:	7e 3f                	jle    c000d19c <tcp_receive+0x14ac>
c000d15d:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d162:	89 c2                	mov    edx,eax
c000d164:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d168:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d16b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d16e:	89 d6                	mov    esi,edx
c000d170:	29 c6                	sub    esi,eax
c000d172:	89 f0                	mov    eax,esi
c000d174:	89 c2                	mov    edx,eax
c000d176:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d17a:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000d17e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d182:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d185:	0f b7 d0             	movzx  edx,ax
c000d188:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d18c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d18f:	83 ec 08             	sub    esp,0x8
c000d192:	52                   	push   edx
c000d193:	50                   	push   eax
c000d194:	e8 4f b9 ff ff       	call   c0008ae8 <pbuf_realloc>
c000d199:	83 c4 10             	add    esp,0x10
c000d19c:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000d1a2:	0f b7 d0             	movzx  edx,ax
c000d1a5:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d1aa:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d1ad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d1b1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d1b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d1b8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d1bb:	0f b7 c0             	movzx  eax,ax
c000d1be:	01 d0                	add    eax,edx
c000d1c0:	39 c1                	cmp    ecx,eax
c000d1c2:	0f 86 78 01 00 00    	jbe    c000d340 <tcp_receive+0x1650>
c000d1c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d1cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d1ce:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d1d1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d1d5:	0f b7 c0             	movzx  eax,ax
c000d1d8:	83 ec 0c             	sub    esp,0xc
c000d1db:	50                   	push   eax
c000d1dc:	e8 3b 3a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d1e1:	83 c4 10             	add    esp,0x10
c000d1e4:	0f b7 c0             	movzx  eax,ax
c000d1e7:	83 e0 01             	and    eax,0x1
c000d1ea:	74 54                	je     c000d240 <tcp_receive+0x1550>
c000d1ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d1f0:	8b 00                	mov    eax,DWORD PTR [eax]
c000d1f2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d1f5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d1f9:	80 e4 c0             	and    ah,0xc0
c000d1fc:	89 c3                	mov    ebx,eax
c000d1fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d202:	8b 00                	mov    eax,DWORD PTR [eax]
c000d204:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d207:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d20b:	0f b7 c0             	movzx  eax,ax
c000d20e:	83 ec 0c             	sub    esp,0xc
c000d211:	50                   	push   eax
c000d212:	e8 05 3a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d217:	83 c4 10             	add    esp,0x10
c000d21a:	0f b7 c0             	movzx  eax,ax
c000d21d:	83 e0 3e             	and    eax,0x3e
c000d220:	83 ec 0c             	sub    esp,0xc
c000d223:	50                   	push   eax
c000d224:	e8 f3 39 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d229:	83 c4 10             	add    esp,0x10
c000d22c:	09 d8                	or     eax,ebx
c000d22e:	89 c2                	mov    edx,eax
c000d230:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d234:	8b 00                	mov    eax,DWORD PTR [eax]
c000d236:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d239:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000d23d:	8d 76 00             	lea    esi,[esi+0x0]
c000d240:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d244:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d247:	89 c2                	mov    edx,eax
c000d249:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d24d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d250:	01 d0                	add    eax,edx
c000d252:	89 c1                	mov    ecx,eax
c000d254:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d259:	89 c2                	mov    edx,eax
c000d25b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d25f:	8b 00                	mov    eax,DWORD PTR [eax]
c000d261:	89 cf                	mov    edi,ecx
c000d263:	29 d7                	sub    edi,edx
c000d265:	89 fa                	mov    edx,edi
c000d267:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000d26b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d26f:	8b 00                	mov    eax,DWORD PTR [eax]
c000d271:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d274:	0f b7 d0             	movzx  edx,ax
c000d277:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d27b:	8b 00                	mov    eax,DWORD PTR [eax]
c000d27d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d280:	83 ec 08             	sub    esp,0x8
c000d283:	52                   	push   edx
c000d284:	50                   	push   eax
c000d285:	e8 5e b8 ff ff       	call   c0008ae8 <pbuf_realloc>
c000d28a:	83 c4 10             	add    esp,0x10
c000d28d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d291:	8b 00                	mov    eax,DWORD PTR [eax]
c000d293:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
c000d296:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d29a:	8b 00                	mov    eax,DWORD PTR [eax]
c000d29c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d29f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d2a3:	0f b7 c0             	movzx  eax,ax
c000d2a6:	83 ec 0c             	sub    esp,0xc
c000d2a9:	50                   	push   eax
c000d2aa:	e8 6d 39 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d2af:	83 c4 10             	add    esp,0x10
c000d2b2:	0f b7 c0             	movzx  eax,ax
c000d2b5:	83 e0 03             	and    eax,0x3
c000d2b8:	0f 95 c0             	setne  al
c000d2bb:	0f b6 c0             	movzx  eax,al
c000d2be:	01 d8                	add    eax,ebx
c000d2c0:	66 a3 aa b8 03 c0    	mov    ds:0xc003b8aa,ax
c000d2c6:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000d2cc:	0f b7 d0             	movzx  edx,ax
c000d2cf:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d2d4:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d2d7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d2db:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d2de:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d2e2:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d2e5:	0f b7 c0             	movzx  eax,ax
c000d2e8:	01 d0                	add    eax,edx
c000d2ea:	39 c1                	cmp    ecx,eax
c000d2ec:	74 52                	je     c000d340 <tcp_receive+0x1650>
c000d2ee:	83 ec 08             	sub    esp,0x8
c000d2f1:	68 d4 0c 03 c0       	push   0xc0030cd4
c000d2f6:	68 46 03 03 c0       	push   0xc0030346
c000d2fb:	e8 4c 2b 01 00       	call   c001fe4c <CPrintf>
c000d300:	83 c4 10             	add    esp,0x10
c000d303:	eb 3b                	jmp    c000d340 <tcp_receive+0x1650>
c000d305:	8d 76 00             	lea    esi,[esi+0x0]
c000d308:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d30c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d310:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d314:	8b 00                	mov    eax,DWORD PTR [eax]
c000d316:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d31a:	66 90                	xchg   ax,ax
c000d31c:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000d321:	0f 85 c9 fb ff ff    	jne    c000cef0 <tcp_receive+0x1200>
c000d327:	eb 7f                	jmp    c000d3a8 <tcp_receive+0x16b8>
c000d329:	8d 76 00             	lea    esi,[esi+0x0]
c000d32c:	90                   	nop
c000d32d:	eb 79                	jmp    c000d3a8 <tcp_receive+0x16b8>
c000d32f:	90                   	nop
c000d330:	90                   	nop
c000d331:	eb 75                	jmp    c000d3a8 <tcp_receive+0x16b8>
c000d333:	90                   	nop
c000d334:	90                   	nop
c000d335:	eb 71                	jmp    c000d3a8 <tcp_receive+0x16b8>
c000d337:	90                   	nop
c000d338:	90                   	nop
c000d339:	eb 6d                	jmp    c000d3a8 <tcp_receive+0x16b8>
c000d33b:	90                   	nop
c000d33c:	90                   	nop
c000d33d:	eb 69                	jmp    c000d3a8 <tcp_receive+0x16b8>
c000d33f:	90                   	nop
c000d340:	90                   	nop
c000d341:	eb 65                	jmp    c000d3a8 <tcp_receive+0x16b8>
c000d343:	90                   	nop
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d34b:	e8 50 2a 00 00       	call   c000fda0 <tcp_send_empty_ack>
c000d350:	83 c4 10             	add    esp,0x10
c000d353:	eb 53                	jmp    c000d3a8 <tcp_receive+0x16b8>
c000d355:	8d 76 00             	lea    esi,[esi+0x0]
c000d358:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000d35e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d362:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d365:	29 c2                	sub    edx,eax
c000d367:	89 d0                	mov    eax,edx
c000d369:	78 25                	js     c000d390 <tcp_receive+0x16a0>
c000d36b:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000d371:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d375:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d378:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d37c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d37f:	0f b7 c0             	movzx  eax,ax
c000d382:	01 c8                	add    eax,ecx
c000d384:	29 c2                	sub    edx,eax
c000d386:	89 d0                	mov    eax,edx
c000d388:	83 c0 01             	add    eax,0x1
c000d38b:	85 c0                	test   eax,eax
c000d38d:	7e 19                	jle    c000d3a8 <tcp_receive+0x16b8>
c000d38f:	90                   	nop
c000d390:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d394:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d397:	83 c8 02             	or     eax,0x2
c000d39a:	88 c2                	mov    dl,al
c000d39c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d3a0:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d3a3:	eb 03                	jmp    c000d3a8 <tcp_receive+0x16b8>
c000d3a5:	8d 76 00             	lea    esi,[esi+0x0]
c000d3a8:	90                   	nop
c000d3a9:	83 c4 30             	add    esp,0x30
c000d3ac:	5b                   	pop    ebx
c000d3ad:	5e                   	pop    esi
c000d3ae:	5f                   	pop    edi
c000d3af:	c3                   	ret    

c000d3b0 <tcp_parseopt>:
c000d3b0:	83 ec 1c             	sub    esp,0x1c
c000d3b3:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000d3b8:	83 c0 14             	add    eax,0x14
c000d3bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d3bf:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000d3c4:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d3c8:	0f b7 c0             	movzx  eax,ax
c000d3cb:	83 ec 0c             	sub    esp,0xc
c000d3ce:	50                   	push   eax
c000d3cf:	e8 48 38 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d3d4:	83 c4 10             	add    esp,0x10
c000d3d7:	0f b7 c0             	movzx  eax,ax
c000d3da:	c1 e8 0c             	shr    eax,0xc
c000d3dd:	0f b7 c0             	movzx  eax,ax
c000d3e0:	83 f8 05             	cmp    eax,0x5
c000d3e3:	0f 86 6f 01 00 00    	jbe    c000d558 <tcp_parseopt+0x1a8>
c000d3e9:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000d3ee:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d3f2:	0f b7 c0             	movzx  eax,ax
c000d3f5:	83 ec 0c             	sub    esp,0xc
c000d3f8:	50                   	push   eax
c000d3f9:	e8 1e 38 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d3fe:	83 c4 10             	add    esp,0x10
c000d401:	0f b7 c0             	movzx  eax,ax
c000d404:	c1 e8 0c             	shr    eax,0xc
c000d407:	83 e8 05             	sub    eax,0x5
c000d40a:	c1 e0 02             	shl    eax,0x2
c000d40d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000d412:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c000d419:	e9 1e 01 00 00       	jmp    c000d53c <tcp_parseopt+0x18c>
c000d41e:	66 90                	xchg   ax,ax
c000d420:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d425:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d429:	01 d0                	add    eax,edx
c000d42b:	8a 00                	mov    al,BYTE PTR [eax]
c000d42d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000d431:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c000d436:	83 f8 01             	cmp    eax,0x1
c000d439:	74 15                	je     c000d450 <tcp_parseopt+0xa0>
c000d43b:	83 f8 02             	cmp    eax,0x2
c000d43e:	74 24                	je     c000d464 <tcp_parseopt+0xb4>
c000d440:	85 c0                	test   eax,eax
c000d442:	0f 85 bc 00 00 00    	jne    c000d504 <tcp_parseopt+0x154>
c000d448:	e9 0b 01 00 00       	jmp    c000d558 <tcp_parseopt+0x1a8>
c000d44d:	8d 76 00             	lea    esi,[esi+0x0]
c000d450:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d455:	83 c0 01             	add    eax,0x1
c000d458:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d45d:	e9 da 00 00 00       	jmp    c000d53c <tcp_parseopt+0x18c>
c000d462:	66 90                	xchg   ax,ax
c000d464:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d469:	8d 50 01             	lea    edx,[eax+0x1]
c000d46c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d470:	01 d0                	add    eax,edx
c000d472:	8a 00                	mov    al,BYTE PTR [eax]
c000d474:	0f b6 c0             	movzx  eax,al
c000d477:	83 f8 04             	cmp    eax,0x4
c000d47a:	0f 85 d0 00 00 00    	jne    c000d550 <tcp_parseopt+0x1a0>
c000d480:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d485:	8d 50 03             	lea    edx,[eax+0x3]
c000d488:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d48d:	39 c2                	cmp    edx,eax
c000d48f:	0f 8d bb 00 00 00    	jge    c000d550 <tcp_parseopt+0x1a0>
c000d495:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d49a:	8d 50 02             	lea    edx,[eax+0x2]
c000d49d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d4a1:	01 d0                	add    eax,edx
c000d4a3:	8a 00                	mov    al,BYTE PTR [eax]
c000d4a5:	0f b6 c0             	movzx  eax,al
c000d4a8:	c1 e0 08             	shl    eax,0x8
c000d4ab:	89 c2                	mov    edx,eax
c000d4ad:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d4b2:	8d 48 03             	lea    ecx,[eax+0x3]
c000d4b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d4b9:	01 c8                	add    eax,ecx
c000d4bb:	8a 00                	mov    al,BYTE PTR [eax]
c000d4bd:	0f b6 c0             	movzx  eax,al
c000d4c0:	09 d0                	or     eax,edx
c000d4c2:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c000d4c7:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d4cc:	3d 18 02 00 00       	cmp    eax,0x218
c000d4d1:	77 11                	ja     c000d4e4 <tcp_parseopt+0x134>
c000d4d3:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d4d8:	85 c0                	test   eax,eax
c000d4da:	74 08                	je     c000d4e4 <tcp_parseopt+0x134>
c000d4dc:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c000d4e1:	eb 09                	jmp    c000d4ec <tcp_parseopt+0x13c>
c000d4e3:	90                   	nop
c000d4e4:	b8 18 02 00 00       	mov    eax,0x218
c000d4e9:	8d 76 00             	lea    esi,[esi+0x0]
c000d4ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d4f0:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d4f4:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d4f9:	83 c0 04             	add    eax,0x4
c000d4fc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d501:	eb 39                	jmp    c000d53c <tcp_parseopt+0x18c>
c000d503:	90                   	nop
c000d504:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d509:	8d 50 01             	lea    edx,[eax+0x1]
c000d50c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d510:	01 d0                	add    eax,edx
c000d512:	8a 00                	mov    al,BYTE PTR [eax]
c000d514:	0f b6 c0             	movzx  eax,al
c000d517:	85 c0                	test   eax,eax
c000d519:	74 39                	je     c000d554 <tcp_parseopt+0x1a4>
c000d51b:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d520:	8d 50 01             	lea    edx,[eax+0x1]
c000d523:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d527:	01 d0                	add    eax,edx
c000d529:	8a 00                	mov    al,BYTE PTR [eax]
c000d52b:	0f b6 c0             	movzx  eax,al
c000d52e:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c000d533:	01 d0                	add    eax,edx
c000d535:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d53a:	66 90                	xchg   ax,ax
c000d53c:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d541:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d546:	39 c2                	cmp    edx,eax
c000d548:	0f 82 d2 fe ff ff    	jb     c000d420 <tcp_parseopt+0x70>
c000d54e:	eb 08                	jmp    c000d558 <tcp_parseopt+0x1a8>
c000d550:	90                   	nop
c000d551:	eb 05                	jmp    c000d558 <tcp_parseopt+0x1a8>
c000d553:	90                   	nop
c000d554:	90                   	nop
c000d555:	8d 76 00             	lea    esi,[esi+0x0]
c000d558:	83 c4 1c             	add    esp,0x1c
c000d55b:	c3                   	ret    

c000d55c <tcp_listen_input>:
c000d55c:	53                   	push   ebx
c000d55d:	83 ec 18             	sub    esp,0x18
c000d560:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000d565:	0f b6 c0             	movzx  eax,al
c000d568:	83 e0 10             	and    eax,0x10
c000d56b:	74 53                	je     c000d5c0 <tcp_listen_input+0x64>
c000d56d:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000d572:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d575:	0f b7 d0             	movzx  edx,ax
c000d578:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000d57d:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000d581:	0f b7 c0             	movzx  eax,ax
c000d584:	66 8b 0d aa b8 03 c0 	mov    cx,WORD PTR ds:0xc003b8aa
c000d58b:	0f b7 d9             	movzx  ebx,cx
c000d58e:	8b 0d b4 b8 03 c0    	mov    ecx,DWORD PTR ds:0xc003b8b4
c000d594:	01 cb                	add    ebx,ecx
c000d596:	8b 0d b0 b8 03 c0    	mov    ecx,DWORD PTR ds:0xc003b8b0
c000d59c:	83 c1 01             	add    ecx,0x1
c000d59f:	83 ec 08             	sub    esp,0x8
c000d5a2:	52                   	push   edx
c000d5a3:	50                   	push   eax
c000d5a4:	68 90 78 03 c0       	push   0xc0037890
c000d5a9:	68 98 78 03 c0       	push   0xc0037898
c000d5ae:	53                   	push   ebx
c000d5af:	51                   	push   ecx
c000d5b0:	e8 8b 2f 00 00       	call   c0010540 <tcp_rst>
c000d5b5:	83 c4 20             	add    esp,0x20
c000d5b8:	e9 a7 01 00 00       	jmp    c000d764 <tcp_listen_input+0x208>
c000d5bd:	8d 76 00             	lea    esi,[esi+0x0]
c000d5c0:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000d5c5:	0f b6 c0             	movzx  eax,al
c000d5c8:	83 e0 02             	and    eax,0x2
c000d5cb:	0f 84 93 01 00 00    	je     c000d764 <tcp_listen_input+0x208>
c000d5d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5d5:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000d5d8:	0f b6 c0             	movzx  eax,al
c000d5db:	83 ec 0c             	sub    esp,0xc
c000d5de:	50                   	push   eax
c000d5df:	e8 e0 df ff ff       	call   c000b5c4 <tcp_alloc>
c000d5e4:	83 c4 10             	add    esp,0x10
c000d5e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d5eb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d5f0:	75 16                	jne    c000d608 <tcp_listen_input+0xac>
c000d5f2:	66 a1 bc 77 03 c0    	mov    ax,ds:0xc00377bc
c000d5f8:	83 c0 01             	add    eax,0x1
c000d5fb:	66 a3 bc 77 03 c0    	mov    ds:0xc00377bc,ax
c000d601:	b0 ff                	mov    al,0xff
c000d603:	e9 60 01 00 00       	jmp    c000d768 <tcp_listen_input+0x20c>
c000d608:	8b 15 98 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037898
c000d60e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d612:	89 10                	mov    DWORD PTR [eax],edx
c000d614:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d618:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000d61b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d61f:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c000d623:	8b 15 90 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037890
c000d629:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d62d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d630:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000d635:	66 8b 10             	mov    dx,WORD PTR [eax]
c000d638:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d63c:	66 89 50 22          	mov    WORD PTR [eax+0x22],dx
c000d640:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d644:	c7 40 10 03 00 00 00 	mov    DWORD PTR [eax+0x10],0x3
c000d64b:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d650:	8d 50 01             	lea    edx,[eax+0x1]
c000d653:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d657:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d65a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d65e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d661:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d665:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d668:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000d66d:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000d671:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d675:	66 89 50 60          	mov    WORD PTR [eax+0x60],dx
c000d679:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d67d:	8b 50 60             	mov    edx,DWORD PTR [eax+0x60]
c000d680:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d684:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000d688:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d68d:	8d 50 ff             	lea    edx,[eax-0x1]
c000d690:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d694:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d697:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d69b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000d69e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d6a2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000d6a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6a9:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
c000d6ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d6b0:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000d6b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6b7:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000d6ba:	83 e0 8c             	and    eax,0xffffff8c
c000d6bd:	88 c2                	mov    dl,al
c000d6bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d6c3:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c000d6c6:	8b 15 70 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037870
c000d6cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d6d0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d6d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d6d7:	a3 70 78 03 c0       	mov    ds:0xc0037870,eax
c000d6dc:	e8 7b 36 00 00       	call   c0010d5c <tcp_timer_needed>
c000d6e1:	83 ec 0c             	sub    esp,0xc
c000d6e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d6e8:	e8 c3 fc ff ff       	call   c000d3b0 <tcp_parseopt>
c000d6ed:	83 c4 10             	add    esp,0x10
c000d6f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d6f4:	8d 50 04             	lea    edx,[eax+0x4]
c000d6f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d6fb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d6fe:	0f b7 c0             	movzx  eax,ax
c000d701:	83 ec 08             	sub    esp,0x8
c000d704:	52                   	push   edx
c000d705:	50                   	push   eax
c000d706:	e8 79 e0 ff ff       	call   c000b784 <tcp_eff_send_mss>
c000d70b:	83 c4 10             	add    esp,0x10
c000d70e:	89 c2                	mov    edx,eax
c000d710:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d714:	66 89 50 3c          	mov    WORD PTR [eax+0x3c],dx
c000d718:	83 ec 08             	sub    esp,0x8
c000d71b:	6a 12                	push   0x12
c000d71d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d721:	e8 ee 22 00 00       	call   c000fa14 <tcp_enqueue_flags>
c000d726:	83 c4 10             	add    esp,0x10
c000d729:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000d72d:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000d732:	85 c0                	test   eax,eax
c000d734:	74 1a                	je     c000d750 <tcp_listen_input+0x1f4>
c000d736:	83 ec 08             	sub    esp,0x8
c000d739:	6a 00                	push   0x0
c000d73b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d73f:	e8 68 db ff ff       	call   c000b2ac <tcp_abandon>
c000d744:	83 c4 10             	add    esp,0x10
c000d747:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000d74b:	eb 1b                	jmp    c000d768 <tcp_listen_input+0x20c>
c000d74d:	8d 76 00             	lea    esi,[esi+0x0]
c000d750:	83 ec 0c             	sub    esp,0xc
c000d753:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d757:	e8 58 29 00 00       	call   c00100b4 <tcp_output>
c000d75c:	83 c4 10             	add    esp,0x10
c000d75f:	eb 07                	jmp    c000d768 <tcp_listen_input+0x20c>
c000d761:	8d 76 00             	lea    esi,[esi+0x0]
c000d764:	b0 00                	mov    al,0x0
c000d766:	66 90                	xchg   ax,ax
c000d768:	83 c4 18             	add    esp,0x18
c000d76b:	5b                   	pop    ebx
c000d76c:	c3                   	ret    
c000d76d:	8d 76 00             	lea    esi,[esi+0x0]

c000d770 <tcp_process>:
c000d770:	53                   	push   ebx
c000d771:	83 ec 18             	sub    esp,0x18
c000d774:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000d779:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000d77e:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000d783:	0f b6 c0             	movzx  eax,al
c000d786:	83 e0 04             	and    eax,0x4
c000d789:	0f 84 bd 00 00 00    	je     c000d84c <tcp_process+0xdc>
c000d78f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d793:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d796:	83 f8 02             	cmp    eax,0x2
c000d799:	75 19                	jne    c000d7b4 <tcp_process+0x44>
c000d79b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d79f:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000d7a2:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000d7a7:	39 c2                	cmp    edx,eax
c000d7a9:	75 45                	jne    c000d7f0 <tcp_process+0x80>
c000d7ab:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d7b0:	eb 3e                	jmp    c000d7f0 <tcp_process+0x80>
c000d7b2:	66 90                	xchg   ax,ax
c000d7b4:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000d7ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7be:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d7c1:	29 c2                	sub    edx,eax
c000d7c3:	89 d0                	mov    eax,edx
c000d7c5:	78 29                	js     c000d7f0 <tcp_process+0x80>
c000d7c7:	8b 15 b4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b4
c000d7cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7d1:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d7d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7d8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d7db:	0f b7 c0             	movzx  eax,ax
c000d7de:	01 c8                	add    eax,ecx
c000d7e0:	29 c2                	sub    edx,eax
c000d7e2:	89 d0                	mov    eax,edx
c000d7e4:	85 c0                	test   eax,eax
c000d7e6:	7f 08                	jg     c000d7f0 <tcp_process+0x80>
c000d7e8:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d7ed:	8d 76 00             	lea    esi,[esi+0x0]
c000d7f0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000d7f5:	85 c0                	test   eax,eax
c000d7f7:	74 4b                	je     c000d844 <tcp_process+0xd4>
c000d7f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d800:	85 c0                	test   eax,eax
c000d802:	75 18                	jne    c000d81c <tcp_process+0xac>
c000d804:	83 ec 08             	sub    esp,0x8
c000d807:	68 90 0d 03 c0       	push   0xc0030d90
c000d80c:	68 46 03 03 c0       	push   0xc0030346
c000d811:	e8 36 26 01 00       	call   c001fe4c <CPrintf>
c000d816:	83 c4 10             	add    esp,0x10
c000d819:	8d 76 00             	lea    esi,[esi+0x0]
c000d81c:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000d821:	83 c8 08             	or     eax,0x8
c000d824:	a2 a8 b8 03 c0       	mov    ds:0xc003b8a8,al
c000d829:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d82d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d830:	83 e0 fe             	and    eax,0xfffffffe
c000d833:	88 c2                	mov    dl,al
c000d835:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d839:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d83c:	b0 f5                	mov    al,0xf5
c000d83e:	e9 c9 08 00 00       	jmp    c000e10c <tcp_process+0x99c>
c000d843:	90                   	nop
c000d844:	b0 00                	mov    al,0x0
c000d846:	e9 c1 08 00 00       	jmp    c000e10c <tcp_process+0x99c>
c000d84b:	90                   	nop
c000d84c:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000d851:	0f b6 c0             	movzx  eax,al
c000d854:	83 e0 02             	and    eax,0x2
c000d857:	74 33                	je     c000d88c <tcp_process+0x11c>
c000d859:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d85d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d860:	83 f8 02             	cmp    eax,0x2
c000d863:	74 27                	je     c000d88c <tcp_process+0x11c>
c000d865:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d869:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d86c:	83 f8 03             	cmp    eax,0x3
c000d86f:	74 1b                	je     c000d88c <tcp_process+0x11c>
c000d871:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d875:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d878:	83 c8 02             	or     eax,0x2
c000d87b:	88 c2                	mov    dl,al
c000d87d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d881:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d884:	b0 00                	mov    al,0x0
c000d886:	e9 81 08 00 00       	jmp    c000e10c <tcp_process+0x99c>
c000d88b:	90                   	nop
c000d88c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d890:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d893:	0f b6 c0             	movzx  eax,al
c000d896:	83 e0 10             	and    eax,0x10
c000d899:	75 0d                	jne    c000d8a8 <tcp_process+0x138>
c000d89b:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000d8a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8a5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000d8a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8ac:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000d8b3:	83 ec 0c             	sub    esp,0xc
c000d8b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d8ba:	e8 f1 fa ff ff       	call   c000d3b0 <tcp_parseopt>
c000d8bf:	83 c4 10             	add    esp,0x10
c000d8c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d8c9:	83 f8 09             	cmp    eax,0x9
c000d8cc:	0f 87 16 08 00 00    	ja     c000e0e8 <tcp_process+0x978>
c000d8d2:	8b 04 85 38 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf0c8]
c000d8d9:	ff e0                	jmp    eax
c000d8db:	90                   	nop
c000d8dc:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000d8e1:	0f b6 c0             	movzx  eax,al
c000d8e4:	83 e0 10             	and    eax,0x10
c000d8e7:	0f 84 07 02 00 00    	je     c000daf4 <tcp_process+0x384>
c000d8ed:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000d8f2:	0f b6 c0             	movzx  eax,al
c000d8f5:	83 e0 02             	and    eax,0x2
c000d8f8:	0f 84 f6 01 00 00    	je     c000daf4 <tcp_process+0x384>
c000d8fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d902:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d905:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d908:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d90b:	83 ec 0c             	sub    esp,0xc
c000d90e:	50                   	push   eax
c000d90f:	e8 2c 33 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000d914:	83 c4 10             	add    esp,0x10
c000d917:	8d 50 01             	lea    edx,[eax+0x1]
c000d91a:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000d91f:	39 c2                	cmp    edx,eax
c000d921:	0f 85 cd 01 00 00    	jne    c000daf4 <tcp_process+0x384>
c000d927:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d92b:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000d92f:	83 c0 01             	add    eax,0x1
c000d932:	89 c2                	mov    edx,eax
c000d934:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d938:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000d93c:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d941:	8d 50 01             	lea    edx,[eax+0x1]
c000d944:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d948:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d94b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d94f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d952:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d956:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d959:	8b 15 b0 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b0
c000d95f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d963:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000d966:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000d96b:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000d96f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d973:	66 89 50 60          	mov    WORD PTR [eax+0x60],dx
c000d977:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000d97c:	8d 50 ff             	lea    edx,[eax-0x1]
c000d97f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d983:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d986:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d98a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d991:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d995:	8d 50 04             	lea    edx,[eax+0x4]
c000d998:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d99c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d99f:	0f b7 c0             	movzx  eax,ax
c000d9a2:	83 ec 08             	sub    esp,0x8
c000d9a5:	52                   	push   edx
c000d9a6:	50                   	push   eax
c000d9a7:	e8 d8 dd ff ff       	call   c000b784 <tcp_eff_send_mss>
c000d9ac:	83 c4 10             	add    esp,0x10
c000d9af:	89 c2                	mov    edx,eax
c000d9b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9b5:	66 89 50 3c          	mov    WORD PTR [eax+0x3c],dx
c000d9b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9bd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9c0:	89 c2                	mov    edx,eax
c000d9c2:	c1 e2 02             	shl    edx,0x2
c000d9c5:	01 d0                	add    eax,edx
c000d9c7:	d1 e0                	shl    eax,1
c000d9c9:	89 c2                	mov    edx,eax
c000d9cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9cf:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000d9d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9d7:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000d9db:	0f b7 c0             	movzx  eax,ax
c000d9de:	83 f8 01             	cmp    eax,0x1
c000d9e1:	75 0d                	jne    c000d9f0 <tcp_process+0x280>
c000d9e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9e7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9ea:	d1 e0                	shl    eax,1
c000d9ec:	eb 0a                	jmp    c000d9f8 <tcp_process+0x288>
c000d9ee:	66 90                	xchg   ax,ax
c000d9f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9f7:	90                   	nop
c000d9f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d9fc:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000da00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da04:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000da07:	0f b7 c0             	movzx  eax,ax
c000da0a:	85 c0                	test   eax,eax
c000da0c:	75 16                	jne    c000da24 <tcp_process+0x2b4>
c000da0e:	83 ec 08             	sub    esp,0x8
c000da11:	68 f3 0e 03 c0       	push   0xc0030ef3
c000da16:	68 46 03 03 c0       	push   0xc0030346
c000da1b:	e8 2c 24 01 00       	call   c001fe4c <CPrintf>
c000da20:	83 c4 10             	add    esp,0x10
c000da23:	90                   	nop
c000da24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da28:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000da2b:	83 e8 01             	sub    eax,0x1
c000da2e:	89 c2                	mov    edx,eax
c000da30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da34:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000da38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da3c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000da3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000da47:	8b 10                	mov    edx,DWORD PTR [eax]
c000da49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da4d:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000da50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da54:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000da57:	85 c0                	test   eax,eax
c000da59:	75 0d                	jne    c000da68 <tcp_process+0x2f8>
c000da5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da5f:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000da65:	eb 15                	jmp    c000da7c <tcp_process+0x30c>
c000da67:	90                   	nop
c000da68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da6c:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000da72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da76:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000da7a:	66 90                	xchg   ax,ax
c000da7c:	83 ec 0c             	sub    esp,0xc
c000da7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da83:	e8 18 c7 ff ff       	call   c000a1a0 <tcp_seg_free>
c000da88:	83 c4 10             	add    esp,0x10
c000da8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da8f:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000da95:	85 c0                	test   eax,eax
c000da97:	74 27                	je     c000dac0 <tcp_process+0x350>
c000da99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da9d:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000daa3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000daa7:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000daaa:	83 ec 04             	sub    esp,0x4
c000daad:	6a 00                	push   0x0
c000daaf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dab3:	52                   	push   edx
c000dab4:	ff d0                	call   eax
c000dab6:	83 c4 10             	add    esp,0x10
c000dab9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000dabd:	eb 09                	jmp    c000dac8 <tcp_process+0x358>
c000dabf:	90                   	nop
c000dac0:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000dac5:	8d 76 00             	lea    esi,[esi+0x0]
c000dac8:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000dacd:	83 f8 f6             	cmp    eax,0xfffffff6
c000dad0:	75 0a                	jne    c000dadc <tcp_process+0x36c>
c000dad2:	b0 f6                	mov    al,0xf6
c000dad4:	e9 33 06 00 00       	jmp    c000e10c <tcp_process+0x99c>
c000dad9:	8d 76 00             	lea    esi,[esi+0x0]
c000dadc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dae0:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dae3:	83 c8 02             	or     eax,0x2
c000dae6:	88 c2                	mov    dl,al
c000dae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daec:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000daef:	e9 f8 05 00 00       	jmp    c000e0ec <tcp_process+0x97c>
c000daf4:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000daf9:	0f b6 c0             	movzx  eax,al
c000dafc:	83 e0 10             	and    eax,0x10
c000daff:	0f 84 e7 05 00 00    	je     c000e0ec <tcp_process+0x97c>
c000db05:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000db0a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000db0d:	0f b7 c8             	movzx  ecx,ax
c000db10:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000db15:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000db19:	0f b7 d0             	movzx  edx,ax
c000db1c:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000db22:	0f b7 d8             	movzx  ebx,ax
c000db25:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000db2a:	01 c3                	add    ebx,eax
c000db2c:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000db31:	83 ec 08             	sub    esp,0x8
c000db34:	51                   	push   ecx
c000db35:	52                   	push   edx
c000db36:	68 90 78 03 c0       	push   0xc0037890
c000db3b:	68 98 78 03 c0       	push   0xc0037898
c000db40:	53                   	push   ebx
c000db41:	50                   	push   eax
c000db42:	e8 f9 29 00 00       	call   c0010540 <tcp_rst>
c000db47:	83 c4 20             	add    esp,0x20
c000db4a:	e9 9d 05 00 00       	jmp    c000e0ec <tcp_process+0x97c>
c000db4f:	90                   	nop
c000db50:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000db55:	0f b6 c0             	movzx  eax,al
c000db58:	83 e0 10             	and    eax,0x10
c000db5b:	0f 84 ab 01 00 00    	je     c000dd0c <tcp_process+0x59c>
c000db61:	8b 15 b0 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b0
c000db67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db6b:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000db6e:	29 c2                	sub    edx,eax
c000db70:	89 d0                	mov    eax,edx
c000db72:	83 e8 01             	sub    eax,0x1
c000db75:	0f 88 45 01 00 00    	js     c000dcc0 <tcp_process+0x550>
c000db7b:	8b 15 b0 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8b0
c000db81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db85:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000db88:	29 c2                	sub    edx,eax
c000db8a:	89 d0                	mov    eax,edx
c000db8c:	85 c0                	test   eax,eax
c000db8e:	0f 8f 2c 01 00 00    	jg     c000dcc0 <tcp_process+0x550>
c000db94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db98:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000db9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dba3:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000dba6:	85 c0                	test   eax,eax
c000dba8:	75 16                	jne    c000dbc0 <tcp_process+0x450>
c000dbaa:	83 ec 08             	sub    esp,0x8
c000dbad:	68 09 0f 03 c0       	push   0xc0030f09
c000dbb2:	68 46 03 03 c0       	push   0xc0030346
c000dbb7:	e8 90 22 01 00       	call   c001fe4c <CPrintf>
c000dbbc:	83 c4 10             	add    esp,0x10
c000dbbf:	90                   	nop
c000dbc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbc4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000dbc7:	85 c0                	test   eax,eax
c000dbc9:	74 25                	je     c000dbf0 <tcp_process+0x480>
c000dbcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbcf:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000dbd2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dbd6:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000dbd9:	83 ec 04             	sub    esp,0x4
c000dbdc:	6a 00                	push   0x0
c000dbde:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dbe2:	52                   	push   edx
c000dbe3:	ff d0                	call   eax
c000dbe5:	83 c4 10             	add    esp,0x10
c000dbe8:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000dbec:	eb 0a                	jmp    c000dbf8 <tcp_process+0x488>
c000dbee:	66 90                	xchg   ax,ax
c000dbf0:	c6 44 24 0e f2       	mov    BYTE PTR [esp+0xe],0xf2
c000dbf5:	8d 76 00             	lea    esi,[esi+0x0]
c000dbf8:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000dbfd:	85 c0                	test   eax,eax
c000dbff:	74 23                	je     c000dc24 <tcp_process+0x4b4>
c000dc01:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000dc06:	83 f8 f6             	cmp    eax,0xfffffff6
c000dc09:	74 11                	je     c000dc1c <tcp_process+0x4ac>
c000dc0b:	83 ec 0c             	sub    esp,0xc
c000dc0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc12:	e8 29 d8 ff ff       	call   c000b440 <tcp_abort>
c000dc17:	83 c4 10             	add    esp,0x10
c000dc1a:	66 90                	xchg   ax,ax
c000dc1c:	b0 f6                	mov    al,0xf6
c000dc1e:	e9 e9 04 00 00       	jmp    c000e10c <tcp_process+0x99c>
c000dc23:	90                   	nop
c000dc24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc28:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000dc2c:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000dc31:	83 ec 0c             	sub    esp,0xc
c000dc34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc38:	e8 b3 e0 ff ff       	call   c000bcf0 <tcp_receive>
c000dc3d:	83 c4 10             	add    esp,0x10
c000dc40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc44:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000dc47:	0f b7 c0             	movzx  eax,ax
c000dc4a:	85 c0                	test   eax,eax
c000dc4c:	74 16                	je     c000dc64 <tcp_process+0x4f4>
c000dc4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc52:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000dc55:	83 e8 01             	sub    eax,0x1
c000dc58:	89 c2                	mov    edx,eax
c000dc5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc5e:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000dc62:	66 90                	xchg   ax,ax
c000dc64:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000dc69:	83 f8 01             	cmp    eax,0x1
c000dc6c:	75 0e                	jne    c000dc7c <tcp_process+0x50c>
c000dc6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc72:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000dc75:	d1 e0                	shl    eax,1
c000dc77:	eb 0b                	jmp    c000dc84 <tcp_process+0x514>
c000dc79:	8d 76 00             	lea    esi,[esi+0x0]
c000dc7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc80:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000dc83:	90                   	nop
c000dc84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dc88:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000dc8c:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000dc91:	0f b6 c0             	movzx  eax,al
c000dc94:	83 e0 20             	and    eax,0x20
c000dc97:	0f 84 ab 00 00 00    	je     c000dd48 <tcp_process+0x5d8>
c000dc9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dca1:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dca4:	83 c8 02             	or     eax,0x2
c000dca7:	88 c2                	mov    dl,al
c000dca9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcad:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dcb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcb4:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000dcbb:	e9 88 00 00 00       	jmp    c000dd48 <tcp_process+0x5d8>
c000dcc0:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000dcc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c000dcc8:	0f b7 c8             	movzx  ecx,ax
c000dccb:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000dcd0:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000dcd4:	0f b7 d0             	movzx  edx,ax
c000dcd7:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000dcdd:	0f b7 d8             	movzx  ebx,ax
c000dce0:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000dce5:	01 c3                	add    ebx,eax
c000dce7:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000dcec:	83 ec 08             	sub    esp,0x8
c000dcef:	51                   	push   ecx
c000dcf0:	52                   	push   edx
c000dcf1:	68 90 78 03 c0       	push   0xc0037890
c000dcf6:	68 98 78 03 c0       	push   0xc0037898
c000dcfb:	53                   	push   ebx
c000dcfc:	50                   	push   eax
c000dcfd:	e8 3e 28 00 00       	call   c0010540 <tcp_rst>
c000dd02:	83 c4 20             	add    esp,0x20
c000dd05:	e9 e6 03 00 00       	jmp    c000e0f0 <tcp_process+0x980>
c000dd0a:	66 90                	xchg   ax,ax
c000dd0c:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000dd11:	0f b6 c0             	movzx  eax,al
c000dd14:	83 e0 02             	and    eax,0x2
c000dd17:	0f 84 d3 03 00 00    	je     c000e0f0 <tcp_process+0x980>
c000dd1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd21:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dd24:	8d 50 ff             	lea    edx,[eax-0x1]
c000dd27:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000dd2c:	39 c2                	cmp    edx,eax
c000dd2e:	0f 85 bc 03 00 00    	jne    c000e0f0 <tcp_process+0x980>
c000dd34:	83 ec 0c             	sub    esp,0xc
c000dd37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd3b:	e8 0c 2a 00 00       	call   c001074c <tcp_rexmit>
c000dd40:	83 c4 10             	add    esp,0x10
c000dd43:	e9 a8 03 00 00       	jmp    c000e0f0 <tcp_process+0x980>
c000dd48:	90                   	nop
c000dd49:	e9 a2 03 00 00       	jmp    c000e0f0 <tcp_process+0x980>
c000dd4e:	66 90                	xchg   ax,ax
c000dd50:	83 ec 0c             	sub    esp,0xc
c000dd53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd57:	e8 94 df ff ff       	call   c000bcf0 <tcp_receive>
c000dd5c:	83 c4 10             	add    esp,0x10
c000dd5f:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000dd64:	0f b6 c0             	movzx  eax,al
c000dd67:	83 e0 20             	and    eax,0x20
c000dd6a:	0f 84 84 03 00 00    	je     c000e0f4 <tcp_process+0x984>
c000dd70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd74:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dd77:	83 c8 02             	or     eax,0x2
c000dd7a:	88 c2                	mov    dl,al
c000dd7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd80:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dd83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd87:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000dd8e:	e9 61 03 00 00       	jmp    c000e0f4 <tcp_process+0x984>
c000dd93:	90                   	nop
c000dd94:	83 ec 0c             	sub    esp,0xc
c000dd97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd9b:	e8 50 df ff ff       	call   c000bcf0 <tcp_receive>
c000dda0:	83 c4 10             	add    esp,0x10
c000dda3:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000dda8:	0f b6 c0             	movzx  eax,al
c000ddab:	83 e0 20             	and    eax,0x20
c000ddae:	0f 84 08 01 00 00    	je     c000debc <tcp_process+0x74c>
c000ddb4:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000ddb9:	0f b6 c0             	movzx  eax,al
c000ddbc:	83 e0 10             	and    eax,0x10
c000ddbf:	0f 84 d3 00 00 00    	je     c000de98 <tcp_process+0x728>
c000ddc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddc9:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000ddcc:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000ddd1:	39 c2                	cmp    edx,eax
c000ddd3:	0f 85 bf 00 00 00    	jne    c000de98 <tcp_process+0x728>
c000ddd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dddd:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dde0:	83 c8 02             	or     eax,0x2
c000dde3:	88 c2                	mov    dl,al
c000dde5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dde9:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ddec:	83 ec 0c             	sub    esp,0xc
c000ddef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddf3:	e8 0c c5 ff ff       	call   c000a304 <tcp_pcb_purge>
c000ddf8:	83 c4 10             	add    esp,0x10
c000ddfb:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000de00:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000de04:	75 12                	jne    c000de18 <tcp_process+0x6a8>
c000de06:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000de0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000de0e:	a3 70 78 03 c0       	mov    ds:0xc0037870,eax
c000de13:	eb 4b                	jmp    c000de60 <tcp_process+0x6f0>
c000de15:	8d 76 00             	lea    esi,[esi+0x0]
c000de18:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000de1d:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000de22:	eb 30                	jmp    c000de54 <tcp_process+0x6e4>
c000de24:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000de29:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000de2c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000de30:	75 12                	jne    c000de44 <tcp_process+0x6d4>
c000de32:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000de37:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000de3b:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000de3e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000de41:	eb 1d                	jmp    c000de60 <tcp_process+0x6f0>
c000de43:	90                   	nop
c000de44:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000de49:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000de4c:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000de51:	8d 76 00             	lea    esi,[esi+0x0]
c000de54:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000de59:	85 c0                	test   eax,eax
c000de5b:	75 c7                	jne    c000de24 <tcp_process+0x6b4>
c000de5d:	8d 76 00             	lea    esi,[esi+0x0]
c000de60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de64:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000de6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de6f:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000de76:	8b 15 84 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037884
c000de7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de80:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000de83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de87:	a3 84 78 03 c0       	mov    ds:0xc0037884,eax
c000de8c:	e8 cb 2e 00 00       	call   c0010d5c <tcp_timer_needed>
c000de91:	e9 62 02 00 00       	jmp    c000e0f8 <tcp_process+0x988>
c000de96:	66 90                	xchg   ax,ax
c000de98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de9c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000de9f:	83 c8 02             	or     eax,0x2
c000dea2:	88 c2                	mov    dl,al
c000dea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dea8:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000deab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000deaf:	c7 40 10 08 00 00 00 	mov    DWORD PTR [eax+0x10],0x8
c000deb6:	e9 3d 02 00 00       	jmp    c000e0f8 <tcp_process+0x988>
c000debb:	90                   	nop
c000debc:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000dec1:	0f b6 c0             	movzx  eax,al
c000dec4:	83 e0 10             	and    eax,0x10
c000dec7:	0f 84 2b 02 00 00    	je     c000e0f8 <tcp_process+0x988>
c000decd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ded1:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000ded4:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000ded9:	39 c2                	cmp    edx,eax
c000dedb:	0f 85 17 02 00 00    	jne    c000e0f8 <tcp_process+0x988>
c000dee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dee5:	c7 40 10 06 00 00 00 	mov    DWORD PTR [eax+0x10],0x6
c000deec:	e9 07 02 00 00       	jmp    c000e0f8 <tcp_process+0x988>
c000def1:	8d 76 00             	lea    esi,[esi+0x0]
c000def4:	83 ec 0c             	sub    esp,0xc
c000def7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000defb:	e8 f0 dd ff ff       	call   c000bcf0 <tcp_receive>
c000df00:	83 c4 10             	add    esp,0x10
c000df03:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000df08:	0f b6 c0             	movzx  eax,al
c000df0b:	83 e0 20             	and    eax,0x20
c000df0e:	0f 84 e8 01 00 00    	je     c000e0fc <tcp_process+0x98c>
c000df14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df18:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000df1b:	83 c8 02             	or     eax,0x2
c000df1e:	88 c2                	mov    dl,al
c000df20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df24:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000df27:	83 ec 0c             	sub    esp,0xc
c000df2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df2e:	e8 d1 c3 ff ff       	call   c000a304 <tcp_pcb_purge>
c000df33:	83 c4 10             	add    esp,0x10
c000df36:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000df3b:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000df3f:	75 0f                	jne    c000df50 <tcp_process+0x7e0>
c000df41:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000df46:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000df49:	a3 70 78 03 c0       	mov    ds:0xc0037870,eax
c000df4e:	eb 48                	jmp    c000df98 <tcp_process+0x828>
c000df50:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000df55:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000df5a:	eb 30                	jmp    c000df8c <tcp_process+0x81c>
c000df5c:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000df61:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000df64:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000df68:	75 12                	jne    c000df7c <tcp_process+0x80c>
c000df6a:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000df6f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000df73:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000df76:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000df79:	eb 1d                	jmp    c000df98 <tcp_process+0x828>
c000df7b:	90                   	nop
c000df7c:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000df81:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000df84:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000df89:	8d 76 00             	lea    esi,[esi+0x0]
c000df8c:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000df91:	85 c0                	test   eax,eax
c000df93:	75 c7                	jne    c000df5c <tcp_process+0x7ec>
c000df95:	8d 76 00             	lea    esi,[esi+0x0]
c000df98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df9c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000dfa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfa7:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000dfae:	8b 15 84 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037884
c000dfb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfb8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dfbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfbf:	a3 84 78 03 c0       	mov    ds:0xc0037884,eax
c000dfc4:	e8 93 2d 00 00       	call   c0010d5c <tcp_timer_needed>
c000dfc9:	e9 2e 01 00 00       	jmp    c000e0fc <tcp_process+0x98c>
c000dfce:	66 90                	xchg   ax,ax
c000dfd0:	83 ec 0c             	sub    esp,0xc
c000dfd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dfd7:	e8 14 dd ff ff       	call   c000bcf0 <tcp_receive>
c000dfdc:	83 c4 10             	add    esp,0x10
c000dfdf:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000dfe4:	0f b6 c0             	movzx  eax,al
c000dfe7:	83 e0 10             	and    eax,0x10
c000dfea:	0f 84 10 01 00 00    	je     c000e100 <tcp_process+0x990>
c000dff0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dff4:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dff7:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000dffc:	39 c2                	cmp    edx,eax
c000dffe:	0f 85 fc 00 00 00    	jne    c000e100 <tcp_process+0x990>
c000e004:	83 ec 0c             	sub    esp,0xc
c000e007:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00b:	e8 f4 c2 ff ff       	call   c000a304 <tcp_pcb_purge>
c000e010:	83 c4 10             	add    esp,0x10
c000e013:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000e018:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000e01c:	75 12                	jne    c000e030 <tcp_process+0x8c0>
c000e01e:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000e023:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e026:	a3 70 78 03 c0       	mov    ds:0xc0037870,eax
c000e02b:	eb 4b                	jmp    c000e078 <tcp_process+0x908>
c000e02d:	8d 76 00             	lea    esi,[esi+0x0]
c000e030:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000e035:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000e03a:	eb 30                	jmp    c000e06c <tcp_process+0x8fc>
c000e03c:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000e041:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e044:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000e048:	75 12                	jne    c000e05c <tcp_process+0x8ec>
c000e04a:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000e04f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e053:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000e056:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e059:	eb 1d                	jmp    c000e078 <tcp_process+0x908>
c000e05b:	90                   	nop
c000e05c:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000e061:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e064:	a3 7c 78 03 c0       	mov    ds:0xc003787c,eax
c000e069:	8d 76 00             	lea    esi,[esi+0x0]
c000e06c:	a1 7c 78 03 c0       	mov    eax,ds:0xc003787c
c000e071:	85 c0                	test   eax,eax
c000e073:	75 c7                	jne    c000e03c <tcp_process+0x8cc>
c000e075:	8d 76 00             	lea    esi,[esi+0x0]
c000e078:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e07c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000e083:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e087:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000e08e:	8b 15 84 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037884
c000e094:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e098:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e09b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e09f:	a3 84 78 03 c0       	mov    ds:0xc0037884,eax
c000e0a4:	e8 b3 2c 00 00       	call   c0010d5c <tcp_timer_needed>
c000e0a9:	eb 55                	jmp    c000e100 <tcp_process+0x990>
c000e0ab:	90                   	nop
c000e0ac:	83 ec 0c             	sub    esp,0xc
c000e0af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0b3:	e8 38 dc ff ff       	call   c000bcf0 <tcp_receive>
c000e0b8:	83 c4 10             	add    esp,0x10
c000e0bb:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000e0c0:	0f b6 c0             	movzx  eax,al
c000e0c3:	83 e0 10             	and    eax,0x10
c000e0c6:	74 3c                	je     c000e104 <tcp_process+0x994>
c000e0c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0cc:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000e0cf:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000e0d4:	39 c2                	cmp    edx,eax
c000e0d6:	75 2c                	jne    c000e104 <tcp_process+0x994>
c000e0d8:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000e0dd:	83 c8 10             	or     eax,0x10
c000e0e0:	a2 a8 b8 03 c0       	mov    ds:0xc003b8a8,al
c000e0e5:	eb 1d                	jmp    c000e104 <tcp_process+0x994>
c000e0e7:	90                   	nop
c000e0e8:	90                   	nop
c000e0e9:	eb 1d                	jmp    c000e108 <tcp_process+0x998>
c000e0eb:	90                   	nop
c000e0ec:	90                   	nop
c000e0ed:	eb 19                	jmp    c000e108 <tcp_process+0x998>
c000e0ef:	90                   	nop
c000e0f0:	90                   	nop
c000e0f1:	eb 15                	jmp    c000e108 <tcp_process+0x998>
c000e0f3:	90                   	nop
c000e0f4:	90                   	nop
c000e0f5:	eb 11                	jmp    c000e108 <tcp_process+0x998>
c000e0f7:	90                   	nop
c000e0f8:	90                   	nop
c000e0f9:	eb 0d                	jmp    c000e108 <tcp_process+0x998>
c000e0fb:	90                   	nop
c000e0fc:	90                   	nop
c000e0fd:	eb 09                	jmp    c000e108 <tcp_process+0x998>
c000e0ff:	90                   	nop
c000e100:	90                   	nop
c000e101:	eb 05                	jmp    c000e108 <tcp_process+0x998>
c000e103:	90                   	nop
c000e104:	90                   	nop
c000e105:	8d 76 00             	lea    esi,[esi+0x0]
c000e108:	b0 00                	mov    al,0x0
c000e10a:	66 90                	xchg   ax,ax
c000e10c:	83 c4 18             	add    esp,0x18
c000e10f:	5b                   	pop    ebx
c000e110:	c3                   	ret    
c000e111:	8d 76 00             	lea    esi,[esi+0x0]

c000e114 <tcp_input>:
c000e114:	53                   	push   ebx
c000e115:	83 ec 18             	sub    esp,0x18
c000e118:	66 a1 b2 77 03 c0    	mov    ax,ds:0xc00377b2
c000e11e:	83 c0 01             	add    eax,0x1
c000e121:	66 a3 b2 77 03 c0    	mov    ds:0xc00377b2,ax
c000e127:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e12b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e12e:	a3 b8 b8 03 c0       	mov    ds:0xc003b8b8,eax
c000e133:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e137:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000e13a:	a1 b8 b8 03 c0       	mov    eax,ds:0xc003b8b8
c000e13f:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e142:	0f b7 c0             	movzx  eax,ax
c000e145:	83 ec 0c             	sub    esp,0xc
c000e148:	50                   	push   eax
c000e149:	e8 ce 2a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e14e:	83 c4 10             	add    esp,0x10
c000e151:	0f b7 c0             	movzx  eax,ax
c000e154:	c1 e8 08             	shr    eax,0x8
c000e157:	0f b7 c0             	movzx  eax,ax
c000e15a:	83 e0 0f             	and    eax,0xf
c000e15d:	c1 e0 02             	shl    eax,0x2
c000e160:	01 d8                	add    eax,ebx
c000e162:	a3 bc b8 03 c0       	mov    ds:0xc003b8bc,eax
c000e167:	a1 b8 b8 03 c0       	mov    eax,ds:0xc003b8b8
c000e16c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e16f:	0f b7 c0             	movzx  eax,ax
c000e172:	83 ec 0c             	sub    esp,0xc
c000e175:	50                   	push   eax
c000e176:	e8 a1 2a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e17b:	83 c4 10             	add    esp,0x10
c000e17e:	0f b7 c0             	movzx  eax,ax
c000e181:	c1 e8 08             	shr    eax,0x8
c000e184:	83 e0 0f             	and    eax,0xf
c000e187:	c1 e0 02             	shl    eax,0x2
c000e18a:	f7 d8                	neg    eax
c000e18c:	98                   	cwde   
c000e18d:	83 ec 08             	sub    esp,0x8
c000e190:	50                   	push   eax
c000e191:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e195:	e8 da a1 ff ff       	call   c0008374 <pbuf_header>
c000e19a:	83 c4 10             	add    esp,0x10
c000e19d:	0f b6 c0             	movzx  eax,al
c000e1a0:	85 c0                	test   eax,eax
c000e1a2:	75 10                	jne    c000e1b4 <tcp_input+0xa0>
c000e1a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e1ab:	0f b7 c0             	movzx  eax,ax
c000e1ae:	83 f8 13             	cmp    eax,0x13
c000e1b1:	77 35                	ja     c000e1e8 <tcp_input+0xd4>
c000e1b3:	90                   	nop
c000e1b4:	66 a1 ba 77 03 c0    	mov    ax,ds:0xc00377ba
c000e1ba:	83 c0 01             	add    eax,0x1
c000e1bd:	66 a3 ba 77 03 c0    	mov    ds:0xc00377ba,ax
c000e1c3:	66 a1 b6 77 03 c0    	mov    ax,ds:0xc00377b6
c000e1c9:	83 c0 01             	add    eax,0x1
c000e1cc:	66 a3 b6 77 03 c0    	mov    ds:0xc00377b6,ax
c000e1d2:	83 ec 0c             	sub    esp,0xc
c000e1d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e1d9:	e8 36 a3 ff ff       	call   c0008514 <pbuf_free>
c000e1de:	83 c4 10             	add    esp,0x10
c000e1e1:	e9 fe 09 00 00       	jmp    c000ebe4 <tcp_input+0xad0>
c000e1e6:	66 90                	xchg   ax,ax
c000e1e8:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c000e1ed:	83 ec 08             	sub    esp,0x8
c000e1f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e1f4:	50                   	push   eax
c000e1f5:	e8 be 5e 00 00       	call   c00140b8 <ip4_addr_isbroadcast>
c000e1fa:	83 c4 10             	add    esp,0x10
c000e1fd:	0f b6 c0             	movzx  eax,al
c000e200:	85 c0                	test   eax,eax
c000e202:	75 14                	jne    c000e218 <tcp_input+0x104>
c000e204:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c000e209:	25 f0 00 00 00       	and    eax,0xf0
c000e20e:	3d e0 00 00 00       	cmp    eax,0xe0
c000e213:	75 37                	jne    c000e24c <tcp_input+0x138>
c000e215:	8d 76 00             	lea    esi,[esi+0x0]
c000e218:	66 a1 c0 77 03 c0    	mov    ax,ds:0xc00377c0
c000e21e:	83 c0 01             	add    eax,0x1
c000e221:	66 a3 c0 77 03 c0    	mov    ds:0xc00377c0,ax
c000e227:	66 a1 b6 77 03 c0    	mov    ax,ds:0xc00377b6
c000e22d:	83 c0 01             	add    eax,0x1
c000e230:	66 a3 b6 77 03 c0    	mov    ds:0xc00377b6,ax
c000e236:	83 ec 0c             	sub    esp,0xc
c000e239:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e23d:	e8 d2 a2 ff ff       	call   c0008514 <pbuf_free>
c000e242:	83 c4 10             	add    esp,0x10
c000e245:	e9 9a 09 00 00       	jmp    c000ebe4 <tcp_input+0xad0>
c000e24a:	66 90                	xchg   ax,ax
c000e24c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e250:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e253:	0f b7 c0             	movzx  eax,ax
c000e256:	83 ec 0c             	sub    esp,0xc
c000e259:	50                   	push   eax
c000e25a:	6a 06                	push   0x6
c000e25c:	68 98 78 03 c0       	push   0xc0037898
c000e261:	68 90 78 03 c0       	push   0xc0037890
c000e266:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e26a:	e8 61 51 00 00       	call   c00133d0 <inet_chksum_pseudo>
c000e26f:	83 c4 20             	add    esp,0x20
c000e272:	0f b7 c0             	movzx  eax,ax
c000e275:	85 c0                	test   eax,eax
c000e277:	74 33                	je     c000e2ac <tcp_input+0x198>
c000e279:	66 a1 b8 77 03 c0    	mov    ax,ds:0xc00377b8
c000e27f:	83 c0 01             	add    eax,0x1
c000e282:	66 a3 b8 77 03 c0    	mov    ds:0xc00377b8,ax
c000e288:	66 a1 b6 77 03 c0    	mov    ax,ds:0xc00377b6
c000e28e:	83 c0 01             	add    eax,0x1
c000e291:	66 a3 b6 77 03 c0    	mov    ds:0xc00377b6,ax
c000e297:	83 ec 0c             	sub    esp,0xc
c000e29a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e29e:	e8 71 a2 ff ff       	call   c0008514 <pbuf_free>
c000e2a3:	83 c4 10             	add    esp,0x10
c000e2a6:	e9 39 09 00 00       	jmp    c000ebe4 <tcp_input+0xad0>
c000e2ab:	90                   	nop
c000e2ac:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e2b1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e2b5:	0f b7 c0             	movzx  eax,ax
c000e2b8:	83 ec 0c             	sub    esp,0xc
c000e2bb:	50                   	push   eax
c000e2bc:	e8 5b 29 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e2c1:	83 c4 10             	add    esp,0x10
c000e2c4:	0f b7 c0             	movzx  eax,ax
c000e2c7:	c1 e8 0c             	shr    eax,0xc
c000e2ca:	88 44 24 02          	mov    BYTE PTR [esp+0x2],al
c000e2ce:	0f b6 44 24 02       	movzx  eax,BYTE PTR [esp+0x2]
c000e2d3:	ba 00 00 00 00       	mov    edx,0x0
c000e2d8:	89 d1                	mov    ecx,edx
c000e2da:	29 c1                	sub    ecx,eax
c000e2dc:	89 c8                	mov    eax,ecx
c000e2de:	c1 e0 02             	shl    eax,0x2
c000e2e1:	98                   	cwde   
c000e2e2:	83 ec 08             	sub    esp,0x8
c000e2e5:	50                   	push   eax
c000e2e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ea:	e8 85 a0 ff ff       	call   c0008374 <pbuf_header>
c000e2ef:	83 c4 10             	add    esp,0x10
c000e2f2:	0f b6 c0             	movzx  eax,al
c000e2f5:	85 c0                	test   eax,eax
c000e2f7:	74 33                	je     c000e32c <tcp_input+0x218>
c000e2f9:	66 a1 ba 77 03 c0    	mov    ax,ds:0xc00377ba
c000e2ff:	83 c0 01             	add    eax,0x1
c000e302:	66 a3 ba 77 03 c0    	mov    ds:0xc00377ba,ax
c000e308:	66 a1 b6 77 03 c0    	mov    ax,ds:0xc00377b6
c000e30e:	83 c0 01             	add    eax,0x1
c000e311:	66 a3 b6 77 03 c0    	mov    ds:0xc00377b6,ax
c000e317:	83 ec 0c             	sub    esp,0xc
c000e31a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e31e:	e8 f1 a1 ff ff       	call   c0008514 <pbuf_free>
c000e323:	83 c4 10             	add    esp,0x10
c000e326:	e9 b9 08 00 00       	jmp    c000ebe4 <tcp_input+0xad0>
c000e32b:	90                   	nop
c000e32c:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e331:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e334:	0f b7 c0             	movzx  eax,ax
c000e337:	8b 1d bc b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8bc
c000e33d:	83 ec 0c             	sub    esp,0xc
c000e340:	50                   	push   eax
c000e341:	e8 d6 28 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e346:	83 c4 10             	add    esp,0x10
c000e349:	66 89 03             	mov    WORD PTR [ebx],ax
c000e34c:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e351:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e355:	0f b7 c0             	movzx  eax,ax
c000e358:	8b 1d bc b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8bc
c000e35e:	83 ec 0c             	sub    esp,0xc
c000e361:	50                   	push   eax
c000e362:	e8 b5 28 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e367:	83 c4 10             	add    esp,0x10
c000e36a:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000e36e:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e373:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e376:	8b 1d bc b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8bc
c000e37c:	83 ec 0c             	sub    esp,0xc
c000e37f:	50                   	push   eax
c000e380:	e8 bb 28 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000e385:	83 c4 10             	add    esp,0x10
c000e388:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e38b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e38e:	a3 b4 b8 03 c0       	mov    ds:0xc003b8b4,eax
c000e393:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e398:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e39b:	8b 1d bc b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8bc
c000e3a1:	83 ec 0c             	sub    esp,0xc
c000e3a4:	50                   	push   eax
c000e3a5:	e8 96 28 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000e3aa:	83 c4 10             	add    esp,0x10
c000e3ad:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000e3b0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e3b3:	a3 b0 b8 03 c0       	mov    ds:0xc003b8b0,eax
c000e3b8:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e3bd:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000e3c1:	0f b7 c0             	movzx  eax,ax
c000e3c4:	8b 1d bc b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8bc
c000e3ca:	83 ec 0c             	sub    esp,0xc
c000e3cd:	50                   	push   eax
c000e3ce:	e8 49 28 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e3d3:	83 c4 10             	add    esp,0x10
c000e3d6:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000e3da:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e3df:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e3e3:	0f b7 c0             	movzx  eax,ax
c000e3e6:	83 ec 0c             	sub    esp,0xc
c000e3e9:	50                   	push   eax
c000e3ea:	e8 2d 28 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e3ef:	83 c4 10             	add    esp,0x10
c000e3f2:	83 e0 3f             	and    eax,0x3f
c000e3f5:	a2 ac b8 03 c0       	mov    ds:0xc003b8ac,al
c000e3fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3fe:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000e401:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000e406:	0f b6 c0             	movzx  eax,al
c000e409:	83 e0 03             	and    eax,0x3
c000e40c:	0f 95 c0             	setne  al
c000e40f:	0f b6 c0             	movzx  eax,al
c000e412:	01 d0                	add    eax,edx
c000e414:	66 a3 aa b8 03 c0    	mov    ds:0xc003b8aa,ax
c000e41a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e422:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c000e427:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e42b:	e9 50 01 00 00       	jmp    c000e580 <tcp_input+0x46c>
c000e430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e434:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e437:	85 c0                	test   eax,eax
c000e439:	75 15                	jne    c000e450 <tcp_input+0x33c>
c000e43b:	83 ec 08             	sub    esp,0x8
c000e43e:	68 b0 0d 03 c0       	push   0xc0030db0
c000e443:	68 46 03 03 c0       	push   0xc0030346
c000e448:	e8 ff 19 01 00       	call   c001fe4c <CPrintf>
c000e44d:	83 c4 10             	add    esp,0x10
c000e450:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e454:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e457:	83 f8 0a             	cmp    eax,0xa
c000e45a:	75 18                	jne    c000e474 <tcp_input+0x360>
c000e45c:	83 ec 08             	sub    esp,0x8
c000e45f:	68 d8 0d 03 c0       	push   0xc0030dd8
c000e464:	68 46 03 03 c0       	push   0xc0030346
c000e469:	e8 de 19 01 00       	call   c001fe4c <CPrintf>
c000e46e:	83 c4 10             	add    esp,0x10
c000e471:	8d 76 00             	lea    esi,[esi+0x0]
c000e474:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e478:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e47b:	83 f8 01             	cmp    eax,0x1
c000e47e:	75 18                	jne    c000e498 <tcp_input+0x384>
c000e480:	83 ec 08             	sub    esp,0x8
c000e483:	68 04 0e 03 c0       	push   0xc0030e04
c000e488:	68 46 03 03 c0       	push   0xc0030346
c000e48d:	e8 ba 19 01 00       	call   c001fe4c <CPrintf>
c000e492:	83 c4 10             	add    esp,0x10
c000e495:	8d 76 00             	lea    esi,[esi+0x0]
c000e498:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e49c:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e4a0:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e4a5:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e4a8:	0f b7 d2             	movzx  edx,dx
c000e4ab:	0f b7 c0             	movzx  eax,ax
c000e4ae:	39 c2                	cmp    edx,eax
c000e4b0:	0f 85 b6 00 00 00    	jne    c000e56c <tcp_input+0x458>
c000e4b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4ba:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e4bd:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e4c2:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e4c6:	0f b7 d2             	movzx  edx,dx
c000e4c9:	0f b7 c0             	movzx  eax,ax
c000e4cc:	39 c2                	cmp    edx,eax
c000e4ce:	0f 85 98 00 00 00    	jne    c000e56c <tcp_input+0x458>
c000e4d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4d8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e4db:	a1 90 78 03 c0       	mov    eax,ds:0xc0037890
c000e4e0:	39 c2                	cmp    edx,eax
c000e4e2:	0f 85 84 00 00 00    	jne    c000e56c <tcp_input+0x458>
c000e4e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4ee:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c000e4f3:	39 c2                	cmp    edx,eax
c000e4f5:	75 75                	jne    c000e56c <tcp_input+0x458>
c000e4f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e4fe:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e502:	75 18                	jne    c000e51c <tcp_input+0x408>
c000e504:	83 ec 08             	sub    esp,0x8
c000e507:	68 2c 0e 03 c0       	push   0xc0030e2c
c000e50c:	68 46 03 03 c0       	push   0xc0030346
c000e511:	e8 36 19 01 00       	call   c001fe4c <CPrintf>
c000e516:	83 c4 10             	add    esp,0x10
c000e519:	8d 76 00             	lea    esi,[esi+0x0]
c000e51c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e521:	74 25                	je     c000e548 <tcp_input+0x434>
c000e523:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e527:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e52a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e52e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e531:	8b 15 70 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037870
c000e537:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e53b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e53e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e542:	a3 70 78 03 c0       	mov    ds:0xc0037870,eax
c000e547:	90                   	nop
c000e548:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e54c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e54f:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e553:	75 3b                	jne    c000e590 <tcp_input+0x47c>
c000e555:	83 ec 08             	sub    esp,0x8
c000e558:	68 58 0e 03 c0       	push   0xc0030e58
c000e55d:	68 46 03 03 c0       	push   0xc0030346
c000e562:	e8 e5 18 01 00       	call   c001fe4c <CPrintf>
c000e567:	83 c4 10             	add    esp,0x10
c000e56a:	eb 24                	jmp    c000e590 <tcp_input+0x47c>
c000e56c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e570:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e574:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e578:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e57b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e57f:	90                   	nop
c000e580:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e585:	0f 85 a5 fe ff ff    	jne    c000e430 <tcp_input+0x31c>
c000e58b:	eb 07                	jmp    c000e594 <tcp_input+0x480>
c000e58d:	8d 76 00             	lea    esi,[esi+0x0]
c000e590:	90                   	nop
c000e591:	8d 76 00             	lea    esi,[esi+0x0]
c000e594:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e599:	0f 85 89 01 00 00    	jne    c000e728 <tcp_input+0x614>
c000e59f:	a1 84 78 03 c0       	mov    eax,ds:0xc0037884
c000e5a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5a8:	e9 ab 00 00 00       	jmp    c000e658 <tcp_input+0x544>
c000e5ad:	8d 76 00             	lea    esi,[esi+0x0]
c000e5b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5b4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e5b7:	83 f8 0a             	cmp    eax,0xa
c000e5ba:	74 18                	je     c000e5d4 <tcp_input+0x4c0>
c000e5bc:	83 ec 08             	sub    esp,0x8
c000e5bf:	68 84 0e 03 c0       	push   0xc0030e84
c000e5c4:	68 46 03 03 c0       	push   0xc0030346
c000e5c9:	e8 7e 18 01 00       	call   c001fe4c <CPrintf>
c000e5ce:	83 c4 10             	add    esp,0x10
c000e5d1:	8d 76 00             	lea    esi,[esi+0x0]
c000e5d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5d8:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e5dc:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e5e1:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e5e4:	0f b7 d2             	movzx  edx,dx
c000e5e7:	0f b7 c0             	movzx  eax,ax
c000e5ea:	39 c2                	cmp    edx,eax
c000e5ec:	75 5e                	jne    c000e64c <tcp_input+0x538>
c000e5ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5f2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e5f5:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e5fa:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e5fe:	0f b7 d2             	movzx  edx,dx
c000e601:	0f b7 c0             	movzx  eax,ax
c000e604:	39 c2                	cmp    edx,eax
c000e606:	75 44                	jne    c000e64c <tcp_input+0x538>
c000e608:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e60c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e60f:	a1 90 78 03 c0       	mov    eax,ds:0xc0037890
c000e614:	39 c2                	cmp    edx,eax
c000e616:	75 34                	jne    c000e64c <tcp_input+0x538>
c000e618:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e61c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e61e:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c000e623:	39 c2                	cmp    edx,eax
c000e625:	75 25                	jne    c000e64c <tcp_input+0x538>
c000e627:	83 ec 0c             	sub    esp,0xc
c000e62a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e62e:	e8 45 d4 ff ff       	call   c000ba78 <tcp_timewait_input>
c000e633:	83 c4 10             	add    esp,0x10
c000e636:	83 ec 0c             	sub    esp,0xc
c000e639:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e63d:	e8 d2 9e ff ff       	call   c0008514 <pbuf_free>
c000e642:	83 c4 10             	add    esp,0x10
c000e645:	e9 9a 05 00 00       	jmp    c000ebe4 <tcp_input+0xad0>
c000e64a:	66 90                	xchg   ax,ax
c000e64c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e650:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e653:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e657:	90                   	nop
c000e658:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e65d:	0f 85 4d ff ff ff    	jne    c000e5b0 <tcp_input+0x49c>
c000e663:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e66b:	a1 78 78 03 c0       	mov    eax,ds:0xc0037878
c000e670:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e674:	eb 52                	jmp    c000e6c8 <tcp_input+0x5b4>
c000e676:	66 90                	xchg   ax,ax
c000e678:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e67c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e67f:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e684:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e688:	0f b7 d2             	movzx  edx,dx
c000e68b:	0f b7 c0             	movzx  eax,ax
c000e68e:	39 c2                	cmp    edx,eax
c000e690:	75 22                	jne    c000e6b4 <tcp_input+0x5a0>
c000e692:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e696:	8b 10                	mov    edx,DWORD PTR [eax]
c000e698:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c000e69d:	39 c2                	cmp    edx,eax
c000e69f:	74 2f                	je     c000e6d0 <tcp_input+0x5bc>
c000e6a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6a5:	85 c0                	test   eax,eax
c000e6a7:	74 27                	je     c000e6d0 <tcp_input+0x5bc>
c000e6a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6af:	85 c0                	test   eax,eax
c000e6b1:	74 1d                	je     c000e6d0 <tcp_input+0x5bc>
c000e6b3:	90                   	nop
c000e6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e6bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6c0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e6c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e6c7:	90                   	nop
c000e6c8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e6cd:	75 a9                	jne    c000e678 <tcp_input+0x564>
c000e6cf:	90                   	nop
c000e6d0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e6d5:	74 51                	je     c000e728 <tcp_input+0x614>
c000e6d7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e6dc:	74 26                	je     c000e704 <tcp_input+0x5f0>
c000e6de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6e2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e6e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e6e9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e6ec:	8b 15 78 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037878
c000e6f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6f6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e6f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6fd:	a3 78 78 03 c0       	mov    ds:0xc0037878,eax
c000e702:	66 90                	xchg   ax,ax
c000e704:	83 ec 0c             	sub    esp,0xc
c000e707:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e70b:	e8 4c ee ff ff       	call   c000d55c <tcp_listen_input>
c000e710:	83 c4 10             	add    esp,0x10
c000e713:	83 ec 0c             	sub    esp,0xc
c000e716:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e71a:	e8 f5 9d ff ff       	call   c0008514 <pbuf_free>
c000e71f:	83 c4 10             	add    esp,0x10
c000e722:	e9 bd 04 00 00       	jmp    c000ebe4 <tcp_input+0xad0>
c000e727:	90                   	nop
c000e728:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e72d:	0f 84 1d 04 00 00    	je     c000eb50 <tcp_input+0xa3c>
c000e733:	c7 05 c0 b8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b8c0,0x0
c000e73d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e741:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e744:	66 a3 c8 b8 03 c0    	mov    ds:0xc003b8c8,ax
c000e74a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e74e:	a3 c4 b8 03 c0       	mov    ds:0xc003b8c4,eax
c000e753:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000e758:	a3 cc b8 03 c0       	mov    ds:0xc003b8cc,eax
c000e75d:	c7 05 a4 b8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b8a4,0x0
c000e767:	c6 05 a8 b8 03 c0 00 	mov    BYTE PTR ds:0xc003b8a8,0x0
c000e76e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e772:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e778:	85 c0                	test   eax,eax
c000e77a:	0f 84 b4 00 00 00    	je     c000e834 <tcp_input+0x720>
c000e780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e784:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e78a:	85 c0                	test   eax,eax
c000e78c:	74 2e                	je     c000e7bc <tcp_input+0x6a8>
c000e78e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e792:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e798:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e79c:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000e7a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e7a6:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e7a9:	6a 00                	push   0x0
c000e7ab:	51                   	push   ecx
c000e7ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e7b0:	52                   	push   edx
c000e7b1:	ff d0                	call   eax
c000e7b3:	83 c4 10             	add    esp,0x10
c000e7b6:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e7ba:	eb 20                	jmp    c000e7dc <tcp_input+0x6c8>
c000e7bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7c0:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e7c6:	6a 00                	push   0x0
c000e7c8:	50                   	push   eax
c000e7c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e7cd:	6a 00                	push   0x0
c000e7cf:	e8 74 c8 ff ff       	call   c000b048 <tcp_recv_null>
c000e7d4:	83 c4 10             	add    esp,0x10
c000e7d7:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e7db:	90                   	nop
c000e7dc:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e7e1:	85 c0                	test   eax,eax
c000e7e3:	75 13                	jne    c000e7f8 <tcp_input+0x6e4>
c000e7e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7e9:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000e7f3:	eb 3f                	jmp    c000e834 <tcp_input+0x720>
c000e7f5:	8d 76 00             	lea    esi,[esi+0x0]
c000e7f8:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e7fd:	83 f8 f6             	cmp    eax,0xfffffff6
c000e800:	74 0e                	je     c000e810 <tcp_input+0x6fc>
c000e802:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000e808:	0f b7 c0             	movzx  eax,ax
c000e80b:	85 c0                	test   eax,eax
c000e80d:	74 25                	je     c000e834 <tcp_input+0x720>
c000e80f:	90                   	nop
c000e810:	66 a1 b6 77 03 c0    	mov    ax,ds:0xc00377b6
c000e816:	83 c0 01             	add    eax,0x1
c000e819:	66 a3 b6 77 03 c0    	mov    ds:0xc00377b6,ax
c000e81f:	83 ec 0c             	sub    esp,0xc
c000e822:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e826:	e8 e9 9c ff ff       	call   c0008514 <pbuf_free>
c000e82b:	83 c4 10             	add    esp,0x10
c000e82e:	e9 b1 03 00 00       	jmp    c000ebe4 <tcp_input+0xad0>
c000e833:	90                   	nop
c000e834:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e838:	a3 88 78 03 c0       	mov    ds:0xc0037888,eax
c000e83d:	83 ec 0c             	sub    esp,0xc
c000e840:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e844:	e8 27 ef ff ff       	call   c000d770 <tcp_process>
c000e849:	83 c4 10             	add    esp,0x10
c000e84c:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e850:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e855:	83 f8 f6             	cmp    eax,0xfffffff6
c000e858:	0f 84 9e 02 00 00    	je     c000eafc <tcp_input+0x9e8>
c000e85e:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000e863:	0f b6 c0             	movzx  eax,al
c000e866:	83 e0 08             	and    eax,0x8
c000e869:	74 59                	je     c000e8c4 <tcp_input+0x7b0>
c000e86b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e86f:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e875:	85 c0                	test   eax,eax
c000e877:	74 1f                	je     c000e898 <tcp_input+0x784>
c000e879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e87d:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e883:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e887:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e88a:	83 ec 08             	sub    esp,0x8
c000e88d:	6a f5                	push   0xfffffff5
c000e88f:	52                   	push   edx
c000e890:	ff d0                	call   eax
c000e892:	83 c4 10             	add    esp,0x10
c000e895:	8d 76 00             	lea    esi,[esi+0x0]
c000e898:	83 ec 08             	sub    esp,0x8
c000e89b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e89f:	68 70 78 03 c0       	push   0xc0037870
c000e8a4:	e8 bb c2 ff ff       	call   c000ab64 <tcp_pcb_remove>
c000e8a9:	83 c4 10             	add    esp,0x10
c000e8ac:	83 ec 08             	sub    esp,0x8
c000e8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8b3:	6a 02                	push   0x2
c000e8b5:	e8 9a 93 ff ff       	call   c0007c54 <memp_free>
c000e8ba:	83 c4 10             	add    esp,0x10
c000e8bd:	e9 4a 02 00 00       	jmp    c000eb0c <tcp_input+0x9f8>
c000e8c2:	66 90                	xchg   ax,ax
c000e8c4:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000e8c9:	0f b6 c0             	movzx  eax,al
c000e8cc:	83 e0 10             	and    eax,0x10
c000e8cf:	74 2b                	je     c000e8fc <tcp_input+0x7e8>
c000e8d1:	83 ec 08             	sub    esp,0x8
c000e8d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8d8:	68 70 78 03 c0       	push   0xc0037870
c000e8dd:	e8 82 c2 ff ff       	call   c000ab64 <tcp_pcb_remove>
c000e8e2:	83 c4 10             	add    esp,0x10
c000e8e5:	83 ec 08             	sub    esp,0x8
c000e8e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8ec:	6a 02                	push   0x2
c000e8ee:	e8 61 93 ff ff       	call   c0007c54 <memp_free>
c000e8f3:	83 c4 10             	add    esp,0x10
c000e8f6:	e9 11 02 00 00       	jmp    c000eb0c <tcp_input+0x9f8>
c000e8fb:	90                   	nop
c000e8fc:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e905:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000e908:	0f b7 c0             	movzx  eax,ax
c000e90b:	85 c0                	test   eax,eax
c000e90d:	74 55                	je     c000e964 <tcp_input+0x850>
c000e90f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e913:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c000e919:	85 c0                	test   eax,eax
c000e91b:	74 2f                	je     c000e94c <tcp_input+0x838>
c000e91d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e921:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c000e927:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e92b:	8b 52 70             	mov    edx,DWORD PTR [edx+0x70]
c000e92e:	0f b7 ca             	movzx  ecx,dx
c000e931:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e935:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e938:	83 ec 04             	sub    esp,0x4
c000e93b:	51                   	push   ecx
c000e93c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e940:	52                   	push   edx
c000e941:	ff d0                	call   eax
c000e943:	83 c4 10             	add    esp,0x10
c000e946:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e94a:	eb 08                	jmp    c000e954 <tcp_input+0x840>
c000e94c:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e951:	8d 76 00             	lea    esi,[esi+0x0]
c000e954:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e959:	83 f8 f6             	cmp    eax,0xfffffff6
c000e95c:	0f 84 9e 01 00 00    	je     c000eb00 <tcp_input+0x9ec>
c000e962:	66 90                	xchg   ax,ax
c000e964:	a1 a4 b8 03 c0       	mov    eax,ds:0xc003b8a4
c000e969:	85 c0                	test   eax,eax
c000e96b:	0f 84 f3 00 00 00    	je     c000ea64 <tcp_input+0x950>
c000e971:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e975:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e97b:	85 c0                	test   eax,eax
c000e97d:	74 15                	je     c000e994 <tcp_input+0x880>
c000e97f:	83 ec 08             	sub    esp,0x8
c000e982:	68 1d 0f 03 c0       	push   0xc0030f1d
c000e987:	68 46 03 03 c0       	push   0xc0030346
c000e98c:	e8 bb 14 01 00       	call   c001fe4c <CPrintf>
c000e991:	83 c4 10             	add    esp,0x10
c000e994:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e998:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000e99b:	0f b6 c0             	movzx  eax,al
c000e99e:	83 e0 10             	and    eax,0x10
c000e9a1:	74 25                	je     c000e9c8 <tcp_input+0x8b4>
c000e9a3:	a1 a4 b8 03 c0       	mov    eax,ds:0xc003b8a4
c000e9a8:	83 ec 0c             	sub    esp,0xc
c000e9ab:	50                   	push   eax
c000e9ac:	e8 63 9b ff ff       	call   c0008514 <pbuf_free>
c000e9b1:	83 c4 10             	add    esp,0x10
c000e9b4:	83 ec 0c             	sub    esp,0xc
c000e9b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e9bb:	e8 80 ca ff ff       	call   c000b440 <tcp_abort>
c000e9c0:	83 c4 10             	add    esp,0x10
c000e9c3:	e9 44 01 00 00       	jmp    c000eb0c <tcp_input+0x9f8>
c000e9c8:	a0 ac b8 03 c0       	mov    al,ds:0xc003b8ac
c000e9cd:	0f b6 c0             	movzx  eax,al
c000e9d0:	83 e0 08             	and    eax,0x8
c000e9d3:	74 13                	je     c000e9e8 <tcp_input+0x8d4>
c000e9d5:	a1 a4 b8 03 c0       	mov    eax,ds:0xc003b8a4
c000e9da:	8a 50 0d             	mov    dl,BYTE PTR [eax+0xd]
c000e9dd:	a1 a4 b8 03 c0       	mov    eax,ds:0xc003b8a4
c000e9e2:	83 ca 01             	or     edx,0x1
c000e9e5:	88 50 0d             	mov    BYTE PTR [eax+0xd],dl
c000e9e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9ec:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e9f2:	85 c0                	test   eax,eax
c000e9f4:	74 2a                	je     c000ea20 <tcp_input+0x90c>
c000e9f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9fa:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000ea00:	8b 0d a4 b8 03 c0    	mov    ecx,DWORD PTR ds:0xc003b8a4
c000ea06:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea0a:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000ea0d:	6a 00                	push   0x0
c000ea0f:	51                   	push   ecx
c000ea10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea14:	52                   	push   edx
c000ea15:	ff d0                	call   eax
c000ea17:	83 c4 10             	add    esp,0x10
c000ea1a:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000ea1e:	eb 1c                	jmp    c000ea3c <tcp_input+0x928>
c000ea20:	a1 a4 b8 03 c0       	mov    eax,ds:0xc003b8a4
c000ea25:	6a 00                	push   0x0
c000ea27:	50                   	push   eax
c000ea28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea2c:	6a 00                	push   0x0
c000ea2e:	e8 15 c6 ff ff       	call   c000b048 <tcp_recv_null>
c000ea33:	83 c4 10             	add    esp,0x10
c000ea36:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000ea3a:	66 90                	xchg   ax,ax
c000ea3c:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000ea41:	83 f8 f6             	cmp    eax,0xfffffff6
c000ea44:	0f 84 ba 00 00 00    	je     c000eb04 <tcp_input+0x9f0>
c000ea4a:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000ea4f:	85 c0                	test   eax,eax
c000ea51:	74 11                	je     c000ea64 <tcp_input+0x950>
c000ea53:	8b 15 a4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8a4
c000ea59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea5d:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
c000ea63:	90                   	nop
c000ea64:	a0 a8 b8 03 c0       	mov    al,ds:0xc003b8a8
c000ea69:	0f b6 c0             	movzx  eax,al
c000ea6c:	83 e0 20             	and    eax,0x20
c000ea6f:	74 6f                	je     c000eae0 <tcp_input+0x9cc>
c000ea71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea75:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ea78:	0f b7 c0             	movzx  eax,ax
c000ea7b:	3d 60 08 00 00       	cmp    eax,0x860
c000ea80:	74 16                	je     c000ea98 <tcp_input+0x984>
c000ea82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea86:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ea89:	83 c0 01             	add    eax,0x1
c000ea8c:	89 c2                	mov    edx,eax
c000ea8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea92:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c000ea96:	66 90                	xchg   ax,ax
c000ea98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea9c:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000eaa2:	85 c0                	test   eax,eax
c000eaa4:	74 26                	je     c000eacc <tcp_input+0x9b8>
c000eaa6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eaaa:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000eab0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eab4:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000eab7:	6a 00                	push   0x0
c000eab9:	6a 00                	push   0x0
c000eabb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eabf:	52                   	push   edx
c000eac0:	ff d0                	call   eax
c000eac2:	83 c4 10             	add    esp,0x10
c000eac5:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000eac9:	eb 09                	jmp    c000ead4 <tcp_input+0x9c0>
c000eacb:	90                   	nop
c000eacc:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000ead1:	8d 76 00             	lea    esi,[esi+0x0]
c000ead4:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000ead9:	83 f8 f6             	cmp    eax,0xfffffff6
c000eadc:	74 2a                	je     c000eb08 <tcp_input+0x9f4>
c000eade:	66 90                	xchg   ax,ax
c000eae0:	c7 05 88 78 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037888,0x0
c000eaea:	83 ec 0c             	sub    esp,0xc
c000eaed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eaf1:	e8 be 15 00 00       	call   c00100b4 <tcp_output>
c000eaf6:	83 c4 10             	add    esp,0x10
c000eaf9:	eb 11                	jmp    c000eb0c <tcp_input+0x9f8>
c000eafb:	90                   	nop
c000eafc:	90                   	nop
c000eafd:	eb 0d                	jmp    c000eb0c <tcp_input+0x9f8>
c000eaff:	90                   	nop
c000eb00:	90                   	nop
c000eb01:	eb 09                	jmp    c000eb0c <tcp_input+0x9f8>
c000eb03:	90                   	nop
c000eb04:	90                   	nop
c000eb05:	eb 05                	jmp    c000eb0c <tcp_input+0x9f8>
c000eb07:	90                   	nop
c000eb08:	90                   	nop
c000eb09:	8d 76 00             	lea    esi,[esi+0x0]
c000eb0c:	c7 05 88 78 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037888,0x0
c000eb16:	c7 05 a4 b8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b8a4,0x0
c000eb20:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000eb25:	85 c0                	test   eax,eax
c000eb27:	0f 84 b7 00 00 00    	je     c000ebe4 <tcp_input+0xad0>
c000eb2d:	a1 c4 b8 03 c0       	mov    eax,ds:0xc003b8c4
c000eb32:	83 ec 0c             	sub    esp,0xc
c000eb35:	50                   	push   eax
c000eb36:	e8 d9 99 ff ff       	call   c0008514 <pbuf_free>
c000eb3b:	83 c4 10             	add    esp,0x10
c000eb3e:	c7 05 c4 b8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b8c4,0x0
c000eb48:	e9 97 00 00 00       	jmp    c000ebe4 <tcp_input+0xad0>
c000eb4d:	8d 76 00             	lea    esi,[esi+0x0]
c000eb50:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000eb55:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000eb59:	0f b7 c0             	movzx  eax,ax
c000eb5c:	83 ec 0c             	sub    esp,0xc
c000eb5f:	50                   	push   eax
c000eb60:	e8 b7 20 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000eb65:	83 c4 10             	add    esp,0x10
c000eb68:	0f b7 c0             	movzx  eax,ax
c000eb6b:	83 e0 04             	and    eax,0x4
c000eb6e:	75 64                	jne    c000ebd4 <tcp_input+0xac0>
c000eb70:	66 a1 c0 77 03 c0    	mov    ax,ds:0xc00377c0
c000eb76:	83 c0 01             	add    eax,0x1
c000eb79:	66 a3 c0 77 03 c0    	mov    ds:0xc00377c0,ax
c000eb7f:	66 a1 b6 77 03 c0    	mov    ax,ds:0xc00377b6
c000eb85:	83 c0 01             	add    eax,0x1
c000eb88:	66 a3 b6 77 03 c0    	mov    ds:0xc00377b6,ax
c000eb8e:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000eb93:	66 8b 00             	mov    ax,WORD PTR [eax]
c000eb96:	0f b7 c8             	movzx  ecx,ax
c000eb99:	a1 bc b8 03 c0       	mov    eax,ds:0xc003b8bc
c000eb9e:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000eba2:	0f b7 d0             	movzx  edx,ax
c000eba5:	66 a1 aa b8 03 c0    	mov    ax,ds:0xc003b8aa
c000ebab:	0f b7 d8             	movzx  ebx,ax
c000ebae:	a1 b4 b8 03 c0       	mov    eax,ds:0xc003b8b4
c000ebb3:	01 c3                	add    ebx,eax
c000ebb5:	a1 b0 b8 03 c0       	mov    eax,ds:0xc003b8b0
c000ebba:	83 ec 08             	sub    esp,0x8
c000ebbd:	51                   	push   ecx
c000ebbe:	52                   	push   edx
c000ebbf:	68 90 78 03 c0       	push   0xc0037890
c000ebc4:	68 98 78 03 c0       	push   0xc0037898
c000ebc9:	53                   	push   ebx
c000ebca:	50                   	push   eax
c000ebcb:	e8 70 19 00 00       	call   c0010540 <tcp_rst>
c000ebd0:	83 c4 20             	add    esp,0x20
c000ebd3:	90                   	nop
c000ebd4:	83 ec 0c             	sub    esp,0xc
c000ebd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ebdb:	e8 34 99 ff ff       	call   c0008514 <pbuf_free>
c000ebe0:	83 c4 10             	add    esp,0x10
c000ebe3:	90                   	nop
c000ebe4:	83 c4 18             	add    esp,0x18
c000ebe7:	5b                   	pop    ebx
c000ebe8:	c3                   	ret    
c000ebe9:	66 90                	xchg   ax,ax
c000ebeb:	90                   	nop

c000ebec <tcp_output_alloc_header>:
c000ebec:	83 ec 2c             	sub    esp,0x2c
c000ebef:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ebf3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ebf7:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000ebfc:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ec01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ec05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec09:	01 d0                	add    eax,edx
c000ec0b:	83 c0 14             	add    eax,0x14
c000ec0e:	0f b7 c0             	movzx  eax,ax
c000ec11:	83 ec 04             	sub    esp,0x4
c000ec14:	6a 00                	push   0x0
c000ec16:	50                   	push   eax
c000ec17:	6a 01                	push   0x1
c000ec19:	e8 d2 9a ff ff       	call   c00086f0 <pbuf_alloc>
c000ec1e:	83 c4 10             	add    esp,0x10
c000ec21:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ec25:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000ec2a:	0f 84 18 01 00 00    	je     c000ed48 <tcp_output_alloc_header+0x15c>
c000ec30:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ec35:	8d 50 13             	lea    edx,[eax+0x13]
c000ec38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ec3c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000ec40:	0f b7 c0             	movzx  eax,ax
c000ec43:	39 c2                	cmp    edx,eax
c000ec45:	7c 15                	jl     c000ec5c <tcp_output_alloc_header+0x70>
c000ec47:	83 ec 08             	sub    esp,0x8
c000ec4a:	68 60 0f 03 c0       	push   0xc0030f60
c000ec4f:	68 46 03 03 c0       	push   0xc0030346
c000ec54:	e8 f3 11 01 00       	call   c001fe4c <CPrintf>
c000ec59:	83 c4 10             	add    esp,0x10
c000ec5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ec60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ec63:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ec67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec6b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ec6e:	0f b7 c0             	movzx  eax,ax
c000ec71:	83 ec 0c             	sub    esp,0xc
c000ec74:	50                   	push   eax
c000ec75:	e8 a2 1f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ec7a:	83 c4 10             	add    esp,0x10
c000ec7d:	89 c2                	mov    edx,eax
c000ec7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec83:	66 89 10             	mov    WORD PTR [eax],dx
c000ec86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec8a:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ec8e:	0f b7 c0             	movzx  eax,ax
c000ec91:	83 ec 0c             	sub    esp,0xc
c000ec94:	50                   	push   eax
c000ec95:	e8 82 1f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ec9a:	83 c4 10             	add    esp,0x10
c000ec9d:	89 c2                	mov    edx,eax
c000ec9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eca3:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c000eca7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ecab:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ecaf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ecb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecb6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000ecb9:	83 ec 0c             	sub    esp,0xc
c000ecbc:	50                   	push   eax
c000ecbd:	e8 7e 1f ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000ecc2:	83 c4 10             	add    esp,0x10
c000ecc5:	89 c2                	mov    edx,eax
c000ecc7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eccb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ecce:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ecd3:	c1 e8 02             	shr    eax,0x2
c000ecd6:	83 c0 05             	add    eax,0x5
c000ecd9:	c1 e0 0c             	shl    eax,0xc
c000ecdc:	83 c8 10             	or     eax,0x10
c000ecdf:	0f b7 c0             	movzx  eax,ax
c000ece2:	83 ec 0c             	sub    esp,0xc
c000ece5:	50                   	push   eax
c000ece6:	e8 31 1f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000eceb:	83 c4 10             	add    esp,0x10
c000ecee:	89 c2                	mov    edx,eax
c000ecf0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ecf4:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000ecf8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecfc:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000ed00:	0f b7 c0             	movzx  eax,ax
c000ed03:	83 ec 0c             	sub    esp,0xc
c000ed06:	50                   	push   eax
c000ed07:	e8 10 1f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ed0c:	83 c4 10             	add    esp,0x10
c000ed0f:	89 c2                	mov    edx,eax
c000ed11:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed15:	66 89 50 0e          	mov    WORD PTR [eax+0xe],dx
c000ed19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed1d:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000ed23:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed27:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000ed2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed31:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ed34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed38:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000ed3c:	0f b7 c0             	movzx  eax,ax
c000ed3f:	01 c2                	add    edx,eax
c000ed41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed45:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000ed48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ed4c:	83 c4 2c             	add    esp,0x2c
c000ed4f:	c3                   	ret    

c000ed50 <tcp_create_segment>:
c000ed50:	53                   	push   ebx
c000ed51:	83 ec 28             	sub    esp,0x28
c000ed54:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ed58:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ed5c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ed60:	88 d0                	mov    al,dl
c000ed62:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ed66:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ed6b:	c1 e0 02             	shl    eax,0x2
c000ed6e:	83 e0 04             	and    eax,0x4
c000ed71:	88 c2                	mov    dl,al
c000ed73:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ed78:	83 e0 02             	and    eax,0x2
c000ed7b:	74 07                	je     c000ed84 <tcp_create_segment+0x34>
c000ed7d:	b0 0c                	mov    al,0xc
c000ed7f:	eb 07                	jmp    c000ed88 <tcp_create_segment+0x38>
c000ed81:	8d 76 00             	lea    esi,[esi+0x0]
c000ed84:	b0 00                	mov    al,0x0
c000ed86:	66 90                	xchg   ax,ax
c000ed88:	01 d0                	add    eax,edx
c000ed8a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000ed8e:	83 ec 0c             	sub    esp,0xc
c000ed91:	6a 04                	push   0x4
c000ed93:	e8 90 8d ff ff       	call   c0007b28 <memp_malloc>
c000ed98:	83 c4 10             	add    esp,0x10
c000ed9b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ed9f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000eda4:	75 1a                	jne    c000edc0 <tcp_create_segment+0x70>
c000eda6:	83 ec 0c             	sub    esp,0xc
c000eda9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000edad:	e8 62 97 ff ff       	call   c0008514 <pbuf_free>
c000edb2:	83 c4 10             	add    esp,0x10
c000edb5:	b8 00 00 00 00       	mov    eax,0x0
c000edba:	e9 31 01 00 00       	jmp    c000eef0 <tcp_create_segment+0x1a0>
c000edbf:	90                   	nop
c000edc0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edc4:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c000edc8:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c000edcb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edcf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edd5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edd9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eddd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ede0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ede4:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ede7:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000edec:	89 d1                	mov    ecx,edx
c000edee:	29 c1                	sub    ecx,eax
c000edf0:	89 c8                	mov    eax,ecx
c000edf2:	89 c2                	mov    edx,eax
c000edf4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edf8:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000edfc:	83 ec 08             	sub    esp,0x8
c000edff:	6a 14                	push   0x14
c000ee01:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ee05:	e8 6a 95 ff ff       	call   c0008374 <pbuf_header>
c000ee0a:	83 c4 10             	add    esp,0x10
c000ee0d:	0f b6 c0             	movzx  eax,al
c000ee10:	85 c0                	test   eax,eax
c000ee12:	74 28                	je     c000ee3c <tcp_create_segment+0xec>
c000ee14:	66 a1 c4 77 03 c0    	mov    ax,ds:0xc00377c4
c000ee1a:	83 c0 01             	add    eax,0x1
c000ee1d:	66 a3 c4 77 03 c0    	mov    ds:0xc00377c4,ax
c000ee23:	83 ec 0c             	sub    esp,0xc
c000ee26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ee2a:	e8 71 b3 ff ff       	call   c000a1a0 <tcp_seg_free>
c000ee2f:	83 c4 10             	add    esp,0x10
c000ee32:	b8 00 00 00 00       	mov    eax,0x0
c000ee37:	e9 b4 00 00 00       	jmp    c000eef0 <tcp_create_segment+0x1a0>
c000ee3c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee43:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ee46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee4a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ee4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee51:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ee54:	0f b7 c0             	movzx  eax,ax
c000ee57:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee5b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ee5e:	83 ec 0c             	sub    esp,0xc
c000ee61:	50                   	push   eax
c000ee62:	e8 b5 1d ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ee67:	83 c4 10             	add    esp,0x10
c000ee6a:	66 89 03             	mov    WORD PTR [ebx],ax
c000ee6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee71:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ee75:	0f b7 c0             	movzx  eax,ax
c000ee78:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee7c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ee7f:	83 ec 0c             	sub    esp,0xc
c000ee82:	50                   	push   eax
c000ee83:	e8 94 1d ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ee88:	83 c4 10             	add    esp,0x10
c000ee8b:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000ee8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee93:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ee96:	83 ec 0c             	sub    esp,0xc
c000ee99:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ee9d:	e8 9e 1d ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000eea2:	83 c4 10             	add    esp,0x10
c000eea5:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000eea8:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000eead:	c1 e8 02             	shr    eax,0x2
c000eeb0:	0f b6 c0             	movzx  eax,al
c000eeb3:	83 c0 05             	add    eax,0x5
c000eeb6:	c1 e0 0c             	shl    eax,0xc
c000eeb9:	89 c2                	mov    edx,eax
c000eebb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000eec0:	09 d0                	or     eax,edx
c000eec2:	0f b7 c0             	movzx  eax,ax
c000eec5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eec9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000eecc:	83 ec 0c             	sub    esp,0xc
c000eecf:	50                   	push   eax
c000eed0:	e8 47 1d ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000eed5:	83 c4 10             	add    esp,0x10
c000eed8:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c000eedc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eee0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000eee3:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000eee9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eeed:	8d 76 00             	lea    esi,[esi+0x0]
c000eef0:	83 c4 28             	add    esp,0x28
c000eef3:	5b                   	pop    ebx
c000eef4:	c3                   	ret    
c000eef5:	8d 76 00             	lea    esi,[esi+0x0]

c000eef8 <tcp_pbuf_prealloc>:
c000eef8:	53                   	push   ebx
c000eef9:	83 ec 28             	sub    esp,0x28
c000eefc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ef00:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ef04:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000ef08:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000ef0c:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000ef11:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ef16:	88 d8                	mov    al,bl
c000ef18:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ef1c:	88 c8                	mov    al,cl
c000ef1e:	88 04 24             	mov    BYTE PTR [esp],al
c000ef21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef25:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ef2a:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000ef2f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000ef34:	39 c2                	cmp    edx,eax
c000ef36:	73 64                	jae    c000ef9c <tcp_pbuf_prealloc+0xa4>
c000ef38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ef3d:	83 e0 02             	and    eax,0x2
c000ef40:	75 2e                	jne    c000ef70 <tcp_pbuf_prealloc+0x78>
c000ef42:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ef46:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ef49:	0f b6 c0             	movzx  eax,al
c000ef4c:	83 e0 40             	and    eax,0x40
c000ef4f:	75 4b                	jne    c000ef9c <tcp_pbuf_prealloc+0xa4>
c000ef51:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000ef55:	85 c0                	test   eax,eax
c000ef57:	74 17                	je     c000ef70 <tcp_pbuf_prealloc+0x78>
c000ef59:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ef5d:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ef60:	85 c0                	test   eax,eax
c000ef62:	75 0c                	jne    c000ef70 <tcp_pbuf_prealloc+0x78>
c000ef64:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ef68:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ef6b:	85 c0                	test   eax,eax
c000ef6d:	74 2d                	je     c000ef9c <tcp_pbuf_prealloc+0xa4>
c000ef6f:	90                   	nop
c000ef70:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ef75:	8d 90 17 02 00 00    	lea    edx,[eax+0x217]
c000ef7b:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000ef80:	39 c2                	cmp    edx,eax
c000ef82:	7d 0c                	jge    c000ef90 <tcp_pbuf_prealloc+0x98>
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	05 18 02 00 00       	add    eax,0x218
c000ef8d:	eb 05                	jmp    c000ef94 <tcp_pbuf_prealloc+0x9c>
c000ef8f:	90                   	nop
c000ef90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef94:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ef99:	8d 76 00             	lea    esi,[esi+0x0]
c000ef9c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000efa1:	83 ec 04             	sub    esp,0x4
c000efa4:	6a 00                	push   0x0
c000efa6:	50                   	push   eax
c000efa7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000efab:	e8 40 97 ff ff       	call   c00086f0 <pbuf_alloc>
c000efb0:	83 c4 10             	add    esp,0x10
c000efb3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000efb7:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000efbc:	75 0a                	jne    c000efc8 <tcp_pbuf_prealloc+0xd0>
c000efbe:	b8 00 00 00 00       	mov    eax,0x0
c000efc3:	eb 5f                	jmp    c000f024 <tcp_pbuf_prealloc+0x12c>
c000efc5:	8d 76 00             	lea    esi,[esi+0x0]
c000efc8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000efcc:	8b 00                	mov    eax,DWORD PTR [eax]
c000efce:	85 c0                	test   eax,eax
c000efd0:	74 16                	je     c000efe8 <tcp_pbuf_prealloc+0xf0>
c000efd2:	83 ec 08             	sub    esp,0x8
c000efd5:	68 e4 11 03 c0       	push   0xc00311e4
c000efda:	68 46 03 03 c0       	push   0xc0030346
c000efdf:	e8 68 0e 01 00       	call   c001fe4c <CPrintf>
c000efe4:	83 c4 10             	add    esp,0x10
c000efe7:	90                   	nop
c000efe8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000efec:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000eff0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eff4:	89 d1                	mov    ecx,edx
c000eff6:	29 c1                	sub    ecx,eax
c000eff8:	89 c8                	mov    eax,ecx
c000effa:	89 c2                	mov    edx,eax
c000effc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f000:	66 89 10             	mov    WORD PTR [eax],dx
c000f003:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f007:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f00b:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000f00f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f013:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000f016:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f01a:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c000f01e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f022:	66 90                	xchg   ax,ax
c000f024:	83 c4 28             	add    esp,0x28
c000f027:	5b                   	pop    ebx
c000f028:	c3                   	ret    
c000f029:	8d 76 00             	lea    esi,[esi+0x0]

c000f02c <tcp_write_checks>:
c000f02c:	83 ec 1c             	sub    esp,0x1c
c000f02f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f033:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f038:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f03c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000f03f:	83 f8 04             	cmp    eax,0x4
c000f042:	74 2c                	je     c000f070 <tcp_write_checks+0x44>
c000f044:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f048:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000f04b:	83 f8 07             	cmp    eax,0x7
c000f04e:	74 20                	je     c000f070 <tcp_write_checks+0x44>
c000f050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f054:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000f057:	83 f8 02             	cmp    eax,0x2
c000f05a:	74 14                	je     c000f070 <tcp_write_checks+0x44>
c000f05c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f060:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000f063:	83 f8 03             	cmp    eax,0x3
c000f066:	74 08                	je     c000f070 <tcp_write_checks+0x44>
c000f068:	b0 f3                	mov    al,0xf3
c000f06a:	e9 f9 00 00 00       	jmp    c000f168 <tcp_write_checks+0x13c>
c000f06f:	90                   	nop
c000f070:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f075:	85 c0                	test   eax,eax
c000f077:	75 07                	jne    c000f080 <tcp_write_checks+0x54>
c000f079:	b0 00                	mov    al,0x0
c000f07b:	e9 e8 00 00 00       	jmp    c000f168 <tcp_write_checks+0x13c>
c000f080:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f084:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000f088:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000f08d:	0f b7 c0             	movzx  eax,ax
c000f090:	39 c2                	cmp    edx,eax
c000f092:	76 1c                	jbe    c000f0b0 <tcp_write_checks+0x84>
c000f094:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f098:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f09b:	83 c8 80             	or     eax,0xffffff80
c000f09e:	88 c2                	mov    dl,al
c000f0a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0a4:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f0a7:	b0 ff                	mov    al,0xff
c000f0a9:	e9 ba 00 00 00       	jmp    c000f168 <tcp_write_checks+0x13c>
c000f0ae:	66 90                	xchg   ax,ax
c000f0b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0b4:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f0b7:	0f b7 c0             	movzx  eax,ax
c000f0ba:	83 f8 01             	cmp    eax,0x1
c000f0bd:	77 11                	ja     c000f0d0 <tcp_write_checks+0xa4>
c000f0bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0c3:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f0c6:	0f b7 c0             	movzx  eax,ax
c000f0c9:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f0ce:	76 28                	jbe    c000f0f8 <tcp_write_checks+0xcc>
c000f0d0:	66 a1 bc 77 03 c0    	mov    ax,ds:0xc00377bc
c000f0d6:	83 c0 01             	add    eax,0x1
c000f0d9:	66 a3 bc 77 03 c0    	mov    ds:0xc00377bc,ax
c000f0df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0e3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f0e6:	83 c8 80             	or     eax,0xffffff80
c000f0e9:	88 c2                	mov    dl,al
c000f0eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0ef:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f0f2:	b0 ff                	mov    al,0xff
c000f0f4:	eb 72                	jmp    c000f168 <tcp_write_checks+0x13c>
c000f0f6:	66 90                	xchg   ax,ax
c000f0f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0fc:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f0ff:	0f b7 c0             	movzx  eax,ax
c000f102:	85 c0                	test   eax,eax
c000f104:	74 2e                	je     c000f134 <tcp_write_checks+0x108>
c000f106:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f10a:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f10d:	85 c0                	test   eax,eax
c000f10f:	75 53                	jne    c000f164 <tcp_write_checks+0x138>
c000f111:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f115:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f118:	85 c0                	test   eax,eax
c000f11a:	75 48                	jne    c000f164 <tcp_write_checks+0x138>
c000f11c:	83 ec 08             	sub    esp,0x8
c000f11f:	68 90 0f 03 c0       	push   0xc0030f90
c000f124:	68 46 03 03 c0       	push   0xc0030346
c000f129:	e8 1e 0d 01 00       	call   c001fe4c <CPrintf>
c000f12e:	83 c4 10             	add    esp,0x10
c000f131:	eb 31                	jmp    c000f164 <tcp_write_checks+0x138>
c000f133:	90                   	nop
c000f134:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f138:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f13b:	85 c0                	test   eax,eax
c000f13d:	75 0d                	jne    c000f14c <tcp_write_checks+0x120>
c000f13f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f143:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f146:	85 c0                	test   eax,eax
c000f148:	74 1a                	je     c000f164 <tcp_write_checks+0x138>
c000f14a:	66 90                	xchg   ax,ax
c000f14c:	83 ec 08             	sub    esp,0x8
c000f14f:	68 cc 0f 03 c0       	push   0xc0030fcc
c000f154:	68 46 03 03 c0       	push   0xc0030346
c000f159:	e8 ee 0c 01 00       	call   c001fe4c <CPrintf>
c000f15e:	83 c4 10             	add    esp,0x10
c000f161:	8d 76 00             	lea    esi,[esi+0x0]
c000f164:	b0 00                	mov    al,0x0
c000f166:	66 90                	xchg   ax,ax
c000f168:	83 c4 1c             	add    esp,0x1c
c000f16b:	c3                   	ret    

c000f16c <tcp_write>:
c000f16c:	56                   	push   esi
c000f16d:	53                   	push   ebx
c000f16e:	83 ec 54             	sub    esp,0x54
c000f171:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000f175:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000f179:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f17e:	88 d0                	mov    al,dl
c000f180:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f184:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f18c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000f194:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000f19c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000f1a4:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000f1ac:	66 c7 44 24 3a 00 00 	mov    WORD PTR [esp+0x3a],0x0
c000f1b3:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000f1b8:	c6 44 24 2a 00       	mov    BYTE PTR [esp+0x2a],0x0
c000f1bd:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000f1c4:	66 c7 44 24 36 00 00 	mov    WORD PTR [esp+0x36],0x0
c000f1cb:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
c000f1d0:	75 1e                	jne    c000f1f0 <tcp_write+0x84>
c000f1d2:	83 ec 08             	sub    esp,0x8
c000f1d5:	68 00 10 03 c0       	push   0xc0031000
c000f1da:	68 46 03 03 c0       	push   0xc0030346
c000f1df:	e8 68 0c 01 00       	call   c001fe4c <CPrintf>
c000f1e4:	83 c4 10             	add    esp,0x10
c000f1e7:	b0 f2                	mov    al,0xf2
c000f1e9:	e9 1e 08 00 00       	jmp    c000fa0c <tcp_write+0x8a0>
c000f1ee:	66 90                	xchg   ax,ax
c000f1f0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f1f5:	83 ec 08             	sub    esp,0x8
c000f1f8:	50                   	push   eax
c000f1f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f1fd:	e8 2a fe ff ff       	call   c000f02c <tcp_write_checks>
c000f202:	83 c4 10             	add    esp,0x10
c000f205:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c000f209:	0f be 44 24 29       	movsx  eax,BYTE PTR [esp+0x29]
c000f20e:	85 c0                	test   eax,eax
c000f210:	74 0a                	je     c000f21c <tcp_write+0xb0>
c000f212:	8a 44 24 29          	mov    al,BYTE PTR [esp+0x29]
c000f216:	e9 f1 07 00 00       	jmp    c000fa0c <tcp_write+0x8a0>
c000f21b:	90                   	nop
c000f21c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f220:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f223:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f228:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f22c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f22f:	85 c0                	test   eax,eax
c000f231:	0f 84 79 02 00 00    	je     c000f4b0 <tcp_write+0x344>
c000f237:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f23b:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f23e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f242:	eb 0c                	jmp    c000f250 <tcp_write+0xe4>
c000f244:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f248:	8b 00                	mov    eax,DWORD PTR [eax]
c000f24a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f24e:	66 90                	xchg   ax,ax
c000f250:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f254:	8b 00                	mov    eax,DWORD PTR [eax]
c000f256:	85 c0                	test   eax,eax
c000f258:	75 ea                	jne    c000f244 <tcp_write+0xd8>
c000f25a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f25e:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000f261:	0f b6 c0             	movzx  eax,al
c000f264:	c1 e0 02             	shl    eax,0x2
c000f267:	83 e0 04             	and    eax,0x4
c000f26a:	89 c2                	mov    edx,eax
c000f26c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f270:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000f273:	0f b6 c0             	movzx  eax,al
c000f276:	83 e0 02             	and    eax,0x2
c000f279:	74 09                	je     c000f284 <tcp_write+0x118>
c000f27b:	b8 0c 00 00 00       	mov    eax,0xc
c000f280:	eb 0a                	jmp    c000f28c <tcp_write+0x120>
c000f282:	66 90                	xchg   ax,ax
c000f284:	b8 00 00 00 00       	mov    eax,0x0
c000f289:	8d 76 00             	lea    esi,[esi+0x0]
c000f28c:	01 d0                	add    eax,edx
c000f28e:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000f293:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f297:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000f29a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f29e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f2a1:	66 8b 4c 24 26       	mov    cx,WORD PTR [esp+0x26]
c000f2a6:	01 c8                	add    eax,ecx
c000f2a8:	89 d6                	mov    esi,edx
c000f2aa:	29 c6                	sub    esi,eax
c000f2ac:	89 f0                	mov    eax,esi
c000f2ae:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f2b3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f2b7:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f2bb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f2c0:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f2c5:	0f b7 c0             	movzx  eax,ax
c000f2c8:	85 c0                	test   eax,eax
c000f2ca:	0f 84 84 00 00 00    	je     c000f354 <tcp_write+0x1e8>
c000f2d0:	0f b7 54 24 36       	movzx  edx,WORD PTR [esp+0x36]
c000f2d5:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f2da:	39 c2                	cmp    edx,eax
c000f2dc:	76 16                	jbe    c000f2f4 <tcp_write+0x188>
c000f2de:	83 ec 08             	sub    esp,0x8
c000f2e1:	68 34 10 03 c0       	push   0xc0031034
c000f2e6:	68 46 03 03 c0       	push   0xc0030346
c000f2eb:	e8 5c 0b 01 00       	call   c001fe4c <CPrintf>
c000f2f0:	83 c4 10             	add    esp,0x10
c000f2f3:	90                   	nop
c000f2f4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f2f8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f2fc:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f301:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f305:	0f b7 d8             	movzx  ebx,ax
c000f308:	0f b7 ca             	movzx  ecx,dx
c000f30b:	39 cb                	cmp    ebx,ecx
c000f30d:	76 05                	jbe    c000f314 <tcp_write+0x1a8>
c000f30f:	89 d0                	mov    eax,edx
c000f311:	8d 76 00             	lea    esi,[esi+0x0]
c000f314:	66 89 44 24 36       	mov    WORD PTR [esp+0x36],ax
c000f319:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f31e:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f323:	01 d0                	add    eax,edx
c000f325:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f32a:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f32f:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f334:	89 d6                	mov    esi,edx
c000f336:	29 c6                	sub    esi,eax
c000f338:	89 f0                	mov    eax,esi
c000f33a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f33f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000f343:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f348:	89 d6                	mov    esi,edx
c000f34a:	29 c6                	sub    esi,eax
c000f34c:	89 f0                	mov    eax,esi
c000f34e:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f353:	90                   	nop
c000f354:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f359:	0f b7 c0             	movzx  eax,ax
c000f35c:	85 c0                	test   eax,eax
c000f35e:	74 24                	je     c000f384 <tcp_write+0x218>
c000f360:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f365:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f36a:	39 c2                	cmp    edx,eax
c000f36c:	74 16                	je     c000f384 <tcp_write+0x218>
c000f36e:	83 ec 08             	sub    esp,0x8
c000f371:	68 f8 11 03 c0       	push   0xc00311f8
c000f376:	68 46 03 03 c0       	push   0xc0030346
c000f37b:	e8 cc 0a 01 00       	call   c001fe4c <CPrintf>
c000f380:	83 c4 10             	add    esp,0x10
c000f383:	90                   	nop
c000f384:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f389:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f38e:	39 c2                	cmp    edx,eax
c000f390:	0f 83 ca 03 00 00    	jae    c000f760 <tcp_write+0x5f4>
c000f396:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f39b:	85 c0                	test   eax,eax
c000f39d:	0f 84 bd 03 00 00    	je     c000f760 <tcp_write+0x5f4>
c000f3a3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f3a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f3aa:	0f b7 c0             	movzx  eax,ax
c000f3ad:	85 c0                	test   eax,eax
c000f3af:	0f 84 ab 03 00 00    	je     c000f760 <tcp_write+0x5f4>
c000f3b5:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000f3ba:	0f b7 44 24 3a       	movzx  eax,WORD PTR [esp+0x3a]
c000f3bf:	29 c2                	sub    edx,eax
c000f3c1:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f3c6:	39 c2                	cmp    edx,eax
c000f3c8:	0f 4e c2             	cmovle eax,edx
c000f3cb:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c000f3d0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f3d4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f3d8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f3dd:	83 e0 01             	and    eax,0x1
c000f3e0:	74 62                	je     c000f444 <tcp_write+0x2d8>
c000f3e2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c000f3e7:	0f b7 54 24 34       	movzx  edx,WORD PTR [esp+0x34]
c000f3ec:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f3f1:	83 ec 04             	sub    esp,0x4
c000f3f4:	6a 01                	push   0x1
c000f3f6:	51                   	push   ecx
c000f3f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f3fb:	8d 4c 24 26          	lea    ecx,[esp+0x26]
c000f3ff:	51                   	push   ecx
c000f400:	52                   	push   edx
c000f401:	50                   	push   eax
c000f402:	6a 03                	push   0x3
c000f404:	e8 ef fa ff ff       	call   c000eef8 <tcp_pbuf_prealloc>
c000f409:	83 c4 20             	add    esp,0x20
c000f40c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f410:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f415:	0f 84 4d 05 00 00    	je     c000f968 <tcp_write+0x7fc>
c000f41b:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000f420:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f425:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f429:	01 c1                	add    ecx,eax
c000f42b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f42f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f432:	83 ec 04             	sub    esp,0x4
c000f435:	52                   	push   edx
c000f436:	51                   	push   ecx
c000f437:	50                   	push   eax
c000f438:	e8 3d 0f ff ff       	call   c000037a <memcpy>
c000f43d:	83 c4 10             	add    esp,0x10
c000f440:	eb 3a                	jmp    c000f47c <tcp_write+0x310>
c000f442:	66 90                	xchg   ax,ax
c000f444:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f449:	83 ec 04             	sub    esp,0x4
c000f44c:	6a 01                	push   0x1
c000f44e:	50                   	push   eax
c000f44f:	6a 03                	push   0x3
c000f451:	e8 9a 92 ff ff       	call   c00086f0 <pbuf_alloc>
c000f456:	83 c4 10             	add    esp,0x10
c000f459:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f45d:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f462:	0f 84 04 05 00 00    	je     c000f96c <tcp_write+0x800>
c000f468:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f46d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f471:	01 c2                	add    edx,eax
c000f473:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f477:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f47a:	66 90                	xchg   ax,ax
c000f47c:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f481:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f485:	01 d0                	add    eax,edx
c000f487:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f48c:	83 ec 0c             	sub    esp,0xc
c000f48f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f493:	e8 58 98 ff ff       	call   c0008cf0 <pbuf_clen>
c000f498:	83 c4 10             	add    esp,0x10
c000f49b:	0f b6 c0             	movzx  eax,al
c000f49e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f4a2:	01 d0                	add    eax,edx
c000f4a4:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f4a9:	e9 b2 02 00 00       	jmp    c000f760 <tcp_write+0x5f4>
c000f4ae:	66 90                	xchg   ax,ax
c000f4b0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f4b4:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f4b8:	0f b7 c0             	movzx  eax,ax
c000f4bb:	85 c0                	test   eax,eax
c000f4bd:	0f 84 9d 02 00 00    	je     c000f760 <tcp_write+0x5f4>
c000f4c3:	83 ec 08             	sub    esp,0x8
c000f4c6:	68 54 10 03 c0       	push   0xc0031054
c000f4cb:	68 46 03 03 c0       	push   0xc0030346
c000f4d0:	e8 77 09 01 00       	call   c001fe4c <CPrintf>
c000f4d5:	83 c4 10             	add    esp,0x10
c000f4d8:	e9 83 02 00 00       	jmp    c000f760 <tcp_write+0x5f4>
c000f4dd:	8d 76 00             	lea    esi,[esi+0x0]
c000f4e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f4e4:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c000f4e9:	89 d3                	mov    ebx,edx
c000f4eb:	29 c3                	sub    ebx,eax
c000f4ed:	89 d8                	mov    eax,ebx
c000f4ef:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c000f4f4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f4f8:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000f4fb:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f500:	89 d6                	mov    esi,edx
c000f502:	29 c6                	sub    esi,eax
c000f504:	89 f0                	mov    eax,esi
c000f506:	66 89 44 24 20       	mov    WORD PTR [esp+0x20],ax
c000f50b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f50f:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c000f514:	0f b7 d8             	movzx  ebx,ax
c000f517:	0f b7 ca             	movzx  ecx,dx
c000f51a:	39 cb                	cmp    ebx,ecx
c000f51c:	76 02                	jbe    c000f520 <tcp_write+0x3b4>
c000f51e:	89 d0                	mov    eax,edx
c000f520:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000f525:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f52a:	83 e0 01             	and    eax,0x1
c000f52d:	0f 84 b1 00 00 00    	je     c000f5e4 <tcp_write+0x478>
c000f533:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f538:	0f 94 c0             	sete   al
c000f53b:	0f b6 d8             	movzx  ebx,al
c000f53e:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c000f543:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f547:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f54a:	0f b7 d0             	movzx  edx,ax
c000f54d:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f552:	66 8b 74 24 1e       	mov    si,WORD PTR [esp+0x1e]
c000f557:	01 f0                	add    eax,esi
c000f559:	0f b7 c0             	movzx  eax,ax
c000f55c:	83 ec 04             	sub    esp,0x4
c000f55f:	53                   	push   ebx
c000f560:	51                   	push   ecx
c000f561:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f565:	8d 4c 24 26          	lea    ecx,[esp+0x26]
c000f569:	51                   	push   ecx
c000f56a:	52                   	push   edx
c000f56b:	50                   	push   eax
c000f56c:	6a 00                	push   0x0
c000f56e:	e8 85 f9 ff ff       	call   c000eef8 <tcp_pbuf_prealloc>
c000f573:	83 c4 20             	add    esp,0x20
c000f576:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f57a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f57f:	0f 84 eb 03 00 00    	je     c000f970 <tcp_write+0x804>
c000f585:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f589:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f58d:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000f592:	0f b7 c0             	movzx  eax,ax
c000f595:	39 c2                	cmp    edx,eax
c000f597:	76 17                	jbe    c000f5b0 <tcp_write+0x444>
c000f599:	83 ec 08             	sub    esp,0x8
c000f59c:	68 84 10 03 c0       	push   0xc0031084
c000f5a1:	68 46 03 03 c0       	push   0xc0030346
c000f5a6:	e8 a1 08 01 00       	call   c001fe4c <CPrintf>
c000f5ab:	83 c4 10             	add    esp,0x10
c000f5ae:	66 90                	xchg   ax,ax
c000f5b0:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f5b5:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f5ba:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000f5be:	01 d1                	add    ecx,edx
c000f5c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f5c4:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000f5c7:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000f5cc:	01 da                	add    edx,ebx
c000f5ce:	83 ec 04             	sub    esp,0x4
c000f5d1:	50                   	push   eax
c000f5d2:	51                   	push   ecx
c000f5d3:	52                   	push   edx
c000f5d4:	e8 a1 0d ff ff       	call   c000037a <memcpy>
c000f5d9:	83 c4 10             	add    esp,0x10
c000f5dc:	e9 a7 00 00 00       	jmp    c000f688 <tcp_write+0x51c>
c000f5e1:	8d 76 00             	lea    esi,[esi+0x0]
c000f5e4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f5e9:	0f b7 c0             	movzx  eax,ax
c000f5ec:	85 c0                	test   eax,eax
c000f5ee:	74 18                	je     c000f608 <tcp_write+0x49c>
c000f5f0:	83 ec 08             	sub    esp,0x8
c000f5f3:	68 16 12 03 c0       	push   0xc0031216
c000f5f8:	68 46 03 03 c0       	push   0xc0030346
c000f5fd:	e8 4a 08 01 00       	call   c001fe4c <CPrintf>
c000f602:	83 c4 10             	add    esp,0x10
c000f605:	8d 76 00             	lea    esi,[esi+0x0]
c000f608:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f60d:	83 ec 04             	sub    esp,0x4
c000f610:	6a 01                	push   0x1
c000f612:	50                   	push   eax
c000f613:	6a 00                	push   0x0
c000f615:	e8 d6 90 ff ff       	call   c00086f0 <pbuf_alloc>
c000f61a:	83 c4 10             	add    esp,0x10
c000f61d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f621:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f626:	0f 84 48 03 00 00    	je     c000f974 <tcp_write+0x808>
c000f62c:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f631:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f635:	01 c2                	add    edx,eax
c000f637:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f63b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f63e:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f643:	83 ec 04             	sub    esp,0x4
c000f646:	6a 00                	push   0x0
c000f648:	50                   	push   eax
c000f649:	6a 00                	push   0x0
c000f64b:	e8 a0 90 ff ff       	call   c00086f0 <pbuf_alloc>
c000f650:	83 c4 10             	add    esp,0x10
c000f653:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f657:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f65c:	75 16                	jne    c000f674 <tcp_write+0x508>
c000f65e:	83 ec 0c             	sub    esp,0xc
c000f661:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f665:	e8 aa 8e ff ff       	call   c0008514 <pbuf_free>
c000f66a:	83 c4 10             	add    esp,0x10
c000f66d:	e9 0a 03 00 00       	jmp    c000f97c <tcp_write+0x810>
c000f672:	66 90                	xchg   ax,ax
c000f674:	83 ec 08             	sub    esp,0x8
c000f677:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f67b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f67f:	e8 d4 96 ff ff       	call   c0008d58 <pbuf_cat>
c000f684:	83 c4 10             	add    esp,0x10
c000f687:	90                   	nop
c000f688:	83 ec 0c             	sub    esp,0xc
c000f68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f68f:	e8 5c 96 ff ff       	call   c0008cf0 <pbuf_clen>
c000f694:	83 c4 10             	add    esp,0x10
c000f697:	0f b6 c0             	movzx  eax,al
c000f69a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f69e:	01 d0                	add    eax,edx
c000f6a0:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f6a5:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f6aa:	83 f8 02             	cmp    eax,0x2
c000f6ad:	77 0d                	ja     c000f6bc <tcp_write+0x550>
c000f6af:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f6b4:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f6b9:	76 15                	jbe    c000f6d0 <tcp_write+0x564>
c000f6bb:	90                   	nop
c000f6bc:	83 ec 0c             	sub    esp,0xc
c000f6bf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f6c3:	e8 4c 8e ff ff       	call   c0008514 <pbuf_free>
c000f6c8:	83 c4 10             	add    esp,0x10
c000f6cb:	e9 ac 02 00 00       	jmp    c000f97c <tcp_write+0x810>
c000f6d0:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c000f6d5:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f6d9:	8b 4a 6c             	mov    ecx,DWORD PTR [edx+0x6c]
c000f6dc:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f6e1:	01 ca                	add    edx,ecx
c000f6e3:	83 ec 0c             	sub    esp,0xc
c000f6e6:	50                   	push   eax
c000f6e7:	52                   	push   edx
c000f6e8:	6a 00                	push   0x0
c000f6ea:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f6ee:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000f6f2:	e8 59 f6 ff ff       	call   c000ed50 <tcp_create_segment>
c000f6f7:	83 c4 20             	add    esp,0x20
c000f6fa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f6fe:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f703:	0f 84 6f 02 00 00    	je     c000f978 <tcp_write+0x80c>
c000f709:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f70e:	75 0c                	jne    c000f71c <tcp_write+0x5b0>
c000f710:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f714:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f718:	eb 2a                	jmp    c000f744 <tcp_write+0x5d8>
c000f71a:	66 90                	xchg   ax,ax
c000f71c:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f721:	75 15                	jne    c000f738 <tcp_write+0x5cc>
c000f723:	83 ec 08             	sub    esp,0x8
c000f726:	68 24 12 03 c0       	push   0xc0031224
c000f72b:	68 46 03 03 c0       	push   0xc0030346
c000f730:	e8 17 07 01 00       	call   c001fe4c <CPrintf>
c000f735:	83 c4 10             	add    esp,0x10
c000f738:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f73c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f740:	89 10                	mov    DWORD PTR [eax],edx
c000f742:	66 90                	xchg   ax,ax
c000f744:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f748:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f74c:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f751:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000f756:	01 d0                	add    eax,edx
c000f758:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f75d:	8d 76 00             	lea    esi,[esi+0x0]
c000f760:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f765:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f76a:	39 c2                	cmp    edx,eax
c000f76c:	0f 82 6e fd ff ff    	jb     c000f4e0 <tcp_write+0x374>
c000f772:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c000f777:	85 c0                	test   eax,eax
c000f779:	0f 84 a1 00 00 00    	je     c000f820 <tcp_write+0x6b4>
c000f77f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f783:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f786:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f78a:	eb 74                	jmp    c000f800 <tcp_write+0x694>
c000f78c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f790:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f793:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f798:	01 d0                	add    eax,edx
c000f79a:	89 c2                	mov    edx,eax
c000f79c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7a0:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000f7a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7a8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7aa:	85 c0                	test   eax,eax
c000f7ac:	75 46                	jne    c000f7f4 <tcp_write+0x688>
c000f7ae:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c000f7b3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f7b7:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000f7ba:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f7be:	66 8b 52 0a          	mov    dx,WORD PTR [edx+0xa]
c000f7c2:	0f b7 d2             	movzx  edx,dx
c000f7c5:	01 ca                	add    edx,ecx
c000f7c7:	83 ec 04             	sub    esp,0x4
c000f7ca:	50                   	push   eax
c000f7cb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f7cf:	52                   	push   edx
c000f7d0:	e8 a5 0b ff ff       	call   c000037a <memcpy>
c000f7d5:	83 c4 10             	add    esp,0x10
c000f7d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7dc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f7e0:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f7e5:	01 d0                	add    eax,edx
c000f7e7:	89 c2                	mov    edx,eax
c000f7e9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7ed:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c000f7f1:	8d 76 00             	lea    esi,[esi+0x0]
c000f7f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7fa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f7fe:	66 90                	xchg   ax,ax
c000f800:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000f805:	75 85                	jne    c000f78c <tcp_write+0x620>
c000f807:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f80b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f80e:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f813:	01 d0                	add    eax,edx
c000f815:	89 c2                	mov    edx,eax
c000f817:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f81b:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000f81f:	90                   	nop
c000f820:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f825:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f829:	66 89 50 76          	mov    WORD PTR [eax+0x76],dx
c000f82d:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f832:	74 50                	je     c000f884 <tcp_write+0x718>
c000f834:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f839:	75 15                	jne    c000f850 <tcp_write+0x6e4>
c000f83b:	83 ec 08             	sub    esp,0x8
c000f83e:	68 c4 10 03 c0       	push   0xc00310c4
c000f843:	68 46 03 03 c0       	push   0xc0030346
c000f848:	e8 ff 05 01 00       	call   c001fe4c <CPrintf>
c000f84d:	83 c4 10             	add    esp,0x10
c000f850:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f854:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f857:	83 ec 08             	sub    esp,0x8
c000f85a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000f85e:	50                   	push   eax
c000f85f:	e8 f4 94 ff ff       	call   c0008d58 <pbuf_cat>
c000f864:	83 c4 10             	add    esp,0x10
c000f867:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f86b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000f86e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f872:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f875:	01 d0                	add    eax,edx
c000f877:	89 c2                	mov    edx,eax
c000f879:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f87d:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000f881:	8d 76 00             	lea    esi,[esi+0x0]
c000f884:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f889:	75 0d                	jne    c000f898 <tcp_write+0x72c>
c000f88b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f88f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f893:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000f896:	eb 0c                	jmp    c000f8a4 <tcp_write+0x738>
c000f898:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f89c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f8a0:	89 10                	mov    DWORD PTR [eax],edx
c000f8a2:	66 90                	xchg   ax,ax
c000f8a4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f8a8:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000f8ab:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f8b0:	01 c2                	add    edx,eax
c000f8b2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f8b6:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000f8b9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f8bd:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000f8c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f8c5:	89 d3                	mov    ebx,edx
c000f8c7:	29 c3                	sub    ebx,eax
c000f8c9:	89 d8                	mov    eax,ebx
c000f8cb:	89 c2                	mov    edx,eax
c000f8cd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f8d1:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000f8d5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f8d9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f8dd:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000f8e1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f8e5:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f8e8:	0f b7 c0             	movzx  eax,ax
c000f8eb:	85 c0                	test   eax,eax
c000f8ed:	74 2d                	je     c000f91c <tcp_write+0x7b0>
c000f8ef:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f8f3:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f8f6:	85 c0                	test   eax,eax
c000f8f8:	75 22                	jne    c000f91c <tcp_write+0x7b0>
c000f8fa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f8fe:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f901:	85 c0                	test   eax,eax
c000f903:	75 17                	jne    c000f91c <tcp_write+0x7b0>
c000f905:	83 ec 08             	sub    esp,0x8
c000f908:	68 35 12 03 c0       	push   0xc0031235
c000f90d:	68 46 03 03 c0       	push   0xc0030346
c000f912:	e8 35 05 01 00       	call   c001fe4c <CPrintf>
c000f917:	83 c4 10             	add    esp,0x10
c000f91a:	66 90                	xchg   ax,ax
c000f91c:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f921:	74 3d                	je     c000f960 <tcp_write+0x7f4>
c000f923:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f927:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f92a:	85 c0                	test   eax,eax
c000f92c:	74 32                	je     c000f960 <tcp_write+0x7f4>
c000f92e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f933:	83 e0 02             	and    eax,0x2
c000f936:	75 28                	jne    c000f960 <tcp_write+0x7f4>
c000f938:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f93c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f93f:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000f943:	83 ec 0c             	sub    esp,0xc
c000f946:	6a 08                	push   0x8
c000f948:	e8 cf 12 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000f94d:	83 c4 10             	add    esp,0x10
c000f950:	89 c2                	mov    edx,eax
c000f952:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f956:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f959:	09 da                	or     edx,ebx
c000f95b:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000f95f:	90                   	nop
c000f960:	b0 00                	mov    al,0x0
c000f962:	e9 a5 00 00 00       	jmp    c000fa0c <tcp_write+0x8a0>
c000f967:	90                   	nop
c000f968:	90                   	nop
c000f969:	eb 11                	jmp    c000f97c <tcp_write+0x810>
c000f96b:	90                   	nop
c000f96c:	90                   	nop
c000f96d:	eb 0d                	jmp    c000f97c <tcp_write+0x810>
c000f96f:	90                   	nop
c000f970:	90                   	nop
c000f971:	eb 09                	jmp    c000f97c <tcp_write+0x810>
c000f973:	90                   	nop
c000f974:	90                   	nop
c000f975:	eb 05                	jmp    c000f97c <tcp_write+0x810>
c000f977:	90                   	nop
c000f978:	90                   	nop
c000f979:	8d 76 00             	lea    esi,[esi+0x0]
c000f97c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f980:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f983:	83 c8 80             	or     eax,0xffffff80
c000f986:	88 c2                	mov    dl,al
c000f988:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f98c:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f98f:	66 a1 bc 77 03 c0    	mov    ax,ds:0xc00377bc
c000f995:	83 c0 01             	add    eax,0x1
c000f998:	66 a3 bc 77 03 c0    	mov    ds:0xc00377bc,ax
c000f99e:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f9a3:	74 0f                	je     c000f9b4 <tcp_write+0x848>
c000f9a5:	83 ec 0c             	sub    esp,0xc
c000f9a8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f9ac:	e8 63 8b ff ff       	call   c0008514 <pbuf_free>
c000f9b1:	83 c4 10             	add    esp,0x10
c000f9b4:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f9b9:	74 11                	je     c000f9cc <tcp_write+0x860>
c000f9bb:	83 ec 0c             	sub    esp,0xc
c000f9be:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f9c2:	e8 1d a8 ff ff       	call   c000a1e4 <tcp_segs_free>
c000f9c7:	83 c4 10             	add    esp,0x10
c000f9ca:	66 90                	xchg   ax,ax
c000f9cc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f9d0:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f9d3:	0f b7 c0             	movzx  eax,ax
c000f9d6:	85 c0                	test   eax,eax
c000f9d8:	74 2e                	je     c000fa08 <tcp_write+0x89c>
c000f9da:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f9de:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f9e1:	85 c0                	test   eax,eax
c000f9e3:	75 23                	jne    c000fa08 <tcp_write+0x89c>
c000f9e5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f9e9:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f9ec:	85 c0                	test   eax,eax
c000f9ee:	75 18                	jne    c000fa08 <tcp_write+0x89c>
c000f9f0:	83 ec 08             	sub    esp,0x8
c000f9f3:	68 35 12 03 c0       	push   0xc0031235
c000f9f8:	68 46 03 03 c0       	push   0xc0030346
c000f9fd:	e8 4a 04 01 00       	call   c001fe4c <CPrintf>
c000fa02:	83 c4 10             	add    esp,0x10
c000fa05:	8d 76 00             	lea    esi,[esi+0x0]
c000fa08:	b0 ff                	mov    al,0xff
c000fa0a:	66 90                	xchg   ax,ax
c000fa0c:	83 c4 54             	add    esp,0x54
c000fa0f:	5b                   	pop    ebx
c000fa10:	5e                   	pop    esi
c000fa11:	c3                   	ret    
c000fa12:	66 90                	xchg   ax,ax

c000fa14 <tcp_enqueue_flags>:
c000fa14:	83 ec 3c             	sub    esp,0x3c
c000fa17:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000fa1b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000fa1f:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000fa24:	c6 44 24 27 00       	mov    BYTE PTR [esp+0x27],0x0
c000fa29:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fa2e:	83 e0 03             	and    eax,0x3
c000fa31:	75 15                	jne    c000fa48 <tcp_enqueue_flags+0x34>
c000fa33:	83 ec 08             	sub    esp,0x8
c000fa36:	68 fc 10 03 c0       	push   0xc00310fc
c000fa3b:	68 46 03 03 c0       	push   0xc0030346
c000fa40:	e8 07 04 01 00       	call   c001fe4c <CPrintf>
c000fa45:	83 c4 10             	add    esp,0x10
c000fa48:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa4c:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000fa4f:	0f b7 c0             	movzx  eax,ax
c000fa52:	83 f8 01             	cmp    eax,0x1
c000fa55:	77 11                	ja     c000fa68 <tcp_enqueue_flags+0x54>
c000fa57:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa5b:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000fa5e:	0f b7 c0             	movzx  eax,ax
c000fa61:	3d fc ff 00 00       	cmp    eax,0xfffc
c000fa66:	76 2c                	jbe    c000fa94 <tcp_enqueue_flags+0x80>
c000fa68:	66 a1 bc 77 03 c0    	mov    ax,ds:0xc00377bc
c000fa6e:	83 c0 01             	add    eax,0x1
c000fa71:	66 a3 bc 77 03 c0    	mov    ds:0xc00377bc,ax
c000fa77:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa7b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fa7e:	83 c8 80             	or     eax,0xffffff80
c000fa81:	88 c2                	mov    dl,al
c000fa83:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa87:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fa8a:	b0 ff                	mov    al,0xff
c000fa8c:	e9 6f 02 00 00       	jmp    c000fd00 <tcp_enqueue_flags+0x2ec>
c000fa91:	8d 76 00             	lea    esi,[esi+0x0]
c000fa94:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fa99:	83 e0 02             	and    eax,0x2
c000fa9c:	74 06                	je     c000faa4 <tcp_enqueue_flags+0x90>
c000fa9e:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000faa3:	90                   	nop
c000faa4:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000faa9:	c1 e0 02             	shl    eax,0x2
c000faac:	83 e0 04             	and    eax,0x4
c000faaf:	88 c2                	mov    dl,al
c000fab1:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000fab6:	83 e0 02             	and    eax,0x2
c000fab9:	74 05                	je     c000fac0 <tcp_enqueue_flags+0xac>
c000fabb:	b0 0c                	mov    al,0xc
c000fabd:	eb 05                	jmp    c000fac4 <tcp_enqueue_flags+0xb0>
c000fabf:	90                   	nop
c000fac0:	b0 00                	mov    al,0x0
c000fac2:	66 90                	xchg   ax,ax
c000fac4:	01 d0                	add    eax,edx
c000fac6:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c000faca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000face:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000fad2:	0f b7 c0             	movzx  eax,ax
c000fad5:	85 c0                	test   eax,eax
c000fad7:	75 17                	jne    c000faf0 <tcp_enqueue_flags+0xdc>
c000fad9:	66 a1 bc 77 03 c0    	mov    ax,ds:0xc00377bc
c000fadf:	83 c0 01             	add    eax,0x1
c000fae2:	66 a3 bc 77 03 c0    	mov    ds:0xc00377bc,ax
c000fae8:	b0 ff                	mov    al,0xff
c000faea:	e9 11 02 00 00       	jmp    c000fd00 <tcp_enqueue_flags+0x2ec>
c000faef:	90                   	nop
c000faf0:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000faf5:	83 ec 04             	sub    esp,0x4
c000faf8:	6a 00                	push   0x0
c000fafa:	50                   	push   eax
c000fafb:	6a 00                	push   0x0
c000fafd:	e8 ee 8b ff ff       	call   c00086f0 <pbuf_alloc>
c000fb02:	83 c4 10             	add    esp,0x10
c000fb05:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fb09:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000fb0e:	75 2c                	jne    c000fb3c <tcp_enqueue_flags+0x128>
c000fb10:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb14:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fb17:	83 c8 80             	or     eax,0xffffff80
c000fb1a:	88 c2                	mov    dl,al
c000fb1c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb20:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fb23:	66 a1 bc 77 03 c0    	mov    ax,ds:0xc00377bc
c000fb29:	83 c0 01             	add    eax,0x1
c000fb2c:	66 a3 bc 77 03 c0    	mov    ds:0xc00377bc,ax
c000fb32:	b0 ff                	mov    al,0xff
c000fb34:	e9 c7 01 00 00       	jmp    c000fd00 <tcp_enqueue_flags+0x2ec>
c000fb39:	8d 76 00             	lea    esi,[esi+0x0]
c000fb3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb40:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000fb44:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000fb49:	0f b7 d2             	movzx  edx,dx
c000fb4c:	0f b7 c0             	movzx  eax,ax
c000fb4f:	39 c2                	cmp    edx,eax
c000fb51:	73 15                	jae    c000fb68 <tcp_enqueue_flags+0x154>
c000fb53:	83 ec 08             	sub    esp,0x8
c000fb56:	68 54 11 03 c0       	push   0xc0031154
c000fb5b:	68 46 03 03 c0       	push   0xc0030346
c000fb60:	e8 e7 02 01 00       	call   c001fe4c <CPrintf>
c000fb65:	83 c4 10             	add    esp,0x10
c000fb68:	0f b6 4c 24 2f       	movzx  ecx,BYTE PTR [esp+0x2f]
c000fb6d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb71:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000fb74:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fb79:	83 ec 0c             	sub    esp,0xc
c000fb7c:	51                   	push   ecx
c000fb7d:	52                   	push   edx
c000fb7e:	50                   	push   eax
c000fb7f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000fb83:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000fb87:	e8 c4 f1 ff ff       	call   c000ed50 <tcp_create_segment>
c000fb8c:	83 c4 20             	add    esp,0x20
c000fb8f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fb93:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000fb98:	75 2a                	jne    c000fbc4 <tcp_enqueue_flags+0x1b0>
c000fb9a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb9e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fba1:	83 c8 80             	or     eax,0xffffff80
c000fba4:	88 c2                	mov    dl,al
c000fba6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbaa:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fbad:	66 a1 bc 77 03 c0    	mov    ax,ds:0xc00377bc
c000fbb3:	83 c0 01             	add    eax,0x1
c000fbb6:	66 a3 bc 77 03 c0    	mov    ds:0xc00377bc,ax
c000fbbc:	b0 ff                	mov    al,0xff
c000fbbe:	e9 3d 01 00 00       	jmp    c000fd00 <tcp_enqueue_flags+0x2ec>
c000fbc3:	90                   	nop
c000fbc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fbc8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fbcb:	0f b7 c0             	movzx  eax,ax
c000fbce:	85 c0                	test   eax,eax
c000fbd0:	74 16                	je     c000fbe8 <tcp_enqueue_flags+0x1d4>
c000fbd2:	83 ec 08             	sub    esp,0x8
c000fbd5:	68 90 11 03 c0       	push   0xc0031190
c000fbda:	68 46 03 03 c0       	push   0xc0030346
c000fbdf:	e8 68 02 01 00       	call   c001fe4c <CPrintf>
c000fbe4:	83 c4 10             	add    esp,0x10
c000fbe7:	90                   	nop
c000fbe8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbec:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fbef:	85 c0                	test   eax,eax
c000fbf1:	75 0d                	jne    c000fc00 <tcp_enqueue_flags+0x1ec>
c000fbf3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbf7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fbfb:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000fbfe:	eb 30                	jmp    c000fc30 <tcp_enqueue_flags+0x21c>
c000fc00:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc04:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fc07:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fc0b:	eb 0f                	jmp    c000fc1c <tcp_enqueue_flags+0x208>
c000fc0d:	8d 76 00             	lea    esi,[esi+0x0]
c000fc10:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc14:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fc1a:	66 90                	xchg   ax,ax
c000fc1c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc20:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc22:	85 c0                	test   eax,eax
c000fc24:	75 ea                	jne    c000fc10 <tcp_enqueue_flags+0x1fc>
c000fc26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc2a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fc2e:	89 10                	mov    DWORD PTR [eax],edx
c000fc30:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc34:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000fc3a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fc3f:	83 e0 02             	and    eax,0x2
c000fc42:	75 0c                	jne    c000fc50 <tcp_enqueue_flags+0x23c>
c000fc44:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fc49:	83 e0 01             	and    eax,0x1
c000fc4c:	74 2a                	je     c000fc78 <tcp_enqueue_flags+0x264>
c000fc4e:	66 90                	xchg   ax,ax
c000fc50:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc54:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
c000fc57:	8d 50 01             	lea    edx,[eax+0x1]
c000fc5a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc5e:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000fc61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc65:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000fc69:	83 e8 01             	sub    eax,0x1
c000fc6c:	89 c2                	mov    edx,eax
c000fc6e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc72:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000fc76:	66 90                	xchg   ax,ax
c000fc78:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fc7d:	83 e0 01             	and    eax,0x1
c000fc80:	74 16                	je     c000fc98 <tcp_enqueue_flags+0x284>
c000fc82:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc86:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fc89:	83 c8 20             	or     eax,0x20
c000fc8c:	88 c2                	mov    dl,al
c000fc8e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc92:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fc95:	8d 76 00             	lea    esi,[esi+0x0]
c000fc98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fc9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc9f:	83 ec 0c             	sub    esp,0xc
c000fca2:	50                   	push   eax
c000fca3:	e8 48 90 ff ff       	call   c0008cf0 <pbuf_clen>
c000fca8:	83 c4 10             	add    esp,0x10
c000fcab:	88 c1                	mov    cl,al
c000fcad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fcb1:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000fcb4:	0f b6 c1             	movzx  eax,cl
c000fcb7:	01 d0                	add    eax,edx
c000fcb9:	89 c2                	mov    edx,eax
c000fcbb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fcbf:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000fcc3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fcc7:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000fcca:	0f b7 c0             	movzx  eax,ax
c000fccd:	85 c0                	test   eax,eax
c000fccf:	74 2b                	je     c000fcfc <tcp_enqueue_flags+0x2e8>
c000fcd1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fcd5:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000fcd8:	85 c0                	test   eax,eax
c000fcda:	75 20                	jne    c000fcfc <tcp_enqueue_flags+0x2e8>
c000fcdc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fce0:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fce3:	85 c0                	test   eax,eax
c000fce5:	75 15                	jne    c000fcfc <tcp_enqueue_flags+0x2e8>
c000fce7:	83 ec 08             	sub    esp,0x8
c000fcea:	68 bc 11 03 c0       	push   0xc00311bc
c000fcef:	68 46 03 03 c0       	push   0xc0030346
c000fcf4:	e8 53 01 01 00       	call   c001fe4c <CPrintf>
c000fcf9:	83 c4 10             	add    esp,0x10
c000fcfc:	b0 00                	mov    al,0x0
c000fcfe:	66 90                	xchg   ax,ax
c000fd00:	83 c4 3c             	add    esp,0x3c
c000fd03:	c3                   	ret    

c000fd04 <tcp_send_fin>:
c000fd04:	53                   	push   ebx
c000fd05:	83 ec 18             	sub    esp,0x18
c000fd08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd0c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fd0f:	85 c0                	test   eax,eax
c000fd11:	74 71                	je     c000fd84 <tcp_send_fin+0x80>
c000fd13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd17:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fd1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fd1e:	eb 0c                	jmp    c000fd2c <tcp_send_fin+0x28>
c000fd20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd24:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fd2a:	66 90                	xchg   ax,ax
c000fd2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd30:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd32:	85 c0                	test   eax,eax
c000fd34:	75 ea                	jne    c000fd20 <tcp_send_fin+0x1c>
c000fd36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd3a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fd3d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000fd41:	0f b7 c0             	movzx  eax,ax
c000fd44:	83 ec 0c             	sub    esp,0xc
c000fd47:	50                   	push   eax
c000fd48:	e8 cf 0e ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000fd4d:	83 c4 10             	add    esp,0x10
c000fd50:	0f b7 c0             	movzx  eax,ax
c000fd53:	83 e0 07             	and    eax,0x7
c000fd56:	75 2c                	jne    c000fd84 <tcp_send_fin+0x80>
c000fd58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd5c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fd5f:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000fd63:	83 ec 0c             	sub    esp,0xc
c000fd66:	6a 01                	push   0x1
c000fd68:	e8 af 0e ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000fd6d:	83 c4 10             	add    esp,0x10
c000fd70:	89 c2                	mov    edx,eax
c000fd72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd76:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fd79:	09 da                	or     edx,ebx
c000fd7b:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000fd7f:	b0 00                	mov    al,0x0
c000fd81:	eb 15                	jmp    c000fd98 <tcp_send_fin+0x94>
c000fd83:	90                   	nop
c000fd84:	83 ec 08             	sub    esp,0x8
c000fd87:	6a 01                	push   0x1
c000fd89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fd8d:	e8 82 fc ff ff       	call   c000fa14 <tcp_enqueue_flags>
c000fd92:	83 c4 10             	add    esp,0x10
c000fd95:	8d 76 00             	lea    esi,[esi+0x0]
c000fd98:	83 c4 18             	add    esp,0x18
c000fd9b:	5b                   	pop    ebx
c000fd9c:	c3                   	ret    
c000fd9d:	8d 76 00             	lea    esi,[esi+0x0]

c000fda0 <tcp_send_empty_ack>:
c000fda0:	53                   	push   ebx
c000fda1:	83 ec 18             	sub    esp,0x18
c000fda4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fda9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdad:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000fdb0:	83 ec 0c             	sub    esp,0xc
c000fdb3:	50                   	push   eax
c000fdb4:	e8 87 0e ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000fdb9:	83 c4 10             	add    esp,0x10
c000fdbc:	89 c2                	mov    edx,eax
c000fdbe:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fdc3:	52                   	push   edx
c000fdc4:	6a 00                	push   0x0
c000fdc6:	50                   	push   eax
c000fdc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fdcb:	e8 1c ee ff ff       	call   c000ebec <tcp_output_alloc_header>
c000fdd0:	83 c4 10             	add    esp,0x10
c000fdd3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fdd7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fddc:	75 0a                	jne    c000fde8 <tcp_send_empty_ack+0x48>
c000fdde:	b0 fe                	mov    al,0xfe
c000fde0:	e9 9b 00 00 00       	jmp    c000fe80 <tcp_send_empty_ack+0xe0>
c000fde5:	8d 76 00             	lea    esi,[esi+0x0]
c000fde8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fdef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fdf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdf7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fdfa:	83 e0 fc             	and    eax,0xfffffffc
c000fdfd:	88 c2                	mov    dl,al
c000fdff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe03:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fe06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe0a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fe0d:	0f b7 d0             	movzx  edx,ax
c000fe10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe14:	8d 48 04             	lea    ecx,[eax+0x4]
c000fe17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe1b:	83 ec 0c             	sub    esp,0xc
c000fe1e:	52                   	push   edx
c000fe1f:	6a 06                	push   0x6
c000fe21:	51                   	push   ecx
c000fe22:	50                   	push   eax
c000fe23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fe27:	e8 a4 35 00 00       	call   c00133d0 <inet_chksum_pseudo>
c000fe2c:	83 c4 20             	add    esp,0x20
c000fe2f:	89 c2                	mov    edx,eax
c000fe31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe35:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c000fe39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe3d:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000fe40:	0f b6 c8             	movzx  ecx,al
c000fe43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe47:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fe4a:	0f b6 d0             	movzx  edx,al
c000fe4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe51:	8d 58 04             	lea    ebx,[eax+0x4]
c000fe54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe58:	83 ec 08             	sub    esp,0x8
c000fe5b:	6a 06                	push   0x6
c000fe5d:	51                   	push   ecx
c000fe5e:	52                   	push   edx
c000fe5f:	53                   	push   ebx
c000fe60:	50                   	push   eax
c000fe61:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fe65:	e8 a6 41 00 00       	call   c0014010 <ip_output>
c000fe6a:	83 c4 20             	add    esp,0x20
c000fe6d:	83 ec 0c             	sub    esp,0xc
c000fe70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fe74:	e8 9b 86 ff ff       	call   c0008514 <pbuf_free>
c000fe79:	83 c4 10             	add    esp,0x10
c000fe7c:	b0 00                	mov    al,0x0
c000fe7e:	66 90                	xchg   ax,ax
c000fe80:	83 c4 18             	add    esp,0x18
c000fe83:	5b                   	pop    ebx
c000fe84:	c3                   	ret    
c000fe85:	8d 76 00             	lea    esi,[esi+0x0]

c000fe88 <tcp_output_segment>:
c000fe88:	56                   	push   esi
c000fe89:	53                   	push   ebx
c000fe8a:	83 ec 14             	sub    esp,0x14
c000fe8d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe91:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000fe94:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fe98:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fe9b:	83 ec 0c             	sub    esp,0xc
c000fe9e:	50                   	push   eax
c000fe9f:	e8 9c 0d ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000fea4:	83 c4 10             	add    esp,0x10
c000fea7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000feaa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000feae:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000feb2:	0f b7 c0             	movzx  eax,ax
c000feb5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000feb9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000febc:	83 ec 0c             	sub    esp,0xc
c000febf:	50                   	push   eax
c000fec0:	e8 57 0d ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000fec5:	83 c4 10             	add    esp,0x10
c000fec8:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000fecc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fed0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000fed3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fed7:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fedb:	0f b7 c0             	movzx  eax,ax
c000fede:	01 c2                	add    edx,eax
c000fee0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fee4:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000fee7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000feeb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000feee:	83 c0 14             	add    eax,0x14
c000fef1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fef5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fef9:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fefc:	0f b6 c0             	movzx  eax,al
c000feff:	83 e0 01             	and    eax,0x1
c000ff02:	74 10                	je     c000ff14 <tcp_output_segment+0x8c>
c000ff04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ff08:	c7 00 02 04 02 18    	mov    DWORD PTR [eax],0x18020402
c000ff0e:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c000ff13:	90                   	nop
c000ff14:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff18:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000ff1c:	98                   	cwde   
c000ff1d:	83 f8 ff             	cmp    eax,0xffffffff
c000ff20:	75 0a                	jne    c000ff2c <tcp_output_segment+0xa4>
c000ff22:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff26:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000ff2c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff30:	85 c0                	test   eax,eax
c000ff32:	74 0c                	je     c000ff40 <tcp_output_segment+0xb8>
c000ff34:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff38:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff3a:	85 c0                	test   eax,eax
c000ff3c:	75 32                	jne    c000ff70 <tcp_output_segment+0xe8>
c000ff3e:	66 90                	xchg   ax,ax
c000ff40:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff44:	83 c0 04             	add    eax,0x4
c000ff47:	83 ec 0c             	sub    esp,0xc
c000ff4a:	50                   	push   eax
c000ff4b:	e8 0c 39 00 00       	call   c001385c <ip_route>
c000ff50:	83 c4 10             	add    esp,0x10
c000ff53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ff57:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000ff5c:	0f 84 46 01 00 00    	je     c00100a8 <tcp_output_segment+0x220>
c000ff62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff66:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ff69:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff6d:	89 10                	mov    DWORD PTR [eax],edx
c000ff6f:	90                   	nop
c000ff70:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff74:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff77:	85 c0                	test   eax,eax
c000ff79:	75 2d                	jne    c000ffa8 <tcp_output_segment+0x120>
c000ff7b:	8b 15 74 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037874
c000ff81:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff85:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000ff88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff8c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ff8f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff92:	83 ec 0c             	sub    esp,0xc
c000ff95:	50                   	push   eax
c000ff96:	e8 a5 0c ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000ff9b:	83 c4 10             	add    esp,0x10
c000ff9e:	89 c2                	mov    edx,eax
c000ffa0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffa4:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c000ffa7:	90                   	nop
c000ffa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffac:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ffaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffb3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ffb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ffb9:	29 c2                	sub    edx,eax
c000ffbb:	89 d0                	mov    eax,edx
c000ffbd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000ffc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffc6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ffc9:	66 8b 48 0a          	mov    cx,WORD PTR [eax+0xa]
c000ffcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ffd4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c000ffd9:	89 ce                	mov    esi,ecx
c000ffdb:	29 d6                	sub    esi,edx
c000ffdd:	89 f2                	mov    edx,esi
c000ffdf:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c000ffe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffe7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ffea:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000ffed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fff1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fff4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c000fff9:	89 ce                	mov    esi,ecx
c000fffb:	29 d6                	sub    esi,edx
c000fffd:	89 f2                	mov    edx,esi
c000ffff:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0010003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010007:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001000a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001000e:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0010011:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010014:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010018:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001001b:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c0010021:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010025:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010028:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001002b:	0f b7 c8             	movzx  ecx,ax
c001002e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010032:	8d 70 04             	lea    esi,[eax+0x4]
c0010035:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001003d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010040:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010044:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c0010047:	83 ec 0c             	sub    esp,0xc
c001004a:	51                   	push   ecx
c001004b:	6a 06                	push   0x6
c001004d:	56                   	push   esi
c001004e:	52                   	push   edx
c001004f:	50                   	push   eax
c0010050:	e8 7b 33 00 00       	call   c00133d0 <inet_chksum_pseudo>
c0010055:	83 c4 20             	add    esp,0x20
c0010058:	66 89 43 10          	mov    WORD PTR [ebx+0x10],ax
c001005c:	66 a1 b0 77 03 c0    	mov    ax,ds:0xc00377b0
c0010062:	83 c0 01             	add    eax,0x1
c0010065:	66 a3 b0 77 03 c0    	mov    ds:0xc00377b0,ax
c001006b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001006f:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0010072:	0f b6 d8             	movzx  ebx,al
c0010075:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010079:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c001007c:	0f b6 c8             	movzx  ecx,al
c001007f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010083:	8d 70 04             	lea    esi,[eax+0x4]
c0010086:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001008a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001008e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010091:	83 ec 08             	sub    esp,0x8
c0010094:	6a 06                	push   0x6
c0010096:	53                   	push   ebx
c0010097:	51                   	push   ecx
c0010098:	56                   	push   esi
c0010099:	52                   	push   edx
c001009a:	50                   	push   eax
c001009b:	e8 70 3f 00 00       	call   c0014010 <ip_output>
c00100a0:	83 c4 20             	add    esp,0x20
c00100a3:	eb 07                	jmp    c00100ac <tcp_output_segment+0x224>
c00100a5:	8d 76 00             	lea    esi,[esi+0x0]
c00100a8:	90                   	nop
c00100a9:	8d 76 00             	lea    esi,[esi+0x0]
c00100ac:	83 c4 14             	add    esp,0x14
c00100af:	5b                   	pop    ebx
c00100b0:	5e                   	pop    esi
c00100b1:	c3                   	ret    
c00100b2:	66 90                	xchg   ax,ax

c00100b4 <tcp_output>:
c00100b4:	56                   	push   esi
c00100b5:	53                   	push   ebx
c00100b6:	83 ec 24             	sub    esp,0x24
c00100b9:	a1 88 78 03 c0       	mov    eax,ds:0xc0037888
c00100be:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00100c2:	75 08                	jne    c00100cc <tcp_output+0x18>
c00100c4:	b0 00                	mov    al,0x0
c00100c6:	e9 6d 04 00 00       	jmp    c0010538 <tcp_output+0x484>
c00100cb:	90                   	nop
c00100cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100d0:	66 8b 48 56          	mov    cx,WORD PTR [eax+0x56]
c00100d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100d8:	8b 50 60             	mov    edx,DWORD PTR [eax+0x60]
c00100db:	89 c8                	mov    eax,ecx
c00100dd:	0f b7 d8             	movzx  ebx,ax
c00100e0:	0f b7 ca             	movzx  ecx,dx
c00100e3:	39 cb                	cmp    ebx,ecx
c00100e5:	76 05                	jbe    c00100ec <tcp_output+0x38>
c00100e7:	89 d0                	mov    eax,edx
c00100e9:	8d 76 00             	lea    esi,[esi+0x0]
c00100ec:	0f b7 c0             	movzx  eax,ax
c00100ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00100f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100f7:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00100fa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00100fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010102:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010105:	0f b6 c0             	movzx  eax,al
c0010108:	83 e0 02             	and    eax,0x2
c001010b:	74 4f                	je     c001015c <tcp_output+0xa8>
c001010d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010112:	74 34                	je     c0010148 <tcp_output+0x94>
c0010114:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010118:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001011b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001011e:	83 ec 0c             	sub    esp,0xc
c0010121:	50                   	push   eax
c0010122:	e8 19 0b ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010127:	83 c4 10             	add    esp,0x10
c001012a:	89 c2                	mov    edx,eax
c001012c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010130:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c0010133:	29 c2                	sub    edx,eax
c0010135:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010139:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001013c:	0f b7 c0             	movzx  eax,ax
c001013f:	01 d0                	add    eax,edx
c0010141:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0010145:	73 15                	jae    c001015c <tcp_output+0xa8>
c0010147:	90                   	nop
c0010148:	83 ec 0c             	sub    esp,0xc
c001014b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001014f:	e8 4c fc ff ff       	call   c000fda0 <tcp_send_empty_ack>
c0010154:	83 c4 10             	add    esp,0x10
c0010157:	e9 dc 03 00 00       	jmp    c0010538 <tcp_output+0x484>
c001015c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010160:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010163:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010167:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001016c:	0f 84 e6 02 00 00    	je     c0010458 <tcp_output+0x3a4>
c0010172:	eb 0c                	jmp    c0010180 <tcp_output+0xcc>
c0010174:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010178:	8b 00                	mov    eax,DWORD PTR [eax]
c001017a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001017e:	66 90                	xchg   ax,ax
c0010180:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010184:	8b 00                	mov    eax,DWORD PTR [eax]
c0010186:	85 c0                	test   eax,eax
c0010188:	75 ea                	jne    c0010174 <tcp_output+0xc0>
c001018a:	e9 c9 02 00 00       	jmp    c0010458 <tcp_output+0x3a4>
c001018f:	90                   	nop
c0010190:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010194:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010197:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c001019b:	0f b7 c0             	movzx  eax,ax
c001019e:	83 ec 0c             	sub    esp,0xc
c00101a1:	50                   	push   eax
c00101a2:	e8 75 0a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00101a7:	83 c4 10             	add    esp,0x10
c00101aa:	0f b7 c0             	movzx  eax,ax
c00101ad:	83 e0 04             	and    eax,0x4
c00101b0:	74 16                	je     c00101c8 <tcp_output+0x114>
c00101b2:	83 ec 08             	sub    esp,0x8
c00101b5:	68 53 12 03 c0       	push   0xc0031253
c00101ba:	68 46 03 03 c0       	push   0xc0030346
c00101bf:	e8 88 fc 00 00       	call   c001fe4c <CPrintf>
c00101c4:	83 c4 10             	add    esp,0x10
c00101c7:	90                   	nop
c00101c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101cc:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00101cf:	85 c0                	test   eax,eax
c00101d1:	74 45                	je     c0010218 <tcp_output+0x164>
c00101d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101d7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00101da:	0f b6 c0             	movzx  eax,al
c00101dd:	83 e0 44             	and    eax,0x44
c00101e0:	75 36                	jne    c0010218 <tcp_output+0x164>
c00101e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101e6:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00101e9:	85 c0                	test   eax,eax
c00101eb:	74 33                	je     c0010220 <tcp_output+0x16c>
c00101ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101f1:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00101f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00101f6:	85 c0                	test   eax,eax
c00101f8:	75 1e                	jne    c0010218 <tcp_output+0x164>
c00101fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101fe:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010201:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0010204:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010208:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001020b:	0f b7 d2             	movzx  edx,dx
c001020e:	0f b7 c0             	movzx  eax,ax
c0010211:	39 c2                	cmp    edx,eax
c0010213:	72 0b                	jb     c0010220 <tcp_output+0x16c>
c0010215:	8d 76 00             	lea    esi,[esi+0x0]
c0010218:	b8 01 00 00 00       	mov    eax,0x1
c001021d:	eb 09                	jmp    c0010228 <tcp_output+0x174>
c001021f:	90                   	nop
c0010220:	b8 00 00 00 00       	mov    eax,0x0
c0010225:	8d 76 00             	lea    esi,[esi+0x0]
c0010228:	85 c0                	test   eax,eax
c001022a:	75 18                	jne    c0010244 <tcp_output+0x190>
c001022c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010230:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010233:	0f b6 c0             	movzx  eax,al
c0010236:	25 a0 00 00 00       	and    eax,0xa0
c001023b:	0f 84 57 02 00 00    	je     c0010498 <tcp_output+0x3e4>
c0010241:	8d 76 00             	lea    esi,[esi+0x0]
c0010244:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010248:	8b 10                	mov    edx,DWORD PTR [eax]
c001024a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001024e:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c0010251:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010255:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0010258:	83 f8 02             	cmp    eax,0x2
c001025b:	74 3b                	je     c0010298 <tcp_output+0x1e4>
c001025d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010261:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010264:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c0010268:	83 ec 0c             	sub    esp,0xc
c001026b:	6a 10                	push   0x10
c001026d:	e8 aa 09 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010272:	83 c4 10             	add    esp,0x10
c0010275:	89 c2                	mov    edx,eax
c0010277:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001027b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001027e:	09 da                	or     edx,ebx
c0010280:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c0010284:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010288:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001028b:	83 e0 fc             	and    eax,0xfffffffc
c001028e:	88 c2                	mov    dl,al
c0010290:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010294:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0010297:	90                   	nop
c0010298:	83 ec 08             	sub    esp,0x8
c001029b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001029f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00102a3:	e8 e0 fb ff ff       	call   c000fe88 <tcp_output_segment>
c00102a8:	83 c4 10             	add    esp,0x10
c00102ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102af:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00102b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00102b5:	83 ec 0c             	sub    esp,0xc
c00102b8:	50                   	push   eax
c00102b9:	e8 82 09 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00102be:	83 c4 10             	add    esp,0x10
c00102c1:	89 c3                	mov    ebx,eax
c00102c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00102ca:	0f b7 f0             	movzx  esi,ax
c00102cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102d1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00102d4:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00102d8:	0f b7 c0             	movzx  eax,ax
c00102db:	83 ec 0c             	sub    esp,0xc
c00102de:	50                   	push   eax
c00102df:	e8 38 09 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00102e4:	83 c4 10             	add    esp,0x10
c00102e7:	0f b7 c0             	movzx  eax,ax
c00102ea:	83 e0 03             	and    eax,0x3
c00102ed:	0f 95 c0             	setne  al
c00102f0:	0f b6 c0             	movzx  eax,al
c00102f3:	01 f0                	add    eax,esi
c00102f5:	01 d8                	add    eax,ebx
c00102f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00102fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102ff:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c0010302:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0010306:	79 0c                	jns    c0010314 <tcp_output+0x260>
c0010308:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001030c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010310:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c0010313:	90                   	nop
c0010314:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010318:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001031b:	0f b7 d8             	movzx  ebx,ax
c001031e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010322:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010325:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010329:	0f b7 c0             	movzx  eax,ax
c001032c:	83 ec 0c             	sub    esp,0xc
c001032f:	50                   	push   eax
c0010330:	e8 e7 08 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010335:	83 c4 10             	add    esp,0x10
c0010338:	0f b7 c0             	movzx  eax,ax
c001033b:	83 e0 03             	and    eax,0x3
c001033e:	0f 95 c0             	setne  al
c0010341:	0f b6 c0             	movzx  eax,al
c0010344:	01 d8                	add    eax,ebx
c0010346:	85 c0                	test   eax,eax
c0010348:	0f 8e ee 00 00 00    	jle    c001043c <tcp_output+0x388>
c001034e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010352:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010358:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001035c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001035f:	85 c0                	test   eax,eax
c0010361:	75 19                	jne    c001037c <tcp_output+0x2c8>
c0010363:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010367:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001036b:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c001036e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010372:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010376:	e9 d1 00 00 00       	jmp    c001044c <tcp_output+0x398>
c001037b:	90                   	nop
c001037c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010380:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010383:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010386:	83 ec 0c             	sub    esp,0xc
c0010389:	50                   	push   eax
c001038a:	e8 b1 08 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c001038f:	83 c4 10             	add    esp,0x10
c0010392:	89 c3                	mov    ebx,eax
c0010394:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010398:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001039b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001039e:	83 ec 0c             	sub    esp,0xc
c00103a1:	50                   	push   eax
c00103a2:	e8 99 08 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00103a7:	83 c4 10             	add    esp,0x10
c00103aa:	29 c3                	sub    ebx,eax
c00103ac:	89 d8                	mov    eax,ebx
c00103ae:	79 74                	jns    c0010424 <tcp_output+0x370>
c00103b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00103b4:	83 c0 7c             	add    eax,0x7c
c00103b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00103bb:	eb 0f                	jmp    c00103cc <tcp_output+0x318>
c00103bd:	8d 76 00             	lea    esi,[esi+0x0]
c00103c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00103c6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00103ca:	66 90                	xchg   ax,ax
c00103cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00103d2:	85 c0                	test   eax,eax
c00103d4:	74 36                	je     c001040c <tcp_output+0x358>
c00103d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103da:	8b 00                	mov    eax,DWORD PTR [eax]
c00103dc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00103df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00103e2:	83 ec 0c             	sub    esp,0xc
c00103e5:	50                   	push   eax
c00103e6:	e8 55 08 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00103eb:	83 c4 10             	add    esp,0x10
c00103ee:	89 c3                	mov    ebx,eax
c00103f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00103f4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00103f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00103fa:	83 ec 0c             	sub    esp,0xc
c00103fd:	50                   	push   eax
c00103fe:	e8 3d 08 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010403:	83 c4 10             	add    esp,0x10
c0010406:	29 c3                	sub    ebx,eax
c0010408:	89 d8                	mov    eax,ebx
c001040a:	78 b4                	js     c00103c0 <tcp_output+0x30c>
c001040c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010410:	8b 10                	mov    edx,DWORD PTR [eax]
c0010412:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010416:	89 10                	mov    DWORD PTR [eax],edx
c0010418:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001041c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010420:	89 10                	mov    DWORD PTR [eax],edx
c0010422:	eb 28                	jmp    c001044c <tcp_output+0x398>
c0010424:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010428:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001042c:	89 10                	mov    DWORD PTR [eax],edx
c001042e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010432:	8b 00                	mov    eax,DWORD PTR [eax]
c0010434:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010438:	eb 12                	jmp    c001044c <tcp_output+0x398>
c001043a:	66 90                	xchg   ax,ax
c001043c:	83 ec 0c             	sub    esp,0xc
c001043f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010443:	e8 58 9d ff ff       	call   c000a1a0 <tcp_seg_free>
c0010448:	83 c4 10             	add    esp,0x10
c001044b:	90                   	nop
c001044c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010450:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010453:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010457:	90                   	nop
c0010458:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001045d:	74 3d                	je     c001049c <tcp_output+0x3e8>
c001045f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010463:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010466:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010469:	83 ec 0c             	sub    esp,0xc
c001046c:	50                   	push   eax
c001046d:	e8 ce 07 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010472:	83 c4 10             	add    esp,0x10
c0010475:	89 c2                	mov    edx,eax
c0010477:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001047b:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c001047e:	29 c2                	sub    edx,eax
c0010480:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010484:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010487:	0f b7 c0             	movzx  eax,ax
c001048a:	01 d0                	add    eax,edx
c001048c:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0010490:	0f 83 fa fc ff ff    	jae    c0010190 <tcp_output+0xdc>
c0010496:	eb 04                	jmp    c001049c <tcp_output+0x3e8>
c0010498:	90                   	nop
c0010499:	8d 76 00             	lea    esi,[esi+0x0]
c001049c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00104a0:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00104a3:	85 c0                	test   eax,eax
c00104a5:	75 0d                	jne    c00104b4 <tcp_output+0x400>
c00104a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00104ab:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c00104b1:	8d 76 00             	lea    esi,[esi+0x0]
c00104b4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00104b9:	74 65                	je     c0010520 <tcp_output+0x46c>
c00104bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00104bf:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c00104c5:	0f b6 c0             	movzx  eax,al
c00104c8:	85 c0                	test   eax,eax
c00104ca:	75 54                	jne    c0010520 <tcp_output+0x46c>
c00104cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00104d0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00104d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00104d6:	83 ec 0c             	sub    esp,0xc
c00104d9:	50                   	push   eax
c00104da:	e8 61 07 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00104df:	83 c4 10             	add    esp,0x10
c00104e2:	89 c2                	mov    edx,eax
c00104e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00104e8:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c00104eb:	29 c2                	sub    edx,eax
c00104ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00104f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00104f4:	0f b7 c0             	movzx  eax,ax
c00104f7:	01 c2                	add    edx,eax
c00104f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00104fd:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c0010500:	0f b7 c0             	movzx  eax,ax
c0010503:	39 c2                	cmp    edx,eax
c0010505:	76 19                	jbe    c0010520 <tcp_output+0x46c>
c0010507:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001050b:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c0010515:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010519:	c6 80 a4 00 00 00 01 	mov    BYTE PTR [eax+0xa4],0x1
c0010520:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010524:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010527:	83 e0 7f             	and    eax,0x7f
c001052a:	88 c2                	mov    dl,al
c001052c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010530:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0010533:	b0 00                	mov    al,0x0
c0010535:	8d 76 00             	lea    esi,[esi+0x0]
c0010538:	83 c4 24             	add    esp,0x24
c001053b:	5b                   	pop    ebx
c001053c:	5e                   	pop    esi
c001053d:	c3                   	ret    
c001053e:	66 90                	xchg   ax,ax

c0010540 <tcp_rst>:
c0010540:	83 ec 2c             	sub    esp,0x2c
c0010543:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0010547:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001054b:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0010550:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0010555:	83 ec 04             	sub    esp,0x4
c0010558:	6a 00                	push   0x0
c001055a:	6a 14                	push   0x14
c001055c:	6a 01                	push   0x1
c001055e:	e8 8d 81 ff ff       	call   c00086f0 <pbuf_alloc>
c0010563:	83 c4 10             	add    esp,0x10
c0010566:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001056a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001056f:	0f 84 3f 01 00 00    	je     c00106b4 <tcp_rst+0x174>
c0010575:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010579:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001057d:	0f b7 c0             	movzx  eax,ax
c0010580:	83 f8 13             	cmp    eax,0x13
c0010583:	77 17                	ja     c001059c <tcp_rst+0x5c>
c0010585:	83 ec 08             	sub    esp,0x8
c0010588:	68 60 0f 03 c0       	push   0xc0030f60
c001058d:	68 46 03 03 c0       	push   0xc0030346
c0010592:	e8 b5 f8 00 00       	call   c001fe4c <CPrintf>
c0010597:	83 c4 10             	add    esp,0x10
c001059a:	66 90                	xchg   ax,ax
c001059c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00105a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00105a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00105a7:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00105ac:	83 ec 0c             	sub    esp,0xc
c00105af:	50                   	push   eax
c00105b0:	e8 67 06 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00105b5:	83 c4 10             	add    esp,0x10
c00105b8:	89 c2                	mov    edx,eax
c00105ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00105be:	66 89 10             	mov    WORD PTR [eax],dx
c00105c1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00105c6:	83 ec 0c             	sub    esp,0xc
c00105c9:	50                   	push   eax
c00105ca:	e8 4d 06 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00105cf:	83 c4 10             	add    esp,0x10
c00105d2:	89 c2                	mov    edx,eax
c00105d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00105d8:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00105dc:	83 ec 0c             	sub    esp,0xc
c00105df:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00105e3:	e8 58 06 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00105e8:	83 c4 10             	add    esp,0x10
c00105eb:	89 c2                	mov    edx,eax
c00105ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00105f1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00105f4:	83 ec 0c             	sub    esp,0xc
c00105f7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00105fb:	e8 40 06 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010600:	83 c4 10             	add    esp,0x10
c0010603:	89 c2                	mov    edx,eax
c0010605:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010609:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001060c:	83 ec 0c             	sub    esp,0xc
c001060f:	68 14 50 00 00       	push   0x5014
c0010614:	e8 03 06 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010619:	83 c4 10             	add    esp,0x10
c001061c:	89 c2                	mov    edx,eax
c001061e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010622:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c0010626:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001062a:	66 c7 40 0e 08 60    	mov    WORD PTR [eax+0xe],0x6008
c0010630:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010634:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c001063a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001063e:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c0010644:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010648:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001064b:	0f b7 c0             	movzx  eax,ax
c001064e:	83 ec 0c             	sub    esp,0xc
c0010651:	50                   	push   eax
c0010652:	6a 06                	push   0x6
c0010654:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010658:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001065c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010660:	e8 6b 2d 00 00       	call   c00133d0 <inet_chksum_pseudo>
c0010665:	83 c4 20             	add    esp,0x20
c0010668:	89 c2                	mov    edx,eax
c001066a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001066e:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c0010672:	66 a1 b0 77 03 c0    	mov    ax,ds:0xc00377b0
c0010678:	83 c0 01             	add    eax,0x1
c001067b:	66 a3 b0 77 03 c0    	mov    ds:0xc00377b0,ax
c0010681:	83 ec 08             	sub    esp,0x8
c0010684:	6a 06                	push   0x6
c0010686:	6a 00                	push   0x0
c0010688:	68 ff 00 00 00       	push   0xff
c001068d:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010691:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010695:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010699:	e8 72 39 00 00       	call   c0014010 <ip_output>
c001069e:	83 c4 20             	add    esp,0x20
c00106a1:	83 ec 0c             	sub    esp,0xc
c00106a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00106a8:	e8 67 7e ff ff       	call   c0008514 <pbuf_free>
c00106ad:	83 c4 10             	add    esp,0x10
c00106b0:	eb 06                	jmp    c00106b8 <tcp_rst+0x178>
c00106b2:	66 90                	xchg   ax,ax
c00106b4:	90                   	nop
c00106b5:	8d 76 00             	lea    esi,[esi+0x0]
c00106b8:	83 c4 2c             	add    esp,0x2c
c00106bb:	c3                   	ret    

c00106bc <tcp_rexmit_rto>:
c00106bc:	83 ec 1c             	sub    esp,0x1c
c00106bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106c3:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00106c6:	85 c0                	test   eax,eax
c00106c8:	74 7a                	je     c0010744 <tcp_rexmit_rto+0x88>
c00106ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106ce:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00106d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00106d5:	eb 0d                	jmp    c00106e4 <tcp_rexmit_rto+0x28>
c00106d7:	90                   	nop
c00106d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00106de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00106e2:	66 90                	xchg   ax,ax
c00106e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00106ea:	85 c0                	test   eax,eax
c00106ec:	75 ea                	jne    c00106d8 <tcp_rexmit_rto+0x1c>
c00106ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106f2:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c00106f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106f9:	89 10                	mov    DWORD PTR [eax],edx
c00106fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106ff:	8b 50 7c             	mov    edx,DWORD PTR [eax+0x7c]
c0010702:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010706:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c0010709:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001070d:	c7 40 7c 00 00 00 00 	mov    DWORD PTR [eax+0x7c],0x0
c0010714:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010718:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c001071b:	83 c0 01             	add    eax,0x1
c001071e:	88 c2                	mov    dl,al
c0010720:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010724:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c0010727:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001072b:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0010732:	83 ec 0c             	sub    esp,0xc
c0010735:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010739:	e8 76 f9 ff ff       	call   c00100b4 <tcp_output>
c001073e:	83 c4 10             	add    esp,0x10
c0010741:	eb 05                	jmp    c0010748 <tcp_rexmit_rto+0x8c>
c0010743:	90                   	nop
c0010744:	90                   	nop
c0010745:	8d 76 00             	lea    esi,[esi+0x0]
c0010748:	83 c4 1c             	add    esp,0x1c
c001074b:	c3                   	ret    

c001074c <tcp_rexmit>:
c001074c:	53                   	push   ebx
c001074d:	83 ec 18             	sub    esp,0x18
c0010750:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010754:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010757:	85 c0                	test   eax,eax
c0010759:	0f 84 a9 00 00 00    	je     c0010808 <tcp_rexmit+0xbc>
c001075f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010763:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010766:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001076a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001076e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010770:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010774:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c0010777:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001077b:	83 c0 78             	add    eax,0x78
c001077e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010782:	eb 0c                	jmp    c0010790 <tcp_rexmit+0x44>
c0010784:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010788:	8b 00                	mov    eax,DWORD PTR [eax]
c001078a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001078e:	66 90                	xchg   ax,ax
c0010790:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010794:	8b 00                	mov    eax,DWORD PTR [eax]
c0010796:	85 c0                	test   eax,eax
c0010798:	74 36                	je     c00107d0 <tcp_rexmit+0x84>
c001079a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001079e:	8b 00                	mov    eax,DWORD PTR [eax]
c00107a0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00107a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00107a6:	83 ec 0c             	sub    esp,0xc
c00107a9:	50                   	push   eax
c00107aa:	e8 91 04 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00107af:	83 c4 10             	add    esp,0x10
c00107b2:	89 c3                	mov    ebx,eax
c00107b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00107b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00107bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00107be:	83 ec 0c             	sub    esp,0xc
c00107c1:	50                   	push   eax
c00107c2:	e8 79 04 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00107c7:	83 c4 10             	add    esp,0x10
c00107ca:	29 c3                	sub    ebx,eax
c00107cc:	89 d8                	mov    eax,ebx
c00107ce:	78 b4                	js     c0010784 <tcp_rexmit+0x38>
c00107d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00107d4:	8b 10                	mov    edx,DWORD PTR [eax]
c00107d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00107da:	89 10                	mov    DWORD PTR [eax],edx
c00107dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00107e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107e4:	89 10                	mov    DWORD PTR [eax],edx
c00107e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00107ea:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c00107ed:	83 c0 01             	add    eax,0x1
c00107f0:	88 c2                	mov    dl,al
c00107f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00107f6:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c00107f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00107fd:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0010804:	eb 06                	jmp    c001080c <tcp_rexmit+0xc0>
c0010806:	66 90                	xchg   ax,ax
c0010808:	90                   	nop
c0010809:	8d 76 00             	lea    esi,[esi+0x0]
c001080c:	83 c4 18             	add    esp,0x18
c001080f:	5b                   	pop    ebx
c0010810:	c3                   	ret    
c0010811:	8d 76 00             	lea    esi,[esi+0x0]

c0010814 <tcp_rexmit_fast>:
c0010814:	83 ec 0c             	sub    esp,0xc
c0010817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001081b:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001081e:	85 c0                	test   eax,eax
c0010820:	0f 84 d2 00 00 00    	je     c00108f8 <tcp_rexmit_fast+0xe4>
c0010826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001082a:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001082d:	0f b6 c0             	movzx  eax,al
c0010830:	83 e0 04             	and    eax,0x4
c0010833:	0f 85 bf 00 00 00    	jne    c00108f8 <tcp_rexmit_fast+0xe4>
c0010839:	83 ec 0c             	sub    esp,0xc
c001083c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010840:	e8 07 ff ff ff       	call   c001074c <tcp_rexmit>
c0010845:	83 c4 10             	add    esp,0x10
c0010848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001084c:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c0010850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010854:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c0010857:	0f b7 d2             	movzx  edx,dx
c001085a:	0f b7 c0             	movzx  eax,ax
c001085d:	39 c2                	cmp    edx,eax
c001085f:	76 1b                	jbe    c001087c <tcp_rexmit_fast+0x68>
c0010861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010865:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c0010868:	0f b7 c0             	movzx  eax,ax
c001086b:	d1 e8                	shr    eax,1
c001086d:	89 c2                	mov    edx,eax
c001086f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010873:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c0010877:	eb 1b                	jmp    c0010894 <tcp_rexmit_fast+0x80>
c0010879:	8d 76 00             	lea    esi,[esi+0x0]
c001087c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010880:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c0010884:	0f b7 c0             	movzx  eax,ax
c0010887:	d1 e8                	shr    eax,1
c0010889:	89 c2                	mov    edx,eax
c001088b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088f:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c0010893:	90                   	nop
c0010894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010898:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c001089b:	0f b7 d0             	movzx  edx,ax
c001089e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00108a5:	0f b7 c0             	movzx  eax,ax
c00108a8:	d1 e0                	shl    eax,1
c00108aa:	39 c2                	cmp    edx,eax
c00108ac:	7d 16                	jge    c00108c4 <tcp_rexmit_fast+0xb0>
c00108ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00108b5:	d1 e0                	shl    eax,1
c00108b7:	89 c2                	mov    edx,eax
c00108b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108bd:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c00108c1:	8d 76 00             	lea    esi,[esi+0x0]
c00108c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c8:	8b 50 58             	mov    edx,DWORD PTR [eax+0x58]
c00108cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00108d2:	89 c1                	mov    ecx,eax
c00108d4:	d1 e1                	shl    ecx,1
c00108d6:	01 c8                	add    eax,ecx
c00108d8:	01 d0                	add    eax,edx
c00108da:	89 c2                	mov    edx,eax
c00108dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e0:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c00108e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e8:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00108eb:	83 c8 04             	or     eax,0x4
c00108ee:	88 c2                	mov    dl,al
c00108f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f4:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c00108f7:	90                   	nop
c00108f8:	90                   	nop
c00108f9:	83 c4 0c             	add    esp,0xc
c00108fc:	c3                   	ret    
c00108fd:	8d 76 00             	lea    esi,[esi+0x0]

c0010900 <tcp_keepalive>:
c0010900:	83 ec 1c             	sub    esp,0x1c
c0010903:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010907:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c001090a:	83 e8 01             	sub    eax,0x1
c001090d:	83 ec 0c             	sub    esp,0xc
c0010910:	50                   	push   eax
c0010911:	e8 2a 03 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010916:	83 c4 10             	add    esp,0x10
c0010919:	50                   	push   eax
c001091a:	6a 00                	push   0x0
c001091c:	6a 00                	push   0x0
c001091e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010922:	e8 c5 e2 ff ff       	call   c000ebec <tcp_output_alloc_header>
c0010927:	83 c4 10             	add    esp,0x10
c001092a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001092e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010933:	0f 84 8b 00 00 00    	je     c00109c4 <tcp_keepalive+0xc4>
c0010939:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001093d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010940:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010944:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010948:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001094b:	0f b7 d0             	movzx  edx,ax
c001094e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010952:	8d 48 04             	lea    ecx,[eax+0x4]
c0010955:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010959:	83 ec 0c             	sub    esp,0xc
c001095c:	52                   	push   edx
c001095d:	6a 06                	push   0x6
c001095f:	51                   	push   ecx
c0010960:	50                   	push   eax
c0010961:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010965:	e8 66 2a 00 00       	call   c00133d0 <inet_chksum_pseudo>
c001096a:	83 c4 20             	add    esp,0x20
c001096d:	89 c2                	mov    edx,eax
c001096f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010973:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c0010977:	66 a1 b0 77 03 c0    	mov    ax,ds:0xc00377b0
c001097d:	83 c0 01             	add    eax,0x1
c0010980:	66 a3 b0 77 03 c0    	mov    ds:0xc00377b0,ax
c0010986:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001098a:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c001098d:	0f b6 d0             	movzx  edx,al
c0010990:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010994:	8d 48 04             	lea    ecx,[eax+0x4]
c0010997:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001099b:	83 ec 08             	sub    esp,0x8
c001099e:	6a 06                	push   0x6
c00109a0:	6a 00                	push   0x0
c00109a2:	52                   	push   edx
c00109a3:	51                   	push   ecx
c00109a4:	50                   	push   eax
c00109a5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00109a9:	e8 62 36 00 00       	call   c0014010 <ip_output>
c00109ae:	83 c4 20             	add    esp,0x20
c00109b1:	83 ec 0c             	sub    esp,0xc
c00109b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00109b8:	e8 57 7b ff ff       	call   c0008514 <pbuf_free>
c00109bd:	83 c4 10             	add    esp,0x10
c00109c0:	eb 06                	jmp    c00109c8 <tcp_keepalive+0xc8>
c00109c2:	66 90                	xchg   ax,ax
c00109c4:	90                   	nop
c00109c5:	8d 76 00             	lea    esi,[esi+0x0]
c00109c8:	83 c4 1c             	add    esp,0x1c
c00109cb:	c3                   	ret    

c00109cc <tcp_zero_window_probe>:
c00109cc:	53                   	push   ebx
c00109cd:	83 ec 28             	sub    esp,0x28
c00109d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00109d4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00109d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00109db:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00109e0:	75 0e                	jne    c00109f0 <tcp_zero_window_probe+0x24>
c00109e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00109e6:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00109e9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00109ed:	8d 76 00             	lea    esi,[esi+0x0]
c00109f0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00109f5:	0f 84 99 01 00 00    	je     c0010b94 <tcp_zero_window_probe+0x1c8>
c00109fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00109ff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010a02:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010a06:	0f b7 c0             	movzx  eax,ax
c0010a09:	83 ec 0c             	sub    esp,0xc
c0010a0c:	50                   	push   eax
c0010a0d:	e8 0a 02 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010a12:	83 c4 10             	add    esp,0x10
c0010a15:	0f b7 c0             	movzx  eax,ax
c0010a18:	83 e0 01             	and    eax,0x1
c0010a1b:	74 17                	je     c0010a34 <tcp_zero_window_probe+0x68>
c0010a1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a21:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010a24:	0f b7 c0             	movzx  eax,ax
c0010a27:	85 c0                	test   eax,eax
c0010a29:	75 09                	jne    c0010a34 <tcp_zero_window_probe+0x68>
c0010a2b:	b8 01 00 00 00       	mov    eax,0x1
c0010a30:	eb 0a                	jmp    c0010a3c <tcp_zero_window_probe+0x70>
c0010a32:	66 90                	xchg   ax,ax
c0010a34:	b8 00 00 00 00       	mov    eax,0x0
c0010a39:	8d 76 00             	lea    esi,[esi+0x0]
c0010a3c:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0010a40:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0010a45:	85 c0                	test   eax,eax
c0010a47:	0f 94 c0             	sete   al
c0010a4a:	0f b6 c0             	movzx  eax,al
c0010a4d:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0010a52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a56:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010a59:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010a5c:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0010a61:	52                   	push   edx
c0010a62:	50                   	push   eax
c0010a63:	6a 00                	push   0x0
c0010a65:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010a69:	e8 7e e1 ff ff       	call   c000ebec <tcp_output_alloc_header>
c0010a6e:	83 c4 10             	add    esp,0x10
c0010a71:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010a75:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010a7a:	0f 84 18 01 00 00    	je     c0010b98 <tcp_zero_window_probe+0x1cc>
c0010a80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a87:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010a8b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0010a90:	85 c0                	test   eax,eax
c0010a92:	74 28                	je     c0010abc <tcp_zero_window_probe+0xf0>
c0010a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a98:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010a9c:	80 e4 c0             	and    ah,0xc0
c0010a9f:	89 c3                	mov    ebx,eax
c0010aa1:	83 ec 0c             	sub    esp,0xc
c0010aa4:	6a 11                	push   0x11
c0010aa6:	e8 71 01 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010aab:	83 c4 10             	add    esp,0x10
c0010aae:	09 d8                	or     eax,ebx
c0010ab0:	89 c2                	mov    edx,eax
c0010ab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ab6:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c0010aba:	eb 58                	jmp    c0010b14 <tcp_zero_window_probe+0x148>
c0010abc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ac0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ac3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ac6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010aca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010ace:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ad1:	83 c0 14             	add    eax,0x14
c0010ad4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ad8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010adc:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010ae0:	0f b7 c0             	movzx  eax,ax
c0010ae3:	83 ec 0c             	sub    esp,0xc
c0010ae6:	50                   	push   eax
c0010ae7:	e8 30 01 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010aec:	83 c4 10             	add    esp,0x10
c0010aef:	0f b7 c0             	movzx  eax,ax
c0010af2:	c1 e8 0c             	shr    eax,0xc
c0010af5:	c1 e0 02             	shl    eax,0x2
c0010af8:	0f b7 d0             	movzx  edx,ax
c0010afb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010aff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b02:	52                   	push   edx
c0010b03:	6a 01                	push   0x1
c0010b05:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010b09:	50                   	push   eax
c0010b0a:	e8 b1 86 ff ff       	call   c00091c0 <pbuf_copy_partial>
c0010b0f:	83 c4 10             	add    esp,0x10
c0010b12:	66 90                	xchg   ax,ax
c0010b14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b18:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010b1b:	0f b7 d0             	movzx  edx,ax
c0010b1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010b22:	8d 48 04             	lea    ecx,[eax+0x4]
c0010b25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010b29:	83 ec 0c             	sub    esp,0xc
c0010b2c:	52                   	push   edx
c0010b2d:	6a 06                	push   0x6
c0010b2f:	51                   	push   ecx
c0010b30:	50                   	push   eax
c0010b31:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010b35:	e8 96 28 00 00       	call   c00133d0 <inet_chksum_pseudo>
c0010b3a:	83 c4 20             	add    esp,0x20
c0010b3d:	89 c2                	mov    edx,eax
c0010b3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b43:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c0010b47:	66 a1 b0 77 03 c0    	mov    ax,ds:0xc00377b0
c0010b4d:	83 c0 01             	add    eax,0x1
c0010b50:	66 a3 b0 77 03 c0    	mov    ds:0xc00377b0,ax
c0010b56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010b5a:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0010b5d:	0f b6 d0             	movzx  edx,al
c0010b60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010b64:	8d 48 04             	lea    ecx,[eax+0x4]
c0010b67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010b6b:	83 ec 08             	sub    esp,0x8
c0010b6e:	6a 06                	push   0x6
c0010b70:	6a 00                	push   0x0
c0010b72:	52                   	push   edx
c0010b73:	51                   	push   ecx
c0010b74:	50                   	push   eax
c0010b75:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010b79:	e8 92 34 00 00       	call   c0014010 <ip_output>
c0010b7e:	83 c4 20             	add    esp,0x20
c0010b81:	83 ec 0c             	sub    esp,0xc
c0010b84:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010b88:	e8 87 79 ff ff       	call   c0008514 <pbuf_free>
c0010b8d:	83 c4 10             	add    esp,0x10
c0010b90:	eb 0a                	jmp    c0010b9c <tcp_zero_window_probe+0x1d0>
c0010b92:	66 90                	xchg   ax,ax
c0010b94:	90                   	nop
c0010b95:	eb 05                	jmp    c0010b9c <tcp_zero_window_probe+0x1d0>
c0010b97:	90                   	nop
c0010b98:	90                   	nop
c0010b99:	8d 76 00             	lea    esi,[esi+0x0]
c0010b9c:	83 c4 28             	add    esp,0x28
c0010b9f:	5b                   	pop    ebx
c0010ba0:	c3                   	ret    
c0010ba1:	66 90                	xchg   ax,ax
c0010ba3:	90                   	nop

c0010ba4 <sys_timeout>:
c0010ba4:	83 ec 1c             	sub    esp,0x1c
c0010ba7:	83 ec 0c             	sub    esp,0xc
c0010baa:	6a 0b                	push   0xb
c0010bac:	e8 77 6f ff ff       	call   c0007b28 <memp_malloc>
c0010bb1:	83 c4 10             	add    esp,0x10
c0010bb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010bb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010bbd:	75 25                	jne    c0010be4 <sys_timeout+0x40>
c0010bbf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010bc4:	0f 85 3e 01 00 00    	jne    c0010d08 <sys_timeout+0x164>
c0010bca:	83 ec 08             	sub    esp,0x8
c0010bcd:	68 6c 12 03 c0       	push   0xc003126c
c0010bd2:	68 46 03 03 c0       	push   0xc0030346
c0010bd7:	e8 70 f2 00 00       	call   c001fe4c <CPrintf>
c0010bdc:	83 c4 10             	add    esp,0x10
c0010bdf:	e9 24 01 00 00       	jmp    c0010d08 <sys_timeout+0x164>
c0010be4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010be8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010bee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bf2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010bf6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010bf9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bfd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010c01:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010c04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c08:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010c0c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c0f:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010c14:	85 c0                	test   eax,eax
c0010c16:	75 10                	jne    c0010c28 <sys_timeout+0x84>
c0010c18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c1c:	a3 d4 b8 03 c0       	mov    ds:0xc003b8d4,eax
c0010c21:	e9 e6 00 00 00       	jmp    c0010d0c <sys_timeout+0x168>
c0010c26:	66 90                	xchg   ax,ax
c0010c28:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010c2d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c30:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0010c34:	73 2e                	jae    c0010c64 <sys_timeout+0xc0>
c0010c36:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010c3b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010c3e:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010c43:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0010c47:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c4a:	8b 15 d4 b8 03 c0    	mov    edx,DWORD PTR ds:0xc003b8d4
c0010c50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c54:	89 10                	mov    DWORD PTR [eax],edx
c0010c56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c5a:	a3 d4 b8 03 c0       	mov    ds:0xc003b8d4,eax
c0010c5f:	e9 a8 00 00 00       	jmp    c0010d0c <sys_timeout+0x168>
c0010c64:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010c69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c6d:	e9 86 00 00 00       	jmp    c0010cf8 <sys_timeout+0x154>
c0010c72:	66 90                	xchg   ax,ax
c0010c74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c78:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010c7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c82:	29 c2                	sub    edx,eax
c0010c84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c91:	85 c0                	test   eax,eax
c0010c93:	74 17                	je     c0010cac <sys_timeout+0x108>
c0010c95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c99:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c9b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010c9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ca2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ca5:	39 c2                	cmp    edx,eax
c0010ca7:	76 43                	jbe    c0010cec <sys_timeout+0x148>
c0010ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0010cac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010cb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0010cb2:	85 c0                	test   eax,eax
c0010cb4:	74 1e                	je     c0010cd4 <sys_timeout+0x130>
c0010cb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010cba:	8b 00                	mov    eax,DWORD PTR [eax]
c0010cbc:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010cbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010cc3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010cc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010cca:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ccc:	29 d1                	sub    ecx,edx
c0010cce:	89 ca                	mov    edx,ecx
c0010cd0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010cd3:	90                   	nop
c0010cd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010cd8:	8b 10                	mov    edx,DWORD PTR [eax]
c0010cda:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010cde:	89 10                	mov    DWORD PTR [eax],edx
c0010ce0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ce4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ce8:	89 10                	mov    DWORD PTR [eax],edx
c0010cea:	eb 20                	jmp    c0010d0c <sys_timeout+0x168>
c0010cec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010cf0:	8b 00                	mov    eax,DWORD PTR [eax]
c0010cf2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010cf6:	66 90                	xchg   ax,ax
c0010cf8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010cfd:	0f 85 71 ff ff ff    	jne    c0010c74 <sys_timeout+0xd0>
c0010d03:	eb 07                	jmp    c0010d0c <sys_timeout+0x168>
c0010d05:	8d 76 00             	lea    esi,[esi+0x0]
c0010d08:	90                   	nop
c0010d09:	8d 76 00             	lea    esi,[esi+0x0]
c0010d0c:	83 c4 1c             	add    esp,0x1c
c0010d0f:	c3                   	ret    

c0010d10 <tcpip_tcp_timer>:
c0010d10:	83 ec 0c             	sub    esp,0xc
c0010d13:	e8 b8 a4 ff ff       	call   c000b1d0 <tcp_tmr>
c0010d18:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c0010d1d:	85 c0                	test   eax,eax
c0010d1f:	75 0b                	jne    c0010d2c <tcpip_tcp_timer+0x1c>
c0010d21:	a1 84 78 03 c0       	mov    eax,ds:0xc0037884
c0010d26:	85 c0                	test   eax,eax
c0010d28:	74 1e                	je     c0010d48 <tcpip_tcp_timer+0x38>
c0010d2a:	66 90                	xchg   ax,ax
c0010d2c:	83 ec 04             	sub    esp,0x4
c0010d2f:	6a 00                	push   0x0
c0010d31:	68 10 0d 01 c0       	push   0xc0010d10
c0010d36:	68 fa 00 00 00       	push   0xfa
c0010d3b:	e8 64 fe ff ff       	call   c0010ba4 <sys_timeout>
c0010d40:	83 c4 10             	add    esp,0x10
c0010d43:	eb 0f                	jmp    c0010d54 <tcpip_tcp_timer+0x44>
c0010d45:	8d 76 00             	lea    esi,[esi+0x0]
c0010d48:	c7 05 d0 b8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b8d0,0x0
c0010d52:	66 90                	xchg   ax,ax
c0010d54:	90                   	nop
c0010d55:	83 c4 0c             	add    esp,0xc
c0010d58:	c3                   	ret    
c0010d59:	8d 76 00             	lea    esi,[esi+0x0]

c0010d5c <tcp_timer_needed>:
c0010d5c:	83 ec 0c             	sub    esp,0xc
c0010d5f:	a1 d0 b8 03 c0       	mov    eax,ds:0xc003b8d0
c0010d64:	85 c0                	test   eax,eax
c0010d66:	75 38                	jne    c0010da0 <tcp_timer_needed+0x44>
c0010d68:	a1 70 78 03 c0       	mov    eax,ds:0xc0037870
c0010d6d:	85 c0                	test   eax,eax
c0010d6f:	75 0b                	jne    c0010d7c <tcp_timer_needed+0x20>
c0010d71:	a1 84 78 03 c0       	mov    eax,ds:0xc0037884
c0010d76:	85 c0                	test   eax,eax
c0010d78:	74 26                	je     c0010da0 <tcp_timer_needed+0x44>
c0010d7a:	66 90                	xchg   ax,ax
c0010d7c:	c7 05 d0 b8 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003b8d0,0x1
c0010d86:	83 ec 04             	sub    esp,0x4
c0010d89:	6a 00                	push   0x0
c0010d8b:	68 10 0d 01 c0       	push   0xc0010d10
c0010d90:	68 fa 00 00 00       	push   0xfa
c0010d95:	e8 0a fe ff ff       	call   c0010ba4 <sys_timeout>
c0010d9a:	83 c4 10             	add    esp,0x10
c0010d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0010da0:	90                   	nop
c0010da1:	83 c4 0c             	add    esp,0xc
c0010da4:	c3                   	ret    
c0010da5:	8d 76 00             	lea    esi,[esi+0x0]

c0010da8 <ip_reass_timer>:
c0010da8:	83 ec 0c             	sub    esp,0xc
c0010dab:	e8 18 3b 00 00       	call   c00148c8 <ip_reass_tmr>
c0010db0:	83 ec 04             	sub    esp,0x4
c0010db3:	6a 00                	push   0x0
c0010db5:	68 a8 0d 01 c0       	push   0xc0010da8
c0010dba:	68 e8 03 00 00       	push   0x3e8
c0010dbf:	e8 e0 fd ff ff       	call   c0010ba4 <sys_timeout>
c0010dc4:	83 c4 10             	add    esp,0x10
c0010dc7:	90                   	nop
c0010dc8:	83 c4 0c             	add    esp,0xc
c0010dcb:	c3                   	ret    

c0010dcc <arp_timer>:
c0010dcc:	83 ec 0c             	sub    esp,0xc
c0010dcf:	e8 64 0d 00 00       	call   c0011b38 <etharp_tmr>
c0010dd4:	83 ec 04             	sub    esp,0x4
c0010dd7:	6a 00                	push   0x0
c0010dd9:	68 cc 0d 01 c0       	push   0xc0010dcc
c0010dde:	68 88 13 00 00       	push   0x1388
c0010de3:	e8 bc fd ff ff       	call   c0010ba4 <sys_timeout>
c0010de8:	83 c4 10             	add    esp,0x10
c0010deb:	90                   	nop
c0010dec:	83 c4 0c             	add    esp,0xc
c0010def:	c3                   	ret    

c0010df0 <sys_timeouts_init>:
c0010df0:	83 ec 0c             	sub    esp,0xc
c0010df3:	83 ec 04             	sub    esp,0x4
c0010df6:	6a 00                	push   0x0
c0010df8:	68 a8 0d 01 c0       	push   0xc0010da8
c0010dfd:	68 e8 03 00 00       	push   0x3e8
c0010e02:	e8 9d fd ff ff       	call   c0010ba4 <sys_timeout>
c0010e07:	83 c4 10             	add    esp,0x10
c0010e0a:	83 ec 04             	sub    esp,0x4
c0010e0d:	6a 00                	push   0x0
c0010e0f:	68 cc 0d 01 c0       	push   0xc0010dcc
c0010e14:	68 88 13 00 00       	push   0x1388
c0010e19:	e8 86 fd ff ff       	call   c0010ba4 <sys_timeout>
c0010e1e:	83 c4 10             	add    esp,0x10
c0010e21:	90                   	nop
c0010e22:	83 c4 0c             	add    esp,0xc
c0010e25:	c3                   	ret    
c0010e26:	66 90                	xchg   ax,ax

c0010e28 <sys_untimeout>:
c0010e28:	83 ec 1c             	sub    esp,0x1c
c0010e2b:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010e30:	85 c0                	test   eax,eax
c0010e32:	0f 84 b4 00 00 00    	je     c0010eec <sys_untimeout+0xc4>
c0010e38:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e41:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010e49:	e9 8e 00 00 00       	jmp    c0010edc <sys_untimeout+0xb4>
c0010e4e:	66 90                	xchg   ax,ax
c0010e50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010e57:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0010e5b:	75 6b                	jne    c0010ec8 <sys_untimeout+0xa0>
c0010e5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e61:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010e64:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0010e68:	75 5e                	jne    c0010ec8 <sys_untimeout+0xa0>
c0010e6a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010e6f:	75 0f                	jne    c0010e80 <sys_untimeout+0x58>
c0010e71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e75:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e77:	a3 d4 b8 03 c0       	mov    ds:0xc003b8d4,eax
c0010e7c:	eb 0e                	jmp    c0010e8c <sys_untimeout+0x64>
c0010e7e:	66 90                	xchg   ax,ax
c0010e80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e84:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e8a:	89 10                	mov    DWORD PTR [eax],edx
c0010e8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e90:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e92:	85 c0                	test   eax,eax
c0010e94:	74 1e                	je     c0010eb4 <sys_untimeout+0x8c>
c0010e96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e9c:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010e9f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ea3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010ea6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010eaa:	8b 00                	mov    eax,DWORD PTR [eax]
c0010eac:	01 ca                	add    edx,ecx
c0010eae:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010eb1:	8d 76 00             	lea    esi,[esi+0x0]
c0010eb4:	83 ec 08             	sub    esp,0x8
c0010eb7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ebb:	6a 0b                	push   0xb
c0010ebd:	e8 92 6d ff ff       	call   c0007c54 <memp_free>
c0010ec2:	83 c4 10             	add    esp,0x10
c0010ec5:	eb 29                	jmp    c0010ef0 <sys_untimeout+0xc8>
c0010ec7:	90                   	nop
c0010ec8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ecc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ed0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ed4:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010eda:	66 90                	xchg   ax,ax
c0010edc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010ee1:	0f 85 69 ff ff ff    	jne    c0010e50 <sys_untimeout+0x28>
c0010ee7:	90                   	nop
c0010ee8:	eb 06                	jmp    c0010ef0 <sys_untimeout+0xc8>
c0010eea:	66 90                	xchg   ax,ax
c0010eec:	90                   	nop
c0010eed:	8d 76 00             	lea    esi,[esi+0x0]
c0010ef0:	83 c4 1c             	add    esp,0x1c
c0010ef3:	c3                   	ret    

c0010ef4 <sys_timeouts_mbox_fetch>:
c0010ef4:	83 ec 1c             	sub    esp,0x1c
c0010ef7:	90                   	nop
c0010ef8:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010efd:	85 c0                	test   eax,eax
c0010eff:	75 1f                	jne    c0010f20 <sys_timeouts_mbox_fetch+0x2c>
c0010f01:	83 ec 04             	sub    esp,0x4
c0010f04:	6a 00                	push   0x0
c0010f06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010f0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010f0e:	e8 4d fe fe ff       	call   c0000d60 <sys_arch_mbox_fetch>
c0010f13:	83 c4 10             	add    esp,0x10
c0010f16:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f1a:	e9 cd 00 00 00       	jmp    c0010fec <sys_timeouts_mbox_fetch+0xf8>
c0010f1f:	90                   	nop
c0010f20:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010f25:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f28:	85 c0                	test   eax,eax
c0010f2a:	74 24                	je     c0010f50 <sys_timeouts_mbox_fetch+0x5c>
c0010f2c:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010f31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f34:	83 ec 04             	sub    esp,0x4
c0010f37:	50                   	push   eax
c0010f38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010f3c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010f40:	e8 1b fe fe ff       	call   c0000d60 <sys_arch_mbox_fetch>
c0010f45:	83 c4 10             	add    esp,0x10
c0010f48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f4c:	eb 0a                	jmp    c0010f58 <sys_timeouts_mbox_fetch+0x64>
c0010f4e:	66 90                	xchg   ax,ax
c0010f50:	c7 44 24 0c ff ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
c0010f58:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c0010f5d:	75 5d                	jne    c0010fbc <sys_timeouts_mbox_fetch+0xc8>
c0010f5f:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010f64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010f68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010f6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f6e:	a3 d4 b8 03 c0       	mov    ds:0xc003b8d4,eax
c0010f73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010f77:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010f7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010f7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010f82:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010f85:	89 04 24             	mov    DWORD PTR [esp],eax
c0010f88:	83 ec 08             	sub    esp,0x8
c0010f8b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f8f:	6a 0b                	push   0xb
c0010f91:	e8 be 6c ff ff       	call   c0007c54 <memp_free>
c0010f96:	83 c4 10             	add    esp,0x10
c0010f99:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0010f9e:	0f 84 54 ff ff ff    	je     c0010ef8 <sys_timeouts_mbox_fetch+0x4>
c0010fa4:	83 ec 0c             	sub    esp,0xc
c0010fa7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010fab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010faf:	ff d0                	call   eax
c0010fb1:	83 c4 10             	add    esp,0x10
c0010fb4:	e9 3f ff ff ff       	jmp    c0010ef8 <sys_timeouts_mbox_fetch+0x4>
c0010fb9:	8d 76 00             	lea    esi,[esi+0x0]
c0010fbc:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010fc1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fc4:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0010fc8:	73 16                	jae    c0010fe0 <sys_timeouts_mbox_fetch+0xec>
c0010fca:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010fcf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010fd2:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010fd7:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010fdb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fde:	eb 0c                	jmp    c0010fec <sys_timeouts_mbox_fetch+0xf8>
c0010fe0:	a1 d4 b8 03 c0       	mov    eax,ds:0xc003b8d4
c0010fe5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010fec:	90                   	nop
c0010fed:	83 c4 1c             	add    esp,0x1c
c0010ff0:	c3                   	ret    
c0010ff1:	66 90                	xchg   ax,ax
c0010ff3:	90                   	nop

c0010ff4 <udp_input>:
c0010ff4:	53                   	push   ebx
c0010ff5:	83 ec 28             	sub    esp,0x28
c0010ff8:	66 a1 9a 77 03 c0    	mov    ax,ds:0xc003779a
c0010ffe:	83 c0 01             	add    eax,0x1
c0011001:	66 a3 9a 77 03 c0    	mov    ds:0xc003779a,ax
c0011007:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001100b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001100e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011012:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011016:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011019:	0f b7 d8             	movzx  ebx,ax
c001101c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011020:	66 8b 00             	mov    ax,WORD PTR [eax]
c0011023:	0f b7 c0             	movzx  eax,ax
c0011026:	83 ec 0c             	sub    esp,0xc
c0011029:	50                   	push   eax
c001102a:	e8 ed fb fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001102f:	83 c4 10             	add    esp,0x10
c0011032:	0f b7 c0             	movzx  eax,ax
c0011035:	c1 e8 08             	shr    eax,0x8
c0011038:	0f b7 c0             	movzx  eax,ax
c001103b:	83 e0 0f             	and    eax,0xf
c001103e:	83 c0 02             	add    eax,0x2
c0011041:	c1 e0 02             	shl    eax,0x2
c0011044:	39 c3                	cmp    ebx,eax
c0011046:	7c 3c                	jl     c0011084 <udp_input+0x90>
c0011048:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001104c:	66 8b 00             	mov    ax,WORD PTR [eax]
c001104f:	0f b7 c0             	movzx  eax,ax
c0011052:	83 ec 0c             	sub    esp,0xc
c0011055:	50                   	push   eax
c0011056:	e8 c1 fb fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001105b:	83 c4 10             	add    esp,0x10
c001105e:	0f b7 c0             	movzx  eax,ax
c0011061:	c1 e8 08             	shr    eax,0x8
c0011064:	83 e0 0f             	and    eax,0xf
c0011067:	c1 e0 02             	shl    eax,0x2
c001106a:	f7 d8                	neg    eax
c001106c:	98                   	cwde   
c001106d:	83 ec 08             	sub    esp,0x8
c0011070:	50                   	push   eax
c0011071:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011075:	e8 fa 72 ff ff       	call   c0008374 <pbuf_header>
c001107a:	83 c4 10             	add    esp,0x10
c001107d:	0f b6 c0             	movzx  eax,al
c0011080:	85 c0                	test   eax,eax
c0011082:	74 34                	je     c00110b8 <udp_input+0xc4>
c0011084:	66 a1 a2 77 03 c0    	mov    ax,ds:0xc00377a2
c001108a:	83 c0 01             	add    eax,0x1
c001108d:	66 a3 a2 77 03 c0    	mov    ds:0xc00377a2,ax
c0011093:	66 a1 9e 77 03 c0    	mov    ax,ds:0xc003779e
c0011099:	83 c0 01             	add    eax,0x1
c001109c:	66 a3 9e 77 03 c0    	mov    ds:0xc003779e,ax
c00110a2:	83 ec 0c             	sub    esp,0xc
c00110a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110a9:	e8 66 74 ff ff       	call   c0008514 <pbuf_free>
c00110ae:	83 c4 10             	add    esp,0x10
c00110b1:	e9 aa 03 00 00       	jmp    c0011460 <udp_input+0x46c>
c00110b6:	66 90                	xchg   ax,ax
c00110b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00110bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00110c3:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c00110c8:	83 ec 08             	sub    esp,0x8
c00110cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110cf:	50                   	push   eax
c00110d0:	e8 e3 2f 00 00       	call   c00140b8 <ip4_addr_isbroadcast>
c00110d5:	83 c4 10             	add    esp,0x10
c00110d8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00110dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00110e0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00110e3:	0f b7 c0             	movzx  eax,ax
c00110e6:	83 ec 0c             	sub    esp,0xc
c00110e9:	50                   	push   eax
c00110ea:	e8 2d fb fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00110ef:	83 c4 10             	add    esp,0x10
c00110f2:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00110f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00110fb:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c00110ff:	0f b7 c0             	movzx  eax,ax
c0011102:	83 ec 0c             	sub    esp,0xc
c0011105:	50                   	push   eax
c0011106:	e8 11 fb fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001110b:	83 c4 10             	add    esp,0x10
c001110e:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0011113:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001111b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0011120:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011128:	a1 8c 78 03 c0       	mov    eax,ds:0xc003788c
c001112d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011131:	e9 0a 01 00 00       	jmp    c0011240 <udp_input+0x24c>
c0011136:	66 90                	xchg   ax,ax
c0011138:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001113d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011141:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011145:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c001114a:	0f b7 c0             	movzx  eax,ax
c001114d:	39 c2                	cmp    edx,eax
c001114f:	75 57                	jne    c00111a8 <udp_input+0x1b4>
c0011151:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0011156:	85 c0                	test   eax,eax
c0011158:	75 12                	jne    c001116c <udp_input+0x178>
c001115a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001115e:	85 c0                	test   eax,eax
c0011160:	74 22                	je     c0011184 <udp_input+0x190>
c0011162:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011166:	8b 00                	mov    eax,DWORD PTR [eax]
c0011168:	85 c0                	test   eax,eax
c001116a:	74 18                	je     c0011184 <udp_input+0x190>
c001116c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011170:	8b 10                	mov    edx,DWORD PTR [eax]
c0011172:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c0011177:	39 c2                	cmp    edx,eax
c0011179:	74 09                	je     c0011184 <udp_input+0x190>
c001117b:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0011180:	85 c0                	test   eax,eax
c0011182:	74 24                	je     c00111a8 <udp_input+0x1b4>
c0011184:	c6 44 24 13 01       	mov    BYTE PTR [esp+0x13],0x1
c0011189:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001118e:	75 18                	jne    c00111a8 <udp_input+0x1b4>
c0011190:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011194:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0011197:	0f b6 c0             	movzx  eax,al
c001119a:	83 e0 04             	and    eax,0x4
c001119d:	75 09                	jne    c00111a8 <udp_input+0x1b4>
c001119f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00111a7:	90                   	nop
c00111a8:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00111ad:	85 c0                	test   eax,eax
c00111af:	74 7b                	je     c001122c <udp_input+0x238>
c00111b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111b5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00111b8:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c00111bd:	0f b7 c0             	movzx  eax,ax
c00111c0:	39 c2                	cmp    edx,eax
c00111c2:	75 68                	jne    c001122c <udp_input+0x238>
c00111c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111c8:	83 c0 04             	add    eax,0x4
c00111cb:	74 1b                	je     c00111e8 <udp_input+0x1f4>
c00111cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111d4:	85 c0                	test   eax,eax
c00111d6:	74 10                	je     c00111e8 <udp_input+0x1f4>
c00111d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00111df:	a1 90 78 03 c0       	mov    eax,ds:0xc0037890
c00111e4:	39 c2                	cmp    edx,eax
c00111e6:	75 44                	jne    c001122c <udp_input+0x238>
c00111e8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00111ed:	74 29                	je     c0011218 <udp_input+0x224>
c00111ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111f3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00111f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00111fa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00111fd:	8b 15 8c 78 03 c0    	mov    edx,DWORD PTR ds:0xc003788c
c0011203:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011207:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001120a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001120e:	a3 8c 78 03 c0       	mov    ds:0xc003788c,eax
c0011213:	eb 37                	jmp    c001124c <udp_input+0x258>
c0011215:	8d 76 00             	lea    esi,[esi+0x0]
c0011218:	66 a1 ae 77 03 c0    	mov    ax,ds:0xc00377ae
c001121e:	83 c0 01             	add    eax,0x1
c0011221:	66 a3 ae 77 03 c0    	mov    ds:0xc00377ae,ax
c0011227:	eb 23                	jmp    c001124c <udp_input+0x258>
c0011229:	8d 76 00             	lea    esi,[esi+0x0]
c001122c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011230:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011234:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011238:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001123b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001123f:	90                   	nop
c0011240:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011245:	0f 85 ed fe ff ff    	jne    c0011138 <udp_input+0x144>
c001124b:	90                   	nop
c001124c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011251:	75 09                	jne    c001125c <udp_input+0x268>
c0011253:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011257:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001125b:	90                   	nop
c001125c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011261:	75 15                	jne    c0011278 <udp_input+0x284>
c0011263:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011267:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001126a:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c001126f:	39 c2                	cmp    edx,eax
c0011271:	0f 85 d9 01 00 00    	jne    c0011450 <udp_input+0x45c>
c0011277:	90                   	nop
c0011278:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001127c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0011280:	0f b7 c0             	movzx  eax,ax
c0011283:	85 c0                	test   eax,eax
c0011285:	74 61                	je     c00112e8 <udp_input+0x2f4>
c0011287:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001128b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001128e:	0f b7 c0             	movzx  eax,ax
c0011291:	83 ec 0c             	sub    esp,0xc
c0011294:	50                   	push   eax
c0011295:	6a 11                	push   0x11
c0011297:	68 98 78 03 c0       	push   0xc0037898
c001129c:	68 90 78 03 c0       	push   0xc0037890
c00112a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00112a5:	e8 26 21 00 00       	call   c00133d0 <inet_chksum_pseudo>
c00112aa:	83 c4 20             	add    esp,0x20
c00112ad:	0f b7 c0             	movzx  eax,ax
c00112b0:	85 c0                	test   eax,eax
c00112b2:	74 34                	je     c00112e8 <udp_input+0x2f4>
c00112b4:	66 a1 a0 77 03 c0    	mov    ax,ds:0xc00377a0
c00112ba:	83 c0 01             	add    eax,0x1
c00112bd:	66 a3 a0 77 03 c0    	mov    ds:0xc00377a0,ax
c00112c3:	66 a1 9e 77 03 c0    	mov    ax,ds:0xc003779e
c00112c9:	83 c0 01             	add    eax,0x1
c00112cc:	66 a3 9e 77 03 c0    	mov    ds:0xc003779e,ax
c00112d2:	83 ec 0c             	sub    esp,0xc
c00112d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00112d9:	e8 36 72 ff ff       	call   c0008514 <pbuf_free>
c00112de:	83 c4 10             	add    esp,0x10
c00112e1:	e9 7a 01 00 00       	jmp    c0011460 <udp_input+0x46c>
c00112e6:	66 90                	xchg   ax,ax
c00112e8:	83 ec 08             	sub    esp,0x8
c00112eb:	6a f8                	push   0xfffffff8
c00112ed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00112f1:	e8 7e 70 ff ff       	call   c0008374 <pbuf_header>
c00112f6:	83 c4 10             	add    esp,0x10
c00112f9:	0f b6 c0             	movzx  eax,al
c00112fc:	85 c0                	test   eax,eax
c00112fe:	74 38                	je     c0011338 <udp_input+0x344>
c0011300:	83 ec 08             	sub    esp,0x8
c0011303:	68 a9 12 03 c0       	push   0xc00312a9
c0011308:	68 46 03 03 c0       	push   0xc0030346
c001130d:	e8 3a eb 00 00       	call   c001fe4c <CPrintf>
c0011312:	83 c4 10             	add    esp,0x10
c0011315:	66 a1 9e 77 03 c0    	mov    ax,ds:0xc003779e
c001131b:	83 c0 01             	add    eax,0x1
c001131e:	66 a3 9e 77 03 c0    	mov    ds:0xc003779e,ax
c0011324:	83 ec 0c             	sub    esp,0xc
c0011327:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001132b:	e8 e4 71 ff ff       	call   c0008514 <pbuf_free>
c0011330:	83 c4 10             	add    esp,0x10
c0011333:	e9 28 01 00 00       	jmp    c0011460 <udp_input+0x46c>
c0011338:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001133d:	74 51                	je     c0011390 <udp_input+0x39c>
c001133f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011343:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011346:	85 c0                	test   eax,eax
c0011348:	74 32                	je     c001137c <udp_input+0x388>
c001134a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001134e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011351:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c0011356:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001135a:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001135d:	83 ec 0c             	sub    esp,0xc
c0011360:	51                   	push   ecx
c0011361:	68 90 78 03 c0       	push   0xc0037890
c0011366:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001136a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001136e:	52                   	push   edx
c001136f:	ff d0                	call   eax
c0011371:	83 c4 20             	add    esp,0x20
c0011374:	e9 e7 00 00 00       	jmp    c0011460 <udp_input+0x46c>
c0011379:	8d 76 00             	lea    esi,[esi+0x0]
c001137c:	83 ec 0c             	sub    esp,0xc
c001137f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011383:	e8 8c 71 ff ff       	call   c0008514 <pbuf_free>
c0011388:	83 c4 10             	add    esp,0x10
c001138b:	e9 d0 00 00 00       	jmp    c0011460 <udp_input+0x46c>
c0011390:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0011395:	85 c0                	test   eax,eax
c0011397:	0f 85 83 00 00 00    	jne    c0011420 <udp_input+0x42c>
c001139d:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c00113a2:	25 f0 00 00 00       	and    eax,0xf0
c00113a7:	3d e0 00 00 00       	cmp    eax,0xe0
c00113ac:	74 72                	je     c0011420 <udp_input+0x42c>
c00113ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00113b2:	66 8b 00             	mov    ax,WORD PTR [eax]
c00113b5:	0f b7 c0             	movzx  eax,ax
c00113b8:	83 ec 0c             	sub    esp,0xc
c00113bb:	50                   	push   eax
c00113bc:	e8 5b f8 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00113c1:	83 c4 10             	add    esp,0x10
c00113c4:	0f b7 c0             	movzx  eax,ax
c00113c7:	c1 e8 08             	shr    eax,0x8
c00113ca:	0f b7 c0             	movzx  eax,ax
c00113cd:	83 e0 0f             	and    eax,0xf
c00113d0:	83 c0 02             	add    eax,0x2
c00113d3:	c1 e0 02             	shl    eax,0x2
c00113d6:	98                   	cwde   
c00113d7:	83 ec 08             	sub    esp,0x8
c00113da:	50                   	push   eax
c00113db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00113df:	e8 90 6f ff ff       	call   c0008374 <pbuf_header>
c00113e4:	83 c4 10             	add    esp,0x10
c00113e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113ee:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00113f2:	74 18                	je     c001140c <udp_input+0x418>
c00113f4:	83 ec 08             	sub    esp,0x8
c00113f7:	68 bd 12 03 c0       	push   0xc00312bd
c00113fc:	68 46 03 03 c0       	push   0xc0030346
c0011401:	e8 46 ea 00 00       	call   c001fe4c <CPrintf>
c0011406:	83 c4 10             	add    esp,0x10
c0011409:	8d 76 00             	lea    esi,[esi+0x0]
c001140c:	83 ec 08             	sub    esp,0x8
c001140f:	6a 03                	push   0x3
c0011411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011415:	e8 76 1e 00 00       	call   c0013290 <icmp_dest_unreach>
c001141a:	83 c4 10             	add    esp,0x10
c001141d:	8d 76 00             	lea    esi,[esi+0x0]
c0011420:	66 a1 a8 77 03 c0    	mov    ax,ds:0xc00377a8
c0011426:	83 c0 01             	add    eax,0x1
c0011429:	66 a3 a8 77 03 c0    	mov    ds:0xc00377a8,ax
c001142f:	66 a1 9e 77 03 c0    	mov    ax,ds:0xc003779e
c0011435:	83 c0 01             	add    eax,0x1
c0011438:	66 a3 9e 77 03 c0    	mov    ds:0xc003779e,ax
c001143e:	83 ec 0c             	sub    esp,0xc
c0011441:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011445:	e8 ca 70 ff ff       	call   c0008514 <pbuf_free>
c001144a:	83 c4 10             	add    esp,0x10
c001144d:	eb 11                	jmp    c0011460 <udp_input+0x46c>
c001144f:	90                   	nop
c0011450:	83 ec 0c             	sub    esp,0xc
c0011453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011457:	e8 b8 70 ff ff       	call   c0008514 <pbuf_free>
c001145c:	83 c4 10             	add    esp,0x10
c001145f:	90                   	nop
c0011460:	90                   	nop
c0011461:	83 c4 28             	add    esp,0x28
c0011464:	5b                   	pop    ebx
c0011465:	c3                   	ret    
c0011466:	66 90                	xchg   ax,ax

c0011468 <udp_bind>:
c0011468:	83 ec 2c             	sub    esp,0x2c
c001146b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001146f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011474:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c0011479:	a1 8c 78 03 c0       	mov    eax,ds:0xc003788c
c001147e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011482:	e9 8d 00 00 00       	jmp    c0011514 <udp_bind+0xac>
c0011487:	90                   	nop
c0011488:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001148c:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0011490:	75 26                	jne    c00114b8 <udp_bind+0x50>
c0011492:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0011497:	85 c0                	test   eax,eax
c0011499:	74 15                	je     c00114b0 <udp_bind+0x48>
c001149b:	83 ec 08             	sub    esp,0x8
c001149e:	68 d1 12 03 c0       	push   0xc00312d1
c00114a3:	68 46 03 03 c0       	push   0xc0030346
c00114a8:	e8 9f e9 00 00       	call   c001fe4c <CPrintf>
c00114ad:	83 c4 10             	add    esp,0x10
c00114b0:	c6 44 24 1b 01       	mov    BYTE PTR [esp+0x1b],0x1
c00114b5:	eb 51                	jmp    c0011508 <udp_bind+0xa0>
c00114b7:	90                   	nop
c00114b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114bc:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00114c0:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00114c5:	0f b7 c0             	movzx  eax,ax
c00114c8:	39 c2                	cmp    edx,eax
c00114ca:	75 3c                	jne    c0011508 <udp_bind+0xa0>
c00114cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114d0:	85 c0                	test   eax,eax
c00114d2:	74 2c                	je     c0011500 <udp_bind+0x98>
c00114d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00114da:	85 c0                	test   eax,eax
c00114dc:	74 22                	je     c0011500 <udp_bind+0x98>
c00114de:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00114e3:	74 1b                	je     c0011500 <udp_bind+0x98>
c00114e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00114e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00114eb:	85 c0                	test   eax,eax
c00114ed:	74 11                	je     c0011500 <udp_bind+0x98>
c00114ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114f3:	8b 10                	mov    edx,DWORD PTR [eax]
c00114f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00114f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00114fb:	39 c2                	cmp    edx,eax
c00114fd:	75 09                	jne    c0011508 <udp_bind+0xa0>
c00114ff:	90                   	nop
c0011500:	b0 f8                	mov    al,0xf8
c0011502:	e9 dd 00 00 00       	jmp    c00115e4 <udp_bind+0x17c>
c0011507:	90                   	nop
c0011508:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001150c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001150f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011513:	90                   	nop
c0011514:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011519:	0f 85 69 ff ff ff    	jne    c0011488 <udp_bind+0x20>
c001151f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011524:	74 0a                	je     c0011530 <udp_bind+0xc8>
c0011526:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001152a:	8b 00                	mov    eax,DWORD PTR [eax]
c001152c:	eb 0a                	jmp    c0011538 <udp_bind+0xd0>
c001152e:	66 90                	xchg   ax,ax
c0011530:	b8 00 00 00 00       	mov    eax,0x0
c0011535:	8d 76 00             	lea    esi,[esi+0x0]
c0011538:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001153c:	89 02                	mov    DWORD PTR [edx],eax
c001153e:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011543:	85 c0                	test   eax,eax
c0011545:	75 6d                	jne    c00115b4 <udp_bind+0x14c>
c0011547:	66 c7 44 24 0c 00 c0 	mov    WORD PTR [esp+0xc],0xc000
c001154e:	a1 8c 78 03 c0       	mov    eax,ds:0xc003788c
c0011553:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011557:	eb 3b                	jmp    c0011594 <udp_bind+0x12c>
c0011559:	8d 76 00             	lea    esi,[esi+0x0]
c001155c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011560:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011564:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0011569:	0f b7 c0             	movzx  eax,ax
c001156c:	39 c2                	cmp    edx,eax
c001156e:	75 18                	jne    c0011588 <udp_bind+0x120>
c0011570:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011574:	83 c0 01             	add    eax,0x1
c0011577:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001157c:	a1 8c 78 03 c0       	mov    eax,ds:0xc003788c
c0011581:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011585:	eb 0d                	jmp    c0011594 <udp_bind+0x12c>
c0011587:	90                   	nop
c0011588:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001158c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001158f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011593:	90                   	nop
c0011594:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011599:	74 0d                	je     c00115a8 <udp_bind+0x140>
c001159b:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00115a0:	3d ff ff 00 00       	cmp    eax,0xffff
c00115a5:	75 b5                	jne    c001155c <udp_bind+0xf4>
c00115a7:	90                   	nop
c00115a8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00115ad:	74 05                	je     c00115b4 <udp_bind+0x14c>
c00115af:	b0 f8                	mov    al,0xf8
c00115b1:	eb 31                	jmp    c00115e4 <udp_bind+0x17c>
c00115b3:	90                   	nop
c00115b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00115bc:	66 89 50 12          	mov    WORD PTR [eax+0x12],dx
c00115c0:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00115c5:	85 c0                	test   eax,eax
c00115c7:	75 17                	jne    c00115e0 <udp_bind+0x178>
c00115c9:	8b 15 8c 78 03 c0    	mov    edx,DWORD PTR ds:0xc003788c
c00115cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115d3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00115d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115da:	a3 8c 78 03 c0       	mov    ds:0xc003788c,eax
c00115df:	90                   	nop
c00115e0:	b0 00                	mov    al,0x0
c00115e2:	66 90                	xchg   ax,ax
c00115e4:	83 c4 2c             	add    esp,0x2c
c00115e7:	c3                   	ret    

c00115e8 <udp_sendto_if>:
c00115e8:	83 ec 2c             	sub    esp,0x2c
c00115eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00115ef:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00115f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115f8:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00115fc:	0f b7 c0             	movzx  eax,ax
c00115ff:	85 c0                	test   eax,eax
c0011601:	75 39                	jne    c001163c <udp_sendto_if+0x54>
c0011603:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011607:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c001160b:	0f b7 d0             	movzx  edx,ax
c001160e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011612:	83 ec 04             	sub    esp,0x4
c0011615:	52                   	push   edx
c0011616:	50                   	push   eax
c0011617:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001161b:	e8 48 fe ff ff       	call   c0011468 <udp_bind>
c0011620:	83 c4 10             	add    esp,0x10
c0011623:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0011627:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c001162c:	85 c0                	test   eax,eax
c001162e:	74 0c                	je     c001163c <udp_sendto_if+0x54>
c0011630:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0011634:	e9 2f 02 00 00       	jmp    c0011868 <udp_sendto_if+0x280>
c0011639:	8d 76 00             	lea    esi,[esi+0x0]
c001163c:	83 ec 08             	sub    esp,0x8
c001163f:	6a 08                	push   0x8
c0011641:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011645:	e8 2a 6d ff ff       	call   c0008374 <pbuf_header>
c001164a:	83 c4 10             	add    esp,0x10
c001164d:	0f b6 c0             	movzx  eax,al
c0011650:	85 c0                	test   eax,eax
c0011652:	74 48                	je     c001169c <udp_sendto_if+0xb4>
c0011654:	83 ec 04             	sub    esp,0x4
c0011657:	6a 00                	push   0x0
c0011659:	6a 08                	push   0x8
c001165b:	6a 01                	push   0x1
c001165d:	e8 8e 70 ff ff       	call   c00086f0 <pbuf_alloc>
c0011662:	83 c4 10             	add    esp,0x10
c0011665:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011669:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001166e:	75 08                	jne    c0011678 <udp_sendto_if+0x90>
c0011670:	b0 ff                	mov    al,0xff
c0011672:	e9 f1 01 00 00       	jmp    c0011868 <udp_sendto_if+0x280>
c0011677:	90                   	nop
c0011678:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001167c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001167f:	0f b7 c0             	movzx  eax,ax
c0011682:	85 c0                	test   eax,eax
c0011684:	74 1e                	je     c00116a4 <udp_sendto_if+0xbc>
c0011686:	83 ec 08             	sub    esp,0x8
c0011689:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001168d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011691:	e8 a2 77 ff ff       	call   c0008e38 <pbuf_chain>
c0011696:	83 c4 10             	add    esp,0x10
c0011699:	eb 09                	jmp    c00116a4 <udp_sendto_if+0xbc>
c001169b:	90                   	nop
c001169c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00116a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00116a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00116a8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00116ac:	0f b7 c0             	movzx  eax,ax
c00116af:	83 f8 07             	cmp    eax,0x7
c00116b2:	77 18                	ja     c00116cc <udp_sendto_if+0xe4>
c00116b4:	83 ec 08             	sub    esp,0x8
c00116b7:	68 e0 12 03 c0       	push   0xc00312e0
c00116bc:	68 46 03 03 c0       	push   0xc0030346
c00116c1:	e8 86 e7 00 00       	call   c001fe4c <CPrintf>
c00116c6:	83 c4 10             	add    esp,0x10
c00116c9:	8d 76 00             	lea    esi,[esi+0x0]
c00116cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00116d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00116d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116db:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00116df:	0f b7 c0             	movzx  eax,ax
c00116e2:	83 ec 0c             	sub    esp,0xc
c00116e5:	50                   	push   eax
c00116e6:	e8 31 f5 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00116eb:	83 c4 10             	add    esp,0x10
c00116ee:	89 c2                	mov    edx,eax
c00116f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116f4:	66 89 10             	mov    WORD PTR [eax],dx
c00116f7:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00116fc:	83 ec 0c             	sub    esp,0xc
c00116ff:	50                   	push   eax
c0011700:	e8 17 f5 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0011705:	83 c4 10             	add    esp,0x10
c0011708:	89 c2                	mov    edx,eax
c001170a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001170e:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0011712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011716:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c001171c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011720:	85 c0                	test   eax,eax
c0011722:	74 0c                	je     c0011730 <udp_sendto_if+0x148>
c0011724:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011728:	8b 00                	mov    eax,DWORD PTR [eax]
c001172a:	85 c0                	test   eax,eax
c001172c:	75 12                	jne    c0011740 <udp_sendto_if+0x158>
c001172e:	66 90                	xchg   ax,ax
c0011730:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011734:	83 c0 04             	add    eax,0x4
c0011737:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001173b:	eb 47                	jmp    c0011784 <udp_sendto_if+0x19c>
c001173d:	8d 76 00             	lea    esi,[esi+0x0]
c0011740:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011744:	8b 10                	mov    edx,DWORD PTR [eax]
c0011746:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001174a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001174d:	39 c2                	cmp    edx,eax
c001174f:	74 2b                	je     c001177c <udp_sendto_if+0x194>
c0011751:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011755:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0011759:	74 19                	je     c0011774 <udp_sendto_if+0x18c>
c001175b:	83 ec 0c             	sub    esp,0xc
c001175e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011762:	e8 ad 6d ff ff       	call   c0008514 <pbuf_free>
c0011767:	83 c4 10             	add    esp,0x10
c001176a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011772:	66 90                	xchg   ax,ax
c0011774:	b0 fa                	mov    al,0xfa
c0011776:	e9 ed 00 00 00       	jmp    c0011868 <udp_sendto_if+0x280>
c001177b:	90                   	nop
c001177c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011780:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011784:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011788:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001178b:	0f b7 c0             	movzx  eax,ax
c001178e:	83 ec 0c             	sub    esp,0xc
c0011791:	50                   	push   eax
c0011792:	e8 85 f4 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0011797:	83 c4 10             	add    esp,0x10
c001179a:	89 c2                	mov    edx,eax
c001179c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117a0:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00117a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00117a8:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00117ab:	0f b6 c0             	movzx  eax,al
c00117ae:	83 e0 01             	and    eax,0x1
c00117b1:	75 49                	jne    c00117fc <udp_sendto_if+0x214>
c00117b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00117b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00117ba:	0f b7 c0             	movzx  eax,ax
c00117bd:	83 ec 0c             	sub    esp,0xc
c00117c0:	50                   	push   eax
c00117c1:	6a 11                	push   0x11
c00117c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00117c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00117cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00117cf:	e8 fc 1b 00 00       	call   c00133d0 <inet_chksum_pseudo>
c00117d4:	83 c4 20             	add    esp,0x20
c00117d7:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00117dc:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c00117e1:	85 c0                	test   eax,eax
c00117e3:	75 07                	jne    c00117ec <udp_sendto_if+0x204>
c00117e5:	66 c7 44 24 16 ff ff 	mov    WORD PTR [esp+0x16],0xffff
c00117ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117f0:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00117f5:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c00117f9:	8d 76 00             	lea    esi,[esi+0x0]
c00117fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011800:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0011803:	0f b6 d0             	movzx  edx,al
c0011806:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001180a:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c001180d:	0f b6 c0             	movzx  eax,al
c0011810:	83 ec 04             	sub    esp,0x4
c0011813:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011817:	6a 11                	push   0x11
c0011819:	52                   	push   edx
c001181a:	50                   	push   eax
c001181b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001181f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011823:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011827:	e8 08 25 00 00       	call   c0013d34 <ip_output_if>
c001182c:	83 c4 20             	add    esp,0x20
c001182f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0011833:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011837:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001183b:	74 17                	je     c0011854 <udp_sendto_if+0x26c>
c001183d:	83 ec 0c             	sub    esp,0xc
c0011840:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011844:	e8 cb 6c ff ff       	call   c0008514 <pbuf_free>
c0011849:	83 c4 10             	add    esp,0x10
c001184c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011854:	66 a1 98 77 03 c0    	mov    ax,ds:0xc0037798
c001185a:	83 c0 01             	add    eax,0x1
c001185d:	66 a3 98 77 03 c0    	mov    ds:0xc0037798,ax
c0011863:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0011867:	90                   	nop
c0011868:	83 c4 2c             	add    esp,0x2c
c001186b:	c3                   	ret    

c001186c <udp_sendto>:
c001186c:	83 ec 2c             	sub    esp,0x2c
c001186f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011873:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011878:	83 ec 0c             	sub    esp,0xc
c001187b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001187f:	e8 d8 1f 00 00       	call   c001385c <ip_route>
c0011884:	83 c4 10             	add    esp,0x10
c0011887:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001188b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011890:	75 16                	jne    c00118a8 <udp_sendto+0x3c>
c0011892:	66 a1 a6 77 03 c0    	mov    ax,ds:0xc00377a6
c0011898:	83 c0 01             	add    eax,0x1
c001189b:	66 a3 a6 77 03 c0    	mov    ds:0xc00377a6,ax
c00118a1:	b0 fc                	mov    al,0xfc
c00118a3:	eb 27                	jmp    c00118cc <udp_sendto+0x60>
c00118a5:	8d 76 00             	lea    esi,[esi+0x0]
c00118a8:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00118ad:	83 ec 0c             	sub    esp,0xc
c00118b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00118b4:	50                   	push   eax
c00118b5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00118b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00118bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00118c1:	e8 22 fd ff ff       	call   c00115e8 <udp_sendto_if>
c00118c6:	83 c4 20             	add    esp,0x20
c00118c9:	8d 76 00             	lea    esi,[esi+0x0]
c00118cc:	83 c4 2c             	add    esp,0x2c
c00118cf:	c3                   	ret    

c00118d0 <udp_send>:
c00118d0:	83 ec 0c             	sub    esp,0xc
c00118d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118d7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00118da:	0f b7 c0             	movzx  eax,ax
c00118dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00118e1:	83 c2 04             	add    edx,0x4
c00118e4:	50                   	push   eax
c00118e5:	52                   	push   edx
c00118e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118ee:	e8 79 ff ff ff       	call   c001186c <udp_sendto>
c00118f3:	83 c4 10             	add    esp,0x10
c00118f6:	83 c4 0c             	add    esp,0xc
c00118f9:	c3                   	ret    
c00118fa:	66 90                	xchg   ax,ax

c00118fc <udp_connect>:
c00118fc:	83 ec 2c             	sub    esp,0x2c
c00118ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011903:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011908:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001190c:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011910:	0f b7 c0             	movzx  eax,ax
c0011913:	85 c0                	test   eax,eax
c0011915:	75 39                	jne    c0011950 <udp_connect+0x54>
c0011917:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001191b:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c001191f:	0f b7 d0             	movzx  edx,ax
c0011922:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011926:	83 ec 04             	sub    esp,0x4
c0011929:	52                   	push   edx
c001192a:	50                   	push   eax
c001192b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001192f:	e8 34 fb ff ff       	call   c0011468 <udp_bind>
c0011934:	83 c4 10             	add    esp,0x10
c0011937:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001193b:	0f be 44 24 1b       	movsx  eax,BYTE PTR [esp+0x1b]
c0011940:	85 c0                	test   eax,eax
c0011942:	74 0c                	je     c0011950 <udp_connect+0x54>
c0011944:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0011948:	e9 8b 00 00 00       	jmp    c00119d8 <udp_connect+0xdc>
c001194d:	8d 76 00             	lea    esi,[esi+0x0]
c0011950:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011955:	74 09                	je     c0011960 <udp_connect+0x64>
c0011957:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001195b:	8b 00                	mov    eax,DWORD PTR [eax]
c001195d:	eb 09                	jmp    c0011968 <udp_connect+0x6c>
c001195f:	90                   	nop
c0011960:	b8 00 00 00 00       	mov    eax,0x0
c0011965:	8d 76 00             	lea    esi,[esi+0x0]
c0011968:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001196c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001196f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011973:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011977:	66 89 50 14          	mov    WORD PTR [eax+0x14],dx
c001197b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001197f:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0011982:	83 c8 04             	or     eax,0x4
c0011985:	88 c2                	mov    dl,al
c0011987:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001198b:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c001198e:	a1 8c 78 03 c0       	mov    eax,ds:0xc003788c
c0011993:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011997:	eb 1f                	jmp    c00119b8 <udp_connect+0xbc>
c0011999:	8d 76 00             	lea    esi,[esi+0x0]
c001199c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119a0:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00119a4:	75 06                	jne    c00119ac <udp_connect+0xb0>
c00119a6:	b0 00                	mov    al,0x0
c00119a8:	eb 2e                	jmp    c00119d8 <udp_connect+0xdc>
c00119aa:	66 90                	xchg   ax,ax
c00119ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00119b0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00119b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00119b7:	90                   	nop
c00119b8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00119bd:	75 dd                	jne    c001199c <udp_connect+0xa0>
c00119bf:	8b 15 8c 78 03 c0    	mov    edx,DWORD PTR ds:0xc003788c
c00119c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119c9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00119cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119d0:	a3 8c 78 03 c0       	mov    ds:0xc003788c,eax
c00119d5:	b0 00                	mov    al,0x0
c00119d7:	90                   	nop
c00119d8:	83 c4 2c             	add    esp,0x2c
c00119db:	c3                   	ret    

c00119dc <udp_disconnect>:
c00119dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119e0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00119e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119eb:	66 c7 40 14 00 00    	mov    WORD PTR [eax+0x14],0x0
c00119f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119f5:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00119f8:	83 e0 fb             	and    eax,0xfffffffb
c00119fb:	88 c2                	mov    dl,al
c00119fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a01:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0011a04:	90                   	nop
c0011a05:	c3                   	ret    
c0011a06:	66 90                	xchg   ax,ax

c0011a08 <udp_recv>:
c0011a08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011a10:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0011a13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011a1b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011a1e:	90                   	nop
c0011a1f:	c3                   	ret    

c0011a20 <udp_remove>:
c0011a20:	83 ec 1c             	sub    esp,0x1c
c0011a23:	a1 8c 78 03 c0       	mov    eax,ds:0xc003788c
c0011a28:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0011a2c:	75 12                	jne    c0011a40 <udp_remove+0x20>
c0011a2e:	a1 8c 78 03 c0       	mov    eax,ds:0xc003788c
c0011a33:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011a36:	a3 8c 78 03 c0       	mov    ds:0xc003788c,eax
c0011a3b:	eb 4b                	jmp    c0011a88 <udp_remove+0x68>
c0011a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0011a40:	a1 8c 78 03 c0       	mov    eax,ds:0xc003788c
c0011a45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a49:	eb 35                	jmp    c0011a80 <udp_remove+0x60>
c0011a4b:	90                   	nop
c0011a4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a50:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011a53:	85 c0                	test   eax,eax
c0011a55:	74 1d                	je     c0011a74 <udp_remove+0x54>
c0011a57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a5b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011a5e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0011a62:	75 10                	jne    c0011a74 <udp_remove+0x54>
c0011a64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011a68:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011a6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a6f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011a72:	66 90                	xchg   ax,ax
c0011a74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a78:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011a7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a7f:	90                   	nop
c0011a80:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0011a85:	75 c5                	jne    c0011a4c <udp_remove+0x2c>
c0011a87:	90                   	nop
c0011a88:	83 ec 08             	sub    esp,0x8
c0011a8b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011a8f:	6a 01                	push   0x1
c0011a91:	e8 be 61 ff ff       	call   c0007c54 <memp_free>
c0011a96:	83 c4 10             	add    esp,0x10
c0011a99:	90                   	nop
c0011a9a:	83 c4 1c             	add    esp,0x1c
c0011a9d:	c3                   	ret    
c0011a9e:	66 90                	xchg   ax,ax

c0011aa0 <udp_new>:
c0011aa0:	83 ec 1c             	sub    esp,0x1c
c0011aa3:	83 ec 0c             	sub    esp,0xc
c0011aa6:	6a 01                	push   0x1
c0011aa8:	e8 7b 60 ff ff       	call   c0007b28 <memp_malloc>
c0011aad:	83 c4 10             	add    esp,0x10
c0011ab0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ab4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0011ab9:	74 1d                	je     c0011ad8 <udp_new+0x38>
c0011abb:	83 ec 04             	sub    esp,0x4
c0011abe:	6a 20                	push   0x20
c0011ac0:	6a 00                	push   0x0
c0011ac2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011ac6:	e8 25 ea fe ff       	call   c00004f0 <memset>
c0011acb:	83 c4 10             	add    esp,0x10
c0011ace:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ad2:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c0011ad6:	66 90                	xchg   ax,ax
c0011ad8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011adc:	83 c4 1c             	add    esp,0x1c
c0011adf:	c3                   	ret    

c0011ae0 <free_entry>:
c0011ae0:	83 ec 0c             	sub    esp,0xc
c0011ae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ae7:	c1 e0 04             	shl    eax,0x4
c0011aea:	05 00 b9 03 c0       	add    eax,0xc003b900
c0011aef:	8b 00                	mov    eax,DWORD PTR [eax]
c0011af1:	85 c0                	test   eax,eax
c0011af3:	74 2f                	je     c0011b24 <free_entry+0x44>
c0011af5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011af9:	c1 e0 04             	shl    eax,0x4
c0011afc:	05 00 b9 03 c0       	add    eax,0xc003b900
c0011b01:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b03:	83 ec 0c             	sub    esp,0xc
c0011b06:	50                   	push   eax
c0011b07:	e8 08 6a ff ff       	call   c0008514 <pbuf_free>
c0011b0c:	83 c4 10             	add    esp,0x10
c0011b0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b13:	c1 e0 04             	shl    eax,0x4
c0011b16:	05 00 b9 03 c0       	add    eax,0xc003b900
c0011b1b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011b21:	8d 76 00             	lea    esi,[esi+0x0]
c0011b24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b28:	c1 e0 04             	shl    eax,0x4
c0011b2b:	05 0e b9 03 c0       	add    eax,0xc003b90e
c0011b30:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011b33:	90                   	nop
c0011b34:	83 c4 0c             	add    esp,0xc
c0011b37:	c3                   	ret    

c0011b38 <etharp_tmr>:
c0011b38:	83 ec 1c             	sub    esp,0x1c
c0011b3b:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011b40:	e9 a7 00 00 00       	jmp    c0011bec <etharp_tmr+0xb4>
c0011b45:	8d 76 00             	lea    esi,[esi+0x0]
c0011b48:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011b4d:	c1 e0 04             	shl    eax,0x4
c0011b50:	05 0e b9 03 c0       	add    eax,0xc003b90e
c0011b55:	8a 00                	mov    al,BYTE PTR [eax]
c0011b57:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0011b5b:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0011b60:	85 c0                	test   eax,eax
c0011b62:	74 7c                	je     c0011be0 <etharp_tmr+0xa8>
c0011b64:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011b69:	89 c2                	mov    edx,eax
c0011b6b:	c1 e2 04             	shl    edx,0x4
c0011b6e:	81 c2 0f b9 03 c0    	add    edx,0xc003b90f
c0011b74:	8a 12                	mov    dl,BYTE PTR [edx]
c0011b76:	83 c2 01             	add    edx,0x1
c0011b79:	c1 e0 04             	shl    eax,0x4
c0011b7c:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011b81:	88 10                	mov    BYTE PTR [eax],dl
c0011b83:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011b88:	c1 e0 04             	shl    eax,0x4
c0011b8b:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011b90:	8a 00                	mov    al,BYTE PTR [eax]
c0011b92:	0f b6 c0             	movzx  eax,al
c0011b95:	3d ef 00 00 00       	cmp    eax,0xef
c0011b9a:	77 30                	ja     c0011bcc <etharp_tmr+0x94>
c0011b9c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011ba1:	c1 e0 04             	shl    eax,0x4
c0011ba4:	05 0e b9 03 c0       	add    eax,0xc003b90e
c0011ba9:	8a 00                	mov    al,BYTE PTR [eax]
c0011bab:	0f b6 c0             	movzx  eax,al
c0011bae:	83 f8 01             	cmp    eax,0x1
c0011bb1:	75 2d                	jne    c0011be0 <etharp_tmr+0xa8>
c0011bb3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011bb8:	c1 e0 04             	shl    eax,0x4
c0011bbb:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011bc0:	8a 00                	mov    al,BYTE PTR [eax]
c0011bc2:	0f b6 c0             	movzx  eax,al
c0011bc5:	83 f8 01             	cmp    eax,0x1
c0011bc8:	76 16                	jbe    c0011be0 <etharp_tmr+0xa8>
c0011bca:	66 90                	xchg   ax,ax
c0011bcc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011bd1:	83 ec 0c             	sub    esp,0xc
c0011bd4:	50                   	push   eax
c0011bd5:	e8 06 ff ff ff       	call   c0011ae0 <free_entry>
c0011bda:	83 c4 10             	add    esp,0x10
c0011bdd:	8d 76 00             	lea    esi,[esi+0x0]
c0011be0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011be4:	83 c0 01             	add    eax,0x1
c0011be7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011beb:	90                   	nop
c0011bec:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011bf1:	83 f8 09             	cmp    eax,0x9
c0011bf4:	0f 86 4e ff ff ff    	jbe    c0011b48 <etharp_tmr+0x10>
c0011bfa:	90                   	nop
c0011bfb:	83 c4 1c             	add    esp,0x1c
c0011bfe:	c3                   	ret    
c0011bff:	90                   	nop

c0011c00 <find_entry>:
c0011c00:	83 ec 2c             	sub    esp,0x2c
c0011c03:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c07:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011c0b:	c6 44 24 1f 0a       	mov    BYTE PTR [esp+0x1f],0xa
c0011c10:	c6 44 24 1e 0a       	mov    BYTE PTR [esp+0x1e],0xa
c0011c15:	c6 44 24 1d 0a       	mov    BYTE PTR [esp+0x1d],0xa
c0011c1a:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0011c1f:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c0011c24:	c6 44 24 1a 00       	mov    BYTE PTR [esp+0x1a],0x0
c0011c29:	c6 44 24 19 0a       	mov    BYTE PTR [esp+0x19],0xa
c0011c2e:	c6 44 24 18 00       	mov    BYTE PTR [esp+0x18],0x0
c0011c33:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0011c38:	e9 7f 01 00 00       	jmp    c0011dbc <find_entry+0x1bc>
c0011c3d:	8d 76 00             	lea    esi,[esi+0x0]
c0011c40:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c45:	c1 e0 04             	shl    eax,0x4
c0011c48:	05 0e b9 03 c0       	add    eax,0xc003b90e
c0011c4d:	8a 00                	mov    al,BYTE PTR [eax]
c0011c4f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0011c53:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011c58:	83 f8 0a             	cmp    eax,0xa
c0011c5b:	75 17                	jne    c0011c74 <find_entry+0x74>
c0011c5d:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011c62:	85 c0                	test   eax,eax
c0011c64:	75 0e                	jne    c0011c74 <find_entry+0x74>
c0011c66:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011c6a:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0011c6e:	e9 3d 01 00 00       	jmp    c0011db0 <find_entry+0x1b0>
c0011c73:	90                   	nop
c0011c74:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011c79:	85 c0                	test   eax,eax
c0011c7b:	0f 84 2f 01 00 00    	je     c0011db0 <find_entry+0x1b0>
c0011c81:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011c86:	83 f8 01             	cmp    eax,0x1
c0011c89:	74 21                	je     c0011cac <find_entry+0xac>
c0011c8b:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011c90:	83 f8 02             	cmp    eax,0x2
c0011c93:	74 17                	je     c0011cac <find_entry+0xac>
c0011c95:	83 ec 08             	sub    esp,0x8
c0011c98:	68 10 13 03 c0       	push   0xc0031310
c0011c9d:	68 46 03 03 c0       	push   0xc0030346
c0011ca2:	e8 a5 e1 00 00       	call   c001fe4c <CPrintf>
c0011ca7:	83 c4 10             	add    esp,0x10
c0011caa:	66 90                	xchg   ax,ax
c0011cac:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011cb1:	74 25                	je     c0011cd8 <find_entry+0xd8>
c0011cb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cb7:	8b 10                	mov    edx,DWORD PTR [eax]
c0011cb9:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011cbe:	c1 e0 04             	shl    eax,0x4
c0011cc1:	05 04 b9 03 c0       	add    eax,0xc003b904
c0011cc6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cc8:	39 c2                	cmp    edx,eax
c0011cca:	75 0c                	jne    c0011cd8 <find_entry+0xd8>
c0011ccc:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011cd0:	e9 53 02 00 00       	jmp    c0011f28 <find_entry+0x328>
c0011cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0011cd8:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011cdd:	83 f8 01             	cmp    eax,0x1
c0011ce0:	0f 85 8a 00 00 00    	jne    c0011d70 <find_entry+0x170>
c0011ce6:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ceb:	c1 e0 04             	shl    eax,0x4
c0011cee:	05 00 b9 03 c0       	add    eax,0xc003b900
c0011cf3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cf5:	85 c0                	test   eax,eax
c0011cf7:	74 3f                	je     c0011d38 <find_entry+0x138>
c0011cf9:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011cfe:	c1 e0 04             	shl    eax,0x4
c0011d01:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011d06:	8a 00                	mov    al,BYTE PTR [eax]
c0011d08:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0011d0d:	0f b6 c0             	movzx  eax,al
c0011d10:	39 c2                	cmp    edx,eax
c0011d12:	0f 87 98 00 00 00    	ja     c0011db0 <find_entry+0x1b0>
c0011d18:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011d1c:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0011d20:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011d25:	c1 e0 04             	shl    eax,0x4
c0011d28:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011d2d:	8a 00                	mov    al,BYTE PTR [eax]
c0011d2f:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0011d33:	eb 7b                	jmp    c0011db0 <find_entry+0x1b0>
c0011d35:	8d 76 00             	lea    esi,[esi+0x0]
c0011d38:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011d3d:	c1 e0 04             	shl    eax,0x4
c0011d40:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011d45:	8a 00                	mov    al,BYTE PTR [eax]
c0011d47:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011d4c:	0f b6 c0             	movzx  eax,al
c0011d4f:	39 c2                	cmp    edx,eax
c0011d51:	77 5d                	ja     c0011db0 <find_entry+0x1b0>
c0011d53:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011d57:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011d5b:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011d60:	c1 e0 04             	shl    eax,0x4
c0011d63:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011d68:	8a 00                	mov    al,BYTE PTR [eax]
c0011d6a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0011d6e:	eb 40                	jmp    c0011db0 <find_entry+0x1b0>
c0011d70:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011d75:	83 f8 02             	cmp    eax,0x2
c0011d78:	75 36                	jne    c0011db0 <find_entry+0x1b0>
c0011d7a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011d7f:	c1 e0 04             	shl    eax,0x4
c0011d82:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011d87:	8a 00                	mov    al,BYTE PTR [eax]
c0011d89:	0f b6 54 24 1a       	movzx  edx,BYTE PTR [esp+0x1a]
c0011d8e:	0f b6 c0             	movzx  eax,al
c0011d91:	39 c2                	cmp    edx,eax
c0011d93:	77 1b                	ja     c0011db0 <find_entry+0x1b0>
c0011d95:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011d99:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0011d9d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011da2:	c1 e0 04             	shl    eax,0x4
c0011da5:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011daa:	8a 00                	mov    al,BYTE PTR [eax]
c0011dac:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0011db0:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011db4:	83 c0 01             	add    eax,0x1
c0011db7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011dbb:	90                   	nop
c0011dbc:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011dc1:	83 f8 09             	cmp    eax,0x9
c0011dc4:	0f 86 76 fe ff ff    	jbe    c0011c40 <find_entry+0x40>
c0011dca:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011dcf:	83 e0 02             	and    eax,0x2
c0011dd2:	75 14                	jne    c0011de8 <find_entry+0x1e8>
c0011dd4:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011dd9:	83 f8 0a             	cmp    eax,0xa
c0011ddc:	75 12                	jne    c0011df0 <find_entry+0x1f0>
c0011dde:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011de3:	83 e0 01             	and    eax,0x1
c0011de6:	75 08                	jne    c0011df0 <find_entry+0x1f0>
c0011de8:	b0 ff                	mov    al,0xff
c0011dea:	e9 39 01 00 00       	jmp    c0011f28 <find_entry+0x328>
c0011def:	90                   	nop
c0011df0:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011df5:	83 f8 09             	cmp    eax,0x9
c0011df8:	7f 0e                	jg     c0011e08 <find_entry+0x208>
c0011dfa:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0011dfe:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011e02:	e9 a1 00 00 00       	jmp    c0011ea8 <find_entry+0x2a8>
c0011e07:	90                   	nop
c0011e08:	0f be 44 24 1e       	movsx  eax,BYTE PTR [esp+0x1e]
c0011e0d:	83 f8 09             	cmp    eax,0x9
c0011e10:	7f 32                	jg     c0011e44 <find_entry+0x244>
c0011e12:	8a 44 24 1e          	mov    al,BYTE PTR [esp+0x1e]
c0011e16:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011e1a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011e1f:	c1 e0 04             	shl    eax,0x4
c0011e22:	05 00 b9 03 c0       	add    eax,0xc003b900
c0011e27:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e29:	85 c0                	test   eax,eax
c0011e2b:	74 47                	je     c0011e74 <find_entry+0x274>
c0011e2d:	83 ec 08             	sub    esp,0x8
c0011e30:	68 89 14 03 c0       	push   0xc0031489
c0011e35:	68 46 03 03 c0       	push   0xc0030346
c0011e3a:	e8 0d e0 00 00       	call   c001fe4c <CPrintf>
c0011e3f:	83 c4 10             	add    esp,0x10
c0011e42:	eb 30                	jmp    c0011e74 <find_entry+0x274>
c0011e44:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e49:	83 f8 09             	cmp    eax,0x9
c0011e4c:	7f 0a                	jg     c0011e58 <find_entry+0x258>
c0011e4e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011e52:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011e56:	eb 1c                	jmp    c0011e74 <find_entry+0x274>
c0011e58:	0f be 44 24 19       	movsx  eax,BYTE PTR [esp+0x19]
c0011e5d:	83 f8 09             	cmp    eax,0x9
c0011e60:	7f 0a                	jg     c0011e6c <find_entry+0x26c>
c0011e62:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0011e66:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011e6a:	eb 08                	jmp    c0011e74 <find_entry+0x274>
c0011e6c:	b0 ff                	mov    al,0xff
c0011e6e:	e9 b5 00 00 00       	jmp    c0011f28 <find_entry+0x328>
c0011e73:	90                   	nop
c0011e74:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011e79:	83 f8 09             	cmp    eax,0x9
c0011e7c:	76 16                	jbe    c0011e94 <find_entry+0x294>
c0011e7e:	83 ec 08             	sub    esp,0x8
c0011e81:	68 a0 14 03 c0       	push   0xc00314a0
c0011e86:	68 46 03 03 c0       	push   0xc0030346
c0011e8b:	e8 bc df 00 00       	call   c001fe4c <CPrintf>
c0011e90:	83 c4 10             	add    esp,0x10
c0011e93:	90                   	nop
c0011e94:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011e99:	83 ec 0c             	sub    esp,0xc
c0011e9c:	50                   	push   eax
c0011e9d:	e8 3e fc ff ff       	call   c0011ae0 <free_entry>
c0011ea2:	83 c4 10             	add    esp,0x10
c0011ea5:	8d 76 00             	lea    esi,[esi+0x0]
c0011ea8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ead:	83 f8 09             	cmp    eax,0x9
c0011eb0:	76 16                	jbe    c0011ec8 <find_entry+0x2c8>
c0011eb2:	83 ec 08             	sub    esp,0x8
c0011eb5:	68 a0 14 03 c0       	push   0xc00314a0
c0011eba:	68 46 03 03 c0       	push   0xc0030346
c0011ebf:	e8 88 df 00 00       	call   c001fe4c <CPrintf>
c0011ec4:	83 c4 10             	add    esp,0x10
c0011ec7:	90                   	nop
c0011ec8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ecd:	c1 e0 04             	shl    eax,0x4
c0011ed0:	05 0e b9 03 c0       	add    eax,0xc003b90e
c0011ed5:	8a 00                	mov    al,BYTE PTR [eax]
c0011ed7:	0f b6 c0             	movzx  eax,al
c0011eda:	85 c0                	test   eax,eax
c0011edc:	74 16                	je     c0011ef4 <find_entry+0x2f4>
c0011ede:	83 ec 08             	sub    esp,0x8
c0011ee1:	68 50 13 03 c0       	push   0xc0031350
c0011ee6:	68 46 03 03 c0       	push   0xc0030346
c0011eeb:	e8 5c df 00 00       	call   c001fe4c <CPrintf>
c0011ef0:	83 c4 10             	add    esp,0x10
c0011ef3:	90                   	nop
c0011ef4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011ef9:	74 19                	je     c0011f14 <find_entry+0x314>
c0011efb:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c0011f00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f04:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f06:	c1 e2 04             	shl    edx,0x4
c0011f09:	81 c2 04 b9 03 c0    	add    edx,0xc003b904
c0011f0f:	89 02                	mov    DWORD PTR [edx],eax
c0011f11:	8d 76 00             	lea    esi,[esi+0x0]
c0011f14:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011f19:	c1 e0 04             	shl    eax,0x4
c0011f1c:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0011f21:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011f24:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011f28:	83 c4 2c             	add    esp,0x2c
c0011f2b:	c3                   	ret    

c0011f2c <etharp_send_ip>:
c0011f2c:	83 ec 1c             	sub    esp,0x1c
c0011f2f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011f33:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011f36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011f3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f3e:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011f41:	0f b6 c0             	movzx  eax,al
c0011f44:	83 f8 06             	cmp    eax,0x6
c0011f47:	74 17                	je     c0011f60 <etharp_send_ip+0x34>
c0011f49:	83 ec 08             	sub    esp,0x8
c0011f4c:	68 7c 13 03 c0       	push   0xc003137c
c0011f51:	68 46 03 03 c0       	push   0xc0030346
c0011f56:	e8 f1 de 00 00       	call   c001fe4c <CPrintf>
c0011f5b:	83 c4 10             	add    esp,0x10
c0011f5e:	66 90                	xchg   ax,ax
c0011f60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f64:	83 ec 04             	sub    esp,0x4
c0011f67:	6a 06                	push   0x6
c0011f69:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011f6d:	50                   	push   eax
c0011f6e:	e8 07 e4 fe ff       	call   c000037a <memcpy>
c0011f73:	83 c4 10             	add    esp,0x10
c0011f76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f7a:	83 c0 06             	add    eax,0x6
c0011f7d:	83 ec 04             	sub    esp,0x4
c0011f80:	6a 06                	push   0x6
c0011f82:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011f86:	50                   	push   eax
c0011f87:	e8 ee e3 fe ff       	call   c000037a <memcpy>
c0011f8c:	83 c4 10             	add    esp,0x10
c0011f8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f93:	66 c7 40 0c 08 00    	mov    WORD PTR [eax+0xc],0x8
c0011f99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f9d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011fa0:	83 ec 08             	sub    esp,0x8
c0011fa3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011fa7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011fab:	ff d0                	call   eax
c0011fad:	83 c4 10             	add    esp,0x10
c0011fb0:	83 c4 1c             	add    esp,0x1c
c0011fb3:	c3                   	ret    

c0011fb4 <update_arp_entry>:
c0011fb4:	83 ec 2c             	sub    esp,0x2c
c0011fb7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011fbb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011fbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fc3:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011fc6:	0f b6 c0             	movzx  eax,al
c0011fc9:	83 f8 06             	cmp    eax,0x6
c0011fcc:	74 16                	je     c0011fe4 <update_arp_entry+0x30>
c0011fce:	83 ec 08             	sub    esp,0x8
c0011fd1:	68 c0 13 03 c0       	push   0xc00313c0
c0011fd6:	68 46 03 03 c0       	push   0xc0030346
c0011fdb:	e8 6c de 00 00       	call   c001fe4c <CPrintf>
c0011fe0:	83 c4 10             	add    esp,0x10
c0011fe3:	90                   	nop
c0011fe4:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011fe9:	74 39                	je     c0012024 <update_arp_entry+0x70>
c0011feb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011fef:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ff1:	85 c0                	test   eax,eax
c0011ff3:	74 2f                	je     c0012024 <update_arp_entry+0x70>
c0011ff5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ff9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ffb:	83 ec 08             	sub    esp,0x8
c0011ffe:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012002:	50                   	push   eax
c0012003:	e8 b0 20 00 00       	call   c00140b8 <ip4_addr_isbroadcast>
c0012008:	83 c4 10             	add    esp,0x10
c001200b:	0f b6 c0             	movzx  eax,al
c001200e:	85 c0                	test   eax,eax
c0012010:	75 12                	jne    c0012024 <update_arp_entry+0x70>
c0012012:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012016:	8b 00                	mov    eax,DWORD PTR [eax]
c0012018:	25 f0 00 00 00       	and    eax,0xf0
c001201d:	3d e0 00 00 00       	cmp    eax,0xe0
c0012022:	75 08                	jne    c001202c <update_arp_entry+0x78>
c0012024:	b0 f2                	mov    al,0xf2
c0012026:	e9 d9 00 00 00       	jmp    c0012104 <update_arp_entry+0x150>
c001202b:	90                   	nop
c001202c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0012031:	83 ec 08             	sub    esp,0x8
c0012034:	50                   	push   eax
c0012035:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012039:	e8 c2 fb ff ff       	call   c0011c00 <find_entry>
c001203e:	83 c4 10             	add    esp,0x10
c0012041:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012045:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c001204a:	85 c0                	test   eax,eax
c001204c:	79 0a                	jns    c0012058 <update_arp_entry+0xa4>
c001204e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012052:	e9 ad 00 00 00       	jmp    c0012104 <update_arp_entry+0x150>
c0012057:	90                   	nop
c0012058:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c001205d:	c1 e0 04             	shl    eax,0x4
c0012060:	05 0e b9 03 c0       	add    eax,0xc003b90e
c0012065:	c6 00 02             	mov    BYTE PTR [eax],0x2
c0012068:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c001206d:	c1 e0 04             	shl    eax,0x4
c0012070:	05 00 b9 03 c0       	add    eax,0xc003b900
c0012075:	83 c0 08             	add    eax,0x8
c0012078:	83 ec 04             	sub    esp,0x4
c001207b:	6a 06                	push   0x6
c001207d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012081:	50                   	push   eax
c0012082:	e8 f3 e2 fe ff       	call   c000037a <memcpy>
c0012087:	83 c4 10             	add    esp,0x10
c001208a:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c001208f:	c1 e0 04             	shl    eax,0x4
c0012092:	05 0f b9 03 c0       	add    eax,0xc003b90f
c0012097:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001209a:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c001209f:	c1 e0 04             	shl    eax,0x4
c00120a2:	05 00 b9 03 c0       	add    eax,0xc003b900
c00120a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00120a9:	85 c0                	test   eax,eax
c00120ab:	74 53                	je     c0012100 <update_arp_entry+0x14c>
c00120ad:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c00120b2:	c1 e0 04             	shl    eax,0x4
c00120b5:	05 00 b9 03 c0       	add    eax,0xc003b900
c00120ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00120bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00120c0:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c00120c5:	c1 e0 04             	shl    eax,0x4
c00120c8:	05 00 b9 03 c0       	add    eax,0xc003b900
c00120cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00120d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120d7:	83 c0 23             	add    eax,0x23
c00120da:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00120de:	50                   	push   eax
c00120df:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00120e3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120e7:	e8 40 fe ff ff       	call   c0011f2c <etharp_send_ip>
c00120ec:	83 c4 10             	add    esp,0x10
c00120ef:	83 ec 0c             	sub    esp,0xc
c00120f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00120f6:	e8 19 64 ff ff       	call   c0008514 <pbuf_free>
c00120fb:	83 c4 10             	add    esp,0x10
c00120fe:	66 90                	xchg   ax,ax
c0012100:	b0 00                	mov    al,0x0
c0012102:	66 90                	xchg   ax,ax
c0012104:	83 c4 2c             	add    esp,0x2c
c0012107:	c3                   	ret    

c0012108 <etharp_find_addr>:
c0012108:	83 ec 1c             	sub    esp,0x1c
c001210b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0012110:	74 0a                	je     c001211c <etharp_find_addr+0x14>
c0012112:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0012117:	75 1b                	jne    c0012134 <etharp_find_addr+0x2c>
c0012119:	8d 76 00             	lea    esi,[esi+0x0]
c001211c:	83 ec 08             	sub    esp,0x8
c001211f:	68 e8 13 03 c0       	push   0xc00313e8
c0012124:	68 46 03 03 c0       	push   0xc0030346
c0012129:	e8 1e dd 00 00       	call   c001fe4c <CPrintf>
c001212e:	83 c4 10             	add    esp,0x10
c0012131:	8d 76 00             	lea    esi,[esi+0x0]
c0012134:	83 ec 08             	sub    esp,0x8
c0012137:	6a 02                	push   0x2
c0012139:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001213d:	e8 be fa ff ff       	call   c0011c00 <find_entry>
c0012142:	83 c4 10             	add    esp,0x10
c0012145:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012149:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001214e:	85 c0                	test   eax,eax
c0012150:	78 4a                	js     c001219c <etharp_find_addr+0x94>
c0012152:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012157:	c1 e0 04             	shl    eax,0x4
c001215a:	05 0e b9 03 c0       	add    eax,0xc003b90e
c001215f:	8a 00                	mov    al,BYTE PTR [eax]
c0012161:	0f b6 c0             	movzx  eax,al
c0012164:	83 f8 02             	cmp    eax,0x2
c0012167:	75 33                	jne    c001219c <etharp_find_addr+0x94>
c0012169:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001216e:	c1 e0 04             	shl    eax,0x4
c0012171:	05 00 b9 03 c0       	add    eax,0xc003b900
c0012176:	8d 50 08             	lea    edx,[eax+0x8]
c0012179:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001217d:	89 10                	mov    DWORD PTR [eax],edx
c001217f:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012184:	c1 e0 04             	shl    eax,0x4
c0012187:	05 00 b9 03 c0       	add    eax,0xc003b900
c001218c:	8d 50 04             	lea    edx,[eax+0x4]
c001218f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012193:	89 10                	mov    DWORD PTR [eax],edx
c0012195:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012199:	eb 05                	jmp    c00121a0 <etharp_find_addr+0x98>
c001219b:	90                   	nop
c001219c:	b0 ff                	mov    al,0xff
c001219e:	66 90                	xchg   ax,ax
c00121a0:	83 c4 1c             	add    esp,0x1c
c00121a3:	c3                   	ret    

c00121a4 <etharp_arp_input>:
c00121a4:	83 ec 2c             	sub    esp,0x2c
c00121a7:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00121ac:	75 1a                	jne    c00121c8 <etharp_arp_input+0x24>
c00121ae:	83 ec 08             	sub    esp,0x8
c00121b1:	68 b3 14 03 c0       	push   0xc00314b3
c00121b6:	68 46 03 03 c0       	push   0xc0030346
c00121bb:	e8 8c dc 00 00       	call   c001fe4c <CPrintf>
c00121c0:	83 c4 10             	add    esp,0x10
c00121c3:	e9 d4 02 00 00       	jmp    c001249c <etharp_arp_input+0x2f8>
c00121c8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00121cc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00121d0:	0f b7 c0             	movzx  eax,ax
c00121d3:	83 f8 29             	cmp    eax,0x29
c00121d6:	77 34                	ja     c001220c <etharp_arp_input+0x68>
c00121d8:	66 a1 42 77 03 c0    	mov    ax,ds:0xc0037742
c00121de:	83 c0 01             	add    eax,0x1
c00121e1:	66 a3 42 77 03 c0    	mov    ds:0xc0037742,ax
c00121e7:	66 a1 3e 77 03 c0    	mov    ax,ds:0xc003773e
c00121ed:	83 c0 01             	add    eax,0x1
c00121f0:	66 a3 3e 77 03 c0    	mov    ds:0xc003773e,ax
c00121f6:	83 ec 0c             	sub    esp,0xc
c00121f9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00121fd:	e8 12 63 ff ff       	call   c0008514 <pbuf_free>
c0012202:	83 c4 10             	add    esp,0x10
c0012205:	e9 92 02 00 00       	jmp    c001249c <etharp_arp_input+0x2f8>
c001220a:	66 90                	xchg   ax,ax
c001220c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012210:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012213:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012217:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001221b:	83 c0 0e             	add    eax,0xe
c001221e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012222:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012226:	66 8b 00             	mov    ax,WORD PTR [eax]
c0012229:	0f b7 c0             	movzx  eax,ax
c001222c:	3d 00 01 00 00       	cmp    eax,0x100
c0012231:	75 31                	jne    c0012264 <etharp_arp_input+0xc0>
c0012233:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012237:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c001223a:	0f b6 c0             	movzx  eax,al
c001223d:	83 f8 06             	cmp    eax,0x6
c0012240:	75 22                	jne    c0012264 <etharp_arp_input+0xc0>
c0012242:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012246:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
c0012249:	0f b6 c0             	movzx  eax,al
c001224c:	83 f8 04             	cmp    eax,0x4
c001224f:	75 13                	jne    c0012264 <etharp_arp_input+0xc0>
c0012251:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012255:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012259:	0f b7 c0             	movzx  eax,ax
c001225c:	83 f8 08             	cmp    eax,0x8
c001225f:	74 37                	je     c0012298 <etharp_arp_input+0xf4>
c0012261:	8d 76 00             	lea    esi,[esi+0x0]
c0012264:	66 a1 48 77 03 c0    	mov    ax,ds:0xc0037748
c001226a:	83 c0 01             	add    eax,0x1
c001226d:	66 a3 48 77 03 c0    	mov    ds:0xc0037748,ax
c0012273:	66 a1 3e 77 03 c0    	mov    ax,ds:0xc003773e
c0012279:	83 c0 01             	add    eax,0x1
c001227c:	66 a3 3e 77 03 c0    	mov    ds:0xc003773e,ax
c0012282:	83 ec 0c             	sub    esp,0xc
c0012285:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012289:	e8 86 62 ff ff       	call   c0008514 <pbuf_free>
c001228e:	83 c4 10             	add    esp,0x10
c0012291:	e9 06 02 00 00       	jmp    c001249c <etharp_arp_input+0x2f8>
c0012296:	66 90                	xchg   ax,ax
c0012298:	66 a1 3a 77 03 c0    	mov    ax,ds:0xc003773a
c001229e:	83 c0 01             	add    eax,0x1
c00122a1:	66 a3 3a 77 03 c0    	mov    ds:0xc003773a,ax
c00122a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122ab:	83 c0 0e             	add    eax,0xe
c00122ae:	83 ec 04             	sub    esp,0x4
c00122b1:	6a 04                	push   0x4
c00122b3:	50                   	push   eax
c00122b4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00122b8:	50                   	push   eax
c00122b9:	e8 bc e0 fe ff       	call   c000037a <memcpy>
c00122be:	83 c4 10             	add    esp,0x10
c00122c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122c5:	83 c0 18             	add    eax,0x18
c00122c8:	83 ec 04             	sub    esp,0x4
c00122cb:	6a 04                	push   0x4
c00122cd:	50                   	push   eax
c00122ce:	8d 44 24 18          	lea    eax,[esp+0x18]
c00122d2:	50                   	push   eax
c00122d3:	e8 a2 e0 fe ff       	call   c000037a <memcpy>
c00122d8:	83 c4 10             	add    esp,0x10
c00122db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122df:	83 c0 04             	add    eax,0x4
c00122e2:	74 0c                	je     c00122f0 <etharp_arp_input+0x14c>
c00122e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00122eb:	85 c0                	test   eax,eax
c00122ed:	75 09                	jne    c00122f8 <etharp_arp_input+0x154>
c00122ef:	90                   	nop
c00122f0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00122f5:	eb 15                	jmp    c001230c <etharp_arp_input+0x168>
c00122f7:	90                   	nop
c00122f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00122fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012300:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012303:	39 c2                	cmp    edx,eax
c0012305:	0f 94 c0             	sete   al
c0012308:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001230c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0012311:	85 c0                	test   eax,eax
c0012313:	74 07                	je     c001231c <etharp_arp_input+0x178>
c0012315:	b8 01 00 00 00       	mov    eax,0x1
c001231a:	eb 08                	jmp    c0012324 <etharp_arp_input+0x180>
c001231c:	b8 02 00 00 00       	mov    eax,0x2
c0012321:	8d 76 00             	lea    esi,[esi+0x0]
c0012324:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012328:	83 c2 08             	add    edx,0x8
c001232b:	50                   	push   eax
c001232c:	52                   	push   edx
c001232d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012331:	50                   	push   eax
c0012332:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012336:	e8 79 fc ff ff       	call   c0011fb4 <update_arp_entry>
c001233b:	83 c4 10             	add    esp,0x10
c001233e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012342:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0012346:	0f b7 c0             	movzx  eax,ax
c0012349:	3d 00 01 00 00       	cmp    eax,0x100
c001234e:	74 10                	je     c0012360 <etharp_arp_input+0x1bc>
c0012350:	3d 00 02 00 00       	cmp    eax,0x200
c0012355:	0f 84 2d 01 00 00    	je     c0012488 <etharp_arp_input+0x2e4>
c001235b:	e9 14 01 00 00       	jmp    c0012474 <etharp_arp_input+0x2d0>
c0012360:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0012365:	85 c0                	test   eax,eax
c0012367:	0f 84 fb 00 00 00    	je     c0012468 <etharp_arp_input+0x2c4>
c001236d:	83 ec 0c             	sub    esp,0xc
c0012370:	6a 02                	push   0x2
c0012372:	e8 a5 e8 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0012377:	83 c4 10             	add    esp,0x10
c001237a:	89 c2                	mov    edx,eax
c001237c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012380:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c0012384:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012388:	8d 50 0e             	lea    edx,[eax+0xe]
c001238b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001238f:	83 c0 18             	add    eax,0x18
c0012392:	83 ec 04             	sub    esp,0x4
c0012395:	6a 04                	push   0x4
c0012397:	52                   	push   edx
c0012398:	50                   	push   eax
c0012399:	e8 dc df fe ff       	call   c000037a <memcpy>
c001239e:	83 c4 10             	add    esp,0x10
c00123a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123a5:	8d 50 04             	lea    edx,[eax+0x4]
c00123a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00123ac:	83 c0 0e             	add    eax,0xe
c00123af:	83 ec 04             	sub    esp,0x4
c00123b2:	6a 04                	push   0x4
c00123b4:	52                   	push   edx
c00123b5:	50                   	push   eax
c00123b6:	e8 bf df fe ff       	call   c000037a <memcpy>
c00123bb:	83 c4 10             	add    esp,0x10
c00123be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123c2:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c00123c5:	0f b6 c0             	movzx  eax,al
c00123c8:	83 f8 06             	cmp    eax,0x6
c00123cb:	74 17                	je     c00123e4 <etharp_arp_input+0x240>
c00123cd:	83 ec 08             	sub    esp,0x8
c00123d0:	68 7c 13 03 c0       	push   0xc003137c
c00123d5:	68 46 03 03 c0       	push   0xc0030346
c00123da:	e8 6d da 00 00       	call   c001fe4c <CPrintf>
c00123df:	83 c4 10             	add    esp,0x10
c00123e2:	66 90                	xchg   ax,ax
c00123e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00123e8:	8d 50 08             	lea    edx,[eax+0x8]
c00123eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00123ef:	83 c0 12             	add    eax,0x12
c00123f2:	83 ec 04             	sub    esp,0x4
c00123f5:	6a 06                	push   0x6
c00123f7:	52                   	push   edx
c00123f8:	50                   	push   eax
c00123f9:	e8 7c df fe ff       	call   c000037a <memcpy>
c00123fe:	83 c4 10             	add    esp,0x10
c0012401:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012405:	8d 50 08             	lea    edx,[eax+0x8]
c0012408:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001240c:	83 ec 04             	sub    esp,0x4
c001240f:	6a 06                	push   0x6
c0012411:	52                   	push   edx
c0012412:	50                   	push   eax
c0012413:	e8 62 df fe ff       	call   c000037a <memcpy>
c0012418:	83 c4 10             	add    esp,0x10
c001241b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001241f:	83 c0 08             	add    eax,0x8
c0012422:	83 ec 04             	sub    esp,0x4
c0012425:	6a 06                	push   0x6
c0012427:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001242b:	50                   	push   eax
c001242c:	e8 49 df fe ff       	call   c000037a <memcpy>
c0012431:	83 c4 10             	add    esp,0x10
c0012434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012438:	83 c0 06             	add    eax,0x6
c001243b:	83 ec 04             	sub    esp,0x4
c001243e:	6a 06                	push   0x6
c0012440:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012444:	50                   	push   eax
c0012445:	e8 30 df fe ff       	call   c000037a <memcpy>
c001244a:	83 c4 10             	add    esp,0x10
c001244d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012451:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0012454:	83 ec 08             	sub    esp,0x8
c0012457:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001245b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001245f:	ff d0                	call   eax
c0012461:	83 c4 10             	add    esp,0x10
c0012464:	eb 26                	jmp    c001248c <etharp_arp_input+0x2e8>
c0012466:	66 90                	xchg   ax,ax
c0012468:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001246c:	83 c0 04             	add    eax,0x4
c001246f:	eb 1b                	jmp    c001248c <etharp_arp_input+0x2e8>
c0012471:	8d 76 00             	lea    esi,[esi+0x0]
c0012474:	66 a1 4c 77 03 c0    	mov    ax,ds:0xc003774c
c001247a:	83 c0 01             	add    eax,0x1
c001247d:	66 a3 4c 77 03 c0    	mov    ds:0xc003774c,ax
c0012483:	eb 07                	jmp    c001248c <etharp_arp_input+0x2e8>
c0012485:	8d 76 00             	lea    esi,[esi+0x0]
c0012488:	90                   	nop
c0012489:	8d 76 00             	lea    esi,[esi+0x0]
c001248c:	83 ec 0c             	sub    esp,0xc
c001248f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012493:	e8 7c 60 ff ff       	call   c0008514 <pbuf_free>
c0012498:	83 c4 10             	add    esp,0x10
c001249b:	90                   	nop
c001249c:	83 c4 2c             	add    esp,0x2c
c001249f:	c3                   	ret    

c00124a0 <etharp_raw>:
c00124a0:	83 ec 2c             	sub    esp,0x2c
c00124a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00124a7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00124ac:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00124b1:	83 ec 04             	sub    esp,0x4
c00124b4:	6a 00                	push   0x0
c00124b6:	6a 2a                	push   0x2a
c00124b8:	6a 03                	push   0x3
c00124ba:	e8 31 62 ff ff       	call   c00086f0 <pbuf_alloc>
c00124bf:	83 c4 10             	add    esp,0x10
c00124c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00124c6:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00124cb:	75 17                	jne    c00124e4 <etharp_raw+0x44>
c00124cd:	66 a1 44 77 03 c0    	mov    ax,ds:0xc0037744
c00124d3:	83 c0 01             	add    eax,0x1
c00124d6:	66 a3 44 77 03 c0    	mov    ds:0xc0037744,ax
c00124dc:	b0 ff                	mov    al,0xff
c00124de:	e9 89 01 00 00       	jmp    c001266c <etharp_raw+0x1cc>
c00124e3:	90                   	nop
c00124e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124e8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00124ec:	0f b7 c0             	movzx  eax,ax
c00124ef:	83 f8 29             	cmp    eax,0x29
c00124f2:	77 18                	ja     c001250c <etharp_raw+0x6c>
c00124f4:	83 ec 08             	sub    esp,0x8
c00124f7:	68 0c 14 03 c0       	push   0xc003140c
c00124fc:	68 46 03 03 c0       	push   0xc0030346
c0012501:	e8 46 d9 00 00       	call   c001fe4c <CPrintf>
c0012506:	83 c4 10             	add    esp,0x10
c0012509:	8d 76 00             	lea    esi,[esi+0x0]
c001250c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012510:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012513:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012517:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001251b:	83 c0 0e             	add    eax,0xe
c001251e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012522:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0012527:	83 ec 0c             	sub    esp,0xc
c001252a:	50                   	push   eax
c001252b:	e8 ec e6 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0012530:	83 c4 10             	add    esp,0x10
c0012533:	89 c2                	mov    edx,eax
c0012535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012539:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c001253d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012541:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0012544:	0f b6 c0             	movzx  eax,al
c0012547:	83 f8 06             	cmp    eax,0x6
c001254a:	74 18                	je     c0012564 <etharp_raw+0xc4>
c001254c:	83 ec 08             	sub    esp,0x8
c001254f:	68 7c 13 03 c0       	push   0xc003137c
c0012554:	68 46 03 03 c0       	push   0xc0030346
c0012559:	e8 ee d8 00 00       	call   c001fe4c <CPrintf>
c001255e:	83 c4 10             	add    esp,0x10
c0012561:	8d 76 00             	lea    esi,[esi+0x0]
c0012564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012568:	83 c0 08             	add    eax,0x8
c001256b:	83 ec 04             	sub    esp,0x4
c001256e:	6a 06                	push   0x6
c0012570:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012574:	50                   	push   eax
c0012575:	e8 00 de fe ff       	call   c000037a <memcpy>
c001257a:	83 c4 10             	add    esp,0x10
c001257d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012581:	83 c0 12             	add    eax,0x12
c0012584:	83 ec 04             	sub    esp,0x4
c0012587:	6a 06                	push   0x6
c0012589:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001258d:	50                   	push   eax
c001258e:	e8 e7 dd fe ff       	call   c000037a <memcpy>
c0012593:	83 c4 10             	add    esp,0x10
c0012596:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001259a:	83 ec 04             	sub    esp,0x4
c001259d:	6a 06                	push   0x6
c001259f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00125a3:	50                   	push   eax
c00125a4:	e8 d1 dd fe ff       	call   c000037a <memcpy>
c00125a9:	83 c4 10             	add    esp,0x10
c00125ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00125b0:	83 c0 06             	add    eax,0x6
c00125b3:	83 ec 04             	sub    esp,0x4
c00125b6:	6a 06                	push   0x6
c00125b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00125bc:	50                   	push   eax
c00125bd:	e8 b8 dd fe ff       	call   c000037a <memcpy>
c00125c2:	83 c4 10             	add    esp,0x10
c00125c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125c9:	83 c0 0e             	add    eax,0xe
c00125cc:	83 ec 04             	sub    esp,0x4
c00125cf:	6a 04                	push   0x4
c00125d1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00125d5:	50                   	push   eax
c00125d6:	e8 9f dd fe ff       	call   c000037a <memcpy>
c00125db:	83 c4 10             	add    esp,0x10
c00125de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125e2:	83 c0 18             	add    eax,0x18
c00125e5:	83 ec 04             	sub    esp,0x4
c00125e8:	6a 04                	push   0x4
c00125ea:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00125ee:	50                   	push   eax
c00125ef:	e8 86 dd fe ff       	call   c000037a <memcpy>
c00125f4:	83 c4 10             	add    esp,0x10
c00125f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125fb:	66 c7 00 00 01       	mov    WORD PTR [eax],0x100
c0012600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012604:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c001260a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001260e:	c6 40 04 06          	mov    BYTE PTR [eax+0x4],0x6
c0012612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012616:	c6 40 05 04          	mov    BYTE PTR [eax+0x5],0x4
c001261a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001261e:	66 c7 40 0c 08 06    	mov    WORD PTR [eax+0xc],0x608
c0012624:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012628:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001262b:	83 ec 08             	sub    esp,0x8
c001262e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012632:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012636:	ff d0                	call   eax
c0012638:	83 c4 10             	add    esp,0x10
c001263b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001263f:	66 a1 38 77 03 c0    	mov    ax,ds:0xc0037738
c0012645:	83 c0 01             	add    eax,0x1
c0012648:	66 a3 38 77 03 c0    	mov    ds:0xc0037738,ax
c001264e:	83 ec 0c             	sub    esp,0xc
c0012651:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012655:	e8 ba 5e ff ff       	call   c0008514 <pbuf_free>
c001265a:	83 c4 10             	add    esp,0x10
c001265d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012665:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012669:	8d 76 00             	lea    esi,[esi+0x0]
c001266c:	83 c4 2c             	add    esp,0x2c
c001266f:	c3                   	ret    

c0012670 <etharp_request>:
c0012670:	83 ec 0c             	sub    esp,0xc
c0012673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012677:	8d 48 04             	lea    ecx,[eax+0x4]
c001267a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001267e:	8d 50 23             	lea    edx,[eax+0x23]
c0012681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012685:	83 c0 23             	add    eax,0x23
c0012688:	6a 01                	push   0x1
c001268a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001268e:	68 dc 14 03 c0       	push   0xc00314dc
c0012693:	51                   	push   ecx
c0012694:	52                   	push   edx
c0012695:	68 e4 14 03 c0       	push   0xc00314e4
c001269a:	50                   	push   eax
c001269b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001269f:	e8 fc fd ff ff       	call   c00124a0 <etharp_raw>
c00126a4:	83 c4 20             	add    esp,0x20
c00126a7:	83 c4 0c             	add    esp,0xc
c00126aa:	c3                   	ret    
c00126ab:	90                   	nop

c00126ac <etharp_query>:
c00126ac:	83 ec 2c             	sub    esp,0x2c
c00126af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126b3:	83 c0 23             	add    eax,0x23
c00126b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00126ba:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c00126bf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00126c5:	83 ec 08             	sub    esp,0x8
c00126c8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00126cc:	50                   	push   eax
c00126cd:	e8 e6 19 00 00       	call   c00140b8 <ip4_addr_isbroadcast>
c00126d2:	83 c4 10             	add    esp,0x10
c00126d5:	0f b6 c0             	movzx  eax,al
c00126d8:	85 c0                	test   eax,eax
c00126da:	75 24                	jne    c0012700 <etharp_query+0x54>
c00126dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00126e2:	25 f0 00 00 00       	and    eax,0xf0
c00126e7:	3d e0 00 00 00       	cmp    eax,0xe0
c00126ec:	74 12                	je     c0012700 <etharp_query+0x54>
c00126ee:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00126f3:	74 0b                	je     c0012700 <etharp_query+0x54>
c00126f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00126fb:	85 c0                	test   eax,eax
c00126fd:	75 09                	jne    c0012708 <etharp_query+0x5c>
c00126ff:	90                   	nop
c0012700:	b0 f2                	mov    al,0xf2
c0012702:	e9 dd 02 00 00       	jmp    c00129e4 <etharp_query+0x338>
c0012707:	90                   	nop
c0012708:	83 ec 08             	sub    esp,0x8
c001270b:	6a 01                	push   0x1
c001270d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012711:	e8 ea f4 ff ff       	call   c0011c00 <find_entry>
c0012716:	83 c4 10             	add    esp,0x10
c0012719:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001271d:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012722:	85 c0                	test   eax,eax
c0012724:	79 22                	jns    c0012748 <etharp_query+0x9c>
c0012726:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c001272b:	74 0f                	je     c001273c <etharp_query+0x90>
c001272d:	66 a1 44 77 03 c0    	mov    ax,ds:0xc0037744
c0012733:	83 c0 01             	add    eax,0x1
c0012736:	66 a3 44 77 03 c0    	mov    ds:0xc0037744,ax
c001273c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012740:	e9 9f 02 00 00       	jmp    c00129e4 <etharp_query+0x338>
c0012745:	8d 76 00             	lea    esi,[esi+0x0]
c0012748:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001274d:	c1 e0 04             	shl    eax,0x4
c0012750:	05 0e b9 03 c0       	add    eax,0xc003b90e
c0012755:	8a 00                	mov    al,BYTE PTR [eax]
c0012757:	0f b6 c0             	movzx  eax,al
c001275a:	85 c0                	test   eax,eax
c001275c:	75 12                	jne    c0012770 <etharp_query+0xc4>
c001275e:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012763:	c1 e0 04             	shl    eax,0x4
c0012766:	05 0e b9 03 c0       	add    eax,0xc003b90e
c001276b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001276e:	66 90                	xchg   ax,ax
c0012770:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012775:	c1 e0 04             	shl    eax,0x4
c0012778:	05 0e b9 03 c0       	add    eax,0xc003b90e
c001277d:	8a 00                	mov    al,BYTE PTR [eax]
c001277f:	0f b6 c0             	movzx  eax,al
c0012782:	83 f8 01             	cmp    eax,0x1
c0012785:	74 2d                	je     c00127b4 <etharp_query+0x108>
c0012787:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001278c:	c1 e0 04             	shl    eax,0x4
c001278f:	05 0e b9 03 c0       	add    eax,0xc003b90e
c0012794:	8a 00                	mov    al,BYTE PTR [eax]
c0012796:	0f b6 c0             	movzx  eax,al
c0012799:	83 f8 02             	cmp    eax,0x2
c001279c:	74 16                	je     c00127b4 <etharp_query+0x108>
c001279e:	83 ec 08             	sub    esp,0x8
c00127a1:	68 40 14 03 c0       	push   0xc0031440
c00127a6:	68 46 03 03 c0       	push   0xc0030346
c00127ab:	e8 9c d6 00 00       	call   c001fe4c <CPrintf>
c00127b0:	83 c4 10             	add    esp,0x10
c00127b3:	90                   	nop
c00127b4:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00127b9:	c1 e0 04             	shl    eax,0x4
c00127bc:	05 0e b9 03 c0       	add    eax,0xc003b90e
c00127c1:	8a 00                	mov    al,BYTE PTR [eax]
c00127c3:	0f b6 c0             	movzx  eax,al
c00127c6:	83 f8 01             	cmp    eax,0x1
c00127c9:	74 09                	je     c00127d4 <etharp_query+0x128>
c00127cb:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00127d0:	75 2a                	jne    c00127fc <etharp_query+0x150>
c00127d2:	66 90                	xchg   ax,ax
c00127d4:	83 ec 08             	sub    esp,0x8
c00127d7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00127db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00127df:	e8 8c fe ff ff       	call   c0012670 <etharp_request>
c00127e4:	83 c4 10             	add    esp,0x10
c00127e7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00127eb:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00127f0:	75 0a                	jne    c00127fc <etharp_query+0x150>
c00127f2:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00127f6:	e9 e9 01 00 00       	jmp    c00129e4 <etharp_query+0x338>
c00127fb:	90                   	nop
c00127fc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0012801:	75 15                	jne    c0012818 <etharp_query+0x16c>
c0012803:	83 ec 08             	sub    esp,0x8
c0012806:	68 ba 07 03 c0       	push   0xc00307ba
c001280b:	68 46 03 03 c0       	push   0xc0030346
c0012810:	e8 37 d6 00 00       	call   c001fe4c <CPrintf>
c0012815:	83 c4 10             	add    esp,0x10
c0012818:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001281d:	c1 e0 04             	shl    eax,0x4
c0012820:	05 0e b9 03 c0       	add    eax,0xc003b90e
c0012825:	8a 00                	mov    al,BYTE PTR [eax]
c0012827:	0f b6 c0             	movzx  eax,al
c001282a:	83 f8 02             	cmp    eax,0x2
c001282d:	75 39                	jne    c0012868 <etharp_query+0x1bc>
c001282f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012833:	a2 e0 b8 03 c0       	mov    ds:0xc003b8e0,al
c0012838:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001283d:	c1 e0 04             	shl    eax,0x4
c0012840:	05 00 b9 03 c0       	add    eax,0xc003b900
c0012845:	83 c0 08             	add    eax,0x8
c0012848:	50                   	push   eax
c0012849:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001284d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012851:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012855:	e8 d2 f6 ff ff       	call   c0011f2c <etharp_send_ip>
c001285a:	83 c4 10             	add    esp,0x10
c001285d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012861:	e9 7a 01 00 00       	jmp    c00129e0 <etharp_query+0x334>
c0012866:	66 90                	xchg   ax,ax
c0012868:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001286d:	c1 e0 04             	shl    eax,0x4
c0012870:	05 0e b9 03 c0       	add    eax,0xc003b90e
c0012875:	8a 00                	mov    al,BYTE PTR [eax]
c0012877:	0f b6 c0             	movzx  eax,al
c001287a:	83 f8 01             	cmp    eax,0x1
c001287d:	0f 85 5d 01 00 00    	jne    c00129e0 <etharp_query+0x334>
c0012883:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001288b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001288f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012893:	eb 63                	jmp    c00128f8 <etharp_query+0x24c>
c0012895:	8d 76 00             	lea    esi,[esi+0x0]
c0012898:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001289c:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00128a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128a7:	0f b7 d2             	movzx  edx,dx
c00128aa:	0f b7 c0             	movzx  eax,ax
c00128ad:	39 c2                	cmp    edx,eax
c00128af:	75 1f                	jne    c00128d0 <etharp_query+0x224>
c00128b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00128b7:	85 c0                	test   eax,eax
c00128b9:	74 15                	je     c00128d0 <etharp_query+0x224>
c00128bb:	83 ec 08             	sub    esp,0x8
c00128be:	68 c1 14 03 c0       	push   0xc00314c1
c00128c3:	68 46 03 03 c0       	push   0xc0030346
c00128c8:	e8 7f d5 00 00       	call   c001fe4c <CPrintf>
c00128cd:	83 c4 10             	add    esp,0x10
c00128d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128d4:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00128d7:	0f b6 c0             	movzx  eax,al
c00128da:	83 f8 01             	cmp    eax,0x1
c00128dd:	74 0d                	je     c00128ec <etharp_query+0x240>
c00128df:	c7 44 24 14 01 00 00 00 	mov    DWORD PTR [esp+0x14],0x1
c00128e7:	eb 17                	jmp    c0012900 <etharp_query+0x254>
c00128e9:	8d 76 00             	lea    esi,[esi+0x0]
c00128ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00128f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00128f6:	66 90                	xchg   ax,ax
c00128f8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00128fd:	75 99                	jne    c0012898 <etharp_query+0x1ec>
c00128ff:	90                   	nop
c0012900:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012905:	74 59                	je     c0012960 <etharp_query+0x2b4>
c0012907:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001290b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001290e:	0f b7 c0             	movzx  eax,ax
c0012911:	83 ec 04             	sub    esp,0x4
c0012914:	6a 00                	push   0x0
c0012916:	50                   	push   eax
c0012917:	6a 03                	push   0x3
c0012919:	e8 d2 5d ff ff       	call   c00086f0 <pbuf_alloc>
c001291e:	83 c4 10             	add    esp,0x10
c0012921:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012925:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001292a:	74 4c                	je     c0012978 <etharp_query+0x2cc>
c001292c:	83 ec 08             	sub    esp,0x8
c001292f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012933:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012937:	e8 1c 66 ff ff       	call   c0008f58 <pbuf_copy>
c001293c:	83 c4 10             	add    esp,0x10
c001293f:	0f be c0             	movsx  eax,al
c0012942:	85 c0                	test   eax,eax
c0012944:	74 32                	je     c0012978 <etharp_query+0x2cc>
c0012946:	83 ec 0c             	sub    esp,0xc
c0012949:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001294d:	e8 c2 5b ff ff       	call   c0008514 <pbuf_free>
c0012952:	83 c4 10             	add    esp,0x10
c0012955:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001295d:	eb 19                	jmp    c0012978 <etharp_query+0x2cc>
c001295f:	90                   	nop
c0012960:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012964:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012968:	83 ec 0c             	sub    esp,0xc
c001296b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001296f:	e8 b0 63 ff ff       	call   c0008d24 <pbuf_ref>
c0012974:	83 c4 10             	add    esp,0x10
c0012977:	90                   	nop
c0012978:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001297d:	74 4d                	je     c00129cc <etharp_query+0x320>
c001297f:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012984:	c1 e0 04             	shl    eax,0x4
c0012987:	05 00 b9 03 c0       	add    eax,0xc003b900
c001298c:	8b 00                	mov    eax,DWORD PTR [eax]
c001298e:	85 c0                	test   eax,eax
c0012990:	74 1e                	je     c00129b0 <etharp_query+0x304>
c0012992:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012997:	c1 e0 04             	shl    eax,0x4
c001299a:	05 00 b9 03 c0       	add    eax,0xc003b900
c001299f:	8b 00                	mov    eax,DWORD PTR [eax]
c00129a1:	83 ec 0c             	sub    esp,0xc
c00129a4:	50                   	push   eax
c00129a5:	e8 6a 5b ff ff       	call   c0008514 <pbuf_free>
c00129aa:	83 c4 10             	add    esp,0x10
c00129ad:	8d 76 00             	lea    esi,[esi+0x0]
c00129b0:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00129b5:	c1 e0 04             	shl    eax,0x4
c00129b8:	8d 90 00 b9 03 c0    	lea    edx,[eax-0x3ffc4700]
c00129be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00129c2:	89 02                	mov    DWORD PTR [edx],eax
c00129c4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00129c9:	eb 15                	jmp    c00129e0 <etharp_query+0x334>
c00129cb:	90                   	nop
c00129cc:	66 a1 44 77 03 c0    	mov    ax,ds:0xc0037744
c00129d2:	83 c0 01             	add    eax,0x1
c00129d5:	66 a3 44 77 03 c0    	mov    ds:0xc0037744,ax
c00129db:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c00129e0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00129e4:	83 c4 2c             	add    esp,0x2c
c00129e7:	c3                   	ret    

c00129e8 <etharp_output>:
c00129e8:	83 ec 1c             	sub    esp,0x1c
c00129eb:	83 ec 08             	sub    esp,0x8
c00129ee:	6a 0e                	push   0xe
c00129f0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00129f4:	e8 7b 59 ff ff       	call   c0008374 <pbuf_header>
c00129f9:	83 c4 10             	add    esp,0x10
c00129fc:	0f b6 c0             	movzx  eax,al
c00129ff:	85 c0                	test   eax,eax
c0012a01:	74 19                	je     c0012a1c <etharp_output+0x34>
c0012a03:	66 a1 2a 77 03 c0    	mov    ax,ds:0xc003772a
c0012a09:	83 c0 01             	add    eax,0x1
c0012a0c:	66 a3 2a 77 03 c0    	mov    ds:0xc003772a,ax
c0012a12:	b0 fe                	mov    al,0xfe
c0012a14:	e9 8b 01 00 00       	jmp    c0012ba4 <etharp_output+0x1bc>
c0012a19:	8d 76 00             	lea    esi,[esi+0x0]
c0012a1c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012a24:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a28:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a2a:	83 ec 08             	sub    esp,0x8
c0012a2d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012a31:	50                   	push   eax
c0012a32:	e8 81 16 00 00       	call   c00140b8 <ip4_addr_isbroadcast>
c0012a37:	83 c4 10             	add    esp,0x10
c0012a3a:	0f b6 c0             	movzx  eax,al
c0012a3d:	85 c0                	test   eax,eax
c0012a3f:	74 0f                	je     c0012a50 <etharp_output+0x68>
c0012a41:	c7 44 24 0c e4 14 03 c0 	mov    DWORD PTR [esp+0xc],0xc00314e4
c0012a49:	e9 3a 01 00 00       	jmp    c0012b88 <etharp_output+0x1a0>
c0012a4e:	66 90                	xchg   ax,ax
c0012a50:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a54:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a56:	25 f0 00 00 00       	and    eax,0xf0
c0012a5b:	3d e0 00 00 00       	cmp    eax,0xe0
c0012a60:	75 42                	jne    c0012aa4 <etharp_output+0xbc>
c0012a62:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c0012a67:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c0012a6c:	c6 44 24 08 5e       	mov    BYTE PTR [esp+0x8],0x5e
c0012a71:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a75:	83 c0 01             	add    eax,0x1
c0012a78:	8a 00                	mov    al,BYTE PTR [eax]
c0012a7a:	83 e0 7f             	and    eax,0x7f
c0012a7d:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0012a81:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a85:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0012a88:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0012a8c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a90:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
c0012a93:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012a97:	8d 44 24 06          	lea    eax,[esp+0x6]
c0012a9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a9f:	e9 e4 00 00 00       	jmp    c0012b88 <etharp_output+0x1a0>
c0012aa4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012aa8:	8b 10                	mov    edx,DWORD PTR [eax]
c0012aaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012aae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ab1:	31 c2                	xor    edx,eax
c0012ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ab7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012aba:	21 d0                	and    eax,edx
c0012abc:	74 3a                	je     c0012af8 <etharp_output+0x110>
c0012abe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ac4:	0f b7 c0             	movzx  eax,ax
c0012ac7:	3d a9 fe 00 00       	cmp    eax,0xfea9
c0012acc:	74 2a                	je     c0012af8 <etharp_output+0x110>
c0012ace:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ad2:	83 c0 0c             	add    eax,0xc
c0012ad5:	74 19                	je     c0012af0 <etharp_output+0x108>
c0012ad7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012adb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012ade:	85 c0                	test   eax,eax
c0012ae0:	74 0e                	je     c0012af0 <etharp_output+0x108>
c0012ae2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ae6:	83 c0 0c             	add    eax,0xc
c0012ae9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012aed:	eb 09                	jmp    c0012af8 <etharp_output+0x110>
c0012aef:	90                   	nop
c0012af0:	b0 fc                	mov    al,0xfc
c0012af2:	e9 ad 00 00 00       	jmp    c0012ba4 <etharp_output+0x1bc>
c0012af7:	90                   	nop
c0012af8:	a0 e0 b8 03 c0       	mov    al,ds:0xc003b8e0
c0012afd:	0f b6 c0             	movzx  eax,al
c0012b00:	c1 e0 04             	shl    eax,0x4
c0012b03:	05 0e b9 03 c0       	add    eax,0xc003b90e
c0012b08:	8a 00                	mov    al,BYTE PTR [eax]
c0012b0a:	0f b6 c0             	movzx  eax,al
c0012b0d:	83 f8 02             	cmp    eax,0x2
c0012b10:	75 5a                	jne    c0012b6c <etharp_output+0x184>
c0012b12:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012b16:	8b 10                	mov    edx,DWORD PTR [eax]
c0012b18:	a0 e0 b8 03 c0       	mov    al,ds:0xc003b8e0
c0012b1d:	0f b6 c0             	movzx  eax,al
c0012b20:	c1 e0 04             	shl    eax,0x4
c0012b23:	05 04 b9 03 c0       	add    eax,0xc003b904
c0012b28:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b2a:	39 c2                	cmp    edx,eax
c0012b2c:	75 3e                	jne    c0012b6c <etharp_output+0x184>
c0012b2e:	66 a1 4e 77 03 c0    	mov    ax,ds:0xc003774e
c0012b34:	83 c0 01             	add    eax,0x1
c0012b37:	66 a3 4e 77 03 c0    	mov    ds:0xc003774e,ax
c0012b3d:	a0 e0 b8 03 c0       	mov    al,ds:0xc003b8e0
c0012b42:	0f b6 c0             	movzx  eax,al
c0012b45:	c1 e0 04             	shl    eax,0x4
c0012b48:	05 00 b9 03 c0       	add    eax,0xc003b900
c0012b4d:	8d 50 08             	lea    edx,[eax+0x8]
c0012b50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b54:	83 c0 23             	add    eax,0x23
c0012b57:	52                   	push   edx
c0012b58:	50                   	push   eax
c0012b59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b61:	e8 c6 f3 ff ff       	call   c0011f2c <etharp_send_ip>
c0012b66:	83 c4 10             	add    esp,0x10
c0012b69:	eb 39                	jmp    c0012ba4 <etharp_output+0x1bc>
c0012b6b:	90                   	nop
c0012b6c:	83 ec 04             	sub    esp,0x4
c0012b6f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012b73:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012b77:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b7b:	e8 2c fb ff ff       	call   c00126ac <etharp_query>
c0012b80:	83 c4 10             	add    esp,0x10
c0012b83:	eb 1f                	jmp    c0012ba4 <etharp_output+0x1bc>
c0012b85:	8d 76 00             	lea    esi,[esi+0x0]
c0012b88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b8c:	83 c0 23             	add    eax,0x23
c0012b8f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012b93:	50                   	push   eax
c0012b94:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b9c:	e8 8b f3 ff ff       	call   c0011f2c <etharp_send_ip>
c0012ba1:	83 c4 10             	add    esp,0x10
c0012ba4:	83 c4 1c             	add    esp,0x1c
c0012ba7:	c3                   	ret    

c0012ba8 <ethernet_input>:
c0012ba8:	83 ec 1c             	sub    esp,0x1c
c0012bab:	66 c7 44 24 0e 0e 00 	mov    WORD PTR [esp+0xe],0xe
c0012bb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012bb6:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012bba:	0f b7 c0             	movzx  eax,ax
c0012bbd:	83 f8 0e             	cmp    eax,0xe
c0012bc0:	77 26                	ja     c0012be8 <ethernet_input+0x40>
c0012bc2:	66 a1 48 77 03 c0    	mov    ax,ds:0xc0037748
c0012bc8:	83 c0 01             	add    eax,0x1
c0012bcb:	66 a3 48 77 03 c0    	mov    ds:0xc0037748,ax
c0012bd1:	66 a1 3e 77 03 c0    	mov    ax,ds:0xc003773e
c0012bd7:	83 c0 01             	add    eax,0x1
c0012bda:	66 a3 3e 77 03 c0    	mov    ds:0xc003773e,ax
c0012be0:	e9 ef 00 00 00       	jmp    c0012cd4 <ethernet_input+0x12c>
c0012be5:	8d 76 00             	lea    esi,[esi+0x0]
c0012be8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012bec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012bf3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012bf7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0012bfb:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0012c00:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0012c05:	83 f8 08             	cmp    eax,0x8
c0012c08:	74 0e                	je     c0012c18 <ethernet_input+0x70>
c0012c0a:	3d 08 06 00 00       	cmp    eax,0x608
c0012c0f:	74 6b                	je     c0012c7c <ethernet_input+0xd4>
c0012c11:	e9 92 00 00 00       	jmp    c0012ca8 <ethernet_input+0x100>
c0012c16:	66 90                	xchg   ax,ax
c0012c18:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012c1c:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0012c1f:	0f b6 c0             	movzx  eax,al
c0012c22:	83 e0 20             	and    eax,0x20
c0012c25:	0f 84 a1 00 00 00    	je     c0012ccc <ethernet_input+0x124>
c0012c2b:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0012c30:	f7 d8                	neg    eax
c0012c32:	98                   	cwde   
c0012c33:	83 ec 08             	sub    esp,0x8
c0012c36:	50                   	push   eax
c0012c37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012c3b:	e8 34 57 ff ff       	call   c0008374 <pbuf_header>
c0012c40:	83 c4 10             	add    esp,0x10
c0012c43:	0f b6 c0             	movzx  eax,al
c0012c46:	85 c0                	test   eax,eax
c0012c48:	74 1a                	je     c0012c64 <ethernet_input+0xbc>
c0012c4a:	83 ec 08             	sub    esp,0x8
c0012c4d:	68 68 14 03 c0       	push   0xc0031468
c0012c52:	68 46 03 03 c0       	push   0xc0030346
c0012c57:	e8 f0 d1 00 00       	call   c001fe4c <CPrintf>
c0012c5c:	83 c4 10             	add    esp,0x10
c0012c5f:	eb 73                	jmp    c0012cd4 <ethernet_input+0x12c>
c0012c61:	8d 76 00             	lea    esi,[esi+0x0]
c0012c64:	83 ec 08             	sub    esp,0x8
c0012c67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012c6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012c6f:	e8 7c 0c 00 00       	call   c00138f0 <ip_input>
c0012c74:	83 c4 10             	add    esp,0x10
c0012c77:	eb 4f                	jmp    c0012cc8 <ethernet_input+0x120>
c0012c79:	8d 76 00             	lea    esi,[esi+0x0]
c0012c7c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012c80:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0012c83:	0f b6 c0             	movzx  eax,al
c0012c86:	83 e0 20             	and    eax,0x20
c0012c89:	74 45                	je     c0012cd0 <ethernet_input+0x128>
c0012c8b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012c8f:	83 c0 23             	add    eax,0x23
c0012c92:	83 ec 04             	sub    esp,0x4
c0012c95:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012c99:	50                   	push   eax
c0012c9a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012c9e:	e8 01 f5 ff ff       	call   c00121a4 <etharp_arp_input>
c0012ca3:	83 c4 10             	add    esp,0x10
c0012ca6:	eb 20                	jmp    c0012cc8 <ethernet_input+0x120>
c0012ca8:	66 a1 48 77 03 c0    	mov    ax,ds:0xc0037748
c0012cae:	83 c0 01             	add    eax,0x1
c0012cb1:	66 a3 48 77 03 c0    	mov    ds:0xc0037748,ax
c0012cb7:	66 a1 3e 77 03 c0    	mov    ax,ds:0xc003773e
c0012cbd:	83 c0 01             	add    eax,0x1
c0012cc0:	66 a3 3e 77 03 c0    	mov    ds:0xc003773e,ax
c0012cc6:	eb 0c                	jmp    c0012cd4 <ethernet_input+0x12c>
c0012cc8:	b0 00                	mov    al,0x0
c0012cca:	eb 1c                	jmp    c0012ce8 <ethernet_input+0x140>
c0012ccc:	90                   	nop
c0012ccd:	eb 05                	jmp    c0012cd4 <ethernet_input+0x12c>
c0012ccf:	90                   	nop
c0012cd0:	90                   	nop
c0012cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0012cd4:	83 ec 0c             	sub    esp,0xc
c0012cd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012cdb:	e8 34 58 ff ff       	call   c0008514 <pbuf_free>
c0012ce0:	83 c4 10             	add    esp,0x10
c0012ce3:	b0 00                	mov    al,0x0
c0012ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0012ce8:	83 c4 1c             	add    esp,0x1c
c0012ceb:	c3                   	ret    

c0012cec <icmp_input>:
c0012cec:	83 ec 2c             	sub    esp,0x2c
c0012cef:	66 a1 82 77 03 c0    	mov    ax,ds:0xc0037782
c0012cf5:	83 c0 01             	add    eax,0x1
c0012cf8:	66 a3 82 77 03 c0    	mov    ds:0xc0037782,ax
c0012cfe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d05:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d0d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0012d10:	0f b7 c0             	movzx  eax,ax
c0012d13:	83 ec 0c             	sub    esp,0xc
c0012d16:	50                   	push   eax
c0012d17:	e8 00 df fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0012d1c:	83 c4 10             	add    esp,0x10
c0012d1f:	0f b7 c0             	movzx  eax,ax
c0012d22:	c1 e8 08             	shr    eax,0x8
c0012d25:	83 e0 0f             	and    eax,0xf
c0012d28:	c1 e0 02             	shl    eax,0x2
c0012d2b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0012d30:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012d35:	f7 d8                	neg    eax
c0012d37:	98                   	cwde   
c0012d38:	83 ec 08             	sub    esp,0x8
c0012d3b:	50                   	push   eax
c0012d3c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d40:	e8 2f 56 ff ff       	call   c0008374 <pbuf_header>
c0012d45:	83 c4 10             	add    esp,0x10
c0012d48:	0f b6 c0             	movzx  eax,al
c0012d4b:	85 c0                	test   eax,eax
c0012d4d:	0f 85 b1 03 00 00    	jne    c0013104 <icmp_input+0x418>
c0012d53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012d5a:	0f b7 c0             	movzx  eax,ax
c0012d5d:	83 f8 03             	cmp    eax,0x3
c0012d60:	0f 86 9e 03 00 00    	jbe    c0013104 <icmp_input+0x418>
c0012d66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d6d:	8a 00                	mov    al,BYTE PTR [eax]
c0012d6f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012d73:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012d78:	85 c0                	test   eax,eax
c0012d7a:	0f 84 6c 03 00 00    	je     c00130ec <icmp_input+0x400>
c0012d80:	83 f8 08             	cmp    eax,0x8
c0012d83:	0f 85 43 03 00 00    	jne    c00130cc <icmp_input+0x3e0>
c0012d89:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0012d91:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c0012d96:	25 f0 00 00 00       	and    eax,0xf0
c0012d9b:	3d e0 00 00 00       	cmp    eax,0xe0
c0012da0:	75 0a                	jne    c0012dac <icmp_input+0xc0>
c0012da2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012daa:	66 90                	xchg   ax,ax
c0012dac:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c0012db1:	83 ec 08             	sub    esp,0x8
c0012db4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012db8:	50                   	push   eax
c0012db9:	e8 fa 12 00 00       	call   c00140b8 <ip4_addr_isbroadcast>
c0012dbe:	83 c4 10             	add    esp,0x10
c0012dc1:	0f b6 c0             	movzx  eax,al
c0012dc4:	85 c0                	test   eax,eax
c0012dc6:	74 08                	je     c0012dd0 <icmp_input+0xe4>
c0012dc8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012dd0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012dd5:	75 25                	jne    c0012dfc <icmp_input+0x110>
c0012dd7:	66 a1 94 77 03 c0    	mov    ax,ds:0xc0037794
c0012ddd:	83 c0 01             	add    eax,0x1
c0012de0:	66 a3 94 77 03 c0    	mov    ds:0xc0037794,ax
c0012de6:	83 ec 0c             	sub    esp,0xc
c0012de9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ded:	e8 22 57 ff ff       	call   c0008514 <pbuf_free>
c0012df2:	83 c4 10             	add    esp,0x10
c0012df5:	e9 56 03 00 00       	jmp    c0013150 <icmp_input+0x464>
c0012dfa:	66 90                	xchg   ax,ax
c0012dfc:	90                   	nop
c0012dfd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012e01:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012e04:	0f b7 c0             	movzx  eax,ax
c0012e07:	83 f8 07             	cmp    eax,0x7
c0012e0a:	0f 86 f8 02 00 00    	jbe    c0013108 <icmp_input+0x41c>
c0012e10:	83 ec 0c             	sub    esp,0xc
c0012e13:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012e17:	e8 5c 09 00 00       	call   c0013778 <inet_chksum_pbuf>
c0012e1c:	83 c4 10             	add    esp,0x10
c0012e1f:	0f b7 c0             	movzx  eax,ax
c0012e22:	85 c0                	test   eax,eax
c0012e24:	74 26                	je     c0012e4c <icmp_input+0x160>
c0012e26:	83 ec 0c             	sub    esp,0xc
c0012e29:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012e2d:	e8 e2 56 ff ff       	call   c0008514 <pbuf_free>
c0012e32:	83 c4 10             	add    esp,0x10
c0012e35:	66 a1 88 77 03 c0    	mov    ax,ds:0xc0037788
c0012e3b:	83 c0 01             	add    eax,0x1
c0012e3e:	66 a3 88 77 03 c0    	mov    ds:0xc0037788,ax
c0012e44:	e9 07 03 00 00       	jmp    c0013150 <icmp_input+0x464>
c0012e49:	8d 76 00             	lea    esi,[esi+0x0]
c0012e4c:	83 ec 08             	sub    esp,0x8
c0012e4f:	6a 22                	push   0x22
c0012e51:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012e55:	e8 1a 55 ff ff       	call   c0008374 <pbuf_header>
c0012e5a:	83 c4 10             	add    esp,0x10
c0012e5d:	0f b6 c0             	movzx  eax,al
c0012e60:	85 c0                	test   eax,eax
c0012e62:	0f 84 24 01 00 00    	je     c0012f8c <icmp_input+0x2a0>
c0012e68:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012e6d:	83 ec 08             	sub    esp,0x8
c0012e70:	50                   	push   eax
c0012e71:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012e75:	e8 fa 54 ff ff       	call   c0008374 <pbuf_header>
c0012e7a:	83 c4 10             	add    esp,0x10
c0012e7d:	0f b6 c0             	movzx  eax,al
c0012e80:	85 c0                	test   eax,eax
c0012e82:	74 1c                	je     c0012ea0 <icmp_input+0x1b4>
c0012e84:	83 ec 08             	sub    esp,0x8
c0012e87:	68 ec 14 03 c0       	push   0xc00314ec
c0012e8c:	68 46 03 03 c0       	push   0xc0030346
c0012e91:	e8 b6 cf 00 00       	call   c001fe4c <CPrintf>
c0012e96:	83 c4 10             	add    esp,0x10
c0012e99:	e9 92 02 00 00       	jmp    c0013130 <icmp_input+0x444>
c0012e9e:	66 90                	xchg   ax,ax
c0012ea0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ea4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012ea7:	0f b7 c0             	movzx  eax,ax
c0012eaa:	83 ec 04             	sub    esp,0x4
c0012ead:	6a 00                	push   0x0
c0012eaf:	50                   	push   eax
c0012eb0:	6a 02                	push   0x2
c0012eb2:	e8 39 58 ff ff       	call   c00086f0 <pbuf_alloc>
c0012eb7:	83 c4 10             	add    esp,0x10
c0012eba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012ebe:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012ec3:	0f 84 63 02 00 00    	je     c001312c <icmp_input+0x440>
c0012ec9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ecd:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012ed1:	0f b7 c0             	movzx  eax,ax
c0012ed4:	0f bf 54 24 16       	movsx  edx,WORD PTR [esp+0x16]
c0012ed9:	83 c2 08             	add    edx,0x8
c0012edc:	39 d0                	cmp    eax,edx
c0012ede:	73 18                	jae    c0012ef8 <icmp_input+0x20c>
c0012ee0:	83 ec 08             	sub    esp,0x8
c0012ee3:	68 20 15 03 c0       	push   0xc0031520
c0012ee8:	68 46 03 03 c0       	push   0xc0030346
c0012eed:	e8 5a cf 00 00       	call   c001fe4c <CPrintf>
c0012ef2:	83 c4 10             	add    esp,0x10
c0012ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0012ef8:	83 ec 08             	sub    esp,0x8
c0012efb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012eff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f03:	e8 50 60 ff ff       	call   c0008f58 <pbuf_copy>
c0012f08:	83 c4 10             	add    esp,0x10
c0012f0b:	0f be c0             	movsx  eax,al
c0012f0e:	85 c0                	test   eax,eax
c0012f10:	74 1a                	je     c0012f2c <icmp_input+0x240>
c0012f12:	83 ec 08             	sub    esp,0x8
c0012f15:	68 58 15 03 c0       	push   0xc0031558
c0012f1a:	68 46 03 03 c0       	push   0xc0030346
c0012f1f:	e8 28 cf 00 00       	call   c001fe4c <CPrintf>
c0012f24:	83 c4 10             	add    esp,0x10
c0012f27:	e9 04 02 00 00       	jmp    c0013130 <icmp_input+0x444>
c0012f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f33:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012f37:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012f3c:	f7 d8                	neg    eax
c0012f3e:	98                   	cwde   
c0012f3f:	83 ec 08             	sub    esp,0x8
c0012f42:	50                   	push   eax
c0012f43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f47:	e8 28 54 ff ff       	call   c0008374 <pbuf_header>
c0012f4c:	83 c4 10             	add    esp,0x10
c0012f4f:	0f b6 c0             	movzx  eax,al
c0012f52:	85 c0                	test   eax,eax
c0012f54:	74 1a                	je     c0012f70 <icmp_input+0x284>
c0012f56:	83 ec 08             	sub    esp,0x8
c0012f59:	68 80 15 03 c0       	push   0xc0031580
c0012f5e:	68 46 03 03 c0       	push   0xc0030346
c0012f63:	e8 e4 ce 00 00       	call   c001fe4c <CPrintf>
c0012f68:	83 c4 10             	add    esp,0x10
c0012f6b:	e9 c0 01 00 00       	jmp    c0013130 <icmp_input+0x444>
c0012f70:	83 ec 0c             	sub    esp,0xc
c0012f73:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012f77:	e8 98 55 ff ff       	call   c0008514 <pbuf_free>
c0012f7c:	83 c4 10             	add    esp,0x10
c0012f7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f83:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012f87:	eb 37                	jmp    c0012fc0 <icmp_input+0x2d4>
c0012f89:	8d 76 00             	lea    esi,[esi+0x0]
c0012f8c:	83 ec 08             	sub    esp,0x8
c0012f8f:	6a de                	push   0xffffffde
c0012f91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012f95:	e8 da 53 ff ff       	call   c0008374 <pbuf_header>
c0012f9a:	83 c4 10             	add    esp,0x10
c0012f9d:	0f b6 c0             	movzx  eax,al
c0012fa0:	85 c0                	test   eax,eax
c0012fa2:	74 1c                	je     c0012fc0 <icmp_input+0x2d4>
c0012fa4:	83 ec 08             	sub    esp,0x8
c0012fa7:	68 80 15 03 c0       	push   0xc0031580
c0012fac:	68 46 03 03 c0       	push   0xc0030346
c0012fb1:	e8 96 ce 00 00       	call   c001fe4c <CPrintf>
c0012fb6:	83 c4 10             	add    esp,0x10
c0012fb9:	e9 72 01 00 00       	jmp    c0013130 <icmp_input+0x444>
c0012fbe:	66 90                	xchg   ax,ax
c0012fc0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012fc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012fcb:	8b 15 98 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037898
c0012fd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fd5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012fd8:	8b 15 90 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037890
c0012fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fe2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012fe5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012fe9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012fec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012ff0:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012ff4:	0f b7 c0             	movzx  eax,ax
c0012ff7:	3d f6 ff 00 00       	cmp    eax,0xfff6
c0012ffc:	76 1a                	jbe    c0013018 <icmp_input+0x32c>
c0012ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013002:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013006:	83 c0 09             	add    eax,0x9
c0013009:	89 c2                	mov    edx,eax
c001300b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001300f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0013013:	eb 1b                	jmp    c0013030 <icmp_input+0x344>
c0013015:	8d 76 00             	lea    esi,[esi+0x0]
c0013018:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001301c:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013020:	83 c0 08             	add    eax,0x8
c0013023:	89 c2                	mov    edx,eax
c0013025:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013029:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001302d:	8d 76 00             	lea    esi,[esi+0x0]
c0013030:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013034:	c6 40 08 ff          	mov    BYTE PTR [eax+0x8],0xff
c0013038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001303c:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0013042:	83 ec 08             	sub    esp,0x8
c0013045:	6a 14                	push   0x14
c0013047:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001304b:	e8 00 07 00 00       	call   c0013750 <inet_chksum>
c0013050:	83 c4 10             	add    esp,0x10
c0013053:	89 c2                	mov    edx,eax
c0013055:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013059:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c001305d:	66 a1 80 77 03 c0    	mov    ax,ds:0xc0037780
c0013063:	83 c0 01             	add    eax,0x1
c0013066:	66 a3 80 77 03 c0    	mov    ds:0xc0037780,ax
c001306c:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0013071:	83 ec 08             	sub    esp,0x8
c0013074:	50                   	push   eax
c0013075:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013079:	e8 f6 52 ff ff       	call   c0008374 <pbuf_header>
c001307e:	83 c4 10             	add    esp,0x10
c0013081:	0f b6 c0             	movzx  eax,al
c0013084:	85 c0                	test   eax,eax
c0013086:	74 18                	je     c00130a0 <icmp_input+0x3b4>
c0013088:	83 ec 08             	sub    esp,0x8
c001308b:	68 68 14 03 c0       	push   0xc0031468
c0013090:	68 46 03 03 c0       	push   0xc0030346
c0013095:	e8 b2 cd 00 00       	call   c001fe4c <CPrintf>
c001309a:	83 c4 10             	add    esp,0x10
c001309d:	eb 51                	jmp    c00130f0 <icmp_input+0x404>
c001309f:	90                   	nop
c00130a0:	83 ec 04             	sub    esp,0x4
c00130a3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00130a7:	6a 01                	push   0x1
c00130a9:	6a 00                	push   0x0
c00130ab:	68 ff 00 00 00       	push   0xff
c00130b0:	6a 00                	push   0x0
c00130b2:	68 98 78 03 c0       	push   0xc0037898
c00130b7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00130bb:	e8 74 0c 00 00       	call   c0013d34 <ip_output_if>
c00130c0:	83 c4 20             	add    esp,0x20
c00130c3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00130c7:	eb 27                	jmp    c00130f0 <icmp_input+0x404>
c00130c9:	8d 76 00             	lea    esi,[esi+0x0]
c00130cc:	66 a1 90 77 03 c0    	mov    ax,ds:0xc0037790
c00130d2:	83 c0 01             	add    eax,0x1
c00130d5:	66 a3 90 77 03 c0    	mov    ds:0xc0037790,ax
c00130db:	66 a1 86 77 03 c0    	mov    ax,ds:0xc0037786
c00130e1:	83 c0 01             	add    eax,0x1
c00130e4:	66 a3 86 77 03 c0    	mov    ds:0xc0037786,ax
c00130ea:	eb 04                	jmp    c00130f0 <icmp_input+0x404>
c00130ec:	90                   	nop
c00130ed:	8d 76 00             	lea    esi,[esi+0x0]
c00130f0:	83 ec 0c             	sub    esp,0xc
c00130f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00130f7:	e8 18 54 ff ff       	call   c0008514 <pbuf_free>
c00130fc:	83 c4 10             	add    esp,0x10
c00130ff:	eb 4f                	jmp    c0013150 <icmp_input+0x464>
c0013101:	8d 76 00             	lea    esi,[esi+0x0]
c0013104:	90                   	nop
c0013105:	eb 05                	jmp    c001310c <icmp_input+0x420>
c0013107:	90                   	nop
c0013108:	90                   	nop
c0013109:	8d 76 00             	lea    esi,[esi+0x0]
c001310c:	83 ec 0c             	sub    esp,0xc
c001310f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013113:	e8 fc 53 ff ff       	call   c0008514 <pbuf_free>
c0013118:	83 c4 10             	add    esp,0x10
c001311b:	66 a1 8a 77 03 c0    	mov    ax,ds:0xc003778a
c0013121:	83 c0 01             	add    eax,0x1
c0013124:	66 a3 8a 77 03 c0    	mov    ds:0xc003778a,ax
c001312a:	eb 24                	jmp    c0013150 <icmp_input+0x464>
c001312c:	90                   	nop
c001312d:	8d 76 00             	lea    esi,[esi+0x0]
c0013130:	83 ec 0c             	sub    esp,0xc
c0013133:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013137:	e8 d8 53 ff ff       	call   c0008514 <pbuf_free>
c001313c:	83 c4 10             	add    esp,0x10
c001313f:	66 a1 94 77 03 c0    	mov    ax,ds:0xc0037794
c0013145:	83 c0 01             	add    eax,0x1
c0013148:	66 a3 94 77 03 c0    	mov    ds:0xc0037794,ax
c001314e:	90                   	nop
c001314f:	90                   	nop
c0013150:	83 c4 2c             	add    esp,0x2c
c0013153:	c3                   	ret    

c0013154 <icmp_send_response>:
c0013154:	83 ec 2c             	sub    esp,0x2c
c0013157:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001315b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001315f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013163:	88 d0                	mov    al,dl
c0013165:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013169:	83 ec 04             	sub    esp,0x4
c001316c:	6a 00                	push   0x0
c001316e:	6a 24                	push   0x24
c0013170:	6a 01                	push   0x1
c0013172:	e8 79 55 ff ff       	call   c00086f0 <pbuf_alloc>
c0013177:	83 c4 10             	add    esp,0x10
c001317a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001317e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013183:	0f 84 ff 00 00 00    	je     c0013288 <icmp_send_response+0x134>
c0013189:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001318d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013191:	0f b7 c0             	movzx  eax,ax
c0013194:	83 f8 23             	cmp    eax,0x23
c0013197:	77 17                	ja     c00131b0 <icmp_send_response+0x5c>
c0013199:	83 ec 08             	sub    esp,0x8
c001319c:	68 b4 15 03 c0       	push   0xc00315b4
c00131a1:	68 46 03 03 c0       	push   0xc0030346
c00131a6:	e8 a1 cc 00 00       	call   c001fe4c <CPrintf>
c00131ab:	83 c4 10             	add    esp,0x10
c00131ae:	66 90                	xchg   ax,ax
c00131b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00131b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00131b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00131bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00131c2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00131c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131ca:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00131ce:	88 10                	mov    BYTE PTR [eax],dl
c00131d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131d4:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00131d8:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00131db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131df:	66 c7 40 04 00 00    	mov    WORD PTR [eax+0x4],0x0
c00131e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131e9:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c00131ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00131f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00131f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00131fa:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00131fd:	83 c2 08             	add    edx,0x8
c0013200:	83 ec 04             	sub    esp,0x4
c0013203:	6a 1c                	push   0x1c
c0013205:	50                   	push   eax
c0013206:	52                   	push   edx
c0013207:	e8 6e d1 fe ff       	call   c000037a <memcpy>
c001320c:	83 c4 10             	add    esp,0x10
c001320f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013213:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0013219:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001321d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013221:	0f b7 c0             	movzx  eax,ax
c0013224:	83 ec 08             	sub    esp,0x8
c0013227:	50                   	push   eax
c0013228:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001322c:	e8 1f 05 00 00       	call   c0013750 <inet_chksum>
c0013231:	83 c4 10             	add    esp,0x10
c0013234:	89 c2                	mov    edx,eax
c0013236:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001323a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001323e:	66 a1 80 77 03 c0    	mov    ax,ds:0xc0037780
c0013244:	83 c0 01             	add    eax,0x1
c0013247:	66 a3 80 77 03 c0    	mov    ds:0xc0037780,ax
c001324d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013251:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013254:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013258:	83 ec 08             	sub    esp,0x8
c001325b:	6a 01                	push   0x1
c001325d:	6a 00                	push   0x0
c001325f:	68 ff 00 00 00       	push   0xff
c0013264:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013268:	50                   	push   eax
c0013269:	6a 00                	push   0x0
c001326b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001326f:	e8 9c 0d 00 00       	call   c0014010 <ip_output>
c0013274:	83 c4 20             	add    esp,0x20
c0013277:	83 ec 0c             	sub    esp,0xc
c001327a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001327e:	e8 91 52 ff ff       	call   c0008514 <pbuf_free>
c0013283:	83 c4 10             	add    esp,0x10
c0013286:	eb 04                	jmp    c001328c <icmp_send_response+0x138>
c0013288:	90                   	nop
c0013289:	8d 76 00             	lea    esi,[esi+0x0]
c001328c:	83 c4 2c             	add    esp,0x2c
c001328f:	c3                   	ret    

c0013290 <icmp_dest_unreach>:
c0013290:	83 ec 0c             	sub    esp,0xc
c0013293:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013297:	0f b6 c0             	movzx  eax,al
c001329a:	83 ec 04             	sub    esp,0x4
c001329d:	50                   	push   eax
c001329e:	6a 03                	push   0x3
c00132a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132a4:	e8 ab fe ff ff       	call   c0013154 <icmp_send_response>
c00132a9:	83 c4 10             	add    esp,0x10
c00132ac:	90                   	nop
c00132ad:	83 c4 0c             	add    esp,0xc
c00132b0:	c3                   	ret    
c00132b1:	8d 76 00             	lea    esi,[esi+0x0]

c00132b4 <icmp_time_exceeded>:
c00132b4:	83 ec 0c             	sub    esp,0xc
c00132b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132bb:	0f b6 c0             	movzx  eax,al
c00132be:	83 ec 04             	sub    esp,0x4
c00132c1:	50                   	push   eax
c00132c2:	6a 0b                	push   0xb
c00132c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132c8:	e8 87 fe ff ff       	call   c0013154 <icmp_send_response>
c00132cd:	83 c4 10             	add    esp,0x10
c00132d0:	90                   	nop
c00132d1:	83 c4 0c             	add    esp,0xc
c00132d4:	c3                   	ret    
c00132d5:	66 90                	xchg   ax,ax
c00132d7:	90                   	nop

c00132d8 <lwip_standard_chksum>:
c00132d8:	83 ec 2c             	sub    esp,0x2c
c00132db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00132df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00132e3:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c00132ea:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00132f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132f6:	83 e0 01             	and    eax,0x1
c00132f9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00132fd:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013302:	74 24                	je     c0013328 <lwip_standard_chksum+0x50>
c0013304:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013309:	7e 1d                	jle    c0013328 <lwip_standard_chksum+0x50>
c001330b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001330f:	8d 42 01             	lea    eax,[edx+0x1]
c0013312:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013316:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001331a:	83 c0 01             	add    eax,0x1
c001331d:	8a 12                	mov    dl,BYTE PTR [edx]
c001331f:	88 10                	mov    BYTE PTR [eax],dl
c0013321:	83 6c 24 34 01       	sub    DWORD PTR [esp+0x34],0x1
c0013326:	66 90                	xchg   ax,ax
c0013328:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001332c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013330:	eb 1e                	jmp    c0013350 <lwip_standard_chksum+0x78>
c0013332:	66 90                	xchg   ax,ax
c0013334:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013338:	8d 50 02             	lea    edx,[eax+0x2]
c001333b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001333f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013342:	0f b7 c0             	movzx  eax,ax
c0013345:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013349:	83 6c 24 34 02       	sub    DWORD PTR [esp+0x34],0x2
c001334e:	66 90                	xchg   ax,ax
c0013350:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c0013355:	7f dd                	jg     c0013334 <lwip_standard_chksum+0x5c>
c0013357:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001335c:	7e 0e                	jle    c001336c <lwip_standard_chksum+0x94>
c001335e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0013362:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013366:	8a 12                	mov    dl,BYTE PTR [edx]
c0013368:	88 10                	mov    BYTE PTR [eax],dl
c001336a:	66 90                	xchg   ax,ax
c001336c:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0013371:	0f b7 c0             	movzx  eax,ax
c0013374:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013378:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001337c:	c1 e8 10             	shr    eax,0x10
c001337f:	89 c2                	mov    edx,eax
c0013381:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013385:	0f b7 c0             	movzx  eax,ax
c0013388:	01 d0                	add    eax,edx
c001338a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001338e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013392:	c1 e8 10             	shr    eax,0x10
c0013395:	89 c2                	mov    edx,eax
c0013397:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001339b:	0f b7 c0             	movzx  eax,ax
c001339e:	01 d0                	add    eax,edx
c00133a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00133a4:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00133a9:	74 1d                	je     c00133c8 <lwip_standard_chksum+0xf0>
c00133ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00133af:	0f b7 c0             	movzx  eax,ax
c00133b2:	83 ec 0c             	sub    esp,0xc
c00133b5:	50                   	push   eax
c00133b6:	e8 61 d8 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00133bb:	83 c4 10             	add    esp,0x10
c00133be:	0f b7 c0             	movzx  eax,ax
c00133c1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00133c5:	8d 76 00             	lea    esi,[esi+0x0]
c00133c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00133cc:	83 c4 2c             	add    esp,0x2c
c00133cf:	c3                   	ret    

c00133d0 <inet_chksum_pseudo>:
c00133d0:	83 ec 2c             	sub    esp,0x2c
c00133d3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00133d7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00133db:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00133df:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00133e4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00133ec:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00133f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00133f9:	e9 8a 00 00 00       	jmp    c0013488 <inet_chksum_pseudo+0xb8>
c00133fe:	66 90                	xchg   ax,ax
c0013400:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013404:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013408:	0f b7 d0             	movzx  edx,ax
c001340b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001340f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013412:	83 ec 08             	sub    esp,0x8
c0013415:	52                   	push   edx
c0013416:	50                   	push   eax
c0013417:	e8 bc fe ff ff       	call   c00132d8 <lwip_standard_chksum>
c001341c:	83 c4 10             	add    esp,0x10
c001341f:	0f b7 c0             	movzx  eax,ax
c0013422:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013426:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001342a:	c1 e8 10             	shr    eax,0x10
c001342d:	89 c2                	mov    edx,eax
c001342f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013433:	0f b7 c0             	movzx  eax,ax
c0013436:	01 d0                	add    eax,edx
c0013438:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001343c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013440:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013444:	83 e0 01             	and    eax,0x1
c0013447:	0f b7 c0             	movzx  eax,ax
c001344a:	85 c0                	test   eax,eax
c001344c:	74 2e                	je     c001347c <inet_chksum_pseudo+0xac>
c001344e:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0013452:	ba 01 00 00 00       	mov    edx,0x1
c0013457:	29 c2                	sub    edx,eax
c0013459:	89 d0                	mov    eax,edx
c001345b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001345f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013463:	0f b7 c0             	movzx  eax,ax
c0013466:	83 ec 0c             	sub    esp,0xc
c0013469:	50                   	push   eax
c001346a:	e8 ad d7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001346f:	83 c4 10             	add    esp,0x10
c0013472:	0f b7 c0             	movzx  eax,ax
c0013475:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013479:	8d 76 00             	lea    esi,[esi+0x0]
c001347c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013480:	8b 00                	mov    eax,DWORD PTR [eax]
c0013482:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013486:	66 90                	xchg   ax,ax
c0013488:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001348d:	0f 85 6d ff ff ff    	jne    c0013400 <inet_chksum_pseudo+0x30>
c0013493:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0013498:	85 c0                	test   eax,eax
c001349a:	74 1c                	je     c00134b8 <inet_chksum_pseudo+0xe8>
c001349c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134a0:	0f b7 c0             	movzx  eax,ax
c00134a3:	83 ec 0c             	sub    esp,0xc
c00134a6:	50                   	push   eax
c00134a7:	e8 70 d7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00134ac:	83 c4 10             	add    esp,0x10
c00134af:	0f b7 c0             	movzx  eax,ax
c00134b2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134b6:	66 90                	xchg   ax,ax
c00134b8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00134bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00134be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00134c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134c6:	0f b7 c0             	movzx  eax,ax
c00134c9:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00134cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134d1:	c1 e8 10             	shr    eax,0x10
c00134d4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00134d8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00134dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00134de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00134e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e6:	0f b7 c0             	movzx  eax,ax
c00134e9:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00134ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134f1:	c1 e8 10             	shr    eax,0x10
c00134f4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00134f8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00134fd:	83 ec 0c             	sub    esp,0xc
c0013500:	50                   	push   eax
c0013501:	e8 16 d7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013506:	83 c4 10             	add    esp,0x10
c0013509:	0f b7 c0             	movzx  eax,ax
c001350c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013510:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0013515:	83 ec 0c             	sub    esp,0xc
c0013518:	50                   	push   eax
c0013519:	e8 fe d6 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001351e:	83 c4 10             	add    esp,0x10
c0013521:	0f b7 c0             	movzx  eax,ax
c0013524:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013528:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001352c:	c1 e8 10             	shr    eax,0x10
c001352f:	89 c2                	mov    edx,eax
c0013531:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013535:	0f b7 c0             	movzx  eax,ax
c0013538:	01 d0                	add    eax,edx
c001353a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001353e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013542:	c1 e8 10             	shr    eax,0x10
c0013545:	89 c2                	mov    edx,eax
c0013547:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001354b:	0f b7 c0             	movzx  eax,ax
c001354e:	01 d0                	add    eax,edx
c0013550:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013554:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013558:	f7 d0                	not    eax
c001355a:	83 c4 2c             	add    esp,0x2c
c001355d:	c3                   	ret    
c001355e:	66 90                	xchg   ax,ax

c0013560 <inet_chksum_pseudo_partial>:
c0013560:	83 ec 2c             	sub    esp,0x2c
c0013563:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013567:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001356b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001356f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013573:	66 89 54 24 08       	mov    WORD PTR [esp+0x8],dx
c0013578:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c001357d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013585:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001358a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001358e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013592:	e9 d9 00 00 00       	jmp    c0013670 <inet_chksum_pseudo_partial+0x110>
c0013597:	90                   	nop
c0013598:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001359c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00135a0:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00135a5:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c00135aa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00135af:	39 c2                	cmp    edx,eax
c00135b1:	76 09                	jbe    c00135bc <inet_chksum_pseudo_partial+0x5c>
c00135b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135b7:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00135bc:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c00135c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00135c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00135c8:	83 ec 08             	sub    esp,0x8
c00135cb:	52                   	push   edx
c00135cc:	50                   	push   eax
c00135cd:	e8 06 fd ff ff       	call   c00132d8 <lwip_standard_chksum>
c00135d2:	83 c4 10             	add    esp,0x10
c00135d5:	0f b7 c0             	movzx  eax,ax
c00135d8:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00135dc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00135e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00135e4:	89 d1                	mov    ecx,edx
c00135e6:	29 c1                	sub    ecx,eax
c00135e8:	89 c8                	mov    eax,ecx
c00135ea:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00135ef:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00135f4:	3d fe 7f 00 00       	cmp    eax,0x7ffe
c00135f9:	76 15                	jbe    c0013610 <inet_chksum_pseudo_partial+0xb0>
c00135fb:	83 ec 08             	sub    esp,0x8
c00135fe:	68 e0 15 03 c0       	push   0xc00315e0
c0013603:	68 46 03 03 c0       	push   0xc0030346
c0013608:	e8 3f c8 00 00       	call   c001fe4c <CPrintf>
c001360d:	83 c4 10             	add    esp,0x10
c0013610:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013614:	c1 e8 10             	shr    eax,0x10
c0013617:	89 c2                	mov    edx,eax
c0013619:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001361d:	0f b7 c0             	movzx  eax,ax
c0013620:	01 d0                	add    eax,edx
c0013622:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013626:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001362a:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001362e:	83 e0 01             	and    eax,0x1
c0013631:	0f b7 c0             	movzx  eax,ax
c0013634:	85 c0                	test   eax,eax
c0013636:	74 2c                	je     c0013664 <inet_chksum_pseudo_partial+0x104>
c0013638:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001363c:	ba 01 00 00 00       	mov    edx,0x1
c0013641:	29 c2                	sub    edx,eax
c0013643:	89 d0                	mov    eax,edx
c0013645:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0013649:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001364d:	0f b7 c0             	movzx  eax,ax
c0013650:	83 ec 0c             	sub    esp,0xc
c0013653:	50                   	push   eax
c0013654:	e8 c3 d5 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013659:	83 c4 10             	add    esp,0x10
c001365c:	0f b7 c0             	movzx  eax,ax
c001365f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013663:	90                   	nop
c0013664:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013668:	8b 00                	mov    eax,DWORD PTR [eax]
c001366a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001366e:	66 90                	xchg   ax,ax
c0013670:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013675:	74 0d                	je     c0013684 <inet_chksum_pseudo_partial+0x124>
c0013677:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001367c:	85 c0                	test   eax,eax
c001367e:	0f 85 14 ff ff ff    	jne    c0013598 <inet_chksum_pseudo_partial+0x38>
c0013684:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0013689:	85 c0                	test   eax,eax
c001368b:	74 1b                	je     c00136a8 <inet_chksum_pseudo_partial+0x148>
c001368d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013691:	0f b7 c0             	movzx  eax,ax
c0013694:	83 ec 0c             	sub    esp,0xc
c0013697:	50                   	push   eax
c0013698:	e8 7f d5 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001369d:	83 c4 10             	add    esp,0x10
c00136a0:	0f b7 c0             	movzx  eax,ax
c00136a3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00136a7:	90                   	nop
c00136a8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00136ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00136ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00136b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136b6:	0f b7 c0             	movzx  eax,ax
c00136b9:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00136bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136c1:	c1 e8 10             	shr    eax,0x10
c00136c4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00136c8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00136cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00136ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00136d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136d6:	0f b7 c0             	movzx  eax,ax
c00136d9:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00136dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136e1:	c1 e8 10             	shr    eax,0x10
c00136e4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00136e8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00136ed:	83 ec 0c             	sub    esp,0xc
c00136f0:	50                   	push   eax
c00136f1:	e8 26 d5 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00136f6:	83 c4 10             	add    esp,0x10
c00136f9:	0f b7 c0             	movzx  eax,ax
c00136fc:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013700:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0013705:	83 ec 0c             	sub    esp,0xc
c0013708:	50                   	push   eax
c0013709:	e8 0e d5 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001370e:	83 c4 10             	add    esp,0x10
c0013711:	0f b7 c0             	movzx  eax,ax
c0013714:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013718:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001371c:	c1 e8 10             	shr    eax,0x10
c001371f:	89 c2                	mov    edx,eax
c0013721:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013725:	0f b7 c0             	movzx  eax,ax
c0013728:	01 d0                	add    eax,edx
c001372a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001372e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013732:	c1 e8 10             	shr    eax,0x10
c0013735:	89 c2                	mov    edx,eax
c0013737:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001373b:	0f b7 c0             	movzx  eax,ax
c001373e:	01 d0                	add    eax,edx
c0013740:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013744:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013748:	f7 d0                	not    eax
c001374a:	83 c4 2c             	add    esp,0x2c
c001374d:	c3                   	ret    
c001374e:	66 90                	xchg   ax,ax

c0013750 <inet_chksum>:
c0013750:	83 ec 1c             	sub    esp,0x1c
c0013753:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013757:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001375c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0013761:	83 ec 08             	sub    esp,0x8
c0013764:	50                   	push   eax
c0013765:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013769:	e8 6a fb ff ff       	call   c00132d8 <lwip_standard_chksum>
c001376e:	83 c4 10             	add    esp,0x10
c0013771:	f7 d0                	not    eax
c0013773:	83 c4 1c             	add    esp,0x1c
c0013776:	c3                   	ret    
c0013777:	90                   	nop

c0013778 <inet_chksum_pbuf>:
c0013778:	83 ec 1c             	sub    esp,0x1c
c001377b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013783:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c0013788:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001378c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013790:	e9 8b 00 00 00       	jmp    c0013820 <inet_chksum_pbuf+0xa8>
c0013795:	8d 76 00             	lea    esi,[esi+0x0]
c0013798:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001379c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00137a0:	0f b7 d0             	movzx  edx,ax
c00137a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00137a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00137aa:	83 ec 08             	sub    esp,0x8
c00137ad:	52                   	push   edx
c00137ae:	50                   	push   eax
c00137af:	e8 24 fb ff ff       	call   c00132d8 <lwip_standard_chksum>
c00137b4:	83 c4 10             	add    esp,0x10
c00137b7:	0f b7 c0             	movzx  eax,ax
c00137ba:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00137be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137c2:	c1 e8 10             	shr    eax,0x10
c00137c5:	89 c2                	mov    edx,eax
c00137c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137cb:	0f b7 c0             	movzx  eax,ax
c00137ce:	01 d0                	add    eax,edx
c00137d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00137d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00137d8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00137dc:	83 e0 01             	and    eax,0x1
c00137df:	0f b7 c0             	movzx  eax,ax
c00137e2:	85 c0                	test   eax,eax
c00137e4:	74 2e                	je     c0013814 <inet_chksum_pbuf+0x9c>
c00137e6:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00137ea:	ba 01 00 00 00       	mov    edx,0x1
c00137ef:	29 c2                	sub    edx,eax
c00137f1:	89 d0                	mov    eax,edx
c00137f3:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00137f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137fb:	0f b7 c0             	movzx  eax,ax
c00137fe:	83 ec 0c             	sub    esp,0xc
c0013801:	50                   	push   eax
c0013802:	e8 15 d4 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013807:	83 c4 10             	add    esp,0x10
c001380a:	0f b7 c0             	movzx  eax,ax
c001380d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013811:	8d 76 00             	lea    esi,[esi+0x0]
c0013814:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013818:	8b 00                	mov    eax,DWORD PTR [eax]
c001381a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001381e:	66 90                	xchg   ax,ax
c0013820:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013825:	0f 85 6d ff ff ff    	jne    c0013798 <inet_chksum_pbuf+0x20>
c001382b:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0013830:	85 c0                	test   eax,eax
c0013832:	74 1c                	je     c0013850 <inet_chksum_pbuf+0xd8>
c0013834:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013838:	0f b7 c0             	movzx  eax,ax
c001383b:	83 ec 0c             	sub    esp,0xc
c001383e:	50                   	push   eax
c001383f:	e8 d8 d3 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013844:	83 c4 10             	add    esp,0x10
c0013847:	0f b7 c0             	movzx  eax,ax
c001384a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001384e:	66 90                	xchg   ax,ax
c0013850:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013854:	f7 d0                	not    eax
c0013856:	83 c4 1c             	add    esp,0x1c
c0013859:	c3                   	ret    
c001385a:	66 90                	xchg   ax,ax

c001385c <ip_route>:
c001385c:	83 ec 10             	sub    esp,0x10
c001385f:	a1 10 77 03 c0       	mov    eax,ds:0xc0037710
c0013864:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013868:	eb 42                	jmp    c00138ac <ip_route+0x50>
c001386a:	66 90                	xchg   ax,ax
c001386c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013870:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013873:	83 e0 01             	and    eax,0x1
c0013876:	0f b6 c0             	movzx  eax,al
c0013879:	85 c0                	test   eax,eax
c001387b:	74 23                	je     c00138a0 <ip_route+0x44>
c001387d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013881:	8b 10                	mov    edx,DWORD PTR [eax]
c0013883:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013887:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001388a:	31 c2                	xor    edx,eax
c001388c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013890:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013893:	21 d0                	and    eax,edx
c0013895:	75 09                	jne    c00138a0 <ip_route+0x44>
c0013897:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001389b:	eb 4f                	jmp    c00138ec <ip_route+0x90>
c001389d:	8d 76 00             	lea    esi,[esi+0x0]
c00138a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00138a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00138aa:	66 90                	xchg   ax,ax
c00138ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00138b1:	75 b9                	jne    c001386c <ip_route+0x10>
c00138b3:	a1 14 77 03 c0       	mov    eax,ds:0xc0037714
c00138b8:	85 c0                	test   eax,eax
c00138ba:	74 10                	je     c00138cc <ip_route+0x70>
c00138bc:	a1 14 77 03 c0       	mov    eax,ds:0xc0037714
c00138c1:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00138c4:	0f b6 c0             	movzx  eax,al
c00138c7:	83 e0 01             	and    eax,0x1
c00138ca:	75 18                	jne    c00138e4 <ip_route+0x88>
c00138cc:	66 a1 76 77 03 c0    	mov    ax,ds:0xc0037776
c00138d2:	83 c0 01             	add    eax,0x1
c00138d5:	66 a3 76 77 03 c0    	mov    ds:0xc0037776,ax
c00138db:	b8 00 00 00 00       	mov    eax,0x0
c00138e0:	eb 0a                	jmp    c00138ec <ip_route+0x90>
c00138e2:	66 90                	xchg   ax,ax
c00138e4:	a1 14 77 03 c0       	mov    eax,ds:0xc0037714
c00138e9:	8d 76 00             	lea    esi,[esi+0x0]
c00138ec:	83 c4 10             	add    esp,0x10
c00138ef:	c3                   	ret    

c00138f0 <ip_input>:
c00138f0:	83 ec 1c             	sub    esp,0x1c
c00138f3:	66 a1 6a 77 03 c0    	mov    ax,ds:0xc003776a
c00138f9:	83 c0 01             	add    eax,0x1
c00138fc:	66 a3 6a 77 03 c0    	mov    ds:0xc003776a,ax
c0013902:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013906:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013909:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001390d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013911:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013914:	0f b7 c0             	movzx  eax,ax
c0013917:	83 ec 0c             	sub    esp,0xc
c001391a:	50                   	push   eax
c001391b:	e8 fc d2 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013920:	83 c4 10             	add    esp,0x10
c0013923:	0f b7 c0             	movzx  eax,ax
c0013926:	c1 e8 0c             	shr    eax,0xc
c0013929:	0f b7 c0             	movzx  eax,ax
c001392c:	83 f8 04             	cmp    eax,0x4
c001392f:	74 37                	je     c0013968 <ip_input+0x78>
c0013931:	83 ec 0c             	sub    esp,0xc
c0013934:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013938:	e8 d7 4b ff ff       	call   c0008514 <pbuf_free>
c001393d:	83 c4 10             	add    esp,0x10
c0013940:	66 a1 7c 77 03 c0    	mov    ax,ds:0xc003777c
c0013946:	83 c0 01             	add    eax,0x1
c0013949:	66 a3 7c 77 03 c0    	mov    ds:0xc003777c,ax
c001394f:	66 a1 6e 77 03 c0    	mov    ax,ds:0xc003776e
c0013955:	83 c0 01             	add    eax,0x1
c0013958:	66 a3 6e 77 03 c0    	mov    ds:0xc003776e,ax
c001395e:	b0 00                	mov    al,0x0
c0013960:	e9 cb 03 00 00       	jmp    c0013d30 <ip_input+0x440>
c0013965:	8d 76 00             	lea    esi,[esi+0x0]
c0013968:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001396c:	66 8b 00             	mov    ax,WORD PTR [eax]
c001396f:	0f b7 c0             	movzx  eax,ax
c0013972:	83 ec 0c             	sub    esp,0xc
c0013975:	50                   	push   eax
c0013976:	e8 a1 d2 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001397b:	83 c4 10             	add    esp,0x10
c001397e:	0f b7 c0             	movzx  eax,ax
c0013981:	c1 e8 08             	shr    eax,0x8
c0013984:	83 e0 0f             	and    eax,0xf
c0013987:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c001398c:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c0013991:	c1 e0 02             	shl    eax,0x2
c0013994:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0013999:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001399d:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c00139a1:	0f b7 c0             	movzx  eax,ax
c00139a4:	83 ec 0c             	sub    esp,0xc
c00139a7:	50                   	push   eax
c00139a8:	e8 6f d2 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00139ad:	83 c4 10             	add    esp,0x10
c00139b0:	66 89 04 24          	mov    WORD PTR [esp],ax
c00139b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00139b8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00139bc:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c00139c1:	0f b7 c0             	movzx  eax,ax
c00139c4:	39 c2                	cmp    edx,eax
c00139c6:	77 14                	ja     c00139dc <ip_input+0xec>
c00139c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00139cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00139cf:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c00139d3:	0f b7 c0             	movzx  eax,ax
c00139d6:	39 c2                	cmp    edx,eax
c00139d8:	76 36                	jbe    c0013a10 <ip_input+0x120>
c00139da:	66 90                	xchg   ax,ax
c00139dc:	83 ec 0c             	sub    esp,0xc
c00139df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139e3:	e8 2c 4b ff ff       	call   c0008514 <pbuf_free>
c00139e8:	83 c4 10             	add    esp,0x10
c00139eb:	66 a1 72 77 03 c0    	mov    ax,ds:0xc0037772
c00139f1:	83 c0 01             	add    eax,0x1
c00139f4:	66 a3 72 77 03 c0    	mov    ds:0xc0037772,ax
c00139fa:	66 a1 6e 77 03 c0    	mov    ax,ds:0xc003776e
c0013a00:	83 c0 01             	add    eax,0x1
c0013a03:	66 a3 6e 77 03 c0    	mov    ds:0xc003776e,ax
c0013a09:	b0 00                	mov    al,0x0
c0013a0b:	e9 20 03 00 00       	jmp    c0013d30 <ip_input+0x440>
c0013a10:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c0013a15:	83 ec 08             	sub    esp,0x8
c0013a18:	50                   	push   eax
c0013a19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a1d:	e8 2e fd ff ff       	call   c0013750 <inet_chksum>
c0013a22:	83 c4 10             	add    esp,0x10
c0013a25:	0f b7 c0             	movzx  eax,ax
c0013a28:	85 c0                	test   eax,eax
c0013a2a:	74 34                	je     c0013a60 <ip_input+0x170>
c0013a2c:	83 ec 0c             	sub    esp,0xc
c0013a2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a33:	e8 dc 4a ff ff       	call   c0008514 <pbuf_free>
c0013a38:	83 c4 10             	add    esp,0x10
c0013a3b:	66 a1 70 77 03 c0    	mov    ax,ds:0xc0037770
c0013a41:	83 c0 01             	add    eax,0x1
c0013a44:	66 a3 70 77 03 c0    	mov    ds:0xc0037770,ax
c0013a4a:	66 a1 6e 77 03 c0    	mov    ax,ds:0xc003776e
c0013a50:	83 c0 01             	add    eax,0x1
c0013a53:	66 a3 6e 77 03 c0    	mov    ds:0xc003776e,ax
c0013a59:	b0 00                	mov    al,0x0
c0013a5b:	e9 d0 02 00 00       	jmp    c0013d30 <ip_input+0x440>
c0013a60:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0013a64:	83 ec 08             	sub    esp,0x8
c0013a67:	50                   	push   eax
c0013a68:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a6c:	e8 77 50 ff ff       	call   c0008ae8 <pbuf_realloc>
c0013a71:	83 c4 10             	add    esp,0x10
c0013a74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a78:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013a7b:	a3 98 78 03 c0       	mov    ds:0xc0037898,eax
c0013a80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a84:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013a87:	a3 90 78 03 c0       	mov    ds:0xc0037890,eax
c0013a8c:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0013a94:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013a98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013aa0:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013aa3:	83 e0 01             	and    eax,0x1
c0013aa6:	0f b6 c0             	movzx  eax,al
c0013aa9:	85 c0                	test   eax,eax
c0013aab:	74 43                	je     c0013af0 <ip_input+0x200>
c0013aad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013ab1:	83 c0 04             	add    eax,0x4
c0013ab4:	74 3a                	je     c0013af0 <ip_input+0x200>
c0013ab6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013aba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013abd:	85 c0                	test   eax,eax
c0013abf:	74 2f                	je     c0013af0 <ip_input+0x200>
c0013ac1:	8b 15 98 78 03 c0    	mov    edx,DWORD PTR ds:0xc0037898
c0013ac7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013ace:	39 c2                	cmp    edx,eax
c0013ad0:	74 66                	je     c0013b38 <ip_input+0x248>
c0013ad2:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c0013ad7:	83 ec 08             	sub    esp,0x8
c0013ada:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013ade:	50                   	push   eax
c0013adf:	e8 d4 05 00 00       	call   c00140b8 <ip4_addr_isbroadcast>
c0013ae4:	83 c4 10             	add    esp,0x10
c0013ae7:	0f b6 c0             	movzx  eax,al
c0013aea:	85 c0                	test   eax,eax
c0013aec:	75 4a                	jne    c0013b38 <ip_input+0x248>
c0013aee:	66 90                	xchg   ax,ax
c0013af0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0013af5:	74 15                	je     c0013b0c <ip_input+0x21c>
c0013af7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013aff:	a1 10 77 03 c0       	mov    eax,ds:0xc0037710
c0013b04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013b08:	eb 0e                	jmp    c0013b18 <ip_input+0x228>
c0013b0a:	66 90                	xchg   ax,ax
c0013b0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013b10:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013b16:	66 90                	xchg   ax,ax
c0013b18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013b1c:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0013b20:	75 0a                	jne    c0013b2c <ip_input+0x23c>
c0013b22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013b26:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013b2c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013b31:	0f 85 65 ff ff ff    	jne    c0013a9c <ip_input+0x1ac>
c0013b37:	90                   	nop
c0013b38:	a1 90 78 03 c0       	mov    eax,ds:0xc0037890
c0013b3d:	83 ec 08             	sub    esp,0x8
c0013b40:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b44:	50                   	push   eax
c0013b45:	e8 6e 05 00 00       	call   c00140b8 <ip4_addr_isbroadcast>
c0013b4a:	83 c4 10             	add    esp,0x10
c0013b4d:	0f b6 c0             	movzx  eax,al
c0013b50:	85 c0                	test   eax,eax
c0013b52:	75 14                	jne    c0013b68 <ip_input+0x278>
c0013b54:	a1 90 78 03 c0       	mov    eax,ds:0xc0037890
c0013b59:	25 f0 00 00 00       	and    eax,0xf0
c0013b5e:	3d e0 00 00 00       	cmp    eax,0xe0
c0013b63:	75 2b                	jne    c0013b90 <ip_input+0x2a0>
c0013b65:	8d 76 00             	lea    esi,[esi+0x0]
c0013b68:	83 ec 0c             	sub    esp,0xc
c0013b6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b6f:	e8 a0 49 ff ff       	call   c0008514 <pbuf_free>
c0013b74:	83 c4 10             	add    esp,0x10
c0013b77:	66 a1 6e 77 03 c0    	mov    ax,ds:0xc003776e
c0013b7d:	83 c0 01             	add    eax,0x1
c0013b80:	66 a3 6e 77 03 c0    	mov    ds:0xc003776e,ax
c0013b86:	b0 00                	mov    al,0x0
c0013b88:	e9 a3 01 00 00       	jmp    c0013d30 <ip_input+0x440>
c0013b8d:	8d 76 00             	lea    esi,[esi+0x0]
c0013b90:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013b95:	75 19                	jne    c0013bb0 <ip_input+0x2c0>
c0013b97:	83 ec 0c             	sub    esp,0xc
c0013b9a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b9e:	e8 71 49 ff ff       	call   c0008514 <pbuf_free>
c0013ba3:	83 c4 10             	add    esp,0x10
c0013ba6:	b0 00                	mov    al,0x0
c0013ba8:	e9 83 01 00 00       	jmp    c0013d30 <ip_input+0x440>
c0013bad:	8d 76 00             	lea    esi,[esi+0x0]
c0013bb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013bb4:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0013bb8:	0f b7 c0             	movzx  eax,ax
c0013bbb:	25 3f ff 00 00       	and    eax,0xff3f
c0013bc0:	74 2e                	je     c0013bf0 <ip_input+0x300>
c0013bc2:	83 ec 0c             	sub    esp,0xc
c0013bc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013bc9:	e8 8a 13 00 00       	call   c0014f58 <ip_reass>
c0013bce:	83 c4 10             	add    esp,0x10
c0013bd1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013bd5:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0013bda:	75 08                	jne    c0013be4 <ip_input+0x2f4>
c0013bdc:	b0 00                	mov    al,0x0
c0013bde:	e9 4d 01 00 00       	jmp    c0013d30 <ip_input+0x440>
c0013be3:	90                   	nop
c0013be4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013be8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013beb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013bef:	90                   	nop
c0013bf0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013bf4:	a3 94 78 03 c0       	mov    ds:0xc0037894,eax
c0013bf9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013bfd:	a3 9c 78 03 c0       	mov    ds:0xc003789c,eax
c0013c02:	83 ec 08             	sub    esp,0x8
c0013c05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c0d:	e8 32 5c ff ff       	call   c0009844 <raw_input>
c0013c12:	83 c4 10             	add    esp,0x10
c0013c15:	0f b6 c0             	movzx  eax,al
c0013c18:	85 c0                	test   eax,eax
c0013c1a:	0f 85 e0 00 00 00    	jne    c0013d00 <ip_input+0x410>
c0013c20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013c24:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0013c27:	0f b6 c0             	movzx  eax,al
c0013c2a:	83 f8 06             	cmp    eax,0x6
c0013c2d:	74 25                	je     c0013c54 <ip_input+0x364>
c0013c2f:	83 f8 11             	cmp    eax,0x11
c0013c32:	74 08                	je     c0013c3c <ip_input+0x34c>
c0013c34:	83 f8 01             	cmp    eax,0x1
c0013c37:	74 33                	je     c0013c6c <ip_input+0x37c>
c0013c39:	eb 49                	jmp    c0013c84 <ip_input+0x394>
c0013c3b:	90                   	nop
c0013c3c:	83 ec 08             	sub    esp,0x8
c0013c3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c47:	e8 a8 d3 ff ff       	call   c0010ff4 <udp_input>
c0013c4c:	83 c4 10             	add    esp,0x10
c0013c4f:	e9 b0 00 00 00       	jmp    c0013d04 <ip_input+0x414>
c0013c54:	83 ec 08             	sub    esp,0x8
c0013c57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c5f:	e8 b0 a4 ff ff       	call   c000e114 <tcp_input>
c0013c64:	83 c4 10             	add    esp,0x10
c0013c67:	e9 98 00 00 00       	jmp    c0013d04 <ip_input+0x414>
c0013c6c:	83 ec 08             	sub    esp,0x8
c0013c6f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c77:	e8 70 f0 ff ff       	call   c0012cec <icmp_input>
c0013c7c:	83 c4 10             	add    esp,0x10
c0013c7f:	e9 80 00 00 00       	jmp    c0013d04 <ip_input+0x414>
c0013c84:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c0013c89:	83 ec 08             	sub    esp,0x8
c0013c8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c90:	50                   	push   eax
c0013c91:	e8 22 04 00 00       	call   c00140b8 <ip4_addr_isbroadcast>
c0013c96:	83 c4 10             	add    esp,0x10
c0013c99:	0f b6 c0             	movzx  eax,al
c0013c9c:	85 c0                	test   eax,eax
c0013c9e:	75 30                	jne    c0013cd0 <ip_input+0x3e0>
c0013ca0:	a1 98 78 03 c0       	mov    eax,ds:0xc0037898
c0013ca5:	25 f0 00 00 00       	and    eax,0xf0
c0013caa:	3d e0 00 00 00       	cmp    eax,0xe0
c0013caf:	74 1f                	je     c0013cd0 <ip_input+0x3e0>
c0013cb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013cb9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013cbc:	83 ec 08             	sub    esp,0x8
c0013cbf:	6a 02                	push   0x2
c0013cc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013cc5:	e8 c6 f5 ff ff       	call   c0013290 <icmp_dest_unreach>
c0013cca:	83 c4 10             	add    esp,0x10
c0013ccd:	8d 76 00             	lea    esi,[esi+0x0]
c0013cd0:	83 ec 0c             	sub    esp,0xc
c0013cd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013cd7:	e8 38 48 ff ff       	call   c0008514 <pbuf_free>
c0013cdc:	83 c4 10             	add    esp,0x10
c0013cdf:	66 a1 78 77 03 c0    	mov    ax,ds:0xc0037778
c0013ce5:	83 c0 01             	add    eax,0x1
c0013ce8:	66 a3 78 77 03 c0    	mov    ds:0xc0037778,ax
c0013cee:	66 a1 6e 77 03 c0    	mov    ax,ds:0xc003776e
c0013cf4:	83 c0 01             	add    eax,0x1
c0013cf7:	66 a3 6e 77 03 c0    	mov    ds:0xc003776e,ax
c0013cfd:	eb 05                	jmp    c0013d04 <ip_input+0x414>
c0013cff:	90                   	nop
c0013d00:	90                   	nop
c0013d01:	8d 76 00             	lea    esi,[esi+0x0]
c0013d04:	c7 05 94 78 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037894,0x0
c0013d0e:	c7 05 9c 78 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003789c,0x0
c0013d18:	c7 05 90 78 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037890,0x0
c0013d22:	c7 05 98 78 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037898,0x0
c0013d2c:	b0 00                	mov    al,0x0
c0013d2e:	66 90                	xchg   ax,ax
c0013d30:	83 c4 1c             	add    esp,0x1c
c0013d33:	c3                   	ret    

c0013d34 <ip_output_if>:
c0013d34:	83 ec 2c             	sub    esp,0x2c
c0013d37:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013d3b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0013d3f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0013d43:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013d47:	88 c8                	mov    al,cl
c0013d49:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013d4d:	88 d0                	mov    al,dl
c0013d4f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013d53:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013d5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d5f:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013d63:	0f b7 c0             	movzx  eax,ax
c0013d66:	83 f8 01             	cmp    eax,0x1
c0013d69:	74 15                	je     c0013d80 <ip_output_if+0x4c>
c0013d6b:	83 ec 08             	sub    esp,0x8
c0013d6e:	68 ea 15 03 c0       	push   0xc00315ea
c0013d73:	68 46 03 03 c0       	push   0xc0030346
c0013d78:	e8 cf c0 00 00       	call   c001fe4c <CPrintf>
c0013d7d:	83 c4 10             	add    esp,0x10
c0013d80:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0013d85:	0f 84 f5 01 00 00    	je     c0013f80 <ip_output_if+0x24c>
c0013d8b:	66 c7 44 24 1a 14 00 	mov    WORD PTR [esp+0x1a],0x14
c0013d92:	83 ec 08             	sub    esp,0x8
c0013d95:	6a 14                	push   0x14
c0013d97:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013d9b:	e8 d4 45 ff ff       	call   c0008374 <pbuf_header>
c0013da0:	83 c4 10             	add    esp,0x10
c0013da3:	0f b6 c0             	movzx  eax,al
c0013da6:	85 c0                	test   eax,eax
c0013da8:	74 16                	je     c0013dc0 <ip_output_if+0x8c>
c0013daa:	66 a1 7c 77 03 c0    	mov    ax,ds:0xc003777c
c0013db0:	83 c0 01             	add    eax,0x1
c0013db3:	66 a3 7c 77 03 c0    	mov    ds:0xc003777c,ax
c0013db9:	b0 fe                	mov    al,0xfe
c0013dbb:	e9 4c 02 00 00       	jmp    c001400c <ip_output_if+0x2d8>
c0013dc0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013dc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013dc7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013dcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013dcf:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013dd3:	0f b7 c0             	movzx  eax,ax
c0013dd6:	83 f8 13             	cmp    eax,0x13
c0013dd9:	77 15                	ja     c0013df0 <ip_output_if+0xbc>
c0013ddb:	83 ec 08             	sub    esp,0x8
c0013dde:	68 f8 15 03 c0       	push   0xc00315f8
c0013de3:	68 46 03 03 c0       	push   0xc0030346
c0013de8:	e8 5f c0 00 00       	call   c001fe4c <CPrintf>
c0013ded:	83 c4 10             	add    esp,0x10
c0013df0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013df4:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013df8:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0013dfb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013dff:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013e03:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0013e06:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0013e0b:	c1 e0 08             	shl    eax,0x8
c0013e0e:	89 c2                	mov    edx,eax
c0013e10:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013e15:	09 d0                	or     eax,edx
c0013e17:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013e1b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013e1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e25:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013e28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e2c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013e2f:	0f b7 c0             	movzx  eax,ax
c0013e32:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013e36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e3a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013e3d:	c1 e8 10             	shr    eax,0x10
c0013e40:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013e44:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0013e49:	c1 e8 02             	shr    eax,0x2
c0013e4c:	0f b7 c0             	movzx  eax,ax
c0013e4f:	c1 e0 08             	shl    eax,0x8
c0013e52:	80 cc 40             	or     ah,0x40
c0013e55:	89 c2                	mov    edx,eax
c0013e57:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013e5c:	09 d0                	or     eax,edx
c0013e5e:	0f b7 c0             	movzx  eax,ax
c0013e61:	83 ec 0c             	sub    esp,0xc
c0013e64:	50                   	push   eax
c0013e65:	e8 b2 cd fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013e6a:	83 c4 10             	add    esp,0x10
c0013e6d:	89 c2                	mov    edx,eax
c0013e6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e73:	66 89 10             	mov    WORD PTR [eax],dx
c0013e76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e7a:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013e7d:	0f b7 c0             	movzx  eax,ax
c0013e80:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013e84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e88:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013e8b:	0f b7 c0             	movzx  eax,ax
c0013e8e:	83 ec 0c             	sub    esp,0xc
c0013e91:	50                   	push   eax
c0013e92:	e8 85 cd fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013e97:	83 c4 10             	add    esp,0x10
c0013e9a:	89 c2                	mov    edx,eax
c0013e9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ea0:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0013ea4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ea8:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013eac:	0f b7 c0             	movzx  eax,ax
c0013eaf:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013eb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013eb7:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0013ebd:	66 a1 a0 b9 03 c0    	mov    ax,ds:0xc003b9a0
c0013ec3:	0f b7 c0             	movzx  eax,ax
c0013ec6:	83 ec 0c             	sub    esp,0xc
c0013ec9:	50                   	push   eax
c0013eca:	e8 4d cd fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013ecf:	83 c4 10             	add    esp,0x10
c0013ed2:	89 c2                	mov    edx,eax
c0013ed4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ed8:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0013edc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ee0:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0013ee4:	0f b7 c0             	movzx  eax,ax
c0013ee7:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013eeb:	66 a1 a0 b9 03 c0    	mov    ax,ds:0xc003b9a0
c0013ef1:	83 c0 01             	add    eax,0x1
c0013ef4:	66 a3 a0 b9 03 c0    	mov    ds:0xc003b9a0,ax
c0013efa:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013eff:	74 0b                	je     c0013f0c <ip_output_if+0x1d8>
c0013f01:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013f05:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f07:	85 c0                	test   eax,eax
c0013f09:	75 11                	jne    c0013f1c <ip_output_if+0x1e8>
c0013f0b:	90                   	nop
c0013f0c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013f10:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013f13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f17:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013f1a:	eb 10                	jmp    c0013f2c <ip_output_if+0x1f8>
c0013f1c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013f20:	8b 10                	mov    edx,DWORD PTR [eax]
c0013f22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f26:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013f29:	8d 76 00             	lea    esi,[esi+0x0]
c0013f2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f30:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013f33:	0f b7 c0             	movzx  eax,ax
c0013f36:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013f3a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f3e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013f41:	c1 e8 10             	shr    eax,0x10
c0013f44:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013f48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f4c:	c1 e8 10             	shr    eax,0x10
c0013f4f:	89 c2                	mov    edx,eax
c0013f51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f55:	0f b7 c0             	movzx  eax,ax
c0013f58:	01 d0                	add    eax,edx
c0013f5a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013f5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f62:	c1 e8 10             	shr    eax,0x10
c0013f65:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013f69:	f7 54 24 1c          	not    DWORD PTR [esp+0x1c]
c0013f6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f71:	89 c2                	mov    edx,eax
c0013f73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f77:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0013f7b:	eb 23                	jmp    c0013fa0 <ip_output_if+0x26c>
c0013f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0013f80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013f87:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f8f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013f92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013f96:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013f9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0013f9e:	66 90                	xchg   ax,ax
c0013fa0:	66 a1 68 77 03 c0    	mov    ax,ds:0xc0037768
c0013fa6:	83 c0 01             	add    eax,0x1
c0013fa9:	66 a3 68 77 03 c0    	mov    ds:0xc0037768,ax
c0013faf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013fb3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013fb6:	0f b7 c0             	movzx  eax,ax
c0013fb9:	85 c0                	test   eax,eax
c0013fbb:	74 33                	je     c0013ff0 <ip_output_if+0x2bc>
c0013fbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013fc1:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0013fc4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013fc8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013fcb:	0f b7 d2             	movzx  edx,dx
c0013fce:	0f b7 c0             	movzx  eax,ax
c0013fd1:	39 c2                	cmp    edx,eax
c0013fd3:	76 1b                	jbe    c0013ff0 <ip_output_if+0x2bc>
c0013fd5:	83 ec 04             	sub    esp,0x4
c0013fd8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013fdc:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013fe0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013fe4:	e8 37 14 00 00       	call   c0015420 <ip_frag>
c0013fe9:	83 c4 10             	add    esp,0x10
c0013fec:	eb 1e                	jmp    c001400c <ip_output_if+0x2d8>
c0013fee:	66 90                	xchg   ax,ax
c0013ff0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013ff4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0013ff7:	83 ec 04             	sub    esp,0x4
c0013ffa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013ffe:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0014002:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014006:	ff d0                	call   eax
c0014008:	83 c4 10             	add    esp,0x10
c001400b:	90                   	nop
c001400c:	83 c4 2c             	add    esp,0x2c
c001400f:	c3                   	ret    

c0014010 <ip_output>:
c0014010:	83 ec 2c             	sub    esp,0x2c
c0014013:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0014017:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001401b:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001401f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014023:	88 c8                	mov    al,cl
c0014025:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0014029:	88 d0                	mov    al,dl
c001402b:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001402f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014033:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0014037:	0f b7 c0             	movzx  eax,ax
c001403a:	83 f8 01             	cmp    eax,0x1
c001403d:	74 15                	je     c0014054 <ip_output+0x44>
c001403f:	83 ec 08             	sub    esp,0x8
c0014042:	68 ea 15 03 c0       	push   0xc00315ea
c0014047:	68 46 03 03 c0       	push   0xc0030346
c001404c:	e8 fb bd 00 00       	call   c001fe4c <CPrintf>
c0014051:	83 c4 10             	add    esp,0x10
c0014054:	83 ec 0c             	sub    esp,0xc
c0014057:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001405b:	e8 fc f7 ff ff       	call   c001385c <ip_route>
c0014060:	83 c4 10             	add    esp,0x10
c0014063:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014067:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001406c:	75 16                	jne    c0014084 <ip_output+0x74>
c001406e:	66 a1 76 77 03 c0    	mov    ax,ds:0xc0037776
c0014074:	83 c0 01             	add    eax,0x1
c0014077:	66 a3 76 77 03 c0    	mov    ds:0xc0037776,ax
c001407d:	b0 fc                	mov    al,0xfc
c001407f:	eb 33                	jmp    c00140b4 <ip_output+0xa4>
c0014081:	8d 76 00             	lea    esi,[esi+0x0]
c0014084:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0014089:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001408e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0014093:	83 ec 04             	sub    esp,0x4
c0014096:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001409a:	51                   	push   ecx
c001409b:	52                   	push   edx
c001409c:	50                   	push   eax
c001409d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00140a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00140a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00140a9:	e8 86 fc ff ff       	call   c0013d34 <ip_output_if>
c00140ae:	83 c4 20             	add    esp,0x20
c00140b1:	8d 76 00             	lea    esi,[esi+0x0]
c00140b4:	83 c4 2c             	add    esp,0x2c
c00140b7:	c3                   	ret    

c00140b8 <ip4_addr_isbroadcast>:
c00140b8:	83 ec 10             	sub    esp,0x10
c00140bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00140bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00140c3:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c00140c8:	74 0a                	je     c00140d4 <ip4_addr_isbroadcast+0x1c>
c00140ca:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00140cf:	75 07                	jne    c00140d8 <ip4_addr_isbroadcast+0x20>
c00140d1:	8d 76 00             	lea    esi,[esi+0x0]
c00140d4:	b0 01                	mov    al,0x1
c00140d6:	eb 64                	jmp    c001413c <ip4_addr_isbroadcast+0x84>
c00140d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00140dc:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00140df:	0f b6 c0             	movzx  eax,al
c00140e2:	83 e0 02             	and    eax,0x2
c00140e5:	75 05                	jne    c00140ec <ip4_addr_isbroadcast+0x34>
c00140e7:	b0 00                	mov    al,0x0
c00140e9:	eb 51                	jmp    c001413c <ip4_addr_isbroadcast+0x84>
c00140eb:	90                   	nop
c00140ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00140f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00140f3:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00140f7:	75 07                	jne    c0014100 <ip4_addr_isbroadcast+0x48>
c00140f9:	b0 00                	mov    al,0x0
c00140fb:	eb 3f                	jmp    c001413c <ip4_addr_isbroadcast+0x84>
c00140fd:	8d 76 00             	lea    esi,[esi+0x0]
c0014100:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014104:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014108:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001410b:	31 c2                	xor    edx,eax
c001410d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014111:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0014114:	21 d0                	and    eax,edx
c0014116:	75 20                	jne    c0014138 <ip4_addr_isbroadcast+0x80>
c0014118:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001411c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001411f:	f7 d0                	not    eax
c0014121:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0014125:	89 c2                	mov    edx,eax
c0014127:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001412b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001412e:	f7 d0                	not    eax
c0014130:	39 c2                	cmp    edx,eax
c0014132:	75 04                	jne    c0014138 <ip4_addr_isbroadcast+0x80>
c0014134:	b0 01                	mov    al,0x1
c0014136:	eb 04                	jmp    c001413c <ip4_addr_isbroadcast+0x84>
c0014138:	b0 00                	mov    al,0x0
c001413a:	66 90                	xchg   ax,ax
c001413c:	83 c4 10             	add    esp,0x10
c001413f:	c3                   	ret    

c0014140 <ip4_addr_netmask_valid>:
c0014140:	83 ec 1c             	sub    esp,0x1c
c0014143:	83 ec 0c             	sub    esp,0xc
c0014146:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001414a:	e8 f1 ca fe ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c001414f:	83 c4 10             	add    esp,0x10
c0014152:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014156:	c7 44 24 0c 00 00 00 80 	mov    DWORD PTR [esp+0xc],0x80000000
c001415e:	eb 10                	jmp    c0014170 <ip4_addr_netmask_valid+0x30>
c0014160:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014164:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0014168:	74 12                	je     c001417c <ip4_addr_netmask_valid+0x3c>
c001416a:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c001416e:	66 90                	xchg   ax,ax
c0014170:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014175:	75 e9                	jne    c0014160 <ip4_addr_netmask_valid+0x20>
c0014177:	eb 1b                	jmp    c0014194 <ip4_addr_netmask_valid+0x54>
c0014179:	8d 76 00             	lea    esi,[esi+0x0]
c001417c:	90                   	nop
c001417d:	eb 15                	jmp    c0014194 <ip4_addr_netmask_valid+0x54>
c001417f:	90                   	nop
c0014180:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014184:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0014188:	74 06                	je     c0014190 <ip4_addr_netmask_valid+0x50>
c001418a:	b0 00                	mov    al,0x0
c001418c:	eb 12                	jmp    c00141a0 <ip4_addr_netmask_valid+0x60>
c001418e:	66 90                	xchg   ax,ax
c0014190:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c0014194:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014199:	75 e5                	jne    c0014180 <ip4_addr_netmask_valid+0x40>
c001419b:	b0 01                	mov    al,0x1
c001419d:	8d 76 00             	lea    esi,[esi+0x0]
c00141a0:	83 c4 1c             	add    esp,0x1c
c00141a3:	c3                   	ret    

c00141a4 <ipaddr_aton>:
c00141a4:	83 ec 2c             	sub    esp,0x2c
c00141a7:	8d 44 24 04          	lea    eax,[esp+0x4]
c00141ab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00141af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00141b3:	8a 00                	mov    al,BYTE PTR [eax]
c00141b5:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00141b9:	8d 76 00             	lea    esi,[esi+0x0]
c00141bc:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00141c0:	0f b6 c0             	movzx  eax,al
c00141c3:	83 f8 2f             	cmp    eax,0x2f
c00141c6:	76 0c                	jbe    c00141d4 <ipaddr_aton+0x30>
c00141c8:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00141cc:	0f b6 c0             	movzx  eax,al
c00141cf:	83 f8 39             	cmp    eax,0x39
c00141d2:	76 0c                	jbe    c00141e0 <ipaddr_aton+0x3c>
c00141d4:	b8 00 00 00 00       	mov    eax,0x0
c00141d9:	e9 f2 02 00 00       	jmp    c00144d0 <ipaddr_aton+0x32c>
c00141de:	66 90                	xchg   ax,ax
c00141e0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00141e8:	c6 44 24 1b 0a       	mov    BYTE PTR [esp+0x1b],0xa
c00141ed:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00141f2:	83 f8 30             	cmp    eax,0x30
c00141f5:	75 45                	jne    c001423c <ipaddr_aton+0x98>
c00141f7:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00141fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014200:	8a 00                	mov    al,BYTE PTR [eax]
c0014202:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014206:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001420b:	83 f8 78             	cmp    eax,0x78
c001420e:	74 0c                	je     c001421c <ipaddr_aton+0x78>
c0014210:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014215:	83 f8 58             	cmp    eax,0x58
c0014218:	75 1a                	jne    c0014234 <ipaddr_aton+0x90>
c001421a:	66 90                	xchg   ax,ax
c001421c:	c6 44 24 1b 10       	mov    BYTE PTR [esp+0x1b],0x10
c0014221:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0014226:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001422a:	8a 00                	mov    al,BYTE PTR [eax]
c001422c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014230:	eb 0a                	jmp    c001423c <ipaddr_aton+0x98>
c0014232:	66 90                	xchg   ax,ax
c0014234:	c6 44 24 1b 08       	mov    BYTE PTR [esp+0x1b],0x8
c0014239:	8d 76 00             	lea    esi,[esi+0x0]
c001423c:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014240:	0f b6 c0             	movzx  eax,al
c0014243:	83 f8 2f             	cmp    eax,0x2f
c0014246:	76 3c                	jbe    c0014284 <ipaddr_aton+0xe0>
c0014248:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001424c:	0f b6 c0             	movzx  eax,al
c001424f:	83 f8 39             	cmp    eax,0x39
c0014252:	77 30                	ja     c0014284 <ipaddr_aton+0xe0>
c0014254:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0014259:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c001425e:	89 c2                	mov    edx,eax
c0014260:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014265:	01 d0                	add    eax,edx
c0014267:	83 e8 30             	sub    eax,0x30
c001426a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001426e:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0014273:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014277:	8a 00                	mov    al,BYTE PTR [eax]
c0014279:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001427d:	e9 ae 00 00 00       	jmp    c0014330 <ipaddr_aton+0x18c>
c0014282:	66 90                	xchg   ax,ax
c0014284:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0014289:	83 f8 10             	cmp    eax,0x10
c001428c:	0f 85 a6 00 00 00    	jne    c0014338 <ipaddr_aton+0x194>
c0014292:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014296:	0f b6 c0             	movzx  eax,al
c0014299:	83 f8 2f             	cmp    eax,0x2f
c001429c:	76 0e                	jbe    c00142ac <ipaddr_aton+0x108>
c001429e:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00142a2:	0f b6 c0             	movzx  eax,al
c00142a5:	83 f8 39             	cmp    eax,0x39
c00142a8:	76 32                	jbe    c00142dc <ipaddr_aton+0x138>
c00142aa:	66 90                	xchg   ax,ax
c00142ac:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00142b0:	0f b6 c0             	movzx  eax,al
c00142b3:	83 f8 60             	cmp    eax,0x60
c00142b6:	76 0c                	jbe    c00142c4 <ipaddr_aton+0x120>
c00142b8:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00142bc:	0f b6 c0             	movzx  eax,al
c00142bf:	83 f8 66             	cmp    eax,0x66
c00142c2:	76 18                	jbe    c00142dc <ipaddr_aton+0x138>
c00142c4:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00142c8:	0f b6 c0             	movzx  eax,al
c00142cb:	83 f8 40             	cmp    eax,0x40
c00142ce:	76 68                	jbe    c0014338 <ipaddr_aton+0x194>
c00142d0:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00142d4:	0f b6 c0             	movzx  eax,al
c00142d7:	83 f8 46             	cmp    eax,0x46
c00142da:	77 5c                	ja     c0014338 <ipaddr_aton+0x194>
c00142dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00142e0:	c1 e0 04             	shl    eax,0x4
c00142e3:	89 c2                	mov    edx,eax
c00142e5:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142ea:	8d 48 0a             	lea    ecx,[eax+0xa]
c00142ed:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00142f1:	0f b6 c0             	movzx  eax,al
c00142f4:	83 f8 60             	cmp    eax,0x60
c00142f7:	76 13                	jbe    c001430c <ipaddr_aton+0x168>
c00142f9:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00142fd:	0f b6 c0             	movzx  eax,al
c0014300:	83 f8 7a             	cmp    eax,0x7a
c0014303:	77 07                	ja     c001430c <ipaddr_aton+0x168>
c0014305:	b8 61 00 00 00       	mov    eax,0x61
c001430a:	eb 08                	jmp    c0014314 <ipaddr_aton+0x170>
c001430c:	b8 41 00 00 00       	mov    eax,0x41
c0014311:	8d 76 00             	lea    esi,[esi+0x0]
c0014314:	29 c1                	sub    ecx,eax
c0014316:	89 c8                	mov    eax,ecx
c0014318:	09 d0                	or     eax,edx
c001431a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001431e:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0014323:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014327:	8a 00                	mov    al,BYTE PTR [eax]
c0014329:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001432d:	8d 76 00             	lea    esi,[esi+0x0]
c0014330:	e9 07 ff ff ff       	jmp    c001423c <ipaddr_aton+0x98>
c0014335:	8d 76 00             	lea    esi,[esi+0x0]
c0014338:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001433d:	83 f8 2e             	cmp    eax,0x2e
c0014340:	75 42                	jne    c0014384 <ipaddr_aton+0x1e0>
c0014342:	8d 44 24 04          	lea    eax,[esp+0x4]
c0014346:	83 c0 0c             	add    eax,0xc
c0014349:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c001434d:	72 0d                	jb     c001435c <ipaddr_aton+0x1b8>
c001434f:	b8 00 00 00 00       	mov    eax,0x0
c0014354:	e9 77 01 00 00       	jmp    c00144d0 <ipaddr_aton+0x32c>
c0014359:	8d 76 00             	lea    esi,[esi+0x0]
c001435c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014360:	8d 50 04             	lea    edx,[eax+0x4]
c0014363:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014367:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001436b:	89 10                	mov    DWORD PTR [eax],edx
c001436d:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0014372:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014376:	8a 00                	mov    al,BYTE PTR [eax]
c0014378:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001437c:	e9 3b fe ff ff       	jmp    c00141bc <ipaddr_aton+0x18>
c0014381:	8d 76 00             	lea    esi,[esi+0x0]
c0014384:	90                   	nop
c0014385:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001438a:	85 c0                	test   eax,eax
c001438c:	74 46                	je     c00143d4 <ipaddr_aton+0x230>
c001438e:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014393:	83 f8 20             	cmp    eax,0x20
c0014396:	74 3c                	je     c00143d4 <ipaddr_aton+0x230>
c0014398:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001439d:	83 f8 0c             	cmp    eax,0xc
c00143a0:	74 32                	je     c00143d4 <ipaddr_aton+0x230>
c00143a2:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00143a7:	83 f8 0a             	cmp    eax,0xa
c00143aa:	74 28                	je     c00143d4 <ipaddr_aton+0x230>
c00143ac:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00143b1:	83 f8 0d             	cmp    eax,0xd
c00143b4:	74 1e                	je     c00143d4 <ipaddr_aton+0x230>
c00143b6:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00143bb:	83 f8 09             	cmp    eax,0x9
c00143be:	74 14                	je     c00143d4 <ipaddr_aton+0x230>
c00143c0:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00143c5:	83 f8 0b             	cmp    eax,0xb
c00143c8:	74 0a                	je     c00143d4 <ipaddr_aton+0x230>
c00143ca:	b8 00 00 00 00       	mov    eax,0x0
c00143cf:	e9 fc 00 00 00       	jmp    c00144d0 <ipaddr_aton+0x32c>
c00143d4:	8d 44 24 04          	lea    eax,[esp+0x4]
c00143d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00143dc:	29 c2                	sub    edx,eax
c00143de:	89 d0                	mov    eax,edx
c00143e0:	c1 f8 02             	sar    eax,0x2
c00143e3:	83 c0 01             	add    eax,0x1
c00143e6:	83 f8 04             	cmp    eax,0x4
c00143e9:	0f 87 9d 00 00 00    	ja     c001448c <ipaddr_aton+0x2e8>
c00143ef:	8b 04 85 30 16 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce9d0]
c00143f6:	ff e0                	jmp    eax
c00143f8:	b8 00 00 00 00       	mov    eax,0x0
c00143fd:	e9 ce 00 00 00       	jmp    c00144d0 <ipaddr_aton+0x32c>
c0014402:	66 90                	xchg   ax,ax
c0014404:	81 7c 24 1c ff ff ff 00 	cmp    DWORD PTR [esp+0x1c],0xffffff
c001440c:	76 0a                	jbe    c0014418 <ipaddr_aton+0x274>
c001440e:	b8 00 00 00 00       	mov    eax,0x0
c0014413:	e9 b8 00 00 00       	jmp    c00144d0 <ipaddr_aton+0x32c>
c0014418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001441c:	c1 e0 18             	shl    eax,0x18
c001441f:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c0014423:	e9 80 00 00 00       	jmp    c00144a8 <ipaddr_aton+0x304>
c0014428:	81 7c 24 1c ff ff 00 00 	cmp    DWORD PTR [esp+0x1c],0xffff
c0014430:	76 0a                	jbe    c001443c <ipaddr_aton+0x298>
c0014432:	b8 00 00 00 00       	mov    eax,0x0
c0014437:	e9 94 00 00 00       	jmp    c00144d0 <ipaddr_aton+0x32c>
c001443c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014440:	c1 e0 18             	shl    eax,0x18
c0014443:	89 c2                	mov    edx,eax
c0014445:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014449:	c1 e0 10             	shl    eax,0x10
c001444c:	09 d0                	or     eax,edx
c001444e:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c0014452:	eb 54                	jmp    c00144a8 <ipaddr_aton+0x304>
c0014454:	81 7c 24 1c ff 00 00 00 	cmp    DWORD PTR [esp+0x1c],0xff
c001445c:	76 0a                	jbe    c0014468 <ipaddr_aton+0x2c4>
c001445e:	b8 00 00 00 00       	mov    eax,0x0
c0014463:	eb 6b                	jmp    c00144d0 <ipaddr_aton+0x32c>
c0014465:	8d 76 00             	lea    esi,[esi+0x0]
c0014468:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001446c:	c1 e0 18             	shl    eax,0x18
c001446f:	89 c2                	mov    edx,eax
c0014471:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014475:	c1 e0 10             	shl    eax,0x10
c0014478:	09 c2                	or     edx,eax
c001447a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001447e:	c1 e0 08             	shl    eax,0x8
c0014481:	09 d0                	or     eax,edx
c0014483:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c0014487:	eb 1f                	jmp    c00144a8 <ipaddr_aton+0x304>
c0014489:	8d 76 00             	lea    esi,[esi+0x0]
c001448c:	83 ec 08             	sub    esp,0x8
c001448f:	68 25 16 03 c0       	push   0xc0031625
c0014494:	68 46 03 03 c0       	push   0xc0030346
c0014499:	e8 ae b9 00 00       	call   c001fe4c <CPrintf>
c001449e:	83 c4 10             	add    esp,0x10
c00144a1:	eb 05                	jmp    c00144a8 <ipaddr_aton+0x304>
c00144a3:	90                   	nop
c00144a4:	90                   	nop
c00144a5:	8d 76 00             	lea    esi,[esi+0x0]
c00144a8:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00144ad:	74 19                	je     c00144c8 <ipaddr_aton+0x324>
c00144af:	83 ec 0c             	sub    esp,0xc
c00144b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00144b6:	e8 85 c7 fe ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00144bb:	83 c4 10             	add    esp,0x10
c00144be:	89 c2                	mov    edx,eax
c00144c0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00144c4:	89 10                	mov    DWORD PTR [eax],edx
c00144c6:	66 90                	xchg   ax,ax
c00144c8:	b8 01 00 00 00       	mov    eax,0x1
c00144cd:	8d 76 00             	lea    esi,[esi+0x0]
c00144d0:	83 c4 2c             	add    esp,0x2c
c00144d3:	c3                   	ret    

c00144d4 <ipaddr_addr>:
c00144d4:	83 ec 1c             	sub    esp,0x1c
c00144d7:	83 ec 08             	sub    esp,0x8
c00144da:	8d 44 24 14          	lea    eax,[esp+0x14]
c00144de:	50                   	push   eax
c00144df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144e3:	e8 bc fc ff ff       	call   c00141a4 <ipaddr_aton>
c00144e8:	83 c4 10             	add    esp,0x10
c00144eb:	85 c0                	test   eax,eax
c00144ed:	74 09                	je     c00144f8 <ipaddr_addr+0x24>
c00144ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00144f3:	eb 0b                	jmp    c0014500 <ipaddr_addr+0x2c>
c00144f5:	8d 76 00             	lea    esi,[esi+0x0]
c00144f8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00144fd:	8d 76 00             	lea    esi,[esi+0x0]
c0014500:	83 c4 1c             	add    esp,0x1c
c0014503:	c3                   	ret    

c0014504 <ipaddr_ntoa_r>:
c0014504:	83 ec 20             	sub    esp,0x20
c0014507:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001450f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014513:	8b 00                	mov    eax,DWORD PTR [eax]
c0014515:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014519:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001451d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014521:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014525:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014529:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001452e:	e9 f9 00 00 00       	jmp    c001462c <ipaddr_ntoa_r+0x128>
c0014533:	90                   	nop
c0014534:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0014539:	8d 76 00             	lea    esi,[esi+0x0]
c001453c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014540:	8a 00                	mov    al,BYTE PTR [eax]
c0014542:	0f b6 c8             	movzx  ecx,al
c0014545:	ba cd cc cc cc       	mov    edx,0xcccccccd
c001454a:	89 c8                	mov    eax,ecx
c001454c:	f7 e2                	mul    edx
c001454e:	c1 ea 03             	shr    edx,0x3
c0014551:	89 d0                	mov    eax,edx
c0014553:	c1 e0 02             	shl    eax,0x2
c0014556:	01 d0                	add    eax,edx
c0014558:	d1 e0                	shl    eax,1
c001455a:	29 c1                	sub    ecx,eax
c001455c:	89 c8                	mov    eax,ecx
c001455e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014562:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014566:	8a 00                	mov    al,BYTE PTR [eax]
c0014568:	0f b6 c0             	movzx  eax,al
c001456b:	ba cd cc cc cc       	mov    edx,0xcccccccd
c0014570:	f7 e2                	mul    edx
c0014572:	89 d0                	mov    eax,edx
c0014574:	c1 e8 03             	shr    eax,0x3
c0014577:	88 c2                	mov    dl,al
c0014579:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001457d:	88 10                	mov    BYTE PTR [eax],dl
c001457f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014583:	83 c0 30             	add    eax,0x30
c0014586:	88 c1                	mov    cl,al
c0014588:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c001458c:	8d 50 01             	lea    edx,[eax+0x1]
c001458f:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c0014593:	0f b6 c0             	movzx  eax,al
c0014596:	88 ca                	mov    dl,cl
c0014598:	88 54 04 05          	mov    BYTE PTR [esp+eax*1+0x5],dl
c001459c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00145a0:	8a 00                	mov    al,BYTE PTR [eax]
c00145a2:	0f b6 c0             	movzx  eax,al
c00145a5:	85 c0                	test   eax,eax
c00145a7:	75 93                	jne    c001453c <ipaddr_ntoa_r+0x38>
c00145a9:	eb 35                	jmp    c00145e0 <ipaddr_ntoa_r+0xdc>
c00145ab:	90                   	nop
c00145ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145b0:	8d 50 01             	lea    edx,[eax+0x1]
c00145b3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00145b7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00145bb:	7f 0b                	jg     c00145c8 <ipaddr_ntoa_r+0xc4>
c00145bd:	b8 00 00 00 00       	mov    eax,0x0
c00145c2:	e9 85 00 00 00       	jmp    c001464c <ipaddr_ntoa_r+0x148>
c00145c7:	90                   	nop
c00145c8:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c00145cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00145d1:	8d 48 01             	lea    ecx,[eax+0x1]
c00145d4:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00145d8:	8a 54 14 05          	mov    dl,BYTE PTR [esp+edx*1+0x5]
c00145dc:	88 10                	mov    BYTE PTR [eax],dl
c00145de:	66 90                	xchg   ax,ax
c00145e0:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c00145e4:	8d 50 ff             	lea    edx,[eax-0x1]
c00145e7:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c00145eb:	0f b6 c0             	movzx  eax,al
c00145ee:	85 c0                	test   eax,eax
c00145f0:	75 ba                	jne    c00145ac <ipaddr_ntoa_r+0xa8>
c00145f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145f6:	8d 50 01             	lea    edx,[eax+0x1]
c00145f9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00145fd:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0014601:	7f 09                	jg     c001460c <ipaddr_ntoa_r+0x108>
c0014603:	b8 00 00 00 00       	mov    eax,0x0
c0014608:	eb 42                	jmp    c001464c <ipaddr_ntoa_r+0x148>
c001460a:	66 90                	xchg   ax,ax
c001460c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014610:	8d 50 01             	lea    edx,[eax+0x1]
c0014613:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0014617:	c6 00 2e             	mov    BYTE PTR [eax],0x2e
c001461a:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001461f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0014623:	83 c0 01             	add    eax,0x1
c0014626:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001462a:	66 90                	xchg   ax,ax
c001462c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0014631:	83 f8 03             	cmp    eax,0x3
c0014634:	0f 86 fa fe ff ff    	jbe    c0014534 <ipaddr_ntoa_r+0x30>
c001463a:	83 6c 24 1c 01       	sub    DWORD PTR [esp+0x1c],0x1
c001463f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014643:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0014646:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001464a:	66 90                	xchg   ax,ax
c001464c:	83 c4 20             	add    esp,0x20
c001464f:	c3                   	ret    

c0014650 <ipaddr_ntoa>:
c0014650:	6a 10                	push   0x10
c0014652:	68 a4 b9 03 c0       	push   0xc003b9a4
c0014657:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001465b:	e8 a4 fe ff ff       	call   c0014504 <ipaddr_ntoa_r>
c0014660:	83 c4 0c             	add    esp,0xc
c0014663:	c3                   	ret    

c0014664 <ip_reass_dequeue_datagram>:
c0014664:	83 ec 0c             	sub    esp,0xc
c0014667:	a1 b8 b9 03 c0       	mov    eax,ds:0xc003b9b8
c001466c:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0014670:	75 0e                	jne    c0014680 <ip_reass_dequeue_datagram+0x1c>
c0014672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014676:	8b 00                	mov    eax,DWORD PTR [eax]
c0014678:	a3 b8 b9 03 c0       	mov    ds:0xc003b9b8,eax
c001467d:	eb 29                	jmp    c00146a8 <ip_reass_dequeue_datagram+0x44>
c001467f:	90                   	nop
c0014680:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014685:	75 15                	jne    c001469c <ip_reass_dequeue_datagram+0x38>
c0014687:	83 ec 08             	sub    esp,0x8
c001468a:	68 4c 16 03 c0       	push   0xc003164c
c001468f:	68 46 03 03 c0       	push   0xc0030346
c0014694:	e8 b3 b7 00 00       	call   c001fe4c <CPrintf>
c0014699:	83 c4 10             	add    esp,0x10
c001469c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00146a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00146a6:	89 10                	mov    DWORD PTR [eax],edx
c00146a8:	83 ec 08             	sub    esp,0x8
c00146ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146af:	6a 05                	push   0x5
c00146b1:	e8 9e 35 ff ff       	call   c0007c54 <memp_free>
c00146b6:	83 c4 10             	add    esp,0x10
c00146b9:	90                   	nop
c00146ba:	83 c4 0c             	add    esp,0xc
c00146bd:	c3                   	ret    
c00146be:	66 90                	xchg   ax,ax

c00146c0 <ip_reass_free_complete_datagram>:
c00146c0:	83 ec 2c             	sub    esp,0x2c
c00146c3:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c00146ca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00146ce:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00146d2:	75 18                	jne    c00146ec <ip_reass_free_complete_datagram+0x2c>
c00146d4:	83 ec 08             	sub    esp,0x8
c00146d7:	68 65 16 03 c0       	push   0xc0031665
c00146dc:	68 46 03 03 c0       	push   0xc0030346
c00146e1:	e8 66 b7 00 00       	call   c001fe4c <CPrintf>
c00146e6:	83 c4 10             	add    esp,0x10
c00146e9:	8d 76 00             	lea    esi,[esi+0x0]
c00146ec:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00146f1:	74 21                	je     c0014714 <ip_reass_free_complete_datagram+0x54>
c00146f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00146f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00146f9:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00146fd:	74 15                	je     c0014714 <ip_reass_free_complete_datagram+0x54>
c00146ff:	83 ec 08             	sub    esp,0x8
c0014702:	68 71 16 03 c0       	push   0xc0031671
c0014707:	68 46 03 03 c0       	push   0xc0030346
c001470c:	e8 3b b7 00 00       	call   c001fe4c <CPrintf>
c0014711:	83 c4 10             	add    esp,0x10
c0014714:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014718:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001471b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001471e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014722:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014726:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001472a:	0f b7 c0             	movzx  eax,ax
c001472d:	85 c0                	test   eax,eax
c001472f:	0f 85 a3 00 00 00    	jne    c00147d8 <ip_reass_free_complete_datagram+0x118>
c0014735:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014739:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001473c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014740:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014744:	8b 10                	mov    edx,DWORD PTR [eax]
c0014746:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001474a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001474d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014751:	8d 50 08             	lea    edx,[eax+0x8]
c0014754:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014758:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001475b:	83 ec 04             	sub    esp,0x4
c001475e:	6a 14                	push   0x14
c0014760:	52                   	push   edx
c0014761:	50                   	push   eax
c0014762:	e8 13 bc fe ff       	call   c000037a <memcpy>
c0014767:	83 c4 10             	add    esp,0x10
c001476a:	83 ec 08             	sub    esp,0x8
c001476d:	6a 01                	push   0x1
c001476f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014773:	e8 3c eb ff ff       	call   c00132b4 <icmp_time_exceeded>
c0014778:	83 c4 10             	add    esp,0x10
c001477b:	83 ec 0c             	sub    esp,0xc
c001477e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014782:	e8 69 45 ff ff       	call   c0008cf0 <pbuf_clen>
c0014787:	83 c4 10             	add    esp,0x10
c001478a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001478e:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0014793:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014798:	01 d0                	add    eax,edx
c001479a:	3d ff ff 00 00       	cmp    eax,0xffff
c001479f:	7e 17                	jle    c00147b8 <ip_reass_free_complete_datagram+0xf8>
c00147a1:	83 ec 08             	sub    esp,0x8
c00147a4:	68 83 16 03 c0       	push   0xc0031683
c00147a9:	68 46 03 03 c0       	push   0xc0030346
c00147ae:	e8 99 b6 00 00       	call   c001fe4c <CPrintf>
c00147b3:	83 c4 10             	add    esp,0x10
c00147b6:	66 90                	xchg   ax,ax
c00147b8:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00147bd:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c00147c2:	01 d0                	add    eax,edx
c00147c4:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00147c9:	83 ec 0c             	sub    esp,0xc
c00147cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00147d0:	e8 3f 3d ff ff       	call   c0008514 <pbuf_free>
c00147d5:	83 c4 10             	add    esp,0x10
c00147d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00147dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00147df:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00147e3:	eb 7b                	jmp    c0014860 <ip_reass_free_complete_datagram+0x1a0>
c00147e5:	8d 76 00             	lea    esi,[esi+0x0]
c00147e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00147ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00147ef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00147f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00147f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00147fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0014801:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014805:	83 ec 0c             	sub    esp,0xc
c0014808:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001480c:	e8 df 44 ff ff       	call   c0008cf0 <pbuf_clen>
c0014811:	83 c4 10             	add    esp,0x10
c0014814:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0014818:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c001481d:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014822:	01 d0                	add    eax,edx
c0014824:	3d ff ff 00 00       	cmp    eax,0xffff
c0014829:	7e 15                	jle    c0014840 <ip_reass_free_complete_datagram+0x180>
c001482b:	83 ec 08             	sub    esp,0x8
c001482e:	68 83 16 03 c0       	push   0xc0031683
c0014833:	68 46 03 03 c0       	push   0xc0030346
c0014838:	e8 0f b6 00 00       	call   c001fe4c <CPrintf>
c001483d:	83 c4 10             	add    esp,0x10
c0014840:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014845:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c001484a:	01 d0                	add    eax,edx
c001484c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0014851:	83 ec 0c             	sub    esp,0xc
c0014854:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014858:	e8 b7 3c ff ff       	call   c0008514 <pbuf_free>
c001485d:	83 c4 10             	add    esp,0x10
c0014860:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014865:	75 81                	jne    c00147e8 <ip_reass_free_complete_datagram+0x128>
c0014867:	83 ec 08             	sub    esp,0x8
c001486a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001486e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014872:	e8 ed fd ff ff       	call   c0014664 <ip_reass_dequeue_datagram>
c0014877:	83 c4 10             	add    esp,0x10
c001487a:	66 a1 b4 b9 03 c0    	mov    ax,ds:0xc003b9b4
c0014880:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0014885:	0f b7 c0             	movzx  eax,ax
c0014888:	39 c2                	cmp    edx,eax
c001488a:	76 18                	jbe    c00148a4 <ip_reass_free_complete_datagram+0x1e4>
c001488c:	83 ec 08             	sub    esp,0x8
c001488f:	68 a0 16 03 c0       	push   0xc00316a0
c0014894:	68 46 03 03 c0       	push   0xc0030346
c0014899:	e8 ae b5 00 00       	call   c001fe4c <CPrintf>
c001489e:	83 c4 10             	add    esp,0x10
c00148a1:	8d 76 00             	lea    esi,[esi+0x0]
c00148a4:	66 8b 15 b4 b9 03 c0 	mov    dx,WORD PTR ds:0xc003b9b4
c00148ab:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00148b0:	89 d1                	mov    ecx,edx
c00148b2:	29 c1                	sub    ecx,eax
c00148b4:	89 c8                	mov    eax,ecx
c00148b6:	66 a3 b4 b9 03 c0    	mov    ds:0xc003b9b4,ax
c00148bc:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00148c1:	83 c4 2c             	add    esp,0x2c
c00148c4:	c3                   	ret    
c00148c5:	8d 76 00             	lea    esi,[esi+0x0]

c00148c8 <ip_reass_tmr>:
c00148c8:	83 ec 1c             	sub    esp,0x1c
c00148cb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00148d3:	a1 b8 b9 03 c0       	mov    eax,ds:0xc003b9b8
c00148d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00148dc:	eb 62                	jmp    c0014940 <ip_reass_tmr+0x78>
c00148de:	66 90                	xchg   ax,ax
c00148e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148e4:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c00148e7:	0f b6 c0             	movzx  eax,al
c00148ea:	85 c0                	test   eax,eax
c00148ec:	74 2a                	je     c0014918 <ip_reass_tmr+0x50>
c00148ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148f2:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c00148f5:	83 e8 01             	sub    eax,0x1
c00148f8:	88 c2                	mov    dl,al
c00148fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148fe:	88 50 1f             	mov    BYTE PTR [eax+0x1f],dl
c0014901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014905:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014909:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001490d:	8b 00                	mov    eax,DWORD PTR [eax]
c001490f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014913:	eb 2b                	jmp    c0014940 <ip_reass_tmr+0x78>
c0014915:	8d 76 00             	lea    esi,[esi+0x0]
c0014918:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001491c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014920:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014924:	8b 00                	mov    eax,DWORD PTR [eax]
c0014926:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001492a:	83 ec 08             	sub    esp,0x8
c001492d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014931:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014935:	e8 86 fd ff ff       	call   c00146c0 <ip_reass_free_complete_datagram>
c001493a:	83 c4 10             	add    esp,0x10
c001493d:	8d 76 00             	lea    esi,[esi+0x0]
c0014940:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014945:	75 99                	jne    c00148e0 <ip_reass_tmr+0x18>
c0014947:	90                   	nop
c0014948:	83 c4 1c             	add    esp,0x1c
c001494b:	c3                   	ret    

c001494c <ip_reass_remove_oldest_datagram>:
c001494c:	83 ec 2c             	sub    esp,0x2c
c001494f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014957:	90                   	nop
c0014958:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014960:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014968:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014970:	a1 b8 b9 03 c0       	mov    eax,ds:0xc003b9b8
c0014975:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014979:	e9 9a 00 00 00       	jmp    c0014a18 <ip_reass_remove_oldest_datagram+0xcc>
c001497e:	66 90                	xchg   ax,ax
c0014980:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014984:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c0014987:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001498b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001498e:	39 c2                	cmp    edx,eax
c0014990:	75 2e                	jne    c00149c0 <ip_reass_remove_oldest_datagram+0x74>
c0014992:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014996:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001499d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00149a0:	39 c2                	cmp    edx,eax
c00149a2:	75 1c                	jne    c00149c0 <ip_reass_remove_oldest_datagram+0x74>
c00149a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149a8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00149ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00149af:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00149b3:	0f b7 d2             	movzx  edx,dx
c00149b6:	0f b7 c0             	movzx  eax,ax
c00149b9:	39 c2                	cmp    edx,eax
c00149bb:	74 3b                	je     c00149f8 <ip_reass_remove_oldest_datagram+0xac>
c00149bd:	8d 76 00             	lea    esi,[esi+0x0]
c00149c0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00149c5:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00149ca:	75 0c                	jne    c00149d8 <ip_reass_remove_oldest_datagram+0x8c>
c00149cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00149d4:	eb 22                	jmp    c00149f8 <ip_reass_remove_oldest_datagram+0xac>
c00149d6:	66 90                	xchg   ax,ax
c00149d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149dc:	8a 50 1f             	mov    dl,BYTE PTR [eax+0x1f]
c00149df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149e3:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c00149e6:	0f b6 d2             	movzx  edx,dl
c00149e9:	0f b6 c0             	movzx  eax,al
c00149ec:	39 c2                	cmp    edx,eax
c00149ee:	77 08                	ja     c00149f8 <ip_reass_remove_oldest_datagram+0xac>
c00149f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00149f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00149fe:	85 c0                	test   eax,eax
c0014a00:	74 0a                	je     c0014a0c <ip_reass_remove_oldest_datagram+0xc0>
c0014a02:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a06:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a0a:	66 90                	xchg   ax,ax
c0014a0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a10:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a12:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014a16:	66 90                	xchg   ax,ax
c0014a18:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0014a1d:	0f 85 5d ff ff ff    	jne    c0014980 <ip_reass_remove_oldest_datagram+0x34>
c0014a23:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014a28:	74 22                	je     c0014a4c <ip_reass_remove_oldest_datagram+0x100>
c0014a2a:	83 ec 08             	sub    esp,0x8
c0014a2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014a35:	e8 86 fc ff ff       	call   c00146c0 <ip_reass_free_complete_datagram>
c0014a3a:	83 c4 10             	add    esp,0x10
c0014a3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014a41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014a45:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0014a49:	8d 76 00             	lea    esi,[esi+0x0]
c0014a4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014a50:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0014a54:	7d 0e                	jge    c0014a64 <ip_reass_remove_oldest_datagram+0x118>
c0014a56:	83 7c 24 0c 01       	cmp    DWORD PTR [esp+0xc],0x1
c0014a5b:	0f 8f f7 fe ff ff    	jg     c0014958 <ip_reass_remove_oldest_datagram+0xc>
c0014a61:	8d 76 00             	lea    esi,[esi+0x0]
c0014a64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014a68:	83 c4 2c             	add    esp,0x2c
c0014a6b:	c3                   	ret    

c0014a6c <ip_reass_enqueue_new_datagram>:
c0014a6c:	83 ec 1c             	sub    esp,0x1c
c0014a6f:	83 ec 0c             	sub    esp,0xc
c0014a72:	6a 05                	push   0x5
c0014a74:	e8 af 30 ff ff       	call   c0007b28 <memp_malloc>
c0014a79:	83 c4 10             	add    esp,0x10
c0014a7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014a80:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014a85:	75 4d                	jne    c0014ad4 <ip_reass_enqueue_new_datagram+0x68>
c0014a87:	83 ec 08             	sub    esp,0x8
c0014a8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014a8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014a92:	e8 b5 fe ff ff       	call   c001494c <ip_reass_remove_oldest_datagram>
c0014a97:	83 c4 10             	add    esp,0x10
c0014a9a:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0014a9e:	7f 14                	jg     c0014ab4 <ip_reass_enqueue_new_datagram+0x48>
c0014aa0:	83 ec 0c             	sub    esp,0xc
c0014aa3:	6a 05                	push   0x5
c0014aa5:	e8 7e 30 ff ff       	call   c0007b28 <memp_malloc>
c0014aaa:	83 c4 10             	add    esp,0x10
c0014aad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014ab1:	8d 76 00             	lea    esi,[esi+0x0]
c0014ab4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014ab9:	75 19                	jne    c0014ad4 <ip_reass_enqueue_new_datagram+0x68>
c0014abb:	66 a1 5c 77 03 c0    	mov    ax,ds:0xc003775c
c0014ac1:	83 c0 01             	add    eax,0x1
c0014ac4:	66 a3 5c 77 03 c0    	mov    ds:0xc003775c,ax
c0014aca:	b8 00 00 00 00       	mov    eax,0x0
c0014acf:	eb 53                	jmp    c0014b24 <ip_reass_enqueue_new_datagram+0xb8>
c0014ad1:	8d 76 00             	lea    esi,[esi+0x0]
c0014ad4:	83 ec 04             	sub    esp,0x4
c0014ad7:	6a 20                	push   0x20
c0014ad9:	6a 00                	push   0x0
c0014adb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014adf:	e8 0c ba fe ff       	call   c00004f0 <memset>
c0014ae4:	83 c4 10             	add    esp,0x10
c0014ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014aeb:	c6 40 1f 03          	mov    BYTE PTR [eax+0x1f],0x3
c0014aef:	8b 15 b8 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9b8
c0014af5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014af9:	89 10                	mov    DWORD PTR [eax],edx
c0014afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014aff:	a3 b8 b9 03 c0       	mov    ds:0xc003b9b8,eax
c0014b04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014b08:	83 c0 08             	add    eax,0x8
c0014b0b:	83 ec 04             	sub    esp,0x4
c0014b0e:	6a 14                	push   0x14
c0014b10:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014b14:	50                   	push   eax
c0014b15:	e8 60 b8 fe ff       	call   c000037a <memcpy>
c0014b1a:	83 c4 10             	add    esp,0x10
c0014b1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014b21:	8d 76 00             	lea    esi,[esi+0x0]
c0014b24:	83 c4 1c             	add    esp,0x1c
c0014b27:	c3                   	ret    

c0014b28 <ip_reass_chain_frag_into_datagram_and_validate>:
c0014b28:	53                   	push   ebx
c0014b29:	83 ec 28             	sub    esp,0x28
c0014b2c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014b34:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c0014b3c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014b40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014b4b:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0014b4f:	0f b7 c0             	movzx  eax,ax
c0014b52:	83 ec 0c             	sub    esp,0xc
c0014b55:	50                   	push   eax
c0014b56:	e8 c1 c0 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014b5b:	83 c4 10             	add    esp,0x10
c0014b5e:	89 c3                	mov    ebx,eax
c0014b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014b64:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014b67:	0f b7 c0             	movzx  eax,ax
c0014b6a:	83 ec 0c             	sub    esp,0xc
c0014b6d:	50                   	push   eax
c0014b6e:	e8 a9 c0 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014b73:	83 c4 10             	add    esp,0x10
c0014b76:	0f b7 c0             	movzx  eax,ax
c0014b79:	c1 e8 08             	shr    eax,0x8
c0014b7c:	83 e0 0f             	and    eax,0xf
c0014b7f:	c1 e0 02             	shl    eax,0x2
c0014b82:	89 d9                	mov    ecx,ebx
c0014b84:	29 c1                	sub    ecx,eax
c0014b86:	89 c8                	mov    eax,ecx
c0014b88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0014b8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014b91:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014b95:	0f b7 c0             	movzx  eax,ax
c0014b98:	83 ec 0c             	sub    esp,0xc
c0014b9b:	50                   	push   eax
c0014b9c:	e8 7b c0 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014ba1:	83 c4 10             	add    esp,0x10
c0014ba4:	25 ff 1f 00 00       	and    eax,0x1fff
c0014ba9:	c1 e0 03             	shl    eax,0x3
c0014bac:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0014bb1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014bb5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014bb8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014bbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bc0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014bc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014bce:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0014bd2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014bd6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0014bdb:	01 d0                	add    eax,edx
c0014bdd:	89 c2                	mov    edx,eax
c0014bdf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014be3:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c0014be7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014beb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014bee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014bf2:	e9 11 01 00 00       	jmp    c0014d08 <ip_reass_chain_frag_into_datagram_and_validate+0x1e0>
c0014bf7:	90                   	nop
c0014bf8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bfc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c07:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014c0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c0f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014c13:	0f b7 d2             	movzx  edx,dx
c0014c16:	0f b7 c0             	movzx  eax,ax
c0014c19:	39 c2                	cmp    edx,eax
c0014c1b:	73 6f                	jae    c0014c8c <ip_reass_chain_frag_into_datagram_and_validate+0x164>
c0014c1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c21:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014c25:	89 10                	mov    DWORD PTR [eax],edx
c0014c27:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014c2c:	74 4e                	je     c0014c7c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
c0014c2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c32:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014c36:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c3a:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014c3e:	0f b7 d2             	movzx  edx,dx
c0014c41:	0f b7 c0             	movzx  eax,ax
c0014c44:	39 c2                	cmp    edx,eax
c0014c46:	0f 82 bc 02 00 00    	jb     c0014f08 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c0014c4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c50:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014c54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c58:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014c5c:	0f b7 d2             	movzx  edx,dx
c0014c5f:	0f b7 c0             	movzx  eax,ax
c0014c62:	39 c2                	cmp    edx,eax
c0014c64:	0f 87 9e 02 00 00    	ja     c0014f08 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c0014c6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c6e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014c72:	89 10                	mov    DWORD PTR [eax],edx
c0014c74:	e9 9b 00 00 00       	jmp    c0014d14 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014c79:	8d 76 00             	lea    esi,[esi+0x0]
c0014c7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c80:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014c84:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014c87:	e9 88 00 00 00       	jmp    c0014d14 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014c8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c90:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014c94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c98:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014c9c:	0f b7 d2             	movzx  edx,dx
c0014c9f:	0f b7 c0             	movzx  eax,ax
c0014ca2:	39 c2                	cmp    edx,eax
c0014ca4:	0f 84 62 02 00 00    	je     c0014f0c <ip_reass_chain_frag_into_datagram_and_validate+0x3e4>
c0014caa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014cae:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014cb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014cb6:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014cba:	0f b7 d2             	movzx  edx,dx
c0014cbd:	0f b7 c0             	movzx  eax,ax
c0014cc0:	39 c2                	cmp    edx,eax
c0014cc2:	0f 82 48 02 00 00    	jb     c0014f10 <ip_reass_chain_frag_into_datagram_and_validate+0x3e8>
c0014cc8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014ccd:	74 25                	je     c0014cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014ccf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014cd3:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014cd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014cdb:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014cdf:	0f b7 d2             	movzx  edx,dx
c0014ce2:	0f b7 c0             	movzx  eax,ax
c0014ce5:	39 c2                	cmp    edx,eax
c0014ce7:	74 0b                	je     c0014cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014ce9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014cf1:	8d 76 00             	lea    esi,[esi+0x0]
c0014cf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014cf8:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cfa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014cfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d06:	66 90                	xchg   ax,ax
c0014d08:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014d0d:	0f 85 e5 fe ff ff    	jne    c0014bf8 <ip_reass_chain_frag_into_datagram_and_validate+0xd0>
c0014d13:	90                   	nop
c0014d14:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014d19:	0f 85 95 00 00 00    	jne    c0014db4 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014d1f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014d24:	74 62                	je     c0014d88 <ip_reass_chain_frag_into_datagram_and_validate+0x260>
c0014d26:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d2a:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014d2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d32:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014d36:	0f b7 d2             	movzx  edx,dx
c0014d39:	0f b7 c0             	movzx  eax,ax
c0014d3c:	39 c2                	cmp    edx,eax
c0014d3e:	76 18                	jbe    c0014d58 <ip_reass_chain_frag_into_datagram_and_validate+0x230>
c0014d40:	83 ec 08             	sub    esp,0x8
c0014d43:	68 bb 16 03 c0       	push   0xc00316bb
c0014d48:	68 46 03 03 c0       	push   0xc0030346
c0014d4d:	e8 fa b0 00 00       	call   c001fe4c <CPrintf>
c0014d52:	83 c4 10             	add    esp,0x10
c0014d55:	8d 76 00             	lea    esi,[esi+0x0]
c0014d58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d5c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014d60:	89 10                	mov    DWORD PTR [eax],edx
c0014d62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d66:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014d6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d6e:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014d72:	0f b7 d2             	movzx  edx,dx
c0014d75:	0f b7 c0             	movzx  eax,ax
c0014d78:	39 c2                	cmp    edx,eax
c0014d7a:	74 38                	je     c0014db4 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014d7c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014d84:	eb 2e                	jmp    c0014db4 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014d86:	66 90                	xchg   ax,ax
c0014d88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014d8f:	85 c0                	test   eax,eax
c0014d91:	74 15                	je     c0014da8 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
c0014d93:	83 ec 08             	sub    esp,0x8
c0014d96:	68 fc 16 03 c0       	push   0xc00316fc
c0014d9b:	68 46 03 03 c0       	push   0xc0030346
c0014da0:	e8 a7 b0 00 00       	call   c001fe4c <CPrintf>
c0014da5:	83 c4 10             	add    esp,0x10
c0014da8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014dac:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014db0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014db3:	90                   	nop
c0014db4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014db8:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c0014dbb:	0f b6 c0             	movzx  eax,al
c0014dbe:	83 e0 01             	and    eax,0x1
c0014dc1:	0f 84 39 01 00 00    	je     c0014f00 <ip_reass_chain_frag_into_datagram_and_validate+0x3d8>
c0014dc7:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014dcc:	0f 84 26 01 00 00    	je     c0014ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014dd2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014dd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014dd9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014ddc:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014de0:	0f b7 c0             	movzx  eax,ax
c0014de3:	85 c0                	test   eax,eax
c0014de5:	74 0d                	je     c0014df4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>
c0014de7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014def:	e9 04 01 00 00       	jmp    c0014ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014df4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014df8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014e00:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e02:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014e06:	eb 44                	jmp    c0014e4c <ip_reass_chain_frag_into_datagram_and_validate+0x324>
c0014e08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014e0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014e0f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014e13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e17:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014e1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014e1f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014e23:	0f b7 d2             	movzx  edx,dx
c0014e26:	0f b7 c0             	movzx  eax,ax
c0014e29:	39 c2                	cmp    edx,eax
c0014e2b:	74 0b                	je     c0014e38 <ip_reass_chain_frag_into_datagram_and_validate+0x310>
c0014e2d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014e35:	eb 1d                	jmp    c0014e54 <ip_reass_chain_frag_into_datagram_and_validate+0x32c>
c0014e37:	90                   	nop
c0014e38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014e3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014e40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014e44:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e46:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014e4a:	66 90                	xchg   ax,ax
c0014e4c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014e51:	75 b5                	jne    c0014e08 <ip_reass_chain_frag_into_datagram_and_validate+0x2e0>
c0014e53:	90                   	nop
c0014e54:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014e59:	0f 84 99 00 00 00    	je     c0014ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014e5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014e63:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014e66:	85 c0                	test   eax,eax
c0014e68:	75 16                	jne    c0014e80 <ip_reass_chain_frag_into_datagram_and_validate+0x358>
c0014e6a:	83 ec 08             	sub    esp,0x8
c0014e6d:	68 d9 16 03 c0       	push   0xc00316d9
c0014e72:	68 46 03 03 c0       	push   0xc0030346
c0014e77:	e8 d0 af 00 00       	call   c001fe4c <CPrintf>
c0014e7c:	83 c4 10             	add    esp,0x10
c0014e7f:	90                   	nop
c0014e80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014e84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014e87:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014e8a:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0014e8e:	75 18                	jne    c0014ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x380>
c0014e90:	83 ec 08             	sub    esp,0x8
c0014e93:	68 d9 16 03 c0       	push   0xc00316d9
c0014e98:	68 46 03 03 c0       	push   0xc0030346
c0014e9d:	e8 aa af 00 00       	call   c001fe4c <CPrintf>
c0014ea2:	83 c4 10             	add    esp,0x10
c0014ea5:	8d 76 00             	lea    esi,[esi+0x0]
c0014ea8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014eac:	8b 00                	mov    eax,DWORD PTR [eax]
c0014eae:	85 c0                	test   eax,eax
c0014eb0:	74 16                	je     c0014ec8 <ip_reass_chain_frag_into_datagram_and_validate+0x3a0>
c0014eb2:	83 ec 08             	sub    esp,0x8
c0014eb5:	68 34 17 03 c0       	push   0xc0031734
c0014eba:	68 46 03 03 c0       	push   0xc0030346
c0014ebf:	e8 88 af 00 00       	call   c001fe4c <CPrintf>
c0014ec4:	83 c4 10             	add    esp,0x10
c0014ec7:	90                   	nop
c0014ec8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ecc:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014ed0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ed4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014ed7:	0f b7 d2             	movzx  edx,dx
c0014eda:	0f b7 c0             	movzx  eax,ax
c0014edd:	39 c2                	cmp    edx,eax
c0014edf:	74 17                	je     c0014ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014ee1:	83 ec 08             	sub    esp,0x8
c0014ee4:	68 58 17 03 c0       	push   0xc0031758
c0014ee9:	68 46 03 03 c0       	push   0xc0030346
c0014eee:	e8 59 af 00 00       	call   c001fe4c <CPrintf>
c0014ef3:	83 c4 10             	add    esp,0x10
c0014ef6:	66 90                	xchg   ax,ax
c0014ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014efc:	eb 52                	jmp    c0014f50 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014efe:	66 90                	xchg   ax,ax
c0014f00:	b8 00 00 00 00       	mov    eax,0x0
c0014f05:	eb 49                	jmp    c0014f50 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014f07:	90                   	nop
c0014f08:	90                   	nop
c0014f09:	eb 09                	jmp    c0014f14 <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014f0b:	90                   	nop
c0014f0c:	90                   	nop
c0014f0d:	eb 05                	jmp    c0014f14 <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014f0f:	90                   	nop
c0014f10:	90                   	nop
c0014f11:	8d 76 00             	lea    esi,[esi+0x0]
c0014f14:	83 ec 0c             	sub    esp,0xc
c0014f17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014f1b:	e8 d0 3d ff ff       	call   c0008cf0 <pbuf_clen>
c0014f20:	83 c4 10             	add    esp,0x10
c0014f23:	66 8b 15 b4 b9 03 c0 	mov    dx,WORD PTR ds:0xc003b9b4
c0014f2a:	0f b6 c0             	movzx  eax,al
c0014f2d:	89 d3                	mov    ebx,edx
c0014f2f:	29 c3                	sub    ebx,eax
c0014f31:	89 d8                	mov    eax,ebx
c0014f33:	66 a3 b4 b9 03 c0    	mov    ds:0xc003b9b4,ax
c0014f39:	83 ec 0c             	sub    esp,0xc
c0014f3c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014f40:	e8 cf 35 ff ff       	call   c0008514 <pbuf_free>
c0014f45:	83 c4 10             	add    esp,0x10
c0014f48:	b8 00 00 00 00       	mov    eax,0x0
c0014f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0014f50:	83 c4 28             	add    esp,0x28
c0014f53:	5b                   	pop    ebx
c0014f54:	c3                   	ret    
c0014f55:	8d 76 00             	lea    esi,[esi+0x0]

c0014f58 <ip_reass>:
c0014f58:	53                   	push   ebx
c0014f59:	83 ec 28             	sub    esp,0x28
c0014f5c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014f64:	66 a1 52 77 03 c0    	mov    ax,ds:0xc0037752
c0014f6a:	83 c0 01             	add    eax,0x1
c0014f6d:	66 a3 52 77 03 c0    	mov    ds:0xc0037752,ax
c0014f73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014f7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014f85:	0f b7 c0             	movzx  eax,ax
c0014f88:	83 ec 0c             	sub    esp,0xc
c0014f8b:	50                   	push   eax
c0014f8c:	e8 8b bc fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014f91:	83 c4 10             	add    esp,0x10
c0014f94:	0f b7 c0             	movzx  eax,ax
c0014f97:	c1 e8 08             	shr    eax,0x8
c0014f9a:	0f b7 c0             	movzx  eax,ax
c0014f9d:	83 e0 0f             	and    eax,0xf
c0014fa0:	c1 e0 02             	shl    eax,0x2
c0014fa3:	83 f8 14             	cmp    eax,0x14
c0014fa6:	74 14                	je     c0014fbc <ip_reass+0x64>
c0014fa8:	66 a1 64 77 03 c0    	mov    ax,ds:0xc0037764
c0014fae:	83 c0 01             	add    eax,0x1
c0014fb1:	66 a3 64 77 03 c0    	mov    ds:0xc0037764,ax
c0014fb7:	e9 70 03 00 00       	jmp    c001532c <ip_reass+0x3d4>
c0014fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fc0:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014fc4:	0f b7 c0             	movzx  eax,ax
c0014fc7:	83 ec 0c             	sub    esp,0xc
c0014fca:	50                   	push   eax
c0014fcb:	e8 4c bc fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014fd0:	83 c4 10             	add    esp,0x10
c0014fd3:	25 ff 1f 00 00       	and    eax,0x1fff
c0014fd8:	c1 e0 03             	shl    eax,0x3
c0014fdb:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0014fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fe4:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0014fe8:	0f b7 c0             	movzx  eax,ax
c0014feb:	83 ec 0c             	sub    esp,0xc
c0014fee:	50                   	push   eax
c0014fef:	e8 28 bc fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014ff4:	83 c4 10             	add    esp,0x10
c0014ff7:	89 c3                	mov    ebx,eax
c0014ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ffd:	66 8b 00             	mov    ax,WORD PTR [eax]
c0015000:	0f b7 c0             	movzx  eax,ax
c0015003:	83 ec 0c             	sub    esp,0xc
c0015006:	50                   	push   eax
c0015007:	e8 10 bc fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001500c:	83 c4 10             	add    esp,0x10
c001500f:	0f b7 c0             	movzx  eax,ax
c0015012:	c1 e8 08             	shr    eax,0x8
c0015015:	83 e0 0f             	and    eax,0xf
c0015018:	c1 e0 02             	shl    eax,0x2
c001501b:	89 d9                	mov    ecx,ebx
c001501d:	29 c1                	sub    ecx,eax
c001501f:	89 c8                	mov    eax,ecx
c0015021:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015026:	83 ec 0c             	sub    esp,0xc
c0015029:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001502d:	e8 be 3c ff ff       	call   c0008cf0 <pbuf_clen>
c0015032:	83 c4 10             	add    esp,0x10
c0015035:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0015039:	66 a1 b4 b9 03 c0    	mov    ax,ds:0xc003b9b4
c001503f:	0f b7 d0             	movzx  edx,ax
c0015042:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0015047:	01 d0                	add    eax,edx
c0015049:	83 f8 0a             	cmp    eax,0xa
c001504c:	7e 42                	jle    c0015090 <ip_reass+0x138>
c001504e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0015053:	83 ec 08             	sub    esp,0x8
c0015056:	50                   	push   eax
c0015057:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001505b:	e8 ec f8 ff ff       	call   c001494c <ip_reass_remove_oldest_datagram>
c0015060:	83 c4 10             	add    esp,0x10
c0015063:	85 c0                	test   eax,eax
c0015065:	74 15                	je     c001507c <ip_reass+0x124>
c0015067:	66 a1 b4 b9 03 c0    	mov    ax,ds:0xc003b9b4
c001506d:	0f b7 d0             	movzx  edx,ax
c0015070:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0015075:	01 d0                	add    eax,edx
c0015077:	83 f8 0a             	cmp    eax,0xa
c001507a:	7e 14                	jle    c0015090 <ip_reass+0x138>
c001507c:	66 a1 5c 77 03 c0    	mov    ax,ds:0xc003775c
c0015082:	83 c0 01             	add    eax,0x1
c0015085:	66 a3 5c 77 03 c0    	mov    ds:0xc003775c,ax
c001508b:	e9 9c 02 00 00       	jmp    c001532c <ip_reass+0x3d4>
c0015090:	a1 b8 b9 03 c0       	mov    eax,ds:0xc003b9b8
c0015095:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015099:	eb 65                	jmp    c0015100 <ip_reass+0x1a8>
c001509b:	90                   	nop
c001509c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150a0:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c00150a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150a7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00150aa:	39 c2                	cmp    edx,eax
c00150ac:	75 3e                	jne    c00150ec <ip_reass+0x194>
c00150ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150b2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00150b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00150bc:	39 c2                	cmp    edx,eax
c00150be:	75 2c                	jne    c00150ec <ip_reass+0x194>
c00150c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150c4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00150c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150cb:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00150cf:	0f b7 d2             	movzx  edx,dx
c00150d2:	0f b7 c0             	movzx  eax,ax
c00150d5:	39 c2                	cmp    edx,eax
c00150d7:	75 13                	jne    c00150ec <ip_reass+0x194>
c00150d9:	66 a1 66 77 03 c0    	mov    ax,ds:0xc0037766
c00150df:	83 c0 01             	add    eax,0x1
c00150e2:	66 a3 66 77 03 c0    	mov    ds:0xc0037766,ax
c00150e8:	eb 1e                	jmp    c0015108 <ip_reass+0x1b0>
c00150ea:	66 90                	xchg   ax,ax
c00150ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150f0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00150f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00150fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00150fe:	66 90                	xchg   ax,ax
c0015100:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0015105:	75 95                	jne    c001509c <ip_reass+0x144>
c0015107:	90                   	nop
c0015108:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001510d:	75 25                	jne    c0015134 <ip_reass+0x1dc>
c001510f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0015114:	83 ec 08             	sub    esp,0x8
c0015117:	50                   	push   eax
c0015118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001511c:	e8 4b f9 ff ff       	call   c0014a6c <ip_reass_enqueue_new_datagram>
c0015121:	83 c4 10             	add    esp,0x10
c0015124:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015128:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001512d:	75 61                	jne    c0015190 <ip_reass+0x238>
c001512f:	e9 f8 01 00 00       	jmp    c001532c <ip_reass+0x3d4>
c0015134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015138:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c001513c:	0f b7 c0             	movzx  eax,ax
c001513f:	83 ec 0c             	sub    esp,0xc
c0015142:	50                   	push   eax
c0015143:	e8 d4 ba fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0015148:	83 c4 10             	add    esp,0x10
c001514b:	0f b7 c0             	movzx  eax,ax
c001514e:	25 ff 1f 00 00       	and    eax,0x1fff
c0015153:	75 3b                	jne    c0015190 <ip_reass+0x238>
c0015155:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015159:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c001515d:	0f b7 c0             	movzx  eax,ax
c0015160:	83 ec 0c             	sub    esp,0xc
c0015163:	50                   	push   eax
c0015164:	e8 b3 ba fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0015169:	83 c4 10             	add    esp,0x10
c001516c:	0f b7 c0             	movzx  eax,ax
c001516f:	25 ff 1f 00 00       	and    eax,0x1fff
c0015174:	74 1a                	je     c0015190 <ip_reass+0x238>
c0015176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001517a:	83 c0 08             	add    eax,0x8
c001517d:	83 ec 04             	sub    esp,0x4
c0015180:	6a 14                	push   0x14
c0015182:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015186:	50                   	push   eax
c0015187:	e8 ee b1 fe ff       	call   c000037a <memcpy>
c001518c:	83 c4 10             	add    esp,0x10
c001518f:	90                   	nop
c0015190:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0015195:	66 a1 b4 b9 03 c0    	mov    ax,ds:0xc003b9b4
c001519b:	01 d0                	add    eax,edx
c001519d:	66 a3 b4 b9 03 c0    	mov    ds:0xc003b9b4,ax
c00151a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00151a7:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00151ab:	0f b7 c0             	movzx  eax,ax
c00151ae:	83 e0 20             	and    eax,0x20
c00151b1:	75 29                	jne    c00151dc <ip_reass+0x284>
c00151b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151b7:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c00151ba:	83 c8 01             	or     eax,0x1
c00151bd:	88 c2                	mov    dl,al
c00151bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151c3:	88 50 1e             	mov    BYTE PTR [eax+0x1e],dl
c00151c6:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00151cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00151cf:	01 d0                	add    eax,edx
c00151d1:	89 c2                	mov    edx,eax
c00151d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151d7:	66 89 50 1c          	mov    WORD PTR [eax+0x1c],dx
c00151db:	90                   	nop
c00151dc:	83 ec 08             	sub    esp,0x8
c00151df:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00151e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00151e7:	e8 3c f9 ff ff       	call   c0014b28 <ip_reass_chain_frag_into_datagram_and_validate>
c00151ec:	83 c4 10             	add    esp,0x10
c00151ef:	85 c0                	test   eax,eax
c00151f1:	0f 84 2d 01 00 00    	je     c0015324 <ip_reass+0x3cc>
c00151f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151fb:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00151fe:	83 c0 14             	add    eax,0x14
c0015201:	89 c2                	mov    edx,eax
c0015203:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015207:	66 89 50 1c          	mov    WORD PTR [eax+0x1c],dx
c001520b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001520f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015212:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015215:	8b 00                	mov    eax,DWORD PTR [eax]
c0015217:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001521b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001521f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015222:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015225:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015229:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001522d:	83 c0 08             	add    eax,0x8
c0015230:	83 ec 04             	sub    esp,0x4
c0015233:	6a 14                	push   0x14
c0015235:	50                   	push   eax
c0015236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001523a:	e8 3b b1 fe ff       	call   c000037a <memcpy>
c001523f:	83 c4 10             	add    esp,0x10
c0015242:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015246:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015249:	0f b7 c0             	movzx  eax,ax
c001524c:	83 ec 0c             	sub    esp,0xc
c001524f:	50                   	push   eax
c0015250:	e8 c7 b9 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0015255:	83 c4 10             	add    esp,0x10
c0015258:	89 c2                	mov    edx,eax
c001525a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001525e:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0015262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015266:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c001526c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015270:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0015276:	83 ec 08             	sub    esp,0x8
c0015279:	6a 14                	push   0x14
c001527b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001527f:	e8 cc e4 ff ff       	call   c0013750 <inet_chksum>
c0015284:	83 c4 10             	add    esp,0x10
c0015287:	89 c2                	mov    edx,eax
c0015289:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001528d:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0015291:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015295:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015298:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001529c:	eb 3e                	jmp    c00152dc <ip_reass+0x384>
c001529e:	66 90                	xchg   ax,ax
c00152a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00152a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00152ab:	83 ec 08             	sub    esp,0x8
c00152ae:	6a ec                	push   0xffffffec
c00152b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00152b4:	e8 bb 30 ff ff       	call   c0008374 <pbuf_header>
c00152b9:	83 c4 10             	add    esp,0x10
c00152bc:	83 ec 08             	sub    esp,0x8
c00152bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00152c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00152c7:	e8 8c 3a ff ff       	call   c0008d58 <pbuf_cat>
c00152cc:	83 c4 10             	add    esp,0x10
c00152cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00152d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00152d9:	8d 76 00             	lea    esi,[esi+0x0]
c00152dc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00152e1:	75 bd                	jne    c00152a0 <ip_reass+0x348>
c00152e3:	83 ec 08             	sub    esp,0x8
c00152e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00152ee:	e8 71 f3 ff ff       	call   c0014664 <ip_reass_dequeue_datagram>
c00152f3:	83 c4 10             	add    esp,0x10
c00152f6:	83 ec 0c             	sub    esp,0xc
c00152f9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00152fd:	e8 ee 39 ff ff       	call   c0008cf0 <pbuf_clen>
c0015302:	83 c4 10             	add    esp,0x10
c0015305:	66 8b 15 b4 b9 03 c0 	mov    dx,WORD PTR ds:0xc003b9b4
c001530c:	0f b6 c0             	movzx  eax,al
c001530f:	89 d3                	mov    ebx,edx
c0015311:	29 c3                	sub    ebx,eax
c0015313:	89 d8                	mov    eax,ebx
c0015315:	66 a3 b4 b9 03 c0    	mov    ds:0xc003b9b4,ax
c001531b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001531f:	eb 2f                	jmp    c0015350 <ip_reass+0x3f8>
c0015321:	8d 76 00             	lea    esi,[esi+0x0]
c0015324:	b8 00 00 00 00       	mov    eax,0x0
c0015329:	eb 25                	jmp    c0015350 <ip_reass+0x3f8>
c001532b:	90                   	nop
c001532c:	66 a1 56 77 03 c0    	mov    ax,ds:0xc0037756
c0015332:	83 c0 01             	add    eax,0x1
c0015335:	66 a3 56 77 03 c0    	mov    ds:0xc0037756,ax
c001533b:	83 ec 0c             	sub    esp,0xc
c001533e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015342:	e8 cd 31 ff ff       	call   c0008514 <pbuf_free>
c0015347:	83 c4 10             	add    esp,0x10
c001534a:	b8 00 00 00 00       	mov    eax,0x0
c001534f:	90                   	nop
c0015350:	83 c4 28             	add    esp,0x28
c0015353:	5b                   	pop    ebx
c0015354:	c3                   	ret    
c0015355:	8d 76 00             	lea    esi,[esi+0x0]

c0015358 <ip_frag_alloc_pbuf_custom_ref>:
c0015358:	83 ec 0c             	sub    esp,0xc
c001535b:	83 ec 0c             	sub    esp,0xc
c001535e:	6a 06                	push   0x6
c0015360:	e8 c3 27 ff ff       	call   c0007b28 <memp_malloc>
c0015365:	83 c4 10             	add    esp,0x10
c0015368:	83 c4 0c             	add    esp,0xc
c001536b:	c3                   	ret    

c001536c <ip_frag_free_pbuf_custom_ref>:
c001536c:	83 ec 0c             	sub    esp,0xc
c001536f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0015374:	75 16                	jne    c001538c <ip_frag_free_pbuf_custom_ref+0x20>
c0015376:	83 ec 08             	sub    esp,0x8
c0015379:	68 76 07 03 c0       	push   0xc0030776
c001537e:	68 46 03 03 c0       	push   0xc0030346
c0015383:	e8 c4 aa 00 00       	call   c001fe4c <CPrintf>
c0015388:	83 c4 10             	add    esp,0x10
c001538b:	90                   	nop
c001538c:	83 ec 08             	sub    esp,0x8
c001538f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015393:	6a 06                	push   0x6
c0015395:	e8 ba 28 ff ff       	call   c0007c54 <memp_free>
c001539a:	83 c4 10             	add    esp,0x10
c001539d:	90                   	nop
c001539e:	83 c4 0c             	add    esp,0xc
c00153a1:	c3                   	ret    
c00153a2:	66 90                	xchg   ax,ax

c00153a4 <ipfrag_free_pbuf_custom>:
c00153a4:	83 ec 1c             	sub    esp,0x1c
c00153a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00153ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00153af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00153b4:	75 16                	jne    c00153cc <ipfrag_free_pbuf_custom+0x28>
c00153b6:	83 ec 08             	sub    esp,0x8
c00153b9:	68 e6 16 03 c0       	push   0xc00316e6
c00153be:	68 46 03 03 c0       	push   0xc0030346
c00153c3:	e8 84 aa 00 00       	call   c001fe4c <CPrintf>
c00153c8:	83 c4 10             	add    esp,0x10
c00153cb:	90                   	nop
c00153cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00153d0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00153d4:	74 16                	je     c00153ec <ipfrag_free_pbuf_custom+0x48>
c00153d6:	83 ec 08             	sub    esp,0x8
c00153d9:	68 f2 16 03 c0       	push   0xc00316f2
c00153de:	68 46 03 03 c0       	push   0xc0030346
c00153e3:	e8 64 aa 00 00       	call   c001fe4c <CPrintf>
c00153e8:	83 c4 10             	add    esp,0x10
c00153eb:	90                   	nop
c00153ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00153f0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00153f3:	85 c0                	test   eax,eax
c00153f5:	74 15                	je     c001540c <ipfrag_free_pbuf_custom+0x68>
c00153f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00153fb:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00153fe:	83 ec 0c             	sub    esp,0xc
c0015401:	50                   	push   eax
c0015402:	e8 0d 31 ff ff       	call   c0008514 <pbuf_free>
c0015407:	83 c4 10             	add    esp,0x10
c001540a:	66 90                	xchg   ax,ax
c001540c:	83 ec 0c             	sub    esp,0xc
c001540f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015413:	e8 54 ff ff ff       	call   c001536c <ip_frag_free_pbuf_custom_ref>
c0015418:	83 c4 10             	add    esp,0x10
c001541b:	90                   	nop
c001541c:	83 c4 1c             	add    esp,0x1c
c001541f:	c3                   	ret    

c0015420 <ip_frag>:
c0015420:	53                   	push   ebx
c0015421:	83 ec 38             	sub    esp,0x38
c0015424:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0015428:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001542b:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c0015430:	66 c7 44 24 2a 14 00 	mov    WORD PTR [esp+0x2a],0x14
c0015437:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c001543e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015442:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015445:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015449:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001544d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015451:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015455:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0015459:	0f b7 c0             	movzx  eax,ax
c001545c:	83 ec 0c             	sub    esp,0xc
c001545f:	50                   	push   eax
c0015460:	e8 b7 b7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0015465:	83 c4 10             	add    esp,0x10
c0015468:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c001546d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015471:	25 ff 1f 00 00       	and    eax,0x1fff
c0015476:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001547b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001547f:	25 00 20 00 00       	and    eax,0x2000
c0015484:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0015489:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001548d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0015490:	83 e8 14             	sub    eax,0x14
c0015493:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0015498:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c001549d:	83 e8 14             	sub    eax,0x14
c00154a0:	8d 50 07             	lea    edx,[eax+0x7]
c00154a3:	0f 48 c2             	cmovs  eax,edx
c00154a6:	c1 f8 03             	sar    eax,0x3
c00154a9:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00154ae:	e9 05 03 00 00       	jmp    c00157b8 <ip_frag+0x398>
c00154b3:	90                   	nop
c00154b4:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c00154b9:	8d 50 ed             	lea    edx,[eax-0x13]
c00154bc:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c00154c1:	39 c2                	cmp    edx,eax
c00154c3:	0f 9f c0             	setg   al
c00154c6:	0f b6 c0             	movzx  eax,al
c00154c9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00154ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00154d2:	25 ff 1f 00 00       	and    eax,0x1fff
c00154d7:	89 c2                	mov    edx,eax
c00154d9:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00154de:	09 d0                	or     eax,edx
c00154e0:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c00154e5:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00154ea:	85 c0                	test   eax,eax
c00154ec:	75 0e                	jne    c00154fc <ip_frag+0xdc>
c00154ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00154f2:	80 cc 20             	or     ah,0x20
c00154f5:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c00154fa:	66 90                	xchg   ax,ax
c00154fc:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0015501:	85 c0                	test   eax,eax
c0015503:	75 0b                	jne    c0015510 <ip_frag+0xf0>
c0015505:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015509:	c1 e0 03             	shl    eax,0x3
c001550c:	eb 0a                	jmp    c0015518 <ip_frag+0xf8>
c001550e:	66 90                	xchg   ax,ax
c0015510:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c0015515:	8d 76 00             	lea    esi,[esi+0x0]
c0015518:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c001551d:	83 ec 04             	sub    esp,0x4
c0015520:	6a 00                	push   0x0
c0015522:	6a 14                	push   0x14
c0015524:	6a 02                	push   0x2
c0015526:	e8 c5 31 ff ff       	call   c00086f0 <pbuf_alloc>
c001552b:	83 c4 10             	add    esp,0x10
c001552e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015532:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015537:	75 07                	jne    c0015540 <ip_frag+0x120>
c0015539:	b0 ff                	mov    al,0xff
c001553b:	e9 88 02 00 00       	jmp    c00157c8 <ip_frag+0x3a8>
c0015540:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015544:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0015548:	0f b7 c0             	movzx  eax,ax
c001554b:	83 f8 13             	cmp    eax,0x13
c001554e:	77 18                	ja     c0015568 <ip_frag+0x148>
c0015550:	83 ec 08             	sub    esp,0x8
c0015553:	68 88 17 03 c0       	push   0xc0031788
c0015558:	68 46 03 03 c0       	push   0xc0030346
c001555d:	e8 ea a8 00 00       	call   c001fe4c <CPrintf>
c0015562:	83 c4 10             	add    esp,0x10
c0015565:	8d 76 00             	lea    esi,[esi+0x0]
c0015568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001556c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001556f:	83 ec 04             	sub    esp,0x4
c0015572:	6a 14                	push   0x14
c0015574:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015578:	50                   	push   eax
c0015579:	e8 fc ad fe ff       	call   c000037a <memcpy>
c001557e:	83 c4 10             	add    esp,0x10
c0015581:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015585:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015588:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001558c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015590:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015593:	0f b7 44 24 2a       	movzx  eax,WORD PTR [esp+0x2a]
c0015598:	01 c2                	add    edx,eax
c001559a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001559e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00155a1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00155a5:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00155a9:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c00155ae:	89 d1                	mov    ecx,edx
c00155b0:	29 c1                	sub    ecx,eax
c00155b2:	89 c8                	mov    eax,ecx
c00155b4:	89 c2                	mov    edx,eax
c00155b6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00155ba:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c00155be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00155c2:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c00155c7:	e9 18 01 00 00       	jmp    c00156e4 <ip_frag+0x2c4>
c00155cc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00155d0:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00155d4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00155d8:	0f b7 d8             	movzx  ebx,ax
c00155db:	0f b7 ca             	movzx  ecx,dx
c00155de:	39 cb                	cmp    ebx,ecx
c00155e0:	76 02                	jbe    c00155e4 <ip_frag+0x1c4>
c00155e2:	89 d0                	mov    eax,edx
c00155e4:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c00155e9:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00155ee:	85 c0                	test   eax,eax
c00155f0:	75 12                	jne    c0015604 <ip_frag+0x1e4>
c00155f2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00155f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00155f8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00155fc:	e9 e3 00 00 00       	jmp    c00156e4 <ip_frag+0x2c4>
c0015601:	8d 76 00             	lea    esi,[esi+0x0]
c0015604:	e8 4f fd ff ff       	call   c0015358 <ip_frag_alloc_pbuf_custom_ref>
c0015609:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001560d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0015612:	75 18                	jne    c001562c <ip_frag+0x20c>
c0015614:	83 ec 0c             	sub    esp,0xc
c0015617:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001561b:	e8 f4 2e ff ff       	call   c0008514 <pbuf_free>
c0015620:	83 c4 10             	add    esp,0x10
c0015623:	b0 ff                	mov    al,0xff
c0015625:	e9 9e 01 00 00       	jmp    c00157c8 <ip_frag+0x3a8>
c001562a:	66 90                	xchg   ax,ax
c001562c:	0f b7 5c 24 26       	movzx  ebx,WORD PTR [esp+0x26]
c0015631:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015635:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015638:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001563c:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0015641:	83 ec 08             	sub    esp,0x8
c0015644:	53                   	push   ebx
c0015645:	51                   	push   ecx
c0015646:	52                   	push   edx
c0015647:	6a 02                	push   0x2
c0015649:	50                   	push   eax
c001564a:	6a 03                	push   0x3
c001564c:	e8 ff 2b ff ff       	call   c0008250 <pbuf_alloced_custom>
c0015651:	83 c4 20             	add    esp,0x20
c0015654:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015658:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001565d:	75 25                	jne    c0015684 <ip_frag+0x264>
c001565f:	83 ec 0c             	sub    esp,0xc
c0015662:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015666:	e8 01 fd ff ff       	call   c001536c <ip_frag_free_pbuf_custom_ref>
c001566b:	83 c4 10             	add    esp,0x10
c001566e:	83 ec 0c             	sub    esp,0xc
c0015671:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015675:	e8 9a 2e ff ff       	call   c0008514 <pbuf_free>
c001567a:	83 c4 10             	add    esp,0x10
c001567d:	b0 ff                	mov    al,0xff
c001567f:	e9 44 01 00 00       	jmp    c00157c8 <ip_frag+0x3a8>
c0015684:	83 ec 0c             	sub    esp,0xc
c0015687:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001568b:	e8 94 36 ff ff       	call   c0008d24 <pbuf_ref>
c0015690:	83 c4 10             	add    esp,0x10
c0015693:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015697:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001569b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001569e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00156a2:	c7 40 10 a4 53 01 c0 	mov    DWORD PTR [eax+0x10],0xc00153a4
c00156a9:	83 ec 08             	sub    esp,0x8
c00156ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00156b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00156b4:	e8 9f 36 ff ff       	call   c0008d58 <pbuf_cat>
c00156b9:	83 c4 10             	add    esp,0x10
c00156bc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00156c0:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00156c5:	89 d3                	mov    ebx,edx
c00156c7:	29 c3                	sub    ebx,eax
c00156c9:	89 d8                	mov    eax,ebx
c00156cb:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c00156d0:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c00156d5:	85 c0                	test   eax,eax
c00156d7:	74 0b                	je     c00156e4 <ip_frag+0x2c4>
c00156d9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00156dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00156df:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00156e3:	90                   	nop
c00156e4:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c00156e9:	85 c0                	test   eax,eax
c00156eb:	0f 85 db fe ff ff    	jne    c00155cc <ip_frag+0x1ac>
c00156f1:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00156f6:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c00156fb:	0f b7 44 24 28       	movzx  eax,WORD PTR [esp+0x28]
c0015700:	83 ec 0c             	sub    esp,0xc
c0015703:	50                   	push   eax
c0015704:	e8 13 b5 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0015709:	83 c4 10             	add    esp,0x10
c001570c:	89 c2                	mov    edx,eax
c001570e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015712:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c0015716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001571a:	83 c0 14             	add    eax,0x14
c001571d:	0f b7 c0             	movzx  eax,ax
c0015720:	83 ec 0c             	sub    esp,0xc
c0015723:	50                   	push   eax
c0015724:	e8 f3 b4 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0015729:	83 c4 10             	add    esp,0x10
c001572c:	89 c2                	mov    edx,eax
c001572e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015732:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0015736:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001573a:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0015740:	83 ec 08             	sub    esp,0x8
c0015743:	6a 14                	push   0x14
c0015745:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015749:	e8 02 e0 ff ff       	call   c0013750 <inet_chksum>
c001574e:	83 c4 10             	add    esp,0x10
c0015751:	89 c2                	mov    edx,eax
c0015753:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015757:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c001575b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001575f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015762:	83 ec 04             	sub    esp,0x4
c0015765:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015769:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001576d:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0015771:	ff d0                	call   eax
c0015773:	83 c4 10             	add    esp,0x10
c0015776:	66 a1 50 77 03 c0    	mov    ax,ds:0xc0037750
c001577c:	83 c0 01             	add    eax,0x1
c001577f:	66 a3 50 77 03 c0    	mov    ds:0xc0037750,ax
c0015785:	83 ec 0c             	sub    esp,0xc
c0015788:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001578c:	e8 83 2d ff ff       	call   c0008514 <pbuf_free>
c0015791:	83 c4 10             	add    esp,0x10
c0015794:	66 8b 54 24 2e       	mov    dx,WORD PTR [esp+0x2e]
c0015799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001579d:	89 d1                	mov    ecx,edx
c001579f:	29 c1                	sub    ecx,eax
c00157a1:	89 c8                	mov    eax,ecx
c00157a3:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c00157a8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00157ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00157b0:	01 d0                	add    eax,edx
c00157b2:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c00157b7:	90                   	nop
c00157b8:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c00157bd:	85 c0                	test   eax,eax
c00157bf:	0f 85 ef fc ff ff    	jne    c00154b4 <ip_frag+0x94>
c00157c5:	b0 00                	mov    al,0x0
c00157c7:	90                   	nop
c00157c8:	83 c4 38             	add    esp,0x38
c00157cb:	5b                   	pop    ebx
c00157cc:	c3                   	ret    
c00157cd:	90                   	nop

c00157ce <Computer::close(int, int, void*)>:
c00157ce:	53                   	push   ebx
c00157cf:	83 ec 08             	sub    esp,0x8
c00157d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00157d6:	e8 e3 a4 00 00       	call   c001fcbe <KeExecuteAtexit()>
c00157db:	83 ec 0c             	sub    esp,0xc
c00157de:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00157e4:	50                   	push   eax
c00157e5:	e8 88 60 00 00       	call   c001b872 <Device::closeAll()>
c00157ea:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00157f0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00157f4:	8b 10                	mov    edx,DWORD PTR [eax]
c00157f6:	51                   	push   ecx
c00157f7:	68 0f 27 00 00       	push   0x270f
c00157fc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015800:	53                   	push   ebx
c0015801:	50                   	push   eax
c0015802:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015805:	83 c4 14             	add    esp,0x14
c0015808:	68 a8 17 03 c0       	push   0xc00317a8
c001580d:	e8 f0 ae 00 00       	call   c0020702 <KePanic(char const*)>
c0015812:	83 c4 18             	add    esp,0x18
c0015815:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001581a:	5b                   	pop    ebx
c001581b:	c3                   	ret    

c001581c <Krnl::firstTask()>:
c001581c:	53                   	push   ebx
c001581d:	83 ec 14             	sub    esp,0x14
c0015820:	fb                   	sti    
c0015821:	68 be 17 03 c0       	push   0xc00317be
c0015826:	e8 72 a5 00 00       	call   c001fd9d <KeSetBootMessage(char const*)>
c001582b:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0015832:	e8 51 0e 00 00       	call   c0016688 <malloc>
c0015837:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001583e:	89 c3                	mov    ebx,eax
c0015840:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0015845:	50                   	push   eax
c0015846:	68 d7 17 03 c0       	push   0xc00317d7
c001584b:	6a 01                	push   0x1
c001584d:	53                   	push   ebx
c001584e:	e8 91 fa 00 00       	call   c00252e4 <Process::Process(bool, char const*, Process*, char**)>
c0015853:	83 c4 20             	add    esp,0x20
c0015856:	68 ff 00 00 00       	push   0xff
c001585b:	6a 00                	push   0x0
c001585d:	68 57 60 01 c0       	push   0xc0016057
c0015862:	53                   	push   ebx
c0015863:	e8 a4 fc 00 00       	call   c002550c <Process::createThread(void (*)(void*), void*, int)>
c0015868:	8b 15 f8 11 04 c0    	mov    edx,DWORD PTR ds:0xc00411f8
c001586e:	6a 7a                	push   0x7a
c0015870:	6a 00                	push   0x0
c0015872:	68 c4 5d 02 c0       	push   0xc0025dc4
c0015877:	52                   	push   edx
c0015878:	e8 8f fc 00 00       	call   c002550c <Process::createThread(void (*)(void*), void*, int)>
c001587d:	83 c4 14             	add    esp,0x14
c0015880:	68 c4 18 03 c0       	push   0xc00318c4
c0015885:	a3 b0 11 04 c0       	mov    ds:0xc00411b0,eax
c001588a:	e8 0e a5 00 00       	call   c001fd9d <KeSetBootMessage(char const*)>
c001588f:	c6 05 c1 b9 03 c0 01 	mov    BYTE PTR ds:0xc003b9c1,0x1
c0015896:	e8 1e b0 00 00       	call   c00208b9 <KeInitRand()>
c001589b:	e8 bb 08 01 00       	call   c002615b <Vm::initialise8086()>
c00158a0:	e8 fb 4a 00 00       	call   c001a3a0 <Fs::initVFS()>
c00158a5:	c7 04 24 e4 17 03 c0 	mov    DWORD PTR [esp],0xc00317e4
c00158ac:	e8 ec a4 00 00       	call   c001fd9d <KeSetBootMessage(char const*)>
c00158b1:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c00158b6:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c00158bc:	8b 10                	mov    edx,DWORD PTR [eax]
c00158be:	6a 00                	push   0x0
c00158c0:	6a 00                	push   0x0
c00158c2:	6a 00                	push   0x0
c00158c4:	50                   	push   eax
c00158c5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00158c8:	83 c4 14             	add    esp,0x14
c00158cb:	68 c4 18 03 c0       	push   0xc00318c4
c00158d0:	e8 c8 a4 00 00       	call   c001fd9d <KeSetBootMessage(char const*)>
c00158d5:	e8 60 42 00 00       	call   c0019b3a <KeInitialiseSymlinks()>
c00158da:	e8 87 aa 00 00       	call   c0020366 <KeLoadSystemEnv()>
c00158df:	e8 e3 ae 00 00       	call   c00207c7 <KeSetupPowerManager()>
c00158e4:	c7 04 24 e8 18 03 c0 	mov    DWORD PTR [esp],0xc00318e8
c00158eb:	e8 ad a4 00 00       	call   c001fd9d <KeSetBootMessage(char const*)>
c00158f0:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c00158f5:	59                   	pop    ecx
c00158f6:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c00158fc:	53                   	push   ebx
c00158fd:	e8 24 5e 00 00       	call   c001b726 <Device::loadDriversForAll()>
c0015902:	e8 bd 16 ff ff       	call   c0006fc4 <lwip_init>
c0015907:	c7 04 24 fe 17 03 c0 	mov    DWORD PTR [esp],0xc00317fe
c001590e:	e8 8a a4 00 00       	call   c001fd9d <KeSetBootMessage(char const*)>
c0015913:	8b 1d bc b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9bc
c0015919:	58                   	pop    eax
c001591a:	5a                   	pop    edx
c001591b:	6a 01                	push   0x1
c001591d:	68 0f 18 03 c0       	push   0xc003180f
c0015922:	e8 a1 f3 00 00       	call   c0024cc8 <Thr::loadDLL(char const*, bool)>
c0015927:	59                   	pop    ecx
c0015928:	5a                   	pop    edx
c0015929:	53                   	push   ebx
c001592a:	50                   	push   eax
c001592b:	e8 f9 f5 00 00       	call   c0024f29 <Thr::executeDLL(unsigned long, void*)>
c0015930:	83 c4 10             	add    esp,0x10
c0015933:	83 ec 0c             	sub    esp,0xc
c0015936:	6a 02                	push   0x2
c0015938:	e8 d7 fe 00 00       	call   c0025814 <blockTask(TaskState)>
c001593d:	83 c4 10             	add    esp,0x10
c0015940:	eb f1                	jmp    c0015933 <Krnl::firstTask()+0x117>

c0015942 <Computer::Computer()>:
c0015942:	83 ec 0c             	sub    esp,0xc
c0015945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015949:	83 ec 08             	sub    esp,0x8
c001594c:	68 2b 18 03 c0       	push   0xc003182b
c0015951:	50                   	push   eax
c0015952:	e8 15 5e 00 00       	call   c001b76c <Device::Device(char const*)>
c0015957:	83 c4 10             	add    esp,0x10
c001595a:	ba 34 19 03 c0       	mov    edx,0xc0031934
c001595f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015963:	89 10                	mov    DWORD PTR [eax],edx
c0015965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015969:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0015973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015977:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0015981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015985:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001598b:	83 ca 04             	or     edx,0x4
c001598e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0015994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015998:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001599e:	0f b6 d0             	movzx  edx,al
c00159a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159a5:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c00159ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159b0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00159b6:	0f b6 d0             	movzx  edx,al
c00159b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159bd:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00159c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159c6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00159cc:	8d 50 01             	lea    edx,[eax+0x1]
c00159cf:	88 d1                	mov    cl,dl
c00159d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00159d5:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c00159db:	0f b6 d0             	movzx  edx,al
c00159de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159e2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00159e6:	83 e1 3f             	and    ecx,0x3f
c00159e9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00159ed:	90                   	nop
c00159ee:	83 c4 0c             	add    esp,0xc
c00159f1:	c3                   	ret    

c00159f2 <Computer::setBootMessage(char const*)>:
c00159f2:	c3                   	ret    
c00159f3:	90                   	nop

c00159f4 <Computer::detectFeatures()>:
c00159f4:	55                   	push   ebp
c00159f5:	57                   	push   edi
c00159f6:	56                   	push   esi
c00159f7:	53                   	push   ebx
c00159f8:	83 ec 1c             	sub    esp,0x1c
c00159fb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00159ff:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0015a05:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0015a0b:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0015a11:	e8 e3 a7 fe ff       	call   c00001f9 <detectCPUID>
c0015a16:	31 d2                	xor    edx,edx
c0015a18:	85 c0                	test   eax,eax
c0015a1a:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015a20:	0f 95 c2             	setne  dl
c0015a23:	d1 e2                	shl    edx,1
c0015a25:	83 e0 fd             	and    eax,0xfffffffd
c0015a28:	09 d0                	or     eax,edx
c0015a2a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015a30:	a8 02                	test   al,0x2
c0015a32:	75 51                	jne    c0015a85 <Computer::detectFeatures()+0x91>
c0015a34:	f6 05 d5 b9 03 c0 04 	test   BYTE PTR ds:0xc003b9d5,0x4
c0015a3b:	74 0f                	je     c0015a4c <Computer::detectFeatures()+0x58>
c0015a3d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015a43:	83 e0 fb             	and    eax,0xfffffffb
c0015a46:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015a4c:	e8 25 91 01 00       	call   c002eb76 <x87Detect>
c0015a51:	83 e0 01             	and    eax,0x1
c0015a54:	c1 e0 04             	shl    eax,0x4
c0015a57:	89 c2                	mov    edx,eax
c0015a59:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015a5f:	83 e0 ef             	and    eax,0xffffffef
c0015a62:	09 d0                	or     eax,edx
c0015a64:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015a6a:	a8 10                	test   al,0x10
c0015a6c:	88 c2                	mov    dl,al
c0015a6e:	0f 85 33 01 00 00    	jne    c0015ba7 <Computer::detectFeatures()+0x1b3>
c0015a74:	80 e2 80             	and    dl,0x80
c0015a77:	0f 85 4c 01 00 00    	jne    c0015bc9 <Computer::detectFeatures()+0x1d5>
c0015a7d:	83 c4 1c             	add    esp,0x1c
c0015a80:	5b                   	pop    ebx
c0015a81:	5e                   	pop    esi
c0015a82:	5f                   	pop    edi
c0015a83:	5d                   	pop    ebp
c0015a84:	c3                   	ret    
c0015a85:	83 ec 0c             	sub    esp,0xc
c0015a88:	6a 20                	push   0x20
c0015a8a:	e8 47 97 00 00       	call   c001f1d6 <CPU::cpuidCheckEDX(unsigned int)>
c0015a8f:	83 e0 01             	and    eax,0x1
c0015a92:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0015a99:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015a9f:	83 e0 f7             	and    eax,0xfffffff7
c0015aa2:	09 d0                	or     eax,edx
c0015aa4:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015aaa:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0015ab1:	e8 20 97 00 00       	call   c001f1d6 <CPU::cpuidCheckEDX(unsigned int)>
c0015ab6:	89 c2                	mov    edx,eax
c0015ab8:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015abe:	83 e2 01             	and    edx,0x1
c0015ac1:	83 e0 fe             	and    eax,0xfffffffe
c0015ac4:	09 d0                	or     eax,edx
c0015ac6:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015acc:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0015ad3:	e8 fe 96 00 00       	call   c001f1d6 <CPU::cpuidCheckEDX(unsigned int)>
c0015ad8:	89 c2                	mov    edx,eax
c0015ada:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015ae0:	c1 e2 07             	shl    edx,0x7
c0015ae3:	83 e0 7f             	and    eax,0x7f
c0015ae6:	09 d0                	or     eax,edx
c0015ae8:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015aee:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0015af5:	e8 dc 96 00 00       	call   c001f1d6 <CPU::cpuidCheckEDX(unsigned int)>
c0015afa:	83 c4 10             	add    esp,0x10
c0015afd:	83 e0 01             	and    eax,0x1
c0015b00:	c1 e0 05             	shl    eax,0x5
c0015b03:	89 c2                	mov    edx,eax
c0015b05:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015b0b:	83 e0 df             	and    eax,0xffffffdf
c0015b0e:	09 d0                	or     eax,edx
c0015b10:	f7 05 d4 b9 03 c0 01 04 00 00 	test   DWORD PTR ds:0xc003b9d4,0x401
c0015b1a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015b20:	0f 84 c9 00 00 00    	je     c0015bef <Computer::detectFeatures()+0x1fb>
c0015b26:	83 e0 fe             	and    eax,0xfffffffe
c0015b29:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015b2f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015b35:	89 c2                	mov    edx,eax
c0015b37:	83 e2 09             	and    edx,0x9
c0015b3a:	83 fa 01             	cmp    edx,0x1
c0015b3d:	75 09                	jne    c0015b48 <Computer::detectFeatures()+0x154>
c0015b3f:	83 e0 fe             	and    eax,0xfffffffe
c0015b42:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015b48:	83 ec 0c             	sub    esp,0xc
c0015b4b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0015b4f:	50                   	push   eax
c0015b50:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0015b54:	55                   	push   ebp
c0015b55:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0015b59:	57                   	push   edi
c0015b5a:	8d 74 24 18          	lea    esi,[esp+0x18]
c0015b5e:	56                   	push   esi
c0015b5f:	68 00 00 00 80       	push   0x80000000
c0015b64:	e8 e9 95 00 00       	call   c001f152 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015b69:	83 c4 20             	add    esp,0x20
c0015b6c:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0015b73:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0015b77:	0f 86 b7 fe ff ff    	jbe    c0015a34 <Computer::detectFeatures()+0x40>
c0015b7d:	83 ec 0c             	sub    esp,0xc
c0015b80:	50                   	push   eax
c0015b81:	55                   	push   ebp
c0015b82:	57                   	push   edi
c0015b83:	56                   	push   esi
c0015b84:	68 01 00 00 80       	push   0x80000001
c0015b89:	e8 c4 95 00 00       	call   c001f152 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015b8e:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0015b94:	83 c4 20             	add    esp,0x20
c0015b97:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0015b9c:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0015ba2:	e9 8d fe ff ff       	jmp    c0015a34 <Computer::detectFeatures()+0x40>
c0015ba7:	e8 84 8f 01 00       	call   c002eb30 <sseDetect>
c0015bac:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0015bb2:	83 e2 7f             	and    edx,0x7f
c0015bb5:	c1 e0 07             	shl    eax,0x7
c0015bb8:	09 c2                	or     edx,eax
c0015bba:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0015bc0:	80 e2 80             	and    dl,0x80
c0015bc3:	0f 84 b4 fe ff ff    	je     c0015a7d <Computer::detectFeatures()+0x89>
c0015bc9:	e8 f2 8b 01 00       	call   c002e7c0 <avxDetect>
c0015bce:	83 e0 01             	and    eax,0x1
c0015bd1:	c1 e0 05             	shl    eax,0x5
c0015bd4:	89 c2                	mov    edx,eax
c0015bd6:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015bdc:	83 e0 df             	and    eax,0xffffffdf
c0015bdf:	09 d0                	or     eax,edx
c0015be1:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015be7:	83 c4 1c             	add    esp,0x1c
c0015bea:	5b                   	pop    ebx
c0015beb:	5e                   	pop    esi
c0015bec:	5f                   	pop    edi
c0015bed:	5d                   	pop    ebp
c0015bee:	c3                   	ret    
c0015bef:	83 ec 0c             	sub    esp,0xc
c0015bf2:	68 00 02 00 00       	push   0x200
c0015bf7:	e8 da 95 00 00       	call   c001f1d6 <CPU::cpuidCheckEDX(unsigned int)>
c0015bfc:	83 c4 10             	add    esp,0x10
c0015bff:	89 c2                	mov    edx,eax
c0015c01:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015c07:	83 e2 01             	and    edx,0x1
c0015c0a:	83 e0 fe             	and    eax,0xfffffffe
c0015c0d:	09 d0                	or     eax,edx
c0015c0f:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015c15:	e9 15 ff ff ff       	jmp    c0015b2f <Computer::detectFeatures()+0x13b>

c0015c1a <Computer::displayFeatures()>:
c0015c1a:	c3                   	ret    
c0015c1b:	90                   	nop

c0015c1c <Computer::rdmsr(unsigned int)>:
c0015c1c:	83 ec 0c             	sub    esp,0xc
c0015c1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c23:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0015c2a:	74 0a                	je     c0015c36 <Computer::rdmsr(unsigned int)+0x1a>
c0015c2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015c30:	0f 32                	rdmsr  
c0015c32:	83 c4 0c             	add    esp,0xc
c0015c35:	c3                   	ret    
c0015c36:	83 ec 0c             	sub    esp,0xc
c0015c39:	68 34 18 03 c0       	push   0xc0031834
c0015c3e:	e8 bf aa 00 00       	call   c0020702 <KePanic(char const*)>
c0015c43:	83 c4 10             	add    esp,0x10
c0015c46:	eb e4                	jmp    c0015c2c <Computer::rdmsr(unsigned int)+0x10>

c0015c48 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0015c48:	57                   	push   edi
c0015c49:	56                   	push   esi
c0015c4a:	83 ec 04             	sub    esp,0x4
c0015c4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c51:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015c55:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0015c59:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0015c60:	74 10                	je     c0015c72 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0015c62:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015c66:	89 f0                	mov    eax,esi
c0015c68:	89 fa                	mov    edx,edi
c0015c6a:	0f 30                	wrmsr  
c0015c6c:	83 c4 04             	add    esp,0x4
c0015c6f:	5e                   	pop    esi
c0015c70:	5f                   	pop    edi
c0015c71:	c3                   	ret    
c0015c72:	83 ec 0c             	sub    esp,0xc
c0015c75:	68 3a 18 03 c0       	push   0xc003183a
c0015c7a:	e8 83 aa 00 00       	call   c0020702 <KePanic(char const*)>
c0015c7f:	83 c4 10             	add    esp,0x10
c0015c82:	eb de                	jmp    c0015c62 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0015c84 <Computer::shutdown()>:
c0015c84:	83 ec 0c             	sub    esp,0xc
c0015c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c8b:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c8d:	6a 00                	push   0x0
c0015c8f:	6a 00                	push   0x0
c0015c91:	6a 00                	push   0x0
c0015c93:	50                   	push   eax
c0015c94:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015c97:	83 c4 1c             	add    esp,0x1c
c0015c9a:	c3                   	ret    
c0015c9b:	90                   	nop

c0015c9c <Computer::restart()>:
c0015c9c:	83 ec 0c             	sub    esp,0xc
c0015c9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ca3:	8b 10                	mov    edx,DWORD PTR [eax]
c0015ca5:	6a 00                	push   0x0
c0015ca7:	6a 00                	push   0x0
c0015ca9:	6a 01                	push   0x1
c0015cab:	50                   	push   eax
c0015cac:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015caf:	83 c4 1c             	add    esp,0x1c
c0015cb2:	c3                   	ret    
c0015cb3:	90                   	nop

c0015cb4 <Computer::sleep()>:
c0015cb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015cb8:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0015cbe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015cc2:	e9 e1 8f 00 00       	jmp    c001eca8 <ACPI::sleep()>
c0015cc7:	90                   	nop

c0015cc8 <Computer::nmiEnabled()>:
c0015cc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ccc:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0015cd2:	c3                   	ret    
c0015cd3:	90                   	nop

c0015cd4 <Computer::readCMOS(unsigned char)>:
c0015cd4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015cd8:	31 d2                	xor    edx,edx
c0015cda:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015cde:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c0015ce5:	75 02                	jne    c0015ce9 <Computer::readCMOS(unsigned char)+0x15>
c0015ce7:	b2 80                	mov    dl,0x80
c0015ce9:	09 d0                	or     eax,edx
c0015ceb:	e6 70                	out    0x70,al
c0015ced:	e4 71                	in     al,0x71
c0015cef:	c3                   	ret    

c0015cf0 <Computer::enableNMI(bool)>:
c0015cf0:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c0015cf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015cf8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0015cfe:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0015d06:	eb cc                	jmp    c0015cd4 <Computer::readCMOS(unsigned char)>

c0015d08 <Computer::open(int, int, void*)>:
c0015d08:	56                   	push   esi
c0015d09:	53                   	push   ebx
c0015d0a:	83 ec 10             	sub    esp,0x10
c0015d0d:	f6 05 d4 b9 03 c0 04 	test   BYTE PTR ds:0xc003b9d4,0x4
c0015d14:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015d18:	68 40 18 03 c0       	push   0xc0031840
c0015d1d:	0f 94 05 e0 44 03 c0 	sete   BYTE PTR ds:0xc00344e0
c0015d24:	e8 74 a0 00 00       	call   c001fd9d <KeSetBootMessage(char const*)>
c0015d29:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0015d30:	e8 53 09 00 00       	call   c0016688 <malloc>
c0015d35:	89 04 24             	mov    DWORD PTR [esp],eax
c0015d38:	89 c6                	mov    esi,eax
c0015d3a:	e8 dd 8a 00 00       	call   c001e81c <ACPI::ACPI()>
c0015d3f:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0015d45:	58                   	pop    eax
c0015d46:	5a                   	pop    edx
c0015d47:	56                   	push   esi
c0015d48:	53                   	push   ebx
c0015d49:	e8 bc 58 00 00       	call   c001b60a <Device::addChild(Device*)>
c0015d4e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d51:	e8 9e fc ff ff       	call   c00159f4 <Computer::detectFeatures()>
c0015d56:	59                   	pop    ecx
c0015d57:	5e                   	pop    esi
c0015d58:	6a 01                	push   0x1
c0015d5a:	53                   	push   ebx
c0015d5b:	e8 90 ff ff ff       	call   c0015cf0 <Computer::enableNMI(bool)>
c0015d60:	c7 04 24 58 18 03 c0 	mov    DWORD PTR [esp],0xc0031858
c0015d67:	e8 31 a0 00 00       	call   c001fd9d <KeSetBootMessage(char const*)>
c0015d6c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0015d73:	e8 10 09 00 00       	call   c0016688 <malloc>
c0015d78:	89 04 24             	mov    DWORD PTR [esp],eax
c0015d7b:	89 c6                	mov    esi,eax
c0015d7d:	e8 0c 95 00 00       	call   c001f28e <CPU::CPU()>
c0015d82:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0015d88:	58                   	pop    eax
c0015d89:	5a                   	pop    edx
c0015d8a:	56                   	push   esi
c0015d8b:	53                   	push   ebx
c0015d8c:	e8 79 58 00 00       	call   c001b60a <Device::addChild(Device*)>
c0015d91:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015d97:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015d9b:	8b 10                	mov    edx,DWORD PTR [eax]
c0015d9d:	51                   	push   ecx
c0015d9e:	6a 00                	push   0x0
c0015da0:	6a 00                	push   0x0
c0015da2:	50                   	push   eax
c0015da3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015da6:	83 c4 14             	add    esp,0x14
c0015da9:	68 08 19 03 c0       	push   0xc0031908
c0015dae:	e8 ea 9f 00 00       	call   c001fd9d <KeSetBootMessage(char const*)>
c0015db3:	e8 c1 16 01 00       	call   c0027479 <HalInitialiseCoprocessor()>
c0015db8:	c7 04 24 72 18 03 c0 	mov    DWORD PTR [esp],0xc0031872
c0015dbf:	e8 d9 9f 00 00       	call   c001fd9d <KeSetBootMessage(char const*)>
c0015dc4:	c7 04 24 1c 58 01 c0 	mov    DWORD PTR [esp],0xc001581c
c0015dcb:	e8 64 f8 00 00       	call   c0025634 <setupMultitasking(void (*)())>
c0015dd0:	83 c4 14             	add    esp,0x14
c0015dd3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015dd8:	5b                   	pop    ebx
c0015dd9:	5e                   	pop    esi
c0015dda:	c3                   	ret    
c0015ddb:	90                   	nop

c0015ddc <Computer::disableNMI()>:
c0015ddc:	6a 00                	push   0x0
c0015dde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015de2:	50                   	push   eax
c0015de3:	e8 08 ff ff ff       	call   c0015cf0 <Computer::enableNMI(bool)>
c0015de8:	5a                   	pop    edx
c0015de9:	59                   	pop    ecx
c0015dea:	c3                   	ret    
c0015deb:	90                   	nop

c0015dec <Computer::writeCMOS(unsigned char, unsigned char)>:
c0015dec:	53                   	push   ebx
c0015ded:	b2 80                	mov    dl,0x80
c0015def:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015df3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015df7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015dfb:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0015e02:	74 02                	je     c0015e06 <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c0015e04:	31 d2                	xor    edx,edx
c0015e06:	09 d0                	or     eax,edx
c0015e08:	e6 70                	out    0x70,al
c0015e0a:	88 c8                	mov    al,cl
c0015e0c:	e6 71                	out    0x71,al
c0015e0e:	5b                   	pop    ebx
c0015e0f:	c3                   	ret    

c0015e10 <Computer::handleNMI()>:
c0015e10:	56                   	push   esi
c0015e11:	53                   	push   ebx
c0015e12:	83 ec 10             	sub    esp,0x10
c0015e15:	e4 92                	in     al,0x92
c0015e17:	89 c6                	mov    esi,eax
c0015e19:	e4 61                	in     al,0x61
c0015e1b:	68 8d 18 03 c0       	push   0xc003188d
c0015e20:	88 c3                	mov    bl,al
c0015e22:	e8 97 36 00 00       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0015e27:	83 c4 10             	add    esp,0x10
c0015e2a:	83 e6 10             	and    esi,0x10
c0015e2d:	75 10                	jne    c0015e3f <Computer::handleNMI()+0x2f>
c0015e2f:	f6 c3 40             	test   bl,0x40
c0015e32:	75 20                	jne    c0015e54 <Computer::handleNMI()+0x44>
c0015e34:	80 e3 80             	and    bl,0x80
c0015e37:	75 30                	jne    c0015e69 <Computer::handleNMI()+0x59>
c0015e39:	83 c4 04             	add    esp,0x4
c0015e3c:	5b                   	pop    ebx
c0015e3d:	5e                   	pop    esi
c0015e3e:	c3                   	ret    
c0015e3f:	83 ec 0c             	sub    esp,0xc
c0015e42:	68 9e 18 03 c0       	push   0xc003189e
c0015e47:	e8 b6 a8 00 00       	call   c0020702 <KePanic(char const*)>
c0015e4c:	83 c4 10             	add    esp,0x10
c0015e4f:	f6 c3 40             	test   bl,0x40
c0015e52:	74 e0                	je     c0015e34 <Computer::handleNMI()+0x24>
c0015e54:	83 ec 0c             	sub    esp,0xc
c0015e57:	68 ab 18 03 c0       	push   0xc00318ab
c0015e5c:	e8 a1 a8 00 00       	call   c0020702 <KePanic(char const*)>
c0015e61:	83 c4 10             	add    esp,0x10
c0015e64:	80 e3 80             	and    bl,0x80
c0015e67:	74 d0                	je     c0015e39 <Computer::handleNMI()+0x29>
c0015e69:	c7 44 24 10 b5 18 03 c0 	mov    DWORD PTR [esp+0x10],0xc00318b5
c0015e71:	83 c4 04             	add    esp,0x4
c0015e74:	5b                   	pop    ebx
c0015e75:	5e                   	pop    esi
c0015e76:	e9 87 a8 00 00       	jmp    c0020702 <KePanic(char const*)>
c0015e7b:	90                   	nop

c0015e7c <GDTEntry::setBase(unsigned int)>:
c0015e7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015e84:	89 c1                	mov    ecx,eax
c0015e86:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0015e8a:	c1 e9 10             	shr    ecx,0x10
c0015e8d:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0015e90:	c1 e8 18             	shr    eax,0x18
c0015e93:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0015e96:	c3                   	ret    
c0015e97:	90                   	nop

c0015e98 <GDTEntry::setLimit(unsigned int)>:
c0015e98:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ea0:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0015ea3:	66 89 01             	mov    WORD PTR [ecx],ax
c0015ea6:	c1 e8 10             	shr    eax,0x10
c0015ea9:	83 e0 0f             	and    eax,0xf
c0015eac:	83 e2 f0             	and    edx,0xfffffff0
c0015eaf:	09 d0                	or     eax,edx
c0015eb1:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0015eb4:	c3                   	ret    
c0015eb5:	90                   	nop

c0015eb6 <GDT::GDT()>:
c0015eb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015eba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015ec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ec4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015eca:	90                   	nop
c0015ecb:	c3                   	ret    

c0015ecc <GDT::addEntry(GDTEntry)>:
c0015ecc:	53                   	push   ebx
c0015ecd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015ed1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015ed5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ed9:	8b 02                	mov    eax,DWORD PTR [edx]
c0015edb:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0015edf:	8d 48 01             	lea    ecx,[eax+0x1]
c0015ee2:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0015ee6:	c1 e0 03             	shl    eax,0x3
c0015ee9:	89 0a                	mov    DWORD PTR [edx],ecx
c0015eeb:	5b                   	pop    ebx
c0015eec:	c3                   	ret    
c0015eed:	90                   	nop

c0015eee <GDT::getNumberOfEntries()>:
c0015eee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ef2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ef4:	c3                   	ret    
c0015ef5:	90                   	nop

c0015ef6 <GDT::flush()>:
c0015ef6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015efa:	8b 10                	mov    edx,DWORD PTR [eax]
c0015efc:	83 c0 04             	add    eax,0x4
c0015eff:	a3 c6 b9 03 c0       	mov    ds:0xc003b9c6,eax
c0015f04:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0015f0b:	66 89 15 c4 b9 03 c0 	mov    WORD PTR ds:0xc003b9c4,dx
c0015f12:	e9 43 a4 fe ff       	jmp    c000035a <loadGDT>
c0015f17:	90                   	nop

c0015f18 <GDT::setup()>:
c0015f18:	57                   	push   edi
c0015f19:	56                   	push   esi
c0015f1a:	53                   	push   ebx
c0015f1b:	83 ec 30             	sub    esp,0x30
c0015f1e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0015f22:	6a 00                	push   0x0
c0015f24:	8d 74 24 14          	lea    esi,[esp+0x14]
c0015f28:	56                   	push   esi
c0015f29:	e8 4e ff ff ff       	call   c0015e7c <GDTEntry::setBase(unsigned int)>
c0015f2e:	6a 00                	push   0x0
c0015f30:	56                   	push   esi
c0015f31:	e8 62 ff ff ff       	call   c0015e98 <GDTEntry::setLimit(unsigned int)>
c0015f36:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0015f3e:	6a 00                	push   0x0
c0015f40:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015f44:	56                   	push   esi
c0015f45:	e8 32 ff ff ff       	call   c0015e7c <GDTEntry::setBase(unsigned int)>
c0015f4a:	68 ff ff ff 00       	push   0xffffff
c0015f4f:	56                   	push   esi
c0015f50:	e8 43 ff ff ff       	call   c0015e98 <GDTEntry::setLimit(unsigned int)>
c0015f55:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015f59:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015f5d:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0015f62:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015f66:	0d 00 9a c0 00       	or     eax,0xc09a00
c0015f6b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015f6f:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0015f73:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0015f77:	89 f8                	mov    eax,edi
c0015f79:	89 fa                	mov    edx,edi
c0015f7b:	80 e4 f7             	and    ah,0xf7
c0015f7e:	80 ce 60             	or     dh,0x60
c0015f81:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015f85:	89 c7                	mov    edi,eax
c0015f87:	80 cc 60             	or     ah,0x60
c0015f8a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015f8e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015f92:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015f96:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0015f9a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015f9e:	83 c4 20             	add    esp,0x20
c0015fa1:	6a 00                	push   0x0
c0015fa3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015fa7:	50                   	push   eax
c0015fa8:	e8 cf fe ff ff       	call   c0015e7c <GDTEntry::setBase(unsigned int)>
c0015fad:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0015fb1:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0015fb5:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0015fb9:	83 e0 3f             	and    eax,0x3f
c0015fbc:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015fc0:	6a 00                	push   0x0
c0015fc2:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015fc6:	50                   	push   eax
c0015fc7:	e8 b0 fe ff ff       	call   c0015e7c <GDTEntry::setBase(unsigned int)>
c0015fcc:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0015fd0:	83 e0 3f             	and    eax,0x3f
c0015fd3:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0015fd7:	83 c4 0c             	add    esp,0xc
c0015fda:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015fde:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015fe2:	53                   	push   ebx
c0015fe3:	e8 e4 fe ff ff       	call   c0015ecc <GDT::addEntry(GDTEntry)>
c0015fe8:	83 c4 0c             	add    esp,0xc
c0015feb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015fef:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015ff3:	53                   	push   ebx
c0015ff4:	e8 d3 fe ff ff       	call   c0015ecc <GDT::addEntry(GDTEntry)>
c0015ff9:	83 c4 0c             	add    esp,0xc
c0015ffc:	57                   	push   edi
c0015ffd:	56                   	push   esi
c0015ffe:	53                   	push   ebx
c0015fff:	e8 c8 fe ff ff       	call   c0015ecc <GDT::addEntry(GDTEntry)>
c0016004:	83 c4 0c             	add    esp,0xc
c0016007:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001600b:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001600f:	53                   	push   ebx
c0016010:	e8 b7 fe ff ff       	call   c0015ecc <GDT::addEntry(GDTEntry)>
c0016015:	83 c4 0c             	add    esp,0xc
c0016018:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001601c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016020:	53                   	push   ebx
c0016021:	e8 a6 fe ff ff       	call   c0015ecc <GDT::addEntry(GDTEntry)>
c0016026:	83 c4 0c             	add    esp,0xc
c0016029:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001602d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016031:	53                   	push   ebx
c0016032:	e8 95 fe ff ff       	call   c0015ecc <GDT::addEntry(GDTEntry)>
c0016037:	83 c4 0c             	add    esp,0xc
c001603a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001603e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016042:	53                   	push   ebx
c0016043:	e8 84 fe ff ff       	call   c0015ecc <GDT::addEntry(GDTEntry)>
c0016048:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001604b:	e8 a6 fe ff ff       	call   c0015ef6 <GDT::flush()>
c0016050:	83 c4 40             	add    esp,0x40
c0016053:	5b                   	pop    ebx
c0016054:	5e                   	pop    esi
c0016055:	5f                   	pop    edi
c0016056:	c3                   	ret    

c0016057 <idleFunction(void*)>:
c0016057:	83 ec 0c             	sub    esp,0xc
c001605a:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001605f:	48                   	dec    eax
c0016060:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0016065:	75 01                	jne    c0016068 <idleFunction(void*)+0x11>
c0016067:	fb                   	sti    
c0016068:	e8 d8 10 01 00       	call   c0027145 <HalSystemIdle()>
c001606d:	e8 c0 90 01 00       	call   c002f132 <idleCommon()>
c0016072:	eb f4                	jmp    c0016068 <idleFunction(void*)+0x11>

c0016074 <IDTEntry::IDTEntry(bool)>:
c0016074:	53                   	push   ebx
c0016075:	83 ec 04             	sub    esp,0x4
c0016078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001607c:	88 04 24             	mov    BYTE PTR [esp],al
c001607f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016083:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0016089:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001608d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0016091:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016095:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0016098:	83 e2 f0             	and    edx,0xfffffff0
c001609b:	83 ca 0e             	or     edx,0xe
c001609e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00160a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160a5:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00160a8:	83 e2 ef             	and    edx,0xffffffef
c00160ab:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00160ae:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c00160b2:	85 c0                	test   eax,eax
c00160b4:	74 06                	je     c00160bc <IDTEntry::IDTEntry(bool)+0x48>
c00160b6:	b2 03                	mov    dl,0x3
c00160b8:	eb 06                	jmp    c00160c0 <IDTEntry::IDTEntry(bool)+0x4c>
c00160ba:	66 90                	xchg   ax,ax
c00160bc:	b2 00                	mov    dl,0x0
c00160be:	66 90                	xchg   ax,ax
c00160c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160c4:	83 e2 03             	and    edx,0x3
c00160c7:	89 d3                	mov    ebx,edx
c00160c9:	c1 e3 05             	shl    ebx,0x5
c00160cc:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00160cf:	83 e2 9f             	and    edx,0xffffff9f
c00160d2:	88 d1                	mov    cl,dl
c00160d4:	88 da                	mov    dl,bl
c00160d6:	09 ca                	or     edx,ecx
c00160d8:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00160db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160df:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00160e2:	83 ca 80             	or     edx,0xffffff80
c00160e5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00160e8:	90                   	nop
c00160e9:	83 c4 04             	add    esp,0x4
c00160ec:	5b                   	pop    ebx
c00160ed:	c3                   	ret    

c00160ee <IDTEntry::setOffset(unsigned int)>:
c00160ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00160f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00160f6:	66 89 02             	mov    WORD PTR [edx],ax
c00160f9:	c1 e8 10             	shr    eax,0x10
c00160fc:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0016100:	c3                   	ret    
c0016101:	90                   	nop
c0016102:	66 90                	xchg   ax,ax

c0016104 <IDT::IDT()>:
c0016104:	90                   	nop
c0016105:	c3                   	ret    

c0016106 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0016106:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001610a:	83 c0 30             	add    eax,0x30
c001610d:	c3                   	ret    

c001610e <IDT::addEntry(IDTEntry, int)>:
c001610e:	53                   	push   ebx
c001610f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016113:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016117:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001611b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001611f:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0016122:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0016126:	5b                   	pop    ebx
c0016127:	c3                   	ret    

c0016128 <IDT::addEntry(int, void (*)(), bool)>:
c0016128:	53                   	push   ebx
c0016129:	83 ec 10             	sub    esp,0x10
c001612c:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0016131:	50                   	push   eax
c0016132:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0016136:	53                   	push   ebx
c0016137:	e8 38 ff ff ff       	call   c0016074 <IDTEntry::IDTEntry(bool)>
c001613c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016140:	53                   	push   ebx
c0016141:	e8 a8 ff ff ff       	call   c00160ee <IDTEntry::setOffset(unsigned int)>
c0016146:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001614a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001614e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016156:	e8 b3 ff ff ff       	call   c001610e <IDT::addEntry(IDTEntry, int)>
c001615b:	83 c4 30             	add    esp,0x30
c001615e:	5b                   	pop    ebx
c001615f:	c3                   	ret    

c0016160 <IDT::flush()>:
c0016160:	66 c7 05 cc b9 03 c0 ff 07 	mov    WORD PTR ds:0xc003b9cc,0x7ff
c0016169:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001616d:	a3 ce b9 03 c0       	mov    ds:0xc003b9ce,eax
c0016172:	0f 01 1d cc b9 03 c0 	lidtd  ds:0xc003b9cc
c0016179:	c3                   	ret    

c001617a <IDT::setup()>:
c001617a:	57                   	push   edi
c001617b:	56                   	push   esi
c001617c:	53                   	push   ebx
c001617d:	83 ec 10             	sub    esp,0x10
c0016180:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016184:	6a 00                	push   0x0
c0016186:	68 30 e8 02 c0       	push   0xc002e830
c001618b:	6a 00                	push   0x0
c001618d:	53                   	push   ebx
c001618e:	e8 95 ff ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c0016193:	6a 00                	push   0x0
c0016195:	68 40 e8 02 c0       	push   0xc002e840
c001619a:	6a 01                	push   0x1
c001619c:	53                   	push   ebx
c001619d:	e8 86 ff ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c00161a2:	83 c4 20             	add    esp,0x20
c00161a5:	6a 00                	push   0x0
c00161a7:	68 4a e8 02 c0       	push   0xc002e84a
c00161ac:	6a 02                	push   0x2
c00161ae:	53                   	push   ebx
c00161af:	e8 74 ff ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c00161b4:	6a 00                	push   0x0
c00161b6:	68 54 e8 02 c0       	push   0xc002e854
c00161bb:	6a 03                	push   0x3
c00161bd:	53                   	push   ebx
c00161be:	e8 65 ff ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c00161c3:	83 c4 20             	add    esp,0x20
c00161c6:	6a 00                	push   0x0
c00161c8:	68 5e e8 02 c0       	push   0xc002e85e
c00161cd:	6a 04                	push   0x4
c00161cf:	53                   	push   ebx
c00161d0:	e8 53 ff ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c00161d5:	6a 00                	push   0x0
c00161d7:	68 68 e8 02 c0       	push   0xc002e868
c00161dc:	6a 05                	push   0x5
c00161de:	53                   	push   ebx
c00161df:	e8 44 ff ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c00161e4:	83 c4 20             	add    esp,0x20
c00161e7:	6a 00                	push   0x0
c00161e9:	68 72 e8 02 c0       	push   0xc002e872
c00161ee:	6a 06                	push   0x6
c00161f0:	53                   	push   ebx
c00161f1:	e8 32 ff ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c00161f6:	6a 00                	push   0x0
c00161f8:	68 7c e8 02 c0       	push   0xc002e87c
c00161fd:	6a 07                	push   0x7
c00161ff:	53                   	push   ebx
c0016200:	e8 23 ff ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c0016205:	83 c4 20             	add    esp,0x20
c0016208:	6a 00                	push   0x0
c001620a:	68 86 e8 02 c0       	push   0xc002e886
c001620f:	6a 08                	push   0x8
c0016211:	53                   	push   ebx
c0016212:	e8 11 ff ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c0016217:	6a 00                	push   0x0
c0016219:	68 8e e8 02 c0       	push   0xc002e88e
c001621e:	6a 09                	push   0x9
c0016220:	53                   	push   ebx
c0016221:	e8 02 ff ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c0016226:	83 c4 20             	add    esp,0x20
c0016229:	6a 00                	push   0x0
c001622b:	68 98 e8 02 c0       	push   0xc002e898
c0016230:	6a 0a                	push   0xa
c0016232:	53                   	push   ebx
c0016233:	e8 f0 fe ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c0016238:	6a 00                	push   0x0
c001623a:	68 a0 e8 02 c0       	push   0xc002e8a0
c001623f:	6a 0b                	push   0xb
c0016241:	53                   	push   ebx
c0016242:	e8 e1 fe ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c0016247:	83 c4 20             	add    esp,0x20
c001624a:	6a 00                	push   0x0
c001624c:	68 a8 e8 02 c0       	push   0xc002e8a8
c0016251:	6a 0c                	push   0xc
c0016253:	53                   	push   ebx
c0016254:	e8 cf fe ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c0016259:	6a 00                	push   0x0
c001625b:	68 b0 e8 02 c0       	push   0xc002e8b0
c0016260:	6a 0d                	push   0xd
c0016262:	53                   	push   ebx
c0016263:	e8 c0 fe ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c0016268:	83 c4 20             	add    esp,0x20
c001626b:	6a 00                	push   0x0
c001626d:	68 ca e8 02 c0       	push   0xc002e8ca
c0016272:	6a 0e                	push   0xe
c0016274:	53                   	push   ebx
c0016275:	e8 ae fe ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c001627a:	6a 00                	push   0x0
c001627c:	68 d2 e8 02 c0       	push   0xc002e8d2
c0016281:	6a 0f                	push   0xf
c0016283:	53                   	push   ebx
c0016284:	e8 9f fe ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c0016289:	83 c4 20             	add    esp,0x20
c001628c:	6a 00                	push   0x0
c001628e:	68 dc e8 02 c0       	push   0xc002e8dc
c0016293:	6a 10                	push   0x10
c0016295:	53                   	push   ebx
c0016296:	e8 8d fe ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c001629b:	6a 00                	push   0x0
c001629d:	68 e6 e8 02 c0       	push   0xc002e8e6
c00162a2:	6a 11                	push   0x11
c00162a4:	53                   	push   ebx
c00162a5:	e8 7e fe ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c00162aa:	83 c4 20             	add    esp,0x20
c00162ad:	6a 00                	push   0x0
c00162af:	68 f0 e8 02 c0       	push   0xc002e8f0
c00162b4:	6a 12                	push   0x12
c00162b6:	53                   	push   ebx
c00162b7:	e8 6c fe ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c00162bc:	6a 01                	push   0x1
c00162be:	68 8a e9 02 c0       	push   0xc002e98a
c00162c3:	6a 60                	push   0x60
c00162c5:	53                   	push   ebx
c00162c6:	e8 5d fe ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c00162cb:	83 c4 20             	add    esp,0x20
c00162ce:	6a 00                	push   0x0
c00162d0:	68 91 e9 02 c0       	push   0xc002e991
c00162d5:	6a 20                	push   0x20
c00162d7:	53                   	push   ebx
c00162d8:	e8 4b fe ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c00162dd:	6a 00                	push   0x0
c00162df:	68 7c e9 02 c0       	push   0xc002e97c
c00162e4:	6a 21                	push   0x21
c00162e6:	53                   	push   ebx
c00162e7:	e8 3c fe ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c00162ec:	83 c4 20             	add    esp,0x20
c00162ef:	6a 00                	push   0x0
c00162f1:	68 83 e9 02 c0       	push   0xc002e983
c00162f6:	6a 22                	push   0x22
c00162f8:	53                   	push   ebx
c00162f9:	e8 2a fe ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c00162fe:	6a 00                	push   0x0
c0016300:	68 fa e8 02 c0       	push   0xc002e8fa
c0016305:	6a 23                	push   0x23
c0016307:	53                   	push   ebx
c0016308:	e8 1b fe ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c001630d:	83 c4 20             	add    esp,0x20
c0016310:	6a 00                	push   0x0
c0016312:	68 04 e9 02 c0       	push   0xc002e904
c0016317:	6a 24                	push   0x24
c0016319:	53                   	push   ebx
c001631a:	e8 09 fe ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c001631f:	6a 00                	push   0x0
c0016321:	68 0e e9 02 c0       	push   0xc002e90e
c0016326:	6a 25                	push   0x25
c0016328:	53                   	push   ebx
c0016329:	e8 fa fd ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c001632e:	83 c4 20             	add    esp,0x20
c0016331:	6a 00                	push   0x0
c0016333:	68 18 e9 02 c0       	push   0xc002e918
c0016338:	6a 26                	push   0x26
c001633a:	53                   	push   ebx
c001633b:	e8 e8 fd ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c0016340:	6a 00                	push   0x0
c0016342:	68 22 e9 02 c0       	push   0xc002e922
c0016347:	6a 27                	push   0x27
c0016349:	53                   	push   ebx
c001634a:	e8 d9 fd ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c001634f:	83 c4 20             	add    esp,0x20
c0016352:	6a 00                	push   0x0
c0016354:	68 2c e9 02 c0       	push   0xc002e92c
c0016359:	6a 28                	push   0x28
c001635b:	53                   	push   ebx
c001635c:	e8 c7 fd ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c0016361:	6a 00                	push   0x0
c0016363:	68 36 e9 02 c0       	push   0xc002e936
c0016368:	6a 29                	push   0x29
c001636a:	53                   	push   ebx
c001636b:	e8 b8 fd ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c0016370:	83 c4 20             	add    esp,0x20
c0016373:	6a 00                	push   0x0
c0016375:	68 40 e9 02 c0       	push   0xc002e940
c001637a:	6a 2a                	push   0x2a
c001637c:	53                   	push   ebx
c001637d:	e8 a6 fd ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c0016382:	6a 00                	push   0x0
c0016384:	68 4a e9 02 c0       	push   0xc002e94a
c0016389:	6a 2b                	push   0x2b
c001638b:	53                   	push   ebx
c001638c:	e8 97 fd ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c0016391:	83 c4 20             	add    esp,0x20
c0016394:	6a 00                	push   0x0
c0016396:	68 54 e9 02 c0       	push   0xc002e954
c001639b:	6a 2c                	push   0x2c
c001639d:	53                   	push   ebx
c001639e:	e8 85 fd ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c00163a3:	6a 00                	push   0x0
c00163a5:	68 5e e9 02 c0       	push   0xc002e95e
c00163aa:	6a 2d                	push   0x2d
c00163ac:	53                   	push   ebx
c00163ad:	e8 76 fd ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c00163b2:	83 c4 20             	add    esp,0x20
c00163b5:	6a 00                	push   0x0
c00163b7:	68 68 e9 02 c0       	push   0xc002e968
c00163bc:	6a 2e                	push   0x2e
c00163be:	53                   	push   ebx
c00163bf:	e8 64 fd ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c00163c4:	6a 00                	push   0x0
c00163c6:	68 72 e9 02 c0       	push   0xc002e972
c00163cb:	6a 2f                	push   0x2f
c00163cd:	53                   	push   ebx
c00163ce:	e8 55 fd ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c00163d3:	83 c4 20             	add    esp,0x20
c00163d6:	6a 00                	push   0x0
c00163d8:	68 cc ea 02 c0       	push   0xc002eacc
c00163dd:	6a 30                	push   0x30
c00163df:	53                   	push   ebx
c00163e0:	e8 43 fd ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c00163e5:	6a 00                	push   0x0
c00163e7:	68 d6 ea 02 c0       	push   0xc002ead6
c00163ec:	6a 31                	push   0x31
c00163ee:	53                   	push   ebx
c00163ef:	e8 34 fd ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c00163f4:	83 c4 20             	add    esp,0x20
c00163f7:	6a 00                	push   0x0
c00163f9:	68 e0 ea 02 c0       	push   0xc002eae0
c00163fe:	6a 32                	push   0x32
c0016400:	53                   	push   ebx
c0016401:	e8 22 fd ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c0016406:	6a 00                	push   0x0
c0016408:	68 ea ea 02 c0       	push   0xc002eaea
c001640d:	6a 33                	push   0x33
c001640f:	53                   	push   ebx
c0016410:	e8 13 fd ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c0016415:	83 c4 20             	add    esp,0x20
c0016418:	6a 00                	push   0x0
c001641a:	68 f4 ea 02 c0       	push   0xc002eaf4
c001641f:	6a 34                	push   0x34
c0016421:	53                   	push   ebx
c0016422:	e8 01 fd ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c0016427:	6a 00                	push   0x0
c0016429:	68 fe ea 02 c0       	push   0xc002eafe
c001642e:	6a 35                	push   0x35
c0016430:	53                   	push   ebx
c0016431:	e8 f2 fc ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c0016436:	83 c4 20             	add    esp,0x20
c0016439:	6a 00                	push   0x0
c001643b:	68 08 eb 02 c0       	push   0xc002eb08
c0016440:	6a 36                	push   0x36
c0016442:	53                   	push   ebx
c0016443:	e8 e0 fc ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c0016448:	6a 00                	push   0x0
c001644a:	68 12 eb 02 c0       	push   0xc002eb12
c001644f:	6a 37                	push   0x37
c0016451:	53                   	push   ebx
c0016452:	e8 d1 fc ff ff       	call   c0016128 <IDT::addEntry(int, void (*)(), bool)>
c0016457:	83 c4 1c             	add    esp,0x1c
c001645a:	6a 03                	push   0x3
c001645c:	6a 02                	push   0x2
c001645e:	ff 35 b0 ba 03 c0    	push   DWORD PTR ds:0xc003bab0
c0016464:	e8 51 25 00 00       	call   c00189ba <VAS::allocatePages(int, int)>
c0016469:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0016470:	89 c6                	mov    esi,eax
c0016472:	e8 11 02 00 00       	call   c0016688 <malloc>
c0016477:	81 c6 00 20 00 00    	add    esi,0x2000
c001647d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016480:	89 c7                	mov    edi,eax
c0016482:	e8 59 16 00 00       	call   c0017ae0 <TSS::TSS()>
c0016487:	83 c4 0c             	add    esp,0xc
c001648a:	68 86 e8 02 c0       	push   0xc002e886
c001648f:	56                   	push   esi
c0016490:	57                   	push   edi
c0016491:	e8 8e 16 00 00       	call   c0017b24 <TSS::setup(unsigned long, unsigned long)>
c0016496:	89 c6                	mov    esi,eax
c0016498:	58                   	pop    eax
c0016499:	5a                   	pop    edx
c001649a:	6a 00                	push   0x0
c001649c:	8d 44 24 14          	lea    eax,[esp+0x14]
c00164a0:	50                   	push   eax
c00164a1:	e8 ce fb ff ff       	call   c0016074 <IDTEntry::IDTEntry(bool)>
c00164a6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00164aa:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00164af:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00164b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00164ba:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c00164c0:	80 ce 05             	or     dh,0x5
c00164c3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00164c7:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c00164ca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00164ce:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00164d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00164d4:	e8 87 fc ff ff       	call   c0016160 <IDT::flush()>
c00164d9:	83 c4 20             	add    esp,0x20
c00164dc:	5b                   	pop    ebx
c00164dd:	5e                   	pop    esi
c00164de:	5f                   	pop    edi
c00164df:	c3                   	ret    

c00164e0 <sbrk>:
c00164e0:	55                   	push   ebp
c00164e1:	57                   	push   edi
c00164e2:	56                   	push   esi
c00164e3:	53                   	push   ebx
c00164e4:	83 ec 1c             	sub    esp,0x1c
c00164e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00164eb:	85 c0                	test   eax,eax
c00164ed:	74 66                	je     c0016555 <sbrk+0x75>
c00164ef:	78 6b                	js     c001655c <sbrk+0x7c>
c00164f1:	8b 15 d8 44 03 c0    	mov    edx,DWORD PTR ds:0xc00344d8
c00164f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00164fb:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c0016501:	05 ff 0f 00 00       	add    eax,0xfff
c0016506:	0f 49 e8             	cmovns ebp,eax
c0016509:	c1 fd 0c             	sar    ebp,0xc
c001650c:	bb 00 00 00 00       	mov    ebx,0x0
c0016511:	8b 35 b0 ba 03 c0    	mov    esi,DWORD PTR ds:0xc003bab0
c0016517:	8b 3d d8 44 03 c0    	mov    edi,DWORD PTR ds:0xc00344d8
c001651d:	e8 75 04 00 00       	call   c0016997 <Phys::allocatePage()>
c0016522:	68 01 04 00 00       	push   0x401
c0016527:	57                   	push   edi
c0016528:	50                   	push   eax
c0016529:	56                   	push   esi
c001652a:	e8 83 23 00 00       	call   c00188b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c001652f:	81 05 d8 44 03 c0 00 10 00 00 	add    DWORD PTR ds:0xc00344d8,0x1000
c0016539:	83 c3 01             	add    ebx,0x1
c001653c:	83 c4 10             	add    esp,0x10
c001653f:	39 dd                	cmp    ebp,ebx
c0016541:	75 ce                	jne    c0016511 <sbrk+0x31>
c0016543:	0f 20 d8             	mov    eax,cr3
c0016546:	0f 22 d8             	mov    cr3,eax
c0016549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001654d:	83 c4 1c             	add    esp,0x1c
c0016550:	5b                   	pop    ebx
c0016551:	5e                   	pop    esi
c0016552:	5f                   	pop    edi
c0016553:	5d                   	pop    ebp
c0016554:	c3                   	ret    
c0016555:	a1 d8 44 03 c0       	mov    eax,ds:0xc00344d8
c001655a:	eb f1                	jmp    c001654d <sbrk+0x6d>
c001655c:	83 ec 08             	sub    esp,0x8
c001655f:	50                   	push   eax
c0016560:	68 58 19 03 c0       	push   0xc0031958
c0016565:	e8 54 2f 00 00       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001656a:	83 c4 10             	add    esp,0x10
c001656d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016572:	eb d9                	jmp    c001654d <sbrk+0x6d>

c0016574 <sbrk_thunk>:
c0016574:	83 ec 0c             	sub    esp,0xc
c0016577:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001657b:	3d ff bf 00 00       	cmp    eax,0xbfff
c0016580:	7f 10                	jg     c0016592 <sbrk_thunk+0x1e>
c0016582:	83 ec 0c             	sub    esp,0xc
c0016585:	50                   	push   eax
c0016586:	e8 55 ff ff ff       	call   c00164e0 <sbrk>
c001658b:	83 c4 10             	add    esp,0x10
c001658e:	83 c4 0c             	add    esp,0xc
c0016591:	c3                   	ret    
c0016592:	83 ec 08             	sub    esp,0x8
c0016595:	50                   	push   eax
c0016596:	68 88 19 03 c0       	push   0xc0031988
c001659b:	e8 1e 2f 00 00       	call   c00194be <Dbg::kprintf(char const*, ...)>
c00165a0:	83 c4 10             	add    esp,0x10
c00165a3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00165a8:	eb e4                	jmp    c001658e <sbrk_thunk+0x1a>

c00165aa <mmap>:
c00165aa:	55                   	push   ebp
c00165ab:	57                   	push   edi
c00165ac:	56                   	push   esi
c00165ad:	53                   	push   ebx
c00165ae:	83 ec 18             	sub    esp,0x18
c00165b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00165b5:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00165bb:	89 fb                	mov    ebx,edi
c00165bd:	c1 eb 0c             	shr    ebx,0xc
c00165c0:	53                   	push   ebx
c00165c1:	e8 e3 1b 00 00       	call   c00181a9 <Virt::allocateKernelVirtualPages(int)>
c00165c6:	89 c5                	mov    ebp,eax
c00165c8:	83 c4 10             	add    esp,0x10
c00165cb:	85 db                	test   ebx,ebx
c00165cd:	7e 2f                	jle    c00165fe <mmap+0x54>
c00165cf:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c00165d5:	01 c7                	add    edi,eax
c00165d7:	89 c3                	mov    ebx,eax
c00165d9:	8b 35 b0 ba 03 c0    	mov    esi,DWORD PTR ds:0xc003bab0
c00165df:	e8 b3 03 00 00       	call   c0016997 <Phys::allocatePage()>
c00165e4:	68 01 04 00 00       	push   0x401
c00165e9:	53                   	push   ebx
c00165ea:	50                   	push   eax
c00165eb:	56                   	push   esi
c00165ec:	e8 c1 22 00 00       	call   c00188b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c00165f1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00165f7:	83 c4 10             	add    esp,0x10
c00165fa:	39 fb                	cmp    ebx,edi
c00165fc:	75 db                	jne    c00165d9 <mmap+0x2f>
c00165fe:	89 e8                	mov    eax,ebp
c0016600:	83 c4 0c             	add    esp,0xc
c0016603:	5b                   	pop    ebx
c0016604:	5e                   	pop    esi
c0016605:	5f                   	pop    edi
c0016606:	5d                   	pop    ebp
c0016607:	c3                   	ret    

c0016608 <munmap>:
c0016608:	83 ec 18             	sub    esp,0x18
c001660b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001660f:	e8 a9 1e 00 00       	call   c00184bd <Virt::freeKernelVirtualPages(unsigned long)>
c0016614:	b8 00 00 00 00       	mov    eax,0x0
c0016619:	83 c4 1c             	add    esp,0x1c
c001661c:	c3                   	ret    

c001661d <liballoc_lock()>:
c001661d:	fa                   	cli    
c001661e:	83 05 d0 11 04 c0 01 	add    DWORD PTR ds:0xc00411d0,0x1
c0016625:	b8 00 00 00 00       	mov    eax,0x0
c001662a:	c3                   	ret    

c001662b <liballoc_unlock()>:
c001662b:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0016630:	83 e8 01             	sub    eax,0x1
c0016633:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0016638:	75 01                	jne    c001663b <liballoc_unlock()+0x10>
c001663a:	fb                   	sti    
c001663b:	b8 00 00 00 00       	mov    eax,0x0
c0016640:	c3                   	ret    

c0016641 <liballoc_alloc(int)>:
c0016641:	83 ec 10             	sub    esp,0x10
c0016644:	6a 01                	push   0x1
c0016646:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001664a:	ff 35 b0 ba 03 c0    	push   DWORD PTR ds:0xc003bab0
c0016650:	e8 65 23 00 00       	call   c00189ba <VAS::allocatePages(int, int)>
c0016655:	83 c4 1c             	add    esp,0x1c
c0016658:	c3                   	ret    

c0016659 <liballoc_free(void*, int)>:
c0016659:	83 ec 14             	sub    esp,0x14
c001665c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016660:	ff 35 b0 ba 03 c0    	push   DWORD PTR ds:0xc003bab0
c0016666:	e8 8f 1f 00 00       	call   c00185fa <VAS::freeAllocatedPages(unsigned long)>
c001666b:	b8 00 00 00 00       	mov    eax,0x0
c0016670:	83 c4 1c             	add    esp,0x1c
c0016673:	c3                   	ret    

c0016674 <realloc>:
c0016674:	83 ec 14             	sub    esp,0x14
c0016677:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001667b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001667f:	e8 b8 b2 fe ff       	call   c000193c <dlrealloc>
c0016684:	83 c4 1c             	add    esp,0x1c
c0016687:	c3                   	ret    

c0016688 <malloc>:
c0016688:	83 ec 18             	sub    esp,0x18
c001668b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001668f:	e8 6b ad fe ff       	call   c00013ff <dlmalloc>
c0016694:	83 c4 1c             	add    esp,0x1c
c0016697:	c3                   	ret    

c0016698 <free>:
c0016698:	83 ec 18             	sub    esp,0x18
c001669b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001669f:	e8 99 a8 fe ff       	call   c0000f3d <dlfree>
c00166a4:	83 c4 1c             	add    esp,0x1c
c00166a7:	c3                   	ret    

c00166a8 <rfree>:
c00166a8:	83 ec 18             	sub    esp,0x18
c00166ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00166af:	e8 89 a8 fe ff       	call   c0000f3d <dlfree>
c00166b4:	83 c4 1c             	add    esp,0x1c
c00166b7:	c3                   	ret    

c00166b8 <calloc>:
c00166b8:	56                   	push   esi
c00166b9:	53                   	push   ebx
c00166ba:	83 ec 10             	sub    esp,0x10
c00166bd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00166c1:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00166c6:	53                   	push   ebx
c00166c7:	e8 bc ff ff ff       	call   c0016688 <malloc>
c00166cc:	89 c6                	mov    esi,eax
c00166ce:	83 c4 0c             	add    esp,0xc
c00166d1:	53                   	push   ebx
c00166d2:	6a 00                	push   0x0
c00166d4:	50                   	push   eax
c00166d5:	e8 16 9e fe ff       	call   c00004f0 <memset>
c00166da:	89 f0                	mov    eax,esi
c00166dc:	83 c4 14             	add    esp,0x14
c00166df:	5b                   	pop    ebx
c00166e0:	5e                   	pop    esi
c00166e1:	c3                   	ret    

c00166e2 <KeEntryPoint>:
c00166e2:	57                   	push   edi
c00166e3:	bf f9 03 00 00       	mov    edi,0x3f9
c00166e8:	56                   	push   esi
c00166e9:	31 f6                	xor    esi,esi
c00166eb:	53                   	push   ebx
c00166ec:	89 fa                	mov    edx,edi
c00166ee:	83 ec 2c             	sub    esp,0x2c
c00166f1:	a1 00 05 00 00       	mov    eax,ds:0x500
c00166f6:	a3 d4 b9 03 c0       	mov    ds:0xc003b9d4,eax
c00166fb:	89 f0                	mov    eax,esi
c00166fd:	ee                   	out    dx,al
c00166fe:	bb fb 03 00 00       	mov    ebx,0x3fb
c0016703:	b0 80                	mov    al,0x80
c0016705:	89 da                	mov    edx,ebx
c0016707:	ee                   	out    dx,al
c0016708:	b1 03                	mov    cl,0x3
c001670a:	ba f8 03 00 00       	mov    edx,0x3f8
c001670f:	88 c8                	mov    al,cl
c0016711:	ee                   	out    dx,al
c0016712:	89 f0                	mov    eax,esi
c0016714:	89 fa                	mov    edx,edi
c0016716:	ee                   	out    dx,al
c0016717:	88 c8                	mov    al,cl
c0016719:	89 da                	mov    edx,ebx
c001671b:	ee                   	out    dx,al
c001671c:	b0 c7                	mov    al,0xc7
c001671e:	ba fa 03 00 00       	mov    edx,0x3fa
c0016723:	ee                   	out    dx,al
c0016724:	b0 0b                	mov    al,0xb
c0016726:	ba fc 03 00 00       	mov    edx,0x3fc
c001672b:	ee                   	out    dx,al
c001672c:	68 97 19 03 c0       	push   0xc0031997
c0016731:	e8 88 2d 00 00       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0016736:	e8 e6 95 00 00       	call   c001fd21 <KeDisplaySplashScreen()>
c001673b:	a1 24 05 00 00       	mov    eax,ds:0x524
c0016740:	05 ff 0f 00 00       	add    eax,0xfff
c0016745:	25 00 f0 ff ff       	and    eax,0xfffff000
c001674a:	89 04 24             	mov    DWORD PTR [esp],eax
c001674d:	e8 b3 03 00 00       	call   c0016b05 <Phys::physicalMemorySetup(unsigned int)>
c0016752:	e8 26 1c 00 00       	call   c001837d <Virt::virtualMemorySetup()>
c0016757:	e8 0f 95 00 00       	call   c001fc6b <KeInitialiseAtexit()>
c001675c:	58                   	pop    eax
c001675d:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0016761:	53                   	push   ebx
c0016762:	e8 13 1f 00 00       	call   c001867a <VAS::VAS()>
c0016767:	89 1d b0 ba 03 c0    	mov    DWORD PTR ds:0xc003bab0,ebx
c001676d:	e8 58 89 01 00       	call   c002f0ca <_init>
c0016772:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0016779:	e8 0a ff ff ff       	call   c0016688 <malloc>
c001677e:	89 04 24             	mov    DWORD PTR [esp],eax
c0016781:	89 c6                	mov    esi,eax
c0016783:	e8 ba f1 ff ff       	call   c0015942 <Computer::Computer()>
c0016788:	53                   	push   ebx
c0016789:	6a 00                	push   0x0
c001678b:	6a 00                	push   0x0
c001678d:	56                   	push   esi
c001678e:	89 35 bc b9 03 c0    	mov    DWORD PTR ds:0xc003b9bc,esi
c0016794:	e8 6f f5 ff ff       	call   c0015d08 <Computer::open(int, int, void*)>
c0016799:	83 c4 14             	add    esp,0x14
c001679c:	53                   	push   ebx
c001679d:	e8 a2 1f 00 00       	call   c0018744 <VAS::~VAS()>
c00167a2:	83 c4 30             	add    esp,0x30
c00167a5:	5b                   	pop    ebx
c00167a6:	5e                   	pop    esi
c00167a7:	5f                   	pop    edi
c00167a8:	c3                   	ret    

c00167a9 <Phys::allocateDMA(unsigned long)>:
c00167a9:	55                   	push   ebp
c00167aa:	31 ed                	xor    ebp,ebp
c00167ac:	57                   	push   edi
c00167ad:	56                   	push   esi
c00167ae:	31 f6                	xor    esi,esi
c00167b0:	53                   	push   ebx
c00167b1:	31 db                	xor    ebx,ebx
c00167b3:	83 ec 1c             	sub    esp,0x1c
c00167b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00167ba:	05 ff 0f 00 00       	add    eax,0xfff
c00167bf:	c1 e8 0c             	shr    eax,0xc
c00167c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00167c6:	31 c0                	xor    eax,eax
c00167c8:	eb 1b                	jmp    c00167e5 <Phys::allocateDMA(unsigned long)+0x3c>
c00167ca:	8d 78 01             	lea    edi,[eax+0x1]
c00167cd:	85 c0                	test   eax,eax
c00167cf:	0f 44 eb             	cmove  ebp,ebx
c00167d2:	0f 44 f3             	cmove  esi,ebx
c00167d5:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00167d9:	74 37                	je     c0016812 <Phys::allocateDMA(unsigned long)+0x69>
c00167db:	89 f8                	mov    eax,edi
c00167dd:	83 c3 01             	add    ebx,0x1
c00167e0:	83 fb 0f             	cmp    ebx,0xf
c00167e3:	7f 13                	jg     c00167f8 <Phys::allocateDMA(unsigned long)+0x4f>
c00167e5:	80 bb f0 b9 03 c0 00 	cmp    BYTE PTR [ebx-0x3ffc4610],0x0
c00167ec:	74 dc                	je     c00167ca <Phys::allocateDMA(unsigned long)+0x21>
c00167ee:	31 c0                	xor    eax,eax
c00167f0:	83 c3 01             	add    ebx,0x1
c00167f3:	83 fb 0f             	cmp    ebx,0xf
c00167f6:	7e ed                	jle    c00167e5 <Phys::allocateDMA(unsigned long)+0x3c>
c00167f8:	83 ec 0c             	sub    esp,0xc
c00167fb:	68 b0 19 03 c0       	push   0xc00319b0
c0016800:	e8 fd 9e 00 00       	call   c0020702 <KePanic(char const*)>
c0016805:	83 c4 10             	add    esp,0x10
c0016808:	31 c0                	xor    eax,eax
c001680a:	83 c4 1c             	add    esp,0x1c
c001680d:	5b                   	pop    ebx
c001680e:	5e                   	pop    esi
c001680f:	5f                   	pop    edi
c0016810:	5d                   	pop    ebp
c0016811:	c3                   	ret    
c0016812:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016816:	89 f2                	mov    edx,esi
c0016818:	c1 fa 04             	sar    edx,0x4
c001681b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001681f:	01 f1                	add    ecx,esi
c0016821:	8d 51 0e             	lea    edx,[ecx+0xe]
c0016824:	83 e9 01             	sub    ecx,0x1
c0016827:	0f 48 ca             	cmovs  ecx,edx
c001682a:	c1 f9 04             	sar    ecx,0x4
c001682d:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0016831:	74 06                	je     c0016839 <Phys::allocateDMA(unsigned long)+0x90>
c0016833:	89 eb                	mov    ebx,ebp
c0016835:	31 c0                	xor    eax,eax
c0016837:	eb b7                	jmp    c00167f0 <Phys::allocateDMA(unsigned long)+0x47>
c0016839:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001683d:	85 d2                	test   edx,edx
c001683f:	74 17                	je     c0016858 <Phys::allocateDMA(unsigned long)+0xaf>
c0016841:	8d 96 f0 b9 03 c0    	lea    edx,[esi-0x3ffc4610]
c0016847:	8d 84 06 f1 b9 03 c0 	lea    eax,[esi+eax*1-0x3ffc460f]
c001684e:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0016851:	83 c2 01             	add    edx,0x1
c0016854:	39 d0                	cmp    eax,edx
c0016856:	75 f6                	jne    c001684e <Phys::allocateDMA(unsigned long)+0xa5>
c0016858:	8b 15 e8 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9e8
c001685e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016862:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016866:	01 c2                	add    edx,eax
c0016868:	89 15 e8 b9 03 c0    	mov    DWORD PTR ds:0xc003b9e8,edx
c001686e:	85 c9                	test   ecx,ecx
c0016870:	74 17                	je     c0016889 <Phys::allocateDMA(unsigned long)+0xe0>
c0016872:	83 ec 0c             	sub    esp,0xc
c0016875:	68 b0 19 03 c0       	push   0xc00319b0
c001687a:	e8 83 9e 00 00       	call   c0020702 <KePanic(char const*)>
c001687f:	83 c4 10             	add    esp,0x10
c0016882:	89 f8                	mov    eax,edi
c0016884:	e9 54 ff ff ff       	jmp    c00167dd <Phys::allocateDMA(unsigned long)+0x34>
c0016889:	c1 e6 0c             	shl    esi,0xc
c001688c:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0016892:	e9 73 ff ff ff       	jmp    c001680a <Phys::allocateDMA(unsigned long)+0x61>

c0016897 <Phys::freeDMA(unsigned long, unsigned long)>:
c0016897:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001689b:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00168a1:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c00168a6:	c1 ea 0c             	shr    edx,0xc
c00168a9:	29 d0                	sub    eax,edx
c00168ab:	a3 e8 b9 03 c0       	mov    ds:0xc003b9e8,eax
c00168b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00168b4:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00168b9:	c1 e8 0c             	shr    eax,0xc
c00168bc:	85 d2                	test   edx,edx
c00168be:	74 11                	je     c00168d1 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c00168c0:	05 f0 b9 03 c0       	add    eax,0xc003b9f0
c00168c5:	01 c2                	add    edx,eax
c00168c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00168ca:	83 c0 01             	add    eax,0x1
c00168cd:	39 d0                	cmp    eax,edx
c00168cf:	75 f6                	jne    c00168c7 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c00168d1:	c3                   	ret    

c00168d2 <Phys::setPageState(unsigned long, bool)>:
c00168d2:	57                   	push   edi
c00168d3:	56                   	push   esi
c00168d4:	8b 35 dc 44 03 c0    	mov    esi,DWORD PTR ds:0xc00344dc
c00168da:	53                   	push   ebx
c00168db:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c00168e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00168e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00168e8:	89 ca                	mov    edx,ecx
c00168ea:	83 e1 07             	and    ecx,0x7
c00168ed:	c1 ea 03             	shr    edx,0x3
c00168f0:	0f b6 c0             	movzx  eax,al
c00168f3:	d3 c3                	rol    ebx,cl
c00168f5:	01 d6                	add    esi,edx
c00168f7:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c00168fa:	d3 e0                	shl    eax,cl
c00168fc:	21 fb                	and    ebx,edi
c00168fe:	88 1e                	mov    BYTE PTR [esi],bl
c0016900:	8b 1d dc 44 03 c0    	mov    ebx,DWORD PTR ds:0xc00344dc
c0016906:	01 da                	add    edx,ebx
c0016908:	8a 0a                	mov    cl,BYTE PTR [edx]
c001690a:	09 c8                	or     eax,ecx
c001690c:	88 02                	mov    BYTE PTR [edx],al
c001690e:	5b                   	pop    ebx
c001690f:	5e                   	pop    esi
c0016910:	5f                   	pop    edi
c0016911:	c3                   	ret    

c0016912 <Phys::getPageState(unsigned long)>:
c0016912:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016916:	8b 15 dc 44 03 c0    	mov    edx,DWORD PTR ds:0xc00344dc
c001691c:	89 c8                	mov    eax,ecx
c001691e:	83 e1 07             	and    ecx,0x7
c0016921:	c1 e8 03             	shr    eax,0x3
c0016924:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0016928:	d3 f8                	sar    eax,cl
c001692a:	83 e0 01             	and    eax,0x1
c001692d:	c3                   	ret    

c001692e <Phys::freePage(unsigned long)>:
c001692e:	53                   	push   ebx
c001692f:	83 ec 08             	sub    esp,0x8
c0016932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016936:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c001693c:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0016942:	76 41                	jbe    c0016985 <Phys::freePage(unsigned long)+0x57>
c0016944:	c1 e8 0c             	shr    eax,0xc
c0016947:	50                   	push   eax
c0016948:	89 c3                	mov    ebx,eax
c001694a:	e8 c3 ff ff ff       	call   c0016912 <Phys::getPageState(unsigned long)>
c001694f:	5a                   	pop    edx
c0016950:	84 c0                	test   al,al
c0016952:	74 20                	je     c0016974 <Phys::freePage(unsigned long)+0x46>
c0016954:	a1 e8 b9 03 c0       	mov    eax,ds:0xc003b9e8
c0016959:	83 ec 08             	sub    esp,0x8
c001695c:	6a 00                	push   0x0
c001695e:	53                   	push   ebx
c001695f:	83 e8 01             	sub    eax,0x1
c0016962:	a3 e8 b9 03 c0       	mov    ds:0xc003b9e8,eax
c0016967:	e8 66 ff ff ff       	call   c00168d2 <Phys::setPageState(unsigned long, bool)>
c001696c:	83 c4 10             	add    esp,0x10
c001696f:	83 c4 08             	add    esp,0x8
c0016972:	5b                   	pop    ebx
c0016973:	c3                   	ret    
c0016974:	c7 44 24 10 55 1a 03 c0 	mov    DWORD PTR [esp+0x10],0xc0031a55
c001697c:	83 c4 08             	add    esp,0x8
c001697f:	5b                   	pop    ebx
c0016980:	e9 7d 9d 00 00       	jmp    c0020702 <KePanic(char const*)>
c0016985:	68 00 10 00 00       	push   0x1000
c001698a:	50                   	push   eax
c001698b:	e8 07 ff ff ff       	call   c0016897 <Phys::freeDMA(unsigned long, unsigned long)>
c0016990:	59                   	pop    ecx
c0016991:	5b                   	pop    ebx
c0016992:	83 c4 08             	add    esp,0x8
c0016995:	5b                   	pop    ebx
c0016996:	c3                   	ret    

c0016997 <Phys::allocatePage()>:
c0016997:	56                   	push   esi
c0016998:	53                   	push   ebx
c0016999:	83 ec 14             	sub    esp,0x14
c001699c:	8b 35 dc b9 03 c0    	mov    esi,DWORD PTR ds:0xc003b9dc
c00169a2:	89 f3                	mov    ebx,esi
c00169a4:	eb 0a                	jmp    c00169b0 <Phys::allocatePage()+0x19>
c00169a6:	89 1d dc b9 03 c0    	mov    DWORD PTR ds:0xc003b9dc,ebx
c00169ac:	39 de                	cmp    esi,ebx
c00169ae:	74 26                	je     c00169d6 <Phys::allocatePage()+0x3f>
c00169b0:	53                   	push   ebx
c00169b1:	e8 5c ff ff ff       	call   c0016912 <Phys::getPageState(unsigned long)>
c00169b6:	5a                   	pop    edx
c00169b7:	84 c0                	test   al,al
c00169b9:	74 67                	je     c0016a22 <Phys::allocatePage()+0x8b>
c00169bb:	83 c3 01             	add    ebx,0x1
c00169be:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00169c4:	75 e0                	jne    c00169a6 <Phys::allocatePage()+0xf>
c00169c6:	c7 05 dc b9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b9dc,0x0
c00169d0:	31 db                	xor    ebx,ebx
c00169d2:	39 de                	cmp    esi,ebx
c00169d4:	75 da                	jne    c00169b0 <Phys::allocatePage()+0x19>
c00169d6:	a0 00 ba 03 c0       	mov    al,ds:0xc003ba00
c00169db:	83 ec 0c             	sub    esp,0xc
c00169de:	83 f0 01             	xor    eax,0x1
c00169e1:	a2 00 ba 03 c0       	mov    ds:0xc003ba00,al
c00169e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169eb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00169ee:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00169f4:	50                   	push   eax
c00169f5:	e8 78 27 00 00       	call   c0019172 <VAS::scanForEviction()>
c00169fa:	83 c4 10             	add    esp,0x10
c00169fd:	85 c0                	test   eax,eax
c00169ff:	75 48                	jne    c0016a49 <Phys::allocatePage()+0xb2>
c0016a01:	83 ec 0c             	sub    esp,0xc
c0016a04:	68 d8 19 03 c0       	push   0xc00319d8
c0016a09:	e8 f4 9c 00 00       	call   c0020702 <KePanic(char const*)>
c0016a0e:	8b 1d dc b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9dc
c0016a14:	83 c4 10             	add    esp,0x10
c0016a17:	53                   	push   ebx
c0016a18:	e8 f5 fe ff ff       	call   c0016912 <Phys::getPageState(unsigned long)>
c0016a1d:	5a                   	pop    edx
c0016a1e:	84 c0                	test   al,al
c0016a20:	75 99                	jne    c00169bb <Phys::allocatePage()+0x24>
c0016a22:	6a 01                	push   0x1
c0016a24:	53                   	push   ebx
c0016a25:	e8 a8 fe ff ff       	call   c00168d2 <Phys::setPageState(unsigned long, bool)>
c0016a2a:	8b 15 e8 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9e8
c0016a30:	59                   	pop    ecx
c0016a31:	a1 dc b9 03 c0       	mov    eax,ds:0xc003b9dc
c0016a36:	5b                   	pop    ebx
c0016a37:	83 c2 01             	add    edx,0x1
c0016a3a:	89 15 e8 b9 03 c0    	mov    DWORD PTR ds:0xc003b9e8,edx
c0016a40:	c1 e0 0c             	shl    eax,0xc
c0016a43:	83 c4 14             	add    esp,0x14
c0016a46:	5b                   	pop    ebx
c0016a47:	5e                   	pop    esi
c0016a48:	c3                   	ret    
c0016a49:	83 ec 08             	sub    esp,0x8
c0016a4c:	89 c2                	mov    edx,eax
c0016a4e:	6a 01                	push   0x1
c0016a50:	c1 ea 0c             	shr    edx,0xc
c0016a53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016a57:	52                   	push   edx
c0016a58:	e8 75 fe ff ff       	call   c00168d2 <Phys::setPageState(unsigned long, bool)>
c0016a5d:	83 c4 10             	add    esp,0x10
c0016a60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a64:	eb dd                	jmp    c0016a43 <Phys::allocatePage()+0xac>

c0016a66 <Phys::allocateContiguousPages(int)>:
c0016a66:	57                   	push   edi
c0016a67:	56                   	push   esi
c0016a68:	53                   	push   ebx
c0016a69:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016a6d:	fa                   	cli    
c0016a6e:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0016a73:	31 db                	xor    ebx,ebx
c0016a75:	83 c0 01             	add    eax,0x1
c0016a78:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0016a7d:	85 db                	test   ebx,ebx
c0016a7f:	75 11                	jne    c0016a92 <Phys::allocateContiguousPages(int)+0x2c>
c0016a81:	e8 11 ff ff ff       	call   c0016997 <Phys::allocatePage()>
c0016a86:	83 fe 01             	cmp    esi,0x1
c0016a89:	89 c7                	mov    edi,eax
c0016a8b:	74 21                	je     c0016aae <Phys::allocateContiguousPages(int)+0x48>
c0016a8d:	bb 01 00 00 00       	mov    ebx,0x1
c0016a92:	e8 00 ff ff ff       	call   c0016997 <Phys::allocatePage()>
c0016a97:	89 da                	mov    edx,ebx
c0016a99:	c1 e2 0c             	shl    edx,0xc
c0016a9c:	01 fa                	add    edx,edi
c0016a9e:	39 c2                	cmp    edx,eax
c0016aa0:	74 22                	je     c0016ac4 <Phys::allocateContiguousPages(int)+0x5e>
c0016aa2:	83 fe 01             	cmp    esi,0x1
c0016aa5:	bb 01 00 00 00       	mov    ebx,0x1
c0016aaa:	89 c7                	mov    edi,eax
c0016aac:	75 e4                	jne    c0016a92 <Phys::allocateContiguousPages(int)+0x2c>
c0016aae:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0016ab3:	83 e8 01             	sub    eax,0x1
c0016ab6:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0016abb:	75 01                	jne    c0016abe <Phys::allocateContiguousPages(int)+0x58>
c0016abd:	fb                   	sti    
c0016abe:	5b                   	pop    ebx
c0016abf:	89 f8                	mov    eax,edi
c0016ac1:	5e                   	pop    esi
c0016ac2:	5f                   	pop    edi
c0016ac3:	c3                   	ret    
c0016ac4:	83 c3 01             	add    ebx,0x1
c0016ac7:	39 f3                	cmp    ebx,esi
c0016ac9:	75 b2                	jne    c0016a7d <Phys::allocateContiguousPages(int)+0x17>
c0016acb:	eb e1                	jmp    c0016aae <Phys::allocateContiguousPages(int)+0x48>

c0016acd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0016acd:	56                   	push   esi
c0016ace:	53                   	push   ebx
c0016acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016ad3:	39 1d e0 b9 03 c0    	cmp    DWORD PTR ds:0xc003b9e0,ebx
c0016ad9:	73 06                	jae    c0016ae1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0016adb:	89 1d e0 b9 03 c0    	mov    DWORD PTR ds:0xc003b9e0,ebx
c0016ae1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ae5:	c1 eb 0c             	shr    ebx,0xc
c0016ae8:	c1 e8 0c             	shr    eax,0xc
c0016aeb:	39 d8                	cmp    eax,ebx
c0016aed:	73 13                	jae    c0016b02 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0016aef:	6a 00                	push   0x0
c0016af1:	50                   	push   eax
c0016af2:	8d 70 01             	lea    esi,[eax+0x1]
c0016af5:	e8 d8 fd ff ff       	call   c00168d2 <Phys::setPageState(unsigned long, bool)>
c0016afa:	39 f3                	cmp    ebx,esi
c0016afc:	89 f0                	mov    eax,esi
c0016afe:	5a                   	pop    edx
c0016aff:	59                   	pop    ecx
c0016b00:	75 ed                	jne    c0016aef <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0016b02:	5b                   	pop    ebx
c0016b03:	5e                   	pop    esi
c0016b04:	c3                   	ret    

c0016b05 <Phys::physicalMemorySetup(unsigned int)>:
c0016b05:	55                   	push   ebp
c0016b06:	57                   	push   edi
c0016b07:	56                   	push   esi
c0016b08:	53                   	push   ebx
c0016b09:	31 db                	xor    ebx,ebx
c0016b0b:	83 ec 40             	sub    esp,0x40
c0016b0e:	6a 10                	push   0x10
c0016b10:	6a 00                	push   0x0
c0016b12:	68 f0 b9 03 c0       	push   0xc003b9f0
c0016b17:	e8 d4 99 fe ff       	call   c00004f0 <memset>
c0016b1c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0016b20:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016b25:	05 00 10 00 00       	add    eax,0x1000
c0016b2a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016b2e:	5a                   	pop    edx
c0016b2f:	59                   	pop    ecx
c0016b30:	50                   	push   eax
c0016b31:	68 6b 1a 03 c0       	push   0xc0031a6b
c0016b36:	e8 83 29 00 00       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0016b3b:	83 c4 10             	add    esp,0x10
c0016b3e:	83 ec 08             	sub    esp,0x8
c0016b41:	6a 01                	push   0x1
c0016b43:	53                   	push   ebx
c0016b44:	83 c3 01             	add    ebx,0x1
c0016b47:	e8 86 fd ff ff       	call   c00168d2 <Phys::setPageState(unsigned long, bool)>
c0016b4c:	83 c4 10             	add    esp,0x10
c0016b4f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0016b55:	75 e7                	jne    c0016b3e <Phys::physicalMemorySetup(unsigned int)+0x39>
c0016b57:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0016b5e:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0016b65:	c1 e0 08             	shl    eax,0x8
c0016b68:	09 c2                	or     edx,eax
c0016b6a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0016b6e:	0f 84 43 01 00 00    	je     c0016cb7 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0016b74:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016b7c:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0016b81:	e9 82 00 00 00       	jmp    c0016c08 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0016b86:	ba 00 00 08 00       	mov    edx,0x80000
c0016b8b:	89 c1                	mov    ecx,eax
c0016b8d:	39 f2                	cmp    edx,esi
c0016b8f:	19 f9                	sbb    ecx,edi
c0016b91:	0f 82 c0 00 00 00    	jb     c0016c57 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0016b97:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b9b:	89 c5                	mov    ebp,eax
c0016b9d:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0016ba1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016ba5:	19 cd                	sbb    ebp,ecx
c0016ba7:	0f 83 af 00 00 00    	jae    c0016c5c <Phys::physicalMemorySetup(unsigned int)+0x157>
c0016bad:	89 d6                	mov    esi,edx
c0016baf:	ba 00 00 0a 00       	mov    edx,0xa0000
c0016bb4:	39 f2                	cmp    edx,esi
c0016bb6:	89 cf                	mov    edi,ecx
c0016bb8:	19 c8                	sbb    eax,ecx
c0016bba:	73 07                	jae    c0016bc3 <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0016bbc:	be 00 00 0a 00       	mov    esi,0xa0000
c0016bc1:	31 ff                	xor    edi,edi
c0016bc3:	89 f2                	mov    edx,esi
c0016bc5:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0016bca:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c0016bd0:	89 f9                	mov    ecx,edi
c0016bd2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016bd6:	83 d1 ff             	adc    ecx,0xffffffff
c0016bd9:	39 d0                	cmp    eax,edx
c0016bdb:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0016bdf:	b8 00 00 00 00       	mov    eax,0x0
c0016be4:	19 c8                	sbb    eax,ecx
c0016be6:	0f 82 9d 01 00 00    	jb     c0016d89 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0016bec:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016bf0:	83 c3 18             	add    ebx,0x18
c0016bf3:	83 c6 01             	add    esi,0x1
c0016bf6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0016bfa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016bfe:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0016c02:	0f 84 bf 00 00 00    	je     c0016cc7 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0016c08:	8b 33                	mov    esi,DWORD PTR [ebx]
c0016c0a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c0d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0016c10:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0016c13:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016c17:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016c1a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016c1e:	01 f0                	add    eax,esi
c0016c20:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016c24:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016c28:	55                   	push   ebp
c0016c29:	11 fa                	adc    edx,edi
c0016c2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c2f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016c33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016c37:	50                   	push   eax
c0016c38:	56                   	push   esi
c0016c39:	68 08 1a 03 c0       	push   0xc0031a08
c0016c3e:	e8 7b 28 00 00       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0016c43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c47:	83 c4 10             	add    esp,0x10
c0016c4a:	09 f8                	or     eax,edi
c0016c4c:	75 79                	jne    c0016cc7 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0016c4e:	83 fd 01             	cmp    ebp,0x1
c0016c51:	0f 84 2f ff ff ff    	je     c0016b86 <Phys::physicalMemorySetup(unsigned int)+0x81>
c0016c57:	83 fd 01             	cmp    ebp,0x1
c0016c5a:	75 90                	jne    c0016bec <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0016c5c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0016c60:	31 d2                	xor    edx,edx
c0016c62:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0016c66:	89 c8                	mov    eax,ecx
c0016c68:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016c6c:	19 d1                	sbb    ecx,edx
c0016c6e:	0f 82 78 ff ff ff    	jb     c0016bec <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0016c74:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c0016c79:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c0016c7d:	b9 00 00 00 00       	mov    ecx,0x0
c0016c82:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c0016c86:	0f 83 60 ff ff ff    	jae    c0016bec <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0016c8c:	39 c6                	cmp    esi,eax
c0016c8e:	19 d7                	sbb    edi,edx
c0016c90:	0f 83 ff 00 00 00    	jae    c0016d95 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0016c96:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016c9a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0016c9e:	29 c7                	sub    edi,eax
c0016ca0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016ca4:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0016ca8:	19 d5                	sbb    ebp,edx
c0016caa:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0016cae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016cb2:	e9 de 00 00 00       	jmp    c0016d95 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0016cb7:	83 ec 0c             	sub    esp,0xc
c0016cba:	68 83 1a 03 c0       	push   0xc0031a83
c0016cbf:	e8 3e 9a 00 00       	call   c0020702 <KePanic(char const*)>
c0016cc4:	83 c4 10             	add    esp,0x10
c0016cc7:	83 ec 08             	sub    esp,0x8
c0016cca:	bb 60 00 00 00       	mov    ebx,0x60
c0016ccf:	6a 00                	push   0x0
c0016cd1:	6a 06                	push   0x6
c0016cd3:	e8 fa fb ff ff       	call   c00168d2 <Phys::setPageState(unsigned long, bool)>
c0016cd8:	58                   	pop    eax
c0016cd9:	5a                   	pop    edx
c0016cda:	6a 00                	push   0x0
c0016cdc:	6a 07                	push   0x7
c0016cde:	e8 ef fb ff ff       	call   c00168d2 <Phys::setPageState(unsigned long, bool)>
c0016ce3:	8b 0d ec b9 03 c0    	mov    ecx,DWORD PTR ds:0xc003b9ec
c0016ce9:	83 c4 10             	add    esp,0x10
c0016cec:	83 c1 02             	add    ecx,0x2
c0016cef:	89 0d ec b9 03 c0    	mov    DWORD PTR ds:0xc003b9ec,ecx
c0016cf5:	83 ec 08             	sub    esp,0x8
c0016cf8:	6a 00                	push   0x0
c0016cfa:	53                   	push   ebx
c0016cfb:	83 c3 01             	add    ebx,0x1
c0016cfe:	e8 cf fb ff ff       	call   c00168d2 <Phys::setPageState(unsigned long, bool)>
c0016d03:	83 c4 10             	add    esp,0x10
c0016d06:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0016d0c:	75 e7                	jne    c0016cf5 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0016d0e:	a1 ec b9 03 c0       	mov    eax,ds:0xc003b9ec
c0016d13:	bb 40 01 00 00       	mov    ebx,0x140
c0016d18:	83 c0 20             	add    eax,0x20
c0016d1b:	a3 ec b9 03 c0       	mov    ds:0xc003b9ec,eax
c0016d20:	eb 26                	jmp    c0016d48 <Phys::physicalMemorySetup(unsigned int)+0x243>
c0016d22:	83 ec 08             	sub    esp,0x8
c0016d25:	6a 00                	push   0x0
c0016d27:	53                   	push   ebx
c0016d28:	83 c3 01             	add    ebx,0x1
c0016d2b:	e8 a2 fb ff ff       	call   c00168d2 <Phys::setPageState(unsigned long, bool)>
c0016d30:	a1 ec b9 03 c0       	mov    eax,ds:0xc003b9ec
c0016d35:	83 c4 10             	add    esp,0x10
c0016d38:	83 c0 01             	add    eax,0x1
c0016d3b:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0016d41:	a3 ec b9 03 c0       	mov    ds:0xc003b9ec,eax
c0016d46:	74 07                	je     c0016d4f <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0016d48:	3d ff 03 00 00       	cmp    eax,0x3ff
c0016d4d:	7e d3                	jle    c0016d22 <Phys::physicalMemorySetup(unsigned int)+0x21d>
c0016d4f:	bb d0 01 00 00       	mov    ebx,0x1d0
c0016d54:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016d59:	7f 26                	jg     c0016d81 <Phys::physicalMemorySetup(unsigned int)+0x27c>
c0016d5b:	83 ec 08             	sub    esp,0x8
c0016d5e:	6a 00                	push   0x0
c0016d60:	53                   	push   ebx
c0016d61:	83 c3 01             	add    ebx,0x1
c0016d64:	e8 69 fb ff ff       	call   c00168d2 <Phys::setPageState(unsigned long, bool)>
c0016d69:	a1 ec b9 03 c0       	mov    eax,ds:0xc003b9ec
c0016d6e:	83 c4 10             	add    esp,0x10
c0016d71:	83 c0 01             	add    eax,0x1
c0016d74:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0016d7a:	a3 ec b9 03 c0       	mov    ds:0xc003b9ec,eax
c0016d7f:	75 d3                	jne    c0016d54 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c0016d81:	83 c4 3c             	add    esp,0x3c
c0016d84:	5b                   	pop    ebx
c0016d85:	5e                   	pop    esi
c0016d86:	5f                   	pop    edi
c0016d87:	5d                   	pop    ebp
c0016d88:	c3                   	ret    
c0016d89:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0016d8d:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c0016d95:	83 ec 04             	sub    esp,0x4
c0016d98:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0016d9c:	56                   	push   esi
c0016d9d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016da1:	57                   	push   edi
c0016da2:	68 2c 1a 03 c0       	push   0xc0031a2c
c0016da7:	e8 12 27 00 00       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0016dac:	5d                   	pop    ebp
c0016dad:	58                   	pop    eax
c0016dae:	56                   	push   esi
c0016daf:	57                   	push   edi
c0016db0:	e8 18 fd ff ff       	call   c0016acd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0016db5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016db9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016dbd:	83 c4 0c             	add    esp,0xc
c0016dc0:	8b 35 ec b9 03 c0    	mov    esi,DWORD PTR ds:0xc003b9ec
c0016dc6:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016dca:	01 f0                	add    eax,esi
c0016dcc:	a3 ec b9 03 c0       	mov    ds:0xc003b9ec,eax
c0016dd1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0016dd8:	52                   	push   edx
c0016dd9:	50                   	push   eax
c0016dda:	68 91 1a 03 c0       	push   0xc0031a91
c0016ddf:	e8 da 26 00 00       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0016de4:	83 c4 10             	add    esp,0x10
c0016de7:	e9 00 fe ff ff       	jmp    c0016bec <Phys::physicalMemorySetup(unsigned int)+0xe7>

c0016dec <Pipe::isAtty()>:
c0016dec:	31 c0                	xor    eax,eax
c0016dee:	c3                   	ret    
c0016def:	90                   	nop

c0016df0 <Pipe::~Pipe()>:
c0016df0:	83 ec 0c             	sub    esp,0xc
c0016df3:	ba f0 1a 03 c0       	mov    edx,0xc0031af0
c0016df8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dfc:	89 10                	mov    DWORD PTR [eax],edx
c0016dfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e02:	83 ec 0c             	sub    esp,0xc
c0016e05:	50                   	push   eax
c0016e06:	e8 35 11 00 00       	call   c0017f40 <UnixFile::~UnixFile()>
c0016e0b:	83 c4 10             	add    esp,0x10
c0016e0e:	90                   	nop
c0016e0f:	83 c4 0c             	add    esp,0xc
c0016e12:	c3                   	ret    
c0016e13:	90                   	nop

c0016e14 <Pipe::~Pipe()>:
c0016e14:	83 ec 0c             	sub    esp,0xc
c0016e17:	83 ec 0c             	sub    esp,0xc
c0016e1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e1e:	e8 cd ff ff ff       	call   c0016df0 <Pipe::~Pipe()>
c0016e23:	83 c4 10             	add    esp,0x10
c0016e26:	83 ec 08             	sub    esp,0x8
c0016e29:	6a 20                	push   0x20
c0016e2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e2f:	e8 8c 25 00 00       	call   c00193c0 <operator delete(void*, unsigned long)>
c0016e34:	83 c4 10             	add    esp,0x10
c0016e37:	83 c4 0c             	add    esp,0xc
c0016e3a:	c3                   	ret    
c0016e3b:	90                   	nop

c0016e3c <Pipe::write(unsigned long long, void*, int*)>:
c0016e3c:	55                   	push   ebp
c0016e3d:	57                   	push   edi
c0016e3e:	56                   	push   esi
c0016e3f:	53                   	push   ebx
c0016e40:	83 ec 1c             	sub    esp,0x1c
c0016e43:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016e47:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016e4b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e4f:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0016e52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016e56:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0016e59:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e5c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0016e60:	89 d8                	mov    eax,ebx
c0016e62:	89 d6                	mov    esi,edx
c0016e64:	89 d7                	mov    edi,edx
c0016e66:	c1 ff 1f             	sar    edi,0x1f
c0016e69:	03 34 24             	add    esi,DWORD PTR [esp]
c0016e6c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0016e70:	c1 f8 1f             	sar    eax,0x1f
c0016e73:	39 f3                	cmp    ebx,esi
c0016e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e7d:	19 f8                	sbb    eax,edi
c0016e7f:	b8 01 00 00 00       	mov    eax,0x1
c0016e84:	72 72                	jb     c0016ef8 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c0016e86:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016e89:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016e8d:	01 d0                	add    eax,edx
c0016e8f:	99                   	cdq    
c0016e90:	f7 fb                	idiv   ebx
c0016e92:	89 d8                	mov    eax,ebx
c0016e94:	29 d0                	sub    eax,edx
c0016e96:	89 d6                	mov    esi,edx
c0016e98:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016e9b:	89 c3                	mov    ebx,eax
c0016e9d:	c1 fb 1f             	sar    ebx,0x1f
c0016ea0:	39 c2                	cmp    edx,eax
c0016ea2:	19 df                	sbb    edi,ebx
c0016ea4:	bb 00 00 00 00       	mov    ebx,0x0
c0016ea9:	72 04                	jb     c0016eaf <Pipe::write(unsigned long long, void*, int*)+0x73>
c0016eab:	89 d3                	mov    ebx,edx
c0016ead:	29 c3                	sub    ebx,eax
c0016eaf:	89 d0                	mov    eax,edx
c0016eb1:	29 d8                	sub    eax,ebx
c0016eb3:	74 0d                	je     c0016ec2 <Pipe::write(unsigned long long, void*, int*)+0x86>
c0016eb5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016eb8:	89 c1                	mov    ecx,eax
c0016eba:	01 f7                	add    edi,esi
c0016ebc:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016ec0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ec2:	85 db                	test   ebx,ebx
c0016ec4:	74 0d                	je     c0016ed3 <Pipe::write(unsigned long long, void*, int*)+0x97>
c0016ec6:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016eca:	89 d9                	mov    ecx,ebx
c0016ecc:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016ecf:	89 c6                	mov    esi,eax
c0016ed1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ed3:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0016ed6:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016edb:	75 10                	jne    c0016eed <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0016edd:	83 ec 0c             	sub    esp,0xc
c0016ee0:	68 ad 1a 03 c0       	push   0xc0031aad
c0016ee5:	e8 18 98 00 00       	call   c0020702 <KePanic(char const*)>
c0016eea:	83 c4 10             	add    esp,0x10
c0016eed:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016ef1:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016ef4:	89 08                	mov    DWORD PTR [eax],ecx
c0016ef6:	31 c0                	xor    eax,eax
c0016ef8:	83 c4 1c             	add    esp,0x1c
c0016efb:	5b                   	pop    ebx
c0016efc:	5e                   	pop    esi
c0016efd:	5f                   	pop    edi
c0016efe:	5d                   	pop    ebp
c0016eff:	c3                   	ret    

c0016f00 <Pipe::read(unsigned long long, void*, int*)>:
c0016f00:	55                   	push   ebp
c0016f01:	57                   	push   edi
c0016f02:	56                   	push   esi
c0016f03:	53                   	push   ebx
c0016f04:	83 ec 1c             	sub    esp,0x1c
c0016f07:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016f0b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016f0f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0016f13:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0016f16:	89 c8                	mov    eax,ecx
c0016f18:	99                   	cdq    
c0016f19:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0016f1d:	74 24                	je     c0016f43 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016f1f:	39 f9                	cmp    ecx,edi
c0016f21:	89 d1                	mov    ecx,edx
c0016f23:	19 f1                	sbb    ecx,esi
c0016f25:	73 1c                	jae    c0016f43 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016f27:	fa                   	cli    
c0016f28:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c0016f2e:	e8 25 e8 00 00       	call   c0025758 <schedule()>
c0016f33:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0016f38:	48                   	dec    eax
c0016f39:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0016f3e:	75 d3                	jne    c0016f13 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016f40:	fb                   	sti    
c0016f41:	eb d0                	jmp    c0016f13 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016f43:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016f47:	39 f8                	cmp    eax,edi
c0016f49:	89 d1                	mov    ecx,edx
c0016f4b:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0016f4f:	19 f1                	sbb    ecx,esi
c0016f51:	73 08                	jae    c0016f5b <Pipe::read(unsigned long long, void*, int*)+0x5b>
c0016f53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016f5b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0016f5e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0016f61:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0016f65:	29 f7                	sub    edi,esi
c0016f67:	89 f8                	mov    eax,edi
c0016f69:	99                   	cdq    
c0016f6a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0016f6e:	89 d0                	mov    eax,edx
c0016f70:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f74:	19 c2                	sbb    edx,eax
c0016f76:	89 f8                	mov    eax,edi
c0016f78:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c0016f7d:	89 ea                	mov    edx,ebp
c0016f7f:	29 c2                	sub    edx,eax
c0016f81:	85 c0                	test   eax,eax
c0016f83:	74 0b                	je     c0016f90 <Pipe::read(unsigned long long, void*, int*)+0x90>
c0016f85:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0016f88:	89 c1                	mov    ecx,eax
c0016f8a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0016f8e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f90:	85 d2                	test   edx,edx
c0016f92:	74 0d                	je     c0016fa1 <Pipe::read(unsigned long long, void*, int*)+0xa1>
c0016f94:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016f98:	89 d1                	mov    ecx,edx
c0016f9a:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0016f9d:	89 c7                	mov    edi,eax
c0016f9f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016fa1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016fa4:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0016fa7:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0016faa:	99                   	cdq    
c0016fab:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016faf:	89 f7                	mov    edi,esi
c0016fb1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0016fb5:	c1 ff 1f             	sar    edi,0x1f
c0016fb8:	57                   	push   edi
c0016fb9:	56                   	push   esi
c0016fba:	52                   	push   edx
c0016fbb:	50                   	push   eax
c0016fbc:	e8 ef 7f 01 00       	call   c002efb0 <__umoddi3>
c0016fc1:	83 c4 10             	add    esp,0x10
c0016fc4:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016fc9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016fcc:	75 10                	jne    c0016fde <Pipe::read(unsigned long long, void*, int*)+0xde>
c0016fce:	83 ec 0c             	sub    esp,0xc
c0016fd1:	68 ca 1a 03 c0       	push   0xc0031aca
c0016fd6:	e8 27 97 00 00       	call   c0020702 <KePanic(char const*)>
c0016fdb:	83 c4 10             	add    esp,0x10
c0016fde:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016fe6:	89 10                	mov    DWORD PTR [eax],edx
c0016fe8:	83 c4 1c             	add    esp,0x1c
c0016feb:	31 c0                	xor    eax,eax
c0016fed:	5b                   	pop    ebx
c0016fee:	5e                   	pop    esi
c0016fef:	5f                   	pop    edi
c0016ff0:	5d                   	pop    ebp
c0016ff1:	c3                   	ret    

c0016ff2 <Pipe::Pipe(int)>:
c0016ff2:	83 ec 0c             	sub    esp,0xc
c0016ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ff9:	83 ec 08             	sub    esp,0x8
c0016ffc:	6a 00                	push   0x0
c0016ffe:	50                   	push   eax
c0016fff:	e8 56 0d 00 00       	call   c0017d5a <UnixFile::UnixFile(int)>
c0017004:	83 c4 10             	add    esp,0x10
c0017007:	ba f0 1a 03 c0       	mov    edx,0xc0031af0
c001700c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017010:	89 10                	mov    DWORD PTR [eax],edx
c0017012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017016:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001701a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001701d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017021:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0017028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001702c:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0017033:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017037:	83 ec 0c             	sub    esp,0xc
c001703a:	50                   	push   eax
c001703b:	e8 48 f6 ff ff       	call   c0016688 <malloc>
c0017040:	83 c4 10             	add    esp,0x10
c0017043:	89 c2                	mov    edx,eax
c0017045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017049:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001704c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017050:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0017054:	90                   	nop
c0017055:	83 c4 0c             	add    esp,0xc
c0017058:	c3                   	ret    
c0017059:	90                   	nop

c001705a <VgaText::isAtty()>:
c001705a:	b0 01                	mov    al,0x1
c001705c:	c3                   	ret    
c001705d:	90                   	nop

c001705e <VgaText::~VgaText()>:
c001705e:	83 ec 0c             	sub    esp,0xc
c0017061:	ba 38 1b 03 c0       	mov    edx,0xc0031b38
c0017066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001706a:	89 10                	mov    DWORD PTR [eax],edx
c001706c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017070:	83 ec 0c             	sub    esp,0xc
c0017073:	50                   	push   eax
c0017074:	e8 c7 0e 00 00       	call   c0017f40 <UnixFile::~UnixFile()>
c0017079:	83 c4 10             	add    esp,0x10
c001707c:	90                   	nop
c001707d:	83 c4 0c             	add    esp,0xc
c0017080:	c3                   	ret    
c0017081:	90                   	nop

c0017082 <VgaText::~VgaText()>:
c0017082:	83 ec 0c             	sub    esp,0xc
c0017085:	83 ec 0c             	sub    esp,0xc
c0017088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001708c:	e8 cd ff ff ff       	call   c001705e <VgaText::~VgaText()>
c0017091:	83 c4 10             	add    esp,0x10
c0017094:	83 ec 08             	sub    esp,0x8
c0017097:	68 84 01 00 00       	push   0x184
c001709c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170a0:	e8 1b 23 00 00       	call   c00193c0 <operator delete(void*, unsigned long)>
c00170a5:	83 c4 10             	add    esp,0x10
c00170a8:	83 c4 0c             	add    esp,0xc
c00170ab:	c3                   	ret    

c00170ac <VgaText::read(unsigned long long, void*, int*)>:
c00170ac:	83 ec 10             	sub    esp,0x10
c00170af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00170b3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00170b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170bb:	e8 3a 54 00 00       	call   c001c4fa <readKeyboard(VgaText*, char*, unsigned long)>
c00170c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00170c4:	89 02                	mov    DWORD PTR [edx],eax
c00170c6:	31 c0                	xor    eax,eax
c00170c8:	83 c4 1c             	add    esp,0x1c
c00170cb:	c3                   	ret    

c00170cc <setTerminalScrollLock(bool)>:
c00170cc:	c3                   	ret    

c00170cd <doTerminalCycle()>:
c00170cd:	c3                   	ret    

c00170ce <addToTerminalCycle(VgaText*)>:
c00170ce:	c3                   	ret    

c00170cf <scrollTerminalScrollLock(int)>:
c00170cf:	c3                   	ret    

c00170d0 <VgaText::updateTitle()>:
c00170d0:	c3                   	ret    
c00170d1:	90                   	nop

c00170d2 <VgaText::load()>:
c00170d2:	c3                   	ret    
c00170d3:	90                   	nop

c00170d4 <VgaText::updateCursor()>:
c00170d4:	83 ec 14             	sub    esp,0x14
c00170d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00170db:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00170de:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00170e1:	e8 52 11 01 00       	call   c0028238 <HalConsoleCursorUpdate(int, int)>
c00170e6:	83 c4 1c             	add    esp,0x1c
c00170e9:	c3                   	ret    

c00170ea <VgaText::doANSI_SGR(int)>:
c00170ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00170ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170f2:	85 d2                	test   edx,edx
c00170f4:	75 0b                	jne    c0017101 <VgaText::doANSI_SGR(int)+0x17>
c00170f6:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00170f9:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00170fc:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00170ff:	eb 59                	jmp    c001715a <VgaText::doANSI_SGR(int)+0x70>
c0017101:	83 fa 07             	cmp    edx,0x7
c0017104:	75 0b                	jne    c0017111 <VgaText::doANSI_SGR(int)+0x27>
c0017106:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0017109:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001710c:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c001710f:	eb 49                	jmp    c001715a <VgaText::doANSI_SGR(int)+0x70>
c0017111:	83 fa 1b             	cmp    edx,0x1b
c0017114:	74 e0                	je     c00170f6 <VgaText::doANSI_SGR(int)+0xc>
c0017116:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0017119:	83 f9 07             	cmp    ecx,0x7
c001711c:	77 09                	ja     c0017127 <VgaText::doANSI_SGR(int)+0x3d>
c001711e:	8b 14 8d 00 45 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcbb00]
c0017125:	eb 20                	jmp    c0017147 <VgaText::doANSI_SGR(int)+0x5d>
c0017127:	8d 4a d8             	lea    ecx,[edx-0x28]
c001712a:	83 f9 07             	cmp    ecx,0x7
c001712d:	77 09                	ja     c0017138 <VgaText::doANSI_SGR(int)+0x4e>
c001712f:	8b 14 8d 00 45 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcbb00]
c0017136:	eb 22                	jmp    c001715a <VgaText::doANSI_SGR(int)+0x70>
c0017138:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001713b:	83 f9 07             	cmp    ecx,0x7
c001713e:	77 0b                	ja     c001714b <VgaText::doANSI_SGR(int)+0x61>
c0017140:	8b 14 95 b8 43 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcbc48]
c0017147:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001714a:	c3                   	ret    
c001714b:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001714e:	83 f9 07             	cmp    ecx,0x7
c0017151:	77 0a                	ja     c001715d <VgaText::doANSI_SGR(int)+0x73>
c0017153:	8b 14 95 90 43 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcbc70]
c001715a:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001715d:	c3                   	ret    

c001715e <VgaText::setDefaultBgColour(VgaColour)>:
c001715e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017162:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017166:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0017169:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001716c:	c3                   	ret    
c001716d:	90                   	nop

c001716e <VgaText::setDefaultFgColour(VgaColour)>:
c001716e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017176:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0017179:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001717c:	c3                   	ret    
c001717d:	90                   	nop

c001717e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001717e:	53                   	push   ebx
c001717f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017183:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0017187:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001718b:	51                   	push   ecx
c001718c:	e8 cd ff ff ff       	call   c001715e <VgaText::setDefaultBgColour(VgaColour)>
c0017191:	58                   	pop    eax
c0017192:	5a                   	pop    edx
c0017193:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017197:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001719b:	5b                   	pop    ebx
c001719c:	eb d0                	jmp    c001716e <VgaText::setDefaultFgColour(VgaColour)>

c001719e <VgaText::setTitleTextColour(VgaColour)>:
c001719e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00171a6:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00171a9:	c3                   	ret    

c00171aa <VgaText::setTitleColour(VgaColour)>:
c00171aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00171b2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00171b5:	c3                   	ret    

c00171b6 <VgaText::setTitle(char*)>:
c00171b6:	c3                   	ret    
c00171b7:	90                   	nop

c00171b8 <VgaText::combineColours(unsigned char, unsigned char)>:
c00171b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171bc:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00171c1:	83 e0 0f             	and    eax,0xf
c00171c4:	c1 e2 04             	shl    edx,0x4
c00171c7:	09 d0                	or     eax,edx
c00171c9:	c3                   	ret    

c00171ca <VgaText::scrollScreen()>:
c00171ca:	55                   	push   ebp
c00171cb:	57                   	push   edi
c00171cc:	56                   	push   esi
c00171cd:	be 01 00 00 00       	mov    esi,0x1
c00171d2:	53                   	push   ebx
c00171d3:	83 ec 0c             	sub    esp,0xc
c00171d6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00171da:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00171dd:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00171e3:	31 ff                	xor    edi,edi
c00171e5:	01 e9                	add    ecx,ebp
c00171e7:	8a 01                	mov    al,BYTE PTR [ecx]
c00171e9:	83 fe 18             	cmp    esi,0x18
c00171ec:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c00171f2:	75 20                	jne    c0017214 <VgaText::scrollScreen()+0x4a>
c00171f4:	f7 c7 01 00 00 00    	test   edi,0x1
c00171fa:	74 15                	je     c0017211 <VgaText::scrollScreen()+0x47>
c00171fc:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0017200:	50                   	push   eax
c0017201:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0017205:	50                   	push   eax
c0017206:	e8 ad ff ff ff       	call   c00171b8 <VgaText::combineColours(unsigned char, unsigned char)>
c001720b:	5a                   	pop    edx
c001720c:	5a                   	pop    edx
c001720d:	88 01                	mov    BYTE PTR [ecx],al
c001720f:	eb 03                	jmp    c0017214 <VgaText::scrollScreen()+0x4a>
c0017211:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0017214:	47                   	inc    edi
c0017215:	41                   	inc    ecx
c0017216:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001721c:	75 c9                	jne    c00171e7 <VgaText::scrollScreen()+0x1d>
c001721e:	46                   	inc    esi
c001721f:	83 fe 19             	cmp    esi,0x19
c0017222:	75 b9                	jne    c00171dd <VgaText::scrollScreen()+0x13>
c0017224:	39 1d 08 ba 03 c0    	cmp    DWORD PTR ds:0xc003ba08,ebx
c001722a:	75 1f                	jne    c001724b <VgaText::scrollScreen()+0x81>
c001722c:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0017230:	74 05                	je     c0017237 <VgaText::scrollScreen()+0x6d>
c0017232:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0017235:	eb 14                	jmp    c001724b <VgaText::scrollScreen()+0x81>
c0017237:	50                   	push   eax
c0017238:	50                   	push   eax
c0017239:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c001723d:	50                   	push   eax
c001723e:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0017242:	50                   	push   eax
c0017243:	e8 84 0e 01 00       	call   c00280cc <HalConsoleScroll(int, int)>
c0017248:	83 c4 10             	add    esp,0x10
c001724b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001724f:	83 c4 0c             	add    esp,0xc
c0017252:	5b                   	pop    ebx
c0017253:	5e                   	pop    esi
c0017254:	5f                   	pop    edi
c0017255:	5d                   	pop    ebp
c0017256:	e9 79 fe ff ff       	jmp    c00170d4 <VgaText::updateCursor()>
c001725b:	90                   	nop

c001725c <VgaText::combineCharAndColour(char, unsigned char)>:
c001725c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017261:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0017266:	c1 e0 08             	shl    eax,0x8
c0017269:	09 d0                	or     eax,edx
c001726b:	c3                   	ret    

c001726c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001726c:	55                   	push   ebp
c001726d:	57                   	push   edi
c001726e:	56                   	push   esi
c001726f:	53                   	push   ebx
c0017270:	83 ec 1c             	sub    esp,0x1c
c0017273:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017277:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001727b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001727f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017283:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017287:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001728b:	0f b6 c3             	movzx  eax,bl
c001728e:	50                   	push   eax
c001728f:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0017294:	50                   	push   eax
c0017295:	e8 1e ff ff ff       	call   c00171b8 <VgaText::combineColours(unsigned char, unsigned char)>
c001729a:	5a                   	pop    edx
c001729b:	59                   	pop    ecx
c001729c:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00172a1:	0f b6 c0             	movzx  eax,al
c00172a4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00172a8:	50                   	push   eax
c00172a9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00172ad:	e8 aa ff ff ff       	call   c001725c <VgaText::combineCharAndColour(char, unsigned char)>
c00172b2:	5a                   	pop    edx
c00172b3:	6b d7 50             	imul   edx,edi,0x50
c00172b6:	59                   	pop    ecx
c00172b7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00172ba:	01 f2                	add    edx,esi
c00172bc:	0f b7 d2             	movzx  edx,dx
c00172bf:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00172c3:	39 2d 08 ba 03 c0    	cmp    DWORD PTR ds:0xc003ba08,ebp
c00172c9:	75 28                	jne    c00172f3 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c00172cb:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00172cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00172d3:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00172d7:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00172db:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00172df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172e3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00172e7:	83 c4 1c             	add    esp,0x1c
c00172ea:	5b                   	pop    ebx
c00172eb:	5e                   	pop    esi
c00172ec:	5f                   	pop    edi
c00172ed:	5d                   	pop    ebp
c00172ee:	e9 e1 0e 01 00       	jmp    c00281d4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00172f3:	83 c4 1c             	add    esp,0x1c
c00172f6:	5b                   	pop    ebx
c00172f7:	5e                   	pop    esi
c00172f8:	5f                   	pop    edi
c00172f9:	5d                   	pop    ebp
c00172fa:	c3                   	ret    
c00172fb:	90                   	nop

c00172fc <VgaText::getCursorX()>:
c00172fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017300:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017303:	c3                   	ret    

c0017304 <VgaText::getCursorY()>:
c0017304:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017308:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001730b:	c3                   	ret    

c001730c <VgaText::setCursor(int, int)>:
c001730c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017310:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017314:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0017317:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001731b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001731e:	e9 b1 fd ff ff       	jmp    c00170d4 <VgaText::updateCursor()>

c0017323 <setActiveTerminal(VgaText*)>:
c0017323:	53                   	push   ebx
c0017324:	83 ec 08             	sub    esp,0x8
c0017327:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001732b:	85 db                	test   ebx,ebx
c001732d:	75 11                	jne    c0017340 <setActiveTerminal(VgaText*)+0x1d>
c001732f:	c7 44 24 10 04 1b 03 c0 	mov    DWORD PTR [esp+0x10],0xc0031b04
c0017337:	83 c4 08             	add    esp,0x8
c001733a:	5b                   	pop    ebx
c001733b:	e9 c2 93 00 00       	jmp    c0020702 <KePanic(char const*)>
c0017340:	a1 08 ba 03 c0       	mov    eax,ds:0xc003ba08
c0017345:	85 c0                	test   eax,eax
c0017347:	74 0c                	je     c0017355 <setActiveTerminal(VgaText*)+0x32>
c0017349:	83 ec 0c             	sub    esp,0xc
c001734c:	50                   	push   eax
c001734d:	e8 82 fd ff ff       	call   c00170d4 <VgaText::updateCursor()>
c0017352:	83 c4 10             	add    esp,0x10
c0017355:	50                   	push   eax
c0017356:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017359:	89 1d 08 ba 03 c0    	mov    DWORD PTR ds:0xc003ba08,ebx
c001735f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017362:	53                   	push   ebx
c0017363:	e8 a4 ff ff ff       	call   c001730c <VgaText::setCursor(int, int)>
c0017368:	83 c4 18             	add    esp,0x18
c001736b:	5b                   	pop    ebx
c001736c:	c3                   	ret    
c001736d:	90                   	nop

c001736e <VgaText::clearScreen()>:
c001736e:	57                   	push   edi
c001736f:	56                   	push   esi
c0017370:	31 f6                	xor    esi,esi
c0017372:	53                   	push   ebx
c0017373:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017377:	52                   	push   edx
c0017378:	6a 00                	push   0x0
c001737a:	6a 00                	push   0x0
c001737c:	53                   	push   ebx
c001737d:	e8 8a ff ff ff       	call   c001730c <VgaText::setCursor(int, int)>
c0017382:	83 c4 10             	add    esp,0x10
c0017385:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001738c:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c001738f:	7e 20                	jle    c00173b1 <VgaText::clearScreen()+0x43>
c0017391:	31 ff                	xor    edi,edi
c0017393:	50                   	push   eax
c0017394:	50                   	push   eax
c0017395:	56                   	push   esi
c0017396:	57                   	push   edi
c0017397:	47                   	inc    edi
c0017398:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001739b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001739e:	6a 20                	push   0x20
c00173a0:	53                   	push   ebx
c00173a1:	e8 c6 fe ff ff       	call   c001726c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00173a6:	83 c4 20             	add    esp,0x20
c00173a9:	83 ff 50             	cmp    edi,0x50
c00173ac:	75 e5                	jne    c0017393 <VgaText::clearScreen()+0x25>
c00173ae:	46                   	inc    esi
c00173af:	eb db                	jmp    c001738c <VgaText::clearScreen()+0x1e>
c00173b1:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00173b8:	5b                   	pop    ebx
c00173b9:	5e                   	pop    esi
c00173ba:	5f                   	pop    edi
c00173bb:	c3                   	ret    

c00173bc <VgaText::setCursorX(int)>:
c00173bc:	83 ec 10             	sub    esp,0x10
c00173bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00173c3:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00173c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00173ca:	50                   	push   eax
c00173cb:	e8 3c ff ff ff       	call   c001730c <VgaText::setCursor(int, int)>
c00173d0:	83 c4 1c             	add    esp,0x1c
c00173d3:	c3                   	ret    

c00173d4 <VgaText::setCursorY(int)>:
c00173d4:	83 ec 10             	sub    esp,0x10
c00173d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00173db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00173df:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00173e2:	50                   	push   eax
c00173e3:	e8 24 ff ff ff       	call   c001730c <VgaText::setCursor(int, int)>
c00173e8:	83 c4 1c             	add    esp,0x1c
c00173eb:	c3                   	ret    

c00173ec <VgaText::incrementCursor(bool)>:
c00173ec:	56                   	push   esi
c00173ed:	53                   	push   ebx
c00173ee:	51                   	push   ecx
c00173ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00173f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00173f7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00173fa:	40                   	inc    eax
c00173fb:	83 f8 50             	cmp    eax,0x50
c00173fe:	74 05                	je     c0017405 <VgaText::incrementCursor(bool)+0x19>
c0017400:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017403:	eb 24                	jmp    c0017429 <VgaText::incrementCursor(bool)+0x3d>
c0017405:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001740c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001740f:	8d 50 01             	lea    edx,[eax+0x1]
c0017412:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0017415:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0017418:	75 0f                	jne    c0017429 <VgaText::incrementCursor(bool)+0x3d>
c001741a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001741d:	83 ec 0c             	sub    esp,0xc
c0017420:	53                   	push   ebx
c0017421:	e8 a4 fd ff ff       	call   c00171ca <VgaText::scrollScreen()>
c0017426:	83 c4 10             	add    esp,0x10
c0017429:	89 f0                	mov    eax,esi
c001742b:	84 c0                	test   al,al
c001742d:	74 0c                	je     c001743b <VgaText::incrementCursor(bool)+0x4f>
c001742f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017433:	5a                   	pop    edx
c0017434:	5b                   	pop    ebx
c0017435:	5e                   	pop    esi
c0017436:	e9 99 fc ff ff       	jmp    c00170d4 <VgaText::updateCursor()>
c001743b:	58                   	pop    eax
c001743c:	5b                   	pop    ebx
c001743d:	5e                   	pop    esi
c001743e:	c3                   	ret    
c001743f:	90                   	nop

c0017440 <VgaText::decrementCursor(bool)>:
c0017440:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017444:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017448:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001744b:	85 c0                	test   eax,eax
c001744d:	74 04                	je     c0017453 <VgaText::decrementCursor(bool)+0x13>
c001744f:	48                   	dec    eax
c0017450:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0017453:	84 c9                	test   cl,cl
c0017455:	74 09                	je     c0017460 <VgaText::decrementCursor(bool)+0x20>
c0017457:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001745b:	e9 74 fc ff ff       	jmp    c00170d4 <VgaText::updateCursor()>
c0017460:	c3                   	ret    
c0017461:	90                   	nop

c0017462 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0017462:	53                   	push   ebx
c0017463:	83 ec 08             	sub    esp,0x8
c0017466:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c001746b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001746f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017473:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017477:	83 f8 07             	cmp    eax,0x7
c001747a:	75 21                	jne    c001749d <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c001747c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017484:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c001748c:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0017494:	83 c4 08             	add    esp,0x8
c0017497:	5b                   	pop    ebx
c0017498:	e9 d6 3a 00 00       	jmp    c001af73 <Krnl::beep(int, int, bool)>
c001749d:	83 f8 0d             	cmp    eax,0xd
c00174a0:	75 09                	jne    c00174ab <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00174a2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00174a9:	eb 2d                	jmp    c00174d8 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00174ab:	83 f8 0a             	cmp    eax,0xa
c00174ae:	75 31                	jne    c00174e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00174b0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00174b7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00174ba:	8d 50 01             	lea    edx,[eax+0x1]
c00174bd:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00174c0:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00174c3:	75 0f                	jne    c00174d4 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00174c5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00174c8:	83 ec 0c             	sub    esp,0xc
c00174cb:	53                   	push   ebx
c00174cc:	e8 f9 fc ff ff       	call   c00171ca <VgaText::scrollScreen()>
c00174d1:	83 c4 10             	add    esp,0x10
c00174d4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00174d8:	83 c4 08             	add    esp,0x8
c00174db:	5b                   	pop    ebx
c00174dc:	e9 f3 fb ff ff       	jmp    c00170d4 <VgaText::updateCursor()>
c00174e1:	83 f8 08             	cmp    eax,0x8
c00174e4:	75 25                	jne    c001750b <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c00174e6:	50                   	push   eax
c00174e7:	50                   	push   eax
c00174e8:	6a 01                	push   0x1
c00174ea:	53                   	push   ebx
c00174eb:	e8 50 ff ff ff       	call   c0017440 <VgaText::decrementCursor(bool)>
c00174f0:	5a                   	pop    edx
c00174f1:	59                   	pop    ecx
c00174f2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00174f5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00174f8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00174fb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00174fe:	6a 20                	push   0x20
c0017500:	53                   	push   ebx
c0017501:	e8 66 fd ff ff       	call   c001726c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0017506:	83 c4 28             	add    esp,0x28
c0017509:	5b                   	pop    ebx
c001750a:	c3                   	ret    
c001750b:	83 ec 08             	sub    esp,0x8
c001750e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017511:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017514:	51                   	push   ecx
c0017515:	52                   	push   edx
c0017516:	50                   	push   eax
c0017517:	53                   	push   ebx
c0017518:	e8 4f fd ff ff       	call   c001726c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001751d:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0017521:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0017529:	83 c4 28             	add    esp,0x28
c001752c:	5b                   	pop    ebx
c001752d:	e9 ba fe ff ff       	jmp    c00173ec <VgaText::incrementCursor(bool)>

c0017532 <VgaText::putchar(char)>:
c0017532:	57                   	push   edi
c0017533:	56                   	push   esi
c0017534:	53                   	push   ebx
c0017535:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017539:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001753d:	0f be c2             	movsx  eax,dl
c0017540:	83 f8 5b             	cmp    eax,0x5b
c0017543:	75 18                	jne    c001755d <VgaText::putchar(char)+0x2b>
c0017545:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0017549:	74 20                	je     c001756b <VgaText::putchar(char)+0x39>
c001754b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0017551:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0017558:	e9 b8 00 00 00       	jmp    c0017615 <VgaText::putchar(char)+0xe3>
c001755d:	83 f8 1b             	cmp    eax,0x1b
c0017560:	75 09                	jne    c001756b <VgaText::putchar(char)+0x39>
c0017562:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0017566:	e9 aa 00 00 00       	jmp    c0017615 <VgaText::putchar(char)+0xe3>
c001756b:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c001756f:	89 f9                	mov    ecx,edi
c0017571:	84 c9                	test   cl,cl
c0017573:	0f 84 8c 00 00 00    	je     c0017605 <VgaText::putchar(char)+0xd3>
c0017579:	8d 4a c0             	lea    ecx,[edx-0x40]
c001757c:	80 f9 3e             	cmp    cl,0x3e
c001757f:	77 70                	ja     c00175f1 <VgaText::putchar(char)+0xbf>
c0017581:	83 f8 6d             	cmp    eax,0x6d
c0017584:	75 3f                	jne    c00175c5 <VgaText::putchar(char)+0x93>
c0017586:	31 f6                	xor    esi,esi
c0017588:	31 d2                	xor    edx,edx
c001758a:	31 c0                	xor    eax,eax
c001758c:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c001758f:	7e 25                	jle    c00175b6 <VgaText::putchar(char)+0x84>
c0017591:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0017596:	83 fa 3b             	cmp    edx,0x3b
c0017599:	75 0f                	jne    c00175aa <VgaText::putchar(char)+0x78>
c001759b:	50                   	push   eax
c001759c:	53                   	push   ebx
c001759d:	e8 48 fb ff ff       	call   c00170ea <VgaText::doANSI_SGR(int)>
c00175a2:	31 d2                	xor    edx,edx
c00175a4:	59                   	pop    ecx
c00175a5:	58                   	pop    eax
c00175a6:	31 c0                	xor    eax,eax
c00175a8:	eb 09                	jmp    c00175b3 <VgaText::putchar(char)+0x81>
c00175aa:	6b c0 0a             	imul   eax,eax,0xa
c00175ad:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00175b1:	89 fa                	mov    edx,edi
c00175b3:	46                   	inc    esi
c00175b4:	eb d6                	jmp    c001758c <VgaText::putchar(char)+0x5a>
c00175b6:	84 d2                	test   dl,dl
c00175b8:	74 2f                	je     c00175e9 <VgaText::putchar(char)+0xb7>
c00175ba:	50                   	push   eax
c00175bb:	53                   	push   ebx
c00175bc:	e8 29 fb ff ff       	call   c00170ea <VgaText::doANSI_SGR(int)>
c00175c1:	58                   	pop    eax
c00175c2:	5a                   	pop    edx
c00175c3:	eb 24                	jmp    c00175e9 <VgaText::putchar(char)+0xb7>
c00175c5:	83 f8 4a             	cmp    eax,0x4a
c00175c8:	75 1f                	jne    c00175e9 <VgaText::putchar(char)+0xb7>
c00175ca:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00175ce:	75 19                	jne    c00175e9 <VgaText::putchar(char)+0xb7>
c00175d0:	83 ec 0c             	sub    esp,0xc
c00175d3:	53                   	push   ebx
c00175d4:	e8 95 fd ff ff       	call   c001736e <VgaText::clearScreen()>
c00175d9:	83 c4 0c             	add    esp,0xc
c00175dc:	6a 00                	push   0x0
c00175de:	6a 00                	push   0x0
c00175e0:	53                   	push   ebx
c00175e1:	e8 26 fd ff ff       	call   c001730c <VgaText::setCursor(int, int)>
c00175e6:	83 c4 10             	add    esp,0x10
c00175e9:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00175ef:	eb 24                	jmp    c0017615 <VgaText::putchar(char)+0xe3>
c00175f1:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c00175f4:	83 f8 0e             	cmp    eax,0xe
c00175f7:	7f 1c                	jg     c0017615 <VgaText::putchar(char)+0xe3>
c00175f9:	8d 48 01             	lea    ecx,[eax+0x1]
c00175fc:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00175ff:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0017603:	eb 10                	jmp    c0017615 <VgaText::putchar(char)+0xe3>
c0017605:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017608:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001760b:	50                   	push   eax
c001760c:	53                   	push   ebx
c001760d:	e8 50 fe ff ff       	call   c0017462 <VgaText::putchar(char, VgaColour, VgaColour)>
c0017612:	83 c4 10             	add    esp,0x10
c0017615:	5b                   	pop    ebx
c0017616:	5e                   	pop    esi
c0017617:	5f                   	pop    edi
c0017618:	c3                   	ret    
c0017619:	90                   	nop

c001761a <VgaText::putx(unsigned int)>:
c001761a:	57                   	push   edi
c001761b:	b9 11 00 00 00       	mov    ecx,0x11
c0017620:	56                   	push   esi
c0017621:	be 12 1b 03 c0       	mov    esi,0xc0031b12
c0017626:	53                   	push   ebx
c0017627:	83 ec 20             	sub    esp,0x20
c001762a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001762e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0017632:	fc                   	cld    
c0017633:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017635:	be 08 00 00 00       	mov    esi,0x8
c001763a:	50                   	push   eax
c001763b:	50                   	push   eax
c001763c:	89 d8                	mov    eax,ebx
c001763e:	c1 e8 1c             	shr    eax,0x1c
c0017641:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0017646:	c1 e3 04             	shl    ebx,0x4
c0017649:	50                   	push   eax
c001764a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001764e:	e8 df fe ff ff       	call   c0017532 <VgaText::putchar(char)>
c0017653:	83 c4 10             	add    esp,0x10
c0017656:	4e                   	dec    esi
c0017657:	75 e1                	jne    c001763a <VgaText::putx(unsigned int)+0x20>
c0017659:	83 c4 20             	add    esp,0x20
c001765c:	5b                   	pop    ebx
c001765d:	5e                   	pop    esi
c001765e:	5f                   	pop    edi
c001765f:	c3                   	ret    

c0017660 <VgaText::puts(char const*)>:
c0017660:	53                   	push   ebx
c0017661:	83 ec 08             	sub    esp,0x8
c0017664:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017668:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001766b:	85 c0                	test   eax,eax
c001766d:	74 12                	je     c0017681 <VgaText::puts(char const*)+0x21>
c001766f:	51                   	push   ecx
c0017670:	43                   	inc    ebx
c0017671:	51                   	push   ecx
c0017672:	50                   	push   eax
c0017673:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017677:	e8 b6 fe ff ff       	call   c0017532 <VgaText::putchar(char)>
c001767c:	83 c4 10             	add    esp,0x10
c001767f:	eb e7                	jmp    c0017668 <VgaText::puts(char const*)+0x8>
c0017681:	83 c4 08             	add    esp,0x8
c0017684:	5b                   	pop    ebx
c0017685:	c3                   	ret    

c0017686 <VgaText::write(unsigned long long, void*, int*)>:
c0017686:	55                   	push   ebp
c0017687:	57                   	push   edi
c0017688:	56                   	push   esi
c0017689:	53                   	push   ebx
c001768a:	83 ec 0c             	sub    esp,0xc
c001768d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0017691:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0017695:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017699:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00176a0:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00176a3:	39 eb                	cmp    ebx,ebp
c00176a5:	74 13                	je     c00176ba <VgaText::write(unsigned long long, void*, int*)+0x34>
c00176a7:	50                   	push   eax
c00176a8:	43                   	inc    ebx
c00176a9:	50                   	push   eax
c00176aa:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00176ae:	50                   	push   eax
c00176af:	56                   	push   esi
c00176b0:	e8 7d fe ff ff       	call   c0017532 <VgaText::putchar(char)>
c00176b5:	83 c4 10             	add    esp,0x10
c00176b8:	eb e9                	jmp    c00176a3 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00176ba:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00176c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00176c5:	89 38                	mov    DWORD PTR [eax],edi
c00176c7:	83 c4 0c             	add    esp,0xc
c00176ca:	31 c0                	xor    eax,eax
c00176cc:	5b                   	pop    ebx
c00176cd:	5e                   	pop    esi
c00176ce:	5f                   	pop    edi
c00176cf:	5d                   	pop    ebp
c00176d0:	c3                   	ret    
c00176d1:	90                   	nop

c00176d2 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00176d2:	55                   	push   ebp
c00176d3:	57                   	push   edi
c00176d4:	56                   	push   esi
c00176d5:	53                   	push   ebx
c00176d6:	83 ec 0c             	sub    esp,0xc
c00176d9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00176dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00176e2:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c00176e9:	50                   	push   eax
c00176ea:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00176ef:	50                   	push   eax
c00176f0:	e8 c3 fa ff ff       	call   c00171b8 <VgaText::combineColours(unsigned char, unsigned char)>
c00176f5:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c00176f9:	5a                   	pop    edx
c00176fa:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c00176fd:	59                   	pop    ecx
c00176fe:	0f b6 f8             	movzx  edi,al
c0017701:	0f b7 db             	movzx  ebx,bx
c0017704:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0017708:	01 db                	add    ebx,ebx
c001770a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c001770d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0017710:	85 c0                	test   eax,eax
c0017712:	0f 84 ef 00 00 00    	je     c0017807 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0017718:	83 f8 0d             	cmp    eax,0xd
c001771b:	75 0c                	jne    c0017729 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c001771d:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0017724:	e9 d8 00 00 00       	jmp    c0017801 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017729:	83 f8 0a             	cmp    eax,0xa
c001772c:	75 44                	jne    c0017772 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c001772e:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0017735:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017738:	8d 48 01             	lea    ecx,[eax+0x1]
c001773b:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c001773e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0017741:	75 0f                	jne    c0017752 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0017743:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0017746:	83 ec 0c             	sub    esp,0xc
c0017749:	55                   	push   ebp
c001774a:	e8 7b fa ff ff       	call   c00171ca <VgaText::scrollScreen()>
c001774f:	83 c4 10             	add    esp,0x10
c0017752:	83 ec 0c             	sub    esp,0xc
c0017755:	55                   	push   ebp
c0017756:	e8 79 f9 ff ff       	call   c00170d4 <VgaText::updateCursor()>
c001775b:	83 c4 10             	add    esp,0x10
c001775e:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0017762:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0017765:	0f b7 db             	movzx  ebx,bx
c0017768:	01 db                	add    ebx,ebx
c001776a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c001776d:	e9 8f 00 00 00       	jmp    c0017801 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017772:	83 f8 08             	cmp    eax,0x8
c0017775:	75 34                	jne    c00177ab <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0017777:	51                   	push   ecx
c0017778:	51                   	push   ecx
c0017779:	6a 01                	push   0x1
c001777b:	55                   	push   ebp
c001777c:	e8 bf fc ff ff       	call   c0017440 <VgaText::decrementCursor(bool)>
c0017781:	5b                   	pop    ebx
c0017782:	58                   	pop    eax
c0017783:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0017786:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0017789:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001778c:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c001778f:	6a 20                	push   0x20
c0017791:	55                   	push   ebp
c0017792:	e8 d5 fa ff ff       	call   c001726c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0017797:	83 c4 20             	add    esp,0x20
c001779a:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c001779e:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c00177a1:	0f b7 db             	movzx  ebx,bx
c00177a4:	01 db                	add    ebx,ebx
c00177a6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c00177a9:	eb 56                	jmp    c0017801 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00177ab:	52                   	push   edx
c00177ac:	52                   	push   edx
c00177ad:	57                   	push   edi
c00177ae:	50                   	push   eax
c00177af:	e8 a8 fa ff ff       	call   c001725c <VgaText::combineCharAndColour(char, unsigned char)>
c00177b4:	83 c4 10             	add    esp,0x10
c00177b7:	66 89 03             	mov    WORD PTR [ebx],ax
c00177ba:	39 2d 08 ba 03 c0    	cmp    DWORD PTR ds:0xc003ba08,ebp
c00177c0:	75 1d                	jne    c00177df <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c00177c2:	83 ec 0c             	sub    esp,0xc
c00177c5:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c00177c8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00177cb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00177cf:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00177d3:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00177d6:	50                   	push   eax
c00177d7:	e8 f8 09 01 00       	call   c00281d4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00177dc:	83 c4 20             	add    esp,0x20
c00177df:	50                   	push   eax
c00177e0:	83 c3 02             	add    ebx,0x2
c00177e3:	50                   	push   eax
c00177e4:	6a 00                	push   0x0
c00177e6:	55                   	push   ebp
c00177e7:	e8 00 fc ff ff       	call   c00173ec <VgaText::incrementCursor(bool)>
c00177ec:	83 c4 10             	add    esp,0x10
c00177ef:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c00177f3:	75 0c                	jne    c0017801 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00177f5:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c00177f9:	0f b7 db             	movzx  ebx,bx
c00177fc:	01 db                	add    ebx,ebx
c00177fe:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0017801:	46                   	inc    esi
c0017802:	e9 06 ff ff ff       	jmp    c001770d <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0017807:	83 ec 0c             	sub    esp,0xc
c001780a:	55                   	push   ebp
c001780b:	e8 c4 f8 ff ff       	call   c00170d4 <VgaText::updateCursor()>
c0017810:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0017817:	83 c4 1c             	add    esp,0x1c
c001781a:	5b                   	pop    ebx
c001781b:	5e                   	pop    esi
c001781c:	5f                   	pop    edi
c001781d:	5d                   	pop    ebp
c001781e:	c3                   	ret    
c001781f:	90                   	nop

c0017820 <VgaText::VgaText(char const*)>:
c0017820:	56                   	push   esi
c0017821:	53                   	push   ebx
c0017822:	83 ec 04             	sub    esp,0x4
c0017825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017829:	83 ec 08             	sub    esp,0x8
c001782c:	6a 00                	push   0x0
c001782e:	50                   	push   eax
c001782f:	e8 26 05 00 00       	call   c0017d5a <UnixFile::UnixFile(int)>
c0017834:	83 c4 10             	add    esp,0x10
c0017837:	ba 38 1b 03 c0       	mov    edx,0xc0031b38
c001783c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017840:	89 10                	mov    DWORD PTR [eax],edx
c0017842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017846:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c001784d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017851:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0017858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001785c:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0017860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017864:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0017868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001786c:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0017873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017877:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c001787e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017882:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0017889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001788d:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0017894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017898:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c001789f:	83 ec 0c             	sub    esp,0xc
c00178a2:	6a 01                	push   0x1
c00178a4:	e8 00 09 00 00       	call   c00181a9 <Virt::allocateKernelVirtualPages(int)>
c00178a9:	83 c4 10             	add    esp,0x10
c00178ac:	89 c2                	mov    edx,eax
c00178ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178b2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00178b5:	8b 1d b0 ba 03 c0    	mov    ebx,DWORD PTR ds:0xc003bab0
c00178bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00178c2:	89 c6                	mov    esi,eax
c00178c4:	e8 ce f0 ff ff       	call   c0016997 <Phys::allocatePage()>
c00178c9:	68 05 0c 00 00       	push   0xc05
c00178ce:	56                   	push   esi
c00178cf:	50                   	push   eax
c00178d0:	53                   	push   ebx
c00178d1:	e8 dc 0f 00 00       	call   c00188b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c00178d6:	83 c4 10             	add    esp,0x10
c00178d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178dd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00178e0:	83 ec 04             	sub    esp,0x4
c00178e3:	68 a0 0f 00 00       	push   0xfa0
c00178e8:	6a 00                	push   0x0
c00178ea:	50                   	push   eax
c00178eb:	e8 00 8c fe ff       	call   c00004f0 <memset>
c00178f0:	83 c4 10             	add    esp,0x10
c00178f3:	83 ec 04             	sub    esp,0x4
c00178f6:	6a 00                	push   0x0
c00178f8:	6a 07                	push   0x7
c00178fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00178fe:	e8 7b f8 ff ff       	call   c001717e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017903:	83 c4 10             	add    esp,0x10
c0017906:	83 ec 04             	sub    esp,0x4
c0017909:	6a 00                	push   0x0
c001790b:	6a 00                	push   0x0
c001790d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017911:	e8 f6 f9 ff ff       	call   c001730c <VgaText::setCursor(int, int)>
c0017916:	83 c4 10             	add    esp,0x10
c0017919:	83 ec 0c             	sub    esp,0xc
c001791c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017920:	e8 49 fa ff ff       	call   c001736e <VgaText::clearScreen()>
c0017925:	83 c4 10             	add    esp,0x10
c0017928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001792c:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0017930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017934:	05 82 00 00 00       	add    eax,0x82
c0017939:	83 ec 04             	sub    esp,0x4
c001793c:	68 80 00 00 00       	push   0x80
c0017941:	6a 00                	push   0x0
c0017943:	50                   	push   eax
c0017944:	e8 a7 8b fe ff       	call   c00004f0 <memset>
c0017949:	83 c4 10             	add    esp,0x10
c001794c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017950:	05 02 01 00 00       	add    eax,0x102
c0017955:	83 ec 04             	sub    esp,0x4
c0017958:	68 80 00 00 00       	push   0x80
c001795d:	6a 00                	push   0x0
c001795f:	50                   	push   eax
c0017960:	e8 8b 8b fe ff       	call   c00004f0 <memset>
c0017965:	83 c4 10             	add    esp,0x10
c0017968:	90                   	nop
c0017969:	83 c4 04             	add    esp,0x4
c001796c:	5b                   	pop    ebx
c001796d:	5e                   	pop    esi
c001796e:	c3                   	ret    
c001796f:	90                   	nop

c0017970 <VgaText::receiveKey(unsigned char)>:
c0017970:	55                   	push   ebp
c0017971:	57                   	push   edi
c0017972:	56                   	push   esi
c0017973:	53                   	push   ebx
c0017974:	83 ec 2c             	sub    esp,0x2c
c0017977:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001797b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001797f:	89 fd                	mov    ebp,edi
c0017981:	81 e5 ff 00 00 00    	and    ebp,0xff
c0017987:	0f 84 48 01 00 00    	je     c0017ad5 <VgaText::receiveKey(unsigned char)+0x165>
c001798d:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0017993:	83 fd 08             	cmp    ebp,0x8
c0017996:	75 6a                	jne    c0017a02 <VgaText::receiveKey(unsigned char)+0x92>
c0017998:	83 ec 0c             	sub    esp,0xc
c001799b:	56                   	push   esi
c001799c:	e8 df 8b fe ff       	call   c0000580 <strlen>
c00179a1:	83 c4 10             	add    esp,0x10
c00179a4:	85 c0                	test   eax,eax
c00179a6:	0f 84 ef 00 00 00    	je     c0017a9b <VgaText::receiveKey(unsigned char)+0x12b>
c00179ac:	50                   	push   eax
c00179ad:	50                   	push   eax
c00179ae:	6a 08                	push   0x8
c00179b0:	53                   	push   ebx
c00179b1:	e8 7c fb ff ff       	call   c0017532 <VgaText::putchar(char)>
c00179b6:	89 34 24             	mov    DWORD PTR [esp],esi
c00179b9:	e8 c2 8b fe ff       	call   c0000580 <strlen>
c00179be:	83 c4 10             	add    esp,0x10
c00179c1:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c00179c9:	83 fa 1f             	cmp    edx,0x1f
c00179cc:	89 d0                	mov    eax,edx
c00179ce:	7f 1c                	jg     c00179ec <VgaText::receiveKey(unsigned char)+0x7c>
c00179d0:	83 e8 08             	sub    eax,0x8
c00179d3:	3c 02                	cmp    al,0x2
c00179d5:	76 15                	jbe    c00179ec <VgaText::receiveKey(unsigned char)+0x7c>
c00179d7:	83 fa 0d             	cmp    edx,0xd
c00179da:	74 10                	je     c00179ec <VgaText::receiveKey(unsigned char)+0x7c>
c00179dc:	57                   	push   edi
c00179dd:	57                   	push   edi
c00179de:	68 23 1b 03 c0       	push   0xc0031b23
c00179e3:	53                   	push   ebx
c00179e4:	e8 77 fc ff ff       	call   c0017660 <VgaText::puts(char const*)>
c00179e9:	83 c4 10             	add    esp,0x10
c00179ec:	83 ec 0c             	sub    esp,0xc
c00179ef:	56                   	push   esi
c00179f0:	e8 8b 8b fe ff       	call   c0000580 <strlen>
c00179f5:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c00179fd:	e9 96 00 00 00       	jmp    c0017a98 <VgaText::receiveKey(unsigned char)+0x128>
c0017a02:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0017a08:	83 ec 0c             	sub    esp,0xc
c0017a0b:	50                   	push   eax
c0017a0c:	e8 6f 8b fe ff       	call   c0000580 <strlen>
c0017a11:	89 34 24             	mov    DWORD PTR [esp],esi
c0017a14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a18:	e8 63 8b fe ff       	call   c0000580 <strlen>
c0017a1d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017a21:	83 c4 10             	add    esp,0x10
c0017a24:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0017a28:	3d 80 00 00 00       	cmp    eax,0x80
c0017a2d:	0f 87 a2 00 00 00    	ja     c0017ad5 <VgaText::receiveKey(unsigned char)+0x165>
c0017a33:	8d 47 ff             	lea    eax,[edi-0x1]
c0017a36:	3c 1e                	cmp    al,0x1e
c0017a38:	77 35                	ja     c0017a6f <VgaText::receiveKey(unsigned char)+0xff>
c0017a3a:	8d 47 f7             	lea    eax,[edi-0x9]
c0017a3d:	3c 01                	cmp    al,0x1
c0017a3f:	76 2e                	jbe    c0017a6f <VgaText::receiveKey(unsigned char)+0xff>
c0017a41:	83 fd 0d             	cmp    ebp,0xd
c0017a44:	74 29                	je     c0017a6f <VgaText::receiveKey(unsigned char)+0xff>
c0017a46:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017a49:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017a4c:	68 29 1b 03 c0       	push   0xc0031b29
c0017a51:	53                   	push   ebx
c0017a52:	e8 7b fc ff ff       	call   c00176d2 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017a57:	8d 47 40             	lea    eax,[edi+0x40]
c0017a5a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017a5d:	0f b6 c0             	movzx  eax,al
c0017a60:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017a63:	50                   	push   eax
c0017a64:	53                   	push   ebx
c0017a65:	e8 f8 f9 ff ff       	call   c0017462 <VgaText::putchar(char, VgaColour, VgaColour)>
c0017a6a:	83 c4 20             	add    esp,0x20
c0017a6d:	eb 11                	jmp    c0017a80 <VgaText::receiveKey(unsigned char)+0x110>
c0017a6f:	51                   	push   ecx
c0017a70:	89 f8                	mov    eax,edi
c0017a72:	51                   	push   ecx
c0017a73:	0f be c0             	movsx  eax,al
c0017a76:	50                   	push   eax
c0017a77:	53                   	push   ebx
c0017a78:	e8 b5 fa ff ff       	call   c0017532 <VgaText::putchar(char)>
c0017a7d:	83 c4 10             	add    esp,0x10
c0017a80:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017a85:	89 f8                	mov    eax,edi
c0017a87:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0017a8b:	52                   	push   edx
c0017a8c:	52                   	push   edx
c0017a8d:	8d 44 24 26          	lea    eax,[esp+0x26]
c0017a91:	50                   	push   eax
c0017a92:	56                   	push   esi
c0017a93:	e8 d8 8d fe ff       	call   c0000870 <strcat>
c0017a98:	83 c4 10             	add    esp,0x10
c0017a9b:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0017aa2:	75 0f                	jne    c0017ab3 <VgaText::receiveKey(unsigned char)+0x143>
c0017aa4:	83 fd 1c             	cmp    ebp,0x1c
c0017aa7:	77 2c                	ja     c0017ad5 <VgaText::receiveKey(unsigned char)+0x165>
c0017aa9:	b8 08 04 00 10       	mov    eax,0x10000408
c0017aae:	0f a3 e8             	bt     eax,ebp
c0017ab1:	73 22                	jae    c0017ad5 <VgaText::receiveKey(unsigned char)+0x165>
c0017ab3:	50                   	push   eax
c0017ab4:	81 c3 02 01 00 00    	add    ebx,0x102
c0017aba:	50                   	push   eax
c0017abb:	56                   	push   esi
c0017abc:	53                   	push   ebx
c0017abd:	e8 ae 8d fe ff       	call   c0000870 <strcat>
c0017ac2:	83 c4 0c             	add    esp,0xc
c0017ac5:	68 80 00 00 00       	push   0x80
c0017aca:	6a 00                	push   0x0
c0017acc:	56                   	push   esi
c0017acd:	e8 1e 8a fe ff       	call   c00004f0 <memset>
c0017ad2:	83 c4 10             	add    esp,0x10
c0017ad5:	83 c4 2c             	add    esp,0x2c
c0017ad8:	5b                   	pop    ebx
c0017ad9:	5e                   	pop    esi
c0017ada:	5f                   	pop    edi
c0017adb:	5d                   	pop    ebp
c0017adc:	c3                   	ret    
c0017add:	90                   	nop

c0017ade <VgaText::doUpdate()>:
c0017ade:	c3                   	ret    
c0017adf:	90                   	nop

c0017ae0 <TSS::TSS()>:
c0017ae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ae4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017aeb:	90                   	nop
c0017aec:	c3                   	ret    
c0017aed:	90                   	nop
c0017aee:	66 90                	xchg   ax,ax

c0017af0 <TSS::setESP(unsigned long)>:
c0017af0:	55                   	push   ebp
c0017af1:	89 e5                	mov    ebp,esp
c0017af3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017af6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017af9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017afc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017aff:	90                   	nop
c0017b00:	5d                   	pop    ebp
c0017b01:	c3                   	ret    
c0017b02:	66 90                	xchg   ax,ax

c0017b04 <TSS::flush()>:
c0017b04:	55                   	push   ebp
c0017b05:	89 e5                	mov    ebp,esp
c0017b07:	83 ec 10             	sub    esp,0x10
c0017b0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b0f:	83 c8 03             	or     eax,0x3
c0017b12:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0017b16:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0017b1a:	66 89 d0             	mov    ax,dx
c0017b1d:	0f 00 d8             	ltr    ax
c0017b20:	90                   	nop
c0017b21:	c9                   	leave  
c0017b22:	c3                   	ret    
c0017b23:	90                   	nop

c0017b24 <TSS::setup(unsigned long, unsigned long)>:
c0017b24:	55                   	push   ebp
c0017b25:	89 e5                	mov    ebp,esp
c0017b27:	83 ec 18             	sub    esp,0x18
c0017b2a:	83 ec 0c             	sub    esp,0xc
c0017b2d:	6a 68                	push   0x68
c0017b2f:	e8 54 eb ff ff       	call   c0016688 <malloc>
c0017b34:	83 c4 10             	add    esp,0x10
c0017b37:	89 c2                	mov    edx,eax
c0017b39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b3c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017b3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b45:	83 ec 04             	sub    esp,0x4
c0017b48:	6a 68                	push   0x68
c0017b4a:	6a 00                	push   0x0
c0017b4c:	50                   	push   eax
c0017b4d:	e8 9e 89 fe ff       	call   c00004f0 <memset>
c0017b52:	83 c4 10             	add    esp,0x10
c0017b55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b5b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0017b61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b67:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0017b6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b73:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017b76:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017b79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b7f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0017b85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b8b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0017b91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b97:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0017b9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ba0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ba3:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0017ba9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017baf:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0017bb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bbb:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0017bc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bc7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0017bca:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0017bcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bd3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017bd6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017bd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bdc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bdf:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0017be6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017be9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bec:	0f 20 da             	mov    edx,cr3
c0017bef:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0017bf2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0017bf5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0017bf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bfb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bfe:	83 ec 08             	sub    esp,0x8
c0017c01:	50                   	push   eax
c0017c02:	8d 45 ec             	lea    eax,[ebp-0x14]
c0017c05:	50                   	push   eax
c0017c06:	e8 71 e2 ff ff       	call   c0015e7c <GDTEntry::setBase(unsigned int)>
c0017c0b:	83 c4 10             	add    esp,0x10
c0017c0e:	83 ec 08             	sub    esp,0x8
c0017c11:	6a 68                	push   0x68
c0017c13:	8d 45 ec             	lea    eax,[ebp-0x14]
c0017c16:	50                   	push   eax
c0017c17:	e8 7c e2 ff ff       	call   c0015e98 <GDTEntry::setLimit(unsigned int)>
c0017c1c:	83 c4 10             	add    esp,0x10
c0017c1f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0017c23:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0017c26:	83 e0 0f             	and    eax,0xf
c0017c29:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0017c2c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0017c2f:	83 c8 40             	or     eax,0x40
c0017c32:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0017c35:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0017c3a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017c40:	05 78 01 00 00       	add    eax,0x178
c0017c45:	83 ec 04             	sub    esp,0x4
c0017c48:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0017c4b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0017c4e:	50                   	push   eax
c0017c4f:	e8 78 e2 ff ff       	call   c0015ecc <GDT::addEntry(GDTEntry)>
c0017c54:	83 c4 10             	add    esp,0x10
c0017c57:	89 c2                	mov    edx,eax
c0017c59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c5c:	89 10                	mov    DWORD PTR [eax],edx
c0017c5e:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0017c63:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017c69:	05 78 01 00 00       	add    eax,0x178
c0017c6e:	83 ec 0c             	sub    esp,0xc
c0017c71:	50                   	push   eax
c0017c72:	e8 7f e2 ff ff       	call   c0015ef6 <GDT::flush()>
c0017c77:	83 c4 10             	add    esp,0x10
c0017c7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c7f:	c9                   	leave  
c0017c80:	c3                   	ret    
c0017c81:	90                   	nop

c0017c82 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0017c82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c86:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c8d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0017c92:	75 08                	jne    c0017c9c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0017c94:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0017c9a:	eb 38                	jmp    c0017cd4 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0017c9c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017ca1:	75 17                	jne    c0017cba <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0017ca3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ca8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017cab:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cb1:	8b 10                	mov    edx,DWORD PTR [eax]
c0017cb3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017cb7:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0017cba:	89 c1                	mov    ecx,eax
c0017cbc:	83 e1 fd             	and    ecx,0xfffffffd
c0017cbf:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0017cc5:	74 cd                	je     c0017c94 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017cc7:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017ccc:	83 e0 ef             	and    eax,0xffffffef
c0017ccf:	83 f8 08             	cmp    eax,0x8
c0017cd2:	76 c0                	jbe    c0017c94 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017cd4:	31 c0                	xor    eax,eax
c0017cd6:	c3                   	ret    
c0017cd7:	90                   	nop

c0017cd8 <ReservedFilename::isAtty()>:
c0017cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cdc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017cdf:	31 c0                	xor    eax,eax
c0017ce1:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0017ce7:	74 09                	je     c0017cf2 <ReservedFilename::isAtty()+0x1a>
c0017ce9:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0017cef:	0f 94 c0             	sete   al
c0017cf2:	c3                   	ret    
c0017cf3:	90                   	nop

c0017cf4 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0017cf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cf8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017cfc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017d03:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0017d08:	75 08                	jne    c0017d12 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0017d0a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0017d10:	eb 3d                	jmp    c0017d4f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017d12:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017d17:	75 17                	jne    c0017d30 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0017d19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017d1e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d21:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d27:	8b 10                	mov    edx,DWORD PTR [eax]
c0017d29:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017d2d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0017d30:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0017d35:	75 04                	jne    c0017d3b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0017d37:	89 0a                	mov    DWORD PTR [edx],ecx
c0017d39:	eb 14                	jmp    c0017d4f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017d3b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0017d40:	74 c8                	je     c0017d0a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017d42:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017d47:	83 e0 ef             	and    eax,0xffffffef
c0017d4a:	83 f8 08             	cmp    eax,0x8
c0017d4d:	76 bb                	jbe    c0017d0a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017d4f:	31 c0                	xor    eax,eax
c0017d51:	c3                   	ret    

c0017d52 <UnixFile::getFileDescriptor()>:
c0017d52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017d59:	c3                   	ret    

c0017d5a <UnixFile::UnixFile(int)>:
c0017d5a:	53                   	push   ebx
c0017d5b:	83 ec 28             	sub    esp,0x28
c0017d5e:	ba 00 1c 03 c0       	mov    edx,0xc0031c00
c0017d63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d67:	89 10                	mov    DWORD PTR [eax],edx
c0017d69:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0017d71:	0f 8f 90 01 00 00    	jg     c0017f07 <UnixFile::UnixFile(int)+0x1ad>
c0017d77:	a1 40 45 03 c0       	mov    eax,ds:0xc0034540
c0017d7c:	8d 50 01             	lea    edx,[eax+0x1]
c0017d7f:	89 15 40 45 03 c0    	mov    DWORD PTR ds:0xc0034540,edx
c0017d85:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017d89:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017d8c:	83 ec 08             	sub    esp,0x8
c0017d8f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017d93:	68 98 ba 03 c0       	push   0xc003ba98
c0017d98:	e8 fb 73 01 00       	call   c002f198 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017d9d:	83 c4 10             	add    esp,0x10
c0017da0:	a0 94 ba 03 c0       	mov    al,ds:0xc003ba94
c0017da5:	83 f0 01             	xor    eax,0x1
c0017da8:	0f b6 c0             	movzx  eax,al
c0017dab:	85 c0                	test   eax,eax
c0017dad:	0f 84 55 01 00 00    	je     c0017f08 <UnixFile::UnixFile(int)+0x1ae>
c0017db3:	c6 05 94 ba 03 c0 01 	mov    BYTE PTR ds:0xc003ba94,0x1
c0017dba:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0017dc2:	83 ec 0c             	sub    esp,0xc
c0017dc5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017dc9:	e8 ba e8 ff ff       	call   c0016688 <malloc>
c0017dce:	83 c4 10             	add    esp,0x10
c0017dd1:	89 c3                	mov    ebx,eax
c0017dd3:	83 ec 08             	sub    esp,0x8
c0017dd6:	68 03 ff ff 0f       	push   0xfffff03
c0017ddb:	53                   	push   ebx
c0017ddc:	e8 2d 01 00 00       	call   c0017f0e <ReservedFilename::ReservedFilename(int)>
c0017de1:	83 c4 10             	add    esp,0x10
c0017de4:	89 1d 8c ba 03 c0    	mov    DWORD PTR ds:0xc003ba8c,ebx
c0017dea:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0017df2:	83 ec 0c             	sub    esp,0xc
c0017df5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017df9:	e8 8a e8 ff ff       	call   c0016688 <malloc>
c0017dfe:	83 c4 10             	add    esp,0x10
c0017e01:	89 c3                	mov    ebx,eax
c0017e03:	83 ec 08             	sub    esp,0x8
c0017e06:	68 01 ff ff 0f       	push   0xfffff01
c0017e0b:	53                   	push   ebx
c0017e0c:	e8 fd 00 00 00       	call   c0017f0e <ReservedFilename::ReservedFilename(int)>
c0017e11:	83 c4 10             	add    esp,0x10
c0017e14:	89 1d 90 ba 03 c0    	mov    DWORD PTR ds:0xc003ba90,ebx
c0017e1a:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0017e22:	83 ec 0c             	sub    esp,0xc
c0017e25:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017e29:	e8 5a e8 ff ff       	call   c0016688 <malloc>
c0017e2e:	83 c4 10             	add    esp,0x10
c0017e31:	89 c3                	mov    ebx,eax
c0017e33:	83 ec 08             	sub    esp,0x8
c0017e36:	68 00 ff ff 0f       	push   0xfffff00
c0017e3b:	53                   	push   ebx
c0017e3c:	e8 cd 00 00 00       	call   c0017f0e <ReservedFilename::ReservedFilename(int)>
c0017e41:	83 c4 10             	add    esp,0x10
c0017e44:	89 1d 84 ba 03 c0    	mov    DWORD PTR ds:0xc003ba84,ebx
c0017e4a:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0017e52:	83 ec 0c             	sub    esp,0xc
c0017e55:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017e59:	e8 2a e8 ff ff       	call   c0016688 <malloc>
c0017e5e:	83 c4 10             	add    esp,0x10
c0017e61:	89 c3                	mov    ebx,eax
c0017e63:	83 ec 08             	sub    esp,0x8
c0017e66:	68 02 ff ff 0f       	push   0xfffff02
c0017e6b:	53                   	push   ebx
c0017e6c:	e8 9d 00 00 00       	call   c0017f0e <ReservedFilename::ReservedFilename(int)>
c0017e71:	83 c4 10             	add    esp,0x10
c0017e74:	89 1d 88 ba 03 c0    	mov    DWORD PTR ds:0xc003ba88,ebx
c0017e7a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017e82:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0017e87:	7f 7f                	jg     c0017f08 <UnixFile::UnixFile(int)+0x1ae>
c0017e89:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0017e91:	83 ec 0c             	sub    esp,0xc
c0017e94:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017e98:	e8 eb e7 ff ff       	call   c0016688 <malloc>
c0017e9d:	83 c4 10             	add    esp,0x10
c0017ea0:	89 c3                	mov    ebx,eax
c0017ea2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ea6:	05 10 ff ff 0f       	add    eax,0xfffff10
c0017eab:	83 ec 08             	sub    esp,0x8
c0017eae:	50                   	push   eax
c0017eaf:	53                   	push   ebx
c0017eb0:	e8 59 00 00 00       	call   c0017f0e <ReservedFilename::ReservedFilename(int)>
c0017eb5:	83 c4 10             	add    esp,0x10
c0017eb8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ebc:	89 1c 85 60 ba 03 c0 	mov    DWORD PTR [eax*4-0x3ffc45a0],ebx
c0017ec3:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0017ecb:	83 ec 0c             	sub    esp,0xc
c0017ece:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017ed2:	e8 b1 e7 ff ff       	call   c0016688 <malloc>
c0017ed7:	83 c4 10             	add    esp,0x10
c0017eda:	89 c3                	mov    ebx,eax
c0017edc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ee0:	05 20 ff ff 0f       	add    eax,0xfffff20
c0017ee5:	83 ec 08             	sub    esp,0x8
c0017ee8:	50                   	push   eax
c0017ee9:	53                   	push   ebx
c0017eea:	e8 1f 00 00 00       	call   c0017f0e <ReservedFilename::ReservedFilename(int)>
c0017eef:	83 c4 10             	add    esp,0x10
c0017ef2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ef6:	89 1c 85 20 ba 03 c0 	mov    DWORD PTR [eax*4-0x3ffc45e0],ebx
c0017efd:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0017f02:	e9 7b ff ff ff       	jmp    c0017e82 <UnixFile::UnixFile(int)+0x128>
c0017f07:	90                   	nop
c0017f08:	83 c4 28             	add    esp,0x28
c0017f0b:	5b                   	pop    ebx
c0017f0c:	c3                   	ret    
c0017f0d:	90                   	nop

c0017f0e <ReservedFilename::ReservedFilename(int)>:
c0017f0e:	83 ec 0c             	sub    esp,0xc
c0017f11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f15:	83 ec 08             	sub    esp,0x8
c0017f18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f1c:	50                   	push   eax
c0017f1d:	e8 38 fe ff ff       	call   c0017d5a <UnixFile::UnixFile(int)>
c0017f22:	83 c4 10             	add    esp,0x10
c0017f25:	ba 1c 1c 03 c0       	mov    edx,0xc0031c1c
c0017f2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f2e:	89 10                	mov    DWORD PTR [eax],edx
c0017f30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f34:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017f38:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017f3b:	90                   	nop
c0017f3c:	83 c4 0c             	add    esp,0xc
c0017f3f:	c3                   	ret    

c0017f40 <UnixFile::~UnixFile()>:
c0017f40:	83 ec 1c             	sub    esp,0x1c
c0017f43:	ba 00 1c 03 c0       	mov    edx,0xc0031c00
c0017f48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f4c:	89 10                	mov    DWORD PTR [eax],edx
c0017f4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017f55:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0017f5a:	7f 76                	jg     c0017fd2 <UnixFile::~UnixFile()+0x92>
c0017f5c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017f64:	83 ec 0c             	sub    esp,0xc
c0017f67:	68 98 ba 03 c0       	push   0xc003ba98
c0017f6c:	e8 fb 72 01 00       	call   c002f26c <LinkedList<UnixFile>::getFirstElement()>
c0017f71:	83 c4 10             	add    esp,0x10
c0017f74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017f78:	83 ec 0c             	sub    esp,0xc
c0017f7b:	68 98 ba 03 c0       	push   0xc003ba98
c0017f80:	e8 ef 72 01 00       	call   c002f274 <LinkedList<UnixFile>::removeFirst()>
c0017f85:	83 c4 10             	add    esp,0x10
c0017f88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f8c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0017f90:	74 43                	je     c0017fd5 <UnixFile::~UnixFile()+0x95>
c0017f92:	83 ec 08             	sub    esp,0x8
c0017f95:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017f99:	68 98 ba 03 c0       	push   0xc003ba98
c0017f9e:	e8 f5 71 01 00       	call   c002f198 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017fa3:	83 c4 10             	add    esp,0x10
c0017fa6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017faa:	8d 50 01             	lea    edx,[eax+0x1]
c0017fad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017fb1:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0017fb6:	0f 94 c0             	sete   al
c0017fb9:	0f b6 c0             	movzx  eax,al
c0017fbc:	85 c0                	test   eax,eax
c0017fbe:	74 a4                	je     c0017f64 <UnixFile::~UnixFile()+0x24>
c0017fc0:	83 ec 0c             	sub    esp,0xc
c0017fc3:	68 d8 1b 03 c0       	push   0xc0031bd8
c0017fc8:	e8 35 87 00 00       	call   c0020702 <KePanic(char const*)>
c0017fcd:	83 c4 10             	add    esp,0x10
c0017fd0:	eb 92                	jmp    c0017f64 <UnixFile::~UnixFile()+0x24>
c0017fd2:	90                   	nop
c0017fd3:	eb 01                	jmp    c0017fd6 <UnixFile::~UnixFile()+0x96>
c0017fd5:	90                   	nop
c0017fd6:	90                   	nop
c0017fd7:	83 c4 1c             	add    esp,0x1c
c0017fda:	c3                   	ret    
c0017fdb:	90                   	nop

c0017fdc <UnixFile::~UnixFile()>:
c0017fdc:	83 ec 0c             	sub    esp,0xc
c0017fdf:	83 ec 0c             	sub    esp,0xc
c0017fe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017fe6:	e8 55 ff ff ff       	call   c0017f40 <UnixFile::~UnixFile()>
c0017feb:	83 c4 10             	add    esp,0x10
c0017fee:	83 ec 08             	sub    esp,0x8
c0017ff1:	6a 0c                	push   0xc
c0017ff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ff7:	e8 c4 13 00 00       	call   c00193c0 <operator delete(void*, unsigned long)>
c0017ffc:	83 c4 10             	add    esp,0x10
c0017fff:	83 c4 0c             	add    esp,0xc
c0018002:	c3                   	ret    
c0018003:	90                   	nop

c0018004 <ReservedFilename::~ReservedFilename()>:
c0018004:	83 ec 0c             	sub    esp,0xc
c0018007:	ba 1c 1c 03 c0       	mov    edx,0xc0031c1c
c001800c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018010:	89 10                	mov    DWORD PTR [eax],edx
c0018012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018016:	83 ec 0c             	sub    esp,0xc
c0018019:	50                   	push   eax
c001801a:	e8 21 ff ff ff       	call   c0017f40 <UnixFile::~UnixFile()>
c001801f:	83 c4 10             	add    esp,0x10
c0018022:	90                   	nop
c0018023:	83 c4 0c             	add    esp,0xc
c0018026:	c3                   	ret    
c0018027:	90                   	nop

c0018028 <ReservedFilename::~ReservedFilename()>:
c0018028:	83 ec 0c             	sub    esp,0xc
c001802b:	83 ec 0c             	sub    esp,0xc
c001802e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018032:	e8 cd ff ff ff       	call   c0018004 <ReservedFilename::~ReservedFilename()>
c0018037:	83 c4 10             	add    esp,0x10
c001803a:	83 ec 08             	sub    esp,0x8
c001803d:	6a 0c                	push   0xc
c001803f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018043:	e8 78 13 00 00       	call   c00193c0 <operator delete(void*, unsigned long)>
c0018048:	83 c4 10             	add    esp,0x10
c001804b:	83 c4 0c             	add    esp,0xc
c001804e:	c3                   	ret    

c001804f <KeGetFileFromDescriptor(int)>:
c001804f:	53                   	push   ebx
c0018050:	83 ec 08             	sub    esp,0x8
c0018053:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018057:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001805d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0018063:	7f 2c                	jg     c0018091 <KeGetFileFromDescriptor(int)+0x42>
c0018065:	83 ec 0c             	sub    esp,0xc
c0018068:	68 98 ba 03 c0       	push   0xc003ba98
c001806d:	e8 fa 71 01 00       	call   c002f26c <LinkedList<UnixFile>::getFirstElement()>
c0018072:	83 c4 10             	add    esp,0x10
c0018075:	85 c0                	test   eax,eax
c0018077:	75 04                	jne    c001807d <KeGetFileFromDescriptor(int)+0x2e>
c0018079:	31 c0                	xor    eax,eax
c001807b:	eb 6e                	jmp    c00180eb <KeGetFileFromDescriptor(int)+0x9c>
c001807d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0018080:	74 69                	je     c00180eb <KeGetFileFromDescriptor(int)+0x9c>
c0018082:	52                   	push   edx
c0018083:	52                   	push   edx
c0018084:	50                   	push   eax
c0018085:	68 98 ba 03 c0       	push   0xc003ba98
c001808a:	e8 87 72 01 00       	call   c002f316 <LinkedList<UnixFile>::getNext(UnixFile*)>
c001808f:	eb e1                	jmp    c0018072 <KeGetFileFromDescriptor(int)+0x23>
c0018091:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0018097:	a1 8c ba 03 c0       	mov    eax,ds:0xc003ba8c
c001809c:	74 4d                	je     c00180eb <KeGetFileFromDescriptor(int)+0x9c>
c001809e:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00180a4:	a1 90 ba 03 c0       	mov    eax,ds:0xc003ba90
c00180a9:	74 40                	je     c00180eb <KeGetFileFromDescriptor(int)+0x9c>
c00180ab:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00180b1:	a1 88 ba 03 c0       	mov    eax,ds:0xc003ba88
c00180b6:	74 33                	je     c00180eb <KeGetFileFromDescriptor(int)+0x9c>
c00180b8:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00180be:	a1 84 ba 03 c0       	mov    eax,ds:0xc003ba84
c00180c3:	74 26                	je     c00180eb <KeGetFileFromDescriptor(int)+0x9c>
c00180c5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00180cb:	83 f8 08             	cmp    eax,0x8
c00180ce:	77 09                	ja     c00180d9 <KeGetFileFromDescriptor(int)+0x8a>
c00180d0:	8b 04 85 60 ba 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc45a0]
c00180d7:	eb 12                	jmp    c00180eb <KeGetFileFromDescriptor(int)+0x9c>
c00180d9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00180df:	83 fb 08             	cmp    ebx,0x8
c00180e2:	77 95                	ja     c0018079 <KeGetFileFromDescriptor(int)+0x2a>
c00180e4:	8b 04 9d 20 ba 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc45e0]
c00180eb:	83 c4 08             	add    esp,0x8
c00180ee:	5b                   	pop    ebx
c00180ef:	c3                   	ret    

c00180f0 <__static_initialization_and_destruction_0(int, int)>:
c00180f0:	83 ec 0c             	sub    esp,0xc
c00180f3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00180f8:	75 34                	jne    c001812e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00180fa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0018102:	75 2a                	jne    c001812e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0018104:	83 ec 0c             	sub    esp,0xc
c0018107:	68 98 ba 03 c0       	push   0xc003ba98
c001810c:	e8 45 70 01 00       	call   c002f156 <LinkedList<UnixFile>::LinkedList()>
c0018111:	83 c4 10             	add    esp,0x10
c0018114:	83 ec 04             	sub    esp,0x4
c0018117:	68 cc 44 03 c0       	push   0xc00344cc
c001811c:	68 98 ba 03 c0       	push   0xc003ba98
c0018121:	68 54 f1 02 c0       	push   0xc002f154
c0018126:	e8 45 12 00 00       	call   c0019370 <__cxa_atexit>
c001812b:	83 c4 10             	add    esp,0x10
c001812e:	90                   	nop
c001812f:	83 c4 0c             	add    esp,0xc
c0018132:	c3                   	ret    

c0018133 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0018133:	83 ec 0c             	sub    esp,0xc
c0018136:	83 ec 08             	sub    esp,0x8
c0018139:	68 ff ff 00 00       	push   0xffff
c001813e:	6a 01                	push   0x1
c0018140:	e8 ab ff ff ff       	call   c00180f0 <__static_initialization_and_destruction_0(int, int)>
c0018145:	83 c4 10             	add    esp,0x10
c0018148:	83 c4 0c             	add    esp,0xc
c001814b:	c3                   	ret    

c001814c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001814c:	53                   	push   ebx
c001814d:	8b 15 48 45 03 c0    	mov    edx,DWORD PTR ds:0xc0034548
c0018153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018157:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001815b:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0018161:	89 d8                	mov    eax,ebx
c0018163:	d1 e8                	shr    eax,1
c0018165:	01 d0                	add    eax,edx
c0018167:	80 e3 01             	and    bl,0x1
c001816a:	8a 10                	mov    dl,BYTE PTR [eax]
c001816c:	75 09                	jne    c0018177 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c001816e:	83 e2 f0             	and    edx,0xfffffff0
c0018171:	09 ca                	or     edx,ecx
c0018173:	88 10                	mov    BYTE PTR [eax],dl
c0018175:	5b                   	pop    ebx
c0018176:	c3                   	ret    
c0018177:	0f b6 c9             	movzx  ecx,cl
c001817a:	83 e2 0f             	and    edx,0xf
c001817d:	c1 e1 04             	shl    ecx,0x4
c0018180:	09 ca                	or     edx,ecx
c0018182:	88 10                	mov    BYTE PTR [eax],dl
c0018184:	5b                   	pop    ebx
c0018185:	c3                   	ret    

c0018186 <Virt::getPageState(unsigned long)>:
c0018186:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001818a:	8b 0d 48 45 03 c0    	mov    ecx,DWORD PTR ds:0xc0034548
c0018190:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0018196:	89 d0                	mov    eax,edx
c0018198:	d1 e8                	shr    eax,1
c001819a:	80 e2 01             	and    dl,0x1
c001819d:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00181a0:	74 03                	je     c00181a5 <Virt::getPageState(unsigned long)+0x1f>
c00181a2:	c1 e8 04             	shr    eax,0x4
c00181a5:	83 e0 0f             	and    eax,0xf
c00181a8:	c3                   	ret    

c00181a9 <Virt::allocateKernelVirtualPages(int)>:
c00181a9:	55                   	push   ebp
c00181aa:	57                   	push   edi
c00181ab:	56                   	push   esi
c00181ac:	31 f6                	xor    esi,esi
c00181ae:	53                   	push   ebx
c00181af:	31 db                	xor    ebx,ebx
c00181b1:	83 ec 1c             	sub    esp,0x1c
c00181b4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00181b9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00181bd:	8b 2d 44 45 03 c0    	mov    ebp,DWORD PTR ds:0xc0034544
c00181c3:	55                   	push   ebp
c00181c4:	e8 bd ff ff ff       	call   c0018186 <Virt::getPageState(unsigned long)>
c00181c9:	5a                   	pop    edx
c00181ca:	84 c0                	test   al,al
c00181cc:	75 3d                	jne    c001820b <Virt::allocateKernelVirtualPages(int)+0x62>
c00181ce:	85 db                	test   ebx,ebx
c00181d0:	0f 44 f5             	cmove  esi,ebp
c00181d3:	83 c3 01             	add    ebx,0x1
c00181d6:	39 fb                	cmp    ebx,edi
c00181d8:	74 5e                	je     c0018238 <Virt::allocateKernelVirtualPages(int)+0x8f>
c00181da:	83 c5 01             	add    ebp,0x1
c00181dd:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c00181e3:	76 33                	jbe    c0018218 <Virt::allocateKernelVirtualPages(int)+0x6f>
c00181e5:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00181ea:	c7 05 44 45 03 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0034544,0xc8000
c00181f4:	75 2a                	jne    c0018220 <Virt::allocateKernelVirtualPages(int)+0x77>
c00181f6:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00181fb:	bd 00 80 0c 00       	mov    ebp,0xc8000
c0018200:	55                   	push   ebp
c0018201:	e8 80 ff ff ff       	call   c0018186 <Virt::getPageState(unsigned long)>
c0018206:	5a                   	pop    edx
c0018207:	84 c0                	test   al,al
c0018209:	74 c3                	je     c00181ce <Virt::allocateKernelVirtualPages(int)+0x25>
c001820b:	83 c5 01             	add    ebp,0x1
c001820e:	31 db                	xor    ebx,ebx
c0018210:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0018216:	77 cd                	ja     c00181e5 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0018218:	89 2d 44 45 03 c0    	mov    DWORD PTR ds:0xc0034544,ebp
c001821e:	eb a3                	jmp    c00181c3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0018220:	83 ec 0c             	sub    esp,0xc
c0018223:	68 30 1c 03 c0       	push   0xc0031c30
c0018228:	e8 d5 84 00 00       	call   c0020702 <KePanic(char const*)>
c001822d:	8b 2d 44 45 03 c0    	mov    ebp,DWORD PTR ds:0xc0034544
c0018233:	83 c4 10             	add    esp,0x10
c0018236:	eb 8b                	jmp    c00181c3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0018238:	89 35 44 45 03 c0    	mov    DWORD PTR ds:0xc0034544,esi
c001823e:	83 fb 01             	cmp    ebx,0x1
c0018241:	74 63                	je     c00182a6 <Virt::allocateKernelVirtualPages(int)+0xfd>
c0018243:	85 ff                	test   edi,edi
c0018245:	74 41                	je     c0018288 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0018247:	89 f0                	mov    eax,esi
c0018249:	31 db                	xor    ebx,ebx
c001824b:	8d 6f ff             	lea    ebp,[edi-0x1]
c001824e:	eb 16                	jmp    c0018266 <Virt::allocateKernelVirtualPages(int)+0xbd>
c0018250:	6a 01                	push   0x1
c0018252:	83 c3 01             	add    ebx,0x1
c0018255:	50                   	push   eax
c0018256:	e8 f1 fe ff ff       	call   c001814c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001825b:	39 fb                	cmp    ebx,edi
c001825d:	58                   	pop    eax
c001825e:	5a                   	pop    edx
c001825f:	74 27                	je     c0018288 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0018261:	a1 44 45 03 c0       	mov    eax,ds:0xc0034544
c0018266:	8d 50 01             	lea    edx,[eax+0x1]
c0018269:	85 db                	test   ebx,ebx
c001826b:	89 15 44 45 03 c0    	mov    DWORD PTR ds:0xc0034544,edx
c0018271:	74 22                	je     c0018295 <Virt::allocateKernelVirtualPages(int)+0xec>
c0018273:	39 dd                	cmp    ebp,ebx
c0018275:	75 d9                	jne    c0018250 <Virt::allocateKernelVirtualPages(int)+0xa7>
c0018277:	6a 03                	push   0x3
c0018279:	83 c3 01             	add    ebx,0x1
c001827c:	50                   	push   eax
c001827d:	e8 ca fe ff ff       	call   c001814c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018282:	39 fb                	cmp    ebx,edi
c0018284:	59                   	pop    ecx
c0018285:	58                   	pop    eax
c0018286:	75 d9                	jne    c0018261 <Virt::allocateKernelVirtualPages(int)+0xb8>
c0018288:	83 c4 1c             	add    esp,0x1c
c001828b:	89 f0                	mov    eax,esi
c001828d:	5b                   	pop    ebx
c001828e:	c1 e0 0c             	shl    eax,0xc
c0018291:	5e                   	pop    esi
c0018292:	5f                   	pop    edi
c0018293:	5d                   	pop    ebp
c0018294:	c3                   	ret    
c0018295:	6a 02                	push   0x2
c0018297:	bb 01 00 00 00       	mov    ebx,0x1
c001829c:	50                   	push   eax
c001829d:	e8 aa fe ff ff       	call   c001814c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00182a2:	58                   	pop    eax
c00182a3:	5a                   	pop    edx
c00182a4:	eb bb                	jmp    c0018261 <Virt::allocateKernelVirtualPages(int)+0xb8>
c00182a6:	6a 04                	push   0x4
c00182a8:	56                   	push   esi
c00182a9:	8d 46 01             	lea    eax,[esi+0x1]
c00182ac:	a3 44 45 03 c0       	mov    ds:0xc0034544,eax
c00182b1:	e8 96 fe ff ff       	call   c001814c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00182b6:	89 f0                	mov    eax,esi
c00182b8:	59                   	pop    ecx
c00182b9:	c1 e0 0c             	shl    eax,0xc
c00182bc:	5b                   	pop    ebx
c00182bd:	83 c4 1c             	add    esp,0x1c
c00182c0:	5b                   	pop    ebx
c00182c1:	5e                   	pop    esi
c00182c2:	5f                   	pop    edi
c00182c3:	5d                   	pop    ebp
c00182c4:	c3                   	ret    

c00182c5 <Virt::freeSwapfilePage(unsigned long)>:
c00182c5:	53                   	push   ebx
c00182c6:	8b 15 ac ba 03 c0    	mov    edx,DWORD PTR ds:0xc003baac
c00182cc:	b8 01 00 00 00       	mov    eax,0x1
c00182d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00182d5:	d3 e0                	shl    eax,cl
c00182d7:	89 cb                	mov    ebx,ecx
c00182d9:	c1 eb 05             	shr    ebx,0x5
c00182dc:	f7 d0                	not    eax
c00182de:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c00182e1:	21 c1                	and    ecx,eax
c00182e3:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c00182e6:	5b                   	pop    ebx
c00182e7:	c3                   	ret    

c00182e8 <Virt::swapIDToSector(unsigned long)>:
c00182e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182ec:	8b 15 4c 45 03 c0    	mov    edx,DWORD PTR ds:0xc003454c
c00182f2:	8b 0d 54 45 03 c0    	mov    ecx,DWORD PTR ds:0xc0034554
c00182f8:	0f af c2             	imul   eax,edx
c00182fb:	01 c8                	add    eax,ecx
c00182fd:	c3                   	ret    

c00182fe <Virt::allocateSwapfilePage()>:
c00182fe:	55                   	push   ebp
c00182ff:	31 d2                	xor    edx,edx
c0018301:	57                   	push   edi
c0018302:	56                   	push   esi
c0018303:	53                   	push   ebx
c0018304:	83 ec 0c             	sub    esp,0xc
c0018307:	8b 1d 50 45 03 c0    	mov    ebx,DWORD PTR ds:0xc0034550
c001830d:	8b 0d 4c 45 03 c0    	mov    ecx,DWORD PTR ds:0xc003454c
c0018313:	89 d8                	mov    eax,ebx
c0018315:	f7 f1                	div    ecx
c0018317:	39 cb                	cmp    ebx,ecx
c0018319:	72 2f                	jb     c001834a <Virt::allocateSwapfilePage()+0x4c>
c001831b:	8b 35 ac ba 03 c0    	mov    esi,DWORD PTR ds:0xc003baac
c0018321:	8b 16                	mov    edx,DWORD PTR [esi]
c0018323:	f6 c2 01             	test   dl,0x1
c0018326:	74 3e                	je     c0018366 <Virt::allocateSwapfilePage()+0x68>
c0018328:	31 c9                	xor    ecx,ecx
c001832a:	bf 01 00 00 00       	mov    edi,0x1
c001832f:	eb 12                	jmp    c0018343 <Virt::allocateSwapfilePage()+0x45>
c0018331:	89 ca                	mov    edx,ecx
c0018333:	89 fd                	mov    ebp,edi
c0018335:	c1 ea 05             	shr    edx,0x5
c0018338:	8d 1c 96             	lea    ebx,[esi+edx*4]
c001833b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001833d:	d3 e5                	shl    ebp,cl
c001833f:	85 ea                	test   edx,ebp
c0018341:	74 2c                	je     c001836f <Virt::allocateSwapfilePage()+0x71>
c0018343:	83 c1 01             	add    ecx,0x1
c0018346:	39 c8                	cmp    eax,ecx
c0018348:	77 e7                	ja     c0018331 <Virt::allocateSwapfilePage()+0x33>
c001834a:	83 ec 0c             	sub    esp,0xc
c001834d:	68 c4 1e 03 c0       	push   0xc0031ec4
c0018352:	e8 ab 83 00 00       	call   c0020702 <KePanic(char const*)>
c0018357:	83 c4 10             	add    esp,0x10
c001835a:	31 c9                	xor    ecx,ecx
c001835c:	83 c4 0c             	add    esp,0xc
c001835f:	89 c8                	mov    eax,ecx
c0018361:	5b                   	pop    ebx
c0018362:	5e                   	pop    esi
c0018363:	5f                   	pop    edi
c0018364:	5d                   	pop    ebp
c0018365:	c3                   	ret    
c0018366:	89 f3                	mov    ebx,esi
c0018368:	bd 01 00 00 00       	mov    ebp,0x1
c001836d:	31 c9                	xor    ecx,ecx
c001836f:	09 ea                	or     edx,ebp
c0018371:	89 c8                	mov    eax,ecx
c0018373:	89 13                	mov    DWORD PTR [ebx],edx
c0018375:	83 c4 0c             	add    esp,0xc
c0018378:	5b                   	pop    ebx
c0018379:	5e                   	pop    esi
c001837a:	5f                   	pop    edi
c001837b:	5d                   	pop    ebp
c001837c:	c3                   	ret    

c001837d <Virt::virtualMemorySetup()>:
c001837d:	53                   	push   ebx
c001837e:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0018383:	6a 0f                	push   0xf
c0018385:	53                   	push   ebx
c0018386:	83 c3 01             	add    ebx,0x1
c0018389:	e8 be fd ff ff       	call   c001814c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001838e:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0018394:	58                   	pop    eax
c0018395:	5a                   	pop    edx
c0018396:	75 eb                	jne    c0018383 <Virt::virtualMemorySetup()+0x6>
c0018398:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001839d:	6a 00                	push   0x0
c001839f:	53                   	push   ebx
c00183a0:	83 c3 01             	add    ebx,0x1
c00183a3:	e8 a4 fd ff ff       	call   c001814c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00183a8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00183ae:	59                   	pop    ecx
c00183af:	58                   	pop    eax
c00183b0:	75 eb                	jne    c001839d <Virt::virtualMemorySetup()+0x20>
c00183b2:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00183b7:	6a 0f                	push   0xf
c00183b9:	53                   	push   ebx
c00183ba:	83 c3 01             	add    ebx,0x1
c00183bd:	e8 8a fd ff ff       	call   c001814c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00183c2:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00183c8:	58                   	pop    eax
c00183c9:	5a                   	pop    edx
c00183ca:	75 eb                	jne    c00183b7 <Virt::virtualMemorySetup()+0x3a>
c00183cc:	5b                   	pop    ebx
c00183cd:	c3                   	ret    

c00183ce <Virt::setupPageSwapping(int)>:
c00183ce:	53                   	push   ebx
c00183cf:	83 ec 0c             	sub    esp,0xc
c00183d2:	a1 88 03 04 c0       	mov    eax,ds:0xc0040388
c00183d7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00183db:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00183e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00183e3:	53                   	push   ebx
c00183e4:	68 db 1e 03 c0       	push   0xc0031edb
c00183e9:	50                   	push   eax
c00183ea:	ff 52 60             	call   DWORD PTR [edx+0x60]
c00183ed:	c1 e3 0b             	shl    ebx,0xb
c00183f0:	89 1d 50 45 03 c0    	mov    DWORD PTR ds:0xc0034550,ebx
c00183f6:	c1 eb 08             	shr    ebx,0x8
c00183f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00183fc:	c6 05 58 45 03 c0 43 	mov    BYTE PTR ds:0xc0034558,0x43
c0018403:	c7 05 4c 45 03 c0 08 00 00 00 	mov    DWORD PTR ds:0xc003454c,0x8
c001840d:	a3 54 45 03 c0       	mov    ds:0xc0034554,eax
c0018412:	e8 71 e2 ff ff       	call   c0016688 <malloc>
c0018417:	31 d2                	xor    edx,edx
c0018419:	83 c4 0c             	add    esp,0xc
c001841c:	a3 ac ba 03 c0       	mov    ds:0xc003baac,eax
c0018421:	89 c1                	mov    ecx,eax
c0018423:	a1 50 45 03 c0       	mov    eax,ds:0xc0034550
c0018428:	f7 35 4c 45 03 c0    	div    DWORD PTR ds:0xc003454c
c001842e:	c1 e8 05             	shr    eax,0x5
c0018431:	50                   	push   eax
c0018432:	6a 00                	push   0x0
c0018434:	51                   	push   ecx
c0018435:	e8 b6 80 fe ff       	call   c00004f0 <memset>
c001843a:	83 c4 18             	add    esp,0x18
c001843d:	5b                   	pop    ebx
c001843e:	c3                   	ret    
c001843f:	90                   	nop

c0018440 <VAS::setCPUSpecific(unsigned long)>:
c0018440:	c3                   	ret    
c0018441:	90                   	nop

c0018442 <VAS::VAS(VAS*)>:
c0018442:	83 ec 0c             	sub    esp,0xc
c0018445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018449:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018454:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001845b:	83 ec 0c             	sub    esp,0xc
c001845e:	68 50 1c 03 c0       	push   0xc0031c50
c0018463:	e8 9a 82 00 00       	call   c0020702 <KePanic(char const*)>
c0018468:	83 c4 10             	add    esp,0x10
c001846b:	90                   	nop
c001846c:	83 c4 0c             	add    esp,0xc
c001846f:	c3                   	ret    

c0018470 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0018470:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018474:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0018479:	89 c2                	mov    edx,eax
c001847b:	c1 ea 16             	shr    edx,0x16
c001847e:	c1 e8 0a             	shr    eax,0xa
c0018481:	83 f9 01             	cmp    ecx,0x1
c0018484:	19 c9                	sbb    ecx,ecx
c0018486:	25 fc 0f 00 00       	and    eax,0xffc
c001848b:	c1 e2 0c             	shl    edx,0xc
c001848e:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0018494:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c001849b:	01 d0                	add    eax,edx
c001849d:	c3                   	ret    

c001849e <VAS::getPageTableEntry(unsigned long)>:
c001849e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00184a2:	89 ca                	mov    edx,ecx
c00184a4:	c1 ea 16             	shr    edx,0x16
c00184a7:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00184ad:	c1 e9 0a             	shr    ecx,0xa
c00184b0:	c1 e0 0c             	shl    eax,0xc
c00184b3:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00184b9:	8d 04 08             	lea    eax,[eax+ecx*1]
c00184bc:	c3                   	ret    

c00184bd <Virt::freeKernelVirtualPages(unsigned long)>:
c00184bd:	55                   	push   ebp
c00184be:	57                   	push   edi
c00184bf:	bf 01 00 00 00       	mov    edi,0x1
c00184c4:	56                   	push   esi
c00184c5:	53                   	push   ebx
c00184c6:	83 ec 1c             	sub    esp,0x1c
c00184c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00184cd:	c1 ee 0c             	shr    esi,0xc
c00184d0:	eb 48                	jmp    c001851a <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c00184d2:	a1 b0 ba 03 c0       	mov    eax,ds:0xc003bab0
c00184d7:	83 ec 08             	sub    esp,0x8
c00184da:	55                   	push   ebp
c00184db:	50                   	push   eax
c00184dc:	e8 bd ff ff ff       	call   c001849e <VAS::getPageTableEntry(unsigned long)>
c00184e1:	83 c4 10             	add    esp,0x10
c00184e4:	8b 10                	mov    edx,DWORD PTR [eax]
c00184e6:	f6 c6 04             	test   dh,0x4
c00184e9:	75 70                	jne    c001855b <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00184eb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00184f1:	83 fb 04             	cmp    ebx,0x4
c00184f4:	0f 84 8a 00 00 00    	je     c0018584 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00184fa:	83 fb 02             	cmp    ebx,0x2
c00184fd:	0f 84 9a 00 00 00    	je     c001859d <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0018503:	83 fb 03             	cmp    ebx,0x3
c0018506:	0f 84 be 00 00 00    	je     c00185ca <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c001850c:	83 fb 01             	cmp    ebx,0x1
c001850f:	0f 84 a2 00 00 00    	je     c00185b7 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0018515:	83 c6 01             	add    esi,0x1
c0018518:	31 ff                	xor    edi,edi
c001851a:	56                   	push   esi
c001851b:	89 f5                	mov    ebp,esi
c001851d:	e8 64 fc ff ff       	call   c0018186 <Virt::getPageState(unsigned long)>
c0018522:	c1 e5 0c             	shl    ebp,0xc
c0018525:	5a                   	pop    edx
c0018526:	0f b6 d8             	movzx  ebx,al
c0018529:	85 db                	test   ebx,ebx
c001852b:	75 a5                	jne    c00184d2 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c001852d:	83 ec 0c             	sub    esp,0xc
c0018530:	68 f2 1e 03 c0       	push   0xc0031ef2
c0018535:	e8 c8 81 00 00       	call   c0020702 <KePanic(char const*)>
c001853a:	5a                   	pop    edx
c001853b:	59                   	pop    ecx
c001853c:	55                   	push   ebp
c001853d:	8b 2d b0 ba 03 c0    	mov    ebp,DWORD PTR ds:0xc003bab0
c0018543:	55                   	push   ebp
c0018544:	e8 55 ff ff ff       	call   c001849e <VAS::getPageTableEntry(unsigned long)>
c0018549:	83 c4 10             	add    esp,0x10
c001854c:	8b 10                	mov    edx,DWORD PTR [eax]
c001854e:	f6 c6 04             	test   dh,0x4
c0018551:	75 08                	jne    c001855b <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0018553:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0018559:	eb ba                	jmp    c0018515 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001855b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001855f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0018565:	83 ec 0c             	sub    esp,0xc
c0018568:	52                   	push   edx
c0018569:	e8 c0 e3 ff ff       	call   c001692e <Phys::freePage(unsigned long)>
c001856e:	83 c4 10             	add    esp,0x10
c0018571:	83 fb 04             	cmp    ebx,0x4
c0018574:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018578:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001857e:	0f 85 76 ff ff ff    	jne    c00184fa <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0018584:	83 e7 01             	and    edi,0x1
c0018587:	75 46                	jne    c00185cf <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0018589:	c7 44 24 30 74 1c 03 c0 	mov    DWORD PTR [esp+0x30],0xc0031c74
c0018591:	83 c4 1c             	add    esp,0x1c
c0018594:	5b                   	pop    ebx
c0018595:	5e                   	pop    esi
c0018596:	5f                   	pop    edi
c0018597:	5d                   	pop    ebp
c0018598:	e9 65 81 00 00       	jmp    c0020702 <KePanic(char const*)>
c001859d:	83 e7 01             	and    edi,0x1
c00185a0:	75 15                	jne    c00185b7 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00185a2:	83 ec 0c             	sub    esp,0xc
c00185a5:	68 0e 1f 03 c0       	push   0xc0031f0e
c00185aa:	e8 53 81 00 00       	call   c0020702 <KePanic(char const*)>
c00185af:	83 c4 10             	add    esp,0x10
c00185b2:	e9 5e ff ff ff       	jmp    c0018515 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00185b7:	83 ec 08             	sub    esp,0x8
c00185ba:	6a 00                	push   0x0
c00185bc:	56                   	push   esi
c00185bd:	e8 8a fb ff ff       	call   c001814c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00185c2:	83 c4 10             	add    esp,0x10
c00185c5:	e9 4b ff ff ff       	jmp    c0018515 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00185ca:	83 e7 01             	and    edi,0x1
c00185cd:	75 16                	jne    c00185e5 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c00185cf:	83 ec 08             	sub    esp,0x8
c00185d2:	6a 00                	push   0x0
c00185d4:	56                   	push   esi
c00185d5:	e8 72 fb ff ff       	call   c001814c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00185da:	83 c4 10             	add    esp,0x10
c00185dd:	83 c4 1c             	add    esp,0x1c
c00185e0:	5b                   	pop    ebx
c00185e1:	5e                   	pop    esi
c00185e2:	5f                   	pop    edi
c00185e3:	5d                   	pop    ebp
c00185e4:	c3                   	ret    
c00185e5:	c7 44 24 30 2a 1f 03 c0 	mov    DWORD PTR [esp+0x30],0xc0031f2a
c00185ed:	83 c4 1c             	add    esp,0x1c
c00185f0:	5b                   	pop    ebx
c00185f1:	5e                   	pop    esi
c00185f2:	5f                   	pop    edi
c00185f3:	5d                   	pop    ebp
c00185f4:	e9 09 81 00 00       	jmp    c0020702 <KePanic(char const*)>
c00185f9:	90                   	nop

c00185fa <VAS::freeAllocatedPages(unsigned long)>:
c00185fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00185fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018602:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0018606:	74 09                	je     c0018611 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0018608:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001860c:	e9 ac fe ff ff       	jmp    c00184bd <Virt::freeKernelVirtualPages(unsigned long)>
c0018611:	c7 44 24 04 98 1c 03 c0 	mov    DWORD PTR [esp+0x4],0xc0031c98
c0018619:	e9 a0 0e 00 00       	jmp    c00194be <Dbg::kprintf(char const*, ...)>

c001861e <VAS::virtualToPhysical(unsigned long)>:
c001861e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018622:	50                   	push   eax
c0018623:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018627:	52                   	push   edx
c0018628:	e8 71 fe ff ff       	call   c001849e <VAS::getPageTableEntry(unsigned long)>
c001862d:	59                   	pop    ecx
c001862e:	5a                   	pop    edx
c001862f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018631:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018636:	c3                   	ret    
c0018637:	90                   	nop

c0018638 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0018638:	55                   	push   ebp
c0018639:	57                   	push   edi
c001863a:	56                   	push   esi
c001863b:	53                   	push   ebx
c001863c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018640:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0018644:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018648:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001864c:	85 db                	test   ebx,ebx
c001864e:	7e 24                	jle    c0018674 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0018650:	c1 e3 0c             	shl    ebx,0xc
c0018653:	01 f3                	add    ebx,esi
c0018655:	56                   	push   esi
c0018656:	81 c6 00 10 00 00    	add    esi,0x1000
c001865c:	55                   	push   ebp
c001865d:	e8 3c fe ff ff       	call   c001849e <VAS::getPageTableEntry(unsigned long)>
c0018662:	5a                   	pop    edx
c0018663:	59                   	pop    ecx
c0018664:	8b 08                	mov    ecx,DWORD PTR [eax]
c0018666:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001866a:	21 f9                	and    ecx,edi
c001866c:	09 d1                	or     ecx,edx
c001866e:	39 f3                	cmp    ebx,esi
c0018670:	89 08                	mov    DWORD PTR [eax],ecx
c0018672:	75 e1                	jne    c0018655 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0018674:	5b                   	pop    ebx
c0018675:	5e                   	pop    esi
c0018676:	5f                   	pop    edi
c0018677:	5d                   	pop    ebp
c0018678:	c3                   	ret    
c0018679:	90                   	nop

c001867a <VAS::VAS()>:
c001867a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001867e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018685:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018689:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018694:	a3 b0 ba 03 c0       	mov    ds:0xc003bab0,eax
c0018699:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001869d:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00186a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00186a5:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00186a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00186ac:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00186b3:	ba 7d 60 03 c0       	mov    edx,0xc003607d
c00186b8:	b8 00 60 03 c0       	mov    eax,0xc0036000
c00186bd:	29 c2                	sub    edx,eax
c00186bf:	89 d0                	mov    eax,edx
c00186c1:	05 ff 0f 00 00       	add    eax,0xfff
c00186c6:	c1 e8 0c             	shr    eax,0xc
c00186c9:	89 c2                	mov    edx,eax
c00186cb:	b8 00 60 03 c0       	mov    eax,0xc0036000
c00186d0:	6a 04                	push   0x4
c00186d2:	6a ff                	push   0xffffffff
c00186d4:	52                   	push   edx
c00186d5:	50                   	push   eax
c00186d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00186da:	e8 59 ff ff ff       	call   c0018638 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00186df:	83 c4 14             	add    esp,0x14
c00186e2:	90                   	nop
c00186e3:	c3                   	ret    

c00186e4 <VAS::setToWriteCombining(unsigned long, int)>:
c00186e4:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c00186e9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00186ef:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c00186f6:	75 01                	jne    c00186f9 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00186f8:	c3                   	ret    
c00186f9:	68 80 00 00 00       	push   0x80
c00186fe:	6a ff                	push   0xffffffff
c0018700:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018704:	50                   	push   eax
c0018705:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018709:	52                   	push   edx
c001870a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001870e:	51                   	push   ecx
c001870f:	e8 24 ff ff ff       	call   c0018638 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0018714:	83 c4 14             	add    esp,0x14
c0018717:	c3                   	ret    

c0018718 <VAS::mapOtherVASIn(bool, VAS*)>:
c0018718:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001871c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001871f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018723:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0018726:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001872b:	83 f8 01             	cmp    eax,0x1
c001872e:	19 c0                	sbb    eax,eax
c0018730:	83 ca 03             	or     edx,0x3
c0018733:	83 e0 fc             	and    eax,0xfffffffc
c0018736:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c001873d:	0f 20 d8             	mov    eax,cr3
c0018740:	0f 22 d8             	mov    cr3,eax
c0018743:	c3                   	ret    

c0018744 <VAS::~VAS()>:
c0018744:	83 ec 2c             	sub    esp,0x2c
c0018747:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001874f:	fa                   	cli    
c0018750:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0018755:	83 c0 01             	add    eax,0x1
c0018758:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001875d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018762:	8b 00                	mov    eax,DWORD PTR [eax]
c0018764:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018767:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001876d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018771:	6a 01                	push   0x1
c0018773:	50                   	push   eax
c0018774:	e8 9f ff ff ff       	call   c0018718 <VAS::mapOtherVASIn(bool, VAS*)>
c0018779:	83 c4 0c             	add    esp,0xc
c001877c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018784:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001878c:	0f 8f d8 00 00 00    	jg     c001886a <VAS::~VAS()+0x126>
c0018792:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018796:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018799:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001879d:	c1 e2 02             	shl    edx,0x2
c00187a0:	01 d0                	add    eax,edx
c00187a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00187a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00187a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187ac:	83 e0 01             	and    eax,0x1
c00187af:	0f 84 ab 00 00 00    	je     c0018860 <VAS::~VAS()+0x11c>
c00187b5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00187bd:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00187c5:	7f 74                	jg     c001883b <VAS::~VAS()+0xf7>
c00187c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00187cb:	c1 e0 0a             	shl    eax,0xa
c00187ce:	89 c2                	mov    edx,eax
c00187d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187d4:	01 d0                	add    eax,edx
c00187d6:	c1 e0 0c             	shl    eax,0xc
c00187d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00187dd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00187e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00187e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00187e7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00187ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00187f1:	6a 01                	push   0x1
c00187f3:	50                   	push   eax
c00187f4:	e8 77 fc ff ff       	call   c0018470 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00187f9:	83 c4 0c             	add    esp,0xc
c00187fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018800:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018804:	8b 00                	mov    eax,DWORD PTR [eax]
c0018806:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001880a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001880e:	25 01 04 00 00       	and    eax,0x401
c0018813:	3d 01 04 00 00       	cmp    eax,0x401
c0018818:	75 1a                	jne    c0018834 <VAS::~VAS()+0xf0>
c001881a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001881e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018823:	83 ec 0c             	sub    esp,0xc
c0018826:	50                   	push   eax
c0018827:	e8 02 e1 ff ff       	call   c001692e <Phys::freePage(unsigned long)>
c001882c:	83 c4 10             	add    esp,0x10
c001882f:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018834:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0018839:	eb 82                	jmp    c00187bd <VAS::~VAS()+0x79>
c001883b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001883f:	25 00 04 00 00       	and    eax,0x400
c0018844:	74 1a                	je     c0018860 <VAS::~VAS()+0x11c>
c0018846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001884a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001884f:	83 ec 0c             	sub    esp,0xc
c0018852:	50                   	push   eax
c0018853:	e8 d6 e0 ff ff       	call   c001692e <Phys::freePage(unsigned long)>
c0018858:	83 c4 10             	add    esp,0x10
c001885b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018860:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0018865:	e9 1a ff ff ff       	jmp    c0018784 <VAS::~VAS()+0x40>
c001886a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001886e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018871:	83 ec 0c             	sub    esp,0xc
c0018874:	50                   	push   eax
c0018875:	e8 43 fc ff ff       	call   c00184bd <Virt::freeKernelVirtualPages(unsigned long)>
c001887a:	83 c4 10             	add    esp,0x10
c001887d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018881:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018884:	83 ec 0c             	sub    esp,0xc
c0018887:	50                   	push   eax
c0018888:	e8 a1 e0 ff ff       	call   c001692e <Phys::freePage(unsigned long)>
c001888d:	83 c4 10             	add    esp,0x10
c0018890:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018895:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001889a:	83 e8 01             	sub    eax,0x1
c001889d:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00188a2:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00188a7:	85 c0                	test   eax,eax
c00188a9:	75 01                	jne    c00188ac <VAS::~VAS()+0x168>
c00188ab:	fb                   	sti    
c00188ac:	90                   	nop
c00188ad:	83 c4 2c             	add    esp,0x2c
c00188b0:	c3                   	ret    
c00188b1:	90                   	nop

c00188b2 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00188b2:	55                   	push   ebp
c00188b3:	57                   	push   edi
c00188b4:	56                   	push   esi
c00188b5:	53                   	push   ebx
c00188b6:	83 ec 1c             	sub    esp,0x1c
c00188b9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00188bd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00188c1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00188c5:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00188cb:	77 08                	ja     c00188d5 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c00188cd:	0f 20 d8             	mov    eax,cr3
c00188d0:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c00188d3:	75 43                	jne    c0018918 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00188d5:	89 d8                	mov    eax,ebx
c00188d7:	09 f8                	or     eax,edi
c00188d9:	a9 ff 0f 00 00       	test   eax,0xfff
c00188de:	75 53                	jne    c0018933 <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c00188e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00188e3:	89 de                	mov    esi,ebx
c00188e5:	c1 ee 16             	shr    esi,0x16
c00188e8:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00188ef:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00188f3:	74 50                	je     c0018945 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c00188f5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00188f9:	c1 eb 0a             	shr    ebx,0xa
c00188fc:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0018902:	c1 e6 0c             	shl    esi,0xc
c0018905:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001890b:	09 c7                	or     edi,eax
c001890d:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0018910:	83 c4 1c             	add    esp,0x1c
c0018913:	5b                   	pop    ebx
c0018914:	5e                   	pop    esi
c0018915:	5f                   	pop    edi
c0018916:	5d                   	pop    ebp
c0018917:	c3                   	ret    
c0018918:	83 ec 0c             	sub    esp,0xc
c001891b:	68 bc 1c 03 c0       	push   0xc0031cbc
c0018920:	e8 99 0b 00 00       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0018925:	89 d8                	mov    eax,ebx
c0018927:	83 c4 10             	add    esp,0x10
c001892a:	09 f8                	or     eax,edi
c001892c:	a9 ff 0f 00 00       	test   eax,0xfff
c0018931:	74 ad                	je     c00188e0 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0018933:	83 ec 0c             	sub    esp,0xc
c0018936:	68 24 1d 03 c0       	push   0xc0031d24
c001893b:	e8 c2 7d 00 00       	call   c0020702 <KePanic(char const*)>
c0018940:	83 c4 10             	add    esp,0x10
c0018943:	eb 9b                	jmp    c00188e0 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0018945:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018949:	e8 49 e0 ff ff       	call   c0016997 <Phys::allocatePage()>
c001894e:	8b 0d b0 ba 03 c0    	mov    ecx,DWORD PTR ds:0xc003bab0
c0018954:	83 ec 0c             	sub    esp,0xc
c0018957:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001895b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001895f:	6a 01                	push   0x1
c0018961:	e8 43 f8 ff ff       	call   c00181a9 <Virt::allocateKernelVirtualPages(int)>
c0018966:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001896d:	6a 01                	push   0x1
c001896f:	50                   	push   eax
c0018970:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018974:	52                   	push   edx
c0018975:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0018979:	51                   	push   ecx
c001897a:	e8 3d 01 00 00       	call   c0018abc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001897f:	83 c4 1c             	add    esp,0x1c
c0018982:	68 00 10 00 00       	push   0x1000
c0018987:	6a 00                	push   0x0
c0018989:	50                   	push   eax
c001898a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001898e:	e8 5d 7b fe ff       	call   c00004f0 <memset>
c0018993:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0018997:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001899a:	e8 1e fb ff ff       	call   c00184bd <Virt::freeKernelVirtualPages(unsigned long)>
c001899f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00189a3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00189a7:	83 c4 10             	add    esp,0x10
c00189aa:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00189ad:	0d 07 04 00 00       	or     eax,0x407
c00189b2:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c00189b5:	e9 3b ff ff ff       	jmp    c00188f5 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c00189ba <VAS::allocatePages(int, int)>:
c00189ba:	55                   	push   ebp
c00189bb:	57                   	push   edi
c00189bc:	56                   	push   esi
c00189bd:	53                   	push   ebx
c00189be:	83 ec 1c             	sub    esp,0x1c
c00189c1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00189c5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00189c9:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c00189cd:	75 75                	jne    c0018a44 <VAS::allocatePages(int, int)+0x8a>
c00189cf:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00189d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00189d6:	85 c0                	test   eax,eax
c00189d8:	74 49                	je     c0018a23 <VAS::allocatePages(int, int)+0x69>
c00189da:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00189de:	89 d5                	mov    ebp,edx
c00189e0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00189e4:	c1 e5 0c             	shl    ebp,0xc
c00189e7:	01 dd                	add    ebp,ebx
c00189e9:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00189ec:	81 cf 00 04 00 00    	or     edi,0x400
c00189f2:	85 d2                	test   edx,edx
c00189f4:	7e 1b                	jle    c0018a11 <VAS::allocatePages(int, int)+0x57>
c00189f6:	e8 9c df ff ff       	call   c0016997 <Phys::allocatePage()>
c00189fb:	57                   	push   edi
c00189fc:	53                   	push   ebx
c00189fd:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018a03:	50                   	push   eax
c0018a04:	56                   	push   esi
c0018a05:	e8 a8 fe ff ff       	call   c00188b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018a0a:	83 c4 10             	add    esp,0x10
c0018a0d:	39 dd                	cmp    ebp,ebx
c0018a0f:	75 e5                	jne    c00189f6 <VAS::allocatePages(int, int)+0x3c>
c0018a11:	0f 20 d8             	mov    eax,cr3
c0018a14:	0f 22 d8             	mov    cr3,eax
c0018a17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018a1b:	83 c4 1c             	add    esp,0x1c
c0018a1e:	5b                   	pop    ebx
c0018a1f:	5e                   	pop    esi
c0018a20:	5f                   	pop    edi
c0018a21:	5d                   	pop    ebp
c0018a22:	c3                   	ret    
c0018a23:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018a27:	83 ec 0c             	sub    esp,0xc
c0018a2a:	68 48 1d 03 c0       	push   0xc0031d48
c0018a2f:	e8 ce 7c 00 00       	call   c0020702 <KePanic(char const*)>
c0018a34:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0018a37:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018a3b:	83 c4 10             	add    esp,0x10
c0018a3e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018a42:	eb 96                	jmp    c00189da <VAS::allocatePages(int, int)+0x20>
c0018a44:	83 ec 0c             	sub    esp,0xc
c0018a47:	52                   	push   edx
c0018a48:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0018a4c:	e8 58 f7 ff ff       	call   c00181a9 <Virt::allocateKernelVirtualPages(int)>
c0018a51:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018a55:	83 c4 10             	add    esp,0x10
c0018a58:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0018a5d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018a61:	77 38                	ja     c0018a9b <VAS::allocatePages(int, int)+0xe1>
c0018a63:	85 d2                	test   edx,edx
c0018a65:	7e aa                	jle    c0018a11 <VAS::allocatePages(int, int)+0x57>
c0018a67:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0018a6b:	c1 e2 0c             	shl    edx,0xc
c0018a6e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0018a72:	81 cf 00 04 00 00    	or     edi,0x400
c0018a78:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0018a7b:	e8 17 df ff ff       	call   c0016997 <Phys::allocatePage()>
c0018a80:	57                   	push   edi
c0018a81:	53                   	push   ebx
c0018a82:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018a88:	50                   	push   eax
c0018a89:	56                   	push   esi
c0018a8a:	e8 23 fe ff ff       	call   c00188b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018a8f:	83 c4 10             	add    esp,0x10
c0018a92:	39 dd                	cmp    ebp,ebx
c0018a94:	75 e5                	jne    c0018a7b <VAS::allocatePages(int, int)+0xc1>
c0018a96:	e9 76 ff ff ff       	jmp    c0018a11 <VAS::allocatePages(int, int)+0x57>
c0018a9b:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0018aa0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018aa6:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0018aad:	74 b4                	je     c0018a63 <VAS::allocatePages(int, int)+0xa9>
c0018aaf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018ab3:	80 cc 01             	or     ah,0x1
c0018ab6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0018aba:	eb a7                	jmp    c0018a63 <VAS::allocatePages(int, int)+0xa9>

c0018abc <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0018abc:	55                   	push   ebp
c0018abd:	57                   	push   edi
c0018abe:	56                   	push   esi
c0018abf:	53                   	push   ebx
c0018ac0:	83 ec 1c             	sub    esp,0x1c
c0018ac3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0018ac7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018acb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0018acf:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0018ad3:	85 db                	test   ebx,ebx
c0018ad5:	7e 2c                	jle    c0018b03 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0018ad7:	c1 e3 0c             	shl    ebx,0xc
c0018ada:	8d 04 33             	lea    eax,[ebx+esi*1]
c0018add:	89 f3                	mov    ebx,esi
c0018adf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018ae3:	55                   	push   ebp
c0018ae4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018ae8:	29 f2                	sub    edx,esi
c0018aea:	01 da                	add    edx,ebx
c0018aec:	52                   	push   edx
c0018aed:	53                   	push   ebx
c0018aee:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018af4:	57                   	push   edi
c0018af5:	e8 b8 fd ff ff       	call   c00188b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018afa:	83 c4 10             	add    esp,0x10
c0018afd:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0018b01:	75 e0                	jne    c0018ae3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0018b03:	0f 20 d8             	mov    eax,cr3
c0018b06:	0f 22 d8             	mov    cr3,eax
c0018b09:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018b0d:	83 c4 1c             	add    esp,0x1c
c0018b10:	5b                   	pop    ebx
c0018b11:	5e                   	pop    esi
c0018b12:	5f                   	pop    edi
c0018b13:	5d                   	pop    ebp
c0018b14:	c3                   	ret    
c0018b15:	90                   	nop

c0018b16 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0018b16:	55                   	push   ebp
c0018b17:	57                   	push   edi
c0018b18:	56                   	push   esi
c0018b19:	53                   	push   ebx
c0018b1a:	83 ec 1c             	sub    esp,0x1c
c0018b1d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018b21:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0018b25:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0018b29:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018b2d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018b31:	09 d8                	or     eax,ebx
c0018b33:	a9 ff 0f 00 00       	test   eax,0xfff
c0018b38:	75 4b                	jne    c0018b85 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0018b3a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018b3d:	89 de                	mov    esi,ebx
c0018b3f:	c1 ee 16             	shr    esi,0x16
c0018b42:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0018b49:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0018b4d:	74 48                	je     c0018b97 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0018b4f:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0018b54:	c1 eb 0a             	shr    ebx,0xa
c0018b57:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018b5b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0018b5f:	83 ff 01             	cmp    edi,0x1
c0018b62:	19 c0                	sbb    eax,eax
c0018b64:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0018b6a:	c1 e6 0c             	shl    esi,0xc
c0018b6d:	25 00 00 c0 ff       	and    eax,0xffc00000
c0018b72:	01 f3                	add    ebx,esi
c0018b74:	09 ca                	or     edx,ecx
c0018b76:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0018b7d:	83 c4 1c             	add    esp,0x1c
c0018b80:	5b                   	pop    ebx
c0018b81:	5e                   	pop    esi
c0018b82:	5f                   	pop    edi
c0018b83:	5d                   	pop    ebp
c0018b84:	c3                   	ret    
c0018b85:	83 ec 0c             	sub    esp,0xc
c0018b88:	68 74 1d 03 c0       	push   0xc0031d74
c0018b8d:	e8 70 7b 00 00       	call   c0020702 <KePanic(char const*)>
c0018b92:	83 c4 10             	add    esp,0x10
c0018b95:	eb a3                	jmp    c0018b3a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0018b97:	e8 fb dd ff ff       	call   c0016997 <Phys::allocatePage()>
c0018b9c:	8b 0d b0 ba 03 c0    	mov    ecx,DWORD PTR ds:0xc003bab0
c0018ba2:	83 ec 0c             	sub    esp,0xc
c0018ba5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0018ba9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018bad:	6a 01                	push   0x1
c0018baf:	e8 f5 f5 ff ff       	call   c00181a9 <Virt::allocateKernelVirtualPages(int)>
c0018bb4:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018bbb:	6a 01                	push   0x1
c0018bbd:	50                   	push   eax
c0018bbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018bc2:	50                   	push   eax
c0018bc3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0018bc7:	51                   	push   ecx
c0018bc8:	e8 ef fe ff ff       	call   c0018abc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018bcd:	83 c4 1c             	add    esp,0x1c
c0018bd0:	68 00 10 00 00       	push   0x1000
c0018bd5:	6a 00                	push   0x0
c0018bd7:	50                   	push   eax
c0018bd8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018bdc:	e8 0f 79 fe ff       	call   c00004f0 <memset>
c0018be1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018be5:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0018be8:	e8 d0 f8 ff ff       	call   c00184bd <Virt::freeKernelVirtualPages(unsigned long)>
c0018bed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018bf1:	83 c4 10             	add    esp,0x10
c0018bf4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018bf7:	81 ca 07 04 00 00    	or     edx,0x407
c0018bfd:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c0018c00:	e9 4a ff ff ff       	jmp    c0018b4f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c0018c05:	90                   	nop

c0018c06 <VAS::VAS(bool)>:
c0018c06:	53                   	push   ebx
c0018c07:	83 ec 28             	sub    esp,0x28
c0018c0a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018c0e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018c12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c16:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018c1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c21:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018c28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c2c:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018c30:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0018c33:	e8 5f dd ff ff       	call   c0016997 <Phys::allocatePage()>
c0018c38:	89 c2                	mov    edx,eax
c0018c3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c3e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018c41:	8b 1d b0 ba 03 c0    	mov    ebx,DWORD PTR ds:0xc003bab0
c0018c47:	83 ec 0c             	sub    esp,0xc
c0018c4a:	6a 01                	push   0x1
c0018c4c:	e8 58 f5 ff ff       	call   c00181a9 <Virt::allocateKernelVirtualPages(int)>
c0018c51:	83 c4 10             	add    esp,0x10
c0018c54:	89 c2                	mov    edx,eax
c0018c56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c5a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018c5d:	83 ec 0c             	sub    esp,0xc
c0018c60:	6a 03                	push   0x3
c0018c62:	6a 01                	push   0x1
c0018c64:	52                   	push   edx
c0018c65:	50                   	push   eax
c0018c66:	53                   	push   ebx
c0018c67:	e8 50 fe ff ff       	call   c0018abc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018c6c:	83 c4 20             	add    esp,0x20
c0018c6f:	89 c2                	mov    edx,eax
c0018c71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c75:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018c78:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018c80:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0018c88:	7f 1d                	jg     c0018ca7 <VAS::VAS(bool)+0xa1>
c0018c8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c8e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018c91:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018c95:	c1 e2 02             	shl    edx,0x2
c0018c98:	01 d0                	add    eax,edx
c0018c9a:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0018ca0:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018ca5:	eb d9                	jmp    c0018c80 <VAS::VAS(bool)+0x7a>
c0018ca7:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0018caf:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0018cb7:	7f 7e                	jg     c0018d37 <VAS::VAS(bool)+0x131>
c0018cb9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018cbd:	2d 00 02 00 00       	sub    eax,0x200
c0018cc2:	c1 e0 0c             	shl    eax,0xc
c0018cc5:	83 c8 05             	or     eax,0x5
c0018cc8:	89 c2                	mov    edx,eax
c0018cca:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0018ccf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018cd5:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018cdb:	83 e0 10             	and    eax,0x10
c0018cde:	0f b6 c0             	movzx  eax,al
c0018ce1:	85 c0                	test   eax,eax
c0018ce3:	74 07                	je     c0018cec <VAS::VAS(bool)+0xe6>
c0018ce5:	b8 00 01 00 00       	mov    eax,0x100
c0018cea:	eb 05                	jmp    c0018cf1 <VAS::VAS(bool)+0xeb>
c0018cec:	b8 00 00 00 00       	mov    eax,0x0
c0018cf1:	09 d0                	or     eax,edx
c0018cf3:	89 c1                	mov    ecx,eax
c0018cf5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018cf9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018cfc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018d00:	c1 e2 02             	shl    edx,0x2
c0018d03:	01 d0                	add    eax,edx
c0018d05:	89 ca                	mov    edx,ecx
c0018d07:	89 10                	mov    DWORD PTR [eax],edx
c0018d09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d0d:	2d 40 03 00 00       	sub    eax,0x340
c0018d12:	83 f8 7f             	cmp    eax,0x7f
c0018d15:	77 16                	ja     c0018d2d <VAS::VAS(bool)+0x127>
c0018d17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018d1b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018d1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018d22:	c1 e2 02             	shl    edx,0x2
c0018d25:	01 d0                	add    eax,edx
c0018d27:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0018d2d:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0018d32:	e9 78 ff ff ff       	jmp    c0018caf <VAS::VAS(bool)+0xa9>
c0018d37:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0018d3c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018d42:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018d48:	83 e0 10             	and    eax,0x10
c0018d4b:	0f b6 c0             	movzx  eax,al
c0018d4e:	85 c0                	test   eax,eax
c0018d50:	74 07                	je     c0018d59 <VAS::VAS(bool)+0x153>
c0018d52:	b8 03 41 00 00       	mov    eax,0x4103
c0018d57:	eb 05                	jmp    c0018d5e <VAS::VAS(bool)+0x158>
c0018d59:	b8 03 40 00 00       	mov    eax,0x4003
c0018d5e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018d62:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0018d65:	81 c2 20 0c 00 00    	add    edx,0xc20
c0018d6b:	89 02                	mov    DWORD PTR [edx],eax
c0018d6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018d71:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018d74:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0018d79:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018d7f:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018d85:	83 e0 10             	and    eax,0x10
c0018d88:	0f b6 c0             	movzx  eax,al
c0018d8b:	85 c0                	test   eax,eax
c0018d8d:	74 07                	je     c0018d96 <VAS::VAS(bool)+0x190>
c0018d8f:	b8 00 01 00 00       	mov    eax,0x100
c0018d94:	eb 05                	jmp    c0018d9b <VAS::VAS(bool)+0x195>
c0018d96:	b8 00 00 00 00       	mov    eax,0x0
c0018d9b:	09 c2                	or     edx,eax
c0018d9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018da1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018da4:	05 fc 0f 00 00       	add    eax,0xffc
c0018da9:	83 ca 03             	or     edx,0x3
c0018dac:	89 10                	mov    DWORD PTR [eax],edx
c0018dae:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0018db3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018db9:	83 ec 0c             	sub    esp,0xc
c0018dbc:	50                   	push   eax
c0018dbd:	e8 a6 2a 00 00       	call   c001b868 <Device::getName()>
c0018dc2:	83 c4 10             	add    esp,0x10
c0018dc5:	83 ec 08             	sub    esp,0x8
c0018dc8:	68 44 1f 03 c0       	push   0xc0031f44
c0018dcd:	50                   	push   eax
c0018dce:	e8 ad 79 fe ff       	call   c0000780 <strcmp>
c0018dd3:	83 c4 10             	add    esp,0x10
c0018dd6:	85 c0                	test   eax,eax
c0018dd8:	0f 94 c0             	sete   al
c0018ddb:	0f b6 c0             	movzx  eax,al
c0018dde:	85 c0                	test   eax,eax
c0018de0:	74 68                	je     c0018e4a <VAS::VAS(bool)+0x244>
c0018de2:	fa                   	cli    
c0018de3:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0018de8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018dee:	05 7c 09 00 00       	add    eax,0x97c
c0018df3:	83 ec 0c             	sub    esp,0xc
c0018df6:	50                   	push   eax
c0018df7:	e8 0a d3 ff ff       	call   c0016106 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018dfc:	83 c4 10             	add    esp,0x10
c0018dff:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018e04:	89 c3                	mov    ebx,eax
c0018e06:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0018e0b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018e11:	05 7c 09 00 00       	add    eax,0x97c
c0018e16:	83 ec 0c             	sub    esp,0xc
c0018e19:	50                   	push   eax
c0018e1a:	e8 e7 d2 ff ff       	call   c0016106 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018e1f:	83 c4 10             	add    esp,0x10
c0018e22:	83 ec 08             	sub    esp,0x8
c0018e25:	50                   	push   eax
c0018e26:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018e2a:	e8 6f f6 ff ff       	call   c001849e <VAS::getPageTableEntry(unsigned long)>
c0018e2f:	83 c4 10             	add    esp,0x10
c0018e32:	8b 00                	mov    eax,DWORD PTR [eax]
c0018e34:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018e39:	6a 11                	push   0x11
c0018e3b:	53                   	push   ebx
c0018e3c:	50                   	push   eax
c0018e3d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018e41:	e8 6c fa ff ff       	call   c00188b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018e46:	83 c4 10             	add    esp,0x10
c0018e49:	fb                   	sti    
c0018e4a:	90                   	nop
c0018e4b:	83 c4 28             	add    esp,0x28
c0018e4e:	5b                   	pop    ebx
c0018e4f:	c3                   	ret    

c0018e50 <VAS::evict(unsigned long)>:
c0018e50:	55                   	push   ebp
c0018e51:	57                   	push   edi
c0018e52:	56                   	push   esi
c0018e53:	53                   	push   ebx
c0018e54:	83 ec 1c             	sub    esp,0x1c
c0018e57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018e5b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018e5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018e63:	e8 96 f4 ff ff       	call   c00182fe <Virt::allocateSwapfilePage()>
c0018e68:	89 c7                	mov    edi,eax
c0018e6a:	a1 4c 45 03 c0       	mov    eax,ds:0xc003454c
c0018e6f:	85 c0                	test   eax,eax
c0018e71:	7e 40                	jle    c0018eb3 <VAS::evict(unsigned long)+0x63>
c0018e73:	89 ee                	mov    esi,ebp
c0018e75:	31 db                	xor    ebx,ebx
c0018e77:	83 ec 0c             	sub    esp,0xc
c0018e7a:	57                   	push   edi
c0018e7b:	e8 68 f4 ff ff       	call   c00182e8 <Virt::swapIDToSector(unsigned long)>
c0018e80:	31 d2                	xor    edx,edx
c0018e82:	89 34 24             	mov    DWORD PTR [esp],esi
c0018e85:	81 c6 00 02 00 00    	add    esi,0x200
c0018e8b:	6a 01                	push   0x1
c0018e8d:	52                   	push   edx
c0018e8e:	01 d8                	add    eax,ebx
c0018e90:	83 c3 01             	add    ebx,0x1
c0018e93:	50                   	push   eax
c0018e94:	0f be 05 58 45 03 c0 	movsx  eax,BYTE PTR ds:0xc0034558
c0018e9b:	8b 04 85 7c 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd84]
c0018ea2:	50                   	push   eax
c0018ea3:	e8 c6 3b 00 00       	call   c001ca6e <LogicalDisk::write(unsigned long long, int, void*)>
c0018ea8:	83 c4 20             	add    esp,0x20
c0018eab:	39 1d 4c 45 03 c0    	cmp    DWORD PTR ds:0xc003454c,ebx
c0018eb1:	7f c4                	jg     c0018e77 <VAS::evict(unsigned long)+0x27>
c0018eb3:	c1 e7 0c             	shl    edi,0xc
c0018eb6:	83 ec 08             	sub    esp,0x8
c0018eb9:	55                   	push   ebp
c0018eba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018ebe:	50                   	push   eax
c0018ebf:	e8 da f5 ff ff       	call   c001849e <VAS::getPageTableEntry(unsigned long)>
c0018ec4:	8b 10                	mov    edx,DWORD PTR [eax]
c0018ec6:	89 d3                	mov    ebx,edx
c0018ec8:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0018ece:	09 d7                	or     edi,edx
c0018ed0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018ed6:	89 38                	mov    DWORD PTR [eax],edi
c0018ed8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018edb:	8b 15 a8 ba 03 c0    	mov    edx,DWORD PTR ds:0xc003baa8
c0018ee1:	83 c2 01             	add    edx,0x1
c0018ee4:	89 15 a8 ba 03 c0    	mov    DWORD PTR ds:0xc003baa8,edx
c0018eea:	e8 3f da ff ff       	call   c001692e <Phys::freePage(unsigned long)>
c0018eef:	0f 20 d8             	mov    eax,cr3
c0018ef2:	0f 22 d8             	mov    cr3,eax
c0018ef5:	8b 0d a8 ba 03 c0    	mov    ecx,DWORD PTR ds:0xc003baa8
c0018efb:	51                   	push   ecx
c0018efc:	55                   	push   ebp
c0018efd:	53                   	push   ebx
c0018efe:	68 98 1d 03 c0       	push   0xc0031d98
c0018f03:	e8 b6 05 00 00       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0018f08:	a1 a4 ba 03 c0       	mov    eax,ds:0xc003baa4
c0018f0d:	c7 44 24 50 52 1f 03 c0 	mov    DWORD PTR [esp+0x50],0xc0031f52
c0018f15:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0018f19:	8d 50 01             	lea    edx,[eax+0x1]
c0018f1c:	89 15 a4 ba 03 c0    	mov    DWORD PTR ds:0xc003baa4,edx
c0018f22:	83 c4 3c             	add    esp,0x3c
c0018f25:	5b                   	pop    ebx
c0018f26:	5e                   	pop    esi
c0018f27:	5f                   	pop    edi
c0018f28:	5d                   	pop    ebp
c0018f29:	e9 90 05 00 00       	jmp    c00194be <Dbg::kprintf(char const*, ...)>

c0018f2e <VAS::tryLoadBackOffDisk(unsigned long)>:
c0018f2e:	55                   	push   ebp
c0018f2f:	57                   	push   edi
c0018f30:	56                   	push   esi
c0018f31:	53                   	push   ebx
c0018f32:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0018f38:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c0018f3f:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0018f45:	77 78                	ja     c0018fbf <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c0018f47:	83 ec 08             	sub    esp,0x8
c0018f4a:	53                   	push   ebx
c0018f4b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018f51:	68 75 1f 03 c0       	push   0xc0031f75
c0018f56:	e8 63 05 00 00       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0018f5b:	58                   	pop    eax
c0018f5c:	5a                   	pop    edx
c0018f5d:	53                   	push   ebx
c0018f5e:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c0018f65:	51                   	push   ecx
c0018f66:	e8 33 f5 ff ff       	call   c001849e <VAS::getPageTableEntry(unsigned long)>
c0018f6b:	83 c4 10             	add    esp,0x10
c0018f6e:	85 c0                	test   eax,eax
c0018f70:	89 c5                	mov    ebp,eax
c0018f72:	0f 95 c0             	setne  al
c0018f75:	85 db                	test   ebx,ebx
c0018f77:	0f 95 c2             	setne  dl
c0018f7a:	21 d0                	and    eax,edx
c0018f7c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018f80:	a8 01                	test   al,0x1
c0018f82:	75 0f                	jne    c0018f93 <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c0018f84:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0018f88:	81 c4 1c 10 00 00    	add    esp,0x101c
c0018f8e:	5b                   	pop    ebx
c0018f8f:	5e                   	pop    esi
c0018f90:	5f                   	pop    edi
c0018f91:	5d                   	pop    ebp
c0018f92:	c3                   	ret    
c0018f93:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018f96:	f6 c4 02             	test   ah,0x2
c0018f99:	75 39                	jne    c0018fd4 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0018f9b:	89 c2                	mov    edx,eax
c0018f9d:	81 e2 01 04 00 00    	and    edx,0x401
c0018fa3:	81 fa 00 04 00 00    	cmp    edx,0x400
c0018fa9:	74 73                	je     c001901e <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c0018fab:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018fb0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0018fb4:	81 c4 1c 10 00 00    	add    esp,0x101c
c0018fba:	5b                   	pop    ebx
c0018fbb:	5e                   	pop    esi
c0018fbc:	5f                   	pop    edi
c0018fbd:	5d                   	pop    ebp
c0018fbe:	c3                   	ret    
c0018fbf:	83 ec 0c             	sub    esp,0xc
c0018fc2:	68 63 1f 03 c0       	push   0xc0031f63
c0018fc7:	e8 36 77 00 00       	call   c0020702 <KePanic(char const*)>
c0018fcc:	83 c4 10             	add    esp,0x10
c0018fcf:	e9 73 ff ff ff       	jmp    c0018f47 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c0018fd4:	83 ec 0c             	sub    esp,0xc
c0018fd7:	89 de                	mov    esi,ebx
c0018fd9:	68 c8 1d 03 c0       	push   0xc0031dc8
c0018fde:	e8 db 04 00 00       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0018fe3:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0018fe7:	e8 ab d9 ff ff       	call   c0016997 <Phys::allocatePage()>
c0018fec:	ba 00 10 00 00       	mov    edx,0x1000
c0018ff1:	89 d1                	mov    ecx,edx
c0018ff3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018ff5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0018ff8:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0018ffe:	09 c8                	or     eax,ecx
c0019000:	83 c8 02             	or     eax,0x2
c0019003:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019006:	0f 20 d8             	mov    eax,cr3
c0019009:	0f 22 d8             	mov    cr3,eax
c001900c:	8d 74 24 20          	lea    esi,[esp+0x20]
c0019010:	89 df                	mov    edi,ebx
c0019012:	89 d1                	mov    ecx,edx
c0019014:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019016:	83 c4 10             	add    esp,0x10
c0019019:	e9 66 ff ff ff       	jmp    c0018f84 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c001901e:	c1 e8 0c             	shr    eax,0xc
c0019021:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019025:	e8 6d d9 ff ff       	call   c0016997 <Phys::allocatePage()>
c001902a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001902d:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0019033:	09 c2                	or     edx,eax
c0019035:	81 ca 01 08 00 00    	or     edx,0x801
c001903b:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c001903e:	a1 4c 45 03 c0       	mov    eax,ds:0xc003454c
c0019043:	85 c0                	test   eax,eax
c0019045:	7e 44                	jle    c001908b <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c0019047:	89 df                	mov    edi,ebx
c0019049:	31 f6                	xor    esi,esi
c001904b:	83 ec 0c             	sub    esp,0xc
c001904e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019052:	51                   	push   ecx
c0019053:	e8 90 f2 ff ff       	call   c00182e8 <Virt::swapIDToSector(unsigned long)>
c0019058:	31 d2                	xor    edx,edx
c001905a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001905d:	81 c7 00 02 00 00    	add    edi,0x200
c0019063:	6a 01                	push   0x1
c0019065:	52                   	push   edx
c0019066:	01 f0                	add    eax,esi
c0019068:	83 c6 01             	add    esi,0x1
c001906b:	50                   	push   eax
c001906c:	0f be 05 58 45 03 c0 	movsx  eax,BYTE PTR ds:0xc0034558
c0019073:	8b 2c 85 7c 02 04 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffbfd84]
c001907a:	55                   	push   ebp
c001907b:	e8 82 39 00 00       	call   c001ca02 <LogicalDisk::read(unsigned long long, int, void*)>
c0019080:	83 c4 20             	add    esp,0x20
c0019083:	39 35 4c 45 03 c0    	cmp    DWORD PTR ds:0xc003454c,esi
c0019089:	7f c0                	jg     c001904b <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c001908b:	a1 a8 ba 03 c0       	mov    eax,ds:0xc003baa8
c0019090:	83 ec 04             	sub    esp,0x4
c0019093:	83 e8 01             	sub    eax,0x1
c0019096:	50                   	push   eax
c0019097:	53                   	push   ebx
c0019098:	68 88 1f 03 c0       	push   0xc0031f88
c001909d:	a3 a8 ba 03 c0       	mov    ds:0xc003baa8,eax
c00190a2:	e8 17 04 00 00       	call   c00194be <Dbg::kprintf(char const*, ...)>
c00190a7:	58                   	pop    eax
c00190a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00190ac:	52                   	push   edx
c00190ad:	e8 13 f2 ff ff       	call   c00182c5 <Virt::freeSwapfilePage(unsigned long)>
c00190b2:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00190b7:	83 c4 10             	add    esp,0x10
c00190ba:	83 e8 01             	sub    eax,0x1
c00190bd:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00190c2:	85 c0                	test   eax,eax
c00190c4:	75 01                	jne    c00190c7 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c00190c6:	fb                   	sti    
c00190c7:	0f 20 d8             	mov    eax,cr3
c00190ca:	0f 22 d8             	mov    cr3,eax
c00190cd:	e9 b2 fe ff ff       	jmp    c0018f84 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c00190d2 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c00190d2:	55                   	push   ebp
c00190d3:	57                   	push   edi
c00190d4:	56                   	push   esi
c00190d5:	53                   	push   ebx
c00190d6:	83 ec 28             	sub    esp,0x28
c00190d9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00190dd:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00190e1:	50                   	push   eax
c00190e2:	e8 c2 f0 ff ff       	call   c00181a9 <Virt::allocateKernelVirtualPages(int)>
c00190e7:	83 c4 0c             	add    esp,0xc
c00190ea:	6a 07                	push   0x7
c00190ec:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00190f0:	52                   	push   edx
c00190f1:	89 c5                	mov    ebp,eax
c00190f3:	53                   	push   ebx
c00190f4:	e8 c1 f8 ff ff       	call   c00189ba <VAS::allocatePages(int, int)>
c00190f9:	83 c4 10             	add    esp,0x10
c00190fc:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0019100:	89 c7                	mov    edi,eax
c0019102:	85 c9                	test   ecx,ecx
c0019104:	74 2f                	je     c0019135 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0019106:	31 f6                	xor    esi,esi
c0019108:	e8 8a d8 ff ff       	call   c0016997 <Phys::allocatePage()>
c001910d:	83 c6 01             	add    esi,0x1
c0019110:	6a 03                	push   0x3
c0019112:	55                   	push   ebp
c0019113:	50                   	push   eax
c0019114:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019118:	53                   	push   ebx
c0019119:	e8 94 f7 ff ff       	call   c00188b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c001911e:	6a 07                	push   0x7
c0019120:	57                   	push   edi
c0019121:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019125:	50                   	push   eax
c0019126:	53                   	push   ebx
c0019127:	e8 86 f7 ff ff       	call   c00188b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c001912c:	83 c4 20             	add    esp,0x20
c001912f:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c0019133:	75 d3                	jne    c0019108 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0019135:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019139:	89 28                	mov    DWORD PTR [eax],ebp
c001913b:	83 c4 1c             	add    esp,0x1c
c001913e:	89 f8                	mov    eax,edi
c0019140:	5b                   	pop    ebx
c0019141:	5e                   	pop    esi
c0019142:	5f                   	pop    edi
c0019143:	5d                   	pop    ebp
c0019144:	c3                   	ret    
c0019145:	90                   	nop

c0019146 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0019146:	53                   	push   ebx
c0019147:	83 ec 14             	sub    esp,0x14
c001914a:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001914e:	68 e8 1d 03 c0       	push   0xc0031de8
c0019153:	e8 66 03 00 00       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0019158:	c7 04 24 48 1e 03 c0 	mov    DWORD PTR [esp],0xc0031e48
c001915f:	e8 5a 03 00 00       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0019164:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0019168:	83 c4 18             	add    esp,0x18
c001916b:	5b                   	pop    ebx
c001916c:	e9 4c f3 ff ff       	jmp    c00184bd <Virt::freeKernelVirtualPages(unsigned long)>
c0019171:	90                   	nop

c0019172 <VAS::scanForEviction()>:
c0019172:	57                   	push   edi
c0019173:	56                   	push   esi
c0019174:	31 f6                	xor    esi,esi
c0019176:	53                   	push   ebx
c0019177:	83 ec 10             	sub    esp,0x10
c001917a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001917e:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0019181:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0019187:	75 0e                	jne    c0019197 <VAS::scanForEviction()+0x25>
c0019189:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001918c:	89 da                	mov    edx,ebx
c001918e:	c1 ea 16             	shr    edx,0x16
c0019191:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0019195:	74 57                	je     c00191ee <VAS::scanForEviction()+0x7c>
c0019197:	53                   	push   ebx
c0019198:	57                   	push   edi
c0019199:	e8 00 f3 ff ff       	call   c001849e <VAS::getPageTableEntry(unsigned long)>
c001919e:	5a                   	pop    edx
c001919f:	59                   	pop    ecx
c00191a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00191a2:	89 d1                	mov    ecx,edx
c00191a4:	c1 e9 0c             	shr    ecx,0xc
c00191a7:	74 10                	je     c00191b9 <VAS::scanForEviction()+0x47>
c00191a9:	89 d1                	mov    ecx,edx
c00191ab:	81 e1 01 08 00 00    	and    ecx,0x801
c00191b1:	81 f9 01 08 00 00    	cmp    ecx,0x801
c00191b7:	74 40                	je     c00191f9 <VAS::scanForEviction()+0x87>
c00191b9:	81 c3 00 10 00 00    	add    ebx,0x1000
c00191bf:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c00191c5:	76 2d                	jbe    c00191f4 <VAS::scanForEviction()+0x82>
c00191c7:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c00191ce:	83 c6 01             	add    esi,0x1
c00191d1:	83 fe 03             	cmp    esi,0x3
c00191d4:	74 32                	je     c0019208 <VAS::scanForEviction()+0x96>
c00191d6:	31 db                	xor    ebx,ebx
c00191d8:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00191de:	75 b7                	jne    c0019197 <VAS::scanForEviction()+0x25>
c00191e0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00191e3:	89 da                	mov    edx,ebx
c00191e5:	c1 ea 16             	shr    edx,0x16
c00191e8:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00191ec:	75 a9                	jne    c0019197 <VAS::scanForEviction()+0x25>
c00191ee:	81 c3 00 00 40 00    	add    ebx,0x400000
c00191f4:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c00191f7:	eb 88                	jmp    c0019181 <VAS::scanForEviction()+0xf>
c00191f9:	f6 c2 20             	test   dl,0x20
c00191fc:	74 13                	je     c0019211 <VAS::scanForEviction()+0x9f>
c00191fe:	83 e2 df             	and    edx,0xffffffdf
c0019201:	89 10                	mov    DWORD PTR [eax],edx
c0019203:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0019206:	eb b1                	jmp    c00191b9 <VAS::scanForEviction()+0x47>
c0019208:	83 c4 10             	add    esp,0x10
c001920b:	31 c0                	xor    eax,eax
c001920d:	5b                   	pop    ebx
c001920e:	5e                   	pop    esi
c001920f:	5f                   	pop    edi
c0019210:	c3                   	ret    
c0019211:	89 d0                	mov    eax,edx
c0019213:	83 ec 08             	sub    esp,0x8
c0019216:	25 00 f0 ff ff       	and    eax,0xfffff000
c001921b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001921f:	53                   	push   ebx
c0019220:	68 9d 1f 03 c0       	push   0xc0031f9d
c0019225:	e8 94 02 00 00       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001922a:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c001922d:	58                   	pop    eax
c001922e:	5a                   	pop    edx
c001922f:	51                   	push   ecx
c0019230:	57                   	push   edi
c0019231:	e8 1a fc ff ff       	call   c0018e50 <VAS::evict(unsigned long)>
c0019236:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0019239:	5b                   	pop    ebx
c001923a:	5e                   	pop    esi
c001923b:	50                   	push   eax
c001923c:	68 b1 1f 03 c0       	push   0xc0031fb1
c0019241:	e8 78 02 00 00       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0019246:	58                   	pop    eax
c0019247:	5a                   	pop    edx
c0019248:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001924c:	50                   	push   eax
c001924d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019251:	68 c4 1f 03 c0       	push   0xc0031fc4
c0019256:	e8 63 02 00 00       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001925b:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c001925e:	83 c4 10             	add    esp,0x10
c0019261:	81 c1 00 10 00 00    	add    ecx,0x1000
c0019267:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c001926a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001926e:	83 c4 10             	add    esp,0x10
c0019271:	5b                   	pop    ebx
c0019272:	5e                   	pop    esi
c0019273:	5f                   	pop    edi
c0019274:	c3                   	ret    

c0019275 <mapVASFirstTime>:
c0019275:	55                   	push   ebp
c0019276:	57                   	push   edi
c0019277:	56                   	push   esi
c0019278:	53                   	push   ebx
c0019279:	83 ec 0c             	sub    esp,0xc
c001927c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019281:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0019284:	83 fa 01             	cmp    edx,0x1
c0019287:	0f 84 cb 00 00 00    	je     c0019358 <mapVASFirstTime+0xe3>
c001928d:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0019290:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0019295:	bf 00 90 e7 01       	mov    edi,0x1e79000
c001929a:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c001929d:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c00192a3:	c1 e5 15             	shl    ebp,0x15
c00192a6:	29 eb                	sub    ebx,ebp
c00192a8:	29 ef                	sub    edi,ebp
c00192aa:	e8 e8 d6 ff ff       	call   c0016997 <Phys::allocatePage()>
c00192af:	83 ec 0c             	sub    esp,0xc
c00192b2:	68 03 04 00 00       	push   0x403
c00192b7:	6a 01                	push   0x1
c00192b9:	53                   	push   ebx
c00192ba:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00192c0:	50                   	push   eax
c00192c1:	56                   	push   esi
c00192c2:	e8 f5 f7 ff ff       	call   c0018abc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00192c7:	83 c4 20             	add    esp,0x20
c00192ca:	39 fb                	cmp    ebx,edi
c00192cc:	75 dc                	jne    c00192aa <mapVASFirstTime+0x35>
c00192ce:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c00192d3:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c00192d8:	29 eb                	sub    ebx,ebp
c00192da:	29 ef                	sub    edi,ebp
c00192dc:	e8 b6 d6 ff ff       	call   c0016997 <Phys::allocatePage()>
c00192e1:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c00192e5:	83 fa 01             	cmp    edx,0x1
c00192e8:	19 d2                	sbb    edx,edx
c00192ea:	83 ec 0c             	sub    esp,0xc
c00192ed:	83 e2 04             	and    edx,0x4
c00192f0:	81 c2 03 04 00 00    	add    edx,0x403
c00192f6:	52                   	push   edx
c00192f7:	6a 01                	push   0x1
c00192f9:	53                   	push   ebx
c00192fa:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0019300:	50                   	push   eax
c0019301:	56                   	push   esi
c0019302:	e8 b5 f7 ff ff       	call   c0018abc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019307:	83 c4 20             	add    esp,0x20
c001930a:	39 df                	cmp    edi,ebx
c001930c:	75 ce                	jne    c00192dc <mapVASFirstTime+0x67>
c001930e:	83 ec 0c             	sub    esp,0xc
c0019311:	bb 7c 70 03 c0       	mov    ebx,0xc003707c
c0019316:	6a 04                	push   0x4
c0019318:	81 eb 00 60 03 c0    	sub    ebx,0xc0036000
c001931e:	6a ff                	push   0xffffffff
c0019320:	c1 eb 0c             	shr    ebx,0xc
c0019323:	53                   	push   ebx
c0019324:	68 00 60 03 c0       	push   0xc0036000
c0019329:	56                   	push   esi
c001932a:	e8 09 f3 ff ff       	call   c0018638 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001932f:	83 c4 14             	add    esp,0x14
c0019332:	a1 b0 ba 03 c0       	mov    eax,ds:0xc003bab0
c0019337:	6a 04                	push   0x4
c0019339:	6a ff                	push   0xffffffff
c001933b:	53                   	push   ebx
c001933c:	68 00 60 03 c0       	push   0xc0036000
c0019341:	50                   	push   eax
c0019342:	e8 f1 f2 ff ff       	call   c0018638 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0019347:	0f 20 d8             	mov    eax,cr3
c001934a:	0f 22 d8             	mov    cr3,eax
c001934d:	83 c4 20             	add    esp,0x20
c0019350:	83 c4 0c             	add    esp,0xc
c0019353:	5b                   	pop    ebx
c0019354:	5e                   	pop    esi
c0019355:	5f                   	pop    edi
c0019356:	5d                   	pop    ebp
c0019357:	c3                   	ret    
c0019358:	83 ec 0c             	sub    esp,0xc
c001935b:	68 d1 1f 03 c0       	push   0xc0031fd1
c0019360:	e8 59 01 00 00       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0019365:	83 c4 10             	add    esp,0x10
c0019368:	83 c4 0c             	add    esp,0xc
c001936b:	5b                   	pop    ebx
c001936c:	5e                   	pop    esi
c001936d:	5f                   	pop    edi
c001936e:	5d                   	pop    ebp
c001936f:	c3                   	ret    

c0019370 <__cxa_atexit>:
c0019370:	31 c0                	xor    eax,eax
c0019372:	c3                   	ret    

c0019373 <__cxa_finalize>:
c0019373:	c3                   	ret    

c0019374 <__stack_chk_fail>:
c0019374:	55                   	push   ebp
c0019375:	89 e5                	mov    ebp,esp
c0019377:	83 ec 10             	sub    esp,0x10
c001937a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001937d:	68 ea 1f 03 c0       	push   0xc0031fea
c0019382:	e8 37 01 00 00       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0019387:	58                   	pop    eax
c0019388:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001938b:	5a                   	pop    edx
c001938c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001938f:	68 ea 1f 03 c0       	push   0xc0031fea
c0019394:	e8 25 01 00 00       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0019399:	c7 04 24 f2 1f 03 c0 	mov    DWORD PTR [esp],0xc0031ff2
c00193a0:	e8 5d 73 00 00       	call   c0020702 <KePanic(char const*)>
c00193a5:	83 c4 10             	add    esp,0x10
c00193a8:	c9                   	leave  
c00193a9:	c3                   	ret    

c00193aa <__cxa_pure_virtual>:
c00193aa:	83 ec 18             	sub    esp,0x18
c00193ad:	68 0a 20 03 c0       	push   0xc003200a
c00193b2:	e8 4b 73 00 00       	call   c0020702 <KePanic(char const*)>
c00193b7:	83 c4 1c             	add    esp,0x1c
c00193ba:	c3                   	ret    

c00193bb <operator new[](unsigned long)>:
c00193bb:	e9 c8 d2 ff ff       	jmp    c0016688 <malloc>

c00193c0 <operator delete(void*, unsigned long)>:
c00193c0:	e9 e3 d2 ff ff       	jmp    c00166a8 <rfree>

c00193c5 <operator delete[](void*)>:
c00193c5:	e9 de d2 ff ff       	jmp    c00166a8 <rfree>

c00193ca <operator delete[](void*, unsigned long)>:
c00193ca:	e9 d9 d2 ff ff       	jmp    c00166a8 <rfree>

c00193cf <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00193cf:	55                   	push   ebp
c00193d0:	57                   	push   edi
c00193d1:	56                   	push   esi
c00193d2:	53                   	push   ebx
c00193d3:	83 ec 20             	sub    esp,0x20
c00193d6:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00193da:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c00193e2:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00193e6:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c00193ee:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00193f2:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c00193fa:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c0019402:	89 f7                	mov    edi,esi
c0019404:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019409:	89 eb                	mov    ebx,ebp
c001940b:	eb 02                	jmp    c001940f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c001940d:	89 c7                	mov    edi,eax
c001940f:	31 d2                	xor    edx,edx
c0019411:	89 f8                	mov    eax,edi
c0019413:	f7 f1                	div    ecx
c0019415:	83 c3 01             	add    ebx,0x1
c0019418:	39 cf                	cmp    edi,ecx
c001941a:	73 f1                	jae    c001940d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c001941c:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001941f:	eb 02                	jmp    c0019423 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c0019421:	89 c6                	mov    esi,eax
c0019423:	31 d2                	xor    edx,edx
c0019425:	89 f0                	mov    eax,esi
c0019427:	f7 f1                	div    ecx
c0019429:	83 eb 01             	sub    ebx,0x1
c001942c:	39 ce                	cmp    esi,ecx
c001942e:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0019432:	88 13                	mov    BYTE PTR [ebx],dl
c0019434:	73 eb                	jae    c0019421 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c0019436:	83 c4 20             	add    esp,0x20
c0019439:	89 e8                	mov    eax,ebp
c001943b:	5b                   	pop    ebx
c001943c:	5e                   	pop    esi
c001943d:	5f                   	pop    edi
c001943e:	5d                   	pop    ebp
c001943f:	c3                   	ret    

c0019440 <Dbg::logc(char)>:
c0019440:	f6 05 d4 b9 03 c0 10 	test   BYTE PTR ds:0xc003b9d4,0x10
c0019447:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001944b:	75 12                	jne    c001945f <Dbg::logc(char)+0x1f>
c001944d:	ba fd 03 00 00       	mov    edx,0x3fd
c0019452:	ec                   	in     al,dx
c0019453:	a8 20                	test   al,0x20
c0019455:	74 fb                	je     c0019452 <Dbg::logc(char)+0x12>
c0019457:	ba f8 03 00 00       	mov    edx,0x3f8
c001945c:	88 c8                	mov    al,cl
c001945e:	ee                   	out    dx,al
c001945f:	c3                   	ret    

c0019460 <Dbg::logs(char*)>:
c0019460:	53                   	push   ebx
c0019461:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0019465:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019468:	85 c0                	test   eax,eax
c001946a:	74 11                	je     c001947d <Dbg::logs(char*)+0x1d>
c001946c:	50                   	push   eax
c001946d:	83 c3 01             	add    ebx,0x1
c0019470:	e8 cb ff ff ff       	call   c0019440 <Dbg::logc(char)>
c0019475:	58                   	pop    eax
c0019476:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019479:	85 c0                	test   eax,eax
c001947b:	75 ef                	jne    c001946c <Dbg::logs(char*)+0xc>
c001947d:	5b                   	pop    ebx
c001947e:	c3                   	ret    

c001947f <Dbg::logWriteInt(unsigned int)>:
c001947f:	83 ec 10             	sub    esp,0x10
c0019482:	6a 0a                	push   0xa
c0019484:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019488:	50                   	push   eax
c0019489:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001948d:	50                   	push   eax
c001948e:	e8 3c ff ff ff       	call   c00193cf <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0019493:	50                   	push   eax
c0019494:	e8 c7 ff ff ff       	call   c0019460 <Dbg::logs(char*)>
c0019499:	83 c4 20             	add    esp,0x20
c001949c:	c3                   	ret    

c001949d <Dbg::logWriteIntBase(unsigned int, int)>:
c001949d:	83 ec 10             	sub    esp,0x10
c00194a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00194a4:	50                   	push   eax
c00194a5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00194a9:	50                   	push   eax
c00194aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00194ae:	52                   	push   edx
c00194af:	e8 1b ff ff ff       	call   c00193cf <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00194b4:	50                   	push   eax
c00194b5:	e8 a6 ff ff ff       	call   c0019460 <Dbg::logs(char*)>
c00194ba:	83 c4 20             	add    esp,0x20
c00194bd:	c3                   	ret    

c00194be <Dbg::kprintf(char const*, ...)>:
c00194be:	55                   	push   ebp
c00194bf:	57                   	push   edi
c00194c0:	56                   	push   esi
c00194c1:	53                   	push   ebx
c00194c2:	83 ec 0c             	sub    esp,0xc
c00194c5:	f6 05 d4 b9 03 c0 10 	test   BYTE PTR ds:0xc003b9d4,0x10
c00194cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00194d0:	74 08                	je     c00194da <Dbg::kprintf(char const*, ...)+0x1c>
c00194d2:	83 c4 0c             	add    esp,0xc
c00194d5:	5b                   	pop    ebx
c00194d6:	5e                   	pop    esi
c00194d7:	5f                   	pop    edi
c00194d8:	5d                   	pop    ebp
c00194d9:	c3                   	ret    
c00194da:	8d 44 24 24          	lea    eax,[esp+0x24]
c00194de:	31 ff                	xor    edi,edi
c00194e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00194e4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00194e7:	85 c0                	test   eax,eax
c00194e9:	74 e7                	je     c00194d2 <Dbg::kprintf(char const*, ...)+0x14>
c00194eb:	8d 77 01             	lea    esi,[edi+0x1]
c00194ee:	83 f8 25             	cmp    eax,0x25
c00194f1:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c00194f4:	75 47                	jne    c001953d <Dbg::kprintf(char const*, ...)+0x7f>
c00194f6:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00194f9:	83 c7 02             	add    edi,0x2
c00194fc:	8d 34 3b             	lea    esi,[ebx+edi*1]
c00194ff:	83 e8 25             	sub    eax,0x25
c0019502:	0f b6 c0             	movzx  eax,al
c0019505:	83 f8 53             	cmp    eax,0x53
c0019508:	0f 87 ce 00 00 00    	ja     c00195dc <Dbg::kprintf(char const*, ...)+0x11e>
c001950e:	ff 24 85 20 20 03 c0 	jmp    DWORD PTR [eax*4-0x3ffcdfe0]
c0019515:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019519:	89 c8                	mov    eax,ecx
c001951b:	83 c1 04             	add    ecx,0x4
c001951e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0019522:	8b 28                	mov    ebp,DWORD PTR [eax]
c0019524:	55                   	push   ebp
c0019525:	e8 55 ff ff ff       	call   c001947f <Dbg::logWriteInt(unsigned int)>
c001952a:	58                   	pop    eax
c001952b:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001952e:	85 c0                	test   eax,eax
c0019530:	74 a0                	je     c00194d2 <Dbg::kprintf(char const*, ...)+0x14>
c0019532:	8d 77 01             	lea    esi,[edi+0x1]
c0019535:	83 f8 25             	cmp    eax,0x25
c0019538:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c001953b:	74 b9                	je     c00194f6 <Dbg::kprintf(char const*, ...)+0x38>
c001953d:	50                   	push   eax
c001953e:	89 f7                	mov    edi,esi
c0019540:	e8 fb fe ff ff       	call   c0019440 <Dbg::logc(char)>
c0019545:	89 ee                	mov    esi,ebp
c0019547:	58                   	pop    eax
c0019548:	eb e1                	jmp    c001952b <Dbg::kprintf(char const*, ...)+0x6d>
c001954a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001954e:	89 c8                	mov    eax,ecx
c0019550:	83 c1 04             	add    ecx,0x4
c0019553:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0019557:	8b 00                	mov    eax,DWORD PTR [eax]
c0019559:	50                   	push   eax
c001955a:	e8 01 ff ff ff       	call   c0019460 <Dbg::logs(char*)>
c001955f:	58                   	pop    eax
c0019560:	eb c9                	jmp    c001952b <Dbg::kprintf(char const*, ...)+0x6d>
c0019562:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019566:	89 d0                	mov    eax,edx
c0019568:	83 c2 04             	add    edx,0x4
c001956b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001956f:	8b 00                	mov    eax,DWORD PTR [eax]
c0019571:	50                   	push   eax
c0019572:	e8 08 ff ff ff       	call   c001947f <Dbg::logWriteInt(unsigned int)>
c0019577:	58                   	pop    eax
c0019578:	eb b1                	jmp    c001952b <Dbg::kprintf(char const*, ...)+0x6d>
c001957a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001957e:	89 d0                	mov    eax,edx
c0019580:	83 c2 04             	add    edx,0x4
c0019583:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019587:	0f be 00             	movsx  eax,BYTE PTR [eax]
c001958a:	50                   	push   eax
c001958b:	e8 b0 fe ff ff       	call   c0019440 <Dbg::logc(char)>
c0019590:	58                   	pop    eax
c0019591:	eb 98                	jmp    c001952b <Dbg::kprintf(char const*, ...)+0x6d>
c0019593:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019597:	89 c8                	mov    eax,ecx
c0019599:	83 c1 04             	add    ecx,0x4
c001959c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00195a0:	6a 10                	push   0x10
c00195a2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00195a4:	51                   	push   ecx
c00195a5:	e8 f3 fe ff ff       	call   c001949d <Dbg::logWriteIntBase(unsigned int, int)>
c00195aa:	5d                   	pop    ebp
c00195ab:	58                   	pop    eax
c00195ac:	e9 7a ff ff ff       	jmp    c001952b <Dbg::kprintf(char const*, ...)+0x6d>
c00195b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00195b5:	89 d0                	mov    eax,edx
c00195b7:	83 c2 08             	add    edx,0x8
c00195ba:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00195be:	6a 10                	push   0x10
c00195c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00195c2:	50                   	push   eax
c00195c3:	e8 d5 fe ff ff       	call   c001949d <Dbg::logWriteIntBase(unsigned int, int)>
c00195c8:	58                   	pop    eax
c00195c9:	5a                   	pop    edx
c00195ca:	e9 5c ff ff ff       	jmp    c001952b <Dbg::kprintf(char const*, ...)+0x6d>
c00195cf:	6a 25                	push   0x25
c00195d1:	e8 6a fe ff ff       	call   c0019440 <Dbg::logc(char)>
c00195d6:	5a                   	pop    edx
c00195d7:	e9 4f ff ff ff       	jmp    c001952b <Dbg::kprintf(char const*, ...)+0x6d>
c00195dc:	6a 25                	push   0x25
c00195de:	e8 5d fe ff ff       	call   c0019440 <Dbg::logc(char)>
c00195e3:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00195e7:	50                   	push   eax
c00195e8:	e8 53 fe ff ff       	call   c0019440 <Dbg::logc(char)>
c00195ed:	5a                   	pop    edx
c00195ee:	59                   	pop    ecx
c00195ef:	e9 37 ff ff ff       	jmp    c001952b <Dbg::kprintf(char const*, ...)+0x6d>

c00195f4 <KiUbsanPrintDetails(char const*, void*)>:
c00195f4:	83 ec 1c             	sub    esp,0x1c
c00195f7:	83 ec 08             	sub    esp,0x8
c00195fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00195fe:	68 70 21 03 c0       	push   0xc0032170
c0019603:	e8 b6 fe ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0019608:	83 c4 10             	add    esp,0x10
c001960b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001960f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019613:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019617:	8b 00                	mov    eax,DWORD PTR [eax]
c0019619:	83 ec 08             	sub    esp,0x8
c001961c:	50                   	push   eax
c001961d:	68 84 21 03 c0       	push   0xc0032184
c0019622:	e8 97 fe ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0019627:	83 c4 10             	add    esp,0x10
c001962a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001962e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019631:	83 ec 08             	sub    esp,0x8
c0019634:	50                   	push   eax
c0019635:	68 8e 21 03 c0       	push   0xc003218e
c001963a:	e8 7f fe ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001963f:	83 c4 10             	add    esp,0x10
c0019642:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019646:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0019649:	83 ec 08             	sub    esp,0x8
c001964c:	50                   	push   eax
c001964d:	68 98 21 03 c0       	push   0xc0032198
c0019652:	e8 67 fe ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0019657:	83 c4 10             	add    esp,0x10
c001965a:	90                   	nop
c001965b:	83 c4 1c             	add    esp,0x1c
c001965e:	c3                   	ret    
c001965f:	90                   	nop

c0019660 <__ubsan_handle_type_mismatch_v1>:
c0019660:	83 ec 0c             	sub    esp,0xc
c0019663:	83 ec 08             	sub    esp,0x8
c0019666:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001966a:	68 dc 22 03 c0       	push   0xc00322dc
c001966f:	e8 80 ff ff ff       	call   c00195f4 <KiUbsanPrintDetails(char const*, void*)>
c0019674:	83 c4 10             	add    esp,0x10
c0019677:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001967c:	75 16                	jne    c0019694 <__ubsan_handle_type_mismatch_v1+0x34>
c001967e:	83 ec 0c             	sub    esp,0xc
c0019681:	68 a2 21 03 c0       	push   0xc00321a2
c0019686:	e8 33 fe ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001968b:	83 c4 10             	add    esp,0x10
c001968e:	e9 91 00 00 00       	jmp    c0019724 <__ubsan_handle_type_mismatch_v1+0xc4>
c0019693:	90                   	nop
c0019694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019698:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001969b:	85 c0                	test   eax,eax
c001969d:	74 29                	je     c00196c8 <__ubsan_handle_type_mismatch_v1+0x68>
c001969f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00196a6:	83 e8 01             	sub    eax,0x1
c00196a9:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00196ad:	75 19                	jne    c00196c8 <__ubsan_handle_type_mismatch_v1+0x68>
c00196af:	83 ec 08             	sub    esp,0x8
c00196b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00196b6:	68 fc 22 03 c0       	push   0xc00322fc
c00196bb:	e8 fe fd ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c00196c0:	83 c4 10             	add    esp,0x10
c00196c3:	eb 5f                	jmp    c0019724 <__ubsan_handle_type_mismatch_v1+0xc4>
c00196c5:	8d 76 00             	lea    esi,[esi+0x0]
c00196c8:	83 ec 0c             	sub    esp,0xc
c00196cb:	68 b7 21 03 c0       	push   0xc00321b7
c00196d0:	e8 e9 fd ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c00196d5:	83 c4 10             	add    esp,0x10
c00196d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196dc:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00196df:	0f b6 c0             	movzx  eax,al
c00196e2:	83 ec 08             	sub    esp,0x8
c00196e5:	50                   	push   eax
c00196e6:	68 d1 21 03 c0       	push   0xc00321d1
c00196eb:	e8 ce fd ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c00196f0:	83 c4 10             	add    esp,0x10
c00196f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00196fa:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00196fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019701:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019705:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0019708:	0f b6 c0             	movzx  eax,al
c001970b:	8b 04 85 60 45 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcbaa0]
c0019712:	51                   	push   ecx
c0019713:	52                   	push   edx
c0019714:	50                   	push   eax
c0019715:	68 24 23 03 c0       	push   0xc0032324
c001971a:	e8 9f fd ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001971f:	83 c4 10             	add    esp,0x10
c0019722:	66 90                	xchg   ax,ax
c0019724:	83 ec 0c             	sub    esp,0xc
c0019727:	68 dc 22 03 c0       	push   0xc00322dc
c001972c:	e8 d1 6f 00 00       	call   c0020702 <KePanic(char const*)>
c0019731:	83 c4 10             	add    esp,0x10
c0019734:	90                   	nop
c0019735:	83 c4 0c             	add    esp,0xc
c0019738:	c3                   	ret    
c0019739:	8d 76 00             	lea    esi,[esi+0x0]

c001973c <__ubsan_handle_pointer_overflow>:
c001973c:	83 ec 0c             	sub    esp,0xc
c001973f:	83 ec 08             	sub    esp,0x8
c0019742:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019746:	68 6c 23 03 c0       	push   0xc003236c
c001974b:	e8 a4 fe ff ff       	call   c00195f4 <KiUbsanPrintDetails(char const*, void*)>
c0019750:	83 c4 10             	add    esp,0x10
c0019753:	83 ec 0c             	sub    esp,0xc
c0019756:	68 6c 23 03 c0       	push   0xc003236c
c001975b:	e8 a2 6f 00 00       	call   c0020702 <KePanic(char const*)>
c0019760:	83 c4 10             	add    esp,0x10
c0019763:	90                   	nop
c0019764:	83 c4 0c             	add    esp,0xc
c0019767:	c3                   	ret    

c0019768 <__ubsan_handle_out_of_bounds>:
c0019768:	83 ec 0c             	sub    esp,0xc
c001976b:	83 ec 08             	sub    esp,0x8
c001976e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019772:	68 dc 21 03 c0       	push   0xc00321dc
c0019777:	e8 78 fe ff ff       	call   c00195f4 <KiUbsanPrintDetails(char const*, void*)>
c001977c:	83 c4 10             	add    esp,0x10
c001977f:	83 ec 0c             	sub    esp,0xc
c0019782:	68 dc 21 03 c0       	push   0xc00321dc
c0019787:	e8 76 6f 00 00       	call   c0020702 <KePanic(char const*)>
c001978c:	83 c4 10             	add    esp,0x10
c001978f:	90                   	nop
c0019790:	83 c4 0c             	add    esp,0xc
c0019793:	c3                   	ret    

c0019794 <__ubsan_handle_add_overflow>:
c0019794:	83 ec 0c             	sub    esp,0xc
c0019797:	83 ec 08             	sub    esp,0x8
c001979a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001979e:	68 f9 21 03 c0       	push   0xc00321f9
c00197a3:	e8 4c fe ff ff       	call   c00195f4 <KiUbsanPrintDetails(char const*, void*)>
c00197a8:	83 c4 10             	add    esp,0x10
c00197ab:	83 ec 0c             	sub    esp,0xc
c00197ae:	68 f9 21 03 c0       	push   0xc00321f9
c00197b3:	e8 4a 6f 00 00       	call   c0020702 <KePanic(char const*)>
c00197b8:	83 c4 10             	add    esp,0x10
c00197bb:	90                   	nop
c00197bc:	83 c4 0c             	add    esp,0xc
c00197bf:	c3                   	ret    

c00197c0 <__ubsan_handle_load_invalid_value>:
c00197c0:	83 ec 0c             	sub    esp,0xc
c00197c3:	83 ec 08             	sub    esp,0x8
c00197c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00197ca:	68 8c 23 03 c0       	push   0xc003238c
c00197cf:	e8 20 fe ff ff       	call   c00195f4 <KiUbsanPrintDetails(char const*, void*)>
c00197d4:	83 c4 10             	add    esp,0x10
c00197d7:	83 ec 0c             	sub    esp,0xc
c00197da:	68 8c 23 03 c0       	push   0xc003238c
c00197df:	e8 1e 6f 00 00       	call   c0020702 <KePanic(char const*)>
c00197e4:	83 c4 10             	add    esp,0x10
c00197e7:	90                   	nop
c00197e8:	83 c4 0c             	add    esp,0xc
c00197eb:	c3                   	ret    

c00197ec <__ubsan_handle_divrem_overflow>:
c00197ec:	83 ec 0c             	sub    esp,0xc
c00197ef:	83 ec 08             	sub    esp,0x8
c00197f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00197f6:	68 b0 23 03 c0       	push   0xc00323b0
c00197fb:	e8 f4 fd ff ff       	call   c00195f4 <KiUbsanPrintDetails(char const*, void*)>
c0019800:	83 c4 10             	add    esp,0x10
c0019803:	83 ec 0c             	sub    esp,0xc
c0019806:	68 b0 23 03 c0       	push   0xc00323b0
c001980b:	e8 f2 6e 00 00       	call   c0020702 <KePanic(char const*)>
c0019810:	83 c4 10             	add    esp,0x10
c0019813:	90                   	nop
c0019814:	83 c4 0c             	add    esp,0xc
c0019817:	c3                   	ret    

c0019818 <__ubsan_handle_mul_overflow>:
c0019818:	83 ec 0c             	sub    esp,0xc
c001981b:	83 ec 08             	sub    esp,0x8
c001981e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019822:	68 15 22 03 c0       	push   0xc0032215
c0019827:	e8 c8 fd ff ff       	call   c00195f4 <KiUbsanPrintDetails(char const*, void*)>
c001982c:	83 c4 10             	add    esp,0x10
c001982f:	83 ec 0c             	sub    esp,0xc
c0019832:	68 15 22 03 c0       	push   0xc0032215
c0019837:	e8 c6 6e 00 00       	call   c0020702 <KePanic(char const*)>
c001983c:	83 c4 10             	add    esp,0x10
c001983f:	90                   	nop
c0019840:	83 c4 0c             	add    esp,0xc
c0019843:	c3                   	ret    

c0019844 <__ubsan_handle_sub_overflow>:
c0019844:	83 ec 0c             	sub    esp,0xc
c0019847:	83 ec 08             	sub    esp,0x8
c001984a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001984e:	68 31 22 03 c0       	push   0xc0032231
c0019853:	e8 9c fd ff ff       	call   c00195f4 <KiUbsanPrintDetails(char const*, void*)>
c0019858:	83 c4 10             	add    esp,0x10
c001985b:	83 ec 0c             	sub    esp,0xc
c001985e:	68 31 22 03 c0       	push   0xc0032231
c0019863:	e8 9a 6e 00 00       	call   c0020702 <KePanic(char const*)>
c0019868:	83 c4 10             	add    esp,0x10
c001986b:	90                   	nop
c001986c:	83 c4 0c             	add    esp,0xc
c001986f:	c3                   	ret    

c0019870 <__ubsan_handle_shift_out_of_bounds>:
c0019870:	83 ec 0c             	sub    esp,0xc
c0019873:	83 ec 08             	sub    esp,0x8
c0019876:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001987a:	68 d0 23 03 c0       	push   0xc00323d0
c001987f:	e8 70 fd ff ff       	call   c00195f4 <KiUbsanPrintDetails(char const*, void*)>
c0019884:	83 c4 10             	add    esp,0x10
c0019887:	83 ec 0c             	sub    esp,0xc
c001988a:	68 d0 23 03 c0       	push   0xc00323d0
c001988f:	e8 6e 6e 00 00       	call   c0020702 <KePanic(char const*)>
c0019894:	83 c4 10             	add    esp,0x10
c0019897:	90                   	nop
c0019898:	83 c4 0c             	add    esp,0xc
c001989b:	c3                   	ret    

c001989c <__ubsan_handle_negate_overflow>:
c001989c:	83 ec 0c             	sub    esp,0xc
c001989f:	83 ec 08             	sub    esp,0x8
c00198a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00198a6:	68 f4 23 03 c0       	push   0xc00323f4
c00198ab:	e8 44 fd ff ff       	call   c00195f4 <KiUbsanPrintDetails(char const*, void*)>
c00198b0:	83 c4 10             	add    esp,0x10
c00198b3:	83 ec 0c             	sub    esp,0xc
c00198b6:	68 f4 23 03 c0       	push   0xc00323f4
c00198bb:	e8 42 6e 00 00       	call   c0020702 <KePanic(char const*)>
c00198c0:	83 c4 10             	add    esp,0x10
c00198c3:	90                   	nop
c00198c4:	83 c4 0c             	add    esp,0xc
c00198c7:	c3                   	ret    

c00198c8 <KiIsHashInTable(unsigned short)>:
c00198c8:	0f b7 d0             	movzx  edx,ax
c00198cb:	83 e0 07             	and    eax,0x7
c00198ce:	c1 fa 03             	sar    edx,0x3
c00198d1:	88 c1                	mov    cl,al
c00198d3:	0f b6 92 00 bf 03 c0 	movzx  edx,BYTE PTR [edx-0x3ffc4100]
c00198da:	d3 fa                	sar    edx,cl
c00198dc:	89 d0                	mov    eax,edx
c00198de:	83 e0 01             	and    eax,0x1
c00198e1:	c3                   	ret    

c00198e2 <KiSetHashInTable(unsigned short, bool)>:
c00198e2:	56                   	push   esi
c00198e3:	53                   	push   ebx
c00198e4:	0f b7 d8             	movzx  ebx,ax
c00198e7:	c1 fb 03             	sar    ebx,0x3
c00198ea:	83 e0 07             	and    eax,0x7
c00198ed:	89 c1                	mov    ecx,eax
c00198ef:	b8 01 00 00 00       	mov    eax,0x1
c00198f4:	0f b6 b3 00 bf 03 c0 	movzx  esi,BYTE PTR [ebx-0x3ffc4100]
c00198fb:	d3 e0                	shl    eax,cl
c00198fd:	84 d2                	test   dl,dl
c00198ff:	74 04                	je     c0019905 <KiSetHashInTable(unsigned short, bool)+0x23>
c0019901:	09 f0                	or     eax,esi
c0019903:	eb 04                	jmp    c0019909 <KiSetHashInTable(unsigned short, bool)+0x27>
c0019905:	f7 d0                	not    eax
c0019907:	21 f0                	and    eax,esi
c0019909:	88 83 00 bf 03 c0    	mov    BYTE PTR [ebx-0x3ffc4100],al
c001990f:	5b                   	pop    ebx
c0019910:	5e                   	pop    esi
c0019911:	c3                   	ret    

c0019912 <KiFlushSymlinkChanges()>:
c0019912:	57                   	push   edi
c0019913:	56                   	push   esi
c0019914:	53                   	push   ebx
c0019915:	83 ec 1c             	sub    esp,0x1c
c0019918:	68 14 01 00 00       	push   0x114
c001991d:	e8 66 cd ff ff       	call   c0016688 <malloc>
c0019922:	83 c4 0c             	add    esp,0xc
c0019925:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c001992b:	68 13 24 03 c0       	push   0xc0032413
c0019930:	50                   	push   eax
c0019931:	89 c3                	mov    ebx,eax
c0019933:	e8 9e 0d 00 00       	call   c001a6d6 <File::File(char const*, Process*)>
c0019938:	83 c4 10             	add    esp,0x10
c001993b:	85 db                	test   ebx,ebx
c001993d:	75 10                	jne    c001994f <KiFlushSymlinkChanges()+0x3d>
c001993f:	83 ec 0c             	sub    esp,0xc
c0019942:	68 31 24 03 c0       	push   0xc0032431
c0019947:	e8 b6 6d 00 00       	call   c0020702 <KePanic(char const*)>
c001994c:	83 c4 10             	add    esp,0x10
c001994f:	50                   	push   eax
c0019950:	50                   	push   eax
c0019951:	6a 06                	push   0x6
c0019953:	53                   	push   ebx
c0019954:	e8 9b 0d 00 00       	call   c001a6f4 <File::open(FileOpenMode)>
c0019959:	83 c4 10             	add    esp,0x10
c001995c:	85 c0                	test   eax,eax
c001995e:	74 10                	je     c0019970 <KiFlushSymlinkChanges()+0x5e>
c0019960:	83 ec 0c             	sub    esp,0xc
c0019963:	68 4b 24 03 c0       	push   0xc003244b
c0019968:	e8 95 6d 00 00       	call   c0020702 <KePanic(char const*)>
c001996d:	83 c4 10             	add    esp,0x10
c0019970:	31 f6                	xor    esi,esi
c0019972:	39 35 c0 ba 03 c0    	cmp    DWORD PTR ds:0xc003bac0,esi
c0019978:	7e 70                	jle    c00199ea <KiFlushSymlinkChanges()+0xd8>
c001997a:	83 ec 0c             	sub    esp,0xc
c001997d:	89 f0                	mov    eax,esi
c001997f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019981:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0019985:	c1 e0 08             	shl    eax,0x8
c0019988:	57                   	push   edi
c0019989:	05 00 bb 03 c0       	add    eax,0xc003bb00
c001998e:	50                   	push   eax
c001998f:	6a 00                	push   0x0
c0019991:	68 00 01 00 00       	push   0x100
c0019996:	53                   	push   ebx
c0019997:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001999a:	83 c4 20             	add    esp,0x20
c001999d:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c00199a5:	74 10                	je     c00199b7 <KiFlushSymlinkChanges()+0xa5>
c00199a7:	83 ec 0c             	sub    esp,0xc
c00199aa:	68 65 24 03 c0       	push   0xc0032465
c00199af:	e8 4e 6d 00 00       	call   c0020702 <KePanic(char const*)>
c00199b4:	83 c4 10             	add    esp,0x10
c00199b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00199b9:	8d 14 f5 e0 ba 03 c0 	lea    edx,[esi*8-0x3ffc4520]
c00199c0:	83 ec 0c             	sub    esp,0xc
c00199c3:	57                   	push   edi
c00199c4:	52                   	push   edx
c00199c5:	6a 00                	push   0x0
c00199c7:	6a 08                	push   0x8
c00199c9:	53                   	push   ebx
c00199ca:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00199cd:	83 c4 20             	add    esp,0x20
c00199d0:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00199d5:	74 10                	je     c00199e7 <KiFlushSymlinkChanges()+0xd5>
c00199d7:	83 ec 0c             	sub    esp,0xc
c00199da:	68 7f 24 03 c0       	push   0xc003247f
c00199df:	e8 1e 6d 00 00       	call   c0020702 <KePanic(char const*)>
c00199e4:	83 c4 10             	add    esp,0x10
c00199e7:	46                   	inc    esi
c00199e8:	eb 88                	jmp    c0019972 <KiFlushSymlinkChanges()+0x60>
c00199ea:	83 ec 0c             	sub    esp,0xc
c00199ed:	53                   	push   ebx
c00199ee:	e8 5f 0d 00 00       	call   c001a752 <File::close()>
c00199f3:	83 c4 10             	add    esp,0x10
c00199f6:	85 db                	test   ebx,ebx
c00199f8:	74 0c                	je     c0019a06 <KiFlushSymlinkChanges()+0xf4>
c00199fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00199fc:	83 ec 0c             	sub    esp,0xc
c00199ff:	53                   	push   ebx
c0019a00:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a03:	83 c4 10             	add    esp,0x10
c0019a06:	c7 05 c0 ba 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003bac0,0x0
c0019a10:	83 c4 10             	add    esp,0x10
c0019a13:	5b                   	pop    ebx
c0019a14:	5e                   	pop    esi
c0019a15:	5f                   	pop    edi
c0019a16:	c3                   	ret    

c0019a17 <KiDeinitialiseSymlinks(void*)>:
c0019a17:	e9 f6 fe ff ff       	jmp    c0019912 <KiFlushSymlinkChanges()>

c0019a1c <KiGetSymlinkHash(char const*)>:
c0019a1c:	53                   	push   ebx
c0019a1d:	89 c3                	mov    ebx,eax
c0019a1f:	83 ec 14             	sub    esp,0x14
c0019a22:	50                   	push   eax
c0019a23:	e8 58 6b fe ff       	call   c0000580 <strlen>
c0019a28:	5a                   	pop    edx
c0019a29:	59                   	pop    ecx
c0019a2a:	50                   	push   eax
c0019a2b:	53                   	push   ebx
c0019a2c:	e8 54 64 00 00       	call   c001fe85 <KeCalculateCRC32(unsigned char*, int)>
c0019a31:	83 c4 18             	add    esp,0x18
c0019a34:	5b                   	pop    ebx
c0019a35:	89 c2                	mov    edx,eax
c0019a37:	c1 ea 10             	shr    edx,0x10
c0019a3a:	31 d0                	xor    eax,edx
c0019a3c:	c3                   	ret    

c0019a3d <KiCreateSymlinkID()>:
c0019a3d:	55                   	push   ebp
c0019a3e:	57                   	push   edi
c0019a3f:	56                   	push   esi
c0019a40:	53                   	push   ebx
c0019a41:	31 db                	xor    ebx,ebx
c0019a43:	83 ec 1c             	sub    esp,0x1c
c0019a46:	e8 05 6e 00 00       	call   c0020850 <KeRand()>
c0019a4b:	8b 2d 00 df 03 c0    	mov    ebp,DWORD PTR ds:0xc003df00
c0019a51:	31 d2                	xor    edx,edx
c0019a53:	43                   	inc    ebx
c0019a54:	31 ff                	xor    edi,edi
c0019a56:	8d 4d 01             	lea    ecx,[ebp+0x1]
c0019a59:	89 ee                	mov    esi,ebp
c0019a5b:	89 0d 00 df 03 c0    	mov    DWORD PTR ds:0xc003df00,ecx
c0019a61:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0019a65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019a69:	c1 e0 1f             	shl    eax,0x1f
c0019a6c:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0019a72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a76:	75 10                	jne    c0019a88 <KiCreateSymlinkID()+0x4b>
c0019a78:	83 ec 0c             	sub    esp,0xc
c0019a7b:	68 99 24 03 c0       	push   0xc0032499
c0019a80:	e8 7d 6c 00 00       	call   c0020702 <KePanic(char const*)>
c0019a85:	83 c4 10             	add    esp,0x10
c0019a88:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0019a8c:	75 06                	jne    c0019a94 <KiCreateSymlinkID()+0x57>
c0019a8e:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0019a92:	74 b2                	je     c0019a46 <KiCreateSymlinkID()+0x9>
c0019a94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a98:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019a9c:	83 c4 1c             	add    esp,0x1c
c0019a9f:	5b                   	pop    ebx
c0019aa0:	31 f0                	xor    eax,esi
c0019aa2:	5e                   	pop    esi
c0019aa3:	31 fa                	xor    edx,edi
c0019aa5:	5f                   	pop    edi
c0019aa6:	5d                   	pop    ebp
c0019aa7:	c3                   	ret    

c0019aa8 <KeRegisterSymlink(char const*, unsigned long long)>:
c0019aa8:	53                   	push   ebx
c0019aa9:	83 ec 0c             	sub    esp,0xc
c0019aac:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019ab0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019ab4:	a1 c0 ba 03 c0       	mov    eax,ds:0xc003bac0
c0019ab9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019abd:	68 00 01 00 00       	push   0x100
c0019ac2:	6a 00                	push   0x0
c0019ac4:	89 0c c5 e4 ba 03 c0 	mov    DWORD PTR [eax*8-0x3ffc451c],ecx
c0019acb:	89 14 c5 e0 ba 03 c0 	mov    DWORD PTR [eax*8-0x3ffc4520],edx
c0019ad2:	c1 e0 08             	shl    eax,0x8
c0019ad5:	05 00 bb 03 c0       	add    eax,0xc003bb00
c0019ada:	50                   	push   eax
c0019adb:	e8 10 6a fe ff       	call   c00004f0 <memset>
c0019ae0:	58                   	pop    eax
c0019ae1:	a1 c0 ba 03 c0       	mov    eax,ds:0xc003bac0
c0019ae6:	5a                   	pop    edx
c0019ae7:	c1 e0 08             	shl    eax,0x8
c0019aea:	53                   	push   ebx
c0019aeb:	05 00 bb 03 c0       	add    eax,0xc003bb00
c0019af0:	50                   	push   eax
c0019af1:	e8 5a 6b fe ff       	call   c0000650 <strcpy>
c0019af6:	89 d8                	mov    eax,ebx
c0019af8:	e8 1f ff ff ff       	call   c0019a1c <KiGetSymlinkHash(char const*)>
c0019afd:	59                   	pop    ecx
c0019afe:	0f b7 d8             	movzx  ebx,ax
c0019b01:	58                   	pop    eax
c0019b02:	53                   	push   ebx
c0019b03:	68 a2 24 03 c0       	push   0xc00324a2
c0019b08:	e8 b1 f9 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0019b0d:	89 d8                	mov    eax,ebx
c0019b0f:	ba 01 00 00 00       	mov    edx,0x1
c0019b14:	e8 c9 fd ff ff       	call   c00198e2 <KiSetHashInTable(unsigned short, bool)>
c0019b19:	a1 c0 ba 03 c0       	mov    eax,ds:0xc003bac0
c0019b1e:	83 c4 10             	add    esp,0x10
c0019b21:	40                   	inc    eax
c0019b22:	a3 c0 ba 03 c0       	mov    ds:0xc003bac0,eax
c0019b27:	83 f8 03             	cmp    eax,0x3
c0019b2a:	7e 09                	jle    c0019b35 <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c0019b2c:	83 c4 08             	add    esp,0x8
c0019b2f:	5b                   	pop    ebx
c0019b30:	e9 dd fd ff ff       	jmp    c0019912 <KiFlushSymlinkChanges()>
c0019b35:	83 c4 08             	add    esp,0x8
c0019b38:	5b                   	pop    ebx
c0019b39:	c3                   	ret    

c0019b3a <KeInitialiseSymlinks()>:
c0019b3a:	57                   	push   edi
c0019b3b:	56                   	push   esi
c0019b3c:	53                   	push   ebx
c0019b3d:	81 ec 14 01 00 00    	sub    esp,0x114
c0019b43:	68 00 20 00 00       	push   0x2000
c0019b48:	6a 00                	push   0x0
c0019b4a:	68 00 bf 03 c0       	push   0xc003bf00
c0019b4f:	c7 05 00 df 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003df00,0x0
c0019b59:	c7 05 c0 ba 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003bac0,0x0
c0019b63:	e8 88 69 fe ff       	call   c00004f0 <memset>
c0019b68:	59                   	pop    ecx
c0019b69:	5b                   	pop    ebx
c0019b6a:	ff 35 00 df 03 c0    	push   DWORD PTR ds:0xc003df00
c0019b70:	68 b6 24 03 c0       	push   0xc00324b6
c0019b75:	e8 44 f9 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0019b7a:	5e                   	pop    esi
c0019b7b:	5f                   	pop    edi
c0019b7c:	6a 00                	push   0x0
c0019b7e:	68 17 9a 01 c0       	push   0xc0019a17
c0019b83:	e8 02 61 00 00       	call   c001fc8a <KeRegisterAtexit(void (*)(void*), void*)>
c0019b88:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019b8f:	e8 f4 ca ff ff       	call   c0016688 <malloc>
c0019b94:	83 c4 0c             	add    esp,0xc
c0019b97:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c0019b9d:	68 13 24 03 c0       	push   0xc0032413
c0019ba2:	50                   	push   eax
c0019ba3:	89 c3                	mov    ebx,eax
c0019ba5:	e8 2c 0b 00 00       	call   c001a6d6 <File::File(char const*, Process*)>
c0019baa:	83 c4 10             	add    esp,0x10
c0019bad:	85 db                	test   ebx,ebx
c0019baf:	75 10                	jne    c0019bc1 <KeInitialiseSymlinks()+0x87>
c0019bb1:	83 ec 0c             	sub    esp,0xc
c0019bb4:	68 d3 24 03 c0       	push   0xc00324d3
c0019bb9:	e8 44 6b 00 00       	call   c0020702 <KePanic(char const*)>
c0019bbe:	83 c4 10             	add    esp,0x10
c0019bc1:	83 ec 0c             	sub    esp,0xc
c0019bc4:	53                   	push   ebx
c0019bc5:	e8 ee 0d 00 00       	call   c001a9b8 <File::exists()>
c0019bca:	83 c4 10             	add    esp,0x10
c0019bcd:	84 c0                	test   al,al
c0019bcf:	75 3a                	jne    c0019c0b <KeInitialiseSymlinks()+0xd1>
c0019bd1:	52                   	push   edx
c0019bd2:	52                   	push   edx
c0019bd3:	6a 12                	push   0x12
c0019bd5:	53                   	push   ebx
c0019bd6:	e8 19 0b 00 00       	call   c001a6f4 <File::open(FileOpenMode)>
c0019bdb:	83 c4 10             	add    esp,0x10
c0019bde:	85 c0                	test   eax,eax
c0019be0:	74 10                	je     c0019bf2 <KeInitialiseSymlinks()+0xb8>
c0019be2:	83 ec 0c             	sub    esp,0xc
c0019be5:	68 f0 24 03 c0       	push   0xc00324f0
c0019bea:	e8 13 6b 00 00       	call   c0020702 <KePanic(char const*)>
c0019bef:	83 c4 10             	add    esp,0x10
c0019bf2:	83 ec 0c             	sub    esp,0xc
c0019bf5:	53                   	push   ebx
c0019bf6:	e8 57 0b 00 00       	call   c001a752 <File::close()>
c0019bfb:	83 c4 10             	add    esp,0x10
c0019bfe:	85 db                	test   ebx,ebx
c0019c00:	0f 84 9e 00 00 00    	je     c0019ca4 <KeInitialiseSymlinks()+0x16a>
c0019c06:	e9 8d 00 00 00       	jmp    c0019c98 <KeInitialiseSymlinks()+0x15e>
c0019c0b:	50                   	push   eax
c0019c0c:	50                   	push   eax
c0019c0d:	6a 01                	push   0x1
c0019c0f:	53                   	push   ebx
c0019c10:	e8 df 0a 00 00       	call   c001a6f4 <File::open(FileOpenMode)>
c0019c15:	83 c4 10             	add    esp,0x10
c0019c18:	85 c0                	test   eax,eax
c0019c1a:	74 10                	je     c0019c2c <KeInitialiseSymlinks()+0xf2>
c0019c1c:	83 ec 0c             	sub    esp,0xc
c0019c1f:	68 0d 25 03 c0       	push   0xc003250d
c0019c24:	e8 d9 6a 00 00       	call   c0020702 <KePanic(char const*)>
c0019c29:	83 c4 10             	add    esp,0x10
c0019c2c:	ff 05 00 df 03 c0    	inc    DWORD PTR ds:0xc003df00
c0019c32:	83 ec 0c             	sub    esp,0xc
c0019c35:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019c39:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c3b:	57                   	push   edi
c0019c3c:	8d 74 24 20          	lea    esi,[esp+0x20]
c0019c40:	56                   	push   esi
c0019c41:	6a 00                	push   0x0
c0019c43:	68 00 01 00 00       	push   0x100
c0019c48:	53                   	push   ebx
c0019c49:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019c4c:	83 c4 20             	add    esp,0x20
c0019c4f:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0019c57:	75 33                	jne    c0019c8c <KeInitialiseSymlinks()+0x152>
c0019c59:	83 ec 0c             	sub    esp,0xc
c0019c5c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c5e:	57                   	push   edi
c0019c5f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019c63:	52                   	push   edx
c0019c64:	6a 00                	push   0x0
c0019c66:	6a 08                	push   0x8
c0019c68:	53                   	push   ebx
c0019c69:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019c6c:	83 c4 20             	add    esp,0x20
c0019c6f:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019c74:	75 16                	jne    c0019c8c <KeInitialiseSymlinks()+0x152>
c0019c76:	89 f0                	mov    eax,esi
c0019c78:	e8 9f fd ff ff       	call   c0019a1c <KiGetSymlinkHash(char const*)>
c0019c7d:	ba 01 00 00 00       	mov    edx,0x1
c0019c82:	0f b7 c0             	movzx  eax,ax
c0019c85:	e8 58 fc ff ff       	call   c00198e2 <KiSetHashInTable(unsigned short, bool)>
c0019c8a:	eb a0                	jmp    c0019c2c <KeInitialiseSymlinks()+0xf2>
c0019c8c:	83 ec 0c             	sub    esp,0xc
c0019c8f:	53                   	push   ebx
c0019c90:	e8 bd 0a 00 00       	call   c001a752 <File::close()>
c0019c95:	83 c4 10             	add    esp,0x10
c0019c98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c9a:	83 ec 0c             	sub    esp,0xc
c0019c9d:	53                   	push   ebx
c0019c9e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019ca1:	83 c4 10             	add    esp,0x10
c0019ca4:	81 c4 10 01 00 00    	add    esp,0x110
c0019caa:	5b                   	pop    ebx
c0019cab:	5e                   	pop    esi
c0019cac:	5f                   	pop    edi
c0019cad:	c3                   	ret    

c0019cae <KiIsSymlinkRegistered(char const*)>:
c0019cae:	55                   	push   ebp
c0019caf:	57                   	push   edi
c0019cb0:	56                   	push   esi
c0019cb1:	53                   	push   ebx
c0019cb2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019cb8:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0019cbf:	89 f0                	mov    eax,esi
c0019cc1:	e8 56 fd ff ff       	call   c0019a1c <KiGetSymlinkHash(char const*)>
c0019cc6:	53                   	push   ebx
c0019cc7:	56                   	push   esi
c0019cc8:	0f b7 c0             	movzx  eax,ax
c0019ccb:	50                   	push   eax
c0019ccc:	68 28 25 03 c0       	push   0xc0032528
c0019cd1:	e8 e8 f7 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0019cd6:	89 f0                	mov    eax,esi
c0019cd8:	e8 3f fd ff ff       	call   c0019a1c <KiGetSymlinkHash(char const*)>
c0019cdd:	0f b7 c0             	movzx  eax,ax
c0019ce0:	e8 e3 fb ff ff       	call   c00198c8 <KiIsHashInTable(unsigned short)>
c0019ce5:	83 c4 10             	add    esp,0x10
c0019ce8:	31 d2                	xor    edx,edx
c0019cea:	88 c1                	mov    cl,al
c0019cec:	31 c0                	xor    eax,eax
c0019cee:	84 c9                	test   cl,cl
c0019cf0:	0f 84 31 01 00 00    	je     c0019e27 <KiIsSymlinkRegistered(char const*)+0x179>
c0019cf6:	31 db                	xor    ebx,ebx
c0019cf8:	39 1d c0 ba 03 c0    	cmp    DWORD PTR ds:0xc003bac0,ebx
c0019cfe:	7e 30                	jle    c0019d30 <KiIsSymlinkRegistered(char const*)+0x82>
c0019d00:	89 d8                	mov    eax,ebx
c0019d02:	c1 e0 08             	shl    eax,0x8
c0019d05:	51                   	push   ecx
c0019d06:	05 00 bb 03 c0       	add    eax,0xc003bb00
c0019d0b:	51                   	push   ecx
c0019d0c:	50                   	push   eax
c0019d0d:	56                   	push   esi
c0019d0e:	e8 6d 6a fe ff       	call   c0000780 <strcmp>
c0019d13:	83 c4 10             	add    esp,0x10
c0019d16:	85 c0                	test   eax,eax
c0019d18:	75 13                	jne    c0019d2d <KiIsSymlinkRegistered(char const*)+0x7f>
c0019d1a:	8b 04 dd e0 ba 03 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffc4520]
c0019d21:	8b 14 dd e4 ba 03 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffc451c]
c0019d28:	e9 fa 00 00 00       	jmp    c0019e27 <KiIsSymlinkRegistered(char const*)+0x179>
c0019d2d:	43                   	inc    ebx
c0019d2e:	eb c8                	jmp    c0019cf8 <KiIsSymlinkRegistered(char const*)+0x4a>
c0019d30:	83 ec 0c             	sub    esp,0xc
c0019d33:	68 14 01 00 00       	push   0x114
c0019d38:	e8 4b c9 ff ff       	call   c0016688 <malloc>
c0019d3d:	83 c4 0c             	add    esp,0xc
c0019d40:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c0019d46:	68 13 24 03 c0       	push   0xc0032413
c0019d4b:	50                   	push   eax
c0019d4c:	89 c3                	mov    ebx,eax
c0019d4e:	e8 83 09 00 00       	call   c001a6d6 <File::File(char const*, Process*)>
c0019d53:	83 c4 10             	add    esp,0x10
c0019d56:	85 db                	test   ebx,ebx
c0019d58:	75 12                	jne    c0019d6c <KiIsSymlinkRegistered(char const*)+0xbe>
c0019d5a:	83 ec 0c             	sub    esp,0xc
c0019d5d:	68 3d 25 03 c0       	push   0xc003253d
c0019d62:	e8 9b 69 00 00       	call   c0020702 <KePanic(char const*)>
c0019d67:	83 c4 10             	add    esp,0x10
c0019d6a:	eb 10                	jmp    c0019d7c <KiIsSymlinkRegistered(char const*)+0xce>
c0019d6c:	83 ec 0c             	sub    esp,0xc
c0019d6f:	53                   	push   ebx
c0019d70:	e8 43 0c 00 00       	call   c001a9b8 <File::exists()>
c0019d75:	83 c4 10             	add    esp,0x10
c0019d78:	84 c0                	test   al,al
c0019d7a:	74 de                	je     c0019d5a <KiIsSymlinkRegistered(char const*)+0xac>
c0019d7c:	52                   	push   edx
c0019d7d:	52                   	push   edx
c0019d7e:	6a 01                	push   0x1
c0019d80:	53                   	push   ebx
c0019d81:	e8 6e 09 00 00       	call   c001a6f4 <File::open(FileOpenMode)>
c0019d86:	83 c4 10             	add    esp,0x10
c0019d89:	85 c0                	test   eax,eax
c0019d8b:	74 10                	je     c0019d9d <KiIsSymlinkRegistered(char const*)+0xef>
c0019d8d:	83 ec 0c             	sub    esp,0xc
c0019d90:	68 58 25 03 c0       	push   0xc0032558
c0019d95:	e8 68 69 00 00       	call   c0020702 <KePanic(char const*)>
c0019d9a:	83 c4 10             	add    esp,0x10
c0019d9d:	83 ec 0c             	sub    esp,0xc
c0019da0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019da2:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0019da6:	55                   	push   ebp
c0019da7:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0019dab:	57                   	push   edi
c0019dac:	6a 00                	push   0x0
c0019dae:	68 00 01 00 00       	push   0x100
c0019db3:	53                   	push   ebx
c0019db4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019db7:	83 c4 20             	add    esp,0x20
c0019dba:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0019dc2:	75 4b                	jne    c0019e0f <KiIsSymlinkRegistered(char const*)+0x161>
c0019dc4:	83 ec 0c             	sub    esp,0xc
c0019dc7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019dc9:	55                   	push   ebp
c0019dca:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019dce:	52                   	push   edx
c0019dcf:	6a 00                	push   0x0
c0019dd1:	6a 08                	push   0x8
c0019dd3:	53                   	push   ebx
c0019dd4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019dd7:	83 c4 20             	add    esp,0x20
c0019dda:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019ddf:	75 2e                	jne    c0019e0f <KiIsSymlinkRegistered(char const*)+0x161>
c0019de1:	50                   	push   eax
c0019de2:	50                   	push   eax
c0019de3:	57                   	push   edi
c0019de4:	56                   	push   esi
c0019de5:	e8 96 69 fe ff       	call   c0000780 <strcmp>
c0019dea:	83 c4 10             	add    esp,0x10
c0019ded:	85 c0                	test   eax,eax
c0019def:	75 ac                	jne    c0019d9d <KiIsSymlinkRegistered(char const*)+0xef>
c0019df1:	83 ec 0c             	sub    esp,0xc
c0019df4:	53                   	push   ebx
c0019df5:	e8 58 09 00 00       	call   c001a752 <File::close()>
c0019dfa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019dfc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019dff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019e02:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019e06:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019e0a:	83 c4 10             	add    esp,0x10
c0019e0d:	eb 18                	jmp    c0019e27 <KiIsSymlinkRegistered(char const*)+0x179>
c0019e0f:	83 ec 0c             	sub    esp,0xc
c0019e12:	53                   	push   ebx
c0019e13:	e8 3a 09 00 00       	call   c001a752 <File::close()>
c0019e18:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e1a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e1d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019e20:	83 c4 10             	add    esp,0x10
c0019e23:	31 c0                	xor    eax,eax
c0019e25:	31 d2                	xor    edx,edx
c0019e27:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e2d:	5b                   	pop    ebx
c0019e2e:	5e                   	pop    esi
c0019e2f:	5f                   	pop    edi
c0019e30:	5d                   	pop    ebp
c0019e31:	c3                   	ret    

c0019e32 <KeDereferenceSymlink(char const*, char*)>:
c0019e32:	55                   	push   ebp
c0019e33:	57                   	push   edi
c0019e34:	56                   	push   esi
c0019e35:	53                   	push   ebx
c0019e36:	83 ec 48             	sub    esp,0x48
c0019e39:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019e3d:	56                   	push   esi
c0019e3e:	e8 6b fe ff ff       	call   c0019cae <KiIsSymlinkRegistered(char const*)>
c0019e43:	83 c4 10             	add    esp,0x10
c0019e46:	89 c7                	mov    edi,eax
c0019e48:	89 d0                	mov    eax,edx
c0019e4a:	09 f8                	or     eax,edi
c0019e4c:	75 07                	jne    c0019e55 <KeDereferenceSymlink(char const*, char*)+0x23>
c0019e4e:	31 c0                	xor    eax,eax
c0019e50:	e9 7c 01 00 00       	jmp    c0019fd1 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019e55:	83 ec 0c             	sub    esp,0xc
c0019e58:	89 d5                	mov    ebp,edx
c0019e5a:	68 14 01 00 00       	push   0x114
c0019e5f:	e8 24 c8 ff ff       	call   c0016688 <malloc>
c0019e64:	83 c4 0c             	add    esp,0xc
c0019e67:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c0019e6d:	56                   	push   esi
c0019e6e:	50                   	push   eax
c0019e6f:	89 c3                	mov    ebx,eax
c0019e71:	e8 60 08 00 00       	call   c001a6d6 <File::File(char const*, Process*)>
c0019e76:	83 c4 10             	add    esp,0x10
c0019e79:	85 db                	test   ebx,ebx
c0019e7b:	0f 84 32 01 00 00    	je     c0019fb3 <KeDereferenceSymlink(char const*, char*)+0x181>
c0019e81:	56                   	push   esi
c0019e82:	56                   	push   esi
c0019e83:	6a 01                	push   0x1
c0019e85:	53                   	push   ebx
c0019e86:	e8 69 08 00 00       	call   c001a6f4 <File::open(FileOpenMode)>
c0019e8b:	83 c4 10             	add    esp,0x10
c0019e8e:	85 c0                	test   eax,eax
c0019e90:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e92:	74 09                	je     c0019e9d <KeDereferenceSymlink(char const*, char*)+0x6b>
c0019e94:	83 ec 0c             	sub    esp,0xc
c0019e97:	53                   	push   ebx
c0019e98:	e9 10 01 00 00       	jmp    c0019fad <KeDereferenceSymlink(char const*, char*)+0x17b>
c0019e9d:	83 ec 0c             	sub    esp,0xc
c0019ea0:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019ea4:	56                   	push   esi
c0019ea5:	8d 54 24 37          	lea    edx,[esp+0x37]
c0019ea9:	52                   	push   edx
c0019eaa:	6a 00                	push   0x0
c0019eac:	6a 08                	push   0x8
c0019eae:	53                   	push   ebx
c0019eaf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019eb2:	83 c4 20             	add    esp,0x20
c0019eb5:	85 c0                	test   eax,eax
c0019eb7:	0f 85 e2 00 00 00    	jne    c0019f9f <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019ebd:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019ec2:	0f 85 d7 00 00 00    	jne    c0019f9f <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019ec8:	83 ec 0c             	sub    esp,0xc
c0019ecb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ecd:	56                   	push   esi
c0019ece:	8d 54 24 20          	lea    edx,[esp+0x20]
c0019ed2:	52                   	push   edx
c0019ed3:	6a 00                	push   0x0
c0019ed5:	6a 08                	push   0x8
c0019ed7:	53                   	push   ebx
c0019ed8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019edb:	83 c4 20             	add    esp,0x20
c0019ede:	85 c0                	test   eax,eax
c0019ee0:	0f 85 b9 00 00 00    	jne    c0019f9f <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019ee6:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019eeb:	0f 85 ae 00 00 00    	jne    c0019f9f <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019ef1:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0019ef5:	0f 85 53 ff ff ff    	jne    c0019e4e <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019efb:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0019eff:	0f 85 49 ff ff ff    	jne    c0019e4e <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019f05:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019f0d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019f15:	51                   	push   ecx
c0019f16:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0019f1a:	50                   	push   eax
c0019f1b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019f1f:	50                   	push   eax
c0019f20:	53                   	push   ebx
c0019f21:	e8 d0 0a 00 00       	call   c001a9f6 <File::stat(unsigned long long*, bool*)>
c0019f26:	83 c4 10             	add    esp,0x10
c0019f29:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0019f2e:	75 6f                	jne    c0019f9f <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019f30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019f34:	31 c9                	xor    ecx,ecx
c0019f36:	bf 0f 00 00 00       	mov    edi,0xf
c0019f3b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019f3f:	39 c7                	cmp    edi,eax
c0019f41:	89 cf                	mov    edi,ecx
c0019f43:	19 d7                	sbb    edi,edx
c0019f45:	73 58                	jae    c0019f9f <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019f47:	83 c0 f0             	add    eax,0xfffffff0
c0019f4a:	bf ff 00 00 00       	mov    edi,0xff
c0019f4f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019f53:	83 d2 ff             	adc    edx,0xffffffff
c0019f56:	39 c7                	cmp    edi,eax
c0019f58:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019f5c:	19 d1                	sbb    ecx,edx
c0019f5e:	72 53                	jb     c0019fb3 <KeDereferenceSymlink(char const*, char*)+0x181>
c0019f60:	40                   	inc    eax
c0019f61:	52                   	push   edx
c0019f62:	50                   	push   eax
c0019f63:	6a 00                	push   0x0
c0019f65:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0019f69:	e8 82 65 fe ff       	call   c00004f0 <memset>
c0019f6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f70:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f73:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0019f77:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019f7b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019f7f:	53                   	push   ebx
c0019f80:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019f83:	83 c4 20             	add    esp,0x20
c0019f86:	85 c0                	test   eax,eax
c0019f88:	75 15                	jne    c0019f9f <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019f8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f8e:	89 c7                	mov    edi,eax
c0019f90:	c1 ff 1f             	sar    edi,0x1f
c0019f93:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0019f97:	75 06                	jne    c0019f9f <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019f99:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019f9d:	74 19                	je     c0019fb8 <KeDereferenceSymlink(char const*, char*)+0x186>
c0019f9f:	83 ec 0c             	sub    esp,0xc
c0019fa2:	53                   	push   ebx
c0019fa3:	e8 aa 07 00 00       	call   c001a752 <File::close()>
c0019fa8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019faa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019fb0:	83 c4 10             	add    esp,0x10
c0019fb3:	83 c8 ff             	or     eax,0xffffffff
c0019fb6:	eb 19                	jmp    c0019fd1 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019fb8:	83 ec 0c             	sub    esp,0xc
c0019fbb:	53                   	push   ebx
c0019fbc:	e8 91 07 00 00       	call   c001a752 <File::close()>
c0019fc1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019fc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fc6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019fc9:	83 c4 10             	add    esp,0x10
c0019fcc:	b8 01 00 00 00       	mov    eax,0x1
c0019fd1:	83 c4 3c             	add    esp,0x3c
c0019fd4:	5b                   	pop    ebx
c0019fd5:	5e                   	pop    esi
c0019fd6:	5f                   	pop    edi
c0019fd7:	5d                   	pop    ebp
c0019fd8:	c3                   	ret    

c0019fd9 <KeCreateSymlink(char const*, char const*)>:
c0019fd9:	55                   	push   ebp
c0019fda:	57                   	push   edi
c0019fdb:	56                   	push   esi
c0019fdc:	53                   	push   ebx
c0019fdd:	83 ec 38             	sub    esp,0x38
c0019fe0:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0019fe4:	68 14 01 00 00       	push   0x114
c0019fe9:	e8 9a c6 ff ff       	call   c0016688 <malloc>
c0019fee:	6a 00                	push   0x0
c0019ff0:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c0019ff6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019ffa:	89 c3                	mov    ebx,eax
c0019ffc:	50                   	push   eax
c0019ffd:	e8 f6 05 00 00       	call   c001a5f8 <File::File(char const*, Process*, bool)>
c001a002:	83 c4 20             	add    esp,0x20
c001a005:	85 db                	test   ebx,ebx
c001a007:	b8 01 00 00 00       	mov    eax,0x1
c001a00c:	0f 84 19 01 00 00    	je     c001a12b <KeCreateSymlink(char const*, char const*)+0x152>
c001a012:	52                   	push   edx
c001a013:	52                   	push   edx
c001a014:	6a 12                	push   0x12
c001a016:	53                   	push   ebx
c001a017:	e8 d8 06 00 00       	call   c001a6f4 <File::open(FileOpenMode)>
c001a01c:	83 c4 10             	add    esp,0x10
c001a01f:	85 c0                	test   eax,eax
c001a021:	74 0b                	je     c001a02e <KeCreateSymlink(char const*, char const*)+0x55>
c001a023:	83 ec 0c             	sub    esp,0xc
c001a026:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a028:	53                   	push   ebx
c001a029:	e9 f2 00 00 00       	jmp    c001a120 <KeCreateSymlink(char const*, char const*)+0x147>
c001a02e:	8d 7c 24 17          	lea    edi,[esp+0x17]
c001a032:	be a5 25 03 c0       	mov    esi,0xc00325a5
c001a037:	b9 09 00 00 00       	mov    ecx,0x9
c001a03c:	fc                   	cld    
c001a03d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a03f:	83 ec 0c             	sub    esp,0xc
c001a042:	8d 74 24 10          	lea    esi,[esp+0x10]
c001a046:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a048:	56                   	push   esi
c001a049:	8d 54 24 27          	lea    edx,[esp+0x27]
c001a04d:	52                   	push   edx
c001a04e:	6a 00                	push   0x0
c001a050:	6a 08                	push   0x8
c001a052:	53                   	push   ebx
c001a053:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a056:	83 c4 20             	add    esp,0x20
c001a059:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c001a05e:	0f 85 ae 00 00 00    	jne    c001a112 <KeCreateSymlink(char const*, char const*)+0x139>
c001a064:	85 c0                	test   eax,eax
c001a066:	0f 85 a6 00 00 00    	jne    c001a112 <KeCreateSymlink(char const*, char const*)+0x139>
c001a06c:	e8 cc f9 ff ff       	call   c0019a3d <KiCreateSymlinkID()>
c001a071:	83 ec 0c             	sub    esp,0xc
c001a074:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a078:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a07c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a07e:	56                   	push   esi
c001a07f:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a083:	52                   	push   edx
c001a084:	6a 00                	push   0x0
c001a086:	6a 08                	push   0x8
c001a088:	53                   	push   ebx
c001a089:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a08c:	83 c4 20             	add    esp,0x20
c001a08f:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c001a094:	75 7c                	jne    c001a112 <KeCreateSymlink(char const*, char const*)+0x139>
c001a096:	85 c0                	test   eax,eax
c001a098:	75 78                	jne    c001a112 <KeCreateSymlink(char const*, char const*)+0x139>
c001a09a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a09c:	83 ec 0c             	sub    esp,0xc
c001a09f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001a0a2:	55                   	push   ebp
c001a0a3:	e8 d8 64 fe ff       	call   c0000580 <strlen>
c001a0a8:	31 d2                	xor    edx,edx
c001a0aa:	89 34 24             	mov    DWORD PTR [esp],esi
c001a0ad:	55                   	push   ebp
c001a0ae:	52                   	push   edx
c001a0af:	50                   	push   eax
c001a0b0:	53                   	push   ebx
c001a0b1:	ff d7                	call   edi
c001a0b3:	83 c4 14             	add    esp,0x14
c001a0b6:	55                   	push   ebp
c001a0b7:	89 c6                	mov    esi,eax
c001a0b9:	e8 c2 64 fe ff       	call   c0000580 <strlen>
c001a0be:	83 c4 10             	add    esp,0x10
c001a0c1:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a0c5:	75 4b                	jne    c001a112 <KeCreateSymlink(char const*, char const*)+0x139>
c001a0c7:	85 f6                	test   esi,esi
c001a0c9:	75 47                	jne    c001a112 <KeCreateSymlink(char const*, char const*)+0x139>
c001a0cb:	50                   	push   eax
c001a0cc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a0d0:	55                   	push   ebp
c001a0d1:	68 73 25 03 c0       	push   0xc0032573
c001a0d6:	e8 e3 f3 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001a0db:	83 c4 0c             	add    esp,0xc
c001a0de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a0e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a0e6:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001a0ea:	e8 b9 f9 ff ff       	call   c0019aa8 <KeRegisterSymlink(char const*, unsigned long long)>
c001a0ef:	c7 04 24 98 25 03 c0 	mov    DWORD PTR [esp],0xc0032598
c001a0f6:	e8 c3 f3 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001a0fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a0fe:	e8 4f 06 00 00       	call   c001a752 <File::close()>
c001a103:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a105:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a108:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a10b:	83 c4 10             	add    esp,0x10
c001a10e:	31 c0                	xor    eax,eax
c001a110:	eb 19                	jmp    c001a12b <KeCreateSymlink(char const*, char const*)+0x152>
c001a112:	83 ec 0c             	sub    esp,0xc
c001a115:	53                   	push   ebx
c001a116:	e8 37 06 00 00       	call   c001a752 <File::close()>
c001a11b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a11d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a120:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a123:	83 c4 10             	add    esp,0x10
c001a126:	b8 01 00 00 00       	mov    eax,0x1
c001a12b:	83 c4 2c             	add    esp,0x2c
c001a12e:	5b                   	pop    ebx
c001a12f:	5e                   	pop    esi
c001a130:	5f                   	pop    edi
c001a131:	5d                   	pop    ebp
c001a132:	c3                   	ret    
c001a133:	90                   	nop

c001a134 <File::read(unsigned long long, void*, int*)>:
c001a134:	53                   	push   ebx
c001a135:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a139:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a13d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001a144:	83 f8 19             	cmp    eax,0x19
c001a147:	77 35                	ja     c001a17e <File::read(unsigned long long, void*, int*)+0x4a>
c001a149:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c001a150:	85 c0                	test   eax,eax
c001a152:	74 2a                	je     c001a17e <File::read(unsigned long long, void*, int*)+0x4a>
c001a154:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a15a:	85 c0                	test   eax,eax
c001a15c:	74 20                	je     c001a17e <File::read(unsigned long long, void*, int*)+0x4a>
c001a15e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a162:	74 21                	je     c001a185 <File::read(unsigned long long, void*, int*)+0x51>
c001a164:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a166:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a16a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001a170:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a174:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a178:	5b                   	pop    ebx
c001a179:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c001a17c:	ff e0                	jmp    eax
c001a17e:	b8 0b 00 00 00       	mov    eax,0xb
c001a183:	eb 05                	jmp    c001a18a <File::read(unsigned long long, void*, int*)+0x56>
c001a185:	b8 05 00 00 00       	mov    eax,0x5
c001a18a:	5b                   	pop    ebx
c001a18b:	c3                   	ret    

c001a18c <File::write(unsigned long long, void*, int*)>:
c001a18c:	53                   	push   ebx
c001a18d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a191:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a195:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001a19c:	83 f8 19             	cmp    eax,0x19
c001a19f:	77 35                	ja     c001a1d6 <File::write(unsigned long long, void*, int*)+0x4a>
c001a1a1:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c001a1a8:	85 c0                	test   eax,eax
c001a1aa:	74 2a                	je     c001a1d6 <File::write(unsigned long long, void*, int*)+0x4a>
c001a1ac:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a1b2:	85 c0                	test   eax,eax
c001a1b4:	74 20                	je     c001a1d6 <File::write(unsigned long long, void*, int*)+0x4a>
c001a1b6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a1ba:	74 21                	je     c001a1dd <File::write(unsigned long long, void*, int*)+0x51>
c001a1bc:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a1be:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a1c2:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001a1c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a1cc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a1d0:	5b                   	pop    ebx
c001a1d1:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001a1d4:	ff e0                	jmp    eax
c001a1d6:	b8 0b 00 00 00       	mov    eax,0xb
c001a1db:	eb 05                	jmp    c001a1e2 <File::write(unsigned long long, void*, int*)+0x56>
c001a1dd:	b8 05 00 00 00       	mov    eax,0x5
c001a1e2:	5b                   	pop    ebx
c001a1e3:	c3                   	ret    

c001a1e4 <Directory::read(unsigned long long, void*, int*)>:
c001a1e4:	53                   	push   ebx
c001a1e5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a1e9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a1ed:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001a1f4:	83 f8 19             	cmp    eax,0x19
c001a1f7:	77 35                	ja     c001a22e <Directory::read(unsigned long long, void*, int*)+0x4a>
c001a1f9:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c001a200:	85 c0                	test   eax,eax
c001a202:	74 2a                	je     c001a22e <Directory::read(unsigned long long, void*, int*)+0x4a>
c001a204:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a20a:	85 c0                	test   eax,eax
c001a20c:	74 20                	je     c001a22e <Directory::read(unsigned long long, void*, int*)+0x4a>
c001a20e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a212:	74 21                	je     c001a235 <Directory::read(unsigned long long, void*, int*)+0x51>
c001a214:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a216:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a21a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001a220:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a224:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a228:	5b                   	pop    ebx
c001a229:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c001a22c:	ff e0                	jmp    eax
c001a22e:	b8 0b 00 00 00       	mov    eax,0xb
c001a233:	eb 05                	jmp    c001a23a <Directory::read(unsigned long long, void*, int*)+0x56>
c001a235:	b8 05 00 00 00       	mov    eax,0x5
c001a23a:	5b                   	pop    ebx
c001a23b:	c3                   	ret    

c001a23c <Directory::write(unsigned long long, void*, int*)>:
c001a23c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a240:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c001a247:	b8 0b 00 00 00       	mov    eax,0xb
c001a24c:	83 fa 19             	cmp    edx,0x19
c001a24f:	77 18                	ja     c001a269 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001a251:	8b 14 95 80 03 04 c0 	mov    edx,DWORD PTR [edx*4-0x3ffbfc80]
c001a258:	85 d2                	test   edx,edx
c001a25a:	74 0d                	je     c001a269 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001a25c:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c001a263:	19 c0                	sbb    eax,eax
c001a265:	83 e0 0a             	and    eax,0xa
c001a268:	40                   	inc    eax
c001a269:	c3                   	ret    

c001a26a <File::isAtty()>:
c001a26a:	31 c0                	xor    eax,eax
c001a26c:	c3                   	ret    
c001a26d:	90                   	nop

c001a26e <Directory::isAtty()>:
c001a26e:	31 c0                	xor    eax,eax
c001a270:	c3                   	ret    
c001a271:	90                   	nop

c001a272 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a272:	b8 0a 00 00 00       	mov    eax,0xa
c001a277:	c3                   	ret    

c001a278 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001a278:	b8 0a 00 00 00       	mov    eax,0xa
c001a27d:	c3                   	ret    

c001a27e <Filesystem::allocateSwapfile(char const*, int)>:
c001a27e:	31 c0                	xor    eax,eax
c001a280:	31 d2                	xor    edx,edx
c001a282:	c3                   	ret    
c001a283:	90                   	nop

c001a284 <File::~File()>:
c001a284:	83 ec 0c             	sub    esp,0xc
c001a287:	ba 64 26 03 c0       	mov    edx,0xc0032664
c001a28c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a290:	89 10                	mov    DWORD PTR [eax],edx
c001a292:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a296:	83 ec 0c             	sub    esp,0xc
c001a299:	50                   	push   eax
c001a29a:	e8 a1 dc ff ff       	call   c0017f40 <UnixFile::~UnixFile()>
c001a29f:	83 c4 10             	add    esp,0x10
c001a2a2:	90                   	nop
c001a2a3:	83 c4 0c             	add    esp,0xc
c001a2a6:	c3                   	ret    
c001a2a7:	90                   	nop

c001a2a8 <File::~File()>:
c001a2a8:	83 ec 0c             	sub    esp,0xc
c001a2ab:	83 ec 0c             	sub    esp,0xc
c001a2ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2b2:	e8 cd ff ff ff       	call   c001a284 <File::~File()>
c001a2b7:	83 c4 10             	add    esp,0x10
c001a2ba:	83 ec 08             	sub    esp,0x8
c001a2bd:	68 14 01 00 00       	push   0x114
c001a2c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2c6:	e8 f5 f0 ff ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c001a2cb:	83 c4 10             	add    esp,0x10
c001a2ce:	83 c4 0c             	add    esp,0xc
c001a2d1:	c3                   	ret    

c001a2d2 <Directory::~Directory()>:
c001a2d2:	83 ec 0c             	sub    esp,0xc
c001a2d5:	ba 80 26 03 c0       	mov    edx,0xc0032680
c001a2da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2de:	89 10                	mov    DWORD PTR [eax],edx
c001a2e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2e4:	83 ec 0c             	sub    esp,0xc
c001a2e7:	50                   	push   eax
c001a2e8:	e8 53 dc ff ff       	call   c0017f40 <UnixFile::~UnixFile()>
c001a2ed:	83 c4 10             	add    esp,0x10
c001a2f0:	90                   	nop
c001a2f1:	83 c4 0c             	add    esp,0xc
c001a2f4:	c3                   	ret    
c001a2f5:	90                   	nop

c001a2f6 <Directory::~Directory()>:
c001a2f6:	83 ec 0c             	sub    esp,0xc
c001a2f9:	83 ec 0c             	sub    esp,0xc
c001a2fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a300:	e8 cd ff ff ff       	call   c001a2d2 <Directory::~Directory()>
c001a305:	83 c4 10             	add    esp,0x10
c001a308:	83 ec 08             	sub    esp,0x8
c001a30b:	68 14 01 00 00       	push   0x114
c001a310:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a314:	e8 a7 f0 ff ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c001a319:	83 c4 10             	add    esp,0x10
c001a31c:	83 c4 0c             	add    esp,0xc
c001a31f:	c3                   	ret    

c001a320 <Filesystem::Filesystem()>:
c001a320:	ba f8 25 03 c0       	mov    edx,0xc00325f8
c001a325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a329:	89 10                	mov    DWORD PTR [eax],edx
c001a32b:	8b 15 04 df 03 c0    	mov    edx,DWORD PTR ds:0xc003df04
c001a331:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a335:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a338:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a33c:	a3 04 df 03 c0       	mov    ds:0xc003df04,eax
c001a341:	90                   	nop
c001a342:	c3                   	ret    
c001a343:	90                   	nop

c001a344 <Filesystem::~Filesystem()>:
c001a344:	ba f8 25 03 c0       	mov    edx,0xc00325f8
c001a349:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a34d:	89 10                	mov    DWORD PTR [eax],edx
c001a34f:	90                   	nop
c001a350:	c3                   	ret    
c001a351:	90                   	nop

c001a352 <Filesystem::~Filesystem()>:
c001a352:	83 ec 0c             	sub    esp,0xc
c001a355:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a359:	e8 e6 ff ff ff       	call   c001a344 <Filesystem::~Filesystem()>
c001a35e:	83 c4 04             	add    esp,0x4
c001a361:	83 ec 08             	sub    esp,0x8
c001a364:	6a 08                	push   0x8
c001a366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a36a:	e8 51 f0 ff ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c001a36f:	83 c4 10             	add    esp,0x10
c001a372:	83 c4 0c             	add    esp,0xc
c001a375:	c3                   	ret    

c001a376 <Fs::getcwd(Process*, char*, int)>:
c001a376:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a37a:	31 c0                	xor    eax,eax
c001a37c:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001a380:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001a383:	7d 15                	jge    c001a39a <Fs::getcwd(Process*, char*, int)+0x24>
c001a385:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001a389:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001a390:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001a393:	84 c9                	test   cl,cl
c001a395:	74 06                	je     c001a39d <Fs::getcwd(Process*, char*, int)+0x27>
c001a397:	40                   	inc    eax
c001a398:	eb e2                	jmp    c001a37c <Fs::getcwd(Process*, char*, int)+0x6>
c001a39a:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001a39d:	31 c0                	xor    eax,eax
c001a39f:	c3                   	ret    

c001a3a0 <Fs::initVFS()>:
c001a3a0:	83 ec 18             	sub    esp,0x18
c001a3a3:	6a 08                	push   0x8
c001a3a5:	e8 de c2 ff ff       	call   c0016688 <malloc>
c001a3aa:	89 04 24             	mov    DWORD PTR [esp],eax
c001a3ad:	e8 5a ec 00 00       	call   c002900c <FAT::FAT()>
c001a3b2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001a3b9:	e8 ca c2 ff ff       	call   c0016688 <malloc>
c001a3be:	89 04 24             	mov    DWORD PTR [esp],eax
c001a3c1:	e8 74 fb 00 00       	call   c0029f3a <ISO9660::ISO9660()>
c001a3c6:	83 c4 1c             	add    esp,0x1c
c001a3c9:	c3                   	ret    

c001a3ca <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c001a3ca:	55                   	push   ebp
c001a3cb:	57                   	push   edi
c001a3cc:	56                   	push   esi
c001a3cd:	53                   	push   ebx
c001a3ce:	81 ec 20 04 00 00    	sub    esp,0x420
c001a3d4:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c001a3db:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c001a3e2:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c001a3e9:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c001a3f0:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001a3f4:	68 00 04 00 00       	push   0x400
c001a3f9:	6a 00                	push   0x0
c001a3fb:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a3ff:	57                   	push   edi
c001a400:	e8 eb 60 fe ff       	call   c00004f0 <memset>
c001a405:	83 c4 10             	add    esp,0x10
c001a408:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c001a40c:	75 0b                	jne    c001a419 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c001a40e:	50                   	push   eax
c001a40f:	50                   	push   eax
c001a410:	56                   	push   esi
c001a411:	57                   	push   edi
c001a412:	e8 39 62 fe ff       	call   c0000650 <strcpy>
c001a417:	eb 45                	jmp    c001a45e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c001a419:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a41c:	83 f8 2f             	cmp    eax,0x2f
c001a41f:	74 05                	je     c001a426 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c001a421:	83 f8 5c             	cmp    eax,0x5c
c001a424:	75 19                	jne    c001a43f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c001a426:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001a429:	3c 60                	cmp    al,0x60
c001a42b:	7e 03                	jle    c001a430 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c001a42d:	83 e8 20             	sub    eax,0x20
c001a430:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001a434:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c001a43b:	50                   	push   eax
c001a43c:	50                   	push   eax
c001a43d:	eb 18                	jmp    c001a457 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c001a43f:	50                   	push   eax
c001a440:	50                   	push   eax
c001a441:	55                   	push   ebp
c001a442:	57                   	push   edi
c001a443:	e8 08 62 fe ff       	call   c0000650 <strcpy>
c001a448:	58                   	pop    eax
c001a449:	5a                   	pop    edx
c001a44a:	68 3f 37 03 c0       	push   0xc003373f
c001a44f:	57                   	push   edi
c001a450:	e8 1b 64 fe ff       	call   c0000870 <strcat>
c001a455:	59                   	pop    ecx
c001a456:	5d                   	pop    ebp
c001a457:	56                   	push   esi
c001a458:	57                   	push   edi
c001a459:	e8 12 64 fe ff       	call   c0000870 <strcat>
c001a45e:	83 c4 10             	add    esp,0x10
c001a461:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a465:	3c 60                	cmp    al,0x60
c001a467:	7e 03                	jle    c001a46c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c001a469:	83 e8 20             	sub    eax,0x20
c001a46c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001a470:	be 03 00 00 00       	mov    esi,0x3
c001a475:	88 03                	mov    BYTE PTR [ebx],al
c001a477:	b8 03 00 00 00       	mov    eax,0x3
c001a47c:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c001a483:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001a489:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001a48d:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c001a492:	89 fa                	mov    edx,edi
c001a494:	0f be ea             	movsx  ebp,dl
c001a497:	85 ed                	test   ebp,ebp
c001a499:	0f 84 a1 00 00 00    	je     c001a540 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c001a49f:	8d 56 01             	lea    edx,[esi+0x1]
c001a4a2:	83 fd 2f             	cmp    ebp,0x2f
c001a4a5:	74 05                	je     c001a4ac <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c001a4a7:	83 fd 5c             	cmp    ebp,0x5c
c001a4aa:	75 12                	jne    c001a4be <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c001a4ac:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001a4b1:	89 c5                	mov    ebp,eax
c001a4b3:	74 09                	je     c001a4be <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c001a4b5:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c001a4b9:	40                   	inc    eax
c001a4ba:	89 d6                	mov    esi,edx
c001a4bc:	eb cf                	jmp    c001a48d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c001a4be:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c001a4c3:	89 f9                	mov    ecx,edi
c001a4c5:	0f be e9             	movsx  ebp,cl
c001a4c8:	75 61                	jne    c001a52b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c001a4ca:	83 fd 2e             	cmp    ebp,0x2e
c001a4cd:	75 5c                	jne    c001a52b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c001a4cf:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c001a4d4:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c001a4d9:	74 19                	je     c001a4f4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c001a4db:	83 fd 2e             	cmp    ebp,0x2e
c001a4de:	74 55                	je     c001a535 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c001a4e0:	89 f2                	mov    edx,esi
c001a4e2:	42                   	inc    edx
c001a4e3:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c001a4e8:	83 f9 2f             	cmp    ecx,0x2f
c001a4eb:	74 f5                	je     c001a4e2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c001a4ed:	83 f9 5c             	cmp    ecx,0x5c
c001a4f0:	74 f0                	je     c001a4e2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c001a4f2:	eb c6                	jmp    c001a4ba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a4f4:	83 fd 2e             	cmp    ebp,0x2e
c001a4f7:	74 3c                	je     c001a535 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c001a4f9:	83 f8 03             	cmp    eax,0x3
c001a4fc:	74 bc                	je     c001a4ba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a4fe:	42                   	inc    edx
c001a4ff:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c001a504:	83 f9 2f             	cmp    ecx,0x2f
c001a507:	74 f5                	je     c001a4fe <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c001a509:	83 f9 5c             	cmp    ecx,0x5c
c001a50c:	74 f0                	je     c001a4fe <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c001a50e:	48                   	dec    eax
c001a50f:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001a513:	75 06                	jne    c001a51b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c001a515:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001a519:	eb f3                	jmp    c001a50e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c001a51b:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001a51f:	74 07                	je     c001a528 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c001a521:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001a525:	48                   	dec    eax
c001a526:	eb f3                	jmp    c001a51b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c001a528:	40                   	inc    eax
c001a529:	eb 8f                	jmp    c001a4ba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a52b:	83 fd 2f             	cmp    ebp,0x2f
c001a52e:	74 8a                	je     c001a4ba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a530:	83 fd 5c             	cmp    ebp,0x5c
c001a533:	74 85                	je     c001a4ba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a535:	89 f9                	mov    ecx,edi
c001a537:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a53a:	40                   	inc    eax
c001a53b:	e9 7a ff ff ff       	jmp    c001a4ba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a540:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001a544:	83 ec 0c             	sub    esp,0xc
c001a547:	53                   	push   ebx
c001a548:	e8 33 60 fe ff       	call   c0000580 <strlen>
c001a54d:	83 c4 10             	add    esp,0x10
c001a550:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001a555:	74 1c                	je     c001a573 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c001a557:	83 ec 0c             	sub    esp,0xc
c001a55a:	53                   	push   ebx
c001a55b:	e8 20 60 fe ff       	call   c0000580 <strlen>
c001a560:	83 c4 10             	add    esp,0x10
c001a563:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001a568:	74 09                	je     c001a573 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c001a56a:	31 ff                	xor    edi,edi
c001a56c:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c001a571:	eb 5c                	jmp    c001a5cf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c001a573:	83 ec 0c             	sub    esp,0xc
c001a576:	53                   	push   ebx
c001a577:	e8 04 60 fe ff       	call   c0000580 <strlen>
c001a57c:	83 c4 10             	add    esp,0x10
c001a57f:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001a584:	74 e4                	je     c001a56a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c001a586:	83 ec 0c             	sub    esp,0xc
c001a589:	53                   	push   ebx
c001a58a:	e8 f1 5f fe ff       	call   c0000580 <strlen>
c001a58f:	83 c4 10             	add    esp,0x10
c001a592:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a597:	eb ab                	jmp    c001a544 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c001a599:	52                   	push   edx
c001a59a:	52                   	push   edx
c001a59b:	53                   	push   ebx
c001a59c:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001a5a0:	55                   	push   ebp
c001a5a1:	e8 aa 60 fe ff       	call   c0000650 <strcpy>
c001a5a6:	59                   	pop    ecx
c001a5a7:	58                   	pop    eax
c001a5a8:	53                   	push   ebx
c001a5a9:	55                   	push   ebp
c001a5aa:	e8 83 f8 ff ff       	call   c0019e32 <KeDereferenceSymlink(char const*, char*)>
c001a5af:	83 c4 10             	add    esp,0x10
c001a5b2:	48                   	dec    eax
c001a5b3:	75 37                	jne    c001a5ec <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c001a5b5:	50                   	push   eax
c001a5b6:	53                   	push   ebx
c001a5b7:	55                   	push   ebp
c001a5b8:	68 ae 25 03 c0       	push   0xc00325ae
c001a5bd:	e8 fc ee ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001a5c2:	8d 47 01             	lea    eax,[edi+0x1]
c001a5c5:	83 c4 10             	add    esp,0x10
c001a5c8:	83 ff 14             	cmp    edi,0x14
c001a5cb:	74 08                	je     c001a5d5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c001a5cd:	89 c7                	mov    edi,eax
c001a5cf:	85 f6                	test   esi,esi
c001a5d1:	75 c6                	jne    c001a599 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c001a5d3:	eb 17                	jmp    c001a5ec <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c001a5d5:	83 ec 0c             	sub    esp,0xc
c001a5d8:	bf 15 00 00 00       	mov    edi,0x15
c001a5dd:	68 c9 25 03 c0       	push   0xc00325c9
c001a5e2:	e8 1b 61 00 00       	call   c0020702 <KePanic(char const*)>
c001a5e7:	83 c4 10             	add    esp,0x10
c001a5ea:	eb e3                	jmp    c001a5cf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c001a5ec:	81 c4 1c 04 00 00    	add    esp,0x41c
c001a5f2:	5b                   	pop    ebx
c001a5f3:	5e                   	pop    esi
c001a5f4:	5f                   	pop    edi
c001a5f5:	5d                   	pop    ebp
c001a5f6:	c3                   	ret    
c001a5f7:	90                   	nop

c001a5f8 <File::File(char const*, Process*, bool)>:
c001a5f8:	83 ec 1c             	sub    esp,0x1c
c001a5fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a5ff:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a603:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a607:	83 ec 08             	sub    esp,0x8
c001a60a:	6a 00                	push   0x0
c001a60c:	50                   	push   eax
c001a60d:	e8 48 d7 ff ff       	call   c0017d5a <UnixFile::UnixFile(int)>
c001a612:	83 c4 10             	add    esp,0x10
c001a615:	ba 64 26 03 c0       	mov    edx,0xc0032664
c001a61a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a61e:	89 10                	mov    DWORD PTR [eax],edx
c001a620:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a625:	85 c0                	test   eax,eax
c001a627:	74 0f                	je     c001a638 <File::File(char const*, Process*, bool)+0x40>
c001a629:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c001a62e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a632:	74 04                	je     c001a638 <File::File(char const*, Process*, bool)+0x40>
c001a634:	b0 01                	mov    al,0x1
c001a636:	eb 02                	jmp    c001a63a <File::File(char const*, Process*, bool)+0x42>
c001a638:	b0 00                	mov    al,0x0
c001a63a:	0f b6 c0             	movzx  eax,al
c001a63d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a641:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001a647:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a64b:	83 c2 0d             	add    edx,0xd
c001a64e:	50                   	push   eax
c001a64f:	51                   	push   ecx
c001a650:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a654:	52                   	push   edx
c001a655:	e8 70 fd ff ff       	call   c001a3ca <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a65a:	83 c4 10             	add    esp,0x10
c001a65d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a661:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001a664:	83 e8 41             	sub    eax,0x41
c001a667:	88 c2                	mov    dl,al
c001a669:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a66d:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001a673:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a677:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001a67b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a67f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a685:	0f b6 c0             	movzx  eax,al
c001a688:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c001a68f:	85 c0                	test   eax,eax
c001a691:	74 3e                	je     c001a6d1 <File::File(char const*, Process*, bool)+0xd9>
c001a693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a697:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a69d:	0f b6 c0             	movzx  eax,al
c001a6a0:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c001a6a7:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a6ad:	85 c0                	test   eax,eax
c001a6af:	75 20                	jne    c001a6d1 <File::File(char const*, Process*, bool)+0xd9>
c001a6b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6b5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a6bb:	0f b6 c0             	movzx  eax,al
c001a6be:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c001a6c5:	83 ec 0c             	sub    esp,0xc
c001a6c8:	50                   	push   eax
c001a6c9:	e8 72 22 00 00       	call   c001c940 <LogicalDisk::mount()>
c001a6ce:	83 c4 10             	add    esp,0x10
c001a6d1:	90                   	nop
c001a6d2:	83 c4 1c             	add    esp,0x1c
c001a6d5:	c3                   	ret    

c001a6d6 <File::File(char const*, Process*)>:
c001a6d6:	83 ec 0c             	sub    esp,0xc
c001a6d9:	6a 01                	push   0x1
c001a6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6e7:	e8 0c ff ff ff       	call   c001a5f8 <File::File(char const*, Process*, bool)>
c001a6ec:	83 c4 10             	add    esp,0x10
c001a6ef:	90                   	nop
c001a6f0:	83 c4 0c             	add    esp,0xc
c001a6f3:	c3                   	ret    

c001a6f4 <File::open(FileOpenMode)>:
c001a6f4:	53                   	push   ebx
c001a6f5:	b8 0b 00 00 00       	mov    eax,0xb
c001a6fa:	83 ec 08             	sub    esp,0x8
c001a6fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a701:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001a708:	83 fa 19             	cmp    edx,0x19
c001a70b:	77 40                	ja     c001a74d <File::open(FileOpenMode)+0x59>
c001a70d:	8b 14 95 80 03 04 c0 	mov    edx,DWORD PTR [edx*4-0x3ffbfc80]
c001a714:	85 d2                	test   edx,edx
c001a716:	74 35                	je     c001a74d <File::open(FileOpenMode)+0x59>
c001a718:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a71e:	85 d2                	test   edx,edx
c001a720:	74 2b                	je     c001a74d <File::open(FileOpenMode)+0x59>
c001a722:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001a726:	b8 06 00 00 00       	mov    eax,0x6
c001a72b:	75 20                	jne    c001a74d <File::open(FileOpenMode)+0x59>
c001a72d:	8b 02                	mov    eax,DWORD PTR [edx]
c001a72f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001a735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a739:	51                   	push   ecx
c001a73a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001a73d:	51                   	push   ecx
c001a73e:	52                   	push   edx
c001a73f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a742:	83 c4 10             	add    esp,0x10
c001a745:	85 c0                	test   eax,eax
c001a747:	75 04                	jne    c001a74d <File::open(FileOpenMode)+0x59>
c001a749:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001a74d:	83 c4 08             	add    esp,0x8
c001a750:	5b                   	pop    ebx
c001a751:	c3                   	ret    

c001a752 <File::close()>:
c001a752:	53                   	push   ebx
c001a753:	b8 0b 00 00 00       	mov    eax,0xb
c001a758:	83 ec 08             	sub    esp,0x8
c001a75b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a75f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a766:	83 f9 19             	cmp    ecx,0x19
c001a769:	77 41                	ja     c001a7ac <File::close()+0x5a>
c001a76b:	8b 1c 8d 80 03 04 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffbfc80]
c001a772:	85 db                	test   ebx,ebx
c001a774:	74 36                	je     c001a7ac <File::close()+0x5a>
c001a776:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001a77d:	74 2d                	je     c001a7ac <File::close()+0x5a>
c001a77f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a783:	b8 05 00 00 00       	mov    eax,0x5
c001a788:	74 22                	je     c001a7ac <File::close()+0x5a>
c001a78a:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001a78e:	8b 04 8d 80 03 04 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffbfc80]
c001a795:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a79b:	53                   	push   ebx
c001a79c:	53                   	push   ebx
c001a79d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a79f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a7a5:	50                   	push   eax
c001a7a6:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c001a7a9:	83 c4 10             	add    esp,0x10
c001a7ac:	83 c4 08             	add    esp,0x8
c001a7af:	5b                   	pop    ebx
c001a7b0:	c3                   	ret    
c001a7b1:	90                   	nop

c001a7b2 <File::seek(unsigned long long)>:
c001a7b2:	56                   	push   esi
c001a7b3:	b8 0b 00 00 00       	mov    eax,0xb
c001a7b8:	53                   	push   ebx
c001a7b9:	51                   	push   ecx
c001a7ba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a7be:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a7c2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a7c6:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a7cd:	83 fa 19             	cmp    edx,0x19
c001a7d0:	77 31                	ja     c001a803 <File::seek(unsigned long long)+0x51>
c001a7d2:	8b 14 95 80 03 04 c0 	mov    edx,DWORD PTR [edx*4-0x3ffbfc80]
c001a7d9:	85 d2                	test   edx,edx
c001a7db:	74 26                	je     c001a803 <File::seek(unsigned long long)+0x51>
c001a7dd:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a7e3:	85 d2                	test   edx,edx
c001a7e5:	74 1c                	je     c001a803 <File::seek(unsigned long long)+0x51>
c001a7e7:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a7eb:	b8 05 00 00 00       	mov    eax,0x5
c001a7f0:	74 11                	je     c001a803 <File::seek(unsigned long long)+0x51>
c001a7f2:	8b 02                	mov    eax,DWORD PTR [edx]
c001a7f4:	53                   	push   ebx
c001a7f5:	51                   	push   ecx
c001a7f6:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a7fc:	52                   	push   edx
c001a7fd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a800:	83 c4 10             	add    esp,0x10
c001a803:	5a                   	pop    edx
c001a804:	5b                   	pop    ebx
c001a805:	5e                   	pop    esi
c001a806:	c3                   	ret    
c001a807:	90                   	nop

c001a808 <File::truncate(unsigned long long)>:
c001a808:	56                   	push   esi
c001a809:	b8 0b 00 00 00       	mov    eax,0xb
c001a80e:	53                   	push   ebx
c001a80f:	51                   	push   ecx
c001a810:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a814:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a818:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a81c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a823:	83 fa 19             	cmp    edx,0x19
c001a826:	77 31                	ja     c001a859 <File::truncate(unsigned long long)+0x51>
c001a828:	8b 14 95 80 03 04 c0 	mov    edx,DWORD PTR [edx*4-0x3ffbfc80]
c001a82f:	85 d2                	test   edx,edx
c001a831:	74 26                	je     c001a859 <File::truncate(unsigned long long)+0x51>
c001a833:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a839:	85 d2                	test   edx,edx
c001a83b:	74 1c                	je     c001a859 <File::truncate(unsigned long long)+0x51>
c001a83d:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a841:	b8 05 00 00 00       	mov    eax,0x5
c001a846:	74 11                	je     c001a859 <File::truncate(unsigned long long)+0x51>
c001a848:	8b 02                	mov    eax,DWORD PTR [edx]
c001a84a:	53                   	push   ebx
c001a84b:	51                   	push   ecx
c001a84c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a852:	52                   	push   edx
c001a853:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001a856:	83 c4 10             	add    esp,0x10
c001a859:	5a                   	pop    edx
c001a85a:	5b                   	pop    ebx
c001a85b:	5e                   	pop    esi
c001a85c:	c3                   	ret    
c001a85d:	90                   	nop

c001a85e <File::tell(unsigned long long*)>:
c001a85e:	83 ec 0c             	sub    esp,0xc
c001a861:	b8 0b 00 00 00       	mov    eax,0xb
c001a866:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a86a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001a871:	83 fa 19             	cmp    edx,0x19
c001a874:	77 34                	ja     c001a8aa <File::tell(unsigned long long*)+0x4c>
c001a876:	8b 14 95 80 03 04 c0 	mov    edx,DWORD PTR [edx*4-0x3ffbfc80]
c001a87d:	85 d2                	test   edx,edx
c001a87f:	74 29                	je     c001a8aa <File::tell(unsigned long long*)+0x4c>
c001a881:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a887:	85 d2                	test   edx,edx
c001a889:	74 1f                	je     c001a8aa <File::tell(unsigned long long*)+0x4c>
c001a88b:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001a88f:	b8 05 00 00 00       	mov    eax,0x5
c001a894:	74 14                	je     c001a8aa <File::tell(unsigned long long*)+0x4c>
c001a896:	50                   	push   eax
c001a897:	8b 02                	mov    eax,DWORD PTR [edx]
c001a899:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a89d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001a8a3:	52                   	push   edx
c001a8a4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a8a7:	83 c4 10             	add    esp,0x10
c001a8aa:	83 c4 0c             	add    esp,0xc
c001a8ad:	c3                   	ret    

c001a8ae <File::rewind()>:
c001a8ae:	83 ec 10             	sub    esp,0x10
c001a8b1:	6a 00                	push   0x0
c001a8b3:	6a 00                	push   0x0
c001a8b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a8b9:	e8 f4 fe ff ff       	call   c001a7b2 <File::seek(unsigned long long)>
c001a8be:	83 c4 1c             	add    esp,0x1c
c001a8c1:	c3                   	ret    

c001a8c2 <File::unlink()>:
c001a8c2:	83 ec 0c             	sub    esp,0xc
c001a8c5:	b8 0b 00 00 00       	mov    eax,0xb
c001a8ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a8ce:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a8d5:	83 f9 19             	cmp    ecx,0x19
c001a8d8:	77 2f                	ja     c001a909 <File::unlink()+0x47>
c001a8da:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c001a8e1:	85 c9                	test   ecx,ecx
c001a8e3:	74 24                	je     c001a909 <File::unlink()+0x47>
c001a8e5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a8eb:	85 c9                	test   ecx,ecx
c001a8ed:	74 1a                	je     c001a909 <File::unlink()+0x47>
c001a8ef:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a8f3:	b8 06 00 00 00       	mov    eax,0x6
c001a8f8:	75 0f                	jne    c001a909 <File::unlink()+0x47>
c001a8fa:	50                   	push   eax
c001a8fb:	83 c2 0d             	add    edx,0xd
c001a8fe:	50                   	push   eax
c001a8ff:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a901:	52                   	push   edx
c001a902:	51                   	push   ecx
c001a903:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001a906:	83 c4 10             	add    esp,0x10
c001a909:	83 c4 0c             	add    esp,0xc
c001a90c:	c3                   	ret    
c001a90d:	90                   	nop

c001a90e <File::rename(char const*)>:
c001a90e:	83 ec 0c             	sub    esp,0xc
c001a911:	b8 0b 00 00 00       	mov    eax,0xb
c001a916:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a91a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a921:	83 f9 19             	cmp    ecx,0x19
c001a924:	77 32                	ja     c001a958 <File::rename(char const*)+0x4a>
c001a926:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c001a92d:	85 c9                	test   ecx,ecx
c001a92f:	74 27                	je     c001a958 <File::rename(char const*)+0x4a>
c001a931:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a937:	85 c9                	test   ecx,ecx
c001a939:	74 1d                	je     c001a958 <File::rename(char const*)+0x4a>
c001a93b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a93f:	b8 06 00 00 00       	mov    eax,0x6
c001a944:	75 12                	jne    c001a958 <File::rename(char const*)+0x4a>
c001a946:	50                   	push   eax
c001a947:	83 c2 0d             	add    edx,0xd
c001a94a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a94c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a950:	52                   	push   edx
c001a951:	51                   	push   ecx
c001a952:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001a955:	83 c4 10             	add    esp,0x10
c001a958:	83 c4 0c             	add    esp,0xc
c001a95b:	c3                   	ret    

c001a95c <File::chfatattr(unsigned char, unsigned char)>:
c001a95c:	57                   	push   edi
c001a95d:	b8 0b 00 00 00       	mov    eax,0xb
c001a962:	56                   	push   esi
c001a963:	53                   	push   ebx
c001a964:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a968:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a96c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a970:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a977:	83 f9 19             	cmp    ecx,0x19
c001a97a:	77 37                	ja     c001a9b3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a97c:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c001a983:	85 c9                	test   ecx,ecx
c001a985:	74 2c                	je     c001a9b3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a987:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a98d:	85 c9                	test   ecx,ecx
c001a98f:	74 22                	je     c001a9b3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a991:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a995:	b8 06 00 00 00       	mov    eax,0x6
c001a99a:	75 17                	jne    c001a9b3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a99c:	89 f0                	mov    eax,esi
c001a99e:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a9a0:	0f b6 db             	movzx  ebx,bl
c001a9a3:	0f b6 f0             	movzx  esi,al
c001a9a6:	83 c2 0d             	add    edx,0xd
c001a9a9:	56                   	push   esi
c001a9aa:	53                   	push   ebx
c001a9ab:	52                   	push   edx
c001a9ac:	51                   	push   ecx
c001a9ad:	ff 57 38             	call   DWORD PTR [edi+0x38]
c001a9b0:	83 c4 10             	add    esp,0x10
c001a9b3:	5b                   	pop    ebx
c001a9b4:	5e                   	pop    esi
c001a9b5:	5f                   	pop    edi
c001a9b6:	c3                   	ret    
c001a9b7:	90                   	nop

c001a9b8 <File::exists()>:
c001a9b8:	83 ec 0c             	sub    esp,0xc
c001a9bb:	31 c0                	xor    eax,eax
c001a9bd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a9c1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a9c8:	83 f9 19             	cmp    ecx,0x19
c001a9cb:	77 24                	ja     c001a9f1 <File::exists()+0x39>
c001a9cd:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c001a9d4:	85 c9                	test   ecx,ecx
c001a9d6:	74 19                	je     c001a9f1 <File::exists()+0x39>
c001a9d8:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a9de:	85 c9                	test   ecx,ecx
c001a9e0:	74 0f                	je     c001a9f1 <File::exists()+0x39>
c001a9e2:	50                   	push   eax
c001a9e3:	83 c2 0d             	add    edx,0xd
c001a9e6:	50                   	push   eax
c001a9e7:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a9e9:	52                   	push   edx
c001a9ea:	51                   	push   ecx
c001a9eb:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001a9ee:	83 c4 10             	add    esp,0x10
c001a9f1:	83 c4 0c             	add    esp,0xc
c001a9f4:	c3                   	ret    
c001a9f5:	90                   	nop

c001a9f6 <File::stat(unsigned long long*, bool*)>:
c001a9f6:	56                   	push   esi
c001a9f7:	53                   	push   ebx
c001a9f8:	50                   	push   eax
c001a9f9:	b8 0b 00 00 00       	mov    eax,0xb
c001a9fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aa02:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aa06:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aa0a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aa11:	83 f9 19             	cmp    ecx,0x19
c001aa14:	77 3d                	ja     c001aa53 <File::stat(unsigned long long*, bool*)+0x5d>
c001aa16:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c001aa1d:	85 c9                	test   ecx,ecx
c001aa1f:	74 32                	je     c001aa53 <File::stat(unsigned long long*, bool*)+0x5d>
c001aa21:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001aa27:	85 c9                	test   ecx,ecx
c001aa29:	74 28                	je     c001aa53 <File::stat(unsigned long long*, bool*)+0x5d>
c001aa2b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001aa2f:	8b 01                	mov    eax,DWORD PTR [ecx]
c001aa31:	74 13                	je     c001aa46 <File::stat(unsigned long long*, bool*)+0x50>
c001aa33:	83 ec 04             	sub    esp,0x4
c001aa36:	56                   	push   esi
c001aa37:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001aa3d:	51                   	push   ecx
c001aa3e:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001aa41:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001aa44:	eb 0a                	jmp    c001aa50 <File::stat(unsigned long long*, bool*)+0x5a>
c001aa46:	53                   	push   ebx
c001aa47:	83 c2 0d             	add    edx,0xd
c001aa4a:	56                   	push   esi
c001aa4b:	52                   	push   edx
c001aa4c:	51                   	push   ecx
c001aa4d:	ff 50 34             	call   DWORD PTR [eax+0x34]
c001aa50:	83 c4 10             	add    esp,0x10
c001aa53:	5a                   	pop    edx
c001aa54:	5b                   	pop    ebx
c001aa55:	5e                   	pop    esi
c001aa56:	c3                   	ret    

c001aa57 <Fs::setcwd(Process*, char*)>:
c001aa57:	55                   	push   ebp
c001aa58:	57                   	push   edi
c001aa59:	56                   	push   esi
c001aa5a:	53                   	push   ebx
c001aa5b:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001aa61:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c001aa68:	6a 00                	push   0x0
c001aa6a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001aa70:	57                   	push   edi
c001aa71:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aa78:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001aa7c:	56                   	push   esi
c001aa7d:	e8 48 f9 ff ff       	call   c001a3ca <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001aa82:	89 34 24             	mov    DWORD PTR [esp],esi
c001aa85:	e8 f6 5a fe ff       	call   c0000580 <strlen>
c001aa8a:	83 c4 10             	add    esp,0x10
c001aa8d:	83 f8 02             	cmp    eax,0x2
c001aa90:	77 15                	ja     c001aaa7 <Fs::setcwd(Process*, char*)+0x50>
c001aa92:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c001aa97:	83 eb 41             	sub    ebx,0x41
c001aa9a:	8b 04 9d 80 03 04 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffbfc80]
c001aaa1:	85 c0                	test   eax,eax
c001aaa3:	75 1c                	jne    c001aac1 <Fs::setcwd(Process*, char*)+0x6a>
c001aaa5:	eb 2f                	jmp    c001aad6 <Fs::setcwd(Process*, char*)+0x7f>
c001aaa7:	83 ec 0c             	sub    esp,0xc
c001aaaa:	56                   	push   esi
c001aaab:	e8 d0 5a fe ff       	call   c0000580 <strlen>
c001aab0:	83 c4 10             	add    esp,0x10
c001aab3:	83 f8 03             	cmp    eax,0x3
c001aab6:	75 57                	jne    c001ab0f <Fs::setcwd(Process*, char*)+0xb8>
c001aab8:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001aabd:	75 50                	jne    c001ab0f <Fs::setcwd(Process*, char*)+0xb8>
c001aabf:	eb d1                	jmp    c001aa92 <Fs::setcwd(Process*, char*)+0x3b>
c001aac1:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c001aac8:	75 0c                	jne    c001aad6 <Fs::setcwd(Process*, char*)+0x7f>
c001aaca:	83 ec 0c             	sub    esp,0xc
c001aacd:	50                   	push   eax
c001aace:	e8 6d 1e 00 00       	call   c001c940 <LogicalDisk::mount()>
c001aad3:	83 c4 10             	add    esp,0x10
c001aad6:	83 fb 19             	cmp    ebx,0x19
c001aad9:	b8 03 00 00 00       	mov    eax,0x3
c001aade:	0f 87 c6 00 00 00    	ja     c001abaa <Fs::setcwd(Process*, char*)+0x153>
c001aae4:	8b 14 9d 80 03 04 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffbfc80]
c001aaeb:	b8 05 00 00 00       	mov    eax,0x5
c001aaf0:	85 d2                	test   edx,edx
c001aaf2:	0f 84 b2 00 00 00    	je     c001abaa <Fs::setcwd(Process*, char*)+0x153>
c001aaf8:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c001aaff:	b8 06 00 00 00       	mov    eax,0x6
c001ab04:	0f 85 92 00 00 00    	jne    c001ab9c <Fs::setcwd(Process*, char*)+0x145>
c001ab0a:	e9 9b 00 00 00       	jmp    c001abaa <Fs::setcwd(Process*, char*)+0x153>
c001ab0f:	83 ec 0c             	sub    esp,0xc
c001ab12:	68 14 01 00 00       	push   0x114
c001ab17:	e8 6c bb ff ff       	call   c0016688 <malloc>
c001ab1c:	83 c4 0c             	add    esp,0xc
c001ab1f:	55                   	push   ebp
c001ab20:	56                   	push   esi
c001ab21:	50                   	push   eax
c001ab22:	89 c3                	mov    ebx,eax
c001ab24:	e8 ad fb ff ff       	call   c001a6d6 <File::File(char const*, Process*)>
c001ab29:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001ab2e:	83 c4 0c             	add    esp,0xc
c001ab31:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001ab35:	50                   	push   eax
c001ab36:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ab3a:	50                   	push   eax
c001ab3b:	53                   	push   ebx
c001ab3c:	e8 b5 fe ff ff       	call   c001a9f6 <File::stat(unsigned long long*, bool*)>
c001ab41:	83 c4 10             	add    esp,0x10
c001ab44:	83 f8 02             	cmp    eax,0x2
c001ab47:	74 27                	je     c001ab70 <Fs::setcwd(Process*, char*)+0x119>
c001ab49:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001ab4e:	75 1c                	jne    c001ab6c <Fs::setcwd(Process*, char*)+0x115>
c001ab50:	85 db                	test   ebx,ebx
c001ab52:	b8 02 00 00 00       	mov    eax,0x2
c001ab57:	74 51                	je     c001abaa <Fs::setcwd(Process*, char*)+0x153>
c001ab59:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab5b:	83 ec 0c             	sub    esp,0xc
c001ab5e:	53                   	push   ebx
c001ab5f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab62:	83 c4 10             	add    esp,0x10
c001ab65:	b8 02 00 00 00       	mov    eax,0x2
c001ab6a:	eb 3e                	jmp    c001abaa <Fs::setcwd(Process*, char*)+0x153>
c001ab6c:	85 c0                	test   eax,eax
c001ab6e:	74 1c                	je     c001ab8c <Fs::setcwd(Process*, char*)+0x135>
c001ab70:	85 db                	test   ebx,ebx
c001ab72:	b8 01 00 00 00       	mov    eax,0x1
c001ab77:	74 31                	je     c001abaa <Fs::setcwd(Process*, char*)+0x153>
c001ab79:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab7b:	83 ec 0c             	sub    esp,0xc
c001ab7e:	53                   	push   ebx
c001ab7f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab82:	83 c4 10             	add    esp,0x10
c001ab85:	b8 01 00 00 00       	mov    eax,0x1
c001ab8a:	eb 1e                	jmp    c001abaa <Fs::setcwd(Process*, char*)+0x153>
c001ab8c:	85 db                	test   ebx,ebx
c001ab8e:	74 0c                	je     c001ab9c <Fs::setcwd(Process*, char*)+0x145>
c001ab90:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab92:	83 ec 0c             	sub    esp,0xc
c001ab95:	53                   	push   ebx
c001ab96:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab99:	83 c4 10             	add    esp,0x10
c001ab9c:	50                   	push   eax
c001ab9d:	50                   	push   eax
c001ab9e:	56                   	push   esi
c001ab9f:	57                   	push   edi
c001aba0:	e8 ab 5a fe ff       	call   c0000650 <strcpy>
c001aba5:	83 c4 10             	add    esp,0x10
c001aba8:	31 c0                	xor    eax,eax
c001abaa:	81 c4 1c 02 00 00    	add    esp,0x21c
c001abb0:	5b                   	pop    ebx
c001abb1:	5e                   	pop    esi
c001abb2:	5f                   	pop    edi
c001abb3:	5d                   	pop    ebp
c001abb4:	c3                   	ret    
c001abb5:	90                   	nop

c001abb6 <Directory::Directory(char const*, Process*)>:
c001abb6:	83 ec 0c             	sub    esp,0xc
c001abb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abbd:	83 ec 08             	sub    esp,0x8
c001abc0:	6a 00                	push   0x0
c001abc2:	50                   	push   eax
c001abc3:	e8 92 d1 ff ff       	call   c0017d5a <UnixFile::UnixFile(int)>
c001abc8:	83 c4 10             	add    esp,0x10
c001abcb:	ba 80 26 03 c0       	mov    edx,0xc0032680
c001abd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abd4:	89 10                	mov    DWORD PTR [eax],edx
c001abd6:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c001abdb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001abdf:	0f 95 c0             	setne  al
c001abe2:	0f b6 c0             	movzx  eax,al
c001abe5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001abe9:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001abef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001abf3:	83 c2 0d             	add    edx,0xd
c001abf6:	50                   	push   eax
c001abf7:	51                   	push   ecx
c001abf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abfc:	52                   	push   edx
c001abfd:	e8 c8 f7 ff ff       	call   c001a3ca <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001ac02:	83 c4 10             	add    esp,0x10
c001ac05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac09:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001ac0c:	83 e8 41             	sub    eax,0x41
c001ac0f:	88 c2                	mov    dl,al
c001ac11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac15:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001ac1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac1f:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001ac23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac27:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001ac2d:	0f b6 c0             	movzx  eax,al
c001ac30:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c001ac37:	85 c0                	test   eax,eax
c001ac39:	74 3e                	je     c001ac79 <Directory::Directory(char const*, Process*)+0xc3>
c001ac3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac3f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001ac45:	0f b6 c0             	movzx  eax,al
c001ac48:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c001ac4f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001ac55:	85 c0                	test   eax,eax
c001ac57:	75 20                	jne    c001ac79 <Directory::Directory(char const*, Process*)+0xc3>
c001ac59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac5d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001ac63:	0f b6 c0             	movzx  eax,al
c001ac66:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c001ac6d:	83 ec 0c             	sub    esp,0xc
c001ac70:	50                   	push   eax
c001ac71:	e8 ca 1c 00 00       	call   c001c940 <LogicalDisk::mount()>
c001ac76:	83 c4 10             	add    esp,0x10
c001ac79:	90                   	nop
c001ac7a:	83 c4 0c             	add    esp,0xc
c001ac7d:	c3                   	ret    

c001ac7e <Directory::open()>:
c001ac7e:	53                   	push   ebx
c001ac7f:	b8 0b 00 00 00       	mov    eax,0xb
c001ac84:	83 ec 08             	sub    esp,0x8
c001ac87:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ac8b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001ac92:	83 fa 19             	cmp    edx,0x19
c001ac95:	77 3d                	ja     c001acd4 <Directory::open()+0x56>
c001ac97:	8b 14 95 80 03 04 c0 	mov    edx,DWORD PTR [edx*4-0x3ffbfc80]
c001ac9e:	85 d2                	test   edx,edx
c001aca0:	74 32                	je     c001acd4 <Directory::open()+0x56>
c001aca2:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001aca8:	85 d2                	test   edx,edx
c001acaa:	74 28                	je     c001acd4 <Directory::open()+0x56>
c001acac:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001acb0:	b8 06 00 00 00       	mov    eax,0x6
c001acb5:	75 1d                	jne    c001acd4 <Directory::open()+0x56>
c001acb7:	50                   	push   eax
c001acb8:	8b 02                	mov    eax,DWORD PTR [edx]
c001acba:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001acc0:	51                   	push   ecx
c001acc1:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001acc4:	51                   	push   ecx
c001acc5:	52                   	push   edx
c001acc6:	ff 50 50             	call   DWORD PTR [eax+0x50]
c001acc9:	83 c4 10             	add    esp,0x10
c001accc:	85 c0                	test   eax,eax
c001acce:	75 04                	jne    c001acd4 <Directory::open()+0x56>
c001acd0:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001acd4:	83 c4 08             	add    esp,0x8
c001acd7:	5b                   	pop    ebx
c001acd8:	c3                   	ret    
c001acd9:	90                   	nop

c001acda <Directory::close()>:
c001acda:	53                   	push   ebx
c001acdb:	b8 0b 00 00 00       	mov    eax,0xb
c001ace0:	83 ec 08             	sub    esp,0x8
c001ace3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ace7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001acee:	83 f9 19             	cmp    ecx,0x19
c001acf1:	77 41                	ja     c001ad34 <Directory::close()+0x5a>
c001acf3:	8b 1c 8d 80 03 04 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffbfc80]
c001acfa:	85 db                	test   ebx,ebx
c001acfc:	74 36                	je     c001ad34 <Directory::close()+0x5a>
c001acfe:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001ad05:	74 2d                	je     c001ad34 <Directory::close()+0x5a>
c001ad07:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ad0b:	b8 05 00 00 00       	mov    eax,0x5
c001ad10:	74 22                	je     c001ad34 <Directory::close()+0x5a>
c001ad12:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001ad16:	8b 04 8d 80 03 04 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffbfc80]
c001ad1d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001ad23:	53                   	push   ebx
c001ad24:	53                   	push   ebx
c001ad25:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ad27:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001ad2d:	50                   	push   eax
c001ad2e:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c001ad31:	83 c4 10             	add    esp,0x10
c001ad34:	83 c4 08             	add    esp,0x8
c001ad37:	5b                   	pop    ebx
c001ad38:	c3                   	ret    
c001ad39:	90                   	nop

c001ad3a <Directory::unlink()>:
c001ad3a:	83 ec 0c             	sub    esp,0xc
c001ad3d:	b8 0b 00 00 00       	mov    eax,0xb
c001ad42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad46:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ad4d:	83 f9 19             	cmp    ecx,0x19
c001ad50:	77 2f                	ja     c001ad81 <Directory::unlink()+0x47>
c001ad52:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c001ad59:	85 c9                	test   ecx,ecx
c001ad5b:	74 24                	je     c001ad81 <Directory::unlink()+0x47>
c001ad5d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ad63:	85 c9                	test   ecx,ecx
c001ad65:	74 1a                	je     c001ad81 <Directory::unlink()+0x47>
c001ad67:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ad6b:	b8 06 00 00 00       	mov    eax,0x6
c001ad70:	75 0f                	jne    c001ad81 <Directory::unlink()+0x47>
c001ad72:	50                   	push   eax
c001ad73:	83 c2 0d             	add    edx,0xd
c001ad76:	50                   	push   eax
c001ad77:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ad79:	52                   	push   edx
c001ad7a:	51                   	push   ecx
c001ad7b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001ad7e:	83 c4 10             	add    esp,0x10
c001ad81:	83 c4 0c             	add    esp,0xc
c001ad84:	c3                   	ret    
c001ad85:	90                   	nop

c001ad86 <Directory::rename(char const*)>:
c001ad86:	83 ec 0c             	sub    esp,0xc
c001ad89:	b8 0b 00 00 00       	mov    eax,0xb
c001ad8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad92:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ad99:	83 f9 19             	cmp    ecx,0x19
c001ad9c:	77 32                	ja     c001add0 <Directory::rename(char const*)+0x4a>
c001ad9e:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c001ada5:	85 c9                	test   ecx,ecx
c001ada7:	74 27                	je     c001add0 <Directory::rename(char const*)+0x4a>
c001ada9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001adaf:	85 c9                	test   ecx,ecx
c001adb1:	74 1d                	je     c001add0 <Directory::rename(char const*)+0x4a>
c001adb3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001adb7:	b8 06 00 00 00       	mov    eax,0x6
c001adbc:	75 12                	jne    c001add0 <Directory::rename(char const*)+0x4a>
c001adbe:	50                   	push   eax
c001adbf:	83 c2 0d             	add    edx,0xd
c001adc2:	8b 01                	mov    eax,DWORD PTR [ecx]
c001adc4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001adc8:	52                   	push   edx
c001adc9:	51                   	push   ecx
c001adca:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001adcd:	83 c4 10             	add    esp,0x10
c001add0:	83 c4 0c             	add    esp,0xc
c001add3:	c3                   	ret    

c001add4 <Directory::exists()>:
c001add4:	83 ec 0c             	sub    esp,0xc
c001add7:	31 c0                	xor    eax,eax
c001add9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001addd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ade4:	83 f9 19             	cmp    ecx,0x19
c001ade7:	77 24                	ja     c001ae0d <Directory::exists()+0x39>
c001ade9:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c001adf0:	85 c9                	test   ecx,ecx
c001adf2:	74 19                	je     c001ae0d <Directory::exists()+0x39>
c001adf4:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001adfa:	85 c9                	test   ecx,ecx
c001adfc:	74 0f                	je     c001ae0d <Directory::exists()+0x39>
c001adfe:	50                   	push   eax
c001adff:	83 c2 0d             	add    edx,0xd
c001ae02:	50                   	push   eax
c001ae03:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae05:	52                   	push   edx
c001ae06:	51                   	push   ecx
c001ae07:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001ae0a:	83 c4 10             	add    esp,0x10
c001ae0d:	83 c4 0c             	add    esp,0xc
c001ae10:	c3                   	ret    
c001ae11:	90                   	nop

c001ae12 <Directory::read(dirent*)>:
c001ae12:	83 ec 1c             	sub    esp,0x1c
c001ae15:	b8 0b 00 00 00       	mov    eax,0xb
c001ae1a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ae1e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ae25:	83 f9 19             	cmp    ecx,0x19
c001ae28:	77 30                	ja     c001ae5a <Directory::read(dirent*)+0x48>
c001ae2a:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c001ae31:	85 c9                	test   ecx,ecx
c001ae33:	74 25                	je     c001ae5a <Directory::read(dirent*)+0x48>
c001ae35:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c001ae3c:	74 1c                	je     c001ae5a <Directory::read(dirent*)+0x48>
c001ae3e:	83 ec 0c             	sub    esp,0xc
c001ae41:	8b 02                	mov    eax,DWORD PTR [edx]
c001ae43:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001ae47:	51                   	push   ecx
c001ae48:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ae4c:	6a 00                	push   0x0
c001ae4e:	68 10 01 00 00       	push   0x110
c001ae53:	52                   	push   edx
c001ae54:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae57:	83 c4 20             	add    esp,0x20
c001ae5a:	83 c4 1c             	add    esp,0x1c
c001ae5d:	c3                   	ret    

c001ae5e <Directory::create()>:
c001ae5e:	83 ec 0c             	sub    esp,0xc
c001ae61:	b8 0b 00 00 00       	mov    eax,0xb
c001ae66:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae6a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ae71:	83 f9 19             	cmp    ecx,0x19
c001ae74:	77 2f                	ja     c001aea5 <Directory::create()+0x47>
c001ae76:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c001ae7d:	85 c9                	test   ecx,ecx
c001ae7f:	74 24                	je     c001aea5 <Directory::create()+0x47>
c001ae81:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ae87:	85 c9                	test   ecx,ecx
c001ae89:	74 1a                	je     c001aea5 <Directory::create()+0x47>
c001ae8b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ae8f:	b8 06 00 00 00       	mov    eax,0x6
c001ae94:	75 0f                	jne    c001aea5 <Directory::create()+0x47>
c001ae96:	50                   	push   eax
c001ae97:	83 c2 0d             	add    edx,0xd
c001ae9a:	50                   	push   eax
c001ae9b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae9d:	52                   	push   edx
c001ae9e:	51                   	push   ecx
c001ae9f:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001aea2:	83 c4 10             	add    esp,0x10
c001aea5:	83 c4 0c             	add    esp,0xc
c001aea8:	c3                   	ret    
c001aea9:	90                   	nop

c001aeaa <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001aeaa:	b8 0a 00 00 00       	mov    eax,0xa
c001aeaf:	c3                   	ret    

c001aeb0 <Bus::Bus(char const*)>:
c001aeb0:	83 ec 0c             	sub    esp,0xc
c001aeb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeb7:	83 ec 08             	sub    esp,0x8
c001aeba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aebe:	50                   	push   eax
c001aebf:	e8 a8 08 00 00       	call   c001b76c <Device::Device(char const*)>
c001aec4:	83 c4 10             	add    esp,0x10
c001aec7:	ba 9c 26 03 c0       	mov    edx,0xc003269c
c001aecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aed0:	89 10                	mov    DWORD PTR [eax],edx
c001aed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aed6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001aee0:	90                   	nop
c001aee1:	83 c4 0c             	add    esp,0xc
c001aee4:	c3                   	ret    
c001aee5:	90                   	nop
c001aee6:	66 90                	xchg   ax,ax

c001aee8 <Bus::~Bus()>:
c001aee8:	83 ec 0c             	sub    esp,0xc
c001aeeb:	ba 9c 26 03 c0       	mov    edx,0xc003269c
c001aef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aef4:	89 10                	mov    DWORD PTR [eax],edx
c001aef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aefa:	83 ec 0c             	sub    esp,0xc
c001aefd:	50                   	push   eax
c001aefe:	e8 09 06 00 00       	call   c001b50c <Device::~Device()>
c001af03:	83 c4 10             	add    esp,0x10
c001af06:	90                   	nop
c001af07:	83 c4 0c             	add    esp,0xc
c001af0a:	c3                   	ret    
c001af0b:	90                   	nop

c001af0c <Bus::~Bus()>:
c001af0c:	83 ec 0c             	sub    esp,0xc
c001af0f:	83 ec 0c             	sub    esp,0xc
c001af12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af16:	e8 cd ff ff ff       	call   c001aee8 <Bus::~Bus()>
c001af1b:	83 c4 10             	add    esp,0x10
c001af1e:	83 ec 08             	sub    esp,0x8
c001af21:	68 58 01 00 00       	push   0x158
c001af26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af2a:	e8 91 e4 ff ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c001af2f:	83 c4 10             	add    esp,0x10
c001af32:	83 c4 0c             	add    esp,0xc
c001af35:	c3                   	ret    

c001af36 <beepThread(void*)>:
c001af36:	83 ec 0c             	sub    esp,0xc
c001af39:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001af3e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001af42:	48                   	dec    eax
c001af43:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001af48:	75 01                	jne    c001af4b <beepThread(void*)+0x15>
c001af4a:	fb                   	sti    
c001af4b:	6b c2 0a             	imul   eax,edx,0xa
c001af4e:	83 ec 0c             	sub    esp,0xc
c001af51:	50                   	push   eax
c001af52:	e8 d9 a9 00 00       	call   c0025930 <milliTenthSleep(unsigned int)>
c001af57:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001af5e:	e8 ab c7 00 00       	call   c002770e <HalMakeBeep(int)>
c001af63:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001af6b:	83 c4 1c             	add    esp,0x1c
c001af6e:	e9 a1 a8 00 00       	jmp    c0025814 <blockTask(TaskState)>

c001af73 <Krnl::beep(int, int, bool)>:
c001af73:	56                   	push   esi
c001af74:	53                   	push   ebx
c001af75:	83 ec 10             	sub    esp,0x10
c001af78:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001af7c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001af80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af84:	e8 85 c7 00 00       	call   c002770e <HalMakeBeep(int)>
c001af89:	89 f0                	mov    eax,esi
c001af8b:	83 c4 10             	add    esp,0x10
c001af8e:	84 c0                	test   al,al
c001af90:	74 1e                	je     c001afb0 <Krnl::beep(int, int, bool)+0x3d>
c001af92:	6b db 0a             	imul   ebx,ebx,0xa
c001af95:	83 ec 0c             	sub    esp,0xc
c001af98:	53                   	push   ebx
c001af99:	e8 92 a9 00 00       	call   c0025930 <milliTenthSleep(unsigned int)>
c001af9e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001afa6:	83 c4 14             	add    esp,0x14
c001afa9:	5b                   	pop    ebx
c001afaa:	5e                   	pop    esi
c001afab:	e9 5e c7 00 00       	jmp    c002770e <HalMakeBeep(int)>
c001afb0:	68 e6 00 00 00       	push   0xe6
c001afb5:	53                   	push   ebx
c001afb6:	68 36 af 01 c0       	push   0xc001af36
c001afbb:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c001afc1:	e8 46 a5 00 00       	call   c002550c <Process::createThread(void (*)(void*), void*, int)>
c001afc6:	83 c4 14             	add    esp,0x14
c001afc9:	5b                   	pop    ebx
c001afca:	5e                   	pop    esi
c001afcb:	c3                   	ret    

c001afcc <User::loadClockSettings()>:
c001afcc:	57                   	push   edi
c001afcd:	56                   	push   esi
c001afce:	53                   	push   ebx
c001afcf:	81 ec 6c 02 00 00    	sub    esp,0x26c
c001afd5:	c6 44 24 14 00       	mov    BYTE PTR [esp+0x14],0x0
c001afda:	68 c0 26 03 c0       	push   0xc00326c0
c001afdf:	e8 7c 72 00 00       	call   c0022260 <CmOpen(char const*)>
c001afe4:	59                   	pop    ecx
c001afe5:	5e                   	pop    esi
c001afe6:	89 c3                	mov    ebx,eax
c001afe8:	68 e5 26 03 c0       	push   0xc00326e5
c001afed:	50                   	push   eax
c001afee:	e8 68 7e 00 00       	call   c0022e5b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001aff3:	5f                   	pop    edi
c001aff4:	5a                   	pop    edx
c001aff5:	89 c6                	mov    esi,eax
c001aff7:	50                   	push   eax
c001aff8:	68 fa 26 03 c0       	push   0xc00326fa
c001affd:	e8 bc e4 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001b002:	83 c4 10             	add    esp,0x10
c001b005:	85 f6                	test   esi,esi
c001b007:	8d 7c 24 08          	lea    edi,[esp+0x8]
c001b00b:	7e 0c                	jle    c001b019 <User::loadClockSettings()+0x4d>
c001b00d:	52                   	push   edx
c001b00e:	57                   	push   edi
c001b00f:	56                   	push   esi
c001b010:	53                   	push   ebx
c001b011:	e8 ba 73 00 00       	call   c00223d0 <CmGetString(Reghive_Tag*, int, char*)>
c001b016:	83 c4 10             	add    esp,0x10
c001b019:	83 ec 0c             	sub    esp,0xc
c001b01c:	53                   	push   ebx
c001b01d:	e8 5c 73 00 00       	call   c002237e <CmClose(Reghive_Tag*)>
c001b022:	83 c4 0c             	add    esp,0xc
c001b025:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001b02a:	50                   	push   eax
c001b02b:	57                   	push   edi
c001b02c:	68 08 27 03 c0       	push   0xc0032708
c001b031:	e8 88 e4 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001b036:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
c001b03a:	83 c4 10             	add    esp,0x10
c001b03d:	c6 05 08 df 03 c0 00 	mov    BYTE PTR ds:0xc003df08,0x0
c001b044:	8d 41 d5             	lea    eax,[ecx-0x2b]
c001b047:	a8 fd                	test   al,0xfd
c001b049:	75 51                	jne    c001b09c <User::loadClockSettings()+0xd0>
c001b04b:	0f be 5c 24 0a       	movsx  ebx,BYTE PTR [esp+0xa]
c001b050:	0f be 54 24 0b       	movsx  edx,BYTE PTR [esp+0xb]
c001b055:	83 fb 2e             	cmp    ebx,0x2e
c001b058:	75 07                	jne    c001b061 <User::loadClockSettings()+0x95>
c001b05a:	83 fa 35             	cmp    edx,0x35
c001b05d:	b0 01                	mov    al,0x1
c001b05f:	74 0f                	je     c001b070 <User::loadClockSettings()+0xa4>
c001b061:	31 c0                	xor    eax,eax
c001b063:	83 fa 2e             	cmp    edx,0x2e
c001b066:	75 08                	jne    c001b070 <User::loadClockSettings()+0xa4>
c001b068:	80 7c 24 0c 35       	cmp    BYTE PTR [esp+0xc],0x35
c001b06d:	0f 94 c0             	sete   al
c001b070:	a2 09 df 03 c0       	mov    ds:0xc003df09,al
c001b075:	0f be 44 24 09       	movsx  eax,BYTE PTR [esp+0x9]
c001b07a:	83 e8 30             	sub    eax,0x30
c001b07d:	6b f0 0a             	imul   esi,eax,0xa
c001b080:	83 fa 2e             	cmp    edx,0x2e
c001b083:	8d 5c 33 d0          	lea    ebx,[ebx+esi*1-0x30]
c001b087:	0f 44 c3             	cmove  eax,ebx
c001b08a:	80 f9 2d             	cmp    cl,0x2d
c001b08d:	a3 0c df 03 c0       	mov    ds:0xc003df0c,eax
c001b092:	75 19                	jne    c001b0ad <User::loadClockSettings()+0xe1>
c001b094:	f7 1d 0c df 03 c0    	neg    DWORD PTR ds:0xc003df0c
c001b09a:	eb 11                	jmp    c001b0ad <User::loadClockSettings()+0xe1>
c001b09c:	c6 05 09 df 03 c0 00 	mov    BYTE PTR ds:0xc003df09,0x0
c001b0a3:	c7 05 0c df 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003df0c,0x0
c001b0ad:	50                   	push   eax
c001b0ae:	0f b6 05 09 df 03 c0 	movzx  eax,BYTE PTR ds:0xc003df09
c001b0b5:	8d 04 80             	lea    eax,[eax+eax*4]
c001b0b8:	50                   	push   eax
c001b0b9:	ff 35 0c df 03 c0    	push   DWORD PTR ds:0xc003df0c
c001b0bf:	68 1f 27 03 c0       	push   0xc003271f
c001b0c4:	e8 f5 e3 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001b0c9:	81 c4 70 02 00 00    	add    esp,0x270
c001b0cf:	5b                   	pop    ebx
c001b0d0:	5e                   	pop    esi
c001b0d1:	5f                   	pop    edi
c001b0d2:	c3                   	ret    
c001b0d3:	90                   	nop

c001b0d4 <Clock::Clock(char const*)>:
c001b0d4:	83 ec 0c             	sub    esp,0xc
c001b0d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0db:	83 ec 08             	sub    esp,0x8
c001b0de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0e2:	50                   	push   eax
c001b0e3:	e8 84 06 00 00       	call   c001b76c <Device::Device(char const*)>
c001b0e8:	83 c4 10             	add    esp,0x10
c001b0eb:	ba 38 27 03 c0       	mov    edx,0xc0032738
c001b0f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0f4:	89 10                	mov    DWORD PTR [eax],edx
c001b0f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0fa:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001b104:	90                   	nop
c001b105:	83 c4 0c             	add    esp,0xc
c001b108:	c3                   	ret    
c001b109:	90                   	nop

c001b10a <Clock::~Clock()>:
c001b10a:	83 ec 0c             	sub    esp,0xc
c001b10d:	ba 38 27 03 c0       	mov    edx,0xc0032738
c001b112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b116:	89 10                	mov    DWORD PTR [eax],edx
c001b118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b11c:	83 ec 0c             	sub    esp,0xc
c001b11f:	50                   	push   eax
c001b120:	e8 e7 03 00 00       	call   c001b50c <Device::~Device()>
c001b125:	83 c4 10             	add    esp,0x10
c001b128:	90                   	nop
c001b129:	83 c4 0c             	add    esp,0xc
c001b12c:	c3                   	ret    
c001b12d:	90                   	nop

c001b12e <Clock::~Clock()>:
c001b12e:	83 ec 0c             	sub    esp,0xc
c001b131:	83 ec 0c             	sub    esp,0xc
c001b134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b138:	e8 cd ff ff ff       	call   c001b10a <Clock::~Clock()>
c001b13d:	83 c4 10             	add    esp,0x10
c001b140:	83 ec 08             	sub    esp,0x8
c001b143:	68 58 01 00 00       	push   0x158
c001b148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b14c:	e8 6f e2 ff ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c001b151:	83 c4 10             	add    esp,0x10
c001b154:	83 c4 0c             	add    esp,0xc
c001b157:	c3                   	ret    

c001b158 <Clock::timeInSecondsLocal()>:
c001b158:	53                   	push   ebx
c001b159:	83 ec 14             	sub    esp,0x14
c001b15c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b160:	8b 10                	mov    edx,DWORD PTR [eax]
c001b162:	50                   	push   eax
c001b163:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001b166:	0f b6 0d 08 df 03 c0 	movzx  ecx,BYTE PTR ds:0xc003df08
c001b16d:	03 0d 0c df 03 c0    	add    ecx,DWORD PTR ds:0xc003df0c
c001b173:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001b179:	89 cb                	mov    ebx,ecx
c001b17b:	c1 fb 1f             	sar    ebx,0x1f
c001b17e:	01 c8                	add    eax,ecx
c001b180:	11 da                	adc    edx,ebx
c001b182:	83 c4 10             	add    esp,0x10
c001b185:	31 c9                	xor    ecx,ecx
c001b187:	80 3d 09 df 03 c0 00 	cmp    BYTE PTR ds:0xc003df09,0x0
c001b18e:	74 05                	je     c001b195 <Clock::timeInSecondsLocal()+0x3d>
c001b190:	b9 08 07 00 00       	mov    ecx,0x708
c001b195:	31 db                	xor    ebx,ebx
c001b197:	01 c8                	add    eax,ecx
c001b199:	11 da                	adc    edx,ebx
c001b19b:	83 c4 08             	add    esp,0x8
c001b19e:	5b                   	pop    ebx
c001b19f:	c3                   	ret    

c001b1a0 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001b1a0:	57                   	push   edi
c001b1a1:	56                   	push   esi
c001b1a2:	53                   	push   ebx
c001b1a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b1a7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b1ab:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b1af:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b1b1:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001b1b4:	0f b6 05 08 df 03 c0 	movzx  eax,BYTE PTR ds:0xc003df08
c001b1bb:	03 05 0c df 03 c0    	add    eax,DWORD PTR ds:0xc003df0c
c001b1c1:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001b1c7:	99                   	cdq    
c001b1c8:	29 c6                	sub    esi,eax
c001b1ca:	19 d7                	sbb    edi,edx
c001b1cc:	89 f0                	mov    eax,esi
c001b1ce:	31 f6                	xor    esi,esi
c001b1d0:	89 fa                	mov    edx,edi
c001b1d2:	80 3d 09 df 03 c0 00 	cmp    BYTE PTR ds:0xc003df09,0x0
c001b1d9:	74 05                	je     c001b1e0 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001b1db:	be 08 07 00 00       	mov    esi,0x708
c001b1e0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b1e4:	31 ff                	xor    edi,edi
c001b1e6:	29 f0                	sub    eax,esi
c001b1e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b1ec:	19 fa                	sbb    edx,edi
c001b1ee:	89 d8                	mov    eax,ebx
c001b1f0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b1f4:	5b                   	pop    ebx
c001b1f5:	5e                   	pop    esi
c001b1f6:	5f                   	pop    edi
c001b1f7:	ff e0                	jmp    eax

c001b1f9 <datetimeToSeconds(datetime_t)>:
c001b1f9:	55                   	push   ebp
c001b1fa:	57                   	push   edi
c001b1fb:	56                   	push   esi
c001b1fc:	53                   	push   ebx
c001b1fd:	83 ec 0c             	sub    esp,0xc
c001b200:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b204:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b208:	89 f7                	mov    edi,esi
c001b20a:	89 f0                	mov    eax,esi
c001b20c:	0f b6 cf             	movzx  ecx,bh
c001b20f:	0f b6 c4             	movzx  eax,ah
c001b212:	c1 ef 10             	shr    edi,0x10
c001b215:	89 da                	mov    edx,ebx
c001b217:	8d 69 ff             	lea    ebp,[ecx-0x1]
c001b21a:	89 f9                	mov    ecx,edi
c001b21c:	0f b6 f9             	movzx  edi,cl
c001b21f:	89 f1                	mov    ecx,esi
c001b221:	6b c0 3c             	imul   eax,eax,0x3c
c001b224:	0f b6 f1             	movzx  esi,cl
c001b227:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c001b22d:	0f b6 db             	movzx  ebx,bl
c001b230:	c1 ea 10             	shr    edx,0x10
c001b233:	81 ea 6c 07 00 00    	sub    edx,0x76c
c001b239:	01 f8                	add    eax,edi
c001b23b:	01 f0                	add    eax,esi
c001b23d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b240:	c1 f8 1f             	sar    eax,0x1f
c001b243:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b247:	89 e8                	mov    eax,ebp
c001b249:	0f b6 c0             	movzx  eax,al
c001b24c:	8b 0c 85 80 27 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffcd880]
c001b253:	83 f8 01             	cmp    eax,0x1
c001b256:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c001b25a:	0f b7 da             	movzx  ebx,dx
c001b25d:	76 27                	jbe    c001b286 <datetimeToSeconds(datetime_t)+0x8d>
c001b25f:	80 e2 03             	and    dl,0x3
c001b262:	75 22                	jne    c001b286 <datetimeToSeconds(datetime_t)+0x8d>
c001b264:	31 d2                	xor    edx,edx
c001b266:	be 64 00 00 00       	mov    esi,0x64
c001b26b:	89 d8                	mov    eax,ebx
c001b26d:	f7 f6                	div    esi
c001b26f:	85 d2                	test   edx,edx
c001b271:	75 12                	jne    c001b285 <datetimeToSeconds(datetime_t)+0x8c>
c001b273:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001b279:	be 90 01 00 00       	mov    esi,0x190
c001b27e:	99                   	cdq    
c001b27f:	f7 fe                	idiv   esi
c001b281:	85 d2                	test   edx,edx
c001b283:	75 01                	jne    c001b286 <datetimeToSeconds(datetime_t)+0x8d>
c001b285:	41                   	inc    ecx
c001b286:	83 fb 46             	cmp    ebx,0x46
c001b289:	76 48                	jbe    c001b2d3 <datetimeToSeconds(datetime_t)+0xda>
c001b28b:	be 46 00 00 00       	mov    esi,0x46
c001b290:	bf 64 00 00 00       	mov    edi,0x64
c001b295:	bd 90 01 00 00       	mov    ebp,0x190
c001b29a:	f7 c6 03 00 00 00    	test   esi,0x3
c001b2a0:	b8 6d 01 00 00       	mov    eax,0x16d
c001b2a5:	75 23                	jne    c001b2ca <datetimeToSeconds(datetime_t)+0xd1>
c001b2a7:	89 f0                	mov    eax,esi
c001b2a9:	99                   	cdq    
c001b2aa:	f7 ff                	idiv   edi
c001b2ac:	b8 6e 01 00 00       	mov    eax,0x16e
c001b2b1:	85 d2                	test   edx,edx
c001b2b3:	75 15                	jne    c001b2ca <datetimeToSeconds(datetime_t)+0xd1>
c001b2b5:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001b2bb:	99                   	cdq    
c001b2bc:	f7 fd                	idiv   ebp
c001b2be:	83 fa 01             	cmp    edx,0x1
c001b2c1:	19 c0                	sbb    eax,eax
c001b2c3:	f7 d0                	not    eax
c001b2c5:	05 6e 01 00 00       	add    eax,0x16e
c001b2ca:	46                   	inc    esi
c001b2cb:	01 c1                	add    ecx,eax
c001b2cd:	39 de                	cmp    esi,ebx
c001b2cf:	7c c9                	jl     c001b29a <datetimeToSeconds(datetime_t)+0xa1>
c001b2d1:	eb 34                	jmp    c001b307 <datetimeToSeconds(datetime_t)+0x10e>
c001b2d3:	74 32                	je     c001b307 <datetimeToSeconds(datetime_t)+0x10e>
c001b2d5:	b8 45 00 00 00       	mov    eax,0x45
c001b2da:	89 c2                	mov    edx,eax
c001b2dc:	83 e2 03             	and    edx,0x3
c001b2df:	39 d8                	cmp    eax,ebx
c001b2e1:	7e 0f                	jle    c001b2f2 <datetimeToSeconds(datetime_t)+0xf9>
c001b2e3:	83 fa 01             	cmp    edx,0x1
c001b2e6:	19 d2                	sbb    edx,edx
c001b2e8:	48                   	dec    eax
c001b2e9:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001b2f0:	eb e8                	jmp    c001b2da <datetimeToSeconds(datetime_t)+0xe1>
c001b2f2:	85 d2                	test   edx,edx
c001b2f4:	b8 6d 01 00 00       	mov    eax,0x16d
c001b2f9:	75 0a                	jne    c001b305 <datetimeToSeconds(datetime_t)+0x10c>
c001b2fb:	83 fb 01             	cmp    ebx,0x1
c001b2fe:	19 c0                	sbb    eax,eax
c001b300:	05 6e 01 00 00       	add    eax,0x16e
c001b305:	29 c1                	sub    ecx,eax
c001b307:	b8 80 51 01 00       	mov    eax,0x15180
c001b30c:	f7 e9                	imul   ecx
c001b30e:	03 04 24             	add    eax,DWORD PTR [esp]
c001b311:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c001b315:	83 c4 0c             	add    esp,0xc
c001b318:	5b                   	pop    ebx
c001b319:	5e                   	pop    esi
c001b31a:	5f                   	pop    edi
c001b31b:	5d                   	pop    ebp
c001b31c:	c3                   	ret    
c001b31d:	90                   	nop

c001b31e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001b31e:	57                   	push   edi
c001b31f:	56                   	push   esi
c001b320:	53                   	push   ebx
c001b321:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b325:	8b 06                	mov    eax,DWORD PTR [esi]
c001b327:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001b32a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b32e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b332:	e8 c2 fe ff ff       	call   c001b1f9 <datetimeToSeconds(datetime_t)>
c001b337:	59                   	pop    ecx
c001b338:	0f b6 0d 08 df 03 c0 	movzx  ecx,BYTE PTR ds:0xc003df08
c001b33f:	5b                   	pop    ebx
c001b340:	03 0d 0c df 03 c0    	add    ecx,DWORD PTR ds:0xc003df0c
c001b346:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001b34c:	89 cb                	mov    ebx,ecx
c001b34e:	c1 fb 1f             	sar    ebx,0x1f
c001b351:	29 c8                	sub    eax,ecx
c001b353:	19 da                	sbb    edx,ebx
c001b355:	31 c9                	xor    ecx,ecx
c001b357:	80 3d 09 df 03 c0 00 	cmp    BYTE PTR ds:0xc003df09,0x0
c001b35e:	74 05                	je     c001b365 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001b360:	b9 08 07 00 00       	mov    ecx,0x708
c001b365:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b369:	31 db                	xor    ebx,ebx
c001b36b:	29 c8                	sub    eax,ecx
c001b36d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b371:	19 da                	sbb    edx,ebx
c001b373:	89 f8                	mov    eax,edi
c001b375:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b379:	5b                   	pop    ebx
c001b37a:	5e                   	pop    esi
c001b37b:	5f                   	pop    edi
c001b37c:	ff e0                	jmp    eax

c001b37e <secondsToDatetime(unsigned long long)>:
c001b37e:	55                   	push   ebp
c001b37f:	57                   	push   edi
c001b380:	56                   	push   esi
c001b381:	53                   	push   ebx
c001b382:	83 ec 1c             	sub    esp,0x1c
c001b385:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001b389:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b38d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b391:	6a 00                	push   0x0
c001b393:	68 80 51 01 00       	push   0x15180
c001b398:	55                   	push   ebp
c001b399:	57                   	push   edi
c001b39a:	e8 11 3b 01 00       	call   c002eeb0 <__udivdi3>
c001b39f:	83 c4 10             	add    esp,0x10
c001b3a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b3a6:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001b3ac:	6a 00                	push   0x0
c001b3ae:	68 80 51 01 00       	push   0x15180
c001b3b3:	55                   	push   ebp
c001b3b4:	57                   	push   edi
c001b3b5:	bf 10 0e 00 00       	mov    edi,0xe10
c001b3ba:	e8 f1 3b 01 00       	call   c002efb0 <__umoddi3>
c001b3bf:	83 c4 10             	add    esp,0x10
c001b3c2:	99                   	cdq    
c001b3c3:	f7 ff                	idiv   edi
c001b3c5:	bf 3c 00 00 00       	mov    edi,0x3c
c001b3ca:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001b3cd:	89 d0                	mov    eax,edx
c001b3cf:	99                   	cdq    
c001b3d0:	f7 ff                	idiv   edi
c001b3d2:	85 db                	test   ebx,ebx
c001b3d4:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001b3d7:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001b3da:	79 11                	jns    c001b3ed <secondsToDatetime(unsigned long long)+0x6f>
c001b3dc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b3e0:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001b3e6:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b3eb:	eb 07                	jmp    c001b3f4 <secondsToDatetime(unsigned long long)+0x76>
c001b3ed:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b3f2:	89 d8                	mov    eax,ebx
c001b3f4:	99                   	cdq    
c001b3f5:	bf b4 05 00 00       	mov    edi,0x5b4
c001b3fa:	f7 f9                	idiv   ecx
c001b3fc:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001b401:	31 d2                	xor    edx,edx
c001b403:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001b408:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b40c:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001b414:	01 c3                	add    ebx,eax
c001b416:	89 d8                	mov    eax,ebx
c001b418:	f7 f1                	div    ecx
c001b41a:	31 d2                	xor    edx,edx
c001b41c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001b41f:	89 d8                	mov    eax,ebx
c001b421:	f7 f7                	div    edi
c001b423:	31 d2                	xor    edx,edx
c001b425:	29 c1                	sub    ecx,eax
c001b427:	89 d8                	mov    eax,ebx
c001b429:	f7 f5                	div    ebp
c001b42b:	bd 6d 01 00 00       	mov    ebp,0x16d
c001b430:	31 d2                	xor    edx,edx
c001b432:	29 c1                	sub    ecx,eax
c001b434:	89 c8                	mov    eax,ecx
c001b436:	f7 f5                	div    ebp
c001b438:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001b43d:	31 d2                	xor    edx,edx
c001b43f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b443:	89 c8                	mov    eax,ecx
c001b445:	f7 f5                	div    ebp
c001b447:	31 d2                	xor    edx,edx
c001b449:	01 c3                	add    ebx,eax
c001b44b:	89 c8                	mov    eax,ecx
c001b44d:	f7 f7                	div    edi
c001b44f:	bf 99 00 00 00       	mov    edi,0x99
c001b454:	31 d2                	xor    edx,edx
c001b456:	29 c3                	sub    ebx,eax
c001b458:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001b460:	29 c3                	sub    ebx,eax
c001b462:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001b465:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001b468:	83 c1 02             	add    ecx,0x2
c001b46b:	89 c8                	mov    eax,ecx
c001b46d:	bb 05 00 00 00       	mov    ebx,0x5
c001b472:	f7 f7                	div    edi
c001b474:	31 d2                	xor    edx,edx
c001b476:	89 c7                	mov    edi,eax
c001b478:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001b47e:	83 c0 02             	add    eax,0x2
c001b481:	f7 f3                	div    ebx
c001b483:	89 eb                	mov    ebx,ebp
c001b485:	29 c3                	sub    ebx,eax
c001b487:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001b48d:	88 1e                	mov    BYTE PTR [esi],bl
c001b48f:	19 c0                	sbb    eax,eax
c001b491:	31 d2                	xor    edx,edx
c001b493:	83 e0 0c             	and    eax,0xc
c001b496:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001b49a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001b4a2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001b4a6:	83 f9 01             	cmp    ecx,0x1
c001b4a9:	0f 96 c2             	setbe  dl
c001b4ac:	41                   	inc    ecx
c001b4ad:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001b4b0:	01 d0                	add    eax,edx
c001b4b2:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001b4b6:	83 c4 1c             	add    esp,0x1c
c001b4b9:	89 f0                	mov    eax,esi
c001b4bb:	5b                   	pop    ebx
c001b4bc:	5e                   	pop    esi
c001b4bd:	5f                   	pop    edi
c001b4be:	5d                   	pop    ebp
c001b4bf:	c2 04 00             	ret    0x4

c001b4c2 <Clock::timeInDatetimeLocal()>:
c001b4c2:	53                   	push   ebx
c001b4c3:	83 ec 14             	sub    esp,0x14
c001b4c6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b4ca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b4ce:	e8 85 fc ff ff       	call   c001b158 <Clock::timeInSecondsLocal()>
c001b4d3:	83 c4 0c             	add    esp,0xc
c001b4d6:	52                   	push   edx
c001b4d7:	50                   	push   eax
c001b4d8:	53                   	push   ebx
c001b4d9:	e8 a0 fe ff ff       	call   c001b37e <secondsToDatetime(unsigned long long)>
c001b4de:	89 d8                	mov    eax,ebx
c001b4e0:	83 c4 14             	add    esp,0x14
c001b4e3:	5b                   	pop    ebx
c001b4e4:	c2 04 00             	ret    0x4
c001b4e7:	90                   	nop

c001b4e8 <Device::hibernate()>:
c001b4e8:	c3                   	ret    
c001b4e9:	90                   	nop

c001b4ea <Device::wake()>:
c001b4ea:	c3                   	ret    
c001b4eb:	90                   	nop

c001b4ec <Device::detect()>:
c001b4ec:	c3                   	ret    
c001b4ed:	90                   	nop

c001b4ee <Device::disableLegacy()>:
c001b4ee:	c3                   	ret    
c001b4ef:	90                   	nop

c001b4f0 <Device::powerSaving(PowerSavingLevel)>:
c001b4f0:	c3                   	ret    
c001b4f1:	90                   	nop

c001b4f2 <DriverlessDevice::close(int, int, void*)>:
c001b4f2:	31 c0                	xor    eax,eax
c001b4f4:	c3                   	ret    
c001b4f5:	90                   	nop

c001b4f6 <DriverlessDevice::detect()>:
c001b4f6:	c3                   	ret    
c001b4f7:	90                   	nop

c001b4f8 <DriverlessDevice::open(int, int, void*)>:
c001b4f8:	83 ec 18             	sub    esp,0x18
c001b4fb:	68 b0 27 03 c0       	push   0xc00327b0
c001b500:	e8 fd 51 00 00       	call   c0020702 <KePanic(char const*)>
c001b505:	83 c8 ff             	or     eax,0xffffffff
c001b508:	83 c4 1c             	add    esp,0x1c
c001b50b:	c3                   	ret    

c001b50c <Device::~Device()>:
c001b50c:	ba 1c 28 03 c0       	mov    edx,0xc003281c
c001b511:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b515:	89 10                	mov    DWORD PTR [eax],edx
c001b517:	90                   	nop
c001b518:	c3                   	ret    
c001b519:	90                   	nop

c001b51a <Device::~Device()>:
c001b51a:	83 ec 0c             	sub    esp,0xc
c001b51d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b521:	e8 e6 ff ff ff       	call   c001b50c <Device::~Device()>
c001b526:	83 c4 04             	add    esp,0x4
c001b529:	83 ec 08             	sub    esp,0x8
c001b52c:	68 58 01 00 00       	push   0x158
c001b531:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b535:	e8 86 de ff ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c001b53a:	83 c4 10             	add    esp,0x10
c001b53d:	83 c4 0c             	add    esp,0xc
c001b540:	c3                   	ret    
c001b541:	90                   	nop

c001b542 <Device::findAndLoadDriver()>:
c001b542:	c7 44 24 04 ce 27 03 c0 	mov    DWORD PTR [esp+0x4],0xc00327ce
c001b54a:	e9 6f df ff ff       	jmp    c00194be <Dbg::kprintf(char const*, ...)>
c001b54f:	90                   	nop

c001b550 <Device::preOpenPCI(PCIDeviceInfo)>:
c001b550:	57                   	push   edi
c001b551:	b9 09 00 00 00       	mov    ecx,0x9
c001b556:	56                   	push   esi
c001b557:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b55b:	8d 74 24 10          	lea    esi,[esp+0x10]
c001b55f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001b569:	81 c7 18 01 00 00    	add    edi,0x118
c001b56f:	fc                   	cld    
c001b570:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b572:	5e                   	pop    esi
c001b573:	5f                   	pop    edi
c001b574:	c3                   	ret    
c001b575:	90                   	nop

c001b576 <Device::preOpenACPI(void*, char*, char*)>:
c001b576:	57                   	push   edi
c001b577:	b9 1e 00 00 00       	mov    ecx,0x1e
c001b57c:	56                   	push   esi
c001b57d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b581:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b585:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b589:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c001b593:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c001b599:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c001b59f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b5a1:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c001b5a7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b5ab:	b9 0e 00 00 00       	mov    ecx,0xe
c001b5b0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b5b2:	5e                   	pop    esi
c001b5b3:	5f                   	pop    edi
c001b5b4:	c3                   	ret    
c001b5b5:	90                   	nop

c001b5b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b5b6:	53                   	push   ebx
c001b5b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b5bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b5bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b5c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b5c7:	0f b6 c0             	movzx  eax,al
c001b5ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b5ce:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b5d2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b5d6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b5da:	5b                   	pop    ebx
c001b5db:	e9 c0 05 00 00       	jmp    c001bba0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c001b5e0 <Device::getParent()>:
c001b5e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5e4:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c001b5ea:	c3                   	ret    
c001b5eb:	90                   	nop

c001b5ec <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b5ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b5f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b5f4:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001b5f9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b5fd:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b601:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b605:	e9 0d 07 00 00       	jmp    c001bd17 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c001b60a <Device::addChild(Device*)>:
c001b60a:	53                   	push   ebx
c001b60b:	83 ec 08             	sub    esp,0x8
c001b60e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b612:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b616:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001b61c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001b622:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b624:	85 d2                	test   edx,edx
c001b626:	74 04                	je     c001b62c <Device::addChild(Device*)+0x22>
c001b628:	89 d3                	mov    ebx,edx
c001b62a:	eb f6                	jmp    c001b622 <Device::addChild(Device*)+0x18>
c001b62c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001b62f:	83 ec 0c             	sub    esp,0xc
c001b632:	6a 08                	push   0x8
c001b634:	e8 4f b0 ff ff       	call   c0016688 <malloc>
c001b639:	89 03                	mov    DWORD PTR [ebx],eax
c001b63b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b641:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b648:	83 c4 18             	add    esp,0x18
c001b64b:	5b                   	pop    ebx
c001b64c:	c3                   	ret    
c001b64d:	90                   	nop

c001b64e <Device::removeAllChildren()>:
c001b64e:	56                   	push   esi
c001b64f:	53                   	push   ebx
c001b650:	52                   	push   edx
c001b651:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b655:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001b65b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b65e:	74 17                	je     c001b677 <Device::removeAllChildren()+0x29>
c001b660:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001b663:	85 c0                	test   eax,eax
c001b665:	74 0c                	je     c001b673 <Device::removeAllChildren()+0x25>
c001b667:	8b 10                	mov    edx,DWORD PTR [eax]
c001b669:	83 ec 0c             	sub    esp,0xc
c001b66c:	50                   	push   eax
c001b66d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b670:	83 c4 10             	add    esp,0x10
c001b673:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b675:	eb e4                	jmp    c001b65b <Device::removeAllChildren()+0xd>
c001b677:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b67d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b683:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b689:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b690:	58                   	pop    eax
c001b691:	5b                   	pop    ebx
c001b692:	5e                   	pop    esi
c001b693:	c3                   	ret    

c001b694 <Device::hibernateAll()>:
c001b694:	53                   	push   ebx
c001b695:	83 ec 14             	sub    esp,0x14
c001b698:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b69c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b69e:	53                   	push   ebx
c001b69f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b6a2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b6a8:	83 c4 10             	add    esp,0x10
c001b6ab:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b6ae:	74 0f                	je     c001b6bf <Device::hibernateAll()+0x2b>
c001b6b0:	83 ec 0c             	sub    esp,0xc
c001b6b3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b6b6:	e8 d9 ff ff ff       	call   c001b694 <Device::hibernateAll()>
c001b6bb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b6bd:	eb e9                	jmp    c001b6a8 <Device::hibernateAll()+0x14>
c001b6bf:	83 c4 08             	add    esp,0x8
c001b6c2:	5b                   	pop    ebx
c001b6c3:	c3                   	ret    

c001b6c4 <Device::wakeAll()>:
c001b6c4:	53                   	push   ebx
c001b6c5:	83 ec 14             	sub    esp,0x14
c001b6c8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b6cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6ce:	53                   	push   ebx
c001b6cf:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001b6d2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b6d8:	83 c4 10             	add    esp,0x10
c001b6db:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b6de:	74 0f                	je     c001b6ef <Device::wakeAll()+0x2b>
c001b6e0:	83 ec 0c             	sub    esp,0xc
c001b6e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b6e6:	e8 d9 ff ff ff       	call   c001b6c4 <Device::wakeAll()>
c001b6eb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b6ed:	eb e9                	jmp    c001b6d8 <Device::wakeAll()+0x14>
c001b6ef:	83 c4 08             	add    esp,0x8
c001b6f2:	5b                   	pop    ebx
c001b6f3:	c3                   	ret    

c001b6f4 <Device::detectAll()>:
c001b6f4:	53                   	push   ebx
c001b6f5:	83 ec 14             	sub    esp,0x14
c001b6f8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b6fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6fe:	53                   	push   ebx
c001b6ff:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b702:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b708:	83 c4 10             	add    esp,0x10
c001b70b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b70e:	74 0f                	je     c001b71f <Device::detectAll()+0x2b>
c001b710:	83 ec 0c             	sub    esp,0xc
c001b713:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b716:	e8 d9 ff ff ff       	call   c001b6f4 <Device::detectAll()>
c001b71b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b71d:	eb e9                	jmp    c001b708 <Device::detectAll()+0x14>
c001b71f:	83 c4 08             	add    esp,0x8
c001b722:	5b                   	pop    ebx
c001b723:	c3                   	ret    

c001b724 <Device::disableLegacyAll()>:
c001b724:	c3                   	ret    
c001b725:	90                   	nop

c001b726 <Device::loadDriversForAll()>:
c001b726:	c3                   	ret    
c001b727:	90                   	nop

c001b728 <Device::powerSavingAll(PowerSavingLevel)>:
c001b728:	56                   	push   esi
c001b729:	53                   	push   ebx
c001b72a:	83 ec 0c             	sub    esp,0xc
c001b72d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b735:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b737:	56                   	push   esi
c001b738:	53                   	push   ebx
c001b739:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001b73c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b742:	83 c4 10             	add    esp,0x10
c001b745:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b748:	74 0f                	je     c001b759 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001b74a:	52                   	push   edx
c001b74b:	52                   	push   edx
c001b74c:	56                   	push   esi
c001b74d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b750:	e8 d3 ff ff ff       	call   c001b728 <Device::powerSavingAll(PowerSavingLevel)>
c001b755:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b757:	eb e9                	jmp    c001b742 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001b759:	58                   	pop    eax
c001b75a:	5b                   	pop    ebx
c001b75b:	5e                   	pop    esi
c001b75c:	c3                   	ret    
c001b75d:	90                   	nop

c001b75e <Device::setName(char const*)>:
c001b75e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001b766:	e9 e5 4e fe ff       	jmp    c0000650 <strcpy>
c001b76b:	90                   	nop

c001b76c <Device::Device(char const*)>:
c001b76c:	83 ec 1c             	sub    esp,0x1c
c001b76f:	ba 1c 28 03 c0       	mov    edx,0xc003281c
c001b774:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b778:	89 10                	mov    DWORD PTR [eax],edx
c001b77a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b77e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001b788:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b78c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b796:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b79a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b7a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7a8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b7b2:	83 ec 08             	sub    esp,0x8
c001b7b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b7b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b7bd:	e8 9c ff ff ff       	call   c001b75e <Device::setName(char const*)>
c001b7c2:	83 c4 10             	add    esp,0x10
c001b7c5:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001b7cd:	83 ec 0c             	sub    esp,0xc
c001b7d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b7d4:	e8 af ae ff ff       	call   c0016688 <malloc>
c001b7d9:	83 c4 10             	add    esp,0x10
c001b7dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b7e2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b7e9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b7ed:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001b7f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7f7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b7fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b803:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b807:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b80d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b814:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b818:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001b81f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b823:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001b82a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b82e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b838:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b83c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b846:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b84a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b854:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b858:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c001b862:	90                   	nop
c001b863:	83 c4 1c             	add    esp,0x1c
c001b866:	c3                   	ret    
c001b867:	90                   	nop

c001b868 <Device::getName()>:
c001b868:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b86c:	05 d0 00 00 00       	add    eax,0xd0
c001b871:	c3                   	ret    

c001b872 <Device::closeAll()>:
c001b872:	53                   	push   ebx
c001b873:	83 ec 08             	sub    esp,0x8
c001b876:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b87a:	53                   	push   ebx
c001b87b:	e8 e8 ff ff ff       	call   c001b868 <Device::getName()>
c001b880:	52                   	push   edx
c001b881:	50                   	push   eax
c001b882:	68 08 28 03 c0       	push   0xc0032808
c001b887:	e8 32 dc ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001b88c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b88e:	6a 00                	push   0x0
c001b890:	6a 00                	push   0x0
c001b892:	6a 00                	push   0x0
c001b894:	53                   	push   ebx
c001b895:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b898:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b89e:	83 c4 20             	add    esp,0x20
c001b8a1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b8a4:	74 12                	je     c001b8b8 <Device::closeAll()+0x46>
c001b8a6:	83 ec 0c             	sub    esp,0xc
c001b8a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b8ac:	e8 c1 ff ff ff       	call   c001b872 <Device::closeAll()>
c001b8b1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b8b3:	83 c4 10             	add    esp,0x10
c001b8b6:	eb e9                	jmp    c001b8a1 <Device::closeAll()+0x2f>
c001b8b8:	83 c4 08             	add    esp,0x8
c001b8bb:	5b                   	pop    ebx
c001b8bc:	c3                   	ret    
c001b8bd:	90                   	nop

c001b8be <DriverlessDevice::DriverlessDevice(char const*)>:
c001b8be:	83 ec 0c             	sub    esp,0xc
c001b8c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8c5:	83 ec 08             	sub    esp,0x8
c001b8c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b8cc:	50                   	push   eax
c001b8cd:	e8 9a fe ff ff       	call   c001b76c <Device::Device(char const*)>
c001b8d2:	83 c4 10             	add    esp,0x10
c001b8d5:	ba 48 28 03 c0       	mov    edx,0xc0032848
c001b8da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8de:	89 10                	mov    DWORD PTR [eax],edx
c001b8e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8e4:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001b8ee:	90                   	nop
c001b8ef:	83 c4 0c             	add    esp,0xc
c001b8f2:	c3                   	ret    
c001b8f3:	90                   	nop

c001b8f4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001b8f4:	57                   	push   edi
c001b8f5:	56                   	push   esi
c001b8f6:	53                   	push   ebx
c001b8f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8fb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b8ff:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b903:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001b909:	75 0c                	jne    c001b917 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001b90b:	52                   	push   edx
c001b90c:	52                   	push   edx
c001b90d:	53                   	push   ebx
c001b90e:	56                   	push   esi
c001b90f:	e8 4e 3a 01 00       	call   c002f362 <LinkedList<Device>::addElement(Device*)>
c001b914:	83 c4 10             	add    esp,0x10
c001b917:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b91d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b920:	74 12                	je     c001b934 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001b922:	50                   	push   eax
c001b923:	57                   	push   edi
c001b924:	56                   	push   esi
c001b925:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b928:	e8 c7 ff ff ff       	call   c001b8f4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b92d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b92f:	83 c4 10             	add    esp,0x10
c001b932:	eb e9                	jmp    c001b91d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001b934:	5b                   	pop    ebx
c001b935:	5e                   	pop    esi
c001b936:	5f                   	pop    edi
c001b937:	c3                   	ret    

c001b938 <getDevicesOfType(DeviceType)>:
c001b938:	53                   	push   ebx
c001b939:	83 ec 14             	sub    esp,0x14
c001b93c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b940:	53                   	push   ebx
c001b941:	e8 f8 3a 01 00       	call   c002f43e <LinkedList<Device>::LinkedList()>
c001b946:	83 c4 0c             	add    esp,0xc
c001b949:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b94d:	53                   	push   ebx
c001b94e:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c001b954:	e8 9b ff ff ff       	call   c001b8f4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b959:	83 c4 18             	add    esp,0x18
c001b95c:	89 d8                	mov    eax,ebx
c001b95e:	5b                   	pop    ebx
c001b95f:	c2 04 00             	ret    0x4
c001b962:	66 90                	xchg   ax,ax

c001b964 <HardDiskController::HardDiskController(char const*)>:
c001b964:	83 ec 0c             	sub    esp,0xc
c001b967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b96b:	83 ec 08             	sub    esp,0x8
c001b96e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b972:	50                   	push   eax
c001b973:	e8 f4 fd ff ff       	call   c001b76c <Device::Device(char const*)>
c001b978:	83 c4 10             	add    esp,0x10
c001b97b:	ba 74 28 03 c0       	mov    edx,0xc0032874
c001b980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b984:	89 10                	mov    DWORD PTR [eax],edx
c001b986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b98a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001b994:	90                   	nop
c001b995:	83 c4 0c             	add    esp,0xc
c001b998:	c3                   	ret    
c001b999:	90                   	nop
c001b99a:	66 90                	xchg   ax,ax

c001b99c <HardDiskController::~HardDiskController()>:
c001b99c:	83 ec 0c             	sub    esp,0xc
c001b99f:	ba 74 28 03 c0       	mov    edx,0xc0032874
c001b9a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9a8:	89 10                	mov    DWORD PTR [eax],edx
c001b9aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9ae:	83 ec 0c             	sub    esp,0xc
c001b9b1:	50                   	push   eax
c001b9b2:	e8 55 fb ff ff       	call   c001b50c <Device::~Device()>
c001b9b7:	83 c4 10             	add    esp,0x10
c001b9ba:	90                   	nop
c001b9bb:	83 c4 0c             	add    esp,0xc
c001b9be:	c3                   	ret    
c001b9bf:	90                   	nop

c001b9c0 <HardDiskController::~HardDiskController()>:
c001b9c0:	83 ec 0c             	sub    esp,0xc
c001b9c3:	83 ec 0c             	sub    esp,0xc
c001b9c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9ca:	e8 cd ff ff ff       	call   c001b99c <HardDiskController::~HardDiskController()>
c001b9cf:	83 c4 10             	add    esp,0x10
c001b9d2:	83 ec 08             	sub    esp,0x8
c001b9d5:	68 58 01 00 00       	push   0x158
c001b9da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9de:	e8 dd d9 ff ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c001b9e3:	83 c4 10             	add    esp,0x10
c001b9e6:	83 c4 0c             	add    esp,0xc
c001b9e9:	c3                   	ret    

c001b9ea <PhysicalDisk::eject()>:
c001b9ea:	83 c8 ff             	or     eax,0xffffffff
c001b9ed:	c3                   	ret    

c001b9ee <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001b9ee:	83 ec 0c             	sub    esp,0xc
c001b9f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9f5:	83 ec 08             	sub    esp,0x8
c001b9f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9fc:	50                   	push   eax
c001b9fd:	e8 6a fd ff ff       	call   c001b76c <Device::Device(char const*)>
c001ba02:	83 c4 10             	add    esp,0x10
c001ba05:	ba a0 28 03 c0       	mov    edx,0xc00328a0
c001ba0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba0e:	89 10                	mov    DWORD PTR [eax],edx
c001ba10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba14:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001ba1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba1f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001ba26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba2a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001ba34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba38:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ba3c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ba42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba46:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001ba50:	90                   	nop
c001ba51:	83 c4 0c             	add    esp,0xc
c001ba54:	c3                   	ret    
c001ba55:	90                   	nop

c001ba56 <PhysicalDisk::startCache()>:
c001ba56:	56                   	push   esi
c001ba57:	53                   	push   ebx
c001ba58:	83 ec 10             	sub    esp,0x10
c001ba5b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ba5f:	6a 44                	push   0x44
c001ba61:	e8 22 ac ff ff       	call   c0016688 <malloc>
c001ba66:	89 c6                	mov    esi,eax
c001ba68:	58                   	pop    eax
c001ba69:	5a                   	pop    edx
c001ba6a:	53                   	push   ebx
c001ba6b:	56                   	push   esi
c001ba6c:	e8 77 17 00 00       	call   c001d1e8 <VCache::VCache(PhysicalDisk*)>
c001ba71:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001ba77:	83 c4 14             	add    esp,0x14
c001ba7a:	5b                   	pop    ebx
c001ba7b:	5e                   	pop    esi
c001ba7c:	c3                   	ret    
c001ba7d:	90                   	nop

c001ba7e <PhysicalDisk::~PhysicalDisk()>:
c001ba7e:	83 ec 0c             	sub    esp,0xc
c001ba81:	ba a0 28 03 c0       	mov    edx,0xc00328a0
c001ba86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba8a:	89 10                	mov    DWORD PTR [eax],edx
c001ba8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba90:	83 ec 0c             	sub    esp,0xc
c001ba93:	50                   	push   eax
c001ba94:	e8 73 fa ff ff       	call   c001b50c <Device::~Device()>
c001ba99:	83 c4 10             	add    esp,0x10
c001ba9c:	90                   	nop
c001ba9d:	83 c4 0c             	add    esp,0xc
c001baa0:	c3                   	ret    
c001baa1:	90                   	nop

c001baa2 <PhysicalDisk::~PhysicalDisk()>:
c001baa2:	83 ec 0c             	sub    esp,0xc
c001baa5:	83 ec 0c             	sub    esp,0xc
c001baa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001baac:	e8 cd ff ff ff       	call   c001ba7e <PhysicalDisk::~PhysicalDisk()>
c001bab1:	83 c4 10             	add    esp,0x10
c001bab4:	83 ec 08             	sub    esp,0x8
c001bab7:	68 6c 01 00 00       	push   0x16c
c001babc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bac0:	e8 fb d8 ff ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c001bac5:	83 c4 10             	add    esp,0x10
c001bac8:	83 c4 0c             	add    esp,0xc
c001bacb:	c3                   	ret    

c001bacc <int_handler>:
c001bacc:	55                   	push   ebp
c001bacd:	57                   	push   edi
c001bace:	56                   	push   esi
c001bacf:	53                   	push   ebx
c001bad0:	83 ec 0c             	sub    esp,0xc
c001bad3:	80 3d 88 09 04 c0 00 	cmp    BYTE PTR ds:0xc0040988,0x0
c001bada:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bade:	74 0b                	je     c001baeb <int_handler+0x1f>
c001bae0:	fa                   	cli    
c001bae1:	f4                   	hlt    
c001bae2:	80 3d 88 09 04 c0 00 	cmp    BYTE PTR ds:0xc0040988,0x0
c001bae9:	75 f5                	jne    c001bae0 <int_handler+0x14>
c001baeb:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001baee:	8d 46 e0             	lea    eax,[esi-0x20]
c001baf1:	83 f8 17             	cmp    eax,0x17
c001baf4:	76 40                	jbe    c001bb36 <int_handler+0x6a>
c001baf6:	c1 e6 04             	shl    esi,0x4
c001baf9:	31 db                	xor    ebx,ebx
c001bafb:	8d ae 20 ef 03 c0    	lea    ebp,[esi-0x3ffc10e0]
c001bb01:	81 c6 20 df 03 c0    	add    esi,0xc003df20
c001bb07:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001bb0b:	85 c0                	test   eax,eax
c001bb0d:	74 13                	je     c001bb22 <int_handler+0x56>
c001bb0f:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001bb13:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001bb16:	74 2c                	je     c001bb44 <int_handler+0x78>
c001bb18:	83 ec 08             	sub    esp,0x8
c001bb1b:	52                   	push   edx
c001bb1c:	57                   	push   edi
c001bb1d:	ff d0                	call   eax
c001bb1f:	83 c4 10             	add    esp,0x10
c001bb22:	83 c3 01             	add    ebx,0x1
c001bb25:	83 fb 04             	cmp    ebx,0x4
c001bb28:	75 dd                	jne    c001bb07 <int_handler+0x3b>
c001bb2a:	83 c4 0c             	add    esp,0xc
c001bb2d:	31 c0                	xor    eax,eax
c001bb2f:	5b                   	pop    ebx
c001bb30:	31 d2                	xor    edx,edx
c001bb32:	5e                   	pop    esi
c001bb33:	5f                   	pop    edi
c001bb34:	5d                   	pop    ebp
c001bb35:	c3                   	ret    
c001bb36:	83 ec 0c             	sub    esp,0xc
c001bb39:	50                   	push   eax
c001bb3a:	e8 0c bc 00 00       	call   c002774b <HalEndOfInterrupt(int)>
c001bb3f:	83 c4 10             	add    esp,0x10
c001bb42:	eb b2                	jmp    c001baf6 <int_handler+0x2a>
c001bb44:	83 ec 08             	sub    esp,0x8
c001bb47:	52                   	push   edx
c001bb48:	57                   	push   edi
c001bb49:	ff d0                	call   eax
c001bb4b:	83 c4 10             	add    esp,0x10
c001bb4e:	83 c4 0c             	add    esp,0xc
c001bb51:	5b                   	pop    ebx
c001bb52:	5e                   	pop    esi
c001bb53:	5f                   	pop    edi
c001bb54:	5d                   	pop    ebp
c001bb55:	c3                   	ret    

c001bb56 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c001bb56:	56                   	push   esi
c001bb57:	31 c0                	xor    eax,eax
c001bb59:	53                   	push   ebx
c001bb5a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bb5e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb62:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bb66:	89 ca                	mov    edx,ecx
c001bb68:	c1 e2 04             	shl    edx,0x4
c001bb6b:	83 bc 82 20 ef 03 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffc10e0],0x0
c001bb73:	74 17                	je     c001bb8c <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001bb75:	83 c0 01             	add    eax,0x1
c001bb78:	83 f8 04             	cmp    eax,0x4
c001bb7b:	75 ee                	jne    c001bb6b <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001bb7d:	c7 44 24 0c d0 28 03 c0 	mov    DWORD PTR [esp+0xc],0xc00328d0
c001bb85:	5b                   	pop    ebx
c001bb86:	5e                   	pop    esi
c001bb87:	e9 76 4b 00 00       	jmp    c0020702 <KePanic(char const*)>
c001bb8c:	8d 04 88             	lea    eax,[eax+ecx*4]
c001bb8f:	89 1c 85 20 ef 03 c0 	mov    DWORD PTR [eax*4-0x3ffc10e0],ebx
c001bb96:	5b                   	pop    ebx
c001bb97:	89 34 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],esi
c001bb9e:	5e                   	pop    esi
c001bb9f:	c3                   	ret    

c001bba0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001bba0:	55                   	push   ebp
c001bba1:	57                   	push   edi
c001bba2:	56                   	push   esi
c001bba3:	53                   	push   ebx
c001bba4:	83 ec 0c             	sub    esp,0xc
c001bba7:	8b 15 bc b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9bc
c001bbad:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001bbb1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bbb5:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bbbc:	8d 6e 20             	lea    ebp,[esi+0x20]
c001bbbf:	74 57                	je     c001bc18 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c001bbc1:	84 c0                	test   al,al
c001bbc3:	89 c7                	mov    edi,eax
c001bbc5:	74 1d                	je     c001bbe4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c001bbc7:	83 fe 0f             	cmp    esi,0xf
c001bbca:	0f 8f d9 00 00 00    	jg     c001bca9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c001bbd0:	0f b6 b6 88 45 03 c0 	movzx  esi,BYTE PTR [esi-0x3ffcba78]
c001bbd7:	0f b7 bc 36 c0 06 04 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffbf940]
c001bbdf:	d1 ef                	shr    edi,1
c001bbe1:	83 e7 01             	and    edi,0x1
c001bbe4:	a1 c0 1b 04 c0       	mov    eax,ds:0xc0041bc0
c001bbe9:	83 ec 08             	sub    esp,0x8
c001bbec:	31 db                	xor    ebx,ebx
c001bbee:	50                   	push   eax
c001bbef:	68 dd 28 03 c0       	push   0xc00328dd
c001bbf4:	e8 c5 d8 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001bbf9:	a1 c0 1b 04 c0       	mov    eax,ds:0xc0041bc0
c001bbfe:	83 c4 10             	add    esp,0x10
c001bc01:	85 c0                	test   eax,eax
c001bc03:	7f 59                	jg     c001bc5e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c001bc05:	8d 6e 20             	lea    ebp,[esi+0x20]
c001bc08:	83 ec 0c             	sub    esp,0xc
c001bc0b:	68 f4 28 03 c0       	push   0xc00328f4
c001bc10:	e8 ed 4a 00 00       	call   c0020702 <KePanic(char const*)>
c001bc15:	83 c4 10             	add    esp,0x10
c001bc18:	89 e8                	mov    eax,ebp
c001bc1a:	31 d2                	xor    edx,edx
c001bc1c:	c1 e0 04             	shl    eax,0x4
c001bc1f:	8b 8c 90 20 ef 03 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffc10e0]
c001bc26:	85 c9                	test   ecx,ecx
c001bc28:	0f 84 92 00 00 00    	je     c001bcc0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c001bc2e:	83 c2 01             	add    edx,0x1
c001bc31:	83 fa 04             	cmp    edx,0x4
c001bc34:	75 e9                	jne    c001bc1f <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c001bc36:	83 ec 0c             	sub    esp,0xc
c001bc39:	68 48 29 03 c0       	push   0xc0032948
c001bc3e:	e8 bf 4a 00 00       	call   c0020702 <KePanic(char const*)>
c001bc43:	83 c4 10             	add    esp,0x10
c001bc46:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc4b:	83 c4 0c             	add    esp,0xc
c001bc4e:	5b                   	pop    ebx
c001bc4f:	5e                   	pop    esi
c001bc50:	5f                   	pop    edi
c001bc51:	5d                   	pop    ebp
c001bc52:	c3                   	ret    
c001bc53:	83 c3 01             	add    ebx,0x1
c001bc56:	39 1d c0 1b 04 c0    	cmp    DWORD PTR ds:0xc0041bc0,ebx
c001bc5c:	7e a7                	jle    c001bc05 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c001bc5e:	8b 2c 9d e0 1b 04 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffbe420]
c001bc65:	83 ec 08             	sub    esp,0x8
c001bc68:	56                   	push   esi
c001bc69:	55                   	push   ebp
c001bc6a:	e8 3d 26 01 00       	call   c002e2ac <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001bc6f:	83 c4 10             	add    esp,0x10
c001bc72:	84 c0                	test   al,al
c001bc74:	74 dd                	je     c001bc53 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c001bc76:	89 f8                	mov    eax,edi
c001bc78:	83 ec 04             	sub    esp,0x4
c001bc7b:	8b 1c 9d e0 1b 04 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffbe420]
c001bc82:	8d 6e 20             	lea    ebp,[esi+0x20]
c001bc85:	0f b6 f8             	movzx  edi,al
c001bc88:	57                   	push   edi
c001bc89:	89 e8                	mov    eax,ebp
c001bc8b:	6a 00                	push   0x0
c001bc8d:	0f b6 c0             	movzx  eax,al
c001bc90:	50                   	push   eax
c001bc91:	89 f0                	mov    eax,esi
c001bc93:	6a 00                	push   0x0
c001bc95:	0f b6 c0             	movzx  eax,al
c001bc98:	6a 00                	push   0x0
c001bc9a:	50                   	push   eax
c001bc9b:	53                   	push   ebx
c001bc9c:	e8 77 27 01 00       	call   c002e418 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001bca1:	83 c4 20             	add    esp,0x20
c001bca4:	e9 6f ff ff ff       	jmp    c001bc18 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c001bca9:	83 ec 0c             	sub    esp,0xc
c001bcac:	31 ff                	xor    edi,edi
c001bcae:	68 10 29 03 c0       	push   0xc0032910
c001bcb3:	e8 4a 4a 00 00       	call   c0020702 <KePanic(char const*)>
c001bcb8:	83 c4 10             	add    esp,0x10
c001bcbb:	e9 24 ff ff ff       	jmp    c001bbe4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c001bcc0:	8d 04 aa             	lea    eax,[edx+ebp*4]
c001bcc3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bcc7:	89 14 85 20 ef 03 c0 	mov    DWORD PTR [eax*4-0x3ffc10e0],edx
c001bcce:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bcd2:	89 14 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],edx
c001bcd9:	83 c4 0c             	add    esp,0xc
c001bcdc:	89 f0                	mov    eax,esi
c001bcde:	5b                   	pop    ebx
c001bcdf:	5e                   	pop    esi
c001bce0:	5f                   	pop    edi
c001bce1:	5d                   	pop    ebp
c001bce2:	c3                   	ret    

c001bce3 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c001bce3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bce7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bceb:	c1 e0 04             	shl    eax,0x4
c001bcee:	8d 50 10             	lea    edx,[eax+0x10]
c001bcf1:	39 88 20 ef 03 c0    	cmp    DWORD PTR [eax-0x3ffc10e0],ecx
c001bcf7:	74 08                	je     c001bd01 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001bcf9:	83 c0 04             	add    eax,0x4
c001bcfc:	39 d0                	cmp    eax,edx
c001bcfe:	75 f1                	jne    c001bcf1 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001bd00:	c3                   	ret    
c001bd01:	c7 80 20 ef 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc10e0],0x0
c001bd0b:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001bd15:	eb e2                	jmp    c001bcf9 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001bd17 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001bd17:	56                   	push   esi
c001bd18:	53                   	push   ebx
c001bd19:	83 ec 04             	sub    esp,0x4
c001bd1c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bd21:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd25:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bd29:	74 0e                	je     c001bd39 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c001bd2b:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001bd30:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c001bd37:	75 34                	jne    c001bd6d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c001bd39:	8d 43 20             	lea    eax,[ebx+0x20]
c001bd3c:	c1 e0 04             	shl    eax,0x4
c001bd3f:	8d 50 10             	lea    edx,[eax+0x10]
c001bd42:	39 b0 20 ef 03 c0    	cmp    DWORD PTR [eax-0x3ffc10e0],esi
c001bd48:	74 0d                	je     c001bd57 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c001bd4a:	83 c0 04             	add    eax,0x4
c001bd4d:	39 d0                	cmp    eax,edx
c001bd4f:	75 f1                	jne    c001bd42 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001bd51:	83 c4 04             	add    esp,0x4
c001bd54:	5b                   	pop    ebx
c001bd55:	5e                   	pop    esi
c001bd56:	c3                   	ret    
c001bd57:	c7 80 20 ef 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc10e0],0x0
c001bd61:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001bd6b:	eb dd                	jmp    c001bd4a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c001bd6d:	83 fb 0f             	cmp    ebx,0xf
c001bd70:	7f 09                	jg     c001bd7b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c001bd72:	0f b6 9b 88 45 03 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffcba78]
c001bd79:	eb be                	jmp    c001bd39 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c001bd7b:	83 ec 0c             	sub    esp,0xc
c001bd7e:	68 01 29 03 c0       	push   0xc0032901
c001bd83:	e8 7a 49 00 00       	call   c0020702 <KePanic(char const*)>
c001bd88:	83 c4 10             	add    esp,0x10
c001bd8b:	eb ac                	jmp    c001bd39 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c001bd8d <setupINTS()>:
c001bd8d:	31 c0                	xor    eax,eax
c001bd8f:	c7 80 20 ef 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc10e0],0x0
c001bd99:	83 c0 10             	add    eax,0x10
c001bd9c:	c7 80 10 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20f0],0x0
c001bda6:	c7 80 14 ef 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc10ec],0x0
c001bdb0:	c7 80 14 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20ec],0x0
c001bdba:	c7 80 18 ef 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc10e8],0x0
c001bdc4:	c7 80 18 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e8],0x0
c001bdce:	c7 80 1c ef 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc10e4],0x0
c001bdd8:	c7 80 1c df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e4],0x0
c001bde2:	3d 00 10 00 00       	cmp    eax,0x1000
c001bde7:	75 a6                	jne    c001bd8f <setupINTS()+0x2>
c001bde9:	c3                   	ret    

c001bdea <convertLegacyIRQNumber(int)>:
c001bdea:	83 ec 0c             	sub    esp,0xc
c001bded:	8b 15 bc b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9bc
c001bdf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdf7:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bdfe:	74 0c                	je     c001be0c <convertLegacyIRQNumber(int)+0x22>
c001be00:	83 f8 0f             	cmp    eax,0xf
c001be03:	7f 0b                	jg     c001be10 <convertLegacyIRQNumber(int)+0x26>
c001be05:	0f b6 80 88 45 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcba78]
c001be0c:	83 c4 0c             	add    esp,0xc
c001be0f:	c3                   	ret    
c001be10:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001be14:	83 ec 0c             	sub    esp,0xc
c001be17:	68 10 29 03 c0       	push   0xc0032910
c001be1c:	e8 e1 48 00 00       	call   c0020702 <KePanic(char const*)>
c001be21:	83 c4 10             	add    esp,0x10
c001be24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be28:	83 c4 0c             	add    esp,0xc
c001be2b:	c3                   	ret    

c001be2c <startGUI(void*)>:
c001be2c:	55                   	push   ebp
c001be2d:	89 e5                	mov    ebp,esp
c001be2f:	53                   	push   ebx
c001be30:	83 ec 04             	sub    esp,0x4
c001be33:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001be38:	83 e8 01             	sub    eax,0x1
c001be3b:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001be40:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001be45:	85 c0                	test   eax,eax
c001be47:	75 01                	jne    c001be4a <startGUI(void*)+0x1e>
c001be49:	fb                   	sti    
c001be4a:	8b 1d bc b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9bc
c001be50:	83 ec 08             	sub    esp,0x8
c001be53:	6a 01                	push   0x1
c001be55:	68 6d 29 03 c0       	push   0xc003296d
c001be5a:	e8 69 8e 00 00       	call   c0024cc8 <Thr::loadDLL(char const*, bool)>
c001be5f:	83 c4 10             	add    esp,0x10
c001be62:	83 ec 08             	sub    esp,0x8
c001be65:	53                   	push   ebx
c001be66:	50                   	push   eax
c001be67:	e8 bd 90 00 00       	call   c0024f29 <Thr::executeDLL(unsigned long, void*)>
c001be6c:	83 c4 10             	add    esp,0x10
c001be6f:	8b 1d bc b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9bc
c001be75:	83 ec 08             	sub    esp,0x8
c001be78:	6a 01                	push   0x1
c001be7a:	68 87 29 03 c0       	push   0xc0032987
c001be7f:	e8 44 8e 00 00       	call   c0024cc8 <Thr::loadDLL(char const*, bool)>
c001be84:	83 c4 10             	add    esp,0x10
c001be87:	83 ec 08             	sub    esp,0x8
c001be8a:	53                   	push   ebx
c001be8b:	50                   	push   eax
c001be8c:	e8 98 90 00 00       	call   c0024f29 <Thr::executeDLL(unsigned long, void*)>
c001be91:	83 c4 10             	add    esp,0x10
c001be94:	eb fe                	jmp    c001be94 <startGUI(void*)+0x68>

c001be96 <startGUIVESA(void*)>:
c001be96:	55                   	push   ebp
c001be97:	89 e5                	mov    ebp,esp
c001be99:	53                   	push   ebx
c001be9a:	83 ec 04             	sub    esp,0x4
c001be9d:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001bea2:	83 e8 01             	sub    eax,0x1
c001bea5:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001beaa:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001beaf:	85 c0                	test   eax,eax
c001beb1:	75 01                	jne    c001beb4 <startGUIVESA(void*)+0x1e>
c001beb3:	fb                   	sti    
c001beb4:	8b 1d bc b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9bc
c001beba:	83 ec 08             	sub    esp,0x8
c001bebd:	6a 01                	push   0x1
c001bebf:	68 a5 29 03 c0       	push   0xc00329a5
c001bec4:	e8 ff 8d 00 00       	call   c0024cc8 <Thr::loadDLL(char const*, bool)>
c001bec9:	83 c4 10             	add    esp,0x10
c001becc:	83 ec 08             	sub    esp,0x8
c001becf:	53                   	push   ebx
c001bed0:	50                   	push   eax
c001bed1:	e8 53 90 00 00       	call   c0024f29 <Thr::executeDLL(unsigned long, void*)>
c001bed6:	83 c4 10             	add    esp,0x10
c001bed9:	8b 1d bc b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9bc
c001bedf:	83 ec 08             	sub    esp,0x8
c001bee2:	6a 01                	push   0x1
c001bee4:	68 87 29 03 c0       	push   0xc0032987
c001bee9:	e8 da 8d 00 00       	call   c0024cc8 <Thr::loadDLL(char const*, bool)>
c001beee:	83 c4 10             	add    esp,0x10
c001bef1:	83 ec 08             	sub    esp,0x8
c001bef4:	53                   	push   ebx
c001bef5:	50                   	push   eax
c001bef6:	e8 2e 90 00 00       	call   c0024f29 <Thr::executeDLL(unsigned long, void*)>
c001befb:	83 c4 10             	add    esp,0x10
c001befe:	eb fe                	jmp    c001befe <startGUIVESA(void*)+0x68>

c001bf00 <sendKeyToTerminal(unsigned char)>:
c001bf00:	55                   	push   ebp
c001bf01:	89 e5                	mov    ebp,esp
c001bf03:	83 ec 28             	sub    esp,0x28
c001bf06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf09:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001bf0c:	a1 08 ba 03 c0       	mov    eax,ds:0xc003ba08
c001bf11:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001bf15:	83 ec 08             	sub    esp,0x8
c001bf18:	52                   	push   edx
c001bf19:	50                   	push   eax
c001bf1a:	e8 51 ba ff ff       	call   c0017970 <VgaText::receiveKey(unsigned char)>
c001bf1f:	83 c4 10             	add    esp,0x10
c001bf22:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bf26:	83 f8 0a             	cmp    eax,0xa
c001bf29:	74 16                	je     c001bf41 <sendKeyToTerminal(unsigned char)+0x41>
c001bf2b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bf2f:	83 f8 03             	cmp    eax,0x3
c001bf32:	74 0d                	je     c001bf41 <sendKeyToTerminal(unsigned char)+0x41>
c001bf34:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bf38:	83 f8 1c             	cmp    eax,0x1c
c001bf3b:	0f 85 97 00 00 00    	jne    c001bfd8 <sendKeyToTerminal(unsigned char)+0xd8>
c001bf41:	fa                   	cli    
c001bf42:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001bf47:	83 c0 01             	add    eax,0x1
c001bf4a:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001bf4f:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c001bf54:	83 c0 01             	add    eax,0x1
c001bf57:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c001bf5c:	a1 20 ff 03 c0       	mov    eax,ds:0xc003ff20
c001bf61:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bf64:	c7 05 20 ff 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003ff20,0x0
c001bf6e:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001bf72:	74 1f                	je     c001bf93 <sendKeyToTerminal(unsigned char)+0x93>
c001bf74:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001bf77:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001bf7a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bf7d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bf80:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bf83:	83 ec 0c             	sub    esp,0xc
c001bf86:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001bf89:	e8 b6 9a 00 00       	call   c0025a44 <unblockTask(ThreadControlBlock*)>
c001bf8e:	83 c4 10             	add    esp,0x10
c001bf91:	eb db                	jmp    c001bf6e <sendKeyToTerminal(unsigned char)+0x6e>
c001bf93:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c001bf98:	83 e8 01             	sub    eax,0x1
c001bf9b:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c001bfa0:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c001bfa5:	85 c0                	test   eax,eax
c001bfa7:	75 18                	jne    c001bfc1 <sendKeyToTerminal(unsigned char)+0xc1>
c001bfa9:	a1 c8 11 04 c0       	mov    eax,ds:0xc00411c8
c001bfae:	85 c0                	test   eax,eax
c001bfb0:	74 0f                	je     c001bfc1 <sendKeyToTerminal(unsigned char)+0xc1>
c001bfb2:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c001bfbc:	e8 97 97 00 00       	call   c0025758 <schedule()>
c001bfc1:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001bfc6:	83 e8 01             	sub    eax,0x1
c001bfc9:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001bfce:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001bfd3:	85 c0                	test   eax,eax
c001bfd5:	75 01                	jne    c001bfd8 <sendKeyToTerminal(unsigned char)+0xd8>
c001bfd7:	fb                   	sti    
c001bfd8:	90                   	nop
c001bfd9:	c9                   	leave  
c001bfda:	c3                   	ret    

c001bfdb <sendKeyboardToken(KeyboardToken)>:
c001bfdb:	55                   	push   ebp
c001bfdc:	89 e5                	mov    ebp,esp
c001bfde:	83 ec 18             	sub    esp,0x18
c001bfe1:	e8 6c 47 00 00       	call   c0020752 <KeUserIOReceived()>
c001bfe6:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001bfe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfec:	0f b7 c0             	movzx  eax,ax
c001bfef:	83 f2 01             	xor    edx,0x1
c001bff2:	88 90 40 ff 03 c0    	mov    BYTE PTR [eax-0x3ffc00c0],dl
c001bff8:	a1 28 ff 03 c0       	mov    eax,ds:0xc003ff28
c001bffd:	85 c0                	test   eax,eax
c001bfff:	74 24                	je     c001c025 <sendKeyboardToken(KeyboardToken)+0x4a>
c001c001:	8b 15 28 ff 03 c0    	mov    edx,DWORD PTR ds:0xc003ff28
c001c007:	83 ec 04             	sub    esp,0x4
c001c00a:	68 40 ff 03 c0       	push   0xc003ff40
c001c00f:	83 ec 08             	sub    esp,0x8
c001c012:	89 e0                	mov    eax,esp
c001c014:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001c017:	89 08                	mov    DWORD PTR [eax],ecx
c001c019:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001c01c:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c001c020:	ff d2                	call   edx
c001c022:	83 c4 10             	add    esp,0x10
c001c025:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001c029:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001c02c:	a0 48 03 04 c0       	mov    al,ds:0xc0040348
c001c031:	0f b6 d2             	movzx  edx,dl
c001c034:	0f b6 c0             	movzx  eax,al
c001c037:	39 c2                	cmp    edx,eax
c001c039:	74 1c                	je     c001c057 <sendKeyboardToken(KeyboardToken)+0x7c>
c001c03b:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001c03e:	a2 48 03 04 c0       	mov    ds:0xc0040348,al
c001c043:	a0 48 03 04 c0       	mov    al,ds:0xc0040348
c001c048:	0f b6 c0             	movzx  eax,al
c001c04b:	83 ec 0c             	sub    esp,0xc
c001c04e:	50                   	push   eax
c001c04f:	e8 78 b0 ff ff       	call   c00170cc <setTerminalScrollLock(bool)>
c001c054:	83 c4 10             	add    esp,0x10
c001c057:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001c05a:	0f b6 c0             	movzx  eax,al
c001c05d:	85 c0                	test   eax,eax
c001c05f:	0f 84 da 00 00 00    	je     c001c13f <sendKeyboardToken(KeyboardToken)+0x164>
c001c065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c068:	0f b7 c0             	movzx  eax,ax
c001c06b:	3d 18 03 00 00       	cmp    eax,0x318
c001c070:	75 06                	jne    c001c078 <sendKeyboardToken(KeyboardToken)+0x9d>
c001c072:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001c078:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c07b:	0f b7 c0             	movzx  eax,ax
c001c07e:	3d 19 03 00 00       	cmp    eax,0x319
c001c083:	75 06                	jne    c001c08b <sendKeyboardToken(KeyboardToken)+0xb0>
c001c085:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001c08b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c08e:	0f b7 c0             	movzx  eax,ax
c001c091:	3d 1a 03 00 00       	cmp    eax,0x31a
c001c096:	75 06                	jne    c001c09e <sendKeyboardToken(KeyboardToken)+0xc3>
c001c098:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001c09e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0a1:	0f b7 c0             	movzx  eax,ax
c001c0a4:	3d 1b 03 00 00       	cmp    eax,0x31b
c001c0a9:	75 06                	jne    c001c0b1 <sendKeyboardToken(KeyboardToken)+0xd6>
c001c0ab:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001c0b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0b4:	0f b7 c0             	movzx  eax,ax
c001c0b7:	3d 1c 03 00 00       	cmp    eax,0x31c
c001c0bc:	75 06                	jne    c001c0c4 <sendKeyboardToken(KeyboardToken)+0xe9>
c001c0be:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001c0c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0c7:	0f b7 c0             	movzx  eax,ax
c001c0ca:	3d 1d 03 00 00       	cmp    eax,0x31d
c001c0cf:	75 06                	jne    c001c0d7 <sendKeyboardToken(KeyboardToken)+0xfc>
c001c0d1:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001c0d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0da:	0f b7 c0             	movzx  eax,ax
c001c0dd:	3d 1e 03 00 00       	cmp    eax,0x31e
c001c0e2:	75 06                	jne    c001c0ea <sendKeyboardToken(KeyboardToken)+0x10f>
c001c0e4:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001c0ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0ed:	0f b7 c0             	movzx  eax,ax
c001c0f0:	3d 1f 03 00 00       	cmp    eax,0x31f
c001c0f5:	75 06                	jne    c001c0fd <sendKeyboardToken(KeyboardToken)+0x122>
c001c0f7:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001c0fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c100:	0f b7 c0             	movzx  eax,ax
c001c103:	3d 20 03 00 00       	cmp    eax,0x320
c001c108:	75 06                	jne    c001c110 <sendKeyboardToken(KeyboardToken)+0x135>
c001c10a:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001c110:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c113:	0f b7 c0             	movzx  eax,ax
c001c116:	3d 21 03 00 00       	cmp    eax,0x321
c001c11b:	75 06                	jne    c001c123 <sendKeyboardToken(KeyboardToken)+0x148>
c001c11d:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001c123:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c126:	0f b7 c0             	movzx  eax,ax
c001c129:	3d 22 03 00 00       	cmp    eax,0x322
c001c12e:	0f 85 f1 00 00 00    	jne    c001c225 <sendKeyboardToken(KeyboardToken)+0x24a>
c001c134:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001c13a:	e9 e6 00 00 00       	jmp    c001c225 <sendKeyboardToken(KeyboardToken)+0x24a>
c001c13f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c142:	0f b7 c0             	movzx  eax,ax
c001c145:	3d 18 03 00 00       	cmp    eax,0x318
c001c14a:	75 0a                	jne    c001c156 <sendKeyboardToken(KeyboardToken)+0x17b>
c001c14c:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001c152:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c156:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c159:	0f b7 c0             	movzx  eax,ax
c001c15c:	3d 19 03 00 00       	cmp    eax,0x319
c001c161:	75 0a                	jne    c001c16d <sendKeyboardToken(KeyboardToken)+0x192>
c001c163:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001c169:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c16d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c170:	0f b7 c0             	movzx  eax,ax
c001c173:	3d 1a 03 00 00       	cmp    eax,0x31a
c001c178:	75 0a                	jne    c001c184 <sendKeyboardToken(KeyboardToken)+0x1a9>
c001c17a:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001c180:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c184:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c187:	0f b7 c0             	movzx  eax,ax
c001c18a:	3d 1b 03 00 00       	cmp    eax,0x31b
c001c18f:	75 0a                	jne    c001c19b <sendKeyboardToken(KeyboardToken)+0x1c0>
c001c191:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001c197:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c19b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c19e:	0f b7 c0             	movzx  eax,ax
c001c1a1:	3d 1c 03 00 00       	cmp    eax,0x31c
c001c1a6:	75 0a                	jne    c001c1b2 <sendKeyboardToken(KeyboardToken)+0x1d7>
c001c1a8:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001c1ae:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c1b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1b5:	0f b7 c0             	movzx  eax,ax
c001c1b8:	3d 1d 03 00 00       	cmp    eax,0x31d
c001c1bd:	75 0a                	jne    c001c1c9 <sendKeyboardToken(KeyboardToken)+0x1ee>
c001c1bf:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001c1c5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c1c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1cc:	0f b7 c0             	movzx  eax,ax
c001c1cf:	3d 1e 03 00 00       	cmp    eax,0x31e
c001c1d4:	75 0a                	jne    c001c1e0 <sendKeyboardToken(KeyboardToken)+0x205>
c001c1d6:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001c1dc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c1e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1e3:	0f b7 c0             	movzx  eax,ax
c001c1e6:	3d 1f 03 00 00       	cmp    eax,0x31f
c001c1eb:	75 0a                	jne    c001c1f7 <sendKeyboardToken(KeyboardToken)+0x21c>
c001c1ed:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001c1f3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c1f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1fa:	0f b7 c0             	movzx  eax,ax
c001c1fd:	3d 20 03 00 00       	cmp    eax,0x320
c001c202:	75 0a                	jne    c001c20e <sendKeyboardToken(KeyboardToken)+0x233>
c001c204:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001c20a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c20e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c211:	0f b7 c0             	movzx  eax,ax
c001c214:	3d 21 03 00 00       	cmp    eax,0x321
c001c219:	75 0a                	jne    c001c225 <sendKeyboardToken(KeyboardToken)+0x24a>
c001c21b:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001c221:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c225:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c228:	0f b7 c0             	movzx  eax,ax
c001c22b:	3d 00 02 00 00       	cmp    eax,0x200
c001c230:	75 2f                	jne    c001c261 <sendKeyboardToken(KeyboardToken)+0x286>
c001c232:	a0 40 03 04 c0       	mov    al,ds:0xc0040340
c001c237:	83 f0 01             	xor    eax,0x1
c001c23a:	0f b6 c0             	movzx  eax,al
c001c23d:	85 c0                	test   eax,eax
c001c23f:	74 20                	je     c001c261 <sendKeyboardToken(KeyboardToken)+0x286>
c001c241:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c001c246:	6a 01                	push   0x1
c001c248:	6a 00                	push   0x0
c001c24a:	68 2c be 01 c0       	push   0xc001be2c
c001c24f:	50                   	push   eax
c001c250:	e8 b7 92 00 00       	call   c002550c <Process::createThread(void (*)(void*), void*, int)>
c001c255:	83 c4 10             	add    esp,0x10
c001c258:	c6 05 40 03 04 c0 01 	mov    BYTE PTR ds:0xc0040340,0x1
c001c25f:	eb 3a                	jmp    c001c29b <sendKeyboardToken(KeyboardToken)+0x2c0>
c001c261:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c264:	0f b7 c0             	movzx  eax,ax
c001c267:	3d 01 02 00 00       	cmp    eax,0x201
c001c26c:	75 2d                	jne    c001c29b <sendKeyboardToken(KeyboardToken)+0x2c0>
c001c26e:	a0 40 03 04 c0       	mov    al,ds:0xc0040340
c001c273:	83 f0 01             	xor    eax,0x1
c001c276:	0f b6 c0             	movzx  eax,al
c001c279:	85 c0                	test   eax,eax
c001c27b:	74 1e                	je     c001c29b <sendKeyboardToken(KeyboardToken)+0x2c0>
c001c27d:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c001c282:	6a 01                	push   0x1
c001c284:	6a 00                	push   0x0
c001c286:	68 96 be 01 c0       	push   0xc001be96
c001c28b:	50                   	push   eax
c001c28c:	e8 7b 92 00 00       	call   c002550c <Process::createThread(void (*)(void*), void*, int)>
c001c291:	83 c4 10             	add    esp,0x10
c001c294:	c6 05 40 03 04 c0 01 	mov    BYTE PTR ds:0xc0040340,0x1
c001c29b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c29e:	0f b7 c0             	movzx  eax,ax
c001c2a1:	3d 25 03 00 00       	cmp    eax,0x325
c001c2a6:	75 06                	jne    c001c2ae <sendKeyboardToken(KeyboardToken)+0x2d3>
c001c2a8:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001c2ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2b1:	0f b7 c0             	movzx  eax,ax
c001c2b4:	3d 24 03 00 00       	cmp    eax,0x324
c001c2b9:	75 06                	jne    c001c2c1 <sendKeyboardToken(KeyboardToken)+0x2e6>
c001c2bb:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001c2c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2c4:	0f b7 c0             	movzx  eax,ax
c001c2c7:	3d 23 03 00 00       	cmp    eax,0x323
c001c2cc:	75 06                	jne    c001c2d4 <sendKeyboardToken(KeyboardToken)+0x2f9>
c001c2ce:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001c2d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2d7:	0f b7 c0             	movzx  eax,ax
c001c2da:	3d 26 03 00 00       	cmp    eax,0x326
c001c2df:	75 06                	jne    c001c2e7 <sendKeyboardToken(KeyboardToken)+0x30c>
c001c2e1:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001c2e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2ea:	0f b7 c0             	movzx  eax,ax
c001c2ed:	3d 27 03 00 00       	cmp    eax,0x327
c001c2f2:	75 06                	jne    c001c2fa <sendKeyboardToken(KeyboardToken)+0x31f>
c001c2f4:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001c2fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2fd:	0f b7 c0             	movzx  eax,ax
c001c300:	3d 22 03 00 00       	cmp    eax,0x322
c001c305:	75 06                	jne    c001c30d <sendKeyboardToken(KeyboardToken)+0x332>
c001c307:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001c30d:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001c311:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c314:	83 f0 01             	xor    eax,0x1
c001c317:	0f b6 c0             	movzx  eax,al
c001c31a:	85 c0                	test   eax,eax
c001c31c:	74 7c                	je     c001c39a <sendKeyboardToken(KeyboardToken)+0x3bf>
c001c31e:	a0 41 00 04 c0       	mov    al,ds:0xc0040041
c001c323:	0f b6 c0             	movzx  eax,al
c001c326:	85 c0                	test   eax,eax
c001c328:	74 43                	je     c001c36d <sendKeyboardToken(KeyboardToken)+0x392>
c001c32a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c32e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001c332:	85 c0                	test   eax,eax
c001c334:	74 2b                	je     c001c361 <sendKeyboardToken(KeyboardToken)+0x386>
c001c336:	8b 15 44 03 04 c0    	mov    edx,DWORD PTR ds:0xc0040344
c001c33c:	89 d0                	mov    eax,edx
c001c33e:	c1 e0 02             	shl    eax,0x2
c001c341:	01 d0                	add    eax,edx
c001c343:	d1 e0                	shl    eax,1
c001c345:	a3 44 03 04 c0       	mov    ds:0xc0040344,eax
c001c34a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c34d:	0f b7 c0             	movzx  eax,ax
c001c350:	8d 50 d0             	lea    edx,[eax-0x30]
c001c353:	a1 44 03 04 c0       	mov    eax,ds:0xc0040344
c001c358:	01 d0                	add    eax,edx
c001c35a:	a3 44 03 04 c0       	mov    ds:0xc0040344,eax
c001c35f:	eb 71                	jmp    c001c3d2 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c361:	c7 05 44 03 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040344,0x0
c001c36b:	eb 65                	jmp    c001c3d2 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c36d:	a1 44 03 04 c0       	mov    eax,ds:0xc0040344
c001c372:	85 c0                	test   eax,eax
c001c374:	74 18                	je     c001c38e <sendKeyboardToken(KeyboardToken)+0x3b3>
c001c376:	a1 44 03 04 c0       	mov    eax,ds:0xc0040344
c001c37b:	0f b6 c0             	movzx  eax,al
c001c37e:	83 ec 0c             	sub    esp,0xc
c001c381:	50                   	push   eax
c001c382:	e8 79 fb ff ff       	call   c001bf00 <sendKeyToTerminal(unsigned char)>
c001c387:	83 c4 10             	add    esp,0x10
c001c38a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c38e:	c7 05 44 03 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040344,0x0
c001c398:	eb 38                	jmp    c001c3d2 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c39a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c39d:	0f b7 c0             	movzx  eax,ax
c001c3a0:	3d 01 01 00 00       	cmp    eax,0x101
c001c3a5:	75 2b                	jne    c001c3d2 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c3a7:	a1 44 03 04 c0       	mov    eax,ds:0xc0040344
c001c3ac:	85 c0                	test   eax,eax
c001c3ae:	74 18                	je     c001c3c8 <sendKeyboardToken(KeyboardToken)+0x3ed>
c001c3b0:	a1 44 03 04 c0       	mov    eax,ds:0xc0040344
c001c3b5:	0f b6 c0             	movzx  eax,al
c001c3b8:	83 ec 0c             	sub    esp,0xc
c001c3bb:	50                   	push   eax
c001c3bc:	e8 3f fb ff ff       	call   c001bf00 <sendKeyToTerminal(unsigned char)>
c001c3c1:	83 c4 10             	add    esp,0x10
c001c3c4:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c3c8:	c7 05 44 03 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040344,0x0
c001c3d2:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c3d5:	83 f0 01             	xor    eax,0x1
c001c3d8:	0f b6 c0             	movzx  eax,al
c001c3db:	85 c0                	test   eax,eax
c001c3dd:	74 5a                	je     c001c439 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c3df:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c3e2:	83 f0 01             	xor    eax,0x1
c001c3e5:	0f b6 c0             	movzx  eax,al
c001c3e8:	85 c0                	test   eax,eax
c001c3ea:	74 4d                	je     c001c439 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c3ec:	a0 40 00 04 c0       	mov    al,ds:0xc0040040
c001c3f1:	83 f0 01             	xor    eax,0x1
c001c3f4:	0f b6 c0             	movzx  eax,al
c001c3f7:	85 c0                	test   eax,eax
c001c3f9:	74 3e                	je     c001c439 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c3fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c3fe:	0f b7 c0             	movzx  eax,ax
c001c401:	83 f8 1f             	cmp    eax,0x1f
c001c404:	76 0b                	jbe    c001c411 <sendKeyboardToken(KeyboardToken)+0x436>
c001c406:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c409:	0f b7 c0             	movzx  eax,ax
c001c40c:	83 f8 7e             	cmp    eax,0x7e
c001c40f:	76 16                	jbe    c001c427 <sendKeyboardToken(KeyboardToken)+0x44c>
c001c411:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c414:	0f b7 c0             	movzx  eax,ax
c001c417:	83 f8 0a             	cmp    eax,0xa
c001c41a:	74 0b                	je     c001c427 <sendKeyboardToken(KeyboardToken)+0x44c>
c001c41c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c41f:	0f b7 c0             	movzx  eax,ax
c001c422:	83 f8 08             	cmp    eax,0x8
c001c425:	75 12                	jne    c001c439 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c427:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c42a:	0f b6 c0             	movzx  eax,al
c001c42d:	83 ec 0c             	sub    esp,0xc
c001c430:	50                   	push   eax
c001c431:	e8 ca fa ff ff       	call   c001bf00 <sendKeyToTerminal(unsigned char)>
c001c436:	83 c4 10             	add    esp,0x10
c001c439:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c43c:	83 f0 01             	xor    eax,0x1
c001c43f:	0f b6 c0             	movzx  eax,al
c001c442:	85 c0                	test   eax,eax
c001c444:	74 5d                	je     c001c4a3 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c446:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c449:	83 f0 01             	xor    eax,0x1
c001c44c:	0f b6 c0             	movzx  eax,al
c001c44f:	85 c0                	test   eax,eax
c001c451:	74 50                	je     c001c4a3 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c453:	a0 40 00 04 c0       	mov    al,ds:0xc0040040
c001c458:	0f b6 c0             	movzx  eax,al
c001c45b:	85 c0                	test   eax,eax
c001c45d:	74 44                	je     c001c4a3 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c45f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c462:	0f b7 c0             	movzx  eax,ax
c001c465:	83 f8 3f             	cmp    eax,0x3f
c001c468:	76 39                	jbe    c001c4a3 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c46a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c46d:	0f b7 c0             	movzx  eax,ax
c001c470:	83 f8 7f             	cmp    eax,0x7f
c001c473:	77 2e                	ja     c001c4a3 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c475:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c478:	88 c2                	mov    dl,al
c001c47a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c47d:	0f b7 c0             	movzx  eax,ax
c001c480:	83 f8 5f             	cmp    eax,0x5f
c001c483:	76 04                	jbe    c001c489 <sendKeyboardToken(KeyboardToken)+0x4ae>
c001c485:	b0 20                	mov    al,0x20
c001c487:	eb 02                	jmp    c001c48b <sendKeyboardToken(KeyboardToken)+0x4b0>
c001c489:	b0 00                	mov    al,0x0
c001c48b:	89 d1                	mov    ecx,edx
c001c48d:	29 c1                	sub    ecx,eax
c001c48f:	89 c8                	mov    eax,ecx
c001c491:	83 e8 40             	sub    eax,0x40
c001c494:	0f b6 c0             	movzx  eax,al
c001c497:	83 ec 0c             	sub    esp,0xc
c001c49a:	50                   	push   eax
c001c49b:	e8 60 fa ff ff       	call   c001bf00 <sendKeyToTerminal(unsigned char)>
c001c4a0:	83 c4 10             	add    esp,0x10
c001c4a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c4a6:	0f b7 c0             	movzx  eax,ax
c001c4a9:	3d 00 03 00 00       	cmp    eax,0x300
c001c4ae:	75 12                	jne    c001c4c2 <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c4b0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c4b3:	83 f0 01             	xor    eax,0x1
c001c4b6:	0f b6 c0             	movzx  eax,al
c001c4b9:	85 c0                	test   eax,eax
c001c4bb:	74 05                	je     c001c4c2 <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c4bd:	e8 0b ac ff ff       	call   c00170cd <doTerminalCycle()>
c001c4c2:	90                   	nop
c001c4c3:	c9                   	leave  
c001c4c4:	c3                   	ret    

c001c4c5 <clearInternalKeybuffer(VgaText*)>:
c001c4c5:	55                   	push   ebp
c001c4c6:	89 e5                	mov    ebp,esp
c001c4c8:	83 ec 08             	sub    esp,0x8
c001c4cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c4ce:	05 02 01 00 00       	add    eax,0x102
c001c4d3:	83 ec 0c             	sub    esp,0xc
c001c4d6:	50                   	push   eax
c001c4d7:	e8 a4 40 fe ff       	call   c0000580 <strlen>
c001c4dc:	83 c4 10             	add    esp,0x10
c001c4df:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c4e2:	81 c2 02 01 00 00    	add    edx,0x102
c001c4e8:	83 ec 04             	sub    esp,0x4
c001c4eb:	50                   	push   eax
c001c4ec:	6a 00                	push   0x0
c001c4ee:	52                   	push   edx
c001c4ef:	e8 fc 3f fe ff       	call   c00004f0 <memset>
c001c4f4:	83 c4 10             	add    esp,0x10
c001c4f7:	90                   	nop
c001c4f8:	c9                   	leave  
c001c4f9:	c3                   	ret    

c001c4fa <readKeyboard(VgaText*, char*, unsigned long)>:
c001c4fa:	55                   	push   ebp
c001c4fb:	89 e5                	mov    ebp,esp
c001c4fd:	83 ec 18             	sub    esp,0x18
c001c500:	a1 28 ff 03 c0       	mov    eax,ds:0xc003ff28
c001c505:	85 c0                	test   eax,eax
c001c507:	74 2a                	je     c001c533 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c001c509:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c001c50f:	8b 15 28 ff 03 c0    	mov    edx,DWORD PTR ds:0xc003ff28
c001c515:	83 ec 04             	sub    esp,0x4
c001c518:	68 40 ff 03 c0       	push   0xc003ff40
c001c51d:	83 ec 08             	sub    esp,0x8
c001c520:	89 e0                	mov    eax,esp
c001c522:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c001c525:	89 08                	mov    DWORD PTR [eax],ecx
c001c527:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c001c52a:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c001c52e:	ff d2                	call   edx
c001c530:	83 c4 10             	add    esp,0x10
c001c533:	fb                   	sti    
c001c534:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001c53b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001c53f:	0f 84 0d 01 00 00    	je     c001c652 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c001c545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c548:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c54e:	0f be c0             	movsx  eax,al
c001c551:	85 c0                	test   eax,eax
c001c553:	75 2c                	jne    c001c581 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c001c555:	fa                   	cli    
c001c556:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001c55b:	83 c0 01             	add    eax,0x1
c001c55e:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001c563:	e8 f0 91 00 00       	call   c0025758 <schedule()>
c001c568:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001c56d:	83 e8 01             	sub    eax,0x1
c001c570:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001c575:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001c57a:	85 c0                	test   eax,eax
c001c57c:	75 c7                	jne    c001c545 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c57e:	fb                   	sti    
c001c57f:	eb c4                	jmp    c001c545 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c581:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c584:	8d 50 01             	lea    edx,[eax+0x1]
c001c587:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c58a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c58d:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c001c593:	88 10                	mov    BYTE PTR [eax],dl
c001c595:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c598:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c59e:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001c5a1:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c5a5:	83 f8 03             	cmp    eax,0x3
c001c5a8:	75 1e                	jne    c001c5c8 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c001c5aa:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c5af:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5b1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c5b4:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c5ba:	83 ec 08             	sub    esp,0x8
c001c5bd:	6a 02                	push   0x2
c001c5bf:	50                   	push   eax
c001c5c0:	e8 ef 49 00 00       	call   c0020fb4 <KeRaiseSignal(SigHandlerBlock*, int)>
c001c5c5:	83 c4 10             	add    esp,0x10
c001c5c8:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c5cc:	83 f8 1c             	cmp    eax,0x1c
c001c5cf:	75 1e                	jne    c001c5ef <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c001c5d1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c5d6:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5d8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c5db:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c5e1:	83 ec 08             	sub    esp,0x8
c001c5e4:	6a 09                	push   0x9
c001c5e6:	50                   	push   eax
c001c5e7:	e8 c8 49 00 00       	call   c0020fb4 <KeRaiseSignal(SigHandlerBlock*, int)>
c001c5ec:	83 c4 10             	add    esp,0x10
c001c5ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c5f2:	05 02 01 00 00       	add    eax,0x102
c001c5f7:	83 ec 0c             	sub    esp,0xc
c001c5fa:	50                   	push   eax
c001c5fb:	e8 80 3f fe ff       	call   c0000580 <strlen>
c001c600:	83 c4 10             	add    esp,0x10
c001c603:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c606:	81 c2 02 01 00 00    	add    edx,0x102
c001c60c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c60f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c612:	81 c2 02 01 00 00    	add    edx,0x102
c001c618:	83 ec 04             	sub    esp,0x4
c001c61b:	50                   	push   eax
c001c61c:	51                   	push   ecx
c001c61d:	52                   	push   edx
c001c61e:	e8 ad 3d fe ff       	call   c00003d0 <memmove>
c001c623:	83 c4 10             	add    esp,0x10
c001c626:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c001c62a:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c001c62e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c632:	83 f8 0a             	cmp    eax,0xa
c001c635:	74 16                	je     c001c64d <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c637:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c63b:	83 f8 03             	cmp    eax,0x3
c001c63e:	74 0d                	je     c001c64d <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c640:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c644:	83 f8 1c             	cmp    eax,0x1c
c001c647:	0f 85 ee fe ff ff    	jne    c001c53b <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c001c64d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c650:	eb 03                	jmp    c001c655 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c001c652:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c655:	c9                   	leave  
c001c656:	c3                   	ret    
c001c657:	90                   	nop

c001c658 <Keyboard::Keyboard(char const*)>:
c001c658:	83 ec 0c             	sub    esp,0xc
c001c65b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c65f:	83 ec 08             	sub    esp,0x8
c001c662:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c666:	50                   	push   eax
c001c667:	e8 00 f1 ff ff       	call   c001b76c <Device::Device(char const*)>
c001c66c:	83 c4 10             	add    esp,0x10
c001c66f:	ba c8 29 03 c0       	mov    edx,0xc00329c8
c001c674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c678:	89 10                	mov    DWORD PTR [eax],edx
c001c67a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c67e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001c688:	c6 05 24 ff 03 c0 01 	mov    BYTE PTR ds:0xc003ff24,0x1
c001c68f:	90                   	nop
c001c690:	83 c4 0c             	add    esp,0xc
c001c693:	c3                   	ret    

c001c694 <Keyboard::~Keyboard()>:
c001c694:	83 ec 0c             	sub    esp,0xc
c001c697:	ba c8 29 03 c0       	mov    edx,0xc00329c8
c001c69c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6a0:	89 10                	mov    DWORD PTR [eax],edx
c001c6a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6a6:	83 ec 0c             	sub    esp,0xc
c001c6a9:	50                   	push   eax
c001c6aa:	e8 5d ee ff ff       	call   c001b50c <Device::~Device()>
c001c6af:	83 c4 10             	add    esp,0x10
c001c6b2:	90                   	nop
c001c6b3:	83 c4 0c             	add    esp,0xc
c001c6b6:	c3                   	ret    
c001c6b7:	90                   	nop

c001c6b8 <Keyboard::~Keyboard()>:
c001c6b8:	83 ec 0c             	sub    esp,0xc
c001c6bb:	83 ec 0c             	sub    esp,0xc
c001c6be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6c2:	e8 cd ff ff ff       	call   c001c694 <Keyboard::~Keyboard()>
c001c6c7:	83 c4 10             	add    esp,0x10
c001c6ca:	83 ec 08             	sub    esp,0x8
c001c6cd:	68 5c 01 00 00       	push   0x15c
c001c6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6d6:	e8 e5 cc ff ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c001c6db:	83 c4 10             	add    esp,0x10
c001c6de:	83 c4 0c             	add    esp,0xc
c001c6e1:	c3                   	ret    

c001c6e2 <LogicalDisk::close(int, int, void*)>:
c001c6e2:	83 c8 ff             	or     eax,0xffffffff
c001c6e5:	c3                   	ret    

c001c6e6 <LogicalDisk::~LogicalDisk()>:
c001c6e6:	83 ec 0c             	sub    esp,0xc
c001c6e9:	ba 40 2a 03 c0       	mov    edx,0xc0032a40
c001c6ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6f2:	89 10                	mov    DWORD PTR [eax],edx
c001c6f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6f8:	83 ec 0c             	sub    esp,0xc
c001c6fb:	50                   	push   eax
c001c6fc:	e8 0b ee ff ff       	call   c001b50c <Device::~Device()>
c001c701:	83 c4 10             	add    esp,0x10
c001c704:	90                   	nop
c001c705:	83 c4 0c             	add    esp,0xc
c001c708:	c3                   	ret    
c001c709:	90                   	nop

c001c70a <LogicalDisk::~LogicalDisk()>:
c001c70a:	83 ec 0c             	sub    esp,0xc
c001c70d:	83 ec 0c             	sub    esp,0xc
c001c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c714:	e8 cd ff ff ff       	call   c001c6e6 <LogicalDisk::~LogicalDisk()>
c001c719:	83 c4 10             	add    esp,0x10
c001c71c:	83 ec 08             	sub    esp,0x8
c001c71f:	68 78 01 00 00       	push   0x178
c001c724:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c728:	e8 93 cc ff ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c001c72d:	83 c4 10             	add    esp,0x10
c001c730:	83 c4 0c             	add    esp,0xc
c001c733:	c3                   	ret    

c001c734 <LogicalDisk::open(int, int, void*)>:
c001c734:	83 ec 18             	sub    esp,0x18
c001c737:	68 f4 29 03 c0       	push   0xc00329f4
c001c73c:	e8 c1 3f 00 00       	call   c0020702 <KePanic(char const*)>
c001c741:	83 c8 ff             	or     eax,0xffffffff
c001c744:	83 c4 1c             	add    esp,0x1c
c001c747:	c3                   	ret    

c001c748 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001c748:	53                   	push   ebx
c001c749:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c74d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c751:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c755:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001c75b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001c761:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001c767:	77 10                	ja     c001c779 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001c769:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001c76f:	89 d3                	mov    ebx,edx
c001c771:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001c777:	72 05                	jb     c001c77e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001c779:	83 c8 ff             	or     eax,0xffffffff
c001c77c:	89 c2                	mov    edx,eax
c001c77e:	5b                   	pop    ebx
c001c77f:	c3                   	ret    

c001c780 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001c780:	56                   	push   esi
c001c781:	83 c8 ff             	or     eax,0xffffffff
c001c784:	53                   	push   ebx
c001c785:	89 c2                	mov    edx,eax
c001c787:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c78b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001c78f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c793:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c799:	77 27                	ja     c001c7c2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c79b:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001c7a1:	89 d8                	mov    eax,ebx
c001c7a3:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001c7a9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c7ae:	89 c2                	mov    edx,eax
c001c7b0:	73 10                	jae    c001c7c2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c7b2:	89 c8                	mov    eax,ecx
c001c7b4:	89 da                	mov    edx,ebx
c001c7b6:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c7bc:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001c7c2:	5b                   	pop    ebx
c001c7c3:	5e                   	pop    esi
c001c7c4:	c3                   	ret    
c001c7c5:	90                   	nop

c001c7c6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001c7c6:	83 ec 1c             	sub    esp,0x1c
c001c7c9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c7cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c7d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c7d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7d9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c7dd:	89 04 24             	mov    DWORD PTR [esp],eax
c001c7e0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c7e4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c7e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c7ec:	83 ec 08             	sub    esp,0x8
c001c7ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c7f3:	50                   	push   eax
c001c7f4:	e8 73 ef ff ff       	call   c001b76c <Device::Device(char const*)>
c001c7f9:	83 c4 10             	add    esp,0x10
c001c7fc:	ba 40 2a 03 c0       	mov    edx,0xc0032a40
c001c801:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c805:	89 10                	mov    DWORD PTR [eax],edx
c001c807:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c80b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c812:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c816:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c81d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c821:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c828:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c82c:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001c836:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c83a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c83e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c842:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001c848:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001c84e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c852:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c855:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c859:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001c85f:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001c865:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c869:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c86d:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001c873:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c877:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c881:	90                   	nop
c001c882:	83 c4 1c             	add    esp,0x1c
c001c885:	c3                   	ret    

c001c886 <LogicalDisk::assignDriveLetter()>:
c001c886:	55                   	push   ebp
c001c887:	57                   	push   edi
c001c888:	56                   	push   esi
c001c889:	53                   	push   ebx
c001c88a:	83 ec 14             	sub    esp,0x14
c001c88d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c891:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001c897:	b0 41                	mov    al,0x41
c001c899:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c001c89f:	84 d2                	test   dl,dl
c001c8a1:	75 02                	jne    c001c8a5 <LogicalDisk::assignDriveLetter()+0x1f>
c001c8a3:	b0 43                	mov    al,0x43
c001c8a5:	8b 3d 60 03 04 c0    	mov    edi,DWORD PTR ds:0xc0040360
c001c8ab:	0f b6 ca             	movzx  ecx,dl
c001c8ae:	0f be e8             	movsx  ebp,al
c001c8b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c8b5:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c8b9:	8b 3d 64 03 04 c0    	mov    edi,DWORD PTR ds:0xc0040364
c001c8bf:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001c8c3:	3c 43                	cmp    al,0x43
c001c8c5:	75 10                	jne    c001c8d7 <LogicalDisk::assignDriveLetter()+0x51>
c001c8c7:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001c8ce:	75 5a                	jne    c001c92a <LogicalDisk::assignDriveLetter()+0xa4>
c001c8d0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c8d5:	75 53                	jne    c001c92a <LogicalDisk::assignDriveLetter()+0xa4>
c001c8d7:	8d 75 bf             	lea    esi,[ebp-0x41]
c001c8da:	ba 01 00 00 00       	mov    edx,0x1
c001c8df:	89 34 24             	mov    DWORD PTR [esp],esi
c001c8e2:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001c8e5:	d3 e2                	shl    edx,cl
c001c8e7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c8eb:	89 d7                	mov    edi,edx
c001c8ed:	89 d6                	mov    esi,edx
c001c8ef:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c001c8f3:	c1 ff 1f             	sar    edi,0x1f
c001c8f6:	21 f9                	and    ecx,edi
c001c8f8:	09 d1                	or     ecx,edx
c001c8fa:	75 2e                	jne    c001c92a <LogicalDisk::assignDriveLetter()+0xa4>
c001c8fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c900:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c904:	09 f2                	or     edx,esi
c001c906:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c909:	89 15 60 03 04 c0    	mov    DWORD PTR ds:0xc0040360,edx
c001c90f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c913:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001c919:	89 1c b5 80 03 04 c0 	mov    DWORD PTR [esi*4-0x3ffbfc80],ebx
c001c920:	09 fa                	or     edx,edi
c001c922:	89 15 64 03 04 c0    	mov    DWORD PTR ds:0xc0040364,edx
c001c928:	eb 0d                	jmp    c001c937 <LogicalDisk::assignDriveLetter()+0xb1>
c001c92a:	8d 50 01             	lea    edx,[eax+0x1]
c001c92d:	45                   	inc    ebp
c001c92e:	80 fa 5b             	cmp    dl,0x5b
c001c931:	88 d0                	mov    al,dl
c001c933:	75 8e                	jne    c001c8c3 <LogicalDisk::assignDriveLetter()+0x3d>
c001c935:	31 c0                	xor    eax,eax
c001c937:	83 c4 14             	add    esp,0x14
c001c93a:	5b                   	pop    ebx
c001c93b:	5e                   	pop    esi
c001c93c:	5f                   	pop    edi
c001c93d:	5d                   	pop    ebp
c001c93e:	c3                   	ret    
c001c93f:	90                   	nop

c001c940 <LogicalDisk::mount()>:
c001c940:	56                   	push   esi
c001c941:	53                   	push   ebx
c001c942:	53                   	push   ebx
c001c943:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c947:	8b 1d 04 df 03 c0    	mov    ebx,DWORD PTR ds:0xc003df04
c001c94d:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c001c957:	85 db                	test   ebx,ebx
c001c959:	74 27                	je     c001c982 <LogicalDisk::mount()+0x42>
c001c95b:	51                   	push   ecx
c001c95c:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001c963:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c965:	83 e8 41             	sub    eax,0x41
c001c968:	50                   	push   eax
c001c969:	56                   	push   esi
c001c96a:	53                   	push   ebx
c001c96b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c96e:	83 c4 10             	add    esp,0x10
c001c971:	84 c0                	test   al,al
c001c973:	74 08                	je     c001c97d <LogicalDisk::mount()+0x3d>
c001c975:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c001c97b:	eb 07                	jmp    c001c984 <LogicalDisk::mount()+0x44>
c001c97d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001c980:	eb d5                	jmp    c001c957 <LogicalDisk::mount()+0x17>
c001c982:	31 c0                	xor    eax,eax
c001c984:	5a                   	pop    edx
c001c985:	5b                   	pop    ebx
c001c986:	5e                   	pop    esi
c001c987:	c3                   	ret    

c001c988 <LogicalDisk::unmount()>:
c001c988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c98c:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c996:	c3                   	ret    
c001c997:	90                   	nop

c001c998 <LogicalDisk::eject()>:
c001c998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c99c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c9a2:	8b 10                	mov    edx,DWORD PTR [eax]
c001c9a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c9a8:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001c9ab:	90                   	nop

c001c9ac <LogicalDisk::unassignDriveLetter()>:
c001c9ac:	57                   	push   edi
c001c9ad:	56                   	push   esi
c001c9ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c9b2:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001c9b9:	85 c9                	test   ecx,ecx
c001c9bb:	75 0f                	jne    c001c9cc <LogicalDisk::unassignDriveLetter()+0x20>
c001c9bd:	c7 44 24 0c 18 2a 03 c0 	mov    DWORD PTR [esp+0xc],0xc0032a18
c001c9c5:	5e                   	pop    esi
c001c9c6:	5f                   	pop    edi
c001c9c7:	e9 36 3d 00 00       	jmp    c0020702 <KePanic(char const*)>
c001c9cc:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001c9d3:	83 e9 41             	sub    ecx,0x41
c001c9d6:	b8 01 00 00 00       	mov    eax,0x1
c001c9db:	c7 04 8d 80 03 04 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffbfc80],0x0
c001c9e6:	d3 e0                	shl    eax,cl
c001c9e8:	89 c7                	mov    edi,eax
c001c9ea:	f7 d0                	not    eax
c001c9ec:	c1 ff 1f             	sar    edi,0x1f
c001c9ef:	21 05 60 03 04 c0    	and    DWORD PTR ds:0xc0040360,eax
c001c9f5:	89 fe                	mov    esi,edi
c001c9f7:	f7 d6                	not    esi
c001c9f9:	21 35 64 03 04 c0    	and    DWORD PTR ds:0xc0040364,esi
c001c9ff:	5e                   	pop    esi
c001ca00:	5f                   	pop    edi
c001ca01:	c3                   	ret    

c001ca02 <LogicalDisk::read(unsigned long long, int, void*)>:
c001ca02:	57                   	push   edi
c001ca03:	56                   	push   esi
c001ca04:	53                   	push   ebx
c001ca05:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ca09:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ca0d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ca11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ca15:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001ca1b:	77 41                	ja     c001ca5e <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001ca1d:	99                   	cdq    
c001ca1e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001ca24:	01 c8                	add    eax,ecx
c001ca26:	11 da                	adc    edx,ebx
c001ca28:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001ca2e:	19 d7                	sbb    edi,edx
c001ca30:	72 33                	jb     c001ca65 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001ca32:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001ca38:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001ca3e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001ca42:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001ca46:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001ca4c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ca52:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ca56:	5b                   	pop    ebx
c001ca57:	5e                   	pop    esi
c001ca58:	5f                   	pop    edi
c001ca59:	e9 c6 0a 00 00       	jmp    c001d524 <VCache::read(unsigned long long, int, void*)>
c001ca5e:	b8 05 00 00 00       	mov    eax,0x5
c001ca63:	eb 05                	jmp    c001ca6a <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001ca65:	b8 07 00 00 00       	mov    eax,0x7
c001ca6a:	5b                   	pop    ebx
c001ca6b:	5e                   	pop    esi
c001ca6c:	5f                   	pop    edi
c001ca6d:	c3                   	ret    

c001ca6e <LogicalDisk::write(unsigned long long, int, void*)>:
c001ca6e:	57                   	push   edi
c001ca6f:	56                   	push   esi
c001ca70:	53                   	push   ebx
c001ca71:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ca75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ca79:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ca7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ca81:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001ca87:	77 41                	ja     c001caca <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001ca89:	99                   	cdq    
c001ca8a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001ca90:	01 c8                	add    eax,ecx
c001ca92:	11 da                	adc    edx,ebx
c001ca94:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001ca9a:	19 d7                	sbb    edi,edx
c001ca9c:	72 33                	jb     c001cad1 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001ca9e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001caa4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001caaa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001caae:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001cab2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001cab8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cabe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cac2:	5b                   	pop    ebx
c001cac3:	5e                   	pop    esi
c001cac4:	5f                   	pop    edi
c001cac5:	e9 6a 09 00 00       	jmp    c001d434 <VCache::write(unsigned long long, int, void*)>
c001caca:	b8 05 00 00 00       	mov    eax,0x5
c001cacf:	eb 05                	jmp    c001cad6 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001cad1:	b8 07 00 00 00       	mov    eax,0x7
c001cad6:	5b                   	pop    ebx
c001cad7:	5e                   	pop    esi
c001cad8:	5f                   	pop    edi
c001cad9:	c3                   	ret    
c001cada:	66 90                	xchg   ax,ax

c001cadc <Mouse::Mouse(char const*)>:
c001cadc:	83 ec 0c             	sub    esp,0xc
c001cadf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cae3:	83 ec 08             	sub    esp,0x8
c001cae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001caea:	50                   	push   eax
c001caeb:	e8 7c ec ff ff       	call   c001b76c <Device::Device(char const*)>
c001caf0:	83 c4 10             	add    esp,0x10
c001caf3:	ba 6c 2a 03 c0       	mov    edx,0xc0032a6c
c001caf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cafc:	89 10                	mov    DWORD PTR [eax],edx
c001cafe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb02:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001cb0c:	90                   	nop
c001cb0d:	83 c4 0c             	add    esp,0xc
c001cb10:	c3                   	ret    
c001cb11:	90                   	nop
c001cb12:	66 90                	xchg   ax,ax

c001cb14 <Mouse::~Mouse()>:
c001cb14:	83 ec 0c             	sub    esp,0xc
c001cb17:	ba 6c 2a 03 c0       	mov    edx,0xc0032a6c
c001cb1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb20:	89 10                	mov    DWORD PTR [eax],edx
c001cb22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb26:	83 ec 0c             	sub    esp,0xc
c001cb29:	50                   	push   eax
c001cb2a:	e8 dd e9 ff ff       	call   c001b50c <Device::~Device()>
c001cb2f:	83 c4 10             	add    esp,0x10
c001cb32:	90                   	nop
c001cb33:	83 c4 0c             	add    esp,0xc
c001cb36:	c3                   	ret    
c001cb37:	90                   	nop

c001cb38 <Mouse::~Mouse()>:
c001cb38:	83 ec 0c             	sub    esp,0xc
c001cb3b:	83 ec 0c             	sub    esp,0xc
c001cb3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb42:	e8 cd ff ff ff       	call   c001cb14 <Mouse::~Mouse()>
c001cb47:	83 c4 10             	add    esp,0x10
c001cb4a:	83 ec 08             	sub    esp,0x8
c001cb4d:	68 58 01 00 00       	push   0x158
c001cb52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb56:	e8 65 c8 ff ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c001cb5b:	83 c4 10             	add    esp,0x10
c001cb5e:	83 c4 0c             	add    esp,0xc
c001cb61:	c3                   	ret    

c001cb62 <NIC::getMAC()>:
c001cb62:	31 c0                	xor    eax,eax
c001cb64:	31 d2                	xor    edx,edx
c001cb66:	c3                   	ret    
c001cb67:	90                   	nop

c001cb68 <NIC::write(int, unsigned char*, int*)>:
c001cb68:	b8 01 00 00 00       	mov    eax,0x1
c001cb6d:	c3                   	ret    

c001cb6e <NIC::NIC(char const*)>:
c001cb6e:	83 ec 0c             	sub    esp,0xc
c001cb71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb75:	83 ec 08             	sub    esp,0x8
c001cb78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb7c:	50                   	push   eax
c001cb7d:	e8 ea eb ff ff       	call   c001b76c <Device::Device(char const*)>
c001cb82:	83 c4 10             	add    esp,0x10
c001cb85:	ba 98 2a 03 c0       	mov    edx,0xc0032a98
c001cb8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb8e:	89 10                	mov    DWORD PTR [eax],edx
c001cb90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb94:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001cb9e:	90                   	nop
c001cb9f:	83 c4 0c             	add    esp,0xc
c001cba2:	c3                   	ret    
c001cba3:	90                   	nop

c001cba4 <NIC::~NIC()>:
c001cba4:	83 ec 0c             	sub    esp,0xc
c001cba7:	ba 98 2a 03 c0       	mov    edx,0xc0032a98
c001cbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbb0:	89 10                	mov    DWORD PTR [eax],edx
c001cbb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbb6:	83 ec 0c             	sub    esp,0xc
c001cbb9:	50                   	push   eax
c001cbba:	e8 4d e9 ff ff       	call   c001b50c <Device::~Device()>
c001cbbf:	83 c4 10             	add    esp,0x10
c001cbc2:	90                   	nop
c001cbc3:	83 c4 0c             	add    esp,0xc
c001cbc6:	c3                   	ret    
c001cbc7:	90                   	nop

c001cbc8 <NIC::~NIC()>:
c001cbc8:	83 ec 0c             	sub    esp,0xc
c001cbcb:	83 ec 0c             	sub    esp,0xc
c001cbce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbd2:	e8 cd ff ff ff       	call   c001cba4 <NIC::~NIC()>
c001cbd7:	83 c4 10             	add    esp,0x10
c001cbda:	83 ec 08             	sub    esp,0x8
c001cbdd:	68 58 01 00 00       	push   0x158
c001cbe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbe6:	e8 d5 c7 ff ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c001cbeb:	83 c4 10             	add    esp,0x10
c001cbee:	83 c4 0c             	add    esp,0xc
c001cbf1:	c3                   	ret    

c001cbf2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001cbf2:	55                   	push   ebp
c001cbf3:	57                   	push   edi
c001cbf4:	56                   	push   esi
c001cbf5:	53                   	push   ebx
c001cbf6:	81 ec 28 01 00 00    	sub    esp,0x128
c001cbfc:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001cc03:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c001cc0a:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c001cc11:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c001cc18:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc1c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001cc20:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001cc27:	e8 3c ec ff ff       	call   c001b868 <Device::getName()>
c001cc2c:	5a                   	pop    edx
c001cc2d:	59                   	pop    ecx
c001cc2e:	50                   	push   eax
c001cc2f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001cc33:	55                   	push   ebp
c001cc34:	e8 17 3a fe ff       	call   c0000650 <strcpy>
c001cc39:	5b                   	pop    ebx
c001cc3a:	58                   	pop    eax
c001cc3b:	68 c4 2a 03 c0       	push   0xc0032ac4
c001cc40:	55                   	push   ebp
c001cc41:	e8 2a 3c fe ff       	call   c0000870 <strcat>
c001cc46:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c001cc4d:	e8 36 9a ff ff       	call   c0016688 <malloc>
c001cc52:	83 c4 0c             	add    esp,0xc
c001cc55:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cc59:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cc5d:	89 c3                	mov    ebx,eax
c001cc5f:	57                   	push   edi
c001cc60:	56                   	push   esi
c001cc61:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001cc68:	55                   	push   ebp
c001cc69:	50                   	push   eax
c001cc6a:	e8 57 fb ff ff       	call   c001c7c6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001cc6f:	83 c4 14             	add    esp,0x14
c001cc72:	53                   	push   ebx
c001cc73:	e8 0e fc ff ff       	call   c001c886 <LogicalDisk::assignDriveLetter()>
c001cc78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc7b:	e8 c0 fc ff ff       	call   c001c940 <LogicalDisk::mount()>
c001cc80:	58                   	pop    eax
c001cc81:	5a                   	pop    edx
c001cc82:	53                   	push   ebx
c001cc83:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001cc8a:	e8 7b e9 ff ff       	call   c001b60a <Device::addChild(Device*)>
c001cc8f:	81 c4 2c 01 00 00    	add    esp,0x12c
c001cc95:	5b                   	pop    ebx
c001cc96:	5e                   	pop    esi
c001cc97:	5f                   	pop    edi
c001cc98:	5d                   	pop    ebp
c001cc99:	c3                   	ret    

c001cc9a <createPartitionsForDisk(PhysicalDisk*)>:
c001cc9a:	55                   	push   ebp
c001cc9b:	57                   	push   edi
c001cc9c:	56                   	push   esi
c001cc9d:	53                   	push   ebx
c001cc9e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001cca4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001ccab:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001ccb1:	3d 00 02 00 00       	cmp    eax,0x200
c001ccb6:	74 27                	je     c001ccdf <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001ccb8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001ccbe:	83 ec 10             	sub    esp,0x10
c001ccc1:	99                   	cdq    
c001ccc2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001ccc8:	52                   	push   edx
c001ccc9:	50                   	push   eax
c001ccca:	0f a4 f7 0a          	shld   edi,esi,0xa
c001ccce:	c1 e6 0a             	shl    esi,0xa
c001ccd1:	89 fd                	mov    ebp,edi
c001ccd3:	55                   	push   ebp
c001ccd4:	56                   	push   esi
c001ccd5:	e8 d6 21 01 00       	call   c002eeb0 <__udivdi3>
c001ccda:	e9 b9 00 00 00       	jmp    c001cd98 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001ccdf:	83 ec 0c             	sub    esp,0xc
c001cce2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cce4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001cce8:	56                   	push   esi
c001cce9:	6a 01                	push   0x1
c001cceb:	6a 00                	push   0x0
c001cced:	6a 00                	push   0x0
c001ccef:	53                   	push   ebx
c001ccf0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ccf3:	83 c4 20             	add    esp,0x20
c001ccf6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001ccfe:	75 0a                	jne    c001cd0a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001cd00:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001cd08:	74 2c                	je     c001cd36 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001cd0a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cd10:	83 ec 10             	sub    esp,0x10
c001cd13:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001cd19:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001cd1f:	89 f7                	mov    edi,esi
c001cd21:	c1 ff 1f             	sar    edi,0x1f
c001cd24:	57                   	push   edi
c001cd25:	0f a4 c2 0a          	shld   edx,eax,0xa
c001cd29:	56                   	push   esi
c001cd2a:	c1 e0 0a             	shl    eax,0xa
c001cd2d:	52                   	push   edx
c001cd2e:	50                   	push   eax
c001cd2f:	e8 7c 21 01 00       	call   c002eeb0 <__udivdi3>
c001cd34:	eb 62                	jmp    c001cd98 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001cd36:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001cd3d:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c001cd44:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001cd4b:	89 cf                	mov    edi,ecx
c001cd4d:	83 e2 7f             	and    edx,0x7f
c001cd50:	83 e7 7f             	and    edi,0x7f
c001cd53:	8d 0c 17             	lea    ecx,[edi+edx*1]
c001cd56:	83 e0 7f             	and    eax,0x7f
c001cd59:	8d 14 01             	lea    edx,[ecx+eax*1]
c001cd5c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001cd63:	83 e0 7f             	and    eax,0x7f
c001cd66:	01 d0                	add    eax,edx
c001cd68:	84 c0                	test   al,al
c001cd6a:	89 c5                	mov    ebp,eax
c001cd6c:	74 41                	je     c001cdaf <createPartitionsForDisk(PhysicalDisk*)+0x115>
c001cd6e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cd74:	83 ec 10             	sub    esp,0x10
c001cd77:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001cd7d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001cd83:	89 f7                	mov    edi,esi
c001cd85:	c1 ff 1f             	sar    edi,0x1f
c001cd88:	57                   	push   edi
c001cd89:	0f a4 c2 0a          	shld   edx,eax,0xa
c001cd8d:	56                   	push   esi
c001cd8e:	c1 e0 0a             	shl    eax,0xa
c001cd91:	52                   	push   edx
c001cd92:	50                   	push   eax
c001cd93:	e8 18 21 01 00       	call   c002eeb0 <__udivdi3>
c001cd98:	83 c4 14             	add    esp,0x14
c001cd9b:	52                   	push   edx
c001cd9c:	50                   	push   eax
c001cd9d:	6a 00                	push   0x0
c001cd9f:	6a 00                	push   0x0
c001cda1:	53                   	push   ebx
c001cda2:	e8 4b fe ff ff       	call   c001cbf2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001cda7:	83 c4 20             	add    esp,0x20
c001cdaa:	e9 73 01 00 00       	jmp    c001cf22 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c001cdaf:	89 f0                	mov    eax,esi
c001cdb1:	31 c9                	xor    ecx,ecx
c001cdb3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001cdba:	75 02                	jne    c001cdbe <createPartitionsForDisk(PhysicalDisk*)+0x124>
c001cdbc:	89 cd                	mov    ebp,ecx
c001cdbe:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c001cdc6:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001cdcd:	83 c0 10             	add    eax,0x10
c001cdd0:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c001cdd8:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c001cddf:	c1 e2 08             	shl    edx,0x8
c001cde2:	c1 e6 10             	shl    esi,0x10
c001cde5:	09 f2                	or     edx,esi
c001cde7:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c001cdee:	09 f2                	or     edx,esi
c001cdf0:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c001cdf7:	c1 e6 18             	shl    esi,0x18
c001cdfa:	09 f2                	or     edx,esi
c001cdfc:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c001ce03:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c001ce07:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001ce0e:	c1 e6 10             	shl    esi,0x10
c001ce11:	c1 e2 08             	shl    edx,0x8
c001ce14:	09 f2                	or     edx,esi
c001ce16:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c001ce1d:	09 f2                	or     edx,esi
c001ce1f:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c001ce26:	c1 e6 18             	shl    esi,0x18
c001ce29:	09 f2                	or     edx,esi
c001ce2b:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c001ce2f:	41                   	inc    ecx
c001ce30:	83 f9 04             	cmp    ecx,0x4
c001ce33:	0f 85 7a ff ff ff    	jne    c001cdb3 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c001ce39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce3d:	83 f0 01             	xor    eax,0x1
c001ce40:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001ce44:	75 4f                	jne    c001ce95 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001ce46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ce4a:	83 f0 01             	xor    eax,0x1
c001ce4d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001ce51:	75 42                	jne    c001ce95 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001ce53:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ce59:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ce61:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001ce67:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ce6f:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001ce75:	89 f7                	mov    edi,esi
c001ce77:	c1 ff 1f             	sar    edi,0x1f
c001ce7a:	57                   	push   edi
c001ce7b:	56                   	push   esi
c001ce7c:	0f a4 c2 0a          	shld   edx,eax,0xa
c001ce80:	52                   	push   edx
c001ce81:	c1 e0 0a             	shl    eax,0xa
c001ce84:	50                   	push   eax
c001ce85:	e8 26 20 01 00       	call   c002eeb0 <__udivdi3>
c001ce8a:	83 c4 10             	add    esp,0x10
c001ce8d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ce91:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ce95:	89 e8                	mov    eax,ebp
c001ce97:	0f b6 e8             	movzx  ebp,al
c001ce9a:	85 ed                	test   ebp,ebp
c001ce9c:	74 50                	je     c001ceee <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001ce9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cea2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001cea6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ceaa:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ceae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ceb2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001ceb6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ceba:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cebe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cec2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cec6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001ceca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cece:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c001ced2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001ced6:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c001ceda:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001cede:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001cee2:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c001cee6:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c001ceea:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c001ceee:	31 ed                	xor    ebp,ebp
c001cef0:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001cef4:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001cef8:	89 f8                	mov    eax,edi
c001cefa:	09 f0                	or     eax,esi
c001cefc:	74 1e                	je     c001cf1c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cefe:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cf02:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001cf06:	89 d1                	mov    ecx,edx
c001cf08:	09 c1                	or     ecx,eax
c001cf0a:	74 10                	je     c001cf1c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cf0c:	83 ec 0c             	sub    esp,0xc
c001cf0f:	57                   	push   edi
c001cf10:	56                   	push   esi
c001cf11:	52                   	push   edx
c001cf12:	50                   	push   eax
c001cf13:	53                   	push   ebx
c001cf14:	e8 d9 fc ff ff       	call   c001cbf2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001cf19:	83 c4 20             	add    esp,0x20
c001cf1c:	45                   	inc    ebp
c001cf1d:	83 fd 04             	cmp    ebp,0x4
c001cf20:	75 ce                	jne    c001cef0 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c001cf22:	81 c4 5c 02 00 00    	add    esp,0x25c
c001cf28:	5b                   	pop    ebx
c001cf29:	5e                   	pop    esi
c001cf2a:	5f                   	pop    edi
c001cf2b:	5d                   	pop    ebp
c001cf2c:	c3                   	ret    
c001cf2d:	66 90                	xchg   ax,ax
c001cf2f:	90                   	nop

c001cf30 <Serial::Serial(char const*)>:
c001cf30:	83 ec 0c             	sub    esp,0xc
c001cf33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf37:	83 ec 08             	sub    esp,0x8
c001cf3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf3e:	50                   	push   eax
c001cf3f:	e8 28 e8 ff ff       	call   c001b76c <Device::Device(char const*)>
c001cf44:	83 c4 10             	add    esp,0x10
c001cf47:	ba d8 2a 03 c0       	mov    edx,0xc0032ad8
c001cf4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf50:	89 10                	mov    DWORD PTR [eax],edx
c001cf52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf56:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001cf60:	90                   	nop
c001cf61:	83 c4 0c             	add    esp,0xc
c001cf64:	c3                   	ret    
c001cf65:	90                   	nop
c001cf66:	66 90                	xchg   ax,ax

c001cf68 <Serial::~Serial()>:
c001cf68:	83 ec 0c             	sub    esp,0xc
c001cf6b:	ba d8 2a 03 c0       	mov    edx,0xc0032ad8
c001cf70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf74:	89 10                	mov    DWORD PTR [eax],edx
c001cf76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf7a:	83 ec 0c             	sub    esp,0xc
c001cf7d:	50                   	push   eax
c001cf7e:	e8 89 e5 ff ff       	call   c001b50c <Device::~Device()>
c001cf83:	83 c4 10             	add    esp,0x10
c001cf86:	90                   	nop
c001cf87:	83 c4 0c             	add    esp,0xc
c001cf8a:	c3                   	ret    
c001cf8b:	90                   	nop

c001cf8c <Serial::~Serial()>:
c001cf8c:	83 ec 0c             	sub    esp,0xc
c001cf8f:	83 ec 0c             	sub    esp,0xc
c001cf92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf96:	e8 cd ff ff ff       	call   c001cf68 <Serial::~Serial()>
c001cf9b:	83 c4 10             	add    esp,0x10
c001cf9e:	83 ec 08             	sub    esp,0x8
c001cfa1:	68 58 01 00 00       	push   0x158
c001cfa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfaa:	e8 11 c4 ff ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c001cfaf:	83 c4 10             	add    esp,0x10
c001cfb2:	83 c4 0c             	add    esp,0xc
c001cfb5:	c3                   	ret    
c001cfb6:	66 90                	xchg   ax,ax

c001cfb8 <Timer::Timer(char const*)>:
c001cfb8:	83 ec 0c             	sub    esp,0xc
c001cfbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfbf:	83 ec 08             	sub    esp,0x8
c001cfc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfc6:	50                   	push   eax
c001cfc7:	e8 a0 e7 ff ff       	call   c001b76c <Device::Device(char const*)>
c001cfcc:	83 c4 10             	add    esp,0x10
c001cfcf:	ba 1c 2b 03 c0       	mov    edx,0xc0032b1c
c001cfd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfd8:	89 10                	mov    DWORD PTR [eax],edx
c001cfda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfde:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001cfe8:	90                   	nop
c001cfe9:	83 c4 0c             	add    esp,0xc
c001cfec:	c3                   	ret    
c001cfed:	90                   	nop
c001cfee:	66 90                	xchg   ax,ax

c001cff0 <Timer::~Timer()>:
c001cff0:	83 ec 0c             	sub    esp,0xc
c001cff3:	ba 1c 2b 03 c0       	mov    edx,0xc0032b1c
c001cff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cffc:	89 10                	mov    DWORD PTR [eax],edx
c001cffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d002:	83 ec 0c             	sub    esp,0xc
c001d005:	50                   	push   eax
c001d006:	e8 01 e5 ff ff       	call   c001b50c <Device::~Device()>
c001d00b:	83 c4 10             	add    esp,0x10
c001d00e:	90                   	nop
c001d00f:	83 c4 0c             	add    esp,0xc
c001d012:	c3                   	ret    
c001d013:	90                   	nop

c001d014 <Timer::~Timer()>:
c001d014:	83 ec 0c             	sub    esp,0xc
c001d017:	83 ec 0c             	sub    esp,0xc
c001d01a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d01e:	e8 cd ff ff ff       	call   c001cff0 <Timer::~Timer()>
c001d023:	83 c4 10             	add    esp,0x10
c001d026:	83 ec 08             	sub    esp,0x8
c001d029:	68 5c 01 00 00       	push   0x15c
c001d02e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d032:	e8 89 c3 ff ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c001d037:	83 c4 10             	add    esp,0x10
c001d03a:	83 c4 0c             	add    esp,0xc
c001d03d:	c3                   	ret    

c001d03e <Timer::read()>:
c001d03e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d042:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d048:	c3                   	ret    

c001d049 <setupTimer(int)>:
c001d049:	53                   	push   ebx
c001d04a:	83 ec 14             	sub    esp,0x14
c001d04d:	68 5c 01 00 00       	push   0x15c
c001d052:	e8 31 96 ff ff       	call   c0016688 <malloc>
c001d057:	89 04 24             	mov    DWORD PTR [esp],eax
c001d05a:	89 c3                	mov    ebx,eax
c001d05c:	e8 d3 16 01 00       	call   c002e734 <PIT::PIT()>
c001d061:	58                   	pop    eax
c001d062:	5a                   	pop    edx
c001d063:	53                   	push   ebx
c001d064:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c001d06a:	e8 9b e5 ff ff       	call   c001b60a <Device::addChild(Device*)>
c001d06f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d071:	6a 00                	push   0x0
c001d073:	6a 00                	push   0x0
c001d075:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d079:	53                   	push   ebx
c001d07a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d07d:	83 c4 28             	add    esp,0x28
c001d080:	89 d8                	mov    eax,ebx
c001d082:	5b                   	pop    ebx
c001d083:	c3                   	ret    

c001d084 <timerHandler(unsigned int)>:
c001d084:	57                   	push   edi
c001d085:	56                   	push   esi
c001d086:	53                   	push   ebx
c001d087:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d08b:	01 3d ec 03 04 c0    	add    DWORD PTR ds:0xc00403ec,edi
c001d091:	80 3d c1 b9 03 c0 00 	cmp    BYTE PTR ds:0xc003b9c1,0x0
c001d098:	0f 84 46 01 00 00    	je     c001d1e4 <timerHandler(unsigned int)+0x160>
c001d09e:	fa                   	cli    
c001d09f:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c001d0a5:	83 ec 0c             	sub    esp,0xc
c001d0a8:	68 e0 11 04 c0       	push   0xc00411e0
c001d0ad:	ff 05 cc 11 04 c0    	inc    DWORD PTR ds:0xc00411cc
c001d0b3:	e8 c8 23 01 00       	call   c002f480 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d0b8:	83 c4 10             	add    esp,0x10
c001d0bb:	84 c0                	test   al,al
c001d0bd:	0f 85 a1 00 00 00    	jne    c001d164 <timerHandler(unsigned int)+0xe0>
c001d0c3:	83 ec 0c             	sub    esp,0xc
c001d0c6:	68 e0 11 04 c0       	push   0xc00411e0
c001d0cb:	e8 cc 23 01 00       	call   c002f49c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d0d0:	83 c4 10             	add    esp,0x10
c001d0d3:	89 c6                	mov    esi,eax
c001d0d5:	8d 76 00             	lea    esi,[esi+0x0]
c001d0d8:	83 ec 0c             	sub    esp,0xc
c001d0db:	68 e0 11 04 c0       	push   0xc00411e0
c001d0e0:	e8 b7 23 01 00       	call   c002f49c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d0e5:	c7 04 24 e0 11 04 c0 	mov    DWORD PTR [esp],0xc00411e0
c001d0ec:	89 c3                	mov    ebx,eax
c001d0ee:	e8 b1 23 01 00       	call   c002f4a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d0f3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001d0f6:	83 c4 10             	add    esp,0x10
c001d0f9:	3b 05 ec 03 04 c0    	cmp    eax,DWORD PTR ds:0xc00403ec
c001d0ff:	77 23                	ja     c001d124 <timerHandler(unsigned int)+0xa0>
c001d101:	83 ec 0c             	sub    esp,0xc
c001d104:	53                   	push   ebx
c001d105:	e8 3a 89 00 00       	call   c0025a44 <unblockTask(ThreadControlBlock*)>
c001d10a:	83 c4 10             	add    esp,0x10
c001d10d:	39 de                	cmp    esi,ebx
c001d10f:	75 27                	jne    c001d138 <timerHandler(unsigned int)+0xb4>
c001d111:	83 ec 0c             	sub    esp,0xc
c001d114:	68 e0 11 04 c0       	push   0xc00411e0
c001d119:	e8 7e 23 01 00       	call   c002f49c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d11e:	89 c6                	mov    esi,eax
c001d120:	eb 12                	jmp    c001d134 <timerHandler(unsigned int)+0xb0>
c001d122:	66 90                	xchg   ax,ax
c001d124:	50                   	push   eax
c001d125:	50                   	push   eax
c001d126:	53                   	push   ebx
c001d127:	68 e0 11 04 c0       	push   0xc00411e0
c001d12c:	e8 2f 24 01 00       	call   c002f560 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d131:	8d 76 00             	lea    esi,[esi+0x0]
c001d134:	83 c4 10             	add    esp,0x10
c001d137:	90                   	nop
c001d138:	83 ec 0c             	sub    esp,0xc
c001d13b:	68 e0 11 04 c0       	push   0xc00411e0
c001d140:	e8 3b 23 01 00       	call   c002f480 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d145:	83 c4 10             	add    esp,0x10
c001d148:	84 c0                	test   al,al
c001d14a:	75 18                	jne    c001d164 <timerHandler(unsigned int)+0xe0>
c001d14c:	83 ec 0c             	sub    esp,0xc
c001d14f:	68 e0 11 04 c0       	push   0xc00411e0
c001d154:	e8 43 23 01 00       	call   c002f49c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d159:	83 c4 10             	add    esp,0x10
c001d15c:	39 f0                	cmp    eax,esi
c001d15e:	0f 85 74 ff ff ff    	jne    c001d0d8 <timerHandler(unsigned int)+0x54>
c001d164:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d169:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c001d16d:	74 3d                	je     c001d1ac <timerHandler(unsigned int)+0x128>
c001d16f:	80 3d c0 b9 03 c0 00 	cmp    BYTE PTR ds:0xc003b9c0,0x0
c001d176:	74 34                	je     c001d1ac <timerHandler(unsigned int)+0x128>
c001d178:	fa                   	cli    
c001d179:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c001d17f:	8b 15 ec 03 04 c0    	mov    edx,DWORD PTR ds:0xc00403ec
c001d185:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d18a:	29 78 34             	sub    DWORD PTR [eax+0x34],edi
c001d18d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d192:	39 50 34             	cmp    DWORD PTR [eax+0x34],edx
c001d195:	77 05                	ja     c001d19c <timerHandler(unsigned int)+0x118>
c001d197:	e8 bc 85 00 00       	call   c0025758 <schedule()>
c001d19c:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001d1a1:	48                   	dec    eax
c001d1a2:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001d1a7:	75 03                	jne    c001d1ac <timerHandler(unsigned int)+0x128>
c001d1a9:	fb                   	sti    
c001d1aa:	66 90                	xchg   ax,ax
c001d1ac:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c001d1b1:	48                   	dec    eax
c001d1b2:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c001d1b7:	75 1b                	jne    c001d1d4 <timerHandler(unsigned int)+0x150>
c001d1b9:	83 3d c8 11 04 c0 00 	cmp    DWORD PTR ds:0xc00411c8,0x0
c001d1c0:	74 12                	je     c001d1d4 <timerHandler(unsigned int)+0x150>
c001d1c2:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c001d1cc:	e8 87 85 00 00       	call   c0025758 <schedule()>
c001d1d1:	8d 76 00             	lea    esi,[esi+0x0]
c001d1d4:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001d1d9:	48                   	dec    eax
c001d1da:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001d1df:	75 03                	jne    c001d1e4 <timerHandler(unsigned int)+0x160>
c001d1e1:	fb                   	sti    
c001d1e2:	66 90                	xchg   ax,ax
c001d1e4:	5b                   	pop    ebx
c001d1e5:	5e                   	pop    esi
c001d1e6:	5f                   	pop    edi
c001d1e7:	c3                   	ret    

c001d1e8 <VCache::VCache(PhysicalDisk*)>:
c001d1e8:	53                   	push   ebx
c001d1e9:	83 ec 18             	sub    esp,0x18
c001d1ec:	ba 4c 2b 03 c0       	mov    edx,0xc0032b4c
c001d1f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1f5:	89 10                	mov    DWORD PTR [eax],edx
c001d1f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1fb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001d202:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d206:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001d20d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d211:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001d218:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d21f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d223:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001d22a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001d231:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d235:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001d23c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d240:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001d244:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d248:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001d24f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001d256:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d25a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001d25e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d262:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001d266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d26a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001d26e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d272:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001d279:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001d281:	83 ec 0c             	sub    esp,0xc
c001d284:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d288:	e8 fb 93 ff ff       	call   c0016688 <malloc>
c001d28d:	83 c4 10             	add    esp,0x10
c001d290:	89 c3                	mov    ebx,eax
c001d292:	83 ec 0c             	sub    esp,0xc
c001d295:	53                   	push   ebx
c001d296:	e8 4d 34 00 00       	call   c00206e8 <Mutex::Mutex()>
c001d29b:	83 c4 10             	add    esp,0x10
c001d29e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2a2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001d2a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2a9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d2ad:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d2b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2b4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001d2bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d2bf:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d2c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2c9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d2cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d2d0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001d2d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d2dc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d2e0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001d2e3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001d2e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2ea:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001d2ee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d2f2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d2f8:	05 00 02 00 00       	add    eax,0x200
c001d2fd:	c1 e0 03             	shl    eax,0x3
c001d300:	83 ec 0c             	sub    esp,0xc
c001d303:	50                   	push   eax
c001d304:	e8 7f 93 ff ff       	call   c0016688 <malloc>
c001d309:	83 c4 10             	add    esp,0x10
c001d30c:	89 c2                	mov    edx,eax
c001d30e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d312:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001d315:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d319:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001d320:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d324:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001d328:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d32c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d332:	89 d0                	mov    eax,edx
c001d334:	c1 e0 02             	shl    eax,0x2
c001d337:	01 d0                	add    eax,edx
c001d339:	c1 e0 04             	shl    eax,0x4
c001d33c:	83 ec 0c             	sub    esp,0xc
c001d33f:	50                   	push   eax
c001d340:	e8 43 93 ff ff       	call   c0016688 <malloc>
c001d345:	83 c4 10             	add    esp,0x10
c001d348:	89 c2                	mov    edx,eax
c001d34a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d34e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001d351:	90                   	nop
c001d352:	83 c4 18             	add    esp,0x18
c001d355:	5b                   	pop    ebx
c001d356:	c3                   	ret    
c001d357:	90                   	nop

c001d358 <VCache::invalidateReadBuffer()>:
c001d358:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d35c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001d362:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001d366:	c3                   	ret    
c001d367:	90                   	nop

c001d368 <VCache::writeWriteBuffer()>:
c001d368:	53                   	push   ebx
c001d369:	83 ec 08             	sub    esp,0x8
c001d36c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d370:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d374:	74 1e                	je     c001d394 <VCache::writeWriteBuffer()+0x2c>
c001d376:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d379:	83 ec 0c             	sub    esp,0xc
c001d37c:	8b 10                	mov    edx,DWORD PTR [eax]
c001d37e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001d381:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001d384:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001d387:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001d38a:	50                   	push   eax
c001d38b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d38e:	83 c4 20             	add    esp,0x20
c001d391:	8d 76 00             	lea    esi,[esi+0x0]
c001d394:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001d39b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001d3a2:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001d3a6:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001d3ad:	83 c4 08             	add    esp,0x8
c001d3b0:	5b                   	pop    ebx
c001d3b1:	c3                   	ret    
c001d3b2:	66 90                	xchg   ax,ax

c001d3b4 <VCache::~VCache()>:
c001d3b4:	83 ec 0c             	sub    esp,0xc
c001d3b7:	ba 4c 2b 03 c0       	mov    edx,0xc0032b4c
c001d3bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3c0:	89 10                	mov    DWORD PTR [eax],edx
c001d3c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3c6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001d3c9:	0f b6 c0             	movzx  eax,al
c001d3cc:	85 c0                	test   eax,eax
c001d3ce:	74 10                	je     c001d3e0 <VCache::~VCache()+0x2c>
c001d3d0:	83 ec 0c             	sub    esp,0xc
c001d3d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3d7:	e8 8c ff ff ff       	call   c001d368 <VCache::writeWriteBuffer()>
c001d3dc:	83 c4 10             	add    esp,0x10
c001d3df:	90                   	nop
c001d3e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3e4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001d3e7:	83 ec 0c             	sub    esp,0xc
c001d3ea:	50                   	push   eax
c001d3eb:	e8 a8 92 ff ff       	call   c0016698 <free>
c001d3f0:	83 c4 10             	add    esp,0x10
c001d3f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3f7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001d3fa:	83 ec 0c             	sub    esp,0xc
c001d3fd:	50                   	push   eax
c001d3fe:	e8 95 92 ff ff       	call   c0016698 <free>
c001d403:	83 c4 10             	add    esp,0x10
c001d406:	90                   	nop
c001d407:	83 c4 0c             	add    esp,0xc
c001d40a:	c3                   	ret    
c001d40b:	90                   	nop

c001d40c <VCache::~VCache()>:
c001d40c:	83 ec 0c             	sub    esp,0xc
c001d40f:	83 ec 0c             	sub    esp,0xc
c001d412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d416:	e8 99 ff ff ff       	call   c001d3b4 <VCache::~VCache()>
c001d41b:	83 c4 10             	add    esp,0x10
c001d41e:	83 ec 08             	sub    esp,0x8
c001d421:	6a 44                	push   0x44
c001d423:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d427:	e8 94 bf ff ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c001d42c:	83 c4 10             	add    esp,0x10
c001d42f:	83 c4 0c             	add    esp,0xc
c001d432:	c3                   	ret    
c001d433:	90                   	nop

c001d434 <VCache::write(unsigned long long, int, void*)>:
c001d434:	55                   	push   ebp
c001d435:	57                   	push   edi
c001d436:	56                   	push   esi
c001d437:	53                   	push   ebx
c001d438:	83 ec 1c             	sub    esp,0x1c
c001d43b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d43f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d443:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d447:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d44b:	e8 74 80 00 00       	call   c00254c4 <KeDisablePreemption()>
c001d450:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d454:	74 0e                	je     c001d464 <VCache::write(unsigned long long, int, void*)+0x30>
c001d456:	83 ec 0c             	sub    esp,0xc
c001d459:	53                   	push   ebx
c001d45a:	e8 f9 fe ff ff       	call   c001d358 <VCache::invalidateReadBuffer()>
c001d45f:	83 c4 10             	add    esp,0x10
c001d462:	66 90                	xchg   ax,ax
c001d464:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d468:	74 5e                	je     c001d4c8 <VCache::write(unsigned long long, int, void*)+0x94>
c001d46a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001d46d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d471:	99                   	cdq    
c001d472:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001d475:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001d478:	89 c1                	mov    ecx,eax
c001d47a:	31 f1                	xor    ecx,esi
c001d47c:	89 d0                	mov    eax,edx
c001d47e:	31 f8                	xor    eax,edi
c001d480:	09 c1                	or     ecx,eax
c001d482:	75 38                	jne    c001d4bc <VCache::write(unsigned long long, int, void*)+0x88>
c001d484:	83 fd 01             	cmp    ebp,0x1
c001d487:	75 33                	jne    c001d4bc <VCache::write(unsigned long long, int, void*)+0x88>
c001d489:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d48c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d490:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d494:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d49a:	0f af f9             	imul   edi,ecx
c001d49d:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001d4a0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d4a2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001d4a5:	40                   	inc    eax
c001d4a6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001d4a9:	83 f8 50             	cmp    eax,0x50
c001d4ac:	75 66                	jne    c001d514 <VCache::write(unsigned long long, int, void*)+0xe0>
c001d4ae:	83 ec 0c             	sub    esp,0xc
c001d4b1:	53                   	push   ebx
c001d4b2:	e8 b1 fe ff ff       	call   c001d368 <VCache::writeWriteBuffer()>
c001d4b7:	83 c4 10             	add    esp,0x10
c001d4ba:	eb 58                	jmp    c001d514 <VCache::write(unsigned long long, int, void*)+0xe0>
c001d4bc:	83 ec 0c             	sub    esp,0xc
c001d4bf:	53                   	push   ebx
c001d4c0:	e8 a3 fe ff ff       	call   c001d368 <VCache::writeWriteBuffer()>
c001d4c5:	83 c4 10             	add    esp,0x10
c001d4c8:	83 fd 4f             	cmp    ebp,0x4f
c001d4cb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d4ce:	7f 20                	jg     c001d4f0 <VCache::write(unsigned long long, int, void*)+0xbc>
c001d4d0:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001d4d3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d4d7:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001d4da:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c001d4dd:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001d4e0:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001d4e4:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d4ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d4ec:	eb 26                	jmp    c001d514 <VCache::write(unsigned long long, int, void*)+0xe0>
c001d4ee:	66 90                	xchg   ax,ax
c001d4f0:	83 ec 0c             	sub    esp,0xc
c001d4f3:	8b 10                	mov    edx,DWORD PTR [eax]
c001d4f5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d4f9:	55                   	push   ebp
c001d4fa:	57                   	push   edi
c001d4fb:	56                   	push   esi
c001d4fc:	50                   	push   eax
c001d4fd:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d500:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d504:	83 c4 20             	add    esp,0x20
c001d507:	e8 e0 7f 00 00       	call   c00254ec <KeRestorePreemption()>
c001d50c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d510:	eb 0a                	jmp    c001d51c <VCache::write(unsigned long long, int, void*)+0xe8>
c001d512:	66 90                	xchg   ax,ax
c001d514:	e8 d3 7f 00 00       	call   c00254ec <KeRestorePreemption()>
c001d519:	31 c0                	xor    eax,eax
c001d51b:	90                   	nop
c001d51c:	83 c4 1c             	add    esp,0x1c
c001d51f:	5b                   	pop    ebx
c001d520:	5e                   	pop    esi
c001d521:	5f                   	pop    edi
c001d522:	5d                   	pop    ebp
c001d523:	c3                   	ret    

c001d524 <VCache::read(unsigned long long, int, void*)>:
c001d524:	55                   	push   ebp
c001d525:	57                   	push   edi
c001d526:	56                   	push   esi
c001d527:	53                   	push   ebx
c001d528:	83 ec 1c             	sub    esp,0x1c
c001d52b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d52f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d533:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001d537:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001d53b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d53f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d542:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001d546:	e8 79 7f 00 00       	call   c00254c4 <KeDisablePreemption()>
c001d54b:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d54f:	74 0f                	je     c001d560 <VCache::read(unsigned long long, int, void*)+0x3c>
c001d551:	83 ec 0c             	sub    esp,0xc
c001d554:	53                   	push   ebx
c001d555:	e8 0e fe ff ff       	call   c001d368 <VCache::writeWriteBuffer()>
c001d55a:	83 c4 10             	add    esp,0x10
c001d55d:	8d 76 00             	lea    esi,[esi+0x0]
c001d560:	83 fe 01             	cmp    esi,0x1
c001d563:	0f 85 8b 00 00 00    	jne    c001d5f4 <VCache::read(unsigned long long, int, void*)+0xd0>
c001d569:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d56c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001d573:	75 7f                	jne    c001d5f4 <VCache::read(unsigned long long, int, void*)+0xd0>
c001d575:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d578:	89 d1                	mov    ecx,edx
c001d57a:	f7 d9                	neg    ecx
c001d57c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d580:	89 cf                	mov    edi,ecx
c001d582:	23 0c 24             	and    ecx,DWORD PTR [esp]
c001d585:	c1 ff 1f             	sar    edi,0x1f
c001d588:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001d58c:	89 ce                	mov    esi,ecx
c001d58e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d592:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c001d596:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d59a:	89 cf                	mov    edi,ecx
c001d59c:	74 32                	je     c001d5d0 <VCache::read(unsigned long long, int, void*)+0xac>
c001d59e:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001d5a1:	75 2d                	jne    c001d5d0 <VCache::read(unsigned long long, int, void*)+0xac>
c001d5a3:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c001d5a6:	75 28                	jne    c001d5d0 <VCache::read(unsigned long long, int, void*)+0xac>
c001d5a8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d5ab:	89 ef                	mov    edi,ebp
c001d5ad:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d5b3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d5b6:	8d 70 ff             	lea    esi,[eax-0x1]
c001d5b9:	23 34 24             	and    esi,DWORD PTR [esp]
c001d5bc:	0f af f1             	imul   esi,ecx
c001d5bf:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c001d5c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d5c4:	e8 23 7f 00 00       	call   c00254ec <KeRestorePreemption()>
c001d5c9:	31 c0                	xor    eax,eax
c001d5cb:	eb 57                	jmp    c001d624 <VCache::read(unsigned long long, int, void*)+0x100>
c001d5cd:	8d 76 00             	lea    esi,[esi+0x0]
c001d5d0:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001d5d4:	83 ec 0c             	sub    esp,0xc
c001d5d7:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c001d5da:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c001d5dd:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d5df:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001d5e2:	52                   	push   edx
c001d5e3:	57                   	push   edi
c001d5e4:	56                   	push   esi
c001d5e5:	50                   	push   eax
c001d5e6:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001d5e9:	83 c4 20             	add    esp,0x20
c001d5ec:	85 c0                	test   eax,eax
c001d5ee:	75 34                	jne    c001d624 <VCache::read(unsigned long long, int, void*)+0x100>
c001d5f0:	eb b6                	jmp    c001d5a8 <VCache::read(unsigned long long, int, void*)+0x84>
c001d5f2:	66 90                	xchg   ax,ax
c001d5f4:	83 ec 0c             	sub    esp,0xc
c001d5f7:	53                   	push   ebx
c001d5f8:	e8 5b fd ff ff       	call   c001d358 <VCache::invalidateReadBuffer()>
c001d5fd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d600:	8b 10                	mov    edx,DWORD PTR [eax]
c001d602:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d605:	56                   	push   esi
c001d606:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d60a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d60e:	50                   	push   eax
c001d60f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001d612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d616:	83 c4 20             	add    esp,0x20
c001d619:	e8 ce 7e 00 00       	call   c00254ec <KeRestorePreemption()>
c001d61e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d621:	8d 76 00             	lea    esi,[esi+0x0]
c001d624:	83 c4 1c             	add    esp,0x1c
c001d627:	5b                   	pop    ebx
c001d628:	5e                   	pop    esi
c001d629:	5f                   	pop    edi
c001d62a:	5d                   	pop    ebp
c001d62b:	c3                   	ret    

c001d62c <Video::putrect(int, int, int, int, unsigned int)>:
c001d62c:	55                   	push   ebp
c001d62d:	57                   	push   edi
c001d62e:	56                   	push   esi
c001d62f:	53                   	push   ebx
c001d630:	83 ec 1c             	sub    esp,0x1c
c001d633:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d63b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d63f:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001d643:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d647:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d64b:	01 df                	add    edi,ebx
c001d64d:	39 fb                	cmp    ebx,edi
c001d64f:	7d 1f                	jge    c001d670 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001d651:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d655:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001d659:	7d 12                	jge    c001d66d <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001d65b:	8b 16                	mov    edx,DWORD PTR [esi]
c001d65d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d661:	53                   	push   ebx
c001d662:	55                   	push   ebp
c001d663:	45                   	inc    ebp
c001d664:	56                   	push   esi
c001d665:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001d668:	83 c4 10             	add    esp,0x10
c001d66b:	eb e8                	jmp    c001d655 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001d66d:	43                   	inc    ebx
c001d66e:	eb dd                	jmp    c001d64d <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001d670:	83 c4 1c             	add    esp,0x1c
c001d673:	5b                   	pop    ebx
c001d674:	5e                   	pop    esi
c001d675:	5f                   	pop    edi
c001d676:	5d                   	pop    ebp
c001d677:	c3                   	ret    

c001d678 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001d678:	55                   	push   ebp
c001d679:	57                   	push   edi
c001d67a:	31 ff                	xor    edi,edi
c001d67c:	56                   	push   esi
c001d67d:	53                   	push   ebx
c001d67e:	83 ec 1c             	sub    esp,0x1c
c001d681:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001d685:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d689:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001d690:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001d695:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d699:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d69d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001d6a1:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001d6a4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d6a8:	01 f9                	add    ecx,edi
c001d6aa:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001d6ae:	7d 2f                	jge    c001d6df <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001d6b0:	31 f6                	xor    esi,esi
c001d6b2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d6b6:	01 f2                	add    edx,esi
c001d6b8:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001d6bc:	7d 1a                	jge    c001d6d8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001d6be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d6c1:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001d6c4:	46                   	inc    esi
c001d6c5:	51                   	push   ecx
c001d6c6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001d6ca:	52                   	push   edx
c001d6cb:	55                   	push   ebp
c001d6cc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d6cf:	83 c4 10             	add    esp,0x10
c001d6d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d6d6:	eb da                	jmp    c001d6b2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001d6d8:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d6dc:	47                   	inc    edi
c001d6dd:	eb c5                	jmp    c001d6a4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001d6df:	83 c4 1c             	add    esp,0x1c
c001d6e2:	5b                   	pop    ebx
c001d6e3:	5e                   	pop    esi
c001d6e4:	5f                   	pop    edi
c001d6e5:	5d                   	pop    ebp
c001d6e6:	c3                   	ret    
c001d6e7:	90                   	nop

c001d6e8 <Video::blit(unsigned int*, int, int, int, int)>:
c001d6e8:	55                   	push   ebp
c001d6e9:	ba 00 00 00 00       	mov    edx,0x0
c001d6ee:	57                   	push   edi
c001d6ef:	56                   	push   esi
c001d6f0:	53                   	push   ebx
c001d6f1:	83 ec 1c             	sub    esp,0x1c
c001d6f4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d6f8:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d6fc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d700:	85 c0                	test   eax,eax
c001d702:	0f 49 d0             	cmovns edx,eax
c001d705:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c001d70c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001d710:	89 eb                	mov    ebx,ebp
c001d712:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001d716:	01 ea                	add    edx,ebp
c001d718:	39 da                	cmp    edx,ebx
c001d71a:	7e 54                	jle    c001d770 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c001d71c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d722:	7c 4c                	jl     c001d770 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c001d724:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d728:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d72c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d730:	01 c1                	add    ecx,eax
c001d732:	39 f9                	cmp    ecx,edi
c001d734:	7e 2f                	jle    c001d765 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c001d736:	83 c2 04             	add    edx,0x4
c001d739:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d73f:	7c 21                	jl     c001d762 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c001d741:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001d745:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d747:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c001d74a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001d74e:	55                   	push   ebp
c001d74f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d753:	56                   	push   esi
c001d754:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001d757:	83 c4 10             	add    esp,0x10
c001d75a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d75e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d762:	47                   	inc    edi
c001d763:	eb c7                	jmp    c001d72c <Video::blit(unsigned int*, int, int, int, int)+0x44>
c001d765:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001d769:	43                   	inc    ebx
c001d76a:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c001d76e:	eb a2                	jmp    c001d712 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c001d770:	83 c4 1c             	add    esp,0x1c
c001d773:	5b                   	pop    ebx
c001d774:	5e                   	pop    esi
c001d775:	5f                   	pop    edi
c001d776:	5d                   	pop    ebp
c001d777:	c3                   	ret    

c001d778 <Video::clearScreen(unsigned int)>:
c001d778:	57                   	push   edi
c001d779:	56                   	push   esi
c001d77a:	53                   	push   ebx
c001d77b:	31 db                	xor    ebx,ebx
c001d77d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d781:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d787:	7e 1f                	jle    c001d7a8 <Video::clearScreen(unsigned int)+0x30>
c001d789:	31 ff                	xor    edi,edi
c001d78b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d791:	7e 12                	jle    c001d7a5 <Video::clearScreen(unsigned int)+0x2d>
c001d793:	8b 06                	mov    eax,DWORD PTR [esi]
c001d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d799:	53                   	push   ebx
c001d79a:	57                   	push   edi
c001d79b:	47                   	inc    edi
c001d79c:	56                   	push   esi
c001d79d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d7a0:	83 c4 10             	add    esp,0x10
c001d7a3:	eb e6                	jmp    c001d78b <Video::clearScreen(unsigned int)+0x13>
c001d7a5:	43                   	inc    ebx
c001d7a6:	eb d9                	jmp    c001d781 <Video::clearScreen(unsigned int)+0x9>
c001d7a8:	5b                   	pop    ebx
c001d7a9:	5e                   	pop    esi
c001d7aa:	5f                   	pop    edi
c001d7ab:	c3                   	ret    

c001d7ac <Video::putpixel(int, int, unsigned int)>:
c001d7ac:	c7 44 24 04 54 2b 03 c0 	mov    DWORD PTR [esp+0x4],0xc0032b54
c001d7b4:	e9 49 2f 00 00       	jmp    c0020702 <KePanic(char const*)>
c001d7b9:	90                   	nop

c001d7ba <Video::readPixelApprox(int, int)>:
c001d7ba:	83 ec 18             	sub    esp,0x18
c001d7bd:	68 75 2b 03 c0       	push   0xc0032b75
c001d7c2:	e8 3b 2f 00 00       	call   c0020702 <KePanic(char const*)>
c001d7c7:	31 c0                	xor    eax,eax
c001d7c9:	83 c4 1c             	add    esp,0x1c
c001d7cc:	c3                   	ret    
c001d7cd:	90                   	nop

c001d7ce <Video::Video(char const*)>:
c001d7ce:	83 ec 0c             	sub    esp,0xc
c001d7d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7d5:	83 ec 08             	sub    esp,0x8
c001d7d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d7dc:	50                   	push   eax
c001d7dd:	e8 8a df ff ff       	call   c001b76c <Device::Device(char const*)>
c001d7e2:	83 c4 10             	add    esp,0x10
c001d7e5:	ba 18 2c 03 c0       	mov    edx,0xc0032c18
c001d7ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7ee:	89 10                	mov    DWORD PTR [eax],edx
c001d7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7f4:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001d7fe:	90                   	nop
c001d7ff:	83 c4 0c             	add    esp,0xc
c001d802:	c3                   	ret    
c001d803:	90                   	nop

c001d804 <Video::~Video()>:
c001d804:	83 ec 0c             	sub    esp,0xc
c001d807:	ba 18 2c 03 c0       	mov    edx,0xc0032c18
c001d80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d810:	89 10                	mov    DWORD PTR [eax],edx
c001d812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d816:	83 ec 0c             	sub    esp,0xc
c001d819:	50                   	push   eax
c001d81a:	e8 ed dc ff ff       	call   c001b50c <Device::~Device()>
c001d81f:	83 c4 10             	add    esp,0x10
c001d822:	90                   	nop
c001d823:	83 c4 0c             	add    esp,0xc
c001d826:	c3                   	ret    
c001d827:	90                   	nop

c001d828 <Video::~Video()>:
c001d828:	83 ec 0c             	sub    esp,0xc
c001d82b:	83 ec 0c             	sub    esp,0xc
c001d82e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d832:	e8 cd ff ff ff       	call   c001d804 <Video::~Video()>
c001d837:	83 c4 10             	add    esp,0x10
c001d83a:	83 ec 08             	sub    esp,0x8
c001d83d:	68 64 01 00 00       	push   0x164
c001d842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d846:	e8 75 bb ff ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c001d84b:	83 c4 10             	add    esp,0x10
c001d84e:	83 c4 0c             	add    esp,0xc
c001d851:	c3                   	ret    

c001d852 <Video::isMonochrome()>:
c001d852:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d856:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001d85c:	c3                   	ret    
c001d85d:	90                   	nop

c001d85e <Video::getWidth()>:
c001d85e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d862:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d868:	c3                   	ret    
c001d869:	90                   	nop

c001d86a <Video::getHeight()>:
c001d86a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d86e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d874:	c3                   	ret    
c001d875:	90                   	nop

c001d876 <Video::drawCursor(int, int, unsigned int*, int)>:
c001d876:	55                   	push   ebp
c001d877:	57                   	push   edi
c001d878:	56                   	push   esi
c001d879:	53                   	push   ebx
c001d87a:	83 ec 2c             	sub    esp,0x2c
c001d87d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d881:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d885:	83 f8 01             	cmp    eax,0x1
c001d888:	19 c9                	sbb    ecx,ecx
c001d88a:	31 db                	xor    ebx,ebx
c001d88c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001d890:	89 ce                	mov    esi,ecx
c001d892:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001d89a:	f7 d6                	not    esi
c001d89c:	81 e6 ff ff ff 00    	and    esi,0xffffff
c001d8a2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d8a6:	01 d8                	add    eax,ebx
c001d8a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d8ac:	57                   	push   edi
c001d8ad:	e8 b8 ff ff ff       	call   c001d86a <Video::getHeight()>
c001d8b2:	59                   	pop    ecx
c001d8b3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001d8b7:	7e 70                	jle    c001d929 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c001d8b9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d8bd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d8c1:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001d8c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d8c8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d8cc:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001d8d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d8d7:	89 e8                	mov    eax,ebp
c001d8d9:	83 c0 20             	add    eax,0x20
c001d8dc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d8e0:	57                   	push   edi
c001d8e1:	e8 78 ff ff ff       	call   c001d85e <Video::getWidth()>
c001d8e6:	5a                   	pop    edx
c001d8e7:	39 c5                	cmp    ebp,eax
c001d8e9:	7d 34                	jge    c001d91f <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c001d8eb:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001d8f0:	74 05                	je     c001d8f7 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c001d8f2:	8b 07                	mov    eax,DWORD PTR [edi]
c001d8f4:	56                   	push   esi
c001d8f5:	eb 0d                	jmp    c001d904 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c001d8f7:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001d8fc:	74 12                	je     c001d910 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c001d8fe:	8b 07                	mov    eax,DWORD PTR [edi]
c001d900:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d904:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d908:	55                   	push   ebp
c001d909:	57                   	push   edi
c001d90a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d90d:	83 c4 10             	add    esp,0x10
c001d910:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001d914:	45                   	inc    ebp
c001d915:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001d919:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001d91d:	75 c1                	jne    c001d8e0 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c001d91f:	43                   	inc    ebx
c001d920:	83 fb 20             	cmp    ebx,0x20
c001d923:	0f 85 79 ff ff ff    	jne    c001d8a2 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c001d929:	83 c4 2c             	add    esp,0x2c
c001d92c:	5b                   	pop    ebx
c001d92d:	5e                   	pop    esi
c001d92e:	5f                   	pop    edi
c001d92f:	5d                   	pop    ebp
c001d930:	c3                   	ret    
c001d931:	90                   	nop

c001d932 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001d932:	55                   	push   ebp
c001d933:	57                   	push   edi
c001d934:	56                   	push   esi
c001d935:	53                   	push   ebx
c001d936:	83 ec 48             	sub    esp,0x48
c001d939:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001d93d:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c001d941:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c001d945:	c1 e0 08             	shl    eax,0x8
c001d948:	01 d0                	add    eax,edx
c001d94a:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001d94e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d952:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001d956:	c1 e0 08             	shl    eax,0x8
c001d959:	01 d0                	add    eax,edx
c001d95b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d95f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d963:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c001d968:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d96c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d970:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001d977:	50                   	push   eax
c001d978:	e8 0b 8d ff ff       	call   c0016688 <malloc>
c001d97d:	83 c4 10             	add    esp,0x10
c001d980:	85 c0                	test   eax,eax
c001d982:	89 c5                	mov    ebp,eax
c001d984:	75 10                	jne    c001d996 <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c001d986:	83 ec 0c             	sub    esp,0xc
c001d989:	68 a0 2b 03 c0       	push   0xc0032ba0
c001d98e:	e8 6f 2d 00 00       	call   c0020702 <KePanic(char const*)>
c001d993:	83 c4 10             	add    esp,0x10
c001d996:	52                   	push   edx
c001d997:	bf 12 00 00 00       	mov    edi,0x12
c001d99c:	52                   	push   edx
c001d99d:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d9a1:	50                   	push   eax
c001d9a2:	68 b0 2b 03 c0       	push   0xc0032bb0
c001d9a7:	e8 12 bb ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001d9ac:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c001d9af:	83 e0 20             	and    eax,0x20
c001d9b2:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d9b6:	85 c0                	test   eax,eax
c001d9b8:	59                   	pop    ecx
c001d9b9:	0f 94 c0             	sete   al
c001d9bc:	0f b6 c0             	movzx  eax,al
c001d9bf:	5e                   	pop    esi
c001d9c0:	50                   	push   eax
c001d9c1:	68 ba 2b 03 c0       	push   0xc0032bba
c001d9c6:	e8 f3 ba ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001d9cb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c001d9cf:	83 c4 10             	add    esp,0x10
c001d9d2:	85 c0                	test   eax,eax
c001d9d4:	89 c2                	mov    edx,eax
c001d9d6:	74 11                	je     c001d9e9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c001d9d8:	0f b6 7b 07          	movzx  edi,BYTE PTR [ebx+0x7]
c001d9dc:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c001d9e0:	c1 ff 03             	sar    edi,0x3
c001d9e3:	0f af f9             	imul   edi,ecx
c001d9e6:	83 c7 12             	add    edi,0x12
c001d9e9:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001d9ee:	74 07                	je     c001d9f7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xc5>
c001d9f0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d9f5:	75 12                	jne    c001da09 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd7>
c001d9f7:	83 ec 0c             	sub    esp,0xc
c001d9fa:	68 c8 2b 03 c0       	push   0xc0032bc8
c001d9ff:	e8 ba ba ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001da04:	e9 aa 02 00 00       	jmp    c001dcb3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x381>
c001da09:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001da0d:	83 f9 02             	cmp    ecx,0x2
c001da10:	74 0e                	je     c001da20 <Video::tgaParse(unsigned char*, int, int*, int*)+0xee>
c001da12:	83 f9 0a             	cmp    ecx,0xa
c001da15:	0f 84 d1 00 00 00    	je     c001daec <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ba>
c001da1b:	e9 7e 02 00 00       	jmp    c001dc9e <Video::tgaParse(unsigned char*, int, int*, int*)+0x36c>
c001da20:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001da25:	75 0e                	jne    c001da35 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001da27:	84 d2                	test   dl,dl
c001da29:	75 0a                	jne    c001da35 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001da2b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001da2e:	83 e8 18             	sub    eax,0x18
c001da31:	a8 f7                	test   al,0xf7
c001da33:	74 0d                	je     c001da42 <Video::tgaParse(unsigned char*, int, int*, int*)+0x110>
c001da35:	83 ec 0c             	sub    esp,0xc
c001da38:	68 dd 2b 03 c0       	push   0xc0032bdd
c001da3d:	e9 64 02 00 00       	jmp    c001dca6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c001da42:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001da4a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001da4f:	31 c0                	xor    eax,eax
c001da51:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001da55:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001da5d:	89 c6                	mov    esi,eax
c001da5f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001da64:	75 15                	jne    c001da7b <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c001da66:	99                   	cdq    
c001da67:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c001da6b:	85 d2                	test   edx,edx
c001da6d:	75 0c                	jne    c001da7b <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c001da6f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001da73:	29 c6                	sub    esi,eax
c001da75:	4e                   	dec    esi
c001da76:	0f af 74 24 04       	imul   esi,DWORD PTR [esp+0x4]
c001da7b:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001da7f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001da87:	75 0c                	jne    c001da95 <Video::tgaParse(unsigned char*, int, int*, int*)+0x163>
c001da89:	0f b6 54 3b 03       	movzx  edx,BYTE PTR [ebx+edi*1+0x3]
c001da8e:	c1 e2 18             	shl    edx,0x18
c001da91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001da95:	0f b6 4c 3b 02       	movzx  ecx,BYTE PTR [ebx+edi*1+0x2]
c001da9a:	8d 46 01             	lea    eax,[esi+0x1]
c001da9d:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c001daa1:	c1 e1 10             	shl    ecx,0x10
c001daa4:	89 ca                	mov    edx,ecx
c001daa6:	0f b6 4c 3b 01       	movzx  ecx,BYTE PTR [ebx+edi*1+0x1]
c001daab:	c1 e1 08             	shl    ecx,0x8
c001daae:	09 d1                	or     ecx,edx
c001dab0:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c001dab4:	09 d1                	or     ecx,edx
c001dab6:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001daba:	89 4c b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],ecx
c001dabe:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c001dac2:	c1 fa 03             	sar    edx,0x3
c001dac5:	01 d7                	add    edi,edx
c001dac7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dacb:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001dacf:	7e 04                	jle    c001dad5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1a3>
c001dad1:	89 c6                	mov    esi,eax
c001dad3:	eb 8a                	jmp    c001da5f <Video::tgaParse(unsigned char*, int, int*, int*)+0x12d>
c001dad5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001dad9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dadd:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001dae1:	0f 8f 6e ff ff ff    	jg     c001da55 <Video::tgaParse(unsigned char*, int, int*, int*)+0x123>
c001dae7:	e9 ce 01 00 00       	jmp    c001dcba <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c001daec:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001daf1:	75 0e                	jne    c001db01 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c001daf3:	85 c0                	test   eax,eax
c001daf5:	75 0a                	jne    c001db01 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c001daf7:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001dafa:	83 e8 18             	sub    eax,0x18
c001dafd:	a8 f7                	test   al,0xf7
c001daff:	74 0d                	je     c001db0e <Video::tgaParse(unsigned char*, int, int*, int*)+0x1dc>
c001db01:	83 ec 0c             	sub    esp,0xc
c001db04:	68 eb 2b 03 c0       	push   0xc0032beb
c001db09:	e9 98 01 00 00       	jmp    c001dca6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c001db0e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001db16:	31 c9                	xor    ecx,ecx
c001db18:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001db20:	3b 7c 24 58          	cmp    edi,DWORD PTR [esp+0x58]
c001db24:	0f 8d 90 01 00 00    	jge    c001dcba <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c001db2a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001db2e:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001db32:	0f 8e 82 01 00 00    	jle    c001dcba <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c001db38:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c001db3c:	8d 77 01             	lea    esi,[edi+0x1]
c001db3f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001db43:	83 fa 7f             	cmp    edx,0x7f
c001db46:	89 d0                	mov    eax,edx
c001db48:	0f 8e a3 00 00 00    	jle    c001dbf1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2bf>
c001db4e:	83 e0 7f             	and    eax,0x7f
c001db51:	31 d2                	xor    edx,edx
c001db53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001db57:	40                   	inc    eax
c001db58:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001db5c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001db60:	75 08                	jne    c001db6a <Video::tgaParse(unsigned char*, int, int*, int*)+0x238>
c001db62:	0f b6 54 3b 04       	movzx  edx,BYTE PTR [ebx+edi*1+0x4]
c001db67:	c1 e2 18             	shl    edx,0x18
c001db6a:	0f b6 44 3b 03       	movzx  eax,BYTE PTR [ebx+edi*1+0x3]
c001db6f:	c1 e0 10             	shl    eax,0x10
c001db72:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001db76:	0f b6 44 3b 02       	movzx  eax,BYTE PTR [ebx+edi*1+0x2]
c001db7b:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c001db7f:	c1 e0 08             	shl    eax,0x8
c001db82:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c001db86:	09 f8                	or     eax,edi
c001db88:	31 ff                	xor    edi,edi
c001db8a:	09 d0                	or     eax,edx
c001db8c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001db90:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001db95:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001db99:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001db9e:	75 1d                	jne    c001dbbd <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c001dba0:	89 c8                	mov    eax,ecx
c001dba2:	99                   	cdq    
c001dba3:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c001dba7:	85 d2                	test   edx,edx
c001dba9:	75 12                	jne    c001dbbd <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c001dbab:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dbaf:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001dbb3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001dbb7:	49                   	dec    ecx
c001dbb8:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c001dbbd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001dbc1:	8d 51 01             	lea    edx,[ecx+0x1]
c001dbc4:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c001dbc8:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001dbcc:	8d 47 01             	lea    eax,[edi+0x1]
c001dbcf:	7e 06                	jle    c001dbd7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2a5>
c001dbd1:	89 c7                	mov    edi,eax
c001dbd3:	89 d1                	mov    ecx,edx
c001dbd5:	eb c2                	jmp    c001db99 <Video::tgaParse(unsigned char*, int, int*, int*)+0x267>
c001dbd7:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001dbdb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001dbdf:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c001dbe3:	c1 f8 03             	sar    eax,0x3
c001dbe6:	01 c6                	add    esi,eax
c001dbe8:	89 d1                	mov    ecx,edx
c001dbea:	89 f7                	mov    edi,esi
c001dbec:	e9 2f ff ff ff       	jmp    c001db20 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ee>
c001dbf1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001dbf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dbfd:	40                   	inc    eax
c001dbfe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001dc02:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001dc07:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001dc0b:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001dc10:	75 1d                	jne    c001dc2f <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c001dc12:	89 c8                	mov    eax,ecx
c001dc14:	99                   	cdq    
c001dc15:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c001dc19:	85 d2                	test   edx,edx
c001dc1b:	75 12                	jne    c001dc2f <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c001dc1d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dc21:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001dc25:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001dc29:	49                   	dec    ecx
c001dc2a:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c001dc2f:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001dc33:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c001dc3b:	75 0c                	jne    c001dc49 <Video::tgaParse(unsigned char*, int, int*, int*)+0x317>
c001dc3d:	0f b6 7c 33 03       	movzx  edi,BYTE PTR [ebx+esi*1+0x3]
c001dc42:	c1 e7 18             	shl    edi,0x18
c001dc45:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001dc49:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c001dc4e:	8d 51 01             	lea    edx,[ecx+0x1]
c001dc51:	c1 e0 10             	shl    eax,0x10
c001dc54:	89 c7                	mov    edi,eax
c001dc56:	0f b6 44 33 01       	movzx  eax,BYTE PTR [ebx+esi*1+0x1]
c001dc5b:	c1 e0 08             	shl    eax,0x8
c001dc5e:	09 f8                	or     eax,edi
c001dc60:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c001dc64:	09 f8                	or     eax,edi
c001dc66:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c001dc6a:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001dc6e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dc72:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001dc76:	c1 f8 03             	sar    eax,0x3
c001dc79:	01 c6                	add    esi,eax
c001dc7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc7f:	40                   	inc    eax
c001dc80:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c001dc84:	7e 0b                	jle    c001dc91 <Video::tgaParse(unsigned char*, int, int*, int*)+0x35f>
c001dc86:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dc8a:	89 d1                	mov    ecx,edx
c001dc8c:	e9 7a ff ff ff       	jmp    c001dc0b <Video::tgaParse(unsigned char*, int, int*, int*)+0x2d9>
c001dc91:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001dc95:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c001dc99:	e9 4a ff ff ff       	jmp    c001dbe8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b6>
c001dc9e:	50                   	push   eax
c001dc9f:	50                   	push   eax
c001dca0:	51                   	push   ecx
c001dca1:	68 fa 2b 03 c0       	push   0xc0032bfa
c001dca6:	e8 13 b8 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001dcab:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001dcae:	e8 e5 89 ff ff       	call   c0016698 <free>
c001dcb3:	83 c4 10             	add    esp,0x10
c001dcb6:	31 ed                	xor    ebp,ebp
c001dcb8:	eb 14                	jmp    c001dcce <Video::tgaParse(unsigned char*, int, int*, int*)+0x39c>
c001dcba:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001dcbe:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001dcc2:	89 18                	mov    DWORD PTR [eax],ebx
c001dcc4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001dcc8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001dccc:	89 18                	mov    DWORD PTR [eax],ebx
c001dcce:	83 c4 3c             	add    esp,0x3c
c001dcd1:	89 e8                	mov    eax,ebp
c001dcd3:	5b                   	pop    ebx
c001dcd4:	5e                   	pop    esi
c001dcd5:	5f                   	pop    edi
c001dcd6:	5d                   	pop    ebp
c001dcd7:	c3                   	ret    

c001dcd8 <Video::putTGA(int, int, unsigned char*, int)>:
c001dcd8:	55                   	push   ebp
c001dcd9:	57                   	push   edi
c001dcda:	56                   	push   esi
c001dcdb:	53                   	push   ebx
c001dcdc:	83 ec 28             	sub    esp,0x28
c001dcdf:	8d 44 24 18          	lea    eax,[esp+0x18]
c001dce3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001dce7:	50                   	push   eax
c001dce8:	8d 44 24 18          	lea    eax,[esp+0x18]
c001dcec:	50                   	push   eax
c001dced:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001dcf1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001dcf5:	55                   	push   ebp
c001dcf6:	e8 37 fc ff ff       	call   c001d932 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001dcfb:	83 c4 20             	add    esp,0x20
c001dcfe:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001dd02:	85 c0                	test   eax,eax
c001dd04:	74 3b                	je     c001dd41 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c001dd06:	89 c6                	mov    esi,eax
c001dd08:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dd0c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001dd10:	39 d8                	cmp    eax,ebx
c001dd12:	7e 2d                	jle    c001dd41 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c001dd14:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001dd18:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dd1c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001dd20:	39 f8                	cmp    eax,edi
c001dd22:	7e 1a                	jle    c001dd3e <Video::putTGA(int, int, unsigned char*, int)+0x66>
c001dd24:	83 c6 04             	add    esi,0x4
c001dd27:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c001dd2a:	85 c0                	test   eax,eax
c001dd2c:	79 0d                	jns    c001dd3b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001dd2e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001dd31:	50                   	push   eax
c001dd32:	53                   	push   ebx
c001dd33:	57                   	push   edi
c001dd34:	55                   	push   ebp
c001dd35:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001dd38:	83 c4 10             	add    esp,0x10
c001dd3b:	47                   	inc    edi
c001dd3c:	eb da                	jmp    c001dd18 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001dd3e:	43                   	inc    ebx
c001dd3f:	eb c7                	jmp    c001dd08 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001dd41:	83 c4 1c             	add    esp,0x1c
c001dd44:	5b                   	pop    ebx
c001dd45:	5e                   	pop    esi
c001dd46:	5f                   	pop    edi
c001dd47:	5d                   	pop    ebp
c001dd48:	c3                   	ret    
c001dd49:	66 90                	xchg   ax,ax
c001dd4b:	90                   	nop

c001dd4c <ACPI::close(int, int, void*)>:
c001dd4c:	83 ec 1c             	sub    esp,0x1c
c001dd4f:	83 ec 0c             	sub    esp,0xc
c001dd52:	68 5c 2c 03 c0       	push   0xc0032c5c
c001dd57:	e8 62 b7 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001dd5c:	83 c4 10             	add    esp,0x10
c001dd5f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001dd67:	74 1b                	je     c001dd84 <ACPI::close(int, int, void*)+0x38>
c001dd69:	83 ec 0c             	sub    esp,0xc
c001dd6c:	68 6b 2c 03 c0       	push   0xc0032c6b
c001dd71:	e8 48 b7 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001dd76:	83 c4 10             	add    esp,0x10
c001dd79:	b8 00 00 00 00       	mov    eax,0x0
c001dd7e:	e9 01 01 00 00       	jmp    c001de84 <ACPI::close(int, int, void*)+0x138>
c001dd83:	90                   	nop
c001dd84:	83 ec 0c             	sub    esp,0xc
c001dd87:	68 7c 2c 03 c0       	push   0xc0032c7c
c001dd8c:	e8 2d b7 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001dd91:	83 c4 10             	add    esp,0x10
c001dd94:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001dd99:	75 45                	jne    c001dde0 <ACPI::close(int, int, void*)+0x94>
c001dd9b:	a1 08 04 04 c0       	mov    eax,ds:0xc0040408
c001dda0:	83 ec 08             	sub    esp,0x8
c001dda3:	50                   	push   eax
c001dda4:	68 8b 2c 03 c0       	push   0xc0032c8b
c001dda9:	e8 10 b7 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001ddae:	83 c4 10             	add    esp,0x10
c001ddb1:	a1 08 04 04 c0       	mov    eax,ds:0xc0040408
c001ddb6:	85 c0                	test   eax,eax
c001ddb8:	74 0a                	je     c001ddc4 <ACPI::close(int, int, void*)+0x78>
c001ddba:	a1 08 04 04 c0       	mov    eax,ds:0xc0040408
c001ddbf:	ff d0                	call   eax
c001ddc1:	8d 76 00             	lea    esi,[esi+0x0]
c001ddc4:	83 ec 0c             	sub    esp,0xc
c001ddc7:	68 5c 2e 03 c0       	push   0xc0032e5c
c001ddcc:	e8 31 29 00 00       	call   c0020702 <KePanic(char const*)>
c001ddd1:	83 c4 10             	add    esp,0x10
c001ddd4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ddd9:	e9 a6 00 00 00       	jmp    c001de84 <ACPI::close(int, int, void*)+0x138>
c001ddde:	66 90                	xchg   ax,ax
c001dde0:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001dde5:	0f 85 81 00 00 00    	jne    c001de6c <ACPI::close(int, int, void*)+0x120>
c001ddeb:	a1 08 04 04 c0       	mov    eax,ds:0xc0040408
c001ddf0:	83 ec 08             	sub    esp,0x8
c001ddf3:	50                   	push   eax
c001ddf4:	68 a9 2c 03 c0       	push   0xc0032ca9
c001ddf9:	e8 c0 b6 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001ddfe:	83 c4 10             	add    esp,0x10
c001de01:	a1 04 04 04 c0       	mov    eax,ds:0xc0040404
c001de06:	85 c0                	test   eax,eax
c001de08:	74 0a                	je     c001de14 <ACPI::close(int, int, void*)+0xc8>
c001de0a:	a1 04 04 04 c0       	mov    eax,ds:0xc0040404
c001de0f:	ff d0                	call   eax
c001de11:	8d 76 00             	lea    esi,[esi+0x0]
c001de14:	83 ec 0c             	sub    esp,0xc
c001de17:	68 c4 2c 03 c0       	push   0xc0032cc4
c001de1c:	e8 9d b6 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001de21:	83 c4 10             	add    esp,0x10
c001de24:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001de29:	8d 76 00             	lea    esi,[esi+0x0]
c001de2c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001de31:	83 e0 02             	and    eax,0x2
c001de34:	74 1e                	je     c001de54 <ACPI::close(int, int, void*)+0x108>
c001de36:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001de3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001de41:	89 c2                	mov    edx,eax
c001de43:	ec                   	in     al,dx
c001de44:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001de48:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001de4c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001de50:	eb da                	jmp    c001de2c <ACPI::close(int, int, void*)+0xe0>
c001de52:	66 90                	xchg   ax,ax
c001de54:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001de5b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001de60:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001de64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001de68:	ee                   	out    dx,al
c001de69:	8d 76 00             	lea    esi,[esi+0x0]
c001de6c:	83 ec 0c             	sub    esp,0xc
c001de6f:	68 d6 2c 03 c0       	push   0xc0032cd6
c001de74:	e8 45 b6 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001de79:	83 c4 10             	add    esp,0x10
c001de7c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001de81:	8d 76 00             	lea    esi,[esi+0x0]
c001de84:	83 c4 1c             	add    esp,0x1c
c001de87:	c3                   	ret    

c001de88 <findRSDP()>:
c001de88:	83 ec 1c             	sub    esp,0x1c
c001de8b:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001de90:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001de96:	83 e0 04             	and    eax,0x4
c001de99:	0f b6 c0             	movzx  eax,al
c001de9c:	85 c0                	test   eax,eax
c001de9e:	75 08                	jne    c001dea8 <findRSDP()+0x20>
c001dea0:	b8 00 00 00 00       	mov    eax,0x0
c001dea5:	eb 75                	jmp    c001df1c <findRSDP()+0x94>
c001dea7:	90                   	nop
c001dea8:	a1 ec b9 03 c0       	mov    eax,ds:0xc003b9ec
c001dead:	3d ff 07 00 00       	cmp    eax,0x7ff
c001deb2:	7f 1c                	jg     c001ded0 <findRSDP()+0x48>
c001deb4:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001deb9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001debf:	83 e2 fb             	and    edx,0xfffffffb
c001dec2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001dec8:	b8 00 00 00 00       	mov    eax,0x0
c001decd:	eb 4d                	jmp    c001df1c <findRSDP()+0x94>
c001decf:	90                   	nop
c001ded0:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001ded8:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001dee0:	77 32                	ja     c001df14 <findRSDP()+0x8c>
c001dee2:	83 ec 04             	sub    esp,0x4
c001dee5:	6a 08                	push   0x8
c001dee7:	68 e5 2c 03 c0       	push   0xc0032ce5
c001deec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001def0:	e8 8b 24 fe ff       	call   c0000380 <memcmp>
c001def5:	83 c4 10             	add    esp,0x10
c001def8:	85 c0                	test   eax,eax
c001defa:	0f 94 c0             	sete   al
c001defd:	0f b6 c0             	movzx  eax,al
c001df00:	85 c0                	test   eax,eax
c001df02:	74 08                	je     c001df0c <findRSDP()+0x84>
c001df04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001df08:	eb 12                	jmp    c001df1c <findRSDP()+0x94>
c001df0a:	66 90                	xchg   ax,ax
c001df0c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001df11:	eb c5                	jmp    c001ded8 <findRSDP()+0x50>
c001df13:	90                   	nop
c001df14:	b8 00 00 00 00       	mov    eax,0x0
c001df19:	8d 76 00             	lea    esi,[esi+0x0]
c001df1c:	83 c4 1c             	add    esp,0x1c
c001df1f:	c3                   	ret    

c001df20 <loadACPITables(unsigned char*)>:
c001df20:	57                   	push   edi
c001df21:	56                   	push   esi
c001df22:	53                   	push   ebx
c001df23:	83 ec 60             	sub    esp,0x60
c001df26:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001df2b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001df31:	83 e0 04             	and    eax,0x4
c001df34:	0f b6 c0             	movzx  eax,al
c001df37:	85 c0                	test   eax,eax
c001df39:	0f 84 41 02 00 00    	je     c001e180 <loadACPITables(unsigned char*)+0x260>
c001df3f:	a0 20 06 04 c0       	mov    al,ds:0xc0040620
c001df44:	0f b6 c0             	movzx  eax,al
c001df47:	85 c0                	test   eax,eax
c001df49:	74 79                	je     c001dfc4 <loadACPITables(unsigned char*)+0xa4>
c001df4b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001df4f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001df53:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001df57:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001df5a:	83 e8 24             	sub    eax,0x24
c001df5d:	c1 e8 03             	shr    eax,0x3
c001df60:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001df64:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001df6c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001df70:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001df74:	0f 8d ba 00 00 00    	jge    c001e034 <loadACPITables(unsigned char*)+0x114>
c001df7a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001df7e:	83 c0 24             	add    eax,0x24
c001df81:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001df85:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001df89:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001df8d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001df91:	c1 e0 03             	shl    eax,0x3
c001df94:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001df98:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001df9c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001df9f:	8b 00                	mov    eax,DWORD PTR [eax]
c001dfa1:	89 c1                	mov    ecx,eax
c001dfa3:	a1 0c 04 04 c0       	mov    eax,ds:0xc004040c
c001dfa8:	8d 50 01             	lea    edx,[eax+0x1]
c001dfab:	89 15 0c 04 04 c0    	mov    DWORD PTR ds:0xc004040c,edx
c001dfb1:	89 ca                	mov    edx,ecx
c001dfb3:	89 14 c5 24 04 04 c0 	mov    DWORD PTR [eax*8-0x3ffbfbdc],edx
c001dfba:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c001dfbf:	eb ab                	jmp    c001df6c <loadACPITables(unsigned char*)+0x4c>
c001dfc1:	8d 76 00             	lea    esi,[esi+0x0]
c001dfc4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dfc8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001dfcc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001dfd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dfd3:	83 e8 24             	sub    eax,0x24
c001dfd6:	c1 e8 02             	shr    eax,0x2
c001dfd9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001dfdd:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001dfe5:	8d 76 00             	lea    esi,[esi+0x0]
c001dfe8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dfec:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001dff0:	7d 42                	jge    c001e034 <loadACPITables(unsigned char*)+0x114>
c001dff2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dff6:	83 c0 24             	add    eax,0x24
c001dff9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001dffd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e001:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001e005:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e009:	c1 e0 02             	shl    eax,0x2
c001e00c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001e010:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e014:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e016:	a1 0c 04 04 c0       	mov    eax,ds:0xc004040c
c001e01b:	8d 50 01             	lea    edx,[eax+0x1]
c001e01e:	89 15 0c 04 04 c0    	mov    DWORD PTR ds:0xc004040c,edx
c001e024:	89 ca                	mov    edx,ecx
c001e026:	89 14 c5 24 04 04 c0 	mov    DWORD PTR [eax*8-0x3ffbfbdc],edx
c001e02d:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c001e032:	eb b4                	jmp    c001dfe8 <loadACPITables(unsigned char*)+0xc8>
c001e034:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001e03c:	a1 0c 04 04 c0       	mov    eax,ds:0xc004040c
c001e041:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001e045:	0f 8d 39 01 00 00    	jge    c001e184 <loadACPITables(unsigned char*)+0x264>
c001e04b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e04f:	8b 04 c5 24 04 04 c0 	mov    eax,DWORD PTR [eax*8-0x3ffbfbdc]
c001e056:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e05a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e05e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e062:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e066:	25 ff 0f 00 00       	and    eax,0xfff
c001e06b:	89 c6                	mov    esi,eax
c001e06d:	8b 1d b0 ba 03 c0    	mov    ebx,DWORD PTR ds:0xc003bab0
c001e073:	83 ec 0c             	sub    esp,0xc
c001e076:	6a 01                	push   0x1
c001e078:	e8 2c a1 ff ff       	call   c00181a9 <Virt::allocateKernelVirtualPages(int)>
c001e07d:	83 c4 10             	add    esp,0x10
c001e080:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e084:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001e08a:	83 ec 0c             	sub    esp,0xc
c001e08d:	6a 01                	push   0x1
c001e08f:	6a 01                	push   0x1
c001e091:	50                   	push   eax
c001e092:	52                   	push   edx
c001e093:	53                   	push   ebx
c001e094:	e8 23 aa ff ff       	call   c0018abc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e099:	83 c4 20             	add    esp,0x20
c001e09c:	09 f0                	or     eax,esi
c001e09e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e0a2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e0a6:	c1 e0 03             	shl    eax,0x3
c001e0a9:	05 20 04 04 c0       	add    eax,0xc0040420
c001e0ae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e0b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e0ba:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001e0c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e0c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e0ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e0ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e0d2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e0d6:	89 c6                	mov    esi,eax
c001e0d8:	89 d7                	mov    edi,edx
c001e0da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e0dc:	89 c8                	mov    eax,ecx
c001e0de:	89 fa                	mov    edx,edi
c001e0e0:	89 f3                	mov    ebx,esi
c001e0e2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001e0e6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e0ea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e0ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e0f5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e0f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e0fd:	05 00 10 00 00       	add    eax,0x1000
c001e102:	c1 e8 0c             	shr    eax,0xc
c001e105:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e109:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e10d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e111:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e115:	25 ff 0f 00 00       	and    eax,0xfff
c001e11a:	89 c6                	mov    esi,eax
c001e11c:	8b 1d b0 ba 03 c0    	mov    ebx,DWORD PTR ds:0xc003bab0
c001e122:	83 ec 0c             	sub    esp,0xc
c001e125:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e129:	e8 7b a0 ff ff       	call   c00181a9 <Virt::allocateKernelVirtualPages(int)>
c001e12e:	83 c4 10             	add    esp,0x10
c001e131:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e135:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001e13b:	83 ec 0c             	sub    esp,0xc
c001e13e:	6a 01                	push   0x1
c001e140:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e144:	50                   	push   eax
c001e145:	52                   	push   edx
c001e146:	53                   	push   ebx
c001e147:	e8 70 a9 ff ff       	call   c0018abc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e14c:	83 c4 20             	add    esp,0x20
c001e14f:	09 f0                	or     eax,esi
c001e151:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e155:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e159:	83 ec 0c             	sub    esp,0xc
c001e15c:	50                   	push   eax
c001e15d:	e8 5b a3 ff ff       	call   c00184bd <Virt::freeKernelVirtualPages(unsigned long)>
c001e162:	83 c4 10             	add    esp,0x10
c001e165:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e169:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e16d:	89 14 c5 24 04 04 c0 	mov    DWORD PTR [eax*8-0x3ffbfbdc],edx
c001e174:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c001e179:	e9 be fe ff ff       	jmp    c001e03c <loadACPITables(unsigned char*)+0x11c>
c001e17e:	66 90                	xchg   ax,ax
c001e180:	90                   	nop
c001e181:	8d 76 00             	lea    esi,[esi+0x0]
c001e184:	83 c4 60             	add    esp,0x60
c001e187:	5b                   	pop    ebx
c001e188:	5e                   	pop    esi
c001e189:	5f                   	pop    edi
c001e18a:	c3                   	ret    
c001e18b:	90                   	nop

c001e18c <findRSDT(unsigned char*)>:
c001e18c:	57                   	push   edi
c001e18d:	56                   	push   esi
c001e18e:	53                   	push   ebx
c001e18f:	83 ec 50             	sub    esp,0x50
c001e192:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001e197:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e19d:	83 e0 04             	and    eax,0x4
c001e1a0:	0f b6 c0             	movzx  eax,al
c001e1a3:	85 c0                	test   eax,eax
c001e1a5:	75 0d                	jne    c001e1b4 <findRSDT(unsigned char*)+0x28>
c001e1a7:	b8 00 00 00 00       	mov    eax,0x0
c001e1ac:	e9 2b 01 00 00       	jmp    c001e2dc <findRSDT(unsigned char*)+0x150>
c001e1b1:	8d 76 00             	lea    esi,[esi+0x0]
c001e1b4:	89 e0                	mov    eax,esp
c001e1b6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001e1ba:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001e1be:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001e1c2:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001e1ca:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e1ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e1d2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e1d6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e1da:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e1de:	89 c6                	mov    esi,eax
c001e1e0:	89 d7                	mov    edi,edx
c001e1e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e1e4:	89 c8                	mov    eax,ecx
c001e1e6:	89 fa                	mov    edx,edi
c001e1e8:	89 f3                	mov    ebx,esi
c001e1ea:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001e1ee:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e1f2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e1f6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e1fa:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001e1fe:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001e206:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e20a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e20e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001e212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e216:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001e21a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e21e:	25 ff 0f 00 00       	and    eax,0xfff
c001e223:	89 c6                	mov    esi,eax
c001e225:	8b 1d b0 ba 03 c0    	mov    ebx,DWORD PTR ds:0xc003bab0
c001e22b:	83 ec 0c             	sub    esp,0xc
c001e22e:	6a 02                	push   0x2
c001e230:	e8 74 9f ff ff       	call   c00181a9 <Virt::allocateKernelVirtualPages(int)>
c001e235:	83 c4 10             	add    esp,0x10
c001e238:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001e23c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001e242:	83 ec 0c             	sub    esp,0xc
c001e245:	6a 01                	push   0x1
c001e247:	6a 02                	push   0x2
c001e249:	50                   	push   eax
c001e24a:	52                   	push   edx
c001e24b:	53                   	push   ebx
c001e24c:	e8 6b a8 ff ff       	call   c0018abc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e251:	83 c4 20             	add    esp,0x20
c001e254:	09 f0                	or     eax,esi
c001e256:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001e25a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e25e:	25 ff 0f 00 00       	and    eax,0xfff
c001e263:	89 c6                	mov    esi,eax
c001e265:	8b 1d b0 ba 03 c0    	mov    ebx,DWORD PTR ds:0xc003bab0
c001e26b:	83 ec 0c             	sub    esp,0xc
c001e26e:	6a 02                	push   0x2
c001e270:	e8 34 9f ff ff       	call   c00181a9 <Virt::allocateKernelVirtualPages(int)>
c001e275:	83 c4 10             	add    esp,0x10
c001e278:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001e27c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001e282:	83 ec 0c             	sub    esp,0xc
c001e285:	6a 01                	push   0x1
c001e287:	6a 02                	push   0x2
c001e289:	50                   	push   eax
c001e28a:	52                   	push   edx
c001e28b:	53                   	push   ebx
c001e28c:	e8 2b a8 ff ff       	call   c0018abc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e291:	83 c4 20             	add    esp,0x20
c001e294:	09 f0                	or     eax,esi
c001e296:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001e29a:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001e29f:	85 c0                	test   eax,eax
c001e2a1:	75 11                	jne    c001e2b4 <findRSDT(unsigned char*)+0x128>
c001e2a3:	c6 05 20 06 04 c0 00 	mov    BYTE PTR ds:0xc0040620,0x0
c001e2aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e2ae:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e2b2:	eb 24                	jmp    c001e2d8 <findRSDT(unsigned char*)+0x14c>
c001e2b4:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001e2b9:	83 f8 02             	cmp    eax,0x2
c001e2bc:	75 12                	jne    c001e2d0 <findRSDT(unsigned char*)+0x144>
c001e2be:	c6 05 20 06 04 c0 01 	mov    BYTE PTR ds:0xc0040620,0x1
c001e2c5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e2c9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e2cd:	eb 09                	jmp    c001e2d8 <findRSDT(unsigned char*)+0x14c>
c001e2cf:	90                   	nop
c001e2d0:	b8 00 00 00 00       	mov    eax,0x0
c001e2d5:	eb 05                	jmp    c001e2dc <findRSDT(unsigned char*)+0x150>
c001e2d7:	90                   	nop
c001e2d8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001e2dc:	83 c4 50             	add    esp,0x50
c001e2df:	5b                   	pop    ebx
c001e2e0:	5e                   	pop    esi
c001e2e1:	5f                   	pop    edi
c001e2e2:	c3                   	ret    
c001e2e3:	90                   	nop

c001e2e4 <findDataTable(unsigned char*, char*)>:
c001e2e4:	83 ec 1c             	sub    esp,0x1c
c001e2e7:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001e2ec:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e2f2:	83 e0 04             	and    eax,0x4
c001e2f5:	0f b6 c0             	movzx  eax,al
c001e2f8:	85 c0                	test   eax,eax
c001e2fa:	75 08                	jne    c001e304 <findDataTable(unsigned char*, char*)+0x20>
c001e2fc:	b8 00 00 00 00       	mov    eax,0x0
c001e301:	eb 5d                	jmp    c001e360 <findDataTable(unsigned char*, char*)+0x7c>
c001e303:	90                   	nop
c001e304:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e30c:	a1 0c 04 04 c0       	mov    eax,ds:0xc004040c
c001e311:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001e315:	7d 41                	jge    c001e358 <findDataTable(unsigned char*, char*)+0x74>
c001e317:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e31b:	c1 e0 03             	shl    eax,0x3
c001e31e:	05 20 04 04 c0       	add    eax,0xc0040420
c001e323:	83 ec 04             	sub    esp,0x4
c001e326:	6a 04                	push   0x4
c001e328:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e32c:	50                   	push   eax
c001e32d:	e8 4e 20 fe ff       	call   c0000380 <memcmp>
c001e332:	83 c4 10             	add    esp,0x10
c001e335:	85 c0                	test   eax,eax
c001e337:	0f 94 c0             	sete   al
c001e33a:	0f b6 c0             	movzx  eax,al
c001e33d:	85 c0                	test   eax,eax
c001e33f:	74 0f                	je     c001e350 <findDataTable(unsigned char*, char*)+0x6c>
c001e341:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e345:	8b 04 c5 24 04 04 c0 	mov    eax,DWORD PTR [eax*8-0x3ffbfbdc]
c001e34c:	eb 12                	jmp    c001e360 <findDataTable(unsigned char*, char*)+0x7c>
c001e34e:	66 90                	xchg   ax,ax
c001e350:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001e355:	eb b5                	jmp    c001e30c <findDataTable(unsigned char*, char*)+0x28>
c001e357:	90                   	nop
c001e358:	b8 00 00 00 00       	mov    eax,0x0
c001e35d:	8d 76 00             	lea    esi,[esi+0x0]
c001e360:	83 c4 1c             	add    esp,0x1c
c001e363:	c3                   	ret    

c001e364 <scanMADT()>:
c001e364:	53                   	push   ebx
c001e365:	83 ec 38             	sub    esp,0x38
c001e368:	a1 d4 b9 03 c0       	mov    eax,ds:0xc003b9d4
c001e36d:	25 00 04 00 00       	and    eax,0x400
c001e372:	74 14                	je     c001e388 <scanMADT()+0x24>
c001e374:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001e379:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e37f:	83 e2 fb             	and    edx,0xfffffffb
c001e382:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e388:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001e38d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e393:	83 e0 04             	and    eax,0x4
c001e396:	0f b6 c0             	movzx  eax,al
c001e399:	85 c0                	test   eax,eax
c001e39b:	0f 84 6b 04 00 00    	je     c001e80c <scanMADT()+0x4a8>
c001e3a1:	e8 e2 fa ff ff       	call   c001de88 <findRSDP()>
c001e3a6:	a3 2c 06 04 c0       	mov    ds:0xc004062c,eax
c001e3ab:	a1 2c 06 04 c0       	mov    eax,ds:0xc004062c
c001e3b0:	85 c0                	test   eax,eax
c001e3b2:	75 1c                	jne    c001e3d0 <scanMADT()+0x6c>
c001e3b4:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001e3b9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e3bf:	83 e2 fb             	and    edx,0xfffffffb
c001e3c2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e3c8:	e9 47 04 00 00       	jmp    c001e814 <scanMADT()+0x4b0>
c001e3cd:	8d 76 00             	lea    esi,[esi+0x0]
c001e3d0:	a1 2c 06 04 c0       	mov    eax,ds:0xc004062c
c001e3d5:	83 ec 0c             	sub    esp,0xc
c001e3d8:	50                   	push   eax
c001e3d9:	e8 ae fd ff ff       	call   c001e18c <findRSDT(unsigned char*)>
c001e3de:	83 c4 10             	add    esp,0x10
c001e3e1:	a3 28 06 04 c0       	mov    ds:0xc0040628,eax
c001e3e6:	a1 28 06 04 c0       	mov    eax,ds:0xc0040628
c001e3eb:	85 c0                	test   eax,eax
c001e3ed:	75 19                	jne    c001e408 <scanMADT()+0xa4>
c001e3ef:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001e3f4:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e3fa:	83 e2 fb             	and    edx,0xfffffffb
c001e3fd:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e403:	e9 0c 04 00 00       	jmp    c001e814 <scanMADT()+0x4b0>
c001e408:	a1 28 06 04 c0       	mov    eax,ds:0xc0040628
c001e40d:	83 ec 0c             	sub    esp,0xc
c001e410:	50                   	push   eax
c001e411:	e8 0a fb ff ff       	call   c001df20 <loadACPITables(unsigned char*)>
c001e416:	83 c4 10             	add    esp,0x10
c001e419:	a1 28 06 04 c0       	mov    eax,ds:0xc0040628
c001e41e:	83 ec 08             	sub    esp,0x8
c001e421:	68 ee 2c 03 c0       	push   0xc0032cee
c001e426:	50                   	push   eax
c001e427:	e8 b8 fe ff ff       	call   c001e2e4 <findDataTable(unsigned char*, char*)>
c001e42c:	83 c4 10             	add    esp,0x10
c001e42f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e433:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001e438:	75 1a                	jne    c001e454 <scanMADT()+0xf0>
c001e43a:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001e43f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e445:	83 e2 fe             	and    edx,0xfffffffe
c001e448:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e44e:	e9 c1 03 00 00       	jmp    c001e814 <scanMADT()+0x4b0>
c001e453:	90                   	nop
c001e454:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001e45c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e460:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e463:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e467:	0f 87 a7 03 00 00    	ja     c001e814 <scanMADT()+0x4b0>
c001e46d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001e475:	0f 87 99 03 00 00    	ja     c001e814 <scanMADT()+0x4b0>
c001e47b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e47f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e483:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e487:	8d 50 01             	lea    edx,[eax+0x1]
c001e48a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e48e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e492:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e496:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001e49a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e49e:	8d 50 01             	lea    edx,[eax+0x1]
c001e4a1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e4a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e4a9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e4ad:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001e4b1:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c001e4b6:	83 f8 02             	cmp    eax,0x2
c001e4b9:	0f 86 51 03 00 00    	jbe    c001e810 <scanMADT()+0x4ac>
c001e4bf:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e4c4:	85 c0                	test   eax,eax
c001e4c6:	75 58                	jne    c001e520 <scanMADT()+0x1bc>
c001e4c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e4cc:	8d 50 01             	lea    edx,[eax+0x1]
c001e4cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e4d3:	8a 15 20 08 04 c0    	mov    dl,BYTE PTR ds:0xc0040820
c001e4d9:	0f b6 d2             	movzx  edx,dl
c001e4dc:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e4e0:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e4e4:	88 82 60 08 04 c0    	mov    BYTE PTR [edx-0x3ffbf7a0],al
c001e4ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e4ee:	8d 50 01             	lea    edx,[eax+0x1]
c001e4f1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e4f5:	8a 15 20 08 04 c0    	mov    dl,BYTE PTR ds:0xc0040820
c001e4fb:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e4fe:	88 0d 20 08 04 c0    	mov    BYTE PTR ds:0xc0040820,cl
c001e504:	0f b6 d2             	movzx  edx,dl
c001e507:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e50b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e50f:	88 82 40 08 04 c0    	mov    BYTE PTR [edx-0x3ffbf7c0],al
c001e515:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e51a:	e9 d9 02 00 00       	jmp    c001e7f8 <scanMADT()+0x494>
c001e51f:	90                   	nop
c001e520:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e525:	83 f8 01             	cmp    eax,0x1
c001e528:	0f 85 1a 01 00 00    	jne    c001e648 <scanMADT()+0x2e4>
c001e52e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e532:	8d 50 01             	lea    edx,[eax+0x1]
c001e535:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e539:	8a 15 e0 06 04 c0    	mov    dl,BYTE PTR ds:0xc00406e0
c001e53f:	0f b6 d2             	movzx  edx,dl
c001e542:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e546:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e54a:	88 82 00 07 04 c0    	mov    BYTE PTR [edx-0x3ffbf900],al
c001e550:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c001e555:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e559:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e55d:	01 d0                	add    eax,edx
c001e55f:	83 c0 2c             	add    eax,0x2c
c001e562:	8a 00                	mov    al,BYTE PTR [eax]
c001e564:	0f b6 d0             	movzx  edx,al
c001e567:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e56b:	8d 48 01             	lea    ecx,[eax+0x1]
c001e56e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e572:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e576:	0f b6 c0             	movzx  eax,al
c001e579:	c1 e0 08             	shl    eax,0x8
c001e57c:	89 d1                	mov    ecx,edx
c001e57e:	09 c1                	or     ecx,eax
c001e580:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e584:	8d 50 02             	lea    edx,[eax+0x2]
c001e587:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e58b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e58f:	0f b6 c0             	movzx  eax,al
c001e592:	c1 e0 10             	shl    eax,0x10
c001e595:	09 c1                	or     ecx,eax
c001e597:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e59b:	8d 50 03             	lea    edx,[eax+0x3]
c001e59e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e5a2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e5a6:	0f b6 c0             	movzx  eax,al
c001e5a9:	c1 e0 18             	shl    eax,0x18
c001e5ac:	09 c1                	or     ecx,eax
c001e5ae:	89 ca                	mov    edx,ecx
c001e5b0:	a0 e0 06 04 c0       	mov    al,ds:0xc00406e0
c001e5b5:	0f b6 c0             	movzx  eax,al
c001e5b8:	89 14 85 20 07 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf8e0],edx
c001e5bf:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e5c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e5c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5cc:	01 d0                	add    eax,edx
c001e5ce:	83 c0 2c             	add    eax,0x2c
c001e5d1:	8a 00                	mov    al,BYTE PTR [eax]
c001e5d3:	0f b6 d0             	movzx  edx,al
c001e5d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5da:	8d 48 01             	lea    ecx,[eax+0x1]
c001e5dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e5e1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e5e5:	0f b6 c0             	movzx  eax,al
c001e5e8:	c1 e0 08             	shl    eax,0x8
c001e5eb:	89 d1                	mov    ecx,edx
c001e5ed:	09 c1                	or     ecx,eax
c001e5ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5f3:	8d 50 02             	lea    edx,[eax+0x2]
c001e5f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e5fa:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e5fe:	0f b6 c0             	movzx  eax,al
c001e601:	c1 e0 10             	shl    eax,0x10
c001e604:	09 c1                	or     ecx,eax
c001e606:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e60a:	8d 50 03             	lea    edx,[eax+0x3]
c001e60d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e611:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e615:	0f b6 c0             	movzx  eax,al
c001e618:	c1 e0 18             	shl    eax,0x18
c001e61b:	09 c1                	or     ecx,eax
c001e61d:	89 ca                	mov    edx,ecx
c001e61f:	a0 e0 06 04 c0       	mov    al,ds:0xc00406e0
c001e624:	0f b6 c0             	movzx  eax,al
c001e627:	89 14 85 a0 07 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf860],edx
c001e62e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e633:	a0 e0 06 04 c0       	mov    al,ds:0xc00406e0
c001e638:	83 c0 01             	add    eax,0x1
c001e63b:	a2 e0 06 04 c0       	mov    ds:0xc00406e0,al
c001e640:	e9 b3 01 00 00       	jmp    c001e7f8 <scanMADT()+0x494>
c001e645:	8d 76 00             	lea    esi,[esi+0x0]
c001e648:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e64d:	83 f8 02             	cmp    eax,0x2
c001e650:	0f 85 ea 00 00 00    	jne    c001e740 <scanMADT()+0x3dc>
c001e656:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e65a:	8d 50 01             	lea    edx,[eax+0x1]
c001e65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e661:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e665:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e669:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001e66d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e671:	8d 50 01             	lea    edx,[eax+0x1]
c001e674:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e678:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e67c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e680:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e684:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e688:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e68c:	01 d0                	add    eax,edx
c001e68e:	83 c0 2c             	add    eax,0x2c
c001e691:	8a 00                	mov    al,BYTE PTR [eax]
c001e693:	0f b6 d0             	movzx  edx,al
c001e696:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e69a:	8d 48 01             	lea    ecx,[eax+0x1]
c001e69d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e6a1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e6a5:	0f b6 c0             	movzx  eax,al
c001e6a8:	c1 e0 08             	shl    eax,0x8
c001e6ab:	89 d1                	mov    ecx,edx
c001e6ad:	09 c1                	or     ecx,eax
c001e6af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e6b3:	8d 50 02             	lea    edx,[eax+0x2]
c001e6b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e6ba:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e6be:	0f b6 c0             	movzx  eax,al
c001e6c1:	c1 e0 10             	shl    eax,0x10
c001e6c4:	09 c1                	or     ecx,eax
c001e6c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e6ca:	8d 50 03             	lea    edx,[eax+0x3]
c001e6cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e6d1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e6d5:	0f b6 c0             	movzx  eax,al
c001e6d8:	c1 e0 18             	shl    eax,0x18
c001e6db:	09 c8                	or     eax,ecx
c001e6dd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e6e1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e6e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e6ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e6ee:	01 d0                	add    eax,edx
c001e6f0:	83 c0 2c             	add    eax,0x2c
c001e6f3:	8a 00                	mov    al,BYTE PTR [eax]
c001e6f5:	0f b6 d0             	movzx  edx,al
c001e6f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e6fc:	8d 48 01             	lea    ecx,[eax+0x1]
c001e6ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e703:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e707:	0f b6 c0             	movzx  eax,al
c001e70a:	c1 e0 08             	shl    eax,0x8
c001e70d:	09 d0                	or     eax,edx
c001e70f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001e714:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e719:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001e71e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e722:	88 90 88 45 03 c0    	mov    BYTE PTR [eax-0x3ffcba78],dl
c001e728:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001e72d:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c001e732:	66 89 94 00 c0 06 04 c0 	mov    WORD PTR [eax+eax*1-0x3ffbf940],dx
c001e73a:	e9 b9 00 00 00       	jmp    c001e7f8 <scanMADT()+0x494>
c001e73f:	90                   	nop
c001e740:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e745:	83 f8 04             	cmp    eax,0x4
c001e748:	0f 85 9a 00 00 00    	jne    c001e7e8 <scanMADT()+0x484>
c001e74e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e752:	8d 50 01             	lea    edx,[eax+0x1]
c001e755:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e759:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e75d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e761:	0f b6 c0             	movzx  eax,al
c001e764:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e768:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e76c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e770:	01 d0                	add    eax,edx
c001e772:	83 c0 2c             	add    eax,0x2c
c001e775:	8a 00                	mov    al,BYTE PTR [eax]
c001e777:	0f b6 d0             	movzx  edx,al
c001e77a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e77e:	8d 48 01             	lea    ecx,[eax+0x1]
c001e781:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e785:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e789:	0f b6 c0             	movzx  eax,al
c001e78c:	c1 e0 08             	shl    eax,0x8
c001e78f:	09 d0                	or     eax,edx
c001e791:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e795:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e79a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e79e:	8d 50 01             	lea    edx,[eax+0x1]
c001e7a1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e7a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e7a9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e7ad:	0f b6 c0             	movzx  eax,al
c001e7b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e7b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7b8:	c1 e0 08             	shl    eax,0x8
c001e7bb:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001e7bf:	89 c1                	mov    ecx,eax
c001e7c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e7c5:	c1 e0 18             	shl    eax,0x18
c001e7c8:	89 c3                	mov    ebx,eax
c001e7ca:	a1 30 06 04 c0       	mov    eax,ds:0xc0040630
c001e7cf:	8d 50 01             	lea    edx,[eax+0x1]
c001e7d2:	89 15 30 06 04 c0    	mov    DWORD PTR ds:0xc0040630,edx
c001e7d8:	09 d9                	or     ecx,ebx
c001e7da:	89 ca                	mov    edx,ecx
c001e7dc:	89 14 85 40 06 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf9c0],edx
c001e7e3:	eb 13                	jmp    c001e7f8 <scanMADT()+0x494>
c001e7e5:	8d 76 00             	lea    esi,[esi+0x0]
c001e7e8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e7ed:	83 f8 05             	cmp    eax,0x5
c001e7f0:	75 06                	jne    c001e7f8 <scanMADT()+0x494>
c001e7f2:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001e7f7:	90                   	nop
c001e7f8:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001e7fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e801:	01 d0                	add    eax,edx
c001e803:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e807:	e9 50 fc ff ff       	jmp    c001e45c <scanMADT()+0xf8>
c001e80c:	90                   	nop
c001e80d:	eb 05                	jmp    c001e814 <scanMADT()+0x4b0>
c001e80f:	90                   	nop
c001e810:	90                   	nop
c001e811:	8d 76 00             	lea    esi,[esi+0x0]
c001e814:	83 c4 38             	add    esp,0x38
c001e817:	5b                   	pop    ebx
c001e818:	c3                   	ret    
c001e819:	90                   	nop
c001e81a:	66 90                	xchg   ax,ax

c001e81c <ACPI::ACPI()>:
c001e81c:	83 ec 0c             	sub    esp,0xc
c001e81f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e823:	83 ec 08             	sub    esp,0x8
c001e826:	68 f3 2c 03 c0       	push   0xc0032cf3
c001e82b:	50                   	push   eax
c001e82c:	e8 3b cf ff ff       	call   c001b76c <Device::Device(char const*)>
c001e831:	83 c4 10             	add    esp,0x10
c001e834:	ba 00 2f 03 c0       	mov    edx,0xc0032f00
c001e839:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e83d:	89 10                	mov    DWORD PTR [eax],edx
c001e83f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e843:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e84a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e84e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001e858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e85c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001e866:	e8 f9 fa ff ff       	call   c001e364 <scanMADT()>
c001e86b:	90                   	nop
c001e86c:	83 c4 0c             	add    esp,0xc
c001e86f:	c3                   	ret    

c001e870 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001e870:	83 ec 2c             	sub    esp,0x2c
c001e873:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e877:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e87b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e87f:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001e883:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001e888:	88 c8                	mov    al,cl
c001e88a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e88e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e893:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001e89b:	90                   	nop
c001e89c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e8a0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e8a6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001e8aa:	0f 8d b0 00 00 00    	jge    c001e960 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c001e8b0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e8b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e8b8:	83 c2 2a             	add    edx,0x2a
c001e8bb:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001e8bf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e8c4:	0f b7 c0             	movzx  eax,ax
c001e8c7:	39 c2                	cmp    edx,eax
c001e8c9:	0f 85 85 00 00 00    	jne    c001e954 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e8cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e8d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e8d7:	83 c2 2a             	add    edx,0x2a
c001e8da:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001e8de:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001e8e3:	0f b6 c0             	movzx  eax,al
c001e8e6:	39 c2                	cmp    edx,eax
c001e8e8:	75 6a                	jne    c001e954 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e8ea:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e8ef:	85 c0                	test   eax,eax
c001e8f1:	74 3d                	je     c001e930 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c001e8f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e8f7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e8fb:	83 c2 2a             	add    edx,0x2a
c001e8fe:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001e902:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e906:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e909:	39 c2                	cmp    edx,eax
c001e90b:	74 13                	je     c001e920 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c001e90d:	83 ec 0c             	sub    esp,0xc
c001e910:	68 80 2e 03 c0       	push   0xc0032e80
c001e915:	e8 e8 1d 00 00       	call   c0020702 <KePanic(char const*)>
c001e91a:	83 c4 10             	add    esp,0x10
c001e91d:	8d 76 00             	lea    esi,[esi+0x0]
c001e920:	83 ec 0c             	sub    esp,0xc
c001e923:	68 f8 2c 03 c0       	push   0xc0032cf8
c001e928:	e8 d5 1d 00 00       	call   c0020702 <KePanic(char const*)>
c001e92d:	83 c4 10             	add    esp,0x10
c001e930:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e934:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e93c:	83 c2 2a             	add    edx,0x2a
c001e93f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001e943:	8b 02                	mov    eax,DWORD PTR [edx]
c001e945:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001e948:	89 01                	mov    DWORD PTR [ecx],eax
c001e94a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e94d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e952:	66 90                	xchg   ax,ax
c001e954:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001e959:	e9 3e ff ff ff       	jmp    c001e89c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c001e95e:	66 90                	xchg   ax,ax
c001e960:	90                   	nop
c001e961:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e965:	83 c4 2c             	add    esp,0x2c
c001e968:	c2 04 00             	ret    0x4
c001e96b:	90                   	nop

c001e96c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001e96c:	83 ec 1c             	sub    esp,0x1c
c001e96f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e973:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001e977:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e97b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001e980:	88 c8                	mov    al,cl
c001e982:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e986:	88 d0                	mov    al,dl
c001e988:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e98c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e990:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e996:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e99a:	83 c2 2a             	add    edx,0x2a
c001e99d:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e9a1:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c001e9a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9a9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e9af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9b3:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e9b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e9ba:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c001e9bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9c3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e9c9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e9cd:	83 c0 01             	add    eax,0x1
c001e9d0:	88 c1                	mov    cl,al
c001e9d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9d6:	83 c2 2a             	add    edx,0x2a
c001e9d9:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001e9dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9e1:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e9e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9eb:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e9ee:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e9f2:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001e9f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9fa:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001ea00:	8d 50 01             	lea    edx,[eax+0x1]
c001ea03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea07:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001ea0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea11:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001ea17:	3d 00 02 00 00       	cmp    eax,0x200
c001ea1c:	75 12                	jne    c001ea30 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c001ea1e:	83 ec 0c             	sub    esp,0xc
c001ea21:	68 07 2d 03 c0       	push   0xc0032d07
c001ea26:	e8 d7 1c 00 00       	call   c0020702 <KePanic(char const*)>
c001ea2b:	83 c4 10             	add    esp,0x10
c001ea2e:	66 90                	xchg   ax,ax
c001ea30:	90                   	nop
c001ea31:	83 c4 1c             	add    esp,0x1c
c001ea34:	c3                   	ret    
c001ea35:	90                   	nop
c001ea36:	66 90                	xchg   ax,ax

c001ea38 <ACPI::setScreenBrightnessLevel(void*, int)>:
c001ea38:	b8 00 00 00 00       	mov    eax,0x0
c001ea3d:	c3                   	ret    
c001ea3e:	66 90                	xchg   ax,ax

c001ea40 <ACPI::detectPCI()>:
c001ea40:	53                   	push   ebx
c001ea41:	83 ec 28             	sub    esp,0x28
c001ea44:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ea49:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c001ea4e:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001ea53:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001ea59:	83 e0 04             	and    eax,0x4
c001ea5c:	0f b6 c0             	movzx  eax,al
c001ea5f:	85 c0                	test   eax,eax
c001ea61:	74 2d                	je     c001ea90 <ACPI::detectPCI()+0x50>
c001ea63:	a1 28 06 04 c0       	mov    eax,ds:0xc0040628
c001ea68:	83 ec 08             	sub    esp,0x8
c001ea6b:	68 24 2d 03 c0       	push   0xc0032d24
c001ea70:	50                   	push   eax
c001ea71:	e8 6e f8 ff ff       	call   c001e2e4 <findDataTable(unsigned char*, char*)>
c001ea76:	83 c4 10             	add    esp,0x10
c001ea79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ea7d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001ea82:	74 0c                	je     c001ea90 <ACPI::detectPCI()+0x50>
c001ea84:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001ea89:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001ea8e:	66 90                	xchg   ax,ax
c001ea90:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c001ea98:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ea9c:	8a 00                	mov    al,BYTE PTR [eax]
c001ea9e:	0f b6 c0             	movzx  eax,al
c001eaa1:	83 f8 01             	cmp    eax,0x1
c001eaa4:	75 0e                	jne    c001eab4 <ACPI::detectPCI()+0x74>
c001eaa6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001eaab:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001eab0:	eb 2e                	jmp    c001eae0 <ACPI::detectPCI()+0xa0>
c001eab2:	66 90                	xchg   ax,ax
c001eab4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eab8:	8a 00                	mov    al,BYTE PTR [eax]
c001eaba:	0f b6 c0             	movzx  eax,al
c001eabd:	83 f8 02             	cmp    eax,0x2
c001eac0:	75 1e                	jne    c001eae0 <ACPI::detectPCI()+0xa0>
c001eac2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001eac7:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001eacc:	85 c0                	test   eax,eax
c001eace:	74 10                	je     c001eae0 <ACPI::detectPCI()+0xa0>
c001ead0:	83 ec 0c             	sub    esp,0xc
c001ead3:	68 b0 2e 03 c0       	push   0xc0032eb0
c001ead8:	e8 25 1c 00 00       	call   c0020702 <KePanic(char const*)>
c001eadd:	83 c4 10             	add    esp,0x10
c001eae0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001eae4:	83 f0 01             	xor    eax,0x1
c001eae7:	0f b6 c0             	movzx  eax,al
c001eaea:	85 c0                	test   eax,eax
c001eaec:	74 46                	je     c001eb34 <ACPI::detectPCI()+0xf4>
c001eaee:	e8 3d 16 fe ff       	call   c0000130 <manualPCIProbe>
c001eaf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001eaf7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001eafc:	75 0e                	jne    c001eb0c <ACPI::detectPCI()+0xcc>
c001eafe:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001eb03:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001eb08:	eb 2a                	jmp    c001eb34 <ACPI::detectPCI()+0xf4>
c001eb0a:	66 90                	xchg   ax,ax
c001eb0c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c001eb11:	75 21                	jne    c001eb34 <ACPI::detectPCI()+0xf4>
c001eb13:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001eb18:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001eb1d:	85 c0                	test   eax,eax
c001eb1f:	74 13                	je     c001eb34 <ACPI::detectPCI()+0xf4>
c001eb21:	83 ec 0c             	sub    esp,0xc
c001eb24:	68 b0 2e 03 c0       	push   0xc0032eb0
c001eb29:	e8 d4 1b 00 00       	call   c0020702 <KePanic(char const*)>
c001eb2e:	83 c4 10             	add    esp,0x10
c001eb31:	8d 76 00             	lea    esi,[esi+0x0]
c001eb34:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001eb39:	85 c0                	test   eax,eax
c001eb3b:	0f 84 87 00 00 00    	je     c001ebc8 <ACPI::detectPCI()+0x188>
c001eb41:	83 ec 0c             	sub    esp,0xc
c001eb44:	68 29 2d 03 c0       	push   0xc0032d29
c001eb49:	e8 4f 12 00 00       	call   c001fd9d <KeSetBootMessage(char const*)>
c001eb4e:	83 c4 10             	add    esp,0x10
c001eb51:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001eb59:	83 ec 0c             	sub    esp,0xc
c001eb5c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001eb60:	e8 23 7b ff ff       	call   c0016688 <malloc>
c001eb65:	83 c4 10             	add    esp,0x10
c001eb68:	89 c3                	mov    ebx,eax
c001eb6a:	83 ec 0c             	sub    esp,0xc
c001eb6d:	53                   	push   ebx
c001eb6e:	e8 13 ba 00 00       	call   c002a586 <PCI::PCI()>
c001eb73:	83 c4 10             	add    esp,0x10
c001eb76:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001eb7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001eb7e:	83 ec 08             	sub    esp,0x8
c001eb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001eb85:	50                   	push   eax
c001eb86:	e8 7f ca ff ff       	call   c001b60a <Device::addChild(Device*)>
c001eb8b:	83 c4 10             	add    esp,0x10
c001eb8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eb92:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb94:	83 c0 08             	add    eax,0x8
c001eb97:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb99:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c001eb9e:	85 d2                	test   edx,edx
c001eba0:	74 0a                	je     c001ebac <ACPI::detectPCI()+0x16c>
c001eba2:	ba 01 00 00 00       	mov    edx,0x1
c001eba7:	eb 0b                	jmp    c001ebb4 <ACPI::detectPCI()+0x174>
c001eba9:	8d 76 00             	lea    esi,[esi+0x0]
c001ebac:	ba 02 00 00 00       	mov    edx,0x2
c001ebb1:	8d 76 00             	lea    esi,[esi+0x0]
c001ebb4:	6a 00                	push   0x0
c001ebb6:	6a 00                	push   0x0
c001ebb8:	52                   	push   edx
c001ebb9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ebbd:	ff d0                	call   eax
c001ebbf:	83 c4 10             	add    esp,0x10
c001ebc2:	e9 91 00 00 00       	jmp    c001ec58 <ACPI::detectPCI()+0x218>
c001ebc7:	90                   	nop
c001ebc8:	83 ec 0c             	sub    esp,0xc
c001ebcb:	68 41 2d 03 c0       	push   0xc0032d41
c001ebd0:	e8 c8 11 00 00       	call   c001fd9d <KeSetBootMessage(char const*)>
c001ebd5:	83 c4 10             	add    esp,0x10
c001ebd8:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c001ebdf:	83 ec 0c             	sub    esp,0xc
c001ebe2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ebe6:	e8 9d 7a ff ff       	call   c0016688 <malloc>
c001ebeb:	83 c4 10             	add    esp,0x10
c001ebee:	89 c3                	mov    ebx,eax
c001ebf0:	83 ec 0c             	sub    esp,0xc
c001ebf3:	53                   	push   ebx
c001ebf4:	e8 95 c5 00 00       	call   c002b18e <IDE::IDE()>
c001ebf9:	83 c4 10             	add    esp,0x10
c001ebfc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ec00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ec04:	83 ec 08             	sub    esp,0x8
c001ec07:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ec0b:	50                   	push   eax
c001ec0c:	e8 f9 c9 ff ff       	call   c001b60a <Device::addChild(Device*)>
c001ec11:	83 c4 10             	add    esp,0x10
c001ec14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec18:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c001ec22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec26:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c001ec2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec33:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c001ec3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec40:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec42:	83 c0 08             	add    eax,0x8
c001ec45:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec47:	6a 00                	push   0x0
c001ec49:	6a 00                	push   0x0
c001ec4b:	6a 00                	push   0x0
c001ec4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ec51:	ff d0                	call   eax
c001ec53:	83 c4 10             	add    esp,0x10
c001ec56:	66 90                	xchg   ax,ax
c001ec58:	90                   	nop
c001ec59:	83 c4 28             	add    esp,0x28
c001ec5c:	5b                   	pop    ebx
c001ec5d:	c3                   	ret    
c001ec5e:	66 90                	xchg   ax,ax

c001ec60 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001ec60:	83 ec 1c             	sub    esp,0x1c
c001ec63:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ec67:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001ec6a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ec6e:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001ec73:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001ec78:	83 ec 08             	sub    esp,0x8
c001ec7b:	52                   	push   edx
c001ec7c:	50                   	push   eax
c001ec7d:	e8 52 70 ff ff       	call   c0015cd4 <Computer::readCMOS(unsigned char)>
c001ec82:	83 c4 10             	add    esp,0x10
c001ec85:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001ec89:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001ec8e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001ec93:	83 ec 04             	sub    esp,0x4
c001ec96:	6a 01                	push   0x1
c001ec98:	52                   	push   edx
c001ec99:	50                   	push   eax
c001ec9a:	e8 4d 71 ff ff       	call   c0015dec <Computer::writeCMOS(unsigned char, unsigned char)>
c001ec9f:	83 c4 10             	add    esp,0x10
c001eca2:	90                   	nop
c001eca3:	83 c4 1c             	add    esp,0x1c
c001eca6:	c3                   	ret    
c001eca7:	90                   	nop

c001eca8 <ACPI::sleep()>:
c001eca8:	83 ec 0c             	sub    esp,0xc
c001ecab:	a1 00 04 04 c0       	mov    eax,ds:0xc0040400
c001ecb0:	85 c0                	test   eax,eax
c001ecb2:	74 08                	je     c001ecbc <ACPI::sleep()+0x14>
c001ecb4:	a1 00 04 04 c0       	mov    eax,ds:0xc0040400
c001ecb9:	ff d0                	call   eax
c001ecbb:	90                   	nop
c001ecbc:	90                   	nop
c001ecbd:	83 c4 0c             	add    esp,0xc
c001ecc0:	c3                   	ret    
c001ecc1:	90                   	nop
c001ecc2:	66 90                	xchg   ax,ax

c001ecc4 <ACPI::open(int, int, void*)>:
c001ecc4:	55                   	push   ebp
c001ecc5:	89 e5                	mov    ebp,esp
c001ecc7:	53                   	push   ebx
c001ecc8:	81 ec 74 01 00 00    	sub    esp,0x174
c001ecce:	83 ec 0c             	sub    esp,0xc
c001ecd1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecd4:	e8 67 fd ff ff       	call   c001ea40 <ACPI::detectPCI()>
c001ecd9:	83 c4 10             	add    esp,0x10
c001ecdc:	83 ec 0c             	sub    esp,0xc
c001ecdf:	68 d8 2e 03 c0       	push   0xc0032ed8
c001ece4:	e8 b4 10 00 00       	call   c001fd9d <KeSetBootMessage(char const*)>
c001ece9:	83 c4 10             	add    esp,0x10
c001ecec:	b8 4c 05 00 00       	mov    eax,0x54c
c001ecf1:	8a 00                	mov    al,BYTE PTR [eax]
c001ecf3:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c001ecf6:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c001ecfa:	83 f8 01             	cmp    eax,0x1
c001ecfd:	75 15                	jne    c001ed14 <ACPI::open(int, int, void*)+0x50>
c001ecff:	83 ec 0c             	sub    esp,0xc
c001ed02:	68 56 2d 03 c0       	push   0xc0032d56
c001ed07:	e8 3a 55 00 00       	call   c0024246 <Thr::loadKernelSymbolTable(char const*)>
c001ed0c:	83 c4 10             	add    esp,0x10
c001ed0f:	eb 33                	jmp    c001ed44 <ACPI::open(int, int, void*)+0x80>
c001ed11:	8d 76 00             	lea    esi,[esi+0x0]
c001ed14:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c001ed18:	3d bb 00 00 00       	cmp    eax,0xbb
c001ed1d:	75 15                	jne    c001ed34 <ACPI::open(int, int, void*)+0x70>
c001ed1f:	83 ec 0c             	sub    esp,0xc
c001ed22:	68 74 2d 03 c0       	push   0xc0032d74
c001ed27:	e8 1a 55 00 00       	call   c0024246 <Thr::loadKernelSymbolTable(char const*)>
c001ed2c:	83 c4 10             	add    esp,0x10
c001ed2f:	eb 13                	jmp    c001ed44 <ACPI::open(int, int, void*)+0x80>
c001ed31:	8d 76 00             	lea    esi,[esi+0x0]
c001ed34:	83 ec 0c             	sub    esp,0xc
c001ed37:	68 92 2d 03 c0       	push   0xc0032d92
c001ed3c:	e8 c1 19 00 00       	call   c0020702 <KePanic(char const*)>
c001ed41:	83 c4 10             	add    esp,0x10
c001ed44:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001ed48:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c001ed4f:	83 ec 0c             	sub    esp,0xc
c001ed52:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c001ed55:	e8 2e 79 ff ff       	call   c0016688 <malloc>
c001ed5a:	83 c4 10             	add    esp,0x10
c001ed5d:	89 c3                	mov    ebx,eax
c001ed5f:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c001ed64:	83 ec 04             	sub    esp,0x4
c001ed67:	50                   	push   eax
c001ed68:	68 ac 2d 03 c0       	push   0xc0032dac
c001ed6d:	53                   	push   ebx
c001ed6e:	e8 63 b9 ff ff       	call   c001a6d6 <File::File(char const*, Process*)>
c001ed73:	83 c4 10             	add    esp,0x10
c001ed76:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001ed79:	83 ec 08             	sub    esp,0x8
c001ed7c:	6a 01                	push   0x1
c001ed7e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001ed81:	e8 6e b9 ff ff       	call   c001a6f4 <File::open(FileOpenMode)>
c001ed86:	83 c4 10             	add    esp,0x10
c001ed89:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ed8c:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c001ed90:	75 12                	jne    c001eda4 <ACPI::open(int, int, void*)+0xe0>
c001ed92:	83 ec 0c             	sub    esp,0xc
c001ed95:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001ed98:	e8 b5 b9 ff ff       	call   c001a752 <File::close()>
c001ed9d:	83 c4 10             	add    esp,0x10
c001eda0:	eb 06                	jmp    c001eda8 <ACPI::open(int, int, void*)+0xe4>
c001eda2:	66 90                	xchg   ax,ax
c001eda4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001eda8:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c001edac:	74 16                	je     c001edc4 <ACPI::open(int, int, void*)+0x100>
c001edae:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001edb1:	8b 00                	mov    eax,DWORD PTR [eax]
c001edb3:	83 c0 08             	add    eax,0x8
c001edb6:	8b 00                	mov    eax,DWORD PTR [eax]
c001edb8:	83 ec 0c             	sub    esp,0xc
c001edbb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001edbe:	ff d0                	call   eax
c001edc0:	83 c4 10             	add    esp,0x10
c001edc3:	90                   	nop
c001edc4:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001edc7:	83 f0 01             	xor    eax,0x1
c001edca:	0f b6 c0             	movzx  eax,al
c001edcd:	85 c0                	test   eax,eax
c001edcf:	74 3b                	je     c001ee0c <ACPI::open(int, int, void*)+0x148>
c001edd1:	83 ec 0c             	sub    esp,0xc
c001edd4:	68 ca 2d 03 c0       	push   0xc0032dca
c001edd9:	e8 bf 0f 00 00       	call   c001fd9d <KeSetBootMessage(char const*)>
c001edde:	83 c4 10             	add    esp,0x10
c001ede1:	83 ec 04             	sub    esp,0x4
c001ede4:	6a 0c                	push   0xc
c001ede6:	68 e5 2d 03 c0       	push   0xc0032de5
c001edeb:	68 f6 2d 03 c0       	push   0xc0032df6
c001edf0:	e8 94 46 00 00       	call   c0023489 <Reg::readIntWithDefault(char*, char*, int)>
c001edf5:	83 c4 10             	add    esp,0x10
c001edf8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001edfb:	83 ec 0c             	sub    esp,0xc
c001edfe:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001ee01:	e8 c8 95 ff ff       	call   c00183ce <Virt::setupPageSwapping(int)>
c001ee06:	83 c4 10             	add    esp,0x10
c001ee09:	8d 76 00             	lea    esi,[esi+0x0]
c001ee0c:	83 ec 0c             	sub    esp,0xc
c001ee0f:	68 e4 17 03 c0       	push   0xc00317e4
c001ee14:	e8 84 0f 00 00       	call   c001fd9d <KeSetBootMessage(char const*)>
c001ee19:	83 c4 10             	add    esp,0x10
c001ee1c:	8d 45 b8             	lea    eax,[ebp-0x48]
c001ee1f:	83 ec 08             	sub    esp,0x8
c001ee22:	6a 13                	push   0x13
c001ee24:	50                   	push   eax
c001ee25:	e8 0e cb ff ff       	call   c001b938 <getDevicesOfType(DeviceType)>
c001ee2a:	83 c4 0c             	add    esp,0xc
c001ee2d:	8d 76 00             	lea    esi,[esi+0x0]
c001ee30:	83 ec 0c             	sub    esp,0xc
c001ee33:	8d 45 b8             	lea    eax,[ebp-0x48]
c001ee36:	50                   	push   eax
c001ee37:	e8 54 08 01 00       	call   c002f690 <LinkedList<Device>::isEmpty()>
c001ee3c:	83 c4 10             	add    esp,0x10
c001ee3f:	83 f0 01             	xor    eax,0x1
c001ee42:	0f b6 c0             	movzx  eax,al
c001ee45:	85 c0                	test   eax,eax
c001ee47:	0f 84 1f 01 00 00    	je     c001ef6c <ACPI::open(int, int, void*)+0x2a8>
c001ee4d:	83 ec 0c             	sub    esp,0xc
c001ee50:	8d 45 b8             	lea    eax,[ebp-0x48]
c001ee53:	50                   	push   eax
c001ee54:	e8 53 08 01 00       	call   c002f6ac <LinkedList<Device>::getFirstElement()>
c001ee59:	83 c4 10             	add    esp,0x10
c001ee5c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001ee5f:	83 ec 0c             	sub    esp,0xc
c001ee62:	8d 45 b8             	lea    eax,[ebp-0x48]
c001ee65:	50                   	push   eax
c001ee66:	e8 49 08 01 00       	call   c002f6b4 <LinkedList<Device>::removeFirst()>
c001ee6b:	83 c4 10             	add    esp,0x10
c001ee6e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001ee71:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001ee74:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c001ee77:	b8 24 00 00 00       	mov    eax,0x24
c001ee7c:	83 e0 fc             	and    eax,0xfffffffc
c001ee7f:	89 c3                	mov    ebx,eax
c001ee81:	b8 00 00 00 00       	mov    eax,0x0
c001ee86:	66 90                	xchg   ax,ax
c001ee88:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c001ee8f:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c001ee96:	83 c0 04             	add    eax,0x4
c001ee99:	39 d8                	cmp    eax,ebx
c001ee9b:	72 eb                	jb     c001ee88 <ACPI::open(int, int, void*)+0x1c4>
c001ee9d:	83 ec 08             	sub    esp,0x8
c001eea0:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c001eea6:	50                   	push   eax
c001eea7:	83 ec 24             	sub    esp,0x24
c001eeaa:	89 e1                	mov    ecx,esp
c001eeac:	b8 24 00 00 00       	mov    eax,0x24
c001eeb1:	83 e0 fc             	and    eax,0xfffffffc
c001eeb4:	89 c3                	mov    ebx,eax
c001eeb6:	b8 00 00 00 00       	mov    eax,0x0
c001eebb:	90                   	nop
c001eebc:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c001eec3:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c001eec6:	83 c0 04             	add    eax,0x4
c001eec9:	39 d8                	cmp    eax,ebx
c001eecb:	72 ef                	jb     c001eebc <ACPI::open(int, int, void*)+0x1f8>
c001eecd:	e8 9c bb 00 00       	call   c002aa6e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001eed2:	83 c4 30             	add    esp,0x30
c001eed5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001eed8:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c001eedc:	0f 84 4e ff ff ff    	je     c001ee30 <ACPI::open(int, int, void*)+0x16c>
c001eee2:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c001eee9:	83 ec 0c             	sub    esp,0xc
c001eeec:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c001eeef:	e8 94 77 ff ff       	call   c0016688 <malloc>
c001eef4:	83 c4 10             	add    esp,0x10
c001eef7:	89 c3                	mov    ebx,eax
c001eef9:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c001eefe:	83 ec 04             	sub    esp,0x4
c001ef01:	50                   	push   eax
c001ef02:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c001ef05:	53                   	push   ebx
c001ef06:	e8 cb b7 ff ff       	call   c001a6d6 <File::File(char const*, Process*)>
c001ef0b:	83 c4 10             	add    esp,0x10
c001ef0e:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c001ef11:	83 ec 0c             	sub    esp,0xc
c001ef14:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c001ef17:	e8 9c ba ff ff       	call   c001a9b8 <File::exists()>
c001ef1c:	83 c4 10             	add    esp,0x10
c001ef1f:	0f b6 c0             	movzx  eax,al
c001ef22:	85 c0                	test   eax,eax
c001ef24:	74 22                	je     c001ef48 <ACPI::open(int, int, void*)+0x284>
c001ef26:	83 ec 08             	sub    esp,0x8
c001ef29:	6a 01                	push   0x1
c001ef2b:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c001ef2e:	e8 95 5d 00 00       	call   c0024cc8 <Thr::loadDLL(char const*, bool)>
c001ef33:	83 c4 10             	add    esp,0x10
c001ef36:	83 ec 08             	sub    esp,0x8
c001ef39:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001ef3c:	50                   	push   eax
c001ef3d:	e8 e7 5f 00 00       	call   c0024f29 <Thr::executeDLL(unsigned long, void*)>
c001ef42:	83 c4 10             	add    esp,0x10
c001ef45:	8d 76 00             	lea    esi,[esi+0x0]
c001ef48:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c001ef4c:	0f 84 de fe ff ff    	je     c001ee30 <ACPI::open(int, int, void*)+0x16c>
c001ef52:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ef55:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef57:	83 c0 08             	add    eax,0x8
c001ef5a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef5c:	83 ec 0c             	sub    esp,0xc
c001ef5f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c001ef62:	ff d0                	call   eax
c001ef64:	83 c4 10             	add    esp,0x10
c001ef67:	e9 c4 fe ff ff       	jmp    c001ee30 <ACPI::open(int, int, void*)+0x16c>
c001ef6c:	83 ec 0c             	sub    esp,0xc
c001ef6f:	8d 45 b8             	lea    eax,[ebp-0x48]
c001ef72:	50                   	push   eax
c001ef73:	e8 14 07 01 00       	call   c002f68c <LinkedList<Device>::~LinkedList()>
c001ef78:	83 c4 10             	add    esp,0x10
c001ef7b:	8b 1d bc b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9bc
c001ef81:	83 ec 08             	sub    esp,0x8
c001ef84:	6a 01                	push   0x1
c001ef86:	68 fd 2d 03 c0       	push   0xc0032dfd
c001ef8b:	e8 38 5d 00 00       	call   c0024cc8 <Thr::loadDLL(char const*, bool)>
c001ef90:	83 c4 10             	add    esp,0x10
c001ef93:	83 ec 08             	sub    esp,0x8
c001ef96:	53                   	push   ebx
c001ef97:	50                   	push   eax
c001ef98:	e8 8c 5f 00 00       	call   c0024f29 <Thr::executeDLL(unsigned long, void*)>
c001ef9d:	83 c4 10             	add    esp,0x10
c001efa0:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001efa5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001efab:	83 e0 04             	and    eax,0x4
c001efae:	0f b6 c0             	movzx  eax,al
c001efb1:	85 c0                	test   eax,eax
c001efb3:	0f 84 e3 00 00 00    	je     c001f09c <ACPI::open(int, int, void*)+0x3d8>
c001efb9:	83 ec 0c             	sub    esp,0xc
c001efbc:	68 1a 2e 03 c0       	push   0xc0032e1a
c001efc1:	e8 d7 0d 00 00       	call   c001fd9d <KeSetBootMessage(char const*)>
c001efc6:	83 c4 10             	add    esp,0x10
c001efc9:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c001efd0:	83 ec 0c             	sub    esp,0xc
c001efd3:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c001efd6:	e8 ad 76 ff ff       	call   c0016688 <malloc>
c001efdb:	83 c4 10             	add    esp,0x10
c001efde:	89 c3                	mov    ebx,eax
c001efe0:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c001efe5:	83 ec 04             	sub    esp,0x4
c001efe8:	50                   	push   eax
c001efe9:	68 37 2e 03 c0       	push   0xc0032e37
c001efee:	53                   	push   ebx
c001efef:	e8 e2 b6 ff ff       	call   c001a6d6 <File::File(char const*, Process*)>
c001eff4:	83 c4 10             	add    esp,0x10
c001eff7:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c001effa:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001effe:	74 1c                	je     c001f01c <ACPI::open(int, int, void*)+0x358>
c001f000:	83 ec 0c             	sub    esp,0xc
c001f003:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c001f006:	e8 ad b9 ff ff       	call   c001a9b8 <File::exists()>
c001f00b:	83 c4 10             	add    esp,0x10
c001f00e:	0f b6 c0             	movzx  eax,al
c001f011:	85 c0                	test   eax,eax
c001f013:	74 07                	je     c001f01c <ACPI::open(int, int, void*)+0x358>
c001f015:	b0 01                	mov    al,0x1
c001f017:	eb 07                	jmp    c001f020 <ACPI::open(int, int, void*)+0x35c>
c001f019:	8d 76 00             	lea    esi,[esi+0x0]
c001f01c:	b0 00                	mov    al,0x0
c001f01e:	66 90                	xchg   ax,ax
c001f020:	0f b6 c0             	movzx  eax,al
c001f023:	85 c0                	test   eax,eax
c001f025:	74 21                	je     c001f048 <ACPI::open(int, int, void*)+0x384>
c001f027:	83 ec 08             	sub    esp,0x8
c001f02a:	6a 01                	push   0x1
c001f02c:	68 37 2e 03 c0       	push   0xc0032e37
c001f031:	e8 92 5c 00 00       	call   c0024cc8 <Thr::loadDLL(char const*, bool)>
c001f036:	83 c4 10             	add    esp,0x10
c001f039:	83 ec 08             	sub    esp,0x8
c001f03c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f03f:	50                   	push   eax
c001f040:	e8 e4 5e 00 00       	call   c0024f29 <Thr::executeDLL(unsigned long, void*)>
c001f045:	83 c4 10             	add    esp,0x10
c001f048:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001f04c:	74 1e                	je     c001f06c <ACPI::open(int, int, void*)+0x3a8>
c001f04e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001f052:	74 18                	je     c001f06c <ACPI::open(int, int, void*)+0x3a8>
c001f054:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001f057:	8b 00                	mov    eax,DWORD PTR [eax]
c001f059:	83 c0 08             	add    eax,0x8
c001f05c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f05e:	83 ec 0c             	sub    esp,0xc
c001f061:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c001f064:	ff d0                	call   eax
c001f066:	83 c4 10             	add    esp,0x10
c001f069:	8d 76 00             	lea    esi,[esi+0x0]
c001f06c:	a1 28 06 04 c0       	mov    eax,ds:0xc0040628
c001f071:	83 ec 08             	sub    esp,0x8
c001f074:	68 54 2e 03 c0       	push   0xc0032e54
c001f079:	50                   	push   eax
c001f07a:	e8 65 f2 ff ff       	call   c001e2e4 <findDataTable(unsigned char*, char*)>
c001f07f:	83 c4 10             	add    esp,0x10
c001f082:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001f085:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c001f089:	74 11                	je     c001f09c <ACPI::open(int, int, void*)+0x3d8>
c001f08b:	83 ec 08             	sub    esp,0x8
c001f08e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001f091:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f094:	e8 c7 fb ff ff       	call   c001ec60 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001f099:	83 c4 10             	add    esp,0x10
c001f09c:	b8 00 00 00 00       	mov    eax,0x0
c001f0a1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001f0a4:	c9                   	leave  
c001f0a5:	c3                   	ret    

c001f0a6 <CPU::close(int, int, void*)>:
c001f0a6:	31 c0                	xor    eax,eax
c001f0a8:	c3                   	ret    
c001f0a9:	90                   	nop

c001f0aa <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001f0aa:	60                   	pusha  
c001f0ab:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f0af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f0b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f0b7:	9c                   	pushf  
c001f0b8:	fa                   	cli    
c001f0b9:	0f 09                	wbinvd 
c001f0bb:	0f 30                	wrmsr  
c001f0bd:	9d                   	popf   
c001f0be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f0c2:	89 02                	mov    DWORD PTR [edx],eax
c001f0c4:	61                   	popa   
c001f0c5:	c3                   	ret    

c001f0c6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001f0c6:	60                   	pusha  
c001f0c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f0cb:	9c                   	pushf  
c001f0cc:	fa                   	cli    
c001f0cd:	0f 09                	wbinvd 
c001f0cf:	31 c0                	xor    eax,eax
c001f0d1:	31 d2                	xor    edx,edx
c001f0d3:	0f 32                	rdmsr  
c001f0d5:	9d                   	popf   
c001f0d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f0da:	89 02                	mov    DWORD PTR [edx],eax
c001f0dc:	61                   	popa   
c001f0dd:	c3                   	ret    

c001f0de <CPU::AMD_K6_writeback(int, int, int)>:
c001f0de:	56                   	push   esi
c001f0df:	53                   	push   ebx
c001f0e0:	83 ec 10             	sub    esp,0x10
c001f0e3:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001f0e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f0ec:	75 5d                	jne    c001f14b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001f0ee:	83 f8 08             	cmp    eax,0x8
c001f0f1:	75 09                	jne    c001f0fc <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001f0f3:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001f0f8:	7e 13                	jle    c001f10d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001f0fa:	eb 30                	jmp    c001f12c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001f0fc:	83 f8 06             	cmp    eax,0x6
c001f0ff:	7c 4a                	jl     c001f14b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001f101:	83 f8 07             	cmp    eax,0x7
c001f104:	7e 07                	jle    c001f10d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001f106:	83 f8 09             	cmp    eax,0x9
c001f109:	74 21                	je     c001f12c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001f10b:	eb 3e                	jmp    c001f14b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001f10d:	8b 1d e0 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9e0
c001f113:	89 e6                	mov    esi,esp
c001f115:	56                   	push   esi
c001f116:	68 82 00 00 c0       	push   0xc0000082
c001f11b:	e8 a6 ff ff ff       	call   c001f0c6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001f120:	c1 eb 15             	shr    ebx,0x15
c001f123:	56                   	push   esi
c001f124:	83 e3 7e             	and    ebx,0x7e
c001f127:	6a 00                	push   0x0
c001f129:	53                   	push   ebx
c001f12a:	eb 12                	jmp    c001f13e <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001f12c:	89 e3                	mov    ebx,esp
c001f12e:	53                   	push   ebx
c001f12f:	68 82 00 00 c0       	push   0xc0000082
c001f134:	e8 8d ff ff ff       	call   c001f0c6 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001f139:	53                   	push   ebx
c001f13a:	6a 00                	push   0x0
c001f13c:	6a 00                	push   0x0
c001f13e:	68 82 00 00 c0       	push   0xc0000082
c001f143:	e8 62 ff ff ff       	call   c001f0aa <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001f148:	83 c4 18             	add    esp,0x18
c001f14b:	83 c4 10             	add    esp,0x10
c001f14e:	5b                   	pop    ebx
c001f14f:	5e                   	pop    esi
c001f150:	c3                   	ret    
c001f151:	90                   	nop

c001f152 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001f152:	55                   	push   ebp
c001f153:	57                   	push   edi
c001f154:	56                   	push   esi
c001f155:	53                   	push   ebx
c001f156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f15a:	39 05 98 45 03 c0    	cmp    DWORD PTR ds:0xc0034598,eax
c001f160:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f164:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f168:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001f16c:	75 23                	jne    c001f191 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001f16e:	a1 8c 08 04 c0       	mov    eax,ds:0xc004088c
c001f173:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f177:	89 06                	mov    DWORD PTR [esi],eax
c001f179:	a1 88 08 04 c0       	mov    eax,ds:0xc0040888
c001f17e:	89 07                	mov    DWORD PTR [edi],eax
c001f180:	a1 84 08 04 c0       	mov    eax,ds:0xc0040884
c001f185:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001f188:	a1 80 08 04 c0       	mov    eax,ds:0xc0040880
c001f18d:	89 02                	mov    DWORD PTR [edx],eax
c001f18f:	eb 3f                	jmp    c001f1d0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001f191:	31 c9                	xor    ecx,ecx
c001f193:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f197:	0f a2                	cpuid  
c001f199:	89 06                	mov    DWORD PTR [esi],eax
c001f19b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f19f:	89 1f                	mov    DWORD PTR [edi],ebx
c001f1a1:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001f1a4:	89 10                	mov    DWORD PTR [eax],edx
c001f1a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f1aa:	a3 98 45 03 c0       	mov    ds:0xc0034598,eax
c001f1af:	8b 06                	mov    eax,DWORD PTR [esi]
c001f1b1:	a3 8c 08 04 c0       	mov    ds:0xc004088c,eax
c001f1b6:	8b 07                	mov    eax,DWORD PTR [edi]
c001f1b8:	a3 88 08 04 c0       	mov    ds:0xc0040888,eax
c001f1bd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f1c0:	a3 84 08 04 c0       	mov    ds:0xc0040884,eax
c001f1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f1c9:	8b 00                	mov    eax,DWORD PTR [eax]
c001f1cb:	a3 80 08 04 c0       	mov    ds:0xc0040880,eax
c001f1d0:	5b                   	pop    ebx
c001f1d1:	5e                   	pop    esi
c001f1d2:	5f                   	pop    edi
c001f1d3:	5d                   	pop    ebp
c001f1d4:	c3                   	ret    
c001f1d5:	90                   	nop

c001f1d6 <CPU::cpuidCheckEDX(unsigned int)>:
c001f1d6:	83 ec 10             	sub    esp,0x10
c001f1d9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1dd:	50                   	push   eax
c001f1de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1e2:	50                   	push   eax
c001f1e3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1e7:	50                   	push   eax
c001f1e8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1ec:	50                   	push   eax
c001f1ed:	6a 01                	push   0x1
c001f1ef:	e8 5e ff ff ff       	call   c001f152 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f1f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f1f8:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001f1fc:	0f 95 c0             	setne  al
c001f1ff:	83 c4 24             	add    esp,0x24
c001f202:	c3                   	ret    
c001f203:	90                   	nop

c001f204 <CPU::cpuidCheckECX(unsigned int)>:
c001f204:	83 ec 10             	sub    esp,0x10
c001f207:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f20b:	50                   	push   eax
c001f20c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f210:	50                   	push   eax
c001f211:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f215:	50                   	push   eax
c001f216:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f21a:	50                   	push   eax
c001f21b:	6a 01                	push   0x1
c001f21d:	e8 30 ff ff ff       	call   c001f152 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f222:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f226:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001f22a:	0f 95 c0             	setne  al
c001f22d:	83 c4 24             	add    esp,0x24
c001f230:	c3                   	ret    
c001f231:	90                   	nop

c001f232 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001f232:	83 ec 10             	sub    esp,0x10
c001f235:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f239:	50                   	push   eax
c001f23a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f23e:	50                   	push   eax
c001f23f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f243:	50                   	push   eax
c001f244:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f248:	50                   	push   eax
c001f249:	6a 07                	push   0x7
c001f24b:	e8 02 ff ff ff       	call   c001f152 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f250:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f254:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001f258:	0f 95 c0             	setne  al
c001f25b:	83 c4 24             	add    esp,0x24
c001f25e:	c3                   	ret    
c001f25f:	90                   	nop

c001f260 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001f260:	83 ec 10             	sub    esp,0x10
c001f263:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f267:	50                   	push   eax
c001f268:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f26c:	50                   	push   eax
c001f26d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f271:	50                   	push   eax
c001f272:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f276:	50                   	push   eax
c001f277:	6a 07                	push   0x7
c001f279:	e8 d4 fe ff ff       	call   c001f152 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f27e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f282:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001f286:	0f 95 c0             	setne  al
c001f289:	83 c4 24             	add    esp,0x24
c001f28c:	c3                   	ret    
c001f28d:	90                   	nop

c001f28e <CPU::CPU()>:
c001f28e:	83 ec 0c             	sub    esp,0xc
c001f291:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f295:	83 ec 08             	sub    esp,0x8
c001f298:	68 15 30 03 c0       	push   0xc0033015
c001f29d:	50                   	push   eax
c001f29e:	e8 c9 c4 ff ff       	call   c001b76c <Device::Device(char const*)>
c001f2a3:	83 c4 10             	add    esp,0x10
c001f2a6:	ba a8 30 03 c0       	mov    edx,0xc00330a8
c001f2ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2af:	89 10                	mov    DWORD PTR [eax],edx
c001f2b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2b5:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001f2bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2c3:	05 78 01 00 00       	add    eax,0x178
c001f2c8:	83 ec 0c             	sub    esp,0xc
c001f2cb:	50                   	push   eax
c001f2cc:	e8 e5 6b ff ff       	call   c0015eb6 <GDT::GDT()>
c001f2d1:	83 c4 10             	add    esp,0x10
c001f2d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2d8:	05 7c 09 00 00       	add    eax,0x97c
c001f2dd:	83 ec 0c             	sub    esp,0xc
c001f2e0:	50                   	push   eax
c001f2e1:	e8 1e 6e ff ff       	call   c0016104 <IDT::IDT()>
c001f2e6:	83 c4 10             	add    esp,0x10
c001f2e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2ed:	05 7c 11 00 00       	add    eax,0x117c
c001f2f2:	83 ec 0c             	sub    esp,0xc
c001f2f5:	50                   	push   eax
c001f2f6:	e8 e5 87 ff ff       	call   c0017ae0 <TSS::TSS()>
c001f2fb:	83 c4 10             	add    esp,0x10
c001f2fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f302:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001f309:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f30d:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001f317:	90                   	nop
c001f318:	83 c4 0c             	add    esp,0xc
c001f31b:	c3                   	ret    

c001f31c <CPU::displayFeatures()>:
c001f31c:	c3                   	ret    
c001f31d:	90                   	nop

c001f31e <CPU::detectFeatures()>:
c001f31e:	55                   	push   ebp
c001f31f:	57                   	push   edi
c001f320:	56                   	push   esi
c001f321:	53                   	push   ebx
c001f322:	83 ec 30             	sub    esp,0x30
c001f325:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f329:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001f333:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001f339:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c001f340:	6a 0d                	push   0xd
c001f342:	6a 00                	push   0x0
c001f344:	55                   	push   ebp
c001f345:	e8 a6 11 fe ff       	call   c00004f0 <memset>
c001f34a:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001f34f:	83 c4 10             	add    esp,0x10
c001f352:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001f359:	0f 84 db 05 00 00    	je     c001f93a <CPU::detectFeatures()+0x61c>
c001f35f:	83 ec 0c             	sub    esp,0xc
c001f362:	89 ef                	mov    edi,ebp
c001f364:	6a 10                	push   0x10
c001f366:	e8 6b fe ff ff       	call   c001f1d6 <CPU::cpuidCheckEDX(unsigned int)>
c001f36b:	83 e0 01             	and    eax,0x1
c001f36e:	8d 14 00             	lea    edx,[eax+eax*1]
c001f371:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f377:	83 e0 fd             	and    eax,0xfffffffd
c001f37a:	09 d0                	or     eax,edx
c001f37c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f382:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001f389:	e8 48 fe ff ff       	call   c001f1d6 <CPU::cpuidCheckEDX(unsigned int)>
c001f38e:	83 e0 01             	and    eax,0x1
c001f391:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f398:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f39e:	83 e0 fb             	and    eax,0xfffffffb
c001f3a1:	09 d0                	or     eax,edx
c001f3a3:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f3a9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001f3b0:	e8 21 fe ff ff       	call   c001f1d6 <CPU::cpuidCheckEDX(unsigned int)>
c001f3b5:	83 e0 01             	and    eax,0x1
c001f3b8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f3bf:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f3c5:	83 e0 f7             	and    eax,0xfffffff7
c001f3c8:	09 d0                	or     eax,edx
c001f3ca:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f3d0:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001f3d7:	e8 fa fd ff ff       	call   c001f1d6 <CPU::cpuidCheckEDX(unsigned int)>
c001f3dc:	83 e0 01             	and    eax,0x1
c001f3df:	c1 e0 04             	shl    eax,0x4
c001f3e2:	89 c2                	mov    edx,eax
c001f3e4:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f3ea:	83 e0 ef             	and    eax,0xffffffef
c001f3ed:	09 d0                	or     eax,edx
c001f3ef:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f3f5:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001f3fc:	e8 d5 fd ff ff       	call   c001f1d6 <CPU::cpuidCheckEDX(unsigned int)>
c001f401:	83 e0 01             	and    eax,0x1
c001f404:	c1 e0 05             	shl    eax,0x5
c001f407:	89 c2                	mov    edx,eax
c001f409:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f40f:	83 e0 df             	and    eax,0xffffffdf
c001f412:	09 d0                	or     eax,edx
c001f414:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f41a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001f421:	e8 b0 fd ff ff       	call   c001f1d6 <CPU::cpuidCheckEDX(unsigned int)>
c001f426:	83 e0 01             	and    eax,0x1
c001f429:	8d 14 00             	lea    edx,[eax+eax*1]
c001f42c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f432:	83 e0 fd             	and    eax,0xfffffffd
c001f435:	09 d0                	or     eax,edx
c001f437:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f43d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001f444:	e8 8d fd ff ff       	call   c001f1d6 <CPU::cpuidCheckEDX(unsigned int)>
c001f449:	83 e0 01             	and    eax,0x1
c001f44c:	c1 e0 06             	shl    eax,0x6
c001f44f:	89 c2                	mov    edx,eax
c001f451:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f457:	83 e0 bf             	and    eax,0xffffffbf
c001f45a:	09 d0                	or     eax,edx
c001f45c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f462:	58                   	pop    eax
c001f463:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f467:	50                   	push   eax
c001f468:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f46c:	50                   	push   eax
c001f46d:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f471:	56                   	push   esi
c001f472:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f476:	50                   	push   eax
c001f477:	6a 00                	push   0x0
c001f479:	e8 d4 fc ff ff       	call   c001f152 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f47e:	b8 04 00 00 00       	mov    eax,0x4
c001f483:	89 c1                	mov    ecx,eax
c001f485:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f487:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001f48d:	89 c1                	mov    ecx,eax
c001f48f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001f493:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f495:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001f49b:	89 c1                	mov    ecx,eax
c001f49d:	8d 74 24 38          	lea    esi,[esp+0x38]
c001f4a1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f4a3:	83 c4 18             	add    esp,0x18
c001f4a6:	68 24 2f 03 c0       	push   0xc0032f24
c001f4ab:	55                   	push   ebp
c001f4ac:	e8 cf 12 fe ff       	call   c0000780 <strcmp>
c001f4b1:	83 c4 10             	add    esp,0x10
c001f4b4:	85 c0                	test   eax,eax
c001f4b6:	75 0f                	jne    c001f4c7 <CPU::detectFeatures()+0x1a9>
c001f4b8:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001f4c2:	e9 22 02 00 00       	jmp    c001f6e9 <CPU::detectFeatures()+0x3cb>
c001f4c7:	50                   	push   eax
c001f4c8:	50                   	push   eax
c001f4c9:	68 31 2f 03 c0       	push   0xc0032f31
c001f4ce:	55                   	push   ebp
c001f4cf:	e8 ac 12 fe ff       	call   c0000780 <strcmp>
c001f4d4:	83 c4 10             	add    esp,0x10
c001f4d7:	85 c0                	test   eax,eax
c001f4d9:	74 dd                	je     c001f4b8 <CPU::detectFeatures()+0x19a>
c001f4db:	50                   	push   eax
c001f4dc:	50                   	push   eax
c001f4dd:	68 3e 2f 03 c0       	push   0xc0032f3e
c001f4e2:	55                   	push   ebp
c001f4e3:	e8 98 12 fe ff       	call   c0000780 <strcmp>
c001f4e8:	83 c4 10             	add    esp,0x10
c001f4eb:	85 c0                	test   eax,eax
c001f4ed:	74 2a                	je     c001f519 <CPU::detectFeatures()+0x1fb>
c001f4ef:	50                   	push   eax
c001f4f0:	50                   	push   eax
c001f4f1:	68 4b 2f 03 c0       	push   0xc0032f4b
c001f4f6:	55                   	push   ebp
c001f4f7:	e8 84 12 fe ff       	call   c0000780 <strcmp>
c001f4fc:	83 c4 10             	add    esp,0x10
c001f4ff:	85 c0                	test   eax,eax
c001f501:	74 16                	je     c001f519 <CPU::detectFeatures()+0x1fb>
c001f503:	50                   	push   eax
c001f504:	50                   	push   eax
c001f505:	68 58 2f 03 c0       	push   0xc0032f58
c001f50a:	55                   	push   ebp
c001f50b:	e8 70 12 fe ff       	call   c0000780 <strcmp>
c001f510:	83 c4 10             	add    esp,0x10
c001f513:	85 c0                	test   eax,eax
c001f515:	74 48                	je     c001f55f <CPU::detectFeatures()+0x241>
c001f517:	eb 0f                	jmp    c001f528 <CPU::detectFeatures()+0x20a>
c001f519:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001f523:	e9 c1 01 00 00       	jmp    c001f6e9 <CPU::detectFeatures()+0x3cb>
c001f528:	50                   	push   eax
c001f529:	50                   	push   eax
c001f52a:	68 65 2f 03 c0       	push   0xc0032f65
c001f52f:	55                   	push   ebp
c001f530:	e8 4b 12 fe ff       	call   c0000780 <strcmp>
c001f535:	83 c4 10             	add    esp,0x10
c001f538:	85 c0                	test   eax,eax
c001f53a:	74 23                	je     c001f55f <CPU::detectFeatures()+0x241>
c001f53c:	57                   	push   edi
c001f53d:	57                   	push   edi
c001f53e:	68 72 2f 03 c0       	push   0xc0032f72
c001f543:	55                   	push   ebp
c001f544:	e8 37 12 fe ff       	call   c0000780 <strcmp>
c001f549:	83 c4 10             	add    esp,0x10
c001f54c:	85 c0                	test   eax,eax
c001f54e:	75 1e                	jne    c001f56e <CPU::detectFeatures()+0x250>
c001f550:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f55a:	e9 8a 01 00 00       	jmp    c001f6e9 <CPU::detectFeatures()+0x3cb>
c001f55f:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001f569:	e9 7b 01 00 00       	jmp    c001f6e9 <CPU::detectFeatures()+0x3cb>
c001f56e:	56                   	push   esi
c001f56f:	56                   	push   esi
c001f570:	68 7f 2f 03 c0       	push   0xc0032f7f
c001f575:	55                   	push   ebp
c001f576:	e8 05 12 fe ff       	call   c0000780 <strcmp>
c001f57b:	83 c4 10             	add    esp,0x10
c001f57e:	85 c0                	test   eax,eax
c001f580:	75 0f                	jne    c001f591 <CPU::detectFeatures()+0x273>
c001f582:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001f58c:	e9 58 01 00 00       	jmp    c001f6e9 <CPU::detectFeatures()+0x3cb>
c001f591:	51                   	push   ecx
c001f592:	51                   	push   ecx
c001f593:	68 3e 2f 03 c0       	push   0xc0032f3e
c001f598:	55                   	push   ebp
c001f599:	e8 e2 11 fe ff       	call   c0000780 <strcmp>
c001f59e:	83 c4 10             	add    esp,0x10
c001f5a1:	85 c0                	test   eax,eax
c001f5a3:	75 0f                	jne    c001f5b4 <CPU::detectFeatures()+0x296>
c001f5a5:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001f5af:	e9 35 01 00 00       	jmp    c001f6e9 <CPU::detectFeatures()+0x3cb>
c001f5b4:	52                   	push   edx
c001f5b5:	52                   	push   edx
c001f5b6:	68 8c 2f 03 c0       	push   0xc0032f8c
c001f5bb:	55                   	push   ebp
c001f5bc:	e8 bf 11 fe ff       	call   c0000780 <strcmp>
c001f5c1:	83 c4 10             	add    esp,0x10
c001f5c4:	85 c0                	test   eax,eax
c001f5c6:	75 0f                	jne    c001f5d7 <CPU::detectFeatures()+0x2b9>
c001f5c8:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001f5d2:	e9 12 01 00 00       	jmp    c001f6e9 <CPU::detectFeatures()+0x3cb>
c001f5d7:	50                   	push   eax
c001f5d8:	50                   	push   eax
c001f5d9:	68 99 2f 03 c0       	push   0xc0032f99
c001f5de:	55                   	push   ebp
c001f5df:	e8 9c 11 fe ff       	call   c0000780 <strcmp>
c001f5e4:	83 c4 10             	add    esp,0x10
c001f5e7:	85 c0                	test   eax,eax
c001f5e9:	75 0f                	jne    c001f5fa <CPU::detectFeatures()+0x2dc>
c001f5eb:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001f5f5:	e9 ef 00 00 00       	jmp    c001f6e9 <CPU::detectFeatures()+0x3cb>
c001f5fa:	50                   	push   eax
c001f5fb:	50                   	push   eax
c001f5fc:	68 a6 2f 03 c0       	push   0xc0032fa6
c001f601:	55                   	push   ebp
c001f602:	e8 79 11 fe ff       	call   c0000780 <strcmp>
c001f607:	83 c4 10             	add    esp,0x10
c001f60a:	85 c0                	test   eax,eax
c001f60c:	75 0f                	jne    c001f61d <CPU::detectFeatures()+0x2ff>
c001f60e:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001f618:	e9 cc 00 00 00       	jmp    c001f6e9 <CPU::detectFeatures()+0x3cb>
c001f61d:	50                   	push   eax
c001f61e:	50                   	push   eax
c001f61f:	68 b3 2f 03 c0       	push   0xc0032fb3
c001f624:	55                   	push   ebp
c001f625:	e8 56 11 fe ff       	call   c0000780 <strcmp>
c001f62a:	83 c4 10             	add    esp,0x10
c001f62d:	85 c0                	test   eax,eax
c001f62f:	75 0f                	jne    c001f640 <CPU::detectFeatures()+0x322>
c001f631:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001f63b:	e9 a9 00 00 00       	jmp    c001f6e9 <CPU::detectFeatures()+0x3cb>
c001f640:	50                   	push   eax
c001f641:	50                   	push   eax
c001f642:	68 c0 2f 03 c0       	push   0xc0032fc0
c001f647:	55                   	push   ebp
c001f648:	e8 33 11 fe ff       	call   c0000780 <strcmp>
c001f64d:	83 c4 10             	add    esp,0x10
c001f650:	85 c0                	test   eax,eax
c001f652:	75 0f                	jne    c001f663 <CPU::detectFeatures()+0x345>
c001f654:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001f65e:	e9 86 00 00 00       	jmp    c001f6e9 <CPU::detectFeatures()+0x3cb>
c001f663:	50                   	push   eax
c001f664:	50                   	push   eax
c001f665:	68 cd 2f 03 c0       	push   0xc0032fcd
c001f66a:	55                   	push   ebp
c001f66b:	e8 10 11 fe ff       	call   c0000780 <strcmp>
c001f670:	83 c4 10             	add    esp,0x10
c001f673:	85 c0                	test   eax,eax
c001f675:	75 0c                	jne    c001f683 <CPU::detectFeatures()+0x365>
c001f677:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001f681:	eb 66                	jmp    c001f6e9 <CPU::detectFeatures()+0x3cb>
c001f683:	50                   	push   eax
c001f684:	50                   	push   eax
c001f685:	68 da 2f 03 c0       	push   0xc0032fda
c001f68a:	55                   	push   ebp
c001f68b:	e8 f0 10 fe ff       	call   c0000780 <strcmp>
c001f690:	83 c4 10             	add    esp,0x10
c001f693:	85 c0                	test   eax,eax
c001f695:	75 0c                	jne    c001f6a3 <CPU::detectFeatures()+0x385>
c001f697:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001f6a1:	eb 46                	jmp    c001f6e9 <CPU::detectFeatures()+0x3cb>
c001f6a3:	57                   	push   edi
c001f6a4:	57                   	push   edi
c001f6a5:	68 e7 2f 03 c0       	push   0xc0032fe7
c001f6aa:	55                   	push   ebp
c001f6ab:	e8 d0 10 fe ff       	call   c0000780 <strcmp>
c001f6b0:	83 c4 10             	add    esp,0x10
c001f6b3:	85 c0                	test   eax,eax
c001f6b5:	74 e0                	je     c001f697 <CPU::detectFeatures()+0x379>
c001f6b7:	56                   	push   esi
c001f6b8:	56                   	push   esi
c001f6b9:	68 f4 2f 03 c0       	push   0xc0032ff4
c001f6be:	55                   	push   ebp
c001f6bf:	e8 bc 10 fe ff       	call   c0000780 <strcmp>
c001f6c4:	83 c4 10             	add    esp,0x10
c001f6c7:	85 c0                	test   eax,eax
c001f6c9:	74 cc                	je     c001f697 <CPU::detectFeatures()+0x379>
c001f6cb:	51                   	push   ecx
c001f6cc:	51                   	push   ecx
c001f6cd:	68 01 30 03 c0       	push   0xc0033001
c001f6d2:	55                   	push   ebp
c001f6d3:	e8 a8 10 fe ff       	call   c0000780 <strcmp>
c001f6d8:	83 c4 10             	add    esp,0x10
c001f6db:	85 c0                	test   eax,eax
c001f6dd:	74 b8                	je     c001f697 <CPU::detectFeatures()+0x379>
c001f6df:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001f6e9:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001f6ee:	0f 86 be 00 00 00    	jbe    c001f7b2 <CPU::detectFeatures()+0x494>
c001f6f4:	83 ec 0c             	sub    esp,0xc
c001f6f7:	68 80 00 00 00       	push   0x80
c001f6fc:	e8 31 fb ff ff       	call   c001f232 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f701:	83 e0 01             	and    eax,0x1
c001f704:	c1 e0 06             	shl    eax,0x6
c001f707:	89 c2                	mov    edx,eax
c001f709:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f70f:	83 e0 bf             	and    eax,0xffffffbf
c001f712:	09 d0                	or     eax,edx
c001f714:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f71a:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001f721:	e8 0c fb ff ff       	call   c001f232 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f726:	83 e0 01             	and    eax,0x1
c001f729:	c1 e0 04             	shl    eax,0x4
c001f72c:	89 c2                	mov    edx,eax
c001f72e:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f734:	83 e0 ef             	and    eax,0xffffffef
c001f737:	09 d0                	or     eax,edx
c001f739:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f73f:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001f746:	e8 e7 fa ff ff       	call   c001f232 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f74b:	89 c2                	mov    edx,eax
c001f74d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f753:	c1 e2 07             	shl    edx,0x7
c001f756:	83 e0 7f             	and    eax,0x7f
c001f759:	09 d0                	or     eax,edx
c001f75b:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f761:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001f768:	e8 f3 fa ff ff       	call   c001f260 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f76d:	83 e0 01             	and    eax,0x1
c001f770:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f777:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f77d:	83 e0 f7             	and    eax,0xfffffff7
c001f780:	09 d0                	or     eax,edx
c001f782:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f788:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001f78f:	e8 cc fa ff ff       	call   c001f260 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f794:	83 c4 10             	add    esp,0x10
c001f797:	83 e0 01             	and    eax,0x1
c001f79a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f7a1:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f7a7:	83 e0 fb             	and    eax,0xfffffffb
c001f7aa:	09 d0                	or     eax,edx
c001f7ac:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f7b2:	83 ec 0c             	sub    esp,0xc
c001f7b5:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f7b9:	50                   	push   eax
c001f7ba:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f7be:	50                   	push   eax
c001f7bf:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001f7c3:	57                   	push   edi
c001f7c4:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f7c8:	56                   	push   esi
c001f7c9:	6a 01                	push   0x1
c001f7cb:	e8 82 f9 ff ff       	call   c001f152 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f7d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f7d4:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001f7da:	89 c1                	mov    ecx,eax
c001f7dc:	83 e1 0f             	and    ecx,0xf
c001f7df:	83 e2 f0             	and    edx,0xfffffff0
c001f7e2:	09 ca                	or     edx,ecx
c001f7e4:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001f7ea:	89 c2                	mov    edx,eax
c001f7ec:	c1 ea 04             	shr    edx,0x4
c001f7ef:	83 e2 0f             	and    edx,0xf
c001f7f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f7f6:	89 d1                	mov    ecx,edx
c001f7f8:	83 c4 20             	add    esp,0x20
c001f7fb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001f801:	c1 e1 06             	shl    ecx,0x6
c001f804:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001f80a:	09 ca                	or     edx,ecx
c001f80c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001f813:	89 c2                	mov    edx,eax
c001f815:	c1 ea 08             	shr    edx,0x8
c001f818:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001f81e:	83 e2 0f             	and    edx,0xf
c001f821:	89 d5                	mov    ebp,edx
c001f823:	83 e5 03             	and    ebp,0x3
c001f826:	c1 e5 06             	shl    ebp,0x6
c001f829:	83 e1 3f             	and    ecx,0x3f
c001f82c:	09 e9                	or     ecx,ebp
c001f82e:	89 d5                	mov    ebp,edx
c001f830:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001f836:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001f83c:	c1 ed 02             	shr    ebp,0x2
c001f83f:	83 e1 c0             	and    ecx,0xffffffc0
c001f842:	09 e9                	or     ecx,ebp
c001f844:	89 c5                	mov    ebp,eax
c001f846:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001f84c:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001f852:	c1 ed 08             	shr    ebp,0x8
c001f855:	83 e5 30             	and    ebp,0x30
c001f858:	83 e1 cf             	and    ecx,0xffffffcf
c001f85b:	09 e9                	or     ecx,ebp
c001f85d:	83 fa 06             	cmp    edx,0x6
c001f860:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001f866:	74 05                	je     c001f86d <CPU::detectFeatures()+0x54f>
c001f868:	83 fa 0f             	cmp    edx,0xf
c001f86b:	75 64                	jne    c001f8d1 <CPU::detectFeatures()+0x5b3>
c001f86d:	89 c1                	mov    ecx,eax
c001f86f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001f875:	c1 e9 10             	shr    ecx,0x10
c001f878:	c1 e1 04             	shl    ecx,0x4
c001f87b:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001f87f:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c001f885:	0f b6 c9             	movzx  ecx,cl
c001f888:	c1 e1 06             	shl    ecx,0x6
c001f88b:	09 e9                	or     ecx,ebp
c001f88d:	83 fa 0f             	cmp    edx,0xf
c001f890:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c001f897:	75 38                	jne    c001f8d1 <CPU::detectFeatures()+0x5b3>
c001f899:	c1 e8 14             	shr    eax,0x14
c001f89c:	83 c0 0f             	add    eax,0xf
c001f89f:	0f b6 c0             	movzx  eax,al
c001f8a2:	89 c2                	mov    edx,eax
c001f8a4:	c1 e8 02             	shr    eax,0x2
c001f8a7:	83 e2 03             	and    edx,0x3
c001f8aa:	89 d1                	mov    ecx,edx
c001f8ac:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001f8b2:	c1 e1 06             	shl    ecx,0x6
c001f8b5:	83 e2 3f             	and    edx,0x3f
c001f8b8:	09 ca                	or     edx,ecx
c001f8ba:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001f8c0:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001f8c6:	83 e2 c0             	and    edx,0xffffffc0
c001f8c9:	09 d0                	or     eax,edx
c001f8cb:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001f8d1:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f8d7:	83 ec 0c             	sub    esp,0xc
c001f8da:	83 c8 07             	or     eax,0x7
c001f8dd:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f8e3:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f8e7:	50                   	push   eax
c001f8e8:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f8ec:	55                   	push   ebp
c001f8ed:	57                   	push   edi
c001f8ee:	56                   	push   esi
c001f8ef:	68 00 00 00 80       	push   0x80000000
c001f8f4:	e8 59 f8 ff ff       	call   c001f152 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f8f9:	83 c4 20             	add    esp,0x20
c001f8fc:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001f904:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f908:	76 1e                	jbe    c001f928 <CPU::detectFeatures()+0x60a>
c001f90a:	83 ec 0c             	sub    esp,0xc
c001f90d:	50                   	push   eax
c001f90e:	55                   	push   ebp
c001f90f:	57                   	push   edi
c001f910:	56                   	push   esi
c001f911:	68 01 00 00 80       	push   0x80000001
c001f916:	e8 37 f8 ff ff       	call   c001f152 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f91b:	83 c4 20             	add    esp,0x20
c001f91e:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c001f928:	52                   	push   edx
c001f929:	52                   	push   edx
c001f92a:	68 0d 30 03 c0       	push   0xc003300d
c001f92f:	53                   	push   ebx
c001f930:	e8 29 be ff ff       	call   c001b75e <Device::setName(char const*)>
c001f935:	83 c4 10             	add    esp,0x10
c001f938:	eb 69                	jmp    c001f9a3 <CPU::detectFeatures()+0x685>
c001f93a:	50                   	push   eax
c001f93b:	50                   	push   eax
c001f93c:	68 72 2f 03 c0       	push   0xc0032f72
c001f941:	55                   	push   ebp
c001f942:	e8 09 0d fe ff       	call   c0000650 <strcpy>
c001f947:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f951:	e8 6d 08 fe ff       	call   c00001c3 <is486>
c001f956:	83 c4 10             	add    esp,0x10
c001f959:	85 c0                	test   eax,eax
c001f95b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f961:	74 1f                	je     c001f982 <CPU::detectFeatures()+0x664>
c001f963:	83 c8 07             	or     eax,0x7
c001f966:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f96c:	0f 20 c0             	mov    eax,cr0
c001f96f:	83 e0 14             	and    eax,0x14
c001f972:	83 f8 04             	cmp    eax,0x4
c001f975:	75 10                	jne    c001f987 <CPU::detectFeatures()+0x669>
c001f977:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f97d:	83 e0 fd             	and    eax,0xfffffffd
c001f980:	eb 1b                	jmp    c001f99d <CPU::detectFeatures()+0x67f>
c001f982:	83 e0 f8             	and    eax,0xfffffff8
c001f985:	eb df                	jmp    c001f966 <CPU::detectFeatures()+0x648>
c001f987:	e8 12 08 fe ff       	call   c000019e <hasLegacyFPU>
c001f98c:	83 e0 01             	and    eax,0x1
c001f98f:	8d 14 00             	lea    edx,[eax+eax*1]
c001f992:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f998:	83 e0 fd             	and    eax,0xfffffffd
c001f99b:	09 d0                	or     eax,edx
c001f99d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f9a3:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c001f9aa:	74 17                	je     c001f9c3 <CPU::detectFeatures()+0x6a5>
c001f9ac:	8b 15 bc b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9bc
c001f9b2:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c001f9b8:	83 c8 10             	or     eax,0x10
c001f9bb:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c001f9c1:	eb 20                	jmp    c001f9e3 <CPU::detectFeatures()+0x6c5>
c001f9c3:	e8 d6 07 fe ff       	call   c000019e <hasLegacyFPU>
c001f9c8:	83 e0 01             	and    eax,0x1
c001f9cb:	8d 14 00             	lea    edx,[eax+eax*1]
c001f9ce:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f9d4:	83 e0 fd             	and    eax,0xfffffffd
c001f9d7:	09 d0                	or     eax,edx
c001f9d9:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f9df:	a8 02                	test   al,0x2
c001f9e1:	75 c9                	jne    c001f9ac <CPU::detectFeatures()+0x68e>
c001f9e3:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c001f9ea:	83 c4 2c             	add    esp,0x2c
c001f9ed:	5b                   	pop    ebx
c001f9ee:	5e                   	pop    esi
c001f9ef:	5f                   	pop    edi
c001f9f0:	5d                   	pop    ebp
c001f9f1:	c3                   	ret    

c001f9f2 <CPU::setupSMEP()>:
c001f9f2:	0f 20 e0             	mov    eax,cr4
c001f9f5:	0d 00 00 10 00       	or     eax,0x100000
c001f9fa:	0f 22 e0             	mov    cr4,eax
c001f9fd:	c3                   	ret    

c001f9fe <CPU::setupUMIP()>:
c001f9fe:	0f 20 e0             	mov    eax,cr4
c001fa01:	80 cc 08             	or     ah,0x8
c001fa04:	0f 22 e0             	mov    cr4,eax
c001fa07:	c3                   	ret    

c001fa08 <CPU::setupTSC()>:
c001fa08:	0f 20 e0             	mov    eax,cr4
c001fa0b:	83 c8 04             	or     eax,0x4
c001fa0e:	0f 22 e0             	mov    cr4,eax
c001fa11:	c3                   	ret    

c001fa12 <CPU::setupLargePages()>:
c001fa12:	0f 20 e0             	mov    eax,cr4
c001fa15:	83 c8 10             	or     eax,0x10
c001fa18:	0f 22 e0             	mov    cr4,eax
c001fa1b:	c3                   	ret    

c001fa1c <CPU::setupPAT()>:
c001fa1c:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c001fa21:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c001fa28:	74 2c                	je     c001fa56 <CPU::setupPAT()+0x3a>
c001fa2a:	53                   	push   ebx
c001fa2b:	83 ec 10             	sub    esp,0x10
c001fa2e:	68 77 02 00 00       	push   0x277
c001fa33:	50                   	push   eax
c001fa34:	e8 e3 61 ff ff       	call   c0015c1c <Computer::rdmsr(unsigned int)>
c001fa39:	83 e2 f8             	and    edx,0xfffffff8
c001fa3c:	83 ca 01             	or     edx,0x1
c001fa3f:	52                   	push   edx
c001fa40:	50                   	push   eax
c001fa41:	68 77 02 00 00       	push   0x277
c001fa46:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c001fa4c:	e8 f7 61 ff ff       	call   c0015c48 <Computer::wrmsr(unsigned int, unsigned long long)>
c001fa51:	83 c4 28             	add    esp,0x28
c001fa54:	5b                   	pop    ebx
c001fa55:	c3                   	ret    
c001fa56:	c3                   	ret    
c001fa57:	90                   	nop

c001fa58 <CPU::setupMTRR()>:
c001fa58:	c3                   	ret    
c001fa59:	90                   	nop

c001fa5a <CPU::setupGlobalPages()>:
c001fa5a:	0f 20 e0             	mov    eax,cr4
c001fa5d:	0c 80                	or     al,0x80
c001fa5f:	0f 22 e0             	mov    cr4,eax
c001fa62:	c3                   	ret    
c001fa63:	90                   	nop

c001fa64 <CPU::allowUsermodeDataAccess()>:
c001fa64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa68:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001fa6f:	74 03                	je     c001fa74 <CPU::allowUsermodeDataAccess()+0x10>
c001fa71:	0f 01 cb             	stac   
c001fa74:	c3                   	ret    
c001fa75:	90                   	nop

c001fa76 <CPU::prohibitUsermodeDataAccess()>:
c001fa76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa7a:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001fa81:	74 03                	je     c001fa86 <CPU::prohibitUsermodeDataAccess()+0x10>
c001fa83:	0f 01 ca             	clac   
c001fa86:	c3                   	ret    
c001fa87:	90                   	nop

c001fa88 <CPU::setupSMAP()>:
c001fa88:	0f 20 e0             	mov    eax,cr4
c001fa8b:	0d 00 00 20 00       	or     eax,0x200000
c001fa90:	0f 22 e0             	mov    cr4,eax
c001fa93:	eb e1                	jmp    c001fa76 <CPU::prohibitUsermodeDataAccess()>
c001fa95:	90                   	nop

c001fa96 <CPU::setupFeatures()>:
c001fa96:	53                   	push   ebx
c001fa97:	83 ec 08             	sub    esp,0x8
c001fa9a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fa9e:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c001faa5:	74 18                	je     c001fabf <CPU::setupFeatures()+0x29>
c001faa7:	83 ec 0c             	sub    esp,0xc
c001faaa:	68 19 30 03 c0       	push   0xc0033019
c001faaf:	e8 0a 9a ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001fab4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fab7:	e8 42 ff ff ff       	call   c001f9fe <CPU::setupUMIP()>
c001fabc:	83 c4 10             	add    esp,0x10
c001fabf:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c001fac6:	74 18                	je     c001fae0 <CPU::setupFeatures()+0x4a>
c001fac8:	83 ec 0c             	sub    esp,0xc
c001facb:	68 23 30 03 c0       	push   0xc0033023
c001fad0:	e8 e9 99 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001fad5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fad8:	e8 2b ff ff ff       	call   c001fa08 <CPU::setupTSC()>
c001fadd:	83 c4 10             	add    esp,0x10
c001fae0:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c001fae7:	74 18                	je     c001fb01 <CPU::setupFeatures()+0x6b>
c001fae9:	83 ec 0c             	sub    esp,0xc
c001faec:	68 2c 30 03 c0       	push   0xc003302c
c001faf1:	e8 c8 99 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001faf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001faf9:	e8 14 ff ff ff       	call   c001fa12 <CPU::setupLargePages()>
c001fafe:	83 c4 10             	add    esp,0x10
c001fb01:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c001fb08:	74 18                	je     c001fb22 <CPU::setupFeatures()+0x8c>
c001fb0a:	83 ec 0c             	sub    esp,0xc
c001fb0d:	68 35 30 03 c0       	push   0xc0033035
c001fb12:	e8 a7 99 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001fb17:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fb1a:	e8 3b ff ff ff       	call   c001fa5a <CPU::setupGlobalPages()>
c001fb1f:	83 c4 10             	add    esp,0x10
c001fb22:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001fb29:	74 18                	je     c001fb43 <CPU::setupFeatures()+0xad>
c001fb2b:	83 ec 0c             	sub    esp,0xc
c001fb2e:	68 47 30 03 c0       	push   0xc0033047
c001fb33:	e8 86 99 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001fb38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fb3b:	e8 dc fe ff ff       	call   c001fa1c <CPU::setupPAT()>
c001fb40:	83 c4 10             	add    esp,0x10
c001fb43:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001fb4a:	74 11                	je     c001fb5d <CPU::setupFeatures()+0xc7>
c001fb4c:	c7 44 24 10 50 30 03 c0 	mov    DWORD PTR [esp+0x10],0xc0033050
c001fb54:	83 c4 08             	add    esp,0x8
c001fb57:	5b                   	pop    ebx
c001fb58:	e9 61 99 ff ff       	jmp    c00194be <Dbg::kprintf(char const*, ...)>
c001fb5d:	83 c4 08             	add    esp,0x8
c001fb60:	5b                   	pop    ebx
c001fb61:	c3                   	ret    

c001fb62 <CPU::open(int, int, void*)>:
c001fb62:	55                   	push   ebp
c001fb63:	57                   	push   edi
c001fb64:	56                   	push   esi
c001fb65:	53                   	push   ebx
c001fb66:	83 ec 18             	sub    esp,0x18
c001fb69:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001fb6d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001fb71:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001fb75:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001fb7b:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c001fb81:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c001fb87:	50                   	push   eax
c001fb88:	e8 8b 63 ff ff       	call   c0015f18 <GDT::setup()>
c001fb8d:	83 c4 0c             	add    esp,0xc
c001fb90:	6a 00                	push   0x0
c001fb92:	68 ef be ad de       	push   0xdeadbeef
c001fb97:	55                   	push   ebp
c001fb98:	e8 87 7f ff ff       	call   c0017b24 <TSS::setup(unsigned long, unsigned long)>
c001fb9d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001fba0:	e8 5f 7f ff ff       	call   c0017b04 <TSS::flush()>
c001fba5:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001fbab:	89 04 24             	mov    DWORD PTR [esp],eax
c001fbae:	e8 c7 65 ff ff       	call   c001617a <IDT::setup()>
c001fbb3:	b8 00 04 00 00       	mov    eax,0x400
c001fbb8:	0f 23 f8             	mov    db7,eax
c001fbbb:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001fbc5:	e8 cd 6d ff ff       	call   c0016997 <Phys::allocatePage()>
c001fbca:	83 c4 10             	add    esp,0x10
c001fbcd:	85 f6                	test   esi,esi
c001fbcf:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001fbd5:	89 38                	mov    DWORD PTR [eax],edi
c001fbd7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001fbdd:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001fbe0:	74 10                	je     c001fbf2 <CPU::open(int, int, void*)+0x90>
c001fbe2:	50                   	push   eax
c001fbe3:	50                   	push   eax
c001fbe4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fbea:	56                   	push   esi
c001fbeb:	e8 50 88 ff ff       	call   c0018440 <VAS::setCPUSpecific(unsigned long)>
c001fbf0:	eb 0d                	jmp    c001fbff <CPU::open(int, int, void*)+0x9d>
c001fbf2:	83 ec 0c             	sub    esp,0xc
c001fbf5:	68 5a 30 03 c0       	push   0xc003305a
c001fbfa:	e8 03 0b 00 00       	call   c0020702 <KePanic(char const*)>
c001fbff:	83 c4 10             	add    esp,0x10
c001fc02:	83 ec 0c             	sub    esp,0xc
c001fc05:	68 68 30 03 c0       	push   0xc0033068
c001fc0a:	e8 8e 01 00 00       	call   c001fd9d <KeSetBootMessage(char const*)>
c001fc0f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fc12:	e8 07 f7 ff ff       	call   c001f31e <CPU::detectFeatures()>
c001fc17:	c7 04 24 8b 30 03 c0 	mov    DWORD PTR [esp],0xc003308b
c001fc1e:	e8 7a 01 00 00       	call   c001fd9d <KeSetBootMessage(char const*)>
c001fc23:	e8 30 79 00 00       	call   c0027558 <HalInitialise()>
c001fc28:	a1 d4 b9 03 c0       	mov    eax,ds:0xc003b9d4
c001fc2d:	83 e0 10             	and    eax,0x10
c001fc30:	83 f8 01             	cmp    eax,0x1
c001fc33:	19 c0                	sbb    eax,eax
c001fc35:	83 e0 46             	and    eax,0x46
c001fc38:	83 c0 1e             	add    eax,0x1e
c001fc3b:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc3e:	e8 06 d4 ff ff       	call   c001d049 <setupTimer(int)>
c001fc43:	83 c4 10             	add    esp,0x10
c001fc46:	f6 05 d4 b9 03 c0 20 	test   BYTE PTR ds:0xc003b9d4,0x20
c001fc4d:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001fc53:	74 0c                	je     c001fc61 <CPU::open(int, int, void*)+0xff>
c001fc55:	83 ec 0c             	sub    esp,0xc
c001fc58:	53                   	push   ebx
c001fc59:	e8 38 fe ff ff       	call   c001fa96 <CPU::setupFeatures()>
c001fc5e:	83 c4 10             	add    esp,0x10
c001fc61:	83 c4 0c             	add    esp,0xc
c001fc64:	31 c0                	xor    eax,eax
c001fc66:	5b                   	pop    ebx
c001fc67:	5e                   	pop    esi
c001fc68:	5f                   	pop    edi
c001fc69:	5d                   	pop    ebp
c001fc6a:	c3                   	ret    

c001fc6b <KeInitialiseAtexit()>:
c001fc6b:	83 ec 10             	sub    esp,0x10
c001fc6e:	6a 60                	push   0x60
c001fc70:	6a 00                	push   0x0
c001fc72:	68 20 09 04 c0       	push   0xc0040920
c001fc77:	c7 05 a0 08 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00408a0,0x0
c001fc81:	e8 6a 08 fe ff       	call   c00004f0 <memset>
c001fc86:	83 c4 1c             	add    esp,0x1c
c001fc89:	c3                   	ret    

c001fc8a <KeRegisterAtexit(void (*)(void*), void*)>:
c001fc8a:	a1 a0 08 04 c0       	mov    eax,ds:0xc00408a0
c001fc8f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fc93:	89 14 85 20 09 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf6e0],edx
c001fc9a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fc9e:	89 14 85 c0 08 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf740],edx
c001fca5:	40                   	inc    eax
c001fca6:	a3 a0 08 04 c0       	mov    ds:0xc00408a0,eax
c001fcab:	83 f8 17             	cmp    eax,0x17
c001fcae:	7e 0d                	jle    c001fcbd <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c001fcb0:	c7 44 24 04 cc 30 03 c0 	mov    DWORD PTR [esp+0x4],0xc00330cc
c001fcb8:	e9 45 0a 00 00       	jmp    c0020702 <KePanic(char const*)>
c001fcbd:	c3                   	ret    

c001fcbe <KeExecuteAtexit()>:
c001fcbe:	53                   	push   ebx
c001fcbf:	31 db                	xor    ebx,ebx
c001fcc1:	83 ec 08             	sub    esp,0x8
c001fcc4:	39 1d a0 08 04 c0    	cmp    DWORD PTR ds:0xc00408a0,ebx
c001fcca:	7e 50                	jle    c001fd1c <KeExecuteAtexit()+0x5e>
c001fccc:	8b 04 9d 20 09 04 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffbf6e0]
c001fcd3:	85 c0                	test   eax,eax
c001fcd5:	74 42                	je     c001fd19 <KeExecuteAtexit()+0x5b>
c001fcd7:	51                   	push   ecx
c001fcd8:	50                   	push   eax
c001fcd9:	53                   	push   ebx
c001fcda:	68 e5 30 03 c0       	push   0xc00330e5
c001fcdf:	e8 da 97 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001fce4:	58                   	pop    eax
c001fce5:	ff 34 9d c0 08 04 c0 	push   DWORD PTR [ebx*4-0x3ffbf740]
c001fcec:	ff 14 9d 20 09 04 c0 	call   DWORD PTR [ebx*4-0x3ffbf6e0]
c001fcf3:	c7 04 24 07 31 03 c0 	mov    DWORD PTR [esp],0xc0033107
c001fcfa:	e8 bf 97 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001fcff:	c7 04 24 47 43 03 c0 	mov    DWORD PTR [esp],0xc0034347
c001fd06:	c7 04 9d 20 09 04 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffbf6e0],0x0
c001fd11:	e8 a8 97 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001fd16:	83 c4 10             	add    esp,0x10
c001fd19:	43                   	inc    ebx
c001fd1a:	eb a8                	jmp    c001fcc4 <KeExecuteAtexit()+0x6>
c001fd1c:	83 c4 08             	add    esp,0x8
c001fd1f:	5b                   	pop    ebx
c001fd20:	c3                   	ret    

c001fd21 <KeDisplaySplashScreen()>:
c001fd21:	55                   	push   ebp
c001fd22:	bd 05 00 00 00       	mov    ebp,0x5
c001fd27:	57                   	push   edi
c001fd28:	bf 0a 00 00 00       	mov    edi,0xa
c001fd2d:	56                   	push   esi
c001fd2e:	31 f6                	xor    esi,esi
c001fd30:	53                   	push   ebx
c001fd31:	31 db                	xor    ebx,ebx
c001fd33:	83 ec 0c             	sub    esp,0xc
c001fd36:	0f b6 96 a0 45 03 c0 	movzx  edx,BYTE PTR [esi-0x3ffcba60]
c001fd3d:	85 d2                	test   edx,edx
c001fd3f:	89 d0                	mov    eax,edx
c001fd41:	74 52                	je     c001fd95 <KeDisplaySplashScreen()+0x74>
c001fd43:	80 bb d6 45 03 c0 db 	cmp    BYTE PTR [ebx-0x3ffcba2a],0xdb
c001fd4a:	75 13                	jne    c001fd5f <KeDisplaySplashScreen()+0x3e>
c001fd4c:	0f b6 8b d5 45 03 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffcba2b]
c001fd53:	83 e1 fe             	and    ecx,0xfffffffe
c001fd56:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c001fd5c:	75 01                	jne    c001fd5f <KeDisplaySplashScreen()+0x3e>
c001fd5e:	47                   	inc    edi
c001fd5f:	83 fa 0d             	cmp    edx,0xd
c001fd62:	74 28                	je     c001fd8c <KeDisplaySplashScreen()+0x6b>
c001fd64:	83 fa 0a             	cmp    edx,0xa
c001fd67:	75 0a                	jne    c001fd73 <KeDisplaySplashScreen()+0x52>
c001fd69:	45                   	inc    ebp
c001fd6a:	bf 0a 00 00 00       	mov    edi,0xa
c001fd6f:	31 db                	xor    ebx,ebx
c001fd71:	eb 19                	jmp    c001fd8c <KeDisplaySplashScreen()+0x6b>
c001fd73:	83 ec 0c             	sub    esp,0xc
c001fd76:	0f be c0             	movsx  eax,al
c001fd79:	55                   	push   ebp
c001fd7a:	8d 14 1f             	lea    edx,[edi+ebx*1]
c001fd7d:	43                   	inc    ebx
c001fd7e:	52                   	push   edx
c001fd7f:	6a 00                	push   0x0
c001fd81:	6a 0e                	push   0xe
c001fd83:	50                   	push   eax
c001fd84:	e8 4b 84 00 00       	call   c00281d4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001fd89:	83 c4 20             	add    esp,0x20
c001fd8c:	46                   	inc    esi
c001fd8d:	81 fe 42 01 00 00    	cmp    esi,0x142
c001fd93:	75 a1                	jne    c001fd36 <KeDisplaySplashScreen()+0x15>
c001fd95:	83 c4 0c             	add    esp,0xc
c001fd98:	5b                   	pop    ebx
c001fd99:	5e                   	pop    esi
c001fd9a:	5f                   	pop    edi
c001fd9b:	5d                   	pop    ebp
c001fd9c:	c3                   	ret    

c001fd9d <KeSetBootMessage(char const*)>:
c001fd9d:	57                   	push   edi
c001fd9e:	56                   	push   esi
c001fd9f:	53                   	push   ebx
c001fda0:	81 ec a4 00 00 00    	sub    esp,0xa4
c001fda6:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c001fdad:	68 9e 00 00 00       	push   0x9e
c001fdb2:	6a 00                	push   0x0
c001fdb4:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001fdb8:	56                   	push   esi
c001fdb9:	e8 32 07 fe ff       	call   c00004f0 <memset>
c001fdbe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fdc1:	e8 ba 07 fe ff       	call   c0000580 <strlen>
c001fdc6:	ba 50 00 00 00       	mov    edx,0x50
c001fdcb:	83 c4 10             	add    esp,0x10
c001fdce:	31 c9                	xor    ecx,ecx
c001fdd0:	29 c2                	sub    edx,eax
c001fdd2:	83 e2 fe             	and    edx,0xfffffffe
c001fdd5:	01 f2                	add    edx,esi
c001fdd7:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c001fddc:	84 c0                	test   al,al
c001fdde:	74 0a                	je     c001fdea <KeSetBootMessage(char const*)+0x4d>
c001fde0:	80 cc 0f             	or     ah,0xf
c001fde3:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c001fde7:	41                   	inc    ecx
c001fde8:	eb ed                	jmp    c001fdd7 <KeSetBootMessage(char const*)+0x3a>
c001fdea:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c001fdef:	b9 9e 00 00 00       	mov    ecx,0x9e
c001fdf4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fdf6:	e4 60                	in     al,0x60
c001fdf8:	0f b6 c0             	movzx  eax,al
c001fdfb:	83 f8 1c             	cmp    eax,0x1c
c001fdfe:	74 05                	je     c001fe05 <KeSetBootMessage(char const*)+0x68>
c001fe00:	83 f8 5a             	cmp    eax,0x5a
c001fe03:	75 f1                	jne    c001fdf6 <KeSetBootMessage(char const*)+0x59>
c001fe05:	e4 60                	in     al,0x60
c001fe07:	0f b6 c0             	movzx  eax,al
c001fe0a:	83 f8 1c             	cmp    eax,0x1c
c001fe0d:	74 f6                	je     c001fe05 <KeSetBootMessage(char const*)+0x68>
c001fe0f:	83 f8 5a             	cmp    eax,0x5a
c001fe12:	74 f1                	je     c001fe05 <KeSetBootMessage(char const*)+0x68>
c001fe14:	81 c4 a0 00 00 00    	add    esp,0xa0
c001fe1a:	5b                   	pop    ebx
c001fe1b:	5e                   	pop    esi
c001fe1c:	5f                   	pop    edi
c001fe1d:	c3                   	ret    
c001fe1e:	66 90                	xchg   ax,ax

c001fe20 <CUnlockScheduler>:
c001fe20:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001fe25:	83 e8 01             	sub    eax,0x1
c001fe28:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001fe2d:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001fe32:	85 c0                	test   eax,eax
c001fe34:	75 02                	jne    c001fe38 <CUnlockScheduler+0x18>
c001fe36:	fb                   	sti    
c001fe37:	90                   	nop
c001fe38:	90                   	nop
c001fe39:	c3                   	ret    
c001fe3a:	66 90                	xchg   ax,ax

c001fe3c <CLockScheduler>:
c001fe3c:	fa                   	cli    
c001fe3d:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c001fe42:	83 c0 01             	add    eax,0x1
c001fe45:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c001fe4a:	90                   	nop
c001fe4b:	c3                   	ret    

c001fe4c <CPrintf>:
c001fe4c:	83 ec 0c             	sub    esp,0xc
c001fe4f:	83 ec 08             	sub    esp,0x8
c001fe52:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fe56:	68 50 03 03 c0       	push   0xc0030350
c001fe5b:	e8 5e 96 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c001fe60:	83 c4 10             	add    esp,0x10
c001fe63:	90                   	nop
c001fe64:	83 c4 0c             	add    esp,0xc
c001fe67:	c3                   	ret    

c001fe68 <Krnl::handlePowerButton()>:
c001fe68:	83 ec 0c             	sub    esp,0xc
c001fe6b:	e8 ed 08 00 00       	call   c002075d <KeHandlePowerButton()>
c001fe70:	90                   	nop
c001fe71:	83 c4 0c             	add    esp,0xc
c001fe74:	c3                   	ret    
c001fe75:	8d 76 00             	lea    esi,[esi+0x0]

c001fe78 <Krnl::handleSleepButton()>:
c001fe78:	83 ec 0c             	sub    esp,0xc
c001fe7b:	e8 12 09 00 00       	call   c0020792 <KeHandleSleepButton()>
c001fe80:	90                   	nop
c001fe81:	83 c4 0c             	add    esp,0xc
c001fe84:	c3                   	ret    

c001fe85 <KeCalculateCRC32(unsigned char*, int)>:
c001fe85:	53                   	push   ebx
c001fe86:	83 c8 ff             	or     eax,0xffffffff
c001fe89:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fe8d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fe91:	01 cb                	add    ebx,ecx
c001fe93:	39 d9                	cmp    ecx,ebx
c001fe95:	74 15                	je     c001feac <KeCalculateCRC32(unsigned char*, int)+0x27>
c001fe97:	41                   	inc    ecx
c001fe98:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c001fe9b:	31 c2                	xor    edx,eax
c001fe9d:	c1 e8 08             	shr    eax,0x8
c001fea0:	0f b6 d2             	movzx  edx,dl
c001fea3:	33 04 95 00 47 03 c0 	xor    eax,DWORD PTR [edx*4-0x3ffcb900]
c001feaa:	eb e7                	jmp    c001fe93 <KeCalculateCRC32(unsigned char*, int)+0xe>
c001feac:	5b                   	pop    ebx
c001fead:	f7 d0                	not    eax
c001feaf:	c3                   	ret    

c001feb0 <EnvVarContainer::getEnv(char const*)>:
c001feb0:	57                   	push   edi
c001feb1:	56                   	push   esi
c001feb2:	53                   	push   ebx
c001feb3:	31 db                	xor    ebx,ebx
c001feb5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001feb9:	39 1e                	cmp    DWORD PTR [esi],ebx
c001febb:	7e 2b                	jle    c001fee8 <EnvVarContainer::getEnv(char const*)+0x38>
c001febd:	50                   	push   eax
c001febe:	50                   	push   eax
c001febf:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001fec2:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001fec9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001fecc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fed0:	e8 ab 08 fe ff       	call   c0000780 <strcmp>
c001fed5:	83 c4 10             	add    esp,0x10
c001fed8:	85 c0                	test   eax,eax
c001feda:	75 09                	jne    c001fee5 <EnvVarContainer::getEnv(char const*)+0x35>
c001fedc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001fedf:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001fee3:	eb 05                	jmp    c001feea <EnvVarContainer::getEnv(char const*)+0x3a>
c001fee5:	43                   	inc    ebx
c001fee6:	eb d1                	jmp    c001feb9 <EnvVarContainer::getEnv(char const*)+0x9>
c001fee8:	31 c0                	xor    eax,eax
c001feea:	5b                   	pop    ebx
c001feeb:	5e                   	pop    esi
c001feec:	5f                   	pop    edi
c001feed:	c3                   	ret    

c001feee <EnvVarContainer::setEnv(char const*, char const*)>:
c001feee:	55                   	push   ebp
c001feef:	57                   	push   edi
c001fef0:	56                   	push   esi
c001fef1:	53                   	push   ebx
c001fef2:	83 ec 28             	sub    esp,0x28
c001fef5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001fef9:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001fefd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001ff01:	56                   	push   esi
c001ff02:	e8 79 06 fe ff       	call   c0000580 <strlen>
c001ff07:	40                   	inc    eax
c001ff08:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff0b:	e8 78 67 ff ff       	call   c0016688 <malloc>
c001ff10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ff13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ff17:	e8 64 06 fe ff       	call   c0000580 <strlen>
c001ff1c:	40                   	inc    eax
c001ff1d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff20:	e8 63 67 ff ff       	call   c0016688 <malloc>
c001ff25:	89 34 24             	mov    DWORD PTR [esp],esi
c001ff28:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ff2c:	e8 4f 06 fe ff       	call   c0000580 <strlen>
c001ff31:	83 c4 0c             	add    esp,0xc
c001ff34:	40                   	inc    eax
c001ff35:	50                   	push   eax
c001ff36:	6a 00                	push   0x0
c001ff38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff3c:	e8 af 05 fe ff       	call   c00004f0 <memset>
c001ff41:	89 34 24             	mov    DWORD PTR [esp],esi
c001ff44:	e8 37 06 fe ff       	call   c0000580 <strlen>
c001ff49:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ff4d:	8d 48 01             	lea    ecx,[eax+0x1]
c001ff50:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ff52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ff55:	89 de                	mov    esi,ebx
c001ff57:	e8 24 06 fe ff       	call   c0000580 <strlen>
c001ff5c:	83 c4 0c             	add    esp,0xc
c001ff5f:	40                   	inc    eax
c001ff60:	50                   	push   eax
c001ff61:	6a 00                	push   0x0
c001ff63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ff67:	e8 84 05 fe ff       	call   c00004f0 <memset>
c001ff6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ff6f:	e8 0c 06 fe ff       	call   c0000580 <strlen>
c001ff74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ff78:	8d 48 01             	lea    ecx,[eax+0x1]
c001ff7b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ff7d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ff80:	40                   	inc    eax
c001ff81:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001ff84:	c1 e0 03             	shl    eax,0x3
c001ff87:	5a                   	pop    edx
c001ff88:	59                   	pop    ecx
c001ff89:	50                   	push   eax
c001ff8a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001ff8d:	e8 e2 66 ff ff       	call   c0016674 <realloc>
c001ff92:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ff95:	8d 74 24 18          	lea    esi,[esp+0x18]
c001ff99:	b9 08 00 00 00       	mov    ecx,0x8
c001ff9e:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001ffa1:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001ffa5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ffa7:	83 c4 2c             	add    esp,0x2c
c001ffaa:	5b                   	pop    ebx
c001ffab:	5e                   	pop    esi
c001ffac:	5f                   	pop    edi
c001ffad:	5d                   	pop    ebp
c001ffae:	c3                   	ret    
c001ffaf:	90                   	nop

c001ffb0 <EnvVarContainer::deleteEnv(char const*)>:
c001ffb0:	c3                   	ret    
c001ffb1:	90                   	nop

c001ffb2 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001ffb2:	55                   	push   ebp
c001ffb3:	57                   	push   edi
c001ffb4:	56                   	push   esi
c001ffb5:	53                   	push   ebx
c001ffb6:	81 ec 38 01 00 00    	sub    esp,0x138
c001ffbc:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001ffc3:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001ffca:	68 14 01 00 00       	push   0x114
c001ffcf:	e8 b4 66 ff ff       	call   c0016688 <malloc>
c001ffd4:	83 c4 0c             	add    esp,0xc
c001ffd7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ffda:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ffe1:	89 c3                	mov    ebx,eax
c001ffe3:	50                   	push   eax
c001ffe4:	e8 ed a6 ff ff       	call   c001a6d6 <File::File(char const*, Process*)>
c001ffe9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ffec:	e8 c7 a9 ff ff       	call   c001a9b8 <File::exists()>
c001fff1:	83 c4 10             	add    esp,0x10
c001fff4:	84 c0                	test   al,al
c001fff6:	75 31                	jne    c0020029 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001fff8:	50                   	push   eax
c001fff9:	50                   	push   eax
c001fffa:	6a 12                	push   0x12
c001fffc:	53                   	push   ebx
c001fffd:	e8 f2 a6 ff ff       	call   c001a6f4 <File::open(FileOpenMode)>
c0020002:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020004:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0020007:	89 34 24             	mov    DWORD PTR [esp],esi
c002000a:	e8 71 05 fe ff       	call   c0000580 <strlen>
c002000f:	5a                   	pop    edx
c0020010:	8d 54 24 20          	lea    edx,[esp+0x20]
c0020014:	52                   	push   edx
c0020015:	31 d2                	xor    edx,edx
c0020017:	56                   	push   esi
c0020018:	52                   	push   edx
c0020019:	50                   	push   eax
c002001a:	53                   	push   ebx
c002001b:	ff d7                	call   edi
c002001d:	83 c4 14             	add    esp,0x14
c0020020:	53                   	push   ebx
c0020021:	e8 2c a7 ff ff       	call   c001a752 <File::close()>
c0020026:	83 c4 10             	add    esp,0x10
c0020029:	56                   	push   esi
c002002a:	31 f6                	xor    esi,esi
c002002c:	68 00 01 00 00       	push   0x100
c0020031:	6a 00                	push   0x0
c0020033:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0020037:	50                   	push   eax
c0020038:	e8 b3 04 fe ff       	call   c00004f0 <memset>
c002003d:	5f                   	pop    edi
c002003e:	58                   	pop    eax
c002003f:	6a 01                	push   0x1
c0020041:	53                   	push   ebx
c0020042:	e8 ad a6 ff ff       	call   c001a6f4 <File::open(FileOpenMode)>
c0020047:	83 c4 10             	add    esp,0x10
c002004a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020052:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c002005a:	83 ec 0c             	sub    esp,0xc
c002005d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0020061:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020063:	52                   	push   edx
c0020064:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c0020068:	51                   	push   ecx
c0020069:	6a 00                	push   0x0
c002006b:	6a 01                	push   0x1
c002006d:	53                   	push   ebx
c002006e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0020071:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0020076:	83 c4 20             	add    esp,0x20
c0020079:	85 c0                	test   eax,eax
c002007b:	89 c1                	mov    ecx,eax
c002007d:	0f 84 36 01 00 00    	je     c00201b9 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0020083:	83 f8 0d             	cmp    eax,0xd
c0020086:	0f 84 22 01 00 00    	je     c00201ae <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c002008c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020091:	0f 84 f0 00 00 00    	je     c0020187 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0020097:	83 f8 0a             	cmp    eax,0xa
c002009a:	74 13                	je     c00200af <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c002009c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00200a1:	74 0c                	je     c00200af <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00200a3:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00200a9:	0f 8e f6 00 00 00    	jle    c00201a5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c00200af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00200b3:	83 ec 0c             	sub    esp,0xc
c00200b6:	8d 78 01             	lea    edi,[eax+0x1]
c00200b9:	57                   	push   edi
c00200ba:	e8 c9 65 ff ff       	call   c0016688 <malloc>
c00200bf:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00200c3:	8d 56 04             	lea    edx,[esi+0x4]
c00200c6:	89 14 24             	mov    DWORD PTR [esp],edx
c00200c9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00200cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00200d1:	e8 b2 65 ff ff       	call   c0016688 <malloc>
c00200d6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00200da:	83 c4 0c             	add    esp,0xc
c00200dd:	57                   	push   edi
c00200de:	6a 00                	push   0x0
c00200e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00200e4:	e8 07 04 fe ff       	call   c00004f0 <memset>
c00200e9:	8d 74 24 30          	lea    esi,[esp+0x30]
c00200ed:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00200f1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00200f5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00200f7:	83 c4 0c             	add    esp,0xc
c00200fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00200fe:	52                   	push   edx
c00200ff:	6a 00                	push   0x0
c0020101:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020105:	e8 e6 03 fe ff       	call   c00004f0 <memset>
c002010a:	8d 74 24 30          	lea    esi,[esp+0x30]
c002010e:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0020112:	89 34 24             	mov    DWORD PTR [esp],esi
c0020115:	e8 66 04 fe ff       	call   c0000580 <strlen>
c002011a:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c002011e:	89 c1                	mov    ecx,eax
c0020120:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020122:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0020125:	83 c4 10             	add    esp,0x10
c0020128:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c002012b:	40                   	inc    eax
c002012c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c002012f:	85 d2                	test   edx,edx
c0020131:	75 0c                	jne    c002013f <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0020133:	83 ec 0c             	sub    esp,0xc
c0020136:	6a 08                	push   0x8
c0020138:	e8 4b 65 ff ff       	call   c0016688 <malloc>
c002013d:	eb 0c                	jmp    c002014b <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c002013f:	51                   	push   ecx
c0020140:	51                   	push   ecx
c0020141:	c1 e0 03             	shl    eax,0x3
c0020144:	50                   	push   eax
c0020145:	52                   	push   edx
c0020146:	e8 29 65 ff ff       	call   c0016674 <realloc>
c002014b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c002014e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0020151:	83 c4 10             	add    esp,0x10
c0020154:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0020157:	8d 74 24 18          	lea    esi,[esp+0x18]
c002015b:	b9 08 00 00 00       	mov    ecx,0x8
c0020160:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0020164:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020166:	50                   	push   eax
c0020167:	31 f6                	xor    esi,esi
c0020169:	68 00 01 00 00       	push   0x100
c002016e:	6a 00                	push   0x0
c0020170:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0020174:	50                   	push   eax
c0020175:	e8 76 03 fe ff       	call   c00004f0 <memset>
c002017a:	83 c4 10             	add    esp,0x10
c002017d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020185:	eb 27                	jmp    c00201ae <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0020187:	83 f8 3d             	cmp    eax,0x3d
c002018a:	74 1e                	je     c00201aa <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c002018c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0020192:	7f 07                	jg     c002019b <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0020194:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c0020198:	46                   	inc    esi
c0020199:	eb 13                	jmp    c00201ae <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c002019b:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00201a3:	eb 09                	jmp    c00201ae <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00201a5:	83 f8 3d             	cmp    eax,0x3d
c00201a8:	75 ea                	jne    c0020194 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c00201aa:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00201ae:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00201b3:	0f 85 99 fe ff ff    	jne    c0020052 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00201b9:	83 ec 0c             	sub    esp,0xc
c00201bc:	53                   	push   ebx
c00201bd:	e8 90 a5 ff ff       	call   c001a752 <File::close()>
c00201c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00201c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00201c7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00201ca:	81 c4 3c 01 00 00    	add    esp,0x13c
c00201d0:	5b                   	pop    ebx
c00201d1:	5e                   	pop    esi
c00201d2:	5f                   	pop    edi
c00201d3:	5d                   	pop    ebp
c00201d4:	c3                   	ret    
c00201d5:	90                   	nop

c00201d6 <EnvVarContainer::__loadSystem()>:
c00201d6:	83 ec 10             	sub    esp,0x10
c00201d9:	68 00 4b 03 c0       	push   0xc0034b00
c00201de:	68 0c 31 03 c0       	push   0xc003310c
c00201e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201e7:	e8 c6 fd ff ff       	call   c001ffb2 <EnvVarContainer::loadFrom(char const*, char const*)>
c00201ec:	83 c4 1c             	add    esp,0x1c
c00201ef:	c3                   	ret    

c00201f0 <EnvVarContainer::__loadUser()>:
c00201f0:	c3                   	ret    
c00201f1:	90                   	nop

c00201f2 <EnvVarContainer::EnvVarContainer(Process*)>:
c00201f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201f6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00201fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020200:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020204:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020207:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002020b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020212:	90                   	nop
c0020213:	c3                   	ret    

c0020214 <EnvVarContainer::~EnvVarContainer()>:
c0020214:	83 ec 0c             	sub    esp,0xc
c0020217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002021b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002021e:	85 c0                	test   eax,eax
c0020220:	74 1d                	je     c002023f <EnvVarContainer::~EnvVarContainer()+0x2b>
c0020222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020226:	8b 00                	mov    eax,DWORD PTR [eax]
c0020228:	85 c0                	test   eax,eax
c002022a:	74 13                	je     c002023f <EnvVarContainer::~EnvVarContainer()+0x2b>
c002022c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020230:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020233:	83 ec 0c             	sub    esp,0xc
c0020236:	50                   	push   eax
c0020237:	e8 5c 64 ff ff       	call   c0016698 <free>
c002023c:	83 c4 10             	add    esp,0x10
c002023f:	90                   	nop
c0020240:	83 c4 0c             	add    esp,0xc
c0020243:	c3                   	ret    

c0020244 <KeGetEnv(Process*, char const*)>:
c0020244:	53                   	push   ebx
c0020245:	83 ec 08             	sub    esp,0x8
c0020248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002024c:	39 05 f8 11 04 c0    	cmp    DWORD PTR ds:0xc00411f8,eax
c0020252:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0020256:	74 04                	je     c002025c <KeGetEnv(Process*, char const*)+0x18>
c0020258:	85 c0                	test   eax,eax
c002025a:	75 0b                	jne    c0020267 <KeGetEnv(Process*, char const*)+0x23>
c002025c:	a1 80 09 04 c0       	mov    eax,ds:0xc0040980
c0020261:	85 c0                	test   eax,eax
c0020263:	75 19                	jne    c002027e <KeGetEnv(Process*, char const*)+0x3a>
c0020265:	eb 27                	jmp    c002028e <KeGetEnv(Process*, char const*)+0x4a>
c0020267:	52                   	push   edx
c0020268:	52                   	push   edx
c0020269:	53                   	push   ebx
c002026a:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0020270:	e8 3b fc ff ff       	call   c001feb0 <EnvVarContainer::getEnv(char const*)>
c0020275:	83 c4 10             	add    esp,0x10
c0020278:	85 c0                	test   eax,eax
c002027a:	75 28                	jne    c00202a4 <KeGetEnv(Process*, char const*)+0x60>
c002027c:	eb de                	jmp    c002025c <KeGetEnv(Process*, char const*)+0x18>
c002027e:	52                   	push   edx
c002027f:	52                   	push   edx
c0020280:	53                   	push   ebx
c0020281:	50                   	push   eax
c0020282:	e8 29 fc ff ff       	call   c001feb0 <EnvVarContainer::getEnv(char const*)>
c0020287:	83 c4 10             	add    esp,0x10
c002028a:	85 c0                	test   eax,eax
c002028c:	75 16                	jne    c00202a4 <KeGetEnv(Process*, char const*)+0x60>
c002028e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0020292:	a1 84 09 04 c0       	mov    eax,ds:0xc0040984
c0020297:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002029b:	83 c4 08             	add    esp,0x8
c002029e:	5b                   	pop    ebx
c002029f:	e9 0c fc ff ff       	jmp    c001feb0 <EnvVarContainer::getEnv(char const*)>
c00202a4:	83 c4 08             	add    esp,0x8
c00202a7:	5b                   	pop    ebx
c00202a8:	c3                   	ret    

c00202a9 <KeSetEnvSystem(char const*, char const*)>:
c00202a9:	83 ec 10             	sub    esp,0x10
c00202ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00202b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00202b4:	ff 35 84 09 04 c0    	push   DWORD PTR ds:0xc0040984
c00202ba:	e8 2f fc ff ff       	call   c001feee <EnvVarContainer::setEnv(char const*, char const*)>
c00202bf:	83 c4 1c             	add    esp,0x1c
c00202c2:	c3                   	ret    

c00202c3 <KeSetEnvUser(char const*, char const*)>:
c00202c3:	a1 80 09 04 c0       	mov    eax,ds:0xc0040980
c00202c8:	85 c0                	test   eax,eax
c00202ca:	74 15                	je     c00202e1 <KeSetEnvUser(char const*, char const*)+0x1e>
c00202cc:	83 ec 10             	sub    esp,0x10
c00202cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00202d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00202d7:	50                   	push   eax
c00202d8:	e8 11 fc ff ff       	call   c001feee <EnvVarContainer::setEnv(char const*, char const*)>
c00202dd:	83 c4 1c             	add    esp,0x1c
c00202e0:	c3                   	ret    
c00202e1:	c3                   	ret    

c00202e2 <KeSetEnvProcess(Process*, char const*, char const*)>:
c00202e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00202e6:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00202ec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00202f0:	e9 f9 fb ff ff       	jmp    c001feee <EnvVarContainer::setEnv(char const*, char const*)>

c00202f5 <KeDeleteEnvSystem(char const*)>:
c00202f5:	c3                   	ret    

c00202f6 <KeDeleteEnvUser(char const*)>:
c00202f6:	c3                   	ret    

c00202f7 <KeDeleteEnvProcess(Process*, char const*)>:
c00202f7:	c3                   	ret    

c00202f8 <KeNewProcessEnv(Process*)>:
c00202f8:	83 ec 28             	sub    esp,0x28
c00202fb:	6a 0c                	push   0xc
c00202fd:	e8 86 63 ff ff       	call   c0016688 <malloc>
c0020302:	5a                   	pop    edx
c0020303:	59                   	pop    ecx
c0020304:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020308:	50                   	push   eax
c0020309:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002030d:	e8 e0 fe ff ff       	call   c00201f2 <EnvVarContainer::EnvVarContainer(Process*)>
c0020312:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020316:	83 c4 2c             	add    esp,0x2c
c0020319:	c3                   	ret    

c002031a <KeCopyProcessEnv(Process*, Process*)>:
c002031a:	57                   	push   edi
c002031b:	56                   	push   esi
c002031c:	53                   	push   ebx
c002031d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020321:	83 ec 0c             	sub    esp,0xc
c0020324:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c002032a:	6a 0c                	push   0xc
c002032c:	e8 57 63 ff ff       	call   c0016688 <malloc>
c0020331:	89 c3                	mov    ebx,eax
c0020333:	58                   	pop    eax
c0020334:	5a                   	pop    edx
c0020335:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020339:	53                   	push   ebx
c002033a:	e8 b3 fe ff ff       	call   c00201f2 <EnvVarContainer::EnvVarContainer(Process*)>
c002033f:	8b 07                	mov    eax,DWORD PTR [edi]
c0020341:	89 03                	mov    DWORD PTR [ebx],eax
c0020343:	c1 e0 03             	shl    eax,0x3
c0020346:	89 04 24             	mov    DWORD PTR [esp],eax
c0020349:	e8 3a 63 ff ff       	call   c0016688 <malloc>
c002034e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0020351:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0020353:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0020356:	89 c7                	mov    edi,eax
c0020358:	c1 e1 03             	shl    ecx,0x3
c002035b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002035d:	83 c4 10             	add    esp,0x10
c0020360:	89 d8                	mov    eax,ebx
c0020362:	5b                   	pop    ebx
c0020363:	5e                   	pop    esi
c0020364:	5f                   	pop    edi
c0020365:	c3                   	ret    

c0020366 <KeLoadSystemEnv()>:
c0020366:	53                   	push   ebx
c0020367:	83 ec 14             	sub    esp,0x14
c002036a:	6a 0c                	push   0xc
c002036c:	e8 17 63 ff ff       	call   c0016688 <malloc>
c0020371:	89 c3                	mov    ebx,eax
c0020373:	58                   	pop    eax
c0020374:	5a                   	pop    edx
c0020375:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c002037b:	53                   	push   ebx
c002037c:	e8 71 fe ff ff       	call   c00201f2 <EnvVarContainer::EnvVarContainer(Process*)>
c0020381:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020384:	89 1d 84 09 04 c0    	mov    DWORD PTR ds:0xc0040984,ebx
c002038a:	e8 47 fe ff ff       	call   c00201d6 <EnvVarContainer::__loadSystem()>
c002038f:	83 c4 18             	add    esp,0x18
c0020392:	5b                   	pop    ebx
c0020393:	c3                   	ret    

c0020394 <KeLoadUserEnv()>:
c0020394:	53                   	push   ebx
c0020395:	83 ec 14             	sub    esp,0x14
c0020398:	6a 0c                	push   0xc
c002039a:	e8 e9 62 ff ff       	call   c0016688 <malloc>
c002039f:	89 c3                	mov    ebx,eax
c00203a1:	58                   	pop    eax
c00203a2:	5a                   	pop    edx
c00203a3:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c00203a9:	53                   	push   ebx
c00203aa:	e8 43 fe ff ff       	call   c00201f2 <EnvVarContainer::EnvVarContainer(Process*)>
c00203af:	89 1d 80 09 04 c0    	mov    DWORD PTR ds:0xc0040980,ebx
c00203b5:	83 c4 18             	add    esp,0x18
c00203b8:	5b                   	pop    ebx
c00203b9:	c3                   	ret    

c00203ba <KeFlushEnv()>:
c00203ba:	c3                   	ret    

c00203bb <KeGetProcessTotalEnvCount(Process*)>:
c00203bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203bf:	8b 15 80 09 04 c0    	mov    edx,DWORD PTR ds:0xc0040980
c00203c5:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00203cb:	a1 84 09 04 c0       	mov    eax,ds:0xc0040984
c00203d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00203d2:	03 01                	add    eax,DWORD PTR [ecx]
c00203d4:	85 d2                	test   edx,edx
c00203d6:	74 02                	je     c00203da <KeGetProcessTotalEnvCount(Process*)+0x1f>
c00203d8:	03 02                	add    eax,DWORD PTR [edx]
c00203da:	c3                   	ret    

c00203db <KeGetProcessEnvPair(Process*, int)>:
c00203db:	57                   	push   edi
c00203dc:	56                   	push   esi
c00203dd:	8b 35 80 09 04 c0    	mov    esi,DWORD PTR ds:0xc0040980
c00203e3:	53                   	push   ebx
c00203e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00203e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00203ec:	85 f6                	test   esi,esi
c00203ee:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00203f2:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00203f8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00203fa:	75 16                	jne    c0020412 <KeGetProcessEnvPair(Process*, int)+0x37>
c00203fc:	39 c2                	cmp    edx,eax
c00203fe:	7c 16                	jl     c0020416 <KeGetProcessEnvPair(Process*, int)+0x3b>
c0020400:	8b 0d 84 09 04 c0    	mov    ecx,DWORD PTR ds:0xc0040984
c0020406:	8b 31                	mov    esi,DWORD PTR [ecx]
c0020408:	01 c6                	add    esi,eax
c002040a:	39 d6                	cmp    esi,edx
c002040c:	7e 3c                	jle    c002044a <KeGetProcessEnvPair(Process*, int)+0x6f>
c002040e:	29 c2                	sub    edx,eax
c0020410:	eb 04                	jmp    c0020416 <KeGetProcessEnvPair(Process*, int)+0x3b>
c0020412:	39 c2                	cmp    edx,eax
c0020414:	7d 05                	jge    c002041b <KeGetProcessEnvPair(Process*, int)+0x40>
c0020416:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0020419:	eb 20                	jmp    c002043b <KeGetProcessEnvPair(Process*, int)+0x60>
c002041b:	8b 3e                	mov    edi,DWORD PTR [esi]
c002041d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0020420:	39 d1                	cmp    ecx,edx
c0020422:	7e 04                	jle    c0020428 <KeGetProcessEnvPair(Process*, int)+0x4d>
c0020424:	29 c2                	sub    edx,eax
c0020426:	eb 10                	jmp    c0020438 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0020428:	8b 35 84 09 04 c0    	mov    esi,DWORD PTR ds:0xc0040984
c002042e:	03 0e                	add    ecx,DWORD PTR [esi]
c0020430:	39 d1                	cmp    ecx,edx
c0020432:	7e 16                	jle    c002044a <KeGetProcessEnvPair(Process*, int)+0x6f>
c0020434:	29 c2                	sub    edx,eax
c0020436:	29 fa                	sub    edx,edi
c0020438:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c002043b:	8d 14 d0             	lea    edx,[eax+edx*8]
c002043e:	8b 02                	mov    eax,DWORD PTR [edx]
c0020440:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0020443:	89 03                	mov    DWORD PTR [ebx],eax
c0020445:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0020448:	eb 1d                	jmp    c0020467 <KeGetProcessEnvPair(Process*, int)+0x8c>
c002044a:	83 ec 0c             	sub    esp,0xc
c002044d:	68 2e 31 03 c0       	push   0xc003312e
c0020452:	e8 ab 02 00 00       	call   c0020702 <KePanic(char const*)>
c0020457:	83 c4 10             	add    esp,0x10
c002045a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020460:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020467:	89 d8                	mov    eax,ebx
c0020469:	5b                   	pop    ebx
c002046a:	5e                   	pop    esi
c002046b:	5f                   	pop    edi
c002046c:	c2 04 00             	ret    0x4

c002046f <CPU::current()>:
c002046f:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0020474:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002047a:	c3                   	ret    

c002047b <operator new(unsigned long)>:
c002047b:	e9 08 62 ff ff       	jmp    c0016688 <malloc>

c0020480 <operator delete(void*)>:
c0020480:	e9 23 62 ff ff       	jmp    c00166a8 <rfree>

c0020485 <disableIRQs()>:
c0020485:	fa                   	cli    
c0020486:	c3                   	ret    

c0020487 <enableIRQs()>:
c0020487:	fb                   	sti    
c0020488:	c3                   	ret    

c0020489 <lockScheduler()>:
c0020489:	fa                   	cli    
c002048a:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c0020490:	c3                   	ret    

c0020491 <unlockScheduler()>:
c0020491:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020496:	48                   	dec    eax
c0020497:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c002049c:	75 01                	jne    c002049f <unlockScheduler()+0xe>
c002049e:	fb                   	sti    
c002049f:	c3                   	ret    

c00204a0 <lockStuff()>:
c00204a0:	fa                   	cli    
c00204a1:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c00204a7:	ff 05 cc 11 04 c0    	inc    DWORD PTR ds:0xc00411cc
c00204ad:	c3                   	ret    

c00204ae <unlockStuff()>:
c00204ae:	83 ec 0c             	sub    esp,0xc
c00204b1:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c00204b6:	48                   	dec    eax
c00204b7:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c00204bc:	75 18                	jne    c00204d6 <unlockStuff()+0x28>
c00204be:	83 3d c8 11 04 c0 00 	cmp    DWORD PTR ds:0xc00411c8,0x0
c00204c5:	74 0f                	je     c00204d6 <unlockStuff()+0x28>
c00204c7:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c00204d1:	e8 82 52 00 00       	call   c0025758 <schedule()>
c00204d6:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00204db:	48                   	dec    eax
c00204dc:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00204e1:	75 01                	jne    c00204e4 <unlockStuff()+0x36>
c00204e3:	fb                   	sti    
c00204e4:	83 c4 0c             	add    esp,0xc
c00204e7:	c3                   	ret    

c00204e8 <Virt::getAKernelVAS()>:
c00204e8:	a1 b0 ba 03 c0       	mov    eax,ds:0xc003bab0
c00204ed:	c3                   	ret    

c00204ee <__not_memcpy>:
c00204ee:	57                   	push   edi
c00204ef:	56                   	push   esi
c00204f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00204f4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00204f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00204fc:	89 c7                	mov    edi,eax
c00204fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020500:	5e                   	pop    esi
c0020501:	5f                   	pop    edi
c0020502:	c3                   	ret    
c0020503:	90                   	nop

c0020504 <KeMailboxTryPost(Mailbox*, void*)>:
c0020504:	83 ec 10             	sub    esp,0x10
c0020507:	fa                   	cli    
c0020508:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002050d:	83 c0 01             	add    eax,0x1
c0020510:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020515:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002051a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002051e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020521:	85 c0                	test   eax,eax
c0020523:	75 23                	jne    c0020548 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c0020525:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020529:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002052d:	89 10                	mov    DWORD PTR [eax],edx
c002052f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020533:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020536:	8d 50 01             	lea    edx,[eax+0x1]
c0020539:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002053d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020540:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0020545:	8d 76 00             	lea    esi,[esi+0x0]
c0020548:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002054d:	83 e8 01             	sub    eax,0x1
c0020550:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020555:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002055a:	85 c0                	test   eax,eax
c002055c:	75 02                	jne    c0020560 <KeMailboxTryPost(Mailbox*, void*)+0x5c>
c002055e:	fb                   	sti    
c002055f:	90                   	nop
c0020560:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0020564:	83 c4 10             	add    esp,0x10
c0020567:	c3                   	ret    

c0020568 <KeMailboxTryGet(Mailbox*, void**)>:
c0020568:	83 ec 10             	sub    esp,0x10
c002056b:	fa                   	cli    
c002056c:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020571:	83 c0 01             	add    eax,0x1
c0020574:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020579:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002057e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020582:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020585:	83 f8 01             	cmp    eax,0x1
c0020588:	75 22                	jne    c00205ac <KeMailboxTryGet(Mailbox*, void**)+0x44>
c002058a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002058e:	8b 10                	mov    edx,DWORD PTR [eax]
c0020590:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020594:	89 10                	mov    DWORD PTR [eax],edx
c0020596:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002059a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002059d:	8d 50 ff             	lea    edx,[eax-0x1]
c00205a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00205a4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00205a7:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00205ac:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00205b1:	83 e8 01             	sub    eax,0x1
c00205b4:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00205b9:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00205be:	85 c0                	test   eax,eax
c00205c0:	75 02                	jne    c00205c4 <KeMailboxTryGet(Mailbox*, void**)+0x5c>
c00205c2:	fb                   	sti    
c00205c3:	90                   	nop
c00205c4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00205c8:	83 c4 10             	add    esp,0x10
c00205cb:	c3                   	ret    

c00205cc <KeMailboxCreate()>:
c00205cc:	83 ec 1c             	sub    esp,0x1c
c00205cf:	83 ec 0c             	sub    esp,0xc
c00205d2:	6a 08                	push   0x8
c00205d4:	e8 af 60 ff ff       	call   c0016688 <malloc>
c00205d9:	83 c4 10             	add    esp,0x10
c00205dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00205e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00205e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00205ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00205ee:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00205f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00205f9:	83 c4 1c             	add    esp,0x1c
c00205fc:	c3                   	ret    
c00205fd:	8d 76 00             	lea    esi,[esi+0x0]

c0020600 <KeMailboxPost(Mailbox*, void*)>:
c0020600:	83 ec 1c             	sub    esp,0x1c
c0020603:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0020608:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002060c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0020610:	e8 ef fe ff ff       	call   c0020504 <KeMailboxTryPost(Mailbox*, void*)>
c0020615:	83 c4 08             	add    esp,0x8
c0020618:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002061c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0020620:	83 f0 01             	xor    eax,0x1
c0020623:	0f b6 c0             	movzx  eax,al
c0020626:	85 c0                	test   eax,eax
c0020628:	74 2a                	je     c0020654 <KeMailboxPost(Mailbox*, void*)+0x54>
c002062a:	fa                   	cli    
c002062b:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020630:	83 c0 01             	add    eax,0x1
c0020633:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020638:	e8 1b 51 00 00       	call   c0025758 <schedule()>
c002063d:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020642:	83 e8 01             	sub    eax,0x1
c0020645:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c002064a:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002064f:	85 c0                	test   eax,eax
c0020651:	75 01                	jne    c0020654 <KeMailboxPost(Mailbox*, void*)+0x54>
c0020653:	fb                   	sti    
c0020654:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0020659:	85 c0                	test   eax,eax
c002065b:	75 03                	jne    c0020660 <KeMailboxPost(Mailbox*, void*)+0x60>
c002065d:	eb a9                	jmp    c0020608 <KeMailboxPost(Mailbox*, void*)+0x8>
c002065f:	90                   	nop
c0020660:	90                   	nop
c0020661:	83 c4 1c             	add    esp,0x1c
c0020664:	c3                   	ret    
c0020665:	8d 76 00             	lea    esi,[esi+0x0]

c0020668 <KeMailboxGet(Mailbox*, void**)>:
c0020668:	83 ec 1c             	sub    esp,0x1c
c002066b:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0020670:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0020674:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0020678:	e8 eb fe ff ff       	call   c0020568 <KeMailboxTryGet(Mailbox*, void**)>
c002067d:	83 c4 08             	add    esp,0x8
c0020680:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0020684:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0020688:	83 f0 01             	xor    eax,0x1
c002068b:	0f b6 c0             	movzx  eax,al
c002068e:	85 c0                	test   eax,eax
c0020690:	74 2a                	je     c00206bc <KeMailboxGet(Mailbox*, void**)+0x54>
c0020692:	fa                   	cli    
c0020693:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020698:	83 c0 01             	add    eax,0x1
c002069b:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00206a0:	e8 b3 50 00 00       	call   c0025758 <schedule()>
c00206a5:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00206aa:	83 e8 01             	sub    eax,0x1
c00206ad:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00206b2:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00206b7:	85 c0                	test   eax,eax
c00206b9:	75 01                	jne    c00206bc <KeMailboxGet(Mailbox*, void**)+0x54>
c00206bb:	fb                   	sti    
c00206bc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00206c1:	85 c0                	test   eax,eax
c00206c3:	75 03                	jne    c00206c8 <KeMailboxGet(Mailbox*, void**)+0x60>
c00206c5:	eb a9                	jmp    c0020670 <KeMailboxGet(Mailbox*, void**)+0x8>
c00206c7:	90                   	nop
c00206c8:	90                   	nop
c00206c9:	83 c4 1c             	add    esp,0x1c
c00206cc:	c3                   	ret    
c00206cd:	8d 76 00             	lea    esi,[esi+0x0]

c00206d0 <KeMailboxDestroy(Mailbox*)>:
c00206d0:	83 ec 0c             	sub    esp,0xc
c00206d3:	83 ec 0c             	sub    esp,0xc
c00206d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206da:	e8 b9 5f ff ff       	call   c0016698 <free>
c00206df:	83 c4 10             	add    esp,0x10
c00206e2:	90                   	nop
c00206e3:	83 c4 0c             	add    esp,0xc
c00206e6:	c3                   	ret    
c00206e7:	90                   	nop

c00206e8 <Mutex::Mutex()>:
c00206e8:	83 ec 0c             	sub    esp,0xc
c00206eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206ef:	83 ec 08             	sub    esp,0x8
c00206f2:	6a 01                	push   0x1
c00206f4:	50                   	push   eax
c00206f5:	e8 ae 03 00 00       	call   c0020aa8 <Semaphore::Semaphore(int)>
c00206fa:	83 c4 10             	add    esp,0x10
c00206fd:	90                   	nop
c00206fe:	83 c4 0c             	add    esp,0xc
c0020701:	c3                   	ret    

c0020702 <KePanic(char const*)>:
c0020702:	c6 05 88 09 04 c0 01 	mov    BYTE PTR ds:0xc0040988,0x1
c0020709:	e9 19 6e 00 00       	jmp    c0027527 <HalPanic(char const*)>

c002070e <KePowerThread(void*)>:
c002070e:	83 ec 0c             	sub    esp,0xc
c0020711:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020716:	48                   	dec    eax
c0020717:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c002071c:	75 01                	jne    c002071f <KePowerThread(void*)+0x11>
c002071e:	fb                   	sti    
c002071f:	c6 05 a0 09 04 c0 00 	mov    BYTE PTR ds:0xc00409a0,0x0
c0020726:	83 ec 0c             	sub    esp,0xc
c0020729:	6a 0a                	push   0xa
c002072b:	e8 14 52 00 00       	call   c0025944 <sleep(unsigned int)>
c0020730:	83 c4 10             	add    esp,0x10
c0020733:	83 05 e4 09 04 c0 0a 	add    DWORD PTR ds:0xc00409e4,0xa
c002073a:	eb e3                	jmp    c002071f <KePowerThread(void*)+0x11>

c002073c <KeChangePowerSettings(PowerSettings)>:
c002073c:	57                   	push   edi
c002073d:	b9 09 00 00 00       	mov    ecx,0x9
c0020742:	56                   	push   esi
c0020743:	bf c0 09 04 c0       	mov    edi,0xc00409c0
c0020748:	fc                   	cld    
c0020749:	8d 74 24 0c          	lea    esi,[esp+0xc]
c002074d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002074f:	5e                   	pop    esi
c0020750:	5f                   	pop    edi
c0020751:	c3                   	ret    

c0020752 <KeUserIOReceived()>:
c0020752:	c7 05 e4 09 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00409e4,0x0
c002075c:	c3                   	ret    

c002075d <KeHandlePowerButton()>:
c002075d:	83 ec 0c             	sub    esp,0xc
c0020760:	a1 c0 09 04 c0       	mov    eax,ds:0xc00409c0
c0020765:	83 f8 02             	cmp    eax,0x2
c0020768:	75 10                	jne    c002077a <KeHandlePowerButton()+0x1d>
c002076a:	83 ec 0c             	sub    esp,0xc
c002076d:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0020773:	e8 0c 55 ff ff       	call   c0015c84 <Computer::shutdown()>
c0020778:	eb 11                	jmp    c002078b <KeHandlePowerButton()+0x2e>
c002077a:	48                   	dec    eax
c002077b:	75 11                	jne    c002078e <KeHandlePowerButton()+0x31>
c002077d:	83 ec 0c             	sub    esp,0xc
c0020780:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0020786:	e8 29 55 ff ff       	call   c0015cb4 <Computer::sleep()>
c002078b:	83 c4 10             	add    esp,0x10
c002078e:	83 c4 0c             	add    esp,0xc
c0020791:	c3                   	ret    

c0020792 <KeHandleSleepButton()>:
c0020792:	83 ec 0c             	sub    esp,0xc
c0020795:	a1 c4 09 04 c0       	mov    eax,ds:0xc00409c4
c002079a:	83 f8 02             	cmp    eax,0x2
c002079d:	75 10                	jne    c00207af <KeHandleSleepButton()+0x1d>
c002079f:	83 ec 0c             	sub    esp,0xc
c00207a2:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c00207a8:	e8 d7 54 ff ff       	call   c0015c84 <Computer::shutdown()>
c00207ad:	eb 11                	jmp    c00207c0 <KeHandleSleepButton()+0x2e>
c00207af:	48                   	dec    eax
c00207b0:	75 11                	jne    c00207c3 <KeHandleSleepButton()+0x31>
c00207b2:	83 ec 0c             	sub    esp,0xc
c00207b5:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c00207bb:	e8 f4 54 ff ff       	call   c0015cb4 <Computer::sleep()>
c00207c0:	83 c4 10             	add    esp,0x10
c00207c3:	83 c4 0c             	add    esp,0xc
c00207c6:	c3                   	ret    

c00207c7 <KeSetupPowerManager()>:
c00207c7:	83 ec 0c             	sub    esp,0xc
c00207ca:	68 f0 00 00 00       	push   0xf0
c00207cf:	6a 00                	push   0x0
c00207d1:	68 0e 07 02 c0       	push   0xc002070e
c00207d6:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c00207dc:	c7 05 e4 09 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00409e4,0x0
c00207e6:	c6 05 a0 09 04 c0 00 	mov    BYTE PTR ds:0xc00409a0,0x0
c00207ed:	e8 1a 4d 00 00       	call   c002550c <Process::createThread(void (*)(void*), void*, int)>
c00207f2:	c7 05 c0 09 04 c0 02 00 00 00 	mov    DWORD PTR ds:0xc00409c0,0x2
c00207fc:	c7 05 c4 09 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00409c4,0x1
c0020806:	c7 05 c8 09 04 c0 03 00 00 00 	mov    DWORD PTR ds:0xc00409c8,0x3
c0020810:	c7 05 cc 09 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00409cc,0x0
c002081a:	c7 05 d8 09 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00409d8,0x0
c0020824:	c7 05 d0 09 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00409d0,0x0
c002082e:	c7 05 dc 09 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00409dc,0x0
c0020838:	c7 05 d4 09 04 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00409d4,0x3c
c0020842:	c7 05 e0 09 04 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00409e0,0x3c
c002084c:	83 c4 1c             	add    esp,0x1c
c002084f:	c3                   	ret    

c0020850 <KeRand()>:
c0020850:	69 05 e8 09 04 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc00409e8,0x2875
c002085a:	69 0d ec 09 04 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc00409ec,0xa2e7b175
c0020864:	53                   	push   ebx
c0020865:	01 c1                	add    ecx,eax
c0020867:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c002086c:	f7 25 e8 09 04 c0    	mul    DWORD PTR ds:0xc00409e8
c0020872:	01 ca                	add    edx,ecx
c0020874:	05 ef 04 b5 00       	add    eax,0xb504ef
c0020879:	a3 e8 09 04 c0       	mov    ds:0xc00409e8,eax
c002087e:	83 d2 00             	adc    edx,0x0
c0020881:	0f b7 da             	movzx  ebx,dx
c0020884:	89 1d ec 09 04 c0    	mov    DWORD PTR ds:0xc00409ec,ebx
c002088a:	0f ac d8 0e          	shrd   eax,ebx,0xe
c002088e:	5b                   	pop    ebx
c002088f:	c3                   	ret    

c0020890 <KeSeedRand(unsigned int)>:
c0020890:	53                   	push   ebx
c0020891:	83 ec 08             	sub    esp,0x8
c0020894:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020898:	e8 ab 6e 00 00       	call   c0027748 <HalGetRand()>
c002089d:	c7 05 ec 09 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00409ec,0x0
c00208a7:	31 d8                	xor    eax,ebx
c00208a9:	a3 e8 09 04 c0       	mov    ds:0xc00409e8,eax
c00208ae:	e8 9d ff ff ff       	call   c0020850 <KeRand()>
c00208b3:	83 c4 08             	add    esp,0x8
c00208b6:	5b                   	pop    ebx
c00208b7:	eb 97                	jmp    c0020850 <KeRand()>

c00208b9 <KeInitRand()>:
c00208b9:	83 ec 0c             	sub    esp,0xc
c00208bc:	e8 7c 6c 00 00       	call   c002753d <HalQueryPerformanceCounter()>
c00208c1:	0f 20 da             	mov    edx,cr3
c00208c4:	0f 22 da             	mov    cr3,edx
c00208c7:	0f 20 da             	mov    edx,cr3
c00208ca:	0f 22 da             	mov    cr3,edx
c00208cd:	0f 20 da             	mov    edx,cr3
c00208d0:	0f 22 da             	mov    cr3,edx
c00208d3:	0f 20 da             	mov    edx,cr3
c00208d6:	0f 22 da             	mov    cr3,edx
c00208d9:	83 ec 0c             	sub    esp,0xc
c00208dc:	35 03 8a 95 38       	xor    eax,0x38958a03
c00208e1:	50                   	push   eax
c00208e2:	e8 a9 ff ff ff       	call   c0020890 <KeSeedRand(unsigned int)>
c00208e7:	83 c4 1c             	add    esp,0x1c
c00208ea:	c3                   	ret    
c00208eb:	90                   	nop

c00208ec <KeResolveCompatibilitySymbol(char*)>:
c00208ec:	83 ec 0c             	sub    esp,0xc
c00208ef:	83 ec 08             	sub    esp,0x8
c00208f2:	68 48 31 03 c0       	push   0xc0033148
c00208f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208fb:	e8 80 fe fd ff       	call   c0000780 <strcmp>
c0020900:	83 c4 10             	add    esp,0x10
c0020903:	85 c0                	test   eax,eax
c0020905:	0f 94 c0             	sete   al
c0020908:	0f b6 c0             	movzx  eax,al
c002090b:	85 c0                	test   eax,eax
c002090d:	74 0d                	je     c002091c <KeResolveCompatibilitySymbol(char*)+0x30>
c002090f:	b8 bc b9 03 c0       	mov    eax,0xc003b9bc
c0020914:	e9 8b 01 00 00       	jmp    c0020aa4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020919:	8d 76 00             	lea    esi,[esi+0x0]
c002091c:	83 ec 08             	sub    esp,0x8
c002091f:	68 51 31 03 c0       	push   0xc0033151
c0020924:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020928:	e8 53 fe fd ff       	call   c0000780 <strcmp>
c002092d:	83 c4 10             	add    esp,0x10
c0020930:	85 c0                	test   eax,eax
c0020932:	0f 94 c0             	sete   al
c0020935:	0f b6 c0             	movzx  eax,al
c0020938:	85 c0                	test   eax,eax
c002093a:	74 0c                	je     c0020948 <KeResolveCompatibilitySymbol(char*)+0x5c>
c002093c:	b8 b0 ee 02 c0       	mov    eax,0xc002eeb0
c0020941:	e9 5e 01 00 00       	jmp    c0020aa4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020946:	66 90                	xchg   ax,ax
c0020948:	83 ec 08             	sub    esp,0x8
c002094b:	68 5b 31 03 c0       	push   0xc003315b
c0020950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020954:	e8 27 fe fd ff       	call   c0000780 <strcmp>
c0020959:	83 c4 10             	add    esp,0x10
c002095c:	85 c0                	test   eax,eax
c002095e:	0f 94 c0             	sete   al
c0020961:	0f b6 c0             	movzx  eax,al
c0020964:	85 c0                	test   eax,eax
c0020966:	74 0c                	je     c0020974 <KeResolveCompatibilitySymbol(char*)+0x88>
c0020968:	b8 e4 eb 02 c0       	mov    eax,0xc002ebe4
c002096d:	e9 32 01 00 00       	jmp    c0020aa4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020972:	66 90                	xchg   ax,ax
c0020974:	83 ec 08             	sub    esp,0x8
c0020977:	68 64 31 03 c0       	push   0xc0033164
c002097c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020980:	e8 fb fd fd ff       	call   c0000780 <strcmp>
c0020985:	83 c4 10             	add    esp,0x10
c0020988:	85 c0                	test   eax,eax
c002098a:	0f 94 c0             	sete   al
c002098d:	0f b6 c0             	movzx  eax,al
c0020990:	85 c0                	test   eax,eax
c0020992:	74 0c                	je     c00209a0 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0020994:	b8 02 07 02 c0       	mov    eax,0xc0020702
c0020999:	e9 06 01 00 00       	jmp    c0020aa4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002099e:	66 90                	xchg   ax,ax
c00209a0:	83 ec 08             	sub    esp,0x8
c00209a3:	68 77 31 03 c0       	push   0xc0033177
c00209a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00209ac:	e8 cf fd fd ff       	call   c0000780 <strcmp>
c00209b1:	83 c4 10             	add    esp,0x10
c00209b4:	85 c0                	test   eax,eax
c00209b6:	0f 94 c0             	sete   al
c00209b9:	0f b6 c0             	movzx  eax,al
c00209bc:	85 c0                	test   eax,eax
c00209be:	74 0c                	je     c00209cc <KeResolveCompatibilitySymbol(char*)+0xe0>
c00209c0:	b8 9d fd 01 c0       	mov    eax,0xc001fd9d
c00209c5:	e9 da 00 00 00       	jmp    c0020aa4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00209ca:	66 90                	xchg   ax,ax
c00209cc:	83 ec 08             	sub    esp,0x8
c00209cf:	68 94 31 03 c0       	push   0xc0033194
c00209d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00209d8:	e8 a3 fd fd ff       	call   c0000780 <strcmp>
c00209dd:	83 c4 10             	add    esp,0x10
c00209e0:	85 c0                	test   eax,eax
c00209e2:	0f 94 c0             	sete   al
c00209e5:	0f b6 c0             	movzx  eax,al
c00209e8:	85 c0                	test   eax,eax
c00209ea:	74 0c                	je     c00209f8 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00209ec:	b8 b0 ef 02 c0       	mov    eax,0xc002efb0
c00209f1:	e9 ae 00 00 00       	jmp    c0020aa4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00209f6:	66 90                	xchg   ax,ax
c00209f8:	83 ec 08             	sub    esp,0x8
c00209fb:	68 9e 31 03 c0       	push   0xc003319e
c0020a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a04:	e8 77 fd fd ff       	call   c0000780 <strcmp>
c0020a09:	83 c4 10             	add    esp,0x10
c0020a0c:	85 c0                	test   eax,eax
c0020a0e:	0f 94 c0             	sete   al
c0020a11:	0f b6 c0             	movzx  eax,al
c0020a14:	85 c0                	test   eax,eax
c0020a16:	74 0c                	je     c0020a24 <KeResolveCompatibilitySymbol(char*)+0x138>
c0020a18:	b8 30 ed 02 c0       	mov    eax,0xc002ed30
c0020a1d:	e9 82 00 00 00       	jmp    c0020aa4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020a22:	66 90                	xchg   ax,ax
c0020a24:	83 ec 08             	sub    esp,0x8
c0020a27:	68 a7 31 03 c0       	push   0xc00331a7
c0020a2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a30:	e8 4b fd fd ff       	call   c0000780 <strcmp>
c0020a35:	83 c4 10             	add    esp,0x10
c0020a38:	85 c0                	test   eax,eax
c0020a3a:	0f 94 c0             	sete   al
c0020a3d:	0f b6 c0             	movzx  eax,al
c0020a40:	85 c0                	test   eax,eax
c0020a42:	74 08                	je     c0020a4c <KeResolveCompatibilitySymbol(char*)+0x160>
c0020a44:	b8 c0 b9 03 c0       	mov    eax,0xc003b9c0
c0020a49:	eb 59                	jmp    c0020aa4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020a4b:	90                   	nop
c0020a4c:	83 ec 08             	sub    esp,0x8
c0020a4f:	68 bf 31 03 c0       	push   0xc00331bf
c0020a54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a58:	e8 23 fd fd ff       	call   c0000780 <strcmp>
c0020a5d:	83 c4 10             	add    esp,0x10
c0020a60:	85 c0                	test   eax,eax
c0020a62:	0f 94 c0             	sete   al
c0020a65:	0f b6 c0             	movzx  eax,al
c0020a68:	85 c0                	test   eax,eax
c0020a6a:	74 08                	je     c0020a74 <KeResolveCompatibilitySymbol(char*)+0x188>
c0020a6c:	b8 c0 b9 03 c0       	mov    eax,0xc003b9c0
c0020a71:	eb 31                	jmp    c0020aa4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020a73:	90                   	nop
c0020a74:	83 ec 08             	sub    esp,0x8
c0020a77:	68 cc 31 03 c0       	push   0xc00331cc
c0020a7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a80:	e8 fb fc fd ff       	call   c0000780 <strcmp>
c0020a85:	83 c4 10             	add    esp,0x10
c0020a88:	85 c0                	test   eax,eax
c0020a8a:	0f 94 c0             	sete   al
c0020a8d:	0f b6 c0             	movzx  eax,al
c0020a90:	85 c0                	test   eax,eax
c0020a92:	74 08                	je     c0020a9c <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0020a94:	b8 c1 b9 03 c0       	mov    eax,0xc003b9c1
c0020a99:	eb 09                	jmp    c0020aa4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020a9b:	90                   	nop
c0020a9c:	b8 00 00 00 00       	mov    eax,0x0
c0020aa1:	8d 76 00             	lea    esi,[esi+0x0]
c0020aa4:	83 c4 0c             	add    esp,0xc
c0020aa7:	c3                   	ret    

c0020aa8 <Semaphore::Semaphore(int)>:
c0020aa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020aac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020ab0:	89 10                	mov    DWORD PTR [eax],edx
c0020ab2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020ab6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0020abd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020ac1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020ac8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020acc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020ad3:	90                   	nop
c0020ad4:	c3                   	ret    
c0020ad5:	90                   	nop
c0020ad6:	66 90                	xchg   ax,ax

c0020ad8 <Semaphore::tryAcquire()>:
c0020ad8:	83 ec 0c             	sub    esp,0xc
c0020adb:	fa                   	cli    
c0020adc:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020ae1:	83 c0 01             	add    eax,0x1
c0020ae4:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020ae9:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020aee:	83 c0 01             	add    eax,0x1
c0020af1:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0020af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020afa:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b01:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b03:	39 c2                	cmp    edx,eax
c0020b05:	7d 5d                	jge    c0020b64 <Semaphore::tryAcquire()+0x8c>
c0020b07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020b0e:	8d 50 01             	lea    edx,[eax+0x1]
c0020b11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b15:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020b18:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020b1d:	83 e8 01             	sub    eax,0x1
c0020b20:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0020b25:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020b2a:	85 c0                	test   eax,eax
c0020b2c:	75 1a                	jne    c0020b48 <Semaphore::tryAcquire()+0x70>
c0020b2e:	a1 c8 11 04 c0       	mov    eax,ds:0xc00411c8
c0020b33:	85 c0                	test   eax,eax
c0020b35:	74 11                	je     c0020b48 <Semaphore::tryAcquire()+0x70>
c0020b37:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c0020b41:	e8 12 4c 00 00       	call   c0025758 <schedule()>
c0020b46:	66 90                	xchg   ax,ax
c0020b48:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020b4d:	83 e8 01             	sub    eax,0x1
c0020b50:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020b55:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020b5a:	85 c0                	test   eax,eax
c0020b5c:	75 02                	jne    c0020b60 <Semaphore::tryAcquire()+0x88>
c0020b5e:	fb                   	sti    
c0020b5f:	90                   	nop
c0020b60:	b0 01                	mov    al,0x1
c0020b62:	eb 4c                	jmp    c0020bb0 <Semaphore::tryAcquire()+0xd8>
c0020b64:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020b69:	83 e8 01             	sub    eax,0x1
c0020b6c:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0020b71:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020b76:	85 c0                	test   eax,eax
c0020b78:	75 1a                	jne    c0020b94 <Semaphore::tryAcquire()+0xbc>
c0020b7a:	a1 c8 11 04 c0       	mov    eax,ds:0xc00411c8
c0020b7f:	85 c0                	test   eax,eax
c0020b81:	74 11                	je     c0020b94 <Semaphore::tryAcquire()+0xbc>
c0020b83:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c0020b8d:	e8 c6 4b 00 00       	call   c0025758 <schedule()>
c0020b92:	66 90                	xchg   ax,ax
c0020b94:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020b99:	83 e8 01             	sub    eax,0x1
c0020b9c:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020ba1:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020ba6:	85 c0                	test   eax,eax
c0020ba8:	75 02                	jne    c0020bac <Semaphore::tryAcquire()+0xd4>
c0020baa:	fb                   	sti    
c0020bab:	90                   	nop
c0020bac:	b0 00                	mov    al,0x0
c0020bae:	66 90                	xchg   ax,ax
c0020bb0:	83 c4 0c             	add    esp,0xc
c0020bb3:	c3                   	ret    

c0020bb4 <Semaphore::assertLocked(char const*)>:
c0020bb4:	83 ec 0c             	sub    esp,0xc
c0020bb7:	fa                   	cli    
c0020bb8:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020bbd:	83 c0 01             	add    eax,0x1
c0020bc0:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020bc5:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020bca:	83 c0 01             	add    eax,0x1
c0020bcd:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0020bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bd6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020bd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0020bdf:	39 c2                	cmp    edx,eax
c0020be1:	7d 11                	jge    c0020bf4 <Semaphore::assertLocked(char const*)+0x40>
c0020be3:	83 ec 0c             	sub    esp,0xc
c0020be6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020bea:	e8 13 fb ff ff       	call   c0020702 <KePanic(char const*)>
c0020bef:	83 c4 10             	add    esp,0x10
c0020bf2:	66 90                	xchg   ax,ax
c0020bf4:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020bf9:	83 e8 01             	sub    eax,0x1
c0020bfc:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0020c01:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020c06:	85 c0                	test   eax,eax
c0020c08:	75 1a                	jne    c0020c24 <Semaphore::assertLocked(char const*)+0x70>
c0020c0a:	a1 c8 11 04 c0       	mov    eax,ds:0xc00411c8
c0020c0f:	85 c0                	test   eax,eax
c0020c11:	74 11                	je     c0020c24 <Semaphore::assertLocked(char const*)+0x70>
c0020c13:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c0020c1d:	e8 36 4b 00 00       	call   c0025758 <schedule()>
c0020c22:	66 90                	xchg   ax,ax
c0020c24:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020c29:	83 e8 01             	sub    eax,0x1
c0020c2c:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020c31:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020c36:	85 c0                	test   eax,eax
c0020c38:	75 02                	jne    c0020c3c <Semaphore::assertLocked(char const*)+0x88>
c0020c3a:	fb                   	sti    
c0020c3b:	90                   	nop
c0020c3c:	90                   	nop
c0020c3d:	83 c4 0c             	add    esp,0xc
c0020c40:	c3                   	ret    
c0020c41:	90                   	nop
c0020c42:	66 90                	xchg   ax,ax

c0020c44 <Semaphore::acquire(int)>:
c0020c44:	83 ec 1c             	sub    esp,0x1c
c0020c47:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020c4c:	0f 84 9a 00 00 00    	je     c0020cec <Semaphore::acquire(int)+0xa8>
c0020c52:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020c5a:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0020c5f:	90                   	nop
c0020c60:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0020c65:	85 c0                	test   eax,eax
c0020c67:	74 77                	je     c0020ce0 <Semaphore::acquire(int)+0x9c>
c0020c69:	83 ec 0c             	sub    esp,0xc
c0020c6c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020c70:	e8 63 fe ff ff       	call   c0020ad8 <Semaphore::tryAcquire()>
c0020c75:	83 c4 10             	add    esp,0x10
c0020c78:	83 f0 01             	xor    eax,0x1
c0020c7b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0020c7f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0020c83:	83 f0 01             	xor    eax,0x1
c0020c86:	0f b6 c0             	movzx  eax,al
c0020c89:	85 c0                	test   eax,eax
c0020c8b:	75 4f                	jne    c0020cdc <Semaphore::acquire(int)+0x98>
c0020c8d:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0020c92:	7f 2c                	jg     c0020cc0 <Semaphore::acquire(int)+0x7c>
c0020c94:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020c98:	89 d0                	mov    eax,edx
c0020c9a:	c1 e0 02             	shl    eax,0x2
c0020c9d:	01 d0                	add    eax,edx
c0020c9f:	d1 e0                	shl    eax,1
c0020ca1:	83 ec 0c             	sub    esp,0xc
c0020ca4:	50                   	push   eax
c0020ca5:	e8 86 4c 00 00       	call   c0025930 <milliTenthSleep(unsigned int)>
c0020caa:	83 c4 10             	add    esp,0x10
c0020cad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020cb1:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0020cb5:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0020cbd:	eb a1                	jmp    c0020c60 <Semaphore::acquire(int)+0x1c>
c0020cbf:	90                   	nop
c0020cc0:	83 ec 0c             	sub    esp,0xc
c0020cc3:	68 90 01 00 00       	push   0x190
c0020cc8:	e8 63 4c 00 00       	call   c0025930 <milliTenthSleep(unsigned int)>
c0020ccd:	83 c4 10             	add    esp,0x10
c0020cd0:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0020cd5:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0020cda:	eb 84                	jmp    c0020c60 <Semaphore::acquire(int)+0x1c>
c0020cdc:	90                   	nop
c0020cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0020ce0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ce4:	e9 ff 00 00 00       	jmp    c0020de8 <Semaphore::acquire(int)+0x1a4>
c0020ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0020cec:	fa                   	cli    
c0020ced:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020cf2:	83 c0 01             	add    eax,0x1
c0020cf5:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020cfa:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020cff:	83 c0 01             	add    eax,0x1
c0020d02:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0020d07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d0b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020d0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d12:	8b 00                	mov    eax,DWORD PTR [eax]
c0020d14:	39 c2                	cmp    edx,eax
c0020d16:	7d 14                	jge    c0020d2c <Semaphore::acquire(int)+0xe8>
c0020d18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d1c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020d1f:	8d 50 01             	lea    edx,[eax+0x1]
c0020d22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d26:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020d29:	eb 6d                	jmp    c0020d98 <Semaphore::acquire(int)+0x154>
c0020d2b:	90                   	nop
c0020d2c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020d31:	8b 00                	mov    eax,DWORD PTR [eax]
c0020d33:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020d3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020d41:	85 c0                	test   eax,eax
c0020d43:	75 13                	jne    c0020d58 <Semaphore::acquire(int)+0x114>
c0020d45:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020d4a:	8b 10                	mov    edx,DWORD PTR [eax]
c0020d4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d50:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020d53:	eb 17                	jmp    c0020d6c <Semaphore::acquire(int)+0x128>
c0020d55:	8d 76 00             	lea    esi,[esi+0x0]
c0020d58:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0020d5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d61:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020d64:	8b 12                	mov    edx,DWORD PTR [edx]
c0020d66:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0020d69:	8d 76 00             	lea    esi,[esi+0x0]
c0020d6c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020d71:	8b 10                	mov    edx,DWORD PTR [eax]
c0020d73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d77:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020d7a:	83 ec 0c             	sub    esp,0xc
c0020d7d:	68 dc 31 03 c0       	push   0xc00331dc
c0020d82:	e8 37 87 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0020d87:	83 c4 10             	add    esp,0x10
c0020d8a:	83 ec 0c             	sub    esp,0xc
c0020d8d:	6a 05                	push   0x5
c0020d8f:	e8 80 4a 00 00       	call   c0025814 <blockTask(TaskState)>
c0020d94:	83 c4 10             	add    esp,0x10
c0020d97:	90                   	nop
c0020d98:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020d9d:	83 e8 01             	sub    eax,0x1
c0020da0:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0020da5:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020daa:	85 c0                	test   eax,eax
c0020dac:	75 1a                	jne    c0020dc8 <Semaphore::acquire(int)+0x184>
c0020dae:	a1 c8 11 04 c0       	mov    eax,ds:0xc00411c8
c0020db3:	85 c0                	test   eax,eax
c0020db5:	74 11                	je     c0020dc8 <Semaphore::acquire(int)+0x184>
c0020db7:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c0020dc1:	e8 92 49 00 00       	call   c0025758 <schedule()>
c0020dc6:	66 90                	xchg   ax,ax
c0020dc8:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020dcd:	83 e8 01             	sub    eax,0x1
c0020dd0:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020dd5:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020dda:	85 c0                	test   eax,eax
c0020ddc:	75 02                	jne    c0020de0 <Semaphore::acquire(int)+0x19c>
c0020dde:	fb                   	sti    
c0020ddf:	90                   	nop
c0020de0:	b8 00 00 00 00       	mov    eax,0x0
c0020de5:	8d 76 00             	lea    esi,[esi+0x0]
c0020de8:	83 c4 1c             	add    esp,0x1c
c0020deb:	c3                   	ret    

c0020dec <Semaphore::acquire()>:
c0020dec:	83 ec 0c             	sub    esp,0xc
c0020def:	83 ec 08             	sub    esp,0x8
c0020df2:	6a 00                	push   0x0
c0020df4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020df8:	e8 47 fe ff ff       	call   c0020c44 <Semaphore::acquire(int)>
c0020dfd:	83 c4 10             	add    esp,0x10
c0020e00:	90                   	nop
c0020e01:	83 c4 0c             	add    esp,0xc
c0020e04:	c3                   	ret    
c0020e05:	90                   	nop
c0020e06:	66 90                	xchg   ax,ax

c0020e08 <Semaphore::release()>:
c0020e08:	83 ec 1c             	sub    esp,0x1c
c0020e0b:	fa                   	cli    
c0020e0c:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020e11:	83 c0 01             	add    eax,0x1
c0020e14:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020e19:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020e1e:	83 c0 01             	add    eax,0x1
c0020e21:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0020e26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020e2d:	85 c0                	test   eax,eax
c0020e2f:	74 2b                	je     c0020e5c <Semaphore::release()+0x54>
c0020e31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e35:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020e38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e40:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0020e43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e47:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020e4a:	83 ec 0c             	sub    esp,0xc
c0020e4d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020e51:	e8 ee 4b 00 00       	call   c0025a44 <unblockTask(ThreadControlBlock*)>
c0020e56:	83 c4 10             	add    esp,0x10
c0020e59:	eb 15                	jmp    c0020e70 <Semaphore::release()+0x68>
c0020e5b:	90                   	nop
c0020e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e60:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020e63:	8d 50 ff             	lea    edx,[eax-0x1]
c0020e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e6a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020e6d:	8d 76 00             	lea    esi,[esi+0x0]
c0020e70:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020e75:	83 e8 01             	sub    eax,0x1
c0020e78:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0020e7d:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0020e82:	85 c0                	test   eax,eax
c0020e84:	75 1a                	jne    c0020ea0 <Semaphore::release()+0x98>
c0020e86:	a1 c8 11 04 c0       	mov    eax,ds:0xc00411c8
c0020e8b:	85 c0                	test   eax,eax
c0020e8d:	74 11                	je     c0020ea0 <Semaphore::release()+0x98>
c0020e8f:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c0020e99:	e8 ba 48 00 00       	call   c0025758 <schedule()>
c0020e9e:	66 90                	xchg   ax,ax
c0020ea0:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020ea5:	83 e8 01             	sub    eax,0x1
c0020ea8:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0020ead:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0020eb2:	85 c0                	test   eax,eax
c0020eb4:	75 02                	jne    c0020eb8 <Semaphore::release()+0xb0>
c0020eb6:	fb                   	sti    
c0020eb7:	90                   	nop
c0020eb8:	90                   	nop
c0020eb9:	83 c4 1c             	add    esp,0x1c
c0020ebc:	c3                   	ret    

c0020ebd <KiSigKill(int)>:
c0020ebd:	83 ec 0c             	sub    esp,0xc
c0020ec0:	6a 00                	push   0x0
c0020ec2:	6a 00                	push   0x0
c0020ec4:	6a ff                	push   0xffffffff
c0020ec6:	6a 01                	push   0x1
c0020ec8:	e8 85 51 01 00       	call   c0036052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020ecd:	83 c4 1c             	add    esp,0x1c
c0020ed0:	c3                   	ret    

c0020ed1 <KiDefaultSignalHandlerIgnore(int)>:
c0020ed1:	c3                   	ret    

c0020ed2 <KiDefaultSignalHandlerPause(int)>:
c0020ed2:	57                   	push   edi
c0020ed3:	b9 07 00 00 00       	mov    ecx,0x7
c0020ed8:	56                   	push   esi
c0020ed9:	be 37 32 03 c0       	mov    esi,0xc0033237
c0020ede:	83 ec 24             	sub    esp,0x24
c0020ee1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020ee5:	fc                   	cld    
c0020ee6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020ee8:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020eec:	50                   	push   eax
c0020eed:	6a 00                	push   0x0
c0020eef:	6a 00                	push   0x0
c0020ef1:	6a 27                	push   0x27
c0020ef3:	e8 5a 51 01 00       	call   c0036052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020ef8:	83 c4 34             	add    esp,0x34
c0020efb:	5e                   	pop    esi
c0020efc:	5f                   	pop    edi
c0020efd:	c3                   	ret    

c0020efe <KiDefaultSignalHandlerResume(int)>:
c0020efe:	57                   	push   edi
c0020eff:	b9 1d 00 00 00       	mov    ecx,0x1d
c0020f04:	56                   	push   esi
c0020f05:	be 53 32 03 c0       	mov    esi,0xc0033253
c0020f0a:	83 ec 24             	sub    esp,0x24
c0020f0d:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0020f11:	fc                   	cld    
c0020f12:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020f14:	8d 44 24 03          	lea    eax,[esp+0x3]
c0020f18:	50                   	push   eax
c0020f19:	6a 00                	push   0x0
c0020f1b:	6a 00                	push   0x0
c0020f1d:	6a 27                	push   0x27
c0020f1f:	e8 2e 51 01 00       	call   c0036052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020f24:	83 c4 34             	add    esp,0x34
c0020f27:	5e                   	pop    esi
c0020f28:	5f                   	pop    edi
c0020f29:	c3                   	ret    

c0020f2a <KeDeinitSignals(SigHandlerBlock*)>:
c0020f2a:	e9 69 57 ff ff       	jmp    c0016698 <free>

c0020f2f <KeInitSignals()>:
c0020f2f:	53                   	push   ebx
c0020f30:	83 ec 14             	sub    esp,0x14
c0020f33:	68 c8 00 00 00       	push   0xc8
c0020f38:	e8 4b 57 ff ff       	call   c0016688 <malloc>
c0020f3d:	83 c4 0c             	add    esp,0xc
c0020f40:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0020f4a:	89 c3                	mov    ebx,eax
c0020f4c:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0020f56:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0020f5c:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c0020f60:	6a 20                	push   0x20
c0020f62:	6a 00                	push   0x0
c0020f64:	50                   	push   eax
c0020f65:	e8 86 f5 fd ff       	call   c00004f0 <memset>
c0020f6a:	83 c4 0c             	add    esp,0xc
c0020f6d:	6a 44                	push   0x44
c0020f6f:	6a 00                	push   0x0
c0020f71:	53                   	push   ebx
c0020f72:	e8 79 f5 fd ff       	call   c00004f0 <memset>
c0020f77:	83 c4 18             	add    esp,0x18
c0020f7a:	89 d8                	mov    eax,ebx
c0020f7c:	5b                   	pop    ebx
c0020f7d:	c3                   	ret    

c0020f7e <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0020f7e:	53                   	push   ebx
c0020f7f:	b8 01 00 00 00       	mov    eax,0x1
c0020f84:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020f88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020f8c:	83 f9 10             	cmp    ecx,0x10
c0020f8f:	7f 21                	jg     c0020fb2 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0020f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f95:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0020f98:	89 03                	mov    DWORD PTR [ebx],eax
c0020f9a:	b8 01 00 00 00       	mov    eax,0x1
c0020f9f:	d3 e0                	shl    eax,cl
c0020fa1:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0020fa5:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0020fa8:	31 c0                	xor    eax,eax
c0020faa:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0020fb2:	5b                   	pop    ebx
c0020fb3:	c3                   	ret    

c0020fb4 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0020fb4:	55                   	push   ebp
c0020fb5:	57                   	push   edi
c0020fb6:	bf 08 00 00 00       	mov    edi,0x8
c0020fbb:	56                   	push   esi
c0020fbc:	53                   	push   ebx
c0020fbd:	83 ec 18             	sub    esp,0x18
c0020fc0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020fc4:	68 70 32 03 c0       	push   0xc0033270
c0020fc9:	e8 f0 84 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0020fce:	83 c4 10             	add    esp,0x10
c0020fd1:	31 c9                	xor    ecx,ecx
c0020fd3:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0020fda:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0020fe0:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020fe4:	99                   	cdq    
c0020fe5:	f7 ff                	idiv   edi
c0020fe7:	8d 42 24             	lea    eax,[edx+0x24]
c0020fea:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0020fee:	85 f6                	test   esi,esi
c0020ff0:	75 1a                	jne    c002100c <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0020ff2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020ff6:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0020ffa:	50                   	push   eax
c0020ffb:	50                   	push   eax
c0020ffc:	52                   	push   edx
c0020ffd:	68 81 32 03 c0       	push   0xc0033281
c0021002:	e8 b7 84 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0021007:	83 c4 10             	add    esp,0x10
c002100a:	eb 1b                	jmp    c0021027 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c002100c:	41                   	inc    ecx
c002100d:	83 f9 08             	cmp    ecx,0x8
c0021010:	75 ce                	jne    c0020fe0 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0021012:	83 ec 0c             	sub    esp,0xc
c0021015:	be 01 00 00 00       	mov    esi,0x1
c002101a:	68 a2 32 03 c0       	push   0xc00332a2
c002101f:	e8 9a 84 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0021024:	83 c4 10             	add    esp,0x10
c0021027:	83 c4 0c             	add    esp,0xc
c002102a:	89 f0                	mov    eax,esi
c002102c:	5b                   	pop    ebx
c002102d:	5e                   	pop    esi
c002102e:	5f                   	pop    edi
c002102f:	5d                   	pop    ebp
c0021030:	c3                   	ret    

c0021031 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0021031:	55                   	push   ebp
c0021032:	57                   	push   edi
c0021033:	56                   	push   esi
c0021034:	53                   	push   ebx
c0021035:	51                   	push   ecx
c0021036:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002103a:	85 db                	test   ebx,ebx
c002103c:	0f 84 bc 00 00 00    	je     c00210fe <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0021042:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0021049:	0f 84 af 00 00 00    	je     c00210fe <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c002104f:	31 c9                	xor    ecx,ecx
c0021051:	bf 08 00 00 00       	mov    edi,0x8
c0021056:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c002105c:	8d 04 0e             	lea    eax,[esi+ecx*1]
c002105f:	99                   	cdq    
c0021060:	f7 ff                	idiv   edi
c0021062:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0021069:	85 ed                	test   ebp,ebp
c002106b:	0f 84 9e 00 00 00    	je     c002110f <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0021071:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0021077:	89 e9                	mov    ecx,ebp
c0021079:	bf 01 00 00 00       	mov    edi,0x1
c002107e:	d3 e7                	shl    edi,cl
c0021080:	31 c9                	xor    ecx,ecx
c0021082:	89 04 24             	mov    DWORD PTR [esp],eax
c0021085:	b8 01 00 00 00       	mov    eax,0x1
c002108a:	d3 e0                	shl    eax,cl
c002108c:	85 04 24             	test   DWORD PTR [esp],eax
c002108f:	74 06                	je     c0021097 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0021091:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0021095:	75 67                	jne    c00210fe <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0021097:	41                   	inc    ecx
c0021098:	83 f9 11             	cmp    ecx,0x11
c002109b:	75 e8                	jne    c0021085 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c002109d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00210a0:	46                   	inc    esi
c00210a1:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00210a7:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c00210b2:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00210b9:	09 f8                	or     eax,edi
c00210bb:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00210c1:	31 c0                	xor    eax,eax
c00210c3:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00210cb:	74 09                	je     c00210d6 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c00210cd:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00210d4:	eb 06                	jmp    c00210dc <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c00210d6:	40                   	inc    eax
c00210d7:	83 f8 08             	cmp    eax,0x8
c00210da:	75 e7                	jne    c00210c3 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c00210dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00210e0:	83 fd 09             	cmp    ebp,0x9
c00210e3:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c00210e6:	89 2a                	mov    DWORD PTR [edx],ebp
c00210e8:	75 07                	jne    c00210f1 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c00210ea:	b8 bd 0e 02 c0       	mov    eax,0xc0020ebd
c00210ef:	eb 31                	jmp    c0021122 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00210f1:	83 f8 01             	cmp    eax,0x1
c00210f4:	75 0c                	jne    c0021102 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c00210f6:	f7 d7                	not    edi
c00210f8:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c00210fe:	31 c0                	xor    eax,eax
c0021100:	eb 20                	jmp    c0021122 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0021102:	85 c0                	test   eax,eax
c0021104:	75 1c                	jne    c0021122 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0021106:	8b 04 ad 60 4b 03 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffcb4a0]
c002110d:	eb 13                	jmp    c0021122 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c002110f:	41                   	inc    ecx
c0021110:	46                   	inc    esi
c0021111:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0021117:	83 f9 08             	cmp    ecx,0x8
c002111a:	0f 85 36 ff ff ff    	jne    c0021056 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0021120:	eb dc                	jmp    c00210fe <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0021122:	5a                   	pop    edx
c0021123:	5b                   	pop    ebx
c0021124:	5e                   	pop    esi
c0021125:	5f                   	pop    edi
c0021126:	5d                   	pop    ebp
c0021127:	c3                   	ret    

c0021128 <KiCheckSignalZ>:
c0021128:	83 ec 10             	sub    esp,0x10
c002112b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002112f:	50                   	push   eax
c0021130:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021135:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021138:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c002113e:	e8 ee fe ff ff       	call   c0021031 <KeCheckSignal(SigHandlerBlock*, int*)>
c0021143:	5a                   	pop    edx
c0021144:	31 d2                	xor    edx,edx
c0021146:	59                   	pop    ecx
c0021147:	85 c0                	test   eax,eax
c0021149:	74 19                	je     c0021164 <KiCheckSignalZ+0x3c>
c002114b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0021151:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021154:	89 02                	mov    DWORD PTR [edx],eax
c0021156:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c002115d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021161:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0021164:	89 d0                	mov    eax,edx
c0021166:	83 c4 10             	add    esp,0x10
c0021169:	c3                   	ret    

c002116a <KeCompleteSignal(SigHandlerBlock*, int)>:
c002116a:	56                   	push   esi
c002116b:	53                   	push   ebx
c002116c:	bb 01 00 00 00       	mov    ebx,0x1
c0021171:	52                   	push   edx
c0021172:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021176:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002117a:	d3 e3                	shl    ebx,cl
c002117c:	83 f9 10             	cmp    ecx,0x10
c002117f:	7f 08                	jg     c0021189 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0021181:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0021187:	75 10                	jne    c0021199 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0021189:	83 ec 0c             	sub    esp,0xc
c002118c:	68 b3 32 03 c0       	push   0xc00332b3
c0021191:	e8 6c f5 ff ff       	call   c0020702 <KePanic(char const*)>
c0021196:	83 c4 10             	add    esp,0x10
c0021199:	f7 d3                	not    ebx
c002119b:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00211a1:	58                   	pop    eax
c00211a2:	5b                   	pop    ebx
c00211a3:	5e                   	pop    esi
c00211a4:	c3                   	ret    

c00211a5 <KiFinishSignalZ>:
c00211a5:	53                   	push   ebx
c00211a6:	83 ec 10             	sub    esp,0x10
c00211a9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00211ad:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c00211b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00211b5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00211b8:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00211be:	e8 a7 ff ff ff       	call   c002116a <KeCompleteSignal(SigHandlerBlock*, int)>
c00211c3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00211c9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00211d0:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00211d7:	83 c4 18             	add    esp,0x18
c00211da:	5b                   	pop    ebx
c00211db:	c3                   	ret    

c00211dc <SysSeekDir(regs*)>:
c00211dc:	31 c0                	xor    eax,eax
c00211de:	31 d2                	xor    edx,edx
c00211e0:	c3                   	ret    

c00211e1 <SysTellDir(regs*)>:
c00211e1:	31 c0                	xor    eax,eax
c00211e3:	31 d2                	xor    edx,edx
c00211e5:	c3                   	ret    

c00211e6 <SysVerify(regs*)>:
c00211e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211ea:	31 d2                	xor    edx,edx
c00211ec:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00211ef:	c3                   	ret    

c00211f0 <SysGetArgc(regs*)>:
c00211f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00211f5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00211f8:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00211fe:	89 c2                	mov    edx,eax
c0021200:	c1 fa 1f             	sar    edx,0x1f
c0021203:	c3                   	ret    

c0021204 <SysTTYName(regs*)>:
c0021204:	b8 01 00 00 00       	mov    eax,0x1
c0021209:	31 d2                	xor    edx,edx
c002120b:	c3                   	ret    

c002120c <SysFormatDisk(regs*)>:
c002120c:	56                   	push   esi
c002120d:	53                   	push   ebx
c002120e:	83 ec 04             	sub    esp,0x4
c0021211:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021215:	8b 1d 04 df 03 c0    	mov    ebx,DWORD PTR ds:0xc003df04
c002121b:	eb 2a                	jmp    c0021247 <SysFormatDisk(regs*)+0x3b>
c002121d:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0021220:	83 ec 0c             	sub    esp,0xc
c0021223:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0021226:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021228:	51                   	push   ecx
c0021229:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c002122c:	51                   	push   ecx
c002122d:	50                   	push   eax
c002122e:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c0021235:	50                   	push   eax
c0021236:	53                   	push   ebx
c0021237:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c002123a:	83 c4 20             	add    esp,0x20
c002123d:	83 f8 08             	cmp    eax,0x8
c0021240:	89 c1                	mov    ecx,eax
c0021242:	75 14                	jne    c0021258 <SysFormatDisk(regs*)+0x4c>
c0021244:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0021247:	85 db                	test   ebx,ebx
c0021249:	75 d2                	jne    c002121d <SysFormatDisk(regs*)+0x11>
c002124b:	b8 03 00 00 00       	mov    eax,0x3
c0021250:	31 d2                	xor    edx,edx
c0021252:	83 c4 04             	add    esp,0x4
c0021255:	5b                   	pop    ebx
c0021256:	5e                   	pop    esi
c0021257:	c3                   	ret    
c0021258:	85 c0                	test   eax,eax
c002125a:	74 13                	je     c002126f <SysFormatDisk(regs*)+0x63>
c002125c:	31 d2                	xor    edx,edx
c002125e:	83 f9 09             	cmp    ecx,0x9
c0021261:	b8 01 00 00 00       	mov    eax,0x1
c0021266:	74 ea                	je     c0021252 <SysFormatDisk(regs*)+0x46>
c0021268:	b8 02 00 00 00       	mov    eax,0x2
c002126d:	eb e1                	jmp    c0021250 <SysFormatDisk(regs*)+0x44>
c002126f:	31 c0                	xor    eax,eax
c0021271:	eb dd                	jmp    c0021250 <SysFormatDisk(regs*)+0x44>

c0021273 <SysSetDiskVolumeLabel(regs*)>:
c0021273:	56                   	push   esi
c0021274:	53                   	push   ebx
c0021275:	83 ec 04             	sub    esp,0x4
c0021278:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002127c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c002127f:	83 f8 19             	cmp    eax,0x19
c0021282:	77 33                	ja     c00212b7 <SysSetDiskVolumeLabel(regs*)+0x44>
c0021284:	8b 0c 85 80 03 04 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffbfc80]
c002128b:	85 c9                	test   ecx,ecx
c002128d:	74 28                	je     c00212b7 <SysSetDiskVolumeLabel(regs*)+0x44>
c002128f:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0021292:	85 db                	test   ebx,ebx
c0021294:	74 21                	je     c00212b7 <SysSetDiskVolumeLabel(regs*)+0x44>
c0021296:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c002129c:	85 d2                	test   edx,edx
c002129e:	74 17                	je     c00212b7 <SysSetDiskVolumeLabel(regs*)+0x44>
c00212a0:	8b 32                	mov    esi,DWORD PTR [edx]
c00212a2:	53                   	push   ebx
c00212a3:	50                   	push   eax
c00212a4:	51                   	push   ecx
c00212a5:	52                   	push   edx
c00212a6:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c00212a9:	83 c4 10             	add    esp,0x10
c00212ac:	83 c4 04             	add    esp,0x4
c00212af:	5b                   	pop    ebx
c00212b0:	5e                   	pop    esi
c00212b1:	89 c2                	mov    edx,eax
c00212b3:	c1 fa 1f             	sar    edx,0x1f
c00212b6:	c3                   	ret    
c00212b7:	83 c4 04             	add    esp,0x4
c00212ba:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00212bf:	5b                   	pop    ebx
c00212c0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00212c5:	5e                   	pop    esi
c00212c6:	c3                   	ret    

c00212c7 <SysGetDiskVolumeLabel(regs*)>:
c00212c7:	57                   	push   edi
c00212c8:	56                   	push   esi
c00212c9:	53                   	push   ebx
c00212ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212ce:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00212d1:	83 fa 19             	cmp    edx,0x19
c00212d4:	77 3c                	ja     c0021312 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00212d6:	8b 0c 95 80 03 04 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffbfc80]
c00212dd:	85 c9                	test   ecx,ecx
c00212df:	74 31                	je     c0021312 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00212e1:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00212e4:	85 db                	test   ebx,ebx
c00212e6:	74 2a                	je     c0021312 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00212e8:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00212eb:	85 f6                	test   esi,esi
c00212ed:	74 23                	je     c0021312 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00212ef:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c00212f5:	85 c0                	test   eax,eax
c00212f7:	74 19                	je     c0021312 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00212f9:	83 ec 0c             	sub    esp,0xc
c00212fc:	8b 38                	mov    edi,DWORD PTR [eax]
c00212fe:	56                   	push   esi
c00212ff:	53                   	push   ebx
c0021300:	52                   	push   edx
c0021301:	51                   	push   ecx
c0021302:	50                   	push   eax
c0021303:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0021306:	83 c4 20             	add    esp,0x20
c0021309:	5b                   	pop    ebx
c002130a:	5e                   	pop    esi
c002130b:	89 c2                	mov    edx,eax
c002130d:	c1 fa 1f             	sar    edx,0x1f
c0021310:	5f                   	pop    edi
c0021311:	c3                   	ret    
c0021312:	5b                   	pop    ebx
c0021313:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0021318:	ba ff ff ff ff       	mov    edx,0xffffffff
c002131d:	5e                   	pop    esi
c002131e:	5f                   	pop    edi
c002131f:	c3                   	ret    

c0021320 <SysShutdown(regs*)>:
c0021320:	57                   	push   edi
c0021321:	56                   	push   esi
c0021322:	83 ec 04             	sub    esp,0x4
c0021325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021329:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002132c:	85 c0                	test   eax,eax
c002132e:	74 1e                	je     c002134e <SysShutdown(regs*)+0x2e>
c0021330:	83 f8 01             	cmp    eax,0x1
c0021333:	74 5f                	je     c0021394 <SysShutdown(regs*)+0x74>
c0021335:	83 f8 02             	cmp    eax,0x2
c0021338:	be ff ff ff ff       	mov    esi,0xffffffff
c002133d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0021342:	74 32                	je     c0021376 <SysShutdown(regs*)+0x56>
c0021344:	83 c4 04             	add    esp,0x4
c0021347:	89 f0                	mov    eax,esi
c0021349:	5e                   	pop    esi
c002134a:	89 fa                	mov    edx,edi
c002134c:	5f                   	pop    edi
c002134d:	c3                   	ret    
c002134e:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0021353:	be ff ff ff ff       	mov    esi,0xffffffff
c0021358:	bf ff ff ff ff       	mov    edi,0xffffffff
c002135d:	8b 10                	mov    edx,DWORD PTR [eax]
c002135f:	6a 00                	push   0x0
c0021361:	6a 00                	push   0x0
c0021363:	6a 00                	push   0x0
c0021365:	50                   	push   eax
c0021366:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021369:	83 c4 10             	add    esp,0x10
c002136c:	89 f0                	mov    eax,esi
c002136e:	83 c4 04             	add    esp,0x4
c0021371:	89 fa                	mov    edx,edi
c0021373:	5e                   	pop    esi
c0021374:	5f                   	pop    edi
c0021375:	c3                   	ret    
c0021376:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c002137b:	8b 10                	mov    edx,DWORD PTR [eax]
c002137d:	6a 00                	push   0x0
c002137f:	6a 00                	push   0x0
c0021381:	6a 01                	push   0x1
c0021383:	50                   	push   eax
c0021384:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021387:	83 c4 10             	add    esp,0x10
c002138a:	89 f0                	mov    eax,esi
c002138c:	83 c4 04             	add    esp,0x4
c002138f:	89 fa                	mov    edx,edi
c0021391:	5e                   	pop    esi
c0021392:	5f                   	pop    edi
c0021393:	c3                   	ret    
c0021394:	a1 00 04 04 c0       	mov    eax,ds:0xc0040400
c0021399:	85 c0                	test   eax,eax
c002139b:	74 02                	je     c002139f <SysShutdown(regs*)+0x7f>
c002139d:	ff d0                	call   eax
c002139f:	31 f6                	xor    esi,esi
c00213a1:	83 c4 04             	add    esp,0x4
c00213a4:	89 f0                	mov    eax,esi
c00213a6:	31 ff                	xor    edi,edi
c00213a8:	5e                   	pop    esi
c00213a9:	89 fa                	mov    edx,edi
c00213ab:	5f                   	pop    edi
c00213ac:	c3                   	ret    

c00213ad <SysRealpath(regs*)>:
c00213ad:	53                   	push   ebx
c00213ae:	83 ec 08             	sub    esp,0x8
c00213b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213b5:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00213b8:	85 c9                	test   ecx,ecx
c00213ba:	74 36                	je     c00213f2 <SysRealpath(regs*)+0x45>
c00213bc:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00213bf:	31 d2                	xor    edx,edx
c00213c1:	b8 01 00 00 00       	mov    eax,0x1
c00213c6:	85 db                	test   ebx,ebx
c00213c8:	75 05                	jne    c00213cf <SysRealpath(regs*)+0x22>
c00213ca:	83 c4 08             	add    esp,0x8
c00213cd:	5b                   	pop    ebx
c00213ce:	c3                   	ret    
c00213cf:	6a 00                	push   0x0
c00213d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00213d6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00213d9:	05 0c 01 00 00       	add    eax,0x10c
c00213de:	50                   	push   eax
c00213df:	51                   	push   ecx
c00213e0:	53                   	push   ebx
c00213e1:	e8 e4 8f ff ff       	call   c001a3ca <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00213e6:	83 c4 10             	add    esp,0x10
c00213e9:	31 c0                	xor    eax,eax
c00213eb:	31 d2                	xor    edx,edx
c00213ed:	83 c4 08             	add    esp,0x8
c00213f0:	5b                   	pop    ebx
c00213f1:	c3                   	ret    
c00213f2:	b8 01 00 00 00       	mov    eax,0x1
c00213f7:	31 d2                	xor    edx,edx
c00213f9:	eb f2                	jmp    c00213ed <SysRealpath(regs*)+0x40>

c00213fb <SysReadDir(regs*)>:
c00213fb:	53                   	push   ebx
c00213fc:	83 ec 18             	sub    esp,0x18
c00213ff:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021403:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0021406:	83 f8 02             	cmp    eax,0x2
c0021409:	76 4f                	jbe    c002145a <SysReadDir(regs*)+0x5f>
c002140b:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0021412:	77 52                	ja     c0021466 <SysReadDir(regs*)+0x6b>
c0021414:	83 ec 0c             	sub    esp,0xc
c0021417:	50                   	push   eax
c0021418:	e8 32 6c ff ff       	call   c001804f <KeGetFileFromDescriptor(int)>
c002141d:	83 c4 10             	add    esp,0x10
c0021420:	85 c0                	test   eax,eax
c0021422:	74 42                	je     c0021466 <SysReadDir(regs*)+0x6b>
c0021424:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002142c:	83 ec 0c             	sub    esp,0xc
c002142f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0021433:	8b 10                	mov    edx,DWORD PTR [eax]
c0021435:	51                   	push   ecx
c0021436:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0021439:	51                   	push   ecx
c002143a:	6a 00                	push   0x0
c002143c:	68 10 01 00 00       	push   0x110
c0021441:	50                   	push   eax
c0021442:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021445:	83 c4 20             	add    esp,0x20
c0021448:	85 c0                	test   eax,eax
c002144a:	89 c1                	mov    ecx,eax
c002144c:	74 27                	je     c0021475 <SysReadDir(regs*)+0x7a>
c002144e:	31 d2                	xor    edx,edx
c0021450:	83 f9 07             	cmp    ecx,0x7
c0021453:	b8 02 00 00 00       	mov    eax,0x2
c0021458:	75 16                	jne    c0021470 <SysReadDir(regs*)+0x75>
c002145a:	b8 01 00 00 00       	mov    eax,0x1
c002145f:	31 d2                	xor    edx,edx
c0021461:	83 c4 18             	add    esp,0x18
c0021464:	5b                   	pop    ebx
c0021465:	c3                   	ret    
c0021466:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002146b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021470:	83 c4 18             	add    esp,0x18
c0021473:	5b                   	pop    ebx
c0021474:	c3                   	ret    
c0021475:	31 c0                	xor    eax,eax
c0021477:	31 d2                	xor    edx,edx
c0021479:	eb e6                	jmp    c0021461 <SysReadDir(regs*)+0x66>

c002147b <SysIsATTY(regs*)>:
c002147b:	83 ec 0c             	sub    esp,0xc
c002147e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021482:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021485:	83 f8 02             	cmp    eax,0x2
c0021488:	76 07                	jbe    c0021491 <SysIsATTY(regs*)+0x16>
c002148a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c002148f:	75 26                	jne    c00214b7 <SysIsATTY(regs*)+0x3c>
c0021491:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021496:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021499:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002149f:	85 c0                	test   eax,eax
c00214a1:	74 24                	je     c00214c7 <SysIsATTY(regs*)+0x4c>
c00214a3:	8b 10                	mov    edx,DWORD PTR [eax]
c00214a5:	83 ec 0c             	sub    esp,0xc
c00214a8:	50                   	push   eax
c00214a9:	ff 12                	call   DWORD PTR [edx]
c00214ab:	83 c4 10             	add    esp,0x10
c00214ae:	31 d2                	xor    edx,edx
c00214b0:	83 c4 0c             	add    esp,0xc
c00214b3:	0f b6 c0             	movzx  eax,al
c00214b6:	c3                   	ret    
c00214b7:	83 ec 0c             	sub    esp,0xc
c00214ba:	50                   	push   eax
c00214bb:	e8 8f 6b ff ff       	call   c001804f <KeGetFileFromDescriptor(int)>
c00214c0:	83 c4 10             	add    esp,0x10
c00214c3:	85 c0                	test   eax,eax
c00214c5:	75 dc                	jne    c00214a3 <SysIsATTY(regs*)+0x28>
c00214c7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00214cc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00214d1:	83 c4 0c             	add    esp,0xc
c00214d4:	c3                   	ret    

c00214d5 <SysSeek(regs*)>:
c00214d5:	56                   	push   esi
c00214d6:	53                   	push   ebx
c00214d7:	83 ec 04             	sub    esp,0x4
c00214da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00214de:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00214e1:	8d 71 fd             	lea    esi,[ecx-0x3]
c00214e4:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c00214ea:	77 33                	ja     c002151f <SysSeek(regs*)+0x4a>
c00214ec:	83 ec 0c             	sub    esp,0xc
c00214ef:	51                   	push   ecx
c00214f0:	e8 5a 6b ff ff       	call   c001804f <KeGetFileFromDescriptor(int)>
c00214f5:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00214f8:	83 c4 0c             	add    esp,0xc
c00214fb:	31 db                	xor    ebx,ebx
c00214fd:	53                   	push   ebx
c00214fe:	51                   	push   ecx
c00214ff:	50                   	push   eax
c0021500:	e8 ad 92 ff ff       	call   c001a7b2 <File::seek(unsigned long long)>
c0021505:	83 c4 10             	add    esp,0x10
c0021508:	85 c0                	test   eax,eax
c002150a:	0f 95 c0             	setne  al
c002150d:	31 d2                	xor    edx,edx
c002150f:	0f b6 c0             	movzx  eax,al
c0021512:	f7 d8                	neg    eax
c0021514:	83 d2 00             	adc    edx,0x0
c0021517:	83 c4 04             	add    esp,0x4
c002151a:	5b                   	pop    ebx
c002151b:	f7 da                	neg    edx
c002151d:	5e                   	pop    esi
c002151e:	c3                   	ret    
c002151f:	83 c4 04             	add    esp,0x4
c0021522:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021527:	5b                   	pop    ebx
c0021528:	ba ff ff ff ff       	mov    edx,0xffffffff
c002152d:	5e                   	pop    esi
c002152e:	c3                   	ret    

c002152f <SysTell(regs*)>:
c002152f:	53                   	push   ebx
c0021530:	83 ec 08             	sub    esp,0x8
c0021533:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021537:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002153a:	83 f8 02             	cmp    eax,0x2
c002153d:	76 4e                	jbe    c002158d <SysTell(regs*)+0x5e>
c002153f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021544:	76 19                	jbe    c002155f <SysTell(regs*)+0x30>
c0021546:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0021549:	31 d2                	xor    edx,edx
c002154b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021551:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021558:	83 c4 08             	add    esp,0x8
c002155b:	31 c0                	xor    eax,eax
c002155d:	5b                   	pop    ebx
c002155e:	c3                   	ret    
c002155f:	83 ec 0c             	sub    esp,0xc
c0021562:	50                   	push   eax
c0021563:	e8 e7 6a ff ff       	call   c001804f <KeGetFileFromDescriptor(int)>
c0021568:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c002156b:	5a                   	pop    edx
c002156c:	59                   	pop    ecx
c002156d:	53                   	push   ebx
c002156e:	50                   	push   eax
c002156f:	e8 ea 92 ff ff       	call   c001a85e <File::tell(unsigned long long*)>
c0021574:	83 c4 10             	add    esp,0x10
c0021577:	85 c0                	test   eax,eax
c0021579:	0f 95 c0             	setne  al
c002157c:	31 d2                	xor    edx,edx
c002157e:	0f b6 c0             	movzx  eax,al
c0021581:	f7 d8                	neg    eax
c0021583:	83 d2 00             	adc    edx,0x0
c0021586:	83 c4 08             	add    esp,0x8
c0021589:	5b                   	pop    ebx
c002158a:	f7 da                	neg    edx
c002158c:	c3                   	ret    
c002158d:	83 c4 08             	add    esp,0x8
c0021590:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021595:	5b                   	pop    ebx
c0021596:	ba ff ff ff ff       	mov    edx,0xffffffff
c002159b:	c3                   	ret    

c002159c <SysSize(regs*)>:
c002159c:	53                   	push   ebx
c002159d:	83 ec 18             	sub    esp,0x18
c00215a0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00215a4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00215a7:	83 f8 02             	cmp    eax,0x2
c00215aa:	76 54                	jbe    c0021600 <SysSize(regs*)+0x64>
c00215ac:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00215b1:	76 19                	jbe    c00215cc <SysSize(regs*)+0x30>
c00215b3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00215b6:	31 d2                	xor    edx,edx
c00215b8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00215be:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00215c5:	83 c4 18             	add    esp,0x18
c00215c8:	31 c0                	xor    eax,eax
c00215ca:	5b                   	pop    ebx
c00215cb:	c3                   	ret    
c00215cc:	83 ec 0c             	sub    esp,0xc
c00215cf:	50                   	push   eax
c00215d0:	e8 7a 6a ff ff       	call   c001804f <KeGetFileFromDescriptor(int)>
c00215d5:	83 c4 0c             	add    esp,0xc
c00215d8:	8d 54 24 13          	lea    edx,[esp+0x13]
c00215dc:	52                   	push   edx
c00215dd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00215e0:	52                   	push   edx
c00215e1:	50                   	push   eax
c00215e2:	e8 0f 94 ff ff       	call   c001a9f6 <File::stat(unsigned long long*, bool*)>
c00215e7:	83 c4 10             	add    esp,0x10
c00215ea:	85 c0                	test   eax,eax
c00215ec:	0f 95 c0             	setne  al
c00215ef:	31 d2                	xor    edx,edx
c00215f1:	0f b6 c0             	movzx  eax,al
c00215f4:	f7 d8                	neg    eax
c00215f6:	83 d2 00             	adc    edx,0x0
c00215f9:	83 c4 18             	add    esp,0x18
c00215fc:	5b                   	pop    ebx
c00215fd:	f7 da                	neg    edx
c00215ff:	c3                   	ret    
c0021600:	83 c4 18             	add    esp,0x18
c0021603:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021608:	5b                   	pop    ebx
c0021609:	ba ff ff ff ff       	mov    edx,0xffffffff
c002160e:	c3                   	ret    

c002160f <SysSizeFromFilename(regs*)>:
c002160f:	55                   	push   ebp
c0021610:	57                   	push   edi
c0021611:	56                   	push   esi
c0021612:	53                   	push   ebx
c0021613:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0021619:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0021620:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0021623:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0021626:	85 f6                	test   esi,esi
c0021628:	89 f8                	mov    eax,edi
c002162a:	74 09                	je     c0021635 <SysSizeFromFilename(regs*)+0x26>
c002162c:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0021632:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021635:	83 f8 02             	cmp    eax,0x2
c0021638:	0f 86 ca 00 00 00    	jbe    c0021708 <SysSizeFromFilename(regs*)+0xf9>
c002163e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021643:	76 1f                	jbe    c0021664 <SysSizeFromFilename(regs*)+0x55>
c0021645:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0021648:	31 d2                	xor    edx,edx
c002164a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021650:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021657:	31 c0                	xor    eax,eax
c0021659:	81 c4 4c 02 00 00    	add    esp,0x24c
c002165f:	5b                   	pop    ebx
c0021660:	5e                   	pop    esi
c0021661:	5f                   	pop    edi
c0021662:	5d                   	pop    ebp
c0021663:	c3                   	ret    
c0021664:	83 ec 0c             	sub    esp,0xc
c0021667:	68 14 01 00 00       	push   0x114
c002166c:	e8 17 50 ff ff       	call   c0016688 <malloc>
c0021671:	6a 01                	push   0x1
c0021673:	89 c5                	mov    ebp,eax
c0021675:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002167a:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c002167d:	51                   	push   ecx
c002167e:	57                   	push   edi
c002167f:	55                   	push   ebp
c0021680:	e8 73 8f ff ff       	call   c001a5f8 <File::File(char const*, Process*, bool)>
c0021685:	83 c4 1c             	add    esp,0x1c
c0021688:	8d 44 24 13          	lea    eax,[esp+0x13]
c002168c:	50                   	push   eax
c002168d:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0021690:	53                   	push   ebx
c0021691:	55                   	push   ebp
c0021692:	e8 5f 93 ff ff       	call   c001a9f6 <File::stat(unsigned long long*, bool*)>
c0021697:	83 c4 10             	add    esp,0x10
c002169a:	85 ed                	test   ebp,ebp
c002169c:	89 c3                	mov    ebx,eax
c002169e:	74 0d                	je     c00216ad <SysSizeFromFilename(regs*)+0x9e>
c00216a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00216a3:	83 ec 0c             	sub    esp,0xc
c00216a6:	55                   	push   ebp
c00216a7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00216aa:	83 c4 10             	add    esp,0x10
c00216ad:	85 db                	test   ebx,ebx
c00216af:	75 57                	jne    c0021708 <SysSizeFromFilename(regs*)+0xf9>
c00216b1:	6a 00                	push   0x0
c00216b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00216b8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00216bb:	05 0c 01 00 00       	add    eax,0x10c
c00216c0:	50                   	push   eax
c00216c1:	57                   	push   edi
c00216c2:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00216c9:	53                   	push   ebx
c00216ca:	e8 fb 8c ff ff       	call   c001a3ca <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00216cf:	58                   	pop    eax
c00216d0:	5a                   	pop    edx
c00216d1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00216d5:	50                   	push   eax
c00216d6:	53                   	push   ebx
c00216d7:	e8 56 87 ff ff       	call   c0019e32 <KeDereferenceSymlink(char const*, char*)>
c00216dc:	83 c4 10             	add    esp,0x10
c00216df:	ba 00 00 00 00       	mov    edx,0x0
c00216e4:	83 f8 01             	cmp    eax,0x1
c00216e7:	b8 00 00 00 00       	mov    eax,0x0
c00216ec:	74 2f                	je     c002171d <SysSizeFromFilename(regs*)+0x10e>
c00216ee:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00216f3:	74 3b                	je     c0021730 <SysSizeFromFilename(regs*)+0x121>
c00216f5:	85 f6                	test   esi,esi
c00216f7:	0f 84 5c ff ff ff    	je     c0021659 <SysSizeFromFilename(regs*)+0x4a>
c00216fd:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0021703:	e9 51 ff ff ff       	jmp    c0021659 <SysSizeFromFilename(regs*)+0x4a>
c0021708:	81 c4 4c 02 00 00    	add    esp,0x24c
c002170e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021713:	5b                   	pop    ebx
c0021714:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021719:	5e                   	pop    esi
c002171a:	5f                   	pop    edi
c002171b:	5d                   	pop    ebp
c002171c:	c3                   	ret    
c002171d:	85 f6                	test   esi,esi
c002171f:	0f 84 34 ff ff ff    	je     c0021659 <SysSizeFromFilename(regs*)+0x4a>
c0021725:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c002172b:	e9 29 ff ff ff       	jmp    c0021659 <SysSizeFromFilename(regs*)+0x4a>
c0021730:	85 f6                	test   esi,esi
c0021732:	0f 84 21 ff ff ff    	je     c0021659 <SysSizeFromFilename(regs*)+0x4a>
c0021738:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c002173e:	e9 16 ff ff ff       	jmp    c0021659 <SysSizeFromFilename(regs*)+0x4a>

c0021743 <SysSizeFromFilenameNoSymlink(regs*)>:
c0021743:	55                   	push   ebp
c0021744:	57                   	push   edi
c0021745:	56                   	push   esi
c0021746:	53                   	push   ebx
c0021747:	81 ec 4c 02 00 00    	sub    esp,0x24c
c002174d:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0021754:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0021757:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c002175a:	85 f6                	test   esi,esi
c002175c:	89 f8                	mov    eax,edi
c002175e:	74 09                	je     c0021769 <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c0021760:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0021766:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021769:	83 f8 02             	cmp    eax,0x2
c002176c:	0f 86 ca 00 00 00    	jbe    c002183c <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c0021772:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021777:	76 1f                	jbe    c0021798 <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c0021779:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c002177c:	31 d2                	xor    edx,edx
c002177e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021784:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002178b:	31 c0                	xor    eax,eax
c002178d:	81 c4 4c 02 00 00    	add    esp,0x24c
c0021793:	5b                   	pop    ebx
c0021794:	5e                   	pop    esi
c0021795:	5f                   	pop    edi
c0021796:	5d                   	pop    ebp
c0021797:	c3                   	ret    
c0021798:	83 ec 0c             	sub    esp,0xc
c002179b:	68 14 01 00 00       	push   0x114
c00217a0:	e8 e3 4e ff ff       	call   c0016688 <malloc>
c00217a5:	6a 00                	push   0x0
c00217a7:	89 c5                	mov    ebp,eax
c00217a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00217ae:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00217b1:	51                   	push   ecx
c00217b2:	57                   	push   edi
c00217b3:	55                   	push   ebp
c00217b4:	e8 3f 8e ff ff       	call   c001a5f8 <File::File(char const*, Process*, bool)>
c00217b9:	83 c4 1c             	add    esp,0x1c
c00217bc:	8d 44 24 13          	lea    eax,[esp+0x13]
c00217c0:	50                   	push   eax
c00217c1:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00217c4:	53                   	push   ebx
c00217c5:	55                   	push   ebp
c00217c6:	e8 2b 92 ff ff       	call   c001a9f6 <File::stat(unsigned long long*, bool*)>
c00217cb:	83 c4 10             	add    esp,0x10
c00217ce:	85 ed                	test   ebp,ebp
c00217d0:	89 c3                	mov    ebx,eax
c00217d2:	74 0d                	je     c00217e1 <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c00217d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00217d7:	83 ec 0c             	sub    esp,0xc
c00217da:	55                   	push   ebp
c00217db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00217de:	83 c4 10             	add    esp,0x10
c00217e1:	85 db                	test   ebx,ebx
c00217e3:	75 57                	jne    c002183c <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c00217e5:	6a 00                	push   0x0
c00217e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00217ec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00217ef:	05 0c 01 00 00       	add    eax,0x10c
c00217f4:	50                   	push   eax
c00217f5:	57                   	push   edi
c00217f6:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00217fd:	53                   	push   ebx
c00217fe:	e8 c7 8b ff ff       	call   c001a3ca <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0021803:	58                   	pop    eax
c0021804:	5a                   	pop    edx
c0021805:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021809:	50                   	push   eax
c002180a:	53                   	push   ebx
c002180b:	e8 22 86 ff ff       	call   c0019e32 <KeDereferenceSymlink(char const*, char*)>
c0021810:	83 c4 10             	add    esp,0x10
c0021813:	ba 00 00 00 00       	mov    edx,0x0
c0021818:	83 f8 01             	cmp    eax,0x1
c002181b:	b8 00 00 00 00       	mov    eax,0x0
c0021820:	74 2f                	je     c0021851 <SysSizeFromFilenameNoSymlink(regs*)+0x10e>
c0021822:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0021827:	74 3b                	je     c0021864 <SysSizeFromFilenameNoSymlink(regs*)+0x121>
c0021829:	85 f6                	test   esi,esi
c002182b:	0f 84 5c ff ff ff    	je     c002178d <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0021831:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0021837:	e9 51 ff ff ff       	jmp    c002178d <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c002183c:	81 c4 4c 02 00 00    	add    esp,0x24c
c0021842:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021847:	5b                   	pop    ebx
c0021848:	ba ff ff ff ff       	mov    edx,0xffffffff
c002184d:	5e                   	pop    esi
c002184e:	5f                   	pop    edi
c002184f:	5d                   	pop    ebp
c0021850:	c3                   	ret    
c0021851:	85 f6                	test   esi,esi
c0021853:	0f 84 34 ff ff ff    	je     c002178d <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0021859:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c002185f:	e9 29 ff ff ff       	jmp    c002178d <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0021864:	85 f6                	test   esi,esi
c0021866:	0f 84 21 ff ff ff    	je     c002178d <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c002186c:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0021872:	e9 16 ff ff ff       	jmp    c002178d <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c0021877 <SysClose(regs*)>:
c0021877:	53                   	push   ebx
c0021878:	83 ec 08             	sub    esp,0x8
c002187b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002187f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021882:	83 f8 02             	cmp    eax,0x2
c0021885:	76 41                	jbe    c00218c8 <SysClose(regs*)+0x51>
c0021887:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c002188d:	83 fa 01             	cmp    edx,0x1
c0021890:	76 2d                	jbe    c00218bf <SysClose(regs*)+0x48>
c0021892:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021897:	77 2f                	ja     c00218c8 <SysClose(regs*)+0x51>
c0021899:	83 ec 0c             	sub    esp,0xc
c002189c:	50                   	push   eax
c002189d:	e8 ad 67 ff ff       	call   c001804f <KeGetFileFromDescriptor(int)>
c00218a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00218a5:	89 c3                	mov    ebx,eax
c00218a7:	e8 a6 8e ff ff       	call   c001a752 <File::close()>
c00218ac:	83 c4 10             	add    esp,0x10
c00218af:	85 db                	test   ebx,ebx
c00218b1:	74 0c                	je     c00218bf <SysClose(regs*)+0x48>
c00218b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00218b5:	83 ec 0c             	sub    esp,0xc
c00218b8:	53                   	push   ebx
c00218b9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00218bc:	83 c4 10             	add    esp,0x10
c00218bf:	83 c4 08             	add    esp,0x8
c00218c2:	31 c0                	xor    eax,eax
c00218c4:	5b                   	pop    ebx
c00218c5:	31 d2                	xor    edx,edx
c00218c7:	c3                   	ret    
c00218c8:	83 c4 08             	add    esp,0x8
c00218cb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00218d0:	5b                   	pop    ebx
c00218d1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00218d6:	c3                   	ret    

c00218d7 <SysOpenDir(regs*)>:
c00218d7:	56                   	push   esi
c00218d8:	53                   	push   ebx
c00218d9:	83 ec 04             	sub    esp,0x4
c00218dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00218e0:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00218e3:	85 c9                	test   ecx,ecx
c00218e5:	74 5d                	je     c0021944 <SysOpenDir(regs*)+0x6d>
c00218e7:	83 ec 0c             	sub    esp,0xc
c00218ea:	68 14 01 00 00       	push   0x114
c00218ef:	e8 94 4d ff ff       	call   c0016688 <malloc>
c00218f4:	83 c4 0c             	add    esp,0xc
c00218f7:	89 c6                	mov    esi,eax
c00218f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00218fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021901:	50                   	push   eax
c0021902:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0021905:	52                   	push   edx
c0021906:	56                   	push   esi
c0021907:	e8 aa 92 ff ff       	call   c001abb6 <Directory::Directory(char const*, Process*)>
c002190c:	83 c4 10             	add    esp,0x10
c002190f:	85 f6                	test   esi,esi
c0021911:	74 31                	je     c0021944 <SysOpenDir(regs*)+0x6d>
c0021913:	83 ec 0c             	sub    esp,0xc
c0021916:	56                   	push   esi
c0021917:	e8 62 93 ff ff       	call   c001ac7e <Directory::open()>
c002191c:	83 c4 10             	add    esp,0x10
c002191f:	85 c0                	test   eax,eax
c0021921:	75 21                	jne    c0021944 <SysOpenDir(regs*)+0x6d>
c0021923:	83 ec 0c             	sub    esp,0xc
c0021926:	56                   	push   esi
c0021927:	e8 26 64 ff ff       	call   c0017d52 <UnixFile::getFileDescriptor()>
c002192c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c002192f:	83 c4 10             	add    esp,0x10
c0021932:	89 02                	mov    DWORD PTR [edx],eax
c0021934:	c1 f8 1f             	sar    eax,0x1f
c0021937:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c002193a:	83 c4 04             	add    esp,0x4
c002193d:	31 c0                	xor    eax,eax
c002193f:	5b                   	pop    ebx
c0021940:	31 d2                	xor    edx,edx
c0021942:	5e                   	pop    esi
c0021943:	c3                   	ret    
c0021944:	83 c4 04             	add    esp,0x4
c0021947:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002194c:	5b                   	pop    ebx
c002194d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021952:	5e                   	pop    esi
c0021953:	c3                   	ret    

c0021954 <SysMakeDir(regs*)>:
c0021954:	56                   	push   esi
c0021955:	53                   	push   ebx
c0021956:	83 ec 10             	sub    esp,0x10
c0021959:	68 14 01 00 00       	push   0x114
c002195e:	e8 25 4d ff ff       	call   c0016688 <malloc>
c0021963:	83 c4 0c             	add    esp,0xc
c0021966:	89 c3                	mov    ebx,eax
c0021968:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002196d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021970:	50                   	push   eax
c0021971:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021975:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0021978:	52                   	push   edx
c0021979:	53                   	push   ebx
c002197a:	e8 37 92 ff ff       	call   c001abb6 <Directory::Directory(char const*, Process*)>
c002197f:	83 c4 10             	add    esp,0x10
c0021982:	85 db                	test   ebx,ebx
c0021984:	74 2c                	je     c00219b2 <SysMakeDir(regs*)+0x5e>
c0021986:	83 ec 0c             	sub    esp,0xc
c0021989:	53                   	push   ebx
c002198a:	e8 cf 94 ff ff       	call   c001ae5e <Directory::create()>
c002198f:	89 c6                	mov    esi,eax
c0021991:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021993:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021996:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021999:	83 c4 10             	add    esp,0x10
c002199c:	31 c0                	xor    eax,eax
c002199e:	85 f6                	test   esi,esi
c00219a0:	0f 95 c0             	setne  al
c00219a3:	31 d2                	xor    edx,edx
c00219a5:	f7 d8                	neg    eax
c00219a7:	83 d2 00             	adc    edx,0x0
c00219aa:	83 c4 04             	add    esp,0x4
c00219ad:	5b                   	pop    ebx
c00219ae:	f7 da                	neg    edx
c00219b0:	5e                   	pop    esi
c00219b1:	c3                   	ret    
c00219b2:	83 c4 04             	add    esp,0x4
c00219b5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00219ba:	5b                   	pop    ebx
c00219bb:	ba ff ff ff ff       	mov    edx,0xffffffff
c00219c0:	5e                   	pop    esi
c00219c1:	c3                   	ret    

c00219c2 <SysCloseDir(regs*)>:
c00219c2:	53                   	push   ebx
c00219c3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00219c8:	83 ec 08             	sub    esp,0x8
c00219cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219cf:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00219d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00219d7:	8d 59 fd             	lea    ebx,[ecx-0x3]
c00219da:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c00219e0:	77 2a                	ja     c0021a0c <SysCloseDir(regs*)+0x4a>
c00219e2:	83 ec 0c             	sub    esp,0xc
c00219e5:	51                   	push   ecx
c00219e6:	e8 64 66 ff ff       	call   c001804f <KeGetFileFromDescriptor(int)>
c00219eb:	89 04 24             	mov    DWORD PTR [esp],eax
c00219ee:	89 c3                	mov    ebx,eax
c00219f0:	e8 e5 92 ff ff       	call   c001acda <Directory::close()>
c00219f5:	83 c4 10             	add    esp,0x10
c00219f8:	85 db                	test   ebx,ebx
c00219fa:	74 0c                	je     c0021a08 <SysCloseDir(regs*)+0x46>
c00219fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00219fe:	83 ec 0c             	sub    esp,0xc
c0021a01:	53                   	push   ebx
c0021a02:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021a05:	83 c4 10             	add    esp,0x10
c0021a08:	31 c0                	xor    eax,eax
c0021a0a:	31 d2                	xor    edx,edx
c0021a0c:	83 c4 08             	add    esp,0x8
c0021a0f:	5b                   	pop    ebx
c0021a10:	c3                   	ret    

c0021a11 <SysWait(regs*)>:
c0021a11:	83 ec 10             	sub    esp,0x10
c0021a14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021a18:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0021a1b:	52                   	push   edx
c0021a1c:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0021a1f:	51                   	push   ecx
c0021a20:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021a23:	50                   	push   eax
c0021a24:	e8 23 3e 00 00       	call   c002584c <waitTask(int, int*, int)>
c0021a29:	83 c4 1c             	add    esp,0x1c
c0021a2c:	89 c2                	mov    edx,eax
c0021a2e:	c1 fa 1f             	sar    edx,0x1f
c0021a31:	c3                   	ret    

c0021a32 <SysNotImpl(regs*)>:
c0021a32:	83 ec 18             	sub    esp,0x18
c0021a35:	68 c4 32 03 c0       	push   0xc00332c4
c0021a3a:	e8 c3 ec ff ff       	call   c0020702 <KePanic(char const*)>
c0021a3f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021a44:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021a49:	83 c4 1c             	add    esp,0x1c
c0021a4c:	c3                   	ret    

c0021a4d <SysPanic(regs*)>:
c0021a4d:	83 ec 18             	sub    esp,0x18
c0021a50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021a54:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0021a57:	50                   	push   eax
c0021a58:	e8 a5 ec ff ff       	call   c0020702 <KePanic(char const*)>
c0021a5d:	b8 01 00 00 00       	mov    eax,0x1
c0021a62:	31 d2                	xor    edx,edx
c0021a64:	83 c4 1c             	add    esp,0x1c
c0021a67:	c3                   	ret    

c0021a68 <SysRmdir(regs*)>:
c0021a68:	56                   	push   esi
c0021a69:	53                   	push   ebx
c0021a6a:	83 ec 10             	sub    esp,0x10
c0021a6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021a71:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0021a74:	68 14 01 00 00       	push   0x114
c0021a79:	e8 0a 4c ff ff       	call   c0016688 <malloc>
c0021a7e:	6a 00                	push   0x0
c0021a80:	89 c3                	mov    ebx,eax
c0021a82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021a87:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021a8a:	50                   	push   eax
c0021a8b:	56                   	push   esi
c0021a8c:	53                   	push   ebx
c0021a8d:	e8 66 8b ff ff       	call   c001a5f8 <File::File(char const*, Process*, bool)>
c0021a92:	83 c4 14             	add    esp,0x14
c0021a95:	53                   	push   ebx
c0021a96:	e8 27 8e ff ff       	call   c001a8c2 <File::unlink()>
c0021a9b:	83 c4 10             	add    esp,0x10
c0021a9e:	85 db                	test   ebx,ebx
c0021aa0:	89 c6                	mov    esi,eax
c0021aa2:	74 0c                	je     c0021ab0 <SysRmdir(regs*)+0x48>
c0021aa4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021aa6:	83 ec 0c             	sub    esp,0xc
c0021aa9:	53                   	push   ebx
c0021aaa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021aad:	83 c4 10             	add    esp,0x10
c0021ab0:	31 c0                	xor    eax,eax
c0021ab2:	85 f6                	test   esi,esi
c0021ab4:	0f 95 c0             	setne  al
c0021ab7:	31 d2                	xor    edx,edx
c0021ab9:	f7 d8                	neg    eax
c0021abb:	83 d2 00             	adc    edx,0x0
c0021abe:	83 c4 04             	add    esp,0x4
c0021ac1:	5b                   	pop    ebx
c0021ac2:	f7 da                	neg    edx
c0021ac4:	5e                   	pop    esi
c0021ac5:	c3                   	ret    

c0021ac6 <SysUnlink(regs*)>:
c0021ac6:	56                   	push   esi
c0021ac7:	53                   	push   ebx
c0021ac8:	83 ec 10             	sub    esp,0x10
c0021acb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021acf:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0021ad2:	68 14 01 00 00       	push   0x114
c0021ad7:	e8 ac 4b ff ff       	call   c0016688 <malloc>
c0021adc:	6a 00                	push   0x0
c0021ade:	89 c3                	mov    ebx,eax
c0021ae0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021ae5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021ae8:	50                   	push   eax
c0021ae9:	56                   	push   esi
c0021aea:	53                   	push   ebx
c0021aeb:	e8 08 8b ff ff       	call   c001a5f8 <File::File(char const*, Process*, bool)>
c0021af0:	83 c4 14             	add    esp,0x14
c0021af3:	53                   	push   ebx
c0021af4:	e8 c9 8d ff ff       	call   c001a8c2 <File::unlink()>
c0021af9:	83 c4 10             	add    esp,0x10
c0021afc:	85 db                	test   ebx,ebx
c0021afe:	89 c6                	mov    esi,eax
c0021b00:	74 0c                	je     c0021b0e <SysUnlink(regs*)+0x48>
c0021b02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021b04:	83 ec 0c             	sub    esp,0xc
c0021b07:	53                   	push   ebx
c0021b08:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021b0b:	83 c4 10             	add    esp,0x10
c0021b0e:	31 c0                	xor    eax,eax
c0021b10:	85 f6                	test   esi,esi
c0021b12:	0f 95 c0             	setne  al
c0021b15:	31 d2                	xor    edx,edx
c0021b17:	f7 d8                	neg    eax
c0021b19:	83 d2 00             	adc    edx,0x0
c0021b1c:	83 c4 04             	add    esp,0x4
c0021b1f:	5b                   	pop    ebx
c0021b20:	f7 da                	neg    edx
c0021b22:	5e                   	pop    esi
c0021b23:	c3                   	ret    

c0021b24 <SysGetArgv(regs*)>:
c0021b24:	83 ec 0c             	sub    esp,0xc
c0021b27:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021b2b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0021b2e:	85 c0                	test   eax,eax
c0021b30:	78 2c                	js     c0021b5e <SysGetArgv(regs*)+0x3a>
c0021b32:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0021b38:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0021b3b:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0021b41:	7d 1b                	jge    c0021b5e <SysGetArgv(regs*)+0x3a>
c0021b43:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0021b4a:	85 c0                	test   eax,eax
c0021b4c:	74 18                	je     c0021b66 <SysGetArgv(regs*)+0x42>
c0021b4e:	83 ec 08             	sub    esp,0x8
c0021b51:	50                   	push   eax
c0021b52:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0021b55:	50                   	push   eax
c0021b56:	e8 f5 ea fd ff       	call   c0000650 <strcpy>
c0021b5b:	83 c4 10             	add    esp,0x10
c0021b5e:	31 c0                	xor    eax,eax
c0021b60:	31 d2                	xor    edx,edx
c0021b62:	83 c4 0c             	add    esp,0xc
c0021b65:	c3                   	ret    
c0021b66:	b8 01 00 00 00       	mov    eax,0x1
c0021b6b:	31 d2                	xor    edx,edx
c0021b6d:	83 c4 0c             	add    esp,0xc
c0021b70:	c3                   	ret    

c0021b71 <SysUSleep(regs*)>:
c0021b71:	83 ec 1c             	sub    esp,0x1c
c0021b74:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0021b78:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0021b7b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0021b7e:	6a 00                	push   0x0
c0021b80:	6a 64                	push   0x64
c0021b82:	52                   	push   edx
c0021b83:	50                   	push   eax
c0021b84:	e8 27 d3 00 00       	call   c002eeb0 <__udivdi3>
c0021b89:	83 c4 14             	add    esp,0x14
c0021b8c:	50                   	push   eax
c0021b8d:	e8 9e 3d 00 00       	call   c0025930 <milliTenthSleep(unsigned int)>
c0021b92:	31 c0                	xor    eax,eax
c0021b94:	31 d2                	xor    edx,edx
c0021b96:	83 c4 1c             	add    esp,0x1c
c0021b99:	c3                   	ret    

c0021b9a <SysSpawn(regs*)>:
c0021b9a:	56                   	push   esi
c0021b9b:	53                   	push   ebx
c0021b9c:	83 ec 04             	sub    esp,0x4
c0021b9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021ba3:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0021ba6:	85 f6                	test   esi,esi
c0021ba8:	75 0a                	jne    c0021bb4 <SysSpawn(regs*)+0x1a>
c0021baa:	83 c4 04             	add    esp,0x4
c0021bad:	31 c0                	xor    eax,eax
c0021baf:	5b                   	pop    ebx
c0021bb0:	31 d2                	xor    edx,edx
c0021bb2:	5e                   	pop    esi
c0021bb3:	c3                   	ret    
c0021bb4:	83 ec 0c             	sub    esp,0xc
c0021bb7:	68 24 07 00 00       	push   0x724
c0021bbc:	e8 c7 4a ff ff       	call   c0016688 <malloc>
c0021bc1:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0021bc4:	83 c4 10             	add    esp,0x10
c0021bc7:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021bca:	89 c6                	mov    esi,eax
c0021bcc:	31 c0                	xor    eax,eax
c0021bce:	85 c9                	test   ecx,ecx
c0021bd0:	75 08                	jne    c0021bda <SysSpawn(regs*)+0x40>
c0021bd2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021bd7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021bda:	52                   	push   edx
c0021bdb:	50                   	push   eax
c0021bdc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021bdf:	50                   	push   eax
c0021be0:	56                   	push   esi
c0021be1:	e8 f2 34 00 00       	call   c00250d8 <Process::Process(char const*, Process*, char**)>
c0021be6:	83 c4 10             	add    esp,0x10
c0021be9:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0021bf0:	75 b8                	jne    c0021baa <SysSpawn(regs*)+0x10>
c0021bf2:	83 ec 0c             	sub    esp,0xc
c0021bf5:	56                   	push   esi
c0021bf6:	e8 19 3a 00 00       	call   c0025614 <Process::createUserThread()>
c0021bfb:	8b 06                	mov    eax,DWORD PTR [esi]
c0021bfd:	83 c4 10             	add    esp,0x10
c0021c00:	83 c4 04             	add    esp,0x4
c0021c03:	5b                   	pop    ebx
c0021c04:	89 c2                	mov    edx,eax
c0021c06:	c1 fa 1f             	sar    edx,0x1f
c0021c09:	5e                   	pop    esi
c0021c0a:	c3                   	ret    

c0021c0b <SysGetEnv(regs*)>:
c0021c0b:	57                   	push   edi
c0021c0c:	56                   	push   esi
c0021c0d:	53                   	push   ebx
c0021c0e:	83 ec 1c             	sub    esp,0x1c
c0021c11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021c16:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021c1a:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0021c1d:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0021c20:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0021c23:	51                   	push   ecx
c0021c24:	e8 92 e7 ff ff       	call   c00203bb <KeGetProcessTotalEnvCount(Process*)>
c0021c29:	83 c4 10             	add    esp,0x10
c0021c2c:	39 c7                	cmp    edi,eax
c0021c2e:	7c 12                	jl     c0021c42 <SysGetEnv(regs*)+0x37>
c0021c30:	31 c0                	xor    eax,eax
c0021c32:	31 d2                	xor    edx,edx
c0021c34:	85 f6                	test   esi,esi
c0021c36:	74 03                	je     c0021c3b <SysGetEnv(regs*)+0x30>
c0021c38:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021c3b:	83 c4 10             	add    esp,0x10
c0021c3e:	5b                   	pop    ebx
c0021c3f:	5e                   	pop    esi
c0021c40:	5f                   	pop    edi
c0021c41:	c3                   	ret    
c0021c42:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021c46:	83 ec 04             	sub    esp,0x4
c0021c49:	57                   	push   edi
c0021c4a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0021c50:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0021c53:	57                   	push   edi
c0021c54:	50                   	push   eax
c0021c55:	e8 81 e7 ff ff       	call   c00203db <KeGetProcessEnvPair(Process*, int)>
c0021c5a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021c5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021c61:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0021c65:	83 c4 0c             	add    esp,0xc
c0021c68:	85 d2                	test   edx,edx
c0021c6a:	75 23                	jne    c0021c8f <SysGetEnv(regs*)+0x84>
c0021c6c:	83 ec 0c             	sub    esp,0xc
c0021c6f:	50                   	push   eax
c0021c70:	e8 0b e9 fd ff       	call   c0000580 <strlen>
c0021c75:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021c78:	89 c3                	mov    ebx,eax
c0021c7a:	e8 01 e9 fd ff       	call   c0000580 <strlen>
c0021c7f:	83 c4 10             	add    esp,0x10
c0021c82:	31 d2                	xor    edx,edx
c0021c84:	83 c4 10             	add    esp,0x10
c0021c87:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0021c8b:	5b                   	pop    ebx
c0021c8c:	5e                   	pop    esi
c0021c8d:	5f                   	pop    edi
c0021c8e:	c3                   	ret    
c0021c8f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021c92:	83 ec 08             	sub    esp,0x8
c0021c95:	50                   	push   eax
c0021c96:	56                   	push   esi
c0021c97:	e8 b4 e9 fd ff       	call   c0000650 <strcpy>
c0021c9c:	58                   	pop    eax
c0021c9d:	5a                   	pop    edx
c0021c9e:	68 de 32 03 c0       	push   0xc00332de
c0021ca3:	56                   	push   esi
c0021ca4:	e8 c7 eb fd ff       	call   c0000870 <strcat>
c0021ca9:	59                   	pop    ecx
c0021caa:	5b                   	pop    ebx
c0021cab:	57                   	push   edi
c0021cac:	56                   	push   esi
c0021cad:	e8 be eb fd ff       	call   c0000870 <strcat>
c0021cb2:	83 c4 10             	add    esp,0x10
c0021cb5:	31 c0                	xor    eax,eax
c0021cb7:	83 c4 10             	add    esp,0x10
c0021cba:	31 d2                	xor    edx,edx
c0021cbc:	5b                   	pop    ebx
c0021cbd:	5e                   	pop    esi
c0021cbe:	5f                   	pop    edi
c0021cbf:	c3                   	ret    

c0021cc0 <SysSetFatAttrib(regs*)>:
c0021cc0:	57                   	push   edi
c0021cc1:	56                   	push   esi
c0021cc2:	53                   	push   ebx
c0021cc3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021cc7:	83 ec 0c             	sub    esp,0xc
c0021cca:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0021ccd:	68 14 01 00 00       	push   0x114
c0021cd2:	e8 b1 49 ff ff       	call   c0016688 <malloc>
c0021cd7:	83 c4 0c             	add    esp,0xc
c0021cda:	89 c3                	mov    ebx,eax
c0021cdc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021ce1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021ce4:	50                   	push   eax
c0021ce5:	57                   	push   edi
c0021ce6:	53                   	push   ebx
c0021ce7:	e8 ea 89 ff ff       	call   c001a6d6 <File::File(char const*, Process*)>
c0021cec:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0021cef:	83 c4 0c             	add    esp,0xc
c0021cf2:	0f b6 d4             	movzx  edx,ah
c0021cf5:	0f b6 c0             	movzx  eax,al
c0021cf8:	52                   	push   edx
c0021cf9:	50                   	push   eax
c0021cfa:	53                   	push   ebx
c0021cfb:	e8 5c 8c ff ff       	call   c001a95c <File::chfatattr(unsigned char, unsigned char)>
c0021d00:	83 c4 10             	add    esp,0x10
c0021d03:	85 db                	test   ebx,ebx
c0021d05:	89 c6                	mov    esi,eax
c0021d07:	74 0c                	je     c0021d15 <SysSetFatAttrib(regs*)+0x55>
c0021d09:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021d0b:	83 ec 0c             	sub    esp,0xc
c0021d0e:	53                   	push   ebx
c0021d0f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021d12:	83 c4 10             	add    esp,0x10
c0021d15:	5b                   	pop    ebx
c0021d16:	31 c0                	xor    eax,eax
c0021d18:	85 f6                	test   esi,esi
c0021d1a:	0f 95 c0             	setne  al
c0021d1d:	31 d2                	xor    edx,edx
c0021d1f:	5e                   	pop    esi
c0021d20:	f7 d8                	neg    eax
c0021d22:	83 d2 00             	adc    edx,0x0
c0021d25:	f7 da                	neg    edx
c0021d27:	5f                   	pop    edi
c0021d28:	c3                   	ret    

c0021d29 <SysPipe(regs*)>:
c0021d29:	57                   	push   edi
c0021d2a:	56                   	push   esi
c0021d2b:	53                   	push   ebx
c0021d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d30:	83 ec 0c             	sub    esp,0xc
c0021d33:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0021d36:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0021d39:	6a 20                	push   0x20
c0021d3b:	e8 48 49 ff ff       	call   c0016688 <malloc>
c0021d40:	89 c3                	mov    ebx,eax
c0021d42:	58                   	pop    eax
c0021d43:	5a                   	pop    edx
c0021d44:	68 00 50 00 00       	push   0x5000
c0021d49:	53                   	push   ebx
c0021d4a:	e8 a3 52 ff ff       	call   c0016ff2 <Pipe::Pipe(int)>
c0021d4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021d52:	e8 fb 5f ff ff       	call   c0017d52 <UnixFile::getFileDescriptor()>
c0021d57:	89 07                	mov    DWORD PTR [edi],eax
c0021d59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021d5c:	e8 f1 5f ff ff       	call   c0017d52 <UnixFile::getFileDescriptor()>
c0021d61:	83 c4 10             	add    esp,0x10
c0021d64:	31 d2                	xor    edx,edx
c0021d66:	89 06                	mov    DWORD PTR [esi],eax
c0021d68:	31 c0                	xor    eax,eax
c0021d6a:	5b                   	pop    ebx
c0021d6b:	5e                   	pop    esi
c0021d6c:	5f                   	pop    edi
c0021d6d:	c3                   	ret    

c0021d6e <SysGetUnixTime(regs*)>:
c0021d6e:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0021d73:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021d79:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021d7d:	e9 d6 93 ff ff       	jmp    c001b158 <Clock::timeInSecondsLocal()>

c0021d82 <string_ends_with(char const*, char const*)>:
c0021d82:	57                   	push   edi
c0021d83:	56                   	push   esi
c0021d84:	53                   	push   ebx
c0021d85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021d89:	83 ec 0c             	sub    esp,0xc
c0021d8c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021d90:	53                   	push   ebx
c0021d91:	e8 ea e7 fd ff       	call   c0000580 <strlen>
c0021d96:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021d99:	89 c6                	mov    esi,eax
c0021d9b:	e8 e0 e7 fd ff       	call   c0000580 <strlen>
c0021da0:	83 c4 10             	add    esp,0x10
c0021da3:	31 d2                	xor    edx,edx
c0021da5:	39 c6                	cmp    esi,eax
c0021da7:	7d 06                	jge    c0021daf <string_ends_with(char const*, char const*)+0x2d>
c0021da9:	5b                   	pop    ebx
c0021daa:	89 d0                	mov    eax,edx
c0021dac:	5e                   	pop    esi
c0021dad:	5f                   	pop    edi
c0021dae:	c3                   	ret    
c0021daf:	83 ec 08             	sub    esp,0x8
c0021db2:	29 c6                	sub    esi,eax
c0021db4:	57                   	push   edi
c0021db5:	01 f3                	add    ebx,esi
c0021db7:	53                   	push   ebx
c0021db8:	e8 c3 e9 fd ff       	call   c0000780 <strcmp>
c0021dbd:	83 c4 10             	add    esp,0x10
c0021dc0:	31 d2                	xor    edx,edx
c0021dc2:	5b                   	pop    ebx
c0021dc3:	5e                   	pop    esi
c0021dc4:	85 c0                	test   eax,eax
c0021dc6:	5f                   	pop    edi
c0021dc7:	0f 94 c2             	sete   dl
c0021dca:	89 d0                	mov    eax,edx
c0021dcc:	c3                   	ret    

c0021dcd <SysOpen(regs*)>:
c0021dcd:	56                   	push   esi
c0021dce:	53                   	push   ebx
c0021dcf:	81 ec 04 01 00 00    	sub    esp,0x104
c0021dd5:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0021ddc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021ddf:	85 c0                	test   eax,eax
c0021de1:	0f 84 c4 01 00 00    	je     c0021fab <SysOpen(regs*)+0x1de>
c0021de7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021dea:	85 c0                	test   eax,eax
c0021dec:	0f 84 b9 01 00 00    	je     c0021fab <SysOpen(regs*)+0x1de>
c0021df2:	6a 00                	push   0x0
c0021df4:	68 e0 32 03 c0       	push   0xc00332e0
c0021df9:	50                   	push   eax
c0021dfa:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0021dfe:	56                   	push   esi
c0021dff:	e8 c6 85 ff ff       	call   c001a3ca <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0021e04:	89 34 24             	mov    DWORD PTR [esp],esi
c0021e07:	e8 74 e7 fd ff       	call   c0000580 <strlen>
c0021e0c:	83 c4 10             	add    esp,0x10
c0021e0f:	83 e8 01             	sub    eax,0x1
c0021e12:	74 29                	je     c0021e3d <SysOpen(regs*)+0x70>
c0021e14:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0021e18:	83 fa 2e             	cmp    edx,0x2e
c0021e1b:	74 1c                	je     c0021e39 <SysOpen(regs*)+0x6c>
c0021e1d:	83 fa 3a             	cmp    edx,0x3a
c0021e20:	74 17                	je     c0021e39 <SysOpen(regs*)+0x6c>
c0021e22:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0021e26:	83 e8 01             	sub    eax,0x1
c0021e29:	74 12                	je     c0021e3d <SysOpen(regs*)+0x70>
c0021e2b:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0021e2f:	83 fa 3a             	cmp    edx,0x3a
c0021e32:	74 05                	je     c0021e39 <SysOpen(regs*)+0x6c>
c0021e34:	83 fa 2e             	cmp    edx,0x2e
c0021e37:	75 e9                	jne    c0021e22 <SysOpen(regs*)+0x55>
c0021e39:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0021e3d:	83 ec 08             	sub    esp,0x8
c0021e40:	68 e4 32 03 c0       	push   0xc00332e4
c0021e45:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021e48:	50                   	push   eax
c0021e49:	e8 34 ff ff ff       	call   c0021d82 <string_ends_with(char const*, char const*)>
c0021e4e:	83 c4 10             	add    esp,0x10
c0021e51:	85 c0                	test   eax,eax
c0021e53:	74 1d                	je     c0021e72 <SysOpen(regs*)+0xa5>
c0021e55:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021e58:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0021e5e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021e65:	81 c4 04 01 00 00    	add    esp,0x104
c0021e6b:	31 c0                	xor    eax,eax
c0021e6d:	5b                   	pop    ebx
c0021e6e:	31 d2                	xor    edx,edx
c0021e70:	5e                   	pop    esi
c0021e71:	c3                   	ret    
c0021e72:	83 ec 08             	sub    esp,0x8
c0021e75:	68 e9 32 03 c0       	push   0xc00332e9
c0021e7a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021e7d:	50                   	push   eax
c0021e7e:	e8 ff fe ff ff       	call   c0021d82 <string_ends_with(char const*, char const*)>
c0021e83:	83 c4 10             	add    esp,0x10
c0021e86:	85 c0                	test   eax,eax
c0021e88:	75 cb                	jne    c0021e55 <SysOpen(regs*)+0x88>
c0021e8a:	83 ec 08             	sub    esp,0x8
c0021e8d:	68 e5 32 03 c0       	push   0xc00332e5
c0021e92:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021e95:	50                   	push   eax
c0021e96:	e8 e5 e8 fd ff       	call   c0000780 <strcmp>
c0021e9b:	83 c4 10             	add    esp,0x10
c0021e9e:	85 c0                	test   eax,eax
c0021ea0:	74 b3                	je     c0021e55 <SysOpen(regs*)+0x88>
c0021ea2:	83 ec 08             	sub    esp,0x8
c0021ea5:	68 e4 32 03 c0       	push   0xc00332e4
c0021eaa:	56                   	push   esi
c0021eab:	e8 d2 fe ff ff       	call   c0021d82 <string_ends_with(char const*, char const*)>
c0021eb0:	83 c4 10             	add    esp,0x10
c0021eb3:	85 c0                	test   eax,eax
c0021eb5:	75 9e                	jne    c0021e55 <SysOpen(regs*)+0x88>
c0021eb7:	83 ec 08             	sub    esp,0x8
c0021eba:	68 ee 32 03 c0       	push   0xc00332ee
c0021ebf:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021ec2:	50                   	push   eax
c0021ec3:	e8 ba fe ff ff       	call   c0021d82 <string_ends_with(char const*, char const*)>
c0021ec8:	83 c4 10             	add    esp,0x10
c0021ecb:	85 c0                	test   eax,eax
c0021ecd:	0f 85 eb 00 00 00    	jne    c0021fbe <SysOpen(regs*)+0x1f1>
c0021ed3:	83 ec 08             	sub    esp,0x8
c0021ed6:	68 f3 32 03 c0       	push   0xc00332f3
c0021edb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021ede:	50                   	push   eax
c0021edf:	e8 9e fe ff ff       	call   c0021d82 <string_ends_with(char const*, char const*)>
c0021ee4:	83 c4 10             	add    esp,0x10
c0021ee7:	85 c0                	test   eax,eax
c0021ee9:	0f 85 cf 00 00 00    	jne    c0021fbe <SysOpen(regs*)+0x1f1>
c0021eef:	83 ec 08             	sub    esp,0x8
c0021ef2:	68 ef 32 03 c0       	push   0xc00332ef
c0021ef7:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0021efa:	51                   	push   ecx
c0021efb:	e8 80 e8 fd ff       	call   c0000780 <strcmp>
c0021f00:	83 c4 10             	add    esp,0x10
c0021f03:	85 c0                	test   eax,eax
c0021f05:	0f 84 b3 00 00 00    	je     c0021fbe <SysOpen(regs*)+0x1f1>
c0021f0b:	83 ec 08             	sub    esp,0x8
c0021f0e:	68 ee 32 03 c0       	push   0xc00332ee
c0021f13:	56                   	push   esi
c0021f14:	e8 69 fe ff ff       	call   c0021d82 <string_ends_with(char const*, char const*)>
c0021f19:	83 c4 10             	add    esp,0x10
c0021f1c:	85 c0                	test   eax,eax
c0021f1e:	0f 85 9a 00 00 00    	jne    c0021fbe <SysOpen(regs*)+0x1f1>
c0021f24:	83 ec 0c             	sub    esp,0xc
c0021f27:	68 14 01 00 00       	push   0x114
c0021f2c:	e8 57 47 ff ff       	call   c0016688 <malloc>
c0021f31:	83 c4 0c             	add    esp,0xc
c0021f34:	89 c6                	mov    esi,eax
c0021f36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021f3b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021f3e:	50                   	push   eax
c0021f3f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0021f42:	52                   	push   edx
c0021f43:	56                   	push   esi
c0021f44:	e8 8d 87 ff ff       	call   c001a6d6 <File::File(char const*, Process*)>
c0021f49:	83 c4 10             	add    esp,0x10
c0021f4c:	85 f6                	test   esi,esi
c0021f4e:	74 5b                	je     c0021fab <SysOpen(regs*)+0x1de>
c0021f50:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021f53:	0f b6 c2             	movzx  eax,dl
c0021f56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0021f59:	89 d0                	mov    eax,edx
c0021f5b:	83 e0 01             	and    eax,0x1
c0021f5e:	f6 c2 02             	test   dl,0x2
c0021f61:	74 03                	je     c0021f66 <SysOpen(regs*)+0x199>
c0021f63:	83 c8 02             	or     eax,0x2
c0021f66:	f6 c2 04             	test   dl,0x4
c0021f69:	74 03                	je     c0021f6e <SysOpen(regs*)+0x1a1>
c0021f6b:	83 c8 04             	or     eax,0x4
c0021f6e:	f6 c2 08             	test   dl,0x8
c0021f71:	74 03                	je     c0021f76 <SysOpen(regs*)+0x1a9>
c0021f73:	83 c8 0a             	or     eax,0xa
c0021f76:	80 e2 10             	and    dl,0x10
c0021f79:	74 03                	je     c0021f7e <SysOpen(regs*)+0x1b1>
c0021f7b:	83 c8 12             	or     eax,0x12
c0021f7e:	83 ec 08             	sub    esp,0x8
c0021f81:	50                   	push   eax
c0021f82:	56                   	push   esi
c0021f83:	e8 6c 87 ff ff       	call   c001a6f4 <File::open(FileOpenMode)>
c0021f88:	83 c4 10             	add    esp,0x10
c0021f8b:	85 c0                	test   eax,eax
c0021f8d:	75 1c                	jne    c0021fab <SysOpen(regs*)+0x1de>
c0021f8f:	83 ec 0c             	sub    esp,0xc
c0021f92:	56                   	push   esi
c0021f93:	e8 ba 5d ff ff       	call   c0017d52 <UnixFile::getFileDescriptor()>
c0021f98:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0021f9b:	83 c4 10             	add    esp,0x10
c0021f9e:	89 02                	mov    DWORD PTR [edx],eax
c0021fa0:	c1 f8 1f             	sar    eax,0x1f
c0021fa3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0021fa6:	e9 ba fe ff ff       	jmp    c0021e65 <SysOpen(regs*)+0x98>
c0021fab:	81 c4 04 01 00 00    	add    esp,0x104
c0021fb1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021fb6:	5b                   	pop    ebx
c0021fb7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021fbc:	5e                   	pop    esi
c0021fbd:	c3                   	ret    
c0021fbe:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021fc1:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0021fc7:	e9 92 fe ff ff       	jmp    c0021e5e <SysOpen(regs*)+0x91>

c0021fcc <KeSystemCall(regs*, void*)>:
c0021fcc:	53                   	push   ebx
c0021fcd:	83 ec 08             	sub    esp,0x8
c0021fd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021fd4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0021fd7:	83 f8 3e             	cmp    eax,0x3e
c0021fda:	77 16                	ja     c0021ff2 <KeSystemCall(regs*, void*)+0x26>
c0021fdc:	8b 14 85 c0 4b 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcb440]
c0021fe3:	85 d2                	test   edx,edx
c0021fe5:	74 0b                	je     c0021ff2 <KeSystemCall(regs*, void*)+0x26>
c0021fe7:	83 ec 0c             	sub    esp,0xc
c0021fea:	53                   	push   ebx
c0021feb:	ff d2                	call   edx
c0021fed:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0021ff0:	eb 0d                	jmp    c0021fff <KeSystemCall(regs*, void*)+0x33>
c0021ff2:	52                   	push   edx
c0021ff3:	52                   	push   edx
c0021ff4:	50                   	push   eax
c0021ff5:	68 f8 32 03 c0       	push   0xc00332f8
c0021ffa:	e8 bf 74 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0021fff:	83 c4 10             	add    esp,0x10
c0022002:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0022007:	83 c4 08             	add    esp,0x8
c002200a:	31 d2                	xor    edx,edx
c002200c:	5b                   	pop    ebx
c002200d:	c3                   	ret    
c002200e:	66 90                	xchg   ax,ax

c0022010 <KeSwitchEndian16(unsigned short)>:
c0022010:	83 ec 04             	sub    esp,0x4
c0022013:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022017:	66 89 04 24          	mov    WORD PTR [esp],ax
c002201b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c002201f:	c1 f8 08             	sar    eax,0x8
c0022022:	89 c2                	mov    edx,eax
c0022024:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0022028:	c1 e0 08             	shl    eax,0x8
c002202b:	09 d0                	or     eax,edx
c002202d:	83 c4 04             	add    esp,0x4
c0022030:	c3                   	ret    
c0022031:	8d 76 00             	lea    esi,[esi+0x0]

c0022034 <KeSwitchEndian32(unsigned int)>:
c0022034:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022038:	c1 e8 18             	shr    eax,0x18
c002203b:	89 c2                	mov    edx,eax
c002203d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022041:	c1 e0 08             	shl    eax,0x8
c0022044:	25 00 00 ff 00       	and    eax,0xff0000
c0022049:	09 c2                	or     edx,eax
c002204b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002204f:	c1 e8 08             	shr    eax,0x8
c0022052:	25 00 ff 00 00       	and    eax,0xff00
c0022057:	09 c2                	or     edx,eax
c0022059:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002205d:	c1 e0 18             	shl    eax,0x18
c0022060:	09 d0                	or     eax,edx
c0022062:	c3                   	ret    
c0022063:	90                   	nop

c0022064 <EthernetCRC32(unsigned char*, int)>:
c0022064:	83 ec 10             	sub    esp,0x10
c0022067:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002206c:	75 0a                	jne    c0022078 <EthernetCRC32(unsigned char*, int)+0x14>
c002206e:	b8 00 00 00 00       	mov    eax,0x0
c0022073:	e9 8c 00 00 00       	jmp    c0022104 <EthernetCRC32(unsigned char*, int)+0xa0>
c0022078:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c002207d:	7f 09                	jg     c0022088 <EthernetCRC32(unsigned char*, int)+0x24>
c002207f:	b8 00 00 00 00       	mov    eax,0x0
c0022084:	eb 7e                	jmp    c0022104 <EthernetCRC32(unsigned char*, int)+0xa0>
c0022086:	66 90                	xchg   ax,ax
c0022088:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0022090:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022098:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002209c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00220a0:	7d 5a                	jge    c00220fc <EthernetCRC32(unsigned char*, int)+0x98>
c00220a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00220a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00220aa:	01 d0                	add    eax,edx
c00220ac:	8a 00                	mov    al,BYTE PTR [eax]
c00220ae:	0f b6 c0             	movzx  eax,al
c00220b1:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c00220b5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00220bd:	8d 76 00             	lea    esi,[esi+0x0]
c00220c0:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c00220c5:	7f 2d                	jg     c00220f4 <EthernetCRC32(unsigned char*, int)+0x90>
c00220c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220cb:	83 e0 01             	and    eax,0x1
c00220ce:	74 10                	je     c00220e0 <EthernetCRC32(unsigned char*, int)+0x7c>
c00220d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220d4:	d1 e8                	shr    eax,1
c00220d6:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00220db:	eb 0b                	jmp    c00220e8 <EthernetCRC32(unsigned char*, int)+0x84>
c00220dd:	8d 76 00             	lea    esi,[esi+0x0]
c00220e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220e4:	d1 e8                	shr    eax,1
c00220e6:	66 90                	xchg   ax,ax
c00220e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00220ec:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00220f1:	eb cd                	jmp    c00220c0 <EthernetCRC32(unsigned char*, int)+0x5c>
c00220f3:	90                   	nop
c00220f4:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c00220f9:	eb 9d                	jmp    c0022098 <EthernetCRC32(unsigned char*, int)+0x34>
c00220fb:	90                   	nop
c00220fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022100:	f7 d0                	not    eax
c0022102:	66 90                	xchg   ax,ax
c0022104:	83 c4 10             	add    esp,0x10
c0022107:	c3                   	ret    

c0022108 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0022108:	83 ec 2c             	sub    esp,0x2c
c002210b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002210f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0022114:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022118:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002211c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022120:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0022123:	0f b7 c0             	movzx  eax,ax
c0022126:	3d 06 08 00 00       	cmp    eax,0x806
c002212b:	75 13                	jne    c0022140 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c002212d:	83 ec 0c             	sub    esp,0xc
c0022130:	68 0c 33 03 c0       	push   0xc003330c
c0022135:	e8 84 73 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c002213a:	83 c4 10             	add    esp,0x10
c002213d:	eb 25                	jmp    c0022164 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c002213f:	90                   	nop
c0022140:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022144:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0022147:	0f b7 c0             	movzx  eax,ax
c002214a:	3d 00 08 00 00       	cmp    eax,0x800
c002214f:	75 13                	jne    c0022164 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0022151:	83 ec 0c             	sub    esp,0xc
c0022154:	68 22 33 03 c0       	push   0xc0033322
c0022159:	e8 60 73 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c002215e:	83 c4 10             	add    esp,0x10
c0022161:	8d 76 00             	lea    esi,[esi+0x0]
c0022164:	90                   	nop
c0022165:	83 c4 2c             	add    esp,0x2c
c0022168:	c3                   	ret    
c0022169:	66 90                	xchg   ax,ax
c002216b:	90                   	nop

c002216c <KeNetCreateSemaphore>:
c002216c:	53                   	push   ebx
c002216d:	83 ec 18             	sub    esp,0x18
c0022170:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0022178:	83 ec 0c             	sub    esp,0xc
c002217b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002217f:	e8 04 45 ff ff       	call   c0016688 <malloc>
c0022184:	83 c4 10             	add    esp,0x10
c0022187:	89 c3                	mov    ebx,eax
c0022189:	83 ec 08             	sub    esp,0x8
c002218c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022190:	53                   	push   ebx
c0022191:	e8 12 e9 ff ff       	call   c0020aa8 <Semaphore::Semaphore(int)>
c0022196:	83 c4 10             	add    esp,0x10
c0022199:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c002219d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00221a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221a5:	89 10                	mov    DWORD PTR [eax],edx
c00221a7:	90                   	nop
c00221a8:	83 c4 18             	add    esp,0x18
c00221ab:	5b                   	pop    ebx
c00221ac:	c3                   	ret    
c00221ad:	8d 76 00             	lea    esi,[esi+0x0]

c00221b0 <KeNetFreeSemaphore>:
c00221b0:	83 ec 0c             	sub    esp,0xc
c00221b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00221b9:	83 ec 08             	sub    esp,0x8
c00221bc:	6a 10                	push   0x10
c00221be:	50                   	push   eax
c00221bf:	e8 fc 71 ff ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c00221c4:	83 c4 10             	add    esp,0x10
c00221c7:	90                   	nop
c00221c8:	83 c4 0c             	add    esp,0xc
c00221cb:	c3                   	ret    

c00221cc <KeNetSignalSemaphore>:
c00221cc:	83 ec 0c             	sub    esp,0xc
c00221cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00221d5:	83 ec 0c             	sub    esp,0xc
c00221d8:	50                   	push   eax
c00221d9:	e8 2a ec ff ff       	call   c0020e08 <Semaphore::release()>
c00221de:	83 c4 10             	add    esp,0x10
c00221e1:	90                   	nop
c00221e2:	83 c4 0c             	add    esp,0xc
c00221e5:	c3                   	ret    
c00221e6:	66 90                	xchg   ax,ax

c00221e8 <KeNetWaitSemaphore>:
c00221e8:	83 ec 0c             	sub    esp,0xc
c00221eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00221f1:	83 ec 08             	sub    esp,0x8
c00221f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00221f8:	50                   	push   eax
c00221f9:	e8 46 ea ff ff       	call   c0020c44 <Semaphore::acquire(int)>
c00221fe:	83 c4 10             	add    esp,0x10
c0022201:	83 c4 0c             	add    esp,0xc
c0022204:	c3                   	ret    
c0022205:	8d 76 00             	lea    esi,[esi+0x0]

c0022208 <KeNetCreateThread>:
c0022208:	83 ec 0c             	sub    esp,0xc
c002220b:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0022210:	68 80 00 00 00       	push   0x80
c0022215:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022219:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002221d:	50                   	push   eax
c002221e:	e8 e9 32 00 00       	call   c002550c <Process::createThread(void (*)(void*), void*, int)>
c0022223:	83 c4 10             	add    esp,0x10
c0022226:	90                   	nop
c0022227:	83 c4 0c             	add    esp,0xc
c002222a:	c3                   	ret    
c002222b:	90                   	nop

c002222c <KeCPanic>:
c002222c:	83 ec 0c             	sub    esp,0xc
c002222f:	83 ec 0c             	sub    esp,0xc
c0022232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022236:	e8 c7 e4 ff ff       	call   c0020702 <KePanic(char const*)>
c002223b:	83 c4 10             	add    esp,0x10
c002223e:	90                   	nop
c002223f:	83 c4 0c             	add    esp,0xc
c0022242:	c3                   	ret    
c0022243:	90                   	nop

c0022244 <KeCPuts>:
c0022244:	83 ec 0c             	sub    esp,0xc
c0022247:	83 ec 08             	sub    esp,0x8
c002224a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002224e:	68 f2 39 03 c0       	push   0xc00339f2
c0022253:	e8 66 72 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0022258:	83 c4 10             	add    esp,0x10
c002225b:	90                   	nop
c002225c:	83 c4 0c             	add    esp,0xc
c002225f:	c3                   	ret    

c0022260 <CmOpen(char const*)>:
c0022260:	57                   	push   edi
c0022261:	56                   	push   esi
c0022262:	53                   	push   ebx
c0022263:	83 ec 1c             	sub    esp,0x1c
c0022266:	6a 30                	push   0x30
c0022268:	e8 1b 44 ff ff       	call   c0016688 <malloc>
c002226d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0022274:	89 c3                	mov    ebx,eax
c0022276:	e8 0d 44 ff ff       	call   c0016688 <malloc>
c002227b:	83 c4 0c             	add    esp,0xc
c002227e:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c0022284:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022288:	89 c6                	mov    esi,eax
c002228a:	50                   	push   eax
c002228b:	e8 46 84 ff ff       	call   c001a6d6 <File::File(char const*, Process*)>
c0022290:	83 c4 0c             	add    esp,0xc
c0022293:	89 33                	mov    DWORD PTR [ebx],esi
c0022295:	8d 44 24 07          	lea    eax,[esp+0x7]
c0022299:	50                   	push   eax
c002229a:	8d 44 24 10          	lea    eax,[esp+0x10]
c002229e:	50                   	push   eax
c002229f:	56                   	push   esi
c00222a0:	e8 51 87 ff ff       	call   c001a9f6 <File::stat(unsigned long long*, bool*)>
c00222a5:	5a                   	pop    edx
c00222a6:	59                   	pop    ecx
c00222a7:	6a 01                	push   0x1
c00222a9:	ff 33                	push   DWORD PTR [ebx]
c00222ab:	e8 44 84 ff ff       	call   c001a6f4 <File::open(FileOpenMode)>
c00222b0:	5e                   	pop    esi
c00222b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222b5:	e8 ce 43 ff ff       	call   c0016688 <malloc>
c00222ba:	5a                   	pop    edx
c00222bb:	8d 74 24 10          	lea    esi,[esp+0x10]
c00222bf:	89 c7                	mov    edi,eax
c00222c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00222c3:	8b 10                	mov    edx,DWORD PTR [eax]
c00222c5:	56                   	push   esi
c00222c6:	57                   	push   edi
c00222c7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00222cb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00222cf:	50                   	push   eax
c00222d0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00222d3:	83 c4 14             	add    esp,0x14
c00222d6:	ff 33                	push   DWORD PTR [ebx]
c00222d8:	e8 75 84 ff ff       	call   c001a752 <File::close()>
c00222dd:	59                   	pop    ecx
c00222de:	58                   	pop    eax
c00222df:	6a 13                	push   0x13
c00222e1:	ff 33                	push   DWORD PTR [ebx]
c00222e3:	e8 0c 84 ff ff       	call   c001a6f4 <File::open(FileOpenMode)>
c00222e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00222ea:	8b 10                	mov    edx,DWORD PTR [eax]
c00222ec:	89 34 24             	mov    DWORD PTR [esp],esi
c00222ef:	57                   	push   edi
c00222f0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00222f4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00222f8:	50                   	push   eax
c00222f9:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00222fc:	83 c4 14             	add    esp,0x14
c00222ff:	57                   	push   edi
c0022300:	e8 93 43 ff ff       	call   c0016698 <free>
c0022305:	83 c4 10             	add    esp,0x10
c0022308:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c002230b:	75 10                	jne    c002231d <CmOpen(char const*)+0xbd>
c002230d:	83 ec 0c             	sub    esp,0xc
c0022310:	68 37 33 03 c0       	push   0xc0033337
c0022315:	e8 e8 e3 ff ff       	call   c0020702 <KePanic(char const*)>
c002231a:	83 c4 10             	add    esp,0x10
c002231d:	50                   	push   eax
c002231e:	6a 00                	push   0x0
c0022320:	6a 00                	push   0x0
c0022322:	ff 33                	push   DWORD PTR [ebx]
c0022324:	8d 7b 05             	lea    edi,[ebx+0x5]
c0022327:	e8 86 84 ff ff       	call   c001a7b2 <File::seek(unsigned long long)>
c002232c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002232e:	8b 10                	mov    edx,DWORD PTR [eax]
c0022330:	89 34 24             	mov    DWORD PTR [esp],esi
c0022333:	57                   	push   edi
c0022334:	6a 00                	push   0x0
c0022336:	6a 2b                	push   0x2b
c0022338:	50                   	push   eax
c0022339:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002233c:	83 c4 1c             	add    esp,0x1c
c002233f:	6a 00                	push   0x0
c0022341:	6a 00                	push   0x0
c0022343:	ff 33                	push   DWORD PTR [ebx]
c0022345:	e8 68 84 ff ff       	call   c001a7b2 <File::seek(unsigned long long)>
c002234a:	83 c4 0c             	add    esp,0xc
c002234d:	6a 08                	push   0x8
c002234f:	68 48 33 03 c0       	push   0xc0033348
c0022354:	57                   	push   edi
c0022355:	e8 26 e0 fd ff       	call   c0000380 <memcmp>
c002235a:	83 c4 10             	add    esp,0x10
c002235d:	85 c0                	test   eax,eax
c002235f:	74 10                	je     c0022371 <CmOpen(char const*)+0x111>
c0022361:	83 ec 0c             	sub    esp,0xc
c0022364:	68 51 33 03 c0       	push   0xc0033351
c0022369:	e8 94 e3 ff ff       	call   c0020702 <KePanic(char const*)>
c002236e:	83 c4 10             	add    esp,0x10
c0022371:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0022375:	83 c4 10             	add    esp,0x10
c0022378:	89 d8                	mov    eax,ebx
c002237a:	5b                   	pop    ebx
c002237b:	5e                   	pop    esi
c002237c:	5f                   	pop    edi
c002237d:	c3                   	ret    

c002237e <CmClose(Reghive_Tag*)>:
c002237e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022382:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0022386:	74 0b                	je     c0022393 <CmClose(Reghive_Tag*)+0x15>
c0022388:	8b 00                	mov    eax,DWORD PTR [eax]
c002238a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002238e:	e9 bf 83 ff ff       	jmp    c001a752 <File::close()>
c0022393:	c3                   	ret    

c0022394 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0022394:	53                   	push   ebx
c0022395:	83 ec 18             	sub    esp,0x18
c0022398:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002239c:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00223a0:	74 29                	je     c00223cb <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c00223a2:	50                   	push   eax
c00223a3:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c00223a8:	99                   	cdq    
c00223a9:	52                   	push   edx
c00223aa:	50                   	push   eax
c00223ab:	ff 33                	push   DWORD PTR [ebx]
c00223ad:	e8 00 84 ff ff       	call   c001a7b2 <File::seek(unsigned long long)>
c00223b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00223b4:	5a                   	pop    edx
c00223b5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00223b9:	8b 10                	mov    edx,DWORD PTR [eax]
c00223bb:	51                   	push   ecx
c00223bc:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00223c0:	6a 00                	push   0x0
c00223c2:	6a 2b                	push   0x2b
c00223c4:	50                   	push   eax
c00223c5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00223c8:	83 c4 20             	add    esp,0x20
c00223cb:	83 c4 18             	add    esp,0x18
c00223ce:	5b                   	pop    ebx
c00223cf:	c3                   	ret    

c00223d0 <CmGetString(Reghive_Tag*, int, char*)>:
c00223d0:	55                   	push   ebp
c00223d1:	57                   	push   edi
c00223d2:	56                   	push   esi
c00223d3:	53                   	push   ebx
c00223d4:	31 db                	xor    ebx,ebx
c00223d6:	83 ec 70             	sub    esp,0x70
c00223d9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00223dd:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c00223e4:	50                   	push   eax
c00223e5:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00223ec:	55                   	push   ebp
c00223ed:	e8 a2 ff ff ff       	call   c0022394 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00223f2:	83 c4 10             	add    esp,0x10
c00223f5:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c00223fa:	c1 e0 08             	shl    eax,0x8
c00223fd:	89 c2                	mov    edx,eax
c00223ff:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0022404:	09 d0                	or     eax,edx
c0022406:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c002240b:	c1 e0 08             	shl    eax,0x8
c002240e:	09 d0                	or     eax,edx
c0022410:	74 25                	je     c0022437 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0022412:	52                   	push   edx
c0022413:	8d 54 24 39          	lea    edx,[esp+0x39]
c0022417:	52                   	push   edx
c0022418:	6b fb 0d             	imul   edi,ebx,0xd
c002241b:	50                   	push   eax
c002241c:	55                   	push   ebp
c002241d:	e8 72 ff ff ff       	call   c0022394 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022422:	8d 74 24 49          	lea    esi,[esp+0x49]
c0022426:	b9 27 00 00 00       	mov    ecx,0x27
c002242b:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0022432:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022434:	83 c4 10             	add    esp,0x10
c0022437:	83 c3 03             	add    ebx,0x3
c002243a:	83 fb 15             	cmp    ebx,0x15
c002243d:	75 b6                	jne    c00223f5 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c002243f:	83 c4 6c             	add    esp,0x6c
c0022442:	5b                   	pop    ebx
c0022443:	5e                   	pop    esi
c0022444:	5f                   	pop    edi
c0022445:	5d                   	pop    ebp
c0022446:	c3                   	ret    

c0022447 <CmEnterDirectory(Reghive_Tag*, int)>:
c0022447:	83 ec 40             	sub    esp,0x40
c002244a:	8d 44 24 09          	lea    eax,[esp+0x9]
c002244e:	50                   	push   eax
c002244f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022453:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022457:	e8 38 ff ff ff       	call   c0022394 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c002245c:	83 c4 10             	add    esp,0x10
c002245f:	83 c8 ff             	or     eax,0xffffffff
c0022462:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0022467:	75 19                	jne    c0022482 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0022469:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c002246e:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0022473:	c1 e0 08             	shl    eax,0x8
c0022476:	09 c2                	or     edx,eax
c0022478:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c002247d:	c1 e0 10             	shl    eax,0x10
c0022480:	09 d0                	or     eax,edx
c0022482:	83 c4 3c             	add    esp,0x3c
c0022485:	c3                   	ret    

c0022486 <CmGetNext(Reghive_Tag*, int)>:
c0022486:	83 ec 40             	sub    esp,0x40
c0022489:	8d 44 24 09          	lea    eax,[esp+0x9]
c002248d:	50                   	push   eax
c002248e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022492:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022496:	e8 f9 fe ff ff       	call   c0022394 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c002249b:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00224a0:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c00224a5:	c1 e0 08             	shl    eax,0x8
c00224a8:	09 c2                	or     edx,eax
c00224aa:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00224af:	83 c4 4c             	add    esp,0x4c
c00224b2:	c1 e0 10             	shl    eax,0x10
c00224b5:	09 d0                	or     eax,edx
c00224b7:	c3                   	ret    

c00224b8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c00224b8:	53                   	push   ebx
c00224b9:	83 ec 18             	sub    esp,0x18
c00224bc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00224c0:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00224c4:	74 29                	je     c00224ef <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c00224c6:	50                   	push   eax
c00224c7:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c00224cc:	99                   	cdq    
c00224cd:	52                   	push   edx
c00224ce:	50                   	push   eax
c00224cf:	ff 33                	push   DWORD PTR [ebx]
c00224d1:	e8 dc 82 ff ff       	call   c001a7b2 <File::seek(unsigned long long)>
c00224d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00224d8:	5a                   	pop    edx
c00224d9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00224dd:	8b 10                	mov    edx,DWORD PTR [eax]
c00224df:	51                   	push   ecx
c00224e0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00224e4:	6a 00                	push   0x0
c00224e6:	6a 2b                	push   0x2b
c00224e8:	50                   	push   eax
c00224e9:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00224ec:	83 c4 20             	add    esp,0x20
c00224ef:	83 c4 18             	add    esp,0x18
c00224f2:	5b                   	pop    ebx
c00224f3:	c3                   	ret    

c00224f4 <CmFreeExtent(Reghive_Tag*, int)>:
c00224f4:	53                   	push   ebx
c00224f5:	83 ec 3c             	sub    esp,0x3c
c00224f8:	6a 2b                	push   0x2b
c00224fa:	6a 00                	push   0x0
c00224fc:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022500:	53                   	push   ebx
c0022501:	e8 ea df fd ff       	call   c00004f0 <memset>
c0022506:	83 c4 0c             	add    esp,0xc
c0022509:	53                   	push   ebx
c002250a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002250e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022512:	e8 a1 ff ff ff       	call   c00224b8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022517:	83 c4 48             	add    esp,0x48
c002251a:	5b                   	pop    ebx
c002251b:	c3                   	ret    

c002251c <CmUpdateHeader(Reghive_Tag*)>:
c002251c:	83 ec 0c             	sub    esp,0xc
c002251f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022523:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0022527:	74 10                	je     c0022539 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0022529:	52                   	push   edx
c002252a:	8d 50 05             	lea    edx,[eax+0x5]
c002252d:	52                   	push   edx
c002252e:	6a 00                	push   0x0
c0022530:	50                   	push   eax
c0022531:	e8 82 ff ff ff       	call   c00224b8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022536:	83 c4 10             	add    esp,0x10
c0022539:	83 c4 0c             	add    esp,0xc
c002253c:	c3                   	ret    

c002253d <CmExpand(Reghive_Tag*, int)>:
c002253d:	55                   	push   ebp
c002253e:	57                   	push   edi
c002253f:	83 cf ff             	or     edi,0xffffffff
c0022542:	56                   	push   esi
c0022543:	53                   	push   ebx
c0022544:	83 ec 3c             	sub    esp,0x3c
c0022547:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c002254b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002254f:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0022553:	74 59                	je     c00225ae <CmExpand(Reghive_Tag*, int)+0x71>
c0022555:	50                   	push   eax
c0022556:	31 d2                	xor    edx,edx
c0022558:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c002255c:	31 ff                	xor    edi,edi
c002255e:	52                   	push   edx
c002255f:	50                   	push   eax
c0022560:	ff 33                	push   DWORD PTR [ebx]
c0022562:	e8 4b 82 ff ff       	call   c001a7b2 <File::seek(unsigned long long)>
c0022567:	83 c4 0c             	add    esp,0xc
c002256a:	6a 2b                	push   0x2b
c002256c:	6a 00                	push   0x0
c002256e:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0022572:	55                   	push   ebp
c0022573:	e8 78 df fd ff       	call   c00004f0 <memset>
c0022578:	83 c4 10             	add    esp,0x10
c002257b:	39 f7                	cmp    edi,esi
c002257d:	7d 1b                	jge    c002259a <CmExpand(Reghive_Tag*, int)+0x5d>
c002257f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022581:	83 ec 0c             	sub    esp,0xc
c0022584:	47                   	inc    edi
c0022585:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0022589:	8b 10                	mov    edx,DWORD PTR [eax]
c002258b:	51                   	push   ecx
c002258c:	55                   	push   ebp
c002258d:	6a 00                	push   0x0
c002258f:	6a 2b                	push   0x2b
c0022591:	50                   	push   eax
c0022592:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0022595:	83 c4 20             	add    esp,0x20
c0022598:	eb e1                	jmp    c002257b <CmExpand(Reghive_Tag*, int)+0x3e>
c002259a:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c002259d:	83 ec 0c             	sub    esp,0xc
c00225a0:	01 fe                	add    esi,edi
c00225a2:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c00225a5:	53                   	push   ebx
c00225a6:	e8 71 ff ff ff       	call   c002251c <CmUpdateHeader(Reghive_Tag*)>
c00225ab:	83 c4 10             	add    esp,0x10
c00225ae:	83 c4 3c             	add    esp,0x3c
c00225b1:	89 f8                	mov    eax,edi
c00225b3:	5b                   	pop    ebx
c00225b4:	5e                   	pop    esi
c00225b5:	5f                   	pop    edi
c00225b6:	5d                   	pop    ebp
c00225b7:	c3                   	ret    

c00225b8 <CmFindUnusedExtent(Reghive_Tag*)>:
c00225b8:	55                   	push   ebp
c00225b9:	57                   	push   edi
c00225ba:	56                   	push   esi
c00225bb:	53                   	push   ebx
c00225bc:	83 cb ff             	or     ebx,0xffffffff
c00225bf:	83 ec 1c             	sub    esp,0x1c
c00225c2:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00225c6:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c00225ca:	74 68                	je     c0022634 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00225cc:	51                   	push   ecx
c00225cd:	be 2b 00 00 00       	mov    esi,0x2b
c00225d2:	6a 00                	push   0x0
c00225d4:	31 ff                	xor    edi,edi
c00225d6:	6a 00                	push   0x0
c00225d8:	31 db                	xor    ebx,ebx
c00225da:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00225dd:	e8 d0 81 ff ff       	call   c001a7b2 <File::seek(unsigned long long)>
c00225e2:	83 c4 10             	add    esp,0x10
c00225e5:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c00225e8:	76 3b                	jbe    c0022625 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c00225ea:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00225ed:	83 ec 0c             	sub    esp,0xc
c00225f0:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00225f4:	8b 10                	mov    edx,DWORD PTR [eax]
c00225f6:	51                   	push   ecx
c00225f7:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c00225fb:	51                   	push   ecx
c00225fc:	6a 00                	push   0x0
c00225fe:	6a 01                	push   0x1
c0022600:	50                   	push   eax
c0022601:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022604:	83 c4 20             	add    esp,0x20
c0022607:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002260c:	74 26                	je     c0022634 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c002260e:	52                   	push   edx
c002260f:	43                   	inc    ebx
c0022610:	57                   	push   edi
c0022611:	56                   	push   esi
c0022612:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0022615:	e8 98 81 ff ff       	call   c001a7b2 <File::seek(unsigned long long)>
c002261a:	83 c6 2b             	add    esi,0x2b
c002261d:	83 d7 00             	adc    edi,0x0
c0022620:	83 c4 10             	add    esp,0x10
c0022623:	eb c0                	jmp    c00225e5 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0022625:	50                   	push   eax
c0022626:	50                   	push   eax
c0022627:	6a 40                	push   0x40
c0022629:	55                   	push   ebp
c002262a:	e8 0e ff ff ff       	call   c002253d <CmExpand(Reghive_Tag*, int)>
c002262f:	83 c4 10             	add    esp,0x10
c0022632:	89 c3                	mov    ebx,eax
c0022634:	83 c4 1c             	add    esp,0x1c
c0022637:	89 d8                	mov    eax,ebx
c0022639:	5b                   	pop    ebx
c002263a:	5e                   	pop    esi
c002263b:	5f                   	pop    edi
c002263c:	5d                   	pop    ebp
c002263d:	c3                   	ret    

c002263e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c002263e:	55                   	push   ebp
c002263f:	57                   	push   edi
c0022640:	56                   	push   esi
c0022641:	53                   	push   ebx
c0022642:	81 ec 88 00 00 00    	sub    esp,0x88
c0022648:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c002264f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022656:	e8 5d ff ff ff       	call   c00225b8 <CmFindUnusedExtent(Reghive_Tag*)>
c002265b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002265f:	83 c4 0c             	add    esp,0xc
c0022662:	6a 2b                	push   0x2b
c0022664:	6a 00                	push   0x0
c0022666:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c002266a:	55                   	push   ebp
c002266b:	e8 80 de fd ff       	call   c00004f0 <memset>
c0022670:	83 c4 10             	add    esp,0x10
c0022673:	85 db                	test   ebx,ebx
c0022675:	74 12                	je     c0022689 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0022677:	51                   	push   ecx
c0022678:	55                   	push   ebp
c0022679:	53                   	push   ebx
c002267a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022681:	e8 0e fd ff ff       	call   c0022394 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022686:	83 c4 10             	add    esp,0x10
c0022689:	8d 7c 24 45          	lea    edi,[esp+0x45]
c002268d:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0022694:	b9 2b 00 00 00       	mov    ecx,0x2b
c0022699:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002269b:	85 db                	test   ebx,ebx
c002269d:	74 49                	je     c00226e8 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c002269f:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00226a4:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c00226a9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00226ad:	c1 e0 08             	shl    eax,0x8
c00226b0:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00226b6:	09 c8                	or     eax,ecx
c00226b8:	74 11                	je     c00226cb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c00226ba:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00226be:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c00226c2:	c1 e8 10             	shr    eax,0x10
c00226c5:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00226c9:	eb 0f                	jmp    c00226da <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c00226cb:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00226d0:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00226d5:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00226da:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c00226de:	c1 ea 08             	shr    edx,0x8
c00226e1:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c00226e6:	eb 0f                	jmp    c00226f7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c00226e8:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00226ed:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00226f2:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00226f7:	52                   	push   edx
c00226f8:	8d 44 24 49          	lea    eax,[esp+0x49]
c00226fc:	50                   	push   eax
c00226fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022701:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022708:	e8 ab fd ff ff       	call   c00224b8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002270d:	83 c4 10             	add    esp,0x10
c0022710:	85 db                	test   ebx,ebx
c0022712:	74 12                	je     c0022726 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0022714:	50                   	push   eax
c0022715:	55                   	push   ebp
c0022716:	53                   	push   ebx
c0022717:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002271e:	e8 95 fd ff ff       	call   c00224b8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022723:	83 c4 10             	add    esp,0x10
c0022726:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002272a:	83 c4 7c             	add    esp,0x7c
c002272d:	5b                   	pop    ebx
c002272e:	5e                   	pop    esi
c002272f:	5f                   	pop    edi
c0022730:	5d                   	pop    ebp
c0022731:	c3                   	ret    

c0022732 <CmSetString(Reghive_Tag*, int, char const*)>:
c0022732:	55                   	push   ebp
c0022733:	57                   	push   edi
c0022734:	56                   	push   esi
c0022735:	53                   	push   ebx
c0022736:	bb 27 00 00 00       	mov    ebx,0x27
c002273b:	81 ec 88 00 00 00    	sub    esp,0x88
c0022741:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0022748:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c002274f:	e8 2c de fd ff       	call   c0000580 <strlen>
c0022754:	8d 48 26             	lea    ecx,[eax+0x26]
c0022757:	89 c8                	mov    eax,ecx
c0022759:	99                   	cdq    
c002275a:	f7 fb                	idiv   ebx
c002275c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022760:	83 c4 10             	add    esp,0x10
c0022763:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0022769:	7e 10                	jle    c002277b <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c002276b:	83 ec 0c             	sub    esp,0xc
c002276e:	68 62 33 03 c0       	push   0xc0033362
c0022773:	e8 8a df ff ff       	call   c0020702 <KePanic(char const*)>
c0022778:	83 c4 10             	add    esp,0x10
c002277b:	53                   	push   ebx
c002277c:	31 ed                	xor    ebp,ebp
c002277e:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0022782:	53                   	push   ebx
c0022783:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002278a:	57                   	push   edi
c002278b:	e8 04 fc ff ff       	call   c0022394 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022790:	83 c4 10             	add    esp,0x10
c0022793:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c0022797:	89 f0                	mov    eax,esi
c0022799:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c002279d:	c1 e0 08             	shl    eax,0x8
c00227a0:	09 c6                	or     esi,eax
c00227a2:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00227a6:	c1 e6 08             	shl    esi,0x8
c00227a9:	09 c6                	or     esi,eax
c00227ab:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c00227af:	7e 72                	jle    c0022823 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c00227b1:	85 f6                	test   esi,esi
c00227b3:	75 25                	jne    c00227da <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c00227b5:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c00227ba:	8d 44 24 45          	lea    eax,[esp+0x45]
c00227be:	50                   	push   eax
c00227bf:	6a 00                	push   0x0
c00227c1:	6a 00                	push   0x0
c00227c3:	57                   	push   edi
c00227c4:	e8 75 fe ff ff       	call   c002263e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00227c9:	83 c4 10             	add    esp,0x10
c00227cc:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c00227cf:	89 c6                	mov    esi,eax
c00227d1:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c00227d4:	c1 f8 10             	sar    eax,0x10
c00227d7:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c00227da:	51                   	push   ecx
c00227db:	8d 54 24 49          	lea    edx,[esp+0x49]
c00227df:	52                   	push   edx
c00227e0:	56                   	push   esi
c00227e1:	57                   	push   edi
c00227e2:	e8 ad fb ff ff       	call   c0022394 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00227e7:	83 c4 0c             	add    esp,0xc
c00227ea:	6a 27                	push   0x27
c00227ec:	6a 00                	push   0x0
c00227ee:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00227f2:	51                   	push   ecx
c00227f3:	e8 f8 dc fd ff       	call   c00004f0 <memset>
c00227f8:	6b c5 27             	imul   eax,ebp,0x27
c00227fb:	83 c4 0c             	add    esp,0xc
c00227fe:	6a 27                	push   0x27
c0022800:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0022807:	50                   	push   eax
c0022808:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c002280c:	51                   	push   ecx
c002280d:	e8 7e de fd ff       	call   c0000690 <strncpy>
c0022812:	83 c4 0c             	add    esp,0xc
c0022815:	8d 54 24 49          	lea    edx,[esp+0x49]
c0022819:	52                   	push   edx
c002281a:	56                   	push   esi
c002281b:	57                   	push   edi
c002281c:	e8 97 fc ff ff       	call   c00224b8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022821:	eb 19                	jmp    c002283c <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c0022823:	85 f6                	test   esi,esi
c0022825:	74 18                	je     c002283f <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0022827:	52                   	push   edx
c0022828:	52                   	push   edx
c0022829:	56                   	push   esi
c002282a:	57                   	push   edi
c002282b:	e8 c4 fc ff ff       	call   c00224f4 <CmFreeExtent(Reghive_Tag*, int)>
c0022830:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0022834:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0022838:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002283c:	83 c4 10             	add    esp,0x10
c002283f:	45                   	inc    ebp
c0022840:	83 c3 03             	add    ebx,0x3
c0022843:	83 fd 07             	cmp    ebp,0x7
c0022846:	0f 85 47 ff ff ff    	jne    c0022793 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c002284c:	50                   	push   eax
c002284d:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0022851:	50                   	push   eax
c0022852:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022859:	57                   	push   edi
c002285a:	e8 59 fc ff ff       	call   c00224b8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002285f:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022865:	5b                   	pop    ebx
c0022866:	5e                   	pop    esi
c0022867:	5f                   	pop    edi
c0022868:	5d                   	pop    ebp
c0022869:	c3                   	ret    

c002286a <CmGetMatch(char*, char*, bool, bool*)>:
c002286a:	56                   	push   esi
c002286b:	53                   	push   ebx
c002286c:	50                   	push   eax
c002286d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0022872:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0022876:	74 25                	je     c002289d <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0022878:	c6 06 01             	mov    BYTE PTR [esi],0x1
c002287b:	31 db                	xor    ebx,ebx
c002287d:	50                   	push   eax
c002287e:	50                   	push   eax
c002287f:	8d 04 9d c0 4c 03 c0 	lea    eax,[ebx*4-0x3ffcb340]
c0022886:	50                   	push   eax
c0022887:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002288b:	e8 f0 de fd ff       	call   c0000780 <strcmp>
c0022890:	83 c4 10             	add    esp,0x10
c0022893:	85 c0                	test   eax,eax
c0022895:	74 2e                	je     c00228c5 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0022897:	43                   	inc    ebx
c0022898:	83 fb 3f             	cmp    ebx,0x3f
c002289b:	75 e0                	jne    c002287d <CmGetMatch(char*, char*, bool, bool*)+0x13>
c002289d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00228a0:	31 db                	xor    ebx,ebx
c00228a2:	51                   	push   ecx
c00228a3:	51                   	push   ecx
c00228a4:	8d 04 9d c0 4c 03 c0 	lea    eax,[ebx*4-0x3ffcb340]
c00228ab:	50                   	push   eax
c00228ac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00228b0:	e8 cb de fd ff       	call   c0000780 <strcmp>
c00228b5:	83 c4 10             	add    esp,0x10
c00228b8:	85 c0                	test   eax,eax
c00228ba:	74 09                	je     c00228c5 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00228bc:	43                   	inc    ebx
c00228bd:	83 fb 3f             	cmp    ebx,0x3f
c00228c0:	75 e0                	jne    c00228a2 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c00228c2:	83 cb ff             	or     ebx,0xffffffff
c00228c5:	5a                   	pop    edx
c00228c6:	89 d8                	mov    eax,ebx
c00228c8:	5b                   	pop    ebx
c00228c9:	5e                   	pop    esi
c00228ca:	c3                   	ret    

c00228cb <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c00228cb:	55                   	push   ebp
c00228cc:	31 c0                	xor    eax,eax
c00228ce:	57                   	push   edi
c00228cf:	56                   	push   esi
c00228d0:	53                   	push   ebx
c00228d1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00228d5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00228d9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00228dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00228e1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00228e3:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c00228e6:	83 fd 1f             	cmp    ebp,0x1f
c00228e9:	7f 0b                	jg     c00228f6 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c00228eb:	0f b6 c2             	movzx  eax,dl
c00228ee:	d3 e0                	shl    eax,cl
c00228f0:	09 07                	or     DWORD PTR [edi],eax
c00228f2:	b0 01                	mov    al,0x1
c00228f4:	01 33                	add    DWORD PTR [ebx],esi
c00228f6:	5b                   	pop    ebx
c00228f7:	5e                   	pop    esi
c00228f8:	5f                   	pop    edi
c00228f9:	5d                   	pop    ebp
c00228fa:	c3                   	ret    

c00228fb <CmGetShift(unsigned int*, int*, int, bool*)>:
c00228fb:	57                   	push   edi
c00228fc:	56                   	push   esi
c00228fd:	53                   	push   ebx
c00228fe:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0022902:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022906:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002290a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c002290e:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0022910:	7c 17                	jl     c0022929 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0022912:	8b 17                	mov    edx,DWORD PTR [edi]
c0022914:	b8 01 00 00 00       	mov    eax,0x1
c0022919:	d3 e0                	shl    eax,cl
c002291b:	48                   	dec    eax
c002291c:	21 d0                	and    eax,edx
c002291e:	d3 ea                	shr    edx,cl
c0022920:	89 17                	mov    DWORD PTR [edi],edx
c0022922:	29 0b                	sub    DWORD PTR [ebx],ecx
c0022924:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0022927:	eb 05                	jmp    c002292e <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0022929:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002292c:	31 c0                	xor    eax,eax
c002292e:	5b                   	pop    ebx
c002292f:	5e                   	pop    esi
c0022930:	5f                   	pop    edi
c0022931:	c3                   	ret    

c0022932 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0022932:	83 ec 40             	sub    esp,0x40
c0022935:	8d 44 24 09          	lea    eax,[esp+0x9]
c0022939:	50                   	push   eax
c002293a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002293e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022942:	e8 4d fa ff ff       	call   c0022394 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022947:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002294b:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c002294f:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0022953:	89 10                	mov    DWORD PTR [eax],edx
c0022955:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0022958:	83 c4 4c             	add    esp,0x4c
c002295b:	c3                   	ret    

c002295c <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c002295c:	55                   	push   ebp
c002295d:	57                   	push   edi
c002295e:	56                   	push   esi
c002295f:	53                   	push   ebx
c0022960:	83 ec 40             	sub    esp,0x40
c0022963:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0022967:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c002296b:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c002296f:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0022973:	53                   	push   ebx
c0022974:	56                   	push   esi
c0022975:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022979:	e8 16 fa ff ff       	call   c0022394 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c002297e:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0022982:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0022986:	83 c4 0c             	add    esp,0xc
c0022989:	53                   	push   ebx
c002298a:	56                   	push   esi
c002298b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002298f:	e8 24 fb ff ff       	call   c00224b8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022994:	83 c4 4c             	add    esp,0x4c
c0022997:	5b                   	pop    ebx
c0022998:	5e                   	pop    esi
c0022999:	5f                   	pop    edi
c002299a:	5d                   	pop    ebp
c002299b:	c3                   	ret    

c002299c <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c002299c:	55                   	push   ebp
c002299d:	57                   	push   edi
c002299e:	56                   	push   esi
c002299f:	31 f6                	xor    esi,esi
c00229a1:	53                   	push   ebx
c00229a2:	31 db                	xor    ebx,ebx
c00229a4:	83 ec 40             	sub    esp,0x40
c00229a7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00229af:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00229b7:	6a 12                	push   0x12
c00229b9:	68 ee 00 00 00       	push   0xee
c00229be:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00229c2:	e8 29 db fd ff       	call   c00004f0 <memset>
c00229c7:	83 c4 10             	add    esp,0x10
c00229ca:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00229ce:	6a 08                	push   0x8
c00229d0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00229d4:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c00229d8:	50                   	push   eax
c00229d9:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00229dd:	55                   	push   ebp
c00229de:	57                   	push   edi
c00229df:	e8 e7 fe ff ff       	call   c00228cb <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00229e4:	83 c4 10             	add    esp,0x10
c00229e7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00229eb:	50                   	push   eax
c00229ec:	6a 06                	push   0x6
c00229ee:	55                   	push   ebp
c00229ef:	57                   	push   edi
c00229f0:	e8 06 ff ff ff       	call   c00228fb <CmGetShift(unsigned int*, int*, int, bool*)>
c00229f5:	83 c4 10             	add    esp,0x10
c00229f8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00229fd:	74 07                	je     c0022a06 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c00229ff:	46                   	inc    esi
c0022a00:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0022a04:	eb e1                	jmp    c00229e7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0022a06:	43                   	inc    ebx
c0022a07:	83 fb 12             	cmp    ebx,0x12
c0022a0a:	75 c2                	jne    c00229ce <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0022a0c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022a10:	31 f6                	xor    esi,esi
c0022a12:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022a15:	50                   	push   eax
c0022a16:	50                   	push   eax
c0022a17:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0022a1c:	46                   	inc    esi
c0022a1d:	8d 04 85 c0 4c 03 c0 	lea    eax,[eax*4-0x3ffcb340]
c0022a24:	50                   	push   eax
c0022a25:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0022a29:	e8 42 de fd ff       	call   c0000870 <strcat>
c0022a2e:	83 c4 10             	add    esp,0x10
c0022a31:	83 fe 18             	cmp    esi,0x18
c0022a34:	75 df                	jne    c0022a15 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0022a36:	83 c4 3c             	add    esp,0x3c
c0022a39:	31 c0                	xor    eax,eax
c0022a3b:	5b                   	pop    ebx
c0022a3c:	5e                   	pop    esi
c0022a3d:	5f                   	pop    edi
c0022a3e:	5d                   	pop    ebp
c0022a3f:	c3                   	ret    

c0022a40 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0022a40:	83 ec 40             	sub    esp,0x40
c0022a43:	8d 44 24 09          	lea    eax,[esp+0x9]
c0022a47:	50                   	push   eax
c0022a48:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022a4c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022a50:	e8 3f f9 ff ff       	call   c0022394 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022a55:	58                   	pop    eax
c0022a56:	5a                   	pop    edx
c0022a57:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022a5b:	8d 44 24 15          	lea    eax,[esp+0x15]
c0022a5f:	50                   	push   eax
c0022a60:	e8 37 ff ff ff       	call   c002299c <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0022a65:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0022a6a:	83 c4 4c             	add    esp,0x4c
c0022a6d:	c3                   	ret    

c0022a6e <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0022a6e:	55                   	push   ebp
c0022a6f:	57                   	push   edi
c0022a70:	56                   	push   esi
c0022a71:	53                   	push   ebx
c0022a72:	31 db                	xor    ebx,ebx
c0022a74:	83 ec 70             	sub    esp,0x70
c0022a77:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0022a7e:	6a 30                	push   0x30
c0022a80:	6a 00                	push   0x0
c0022a82:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0022a86:	56                   	push   esi
c0022a87:	e8 64 da fd ff       	call   c00004f0 <memset>
c0022a8c:	83 c4 10             	add    esp,0x10
c0022a8f:	83 ec 0c             	sub    esp,0xc
c0022a92:	57                   	push   edi
c0022a93:	e8 e8 da fd ff       	call   c0000580 <strlen>
c0022a98:	83 c4 10             	add    esp,0x10
c0022a9b:	39 d8                	cmp    eax,ebx
c0022a9d:	76 16                	jbe    c0022ab5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0022a9f:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0022aa3:	83 ec 0c             	sub    esp,0xc
c0022aa6:	50                   	push   eax
c0022aa7:	e8 b4 de fd ff       	call   c0000960 <toupper>
c0022aac:	83 c4 10             	add    esp,0x10
c0022aaf:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022ab2:	43                   	inc    ebx
c0022ab3:	eb da                	jmp    c0022a8f <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0022ab5:	52                   	push   edx
c0022ab6:	31 db                	xor    ebx,ebx
c0022ab8:	6a 18                	push   0x18
c0022aba:	31 ff                	xor    edi,edi
c0022abc:	6a 3f                	push   0x3f
c0022abe:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022ac2:	50                   	push   eax
c0022ac3:	e8 28 da fd ff       	call   c00004f0 <memset>
c0022ac8:	83 c4 10             	add    esp,0x10
c0022acb:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0022acf:	8d 74 24 10          	lea    esi,[esp+0x10]
c0022ad3:	84 c0                	test   al,al
c0022ad5:	0f 84 af 00 00 00    	je     c0022b8a <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0022adb:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0022adf:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0022ae2:	83 ec 0c             	sub    esp,0xc
c0022ae5:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c0022aea:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0022aee:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0022af2:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c0022af7:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0022afb:	56                   	push   esi
c0022afc:	e8 7f da fd ff       	call   c0000580 <strlen>
c0022b01:	83 c4 10             	add    esp,0x10
c0022b04:	85 c0                	test   eax,eax
c0022b06:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0022b0a:	74 0b                	je     c0022b17 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0022b0c:	50                   	push   eax
c0022b0d:	6a 01                	push   0x1
c0022b0f:	56                   	push   esi
c0022b10:	8d 44 24 20          	lea    eax,[esp+0x20]
c0022b14:	50                   	push   eax
c0022b15:	eb 0a                	jmp    c0022b21 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0022b17:	50                   	push   eax
c0022b18:	6a 00                	push   0x0
c0022b1a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022b1e:	50                   	push   eax
c0022b1f:	6a 00                	push   0x0
c0022b21:	e8 44 fd ff ff       	call   c002286a <CmGetMatch(char*, char*, bool, bool*)>
c0022b26:	83 c4 10             	add    esp,0x10
c0022b29:	83 f8 ff             	cmp    eax,0xffffffff
c0022b2c:	75 1a                	jne    c0022b48 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0022b2e:	83 ec 0c             	sub    esp,0xc
c0022b31:	68 77 33 03 c0       	push   0xc0033377
c0022b36:	e8 c7 db ff ff       	call   c0020702 <KePanic(char const*)>
c0022b3b:	83 c4 10             	add    esp,0x10
c0022b3e:	b8 02 00 00 00       	mov    eax,0x2
c0022b43:	e9 bb 00 00 00       	jmp    c0022c03 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0022b48:	83 ff 18             	cmp    edi,0x18
c0022b4b:	75 1a                	jne    c0022b67 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0022b4d:	83 ec 0c             	sub    esp,0xc
c0022b50:	68 8c 33 03 c0       	push   0xc003338c
c0022b55:	e8 a8 db ff ff       	call   c0020702 <KePanic(char const*)>
c0022b5a:	83 c4 10             	add    esp,0x10
c0022b5d:	b8 01 00 00 00       	mov    eax,0x1
c0022b62:	e9 9c 00 00 00       	jmp    c0022c03 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0022b67:	47                   	inc    edi
c0022b68:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0022b6d:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0022b71:	0f 45 dd             	cmovne ebx,ebp
c0022b74:	83 ec 0c             	sub    esp,0xc
c0022b77:	56                   	push   esi
c0022b78:	e8 03 da fd ff       	call   c0000580 <strlen>
c0022b7d:	83 c4 10             	add    esp,0x10
c0022b80:	85 c0                	test   eax,eax
c0022b82:	74 06                	je     c0022b8a <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0022b84:	43                   	inc    ebx
c0022b85:	e9 41 ff ff ff       	jmp    c0022acb <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0022b8a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022b92:	31 db                	xor    ebx,ebx
c0022b94:	31 ff                	xor    edi,edi
c0022b96:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0022b9e:	50                   	push   eax
c0022b9f:	6a 12                	push   0x12
c0022ba1:	68 ee 00 00 00       	push   0xee
c0022ba6:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022bad:	e8 3e d9 fd ff       	call   c00004f0 <memset>
c0022bb2:	83 c4 10             	add    esp,0x10
c0022bb5:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0022bb9:	83 fb 17             	cmp    ebx,0x17
c0022bbc:	7e 26                	jle    c0022be4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c0022bbe:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0022bc2:	50                   	push   eax
c0022bc3:	6a 08                	push   0x8
c0022bc5:	55                   	push   ebp
c0022bc6:	56                   	push   esi
c0022bc7:	e8 2f fd ff ff       	call   c00228fb <CmGetShift(unsigned int*, int*, int, bool*)>
c0022bcc:	83 c4 10             	add    esp,0x10
c0022bcf:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0022bd4:	74 26                	je     c0022bfc <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c0022bd6:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0022bdd:	4b                   	dec    ebx
c0022bde:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0022be1:	47                   	inc    edi
c0022be2:	eb 1c                	jmp    c0022c00 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0022be4:	6a 06                	push   0x6
c0022be6:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0022beb:	50                   	push   eax
c0022bec:	55                   	push   ebp
c0022bed:	56                   	push   esi
c0022bee:	e8 d8 fc ff ff       	call   c00228cb <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0022bf3:	83 c4 10             	add    esp,0x10
c0022bf6:	84 c0                	test   al,al
c0022bf8:	75 06                	jne    c0022c00 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0022bfa:	eb c2                	jmp    c0022bbe <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0022bfc:	31 c0                	xor    eax,eax
c0022bfe:	eb 03                	jmp    c0022c03 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0022c00:	43                   	inc    ebx
c0022c01:	eb b2                	jmp    c0022bb5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c0022c03:	83 c4 6c             	add    esp,0x6c
c0022c06:	5b                   	pop    ebx
c0022c07:	5e                   	pop    esi
c0022c08:	5f                   	pop    edi
c0022c09:	5d                   	pop    ebp
c0022c0a:	c3                   	ret    

c0022c0b <CmCreateString(Reghive_Tag*, int, char const*)>:
c0022c0b:	53                   	push   ebx
c0022c0c:	83 ec 3c             	sub    esp,0x3c
c0022c0f:	6a 2b                	push   0x2b
c0022c11:	6a 00                	push   0x0
c0022c13:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022c17:	53                   	push   ebx
c0022c18:	e8 d3 d8 fd ff       	call   c00004f0 <memset>
c0022c1d:	58                   	pop    eax
c0022c1e:	5a                   	pop    edx
c0022c1f:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022c23:	50                   	push   eax
c0022c24:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022c28:	e8 41 fe ff ff       	call   c0022a6e <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022c2d:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0022c32:	83 c4 0c             	add    esp,0xc
c0022c35:	6a 15                	push   0x15
c0022c37:	6a 00                	push   0x0
c0022c39:	8d 44 24 27          	lea    eax,[esp+0x27]
c0022c3d:	50                   	push   eax
c0022c3e:	e8 ad d8 fd ff       	call   c00004f0 <memset>
c0022c43:	53                   	push   ebx
c0022c44:	6a 00                	push   0x0
c0022c46:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022c4a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022c4e:	e8 eb f9 ff ff       	call   c002263e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022c53:	83 c4 58             	add    esp,0x58
c0022c56:	5b                   	pop    ebx
c0022c57:	c3                   	ret    

c0022c58 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0022c58:	56                   	push   esi
c0022c59:	53                   	push   ebx
c0022c5a:	83 ec 48             	sub    esp,0x48
c0022c5d:	6a 12                	push   0x12
c0022c5f:	68 ff 00 00 00       	push   0xff
c0022c64:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0022c68:	56                   	push   esi
c0022c69:	e8 82 d8 fd ff       	call   c00004f0 <memset>
c0022c6e:	5a                   	pop    edx
c0022c6f:	59                   	pop    ecx
c0022c70:	56                   	push   esi
c0022c71:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0022c75:	e8 f4 fd ff ff       	call   c0022a6e <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022c7a:	83 c4 10             	add    esp,0x10
c0022c7d:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0022c81:	85 db                	test   ebx,ebx
c0022c83:	74 42                	je     c0022cc7 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0022c85:	50                   	push   eax
c0022c86:	8d 44 24 19          	lea    eax,[esp+0x19]
c0022c8a:	50                   	push   eax
c0022c8b:	53                   	push   ebx
c0022c8c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022c90:	e8 ff f6 ff ff       	call   c0022394 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022c95:	83 c4 0c             	add    esp,0xc
c0022c98:	6a 12                	push   0x12
c0022c9a:	8d 44 24 21          	lea    eax,[esp+0x21]
c0022c9e:	50                   	push   eax
c0022c9f:	56                   	push   esi
c0022ca0:	e8 db d6 fd ff       	call   c0000380 <memcmp>
c0022ca5:	83 c4 10             	add    esp,0x10
c0022ca8:	85 c0                	test   eax,eax
c0022caa:	74 1e                	je     c0022cca <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0022cac:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0022cb1:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0022cb6:	c1 e3 08             	shl    ebx,0x8
c0022cb9:	09 d8                	or     eax,ebx
c0022cbb:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0022cc0:	c1 e3 10             	shl    ebx,0x10
c0022cc3:	09 c3                	or     ebx,eax
c0022cc5:	eb ba                	jmp    c0022c81 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0022cc7:	83 cb ff             	or     ebx,0xffffffff
c0022cca:	83 c4 44             	add    esp,0x44
c0022ccd:	89 d8                	mov    eax,ebx
c0022ccf:	5b                   	pop    ebx
c0022cd0:	5e                   	pop    esi
c0022cd1:	c3                   	ret    

c0022cd2 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0022cd2:	57                   	push   edi
c0022cd3:	56                   	push   esi
c0022cd4:	53                   	push   ebx
c0022cd5:	83 ec 34             	sub    esp,0x34
c0022cd8:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0022cdc:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0022ce0:	6a 2b                	push   0x2b
c0022ce2:	6a 00                	push   0x0
c0022ce4:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022ce8:	53                   	push   ebx
c0022ce9:	e8 02 d8 fd ff       	call   c00004f0 <memset>
c0022cee:	58                   	pop    eax
c0022cef:	5a                   	pop    edx
c0022cf0:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022cf4:	50                   	push   eax
c0022cf5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022cf9:	e8 70 fd ff ff       	call   c0022a6e <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022cfe:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c0022d02:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0022d06:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0022d0a:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0022d0e:	53                   	push   ebx
c0022d0f:	6a 00                	push   0x0
c0022d11:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022d15:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022d19:	e8 20 f9 ff ff       	call   c002263e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022d1e:	83 c4 50             	add    esp,0x50
c0022d21:	5b                   	pop    ebx
c0022d22:	5e                   	pop    esi
c0022d23:	5f                   	pop    edi
c0022d24:	c3                   	ret    

c0022d25 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0022d25:	55                   	push   ebp
c0022d26:	57                   	push   edi
c0022d27:	56                   	push   esi
c0022d28:	53                   	push   ebx
c0022d29:	83 ec 40             	sub    esp,0x40
c0022d2c:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0022d30:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0022d34:	6a 2b                	push   0x2b
c0022d36:	6a 00                	push   0x0
c0022d38:	8d 74 24 11          	lea    esi,[esp+0x11]
c0022d3c:	56                   	push   esi
c0022d3d:	e8 ae d7 fd ff       	call   c00004f0 <memset>
c0022d42:	5f                   	pop    edi
c0022d43:	89 ef                	mov    edi,ebp
c0022d45:	58                   	pop    eax
c0022d46:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022d4a:	50                   	push   eax
c0022d4b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0022d4f:	e8 1a fd ff ff       	call   c0022a6e <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022d54:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0022d59:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0022d5e:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0022d63:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0022d68:	83 c4 10             	add    esp,0x10
c0022d6b:	85 ed                	test   ebp,ebp
c0022d6d:	74 14                	je     c0022d83 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0022d6f:	51                   	push   ecx
c0022d70:	51                   	push   ecx
c0022d71:	57                   	push   edi
c0022d72:	53                   	push   ebx
c0022d73:	e8 0e f7 ff ff       	call   c0022486 <CmGetNext(Reghive_Tag*, int)>
c0022d78:	83 c4 10             	add    esp,0x10
c0022d7b:	85 c0                	test   eax,eax
c0022d7d:	74 04                	je     c0022d83 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0022d7f:	89 c7                	mov    edi,eax
c0022d81:	eb e8                	jmp    c0022d6b <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0022d83:	56                   	push   esi
c0022d84:	6a 00                	push   0x0
c0022d86:	57                   	push   edi
c0022d87:	53                   	push   ebx
c0022d88:	e8 b1 f8 ff ff       	call   c002263e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022d8d:	83 c4 0c             	add    esp,0xc
c0022d90:	56                   	push   esi
c0022d91:	50                   	push   eax
c0022d92:	89 c7                	mov    edi,eax
c0022d94:	53                   	push   ebx
c0022d95:	e8 fa f5 ff ff       	call   c0022394 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022d9a:	58                   	pop    eax
c0022d9b:	5a                   	pop    edx
c0022d9c:	6a 6c                	push   0x6c
c0022d9e:	6a 00                	push   0x0
c0022da0:	6a 00                	push   0x0
c0022da2:	68 9d 33 03 c0       	push   0xc003339d
c0022da7:	57                   	push   edi
c0022da8:	53                   	push   ebx
c0022da9:	e8 24 ff ff ff       	call   c0022cd2 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0022dae:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0022db2:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0022db6:	c1 e8 10             	shr    eax,0x10
c0022db9:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0022dbd:	83 c4 1c             	add    esp,0x1c
c0022dc0:	56                   	push   esi
c0022dc1:	57                   	push   edi
c0022dc2:	53                   	push   ebx
c0022dc3:	e8 f0 f6 ff ff       	call   c00224b8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022dc8:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022dcd:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0022dd2:	c1 e0 08             	shl    eax,0x8
c0022dd5:	09 c2                	or     edx,eax
c0022dd7:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0022ddc:	83 c4 4c             	add    esp,0x4c
c0022ddf:	5b                   	pop    ebx
c0022de0:	5e                   	pop    esi
c0022de1:	c1 e0 10             	shl    eax,0x10
c0022de4:	09 d0                	or     eax,edx
c0022de6:	5f                   	pop    edi
c0022de7:	5d                   	pop    ebp
c0022de8:	c3                   	ret    

c0022de9 <zStrtok(char*, char const*)>:
c0022de9:	55                   	push   ebp
c0022dea:	57                   	push   edi
c0022deb:	56                   	push   esi
c0022dec:	53                   	push   ebx
c0022ded:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022df1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022df5:	85 db                	test   ebx,ebx
c0022df7:	74 2f                	je     c0022e28 <zStrtok(char*, char const*)+0x3f>
c0022df9:	85 c0                	test   eax,eax
c0022dfb:	75 09                	jne    c0022e06 <zStrtok(char*, char const*)+0x1d>
c0022dfd:	a1 f0 09 04 c0       	mov    eax,ds:0xc00409f0
c0022e02:	85 c0                	test   eax,eax
c0022e04:	74 50                	je     c0022e56 <zStrtok(char*, char const*)+0x6d>
c0022e06:	31 c9                	xor    ecx,ecx
c0022e08:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0022e0c:	74 03                	je     c0022e11 <zStrtok(char*, char const*)+0x28>
c0022e0e:	41                   	inc    ecx
c0022e0f:	eb f7                	jmp    c0022e08 <zStrtok(char*, char const*)+0x1f>
c0022e11:	31 d2                	xor    edx,edx
c0022e13:	39 ca                	cmp    edx,ecx
c0022e15:	74 15                	je     c0022e2c <zStrtok(char*, char const*)+0x43>
c0022e17:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0022e1b:	8d 3c 10             	lea    edi,[eax+edx*1]
c0022e1e:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0022e21:	39 ee                	cmp    esi,ebp
c0022e23:	74 13                	je     c0022e38 <zStrtok(char*, char const*)+0x4f>
c0022e25:	42                   	inc    edx
c0022e26:	eb eb                	jmp    c0022e13 <zStrtok(char*, char const*)+0x2a>
c0022e28:	31 c0                	xor    eax,eax
c0022e2a:	eb 2a                	jmp    c0022e56 <zStrtok(char*, char const*)+0x6d>
c0022e2c:	c7 05 f0 09 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00409f0,0x0
c0022e36:	eb 1e                	jmp    c0022e56 <zStrtok(char*, char const*)+0x6d>
c0022e38:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0022e3b:	39 ce                	cmp    esi,ecx
c0022e3d:	75 0a                	jne    c0022e49 <zStrtok(char*, char const*)+0x60>
c0022e3f:	40                   	inc    eax
c0022e40:	a3 f0 09 04 c0       	mov    ds:0xc00409f0,eax
c0022e45:	89 d8                	mov    eax,ebx
c0022e47:	eb 0d                	jmp    c0022e56 <zStrtok(char*, char const*)+0x6d>
c0022e49:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0022e4c:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0022e50:	89 15 f0 09 04 c0    	mov    DWORD PTR ds:0xc00409f0,edx
c0022e56:	5b                   	pop    ebx
c0022e57:	5e                   	pop    esi
c0022e58:	5f                   	pop    edi
c0022e59:	5d                   	pop    ebp
c0022e5a:	c3                   	ret    

c0022e5b <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0022e5b:	57                   	push   edi
c0022e5c:	56                   	push   esi
c0022e5d:	53                   	push   ebx
c0022e5e:	81 ec 08 01 00 00    	sub    esp,0x108
c0022e64:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0022e6b:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0022e72:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0022e76:	53                   	push   ebx
c0022e77:	e8 d4 d7 fd ff       	call   c0000650 <strcpy>
c0022e7c:	59                   	pop    ecx
c0022e7d:	5e                   	pop    esi
c0022e7e:	68 3f 37 03 c0       	push   0xc003373f
c0022e83:	53                   	push   ebx
c0022e84:	bb 01 00 00 00       	mov    ebx,0x1
c0022e89:	e8 5b ff ff ff       	call   c0022de9 <zStrtok(char*, char const*)>
c0022e8e:	83 c4 10             	add    esp,0x10
c0022e91:	85 c0                	test   eax,eax
c0022e93:	74 3b                	je     c0022ed0 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022e95:	52                   	push   edx
c0022e96:	50                   	push   eax
c0022e97:	6a 01                	push   0x1
c0022e99:	57                   	push   edi
c0022e9a:	e8 b9 fd ff ff       	call   c0022c58 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0022e9f:	59                   	pop    ecx
c0022ea0:	5e                   	pop    esi
c0022ea1:	89 c3                	mov    ebx,eax
c0022ea3:	68 3f 37 03 c0       	push   0xc003373f
c0022ea8:	6a 00                	push   0x0
c0022eaa:	e8 3a ff ff ff       	call   c0022de9 <zStrtok(char*, char const*)>
c0022eaf:	83 c4 10             	add    esp,0x10
c0022eb2:	85 c0                	test   eax,eax
c0022eb4:	89 c6                	mov    esi,eax
c0022eb6:	74 18                	je     c0022ed0 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022eb8:	52                   	push   edx
c0022eb9:	52                   	push   edx
c0022eba:	53                   	push   ebx
c0022ebb:	57                   	push   edi
c0022ebc:	e8 86 f5 ff ff       	call   c0022447 <CmEnterDirectory(Reghive_Tag*, int)>
c0022ec1:	83 c4 10             	add    esp,0x10
c0022ec4:	83 f8 ff             	cmp    eax,0xffffffff
c0022ec7:	89 c3                	mov    ebx,eax
c0022ec9:	74 05                	je     c0022ed0 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022ecb:	50                   	push   eax
c0022ecc:	56                   	push   esi
c0022ecd:	53                   	push   ebx
c0022ece:	eb c9                	jmp    c0022e99 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0022ed0:	81 c4 00 01 00 00    	add    esp,0x100
c0022ed6:	89 d8                	mov    eax,ebx
c0022ed8:	5b                   	pop    ebx
c0022ed9:	5e                   	pop    esi
c0022eda:	5f                   	pop    edi
c0022edb:	c3                   	ret    

c0022edc <CmDisplayTree(Reghive_Tag*, int, int)>:
c0022edc:	55                   	push   ebp
c0022edd:	57                   	push   edi
c0022ede:	56                   	push   esi
c0022edf:	53                   	push   ebx
c0022ee0:	83 ec 5c             	sub    esp,0x5c
c0022ee3:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0022ee7:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0022eeb:	85 db                	test   ebx,ebx
c0022eed:	0f 8e 84 00 00 00    	jle    c0022f77 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0022ef3:	57                   	push   edi
c0022ef4:	31 ed                	xor    ebp,ebp
c0022ef6:	6a 32                	push   0x32
c0022ef8:	6a 00                	push   0x0
c0022efa:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0022efe:	57                   	push   edi
c0022eff:	e8 ec d5 fd ff       	call   c00004f0 <memset>
c0022f04:	83 c4 0c             	add    esp,0xc
c0022f07:	57                   	push   edi
c0022f08:	53                   	push   ebx
c0022f09:	56                   	push   esi
c0022f0a:	e8 31 fb ff ff       	call   c0022a40 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0022f0f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022f13:	83 c4 10             	add    esp,0x10
c0022f16:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0022f1a:	7d 13                	jge    c0022f2f <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0022f1c:	83 ec 0c             	sub    esp,0xc
c0022f1f:	45                   	inc    ebp
c0022f20:	68 a0 fd 02 c0       	push   0xc002fda0
c0022f25:	e8 94 65 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0022f2a:	83 c4 10             	add    esp,0x10
c0022f2d:	eb e7                	jmp    c0022f16 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0022f2f:	51                   	push   ecx
c0022f30:	57                   	push   edi
c0022f31:	53                   	push   ebx
c0022f32:	68 a3 33 03 c0       	push   0xc00333a3
c0022f37:	e8 82 65 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0022f3c:	83 c4 10             	add    esp,0x10
c0022f3f:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0022f44:	75 1e                	jne    c0022f64 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0022f46:	52                   	push   edx
c0022f47:	52                   	push   edx
c0022f48:	53                   	push   ebx
c0022f49:	56                   	push   esi
c0022f4a:	e8 f8 f4 ff ff       	call   c0022447 <CmEnterDirectory(Reghive_Tag*, int)>
c0022f4f:	83 c4 0c             	add    esp,0xc
c0022f52:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0022f56:	8d 51 04             	lea    edx,[ecx+0x4]
c0022f59:	52                   	push   edx
c0022f5a:	50                   	push   eax
c0022f5b:	56                   	push   esi
c0022f5c:	e8 7b ff ff ff       	call   c0022edc <CmDisplayTree(Reghive_Tag*, int, int)>
c0022f61:	83 c4 10             	add    esp,0x10
c0022f64:	50                   	push   eax
c0022f65:	50                   	push   eax
c0022f66:	53                   	push   ebx
c0022f67:	56                   	push   esi
c0022f68:	e8 19 f5 ff ff       	call   c0022486 <CmGetNext(Reghive_Tag*, int)>
c0022f6d:	83 c4 10             	add    esp,0x10
c0022f70:	89 c3                	mov    ebx,eax
c0022f72:	e9 74 ff ff ff       	jmp    c0022eeb <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0022f77:	83 c4 5c             	add    esp,0x5c
c0022f7a:	5b                   	pop    ebx
c0022f7b:	5e                   	pop    esi
c0022f7c:	5f                   	pop    edi
c0022f7d:	5d                   	pop    ebp
c0022f7e:	c3                   	ret    

c0022f7f <CmSplitFinalSlashInPlace(char*)>:
c0022f7f:	53                   	push   ebx
c0022f80:	83 ec 14             	sub    esp,0x14
c0022f83:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022f87:	53                   	push   ebx
c0022f88:	e8 f3 d5 fd ff       	call   c0000580 <strlen>
c0022f8d:	83 c4 10             	add    esp,0x10
c0022f90:	48                   	dec    eax
c0022f91:	85 c0                	test   eax,eax
c0022f93:	74 15                	je     c0022faa <CmSplitFinalSlashInPlace(char*)+0x2b>
c0022f95:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0022f99:	8d 14 03             	lea    edx,[ebx+eax*1]
c0022f9c:	75 09                	jne    c0022fa7 <CmSplitFinalSlashInPlace(char*)+0x28>
c0022f9e:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0022fa1:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0022fa5:	eb 05                	jmp    c0022fac <CmSplitFinalSlashInPlace(char*)+0x2d>
c0022fa7:	48                   	dec    eax
c0022fa8:	eb e7                	jmp    c0022f91 <CmSplitFinalSlashInPlace(char*)+0x12>
c0022faa:	31 c0                	xor    eax,eax
c0022fac:	83 c4 08             	add    esp,0x8
c0022faf:	5b                   	pop    ebx
c0022fb0:	c3                   	ret    

c0022fb1 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0022fb1:	55                   	push   ebp
c0022fb2:	57                   	push   edi
c0022fb3:	56                   	push   esi
c0022fb4:	53                   	push   ebx
c0022fb5:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022fbb:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0022fc2:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0022fc5:	8d 43 01             	lea    eax,[ebx+0x1]
c0022fc8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022fcc:	89 f0                	mov    eax,esi
c0022fce:	3c 40                	cmp    al,0x40
c0022fd0:	75 1b                	jne    c0022fed <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c0022fd2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0022fd5:	85 c0                	test   eax,eax
c0022fd7:	74 08                	je     c0022fe1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0022fd9:	83 f8 3a             	cmp    eax,0x3a
c0022fdc:	74 03                	je     c0022fe1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0022fde:	43                   	inc    ebx
c0022fdf:	eb f1                	jmp    c0022fd2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c0022fe1:	85 c0                	test   eax,eax
c0022fe3:	0f 84 45 01 00 00    	je     c002312e <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022fe9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0022fec:	43                   	inc    ebx
c0022fed:	50                   	push   eax
c0022fee:	6a 40                	push   0x40
c0022ff0:	6a 00                	push   0x0
c0022ff2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022ff6:	50                   	push   eax
c0022ff7:	e8 f4 d4 fd ff       	call   c00004f0 <memset>
c0022ffc:	89 f1                	mov    ecx,esi
c0022ffe:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0023005:	31 c0                	xor    eax,eax
c0023007:	83 c4 10             	add    esp,0x10
c002300a:	0f be f1             	movsx  esi,cl
c002300d:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0023010:	85 d2                	test   edx,edx
c0023012:	89 d1                	mov    ecx,edx
c0023014:	0f 84 14 01 00 00    	je     c002312e <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c002301a:	3d c7 00 00 00       	cmp    eax,0xc7
c002301f:	0f 8f 09 01 00 00    	jg     c002312e <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0023025:	83 fa 0a             	cmp    edx,0xa
c0023028:	0f 85 f1 00 00 00    	jne    c002311f <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c002302e:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0023033:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0023038:	89 c8                	mov    eax,ecx
c002303a:	a8 df                	test   al,0xdf
c002303c:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0023041:	83 f9 23             	cmp    ecx,0x23
c0023044:	0f 94 c2             	sete   dl
c0023047:	89 d5                	mov    ebp,edx
c0023049:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002304d:	09 ea                	or     edx,ebp
c002304f:	80 e2 01             	and    dl,0x1
c0023052:	75 47                	jne    c002309b <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0023054:	83 e8 09             	sub    eax,0x9
c0023057:	3c 01                	cmp    al,0x1
c0023059:	76 40                	jbe    c002309b <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c002305b:	83 f9 5b             	cmp    ecx,0x5b
c002305e:	75 42                	jne    c00230a2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0023060:	83 fe 40             	cmp    esi,0x40
c0023063:	75 36                	jne    c002309b <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0023065:	83 ec 0c             	sub    esp,0xc
c0023068:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c002306c:	55                   	push   ebp
c002306d:	e8 0e d5 fd ff       	call   c0000580 <strlen>
c0023072:	83 c4 10             	add    esp,0x10
c0023075:	83 f8 3f             	cmp    eax,0x3f
c0023078:	0f 87 b0 00 00 00    	ja     c002312e <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c002307e:	50                   	push   eax
c002307f:	50                   	push   eax
c0023080:	55                   	push   ebp
c0023081:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0023085:	55                   	push   ebp
c0023086:	e8 c5 d5 fd ff       	call   c0000650 <strcpy>
c002308b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c002308e:	e8 ed d4 fd ff       	call   c0000580 <strlen>
c0023093:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0023098:	83 c4 10             	add    esp,0x10
c002309b:	31 d2                	xor    edx,edx
c002309d:	e9 84 00 00 00       	jmp    c0023126 <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c00230a2:	83 fe 40             	cmp    esi,0x40
c00230a5:	74 06                	je     c00230ad <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c00230a7:	8d 54 24 58          	lea    edx,[esp+0x58]
c00230ab:	eb 19                	jmp    c00230c6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c00230ad:	51                   	push   ecx
c00230ae:	51                   	push   ecx
c00230af:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00230b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00230b7:	50                   	push   eax
c00230b8:	e8 c3 d6 fd ff       	call   c0000780 <strcmp>
c00230bd:	83 c4 10             	add    esp,0x10
c00230c0:	85 c0                	test   eax,eax
c00230c2:	75 d7                	jne    c002309b <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00230c4:	eb e1                	jmp    c00230a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c00230c6:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00230c9:	85 c9                	test   ecx,ecx
c00230cb:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c00230d0:	83 f9 3d             	cmp    ecx,0x3d
c00230d3:	0f 94 c0             	sete   al
c00230d6:	89 c5                	mov    ebp,eax
c00230d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00230dc:	09 e8                	or     eax,ebp
c00230de:	a8 01                	test   al,0x1
c00230e0:	89 c5                	mov    ebp,eax
c00230e2:	75 03                	jne    c00230e7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c00230e4:	42                   	inc    edx
c00230e5:	eb df                	jmp    c00230c6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c00230e7:	85 c9                	test   ecx,ecx
c00230e9:	74 43                	je     c002312e <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00230eb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00230ef:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00230f2:	52                   	push   edx
c00230f3:	52                   	push   edx
c00230f4:	8d 44 24 60          	lea    eax,[esp+0x60]
c00230f8:	50                   	push   eax
c00230f9:	53                   	push   ebx
c00230fa:	e8 81 d6 fd ff       	call   c0000780 <strcmp>
c00230ff:	83 c4 10             	add    esp,0x10
c0023102:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023106:	85 c0                	test   eax,eax
c0023108:	75 91                	jne    c002309b <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c002310a:	50                   	push   eax
c002310b:	42                   	inc    edx
c002310c:	50                   	push   eax
c002310d:	52                   	push   edx
c002310e:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0023115:	e8 36 d5 fd ff       	call   c0000650 <strcpy>
c002311a:	83 c4 10             	add    esp,0x10
c002311d:	eb 11                	jmp    c0023130 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c002311f:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0023123:	8d 50 01             	lea    edx,[eax+0x1]
c0023126:	47                   	inc    edi
c0023127:	89 d0                	mov    eax,edx
c0023129:	e9 df fe ff ff       	jmp    c002300d <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c002312e:	31 ed                	xor    ebp,ebp
c0023130:	81 c4 2c 01 00 00    	add    esp,0x12c
c0023136:	89 e8                	mov    eax,ebp
c0023138:	5b                   	pop    ebx
c0023139:	5e                   	pop    esi
c002313a:	5f                   	pop    edi
c002313b:	5d                   	pop    ebp
c002313c:	c3                   	ret    

c002313d <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c002313d:	57                   	push   edi
c002313e:	56                   	push   esi
c002313f:	53                   	push   ebx
c0023140:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0023146:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c002314d:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0023154:	53                   	push   ebx
c0023155:	e8 26 d4 fd ff       	call   c0000580 <strlen>
c002315a:	89 34 24             	mov    DWORD PTR [esp],esi
c002315d:	89 c7                	mov    edi,eax
c002315f:	e8 1c d4 fd ff       	call   c0000580 <strlen>
c0023164:	83 c4 10             	add    esp,0x10
c0023167:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c002316b:	3d ff 00 00 00       	cmp    eax,0xff
c0023170:	0f 87 d3 00 00 00    	ja     c0023249 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0023176:	57                   	push   edi
c0023177:	57                   	push   edi
c0023178:	56                   	push   esi
c0023179:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c002317d:	56                   	push   esi
c002317e:	e8 cd d4 fd ff       	call   c0000650 <strcpy>
c0023183:	58                   	pop    eax
c0023184:	5a                   	pop    edx
c0023185:	68 3f 37 03 c0       	push   0xc003373f
c002318a:	56                   	push   esi
c002318b:	e8 e0 d6 fd ff       	call   c0000870 <strcat>
c0023190:	59                   	pop    ecx
c0023191:	5f                   	pop    edi
c0023192:	53                   	push   ebx
c0023193:	56                   	push   esi
c0023194:	e8 d7 d6 fd ff       	call   c0000870 <strcat>
c0023199:	58                   	pop    eax
c002319a:	5a                   	pop    edx
c002319b:	68 ad 33 03 c0       	push   0xc00333ad
c00231a0:	56                   	push   esi
c00231a1:	e8 ca d6 fd ff       	call   c0000870 <strcat>
c00231a6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00231ad:	e8 d6 34 ff ff       	call   c0016688 <malloc>
c00231b2:	83 c4 0c             	add    esp,0xc
c00231b5:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c00231bb:	56                   	push   esi
c00231bc:	50                   	push   eax
c00231bd:	89 c3                	mov    ebx,eax
c00231bf:	e8 12 75 ff ff       	call   c001a6d6 <File::File(char const*, Process*)>
c00231c4:	83 c4 10             	add    esp,0x10
c00231c7:	85 db                	test   ebx,ebx
c00231c9:	74 7e                	je     c0023249 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00231cb:	51                   	push   ecx
c00231cc:	51                   	push   ecx
c00231cd:	6a 01                	push   0x1
c00231cf:	53                   	push   ebx
c00231d0:	e8 1f 75 ff ff       	call   c001a6f4 <File::open(FileOpenMode)>
c00231d5:	83 c4 10             	add    esp,0x10
c00231d8:	85 c0                	test   eax,eax
c00231da:	74 08                	je     c00231e4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00231dc:	83 ec 0c             	sub    esp,0xc
c00231df:	8b 03                	mov    eax,DWORD PTR [ebx]
c00231e1:	53                   	push   ebx
c00231e2:	eb 5f                	jmp    c0023243 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00231e4:	52                   	push   edx
c00231e5:	8d 44 24 17          	lea    eax,[esp+0x17]
c00231e9:	50                   	push   eax
c00231ea:	8d 44 24 20          	lea    eax,[esp+0x20]
c00231ee:	50                   	push   eax
c00231ef:	53                   	push   ebx
c00231f0:	e8 01 78 ff ff       	call   c001a9f6 <File::stat(unsigned long long*, bool*)>
c00231f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00231f9:	83 c4 10             	add    esp,0x10
c00231fc:	89 c1                	mov    ecx,eax
c00231fe:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0023202:	74 31                	je     c0023235 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0023204:	83 ec 0c             	sub    esp,0xc
c0023207:	50                   	push   eax
c0023208:	e8 7b 34 ff ff       	call   c0016688 <malloc>
c002320d:	89 c6                	mov    esi,eax
c002320f:	58                   	pop    eax
c0023210:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023212:	8d 54 24 20          	lea    edx,[esp+0x20]
c0023216:	52                   	push   edx
c0023217:	56                   	push   esi
c0023218:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002321c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0023220:	53                   	push   ebx
c0023221:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023224:	83 c4 20             	add    esp,0x20
c0023227:	85 c0                	test   eax,eax
c0023229:	75 0a                	jne    c0023235 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c002322b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002322f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0023233:	74 18                	je     c002324d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0023235:	83 ec 0c             	sub    esp,0xc
c0023238:	53                   	push   ebx
c0023239:	e8 14 75 ff ff       	call   c001a752 <File::close()>
c002323e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023240:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023243:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023246:	83 c4 10             	add    esp,0x10
c0023249:	31 c0                	xor    eax,eax
c002324b:	eb 3b                	jmp    c0023288 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c002324d:	83 ec 0c             	sub    esp,0xc
c0023250:	53                   	push   ebx
c0023251:	e8 fc 74 ff ff       	call   c001a752 <File::close()>
c0023256:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023258:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002325b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002325e:	83 c4 0c             	add    esp,0xc
c0023261:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0023268:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c002326f:	56                   	push   esi
c0023270:	e8 3c fd ff ff       	call   c0022fb1 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0023275:	89 34 24             	mov    DWORD PTR [esp],esi
c0023278:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002327c:	e8 17 34 ff ff       	call   c0016698 <free>
c0023281:	83 c4 10             	add    esp,0x10
c0023284:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023288:	81 c4 20 01 00 00    	add    esp,0x120
c002328e:	5b                   	pop    ebx
c002328f:	5e                   	pop    esi
c0023290:	5f                   	pop    edi
c0023291:	c3                   	ret    

c0023292 <Reg::getLine(char*, char*, char*)>:
c0023292:	57                   	push   edi
c0023293:	56                   	push   esi
c0023294:	53                   	push   ebx
c0023295:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0023299:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002329d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00232a1:	57                   	push   edi
c00232a2:	56                   	push   esi
c00232a3:	53                   	push   ebx
c00232a4:	68 b2 33 03 c0       	push   0xc00333b2
c00232a9:	e8 8f fe ff ff       	call   c002313d <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00232ae:	83 c4 10             	add    esp,0x10
c00232b1:	84 c0                	test   al,al
c00232b3:	75 10                	jne    c00232c5 <Reg::getLine(char*, char*, char*)+0x33>
c00232b5:	57                   	push   edi
c00232b6:	56                   	push   esi
c00232b7:	53                   	push   ebx
c00232b8:	68 d7 33 03 c0       	push   0xc00333d7
c00232bd:	e8 7b fe ff ff       	call   c002313d <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00232c2:	83 c4 10             	add    esp,0x10
c00232c5:	5b                   	pop    ebx
c00232c6:	5e                   	pop    esi
c00232c7:	5f                   	pop    edi
c00232c8:	c3                   	ret    

c00232c9 <Reg::readInt(char*, char*, int*)>:
c00232c9:	55                   	push   ebp
c00232ca:	57                   	push   edi
c00232cb:	56                   	push   esi
c00232cc:	53                   	push   ebx
c00232cd:	81 ec f0 00 00 00    	sub    esp,0xf0
c00232d3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00232d7:	55                   	push   ebp
c00232d8:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00232df:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00232e6:	e8 a7 ff ff ff       	call   c0023292 <Reg::getLine(char*, char*, char*)>
c00232eb:	83 c4 10             	add    esp,0x10
c00232ee:	84 c0                	test   al,al
c00232f0:	0f 84 b6 00 00 00    	je     c00233ac <Reg::readInt(char*, char*, int*)+0xe3>
c00232f6:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c00232fb:	83 fa 2b             	cmp    edx,0x2b
c00232fe:	74 0c                	je     c002330c <Reg::readInt(char*, char*, int*)+0x43>
c0023300:	83 fa 2d             	cmp    edx,0x2d
c0023303:	75 0e                	jne    c0023313 <Reg::readInt(char*, char*, int*)+0x4a>
c0023305:	ba 01 00 00 00       	mov    edx,0x1
c002330a:	eb 0b                	jmp    c0023317 <Reg::readInt(char*, char*, int*)+0x4e>
c002330c:	ba 01 00 00 00       	mov    edx,0x1
c0023311:	eb 02                	jmp    c0023315 <Reg::readInt(char*, char*, int*)+0x4c>
c0023313:	31 d2                	xor    edx,edx
c0023315:	31 c0                	xor    eax,eax
c0023317:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c002331c:	be 0a 00 00 00       	mov    esi,0xa
c0023321:	75 21                	jne    c0023344 <Reg::readInt(char*, char*, int*)+0x7b>
c0023323:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0023328:	83 f9 78             	cmp    ecx,0x78
c002332b:	75 0a                	jne    c0023337 <Reg::readInt(char*, char*, int*)+0x6e>
c002332d:	83 c2 02             	add    edx,0x2
c0023330:	be 10 00 00 00       	mov    esi,0x10
c0023335:	eb 0d                	jmp    c0023344 <Reg::readInt(char*, char*, int*)+0x7b>
c0023337:	83 f9 62             	cmp    ecx,0x62
c002333a:	75 08                	jne    c0023344 <Reg::readInt(char*, char*, int*)+0x7b>
c002333c:	83 c2 02             	add    edx,0x2
c002333f:	be 02 00 00 00       	mov    esi,0x2
c0023344:	01 d5                	add    ebp,edx
c0023346:	31 d2                	xor    edx,edx
c0023348:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c002334c:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0023350:	85 c9                	test   ecx,ecx
c0023352:	0f 94 c3             	sete   bl
c0023355:	83 f9 0d             	cmp    ecx,0xd
c0023358:	89 df                	mov    edi,ebx
c002335a:	0f 94 c3             	sete   bl
c002335d:	09 df                	or     edi,ebx
c002335f:	89 fb                	mov    ebx,edi
c0023361:	83 e7 01             	and    edi,0x1
c0023364:	75 35                	jne    c002339b <Reg::readInt(char*, char*, int*)+0xd2>
c0023366:	0f af d6             	imul   edx,esi
c0023369:	83 fe 10             	cmp    esi,0x10
c002336c:	75 26                	jne    c0023394 <Reg::readInt(char*, char*, int*)+0xcb>
c002336e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023372:	83 ef 41             	sub    edi,0x41
c0023375:	89 fb                	mov    ebx,edi
c0023377:	80 fb 05             	cmp    bl,0x5
c002337a:	77 06                	ja     c0023382 <Reg::readInt(char*, char*, int*)+0xb9>
c002337c:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0023380:	eb 16                	jmp    c0023398 <Reg::readInt(char*, char*, int*)+0xcf>
c0023382:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0023386:	83 eb 61             	sub    ebx,0x61
c0023389:	80 fb 05             	cmp    bl,0x5
c002338c:	77 06                	ja     c0023394 <Reg::readInt(char*, char*, int*)+0xcb>
c002338e:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0023392:	eb 04                	jmp    c0023398 <Reg::readInt(char*, char*, int*)+0xcf>
c0023394:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0023398:	45                   	inc    ebp
c0023399:	eb ad                	jmp    c0023348 <Reg::readInt(char*, char*, int*)+0x7f>
c002339b:	84 c0                	test   al,al
c002339d:	74 02                	je     c00233a1 <Reg::readInt(char*, char*, int*)+0xd8>
c002339f:	f7 da                	neg    edx
c00233a1:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00233a8:	89 10                	mov    DWORD PTR [eax],edx
c00233aa:	88 d8                	mov    al,bl
c00233ac:	81 c4 ec 00 00 00    	add    esp,0xec
c00233b2:	5b                   	pop    ebx
c00233b3:	5e                   	pop    esi
c00233b4:	5f                   	pop    edi
c00233b5:	5d                   	pop    ebp
c00233b6:	c3                   	ret    

c00233b7 <Reg::readString(char*, char*, char*, int)>:
c00233b7:	57                   	push   edi
c00233b8:	56                   	push   esi
c00233b9:	53                   	push   ebx
c00233ba:	81 ec d4 00 00 00    	sub    esp,0xd4
c00233c0:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00233c4:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00233cb:	57                   	push   edi
c00233cc:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00233d3:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00233da:	e8 b3 fe ff ff       	call   c0023292 <Reg::getLine(char*, char*, char*)>
c00233df:	83 c4 10             	add    esp,0x10
c00233e2:	84 c0                	test   al,al
c00233e4:	89 c6                	mov    esi,eax
c00233e6:	74 44                	je     c002342c <Reg::readString(char*, char*, char*, int)+0x75>
c00233e8:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00233ef:	31 c0                	xor    eax,eax
c00233f1:	4a                   	dec    edx
c00233f2:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00233f5:	84 c9                	test   cl,cl
c00233f7:	74 0f                	je     c0023408 <Reg::readString(char*, char*, char*, int)+0x51>
c00233f9:	39 c2                	cmp    edx,eax
c00233fb:	7e 0b                	jle    c0023408 <Reg::readString(char*, char*, char*, int)+0x51>
c00233fd:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0023400:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0023405:	40                   	inc    eax
c0023406:	eb ea                	jmp    c00233f2 <Reg::readString(char*, char*, char*, int)+0x3b>
c0023408:	83 ec 0c             	sub    esp,0xc
c002340b:	53                   	push   ebx
c002340c:	e8 6f d1 fd ff       	call   c0000580 <strlen>
c0023411:	83 c4 10             	add    esp,0x10
c0023414:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0023419:	75 11                	jne    c002342c <Reg::readString(char*, char*, char*, int)+0x75>
c002341b:	83 ec 0c             	sub    esp,0xc
c002341e:	53                   	push   ebx
c002341f:	e8 5c d1 fd ff       	call   c0000580 <strlen>
c0023424:	83 c4 10             	add    esp,0x10
c0023427:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c002342c:	81 c4 d0 00 00 00    	add    esp,0xd0
c0023432:	89 f0                	mov    eax,esi
c0023434:	5b                   	pop    ebx
c0023435:	5e                   	pop    esi
c0023436:	5f                   	pop    edi
c0023437:	c3                   	ret    

c0023438 <Reg::readBool(char*, char*, bool*)>:
c0023438:	83 ec 20             	sub    esp,0x20
c002343b:	8d 44 24 10          	lea    eax,[esp+0x10]
c002343f:	50                   	push   eax
c0023440:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023444:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023448:	e8 7c fe ff ff       	call   c00232c9 <Reg::readInt(char*, char*, int*)>
c002344d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0023451:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0023456:	0f 95 02             	setne  BYTE PTR [edx]
c0023459:	83 c4 2c             	add    esp,0x2c
c002345c:	c3                   	ret    

c002345d <Reg::readBoolWithDefault(char*, char*, bool)>:
c002345d:	53                   	push   ebx
c002345e:	83 ec 1c             	sub    esp,0x1c
c0023461:	8d 44 24 13          	lea    eax,[esp+0x13]
c0023465:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0023469:	50                   	push   eax
c002346a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002346e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023472:	e8 c1 ff ff ff       	call   c0023438 <Reg::readBool(char*, char*, bool*)>
c0023477:	83 c4 10             	add    esp,0x10
c002347a:	84 c0                	test   al,al
c002347c:	74 04                	je     c0023482 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c002347e:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0023482:	83 c4 18             	add    esp,0x18
c0023485:	88 d8                	mov    al,bl
c0023487:	5b                   	pop    ebx
c0023488:	c3                   	ret    

c0023489 <Reg::readIntWithDefault(char*, char*, int)>:
c0023489:	53                   	push   ebx
c002348a:	83 ec 1c             	sub    esp,0x1c
c002348d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0023491:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023495:	50                   	push   eax
c0023496:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002349a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002349e:	e8 26 fe ff ff       	call   c00232c9 <Reg::readInt(char*, char*, int*)>
c00234a3:	83 c4 10             	add    esp,0x10
c00234a6:	84 c0                	test   al,al
c00234a8:	74 04                	je     c00234ae <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00234aa:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00234ae:	83 c4 18             	add    esp,0x18
c00234b1:	89 d8                	mov    eax,ebx
c00234b3:	5b                   	pop    ebx
c00234b4:	c3                   	ret    

c00234b5 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00234b5:	57                   	push   edi
c00234b6:	56                   	push   esi
c00234b7:	53                   	push   ebx
c00234b8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00234bc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00234c0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00234c4:	56                   	push   esi
c00234c5:	57                   	push   edi
c00234c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00234ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00234ce:	e8 e4 fe ff ff       	call   c00233b7 <Reg::readString(char*, char*, char*, int)>
c00234d3:	83 c4 10             	add    esp,0x10
c00234d6:	84 c0                	test   al,al
c00234d8:	75 16                	jne    c00234f0 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00234da:	50                   	push   eax
c00234db:	56                   	push   esi
c00234dc:	6a 00                	push   0x0
c00234de:	57                   	push   edi
c00234df:	e8 0c d0 fd ff       	call   c00004f0 <memset>
c00234e4:	8d 4e ff             	lea    ecx,[esi-0x1]
c00234e7:	89 de                	mov    esi,ebx
c00234e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00234eb:	83 c4 10             	add    esp,0x10
c00234ee:	89 df                	mov    edi,ebx
c00234f0:	5b                   	pop    ebx
c00234f1:	89 f8                	mov    eax,edi
c00234f3:	5e                   	pop    esi
c00234f4:	5f                   	pop    edi
c00234f5:	c3                   	ret    

c00234f6 <SysEject(regs*)>:
c00234f6:	83 ec 0c             	sub    esp,0xc
c00234f9:	83 ca ff             	or     edx,0xffffffff
c00234fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023500:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0023503:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0023508:	83 e9 41             	sub    ecx,0x41
c002350b:	83 f9 19             	cmp    ecx,0x19
c002350e:	77 18                	ja     c0023528 <SysEject(regs*)+0x32>
c0023510:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c0023517:	85 c9                	test   ecx,ecx
c0023519:	74 0d                	je     c0023528 <SysEject(regs*)+0x32>
c002351b:	83 ec 0c             	sub    esp,0xc
c002351e:	51                   	push   ecx
c002351f:	e8 74 94 ff ff       	call   c001c998 <LogicalDisk::eject()>
c0023524:	83 c4 10             	add    esp,0x10
c0023527:	99                   	cdq    
c0023528:	83 c4 0c             	add    esp,0xc
c002352b:	c3                   	ret    

c002352c <SysExit(regs*)>:
c002352c:	83 ec 18             	sub    esp,0x18
c002352f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023533:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0023536:	e8 91 29 00 00       	call   c0025ecc <terminateTask(int)>
c002353b:	83 c8 ff             	or     eax,0xffffffff
c002353e:	83 c4 1c             	add    esp,0x1c
c0023541:	89 c2                	mov    edx,eax
c0023543:	c3                   	ret    

c0023544 <SysGetCwd(regs*)>:
c0023544:	83 ec 10             	sub    esp,0x10
c0023547:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002354b:	ff 70 28             	push   DWORD PTR [eax+0x28]
c002354e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0023551:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023556:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0023559:	e8 18 6e ff ff       	call   c001a376 <Fs::getcwd(Process*, char*, int)>
c002355e:	83 c4 1c             	add    esp,0x1c
c0023561:	99                   	cdq    
c0023562:	c3                   	ret    

c0023563 <SysGetPID(regs*)>:
c0023563:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023568:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002356b:	8b 00                	mov    eax,DWORD PTR [eax]
c002356d:	99                   	cdq    
c002356e:	c3                   	ret    

c002356f <SysGetRAMData(regs*)>:
c002356f:	69 05 e8 b9 03 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc003b9e8,0xc8
c0023579:	8b 0d ec b9 03 c0    	mov    ecx,DWORD PTR ds:0xc003b9ec
c002357f:	99                   	cdq    
c0023580:	f7 f9                	idiv   ecx
c0023582:	c1 e0 18             	shl    eax,0x18
c0023585:	09 c8                	or     eax,ecx
c0023587:	99                   	cdq    
c0023588:	c3                   	ret    

c0023589 <SysGetVGAPtr(regs*)>:
c0023589:	55                   	push   ebp
c002358a:	57                   	push   edi
c002358b:	56                   	push   esi
c002358c:	53                   	push   ebx
c002358d:	83 ec 18             	sub    esp,0x18
c0023590:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023594:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023597:	e8 fc 23 00 00       	call   c0025998 <Thr::processFromPID(int)>
c002359c:	83 c4 10             	add    esp,0x10
c002359f:	89 c1                	mov    ecx,eax
c00235a1:	b8 01 00 00 00       	mov    eax,0x1
c00235a6:	85 c9                	test   ecx,ecx
c00235a8:	74 57                	je     c0023601 <SysGetVGAPtr(regs*)+0x78>
c00235aa:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00235ae:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00235b4:	74 0c                	je     c00235c2 <SysGetVGAPtr(regs*)+0x39>
c00235b6:	83 ec 0c             	sub    esp,0xc
c00235b9:	55                   	push   ebp
c00235ba:	e8 64 3d ff ff       	call   c0017323 <setActiveTerminal(VgaText*)>
c00235bf:	83 c4 10             	add    esp,0x10
c00235c2:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00235c5:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00235ca:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00235cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00235cf:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00235d2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00235d5:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00235db:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00235de:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00235e1:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00235e7:	50                   	push   eax
c00235e8:	50                   	push   eax
c00235e9:	68 f2 33 03 c0       	push   0xc00333f2
c00235ee:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00235f1:	05 a8 0f 00 00       	add    eax,0xfa8
c00235f6:	50                   	push   eax
c00235f7:	e8 54 d0 fd ff       	call   c0000650 <strcpy>
c00235fc:	83 c4 10             	add    esp,0x10
c00235ff:	31 c0                	xor    eax,eax
c0023601:	83 c4 0c             	add    esp,0xc
c0023604:	31 d2                	xor    edx,edx
c0023606:	5b                   	pop    ebx
c0023607:	5e                   	pop    esi
c0023608:	5f                   	pop    edi
c0023609:	5d                   	pop    ebp
c002360a:	c3                   	ret    
c002360b:	90                   	nop

c002360c <SysKill(regs*)>:
c002360c:	53                   	push   ebx
c002360d:	83 ec 08             	sub    esp,0x8
c0023610:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023614:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0023618:	75 16                	jne    c0023630 <SysKill(regs*)+0x24>
c002361a:	83 ec 0c             	sub    esp,0xc
c002361d:	68 fc 33 03 c0       	push   0xc00333fc
c0023622:	e8 db d0 ff ff       	call   c0020702 <KePanic(char const*)>
c0023627:	83 c4 10             	add    esp,0x10
c002362a:	e9 89 00 00 00       	jmp    c00236b8 <SysKill(regs*)+0xac>
c002362f:	90                   	nop
c0023630:	83 ec 0c             	sub    esp,0xc
c0023633:	68 ec 11 04 c0       	push   0xc00411ec
c0023638:	e8 5f be 00 00       	call   c002f49c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c002363d:	8d 76 00             	lea    esi,[esi+0x0]
c0023640:	83 c4 10             	add    esp,0x10
c0023643:	85 c0                	test   eax,eax
c0023645:	74 19                	je     c0023660 <SysKill(regs*)+0x54>
c0023647:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c002364a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c002364d:	39 0a                	cmp    DWORD PTR [edx],ecx
c002364f:	74 33                	je     c0023684 <SysKill(regs*)+0x78>
c0023651:	52                   	push   edx
c0023652:	52                   	push   edx
c0023653:	50                   	push   eax
c0023654:	68 ec 11 04 c0       	push   0xc00411ec
c0023659:	e8 5e c1 00 00       	call   c002f7bc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c002365e:	eb e0                	jmp    c0023640 <SysKill(regs*)+0x34>
c0023660:	83 ec 0c             	sub    esp,0xc
c0023663:	68 e0 11 04 c0       	push   0xc00411e0
c0023668:	e8 2f be 00 00       	call   c002f49c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c002366d:	8d 76 00             	lea    esi,[esi+0x0]
c0023670:	83 c4 10             	add    esp,0x10
c0023673:	85 c0                	test   eax,eax
c0023675:	74 41                	je     c00236b8 <SysKill(regs*)+0xac>
c0023677:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c002367a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c002367d:	39 0a                	cmp    DWORD PTR [edx],ecx
c002367f:	75 27                	jne    c00236a8 <SysKill(regs*)+0x9c>
c0023681:	8d 76 00             	lea    esi,[esi+0x0]
c0023684:	51                   	push   ecx
c0023685:	51                   	push   ecx
c0023686:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023689:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002368e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023691:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0023697:	e8 18 d9 ff ff       	call   c0020fb4 <KeRaiseSignal(SigHandlerBlock*, int)>
c002369c:	83 c4 10             	add    esp,0x10
c002369f:	31 c0                	xor    eax,eax
c00236a1:	31 d2                	xor    edx,edx
c00236a3:	eb 1b                	jmp    c00236c0 <SysKill(regs*)+0xb4>
c00236a5:	8d 76 00             	lea    esi,[esi+0x0]
c00236a8:	52                   	push   edx
c00236a9:	52                   	push   edx
c00236aa:	50                   	push   eax
c00236ab:	68 e0 11 04 c0       	push   0xc00411e0
c00236b0:	e8 07 c1 00 00       	call   c002f7bc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00236b5:	eb b9                	jmp    c0023670 <SysKill(regs*)+0x64>
c00236b7:	90                   	nop
c00236b8:	83 c8 ff             	or     eax,0xffffffff
c00236bb:	89 c2                	mov    edx,eax
c00236bd:	8d 76 00             	lea    esi,[esi+0x0]
c00236c0:	83 c4 08             	add    esp,0x8
c00236c3:	5b                   	pop    ebx
c00236c4:	c3                   	ret    

c00236c5 <SysLoadDLL(regs*)>:
c00236c5:	56                   	push   esi
c00236c6:	31 d2                	xor    edx,edx
c00236c8:	53                   	push   ebx
c00236c9:	b8 01 00 00 00       	mov    eax,0x1
c00236ce:	51                   	push   ecx
c00236cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00236d3:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00236d7:	0f 84 8c 00 00 00    	je     c0023769 <SysLoadDLL(regs*)+0xa4>
c00236dd:	83 ec 0c             	sub    esp,0xc
c00236e0:	68 14 01 00 00       	push   0x114
c00236e5:	e8 9e 2f ff ff       	call   c0016688 <malloc>
c00236ea:	83 c4 0c             	add    esp,0xc
c00236ed:	89 c3                	mov    ebx,eax
c00236ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00236f4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00236f7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00236fa:	53                   	push   ebx
c00236fb:	e8 d6 6f ff ff       	call   c001a6d6 <File::File(char const*, Process*)>
c0023700:	83 c4 10             	add    esp,0x10
c0023703:	31 d2                	xor    edx,edx
c0023705:	85 db                	test   ebx,ebx
c0023707:	b8 02 00 00 00       	mov    eax,0x2
c002370c:	74 5b                	je     c0023769 <SysLoadDLL(regs*)+0xa4>
c002370e:	83 ec 0c             	sub    esp,0xc
c0023711:	53                   	push   ebx
c0023712:	e8 a1 72 ff ff       	call   c001a9b8 <File::exists()>
c0023717:	83 c4 10             	add    esp,0x10
c002371a:	84 c0                	test   al,al
c002371c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002371e:	75 11                	jne    c0023731 <SysLoadDLL(regs*)+0x6c>
c0023720:	83 ec 0c             	sub    esp,0xc
c0023723:	53                   	push   ebx
c0023724:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023727:	83 c4 10             	add    esp,0x10
c002372a:	b8 03 00 00 00       	mov    eax,0x3
c002372f:	eb 36                	jmp    c0023767 <SysLoadDLL(regs*)+0xa2>
c0023731:	83 ec 0c             	sub    esp,0xc
c0023734:	53                   	push   ebx
c0023735:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023738:	58                   	pop    eax
c0023739:	5a                   	pop    edx
c002373a:	6a 00                	push   0x0
c002373c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c002373f:	e8 84 15 00 00       	call   c0024cc8 <Thr::loadDLL(char const*, bool)>
c0023744:	83 c4 10             	add    esp,0x10
c0023747:	31 d2                	xor    edx,edx
c0023749:	89 c1                	mov    ecx,eax
c002374b:	b8 04 00 00 00       	mov    eax,0x4
c0023750:	85 c9                	test   ecx,ecx
c0023752:	74 15                	je     c0023769 <SysLoadDLL(regs*)+0xa4>
c0023754:	53                   	push   ebx
c0023755:	53                   	push   ebx
c0023756:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c002375c:	51                   	push   ecx
c002375d:	e8 c7 17 00 00       	call   c0024f29 <Thr::executeDLL(unsigned long, void*)>
c0023762:	83 c4 10             	add    esp,0x10
c0023765:	31 c0                	xor    eax,eax
c0023767:	31 d2                	xor    edx,edx
c0023769:	59                   	pop    ecx
c002376a:	5b                   	pop    ebx
c002376b:	5e                   	pop    esi
c002376c:	c3                   	ret    

c002376d <SysRead(regs*)>:
c002376d:	57                   	push   edi
c002376e:	56                   	push   esi
c002376f:	53                   	push   ebx
c0023770:	83 ec 10             	sub    esp,0x10
c0023773:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0023777:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002377a:	83 f8 02             	cmp    eax,0x2
c002377d:	77 10                	ja     c002378f <SysRead(regs*)+0x22>
c002377f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023784:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023787:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c002378d:	eb 0e                	jmp    c002379d <SysRead(regs*)+0x30>
c002378f:	83 ec 0c             	sub    esp,0xc
c0023792:	50                   	push   eax
c0023793:	e8 b7 48 ff ff       	call   c001804f <KeGetFileFromDescriptor(int)>
c0023798:	83 c4 10             	add    esp,0x10
c002379b:	89 c1                	mov    ecx,eax
c002379d:	83 c8 ff             	or     eax,0xffffffff
c00237a0:	85 c9                	test   ecx,ecx
c00237a2:	89 c2                	mov    edx,eax
c00237a4:	74 28                	je     c00237ce <SysRead(regs*)+0x61>
c00237a6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00237ae:	83 ec 0c             	sub    esp,0xc
c00237b1:	31 ff                	xor    edi,edi
c00237b3:	8d 54 24 18          	lea    edx,[esp+0x18]
c00237b7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00237b9:	52                   	push   edx
c00237ba:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00237bd:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00237c0:	57                   	push   edi
c00237c1:	56                   	push   esi
c00237c2:	51                   	push   ecx
c00237c3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00237c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00237ca:	83 c4 20             	add    esp,0x20
c00237cd:	99                   	cdq    
c00237ce:	83 c4 10             	add    esp,0x10
c00237d1:	5b                   	pop    ebx
c00237d2:	5e                   	pop    esi
c00237d3:	5f                   	pop    edi
c00237d4:	c3                   	ret    

c00237d5 <SysRegisterSignal(regs*)>:
c00237d5:	83 ec 18             	sub    esp,0x18
c00237d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00237dc:	6a 00                	push   0x0
c00237de:	6a 00                	push   0x0
c00237e0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00237e3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00237e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00237eb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00237ee:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00237f4:	e8 85 d7 ff ff       	call   c0020f7e <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00237f9:	83 c4 2c             	add    esp,0x2c
c00237fc:	99                   	cdq    
c00237fd:	c3                   	ret    

c00237fe <SysRegistryGetTypeFromPath(regs*)>:
c00237fe:	57                   	push   edi
c00237ff:	56                   	push   esi
c0023800:	53                   	push   ebx
c0023801:	81 ec 38 01 00 00    	sub    esp,0x138
c0023807:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c002380e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023811:	68 1d 34 03 c0       	push   0xc003341d
c0023816:	e8 a3 5c ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c002381b:	5a                   	pop    edx
c002381c:	59                   	pop    ecx
c002381d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023820:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023823:	e8 33 f6 ff ff       	call   c0022e5b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0023828:	5f                   	pop    edi
c0023829:	5a                   	pop    edx
c002382a:	89 c6                	mov    esi,eax
c002382c:	50                   	push   eax
c002382d:	68 3d 34 03 c0       	push   0xc003343d
c0023832:	e8 87 5c ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0023837:	83 c4 10             	add    esp,0x10
c002383a:	85 f6                	test   esi,esi
c002383c:	74 28                	je     c0023866 <SysRegistryGetTypeFromPath(regs*)+0x68>
c002383e:	50                   	push   eax
c002383f:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0023843:	57                   	push   edi
c0023844:	56                   	push   esi
c0023845:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023848:	e8 f3 f1 ff ff       	call   c0022a40 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c002384d:	83 c4 0c             	add    esp,0xc
c0023850:	57                   	push   edi
c0023851:	50                   	push   eax
c0023852:	89 c3                	mov    ebx,eax
c0023854:	68 45 34 03 c0       	push   0xc0033445
c0023859:	e8 60 5c ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c002385e:	89 d8                	mov    eax,ebx
c0023860:	83 c4 10             	add    esp,0x10
c0023863:	99                   	cdq    
c0023864:	eb 05                	jmp    c002386b <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0023866:	83 c8 ff             	or     eax,0xffffffff
c0023869:	89 c2                	mov    edx,eax
c002386b:	81 c4 30 01 00 00    	add    esp,0x130
c0023871:	5b                   	pop    ebx
c0023872:	5e                   	pop    esi
c0023873:	5f                   	pop    edi
c0023874:	c3                   	ret    

c0023875 <SysRegistryReadExtent(regs*)>:
c0023875:	83 ec 1c             	sub    esp,0x1c
c0023878:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002387c:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c002387f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0023882:	85 c0                	test   eax,eax
c0023884:	79 1f                	jns    c00238a5 <SysRegistryReadExtent(regs*)+0x30>
c0023886:	52                   	push   edx
c0023887:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002388c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0023890:	52                   	push   edx
c0023891:	50                   	push   eax
c0023892:	51                   	push   ecx
c0023893:	e8 9a f0 ff ff       	call   c0022932 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0023898:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002389c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00238a0:	83 c4 10             	add    esp,0x10
c00238a3:	eb 14                	jmp    c00238b9 <SysRegistryReadExtent(regs*)+0x44>
c00238a5:	83 ec 04             	sub    esp,0x4
c00238a8:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00238ab:	50                   	push   eax
c00238ac:	51                   	push   ecx
c00238ad:	e8 1e eb ff ff       	call   c00223d0 <CmGetString(Reghive_Tag*, int, char*)>
c00238b2:	83 c4 10             	add    esp,0x10
c00238b5:	31 c0                	xor    eax,eax
c00238b7:	31 d2                	xor    edx,edx
c00238b9:	83 c4 1c             	add    esp,0x1c
c00238bc:	c3                   	ret    

c00238bd <SysRegistryPathToExtentLookup(regs*)>:
c00238bd:	53                   	push   ebx
c00238be:	83 ec 10             	sub    esp,0x10
c00238c1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00238c5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00238c8:	68 5b 34 03 c0       	push   0xc003345b
c00238cd:	e8 ec 5b ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c00238d2:	58                   	pop    eax
c00238d3:	5a                   	pop    edx
c00238d4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00238d7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00238da:	e8 7c f5 ff ff       	call   c0022e5b <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00238df:	83 c4 18             	add    esp,0x18
c00238e2:	5b                   	pop    ebx
c00238e3:	99                   	cdq    
c00238e4:	c3                   	ret    

c00238e5 <SysRegistryEnterDirectory(regs*)>:
c00238e5:	53                   	push   ebx
c00238e6:	83 ec 10             	sub    esp,0x10
c00238e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00238ed:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00238f0:	68 7e 34 03 c0       	push   0xc003347e
c00238f5:	e8 c4 5b ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c00238fa:	58                   	pop    eax
c00238fb:	5a                   	pop    edx
c00238fc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00238ff:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023902:	e8 40 eb ff ff       	call   c0022447 <CmEnterDirectory(Reghive_Tag*, int)>
c0023907:	83 c4 18             	add    esp,0x18
c002390a:	5b                   	pop    ebx
c002390b:	99                   	cdq    
c002390c:	c3                   	ret    

c002390d <SysRegistryGetNext(regs*)>:
c002390d:	53                   	push   ebx
c002390e:	83 ec 10             	sub    esp,0x10
c0023911:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023915:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023918:	68 9c 34 03 c0       	push   0xc003349c
c002391d:	e8 9c 5b ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0023922:	58                   	pop    eax
c0023923:	5a                   	pop    edx
c0023924:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023927:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002392a:	e8 57 eb ff ff       	call   c0022486 <CmGetNext(Reghive_Tag*, int)>
c002392f:	83 c4 18             	add    esp,0x18
c0023932:	5b                   	pop    ebx
c0023933:	99                   	cdq    
c0023934:	c3                   	ret    

c0023935 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0023935:	57                   	push   edi
c0023936:	56                   	push   esi
c0023937:	53                   	push   ebx
c0023938:	81 ec 34 01 00 00    	sub    esp,0x134
c002393e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0023945:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0023949:	57                   	push   edi
c002394a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c002394d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0023950:	e8 eb f0 ff ff       	call   c0022a40 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0023955:	89 c3                	mov    ebx,eax
c0023957:	58                   	pop    eax
c0023958:	5a                   	pop    edx
c0023959:	57                   	push   edi
c002395a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c002395d:	e8 ee cc fd ff       	call   c0000650 <strcpy>
c0023962:	81 c4 40 01 00 00    	add    esp,0x140
c0023968:	89 d8                	mov    eax,ebx
c002396a:	5b                   	pop    ebx
c002396b:	99                   	cdq    
c002396c:	5e                   	pop    esi
c002396d:	5f                   	pop    edi
c002396e:	c3                   	ret    

c002396f <SysRegistryOpen(regs*)>:
c002396f:	83 ec 18             	sub    esp,0x18
c0023972:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023976:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0023979:	e8 e2 e8 ff ff       	call   c0022260 <CmOpen(char const*)>
c002397e:	83 c4 1c             	add    esp,0x1c
c0023981:	99                   	cdq    
c0023982:	c3                   	ret    

c0023983 <SysRegistryClose(regs*)>:
c0023983:	83 ec 18             	sub    esp,0x18
c0023986:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002398a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c002398d:	e8 ec e9 ff ff       	call   c002237e <CmClose(Reghive_Tag*)>
c0023992:	31 c0                	xor    eax,eax
c0023994:	31 d2                	xor    edx,edx
c0023996:	83 c4 1c             	add    esp,0x1c
c0023999:	c3                   	ret    

c002399a <SysSbrk(regs*)>:
c002399a:	56                   	push   esi
c002399b:	53                   	push   ebx
c002399c:	50                   	push   eax
c002399d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00239a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00239a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00239a9:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00239ac:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00239b2:	85 db                	test   ebx,ebx
c00239b4:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00239b7:	74 02                	je     c00239bb <SysSbrk(regs*)+0x21>
c00239b9:	79 06                	jns    c00239c1 <SysSbrk(regs*)+0x27>
c00239bb:	89 f0                	mov    eax,esi
c00239bd:	31 d2                	xor    edx,edx
c00239bf:	eb 2a                	jmp    c00239eb <SysSbrk(regs*)+0x51>
c00239c1:	83 c8 ff             	or     eax,0xffffffff
c00239c4:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00239ca:	89 c2                	mov    edx,eax
c00239cc:	77 1d                	ja     c00239eb <SysSbrk(regs*)+0x51>
c00239ce:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00239d4:	50                   	push   eax
c00239d5:	68 07 0c 00 00       	push   0xc07
c00239da:	c1 ea 0c             	shr    edx,0xc
c00239dd:	52                   	push   edx
c00239de:	51                   	push   ecx
c00239df:	e8 d6 4f ff ff       	call   c00189ba <VAS::allocatePages(int, int)>
c00239e4:	89 f0                	mov    eax,esi
c00239e6:	31 d2                	xor    edx,edx
c00239e8:	83 c4 10             	add    esp,0x10
c00239eb:	59                   	pop    ecx
c00239ec:	5b                   	pop    ebx
c00239ed:	5e                   	pop    esi
c00239ee:	c3                   	ret    

c00239ef <SysSetCwd(regs*)>:
c00239ef:	83 ec 14             	sub    esp,0x14
c00239f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00239f6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00239f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00239fe:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0023a01:	e8 51 70 ff ff       	call   c001aa57 <Fs::setcwd(Process*, char*)>
c0023a06:	83 c4 1c             	add    esp,0x1c
c0023a09:	99                   	cdq    
c0023a0a:	c3                   	ret    

c0023a0b <SysSetTime(regs*)>:
c0023a0b:	55                   	push   ebp
c0023a0c:	31 c9                	xor    ecx,ecx
c0023a0e:	57                   	push   edi
c0023a0f:	bd 0c 00 00 00       	mov    ebp,0xc
c0023a14:	56                   	push   esi
c0023a15:	53                   	push   ebx
c0023a16:	31 db                	xor    ebx,ebx
c0023a18:	83 ec 10             	sub    esp,0x10
c0023a1b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023a1f:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0023a22:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0023a25:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0023a28:	89 c2                	mov    edx,eax
c0023a2a:	c1 e8 05             	shr    eax,0x5
c0023a2d:	83 e2 1f             	and    edx,0x1f
c0023a30:	42                   	inc    edx
c0023a31:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0023a37:	c1 e7 10             	shl    edi,0x10
c0023a3a:	88 d1                	mov    cl,dl
c0023a3c:	31 d2                	xor    edx,edx
c0023a3e:	f7 f5                	div    ebp
c0023a40:	89 dd                	mov    ebp,ebx
c0023a42:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0023a48:	88 d5                	mov    ch,dl
c0023a4a:	31 d2                	xor    edx,edx
c0023a4c:	0f b7 c1             	movzx  eax,cx
c0023a4f:	09 f8                	or     eax,edi
c0023a51:	bf 3c 00 00 00       	mov    edi,0x3c
c0023a56:	89 c1                	mov    ecx,eax
c0023a58:	89 f0                	mov    eax,esi
c0023a5a:	f7 f7                	div    edi
c0023a5c:	c1 e2 10             	shl    edx,0x10
c0023a5f:	09 d5                	or     ebp,edx
c0023a61:	31 d2                	xor    edx,edx
c0023a63:	f7 f7                	div    edi
c0023a65:	89 eb                	mov    ebx,ebp
c0023a67:	bf 10 0e 00 00       	mov    edi,0xe10
c0023a6c:	89 f0                	mov    eax,esi
c0023a6e:	88 d7                	mov    bh,dl
c0023a70:	31 d2                	xor    edx,edx
c0023a72:	f7 f7                	div    edi
c0023a74:	bf 18 00 00 00       	mov    edi,0x18
c0023a79:	31 d2                	xor    edx,edx
c0023a7b:	f7 f7                	div    edi
c0023a7d:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0023a82:	88 d3                	mov    bl,dl
c0023a84:	53                   	push   ebx
c0023a85:	51                   	push   ecx
c0023a86:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0023a8c:	e8 8d 78 ff ff       	call   c001b31e <Clock::setTimeInDatetimeLocal(datetime_t)>
c0023a91:	83 c4 1c             	add    esp,0x1c
c0023a94:	31 d2                	xor    edx,edx
c0023a96:	5b                   	pop    ebx
c0023a97:	5e                   	pop    esi
c0023a98:	83 f0 01             	xor    eax,0x1
c0023a9b:	5f                   	pop    edi
c0023a9c:	0f b6 c0             	movzx  eax,al
c0023a9f:	5d                   	pop    ebp
c0023aa0:	c3                   	ret    

c0023aa1 <SysSymlink(regs*)>:
c0023aa1:	56                   	push   esi
c0023aa2:	83 c8 ff             	or     eax,0xffffffff
c0023aa5:	53                   	push   ebx
c0023aa6:	89 c2                	mov    edx,eax
c0023aa8:	81 ec 34 02 00 00    	sub    esp,0x234
c0023aae:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0023ab5:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0023ab9:	74 50                	je     c0023b0b <SysSymlink(regs*)+0x6a>
c0023abb:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0023abe:	85 c9                	test   ecx,ecx
c0023ac0:	74 49                	je     c0023b0b <SysSymlink(regs*)+0x6a>
c0023ac2:	6a 01                	push   0x1
c0023ac4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023ac9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023acc:	05 0c 01 00 00       	add    eax,0x10c
c0023ad1:	50                   	push   eax
c0023ad2:	51                   	push   ecx
c0023ad3:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0023ad7:	56                   	push   esi
c0023ad8:	e8 ed 68 ff ff       	call   c001a3ca <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0023add:	6a 01                	push   0x1
c0023adf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023ae4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023ae7:	05 0c 01 00 00       	add    eax,0x10c
c0023aec:	50                   	push   eax
c0023aed:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023af0:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0023af7:	53                   	push   ebx
c0023af8:	e8 cd 68 ff ff       	call   c001a3ca <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0023afd:	83 c4 18             	add    esp,0x18
c0023b00:	56                   	push   esi
c0023b01:	53                   	push   ebx
c0023b02:	e8 d2 64 ff ff       	call   c0019fd9 <KeCreateSymlink(char const*, char const*)>
c0023b07:	83 c4 10             	add    esp,0x10
c0023b0a:	99                   	cdq    
c0023b0b:	81 c4 34 02 00 00    	add    esp,0x234
c0023b11:	5b                   	pop    ebx
c0023b12:	5e                   	pop    esi
c0023b13:	c3                   	ret    

c0023b14 <SysTimezone(regs*)>:
c0023b14:	83 ec 0c             	sub    esp,0xc
c0023b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b1b:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0023b1f:	75 17                	jne    c0023b38 <SysTimezone(regs*)+0x24>
c0023b21:	83 ec 0c             	sub    esp,0xc
c0023b24:	68 b3 34 03 c0       	push   0xc00334b3
c0023b29:	e8 90 59 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0023b2e:	83 c8 ff             	or     eax,0xffffffff
c0023b31:	83 c4 10             	add    esp,0x10
c0023b34:	89 c2                	mov    edx,eax
c0023b36:	eb 17                	jmp    c0023b4f <SysTimezone(regs*)+0x3b>
c0023b38:	83 ec 0c             	sub    esp,0xc
c0023b3b:	68 c8 34 03 c0       	push   0xc00334c8
c0023b40:	e8 79 59 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0023b45:	83 c4 10             	add    esp,0x10
c0023b48:	b8 01 00 00 00       	mov    eax,0x1
c0023b4d:	31 d2                	xor    edx,edx
c0023b4f:	83 c4 0c             	add    esp,0xc
c0023b52:	c3                   	ret    

c0023b53 <SysTruncate(regs*)>:
c0023b53:	55                   	push   ebp
c0023b54:	57                   	push   edi
c0023b55:	31 ff                	xor    edi,edi
c0023b57:	56                   	push   esi
c0023b58:	53                   	push   ebx
c0023b59:	83 ec 0c             	sub    esp,0xc
c0023b5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023b60:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0023b63:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0023b67:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0023b6a:	89 ce                	mov    esi,ecx
c0023b6c:	0f 84 9a 00 00 00    	je     c0023c0c <SysTruncate(regs*)+0xb9>
c0023b72:	83 ec 0c             	sub    esp,0xc
c0023b75:	68 14 01 00 00       	push   0x114
c0023b7a:	e8 09 2b ff ff       	call   c0016688 <malloc>
c0023b7f:	83 c4 0c             	add    esp,0xc
c0023b82:	89 c3                	mov    ebx,eax
c0023b84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023b89:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0023b8c:	55                   	push   ebp
c0023b8d:	53                   	push   ebx
c0023b8e:	e8 43 6b ff ff       	call   c001a6d6 <File::File(char const*, Process*)>
c0023b93:	83 c4 10             	add    esp,0x10
c0023b96:	31 d2                	xor    edx,edx
c0023b98:	85 db                	test   ebx,ebx
c0023b9a:	b8 03 00 00 00       	mov    eax,0x3
c0023b9f:	0f 84 a2 00 00 00    	je     c0023c47 <SysTruncate(regs*)+0xf4>
c0023ba5:	51                   	push   ecx
c0023ba6:	51                   	push   ecx
c0023ba7:	6a 02                	push   0x2
c0023ba9:	53                   	push   ebx
c0023baa:	e8 45 6b ff ff       	call   c001a6f4 <File::open(FileOpenMode)>
c0023baf:	83 c4 10             	add    esp,0x10
c0023bb2:	85 c0                	test   eax,eax
c0023bb4:	74 13                	je     c0023bc9 <SysTruncate(regs*)+0x76>
c0023bb6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023bb8:	83 ec 0c             	sub    esp,0xc
c0023bbb:	53                   	push   ebx
c0023bbc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023bbf:	83 c4 10             	add    esp,0x10
c0023bc2:	b8 04 00 00 00       	mov    eax,0x4
c0023bc7:	eb 7c                	jmp    c0023c45 <SysTruncate(regs*)+0xf2>
c0023bc9:	52                   	push   edx
c0023bca:	57                   	push   edi
c0023bcb:	56                   	push   esi
c0023bcc:	53                   	push   ebx
c0023bcd:	e8 36 6c ff ff       	call   c001a808 <File::truncate(unsigned long long)>
c0023bd2:	83 c4 10             	add    esp,0x10
c0023bd5:	85 c0                	test   eax,eax
c0023bd7:	74 1b                	je     c0023bf4 <SysTruncate(regs*)+0xa1>
c0023bd9:	83 ec 0c             	sub    esp,0xc
c0023bdc:	53                   	push   ebx
c0023bdd:	e8 70 6b ff ff       	call   c001a752 <File::close()>
c0023be2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023be4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023be7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023bea:	83 c4 10             	add    esp,0x10
c0023bed:	b8 05 00 00 00       	mov    eax,0x5
c0023bf2:	eb 51                	jmp    c0023c45 <SysTruncate(regs*)+0xf2>
c0023bf4:	83 ec 0c             	sub    esp,0xc
c0023bf7:	53                   	push   ebx
c0023bf8:	e8 55 6b ff ff       	call   c001a752 <File::close()>
c0023bfd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023bff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023c02:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023c05:	83 c4 10             	add    esp,0x10
c0023c08:	31 c0                	xor    eax,eax
c0023c0a:	eb 39                	jmp    c0023c45 <SysTruncate(regs*)+0xf2>
c0023c0c:	31 d2                	xor    edx,edx
c0023c0e:	83 fd 02             	cmp    ebp,0x2
c0023c11:	b8 01 00 00 00       	mov    eax,0x1
c0023c16:	7e 2f                	jle    c0023c47 <SysTruncate(regs*)+0xf4>
c0023c18:	83 ec 0c             	sub    esp,0xc
c0023c1b:	51                   	push   ecx
c0023c1c:	e8 2e 44 ff ff       	call   c001804f <KeGetFileFromDescriptor(int)>
c0023c21:	83 c4 10             	add    esp,0x10
c0023c24:	31 d2                	xor    edx,edx
c0023c26:	89 c1                	mov    ecx,eax
c0023c28:	b8 02 00 00 00       	mov    eax,0x2
c0023c2d:	85 c9                	test   ecx,ecx
c0023c2f:	74 16                	je     c0023c47 <SysTruncate(regs*)+0xf4>
c0023c31:	50                   	push   eax
c0023c32:	57                   	push   edi
c0023c33:	56                   	push   esi
c0023c34:	51                   	push   ecx
c0023c35:	e8 ce 6b ff ff       	call   c001a808 <File::truncate(unsigned long long)>
c0023c3a:	83 c4 10             	add    esp,0x10
c0023c3d:	85 c0                	test   eax,eax
c0023c3f:	0f 95 c0             	setne  al
c0023c42:	0f b6 c0             	movzx  eax,al
c0023c45:	31 d2                	xor    edx,edx
c0023c47:	83 c4 0c             	add    esp,0xc
c0023c4a:	5b                   	pop    ebx
c0023c4b:	5e                   	pop    esi
c0023c4c:	5f                   	pop    edi
c0023c4d:	5d                   	pop    ebp
c0023c4e:	c3                   	ret    

c0023c4f <SysWrite(regs*)>:
c0023c4f:	57                   	push   edi
c0023c50:	56                   	push   esi
c0023c51:	53                   	push   ebx
c0023c52:	83 ec 10             	sub    esp,0x10
c0023c55:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0023c59:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023c5c:	83 f8 02             	cmp    eax,0x2
c0023c5f:	77 10                	ja     c0023c71 <SysWrite(regs*)+0x22>
c0023c61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023c66:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023c69:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0023c6f:	eb 0e                	jmp    c0023c7f <SysWrite(regs*)+0x30>
c0023c71:	83 ec 0c             	sub    esp,0xc
c0023c74:	50                   	push   eax
c0023c75:	e8 d5 43 ff ff       	call   c001804f <KeGetFileFromDescriptor(int)>
c0023c7a:	83 c4 10             	add    esp,0x10
c0023c7d:	89 c1                	mov    ecx,eax
c0023c7f:	83 c8 ff             	or     eax,0xffffffff
c0023c82:	85 c9                	test   ecx,ecx
c0023c84:	89 c2                	mov    edx,eax
c0023c86:	74 28                	je     c0023cb0 <SysWrite(regs*)+0x61>
c0023c88:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0023c90:	83 ec 0c             	sub    esp,0xc
c0023c93:	31 ff                	xor    edi,edi
c0023c95:	8d 54 24 18          	lea    edx,[esp+0x18]
c0023c99:	8b 01                	mov    eax,DWORD PTR [ecx]
c0023c9b:	52                   	push   edx
c0023c9c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023c9f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0023ca2:	57                   	push   edi
c0023ca3:	56                   	push   esi
c0023ca4:	51                   	push   ecx
c0023ca5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0023ca8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0023cac:	83 c4 20             	add    esp,0x20
c0023caf:	99                   	cdq    
c0023cb0:	83 c4 10             	add    esp,0x10
c0023cb3:	5b                   	pop    ebx
c0023cb4:	5e                   	pop    esi
c0023cb5:	5f                   	pop    edi
c0023cb6:	c3                   	ret    

c0023cb7 <SysWsbe(regs*)>:
c0023cb7:	57                   	push   edi
c0023cb8:	b9 0b 00 00 00       	mov    ecx,0xb
c0023cbd:	56                   	push   esi
c0023cbe:	be 07 35 03 c0       	mov    esi,0xc0033507
c0023cc3:	53                   	push   ebx
c0023cc4:	83 ec 30             	sub    esp,0x30
c0023cc7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023ccb:	fc                   	cld    
c0023ccc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023cce:	83 ec 0c             	sub    esp,0xc
c0023cd1:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023cd5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023cda:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023cdd:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0023ce3:	8b 06                	mov    eax,DWORD PTR [esi]
c0023ce5:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0023ce8:	57                   	push   edi
c0023ce9:	e8 92 c8 fd ff       	call   c0000580 <strlen>
c0023cee:	5a                   	pop    edx
c0023cef:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0023cf3:	52                   	push   edx
c0023cf4:	31 d2                	xor    edx,edx
c0023cf6:	57                   	push   edi
c0023cf7:	52                   	push   edx
c0023cf8:	50                   	push   eax
c0023cf9:	56                   	push   esi
c0023cfa:	ff d3                	call   ebx
c0023cfc:	83 c4 14             	add    esp,0x14
c0023cff:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0023d03:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0023d06:	e8 c1 21 00 00       	call   c0025ecc <terminateTask(int)>
c0023d0b:	83 c4 40             	add    esp,0x40
c0023d0e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0023d13:	5b                   	pop    ebx
c0023d14:	31 d2                	xor    edx,edx
c0023d16:	5e                   	pop    esi
c0023d17:	5f                   	pop    edi
c0023d18:	c3                   	ret    

c0023d19 <SysYield(regs*)>:
c0023d19:	83 ec 0c             	sub    esp,0xc
c0023d1c:	fa                   	cli    
c0023d1d:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c0023d23:	e8 30 1a 00 00       	call   c0025758 <schedule()>
c0023d28:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0023d2d:	48                   	dec    eax
c0023d2e:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0023d33:	75 01                	jne    c0023d36 <SysYield(regs*)+0x1d>
c0023d35:	fb                   	sti    
c0023d36:	31 c0                	xor    eax,eax
c0023d38:	31 d2                	xor    edx,edx
c0023d3a:	83 c4 0c             	add    esp,0xc
c0023d3d:	c3                   	ret    

c0023d3e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0023d3e:	55                   	push   ebp
c0023d3f:	57                   	push   edi
c0023d40:	56                   	push   esi
c0023d41:	53                   	push   ebx
c0023d42:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0023d48:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0023d53:	74 3b                	je     c0023d90 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0023d55:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0023d5d:	74 31                	je     c0023d90 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0023d5f:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0023d67:	75 27                	jne    c0023d90 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0023d69:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0023d70:	05 00 10 00 00       	add    eax,0x1000
c0023d75:	89 c2                	mov    edx,eax
c0023d77:	25 00 f0 ff ff       	and    eax,0xfffff000
c0023d7c:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0023d83:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0023d89:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0023d90:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0023d97:	83 ec 0c             	sub    esp,0xc
c0023d9a:	6a 01                	push   0x1
c0023d9c:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0023da2:	e8 02 44 ff ff       	call   c00181a9 <Virt::allocateKernelVirtualPages(int)>
c0023da7:	83 c4 10             	add    esp,0x10
c0023daa:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0023db0:	89 c3                	mov    ebx,eax
c0023db2:	0f 86 26 01 00 00    	jbe    c0023ede <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c0023db8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023dc0:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0023dc7:	c1 ee 0c             	shr    esi,0xc
c0023dca:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0023dce:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0023dd5:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0023ddc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0023de0:	29 ef                	sub    edi,ebp
c0023de2:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0023de6:	0f 83 f9 00 00 00    	jae    c0023ee5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0023dec:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0023df2:	b8 00 10 00 00       	mov    eax,0x1000
c0023df7:	0f 47 f8             	cmova  edi,eax
c0023dfa:	83 ec 0c             	sub    esp,0xc
c0023dfd:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0023e04:	31 d2                	xor    edx,edx
c0023e06:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023e08:	8d 44 24 28          	lea    eax,[esp+0x28]
c0023e0c:	50                   	push   eax
c0023e0d:	8d 74 24 30          	lea    esi,[esp+0x30]
c0023e11:	56                   	push   esi
c0023e12:	52                   	push   edx
c0023e13:	57                   	push   edi
c0023e14:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0023e1b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023e1e:	83 c4 20             	add    esp,0x20
c0023e21:	85 c0                	test   eax,eax
c0023e23:	75 06                	jne    c0023e2b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0023e25:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0023e29:	74 13                	je     c0023e3e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0023e2b:	83 ec 0c             	sub    esp,0xc
c0023e2e:	53                   	push   ebx
c0023e2f:	e8 89 46 ff ff       	call   c00184bd <Virt::freeKernelVirtualPages(unsigned long)>
c0023e34:	83 c4 10             	add    esp,0x10
c0023e37:	31 c0                	xor    eax,eax
c0023e39:	e9 7c 01 00 00       	jmp    c0023fba <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c0023e3e:	fa                   	cli    
c0023e3f:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c0023e45:	e8 4d 2b ff ff       	call   c0016997 <Phys::allocatePage()>
c0023e4a:	6a 07                	push   0x7
c0023e4c:	53                   	push   ebx
c0023e4d:	50                   	push   eax
c0023e4e:	89 c7                	mov    edi,eax
c0023e50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023e55:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023e58:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023e5e:	e8 4f 4a ff ff       	call   c00188b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0023e63:	83 c4 0c             	add    esp,0xc
c0023e66:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0023e6d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023e73:	6a 00                	push   0x0
c0023e75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023e7a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023e7d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023e83:	e8 90 48 ff ff       	call   c0018718 <VAS::mapOtherVASIn(bool, VAS*)>
c0023e88:	58                   	pop    eax
c0023e89:	5a                   	pop    edx
c0023e8a:	68 07 0c 00 00       	push   0xc07
c0023e8f:	55                   	push   ebp
c0023e90:	57                   	push   edi
c0023e91:	89 df                	mov    edi,ebx
c0023e93:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0023e9a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023ea0:	6a 00                	push   0x0
c0023ea2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023ea7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023eaa:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023eb0:	e8 61 4c ff ff       	call   c0018b16 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0023eb5:	b9 00 10 00 00       	mov    ecx,0x1000
c0023eba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023ebc:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0023ec1:	83 c4 20             	add    esp,0x20
c0023ec4:	48                   	dec    eax
c0023ec5:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0023eca:	85 c0                	test   eax,eax
c0023ecc:	75 01                	jne    c0023ecf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c0023ece:	fb                   	sti    
c0023ecf:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0023ed3:	81 c5 00 10 00 00    	add    ebp,0x1000
c0023ed9:	e9 f0 fe ff ff       	jmp    c0023dce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0023ede:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0023ee5:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0023eec:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0023ef2:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0023ef8:	0f 86 ae 00 00 00    	jbe    c0023fac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0023efe:	fa                   	cli    
c0023eff:	51                   	push   ecx
c0023f00:	31 ff                	xor    edi,edi
c0023f02:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0023f09:	c1 ee 0c             	shr    esi,0xc
c0023f0c:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c0023f12:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023f18:	6a 00                	push   0x0
c0023f1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023f1f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023f22:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023f28:	e8 eb 47 ff ff       	call   c0018718 <VAS::mapOtherVASIn(bool, VAS*)>
c0023f2d:	83 c4 10             	add    esp,0x10
c0023f30:	e8 62 2a ff ff       	call   c0016997 <Phys::allocatePage()>
c0023f35:	47                   	inc    edi
c0023f36:	6a 07                	push   0x7
c0023f38:	53                   	push   ebx
c0023f39:	50                   	push   eax
c0023f3a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023f3e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0023f44:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0023f47:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0023f4d:	e8 60 49 ff ff       	call   c00188b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0023f52:	58                   	pop    eax
c0023f53:	5a                   	pop    edx
c0023f54:	68 07 0c 00 00       	push   0xc07
c0023f59:	55                   	push   ebp
c0023f5a:	81 c5 00 10 00 00    	add    ebp,0x1000
c0023f60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f64:	50                   	push   eax
c0023f65:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0023f6c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023f72:	6a 00                	push   0x0
c0023f74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023f79:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023f7c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023f82:	e8 8f 4b ff ff       	call   c0018b16 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0023f87:	83 c4 1c             	add    esp,0x1c
c0023f8a:	68 00 10 00 00       	push   0x1000
c0023f8f:	6a 00                	push   0x0
c0023f91:	53                   	push   ebx
c0023f92:	e8 59 c5 fd ff       	call   c00004f0 <memset>
c0023f97:	83 c4 10             	add    esp,0x10
c0023f9a:	39 fe                	cmp    esi,edi
c0023f9c:	77 92                	ja     c0023f30 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c0023f9e:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0023fa3:	48                   	dec    eax
c0023fa4:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0023fa9:	75 01                	jne    c0023fac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0023fab:	fb                   	sti    
c0023fac:	83 ec 0c             	sub    esp,0xc
c0023faf:	53                   	push   ebx
c0023fb0:	e8 08 45 ff ff       	call   c00184bd <Virt::freeKernelVirtualPages(unsigned long)>
c0023fb5:	83 c4 10             	add    esp,0x10
c0023fb8:	b0 01                	mov    al,0x1
c0023fba:	81 c4 2c 10 00 00    	add    esp,0x102c
c0023fc0:	5b                   	pop    ebx
c0023fc1:	5e                   	pop    esi
c0023fc2:	5f                   	pop    edi
c0023fc3:	5d                   	pop    ebp
c0023fc4:	c3                   	ret    

c0023fc5 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0023fc5:	55                   	push   ebp
c0023fc6:	57                   	push   edi
c0023fc7:	56                   	push   esi
c0023fc8:	53                   	push   ebx
c0023fc9:	83 ec 48             	sub    esp,0x48
c0023fcc:	68 14 01 00 00       	push   0x114
c0023fd1:	e8 b2 26 ff ff       	call   c0016688 <malloc>
c0023fd6:	83 c4 0c             	add    esp,0xc
c0023fd9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0023fdd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0023fe1:	89 c7                	mov    edi,eax
c0023fe3:	50                   	push   eax
c0023fe4:	e8 ed 66 ff ff       	call   c001a6d6 <File::File(char const*, Process*)>
c0023fe9:	58                   	pop    eax
c0023fea:	5a                   	pop    edx
c0023feb:	6a 01                	push   0x1
c0023fed:	57                   	push   edi
c0023fee:	e8 01 67 ff ff       	call   c001a6f4 <File::open(FileOpenMode)>
c0023ff3:	83 c4 10             	add    esp,0x10
c0023ff6:	85 c0                	test   eax,eax
c0023ff8:	0f 85 4c 01 00 00    	jne    c002414a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023ffe:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0024006:	83 ec 0c             	sub    esp,0xc
c0024009:	6a 34                	push   0x34
c002400b:	e8 78 26 ff ff       	call   c0016688 <malloc>
c0024010:	89 c3                	mov    ebx,eax
c0024012:	58                   	pop    eax
c0024013:	8b 07                	mov    eax,DWORD PTR [edi]
c0024015:	8d 74 24 38          	lea    esi,[esp+0x38]
c0024019:	56                   	push   esi
c002401a:	53                   	push   ebx
c002401b:	6a 00                	push   0x0
c002401d:	6a 34                	push   0x34
c002401f:	57                   	push   edi
c0024020:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0024023:	83 c4 20             	add    esp,0x20
c0024026:	85 c0                	test   eax,eax
c0024028:	0f 85 1c 01 00 00    	jne    c002414a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c002402e:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0024034:	0f 85 10 01 00 00    	jne    c002414a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c002403a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002403d:	85 c0                	test   eax,eax
c002403f:	0f 84 05 01 00 00    	je     c002414a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0024045:	31 d2                	xor    edx,edx
c0024047:	55                   	push   ebp
c0024048:	52                   	push   edx
c0024049:	50                   	push   eax
c002404a:	57                   	push   edi
c002404b:	e8 62 67 ff ff       	call   c001a7b2 <File::seek(unsigned long long)>
c0024050:	83 c4 10             	add    esp,0x10
c0024053:	85 c0                	test   eax,eax
c0024055:	0f 85 ef 00 00 00    	jne    c002414a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c002405b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c002405e:	83 ec 0c             	sub    esp,0xc
c0024061:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0024065:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024069:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c002406d:	0f af c2             	imul   eax,edx
c0024070:	50                   	push   eax
c0024071:	e8 12 26 ff ff       	call   c0016688 <malloc>
c0024076:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0024078:	89 34 24             	mov    DWORD PTR [esp],esi
c002407b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002407f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0024083:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0024087:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c002408b:	0f af c2             	imul   eax,edx
c002408e:	99                   	cdq    
c002408f:	52                   	push   edx
c0024090:	50                   	push   eax
c0024091:	57                   	push   edi
c0024092:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024095:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0024098:	83 c4 20             	add    esp,0x20
c002409b:	85 c0                	test   eax,eax
c002409d:	0f 84 a7 00 00 00    	je     c002414a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00240a3:	31 d2                	xor    edx,edx
c00240a5:	51                   	push   ecx
c00240a6:	52                   	push   edx
c00240a7:	50                   	push   eax
c00240a8:	57                   	push   edi
c00240a9:	e8 04 67 ff ff       	call   c001a7b2 <File::seek(unsigned long long)>
c00240ae:	83 c4 10             	add    esp,0x10
c00240b1:	85 c0                	test   eax,eax
c00240b3:	0f 85 91 00 00 00    	jne    c002414a <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00240b9:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00240bd:	83 ec 0c             	sub    esp,0xc
c00240c0:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00240c4:	0f af c2             	imul   eax,edx
c00240c7:	50                   	push   eax
c00240c8:	e8 bb 25 ff ff       	call   c0016688 <malloc>
c00240cd:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00240cf:	89 34 24             	mov    DWORD PTR [esp],esi
c00240d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00240d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00240da:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00240de:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00240e2:	0f af c2             	imul   eax,edx
c00240e5:	99                   	cdq    
c00240e6:	52                   	push   edx
c00240e7:	50                   	push   eax
c00240e8:	57                   	push   edi
c00240e9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00240ec:	83 c4 20             	add    esp,0x20
c00240ef:	31 c9                	xor    ecx,ecx
c00240f1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00240f9:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c00240fd:	0f b7 e9             	movzx  ebp,cx
c0024100:	0f 83 86 00 00 00    	jae    c002418c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0024106:	c1 e5 05             	shl    ebp,0x5
c0024109:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c002410d:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0024111:	75 73                	jne    c0024186 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0024113:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0024117:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002411a:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c002411d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024121:	52                   	push   edx
c0024122:	31 d2                	xor    edx,edx
c0024124:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0024127:	52                   	push   edx
c0024128:	50                   	push   eax
c0024129:	57                   	push   edi
c002412a:	e8 83 66 ff ff       	call   c001a7b2 <File::seek(unsigned long long)>
c002412f:	83 c4 10             	add    esp,0x10
c0024132:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024136:	85 c0                	test   eax,eax
c0024138:	74 17                	je     c0024151 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c002413a:	83 ec 0c             	sub    esp,0xc
c002413d:	68 33 35 03 c0       	push   0xc0033533
c0024142:	e8 77 53 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0024147:	83 c4 10             	add    esp,0x10
c002414a:	31 c0                	xor    eax,eax
c002414c:	e9 8b 00 00 00       	jmp    c00241dc <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0024151:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0024155:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0024158:	83 ec 0c             	sub    esp,0xc
c002415b:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c002415e:	50                   	push   eax
c002415f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0024163:	56                   	push   esi
c0024164:	57                   	push   edi
c0024165:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0024169:	e8 d0 fb ff ff       	call   c0023d3e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c002416e:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0024172:	83 c4 20             	add    esp,0x20
c0024175:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0024179:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002417d:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0024182:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0024186:	41                   	inc    ecx
c0024187:	e9 6d ff ff ff       	jmp    c00240f9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c002418c:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0024190:	83 ec 0c             	sub    esp,0xc
c0024193:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0024197:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002419b:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c00241a1:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c00241a7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00241ac:	05 00 10 00 00       	add    eax,0x1000
c00241b1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00241b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00241b8:	e8 db 24 ff ff       	call   c0016698 <free>
c00241bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00241c0:	e8 d3 24 ff ff       	call   c0016698 <free>
c00241c5:	58                   	pop    eax
c00241c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00241ca:	e8 c9 24 ff ff       	call   c0016698 <free>
c00241cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00241d2:	e8 7b 65 ff ff       	call   c001a752 <File::close()>
c00241d7:	83 c4 10             	add    esp,0x10
c00241da:	b0 01                	mov    al,0x1
c00241dc:	83 c4 3c             	add    esp,0x3c
c00241df:	5b                   	pop    ebx
c00241e0:	5e                   	pop    esi
c00241e1:	5f                   	pop    edi
c00241e2:	5d                   	pop    ebp
c00241e3:	c3                   	ret    

c00241e4 <Thr::runtimeReferenceHelper()>:
c00241e4:	83 ec 18             	sub    esp,0x18
c00241e7:	68 3b 35 03 c0       	push   0xc003353b
c00241ec:	e8 cd 52 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c00241f1:	fa                   	cli    
c00241f2:	83 c4 10             	add    esp,0x10
c00241f5:	eb fe                	jmp    c00241f5 <Thr::runtimeReferenceHelper()+0x11>

c00241f7 <Thr::getAddressOfKernelSymbol(char const*)>:
c00241f7:	57                   	push   edi
c00241f8:	56                   	push   esi
c00241f9:	53                   	push   ebx
c00241fa:	31 db                	xor    ebx,ebx
c00241fc:	39 1d a0 11 04 c0    	cmp    DWORD PTR ds:0xc00411a0,ebx
c0024202:	7e 3c                	jle    c0024240 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0024204:	8b 34 9d 20 11 04 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffbeee0]
c002420b:	31 ff                	xor    edi,edi
c002420d:	39 3c 9d 20 10 04 c0 	cmp    DWORD PTR [ebx*4-0x3ffbefe0],edi
c0024214:	7e 27                	jle    c002423d <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0024216:	50                   	push   eax
c0024217:	50                   	push   eax
c0024218:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002421c:	8b 06                	mov    eax,DWORD PTR [esi]
c002421e:	03 04 9d a0 10 04 c0 	add    eax,DWORD PTR [ebx*4-0x3ffbef60]
c0024225:	50                   	push   eax
c0024226:	e8 55 c5 fd ff       	call   c0000780 <strcmp>
c002422b:	83 c4 10             	add    esp,0x10
c002422e:	85 c0                	test   eax,eax
c0024230:	75 05                	jne    c0024237 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0024232:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0024235:	eb 0b                	jmp    c0024242 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0024237:	83 c6 10             	add    esi,0x10
c002423a:	47                   	inc    edi
c002423b:	eb d0                	jmp    c002420d <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c002423d:	43                   	inc    ebx
c002423e:	eb bc                	jmp    c00241fc <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0024240:	31 c0                	xor    eax,eax
c0024242:	5b                   	pop    ebx
c0024243:	5e                   	pop    esi
c0024244:	5f                   	pop    edi
c0024245:	c3                   	ret    

c0024246 <Thr::loadKernelSymbolTable(char const*)>:
c0024246:	55                   	push   ebp
c0024247:	57                   	push   edi
c0024248:	56                   	push   esi
c0024249:	53                   	push   ebx
c002424a:	83 ec 68             	sub    esp,0x68
c002424d:	68 14 01 00 00       	push   0x114
c0024252:	8b 35 f8 11 04 c0    	mov    esi,DWORD PTR ds:0xc00411f8
c0024258:	e8 2b 24 ff ff       	call   c0016688 <malloc>
c002425d:	83 c4 0c             	add    esp,0xc
c0024260:	56                   	push   esi
c0024261:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0024265:	89 c3                	mov    ebx,eax
c0024267:	50                   	push   eax
c0024268:	e8 69 64 ff ff       	call   c001a6d6 <File::File(char const*, Process*)>
c002426d:	5e                   	pop    esi
c002426e:	5f                   	pop    edi
c002426f:	6a 01                	push   0x1
c0024271:	53                   	push   ebx
c0024272:	e8 7d 64 ff ff       	call   c001a6f4 <File::open(FileOpenMode)>
c0024277:	83 c4 10             	add    esp,0x10
c002427a:	85 c0                	test   eax,eax
c002427c:	74 0a                	je     c0024288 <Thr::loadKernelSymbolTable(char const*)+0x42>
c002427e:	83 ec 0c             	sub    esp,0xc
c0024281:	68 5d 35 03 c0       	push   0xc003355d
c0024286:	eb 34                	jmp    c00242bc <Thr::loadKernelSymbolTable(char const*)+0x76>
c0024288:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0024290:	83 ec 0c             	sub    esp,0xc
c0024293:	6a 34                	push   0x34
c0024295:	e8 ee 23 ff ff       	call   c0016688 <malloc>
c002429a:	59                   	pop    ecx
c002429b:	8d 74 24 34          	lea    esi,[esp+0x34]
c002429f:	89 c7                	mov    edi,eax
c00242a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00242a3:	56                   	push   esi
c00242a4:	57                   	push   edi
c00242a5:	6a 00                	push   0x0
c00242a7:	6a 34                	push   0x34
c00242a9:	53                   	push   ebx
c00242aa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00242ad:	83 c4 20             	add    esp,0x20
c00242b0:	85 c0                	test   eax,eax
c00242b2:	74 17                	je     c00242cb <Thr::loadKernelSymbolTable(char const*)+0x85>
c00242b4:	83 ec 0c             	sub    esp,0xc
c00242b7:	68 74 35 03 c0       	push   0xc0033574
c00242bc:	e8 41 c4 ff ff       	call   c0020702 <KePanic(char const*)>
c00242c1:	83 c4 10             	add    esp,0x10
c00242c4:	31 c0                	xor    eax,eax
c00242c6:	e9 31 02 00 00       	jmp    c00244fc <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00242cb:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00242d1:	75 e1                	jne    c00242b4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00242d3:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00242d6:	85 c0                	test   eax,eax
c00242d8:	74 da                	je     c00242b4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00242da:	52                   	push   edx
c00242db:	31 d2                	xor    edx,edx
c00242dd:	52                   	push   edx
c00242de:	50                   	push   eax
c00242df:	53                   	push   ebx
c00242e0:	e8 cd 64 ff ff       	call   c001a7b2 <File::seek(unsigned long long)>
c00242e5:	83 c4 10             	add    esp,0x10
c00242e8:	85 c0                	test   eax,eax
c00242ea:	75 c8                	jne    c00242b4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00242ec:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00242f0:	83 ec 0c             	sub    esp,0xc
c00242f3:	31 ed                	xor    ebp,ebp
c00242f5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00242f9:	0f af c2             	imul   eax,edx
c00242fc:	50                   	push   eax
c00242fd:	e8 86 23 ff ff       	call   c0016688 <malloc>
c0024302:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0024304:	89 34 24             	mov    DWORD PTR [esp],esi
c0024307:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002430b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002430f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0024313:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0024317:	0f af c2             	imul   eax,edx
c002431a:	99                   	cdq    
c002431b:	52                   	push   edx
c002431c:	50                   	push   eax
c002431d:	53                   	push   ebx
c002431e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024321:	83 c4 20             	add    esp,0x20
c0024324:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c002432c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0024334:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002433c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0024344:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0024348:	0f b7 f5             	movzx  esi,bp
c002434b:	0f 83 a7 00 00 00    	jae    c00243f8 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0024351:	6b f6 28             	imul   esi,esi,0x28
c0024354:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024358:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002435b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002435f:	50                   	push   eax
c0024360:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0024364:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0024368:	8b 16                	mov    edx,DWORD PTR [esi]
c002436a:	6b c0 28             	imul   eax,eax,0x28
c002436d:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0024371:	89 d0                	mov    eax,edx
c0024373:	31 d2                	xor    edx,edx
c0024375:	52                   	push   edx
c0024376:	50                   	push   eax
c0024377:	53                   	push   ebx
c0024378:	e8 35 64 ff ff       	call   c001a7b2 <File::seek(unsigned long long)>
c002437d:	83 c4 0c             	add    esp,0xc
c0024380:	6a 20                	push   0x20
c0024382:	6a 00                	push   0x0
c0024384:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0024388:	52                   	push   edx
c0024389:	e8 62 c1 fd ff       	call   c00004f0 <memset>
c002438e:	58                   	pop    eax
c002438f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024391:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0024395:	51                   	push   ecx
c0024396:	8d 54 24 40          	lea    edx,[esp+0x40]
c002439a:	52                   	push   edx
c002439b:	6a 00                	push   0x0
c002439d:	6a 1f                	push   0x1f
c002439f:	53                   	push   ebx
c00243a0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00243a3:	83 c4 18             	add    esp,0x18
c00243a6:	68 8b 35 03 c0       	push   0xc003358b
c00243ab:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00243af:	52                   	push   edx
c00243b0:	e8 cb c3 fd ff       	call   c0000780 <strcmp>
c00243b5:	83 c4 10             	add    esp,0x10
c00243b8:	85 c0                	test   eax,eax
c00243ba:	75 0f                	jne    c00243cb <Thr::loadKernelSymbolTable(char const*)+0x185>
c00243bc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00243bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00243c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00243c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00243cb:	50                   	push   eax
c00243cc:	50                   	push   eax
c00243cd:	68 93 35 03 c0       	push   0xc0033593
c00243d2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00243d6:	50                   	push   eax
c00243d7:	e8 a4 c3 fd ff       	call   c0000780 <strcmp>
c00243dc:	83 c4 10             	add    esp,0x10
c00243df:	85 c0                	test   eax,eax
c00243e1:	75 0f                	jne    c00243f2 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00243e3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00243e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00243ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00243ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00243f2:	45                   	inc    ebp
c00243f3:	e9 4c ff ff ff       	jmp    c0024344 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00243f8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00243fd:	75 10                	jne    c002440f <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00243ff:	83 ec 0c             	sub    esp,0xc
c0024402:	68 9b 35 03 c0       	push   0xc003359b
c0024407:	e8 f6 c2 ff ff       	call   c0020702 <KePanic(char const*)>
c002440c:	83 c4 10             	add    esp,0x10
c002440f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0024414:	75 10                	jne    c0024426 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0024416:	83 ec 0c             	sub    esp,0xc
c0024419:	68 9b 35 03 c0       	push   0xc003359b
c002441e:	e8 df c2 ff ff       	call   c0020702 <KePanic(char const*)>
c0024423:	83 c4 10             	add    esp,0x10
c0024426:	50                   	push   eax
c0024427:	31 d2                	xor    edx,edx
c0024429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002442d:	52                   	push   edx
c002442e:	50                   	push   eax
c002442f:	53                   	push   ebx
c0024430:	e8 7d 63 ff ff       	call   c001a7b2 <File::seek(unsigned long long)>
c0024435:	5a                   	pop    edx
c0024436:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002443a:	e8 49 22 ff ff       	call   c0016688 <malloc>
c002443f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0024443:	31 c9                	xor    ecx,ecx
c0024445:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024449:	8b 03                	mov    eax,DWORD PTR [ebx]
c002444b:	5e                   	pop    esi
c002444c:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0024450:	55                   	push   ebp
c0024451:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024455:	51                   	push   ecx
c0024456:	52                   	push   edx
c0024457:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002445b:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c002445f:	53                   	push   ebx
c0024460:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0024463:	83 c4 14             	add    esp,0x14
c0024466:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002446a:	e8 19 22 ff ff       	call   c0016688 <malloc>
c002446f:	89 c6                	mov    esi,eax
c0024471:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024473:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024476:	56                   	push   esi
c0024477:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002447b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002447f:	51                   	push   ecx
c0024480:	52                   	push   edx
c0024481:	53                   	push   ebx
c0024482:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0024485:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024489:	83 c4 1c             	add    esp,0x1c
c002448c:	8b 15 a0 11 04 c0    	mov    edx,DWORD PTR ds:0xc00411a0
c0024492:	c1 e8 04             	shr    eax,0x4
c0024495:	89 04 95 20 10 04 c0 	mov    DWORD PTR [edx*4-0x3ffbefe0],eax
c002449c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00244a0:	31 d2                	xor    edx,edx
c00244a2:	52                   	push   edx
c00244a3:	50                   	push   eax
c00244a4:	53                   	push   ebx
c00244a5:	e8 08 63 ff ff       	call   c001a7b2 <File::seek(unsigned long long)>
c00244aa:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00244ac:	31 d2                	xor    edx,edx
c00244ae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00244b1:	56                   	push   esi
c00244b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00244b6:	52                   	push   edx
c00244b7:	50                   	push   eax
c00244b8:	53                   	push   ebx
c00244b9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00244bc:	83 c4 14             	add    esp,0x14
c00244bf:	53                   	push   ebx
c00244c0:	e8 8d 62 ff ff       	call   c001a752 <File::close()>
c00244c5:	5d                   	pop    ebp
c00244c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00244ca:	e8 c9 21 ff ff       	call   c0016698 <free>
c00244cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00244d2:	e8 c1 21 ff ff       	call   c0016698 <free>
c00244d7:	a1 a0 11 04 c0       	mov    eax,ds:0xc00411a0
c00244dc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00244e0:	83 c4 10             	add    esp,0x10
c00244e3:	89 34 85 a0 10 04 c0 	mov    DWORD PTR [eax*4-0x3ffbef60],esi
c00244ea:	8d 50 01             	lea    edx,[eax+0x1]
c00244ed:	89 0c 85 20 11 04 c0 	mov    DWORD PTR [eax*4-0x3ffbeee0],ecx
c00244f4:	b0 01                	mov    al,0x1
c00244f6:	89 15 a0 11 04 c0    	mov    DWORD PTR ds:0xc00411a0,edx
c00244fc:	83 c4 5c             	add    esp,0x5c
c00244ff:	5b                   	pop    ebx
c0024500:	5e                   	pop    esi
c0024501:	5f                   	pop    edi
c0024502:	5d                   	pop    ebp
c0024503:	c3                   	ret    

c0024504 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0024504:	55                   	push   ebp
c0024505:	57                   	push   edi
c0024506:	56                   	push   esi
c0024507:	53                   	push   ebx
c0024508:	81 ec 68 03 00 00    	sub    esp,0x368
c002450e:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0024515:	8b 35 f8 11 04 c0    	mov    esi,DWORD PTR ds:0xc00411f8
c002451b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002451f:	68 14 01 00 00       	push   0x114
c0024524:	e8 5f 21 ff ff       	call   c0016688 <malloc>
c0024529:	83 c4 0c             	add    esp,0xc
c002452c:	56                   	push   esi
c002452d:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0024534:	50                   	push   eax
c0024535:	89 c3                	mov    ebx,eax
c0024537:	e8 9a 61 ff ff       	call   c001a6d6 <File::File(char const*, Process*)>
c002453c:	5f                   	pop    edi
c002453d:	5d                   	pop    ebp
c002453e:	6a 01                	push   0x1
c0024540:	53                   	push   ebx
c0024541:	e8 ae 61 ff ff       	call   c001a6f4 <File::open(FileOpenMode)>
c0024546:	83 c4 10             	add    esp,0x10
c0024549:	85 c0                	test   eax,eax
c002454b:	0f 85 b3 06 00 00    	jne    c0024c04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0024551:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0024559:	83 ec 0c             	sub    esp,0xc
c002455c:	6a 34                	push   0x34
c002455e:	e8 25 21 ff ff       	call   c0016688 <malloc>
c0024563:	5e                   	pop    esi
c0024564:	8d 74 24 54          	lea    esi,[esp+0x54]
c0024568:	89 c5                	mov    ebp,eax
c002456a:	8b 03                	mov    eax,DWORD PTR [ebx]
c002456c:	56                   	push   esi
c002456d:	55                   	push   ebp
c002456e:	6a 00                	push   0x0
c0024570:	6a 34                	push   0x34
c0024572:	53                   	push   ebx
c0024573:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0024576:	83 c4 20             	add    esp,0x20
c0024579:	85 c0                	test   eax,eax
c002457b:	0f 85 83 06 00 00    	jne    c0024c04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0024581:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0024588:	0f 85 76 06 00 00    	jne    c0024c04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c002458e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0024591:	85 c0                	test   eax,eax
c0024593:	0f 84 6b 06 00 00    	je     c0024c04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0024599:	31 d2                	xor    edx,edx
c002459b:	51                   	push   ecx
c002459c:	52                   	push   edx
c002459d:	50                   	push   eax
c002459e:	53                   	push   ebx
c002459f:	e8 0e 62 ff ff       	call   c001a7b2 <File::seek(unsigned long long)>
c00245a4:	83 c4 10             	add    esp,0x10
c00245a7:	85 c0                	test   eax,eax
c00245a9:	0f 85 55 06 00 00    	jne    c0024c04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00245af:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00245b2:	83 ec 0c             	sub    esp,0xc
c00245b5:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00245b9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00245bd:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00245c1:	0f af c2             	imul   eax,edx
c00245c4:	50                   	push   eax
c00245c5:	e8 be 20 ff ff       	call   c0016688 <malloc>
c00245ca:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00245cc:	89 34 24             	mov    DWORD PTR [esp],esi
c00245cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00245d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00245d7:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00245db:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00245df:	0f af c2             	imul   eax,edx
c00245e2:	99                   	cdq    
c00245e3:	52                   	push   edx
c00245e4:	50                   	push   eax
c00245e5:	53                   	push   ebx
c00245e6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00245e9:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c00245ec:	83 c4 20             	add    esp,0x20
c00245ef:	85 c0                	test   eax,eax
c00245f1:	0f 84 0d 06 00 00    	je     c0024c04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00245f7:	52                   	push   edx
c00245f8:	31 d2                	xor    edx,edx
c00245fa:	52                   	push   edx
c00245fb:	50                   	push   eax
c00245fc:	53                   	push   ebx
c00245fd:	e8 b0 61 ff ff       	call   c001a7b2 <File::seek(unsigned long long)>
c0024602:	83 c4 10             	add    esp,0x10
c0024605:	85 c0                	test   eax,eax
c0024607:	0f 85 f7 05 00 00    	jne    c0024c04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c002460d:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0024611:	83 ec 0c             	sub    esp,0xc
c0024614:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0024618:	0f af c2             	imul   eax,edx
c002461b:	50                   	push   eax
c002461c:	e8 67 20 ff ff       	call   c0016688 <malloc>
c0024621:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0024623:	89 34 24             	mov    DWORD PTR [esp],esi
c0024626:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002462a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002462e:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0024632:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0024636:	0f af c2             	imul   eax,edx
c0024639:	99                   	cdq    
c002463a:	52                   	push   edx
c002463b:	50                   	push   eax
c002463c:	53                   	push   ebx
c002463d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024640:	83 c4 20             	add    esp,0x20
c0024643:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0024649:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002464c:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0024650:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0024654:	73 78                	jae    c00246ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0024656:	c1 e7 05             	shl    edi,0x5
c0024659:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c002465d:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0024660:	75 63                	jne    c00246c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0024662:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0024665:	31 d2                	xor    edx,edx
c0024667:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c002466a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002466e:	50                   	push   eax
c002466f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0024672:	52                   	push   edx
c0024673:	50                   	push   eax
c0024674:	53                   	push   ebx
c0024675:	e8 38 61 ff ff       	call   c001a7b2 <File::seek(unsigned long long)>
c002467a:	83 c4 10             	add    esp,0x10
c002467d:	85 c0                	test   eax,eax
c002467f:	0f 85 7f 05 00 00    	jne    c0024c04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0024685:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c002468c:	83 ec 0c             	sub    esp,0xc
c002468f:	31 d2                	xor    edx,edx
c0024691:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0024695:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0024697:	01 c6                	add    esi,eax
c0024699:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00246a0:	50                   	push   eax
c00246a1:	56                   	push   esi
c00246a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00246a6:	52                   	push   edx
c00246a7:	50                   	push   eax
c00246a8:	53                   	push   ebx
c00246a9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00246ac:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00246af:	83 c4 1c             	add    esp,0x1c
c00246b2:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00246b5:	50                   	push   eax
c00246b6:	6a 00                	push   0x0
c00246b8:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00246bc:	56                   	push   esi
c00246bd:	e8 2e be fd ff       	call   c00004f0 <memset>
c00246c2:	83 c4 10             	add    esp,0x10
c00246c5:	66 ff 04 24          	inc    WORD PTR [esp]
c00246c9:	e9 7b ff ff ff       	jmp    c0024649 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c00246ce:	50                   	push   eax
c00246cf:	68 00 01 00 00       	push   0x100
c00246d4:	6a 00                	push   0x0
c00246d6:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00246da:	50                   	push   eax
c00246db:	e8 10 be fd ff       	call   c00004f0 <memset>
c00246e0:	83 c4 0c             	add    esp,0xc
c00246e3:	68 00 01 00 00       	push   0x100
c00246e8:	6a 00                	push   0x0
c00246ea:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00246f1:	50                   	push   eax
c00246f2:	e8 f9 bd fd ff       	call   c00004f0 <memset>
c00246f7:	83 c4 10             	add    esp,0x10
c00246fa:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0024701:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0024708:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0024710:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0024718:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0024720:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0024728:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002472c:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0024730:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0024735:	0f 83 16 01 00 00    	jae    c0024851 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c002473b:	6b ff 28             	imul   edi,edi,0x28
c002473e:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0024742:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0024745:	51                   	push   ecx
c0024746:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c002474a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002474e:	8b 07                	mov    eax,DWORD PTR [edi]
c0024750:	6b d2 28             	imul   edx,edx,0x28
c0024753:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0024757:	31 d2                	xor    edx,edx
c0024759:	52                   	push   edx
c002475a:	50                   	push   eax
c002475b:	53                   	push   ebx
c002475c:	e8 51 60 ff ff       	call   c001a7b2 <File::seek(unsigned long long)>
c0024761:	83 c4 0c             	add    esp,0xc
c0024764:	6a 20                	push   0x20
c0024766:	6a 00                	push   0x0
c0024768:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c002476f:	51                   	push   ecx
c0024770:	e8 7b bd fd ff       	call   c00004f0 <memset>
c0024775:	58                   	pop    eax
c0024776:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024778:	8d 54 24 58          	lea    edx,[esp+0x58]
c002477c:	52                   	push   edx
c002477d:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0024784:	51                   	push   ecx
c0024785:	6a 00                	push   0x0
c0024787:	6a 1f                	push   0x1f
c0024789:	53                   	push   ebx
c002478a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c002478d:	83 c4 1c             	add    esp,0x1c
c0024790:	6a 09                	push   0x9
c0024792:	68 b5 35 03 c0       	push   0xc00335b5
c0024797:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c002479e:	51                   	push   ecx
c002479f:	e8 dc bb fd ff       	call   c0000380 <memcmp>
c00247a4:	83 c4 10             	add    esp,0x10
c00247a7:	85 c0                	test   eax,eax
c00247a9:	75 1a                	jne    c00247c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c00247ab:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00247ae:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00247b1:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00247b5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00247b8:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00247bf:	89 d0                	mov    eax,edx
c00247c1:	40                   	inc    eax
c00247c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00247c5:	52                   	push   edx
c00247c6:	6a 09                	push   0x9
c00247c8:	68 bf 35 03 c0       	push   0xc00335bf
c00247cd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00247d4:	50                   	push   eax
c00247d5:	e8 a6 bb fd ff       	call   c0000380 <memcmp>
c00247da:	83 c4 10             	add    esp,0x10
c00247dd:	85 c0                	test   eax,eax
c00247df:	75 1a                	jne    c00247fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c00247e1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00247e4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00247e7:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00247eb:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00247ee:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c00247f5:	89 c8                	mov    eax,ecx
c00247f7:	40                   	inc    eax
c00247f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00247fb:	50                   	push   eax
c00247fc:	50                   	push   eax
c00247fd:	68 8b 35 03 c0       	push   0xc003358b
c0024802:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024809:	50                   	push   eax
c002480a:	e8 71 bf fd ff       	call   c0000780 <strcmp>
c002480f:	83 c4 10             	add    esp,0x10
c0024812:	85 c0                	test   eax,eax
c0024814:	75 0b                	jne    c0024821 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0024816:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c002481a:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c002481d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024821:	50                   	push   eax
c0024822:	50                   	push   eax
c0024823:	68 93 35 03 c0       	push   0xc0033593
c0024828:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c002482f:	50                   	push   eax
c0024830:	e8 4b bf fd ff       	call   c0000780 <strcmp>
c0024835:	83 c4 10             	add    esp,0x10
c0024838:	85 c0                	test   eax,eax
c002483a:	75 0b                	jne    c0024847 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c002483c:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0024840:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0024843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024847:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c002484c:	e9 d7 fe ff ff       	jmp    c0024728 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0024851:	50                   	push   eax
c0024852:	31 d2                	xor    edx,edx
c0024854:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024858:	52                   	push   edx
c0024859:	50                   	push   eax
c002485a:	53                   	push   ebx
c002485b:	e8 52 5f ff ff       	call   c001a7b2 <File::seek(unsigned long long)>
c0024860:	58                   	pop    eax
c0024861:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024865:	e8 1e 1e ff ff       	call   c0016688 <malloc>
c002486a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c002486c:	31 d2                	xor    edx,edx
c002486e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0024872:	58                   	pop    eax
c0024873:	8d 74 24 54          	lea    esi,[esp+0x54]
c0024877:	56                   	push   esi
c0024878:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002487c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024880:	52                   	push   edx
c0024881:	50                   	push   eax
c0024882:	53                   	push   ebx
c0024883:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024886:	83 c4 14             	add    esp,0x14
c0024889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002488d:	e8 f6 1d ff ff       	call   c0016688 <malloc>
c0024892:	31 d2                	xor    edx,edx
c0024894:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024898:	83 c4 0c             	add    esp,0xc
c002489b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002489f:	52                   	push   edx
c00248a0:	50                   	push   eax
c00248a1:	53                   	push   ebx
c00248a2:	e8 0b 5f ff ff       	call   c001a7b2 <File::seek(unsigned long long)>
c00248a7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00248a9:	31 d2                	xor    edx,edx
c00248ab:	89 34 24             	mov    DWORD PTR [esp],esi
c00248ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00248b2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00248b6:	52                   	push   edx
c00248b7:	50                   	push   eax
c00248b8:	53                   	push   ebx
c00248b9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00248bc:	83 c4 20             	add    esp,0x20
c00248bf:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c00248c4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00248cc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00248d0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00248d4:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00248d7:	0f 84 2b 03 00 00    	je     c0024c08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c00248dd:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c00248e4:	31 d2                	xor    edx,edx
c00248e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00248ea:	c1 e8 03             	shr    eax,0x3
c00248ed:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00248f1:	51                   	push   ecx
c00248f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248f6:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00248fa:	52                   	push   edx
c00248fb:	50                   	push   eax
c00248fc:	53                   	push   ebx
c00248fd:	e8 b0 5e ff ff       	call   c001a7b2 <File::seek(unsigned long long)>
c0024902:	5e                   	pop    esi
c0024903:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024907:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c002490e:	e8 75 1d ff ff       	call   c0016688 <malloc>
c0024913:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0024915:	31 d2                	xor    edx,edx
c0024917:	89 c7                	mov    edi,eax
c0024919:	58                   	pop    eax
c002491a:	8d 44 24 58          	lea    eax,[esp+0x58]
c002491e:	50                   	push   eax
c002491f:	57                   	push   edi
c0024920:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024924:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c002492b:	52                   	push   edx
c002492c:	50                   	push   eax
c002492d:	53                   	push   ebx
c002492e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024931:	83 c4 20             	add    esp,0x20
c0024934:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c002493c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024940:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0024944:	0f 8d a5 02 00 00    	jge    c0024bef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c002494a:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c002494f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024953:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0024956:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002495a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002495e:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c0024962:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024966:	c1 e8 08             	shr    eax,0x8
c0024969:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002496d:	89 c2                	mov    edx,eax
c002496f:	c1 e2 04             	shl    edx,0x4
c0024972:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0024976:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0024979:	85 f6                	test   esi,esi
c002497b:	0f 85 cf 00 00 00    	jne    c0024a50 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0024981:	83 ec 0c             	sub    esp,0xc
c0024984:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0024988:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002498c:	03 02                	add    eax,DWORD PTR [edx]
c002498e:	50                   	push   eax
c002498f:	e8 63 f8 ff ff       	call   c00241f7 <Thr::getAddressOfKernelSymbol(char const*)>
c0024994:	83 c4 10             	add    esp,0x10
c0024997:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002499b:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c00249a0:	85 c0                	test   eax,eax
c00249a2:	89 c6                	mov    esi,eax
c00249a4:	0f 85 a6 00 00 00    	jne    c0024a50 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00249aa:	83 ec 0c             	sub    esp,0xc
c00249ad:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00249b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00249b5:	03 02                	add    eax,DWORD PTR [edx]
c00249b7:	50                   	push   eax
c00249b8:	e8 2f bf ff ff       	call   c00208ec <KeResolveCompatibilitySymbol(char*)>
c00249bd:	83 c4 10             	add    esp,0x10
c00249c0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00249c4:	85 c0                	test   eax,eax
c00249c6:	89 c6                	mov    esi,eax
c00249c8:	0f 85 82 00 00 00    	jne    c0024a50 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00249ce:	50                   	push   eax
c00249cf:	50                   	push   eax
c00249d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00249d4:	03 02                	add    eax,DWORD PTR [edx]
c00249d6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00249da:	50                   	push   eax
c00249db:	68 c9 35 03 c0       	push   0xc00335c9
c00249e0:	e8 d9 4a ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c00249e5:	58                   	pop    eax
c00249e6:	5a                   	pop    edx
c00249e7:	68 e3 35 03 c0       	push   0xc00335e3
c00249ec:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00249f3:	51                   	push   ecx
c00249f4:	e8 57 bc fd ff       	call   c0000650 <strcpy>
c00249f9:	59                   	pop    ecx
c00249fa:	58                   	pop    eax
c00249fb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00249ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024a03:	03 02                	add    eax,DWORD PTR [edx]
c0024a05:	50                   	push   eax
c0024a06:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0024a0d:	51                   	push   ecx
c0024a0e:	e8 5d be fd ff       	call   c0000870 <strcat>
c0024a13:	58                   	pop    eax
c0024a14:	5a                   	pop    edx
c0024a15:	68 7d 36 03 c0       	push   0xc003367d
c0024a1a:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0024a21:	51                   	push   ecx
c0024a22:	e8 49 be fd ff       	call   c0000870 <strcat>
c0024a27:	83 c4 10             	add    esp,0x10
c0024a2a:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0024a2f:	0f 84 77 01 00 00    	je     c0024bac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0024a35:	83 ec 0c             	sub    esp,0xc
c0024a38:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0024a3f:	51                   	push   ecx
c0024a40:	e8 bd bc ff ff       	call   c0020702 <KePanic(char const*)>
c0024a45:	83 c4 10             	add    esp,0x10
c0024a48:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0024a4c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024a50:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0024a55:	83 f8 01             	cmp    eax,0x1
c0024a58:	0f 85 9b 00 00 00    	jne    c0024af9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0024a5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024a62:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0024a69:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0024a6d:	01 d0                	add    eax,edx
c0024a6f:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0024a77:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024a7b:	0f 94 c0             	sete   al
c0024a7e:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0024a86:	0f 94 c1             	sete   cl
c0024a89:	09 c1                	or     ecx,eax
c0024a8b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024a8f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0024a94:	0f b6 c9             	movzx  ecx,cl
c0024a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0024a99:	74 41                	je     c0024adc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c0024a9b:	8d 14 06             	lea    edx,[esi+eax*1]
c0024a9e:	85 c9                	test   ecx,ecx
c0024aa0:	75 15                	jne    c0024ab7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0024aa2:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0024aa6:	66 83 f8 0c          	cmp    ax,0xc
c0024aaa:	76 05                	jbe    c0024ab1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0024aac:	b8 0c 00 00 00       	mov    eax,0xc
c0024ab1:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0024ab5:	76 37                	jbe    c0024aee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0024ab7:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0024abc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0024ac0:	0f 84 e6 00 00 00    	je     c0024bac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0024ac6:	83 ec 0c             	sub    esp,0xc
c0024ac9:	68 fa 35 03 c0       	push   0xc00335fa
c0024ace:	e8 2f bc ff ff       	call   c0020702 <KePanic(char const*)>
c0024ad3:	83 c4 10             	add    esp,0x10
c0024ad6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024ada:	eb 12                	jmp    c0024aee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0024adc:	01 c2                	add    edx,eax
c0024ade:	85 c9                	test   ecx,ecx
c0024ae0:	75 0c                	jne    c0024aee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0024ae2:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0024ae6:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0024aea:	77 02                	ja     c0024aee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0024aec:	01 f2                	add    edx,esi
c0024aee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024af2:	89 10                	mov    DWORD PTR [eax],edx
c0024af4:	e9 ed 00 00 00       	jmp    c0024be6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0024af9:	83 f8 02             	cmp    eax,0x2
c0024afc:	0f 85 81 00 00 00    	jne    c0024b83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0024b02:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0024b09:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0024b0d:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0024b11:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0024b19:	74 21                	je     c0024b3c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0024b1b:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0024b23:	74 17                	je     c0024b3c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0024b25:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0024b29:	ba 0a 00 00 00       	mov    edx,0xa
c0024b2e:	83 f9 0e             	cmp    ecx,0xe
c0024b31:	77 03                	ja     c0024b36 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0024b33:	8d 51 fc             	lea    edx,[ecx-0x4]
c0024b36:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0024b3a:	76 1f                	jbe    c0024b5b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0024b3c:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0024b41:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024b45:	74 65                	je     c0024bac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0024b47:	83 ec 0c             	sub    esp,0xc
c0024b4a:	68 16 36 03 c0       	push   0xc0033616
c0024b4f:	e8 ae bb ff ff       	call   c0020702 <KePanic(char const*)>
c0024b54:	83 c4 10             	add    esp,0x10
c0024b57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b5b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0024b60:	8b 10                	mov    edx,DWORD PTR [eax]
c0024b62:	74 15                	je     c0024b79 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0024b64:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0024b68:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0024b6f:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0024b73:	01 d1                	add    ecx,edx
c0024b75:	01 ce                	add    esi,ecx
c0024b77:	eb 06                	jmp    c0024b7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0024b79:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0024b7d:	01 d6                	add    esi,edx
c0024b7f:	89 30                	mov    DWORD PTR [eax],esi
c0024b81:	eb 63                	jmp    c0024be6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0024b83:	56                   	push   esi
c0024b84:	56                   	push   esi
c0024b85:	50                   	push   eax
c0024b86:	68 32 36 03 c0       	push   0xc0033632
c0024b8b:	e8 2e 49 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0024b90:	83 c4 10             	add    esp,0x10
c0024b93:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0024b98:	74 12                	je     c0024bac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0024b9a:	83 ec 0c             	sub    esp,0xc
c0024b9d:	68 3d 36 03 c0       	push   0xc003363d
c0024ba2:	e8 5b bb ff ff       	call   c0020702 <KePanic(char const*)>
c0024ba7:	83 c4 10             	add    esp,0x10
c0024baa:	eb 3a                	jmp    c0024be6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0024bac:	83 ec 0c             	sub    esp,0xc
c0024baf:	53                   	push   ebx
c0024bb0:	e8 9d 5b ff ff       	call   c001a752 <File::close()>
c0024bb5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024bb7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024bba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024bbd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024bc0:	e8 d3 1a ff ff       	call   c0016698 <free>
c0024bc5:	59                   	pop    ecx
c0024bc6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024bca:	e8 c9 1a ff ff       	call   c0016698 <free>
c0024bcf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024bd2:	e8 c1 1a ff ff       	call   c0016698 <free>
c0024bd7:	5b                   	pop    ebx
c0024bd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024bdc:	e8 b7 1a ff ff       	call   c0016698 <free>
c0024be1:	83 c4 10             	add    esp,0x10
c0024be4:	eb 1e                	jmp    c0024c04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0024be6:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0024bea:	e9 4d fd ff ff       	jmp    c002493c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c0024bef:	83 ec 0c             	sub    esp,0xc
c0024bf2:	57                   	push   edi
c0024bf3:	e8 a0 1a ff ff       	call   c0016698 <free>
c0024bf8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0024bfc:	83 c4 10             	add    esp,0x10
c0024bff:	e9 cc fc ff ff       	jmp    c00248d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0024c04:	31 c0                	xor    eax,eax
c0024c06:	eb 32                	jmp    c0024c3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0024c08:	83 ec 0c             	sub    esp,0xc
c0024c0b:	53                   	push   ebx
c0024c0c:	e8 41 5b ff ff       	call   c001a752 <File::close()>
c0024c11:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024c13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c16:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024c19:	58                   	pop    eax
c0024c1a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024c1e:	e8 75 1a ff ff       	call   c0016698 <free>
c0024c23:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024c26:	e8 6d 1a ff ff       	call   c0016698 <free>
c0024c2b:	5a                   	pop    edx
c0024c2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024c30:	e8 63 1a ff ff       	call   c0016698 <free>
c0024c35:	83 c4 10             	add    esp,0x10
c0024c38:	b0 01                	mov    al,0x1
c0024c3a:	81 c4 5c 03 00 00    	add    esp,0x35c
c0024c40:	5b                   	pop    ebx
c0024c41:	5e                   	pop    esi
c0024c42:	5f                   	pop    edi
c0024c43:	5d                   	pop    ebp
c0024c44:	c3                   	ret    

c0024c45 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0024c45:	56                   	push   esi
c0024c46:	31 d2                	xor    edx,edx
c0024c48:	53                   	push   ebx
c0024c49:	8b 1d 00 0a 04 c0    	mov    ebx,DWORD PTR ds:0xc0040a00
c0024c4f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0024c53:	39 d3                	cmp    ebx,edx
c0024c55:	7e 1b                	jle    c0024c72 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0024c57:	8b 04 95 20 0c 04 c0 	mov    eax,DWORD PTR [edx*4-0x3ffbf3e0]
c0024c5e:	39 c8                	cmp    eax,ecx
c0024c60:	77 0d                	ja     c0024c6f <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0024c62:	8b 34 95 20 0a 04 c0 	mov    esi,DWORD PTR [edx*4-0x3ffbf5e0]
c0024c69:	01 c6                	add    esi,eax
c0024c6b:	39 ce                	cmp    esi,ecx
c0024c6d:	77 05                	ja     c0024c74 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0024c6f:	42                   	inc    edx
c0024c70:	eb e1                	jmp    c0024c53 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0024c72:	31 c0                	xor    eax,eax
c0024c74:	5b                   	pop    ebx
c0024c75:	5e                   	pop    esi
c0024c76:	c3                   	ret    

c0024c77 <Thr::getDriverNameFromAddress(unsigned long)>:
c0024c77:	53                   	push   ebx
c0024c78:	8b 1d 00 0a 04 c0    	mov    ebx,DWORD PTR ds:0xc0040a00
c0024c7e:	31 c0                	xor    eax,eax
c0024c80:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024c84:	39 c3                	cmp    ebx,eax
c0024c86:	7e 22                	jle    c0024caa <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0024c88:	8b 14 85 20 0c 04 c0 	mov    edx,DWORD PTR [eax*4-0x3ffbf3e0]
c0024c8f:	39 ca                	cmp    edx,ecx
c0024c91:	77 14                	ja     c0024ca7 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0024c93:	03 14 85 20 0a 04 c0 	add    edx,DWORD PTR [eax*4-0x3ffbf5e0]
c0024c9a:	39 ca                	cmp    edx,ecx
c0024c9c:	76 09                	jbe    c0024ca7 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0024c9e:	8b 04 85 20 0e 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbf1e0]
c0024ca5:	eb 05                	jmp    c0024cac <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0024ca7:	40                   	inc    eax
c0024ca8:	eb da                	jmp    c0024c84 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0024caa:	31 c0                	xor    eax,eax
c0024cac:	5b                   	pop    ebx
c0024cad:	c3                   	ret    

c0024cae <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0024cae:	53                   	push   ebx
c0024caf:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0024cb3:	53                   	push   ebx
c0024cb4:	e8 8c ff ff ff       	call   c0024c45 <Thr::getDriverBaseFromAddress(unsigned long)>
c0024cb9:	5a                   	pop    edx
c0024cba:	31 d2                	xor    edx,edx
c0024cbc:	85 c0                	test   eax,eax
c0024cbe:	74 04                	je     c0024cc4 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0024cc0:	89 da                	mov    edx,ebx
c0024cc2:	29 c2                	sub    edx,eax
c0024cc4:	5b                   	pop    ebx
c0024cc5:	89 d0                	mov    eax,edx
c0024cc7:	c3                   	ret    

c0024cc8 <Thr::loadDLL(char const*, bool)>:
c0024cc8:	55                   	push   ebp
c0024cc9:	57                   	push   edi
c0024cca:	56                   	push   esi
c0024ccb:	53                   	push   ebx
c0024ccc:	81 ec 34 01 00 00    	sub    esp,0x134
c0024cd2:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0024cd9:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0024ce0:	56                   	push   esi
c0024ce1:	68 55 36 03 c0       	push   0xc0033655
c0024ce6:	e8 d3 47 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0024ceb:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0024cf2:	e8 91 19 ff ff       	call   c0016688 <malloc>
c0024cf7:	83 c4 0c             	add    esp,0xc
c0024cfa:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c0024d00:	56                   	push   esi
c0024d01:	50                   	push   eax
c0024d02:	89 c3                	mov    ebx,eax
c0024d04:	e8 cd 59 ff ff       	call   c001a6d6 <File::File(char const*, Process*)>
c0024d09:	83 c4 10             	add    esp,0x10
c0024d0c:	85 db                	test   ebx,ebx
c0024d0e:	75 3c                	jne    c0024d4c <Thr::loadDLL(char const*, bool)+0x84>
c0024d10:	89 e8                	mov    eax,ebp
c0024d12:	84 c0                	test   al,al
c0024d14:	0f 84 02 02 00 00    	je     c0024f1c <Thr::loadDLL(char const*, bool)+0x254>
c0024d1a:	50                   	push   eax
c0024d1b:	50                   	push   eax
c0024d1c:	68 66 36 03 c0       	push   0xc0033666
c0024d21:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0024d25:	57                   	push   edi
c0024d26:	e8 25 b9 fd ff       	call   c0000650 <strcpy>
c0024d2b:	58                   	pop    eax
c0024d2c:	5a                   	pop    edx
c0024d2d:	56                   	push   esi
c0024d2e:	57                   	push   edi
c0024d2f:	e8 3c bb fd ff       	call   c0000870 <strcat>
c0024d34:	59                   	pop    ecx
c0024d35:	58                   	pop    eax
c0024d36:	68 7d 36 03 c0       	push   0xc003367d
c0024d3b:	57                   	push   edi
c0024d3c:	e8 2f bb fd ff       	call   c0000870 <strcat>
c0024d41:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024d44:	e8 b9 b9 ff ff       	call   c0020702 <KePanic(char const*)>
c0024d49:	83 c4 10             	add    esp,0x10
c0024d4c:	50                   	push   eax
c0024d4d:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0024d51:	50                   	push   eax
c0024d52:	8d 44 24 20          	lea    eax,[esp+0x20]
c0024d56:	50                   	push   eax
c0024d57:	53                   	push   ebx
c0024d58:	e8 99 5c ff ff       	call   c001a9f6 <File::stat(unsigned long long*, bool*)>
c0024d5d:	83 c4 10             	add    esp,0x10
c0024d60:	85 db                	test   ebx,ebx
c0024d62:	89 c7                	mov    edi,eax
c0024d64:	74 0c                	je     c0024d72 <Thr::loadDLL(char const*, bool)+0xaa>
c0024d66:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024d68:	83 ec 0c             	sub    esp,0xc
c0024d6b:	53                   	push   ebx
c0024d6c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024d6f:	83 c4 10             	add    esp,0x10
c0024d72:	83 ec 0c             	sub    esp,0xc
c0024d75:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0024d7a:	50                   	push   eax
c0024d7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024d7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024d83:	57                   	push   edi
c0024d84:	68 7f 36 03 c0       	push   0xc003367f
c0024d89:	e8 30 47 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0024d8e:	83 c4 20             	add    esp,0x20
c0024d91:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0024d96:	75 0a                	jne    c0024da2 <Thr::loadDLL(char const*, bool)+0xda>
c0024d98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d9c:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0024da0:	75 3e                	jne    c0024de0 <Thr::loadDLL(char const*, bool)+0x118>
c0024da2:	89 e8                	mov    eax,ebp
c0024da4:	31 db                	xor    ebx,ebx
c0024da6:	84 c0                	test   al,al
c0024da8:	0f 84 6e 01 00 00    	je     c0024f1c <Thr::loadDLL(char const*, bool)+0x254>
c0024dae:	50                   	push   eax
c0024daf:	50                   	push   eax
c0024db0:	68 a0 36 03 c0       	push   0xc00336a0
c0024db5:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0024db9:	53                   	push   ebx
c0024dba:	e8 91 b8 fd ff       	call   c0000650 <strcpy>
c0024dbf:	58                   	pop    eax
c0024dc0:	5a                   	pop    edx
c0024dc1:	56                   	push   esi
c0024dc2:	53                   	push   ebx
c0024dc3:	e8 a8 ba fd ff       	call   c0000870 <strcat>
c0024dc8:	59                   	pop    ecx
c0024dc9:	5f                   	pop    edi
c0024dca:	68 7d 36 03 c0       	push   0xc003367d
c0024dcf:	53                   	push   ebx
c0024dd0:	e8 9b ba fd ff       	call   c0000870 <strcat>
c0024dd5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024dd8:	e8 25 b9 ff ff       	call   c0020702 <KePanic(char const*)>
c0024ddd:	83 c4 10             	add    esp,0x10
c0024de0:	53                   	push   ebx
c0024de1:	6a 03                	push   0x3
c0024de3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024de7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024deb:	05 ff 0f 00 00       	add    eax,0xfff
c0024df0:	83 d2 00             	adc    edx,0x0
c0024df3:	0f ac d0 0c          	shrd   eax,edx,0xc
c0024df7:	50                   	push   eax
c0024df8:	ff 35 b0 ba 03 c0    	push   DWORD PTR ds:0xc003bab0
c0024dfe:	e8 b7 3b ff ff       	call   c00189ba <VAS::allocatePages(int, int)>
c0024e03:	89 c3                	mov    ebx,eax
c0024e05:	58                   	pop    eax
c0024e06:	5a                   	pop    edx
c0024e07:	53                   	push   ebx
c0024e08:	68 76 1a 03 c0       	push   0xc0031a76
c0024e0d:	e8 ac 46 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0024e12:	89 34 24             	mov    DWORD PTR [esp],esi
c0024e15:	e8 66 b7 fd ff       	call   c0000580 <strlen>
c0024e1a:	8b 3d 00 0a 04 c0    	mov    edi,DWORD PTR ds:0xc0040a00
c0024e20:	40                   	inc    eax
c0024e21:	89 04 24             	mov    DWORD PTR [esp],eax
c0024e24:	e8 5f 18 ff ff       	call   c0016688 <malloc>
c0024e29:	59                   	pop    ecx
c0024e2a:	89 04 bd 20 0e 04 c0 	mov    DWORD PTR [edi*4-0x3ffbf1e0],eax
c0024e31:	a1 00 0a 04 c0       	mov    eax,ds:0xc0040a00
c0024e36:	5f                   	pop    edi
c0024e37:	56                   	push   esi
c0024e38:	ff 34 85 20 0e 04 c0 	push   DWORD PTR [eax*4-0x3ffbf1e0]
c0024e3f:	e8 0c b8 fd ff       	call   c0000650 <strcpy>
c0024e44:	a1 00 0a 04 c0       	mov    eax,ds:0xc0040a00
c0024e49:	89 1c 85 20 0c 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf3e0],ebx
c0024e50:	8d 50 01             	lea    edx,[eax+0x1]
c0024e53:	89 15 00 0a 04 c0    	mov    DWORD PTR ds:0xc0040a00,edx
c0024e59:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0024e5d:	83 c4 0c             	add    esp,0xc
c0024e60:	6a 01                	push   0x1
c0024e62:	53                   	push   ebx
c0024e63:	56                   	push   esi
c0024e64:	89 14 85 20 0a 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf5e0],edx
c0024e6b:	e8 94 f6 ff ff       	call   c0024504 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0024e70:	83 c4 10             	add    esp,0x10
c0024e73:	89 c7                	mov    edi,eax
c0024e75:	89 f8                	mov    eax,edi
c0024e77:	83 f0 01             	xor    eax,0x1
c0024e7a:	84 c0                	test   al,al
c0024e7c:	74 18                	je     c0024e96 <Thr::loadDLL(char const*, bool)+0x1ce>
c0024e7e:	89 e8                	mov    eax,ebp
c0024e80:	84 c0                	test   al,al
c0024e82:	74 12                	je     c0024e96 <Thr::loadDLL(char const*, bool)+0x1ce>
c0024e84:	83 ec 0c             	sub    esp,0xc
c0024e87:	68 b9 36 03 c0       	push   0xc00336b9
c0024e8c:	e8 71 b8 ff ff       	call   c0020702 <KePanic(char const*)>
c0024e91:	83 c4 10             	add    esp,0x10
c0024e94:	eb 06                	jmp    c0024e9c <Thr::loadDLL(char const*, bool)+0x1d4>
c0024e96:	89 f8                	mov    eax,edi
c0024e98:	84 c0                	test   al,al
c0024e9a:	75 10                	jne    c0024eac <Thr::loadDLL(char const*, bool)+0x1e4>
c0024e9c:	83 ec 0c             	sub    esp,0xc
c0024e9f:	68 d8 36 03 c0       	push   0xc00336d8
c0024ea4:	e8 59 b8 ff ff       	call   c0020702 <KePanic(char const*)>
c0024ea9:	83 c4 10             	add    esp,0x10
c0024eac:	31 f6                	xor    esi,esi
c0024eae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024eb2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024eb6:	05 ff 0f 00 00       	add    eax,0xfff
c0024ebb:	83 d2 00             	adc    edx,0x0
c0024ebe:	0f ac d0 0c          	shrd   eax,edx,0xc
c0024ec2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024ec6:	c1 ea 0c             	shr    edx,0xc
c0024ec9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024ecd:	ba 00 00 00 00       	mov    edx,0x0
c0024ed2:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0024ed6:	89 d0                	mov    eax,edx
c0024ed8:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0024edc:	73 32                	jae    c0024f10 <Thr::loadDLL(char const*, bool)+0x248>
c0024ede:	50                   	push   eax
c0024edf:	50                   	push   eax
c0024ee0:	89 f0                	mov    eax,esi
c0024ee2:	c1 e0 0c             	shl    eax,0xc
c0024ee5:	01 d8                	add    eax,ebx
c0024ee7:	50                   	push   eax
c0024ee8:	ff 35 b0 ba 03 c0    	push   DWORD PTR ds:0xc003bab0
c0024eee:	e8 ab 35 ff ff       	call   c001849e <VAS::getPageTableEntry(unsigned long)>
c0024ef3:	83 c4 10             	add    esp,0x10
c0024ef6:	8b 00                	mov    eax,DWORD PTR [eax]
c0024ef8:	a8 60                	test   al,0x60
c0024efa:	75 11                	jne    c0024f0d <Thr::loadDLL(char const*, bool)+0x245>
c0024efc:	83 ec 0c             	sub    esp,0xc
c0024eff:	25 00 f0 ff ff       	and    eax,0xfffff000
c0024f04:	50                   	push   eax
c0024f05:	e8 24 1a ff ff       	call   c001692e <Phys::freePage(unsigned long)>
c0024f0a:	83 c4 10             	add    esp,0x10
c0024f0d:	46                   	inc    esi
c0024f0e:	eb 9e                	jmp    c0024eae <Thr::loadDLL(char const*, bool)+0x1e6>
c0024f10:	89 f8                	mov    eax,edi
c0024f12:	84 c0                	test   al,al
c0024f14:	b8 00 00 00 00       	mov    eax,0x0
c0024f19:	0f 44 d8             	cmove  ebx,eax
c0024f1c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0024f22:	89 d8                	mov    eax,ebx
c0024f24:	5b                   	pop    ebx
c0024f25:	5e                   	pop    esi
c0024f26:	5f                   	pop    edi
c0024f27:	5d                   	pop    ebp
c0024f28:	c3                   	ret    

c0024f29 <Thr::executeDLL(unsigned long, void*)>:
c0024f29:	56                   	push   esi
c0024f2a:	53                   	push   ebx
c0024f2b:	52                   	push   edx
c0024f2c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024f30:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0024f34:	85 db                	test   ebx,ebx
c0024f36:	75 10                	jne    c0024f48 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0024f38:	83 ec 0c             	sub    esp,0xc
c0024f3b:	68 f4 36 03 c0       	push   0xc00336f4
c0024f40:	e8 bd b7 ff ff       	call   c0020702 <KePanic(char const*)>
c0024f45:	83 c4 10             	add    esp,0x10
c0024f48:	50                   	push   eax
c0024f49:	50                   	push   eax
c0024f4a:	53                   	push   ebx
c0024f4b:	68 1e 37 03 c0       	push   0xc003371e
c0024f50:	e8 69 45 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0024f55:	89 d8                	mov    eax,ebx
c0024f57:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0024f5b:	83 c4 14             	add    esp,0x14
c0024f5e:	5b                   	pop    ebx
c0024f5f:	5e                   	pop    esi
c0024f60:	ff e0                	jmp    eax
c0024f62:	66 90                	xchg   ax,ax

c0024f64 <userModeEntryPoint(void*)>:
c0024f64:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0024f69:	83 e8 01             	sub    eax,0x1
c0024f6c:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0024f71:	75 01                	jne    c0024f74 <userModeEntryPoint(void*)+0x10>
c0024f73:	fb                   	sti    
c0024f74:	fb                   	sti    
c0024f75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024f7a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0024f7d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0024f83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024f87:	e9 b3 b2 fd ff       	jmp    c000023f <goToUsermode>

c0024f8c <changeTSS>:
c0024f8c:	83 ec 14             	sub    esp,0x14
c0024f8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024f94:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0024f97:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0024f9c:	c1 e2 15             	shl    edx,0x15
c0024f9f:	29 d0                	sub    eax,edx
c0024fa1:	50                   	push   eax
c0024fa2:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0024fa7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024fad:	05 7c 11 00 00       	add    eax,0x117c
c0024fb2:	50                   	push   eax
c0024fb3:	e8 38 2b ff ff       	call   c0017af0 <TSS::setESP(unsigned long)>
c0024fb8:	83 c4 1c             	add    esp,0x1c
c0024fbb:	c3                   	ret    

c0024fbc <switchToThread(ThreadControlBlock*)>:
c0024fbc:	57                   	push   edi
c0024fbd:	8b 0d cc 11 04 c0    	mov    ecx,DWORD PTR ds:0xc00411cc
c0024fc3:	56                   	push   esi
c0024fc4:	53                   	push   ebx
c0024fc5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024fc9:	85 c9                	test   ecx,ecx
c0024fcb:	0f 85 8b 00 00 00    	jne    c002505c <switchToThread(ThreadControlBlock*)+0xa0>
c0024fd1:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0024fd5:	81 fa ff 00 00 00    	cmp    edx,0xff
c0024fdb:	74 7b                	je     c0025058 <switchToThread(ThreadControlBlock*)+0x9c>
c0024fdd:	b8 00 04 00 00       	mov    eax,0x400
c0024fe2:	29 d0                	sub    eax,edx
c0024fe4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0024fe7:	d1 f8                	sar    eax,1
c0024fe9:	01 d0                	add    eax,edx
c0024feb:	90                   	nop
c0024fec:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0024fef:	e8 49 25 00 00       	call   c002753d <HalQueryPerformanceCounter()>
c0024ff4:	a3 10 12 04 c0       	mov    ds:0xc0041210,eax
c0024ff9:	89 c6                	mov    esi,eax
c0024ffb:	89 d7                	mov    edi,edx
c0024ffd:	2b 35 00 12 04 c0    	sub    esi,DWORD PTR ds:0xc0041200
c0025003:	a3 00 12 04 c0       	mov    ds:0xc0041200,eax
c0025008:	1b 3d 04 12 04 c0    	sbb    edi,DWORD PTR ds:0xc0041204
c002500e:	89 35 08 12 04 c0    	mov    DWORD PTR ds:0xc0041208,esi
c0025014:	89 15 14 12 04 c0    	mov    DWORD PTR ds:0xc0041214,edx
c002501a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0025020:	89 15 04 12 04 c0    	mov    DWORD PTR ds:0xc0041204,edx
c0025026:	89 3d 0c 12 04 c0    	mov    DWORD PTR ds:0xc004120c,edi
c002502c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c002502f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0025032:	01 c6                	add    esi,eax
c0025034:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0025037:	11 d7                	adc    edi,edx
c0025039:	83 ec 0c             	sub    esp,0xc
c002503c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c002503f:	53                   	push   ebx
c0025040:	e8 32 b2 fd ff       	call   c0000277 <switchToThreadASM>
c0025045:	0f 20 c0             	mov    eax,cr0
c0025048:	83 c8 08             	or     eax,0x8
c002504b:	0f 22 c0             	mov    cr0,eax
c002504e:	83 c4 10             	add    esp,0x10
c0025051:	5b                   	pop    ebx
c0025052:	5e                   	pop    esi
c0025053:	5f                   	pop    edi
c0025054:	c3                   	ret    
c0025055:	8d 76 00             	lea    esi,[esi+0x0]
c0025058:	31 c0                	xor    eax,eax
c002505a:	eb 90                	jmp    c0024fec <switchToThread(ThreadControlBlock*)+0x30>
c002505c:	5b                   	pop    ebx
c002505d:	c7 05 c8 11 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x1
c0025067:	5e                   	pop    esi
c0025068:	5f                   	pop    edi
c0025069:	c3                   	ret    
c002506a:	66 90                	xchg   ax,ax

c002506c <Process::addArgs(char**)>:
c002506c:	57                   	push   edi
c002506d:	56                   	push   esi
c002506e:	53                   	push   ebx
c002506f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0025073:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0025077:	85 f6                	test   esi,esi
c0025079:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c0025083:	74 4f                	je     c00250d4 <Process::addArgs(char**)+0x68>
c0025085:	8b 06                	mov    eax,DWORD PTR [esi]
c0025087:	85 c0                	test   eax,eax
c0025089:	74 49                	je     c00250d4 <Process::addArgs(char**)+0x68>
c002508b:	31 db                	xor    ebx,ebx
c002508d:	8d 76 00             	lea    esi,[esi+0x0]
c0025090:	83 ec 0c             	sub    esp,0xc
c0025093:	50                   	push   eax
c0025094:	e8 e7 b4 fd ff       	call   c0000580 <strlen>
c0025099:	83 c0 01             	add    eax,0x1
c002509c:	89 04 24             	mov    DWORD PTR [esp],eax
c002509f:	e8 e4 15 ff ff       	call   c0016688 <malloc>
c00250a4:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c00250ab:	5a                   	pop    edx
c00250ac:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c00250af:	83 c3 01             	add    ebx,0x1
c00250b2:	59                   	pop    ecx
c00250b3:	52                   	push   edx
c00250b4:	50                   	push   eax
c00250b5:	e8 96 b5 fd ff       	call   c0000650 <strcpy>
c00250ba:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c00250c0:	83 c4 10             	add    esp,0x10
c00250c3:	83 c1 01             	add    ecx,0x1
c00250c6:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c00250cc:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00250cf:	85 c0                	test   eax,eax
c00250d1:	75 bd                	jne    c0025090 <Process::addArgs(char**)+0x24>
c00250d3:	90                   	nop
c00250d4:	5b                   	pop    ebx
c00250d5:	5e                   	pop    esi
c00250d6:	5f                   	pop    edi
c00250d7:	c3                   	ret    

c00250d8 <Process::Process(char const*, Process*, char**)>:
c00250d8:	56                   	push   esi
c00250d9:	53                   	push   ebx
c00250da:	83 ec 14             	sub    esp,0x14
c00250dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00250e1:	05 0c 02 00 00       	add    eax,0x20c
c00250e6:	bb 07 00 00 00       	mov    ebx,0x7
c00250eb:	89 c6                	mov    esi,eax
c00250ed:	8d 76 00             	lea    esi,[esi+0x0]
c00250f0:	85 db                	test   ebx,ebx
c00250f2:	78 14                	js     c0025108 <Process::Process(char const*, Process*, char**)+0x30>
c00250f4:	83 ec 0c             	sub    esp,0xc
c00250f7:	56                   	push   esi
c00250f8:	e8 cb a6 00 00       	call   c002f7c8 <ThreadControlBlock::ThreadControlBlock()>
c00250fd:	83 c4 10             	add    esp,0x10
c0025100:	83 c6 5f             	add    esi,0x5f
c0025103:	83 eb 01             	sub    ebx,0x1
c0025106:	eb e8                	jmp    c00250f0 <Process::Process(char const*, Process*, char**)+0x18>
c0025108:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002510c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0025113:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025117:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c002511e:	83 ec 0c             	sub    esp,0xc
c0025121:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025125:	e8 ce b1 ff ff       	call   c00202f8 <KeNewProcessEnv(Process*)>
c002512a:	83 c4 10             	add    esp,0x10
c002512d:	89 c2                	mov    edx,eax
c002512f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025133:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0025139:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002513d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0025146:	a1 c0 4d 03 c0       	mov    eax,ds:0xc0034dc0
c002514b:	8d 50 01             	lea    edx,[eax+0x1]
c002514e:	89 15 c0 4d 03 c0    	mov    DWORD PTR ds:0xc0034dc0,edx
c0025154:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0025158:	89 02                	mov    DWORD PTR [edx],eax
c002515a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0025162:	83 ec 0c             	sub    esp,0xc
c0025165:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025169:	e8 1a 15 ff ff       	call   c0016688 <malloc>
c002516e:	83 c4 10             	add    esp,0x10
c0025171:	89 c3                	mov    ebx,eax
c0025173:	83 ec 08             	sub    esp,0x8
c0025176:	6a 00                	push   0x0
c0025178:	53                   	push   ebx
c0025179:	e8 88 3a ff ff       	call   c0018c06 <VAS::VAS(bool)>
c002517e:	83 c4 10             	add    esp,0x10
c0025181:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025185:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c002518b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002518f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0025199:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002519d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00251a1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00251a7:	e8 83 bd ff ff       	call   c0020f2f <KeInitSignals()>
c00251ac:	89 c2                	mov    edx,eax
c00251ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00251b2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00251b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00251bc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00251c2:	85 c0                	test   eax,eax
c00251c4:	74 42                	je     c0025208 <Process::Process(char const*, Process*, char**)+0x130>
c00251c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00251ca:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00251d0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00251d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00251da:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00251e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00251e4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00251ea:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00251f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00251f4:	05 0c 01 00 00       	add    eax,0x10c
c00251f9:	83 ec 08             	sub    esp,0x8
c00251fc:	52                   	push   edx
c00251fd:	50                   	push   eax
c00251fe:	e8 4d b4 fd ff       	call   c0000650 <strcpy>
c0025203:	83 c4 10             	add    esp,0x10
c0025206:	eb 64                	jmp    c002526c <Process::Process(char const*, Process*, char**)+0x194>
c0025208:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0025210:	83 ec 0c             	sub    esp,0xc
c0025213:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025217:	e8 6c 14 ff ff       	call   c0016688 <malloc>
c002521c:	83 c4 10             	add    esp,0x10
c002521f:	89 c3                	mov    ebx,eax
c0025221:	83 ec 08             	sub    esp,0x8
c0025224:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025228:	53                   	push   ebx
c0025229:	e8 f2 25 ff ff       	call   c0017820 <VgaText::VgaText(char const*)>
c002522e:	83 c4 10             	add    esp,0x10
c0025231:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025235:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c002523b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002523f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0025245:	83 ec 0c             	sub    esp,0xc
c0025248:	50                   	push   eax
c0025249:	e8 80 1e ff ff       	call   c00170ce <addToTerminalCycle(VgaText*)>
c002524e:	83 c4 10             	add    esp,0x10
c0025251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025255:	05 0c 01 00 00       	add    eax,0x10c
c002525a:	83 ec 08             	sub    esp,0x8
c002525d:	68 3d 37 03 c0       	push   0xc003373d
c0025262:	50                   	push   eax
c0025263:	e8 e8 b3 fd ff       	call   c0000650 <strcpy>
c0025268:	83 c4 10             	add    esp,0x10
c002526b:	90                   	nop
c002526c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025270:	83 c0 0c             	add    eax,0xc
c0025273:	83 ec 08             	sub    esp,0x8
c0025276:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002527a:	50                   	push   eax
c002527b:	e8 d0 b3 fd ff       	call   c0000650 <strcpy>
c0025280:	83 c4 10             	add    esp,0x10
c0025283:	83 ec 08             	sub    esp,0x8
c0025286:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002528a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002528e:	e8 d9 fd ff ff       	call   c002506c <Process::addArgs(char**)>
c0025293:	83 c4 10             	add    esp,0x10
c0025296:	83 ec 08             	sub    esp,0x8
c0025299:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002529d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00252a1:	e8 1f ed ff ff       	call   c0023fc5 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00252a6:	83 c4 10             	add    esp,0x10
c00252a9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00252ad:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00252b1:	83 f0 01             	xor    eax,0x1
c00252b4:	88 c2                	mov    dl,al
c00252b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00252ba:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00252c0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00252c5:	83 ec 04             	sub    esp,0x4
c00252c8:	50                   	push   eax
c00252c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00252cd:	68 94 37 03 c0       	push   0xc0033794
c00252d2:	e8 e7 41 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c00252d7:	83 c4 10             	add    esp,0x10
c00252da:	90                   	nop
c00252db:	83 c4 14             	add    esp,0x14
c00252de:	5b                   	pop    ebx
c00252df:	5e                   	pop    esi
c00252e0:	c3                   	ret    
c00252e1:	90                   	nop
c00252e2:	66 90                	xchg   ax,ax

c00252e4 <Process::Process(bool, char const*, Process*, char**)>:
c00252e4:	56                   	push   esi
c00252e5:	53                   	push   ebx
c00252e6:	83 ec 24             	sub    esp,0x24
c00252e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00252ed:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00252f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00252f5:	05 0c 02 00 00       	add    eax,0x20c
c00252fa:	bb 07 00 00 00       	mov    ebx,0x7
c00252ff:	89 c6                	mov    esi,eax
c0025301:	8d 76 00             	lea    esi,[esi+0x0]
c0025304:	85 db                	test   ebx,ebx
c0025306:	78 14                	js     c002531c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0025308:	83 ec 0c             	sub    esp,0xc
c002530b:	56                   	push   esi
c002530c:	e8 b7 a4 00 00       	call   c002f7c8 <ThreadControlBlock::ThreadControlBlock()>
c0025311:	83 c4 10             	add    esp,0x10
c0025314:	83 c6 5f             	add    esi,0x5f
c0025317:	83 eb 01             	sub    ebx,0x1
c002531a:	eb e8                	jmp    c0025304 <Process::Process(bool, char const*, Process*, char**)+0x20>
c002531c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025320:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0025327:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002532b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0025332:	83 ec 0c             	sub    esp,0xc
c0025335:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025339:	e8 ba af ff ff       	call   c00202f8 <KeNewProcessEnv(Process*)>
c002533e:	83 c4 10             	add    esp,0x10
c0025341:	89 c2                	mov    edx,eax
c0025343:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025347:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c002534d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025351:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c002535a:	a1 c0 4d 03 c0       	mov    eax,ds:0xc0034dc0
c002535f:	8d 50 01             	lea    edx,[eax+0x1]
c0025362:	89 15 c0 4d 03 c0    	mov    DWORD PTR ds:0xc0034dc0,edx
c0025368:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002536c:	89 02                	mov    DWORD PTR [edx],eax
c002536e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0025376:	83 ec 0c             	sub    esp,0xc
c0025379:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002537d:	e8 06 13 ff ff       	call   c0016688 <malloc>
c0025382:	83 c4 10             	add    esp,0x10
c0025385:	89 c3                	mov    ebx,eax
c0025387:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002538c:	83 ec 08             	sub    esp,0x8
c002538f:	50                   	push   eax
c0025390:	53                   	push   ebx
c0025391:	e8 70 38 ff ff       	call   c0018c06 <VAS::VAS(bool)>
c0025396:	83 c4 10             	add    esp,0x10
c0025399:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002539d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00253a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00253a7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00253b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00253b5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00253b9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00253bf:	e8 6b bb ff ff       	call   c0020f2f <KeInitSignals()>
c00253c4:	89 c2                	mov    edx,eax
c00253c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00253ca:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00253d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00253d4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00253da:	85 c0                	test   eax,eax
c00253dc:	74 42                	je     c0025420 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c00253de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00253e2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00253e8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00253ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00253f2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00253f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00253fc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0025402:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0025408:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002540c:	05 0c 01 00 00       	add    eax,0x10c
c0025411:	83 ec 08             	sub    esp,0x8
c0025414:	52                   	push   edx
c0025415:	50                   	push   eax
c0025416:	e8 35 b2 fd ff       	call   c0000650 <strcpy>
c002541b:	83 c4 10             	add    esp,0x10
c002541e:	eb 64                	jmp    c0025484 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0025420:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0025428:	83 ec 0c             	sub    esp,0xc
c002542b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002542f:	e8 54 12 ff ff       	call   c0016688 <malloc>
c0025434:	83 c4 10             	add    esp,0x10
c0025437:	89 c3                	mov    ebx,eax
c0025439:	83 ec 08             	sub    esp,0x8
c002543c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025440:	53                   	push   ebx
c0025441:	e8 da 23 ff ff       	call   c0017820 <VgaText::VgaText(char const*)>
c0025446:	83 c4 10             	add    esp,0x10
c0025449:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002544d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0025453:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025457:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002545d:	83 ec 0c             	sub    esp,0xc
c0025460:	50                   	push   eax
c0025461:	e8 68 1c ff ff       	call   c00170ce <addToTerminalCycle(VgaText*)>
c0025466:	83 c4 10             	add    esp,0x10
c0025469:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002546d:	05 0c 01 00 00       	add    eax,0x10c
c0025472:	83 ec 08             	sub    esp,0x8
c0025475:	68 3d 37 03 c0       	push   0xc003373d
c002547a:	50                   	push   eax
c002547b:	e8 d0 b1 fd ff       	call   c0000650 <strcpy>
c0025480:	83 c4 10             	add    esp,0x10
c0025483:	90                   	nop
c0025484:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025488:	83 c0 0c             	add    eax,0xc
c002548b:	83 ec 08             	sub    esp,0x8
c002548e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025492:	50                   	push   eax
c0025493:	e8 b8 b1 fd ff       	call   c0000650 <strcpy>
c0025498:	83 c4 10             	add    esp,0x10
c002549b:	83 ec 08             	sub    esp,0x8
c002549e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00254a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00254a6:	e8 c1 fb ff ff       	call   c002506c <Process::addArgs(char**)>
c00254ab:	83 c4 10             	add    esp,0x10
c00254ae:	90                   	nop
c00254af:	83 c4 24             	add    esp,0x24
c00254b2:	5b                   	pop    ebx
c00254b3:	5e                   	pop    esi
c00254b4:	c3                   	ret    
c00254b5:	8d 76 00             	lea    esi,[esi+0x0]

c00254b8 <taskStartupFunction>:
c00254b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00254bd:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00254c0:	c3                   	ret    
c00254c1:	8d 76 00             	lea    esi,[esi+0x0]

c00254c4 <KeDisablePreemption()>:
c00254c4:	a1 ac 11 04 c0       	mov    eax,ds:0xc00411ac
c00254c9:	85 c0                	test   eax,eax
c00254cb:	75 13                	jne    c00254e0 <KeDisablePreemption()+0x1c>
c00254cd:	8a 15 c0 b9 03 c0    	mov    dl,BYTE PTR ds:0xc003b9c0
c00254d3:	c6 05 c0 b9 03 c0 00 	mov    BYTE PTR ds:0xc003b9c0,0x0
c00254da:	88 15 a8 11 04 c0    	mov    BYTE PTR ds:0xc00411a8,dl
c00254e0:	83 c0 01             	add    eax,0x1
c00254e3:	a3 ac 11 04 c0       	mov    ds:0xc00411ac,eax
c00254e8:	c3                   	ret    
c00254e9:	8d 76 00             	lea    esi,[esi+0x0]

c00254ec <KeRestorePreemption()>:
c00254ec:	a1 ac 11 04 c0       	mov    eax,ds:0xc00411ac
c00254f1:	83 e8 01             	sub    eax,0x1
c00254f4:	a3 ac 11 04 c0       	mov    ds:0xc00411ac,eax
c00254f9:	75 0d                	jne    c0025508 <KeRestorePreemption()+0x1c>
c00254fb:	a0 a8 11 04 c0       	mov    al,ds:0xc00411a8
c0025500:	a2 c0 b9 03 c0       	mov    ds:0xc003b9c0,al
c0025505:	8d 76 00             	lea    esi,[esi+0x0]
c0025508:	c3                   	ret    
c0025509:	90                   	nop
c002550a:	66 90                	xchg   ax,ax

c002550c <Process::createThread(void (*)(void*), void*, int)>:
c002550c:	57                   	push   edi
c002550d:	31 c9                	xor    ecx,ecx
c002550f:	56                   	push   esi
c0025510:	53                   	push   ebx
c0025511:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025515:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c002551c:	89 f2                	mov    edx,esi
c002551e:	66 90                	xchg   ax,ax
c0025520:	0f b7 c2             	movzx  eax,dx
c0025523:	80 e2 01             	and    dl,0x1
c0025526:	74 14                	je     c002553c <Process::createThread(void (*)(void*), void*, int)+0x30>
c0025528:	d1 f8                	sar    eax,1
c002552a:	83 c1 01             	add    ecx,0x1
c002552d:	83 f9 10             	cmp    ecx,0x10
c0025530:	89 c2                	mov    edx,eax
c0025532:	75 ec                	jne    c0025520 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0025534:	31 db                	xor    ebx,ebx
c0025536:	89 d8                	mov    eax,ebx
c0025538:	5b                   	pop    ebx
c0025539:	5e                   	pop    esi
c002553a:	5f                   	pop    edi
c002553b:	c3                   	ret    
c002553c:	b8 01 00 00 00       	mov    eax,0x1
c0025541:	d3 e0                	shl    eax,cl
c0025543:	09 c6                	or     esi,eax
c0025545:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c002554c:	8d 04 49             	lea    eax,[ecx+ecx*2]
c002554f:	c1 e0 05             	shl    eax,0x5
c0025552:	29 c8                	sub    eax,ecx
c0025554:	01 d8                	add    eax,ebx
c0025556:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c002555d:	75 0d                	jne    c002556c <Process::createThread(void (*)(void*), void*, int)+0x60>
c002555f:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0025569:	8d 76 00             	lea    esi,[esi+0x0]
c002556c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0025572:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0025575:	83 ec 0c             	sub    esp,0xc
c0025578:	c1 e6 05             	shl    esi,0x5
c002557b:	29 ce                	sub    esi,ecx
c002557d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0025580:	8d 04 33             	lea    eax,[ebx+esi*1]
c0025583:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0025589:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c002558f:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0025595:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c002559c:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00255a2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00255a6:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00255ac:	89 ca                	mov    edx,ecx
c00255ae:	f7 da                	neg    edx
c00255b0:	c1 e2 15             	shl    edx,0x15
c00255b3:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00255b9:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00255bf:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00255c3:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00255cd:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00255d3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00255d7:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00255dd:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00255e7:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00255f1:	68 00 01 00 00       	push   0x100
c00255f6:	e8 8d 10 ff ff       	call   c0016688 <malloc>
c00255fb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c00255fe:	58                   	pop    eax
c00255ff:	5a                   	pop    edx
c0025600:	53                   	push   ebx
c0025601:	68 ec 11 04 c0       	push   0xc00411ec
c0025606:	e8 55 9f 00 00       	call   c002f560 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002560b:	83 c4 10             	add    esp,0x10
c002560e:	89 d8                	mov    eax,ebx
c0025610:	5b                   	pop    ebx
c0025611:	5e                   	pop    esi
c0025612:	5f                   	pop    edi
c0025613:	c3                   	ret    

c0025614 <Process::createUserThread()>:
c0025614:	83 ec 0c             	sub    esp,0xc
c0025617:	68 80 00 00 00       	push   0x80
c002561c:	6a 00                	push   0x0
c002561e:	68 64 4f 02 c0       	push   0xc0024f64
c0025623:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025627:	50                   	push   eax
c0025628:	e8 df fe ff ff       	call   c002550c <Process::createThread(void (*)(void*), void*, int)>
c002562d:	83 c4 1c             	add    esp,0x1c
c0025630:	c3                   	ret    
c0025631:	8d 76 00             	lea    esi,[esi+0x0]

c0025634 <setupMultitasking(void (*)())>:
c0025634:	56                   	push   esi
c0025635:	53                   	push   ebx
c0025636:	83 ec 04             	sub    esp,0x4
c0025639:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002563d:	eb 11                	jmp    c0025650 <setupMultitasking(void (*)())+0x1c>
c002563f:	90                   	nop
c0025640:	83 ec 0c             	sub    esp,0xc
c0025643:	68 ec 11 04 c0       	push   0xc00411ec
c0025648:	e8 57 9e 00 00       	call   c002f4a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c002564d:	83 c4 10             	add    esp,0x10
c0025650:	83 ec 0c             	sub    esp,0xc
c0025653:	68 ec 11 04 c0       	push   0xc00411ec
c0025658:	e8 23 9e 00 00       	call   c002f480 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c002565d:	83 c4 10             	add    esp,0x10
c0025660:	84 c0                	test   al,al
c0025662:	74 dc                	je     c0025640 <setupMultitasking(void (*)())+0xc>
c0025664:	83 ec 0c             	sub    esp,0xc
c0025667:	68 24 07 00 00       	push   0x724
c002566c:	e8 17 10 ff ff       	call   c0016688 <malloc>
c0025671:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0025678:	6a 00                	push   0x0
c002567a:	68 41 37 03 c0       	push   0xc0033741
c002567f:	6a 01                	push   0x1
c0025681:	50                   	push   eax
c0025682:	89 c3                	mov    ebx,eax
c0025684:	e8 5b fc ff ff       	call   c00252e4 <Process::Process(bool, char const*, Process*, char**)>
c0025689:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c002568f:	83 c4 14             	add    esp,0x14
c0025692:	89 1d f8 11 04 c0    	mov    DWORD PTR ds:0xc00411f8,ebx
c0025698:	50                   	push   eax
c0025699:	e8 85 1c ff ff       	call   c0017323 <setActiveTerminal(VgaText*)>
c002569e:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00256a5:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00256af:	83 c8 01             	or     eax,0x1
c00256b2:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00256b9:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00256bf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00256c2:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00256cc:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00256d2:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00256dc:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00256e2:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00256ec:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00256f6:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00256fc:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0025702:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c002570c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0025716:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c002571d:	e8 66 0f ff ff       	call   c0016688 <malloc>
c0025722:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0025728:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c002572e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0025734:	5a                   	pop    edx
c0025735:	59                   	pop    ecx
c0025736:	68 3d 37 03 c0       	push   0xc003373d
c002573b:	50                   	push   eax
c002573c:	e8 0f af fd ff       	call   c0000650 <strcpy>
c0025741:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0025748:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c002574c:	83 c4 14             	add    esp,0x14
c002574f:	5b                   	pop    ebx
c0025750:	5e                   	pop    esi
c0025751:	e9 13 ab fd ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0025756:	66 90                	xchg   ax,ax

c0025758 <schedule()>:
c0025758:	8b 15 cc 11 04 c0    	mov    edx,DWORD PTR ds:0xc00411cc
c002575e:	85 d2                	test   edx,edx
c0025760:	74 0e                	je     c0025770 <schedule()+0x18>
c0025762:	c7 05 c8 11 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x1
c002576c:	c3                   	ret    
c002576d:	8d 76 00             	lea    esi,[esi+0x0]
c0025770:	53                   	push   ebx
c0025771:	83 ec 14             	sub    esp,0x14
c0025774:	68 ec 11 04 c0       	push   0xc00411ec
c0025779:	e8 02 9d 00 00       	call   c002f480 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c002577e:	83 c4 10             	add    esp,0x10
c0025781:	84 c0                	test   al,al
c0025783:	75 3f                	jne    c00257c4 <schedule()+0x6c>
c0025785:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002578a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002578d:	83 fa 01             	cmp    edx,0x1
c0025790:	74 3a                	je     c00257cc <schedule()+0x74>
c0025792:	66 90                	xchg   ax,ax
c0025794:	83 ec 0c             	sub    esp,0xc
c0025797:	68 ec 11 04 c0       	push   0xc00411ec
c002579c:	e8 fb 9c 00 00       	call   c002f49c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00257a1:	c7 04 24 ec 11 04 c0 	mov    DWORD PTR [esp],0xc00411ec
c00257a8:	89 c3                	mov    ebx,eax
c00257aa:	e8 f5 9c 00 00       	call   c002f4a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00257af:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00257b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00257b9:	e8 fe f7 ff ff       	call   c0024fbc <switchToThread(ThreadControlBlock*)>
c00257be:	83 c4 10             	add    esp,0x10
c00257c1:	8d 76 00             	lea    esi,[esi+0x0]
c00257c4:	83 c4 08             	add    esp,0x8
c00257c7:	5b                   	pop    ebx
c00257c8:	c3                   	ret    
c00257c9:	8d 76 00             	lea    esi,[esi+0x0]
c00257cc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00257d3:	83 ec 08             	sub    esp,0x8
c00257d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00257db:	50                   	push   eax
c00257dc:	68 ec 11 04 c0       	push   0xc00411ec
c00257e1:	e8 7a 9d 00 00       	call   c002f560 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00257e6:	83 c4 10             	add    esp,0x10
c00257e9:	eb a9                	jmp    c0025794 <schedule()+0x3c>
c00257eb:	90                   	nop

c00257ec <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00257ec:	83 ec 0c             	sub    esp,0xc
c00257ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00257f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00257f8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00257fb:	e8 58 ff ff ff       	call   c0025758 <schedule()>
c0025800:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025805:	83 e8 01             	sub    eax,0x1
c0025808:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c002580d:	75 01                	jne    c0025810 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c002580f:	fb                   	sti    
c0025810:	83 c4 0c             	add    esp,0xc
c0025813:	c3                   	ret    

c0025814 <blockTask(TaskState)>:
c0025814:	83 ec 0c             	sub    esp,0xc
c0025817:	fa                   	cli    
c0025818:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002581d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025821:	83 c0 01             	add    eax,0x1
c0025824:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025829:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002582e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0025831:	e8 22 ff ff ff       	call   c0025758 <schedule()>
c0025836:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002583b:	83 e8 01             	sub    eax,0x1
c002583e:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025843:	75 03                	jne    c0025848 <blockTask(TaskState)+0x34>
c0025845:	fb                   	sti    
c0025846:	66 90                	xchg   ax,ax
c0025848:	83 c4 0c             	add    esp,0xc
c002584b:	c3                   	ret    

c002584c <waitTask(int, int*, int)>:
c002584c:	83 ec 18             	sub    esp,0x18
c002584f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025854:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025858:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c002585b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002585f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025864:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0025867:	6a 07                	push   0x7
c0025869:	e8 a6 ff ff ff       	call   c0025814 <blockTask(TaskState)>
c002586e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025873:	83 c4 10             	add    esp,0x10
c0025876:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0025879:	85 d2                	test   edx,edx
c002587b:	74 0b                	je     c0025888 <waitTask(int, int*, int)+0x3c>
c002587d:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0025880:	89 02                	mov    DWORD PTR [edx],eax
c0025882:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025887:	90                   	nop
c0025888:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c002588b:	83 c4 0c             	add    esp,0xc
c002588e:	c3                   	ret    
c002588f:	90                   	nop

c0025890 <milliTenthSleepUntil(unsigned int)>:
c0025890:	83 ec 0c             	sub    esp,0xc
c0025893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025897:	39 05 ec 03 04 c0    	cmp    DWORD PTR ds:0xc00403ec,eax
c002589d:	76 05                	jbe    c00258a4 <milliTenthSleepUntil(unsigned int)+0x14>
c002589f:	90                   	nop
c00258a0:	83 c4 0c             	add    esp,0xc
c00258a3:	c3                   	ret    
c00258a4:	fa                   	cli    
c00258a5:	8b 15 d0 11 04 c0    	mov    edx,DWORD PTR ds:0xc00411d0
c00258ab:	83 ec 08             	sub    esp,0x8
c00258ae:	8b 0d cc 11 04 c0    	mov    ecx,DWORD PTR ds:0xc00411cc
c00258b4:	83 c2 01             	add    edx,0x1
c00258b7:	89 15 d0 11 04 c0    	mov    DWORD PTR ds:0xc00411d0,edx
c00258bd:	83 c1 01             	add    ecx,0x1
c00258c0:	89 0d cc 11 04 c0    	mov    DWORD PTR ds:0xc00411cc,ecx
c00258c6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00258cc:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00258cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00258d4:	50                   	push   eax
c00258d5:	68 e0 11 04 c0       	push   0xc00411e0
c00258da:	e8 81 9c 00 00       	call   c002f560 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00258df:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00258e6:	e8 29 ff ff ff       	call   c0025814 <blockTask(TaskState)>
c00258eb:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c00258f0:	83 c4 10             	add    esp,0x10
c00258f3:	83 e8 01             	sub    eax,0x1
c00258f6:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c00258fb:	85 c0                	test   eax,eax
c00258fd:	75 09                	jne    c0025908 <milliTenthSleepUntil(unsigned int)+0x78>
c00258ff:	a1 c8 11 04 c0       	mov    eax,ds:0xc00411c8
c0025904:	85 c0                	test   eax,eax
c0025906:	75 14                	jne    c002591c <milliTenthSleepUntil(unsigned int)+0x8c>
c0025908:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002590d:	83 e8 01             	sub    eax,0x1
c0025910:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025915:	75 89                	jne    c00258a0 <milliTenthSleepUntil(unsigned int)+0x10>
c0025917:	fb                   	sti    
c0025918:	83 c4 0c             	add    esp,0xc
c002591b:	c3                   	ret    
c002591c:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c0025926:	e8 2d fe ff ff       	call   c0025758 <schedule()>
c002592b:	eb db                	jmp    c0025908 <milliTenthSleepUntil(unsigned int)+0x78>
c002592d:	8d 76 00             	lea    esi,[esi+0x0]

c0025930 <milliTenthSleep(unsigned int)>:
c0025930:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025934:	a1 ec 03 04 c0       	mov    eax,ds:0xc00403ec
c0025939:	01 c2                	add    edx,eax
c002593b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002593f:	e9 4c ff ff ff       	jmp    c0025890 <milliTenthSleepUntil(unsigned int)>

c0025944 <sleep(unsigned int)>:
c0025944:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c002594c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0025950:	eb de                	jmp    c0025930 <milliTenthSleep(unsigned int)>
c0025952:	66 90                	xchg   ax,ax

c0025954 <taskReturned>:
c0025954:	83 ec 18             	sub    esp,0x18
c0025957:	68 c0 37 03 c0       	push   0xc00337c0
c002595c:	e8 a1 ad ff ff       	call   c0020702 <KePanic(char const*)>
c0025961:	83 c4 10             	add    esp,0x10
c0025964:	83 ec 0c             	sub    esp,0xc
c0025967:	6a 02                	push   0x2
c0025969:	e8 a6 fe ff ff       	call   c0025814 <blockTask(TaskState)>
c002596e:	fa                   	cli    
c002596f:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025974:	83 c0 01             	add    eax,0x1
c0025977:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c002597c:	e8 d7 fd ff ff       	call   c0025758 <schedule()>
c0025981:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025986:	83 c4 10             	add    esp,0x10
c0025989:	83 e8 01             	sub    eax,0x1
c002598c:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025991:	85 c0                	test   eax,eax
c0025993:	75 cf                	jne    c0025964 <taskReturned+0x10>
c0025995:	fb                   	sti    
c0025996:	eb cc                	jmp    c0025964 <taskReturned+0x10>

c0025998 <Thr::processFromPID(int)>:
c0025998:	57                   	push   edi
c0025999:	56                   	push   esi
c002599a:	53                   	push   ebx
c002599b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002599f:	fa                   	cli    
c00259a0:	8b 0d d0 11 04 c0    	mov    ecx,DWORD PTR ds:0xc00411d0
c00259a6:	83 ec 0c             	sub    esp,0xc
c00259a9:	68 ec 11 04 c0       	push   0xc00411ec
c00259ae:	83 c1 01             	add    ecx,0x1
c00259b1:	89 0d d0 11 04 c0    	mov    DWORD PTR ds:0xc00411d0,ecx
c00259b7:	e8 e0 9a 00 00       	call   c002f49c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00259bc:	83 c4 10             	add    esp,0x10
c00259bf:	89 c7                	mov    edi,eax
c00259c1:	eb 15                	jmp    c00259d8 <Thr::processFromPID(int)+0x40>
c00259c3:	90                   	nop
c00259c4:	83 ec 0c             	sub    esp,0xc
c00259c7:	68 ec 11 04 c0       	push   0xc00411ec
c00259cc:	e8 cb 9a 00 00       	call   c002f49c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00259d1:	83 c4 10             	add    esp,0x10
c00259d4:	39 f8                	cmp    eax,edi
c00259d6:	74 50                	je     c0025a28 <Thr::processFromPID(int)+0x90>
c00259d8:	83 ec 0c             	sub    esp,0xc
c00259db:	68 ec 11 04 c0       	push   0xc00411ec
c00259e0:	e8 b7 9a 00 00       	call   c002f49c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00259e5:	c7 04 24 ec 11 04 c0 	mov    DWORD PTR [esp],0xc00411ec
c00259ec:	89 c3                	mov    ebx,eax
c00259ee:	e8 b1 9a 00 00       	call   c002f4a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00259f3:	58                   	pop    eax
c00259f4:	5a                   	pop    edx
c00259f5:	53                   	push   ebx
c00259f6:	68 ec 11 04 c0       	push   0xc00411ec
c00259fb:	e8 60 9b 00 00       	call   c002f560 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025a00:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025a03:	83 c4 10             	add    esp,0x10
c0025a06:	39 30                	cmp    DWORD PTR [eax],esi
c0025a08:	75 ba                	jne    c00259c4 <Thr::processFromPID(int)+0x2c>
c0025a0a:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025a0f:	83 e8 01             	sub    eax,0x1
c0025a12:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025a17:	74 0b                	je     c0025a24 <Thr::processFromPID(int)+0x8c>
c0025a19:	8d 76 00             	lea    esi,[esi+0x0]
c0025a1c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025a1f:	90                   	nop
c0025a20:	5b                   	pop    ebx
c0025a21:	5e                   	pop    esi
c0025a22:	5f                   	pop    edi
c0025a23:	c3                   	ret    
c0025a24:	fb                   	sti    
c0025a25:	eb f5                	jmp    c0025a1c <Thr::processFromPID(int)+0x84>
c0025a27:	90                   	nop
c0025a28:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025a2d:	8d 50 ff             	lea    edx,[eax-0x1]
c0025a30:	31 c0                	xor    eax,eax
c0025a32:	89 15 d0 11 04 c0    	mov    DWORD PTR ds:0xc00411d0,edx
c0025a38:	85 d2                	test   edx,edx
c0025a3a:	75 e4                	jne    c0025a20 <Thr::processFromPID(int)+0x88>
c0025a3c:	fb                   	sti    
c0025a3d:	5b                   	pop    ebx
c0025a3e:	5e                   	pop    esi
c0025a3f:	5f                   	pop    edi
c0025a40:	c3                   	ret    
c0025a41:	8d 76 00             	lea    esi,[esi+0x0]

c0025a44 <unblockTask(ThreadControlBlock*)>:
c0025a44:	53                   	push   ebx
c0025a45:	83 ec 08             	sub    esp,0x8
c0025a48:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025a4c:	fa                   	cli    
c0025a4d:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025a52:	83 c0 01             	add    eax,0x1
c0025a55:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025a5a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0025a5d:	85 c0                	test   eax,eax
c0025a5f:	74 67                	je     c0025ac8 <unblockTask(ThreadControlBlock*)+0x84>
c0025a61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0025a64:	83 f8 01             	cmp    eax,0x1
c0025a67:	74 37                	je     c0025aa0 <unblockTask(ThreadControlBlock*)+0x5c>
c0025a69:	83 ec 0c             	sub    esp,0xc
c0025a6c:	68 ec 11 04 c0       	push   0xc00411ec
c0025a71:	e8 26 9a 00 00       	call   c002f49c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025a76:	83 c4 10             	add    esp,0x10
c0025a79:	85 c0                	test   eax,eax
c0025a7b:	75 1b                	jne    c0025a98 <unblockTask(ThreadControlBlock*)+0x54>
c0025a7d:	eb 5d                	jmp    c0025adc <unblockTask(ThreadControlBlock*)+0x98>
c0025a7f:	90                   	nop
c0025a80:	83 ec 08             	sub    esp,0x8
c0025a83:	50                   	push   eax
c0025a84:	68 ec 11 04 c0       	push   0xc00411ec
c0025a89:	e8 2e 9d 00 00       	call   c002f7bc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0025a8e:	83 c4 10             	add    esp,0x10
c0025a91:	85 c0                	test   eax,eax
c0025a93:	74 47                	je     c0025adc <unblockTask(ThreadControlBlock*)+0x98>
c0025a95:	8d 76 00             	lea    esi,[esi+0x0]
c0025a98:	39 c3                	cmp    ebx,eax
c0025a9a:	75 e4                	jne    c0025a80 <unblockTask(ThreadControlBlock*)+0x3c>
c0025a9c:	eb 12                	jmp    c0025ab0 <unblockTask(ThreadControlBlock*)+0x6c>
c0025a9e:	66 90                	xchg   ax,ax
c0025aa0:	83 ec 0c             	sub    esp,0xc
c0025aa3:	68 5f 37 03 c0       	push   0xc003375f
c0025aa8:	e8 11 3a ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0025aad:	83 c4 10             	add    esp,0x10
c0025ab0:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025ab5:	83 e8 01             	sub    eax,0x1
c0025ab8:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025abd:	75 01                	jne    c0025ac0 <unblockTask(ThreadControlBlock*)+0x7c>
c0025abf:	fb                   	sti    
c0025ac0:	83 c4 08             	add    esp,0x8
c0025ac3:	5b                   	pop    ebx
c0025ac4:	c3                   	ret    
c0025ac5:	8d 76 00             	lea    esi,[esi+0x0]
c0025ac8:	83 ec 0c             	sub    esp,0xc
c0025acb:	68 48 37 03 c0       	push   0xc0033748
c0025ad0:	e8 e9 39 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0025ad5:	83 c4 10             	add    esp,0x10
c0025ad8:	eb d6                	jmp    c0025ab0 <unblockTask(ThreadControlBlock*)+0x6c>
c0025ada:	66 90                	xchg   ax,ax
c0025adc:	83 ec 08             	sub    esp,0x8
c0025adf:	53                   	push   ebx
c0025ae0:	68 ec 11 04 c0       	push   0xc00411ec
c0025ae5:	e8 76 9a 00 00       	call   c002f560 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025aea:	83 c4 10             	add    esp,0x10
c0025aed:	eb c1                	jmp    c0025ab0 <unblockTask(ThreadControlBlock*)+0x6c>
c0025aef:	90                   	nop

c0025af0 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0025af0:	55                   	push   ebp
c0025af1:	57                   	push   edi
c0025af2:	56                   	push   esi
c0025af3:	53                   	push   ebx
c0025af4:	83 ec 1c             	sub    esp,0x1c
c0025af7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0025afb:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025afe:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0025b04:	85 ed                	test   ebp,ebp
c0025b06:	7e 28                	jle    c0025b30 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0025b08:	31 f6                	xor    esi,esi
c0025b0a:	66 90                	xchg   ax,ax
c0025b0c:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0025b13:	83 ec 0c             	sub    esp,0xc
c0025b16:	83 c6 01             	add    esi,0x1
c0025b19:	57                   	push   edi
c0025b1a:	e8 79 0b ff ff       	call   c0016698 <free>
c0025b1f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025b22:	83 c4 10             	add    esp,0x10
c0025b25:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0025b2b:	7f df                	jg     c0025b0c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0025b2d:	8d 76 00             	lea    esi,[esi+0x0]
c0025b30:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0025b3a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0025b3f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0025b42:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0025b45:	d3 c0                	rol    eax,cl
c0025b47:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0025b4e:	21 c8                	and    eax,ecx
c0025b50:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0025b57:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025b5a:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0025b62:	89 f7                	mov    edi,esi
c0025b64:	0f 85 72 01 00 00    	jne    c0025cdc <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0025b6a:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0025b70:	85 ed                	test   ebp,ebp
c0025b72:	74 1c                	je     c0025b90 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0025b74:	83 ec 0c             	sub    esp,0xc
c0025b77:	55                   	push   ebp
c0025b78:	e8 97 a6 ff ff       	call   c0020214 <EnvVarContainer::~EnvVarContainer()>
c0025b7d:	59                   	pop    ecx
c0025b7e:	5e                   	pop    esi
c0025b7f:	6a 0c                	push   0xc
c0025b81:	55                   	push   ebp
c0025b82:	e8 39 38 ff ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c0025b87:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025b8a:	83 c4 10             	add    esp,0x10
c0025b8d:	89 f7                	mov    edi,esi
c0025b8f:	90                   	nop
c0025b90:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0025b96:	85 c0                	test   eax,eax
c0025b98:	0f 84 b2 00 00 00    	je     c0025c50 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0025b9e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0025ba1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025ba5:	31 c9                	xor    ecx,ecx
c0025ba7:	eb 17                	jmp    c0025bc0 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0025ba9:	8d 76 00             	lea    esi,[esi+0x0]
c0025bac:	83 c1 01             	add    ecx,0x1
c0025baf:	83 f9 10             	cmp    ecx,0x10
c0025bb2:	0f 84 98 00 00 00    	je     c0025c50 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0025bb8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0025bbe:	66 90                	xchg   ax,ax
c0025bc0:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0025bc7:	d3 fa                	sar    edx,cl
c0025bc9:	80 e2 01             	and    dl,0x1
c0025bcc:	74 de                	je     c0025bac <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025bce:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0025bd1:	c1 e2 05             	shl    edx,0x5
c0025bd4:	29 ca                	sub    edx,ecx
c0025bd6:	01 d0                	add    eax,edx
c0025bd8:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0025bde:	83 fd 07             	cmp    ebp,0x7
c0025be1:	75 c9                	jne    c0025bac <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025be3:	05 40 02 00 00       	add    eax,0x240
c0025be8:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0025beb:	83 fd ff             	cmp    ebp,0xffffffff
c0025bee:	0f 8c f0 00 00 00    	jl     c0025ce4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0025bf4:	0f 84 ae 01 00 00    	je     c0025da8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0025bfa:	85 ed                	test   ebp,ebp
c0025bfc:	0f 84 92 01 00 00    	je     c0025d94 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0025c02:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0025c04:	75 a6                	jne    c0025bac <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025c06:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025c0a:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0025c10:	01 d0                	add    eax,edx
c0025c12:	66 90                	xchg   ax,ax
c0025c14:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0025c18:	83 ec 0c             	sub    esp,0xc
c0025c1b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0025c21:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025c24:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0025c2a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0025c31:	50                   	push   eax
c0025c32:	e8 0d fe ff ff       	call   c0025a44 <unblockTask(ThreadControlBlock*)>
c0025c37:	83 c4 10             	add    esp,0x10
c0025c3a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025c3d:	89 f7                	mov    edi,esi
c0025c3f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025c43:	83 c1 01             	add    ecx,0x1
c0025c46:	83 f9 10             	cmp    ecx,0x10
c0025c49:	0f 85 69 ff ff ff    	jne    c0025bb8 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0025c4f:	90                   	nop
c0025c50:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0025c56:	85 c0                	test   eax,eax
c0025c58:	74 62                	je     c0025cbc <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0025c5a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0025c60:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0025c66:	74 54                	je     c0025cbc <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0025c68:	83 ec 0c             	sub    esp,0xc
c0025c6b:	68 ec 11 04 c0       	push   0xc00411ec
c0025c70:	e8 27 98 00 00       	call   c002f49c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025c75:	c7 04 24 ec 11 04 c0 	mov    DWORD PTR [esp],0xc00411ec
c0025c7c:	89 c7                	mov    edi,eax
c0025c7e:	e8 fd 97 00 00       	call   c002f480 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025c83:	83 c4 10             	add    esp,0x10
c0025c86:	84 c0                	test   al,al
c0025c88:	0f 84 ce 00 00 00    	je     c0025d5c <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0025c8e:	66 90                	xchg   ax,ax
c0025c90:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025c93:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0025c99:	85 d2                	test   edx,edx
c0025c9b:	74 0f                	je     c0025cac <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0025c9d:	8b 02                	mov    eax,DWORD PTR [edx]
c0025c9f:	83 ec 0c             	sub    esp,0xc
c0025ca2:	52                   	push   edx
c0025ca3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0025ca6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025ca9:	83 c4 10             	add    esp,0x10
c0025cac:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0025cb6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0025cb9:	8d 76 00             	lea    esi,[esi+0x0]
c0025cbc:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0025cc2:	85 db                	test   ebx,ebx
c0025cc4:	74 16                	je     c0025cdc <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0025cc6:	83 ec 0c             	sub    esp,0xc
c0025cc9:	53                   	push   ebx
c0025cca:	e8 75 2a ff ff       	call   c0018744 <VAS::~VAS()>
c0025ccf:	58                   	pop    eax
c0025cd0:	5a                   	pop    edx
c0025cd1:	6a 14                	push   0x14
c0025cd3:	53                   	push   ebx
c0025cd4:	e8 e7 36 ff ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c0025cd9:	83 c4 10             	add    esp,0x10
c0025cdc:	83 c4 1c             	add    esp,0x1c
c0025cdf:	5b                   	pop    ebx
c0025ce0:	5e                   	pop    esi
c0025ce1:	5f                   	pop    edi
c0025ce2:	5d                   	pop    ebp
c0025ce3:	c3                   	ret    
c0025ce4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025ce8:	83 ec 0c             	sub    esp,0xc
c0025ceb:	68 f4 37 03 c0       	push   0xc00337f4
c0025cf0:	e8 0d aa ff ff       	call   c0020702 <KePanic(char const*)>
c0025cf5:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025cf8:	83 c4 10             	add    esp,0x10
c0025cfb:	89 f7                	mov    edi,esi
c0025cfd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025d01:	e9 a6 fe ff ff       	jmp    c0025bac <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025d06:	66 90                	xchg   ax,ax
c0025d08:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0025d0e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0025d14:	75 1e                	jne    c0025d34 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025d16:	83 ec 0c             	sub    esp,0xc
c0025d19:	68 5c 38 03 c0       	push   0xc003385c
c0025d1e:	e8 9b 37 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0025d23:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0025d2a:	e8 e5 fa ff ff       	call   c0025814 <blockTask(TaskState)>
c0025d2f:	83 c4 10             	add    esp,0x10
c0025d32:	66 90                	xchg   ax,ax
c0025d34:	83 ec 08             	sub    esp,0x8
c0025d37:	56                   	push   esi
c0025d38:	68 ec 11 04 c0       	push   0xc00411ec
c0025d3d:	e8 1e 98 00 00       	call   c002f560 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025d42:	c7 04 24 ec 11 04 c0 	mov    DWORD PTR [esp],0xc00411ec
c0025d49:	e8 4e 97 00 00       	call   c002f49c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025d4e:	83 c4 10             	add    esp,0x10
c0025d51:	39 f8                	cmp    eax,edi
c0025d53:	0f 84 37 ff ff ff    	je     c0025c90 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0025d59:	8d 76 00             	lea    esi,[esi+0x0]
c0025d5c:	83 ec 0c             	sub    esp,0xc
c0025d5f:	68 ec 11 04 c0       	push   0xc00411ec
c0025d64:	e8 33 97 00 00       	call   c002f49c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025d69:	c7 04 24 ec 11 04 c0 	mov    DWORD PTR [esp],0xc00411ec
c0025d70:	89 c6                	mov    esi,eax
c0025d72:	e8 2d 97 00 00       	call   c002f4a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025d77:	83 c4 10             	add    esp,0x10
c0025d7a:	39 f3                	cmp    ebx,esi
c0025d7c:	74 b6                	je     c0025d34 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025d7e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0025d81:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025d84:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0025d8a:	75 a8                	jne    c0025d34 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025d8c:	e9 77 ff ff ff       	jmp    c0025d08 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0025d91:	8d 76 00             	lea    esi,[esi+0x0]
c0025d94:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025d98:	83 ec 0c             	sub    esp,0xc
c0025d9b:	68 28 38 03 c0       	push   0xc0033828
c0025da0:	e9 4b ff ff ff       	jmp    c0025cf0 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0025da5:	8d 76 00             	lea    esi,[esi+0x0]
c0025da8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025dac:	8b 36                	mov    esi,DWORD PTR [esi]
c0025dae:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0025db1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025db4:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0025dba:	01 d7                	add    edi,edx
c0025dbc:	89 f8                	mov    eax,edi
c0025dbe:	e9 51 fe ff ff       	jmp    c0025c14 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0025dc3:	90                   	nop

c0025dc4 <cleanerTaskFunction(void*)>:
c0025dc4:	53                   	push   ebx
c0025dc5:	83 ec 08             	sub    esp,0x8
c0025dc8:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025dcd:	83 e8 01             	sub    eax,0x1
c0025dd0:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025dd5:	75 01                	jne    c0025dd8 <cleanerTaskFunction(void*)+0x14>
c0025dd7:	fb                   	sti    
c0025dd8:	fa                   	cli    
c0025dd9:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025dde:	80 3d b4 11 04 c0 00 	cmp    BYTE PTR ds:0xc00411b4,0x0
c0025de5:	8d 50 01             	lea    edx,[eax+0x1]
c0025de8:	89 15 d0 11 04 c0    	mov    DWORD PTR ds:0xc00411d0,edx
c0025dee:	0f 84 c4 00 00 00    	je     c0025eb8 <cleanerTaskFunction(void*)+0xf4>
c0025df4:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025df9:	85 c0                	test   eax,eax
c0025dfb:	75 03                	jne    c0025e00 <cleanerTaskFunction(void*)+0x3c>
c0025dfd:	fb                   	sti    
c0025dfe:	66 90                	xchg   ax,ax
c0025e00:	c6 05 b4 11 04 c0 00 	mov    BYTE PTR ds:0xc00411b4,0x0
c0025e07:	fa                   	cli    
c0025e08:	8b 15 d0 11 04 c0    	mov    edx,DWORD PTR ds:0xc00411d0
c0025e0e:	8b 0d cc 11 04 c0    	mov    ecx,DWORD PTR ds:0xc00411cc
c0025e14:	83 c2 01             	add    edx,0x1
c0025e17:	89 15 d0 11 04 c0    	mov    DWORD PTR ds:0xc00411d0,edx
c0025e1d:	83 c1 01             	add    ecx,0x1
c0025e20:	89 0d cc 11 04 c0    	mov    DWORD PTR ds:0xc00411cc,ecx
c0025e26:	fa                   	cli    
c0025e27:	8b 1d d0 11 04 c0    	mov    ebx,DWORD PTR ds:0xc00411d0
c0025e2d:	83 c3 01             	add    ebx,0x1
c0025e30:	89 1d d0 11 04 c0    	mov    DWORD PTR ds:0xc00411d0,ebx
c0025e36:	eb 28                	jmp    c0025e60 <cleanerTaskFunction(void*)+0x9c>
c0025e38:	83 ec 0c             	sub    esp,0xc
c0025e3b:	68 d4 11 04 c0       	push   0xc00411d4
c0025e40:	e8 57 96 00 00       	call   c002f49c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025e45:	c7 04 24 d4 11 04 c0 	mov    DWORD PTR [esp],0xc00411d4
c0025e4c:	89 c3                	mov    ebx,eax
c0025e4e:	e8 51 96 00 00       	call   c002f4a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025e53:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025e56:	e8 95 fc ff ff       	call   c0025af0 <cleanupTerminatedTask(ThreadControlBlock*)>
c0025e5b:	83 c4 10             	add    esp,0x10
c0025e5e:	66 90                	xchg   ax,ax
c0025e60:	83 ec 0c             	sub    esp,0xc
c0025e63:	68 d4 11 04 c0       	push   0xc00411d4
c0025e68:	e8 13 96 00 00       	call   c002f480 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025e6d:	83 c4 10             	add    esp,0x10
c0025e70:	84 c0                	test   al,al
c0025e72:	74 c4                	je     c0025e38 <cleanerTaskFunction(void*)+0x74>
c0025e74:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025e79:	83 e8 01             	sub    eax,0x1
c0025e7c:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025e81:	75 01                	jne    c0025e84 <cleanerTaskFunction(void*)+0xc0>
c0025e83:	fb                   	sti    
c0025e84:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0025e89:	83 e8 01             	sub    eax,0x1
c0025e8c:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0025e91:	0f 85 31 ff ff ff    	jne    c0025dc8 <cleanerTaskFunction(void*)+0x4>
c0025e97:	a1 c8 11 04 c0       	mov    eax,ds:0xc00411c8
c0025e9c:	85 c0                	test   eax,eax
c0025e9e:	0f 84 24 ff ff ff    	je     c0025dc8 <cleanerTaskFunction(void*)+0x4>
c0025ea4:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c0025eae:	e8 a5 f8 ff ff       	call   c0025758 <schedule()>
c0025eb3:	e9 10 ff ff ff       	jmp    c0025dc8 <cleanerTaskFunction(void*)+0x4>
c0025eb8:	83 ec 0c             	sub    esp,0xc
c0025ebb:	6a 02                	push   0x2
c0025ebd:	e8 2a f9 ff ff       	call   c00257ec <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025ec2:	83 c4 10             	add    esp,0x10
c0025ec5:	e9 36 ff ff ff       	jmp    c0025e00 <cleanerTaskFunction(void*)+0x3c>
c0025eca:	66 90                	xchg   ax,ax

c0025ecc <terminateTask(int)>:
c0025ecc:	83 ec 14             	sub    esp,0x14
c0025ecf:	fa                   	cli    
c0025ed0:	8b 15 d0 11 04 c0    	mov    edx,DWORD PTR ds:0xc00411d0
c0025ed6:	8b 0d cc 11 04 c0    	mov    ecx,DWORD PTR ds:0xc00411cc
c0025edc:	83 c2 01             	add    edx,0x1
c0025edf:	89 15 d0 11 04 c0    	mov    DWORD PTR ds:0xc00411d0,edx
c0025ee5:	83 c1 01             	add    ecx,0x1
c0025ee8:	89 0d cc 11 04 c0    	mov    DWORD PTR ds:0xc00411cc,ecx
c0025eee:	fa                   	cli    
c0025eef:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025ef4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025ef8:	83 c0 01             	add    eax,0x1
c0025efb:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025f00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025f05:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0025f08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025f0d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0025f10:	50                   	push   eax
c0025f11:	68 d4 11 04 c0       	push   0xc00411d4
c0025f16:	e8 45 96 00 00       	call   c002f560 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025f1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025f20:	83 c4 10             	add    esp,0x10
c0025f23:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0025f2a:	a1 b0 11 04 c0       	mov    eax,ds:0xc00411b0
c0025f2f:	85 c0                	test   eax,eax
c0025f31:	74 65                	je     c0025f98 <terminateTask(int)+0xcc>
c0025f33:	c6 05 b4 11 04 c0 01 	mov    BYTE PTR ds:0xc00411b4,0x1
c0025f3a:	83 ec 0c             	sub    esp,0xc
c0025f3d:	50                   	push   eax
c0025f3e:	e8 01 fb ff ff       	call   c0025a44 <unblockTask(ThreadControlBlock*)>
c0025f43:	83 c4 10             	add    esp,0x10
c0025f46:	66 90                	xchg   ax,ax
c0025f48:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025f4d:	83 e8 01             	sub    eax,0x1
c0025f50:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025f55:	75 01                	jne    c0025f58 <terminateTask(int)+0x8c>
c0025f57:	fb                   	sti    
c0025f58:	a1 cc 11 04 c0       	mov    eax,ds:0xc00411cc
c0025f5d:	83 e8 01             	sub    eax,0x1
c0025f60:	a3 cc 11 04 c0       	mov    ds:0xc00411cc,eax
c0025f65:	75 09                	jne    c0025f70 <terminateTask(int)+0xa4>
c0025f67:	83 3d c8 11 04 c0 00 	cmp    DWORD PTR ds:0xc00411c8,0x0
c0025f6e:	75 3c                	jne    c0025fac <terminateTask(int)+0xe0>
c0025f70:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025f75:	83 e8 01             	sub    eax,0x1
c0025f78:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025f7d:	75 01                	jne    c0025f80 <terminateTask(int)+0xb4>
c0025f7f:	fb                   	sti    
c0025f80:	fa                   	cli    
c0025f81:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0025f86:	83 c0 01             	add    eax,0x1
c0025f89:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0025f8e:	66 90                	xchg   ax,ax
c0025f90:	e8 c3 f7 ff ff       	call   c0025758 <schedule()>
c0025f95:	eb d9                	jmp    c0025f70 <terminateTask(int)+0xa4>
c0025f97:	90                   	nop
c0025f98:	83 ec 0c             	sub    esp,0xc
c0025f9b:	68 76 37 03 c0       	push   0xc0033776
c0025fa0:	e8 19 35 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0025fa5:	83 c4 10             	add    esp,0x10
c0025fa8:	eb 9e                	jmp    c0025f48 <terminateTask(int)+0x7c>
c0025faa:	66 90                	xchg   ax,ax
c0025fac:	c7 05 c8 11 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00411c8,0x0
c0025fb6:	eb d8                	jmp    c0025f90 <terminateTask(int)+0xc4>

c0025fb8 <Thr::terminateFromIRQ(int)>:
c0025fb8:	83 ec 18             	sub    esp,0x18
c0025fbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025fbf:	50                   	push   eax
c0025fc0:	e8 07 ff ff ff       	call   c0025ecc <terminateTask(int)>
c0025fc5:	8d 76 00             	lea    esi,[esi+0x0]

c0025fc8 <__static_initialization_and_destruction_0(int, int)>:
c0025fc8:	83 ec 0c             	sub    esp,0xc
c0025fcb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0025fd0:	0f 85 8e 00 00 00    	jne    c0026064 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0025fd6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0025fde:	0f 85 80 00 00 00    	jne    c0026064 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0025fe4:	83 ec 0c             	sub    esp,0xc
c0025fe7:	68 ec 11 04 c0       	push   0xc00411ec
c0025fec:	e8 23 98 00 00       	call   c002f814 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025ff1:	83 c4 10             	add    esp,0x10
c0025ff4:	83 ec 04             	sub    esp,0x4
c0025ff7:	68 cc 44 03 c0       	push   0xc00344cc
c0025ffc:	68 ec 11 04 c0       	push   0xc00411ec
c0026001:	68 c4 f7 02 c0       	push   0xc002f7c4
c0026006:	e8 65 33 ff ff       	call   c0019370 <__cxa_atexit>
c002600b:	83 c4 10             	add    esp,0x10
c002600e:	83 ec 0c             	sub    esp,0xc
c0026011:	68 e0 11 04 c0       	push   0xc00411e0
c0026016:	e8 f9 97 00 00       	call   c002f814 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c002601b:	83 c4 10             	add    esp,0x10
c002601e:	83 ec 04             	sub    esp,0x4
c0026021:	68 cc 44 03 c0       	push   0xc00344cc
c0026026:	68 e0 11 04 c0       	push   0xc00411e0
c002602b:	68 c4 f7 02 c0       	push   0xc002f7c4
c0026030:	e8 3b 33 ff ff       	call   c0019370 <__cxa_atexit>
c0026035:	83 c4 10             	add    esp,0x10
c0026038:	83 ec 0c             	sub    esp,0xc
c002603b:	68 d4 11 04 c0       	push   0xc00411d4
c0026040:	e8 cf 97 00 00       	call   c002f814 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0026045:	83 c4 10             	add    esp,0x10
c0026048:	83 ec 04             	sub    esp,0x4
c002604b:	68 cc 44 03 c0       	push   0xc00344cc
c0026050:	68 d4 11 04 c0       	push   0xc00411d4
c0026055:	68 c4 f7 02 c0       	push   0xc002f7c4
c002605a:	e8 11 33 ff ff       	call   c0019370 <__cxa_atexit>
c002605f:	83 c4 10             	add    esp,0x10
c0026062:	66 90                	xchg   ax,ax
c0026064:	90                   	nop
c0026065:	83 c4 0c             	add    esp,0xc
c0026068:	c3                   	ret    
c0026069:	8d 76 00             	lea    esi,[esi+0x0]

c002606c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c002606c:	83 ec 0c             	sub    esp,0xc
c002606f:	83 ec 08             	sub    esp,0x8
c0026072:	68 ff ff 00 00       	push   0xffff
c0026077:	6a 01                	push   0x1
c0026079:	e8 4a ff ff ff       	call   c0025fc8 <__static_initialization_and_destruction_0(int, int)>
c002607e:	83 c4 10             	add    esp,0x10
c0026081:	83 c4 0c             	add    esp,0xc
c0026084:	c3                   	ret    

c0026085 <Vm::inbv(unsigned short)>:
c0026085:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026089:	66 81 fa fe fe       	cmp    dx,0xfefe
c002608e:	75 06                	jne    c0026096 <Vm::inbv(unsigned short)+0x11>
c0026090:	a0 30 12 04 c0       	mov    al,ds:0xc0041230
c0026095:	c3                   	ret    
c0026096:	ec                   	in     al,dx
c0026097:	c3                   	ret    

c0026098 <Vm::outbv(unsigned short, unsigned char)>:
c0026098:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002609c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00260a0:	66 81 fa fe fe       	cmp    dx,0xfefe
c00260a5:	75 25                	jne    c00260cc <Vm::outbv(unsigned short, unsigned char)+0x34>
c00260a7:	8b 0d 30 12 04 c0    	mov    ecx,DWORD PTR ds:0xc0041230
c00260ad:	88 81 40 12 04 c0    	mov    BYTE PTR [ecx-0x3ffbedc0],al
c00260b3:	8d 51 01             	lea    edx,[ecx+0x1]
c00260b6:	89 15 30 12 04 c0    	mov    DWORD PTR ds:0xc0041230,edx
c00260bc:	83 fa 20             	cmp    edx,0x20
c00260bf:	75 0c                	jne    c00260cd <Vm::outbv(unsigned short, unsigned char)+0x35>
c00260c1:	c7 05 30 12 04 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0041230,0x1f
c00260cb:	c3                   	ret    
c00260cc:	ee                   	out    dx,al
c00260cd:	c3                   	ret    

c00260ce <Vm::realToLinear(unsigned short, unsigned short)>:
c00260ce:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00260d3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00260d8:	c1 e0 04             	shl    eax,0x4
c00260db:	01 d0                	add    eax,edx
c00260dd:	c3                   	ret    

c00260de <Vm::getSegment(unsigned int)>:
c00260de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00260e2:	c1 e8 10             	shr    eax,0x10
c00260e5:	c3                   	ret    

c00260e6 <Vm::getOffset(unsigned int)>:
c00260e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00260ea:	c3                   	ret    

c00260eb <Vm::mainloop2()>:
c00260eb:	83 ec 18             	sub    esp,0x18
c00260ee:	fa                   	cli    
c00260ef:	6a 02                	push   0x2
c00260f1:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c00260f7:	c6 05 29 12 04 c0 01 	mov    BYTE PTR ds:0xc0041229,0x1
c00260fe:	e8 e9 f6 ff ff       	call   c00257ec <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0026103:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026108:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c002610c:	52                   	push   edx
c002610d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0026111:	52                   	push   edx
c0026112:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0026116:	52                   	push   edx
c0026117:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c002611b:	50                   	push   eax
c002611c:	e8 ee a0 fd ff       	call   c000020f <goToVM86>
c0026121:	83 c4 2c             	add    esp,0x2c
c0026124:	c3                   	ret    

c0026125 <Vm::mainVm8086Loop(void*)>:
c0026125:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002612a:	48                   	dec    eax
c002612b:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0026130:	75 01                	jne    c0026133 <Vm::mainVm8086Loop(void*)+0xe>
c0026132:	fb                   	sti    
c0026133:	eb b6                	jmp    c00260eb <Vm::mainloop2()>

c0026135 <Vm::mainloop3(unsigned long)>:
c0026135:	83 ec 18             	sub    esp,0x18
c0026138:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002613c:	fa                   	cli    
c002613d:	6a 02                	push   0x2
c002613f:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c0026145:	c6 05 28 12 04 c0 01 	mov    BYTE PTR ds:0xc0041228,0x1
c002614c:	a3 24 12 04 c0       	mov    ds:0xc0041224,eax
c0026151:	e8 96 f6 ff ff       	call   c00257ec <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0026156:	83 c4 1c             	add    esp,0x1c
c0026159:	eb 90                	jmp    c00260eb <Vm::mainloop2()>

c002615b <Vm::initialise8086()>:
c002615b:	83 ec 0c             	sub    esp,0xc
c002615e:	68 80 00 00 00       	push   0x80
c0026163:	6a 00                	push   0x0
c0026165:	68 25 61 02 c0       	push   0xc0026125
c002616a:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c0026170:	e8 97 f3 ff ff       	call   c002550c <Process::createThread(void (*)(void*), void*, int)>
c0026175:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c002617c:	68 10 01 00 00       	push   0x110
c0026181:	6a 00                	push   0x0
c0026183:	6a 00                	push   0x0
c0026185:	a3 2c 12 04 c0       	mov    ds:0xc004122c,eax
c002618a:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c002618f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0026195:	e8 22 29 ff ff       	call   c0018abc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002619a:	83 c4 2c             	add    esp,0x2c
c002619d:	c3                   	ret    

c002619e <Vm::resetConventionalMemory8086()>:
c002619e:	c3                   	ret    

c002619f <Vm::finish8086()>:
c002619f:	53                   	push   ebx
c00261a0:	83 ec 08             	sub    esp,0x8
c00261a3:	fa                   	cli    
c00261a4:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c00261aa:	80 3d 28 12 04 c0 00 	cmp    BYTE PTR ds:0xc0041228,0x0
c00261b1:	75 15                	jne    c00261c8 <Vm::finish8086()+0x29>
c00261b3:	e8 a0 f5 ff ff       	call   c0025758 <schedule()>
c00261b8:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00261bd:	48                   	dec    eax
c00261be:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00261c3:	75 de                	jne    c00261a3 <Vm::finish8086()+0x4>
c00261c5:	fb                   	sti    
c00261c6:	eb db                	jmp    c00261a3 <Vm::finish8086()+0x4>
c00261c8:	c6 05 28 12 04 c0 00 	mov    BYTE PTR ds:0xc0041228,0x0
c00261cf:	83 ec 0c             	sub    esp,0xc
c00261d2:	8b 1d 24 12 04 c0    	mov    ebx,DWORD PTR ds:0xc0041224
c00261d8:	ff 35 2c 12 04 c0    	push   DWORD PTR ds:0xc004122c
c00261de:	e8 61 f8 ff ff       	call   c0025a44 <unblockTask(ThreadControlBlock*)>
c00261e3:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00261e8:	83 c4 10             	add    esp,0x10
c00261eb:	8d 50 ff             	lea    edx,[eax-0x1]
c00261ee:	89 15 d0 11 04 c0    	mov    DWORD PTR ds:0xc00411d0,edx
c00261f4:	85 d2                	test   edx,edx
c00261f6:	75 01                	jne    c00261f9 <Vm::finish8086()+0x5a>
c00261f8:	fb                   	sti    
c00261f9:	83 c4 08             	add    esp,0x8
c00261fc:	89 d8                	mov    eax,ebx
c00261fe:	5b                   	pop    ebx
c00261ff:	c3                   	ret    

c0026200 <Vm::getOutput8086(unsigned char*)>:
c0026200:	57                   	push   edi
c0026201:	8b 0d 30 12 04 c0    	mov    ecx,DWORD PTR ds:0xc0041230
c0026207:	56                   	push   esi
c0026208:	be 40 12 04 c0       	mov    esi,0xc0041240
c002620d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026211:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0026213:	5e                   	pop    esi
c0026214:	a1 30 12 04 c0       	mov    eax,ds:0xc0041230
c0026219:	c7 05 30 12 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0041230,0x0
c0026223:	5f                   	pop    edi
c0026224:	c3                   	ret    

c0026225 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0026225:	55                   	push   ebp
c0026226:	57                   	push   edi
c0026227:	56                   	push   esi
c0026228:	53                   	push   ebx
c0026229:	83 ec 2c             	sub    esp,0x2c
c002622c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0026230:	80 3d 20 12 04 c0 00 	cmp    BYTE PTR ds:0xc0041220,0x0
c0026237:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c002623b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c002623f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026243:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0026247:	75 5d                	jne    c00262a6 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0026249:	83 ec 0c             	sub    esp,0xc
c002624c:	68 14 01 00 00       	push   0x114
c0026251:	e8 32 04 ff ff       	call   c0016688 <malloc>
c0026256:	83 c4 0c             	add    esp,0xc
c0026259:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c002625f:	68 84 38 03 c0       	push   0xc0033884
c0026264:	50                   	push   eax
c0026265:	89 c7                	mov    edi,eax
c0026267:	e8 6a 44 ff ff       	call   c001a6d6 <File::File(char const*, Process*)>
c002626c:	58                   	pop    eax
c002626d:	5a                   	pop    edx
c002626e:	6a 12                	push   0x12
c0026270:	57                   	push   edi
c0026271:	e8 7e 44 ff ff       	call   c001a6f4 <File::open(FileOpenMode)>
c0026276:	8b 07                	mov    eax,DWORD PTR [edi]
c0026278:	59                   	pop    ecx
c0026279:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c002627d:	51                   	push   ecx
c002627e:	6a 00                	push   0x0
c0026280:	6a 00                	push   0x0
c0026282:	68 00 00 11 00       	push   0x110000
c0026287:	57                   	push   edi
c0026288:	ff 50 10             	call   DWORD PTR [eax+0x10]
c002628b:	83 c4 14             	add    esp,0x14
c002628e:	57                   	push   edi
c002628f:	e8 be 44 ff ff       	call   c001a752 <File::close()>
c0026294:	8b 07                	mov    eax,DWORD PTR [edi]
c0026296:	89 3c 24             	mov    DWORD PTR [esp],edi
c0026299:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002629c:	83 c4 10             	add    esp,0x10
c002629f:	c6 05 20 12 04 c0 01 	mov    BYTE PTR ds:0xc0041220,0x1
c00262a6:	fa                   	cli    
c00262a7:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c00262ad:	80 3d 29 12 04 c0 00 	cmp    BYTE PTR ds:0xc0041229,0x0
c00262b4:	75 15                	jne    c00262cb <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa6>
c00262b6:	e8 9d f4 ff ff       	call   c0025758 <schedule()>
c00262bb:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00262c0:	48                   	dec    eax
c00262c1:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00262c6:	75 de                	jne    c00262a6 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c00262c8:	fb                   	sti    
c00262c9:	eb db                	jmp    c00262a6 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c00262cb:	c7 05 30 12 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0041230,0x0
c00262d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00262d9:	a1 2c 12 04 c0       	mov    eax,ds:0xc004122c
c00262de:	66 89 70 55          	mov    WORD PTR [eax+0x55],si
c00262e2:	0f b7 f6             	movzx  esi,si
c00262e5:	66 89 58 57          	mov    WORD PTR [eax+0x57],bx
c00262e9:	0f b7 db             	movzx  ebx,bx
c00262ec:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00262f0:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c00262f4:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00262f8:	50                   	push   eax
c00262f9:	6a 20                	push   0x20
c00262fb:	6a 00                	push   0x0
c00262fd:	68 40 12 04 c0       	push   0xc0041240
c0026302:	e8 e9 a1 fd ff       	call   c00004f0 <memset>
c0026307:	5a                   	pop    edx
c0026308:	59                   	pop    ecx
c0026309:	56                   	push   esi
c002630a:	53                   	push   ebx
c002630b:	e8 be fd ff ff       	call   c00260ce <Vm::realToLinear(unsigned short, unsigned short)>
c0026310:	83 c4 10             	add    esp,0x10
c0026313:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0026317:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c002631b:	89 c7                	mov    edi,eax
c002631d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002631f:	c6 05 29 12 04 c0 00 	mov    BYTE PTR ds:0xc0041229,0x0
c0026326:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002632b:	48                   	dec    eax
c002632c:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0026331:	75 01                	jne    c0026334 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x10f>
c0026333:	fb                   	sti    
c0026334:	83 ec 0c             	sub    esp,0xc
c0026337:	ff 35 2c 12 04 c0    	push   DWORD PTR ds:0xc004122c
c002633d:	e8 02 f7 ff ff       	call   c0025a44 <unblockTask(ThreadControlBlock*)>
c0026342:	83 c4 3c             	add    esp,0x3c
c0026345:	b0 01                	mov    al,0x1
c0026347:	5b                   	pop    ebx
c0026348:	5e                   	pop    esi
c0026349:	5f                   	pop    edi
c002634a:	5d                   	pop    ebp
c002634b:	c3                   	ret    

c002634c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c002634c:	55                   	push   ebp
c002634d:	57                   	push   edi
c002634e:	56                   	push   esi
c002634f:	53                   	push   ebx
c0026350:	83 ec 2c             	sub    esp,0x2c
c0026353:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0026357:	80 3d 20 12 04 c0 00 	cmp    BYTE PTR ds:0xc0041220,0x0
c002635e:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0026362:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0026366:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002636a:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c002636e:	75 5d                	jne    c00263cd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0026370:	83 ec 0c             	sub    esp,0xc
c0026373:	68 14 01 00 00       	push   0x114
c0026378:	e8 0b 03 ff ff       	call   c0016688 <malloc>
c002637d:	83 c4 0c             	add    esp,0xc
c0026380:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c0026386:	68 84 38 03 c0       	push   0xc0033884
c002638b:	50                   	push   eax
c002638c:	89 c3                	mov    ebx,eax
c002638e:	e8 43 43 ff ff       	call   c001a6d6 <File::File(char const*, Process*)>
c0026393:	58                   	pop    eax
c0026394:	5a                   	pop    edx
c0026395:	6a 12                	push   0x12
c0026397:	53                   	push   ebx
c0026398:	e8 57 43 ff ff       	call   c001a6f4 <File::open(FileOpenMode)>
c002639d:	8b 03                	mov    eax,DWORD PTR [ebx]
c002639f:	59                   	pop    ecx
c00263a0:	8d 54 24 24          	lea    edx,[esp+0x24]
c00263a4:	52                   	push   edx
c00263a5:	6a 00                	push   0x0
c00263a7:	6a 00                	push   0x0
c00263a9:	68 00 00 11 00       	push   0x110000
c00263ae:	53                   	push   ebx
c00263af:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00263b2:	83 c4 14             	add    esp,0x14
c00263b5:	53                   	push   ebx
c00263b6:	e8 97 43 ff ff       	call   c001a752 <File::close()>
c00263bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00263bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00263c0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00263c3:	83 c4 10             	add    esp,0x10
c00263c6:	c6 05 20 12 04 c0 01 	mov    BYTE PTR ds:0xc0041220,0x1
c00263cd:	50                   	push   eax
c00263ce:	50                   	push   eax
c00263cf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00263d3:	68 9f 38 03 c0       	push   0xc003389f
c00263d8:	e8 e1 30 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c00263dd:	83 c4 10             	add    esp,0x10
c00263e0:	fa                   	cli    
c00263e1:	8a 1d 29 12 04 c0    	mov    bl,BYTE PTR ds:0xc0041229
c00263e7:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c00263ed:	84 db                	test   bl,bl
c00263ef:	75 15                	jne    c0026406 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c00263f1:	e8 62 f3 ff ff       	call   c0025758 <schedule()>
c00263f6:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00263fb:	48                   	dec    eax
c00263fc:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0026401:	75 dd                	jne    c00263e0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0026403:	fb                   	sti    
c0026404:	eb da                	jmp    c00263e0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0026406:	c7 05 30 12 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0041230,0x0
c0026410:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026414:	a1 2c 12 04 c0       	mov    eax,ds:0xc004122c
c0026419:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c002641d:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0026421:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0026425:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0026429:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c002642d:	50                   	push   eax
c002642e:	6a 20                	push   0x20
c0026430:	6a 00                	push   0x0
c0026432:	68 40 12 04 c0       	push   0xc0041240
c0026437:	e8 b4 a0 fd ff       	call   c00004f0 <memset>
c002643c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0026443:	e8 40 02 ff ff       	call   c0016688 <malloc>
c0026448:	83 c4 0c             	add    esp,0xc
c002644b:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c0026451:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0026455:	89 c5                	mov    ebp,eax
c0026457:	50                   	push   eax
c0026458:	e8 79 42 ff ff       	call   c001a6d6 <File::File(char const*, Process*)>
c002645d:	83 c4 10             	add    esp,0x10
c0026460:	85 ed                	test   ebp,ebp
c0026462:	75 0a                	jne    c002646e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x122>
c0026464:	83 ec 0c             	sub    esp,0xc
c0026467:	68 c1 38 03 c0       	push   0xc00338c1
c002646c:	eb 2b                	jmp    c0026499 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c002646e:	50                   	push   eax
c002646f:	8d 44 24 17          	lea    eax,[esp+0x17]
c0026473:	50                   	push   eax
c0026474:	8d 44 24 20          	lea    eax,[esp+0x20]
c0026478:	50                   	push   eax
c0026479:	55                   	push   ebp
c002647a:	e8 77 45 ff ff       	call   c001a9f6 <File::stat(unsigned long long*, bool*)>
c002647f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0026483:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0026487:	83 c4 10             	add    esp,0x10
c002648a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002648f:	74 27                	je     c00264b8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x16c>
c0026491:	83 ec 0c             	sub    esp,0xc
c0026494:	68 d5 38 03 c0       	push   0xc00338d5
c0026499:	e8 64 a2 ff ff       	call   c0020702 <KePanic(char const*)>
c002649e:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00264a3:	83 c4 10             	add    esp,0x10
c00264a6:	48                   	dec    eax
c00264a7:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00264ac:	85 c0                	test   eax,eax
c00264ae:	75 01                	jne    c00264b1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x165>
c00264b0:	fb                   	sti    
c00264b1:	31 db                	xor    ebx,ebx
c00264b3:	e9 90 00 00 00       	jmp    c0026548 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1fc>
c00264b8:	51                   	push   ecx
c00264b9:	51                   	push   ecx
c00264ba:	6a 01                	push   0x1
c00264bc:	55                   	push   ebp
c00264bd:	e8 32 42 ff ff       	call   c001a6f4 <File::open(FileOpenMode)>
c00264c2:	83 c4 10             	add    esp,0x10
c00264c5:	85 c0                	test   eax,eax
c00264c7:	74 26                	je     c00264ef <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1a3>
c00264c9:	83 ec 0c             	sub    esp,0xc
c00264cc:	68 ee 38 03 c0       	push   0xc00338ee
c00264d1:	e8 2c a2 ff ff       	call   c0020702 <KePanic(char const*)>
c00264d6:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00264db:	83 c4 10             	add    esp,0x10
c00264de:	48                   	dec    eax
c00264df:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00264e4:	85 c0                	test   eax,eax
c00264e6:	75 c9                	jne    c00264b1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x165>
c00264e8:	fb                   	sti    
c00264e9:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00264ed:	eb 59                	jmp    c0026548 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1fc>
c00264ef:	50                   	push   eax
c00264f0:	0f b7 ff             	movzx  edi,di
c00264f3:	50                   	push   eax
c00264f4:	0f b7 f6             	movzx  esi,si
c00264f7:	57                   	push   edi
c00264f8:	56                   	push   esi
c00264f9:	e8 d0 fb ff ff       	call   c00260ce <Vm::realToLinear(unsigned short, unsigned short)>
c00264fe:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0026501:	5a                   	pop    edx
c0026502:	8d 74 24 20          	lea    esi,[esp+0x20]
c0026506:	56                   	push   esi
c0026507:	50                   	push   eax
c0026508:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002650c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0026510:	55                   	push   ebp
c0026511:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0026514:	83 c4 14             	add    esp,0x14
c0026517:	55                   	push   ebp
c0026518:	e8 35 42 ff ff       	call   c001a752 <File::close()>
c002651d:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0026522:	83 c4 10             	add    esp,0x10
c0026525:	c6 05 29 12 04 c0 00 	mov    BYTE PTR ds:0xc0041229,0x0
c002652c:	48                   	dec    eax
c002652d:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c0026532:	85 c0                	test   eax,eax
c0026534:	75 01                	jne    c0026537 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1eb>
c0026536:	fb                   	sti    
c0026537:	83 ec 0c             	sub    esp,0xc
c002653a:	ff 35 2c 12 04 c0    	push   DWORD PTR ds:0xc004122c
c0026540:	e8 ff f4 ff ff       	call   c0025a44 <unblockTask(ThreadControlBlock*)>
c0026545:	83 c4 10             	add    esp,0x10
c0026548:	83 c4 2c             	add    esp,0x2c
c002654b:	88 d8                	mov    al,bl
c002654d:	5b                   	pop    ebx
c002654e:	5e                   	pop    esi
c002654f:	5f                   	pop    edi
c0026550:	5d                   	pop    ebp
c0026551:	c3                   	ret    

c0026552 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0026552:	57                   	push   edi
c0026553:	56                   	push   esi
c0026554:	53                   	push   ebx
c0026555:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026559:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002655d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0026561:	83 e8 06             	sub    eax,0x6
c0026564:	0f b7 c0             	movzx  eax,ax
c0026567:	50                   	push   eax
c0026568:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c002656d:	50                   	push   eax
c002656e:	e8 5b fb ff ff       	call   c00260ce <Vm::realToLinear(unsigned short, unsigned short)>
c0026573:	5a                   	pop    edx
c0026574:	59                   	pop    ecx
c0026575:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0026578:	8d 51 fa             	lea    edx,[ecx-0x6]
c002657b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c002657e:	81 e2 ff ff 00 00    	and    edx,0xffff
c0026584:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0026587:	8d 51 02             	lea    edx,[ecx+0x2]
c002658a:	66 89 10             	mov    WORD PTR [eax],dx
c002658d:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0026591:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0026595:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0026599:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c002659c:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00265a0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00265a6:	89 f1                	mov    ecx,esi
c00265a8:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c00265ac:	89 f2                	mov    edx,esi
c00265ae:	0f b6 d6             	movzx  edx,dh
c00265b1:	0f b6 f1             	movzx  esi,cl
c00265b4:	74 0a                	je     c00265c0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c00265b6:	c1 e2 08             	shl    edx,0x8
c00265b9:	09 f2                	or     edx,esi
c00265bb:	80 ce 02             	or     dh,0x2
c00265be:	eb 08                	jmp    c00265c8 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c00265c0:	c1 e2 08             	shl    edx,0x8
c00265c3:	09 f2                	or     edx,esi
c00265c5:	80 e6 fd             	and    dh,0xfd
c00265c8:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00265cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00265d1:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00265d5:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c00265dd:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c00265e0:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c00265e8:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00265eb:	5b                   	pop    ebx
c00265ec:	5e                   	pop    esi
c00265ed:	5f                   	pop    edi
c00265ee:	c3                   	ret    

c00265ef <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00265ef:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00265f4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00265f9:	c1 e0 04             	shl    eax,0x4
c00265fc:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00265ff:	c3                   	ret    

c0026600 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0026600:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026605:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c002660a:	c1 e0 04             	shl    eax,0x4
c002660d:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0026611:	c3                   	ret    

c0026612 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0026612:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026617:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c002661c:	c1 e0 04             	shl    eax,0x4
c002661f:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0026622:	c3                   	ret    

c0026623 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0026623:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026628:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c002662d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0026631:	c1 e0 04             	shl    eax,0x4
c0026634:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0026637:	c3                   	ret    

c0026638 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0026638:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c002663d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026642:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0026646:	c1 e0 04             	shl    eax,0x4
c0026649:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c002664d:	c3                   	ret    

c002664e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c002664e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026653:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026658:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002665c:	c1 e0 04             	shl    eax,0x4
c002665f:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0026662:	c3                   	ret    

c0026663 <Vm::faultHandler(regs*)>:
c0026663:	55                   	push   ebp
c0026664:	57                   	push   edi
c0026665:	56                   	push   esi
c0026666:	53                   	push   ebx
c0026667:	83 ec 2c             	sub    esp,0x2c
c002666a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002666e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0026671:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0026675:	0f b7 f8             	movzx  edi,ax
c0026678:	0f b7 c0             	movzx  eax,ax
c002667b:	52                   	push   edx
c002667c:	50                   	push   eax
c002667d:	e8 4c fa ff ff       	call   c00260ce <Vm::realToLinear(unsigned short, unsigned short)>
c0026682:	5a                   	pop    edx
c0026683:	59                   	pop    ecx
c0026684:	89 c1                	mov    ecx,eax
c0026686:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0026689:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002668d:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0026692:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026696:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0026699:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002669d:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00266a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00266a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00266aa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00266ae:	e8 1b fa ff ff       	call   c00260ce <Vm::realToLinear(unsigned short, unsigned short)>
c00266b3:	5e                   	pop    esi
c00266b4:	be 06 00 00 00       	mov    esi,0x6
c00266b9:	5d                   	pop    ebp
c00266ba:	31 ed                	xor    ebp,ebp
c00266bc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00266c1:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00266c4:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c00266ca:	0f 84 74 02 00 00    	je     c0026944 <Vm::faultHandler(regs*)+0x2e1>
c00266d0:	0f 87 94 00 00 00    	ja     c002676a <Vm::faultHandler(regs*)+0x107>
c00266d6:	83 fa 66             	cmp    edx,0x66
c00266d9:	0f 84 e2 01 00 00    	je     c00268c1 <Vm::faultHandler(regs*)+0x25e>
c00266df:	77 47                	ja     c0026728 <Vm::faultHandler(regs*)+0xc5>
c00266e1:	83 fa 36             	cmp    edx,0x36
c00266e4:	0f 84 ca 01 00 00    	je     c00268b4 <Vm::faultHandler(regs*)+0x251>
c00266ea:	77 1a                	ja     c0026706 <Vm::faultHandler(regs*)+0xa3>
c00266ec:	83 fa 26             	cmp    edx,0x26
c00266ef:	0f 84 98 01 00 00    	je     c002688d <Vm::faultHandler(regs*)+0x22a>
c00266f5:	83 fa 2e             	cmp    edx,0x2e
c00266f8:	0f 85 27 06 00 00    	jne    c0026d25 <Vm::faultHandler(regs*)+0x6c2>
c00266fe:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026701:	31 f6                	xor    esi,esi
c0026703:	41                   	inc    ecx
c0026704:	eb bb                	jmp    c00266c1 <Vm::faultHandler(regs*)+0x5e>
c0026706:	83 fa 64             	cmp    edx,0x64
c0026709:	0f 84 8b 01 00 00    	je     c002689a <Vm::faultHandler(regs*)+0x237>
c002670f:	0f 87 92 01 00 00    	ja     c00268a7 <Vm::faultHandler(regs*)+0x244>
c0026715:	83 fa 3e             	cmp    edx,0x3e
c0026718:	0f 85 07 06 00 00    	jne    c0026d25 <Vm::faultHandler(regs*)+0x6c2>
c002671e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026721:	be 01 00 00 00       	mov    esi,0x1
c0026726:	eb db                	jmp    c0026703 <Vm::faultHandler(regs*)+0xa0>
c0026728:	83 fa 6d             	cmp    edx,0x6d
c002672b:	0f 84 34 03 00 00    	je     c0026a65 <Vm::faultHandler(regs*)+0x402>
c0026731:	77 17                	ja     c002674a <Vm::faultHandler(regs*)+0xe7>
c0026733:	83 fa 67             	cmp    edx,0x67
c0026736:	0f 84 92 01 00 00    	je     c00268ce <Vm::faultHandler(regs*)+0x26b>
c002673c:	83 fa 6c             	cmp    edx,0x6c
c002673f:	0f 84 b1 02 00 00    	je     c00269f6 <Vm::faultHandler(regs*)+0x393>
c0026745:	e9 db 05 00 00       	jmp    c0026d25 <Vm::faultHandler(regs*)+0x6c2>
c002674a:	83 fa 6f             	cmp    edx,0x6f
c002674d:	0f 84 40 04 00 00    	je     c0026b93 <Vm::faultHandler(regs*)+0x530>
c0026753:	0f 82 a2 03 00 00    	jb     c0026afb <Vm::faultHandler(regs*)+0x498>
c0026759:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c002675f:	0f 84 76 01 00 00    	je     c00268db <Vm::faultHandler(regs*)+0x278>
c0026765:	e9 bb 05 00 00       	jmp    c0026d25 <Vm::faultHandler(regs*)+0x6c2>
c002676a:	81 fa ec 00 00 00    	cmp    edx,0xec
c0026770:	0f 84 57 05 00 00    	je     c0026ccd <Vm::faultHandler(regs*)+0x66a>
c0026776:	0f 87 a9 00 00 00    	ja     c0026825 <Vm::faultHandler(regs*)+0x1c2>
c002677c:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0026782:	0f 84 d6 04 00 00    	je     c0026c5e <Vm::faultHandler(regs*)+0x5fb>
c0026788:	77 78                	ja     c0026802 <Vm::faultHandler(regs*)+0x19f>
c002678a:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0026790:	0f 84 0e 02 00 00    	je     c00269a4 <Vm::faultHandler(regs*)+0x341>
c0026796:	81 fa cf 00 00 00    	cmp    edx,0xcf
c002679c:	0f 85 83 05 00 00    	jne    c0026d25 <Vm::faultHandler(regs*)+0x6c2>
c00267a2:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00267a6:	89 d1                	mov    ecx,edx
c00267a8:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00267ab:	c1 e1 08             	shl    ecx,0x8
c00267ae:	09 ca                	or     edx,ecx
c00267b0:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00267b3:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00267b7:	89 d1                	mov    ecx,edx
c00267b9:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00267bd:	c1 e1 08             	shl    ecx,0x8
c00267c0:	09 ca                	or     edx,ecx
c00267c2:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00267c5:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00267c9:	89 d1                	mov    ecx,edx
c00267cb:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00267cf:	c1 e1 08             	shl    ecx,0x8
c00267d2:	09 ca                	or     edx,ecx
c00267d4:	81 ca 00 02 02 00    	or     edx,0x20200
c00267da:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00267dd:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c00267e1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00267e7:	d1 e8                	shr    eax,1
c00267e9:	83 e0 01             	and    eax,0x1
c00267ec:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00267ef:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00267f2:	83 c0 06             	add    eax,0x6
c00267f5:	25 ff ff 00 00       	and    eax,0xffff
c00267fa:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00267fd:	e9 1f 05 00 00       	jmp    c0026d21 <Vm::faultHandler(regs*)+0x6be>
c0026802:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0026808:	0f 84 95 04 00 00    	je     c0026ca3 <Vm::faultHandler(regs*)+0x640>
c002680e:	0f 82 66 04 00 00    	jb     c0026c7a <Vm::faultHandler(regs*)+0x617>
c0026814:	81 fa e7 00 00 00    	cmp    edx,0xe7
c002681a:	0f 84 9a 04 00 00    	je     c0026cba <Vm::faultHandler(regs*)+0x657>
c0026820:	e9 00 05 00 00       	jmp    c0026d25 <Vm::faultHandler(regs*)+0x6c2>
c0026825:	81 fa ef 00 00 00    	cmp    edx,0xef
c002682b:	0f 84 dd 04 00 00    	je     c0026d0e <Vm::faultHandler(regs*)+0x6ab>
c0026831:	77 2e                	ja     c0026861 <Vm::faultHandler(regs*)+0x1fe>
c0026833:	81 fa ed 00 00 00    	cmp    edx,0xed
c0026839:	0f 84 aa 04 00 00    	je     c0026ce9 <Vm::faultHandler(regs*)+0x686>
c002683f:	81 fa ee 00 00 00    	cmp    edx,0xee
c0026845:	0f 85 da 04 00 00    	jne    c0026d25 <Vm::faultHandler(regs*)+0x6c2>
c002684b:	50                   	push   eax
c002684c:	50                   	push   eax
c002684d:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0026851:	50                   	push   eax
c0026852:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0026856:	50                   	push   eax
c0026857:	e8 3c f8 ff ff       	call   c0026098 <Vm::outbv(unsigned short, unsigned char)>
c002685c:	e9 a5 04 00 00       	jmp    c0026d06 <Vm::faultHandler(regs*)+0x6a3>
c0026861:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0026867:	0f 84 6d 01 00 00    	je     c00269da <Vm::faultHandler(regs*)+0x377>
c002686d:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0026873:	0f 84 6f 01 00 00    	je     c00269e8 <Vm::faultHandler(regs*)+0x385>
c0026879:	81 fa f3 00 00 00    	cmp    edx,0xf3
c002687f:	0f 85 a0 04 00 00    	jne    c0026d25 <Vm::faultHandler(regs*)+0x6c2>
c0026885:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026888:	e9 76 fe ff ff       	jmp    c0026703 <Vm::faultHandler(regs*)+0xa0>
c002688d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026890:	be 02 00 00 00       	mov    esi,0x2
c0026895:	e9 69 fe ff ff       	jmp    c0026703 <Vm::faultHandler(regs*)+0xa0>
c002689a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002689d:	be 03 00 00 00       	mov    esi,0x3
c00268a2:	e9 5c fe ff ff       	jmp    c0026703 <Vm::faultHandler(regs*)+0xa0>
c00268a7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00268aa:	be 04 00 00 00       	mov    esi,0x4
c00268af:	e9 4f fe ff ff       	jmp    c0026703 <Vm::faultHandler(regs*)+0xa0>
c00268b4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00268b7:	be 05 00 00 00       	mov    esi,0x5
c00268bc:	e9 42 fe ff ff       	jmp    c0026703 <Vm::faultHandler(regs*)+0xa0>
c00268c1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00268c4:	bd 01 00 00 00       	mov    ebp,0x1
c00268c9:	e9 35 fe ff ff       	jmp    c0026703 <Vm::faultHandler(regs*)+0xa0>
c00268ce:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00268d1:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00268d6:	e9 28 fe ff ff       	jmp    c0026703 <Vm::faultHandler(regs*)+0xa0>
c00268db:	83 e5 01             	and    ebp,0x1
c00268de:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00268e1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00268e5:	74 30                	je     c0026917 <Vm::faultHandler(regs*)+0x2b4>
c00268e7:	83 e9 04             	sub    ecx,0x4
c00268ea:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00268f0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00268f6:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00268f9:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00268fc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0026902:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0026906:	0f 84 12 04 00 00    	je     c0026d1e <Vm::faultHandler(regs*)+0x6bb>
c002690c:	80 ce 02             	or     dh,0x2
c002690f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0026912:	e9 07 04 00 00       	jmp    c0026d1e <Vm::faultHandler(regs*)+0x6bb>
c0026917:	83 e9 02             	sub    ecx,0x2
c002691a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0026920:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0026923:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0026927:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c002692d:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0026931:	74 05                	je     c0026938 <Vm::faultHandler(regs*)+0x2d5>
c0026933:	80 ce 02             	or     dh,0x2
c0026936:	eb 03                	jmp    c002693b <Vm::faultHandler(regs*)+0x2d8>
c0026938:	80 e6 fd             	and    dh,0xfd
c002693b:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c002693f:	e9 da 03 00 00       	jmp    c0026d1e <Vm::faultHandler(regs*)+0x6bb>
c0026944:	83 e5 01             	and    ebp,0x1
c0026947:	74 2a                	je     c0026973 <Vm::faultHandler(regs*)+0x310>
c0026949:	8b 10                	mov    edx,DWORD PTR [eax]
c002694b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0026951:	81 ca 00 02 02 00    	or     edx,0x20200
c0026957:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c002695a:	8b 00                	mov    eax,DWORD PTR [eax]
c002695c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0026962:	c1 e8 09             	shr    eax,0x9
c0026965:	83 e0 01             	and    eax,0x1
c0026968:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c002696b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c002696e:	83 c0 04             	add    eax,0x4
c0026971:	eb 24                	jmp    c0026997 <Vm::faultHandler(regs*)+0x334>
c0026973:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0026976:	81 ca 00 02 02 00    	or     edx,0x20200
c002697c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c002697f:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0026982:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0026988:	c1 e8 09             	shr    eax,0x9
c002698b:	83 e0 01             	and    eax,0x1
c002698e:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0026991:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0026994:	83 c0 02             	add    eax,0x2
c0026997:	25 ff ff 00 00       	and    eax,0xffff
c002699c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c002699f:	e9 7a 03 00 00       	jmp    c0026d1e <Vm::faultHandler(regs*)+0x6bb>
c00269a4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00269a8:	3d ee 00 00 00       	cmp    eax,0xee
c00269ad:	75 10                	jne    c00269bf <Vm::faultHandler(regs*)+0x35c>
c00269af:	83 ec 0c             	sub    esp,0xc
c00269b2:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00269b5:	e8 7b f7 ff ff       	call   c0026135 <Vm::mainloop3(unsigned long)>
c00269ba:	e9 4a 03 00 00       	jmp    c0026d09 <Vm::faultHandler(regs*)+0x6a6>
c00269bf:	83 ec 0c             	sub    esp,0xc
c00269c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00269c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00269ca:	51                   	push   ecx
c00269cb:	50                   	push   eax
c00269cc:	53                   	push   ebx
c00269cd:	e8 80 fb ff ff       	call   c0026552 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00269d2:	83 c4 20             	add    esp,0x20
c00269d5:	e9 47 03 00 00       	jmp    c0026d21 <Vm::faultHandler(regs*)+0x6be>
c00269da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00269df:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00269e3:	e9 36 03 00 00       	jmp    c0026d1e <Vm::faultHandler(regs*)+0x6bb>
c00269e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00269ed:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00269f1:	e9 28 03 00 00       	jmp    c0026d1e <Vm::faultHandler(regs*)+0x6bb>
c00269f6:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00269fb:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00269fe:	74 2b                	je     c0026a2b <Vm::faultHandler(regs*)+0x3c8>
c0026a00:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0026a07:	76 22                	jbe    c0026a2b <Vm::faultHandler(regs*)+0x3c8>
c0026a09:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026a0d:	50                   	push   eax
c0026a0e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026a12:	50                   	push   eax
c0026a13:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026a17:	50                   	push   eax
c0026a18:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026a1c:	50                   	push   eax
c0026a1d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026a21:	50                   	push   eax
c0026a22:	6a 6c                	push   0x6c
c0026a24:	6a 6c                	push   0x6c
c0026a26:	e9 c0 01 00 00       	jmp    c0026beb <Vm::faultHandler(regs*)+0x588>
c0026a2b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0026a2f:	83 ec 0c             	sub    esp,0xc
c0026a32:	0f b7 f6             	movzx  esi,si
c0026a35:	50                   	push   eax
c0026a36:	e8 4a f6 ff ff       	call   c0026085 <Vm::inbv(unsigned short)>
c0026a3b:	83 c4 0c             	add    esp,0xc
c0026a3e:	0f b6 c0             	movzx  eax,al
c0026a41:	50                   	push   eax
c0026a42:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0026a46:	50                   	push   eax
c0026a47:	56                   	push   esi
c0026a48:	e8 d6 fb ff ff       	call   c0026623 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0026a4d:	83 c4 10             	add    esp,0x10
c0026a50:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026a53:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0026a57:	74 03                	je     c0026a5c <Vm::faultHandler(regs*)+0x3f9>
c0026a59:	48                   	dec    eax
c0026a5a:	eb 01                	jmp    c0026a5d <Vm::faultHandler(regs*)+0x3fa>
c0026a5c:	40                   	inc    eax
c0026a5d:	0f b7 c0             	movzx  eax,ax
c0026a60:	e9 8e 00 00 00       	jmp    c0026af3 <Vm::faultHandler(regs*)+0x490>
c0026a65:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026a6a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0026a6d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026a70:	74 29                	je     c0026a9b <Vm::faultHandler(regs*)+0x438>
c0026a72:	3d ff ff 00 00       	cmp    eax,0xffff
c0026a77:	76 22                	jbe    c0026a9b <Vm::faultHandler(regs*)+0x438>
c0026a79:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026a7d:	50                   	push   eax
c0026a7e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026a82:	50                   	push   eax
c0026a83:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026a87:	50                   	push   eax
c0026a88:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026a8c:	50                   	push   eax
c0026a8d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026a91:	50                   	push   eax
c0026a92:	6a 6d                	push   0x6d
c0026a94:	6a 6d                	push   0x6d
c0026a96:	e9 50 01 00 00       	jmp    c0026beb <Vm::faultHandler(regs*)+0x588>
c0026a9b:	83 e5 01             	and    ebp,0x1
c0026a9e:	0f b7 c8             	movzx  ecx,ax
c0026aa1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026aa4:	0f b7 f6             	movzx  esi,si
c0026aa7:	74 1e                	je     c0026ac7 <Vm::faultHandler(regs*)+0x464>
c0026aa9:	ed                   	in     eax,dx
c0026aaa:	55                   	push   ebp
c0026aab:	50                   	push   eax
c0026aac:	51                   	push   ecx
c0026aad:	56                   	push   esi
c0026aae:	e8 9b fb ff ff       	call   c002664e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0026ab3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026ab6:	83 c4 10             	add    esp,0x10
c0026ab9:	8d 50 04             	lea    edx,[eax+0x4]
c0026abc:	83 e8 04             	sub    eax,0x4
c0026abf:	81 e2 ff ff 00 00    	and    edx,0xffff
c0026ac5:	eb 20                	jmp    c0026ae7 <Vm::faultHandler(regs*)+0x484>
c0026ac7:	66 ed                	in     ax,dx
c0026ac9:	57                   	push   edi
c0026aca:	0f b7 c0             	movzx  eax,ax
c0026acd:	50                   	push   eax
c0026ace:	51                   	push   ecx
c0026acf:	56                   	push   esi
c0026ad0:	e8 63 fb ff ff       	call   c0026638 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0026ad5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026ad8:	83 c4 10             	add    esp,0x10
c0026adb:	8d 50 02             	lea    edx,[eax+0x2]
c0026ade:	83 e8 02             	sub    eax,0x2
c0026ae1:	81 e2 ff ff 00 00    	and    edx,0xffff
c0026ae7:	25 ff ff 00 00       	and    eax,0xffff
c0026aec:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0026af0:	0f 44 c2             	cmove  eax,edx
c0026af3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0026af6:	e9 23 02 00 00       	jmp    c0026d1e <Vm::faultHandler(regs*)+0x6bb>
c0026afb:	8d 46 ff             	lea    eax,[esi-0x1]
c0026afe:	0f b6 f0             	movzx  esi,al
c0026b01:	83 fe 05             	cmp    esi,0x5
c0026b04:	77 23                	ja     c0026b29 <Vm::faultHandler(regs*)+0x4c6>
c0026b06:	ff 24 b5 64 39 03 c0 	jmp    DWORD PTR [esi*4-0x3ffcc69c]
c0026b0d:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0026b12:	eb 15                	jmp    c0026b29 <Vm::faultHandler(regs*)+0x4c6>
c0026b14:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0026b18:	eb 0f                	jmp    c0026b29 <Vm::faultHandler(regs*)+0x4c6>
c0026b1a:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0026b1e:	eb 09                	jmp    c0026b29 <Vm::faultHandler(regs*)+0x4c6>
c0026b20:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0026b24:	eb 03                	jmp    c0026b29 <Vm::faultHandler(regs*)+0x4c6>
c0026b26:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0026b29:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026b2e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0026b31:	74 29                	je     c0026b5c <Vm::faultHandler(regs*)+0x4f9>
c0026b33:	3d ff ff 00 00       	cmp    eax,0xffff
c0026b38:	76 22                	jbe    c0026b5c <Vm::faultHandler(regs*)+0x4f9>
c0026b3a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026b3e:	50                   	push   eax
c0026b3f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026b43:	50                   	push   eax
c0026b44:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026b48:	50                   	push   eax
c0026b49:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026b4d:	50                   	push   eax
c0026b4e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026b52:	50                   	push   eax
c0026b53:	6a 6e                	push   0x6e
c0026b55:	6a 6e                	push   0x6e
c0026b57:	e9 8f 00 00 00       	jmp    c0026beb <Vm::faultHandler(regs*)+0x588>
c0026b5c:	52                   	push   edx
c0026b5d:	0f b7 c0             	movzx  eax,ax
c0026b60:	52                   	push   edx
c0026b61:	50                   	push   eax
c0026b62:	57                   	push   edi
c0026b63:	e8 87 fa ff ff       	call   c00265ef <Vm::readByteFromReal(unsigned short, unsigned short)>
c0026b68:	59                   	pop    ecx
c0026b69:	5e                   	pop    esi
c0026b6a:	0f b6 c0             	movzx  eax,al
c0026b6d:	50                   	push   eax
c0026b6e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0026b72:	50                   	push   eax
c0026b73:	e8 20 f5 ff ff       	call   c0026098 <Vm::outbv(unsigned short, unsigned char)>
c0026b78:	83 c4 10             	add    esp,0x10
c0026b7b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0026b7e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0026b82:	74 03                	je     c0026b87 <Vm::faultHandler(regs*)+0x524>
c0026b84:	48                   	dec    eax
c0026b85:	eb 01                	jmp    c0026b88 <Vm::faultHandler(regs*)+0x525>
c0026b87:	40                   	inc    eax
c0026b88:	0f b7 c0             	movzx  eax,ax
c0026b8b:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0026b8e:	e9 8b 01 00 00       	jmp    c0026d1e <Vm::faultHandler(regs*)+0x6bb>
c0026b93:	8d 46 ff             	lea    eax,[esi-0x1]
c0026b96:	0f b6 f0             	movzx  esi,al
c0026b99:	83 fe 05             	cmp    esi,0x5
c0026b9c:	77 1e                	ja     c0026bbc <Vm::faultHandler(regs*)+0x559>
c0026b9e:	ff 24 b5 7c 39 03 c0 	jmp    DWORD PTR [esi*4-0x3ffcc684]
c0026ba5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0026ba9:	eb 11                	jmp    c0026bbc <Vm::faultHandler(regs*)+0x559>
c0026bab:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0026bae:	eb 0c                	jmp    c0026bbc <Vm::faultHandler(regs*)+0x559>
c0026bb0:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0026bb3:	eb 07                	jmp    c0026bbc <Vm::faultHandler(regs*)+0x559>
c0026bb5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0026bb8:	eb 02                	jmp    c0026bbc <Vm::faultHandler(regs*)+0x559>
c0026bba:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0026bbc:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026bc1:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0026bc4:	74 37                	je     c0026bfd <Vm::faultHandler(regs*)+0x59a>
c0026bc6:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0026bcc:	76 2f                	jbe    c0026bfd <Vm::faultHandler(regs*)+0x59a>
c0026bce:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026bd2:	50                   	push   eax
c0026bd3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026bd7:	50                   	push   eax
c0026bd8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026bdc:	50                   	push   eax
c0026bdd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026be1:	50                   	push   eax
c0026be2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026be6:	50                   	push   eax
c0026be7:	6a 6f                	push   0x6f
c0026be9:	6a 6f                	push   0x6f
c0026beb:	68 07 39 03 c0       	push   0xc0033907
c0026bf0:	e8 c9 28 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0026bf5:	83 c4 20             	add    esp,0x20
c0026bf8:	e9 86 01 00 00       	jmp    c0026d83 <Vm::faultHandler(regs*)+0x720>
c0026bfd:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0026c00:	0f b7 d7             	movzx  edx,di
c0026c03:	0f b7 c6             	movzx  eax,si
c0026c06:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0026c09:	81 e1 00 04 00 00    	and    ecx,0x400
c0026c0f:	83 e5 01             	and    ebp,0x1
c0026c12:	74 1c                	je     c0026c30 <Vm::faultHandler(regs*)+0x5cd>
c0026c14:	55                   	push   ebp
c0026c15:	55                   	push   ebp
c0026c16:	50                   	push   eax
c0026c17:	52                   	push   edx
c0026c18:	e8 f5 f9 ff ff       	call   c0026612 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0026c1d:	83 c4 10             	add    esp,0x10
c0026c20:	89 fa                	mov    edx,edi
c0026c22:	ef                   	out    dx,eax
c0026c23:	8d 46 04             	lea    eax,[esi+0x4]
c0026c26:	83 ee 04             	sub    esi,0x4
c0026c29:	25 ff ff 00 00       	and    eax,0xffff
c0026c2e:	eb 1b                	jmp    c0026c4b <Vm::faultHandler(regs*)+0x5e8>
c0026c30:	55                   	push   ebp
c0026c31:	55                   	push   ebp
c0026c32:	50                   	push   eax
c0026c33:	52                   	push   edx
c0026c34:	e8 c7 f9 ff ff       	call   c0026600 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0026c39:	83 c4 10             	add    esp,0x10
c0026c3c:	89 fa                	mov    edx,edi
c0026c3e:	66 ef                	out    dx,ax
c0026c40:	8d 46 02             	lea    eax,[esi+0x2]
c0026c43:	83 ee 02             	sub    esi,0x2
c0026c46:	25 ff ff 00 00       	and    eax,0xffff
c0026c4b:	81 e6 ff ff 00 00    	and    esi,0xffff
c0026c51:	85 c9                	test   ecx,ecx
c0026c53:	0f 44 f0             	cmove  esi,eax
c0026c56:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0026c59:	e9 c0 00 00 00       	jmp    c0026d1e <Vm::faultHandler(regs*)+0x6bb>
c0026c5e:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0026c65:	83 ec 0c             	sub    esp,0xc
c0026c68:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026c6c:	50                   	push   eax
c0026c6d:	e8 13 f4 ff ff       	call   c0026085 <Vm::inbv(unsigned short)>
c0026c72:	0f b6 c0             	movzx  eax,al
c0026c75:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0026c78:	eb 3a                	jmp    c0026cb4 <Vm::faultHandler(regs*)+0x651>
c0026c7a:	83 e5 01             	and    ebp,0x1
c0026c7d:	74 07                	je     c0026c86 <Vm::faultHandler(regs*)+0x623>
c0026c7f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0026c83:	ed                   	in     eax,dx
c0026c84:	eb 14                	jmp    c0026c9a <Vm::faultHandler(regs*)+0x637>
c0026c86:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0026c89:	66 31 f6             	xor    si,si
c0026c8c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0026c8f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0026c93:	66 ed                	in     ax,dx
c0026c95:	0f b7 c0             	movzx  eax,ax
c0026c98:	09 f0                	or     eax,esi
c0026c9a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0026c9d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0026ca1:	eb 7e                	jmp    c0026d21 <Vm::faultHandler(regs*)+0x6be>
c0026ca3:	52                   	push   edx
c0026ca4:	52                   	push   edx
c0026ca5:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0026ca9:	50                   	push   eax
c0026caa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026cae:	50                   	push   eax
c0026caf:	e8 e4 f3 ff ff       	call   c0026098 <Vm::outbv(unsigned short, unsigned char)>
c0026cb4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0026cb8:	eb 4f                	jmp    c0026d09 <Vm::faultHandler(regs*)+0x6a6>
c0026cba:	83 e5 01             	and    ebp,0x1
c0026cbd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0026cc0:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0026cc4:	74 03                	je     c0026cc9 <Vm::faultHandler(regs*)+0x666>
c0026cc6:	ef                   	out    dx,eax
c0026cc7:	eb d4                	jmp    c0026c9d <Vm::faultHandler(regs*)+0x63a>
c0026cc9:	66 ef                	out    dx,ax
c0026ccb:	eb d0                	jmp    c0026c9d <Vm::faultHandler(regs*)+0x63a>
c0026ccd:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0026cd1:	83 ec 0c             	sub    esp,0xc
c0026cd4:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0026cdb:	50                   	push   eax
c0026cdc:	e8 a4 f3 ff ff       	call   c0026085 <Vm::inbv(unsigned short)>
c0026ce1:	0f b6 c0             	movzx  eax,al
c0026ce4:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0026ce7:	eb 1d                	jmp    c0026d06 <Vm::faultHandler(regs*)+0x6a3>
c0026ce9:	83 e5 01             	and    ebp,0x1
c0026cec:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026cef:	74 03                	je     c0026cf4 <Vm::faultHandler(regs*)+0x691>
c0026cf1:	ed                   	in     eax,dx
c0026cf2:	eb 0d                	jmp    c0026d01 <Vm::faultHandler(regs*)+0x69e>
c0026cf4:	66 ed                	in     ax,dx
c0026cf6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0026cf9:	0f b7 c0             	movzx  eax,ax
c0026cfc:	66 31 d2             	xor    dx,dx
c0026cff:	09 d0                	or     eax,edx
c0026d01:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0026d04:	eb 18                	jmp    c0026d1e <Vm::faultHandler(regs*)+0x6bb>
c0026d06:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026d09:	83 c4 10             	add    esp,0x10
c0026d0c:	eb 13                	jmp    c0026d21 <Vm::faultHandler(regs*)+0x6be>
c0026d0e:	83 e5 01             	and    ebp,0x1
c0026d11:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0026d14:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026d17:	74 03                	je     c0026d1c <Vm::faultHandler(regs*)+0x6b9>
c0026d19:	ef                   	out    dx,eax
c0026d1a:	eb 02                	jmp    c0026d1e <Vm::faultHandler(regs*)+0x6bb>
c0026d1c:	66 ef                	out    dx,ax
c0026d1e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026d21:	b0 01                	mov    al,0x1
c0026d23:	eb 60                	jmp    c0026d85 <Vm::faultHandler(regs*)+0x722>
c0026d25:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026d29:	50                   	push   eax
c0026d2a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026d2e:	50                   	push   eax
c0026d2f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026d33:	50                   	push   eax
c0026d34:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026d38:	50                   	push   eax
c0026d39:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026d3d:	50                   	push   eax
c0026d3e:	52                   	push   edx
c0026d3f:	52                   	push   edx
c0026d40:	68 34 39 03 c0       	push   0xc0033934
c0026d45:	e8 74 27 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0026d4a:	83 c4 20             	add    esp,0x20
c0026d4d:	83 ec 0c             	sub    esp,0xc
c0026d50:	6a 60                	push   0x60
c0026d52:	e8 2e f3 ff ff       	call   c0026085 <Vm::inbv(unsigned short)>
c0026d57:	83 c4 10             	add    esp,0x10
c0026d5a:	0f b6 d0             	movzx  edx,al
c0026d5d:	83 fa 1c             	cmp    edx,0x1c
c0026d60:	74 05                	je     c0026d67 <Vm::faultHandler(regs*)+0x704>
c0026d62:	83 fa 5a             	cmp    edx,0x5a
c0026d65:	75 e6                	jne    c0026d4d <Vm::faultHandler(regs*)+0x6ea>
c0026d67:	0f b6 c0             	movzx  eax,al
c0026d6a:	83 f8 1c             	cmp    eax,0x1c
c0026d6d:	74 05                	je     c0026d74 <Vm::faultHandler(regs*)+0x711>
c0026d6f:	83 f8 5a             	cmp    eax,0x5a
c0026d72:	75 0f                	jne    c0026d83 <Vm::faultHandler(regs*)+0x720>
c0026d74:	83 ec 0c             	sub    esp,0xc
c0026d77:	6a 60                	push   0x60
c0026d79:	e8 07 f3 ff ff       	call   c0026085 <Vm::inbv(unsigned short)>
c0026d7e:	83 c4 10             	add    esp,0x10
c0026d81:	eb e4                	jmp    c0026d67 <Vm::faultHandler(regs*)+0x704>
c0026d83:	31 c0                	xor    eax,eax
c0026d85:	83 c4 2c             	add    esp,0x2c
c0026d88:	5b                   	pop    ebx
c0026d89:	5e                   	pop    esi
c0026d8a:	5f                   	pop    edi
c0026d8b:	5d                   	pop    ebp
c0026d8c:	c3                   	ret    

c0026d8d <noCopro(unsigned long)>:
c0026d8d:	c3                   	ret    

c0026d8e <nmiHandler(regs*, void*)>:
c0026d8e:	83 ec 0c             	sub    esp,0xc
c0026d91:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0026d96:	83 ec 0c             	sub    esp,0xc
c0026d99:	50                   	push   eax
c0026d9a:	e8 71 f0 fe ff       	call   c0015e10 <Computer::handleNMI()>
c0026d9f:	83 c4 10             	add    esp,0x10
c0026da2:	90                   	nop
c0026da3:	83 c4 0c             	add    esp,0xc
c0026da6:	c3                   	ret    

c0026da7 <doubleFault(regs*, void*)>:
c0026da7:	55                   	push   ebp
c0026da8:	89 e5                	mov    ebp,esp
c0026daa:	83 ec 08             	sub    esp,0x8
c0026dad:	83 ec 0c             	sub    esp,0xc
c0026db0:	68 94 39 03 c0       	push   0xc0033994
c0026db5:	e8 48 99 ff ff       	call   c0020702 <KePanic(char const*)>
c0026dba:	83 c4 10             	add    esp,0x10
c0026dbd:	90                   	nop
c0026dbe:	c9                   	leave  
c0026dbf:	c3                   	ret    

c0026dc0 <displayDebugInfo(regs*)>:
c0026dc0:	83 ec 1c             	sub    esp,0x1c
c0026dc3:	0f 20 c0             	mov    eax,cr0
c0026dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026dca:	0f 20 d0             	mov    eax,cr2
c0026dcd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026dd1:	0f 20 d8             	mov    eax,cr3
c0026dd4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026dd8:	0f 20 e0             	mov    eax,cr4
c0026ddb:	89 04 24             	mov    DWORD PTR [esp],eax
c0026dde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026de2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0026de5:	83 ec 08             	sub    esp,0x8
c0026de8:	50                   	push   eax
c0026de9:	68 b0 39 03 c0       	push   0xc00339b0
c0026dee:	e8 cb 26 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0026df3:	83 c4 10             	add    esp,0x10
c0026df6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026dfa:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0026dfd:	83 ec 08             	sub    esp,0x8
c0026e00:	50                   	push   eax
c0026e01:	68 a1 39 03 c0       	push   0xc00339a1
c0026e06:	e8 b3 26 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0026e0b:	83 c4 10             	add    esp,0x10
c0026e0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026e12:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0026e15:	83 ec 08             	sub    esp,0x8
c0026e18:	50                   	push   eax
c0026e19:	68 ac 39 03 c0       	push   0xc00339ac
c0026e1e:	e8 9b 26 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0026e23:	83 c4 10             	add    esp,0x10
c0026e26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026e2a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026e2d:	83 ec 08             	sub    esp,0x8
c0026e30:	50                   	push   eax
c0026e31:	68 bb 39 03 c0       	push   0xc00339bb
c0026e36:	e8 83 26 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0026e3b:	83 c4 10             	add    esp,0x10
c0026e3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026e42:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0026e45:	83 ec 08             	sub    esp,0x8
c0026e48:	50                   	push   eax
c0026e49:	68 c6 39 03 c0       	push   0xc00339c6
c0026e4e:	e8 6b 26 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0026e53:	83 c4 10             	add    esp,0x10
c0026e56:	83 ec 08             	sub    esp,0x8
c0026e59:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026e5d:	68 d1 39 03 c0       	push   0xc00339d1
c0026e62:	e8 57 26 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0026e67:	83 c4 10             	add    esp,0x10
c0026e6a:	83 ec 08             	sub    esp,0x8
c0026e6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0026e71:	68 dc 39 03 c0       	push   0xc00339dc
c0026e76:	e8 43 26 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0026e7b:	83 c4 10             	add    esp,0x10
c0026e7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026e82:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0026e85:	c1 e0 05             	shl    eax,0x5
c0026e88:	8d 90 e0 4d 03 c0    	lea    edx,[eax-0x3ffcb220]
c0026e8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026e92:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0026e95:	83 ec 04             	sub    esp,0x4
c0026e98:	52                   	push   edx
c0026e99:	50                   	push   eax
c0026e9a:	68 e7 39 03 c0       	push   0xc00339e7
c0026e9f:	e8 1a 26 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0026ea4:	83 c4 10             	add    esp,0x10
c0026ea7:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026eac:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026eb2:	83 ec 0c             	sub    esp,0xc
c0026eb5:	50                   	push   eax
c0026eb6:	e8 68 04 ff ff       	call   c0017323 <setActiveTerminal(VgaText*)>
c0026ebb:	83 c4 10             	add    esp,0x10
c0026ebe:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026ec3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026ec9:	83 ec 08             	sub    esp,0x8
c0026ecc:	68 f6 39 03 c0       	push   0xc00339f6
c0026ed1:	50                   	push   eax
c0026ed2:	e8 89 07 ff ff       	call   c0017660 <VgaText::puts(char const*)>
c0026ed7:	83 c4 10             	add    esp,0x10
c0026eda:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026edf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026ee5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026ee9:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0026eec:	83 ec 08             	sub    esp,0x8
c0026eef:	52                   	push   edx
c0026ef0:	50                   	push   eax
c0026ef1:	e8 24 07 ff ff       	call   c001761a <VgaText::putx(unsigned int)>
c0026ef6:	83 c4 10             	add    esp,0x10
c0026ef9:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026efe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026f04:	83 ec 08             	sub    esp,0x8
c0026f07:	68 04 3a 03 c0       	push   0xc0033a04
c0026f0c:	50                   	push   eax
c0026f0d:	e8 4e 07 ff ff       	call   c0017660 <VgaText::puts(char const*)>
c0026f12:	83 c4 10             	add    esp,0x10
c0026f15:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026f1a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026f20:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0026f25:	8b 12                	mov    edx,DWORD PTR [edx]
c0026f27:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0026f2a:	83 c2 0c             	add    edx,0xc
c0026f2d:	83 ec 08             	sub    esp,0x8
c0026f30:	52                   	push   edx
c0026f31:	50                   	push   eax
c0026f32:	e8 29 07 ff ff       	call   c0017660 <VgaText::puts(char const*)>
c0026f37:	83 c4 10             	add    esp,0x10
c0026f3a:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026f3f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026f45:	83 ec 08             	sub    esp,0x8
c0026f48:	68 0d 3a 03 c0       	push   0xc0033a0d
c0026f4d:	50                   	push   eax
c0026f4e:	e8 0d 07 ff ff       	call   c0017660 <VgaText::puts(char const*)>
c0026f53:	83 c4 10             	add    esp,0x10
c0026f56:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026f5b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026f61:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026f65:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0026f68:	83 ec 08             	sub    esp,0x8
c0026f6b:	52                   	push   edx
c0026f6c:	50                   	push   eax
c0026f6d:	e8 a8 06 ff ff       	call   c001761a <VgaText::putx(unsigned int)>
c0026f72:	83 c4 10             	add    esp,0x10
c0026f75:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026f7a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026f80:	83 ec 08             	sub    esp,0x8
c0026f83:	68 15 3a 03 c0       	push   0xc0033a15
c0026f88:	50                   	push   eax
c0026f89:	e8 d2 06 ff ff       	call   c0017660 <VgaText::puts(char const*)>
c0026f8e:	83 c4 10             	add    esp,0x10
c0026f91:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026f96:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026f9c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026fa0:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0026fa3:	83 ec 08             	sub    esp,0x8
c0026fa6:	52                   	push   edx
c0026fa7:	50                   	push   eax
c0026fa8:	e8 6d 06 ff ff       	call   c001761a <VgaText::putx(unsigned int)>
c0026fad:	83 c4 10             	add    esp,0x10
c0026fb0:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026fb5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026fbb:	83 ec 08             	sub    esp,0x8
c0026fbe:	68 1d 3a 03 c0       	push   0xc0033a1d
c0026fc3:	50                   	push   eax
c0026fc4:	e8 97 06 ff ff       	call   c0017660 <VgaText::puts(char const*)>
c0026fc9:	83 c4 10             	add    esp,0x10
c0026fcc:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026fd1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026fd7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026fdb:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0026fde:	83 ec 08             	sub    esp,0x8
c0026fe1:	52                   	push   edx
c0026fe2:	50                   	push   eax
c0026fe3:	e8 32 06 ff ff       	call   c001761a <VgaText::putx(unsigned int)>
c0026fe8:	83 c4 10             	add    esp,0x10
c0026feb:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0026ff0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026ff6:	83 ec 08             	sub    esp,0x8
c0026ff9:	68 25 3a 03 c0       	push   0xc0033a25
c0026ffe:	50                   	push   eax
c0026fff:	e8 5c 06 ff ff       	call   c0017660 <VgaText::puts(char const*)>
c0027004:	83 c4 10             	add    esp,0x10
c0027007:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c002700c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0027012:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027016:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0027019:	83 ec 08             	sub    esp,0x8
c002701c:	52                   	push   edx
c002701d:	50                   	push   eax
c002701e:	e8 f7 05 ff ff       	call   c001761a <VgaText::putx(unsigned int)>
c0027023:	83 c4 10             	add    esp,0x10
c0027026:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c002702b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0027031:	83 ec 08             	sub    esp,0x8
c0027034:	68 2d 3a 03 c0       	push   0xc0033a2d
c0027039:	50                   	push   eax
c002703a:	e8 21 06 ff ff       	call   c0017660 <VgaText::puts(char const*)>
c002703f:	83 c4 10             	add    esp,0x10
c0027042:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0027047:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002704d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027051:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0027054:	83 ec 08             	sub    esp,0x8
c0027057:	52                   	push   edx
c0027058:	50                   	push   eax
c0027059:	e8 bc 05 ff ff       	call   c001761a <VgaText::putx(unsigned int)>
c002705e:	83 c4 10             	add    esp,0x10
c0027061:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0027066:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002706c:	83 ec 08             	sub    esp,0x8
c002706f:	68 35 3a 03 c0       	push   0xc0033a35
c0027074:	50                   	push   eax
c0027075:	e8 e6 05 ff ff       	call   c0017660 <VgaText::puts(char const*)>
c002707a:	83 c4 10             	add    esp,0x10
c002707d:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0027082:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0027088:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002708c:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c002708f:	83 ec 08             	sub    esp,0x8
c0027092:	52                   	push   edx
c0027093:	50                   	push   eax
c0027094:	e8 81 05 ff ff       	call   c001761a <VgaText::putx(unsigned int)>
c0027099:	83 c4 10             	add    esp,0x10
c002709c:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c00270a1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00270a7:	83 ec 08             	sub    esp,0x8
c00270aa:	68 3d 3a 03 c0       	push   0xc0033a3d
c00270af:	50                   	push   eax
c00270b0:	e8 ab 05 ff ff       	call   c0017660 <VgaText::puts(char const*)>
c00270b5:	83 c4 10             	add    esp,0x10
c00270b8:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c00270bd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00270c3:	83 ec 08             	sub    esp,0x8
c00270c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00270ca:	50                   	push   eax
c00270cb:	e8 4a 05 ff ff       	call   c001761a <VgaText::putx(unsigned int)>
c00270d0:	83 c4 10             	add    esp,0x10
c00270d3:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c00270d8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00270de:	83 ec 08             	sub    esp,0x8
c00270e1:	68 46 3a 03 c0       	push   0xc0033a46
c00270e6:	50                   	push   eax
c00270e7:	e8 74 05 ff ff       	call   c0017660 <VgaText::puts(char const*)>
c00270ec:	83 c4 10             	add    esp,0x10
c00270ef:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c00270f4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00270fa:	83 ec 08             	sub    esp,0x8
c00270fd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0027101:	50                   	push   eax
c0027102:	e8 13 05 ff ff       	call   c001761a <VgaText::putx(unsigned int)>
c0027107:	83 c4 10             	add    esp,0x10
c002710a:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c002710f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0027115:	83 ec 08             	sub    esp,0x8
c0027118:	68 4e 3a 03 c0       	push   0xc0033a4e
c002711d:	50                   	push   eax
c002711e:	e8 3d 05 ff ff       	call   c0017660 <VgaText::puts(char const*)>
c0027123:	83 c4 10             	add    esp,0x10
c0027126:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c002712b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0027131:	83 ec 08             	sub    esp,0x8
c0027134:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0027138:	50                   	push   eax
c0027139:	e8 dc 04 ff ff       	call   c001761a <VgaText::putx(unsigned int)>
c002713e:	83 c4 10             	add    esp,0x10
c0027141:	fa                   	cli    
c0027142:	f4                   	hlt    
c0027143:	eb fe                	jmp    c0027143 <displayDebugInfo(regs*)+0x383>

c0027145 <HalSystemIdle()>:
c0027145:	56                   	push   esi
c0027146:	53                   	push   ebx
c0027147:	83 ec 14             	sub    esp,0x14
c002714a:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c002714f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0027155:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c002715b:	83 e0 04             	and    eax,0x4
c002715e:	0f b6 c0             	movzx  eax,al
c0027161:	85 c0                	test   eax,eax
c0027163:	0f 95 c0             	setne  al
c0027166:	0f b6 c0             	movzx  eax,al
c0027169:	85 c0                	test   eax,eax
c002716b:	74 4c                	je     c00271b9 <HalSystemIdle()+0x74>
c002716d:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0027172:	83 ec 08             	sub    esp,0x8
c0027175:	68 e1 00 00 00       	push   0xe1
c002717a:	50                   	push   eax
c002717b:	e8 9c ea fe ff       	call   c0015c1c <Computer::rdmsr(unsigned int)>
c0027180:	83 c4 10             	add    esp,0x10
c0027183:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027187:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002718b:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0027190:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0027194:	83 e2 02             	and    edx,0x2
c0027197:	89 d3                	mov    ebx,edx
c0027199:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002719d:	83 e2 00             	and    edx,0x0
c00271a0:	89 d6                	mov    esi,edx
c00271a2:	56                   	push   esi
c00271a3:	53                   	push   ebx
c00271a4:	68 e1 00 00 00       	push   0xe1
c00271a9:	50                   	push   eax
c00271aa:	e8 99 ea fe ff       	call   c0015c48 <Computer::wrmsr(unsigned int, unsigned long long)>
c00271af:	83 c4 10             	add    esp,0x10
c00271b2:	e8 dd 8f fd ff       	call   c0000194 <doTPAUSE>
c00271b7:	eb 01                	jmp    c00271ba <HalSystemIdle()+0x75>
c00271b9:	f4                   	hlt    
c00271ba:	90                   	nop
c00271bb:	83 c4 14             	add    esp,0x14
c00271be:	5b                   	pop    ebx
c00271bf:	5e                   	pop    esi
c00271c0:	c3                   	ret    

c00271c1 <displayProgramFault(char const*)>:
c00271c1:	83 ec 0c             	sub    esp,0xc
c00271c4:	83 ec 0c             	sub    esp,0xc
c00271c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00271cb:	e8 ee 22 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c00271d0:	83 c4 10             	add    esp,0x10
c00271d3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00271d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00271da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00271dd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00271e3:	85 c0                	test   eax,eax
c00271e5:	74 21                	je     c0027208 <displayProgramFault(char const*)+0x47>
c00271e7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00271ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00271ee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00271f1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00271f7:	6a 04                	push   0x4
c00271f9:	6a 0f                	push   0xf
c00271fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00271ff:	50                   	push   eax
c0027200:	e8 cd 04 ff ff       	call   c00176d2 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0027205:	83 c4 10             	add    esp,0x10
c0027208:	90                   	nop
c0027209:	83 c4 0c             	add    esp,0xc
c002720c:	c3                   	ret    

c002720d <gpFault(regs*, void*)>:
c002720d:	83 ec 1c             	sub    esp,0x1c
c0027210:	c7 05 74 12 04 c0 63 66 02 c0 	mov    DWORD PTR ds:0xc0041274,0xc0026663
c002721a:	a1 74 12 04 c0       	mov    eax,ds:0xc0041274
c002721f:	85 c0                	test   eax,eax
c0027221:	74 1e                	je     c0027241 <gpFault(regs*, void*)+0x34>
c0027223:	a1 74 12 04 c0       	mov    eax,ds:0xc0041274
c0027228:	83 ec 0c             	sub    esp,0xc
c002722b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002722f:	ff d0                	call   eax
c0027231:	83 c4 10             	add    esp,0x10
c0027234:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0027238:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002723d:	85 c0                	test   eax,eax
c002723f:	75 2e                	jne    c002726f <gpFault(regs*, void*)+0x62>
c0027241:	83 ec 0c             	sub    esp,0xc
c0027244:	68 56 3a 03 c0       	push   0xc0033a56
c0027249:	e8 73 ff ff ff       	call   c00271c1 <displayProgramFault(char const*)>
c002724e:	83 c4 10             	add    esp,0x10
c0027251:	83 ec 0c             	sub    esp,0xc
c0027254:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027258:	e8 63 fb ff ff       	call   c0026dc0 <displayDebugInfo(regs*)>
c002725d:	83 c4 10             	add    esp,0x10
c0027260:	83 ec 0c             	sub    esp,0xc
c0027263:	6a 00                	push   0x0
c0027265:	e8 4e ed ff ff       	call   c0025fb8 <Thr::terminateFromIRQ(int)>
c002726a:	83 c4 10             	add    esp,0x10
c002726d:	eb 01                	jmp    c0027270 <gpFault(regs*, void*)+0x63>
c002726f:	90                   	nop
c0027270:	83 c4 1c             	add    esp,0x1c
c0027273:	c3                   	ret    

c0027274 <pgFault(regs*, void*)>:
c0027274:	83 ec 1c             	sub    esp,0x1c
c0027277:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002727b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c002727e:	0f 20 d0             	mov    eax,cr2
c0027281:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027285:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027289:	83 ec 04             	sub    esp,0x4
c002728c:	52                   	push   edx
c002728d:	50                   	push   eax
c002728e:	68 d8 3a 03 c0       	push   0xc0033ad8
c0027293:	e8 26 22 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0027298:	83 c4 10             	add    esp,0x10
c002729b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00272a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00272a2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00272a5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00272ab:	0f 20 d2             	mov    edx,cr2
c00272ae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00272b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00272b6:	83 ec 08             	sub    esp,0x8
c00272b9:	52                   	push   edx
c00272ba:	50                   	push   eax
c00272bb:	e8 6e 1c ff ff       	call   c0018f2e <VAS::tryLoadBackOffDisk(unsigned long)>
c00272c0:	83 c4 10             	add    esp,0x10
c00272c3:	0f b6 c0             	movzx  eax,al
c00272c6:	85 c0                	test   eax,eax
c00272c8:	75 2e                	jne    c00272f8 <pgFault(regs*, void*)+0x84>
c00272ca:	83 ec 0c             	sub    esp,0xc
c00272cd:	68 6f 3a 03 c0       	push   0xc0033a6f
c00272d2:	e8 ea fe ff ff       	call   c00271c1 <displayProgramFault(char const*)>
c00272d7:	83 c4 10             	add    esp,0x10
c00272da:	83 ec 0c             	sub    esp,0xc
c00272dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00272e1:	e8 da fa ff ff       	call   c0026dc0 <displayDebugInfo(regs*)>
c00272e6:	83 c4 10             	add    esp,0x10
c00272e9:	83 ec 0c             	sub    esp,0xc
c00272ec:	6a 00                	push   0x0
c00272ee:	e8 c5 ec ff ff       	call   c0025fb8 <Thr::terminateFromIRQ(int)>
c00272f3:	83 c4 10             	add    esp,0x10
c00272f6:	eb 01                	jmp    c00272f9 <pgFault(regs*, void*)+0x85>
c00272f8:	90                   	nop
c00272f9:	83 c4 1c             	add    esp,0x1c
c00272fc:	c3                   	ret    

c00272fd <otherISRHandler(regs*, void*)>:
c00272fd:	83 ec 0c             	sub    esp,0xc
c0027300:	83 ec 0c             	sub    esp,0xc
c0027303:	68 00 3b 03 c0       	push   0xc0033b00
c0027308:	e8 b4 fe ff ff       	call   c00271c1 <displayProgramFault(char const*)>
c002730d:	83 c4 10             	add    esp,0x10
c0027310:	83 ec 0c             	sub    esp,0xc
c0027313:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027317:	e8 a4 fa ff ff       	call   c0026dc0 <displayDebugInfo(regs*)>
c002731c:	83 c4 10             	add    esp,0x10
c002731f:	83 ec 0c             	sub    esp,0xc
c0027322:	6a 00                	push   0x0
c0027324:	e8 8f ec ff ff       	call   c0025fb8 <Thr::terminateFromIRQ(int)>
c0027329:	83 c4 10             	add    esp,0x10
c002732c:	90                   	nop
c002732d:	83 c4 0c             	add    esp,0xc
c0027330:	c3                   	ret    

c0027331 <opcodeFault(regs*, void*)>:
c0027331:	55                   	push   ebp
c0027332:	89 e5                	mov    ebp,esp
c0027334:	83 ec 08             	sub    esp,0x8
c0027337:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002733a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002733d:	83 ec 08             	sub    esp,0x8
c0027340:	50                   	push   eax
c0027341:	68 7a 3a 03 c0       	push   0xc0033a7a
c0027346:	e8 73 21 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c002734b:	83 c4 10             	add    esp,0x10
c002734e:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0027353:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0027359:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c002735f:	0f b6 c0             	movzx  eax,al
c0027362:	85 c0                	test   eax,eax
c0027364:	74 21                	je     c0027387 <opcodeFault(regs*, void*)+0x56>
c0027366:	83 ec 0c             	sub    esp,0xc
c0027369:	68 28 3b 03 c0       	push   0xc0033b28
c002736e:	e8 4b 21 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0027373:	83 c4 10             	add    esp,0x10
c0027376:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027379:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002737c:	8d 50 19             	lea    edx,[eax+0x19]
c002737f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027382:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0027385:	eb 2b                	jmp    c00273b2 <opcodeFault(regs*, void*)+0x81>
c0027387:	83 ec 0c             	sub    esp,0xc
c002738a:	68 88 3a 03 c0       	push   0xc0033a88
c002738f:	e8 2d fe ff ff       	call   c00271c1 <displayProgramFault(char const*)>
c0027394:	83 c4 10             	add    esp,0x10
c0027397:	83 ec 0c             	sub    esp,0xc
c002739a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002739d:	e8 1e fa ff ff       	call   c0026dc0 <displayDebugInfo(regs*)>
c00273a2:	83 c4 10             	add    esp,0x10
c00273a5:	83 ec 0c             	sub    esp,0xc
c00273a8:	6a 00                	push   0x0
c00273aa:	e8 09 ec ff ff       	call   c0025fb8 <Thr::terminateFromIRQ(int)>
c00273af:	83 c4 10             	add    esp,0x10
c00273b2:	c9                   	leave  
c00273b3:	c3                   	ret    

c00273b4 <i386SaveCoprocessor(void*)>:
c00273b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00273b8:	83 c0 3f             	add    eax,0x3f
c00273bb:	83 e0 c0             	and    eax,0xffffffc0
c00273be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00273c2:	ff 25 70 12 04 c0    	jmp    DWORD PTR ds:0xc0041270

c00273c8 <i386LoadCoprocessor(void*)>:
c00273c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00273cc:	83 c0 3f             	add    eax,0x3f
c00273cf:	83 e0 c0             	and    eax,0xffffffc0
c00273d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00273d6:	ff 25 6c 12 04 c0    	jmp    DWORD PTR ds:0xc004126c

c00273dc <x87EmulHandler(regs*, void*)>:
c00273dc:	53                   	push   ebx
c00273dd:	83 ec 08             	sub    esp,0x8
c00273e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00273e5:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00273e9:	74 10                	je     c00273fb <x87EmulHandler(regs*, void*)+0x1f>
c00273eb:	83 ec 0c             	sub    esp,0xc
c00273ee:	68 95 3a 03 c0       	push   0xc0033a95
c00273f3:	e8 0a 93 ff ff       	call   c0020702 <KePanic(char const*)>
c00273f8:	83 c4 10             	add    esp,0x10
c00273fb:	0f 20 c0             	mov    eax,cr0
c00273fe:	a8 08                	test   al,0x8
c0027400:	74 59                	je     c002745b <x87EmulHandler(regs*, void*)+0x7f>
c0027402:	0f 06                	clts   
c0027404:	a1 68 12 04 c0       	mov    eax,ds:0xc0041268
c0027409:	85 c0                	test   eax,eax
c002740b:	74 0e                	je     c002741b <x87EmulHandler(regs*, void*)+0x3f>
c002740d:	83 ec 0c             	sub    esp,0xc
c0027410:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0027413:	e8 9c ff ff ff       	call   c00273b4 <i386SaveCoprocessor(void*)>
c0027418:	83 c4 10             	add    esp,0x10
c002741b:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0027421:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0027425:	75 12                	jne    c0027439 <x87EmulHandler(regs*, void*)+0x5d>
c0027427:	83 ec 0c             	sub    esp,0xc
c002742a:	68 40 02 00 00       	push   0x240
c002742f:	e8 54 f2 fe ff       	call   c0016688 <malloc>
c0027434:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0027437:	eb 10                	jmp    c0027449 <x87EmulHandler(regs*, void*)+0x6d>
c0027439:	a1 68 12 04 c0       	mov    eax,ds:0xc0041268
c002743e:	83 ec 0c             	sub    esp,0xc
c0027441:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0027444:	e8 7f ff ff ff       	call   c00273c8 <i386LoadCoprocessor(void*)>
c0027449:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002744e:	83 c4 10             	add    esp,0x10
c0027451:	a3 68 12 04 c0       	mov    ds:0xc0041268,eax
c0027456:	83 c4 08             	add    esp,0x8
c0027459:	5b                   	pop    ebx
c002745a:	c3                   	ret    
c002745b:	83 ec 0c             	sub    esp,0xc
c002745e:	68 a9 3a 03 c0       	push   0xc0033aa9
c0027463:	e8 56 20 ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0027468:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0027470:	83 c4 18             	add    esp,0x18
c0027473:	5b                   	pop    ebx
c0027474:	e9 3f eb ff ff       	jmp    c0025fb8 <Thr::terminateFromIRQ(int)>

c0027479 <HalInitialiseCoprocessor()>:
c0027479:	83 ec 10             	sub    esp,0x10
c002747c:	6a 00                	push   0x0
c002747e:	68 dc 73 02 c0       	push   0xc00273dc
c0027483:	6a 07                	push   0x7
c0027485:	c7 05 68 12 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0041268,0x0
c002748f:	e8 c2 46 ff ff       	call   c001bb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027494:	e8 27 73 00 00       	call   c002e7c0 <avxDetect>
c0027499:	83 c4 10             	add    esp,0x10
c002749c:	85 c0                	test   eax,eax
c002749e:	74 1c                	je     c00274bc <HalInitialiseCoprocessor()+0x43>
c00274a0:	c7 05 70 12 04 c0 ea e7 02 c0 	mov    DWORD PTR ds:0xc0041270,0xc002e7ea
c00274aa:	c7 05 6c 12 04 c0 fb e7 02 c0 	mov    DWORD PTR ds:0xc004126c,0xc002e7fb
c00274b4:	83 c4 0c             	add    esp,0xc
c00274b7:	e9 50 73 00 00       	jmp    c002e80c <avxInit>
c00274bc:	e8 6f 76 00 00       	call   c002eb30 <sseDetect>
c00274c1:	85 c0                	test   eax,eax
c00274c3:	74 1c                	je     c00274e1 <HalInitialiseCoprocessor()+0x68>
c00274c5:	c7 05 70 12 04 c0 48 eb 02 c0 	mov    DWORD PTR ds:0xc0041270,0xc002eb48
c00274cf:	c7 05 6c 12 04 c0 50 eb 02 c0 	mov    DWORD PTR ds:0xc004126c,0xc002eb50
c00274d9:	83 c4 0c             	add    esp,0xc
c00274dc:	e9 77 76 00 00       	jmp    c002eb58 <sseInit>
c00274e1:	e8 90 76 00 00       	call   c002eb76 <x87Detect>
c00274e6:	85 c0                	test   eax,eax
c00274e8:	74 1c                	je     c0027506 <HalInitialiseCoprocessor()+0x8d>
c00274ea:	c7 05 70 12 04 c0 91 eb 02 c0 	mov    DWORD PTR ds:0xc0041270,0xc002eb91
c00274f4:	c7 05 6c 12 04 c0 98 eb 02 c0 	mov    DWORD PTR ds:0xc004126c,0xc002eb98
c00274fe:	83 c4 0c             	add    esp,0xc
c0027501:	e9 99 76 00 00       	jmp    c002eb9f <x87Init>
c0027506:	c7 05 70 12 04 c0 8d 6d 02 c0 	mov    DWORD PTR ds:0xc0041270,0xc0026d8d
c0027510:	c7 05 6c 12 04 c0 8d 6d 02 c0 	mov    DWORD PTR ds:0xc004126c,0xc0026d8d
c002751a:	0f 20 c0             	mov    eax,cr0
c002751d:	83 c8 04             	or     eax,0x4
c0027520:	0f 22 c0             	mov    cr0,eax
c0027523:	83 c4 0c             	add    esp,0xc
c0027526:	c3                   	ret    

c0027527 <HalPanic(char const*)>:
c0027527:	83 ec 14             	sub    esp,0x14
c002752a:	fa                   	cli    
c002752b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002752f:	68 bf 3a 03 c0       	push   0xc0033abf
c0027534:	e8 85 1f ff ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0027539:	83 c4 1c             	add    esp,0x1c
c002753c:	c3                   	ret    

c002753d <HalQueryPerformanceCounter()>:
c002753d:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0027542:	31 d2                	xor    edx,edx
c0027544:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c002754a:	31 c0                	xor    eax,eax
c002754c:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0027553:	74 02                	je     c0027557 <HalQueryPerformanceCounter()+0x1a>
c0027555:	0f 31                	rdtsc  
c0027557:	c3                   	ret    

c0027558 <HalInitialise()>:
c0027558:	53                   	push   ebx
c0027559:	83 ec 08             	sub    esp,0x8
c002755c:	e8 2c 48 ff ff       	call   c001bd8d <setupINTS()>
c0027561:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0027566:	80 3d e0 06 04 c0 00 	cmp    BYTE PTR ds:0xc00406e0,0x0
c002756d:	75 0f                	jne    c002757e <HalInitialise()+0x26>
c002756f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0027575:	83 e2 fe             	and    edx,0xfffffffe
c0027578:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c002757e:	c6 05 60 12 04 c0 00 	mov    BYTE PTR ds:0xc0041260,0x0
c0027585:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c002758b:	83 e2 fe             	and    edx,0xfffffffe
c002758e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0027594:	e8 9f 02 00 00       	call   c0027838 <picOpen()>
c0027599:	80 3d 60 12 04 c0 00 	cmp    BYTE PTR ds:0xc0041260,0x0
c00275a0:	74 0a                	je     c00275ac <HalInitialise()+0x54>
c00275a2:	e8 e1 01 00 00       	call   c0027788 <picDisable()>
c00275a7:	e8 84 6b 00 00       	call   c002e130 <apicOpen()>
c00275ac:	50                   	push   eax
c00275ad:	bb 0f 00 00 00       	mov    ebx,0xf
c00275b2:	6a 00                	push   0x0
c00275b4:	68 fd 72 02 c0       	push   0xc00272fd
c00275b9:	6a 00                	push   0x0
c00275bb:	e8 96 45 ff ff       	call   c001bb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00275c0:	83 c4 0c             	add    esp,0xc
c00275c3:	6a 00                	push   0x0
c00275c5:	68 fd 72 02 c0       	push   0xc00272fd
c00275ca:	6a 01                	push   0x1
c00275cc:	e8 85 45 ff ff       	call   c001bb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00275d1:	83 c4 0c             	add    esp,0xc
c00275d4:	6a 00                	push   0x0
c00275d6:	68 8e 6d 02 c0       	push   0xc0026d8e
c00275db:	6a 02                	push   0x2
c00275dd:	e8 74 45 ff ff       	call   c001bb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00275e2:	83 c4 0c             	add    esp,0xc
c00275e5:	6a 00                	push   0x0
c00275e7:	68 fd 72 02 c0       	push   0xc00272fd
c00275ec:	6a 03                	push   0x3
c00275ee:	e8 63 45 ff ff       	call   c001bb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00275f3:	83 c4 0c             	add    esp,0xc
c00275f6:	6a 00                	push   0x0
c00275f8:	68 fd 72 02 c0       	push   0xc00272fd
c00275fd:	6a 04                	push   0x4
c00275ff:	e8 52 45 ff ff       	call   c001bb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027604:	83 c4 0c             	add    esp,0xc
c0027607:	6a 00                	push   0x0
c0027609:	68 fd 72 02 c0       	push   0xc00272fd
c002760e:	6a 05                	push   0x5
c0027610:	e8 41 45 ff ff       	call   c001bb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027615:	83 c4 0c             	add    esp,0xc
c0027618:	6a 00                	push   0x0
c002761a:	68 31 73 02 c0       	push   0xc0027331
c002761f:	6a 06                	push   0x6
c0027621:	e8 30 45 ff ff       	call   c001bb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027626:	83 c4 0c             	add    esp,0xc
c0027629:	6a 00                	push   0x0
c002762b:	68 a7 6d 02 c0       	push   0xc0026da7
c0027630:	6a 08                	push   0x8
c0027632:	e8 1f 45 ff ff       	call   c001bb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027637:	83 c4 0c             	add    esp,0xc
c002763a:	6a 00                	push   0x0
c002763c:	68 fd 72 02 c0       	push   0xc00272fd
c0027641:	6a 09                	push   0x9
c0027643:	e8 0e 45 ff ff       	call   c001bb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027648:	83 c4 0c             	add    esp,0xc
c002764b:	6a 00                	push   0x0
c002764d:	68 fd 72 02 c0       	push   0xc00272fd
c0027652:	6a 0a                	push   0xa
c0027654:	e8 fd 44 ff ff       	call   c001bb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027659:	83 c4 0c             	add    esp,0xc
c002765c:	6a 00                	push   0x0
c002765e:	68 fd 72 02 c0       	push   0xc00272fd
c0027663:	6a 0b                	push   0xb
c0027665:	e8 ec 44 ff ff       	call   c001bb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c002766a:	83 c4 0c             	add    esp,0xc
c002766d:	6a 00                	push   0x0
c002766f:	68 0d 72 02 c0       	push   0xc002720d
c0027674:	6a 0d                	push   0xd
c0027676:	e8 db 44 ff ff       	call   c001bb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c002767b:	83 c4 0c             	add    esp,0xc
c002767e:	6a 00                	push   0x0
c0027680:	68 74 72 02 c0       	push   0xc0027274
c0027685:	6a 0e                	push   0xe
c0027687:	e8 ca 44 ff ff       	call   c001bb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c002768c:	83 c4 10             	add    esp,0x10
c002768f:	50                   	push   eax
c0027690:	6a 00                	push   0x0
c0027692:	68 fd 72 02 c0       	push   0xc00272fd
c0027697:	53                   	push   ebx
c0027698:	43                   	inc    ebx
c0027699:	e8 b8 44 ff ff       	call   c001bb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c002769e:	83 c4 10             	add    esp,0x10
c00276a1:	83 fb 1e             	cmp    ebx,0x1e
c00276a4:	75 e9                	jne    c002768f <HalInitialise()+0x137>
c00276a6:	50                   	push   eax
c00276a7:	6a 00                	push   0x0
c00276a9:	68 cc 1f 02 c0       	push   0xc0021fcc
c00276ae:	6a 60                	push   0x60
c00276b0:	e8 a1 44 ff ff       	call   c001bb56 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00276b5:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c00276ba:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00276c4:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00276cb:	e8 b8 ef fe ff       	call   c0016688 <malloc>
c00276d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00276d3:	89 c3                	mov    ebx,eax
c00276d5:	e8 36 09 00 00       	call   c0028010 <RTC::RTC()>
c00276da:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00276e4:	5a                   	pop    edx
c00276e5:	59                   	pop    ecx
c00276e6:	53                   	push   ebx
c00276e7:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c00276ed:	e8 18 3f ff ff       	call   c001b60a <Device::addChild(Device*)>
c00276f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00276f4:	6a 00                	push   0x0
c00276f6:	6a 00                	push   0x0
c00276f8:	6a 00                	push   0x0
c00276fa:	53                   	push   ebx
c00276fb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00276fe:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0027703:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0027709:	83 c4 28             	add    esp,0x28
c002770c:	5b                   	pop    ebx
c002770d:	c3                   	ret    

c002770e <HalMakeBeep(int)>:
c002770e:	53                   	push   ebx
c002770f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0027713:	85 db                	test   ebx,ebx
c0027715:	75 07                	jne    c002771e <HalMakeBeep(int)+0x10>
c0027717:	e4 61                	in     al,0x61
c0027719:	83 e0 fc             	and    eax,0xfffffffc
c002771c:	eb 26                	jmp    c0027744 <HalMakeBeep(int)+0x36>
c002771e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0027723:	99                   	cdq    
c0027724:	f7 fb                	idiv   ebx
c0027726:	89 c1                	mov    ecx,eax
c0027728:	b0 b6                	mov    al,0xb6
c002772a:	e6 43                	out    0x43,al
c002772c:	88 c8                	mov    al,cl
c002772e:	e6 42                	out    0x42,al
c0027730:	89 c8                	mov    eax,ecx
c0027732:	c1 e8 08             	shr    eax,0x8
c0027735:	e6 42                	out    0x42,al
c0027737:	e4 61                	in     al,0x61
c0027739:	89 c2                	mov    edx,eax
c002773b:	83 ca 03             	or     edx,0x3
c002773e:	38 d0                	cmp    al,dl
c0027740:	74 04                	je     c0027746 <HalMakeBeep(int)+0x38>
c0027742:	88 d0                	mov    al,dl
c0027744:	e6 61                	out    0x61,al
c0027746:	5b                   	pop    ebx
c0027747:	c3                   	ret    

c0027748 <HalGetRand()>:
c0027748:	31 c0                	xor    eax,eax
c002774a:	c3                   	ret    

c002774b <HalEndOfInterrupt(int)>:
c002774b:	80 3d 60 12 04 c0 00 	cmp    BYTE PTR ds:0xc0041260,0x0
c0027752:	74 23                	je     c0027777 <HalEndOfInterrupt(int)+0x2c>
c0027754:	83 ec 14             	sub    esp,0x14
c0027757:	6a 1b                	push   0x1b
c0027759:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c002775f:	e8 b8 e4 fe ff       	call   c0015c1c <Computer::rdmsr(unsigned int)>
c0027764:	25 00 f0 ff ff       	and    eax,0xfffff000
c0027769:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0027773:	83 c4 1c             	add    esp,0x1c
c0027776:	c3                   	ret    
c0027777:	e9 40 02 00 00       	jmp    c00279bc <picEOI(int)>

c002777c <HalRestart()>:
c002777c:	c3                   	ret    

c002777d <HalShutdown()>:
c002777d:	c3                   	ret    

c002777e <HalSleep()>:
c002777e:	c3                   	ret    
c002777f:	90                   	nop

c0027780 <picIoWait()>:
c0027780:	eb 00                	jmp    c0027782 <picIoWait()+0x2>
c0027782:	eb 00                	jmp    c0027784 <picIoWait()+0x4>
c0027784:	90                   	nop
c0027785:	c3                   	ret    
c0027786:	66 90                	xchg   ax,ax

c0027788 <picDisable()>:
c0027788:	83 ec 10             	sub    esp,0x10
c002778b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0027792:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0027797:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002779b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00277a0:	ee                   	out    dx,al
c00277a1:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00277a8:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00277ad:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00277b1:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00277b6:	ee                   	out    dx,al
c00277b7:	90                   	nop
c00277b8:	83 c4 10             	add    esp,0x10
c00277bb:	c3                   	ret    

c00277bc <picGetIRQReg(int)>:
c00277bc:	83 ec 10             	sub    esp,0x10
c00277bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00277c3:	0f b6 c0             	movzx  eax,al
c00277c6:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00277cd:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00277d1:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00277d5:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00277da:	ee                   	out    dx,al
c00277db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00277df:	0f b6 c0             	movzx  eax,al
c00277e2:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00277e9:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00277ed:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00277f1:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00277f6:	ee                   	out    dx,al
c00277f7:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00277fe:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0027803:	89 c2                	mov    edx,eax
c0027805:	ec                   	in     al,dx
c0027806:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002780a:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002780e:	0f b6 c0             	movzx  eax,al
c0027811:	c1 e0 08             	shl    eax,0x8
c0027814:	89 c1                	mov    ecx,eax
c0027816:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c002781d:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0027822:	89 c2                	mov    edx,eax
c0027824:	ec                   	in     al,dx
c0027825:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0027829:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c002782d:	0f b6 c0             	movzx  eax,al
c0027830:	09 c8                	or     eax,ecx
c0027832:	83 c4 10             	add    esp,0x10
c0027835:	c3                   	ret    
c0027836:	66 90                	xchg   ax,ax

c0027838 <picOpen()>:
c0027838:	83 ec 50             	sub    esp,0x50
c002783b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0027842:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0027847:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002784b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002784f:	ee                   	out    dx,al
c0027850:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0027857:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c002785c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0027860:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027864:	ee                   	out    dx,al
c0027865:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c002786d:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0027875:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c002787c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027880:	89 c2                	mov    edx,eax
c0027882:	ec                   	in     al,dx
c0027883:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0027887:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c002788b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c002788f:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0027896:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002789a:	89 c2                	mov    edx,eax
c002789c:	ec                   	in     al,dx
c002789d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00278a1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00278a5:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00278a9:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00278b0:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00278b5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00278b9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00278bd:	ee                   	out    dx,al
c00278be:	e8 bd fe ff ff       	call   c0027780 <picIoWait()>
c00278c3:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00278ca:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00278cf:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00278d3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00278d7:	ee                   	out    dx,al
c00278d8:	e8 a3 fe ff ff       	call   c0027780 <picIoWait()>
c00278dd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00278e1:	0f b6 c0             	movzx  eax,al
c00278e4:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00278eb:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00278ef:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00278f3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00278f7:	ee                   	out    dx,al
c00278f8:	e8 83 fe ff ff       	call   c0027780 <picIoWait()>
c00278fd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027901:	0f b6 c0             	movzx  eax,al
c0027904:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c002790b:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c002790f:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0027913:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0027917:	ee                   	out    dx,al
c0027918:	e8 63 fe ff ff       	call   c0027780 <picIoWait()>
c002791d:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0027924:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0027929:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c002792d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0027931:	ee                   	out    dx,al
c0027932:	e8 49 fe ff ff       	call   c0027780 <picIoWait()>
c0027937:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c002793e:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0027943:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0027947:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002794b:	ee                   	out    dx,al
c002794c:	e8 2f fe ff ff       	call   c0027780 <picIoWait()>
c0027951:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0027958:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c002795d:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0027961:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0027965:	ee                   	out    dx,al
c0027966:	e8 15 fe ff ff       	call   c0027780 <picIoWait()>
c002796b:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0027972:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0027977:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c002797b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002797f:	ee                   	out    dx,al
c0027980:	e8 fb fd ff ff       	call   c0027780 <picIoWait()>
c0027985:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c002798a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0027991:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0027995:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0027999:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c002799d:	ee                   	out    dx,al
c002799e:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00279a3:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00279aa:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00279ae:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00279b2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00279b6:	ee                   	out    dx,al
c00279b7:	90                   	nop
c00279b8:	83 c4 50             	add    esp,0x50
c00279bb:	c3                   	ret    

c00279bc <picEOI(int)>:
c00279bc:	83 ec 10             	sub    esp,0x10
c00279bf:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00279c4:	75 1e                	jne    c00279e4 <picEOI(int)+0x28>
c00279c6:	6a 0b                	push   0xb
c00279c8:	e8 ef fd ff ff       	call   c00277bc <picGetIRQReg(int)>
c00279cd:	83 c4 04             	add    esp,0x4
c00279d0:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00279d5:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00279da:	25 80 00 00 00       	and    eax,0x80
c00279df:	74 73                	je     c0027a54 <picEOI(int)+0x98>
c00279e1:	8d 76 00             	lea    esi,[esi+0x0]
c00279e4:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00279e9:	75 31                	jne    c0027a1c <picEOI(int)+0x60>
c00279eb:	6a 0b                	push   0xb
c00279ed:	e8 ca fd ff ff       	call   c00277bc <picGetIRQReg(int)>
c00279f2:	83 c4 04             	add    esp,0x4
c00279f5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00279fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00279fe:	98                   	cwde   
c00279ff:	85 c0                	test   eax,eax
c0027a01:	78 19                	js     c0027a1c <picEOI(int)+0x60>
c0027a03:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0027a0a:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0027a0f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027a13:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0027a18:	ee                   	out    dx,al
c0027a19:	eb 3d                	jmp    c0027a58 <picEOI(int)+0x9c>
c0027a1b:	90                   	nop
c0027a1c:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0027a21:	7e 19                	jle    c0027a3c <picEOI(int)+0x80>
c0027a23:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0027a2a:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0027a2f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0027a33:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0027a38:	ee                   	out    dx,al
c0027a39:	8d 76 00             	lea    esi,[esi+0x0]
c0027a3c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0027a43:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0027a48:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0027a4c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0027a51:	ee                   	out    dx,al
c0027a52:	eb 04                	jmp    c0027a58 <picEOI(int)+0x9c>
c0027a54:	90                   	nop
c0027a55:	8d 76 00             	lea    esi,[esi+0x0]
c0027a58:	83 c4 10             	add    esp,0x10
c0027a5b:	c3                   	ret    

c0027a5c <RTC::open(int, int, void*)>:
c0027a5c:	31 c0                	xor    eax,eax
c0027a5e:	c3                   	ret    
c0027a5f:	90                   	nop

c0027a60 <RTC::close(int, int, void*)>:
c0027a60:	31 c0                	xor    eax,eax
c0027a62:	c3                   	ret    
c0027a63:	90                   	nop

c0027a64 <RTC::timeInSecondsUTC()>:
c0027a64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027a68:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0027a6e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0027a74:	c3                   	ret    
c0027a75:	90                   	nop

c0027a76 <RTC::timeInDatetimeUTC()>:
c0027a76:	53                   	push   ebx
c0027a77:	83 ec 14             	sub    esp,0x14
c0027a7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027a7e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027a82:	8b 10                	mov    edx,DWORD PTR [eax]
c0027a84:	50                   	push   eax
c0027a85:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0027a88:	83 c4 0c             	add    esp,0xc
c0027a8b:	52                   	push   edx
c0027a8c:	50                   	push   eax
c0027a8d:	53                   	push   ebx
c0027a8e:	e8 eb 38 ff ff       	call   c001b37e <secondsToDatetime(unsigned long long)>
c0027a93:	89 d8                	mov    eax,ebx
c0027a95:	83 c4 14             	add    esp,0x14
c0027a98:	5b                   	pop    ebx
c0027a99:	c2 04 00             	ret    0x4

c0027a9c <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0027a9c:	56                   	push   esi
c0027a9d:	53                   	push   ebx
c0027a9e:	83 ec 14             	sub    esp,0x14
c0027aa1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0027aa5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0027aa7:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0027aaa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0027aae:	52                   	push   edx
c0027aaf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027ab3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027ab7:	50                   	push   eax
c0027ab8:	e8 c1 38 ff ff       	call   c001b37e <secondsToDatetime(unsigned long long)>
c0027abd:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0027ac1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027ac5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027ac9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0027acd:	89 f0                	mov    eax,esi
c0027acf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0027ad3:	83 c4 20             	add    esp,0x20
c0027ad6:	5b                   	pop    ebx
c0027ad7:	5e                   	pop    esi
c0027ad8:	ff e0                	jmp    eax

c0027ada <RTC::~RTC()>:
c0027ada:	83 ec 0c             	sub    esp,0xc
c0027add:	ba 68 3b 03 c0       	mov    edx,0xc0033b68
c0027ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ae6:	89 10                	mov    DWORD PTR [eax],edx
c0027ae8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027aec:	83 ec 0c             	sub    esp,0xc
c0027aef:	50                   	push   eax
c0027af0:	e8 15 36 ff ff       	call   c001b10a <Clock::~Clock()>
c0027af5:	83 c4 10             	add    esp,0x10
c0027af8:	90                   	nop
c0027af9:	83 c4 0c             	add    esp,0xc
c0027afc:	c3                   	ret    
c0027afd:	90                   	nop

c0027afe <RTC::~RTC()>:
c0027afe:	83 ec 0c             	sub    esp,0xc
c0027b01:	83 ec 0c             	sub    esp,0xc
c0027b04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b08:	e8 cd ff ff ff       	call   c0027ada <RTC::~RTC()>
c0027b0d:	83 c4 10             	add    esp,0x10
c0027b10:	83 ec 08             	sub    esp,0x8
c0027b13:	68 60 01 00 00       	push   0x160
c0027b18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b1c:	e8 9f 18 ff ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c0027b21:	83 c4 10             	add    esp,0x10
c0027b24:	83 c4 0c             	add    esp,0xc
c0027b27:	c3                   	ret    

c0027b28 <RTC::get_update_in_progress_flag()>:
c0027b28:	83 ec 14             	sub    esp,0x14
c0027b2b:	6a 0a                	push   0xa
c0027b2d:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027b33:	e8 9c e1 fe ff       	call   c0015cd4 <Computer::readCMOS(unsigned char)>
c0027b38:	83 c4 1c             	add    esp,0x1c
c0027b3b:	0f b6 c0             	movzx  eax,al
c0027b3e:	c1 e8 07             	shr    eax,0x7
c0027b41:	c3                   	ret    

c0027b42 <RTC::completeRTCRefresh()>:
c0027b42:	55                   	push   ebp
c0027b43:	57                   	push   edi
c0027b44:	56                   	push   esi
c0027b45:	53                   	push   ebx
c0027b46:	83 ec 3c             	sub    esp,0x3c
c0027b49:	8b 1d ec 03 04 c0    	mov    ebx,DWORD PTR ds:0xc00403ec
c0027b4f:	83 ec 0c             	sub    esp,0xc
c0027b52:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0027b56:	e8 cd ff ff ff       	call   c0027b28 <RTC::get_update_in_progress_flag()>
c0027b5b:	83 c4 10             	add    esp,0x10
c0027b5e:	84 c0                	test   al,al
c0027b60:	74 0e                	je     c0027b70 <RTC::completeRTCRefresh()+0x2e>
c0027b62:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0027b68:	3b 05 ec 03 04 c0    	cmp    eax,DWORD PTR ds:0xc00403ec
c0027b6e:	73 df                	jae    c0027b4f <RTC::completeRTCRefresh()+0xd>
c0027b70:	50                   	push   eax
c0027b71:	50                   	push   eax
c0027b72:	6a 00                	push   0x0
c0027b74:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027b7a:	e8 55 e1 fe ff       	call   c0015cd4 <Computer::readCMOS(unsigned char)>
c0027b7f:	89 c7                	mov    edi,eax
c0027b81:	58                   	pop    eax
c0027b82:	5a                   	pop    edx
c0027b83:	6a 02                	push   0x2
c0027b85:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027b8b:	e8 44 e1 fe ff       	call   c0015cd4 <Computer::readCMOS(unsigned char)>
c0027b90:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0027b94:	59                   	pop    ecx
c0027b95:	5b                   	pop    ebx
c0027b96:	6a 04                	push   0x4
c0027b98:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027b9e:	e8 31 e1 fe ff       	call   c0015cd4 <Computer::readCMOS(unsigned char)>
c0027ba3:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0027ba7:	5e                   	pop    esi
c0027ba8:	5d                   	pop    ebp
c0027ba9:	6a 07                	push   0x7
c0027bab:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027bb1:	e8 1e e1 fe ff       	call   c0015cd4 <Computer::readCMOS(unsigned char)>
c0027bb6:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0027bba:	58                   	pop    eax
c0027bbb:	5a                   	pop    edx
c0027bbc:	6a 08                	push   0x8
c0027bbe:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027bc4:	e8 0b e1 fe ff       	call   c0015cd4 <Computer::readCMOS(unsigned char)>
c0027bc9:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0027bcd:	59                   	pop    ecx
c0027bce:	5b                   	pop    ebx
c0027bcf:	6a 09                	push   0x9
c0027bd1:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027bd7:	e8 f8 e0 fe ff       	call   c0015cd4 <Computer::readCMOS(unsigned char)>
c0027bdc:	0f b6 c0             	movzx  eax,al
c0027bdf:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0027be3:	83 c4 10             	add    esp,0x10
c0027be6:	8b 1d ec 03 04 c0    	mov    ebx,DWORD PTR ds:0xc00403ec
c0027bec:	83 ec 0c             	sub    esp,0xc
c0027bef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0027bf3:	e8 30 ff ff ff       	call   c0027b28 <RTC::get_update_in_progress_flag()>
c0027bf8:	83 c4 10             	add    esp,0x10
c0027bfb:	84 c0                	test   al,al
c0027bfd:	74 0e                	je     c0027c0d <RTC::completeRTCRefresh()+0xcb>
c0027bff:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0027c05:	3b 05 ec 03 04 c0    	cmp    eax,DWORD PTR ds:0xc00403ec
c0027c0b:	73 df                	jae    c0027bec <RTC::completeRTCRefresh()+0xaa>
c0027c0d:	51                   	push   ecx
c0027c0e:	51                   	push   ecx
c0027c0f:	6a 00                	push   0x0
c0027c11:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027c17:	e8 b8 e0 fe ff       	call   c0015cd4 <Computer::readCMOS(unsigned char)>
c0027c1c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0027c20:	5b                   	pop    ebx
c0027c21:	5e                   	pop    esi
c0027c22:	6a 02                	push   0x2
c0027c24:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027c2a:	e8 a5 e0 fe ff       	call   c0015cd4 <Computer::readCMOS(unsigned char)>
c0027c2f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0027c33:	5d                   	pop    ebp
c0027c34:	58                   	pop    eax
c0027c35:	6a 04                	push   0x4
c0027c37:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027c3d:	e8 92 e0 fe ff       	call   c0015cd4 <Computer::readCMOS(unsigned char)>
c0027c42:	88 c3                	mov    bl,al
c0027c44:	58                   	pop    eax
c0027c45:	5a                   	pop    edx
c0027c46:	6a 07                	push   0x7
c0027c48:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027c4e:	e8 81 e0 fe ff       	call   c0015cd4 <Computer::readCMOS(unsigned char)>
c0027c53:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0027c57:	59                   	pop    ecx
c0027c58:	5e                   	pop    esi
c0027c59:	6a 08                	push   0x8
c0027c5b:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027c61:	e8 6e e0 fe ff       	call   c0015cd4 <Computer::readCMOS(unsigned char)>
c0027c66:	5d                   	pop    ebp
c0027c67:	89 c6                	mov    esi,eax
c0027c69:	58                   	pop    eax
c0027c6a:	6a 09                	push   0x9
c0027c6c:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027c72:	e8 5d e0 fe ff       	call   c0015cd4 <Computer::readCMOS(unsigned char)>
c0027c77:	89 f9                	mov    ecx,edi
c0027c79:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0027c7d:	83 c4 10             	add    esp,0x10
c0027c80:	0f b6 e8             	movzx  ebp,al
c0027c83:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027c88:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0027c8c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0027c90:	74 27                	je     c0027cb9 <RTC::completeRTCRefresh()+0x177>
c0027c92:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0027c96:	89 f0                	mov    eax,esi
c0027c98:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0027c9c:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0027ca0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0027ca4:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0027ca8:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0027cac:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027cb0:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0027cb4:	e9 2d ff ff ff       	jmp    c0027be6 <RTC::completeRTCRefresh()+0xa4>
c0027cb9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0027cbe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0027cc2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027cc6:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c0027cca:	75 c6                	jne    c0027c92 <RTC::completeRTCRefresh()+0x150>
c0027ccc:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0027cd1:	89 f1                	mov    ecx,esi
c0027cd3:	0f b6 fb             	movzx  edi,bl
c0027cd6:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0027cda:	0f b6 c9             	movzx  ecx,cl
c0027cdd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0027ce1:	89 f1                	mov    ecx,esi
c0027ce3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0027ce7:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0027ceb:	0f 94 c2             	sete   dl
c0027cee:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0027cf2:	0f 94 c0             	sete   al
c0027cf5:	21 d0                	and    eax,edx
c0027cf7:	31 d2                	xor    edx,edx
c0027cf9:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0027cfd:	0f 94 c2             	sete   dl
c0027d00:	85 c2                	test   edx,eax
c0027d02:	74 8e                	je     c0027c92 <RTC::completeRTCRefresh()+0x150>
c0027d04:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0027d08:	75 88                	jne    c0027c92 <RTC::completeRTCRefresh()+0x150>
c0027d0a:	52                   	push   edx
c0027d0b:	52                   	push   edx
c0027d0c:	6a 0b                	push   0xb
c0027d0e:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027d14:	e8 bb df fe ff       	call   c0015cd4 <Computer::readCMOS(unsigned char)>
c0027d19:	83 c4 10             	add    esp,0x10
c0027d1c:	a8 04                	test   al,0x4
c0027d1e:	75 7a                	jne    c0027d9a <RTC::completeRTCRefresh()+0x258>
c0027d20:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027d24:	c1 ef 04             	shr    edi,0x4
c0027d27:	83 e6 0f             	and    esi,0xf
c0027d2a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027d2e:	c1 ed 04             	shr    ebp,0x4
c0027d31:	6b ed 0a             	imul   ebp,ebp,0xa
c0027d34:	c1 ea 04             	shr    edx,0x4
c0027d37:	6b d2 0a             	imul   edx,edx,0xa
c0027d3a:	83 e1 0f             	and    ecx,0xf
c0027d3d:	01 d1                	add    ecx,edx
c0027d3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0027d43:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0027d47:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027d4b:	c1 ea 04             	shr    edx,0x4
c0027d4e:	6b d2 0a             	imul   edx,edx,0xa
c0027d51:	83 e1 0f             	and    ecx,0xf
c0027d54:	01 d1                	add    ecx,edx
c0027d56:	89 fa                	mov    edx,edi
c0027d58:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0027d5c:	83 e2 07             	and    edx,0x7
c0027d5f:	89 d9                	mov    ecx,ebx
c0027d61:	6b d2 0a             	imul   edx,edx,0xa
c0027d64:	83 e1 0f             	and    ecx,0xf
c0027d67:	83 e3 80             	and    ebx,0xffffff80
c0027d6a:	01 d1                	add    ecx,edx
c0027d6c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027d70:	09 cb                	or     ebx,ecx
c0027d72:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0027d76:	c1 ea 04             	shr    edx,0x4
c0027d79:	6b d2 0a             	imul   edx,edx,0xa
c0027d7c:	83 e1 0f             	and    ecx,0xf
c0027d7f:	01 d1                	add    ecx,edx
c0027d81:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027d85:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0027d89:	c1 ea 04             	shr    edx,0x4
c0027d8c:	6b d2 0a             	imul   edx,edx,0xa
c0027d8f:	01 d6                	add    esi,edx
c0027d91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027d95:	83 e2 0f             	and    edx,0xf
c0027d98:	01 d5                	add    ebp,edx
c0027d9a:	a8 02                	test   al,0x2
c0027d9c:	75 15                	jne    c0027db3 <RTC::completeRTCRefresh()+0x271>
c0027d9e:	f6 c3 80             	test   bl,0x80
c0027da1:	74 10                	je     c0027db3 <RTC::completeRTCRefresh()+0x271>
c0027da3:	83 e3 7f             	and    ebx,0x7f
c0027da6:	b9 18 00 00 00       	mov    ecx,0x18
c0027dab:	8d 43 0c             	lea    eax,[ebx+0xc]
c0027dae:	99                   	cdq    
c0027daf:	f7 f9                	idiv   ecx
c0027db1:	88 d3                	mov    bl,dl
c0027db3:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0027db9:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0027dbf:	77 06                	ja     c0027dc7 <RTC::completeRTCRefresh()+0x285>
c0027dc1:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0027dc7:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027dcc:	31 c9                	xor    ecx,ecx
c0027dce:	31 d2                	xor    edx,edx
c0027dd0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0027dd4:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0027dd8:	89 cd                	mov    ebp,ecx
c0027dda:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0027dde:	c1 e7 10             	shl    edi,0x10
c0027de1:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0027de7:	c1 e0 10             	shl    eax,0x10
c0027dea:	09 c5                	or     ebp,eax
c0027dec:	89 e9                	mov    ecx,ebp
c0027dee:	0f b7 c2             	movzx  eax,dx
c0027df1:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0027df5:	09 f8                	or     eax,edi
c0027df7:	89 c2                	mov    edx,eax
c0027df9:	50                   	push   eax
c0027dfa:	50                   	push   eax
c0027dfb:	88 d9                	mov    cl,bl
c0027dfd:	51                   	push   ecx
c0027dfe:	52                   	push   edx
c0027dff:	e8 f5 33 ff ff       	call   c001b1f9 <datetimeToSeconds(datetime_t)>
c0027e04:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0027e08:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0027e0e:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0027e14:	83 c4 4c             	add    esp,0x4c
c0027e17:	5b                   	pop    ebx
c0027e18:	5e                   	pop    esi
c0027e19:	5f                   	pop    edi
c0027e1a:	5d                   	pop    ebp
c0027e1b:	c3                   	ret    

c0027e1c <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0027e1c:	55                   	push   ebp
c0027e1d:	57                   	push   edi
c0027e1e:	56                   	push   esi
c0027e1f:	53                   	push   ebx
c0027e20:	83 ec 30             	sub    esp,0x30
c0027e23:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0027e27:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0027e2b:	6a 00                	push   0x0
c0027e2d:	6a 00                	push   0x0
c0027e2f:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027e35:	e8 b2 df fe ff       	call   c0015dec <Computer::writeCMOS(unsigned char, unsigned char)>
c0027e3a:	83 c4 0c             	add    esp,0xc
c0027e3d:	6a 00                	push   0x0
c0027e3f:	6a 02                	push   0x2
c0027e41:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027e47:	e8 a0 df fe ff       	call   c0015dec <Computer::writeCMOS(unsigned char, unsigned char)>
c0027e4c:	89 f8                	mov    eax,edi
c0027e4e:	89 f9                	mov    ecx,edi
c0027e50:	0f b6 c4             	movzx  eax,ah
c0027e53:	31 d2                	xor    edx,edx
c0027e55:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0027e59:	c1 e9 10             	shr    ecx,0x10
c0027e5c:	89 f0                	mov    eax,esi
c0027e5e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0027e62:	89 f0                	mov    eax,esi
c0027e64:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0027e68:	0f b6 c4             	movzx  eax,ah
c0027e6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0027e6f:	89 f0                	mov    eax,esi
c0027e71:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0027e75:	c1 e8 10             	shr    eax,0x10
c0027e78:	b9 64 00 00 00       	mov    ecx,0x64
c0027e7d:	f7 f1                	div    ecx
c0027e7f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0027e83:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0027e87:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0027e8b:	59                   	pop    ecx
c0027e8c:	5b                   	pop    ebx
c0027e8d:	89 fb                	mov    ebx,edi
c0027e8f:	6a 0b                	push   0xb
c0027e91:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027e97:	e8 38 de fe ff       	call   c0015cd4 <Computer::readCMOS(unsigned char)>
c0027e9c:	83 c4 10             	add    esp,0x10
c0027e9f:	a8 04                	test   al,0x4
c0027ea1:	89 c5                	mov    ebp,eax
c0027ea3:	75 6e                	jne    c0027f13 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0027ea5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0027ea9:	31 d2                	xor    edx,edx
c0027eab:	0f b6 c1             	movzx  eax,cl
c0027eae:	b9 0a 00 00 00       	mov    ecx,0xa
c0027eb3:	f7 f1                	div    ecx
c0027eb5:	c1 e0 04             	shl    eax,0x4
c0027eb8:	09 d0                	or     eax,edx
c0027eba:	31 d2                	xor    edx,edx
c0027ebc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027ec0:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0027ec5:	f7 f1                	div    ecx
c0027ec7:	c1 e0 04             	shl    eax,0x4
c0027eca:	09 d0                	or     eax,edx
c0027ecc:	31 d2                	xor    edx,edx
c0027ece:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027ed2:	0f b6 c3             	movzx  eax,bl
c0027ed5:	f7 f1                	div    ecx
c0027ed7:	c1 e0 04             	shl    eax,0x4
c0027eda:	09 d0                	or     eax,edx
c0027edc:	31 d2                	xor    edx,edx
c0027ede:	89 c3                	mov    ebx,eax
c0027ee0:	89 f0                	mov    eax,esi
c0027ee2:	0f b6 c0             	movzx  eax,al
c0027ee5:	f7 f1                	div    ecx
c0027ee7:	c1 e0 04             	shl    eax,0x4
c0027eea:	09 d0                	or     eax,edx
c0027eec:	31 d2                	xor    edx,edx
c0027eee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0027ef2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027ef7:	f7 f1                	div    ecx
c0027ef9:	c1 e0 04             	shl    eax,0x4
c0027efc:	09 d0                	or     eax,edx
c0027efe:	31 d2                	xor    edx,edx
c0027f00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027f04:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027f08:	f7 f1                	div    ecx
c0027f0a:	c1 e0 04             	shl    eax,0x4
c0027f0d:	09 d0                	or     eax,edx
c0027f0f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0027f13:	83 e5 02             	and    ebp,0x2
c0027f16:	75 1e                	jne    c0027f36 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027f18:	0f b6 c3             	movzx  eax,bl
c0027f1b:	83 f8 0b             	cmp    eax,0xb
c0027f1e:	76 10                	jbe    c0027f30 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0027f20:	8d 53 f4             	lea    edx,[ebx-0xc]
c0027f23:	84 d2                	test   dl,dl
c0027f25:	88 d3                	mov    bl,dl
c0027f27:	75 02                	jne    c0027f2b <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0027f29:	b3 0c                	mov    bl,0xc
c0027f2b:	83 cb 80             	or     ebx,0xffffff80
c0027f2e:	eb 06                	jmp    c0027f36 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027f30:	85 c0                	test   eax,eax
c0027f32:	75 02                	jne    c0027f36 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027f34:	b3 0c                	mov    bl,0xc
c0027f36:	50                   	push   eax
c0027f37:	0f b6 db             	movzx  ebx,bl
c0027f3a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0027f3f:	52                   	push   edx
c0027f40:	6a 00                	push   0x0
c0027f42:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027f48:	e8 9f de fe ff       	call   c0015dec <Computer::writeCMOS(unsigned char, unsigned char)>
c0027f4d:	83 c4 0c             	add    esp,0xc
c0027f50:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027f55:	50                   	push   eax
c0027f56:	6a 02                	push   0x2
c0027f58:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027f5e:	e8 89 de fe ff       	call   c0015dec <Computer::writeCMOS(unsigned char, unsigned char)>
c0027f63:	83 c4 0c             	add    esp,0xc
c0027f66:	53                   	push   ebx
c0027f67:	6a 04                	push   0x4
c0027f69:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027f6f:	e8 78 de fe ff       	call   c0015dec <Computer::writeCMOS(unsigned char, unsigned char)>
c0027f74:	83 c4 0c             	add    esp,0xc
c0027f77:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0027f7c:	52                   	push   edx
c0027f7d:	6a 07                	push   0x7
c0027f7f:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027f85:	e8 62 de fe ff       	call   c0015dec <Computer::writeCMOS(unsigned char, unsigned char)>
c0027f8a:	83 c4 0c             	add    esp,0xc
c0027f8d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0027f92:	50                   	push   eax
c0027f93:	6a 08                	push   0x8
c0027f95:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027f9b:	e8 4c de fe ff       	call   c0015dec <Computer::writeCMOS(unsigned char, unsigned char)>
c0027fa0:	83 c4 0c             	add    esp,0xc
c0027fa3:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0027fa8:	55                   	push   ebp
c0027fa9:	6a 09                	push   0x9
c0027fab:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027fb1:	e8 36 de fe ff       	call   c0015dec <Computer::writeCMOS(unsigned char, unsigned char)>
c0027fb6:	5a                   	pop    edx
c0027fb7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0027fbb:	e8 82 fb ff ff       	call   c0027b42 <RTC::completeRTCRefresh()>
c0027fc0:	83 c4 3c             	add    esp,0x3c
c0027fc3:	b0 01                	mov    al,0x1
c0027fc5:	5b                   	pop    ebx
c0027fc6:	5e                   	pop    esi
c0027fc7:	5f                   	pop    edi
c0027fc8:	5d                   	pop    ebp
c0027fc9:	c3                   	ret    

c0027fca <rtcIRQHandler(regs*, void*)>:
c0027fca:	53                   	push   ebx
c0027fcb:	83 ec 10             	sub    esp,0x10
c0027fce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027fd2:	6a 0c                	push   0xc
c0027fd4:	ff 35 bc b9 03 c0    	push   DWORD PTR ds:0xc003b9bc
c0027fda:	e8 f5 dc fe ff       	call   c0015cd4 <Computer::readCMOS(unsigned char)>
c0027fdf:	83 c4 10             	add    esp,0x10
c0027fe2:	a8 80                	test   al,0x80
c0027fe4:	74 24                	je     c002800a <rtcIRQHandler(regs*, void*)+0x40>
c0027fe6:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0027fed:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0027ff4:	66 ff 05 78 12 04 c0 	inc    WORD PTR ds:0xc0041278
c0027ffb:	75 0d                	jne    c002800a <rtcIRQHandler(regs*, void*)+0x40>
c0027ffd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0028001:	83 c4 08             	add    esp,0x8
c0028004:	5b                   	pop    ebx
c0028005:	e9 38 fb ff ff       	jmp    c0027b42 <RTC::completeRTCRefresh()>
c002800a:	83 c4 08             	add    esp,0x8
c002800d:	5b                   	pop    ebx
c002800e:	c3                   	ret    
c002800f:	90                   	nop

c0028010 <RTC::RTC()>:
c0028010:	83 ec 1c             	sub    esp,0x1c
c0028013:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028017:	83 ec 08             	sub    esp,0x8
c002801a:	68 4b 3b 03 c0       	push   0xc0033b4b
c002801f:	50                   	push   eax
c0028020:	e8 af 30 ff ff       	call   c001b0d4 <Clock::Clock(char const*)>
c0028025:	83 c4 10             	add    esp,0x10
c0028028:	ba 68 3b 03 c0       	mov    edx,0xc0033b68
c002802d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028031:	89 10                	mov    DWORD PTR [eax],edx
c0028033:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028037:	83 ec 0c             	sub    esp,0xc
c002803a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002803e:	6a 01                	push   0x1
c0028040:	68 ca 7f 02 c0       	push   0xc0027fca
c0028045:	6a 08                	push   0x8
c0028047:	50                   	push   eax
c0028048:	e8 69 35 ff ff       	call   c001b5b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002804d:	83 c4 20             	add    esp,0x20
c0028050:	89 c2                	mov    edx,eax
c0028052:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028056:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002805c:	fa                   	cli    
c002805d:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c0028062:	83 c0 01             	add    eax,0x1
c0028065:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c002806a:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c002806f:	83 ec 08             	sub    esp,0x8
c0028072:	6a 0b                	push   0xb
c0028074:	50                   	push   eax
c0028075:	e8 5a dc fe ff       	call   c0015cd4 <Computer::readCMOS(unsigned char)>
c002807a:	83 c4 10             	add    esp,0x10
c002807d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0028081:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c0028086:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c002808a:	83 ca 10             	or     edx,0x10
c002808d:	0f b6 d2             	movzx  edx,dl
c0028090:	83 ec 04             	sub    esp,0x4
c0028093:	52                   	push   edx
c0028094:	6a 0b                	push   0xb
c0028096:	50                   	push   eax
c0028097:	e8 50 dd fe ff       	call   c0015dec <Computer::writeCMOS(unsigned char, unsigned char)>
c002809c:	83 c4 10             	add    esp,0x10
c002809f:	83 ec 0c             	sub    esp,0xc
c00280a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00280a6:	e8 97 fa ff ff       	call   c0027b42 <RTC::completeRTCRefresh()>
c00280ab:	83 c4 10             	add    esp,0x10
c00280ae:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00280b3:	83 e8 01             	sub    eax,0x1
c00280b6:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c00280bb:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c00280c0:	85 c0                	test   eax,eax
c00280c2:	75 01                	jne    c00280c5 <RTC::RTC()+0xb5>
c00280c4:	fb                   	sti    
c00280c5:	90                   	nop
c00280c6:	83 c4 1c             	add    esp,0x1c
c00280c9:	c3                   	ret    
c00280ca:	66 90                	xchg   ax,ax

c00280cc <HalConsoleScroll(int, int)>:
c00280cc:	83 ec 10             	sub    esp,0x10
c00280cf:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00280d7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00280df:	90                   	nop
c00280e0:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00280e5:	0f 8f e1 00 00 00    	jg     c00281cc <HalConsoleScroll(int, int)+0x100>
c00280eb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00280f3:	90                   	nop
c00280f4:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00280fc:	0f 8f be 00 00 00    	jg     c00281c0 <HalConsoleScroll(int, int)+0xf4>
c0028102:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028106:	89 d0                	mov    eax,edx
c0028108:	c1 e0 02             	shl    eax,0x2
c002810b:	01 d0                	add    eax,edx
c002810d:	c1 e0 05             	shl    eax,0x5
c0028110:	89 c2                	mov    edx,eax
c0028112:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028116:	01 d0                	add    eax,edx
c0028118:	89 c2                	mov    edx,eax
c002811a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002811e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0028121:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028125:	89 d0                	mov    eax,edx
c0028127:	c1 e0 02             	shl    eax,0x2
c002812a:	01 d0                	add    eax,edx
c002812c:	c1 e0 05             	shl    eax,0x5
c002812f:	89 c2                	mov    edx,eax
c0028131:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028135:	01 d0                	add    eax,edx
c0028137:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c002813d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028141:	01 d0                	add    eax,edx
c0028143:	8a 11                	mov    dl,BYTE PTR [ecx]
c0028145:	88 10                	mov    BYTE PTR [eax],dl
c0028147:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c002814c:	75 66                	jne    c00281b4 <HalConsoleScroll(int, int)+0xe8>
c002814e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028152:	83 e0 01             	and    eax,0x1
c0028155:	74 39                	je     c0028190 <HalConsoleScroll(int, int)+0xc4>
c0028157:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002815b:	83 e0 0f             	and    eax,0xf
c002815e:	88 c2                	mov    dl,al
c0028160:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0028164:	c1 e0 04             	shl    eax,0x4
c0028167:	09 d0                	or     eax,edx
c0028169:	88 c1                	mov    cl,al
c002816b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002816f:	89 d0                	mov    eax,edx
c0028171:	c1 e0 02             	shl    eax,0x2
c0028174:	01 d0                	add    eax,edx
c0028176:	c1 e0 05             	shl    eax,0x5
c0028179:	89 c2                	mov    edx,eax
c002817b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002817f:	01 d0                	add    eax,edx
c0028181:	89 c2                	mov    edx,eax
c0028183:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028187:	01 d0                	add    eax,edx
c0028189:	88 ca                	mov    dl,cl
c002818b:	88 10                	mov    BYTE PTR [eax],dl
c002818d:	eb 25                	jmp    c00281b4 <HalConsoleScroll(int, int)+0xe8>
c002818f:	90                   	nop
c0028190:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0028194:	89 d0                	mov    eax,edx
c0028196:	c1 e0 02             	shl    eax,0x2
c0028199:	01 d0                	add    eax,edx
c002819b:	c1 e0 05             	shl    eax,0x5
c002819e:	89 c2                	mov    edx,eax
c00281a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00281a4:	01 d0                	add    eax,edx
c00281a6:	89 c2                	mov    edx,eax
c00281a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00281ac:	01 d0                	add    eax,edx
c00281ae:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00281b1:	8d 76 00             	lea    esi,[esi+0x0]
c00281b4:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c00281b9:	e9 36 ff ff ff       	jmp    c00280f4 <HalConsoleScroll(int, int)+0x28>
c00281be:	66 90                	xchg   ax,ax
c00281c0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00281c5:	e9 16 ff ff ff       	jmp    c00280e0 <HalConsoleScroll(int, int)+0x14>
c00281ca:	66 90                	xchg   ax,ax
c00281cc:	90                   	nop
c00281cd:	83 c4 10             	add    esp,0x10
c00281d0:	c3                   	ret    
c00281d1:	8d 76 00             	lea    esi,[esi+0x0]

c00281d4 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00281d4:	83 ec 14             	sub    esp,0x14
c00281d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00281db:	88 04 24             	mov    BYTE PTR [esp],al
c00281de:	8a 04 24             	mov    al,BYTE PTR [esp]
c00281e1:	0f b6 c0             	movzx  eax,al
c00281e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00281e8:	89 d1                	mov    ecx,edx
c00281ea:	83 e1 0f             	and    ecx,0xf
c00281ed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00281f1:	c1 e2 04             	shl    edx,0x4
c00281f4:	0f b6 d2             	movzx  edx,dl
c00281f7:	09 ca                	or     edx,ecx
c00281f9:	c1 e2 08             	shl    edx,0x8
c00281fc:	09 d0                	or     eax,edx
c00281fe:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0028203:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c002820b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002820f:	89 d0                	mov    eax,edx
c0028211:	c1 e0 02             	shl    eax,0x2
c0028214:	01 d0                	add    eax,edx
c0028216:	c1 e0 04             	shl    eax,0x4
c0028219:	89 c2                	mov    edx,eax
c002821b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002821f:	01 d0                	add    eax,edx
c0028221:	d1 e0                	shl    eax,1
c0028223:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0028227:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002822b:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0028230:	66 89 10             	mov    WORD PTR [eax],dx
c0028233:	90                   	nop
c0028234:	83 c4 14             	add    esp,0x14
c0028237:	c3                   	ret    

c0028238 <HalConsoleCursorUpdate(int, int)>:
c0028238:	83 ec 20             	sub    esp,0x20
c002823b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002823f:	89 c2                	mov    edx,eax
c0028241:	c1 e2 02             	shl    edx,0x2
c0028244:	01 d0                	add    eax,edx
c0028246:	c1 e0 04             	shl    eax,0x4
c0028249:	89 c2                	mov    edx,eax
c002824b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002824f:	01 d0                	add    eax,edx
c0028251:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0028256:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c002825d:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0028262:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0028266:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002826a:	ee                   	out    dx,al
c002826b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0028270:	0f b6 c0             	movzx  eax,al
c0028273:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c002827a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c002827e:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0028282:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028286:	ee                   	out    dx,al
c0028287:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c002828e:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0028293:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0028297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002829b:	ee                   	out    dx,al
c002829c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00282a1:	c1 e8 08             	shr    eax,0x8
c00282a4:	0f b6 c0             	movzx  eax,al
c00282a7:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00282ae:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00282b2:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00282b6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00282ba:	ee                   	out    dx,al
c00282bb:	90                   	nop
c00282bc:	83 c4 20             	add    esp,0x20
c00282bf:	c3                   	ret    

c00282c0 <FAT::getName()>:
c00282c0:	b8 9c 3b 03 c0       	mov    eax,0xc0033b9c
c00282c5:	c3                   	ret    
c00282c6:	66 90                	xchg   ax,ax

c00282c8 <FAT::tell(void*, unsigned long long*)>:
c00282c8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00282cd:	75 09                	jne    c00282d8 <FAT::tell(void*, unsigned long long*)+0x10>
c00282cf:	b8 04 00 00 00       	mov    eax,0x4
c00282d4:	c3                   	ret    
c00282d5:	8d 76 00             	lea    esi,[esi+0x0]
c00282d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00282dd:	75 09                	jne    c00282e8 <FAT::tell(void*, unsigned long long*)+0x20>
c00282df:	b8 04 00 00 00       	mov    eax,0x4
c00282e4:	c3                   	ret    
c00282e5:	8d 76 00             	lea    esi,[esi+0x0]
c00282e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00282ec:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00282ef:	ba 00 00 00 00       	mov    edx,0x0
c00282f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00282f8:	89 01                	mov    DWORD PTR [ecx],eax
c00282fa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00282fd:	b8 00 00 00 00       	mov    eax,0x0
c0028302:	c3                   	ret    
c0028303:	90                   	nop

c0028304 <FAT::stat(void*, unsigned long long*)>:
c0028304:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0028309:	75 09                	jne    c0028314 <FAT::stat(void*, unsigned long long*)+0x10>
c002830b:	b8 04 00 00 00       	mov    eax,0x4
c0028310:	c3                   	ret    
c0028311:	8d 76 00             	lea    esi,[esi+0x0]
c0028314:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0028319:	75 09                	jne    c0028324 <FAT::stat(void*, unsigned long long*)+0x20>
c002831b:	b8 04 00 00 00       	mov    eax,0x4
c0028320:	c3                   	ret    
c0028321:	8d 76 00             	lea    esi,[esi+0x0]
c0028324:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028328:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002832b:	ba 00 00 00 00       	mov    edx,0x0
c0028330:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0028334:	89 01                	mov    DWORD PTR [ecx],eax
c0028336:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0028339:	b8 00 00 00 00       	mov    eax,0x0
c002833e:	c3                   	ret    
c002833f:	90                   	nop

c0028340 <FAT::~FAT()>:
c0028340:	83 ec 0c             	sub    esp,0xc
c0028343:	ba e8 3b 03 c0       	mov    edx,0xc0033be8
c0028348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002834c:	89 10                	mov    DWORD PTR [eax],edx
c002834e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028352:	83 ec 0c             	sub    esp,0xc
c0028355:	50                   	push   eax
c0028356:	e8 e9 1f ff ff       	call   c001a344 <Filesystem::~Filesystem()>
c002835b:	83 c4 10             	add    esp,0x10
c002835e:	90                   	nop
c002835f:	83 c4 0c             	add    esp,0xc
c0028362:	c3                   	ret    
c0028363:	90                   	nop

c0028364 <FAT::~FAT()>:
c0028364:	83 ec 0c             	sub    esp,0xc
c0028367:	83 ec 0c             	sub    esp,0xc
c002836a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002836e:	e8 cd ff ff ff       	call   c0028340 <FAT::~FAT()>
c0028373:	83 c4 10             	add    esp,0x10
c0028376:	83 ec 08             	sub    esp,0x8
c0028379:	6a 08                	push   0x8
c002837b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002837f:	e8 3c 10 ff ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c0028384:	83 c4 10             	add    esp,0x10
c0028387:	83 c4 0c             	add    esp,0xc
c002838a:	c3                   	ret    
c002838b:	90                   	nop

c002838c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c002838c:	83 ec 1c             	sub    esp,0x1c
c002838f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0028396:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c002839b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002839f:	8b 04 85 a0 12 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbed60]
c00283a6:	83 f8 ff             	cmp    eax,0xffffffff
c00283a9:	75 35                	jne    c00283e0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00283ab:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00283af:	88 c2                	mov    dl,al
c00283b1:	a1 80 12 04 c0       	mov    eax,ds:0xc0041280
c00283b6:	01 d0                	add    eax,edx
c00283b8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00283bc:	8b 15 80 12 04 c0    	mov    edx,DWORD PTR ds:0xc0041280
c00283c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00283c6:	89 14 85 a0 12 04 c0 	mov    DWORD PTR [eax*4-0x3ffbed60],edx
c00283cd:	a1 80 12 04 c0       	mov    eax,ds:0xc0041280
c00283d2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00283d6:	89 14 85 20 13 04 c0 	mov    DWORD PTR [eax*4-0x3ffbece0],edx
c00283dd:	eb 19                	jmp    c00283f8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00283df:	90                   	nop
c00283e0:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00283e4:	88 c2                	mov    dl,al
c00283e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00283ea:	8b 04 85 a0 12 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbed60]
c00283f1:	01 d0                	add    eax,edx
c00283f3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00283f7:	90                   	nop
c00283f8:	83 ec 04             	sub    esp,0x4
c00283fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00283ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0028403:	8d 44 24 15          	lea    eax,[esp+0x15]
c0028407:	50                   	push   eax
c0028408:	e8 2a cf fd ff       	call   c0005337 <f_getlabel>
c002840d:	83 c4 10             	add    esp,0x10
c0028410:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028414:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0028419:	75 09                	jne    c0028424 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c002841b:	b8 00 00 00 00       	mov    eax,0x0
c0028420:	eb 0a                	jmp    c002842c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0028422:	66 90                	xchg   ax,ax
c0028424:	b8 01 00 00 00       	mov    eax,0x1
c0028429:	8d 76 00             	lea    esi,[esi+0x0]
c002842c:	83 c4 1c             	add    esp,0x1c
c002842f:	c3                   	ret    

c0028430 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0028430:	53                   	push   ebx
c0028431:	83 ec 58             	sub    esp,0x58
c0028434:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c002843c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0028440:	b9 00 00 00 00       	mov    ecx,0x0
c0028445:	b8 3c 00 00 00       	mov    eax,0x3c
c002844a:	83 e0 f8             	and    eax,0xfffffff8
c002844d:	89 c3                	mov    ebx,eax
c002844f:	b8 00 00 00 00       	mov    eax,0x0
c0028454:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0028458:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c002845c:	83 c0 08             	add    eax,0x8
c002845f:	39 d8                	cmp    eax,ebx
c0028461:	72 f1                	jb     c0028454 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0028463:	01 c2                	add    edx,eax
c0028465:	89 0a                	mov    DWORD PTR [edx],ecx
c0028467:	83 c2 04             	add    edx,0x4
c002846a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002846e:	8b 04 85 a0 12 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbed60]
c0028475:	83 f8 ff             	cmp    eax,0xffffffff
c0028478:	75 36                	jne    c00284b0 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c002847a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002847e:	88 c2                	mov    dl,al
c0028480:	a1 80 12 04 c0       	mov    eax,ds:0xc0041280
c0028485:	01 d0                	add    eax,edx
c0028487:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002848b:	8b 15 80 12 04 c0    	mov    edx,DWORD PTR ds:0xc0041280
c0028491:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0028495:	89 14 85 a0 12 04 c0 	mov    DWORD PTR [eax*4-0x3ffbed60],edx
c002849c:	a1 80 12 04 c0       	mov    eax,ds:0xc0041280
c00284a1:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00284a5:	89 14 85 20 13 04 c0 	mov    DWORD PTR [eax*4-0x3ffbece0],edx
c00284ac:	eb 1a                	jmp    c00284c8 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c00284ae:	66 90                	xchg   ax,ax
c00284b0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00284b4:	88 c2                	mov    dl,al
c00284b6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00284ba:	8b 04 85 a0 12 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbed60]
c00284c1:	01 d0                	add    eax,edx
c00284c3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00284c7:	90                   	nop
c00284c8:	83 ec 08             	sub    esp,0x8
c00284cb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00284cf:	8d 44 24 18          	lea    eax,[esp+0x18]
c00284d3:	50                   	push   eax
c00284d4:	e8 97 83 fd ff       	call   c0000870 <strcat>
c00284d9:	83 c4 10             	add    esp,0x10
c00284dc:	83 ec 0c             	sub    esp,0xc
c00284df:	8d 44 24 18          	lea    eax,[esp+0x18]
c00284e3:	50                   	push   eax
c00284e4:	e8 a2 cf fd ff       	call   c000548b <f_setlabel>
c00284e9:	83 c4 10             	add    esp,0x10
c00284ec:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00284f0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00284f5:	75 09                	jne    c0028500 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c00284f7:	b8 00 00 00 00       	mov    eax,0x0
c00284fc:	eb 0a                	jmp    c0028508 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c00284fe:	66 90                	xchg   ax,ax
c0028500:	b8 01 00 00 00       	mov    eax,0x1
c0028505:	8d 76 00             	lea    esi,[esi+0x0]
c0028508:	83 c4 58             	add    esp,0x58
c002850b:	5b                   	pop    ebx
c002850c:	c3                   	ret    
c002850d:	90                   	nop
c002850e:	66 90                	xchg   ax,ax

c0028510 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0028510:	83 ec 2c             	sub    esp,0x2c
c0028513:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002851b:	83 ec 08             	sub    esp,0x8
c002851e:	68 c0 3b 03 c0       	push   0xc0033bc0
c0028523:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028527:	e8 54 82 fd ff       	call   c0000780 <strcmp>
c002852c:	83 c4 10             	add    esp,0x10
c002852f:	85 c0                	test   eax,eax
c0028531:	0f 94 c0             	sete   al
c0028534:	0f b6 c0             	movzx  eax,al
c0028537:	85 c0                	test   eax,eax
c0028539:	74 0d                	je     c0028548 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c002853b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0028543:	e9 c0 00 00 00       	jmp    c0028608 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0028548:	83 ec 08             	sub    esp,0x8
c002854b:	68 b2 3b 03 c0       	push   0xc0033bb2
c0028550:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028554:	e8 27 82 fd ff       	call   c0000780 <strcmp>
c0028559:	83 c4 10             	add    esp,0x10
c002855c:	85 c0                	test   eax,eax
c002855e:	0f 94 c0             	sete   al
c0028561:	0f b6 c0             	movzx  eax,al
c0028564:	85 c0                	test   eax,eax
c0028566:	74 10                	je     c0028578 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0028568:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0028570:	e9 93 00 00 00       	jmp    c0028608 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0028575:	8d 76 00             	lea    esi,[esi+0x0]
c0028578:	83 ec 08             	sub    esp,0x8
c002857b:	68 b8 3b 03 c0       	push   0xc0033bb8
c0028580:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028584:	e8 f7 81 fd ff       	call   c0000780 <strcmp>
c0028589:	83 c4 10             	add    esp,0x10
c002858c:	85 c0                	test   eax,eax
c002858e:	0f 94 c0             	sete   al
c0028591:	0f b6 c0             	movzx  eax,al
c0028594:	85 c0                	test   eax,eax
c0028596:	74 0c                	je     c00285a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0028598:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00285a0:	eb 66                	jmp    c0028608 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00285a2:	66 90                	xchg   ax,ax
c00285a4:	83 ec 08             	sub    esp,0x8
c00285a7:	68 58 fd 02 c0       	push   0xc002fd58
c00285ac:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00285b0:	e8 cb 81 fd ff       	call   c0000780 <strcmp>
c00285b5:	83 c4 10             	add    esp,0x10
c00285b8:	85 c0                	test   eax,eax
c00285ba:	0f 94 c0             	sete   al
c00285bd:	0f b6 c0             	movzx  eax,al
c00285c0:	85 c0                	test   eax,eax
c00285c2:	74 0c                	je     c00285d0 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00285c4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00285cc:	eb 3a                	jmp    c0028608 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00285ce:	66 90                	xchg   ax,ax
c00285d0:	83 ec 08             	sub    esp,0x8
c00285d3:	68 be 3b 03 c0       	push   0xc0033bbe
c00285d8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00285dc:	e8 9f 81 fd ff       	call   c0000780 <strcmp>
c00285e1:	83 c4 10             	add    esp,0x10
c00285e4:	85 c0                	test   eax,eax
c00285e6:	0f 94 c0             	sete   al
c00285e9:	0f b6 c0             	movzx  eax,al
c00285ec:	85 c0                	test   eax,eax
c00285ee:	74 0c                	je     c00285fc <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c00285f0:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00285f8:	eb 0e                	jmp    c0028608 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00285fa:	66 90                	xchg   ax,ax
c00285fc:	b8 08 00 00 00       	mov    eax,0x8
c0028601:	e9 ea 00 00 00       	jmp    c00286f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0028606:	66 90                	xchg   ax,ax
c0028608:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002860f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0028614:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028618:	8b 04 85 a0 12 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbed60]
c002861f:	83 f8 ff             	cmp    eax,0xffffffff
c0028622:	75 34                	jne    c0028658 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0028624:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0028628:	88 c2                	mov    dl,al
c002862a:	a1 80 12 04 c0       	mov    eax,ds:0xc0041280
c002862f:	01 d0                	add    eax,edx
c0028631:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0028635:	8b 15 80 12 04 c0    	mov    edx,DWORD PTR ds:0xc0041280
c002863b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002863f:	89 14 85 a0 12 04 c0 	mov    DWORD PTR [eax*4-0x3ffbed60],edx
c0028646:	a1 80 12 04 c0       	mov    eax,ds:0xc0041280
c002864b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002864f:	89 14 85 20 13 04 c0 	mov    DWORD PTR [eax*4-0x3ffbece0],edx
c0028656:	eb 18                	jmp    c0028670 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0028658:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002865c:	88 c2                	mov    dl,al
c002865e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028662:	8b 04 85 a0 12 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbed60]
c0028669:	01 d0                	add    eax,edx
c002866b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002866f:	90                   	nop
c0028670:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0028674:	88 04 24             	mov    BYTE PTR [esp],al
c0028677:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002867b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002867f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0028687:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c002868c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0028694:	83 ec 0c             	sub    esp,0xc
c0028697:	68 00 20 00 00       	push   0x2000
c002869c:	e8 e7 df fe ff       	call   c0016688 <malloc>
c00286a1:	83 c4 10             	add    esp,0x10
c00286a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00286a8:	68 00 20 00 00       	push   0x2000
c00286ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286b1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00286b5:	50                   	push   eax
c00286b6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00286ba:	50                   	push   eax
c00286bb:	e8 c8 d0 fd ff       	call   c0005788 <f_mkfs>
c00286c0:	83 c4 10             	add    esp,0x10
c00286c3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00286c7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00286cc:	75 0a                	jne    c00286d8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00286ce:	b8 00 00 00 00       	mov    eax,0x0
c00286d3:	eb 1b                	jmp    c00286f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00286d5:	8d 76 00             	lea    esi,[esi+0x0]
c00286d8:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00286dd:	75 09                	jne    c00286e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00286df:	b8 09 00 00 00       	mov    eax,0x9
c00286e4:	eb 0a                	jmp    c00286f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00286e6:	66 90                	xchg   ax,ax
c00286e8:	b8 01 00 00 00       	mov    eax,0x1
c00286ed:	8d 76 00             	lea    esi,[esi+0x0]
c00286f0:	83 c4 2c             	add    esp,0x2c
c00286f3:	c3                   	ret    

c00286f4 <FAT::tryMount(LogicalDisk*, int)>:
c00286f4:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00286fa:	a1 80 12 04 c0       	mov    eax,ds:0xc0041280
c00286ff:	83 f8 14             	cmp    eax,0x14
c0028702:	75 18                	jne    c002871c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0028704:	83 ec 0c             	sub    esp,0xc
c0028707:	68 c4 3b 03 c0       	push   0xc0033bc4
c002870c:	e8 f1 7f ff ff       	call   c0020702 <KePanic(char const*)>
c0028711:	83 c4 10             	add    esp,0x10
c0028714:	b0 00                	mov    al,0x0
c0028716:	e9 ed 01 00 00       	jmp    c0028908 <FAT::tryMount(LogicalDisk*, int)+0x214>
c002871b:	90                   	nop
c002871c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0028723:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028729:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002872f:	3d 00 02 00 00       	cmp    eax,0x200
c0028734:	74 0a                	je     c0028740 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0028736:	b0 00                	mov    al,0x0
c0028738:	e9 cb 01 00 00       	jmp    c0028908 <FAT::tryMount(LogicalDisk*, int)+0x214>
c002873d:	8d 76 00             	lea    esi,[esi+0x0]
c0028740:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0028748:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c002874f:	8b 04 85 a0 12 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbed60]
c0028756:	83 f8 ff             	cmp    eax,0xffffffff
c0028759:	74 09                	je     c0028764 <FAT::tryMount(LogicalDisk*, int)+0x70>
c002875b:	b0 01                	mov    al,0x1
c002875d:	e9 a6 01 00 00       	jmp    c0028908 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028762:	66 90                	xchg   ax,ax
c0028764:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c002876e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0028776:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c002877d:	88 c2                	mov    dl,al
c002877f:	a1 80 12 04 c0       	mov    eax,ds:0xc0041280
c0028784:	01 d0                	add    eax,edx
c0028786:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c002878d:	8b 15 80 12 04 c0    	mov    edx,DWORD PTR ds:0xc0041280
c0028793:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c002879a:	89 14 85 a0 12 04 c0 	mov    DWORD PTR [eax*4-0x3ffbed60],edx
c00287a1:	a1 80 12 04 c0       	mov    eax,ds:0xc0041280
c00287a6:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00287ad:	89 14 85 20 13 04 c0 	mov    DWORD PTR [eax*4-0x3ffbece0],edx
c00287b4:	83 ec 0c             	sub    esp,0xc
c00287b7:	68 34 02 00 00       	push   0x234
c00287bc:	e8 c7 de fe ff       	call   c0016688 <malloc>
c00287c1:	83 c4 10             	add    esp,0x10
c00287c4:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00287cb:	83 ec 04             	sub    esp,0x4
c00287ce:	6a 00                	push   0x0
c00287d0:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00287d7:	50                   	push   eax
c00287d8:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00287df:	e8 9e b7 fd ff       	call   c0003f82 <f_mount>
c00287e4:	83 c4 10             	add    esp,0x10
c00287e7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00287ee:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00287f6:	74 1c                	je     c0028814 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00287f8:	83 ec 0c             	sub    esp,0xc
c00287fb:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0028802:	e8 a1 de fe ff       	call   c00166a8 <rfree>
c0028807:	83 c4 10             	add    esp,0x10
c002880a:	b0 00                	mov    al,0x0
c002880c:	e9 f7 00 00 00       	jmp    c0028908 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028811:	8d 76 00             	lea    esi,[esi+0x0]
c0028814:	83 ec 04             	sub    esp,0x4
c0028817:	68 00 01 00 00       	push   0x100
c002881c:	6a 00                	push   0x0
c002881e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0028825:	50                   	push   eax
c0028826:	e8 c5 7c fd ff       	call   c00004f0 <memset>
c002882b:	83 c4 10             	add    esp,0x10
c002882e:	83 ec 08             	sub    esp,0x8
c0028831:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0028838:	50                   	push   eax
c0028839:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0028840:	50                   	push   eax
c0028841:	e8 2a 80 fd ff       	call   c0000870 <strcat>
c0028846:	83 c4 10             	add    esp,0x10
c0028849:	83 ec 08             	sub    esp,0x8
c002884c:	68 d2 3b 03 c0       	push   0xc0033bd2
c0028851:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0028858:	50                   	push   eax
c0028859:	e8 12 80 fd ff       	call   c0000870 <strcat>
c002885e:	83 c4 10             	add    esp,0x10
c0028861:	83 ec 04             	sub    esp,0x4
c0028864:	6a 01                	push   0x1
c0028866:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c002886d:	50                   	push   eax
c002886e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028872:	50                   	push   eax
c0028873:	e8 6c b7 fd ff       	call   c0003fe4 <f_open>
c0028878:	83 c4 10             	add    esp,0x10
c002887b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0028882:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0028889:	85 c0                	test   eax,eax
c002888b:	74 0b                	je     c0028898 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c002888d:	78 31                	js     c00288c0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c002888f:	83 e8 04             	sub    eax,0x4
c0028892:	83 f8 01             	cmp    eax,0x1
c0028895:	77 29                	ja     c00288c0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0028897:	90                   	nop
c0028898:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00288a0:	83 ec 0c             	sub    esp,0xc
c00288a3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00288a7:	50                   	push   eax
c00288a8:	e8 e7 be fd ff       	call   c0004794 <f_close>
c00288ad:	83 c4 10             	add    esp,0x10
c00288b0:	90                   	nop
c00288b1:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00288b9:	85 c0                	test   eax,eax
c00288bb:	74 43                	je     c0028900 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00288bd:	eb 31                	jmp    c00288f0 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00288bf:	90                   	nop
c00288c0:	83 ec 0c             	sub    esp,0xc
c00288c3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00288ca:	e8 d9 dd fe ff       	call   c00166a8 <rfree>
c00288cf:	83 c4 10             	add    esp,0x10
c00288d2:	83 ec 04             	sub    esp,0x4
c00288d5:	6a 00                	push   0x0
c00288d7:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00288de:	50                   	push   eax
c00288df:	6a 00                	push   0x0
c00288e1:	e8 9c b6 fd ff       	call   c0003f82 <f_mount>
c00288e6:	83 c4 10             	add    esp,0x10
c00288e9:	b0 00                	mov    al,0x0
c00288eb:	eb 1b                	jmp    c0028908 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00288ed:	8d 76 00             	lea    esi,[esi+0x0]
c00288f0:	a1 80 12 04 c0       	mov    eax,ds:0xc0041280
c00288f5:	83 c0 01             	add    eax,0x1
c00288f8:	a3 80 12 04 c0       	mov    ds:0xc0041280,eax
c00288fd:	8d 76 00             	lea    esi,[esi+0x0]
c0028900:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0028907:	90                   	nop
c0028908:	81 c4 4c 03 00 00    	add    esp,0x34c
c002890e:	c3                   	ret    
c002890f:	90                   	nop

c0028910 <FAT::allocateSwapfile(char const*, int)>:
c0028910:	55                   	push   ebp
c0028911:	57                   	push   edi
c0028912:	56                   	push   esi
c0028913:	53                   	push   ebx
c0028914:	81 ec 3c 04 00 00    	sub    esp,0x43c
c002891a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0028925:	83 ec 0c             	sub    esp,0xc
c0028928:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c002892f:	e8 54 dd fe ff       	call   c0016688 <malloc>
c0028934:	83 c4 10             	add    esp,0x10
c0028937:	89 c7                	mov    edi,eax
c0028939:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c002893e:	83 ec 04             	sub    esp,0x4
c0028941:	50                   	push   eax
c0028942:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0028949:	57                   	push   edi
c002894a:	e8 87 1d ff ff       	call   c001a6d6 <File::File(char const*, Process*)>
c002894f:	83 c4 10             	add    esp,0x10
c0028952:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0028959:	83 ec 04             	sub    esp,0x4
c002895c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0028960:	50                   	push   eax
c0028961:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028965:	50                   	push   eax
c0028966:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c002896d:	e8 84 20 ff ff       	call   c001a9f6 <File::stat(unsigned long long*, bool*)>
c0028972:	83 c4 10             	add    esp,0x10
c0028975:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c002897c:	c1 e0 14             	shl    eax,0x14
c002897f:	89 c7                	mov    edi,eax
c0028981:	89 c5                	mov    ebp,eax
c0028983:	c1 fd 1f             	sar    ebp,0x1f
c0028986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002898a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002898e:	89 f9                	mov    ecx,edi
c0028990:	31 c1                	xor    ecx,eax
c0028992:	89 cb                	mov    ebx,ecx
c0028994:	89 e9                	mov    ecx,ebp
c0028996:	31 d1                	xor    ecx,edx
c0028998:	89 ce                	mov    esi,ecx
c002899a:	89 f0                	mov    eax,esi
c002899c:	09 d8                	or     eax,ebx
c002899e:	0f 84 9c 00 00 00    	je     c0028a40 <FAT::allocateSwapfile(char const*, int)+0x130>
c00289a4:	83 ec 0c             	sub    esp,0xc
c00289a7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00289ae:	e8 0f 1f ff ff       	call   c001a8c2 <File::unlink()>
c00289b3:	83 c4 10             	add    esp,0x10
c00289b6:	83 ec 08             	sub    esp,0x8
c00289b9:	6a 12                	push   0x12
c00289bb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00289c2:	e8 2d 1d ff ff       	call   c001a6f4 <File::open(FileOpenMode)>
c00289c7:	83 c4 10             	add    esp,0x10
c00289ca:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00289d1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00289d7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00289de:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00289e5:	c1 e0 14             	shl    eax,0x14
c00289e8:	83 ec 04             	sub    esp,0x4
c00289eb:	6a 01                	push   0x1
c00289ed:	50                   	push   eax
c00289ee:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00289f5:	e8 21 cc fd ff       	call   c000561b <f_expand>
c00289fa:	83 c4 10             	add    esp,0x10
c00289fd:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028a04:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a06:	83 c0 10             	add    eax,0x10
c0028a09:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a0b:	83 ec 0c             	sub    esp,0xc
c0028a0e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0028a12:	52                   	push   edx
c0028a13:	8d 54 24 30          	lea    edx,[esp+0x30]
c0028a17:	52                   	push   edx
c0028a18:	6a 00                	push   0x0
c0028a1a:	68 00 04 00 00       	push   0x400
c0028a1f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0028a26:	ff d0                	call   eax
c0028a28:	83 c4 20             	add    esp,0x20
c0028a2b:	83 ec 0c             	sub    esp,0xc
c0028a2e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028a35:	e8 18 1d ff ff       	call   c001a752 <File::close()>
c0028a3a:	83 c4 10             	add    esp,0x10
c0028a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0028a40:	83 ec 08             	sub    esp,0x8
c0028a43:	6a 01                	push   0x1
c0028a45:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028a4c:	e8 a3 1c ff ff       	call   c001a6f4 <File::open(FileOpenMode)>
c0028a51:	83 c4 10             	add    esp,0x10
c0028a54:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028a5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a5d:	83 c0 0c             	add    eax,0xc
c0028a60:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a62:	83 ec 0c             	sub    esp,0xc
c0028a65:	8d 54 24 24          	lea    edx,[esp+0x24]
c0028a69:	52                   	push   edx
c0028a6a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0028a6e:	52                   	push   edx
c0028a6f:	6a 00                	push   0x0
c0028a71:	6a 04                	push   0x4
c0028a73:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0028a7a:	ff d0                	call   eax
c0028a7c:	83 c4 20             	add    esp,0x20
c0028a7f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028a86:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0028a8c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0028a93:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0028a9a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0028a9d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0028aa4:	83 ec 0c             	sub    esp,0xc
c0028aa7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028aae:	e8 9f 1c ff ff       	call   c001a752 <File::close()>
c0028ab3:	83 c4 10             	add    esp,0x10
c0028ab6:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0028abd:	ba 00 00 00 00       	mov    edx,0x0
c0028ac2:	81 c4 3c 04 00 00    	add    esp,0x43c
c0028ac8:	5b                   	pop    ebx
c0028ac9:	5e                   	pop    esi
c0028aca:	5f                   	pop    edi
c0028acb:	5d                   	pop    ebp
c0028acc:	c3                   	ret    
c0028acd:	90                   	nop
c0028ace:	66 90                	xchg   ax,ax

c0028ad0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0028ad0:	57                   	push   edi
c0028ad1:	56                   	push   esi
c0028ad2:	53                   	push   ebx
c0028ad3:	81 ec 50 02 00 00    	sub    esp,0x250
c0028ad9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0028ae1:	74 0d                	je     c0028af0 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0028ae3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0028aeb:	75 0f                	jne    c0028afc <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0028aed:	8d 76 00             	lea    esi,[esi+0x0]
c0028af0:	b8 04 00 00 00       	mov    eax,0x4
c0028af5:	e9 3a 01 00 00       	jmp    c0028c34 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028afa:	66 90                	xchg   ax,ax
c0028afc:	83 ec 08             	sub    esp,0x8
c0028aff:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0028b06:	50                   	push   eax
c0028b07:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0028b0e:	e8 4d bf fd ff       	call   c0004a60 <f_readdir>
c0028b13:	83 c4 10             	add    esp,0x10
c0028b16:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0028b1d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0028b24:	83 ec 0c             	sub    esp,0xc
c0028b27:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0028b2e:	83 c0 16             	add    eax,0x16
c0028b31:	50                   	push   eax
c0028b32:	e8 49 7a fd ff       	call   c0000580 <strlen>
c0028b37:	83 c4 10             	add    esp,0x10
c0028b3a:	ba 00 00 00 00       	mov    edx,0x0
c0028b3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028b43:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0028b47:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0028b4e:	0f b6 c0             	movzx  eax,al
c0028b51:	83 e0 10             	and    eax,0x10
c0028b54:	74 0a                	je     c0028b60 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0028b56:	b8 02 00 00 00       	mov    eax,0x2
c0028b5b:	eb 0b                	jmp    c0028b68 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0028b5d:	8d 76 00             	lea    esi,[esi+0x0]
c0028b60:	b8 01 00 00 00       	mov    eax,0x1
c0028b65:	8d 76 00             	lea    esi,[esi+0x0]
c0028b68:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028b6c:	83 ec 08             	sub    esp,0x8
c0028b6f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0028b76:	83 c0 16             	add    eax,0x16
c0028b79:	50                   	push   eax
c0028b7a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028b7e:	83 c0 10             	add    eax,0x10
c0028b81:	50                   	push   eax
c0028b82:	e8 c9 7a fd ff       	call   c0000650 <strcpy>
c0028b87:	83 c4 10             	add    esp,0x10
c0028b8a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0028b91:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0028b98:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028b9c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0028ba3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0028baa:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0028bb1:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0028bb8:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0028bbf:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0028bc6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0028bcd:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0028bd4:	89 c6                	mov    esi,eax
c0028bd6:	89 d7                	mov    edi,edx
c0028bd8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0028bda:	89 c8                	mov    eax,ecx
c0028bdc:	89 fa                	mov    edx,edi
c0028bde:	89 f3                	mov    ebx,esi
c0028be0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0028be7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0028bee:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0028bf5:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0028bfc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0028c02:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0028c09:	0f be c0             	movsx  eax,al
c0028c0c:	85 c0                	test   eax,eax
c0028c0e:	75 08                	jne    c0028c18 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0028c10:	b8 07 00 00 00       	mov    eax,0x7
c0028c15:	eb 1d                	jmp    c0028c34 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028c17:	90                   	nop
c0028c18:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0028c1f:	85 c0                	test   eax,eax
c0028c21:	75 09                	jne    c0028c2c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0028c23:	b8 00 00 00 00       	mov    eax,0x0
c0028c28:	eb 0a                	jmp    c0028c34 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028c2a:	66 90                	xchg   ax,ax
c0028c2c:	b8 01 00 00 00       	mov    eax,0x1
c0028c31:	8d 76 00             	lea    esi,[esi+0x0]
c0028c34:	81 c4 50 02 00 00    	add    esp,0x250
c0028c3a:	5b                   	pop    ebx
c0028c3b:	5e                   	pop    esi
c0028c3c:	5f                   	pop    edi
c0028c3d:	c3                   	ret    
c0028c3e:	66 90                	xchg   ax,ax

c0028c40 <FAT::read(void*, unsigned long, void*, int*)>:
c0028c40:	83 ec 1c             	sub    esp,0x1c
c0028c43:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028c48:	74 0a                	je     c0028c54 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0028c4a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0028c4f:	75 0b                	jne    c0028c5c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0028c51:	8d 76 00             	lea    esi,[esi+0x0]
c0028c54:	b8 04 00 00 00       	mov    eax,0x4
c0028c59:	eb 41                	jmp    c0028c9c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0028c5b:	90                   	nop
c0028c5c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028c60:	50                   	push   eax
c0028c61:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028c65:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0028c69:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028c6d:	e8 35 b6 fd ff       	call   c00042a7 <f_read>
c0028c72:	83 c4 10             	add    esp,0x10
c0028c75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028c79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028c7d:	89 c2                	mov    edx,eax
c0028c7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0028c83:	89 10                	mov    DWORD PTR [eax],edx
c0028c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028c89:	85 c0                	test   eax,eax
c0028c8b:	75 07                	jne    c0028c94 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0028c8d:	b8 00 00 00 00       	mov    eax,0x0
c0028c92:	eb 08                	jmp    c0028c9c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0028c94:	b8 01 00 00 00       	mov    eax,0x1
c0028c99:	8d 76 00             	lea    esi,[esi+0x0]
c0028c9c:	83 c4 1c             	add    esp,0x1c
c0028c9f:	c3                   	ret    

c0028ca0 <FAT::write(void*, unsigned long, void*, int*)>:
c0028ca0:	83 ec 1c             	sub    esp,0x1c
c0028ca3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028ca8:	74 0a                	je     c0028cb4 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0028caa:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0028caf:	75 0b                	jne    c0028cbc <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0028cb1:	8d 76 00             	lea    esi,[esi+0x0]
c0028cb4:	b8 04 00 00 00       	mov    eax,0x4
c0028cb9:	eb 41                	jmp    c0028cfc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0028cbb:	90                   	nop
c0028cbc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028cc0:	50                   	push   eax
c0028cc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028cc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0028cc9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028ccd:	e8 b6 b7 fd ff       	call   c0004488 <f_write>
c0028cd2:	83 c4 10             	add    esp,0x10
c0028cd5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028cd9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028cdd:	89 c2                	mov    edx,eax
c0028cdf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0028ce3:	89 10                	mov    DWORD PTR [eax],edx
c0028ce5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028ce9:	85 c0                	test   eax,eax
c0028ceb:	75 07                	jne    c0028cf4 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0028ced:	b8 00 00 00 00       	mov    eax,0x0
c0028cf2:	eb 08                	jmp    c0028cfc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0028cf4:	b8 01 00 00 00       	mov    eax,0x1
c0028cf9:	8d 76 00             	lea    esi,[esi+0x0]
c0028cfc:	83 c4 1c             	add    esp,0x1c
c0028cff:	c3                   	ret    

c0028d00 <FAT::close(void*)>:
c0028d00:	83 ec 1c             	sub    esp,0x1c
c0028d03:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028d08:	75 0a                	jne    c0028d14 <FAT::close(void*)+0x14>
c0028d0a:	b8 04 00 00 00       	mov    eax,0x4
c0028d0f:	eb 3f                	jmp    c0028d50 <FAT::close(void*)+0x50>
c0028d11:	8d 76 00             	lea    esi,[esi+0x0]
c0028d14:	83 ec 0c             	sub    esp,0xc
c0028d17:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028d1b:	e8 74 ba fd ff       	call   c0004794 <f_close>
c0028d20:	83 c4 10             	add    esp,0x10
c0028d23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028d27:	83 ec 0c             	sub    esp,0xc
c0028d2a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028d2e:	e8 65 d9 fe ff       	call   c0016698 <free>
c0028d33:	83 c4 10             	add    esp,0x10
c0028d36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028d3a:	85 c0                	test   eax,eax
c0028d3c:	75 0a                	jne    c0028d48 <FAT::close(void*)+0x48>
c0028d3e:	b8 00 00 00 00       	mov    eax,0x0
c0028d43:	eb 0b                	jmp    c0028d50 <FAT::close(void*)+0x50>
c0028d45:	8d 76 00             	lea    esi,[esi+0x0]
c0028d48:	b8 01 00 00 00       	mov    eax,0x1
c0028d4d:	8d 76 00             	lea    esi,[esi+0x0]
c0028d50:	83 c4 1c             	add    esp,0x1c
c0028d53:	c3                   	ret    

c0028d54 <FAT::closeDir(void*)>:
c0028d54:	83 ec 1c             	sub    esp,0x1c
c0028d57:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028d5c:	75 0a                	jne    c0028d68 <FAT::closeDir(void*)+0x14>
c0028d5e:	b8 04 00 00 00       	mov    eax,0x4
c0028d63:	eb 3f                	jmp    c0028da4 <FAT::closeDir(void*)+0x50>
c0028d65:	8d 76 00             	lea    esi,[esi+0x0]
c0028d68:	83 ec 0c             	sub    esp,0xc
c0028d6b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028d6f:	e8 ca bc fd ff       	call   c0004a3e <f_closedir>
c0028d74:	83 c4 10             	add    esp,0x10
c0028d77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028d7b:	83 ec 0c             	sub    esp,0xc
c0028d7e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028d82:	e8 11 d9 fe ff       	call   c0016698 <free>
c0028d87:	83 c4 10             	add    esp,0x10
c0028d8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028d8e:	85 c0                	test   eax,eax
c0028d90:	75 0a                	jne    c0028d9c <FAT::closeDir(void*)+0x48>
c0028d92:	b8 00 00 00 00       	mov    eax,0x0
c0028d97:	eb 0b                	jmp    c0028da4 <FAT::closeDir(void*)+0x50>
c0028d99:	8d 76 00             	lea    esi,[esi+0x0]
c0028d9c:	b8 01 00 00 00       	mov    eax,0x1
c0028da1:	8d 76 00             	lea    esi,[esi+0x0]
c0028da4:	83 c4 1c             	add    esp,0x1c
c0028da7:	c3                   	ret    

c0028da8 <FAT::truncate(void*, unsigned long long)>:
c0028da8:	83 ec 2c             	sub    esp,0x2c
c0028dab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028daf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028db3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0028db7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028dbb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0028dc0:	75 0a                	jne    c0028dcc <FAT::truncate(void*, unsigned long long)+0x24>
c0028dc2:	b8 04 00 00 00       	mov    eax,0x4
c0028dc7:	eb 47                	jmp    c0028e10 <FAT::truncate(void*, unsigned long long)+0x68>
c0028dc9:	8d 76 00             	lea    esi,[esi+0x0]
c0028dcc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028dd0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0028dd3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0028dd7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0028ddf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028de3:	83 ec 08             	sub    esp,0x8
c0028de6:	50                   	push   eax
c0028de7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028deb:	e8 d3 b9 fd ff       	call   c00047c3 <f_lseek>
c0028df0:	83 c4 10             	add    esp,0x10
c0028df3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028df7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028dfb:	85 c0                	test   eax,eax
c0028dfd:	75 09                	jne    c0028e08 <FAT::truncate(void*, unsigned long long)+0x60>
c0028dff:	b8 00 00 00 00       	mov    eax,0x0
c0028e04:	eb 0a                	jmp    c0028e10 <FAT::truncate(void*, unsigned long long)+0x68>
c0028e06:	66 90                	xchg   ax,ax
c0028e08:	b8 01 00 00 00       	mov    eax,0x1
c0028e0d:	8d 76 00             	lea    esi,[esi+0x0]
c0028e10:	83 c4 2c             	add    esp,0x2c
c0028e13:	c3                   	ret    

c0028e14 <FAT::seek(void*, unsigned long long)>:
c0028e14:	83 ec 2c             	sub    esp,0x2c
c0028e17:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028e1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028e1f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0028e23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028e27:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0028e2c:	75 0a                	jne    c0028e38 <FAT::seek(void*, unsigned long long)+0x24>
c0028e2e:	b8 04 00 00 00       	mov    eax,0x4
c0028e33:	eb 33                	jmp    c0028e68 <FAT::seek(void*, unsigned long long)+0x54>
c0028e35:	8d 76 00             	lea    esi,[esi+0x0]
c0028e38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028e3c:	83 ec 08             	sub    esp,0x8
c0028e3f:	50                   	push   eax
c0028e40:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028e44:	e8 7a b9 fd ff       	call   c00047c3 <f_lseek>
c0028e49:	83 c4 10             	add    esp,0x10
c0028e4c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028e50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0028e54:	85 c0                	test   eax,eax
c0028e56:	75 08                	jne    c0028e60 <FAT::seek(void*, unsigned long long)+0x4c>
c0028e58:	b8 00 00 00 00       	mov    eax,0x0
c0028e5d:	eb 09                	jmp    c0028e68 <FAT::seek(void*, unsigned long long)+0x54>
c0028e5f:	90                   	nop
c0028e60:	b8 01 00 00 00       	mov    eax,0x1
c0028e65:	8d 76 00             	lea    esi,[esi+0x0]
c0028e68:	83 c4 2c             	add    esp,0x2c
c0028e6b:	c3                   	ret    

c0028e6c <fatWrapperReadDisk>:
c0028e6c:	53                   	push   ebx
c0028e6d:	83 ec 18             	sub    esp,0x18
c0028e70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028e74:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028e78:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028e7d:	8b 0c 85 80 03 04 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffbfc80]
c0028e84:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0028e88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028e8c:	ba 00 00 00 00       	mov    edx,0x0
c0028e91:	83 ec 0c             	sub    esp,0xc
c0028e94:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028e98:	53                   	push   ebx
c0028e99:	52                   	push   edx
c0028e9a:	50                   	push   eax
c0028e9b:	51                   	push   ecx
c0028e9c:	e8 61 3b ff ff       	call   c001ca02 <LogicalDisk::read(unsigned long long, int, void*)>
c0028ea1:	83 c4 20             	add    esp,0x20
c0028ea4:	83 c4 18             	add    esp,0x18
c0028ea7:	5b                   	pop    ebx
c0028ea8:	c3                   	ret    
c0028ea9:	8d 76 00             	lea    esi,[esi+0x0]

c0028eac <fatWrapperWriteDisk>:
c0028eac:	53                   	push   ebx
c0028ead:	83 ec 18             	sub    esp,0x18
c0028eb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028eb4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028eb8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028ebd:	8b 0c 85 80 03 04 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffbfc80]
c0028ec4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0028ec8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028ecc:	ba 00 00 00 00       	mov    edx,0x0
c0028ed1:	83 ec 0c             	sub    esp,0xc
c0028ed4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028ed8:	53                   	push   ebx
c0028ed9:	52                   	push   edx
c0028eda:	50                   	push   eax
c0028edb:	51                   	push   ecx
c0028edc:	e8 8d 3b ff ff       	call   c001ca6e <LogicalDisk::write(unsigned long long, int, void*)>
c0028ee1:	83 c4 20             	add    esp,0x20
c0028ee4:	83 c4 18             	add    esp,0x18
c0028ee7:	5b                   	pop    ebx
c0028ee8:	c3                   	ret    
c0028ee9:	8d 76 00             	lea    esi,[esi+0x0]

c0028eec <fatWrapperIoctl>:
c0028eec:	53                   	push   ebx
c0028eed:	83 ec 28             	sub    esp,0x28
c0028ef0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0028ef4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0028ef8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028efc:	88 d0                	mov    al,dl
c0028efe:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0028f02:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028f07:	83 f8 02             	cmp    eax,0x2
c0028f0a:	75 34                	jne    c0028f40 <fatWrapperIoctl+0x54>
c0028f0c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028f10:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028f14:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028f19:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c0028f20:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028f26:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0028f2c:	89 c2                	mov    edx,eax
c0028f2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0028f32:	66 89 10             	mov    WORD PTR [eax],dx
c0028f35:	b8 00 00 00 00       	mov    eax,0x0
c0028f3a:	e9 c5 00 00 00       	jmp    c0029004 <fatWrapperIoctl+0x118>
c0028f3f:	90                   	nop
c0028f40:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028f45:	83 f8 01             	cmp    eax,0x1
c0028f48:	75 6a                	jne    c0028fb4 <fatWrapperIoctl+0xc8>
c0028f4a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028f4e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0028f52:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028f57:	8b 04 85 80 03 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfc80]
c0028f5e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028f64:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0028f6a:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0028f70:	89 c8                	mov    eax,ecx
c0028f72:	89 da                	mov    edx,ebx
c0028f74:	0f a4 c2 0a          	shld   edx,eax,0xa
c0028f78:	c1 e0 0a             	shl    eax,0xa
c0028f7b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0028f80:	8b 0c 8d 80 03 04 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffbfc80]
c0028f87:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0028f8d:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0028f93:	89 cb                	mov    ebx,ecx
c0028f95:	c1 fb 1f             	sar    ebx,0x1f
c0028f98:	53                   	push   ebx
c0028f99:	51                   	push   ecx
c0028f9a:	52                   	push   edx
c0028f9b:	50                   	push   eax
c0028f9c:	e8 0f 5f 00 00       	call   c002eeb0 <__udivdi3>
c0028fa1:	83 c4 10             	add    esp,0x10
c0028fa4:	89 c2                	mov    edx,eax
c0028fa6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0028faa:	89 10                	mov    DWORD PTR [eax],edx
c0028fac:	b8 00 00 00 00       	mov    eax,0x0
c0028fb1:	eb 51                	jmp    c0029004 <fatWrapperIoctl+0x118>
c0028fb3:	90                   	nop
c0028fb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028fb9:	85 c0                	test   eax,eax
c0028fbb:	75 07                	jne    c0028fc4 <fatWrapperIoctl+0xd8>
c0028fbd:	b8 00 00 00 00       	mov    eax,0x0
c0028fc2:	eb 40                	jmp    c0029004 <fatWrapperIoctl+0x118>
c0028fc4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028fc9:	83 f8 03             	cmp    eax,0x3
c0028fcc:	75 1a                	jne    c0028fe8 <fatWrapperIoctl+0xfc>
c0028fce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028fd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028fd6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028fda:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0028fe0:	b8 00 00 00 00       	mov    eax,0x0
c0028fe5:	eb 1d                	jmp    c0029004 <fatWrapperIoctl+0x118>
c0028fe7:	90                   	nop
c0028fe8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028fed:	83 f8 04             	cmp    eax,0x4
c0028ff0:	75 0a                	jne    c0028ffc <fatWrapperIoctl+0x110>
c0028ff2:	b8 00 00 00 00       	mov    eax,0x0
c0028ff7:	eb 0b                	jmp    c0029004 <fatWrapperIoctl+0x118>
c0028ff9:	8d 76 00             	lea    esi,[esi+0x0]
c0028ffc:	b8 04 00 00 00       	mov    eax,0x4
c0029001:	8d 76 00             	lea    esi,[esi+0x0]
c0029004:	83 c4 28             	add    esp,0x28
c0029007:	5b                   	pop    ebx
c0029008:	c3                   	ret    
c0029009:	90                   	nop
c002900a:	66 90                	xchg   ax,ax

c002900c <FAT::FAT()>:
c002900c:	83 ec 1c             	sub    esp,0x1c
c002900f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029013:	83 ec 0c             	sub    esp,0xc
c0029016:	50                   	push   eax
c0029017:	e8 04 13 ff ff       	call   c001a320 <Filesystem::Filesystem()>
c002901c:	83 c4 10             	add    esp,0x10
c002901f:	ba e8 3b 03 c0       	mov    edx,0xc0033be8
c0029024:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029028:	89 10                	mov    DWORD PTR [eax],edx
c002902a:	c7 05 80 12 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0041280,0x0
c0029034:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002903c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0029041:	7f 19                	jg     c002905c <FAT::FAT()+0x50>
c0029043:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0029047:	c7 04 85 a0 12 04 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffbed60],0xffffffff
c0029052:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0029057:	eb e3                	jmp    c002903c <FAT::FAT()+0x30>
c0029059:	8d 76 00             	lea    esi,[esi+0x0]
c002905c:	90                   	nop
c002905d:	83 c4 1c             	add    esp,0x1c
c0029060:	c3                   	ret    
c0029061:	90                   	nop
c0029062:	66 90                	xchg   ax,ax

c0029064 <FAT::fixFilepath(char*)>:
c0029064:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029068:	8a 00                	mov    al,BYTE PTR [eax]
c002906a:	0f be c0             	movsx  eax,al
c002906d:	83 f8 40             	cmp    eax,0x40
c0029070:	7e 2e                	jle    c00290a0 <FAT::fixFilepath(char*)+0x3c>
c0029072:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029076:	8a 00                	mov    al,BYTE PTR [eax]
c0029078:	83 e8 41             	sub    eax,0x41
c002907b:	88 c2                	mov    dl,al
c002907d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029081:	88 10                	mov    BYTE PTR [eax],dl
c0029083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029087:	8a 00                	mov    al,BYTE PTR [eax]
c0029089:	0f be c0             	movsx  eax,al
c002908c:	8b 04 85 a0 12 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbed60]
c0029093:	83 c0 30             	add    eax,0x30
c0029096:	88 c2                	mov    dl,al
c0029098:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002909c:	88 10                	mov    BYTE PTR [eax],dl
c002909e:	66 90                	xchg   ax,ax
c00290a0:	90                   	nop
c00290a1:	c3                   	ret    
c00290a2:	66 90                	xchg   ax,ax

c00290a4 <FAT::open(char const*, void**, FileOpenMode)>:
c00290a4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00290aa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00290b2:	74 0c                	je     c00290c0 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00290b4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00290bc:	75 0e                	jne    c00290cc <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00290be:	66 90                	xchg   ax,ax
c00290c0:	b8 04 00 00 00       	mov    eax,0x4
c00290c5:	e9 46 01 00 00       	jmp    c0029210 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c00290ca:	66 90                	xchg   ax,ax
c00290cc:	83 ec 08             	sub    esp,0x8
c00290cf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00290d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00290da:	50                   	push   eax
c00290db:	e8 70 75 fd ff       	call   c0000650 <strcpy>
c00290e0:	83 c4 10             	add    esp,0x10
c00290e3:	83 ec 08             	sub    esp,0x8
c00290e6:	8d 44 24 10          	lea    eax,[esp+0x10]
c00290ea:	50                   	push   eax
c00290eb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00290f2:	e8 6d ff ff ff       	call   c0029064 <FAT::fixFilepath(char*)>
c00290f7:	83 c4 10             	add    esp,0x10
c00290fa:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0029102:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0029109:	83 e0 01             	and    eax,0x1
c002910c:	74 12                	je     c0029120 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c002910e:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0029115:	83 c8 01             	or     eax,0x1
c0029118:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c002911f:	90                   	nop
c0029120:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0029127:	83 e0 04             	and    eax,0x4
c002912a:	74 24                	je     c0029150 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c002912c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0029133:	83 c8 30             	or     eax,0x30
c0029136:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c002913d:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0029144:	83 c8 02             	or     eax,0x2
c0029147:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c002914e:	66 90                	xchg   ax,ax
c0029150:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0029157:	83 e0 02             	and    eax,0x2
c002915a:	74 14                	je     c0029170 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c002915c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0029163:	83 c8 02             	or     eax,0x2
c0029166:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c002916d:	8d 76 00             	lea    esi,[esi+0x0]
c0029170:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0029177:	83 e0 08             	and    eax,0x8
c002917a:	74 14                	je     c0029190 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c002917c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0029183:	83 c8 04             	or     eax,0x4
c0029186:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c002918d:	8d 76 00             	lea    esi,[esi+0x0]
c0029190:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0029197:	83 e0 10             	and    eax,0x10
c002919a:	74 14                	je     c00291b0 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c002919c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00291a3:	83 c8 08             	or     eax,0x8
c00291a6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00291ad:	8d 76 00             	lea    esi,[esi+0x0]
c00291b0:	83 ec 0c             	sub    esp,0xc
c00291b3:	68 28 02 00 00       	push   0x228
c00291b8:	e8 cb d4 fe ff       	call   c0016688 <malloc>
c00291bd:	83 c4 10             	add    esp,0x10
c00291c0:	89 c2                	mov    edx,eax
c00291c2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00291c9:	89 10                	mov    DWORD PTR [eax],edx
c00291cb:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00291d3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00291da:	8b 00                	mov    eax,DWORD PTR [eax]
c00291dc:	83 ec 04             	sub    esp,0x4
c00291df:	52                   	push   edx
c00291e0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00291e4:	52                   	push   edx
c00291e5:	50                   	push   eax
c00291e6:	e8 f9 ad fd ff       	call   c0003fe4 <f_open>
c00291eb:	83 c4 10             	add    esp,0x10
c00291ee:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00291f5:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00291fd:	74 09                	je     c0029208 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c00291ff:	b8 01 00 00 00       	mov    eax,0x1
c0029204:	eb 0a                	jmp    c0029210 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0029206:	66 90                	xchg   ax,ax
c0029208:	b8 00 00 00 00       	mov    eax,0x0
c002920d:	8d 76 00             	lea    esi,[esi+0x0]
c0029210:	81 c4 1c 01 00 00    	add    esp,0x11c
c0029216:	c3                   	ret    
c0029217:	90                   	nop

c0029218 <FAT::openDir(char const*, void**)>:
c0029218:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002921e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0029226:	74 0c                	je     c0029234 <FAT::openDir(char const*, void**)+0x1c>
c0029228:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0029230:	75 0e                	jne    c0029240 <FAT::openDir(char const*, void**)+0x28>
c0029232:	66 90                	xchg   ax,ax
c0029234:	b8 04 00 00 00       	mov    eax,0x4
c0029239:	e9 82 00 00 00       	jmp    c00292c0 <FAT::openDir(char const*, void**)+0xa8>
c002923e:	66 90                	xchg   ax,ax
c0029240:	83 ec 08             	sub    esp,0x8
c0029243:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002924a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002924e:	50                   	push   eax
c002924f:	e8 fc 73 fd ff       	call   c0000650 <strcpy>
c0029254:	83 c4 10             	add    esp,0x10
c0029257:	83 ec 08             	sub    esp,0x8
c002925a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002925e:	50                   	push   eax
c002925f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0029266:	e8 f9 fd ff ff       	call   c0029064 <FAT::fixFilepath(char*)>
c002926b:	83 c4 10             	add    esp,0x10
c002926e:	83 ec 0c             	sub    esp,0xc
c0029271:	6a 30                	push   0x30
c0029273:	e8 10 d4 fe ff       	call   c0016688 <malloc>
c0029278:	83 c4 10             	add    esp,0x10
c002927b:	89 c2                	mov    edx,eax
c002927d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0029284:	89 10                	mov    DWORD PTR [eax],edx
c0029286:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002928d:	8b 00                	mov    eax,DWORD PTR [eax]
c002928f:	83 ec 08             	sub    esp,0x8
c0029292:	8d 54 24 14          	lea    edx,[esp+0x14]
c0029296:	52                   	push   edx
c0029297:	50                   	push   eax
c0029298:	e8 d6 b6 fd ff       	call   c0004973 <f_opendir>
c002929d:	83 c4 10             	add    esp,0x10
c00292a0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00292a7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00292af:	74 07                	je     c00292b8 <FAT::openDir(char const*, void**)+0xa0>
c00292b1:	b8 01 00 00 00       	mov    eax,0x1
c00292b6:	eb 08                	jmp    c00292c0 <FAT::openDir(char const*, void**)+0xa8>
c00292b8:	b8 00 00 00 00       	mov    eax,0x0
c00292bd:	8d 76 00             	lea    esi,[esi+0x0]
c00292c0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00292c6:	c3                   	ret    
c00292c7:	90                   	nop

c00292c8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00292c8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00292ce:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00292d6:	75 0c                	jne    c00292e4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00292d8:	b8 04 00 00 00       	mov    eax,0x4
c00292dd:	e9 d6 00 00 00       	jmp    c00293b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00292e2:	66 90                	xchg   ax,ax
c00292e4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00292ec:	75 0a                	jne    c00292f8 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00292ee:	b8 04 00 00 00       	mov    eax,0x4
c00292f3:	e9 c0 00 00 00       	jmp    c00293b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00292f8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0029300:	75 0a                	jne    c002930c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0029302:	b8 04 00 00 00       	mov    eax,0x4
c0029307:	e9 ac 00 00 00       	jmp    c00293b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c002930c:	83 ec 08             	sub    esp,0x8
c002930f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0029316:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002931d:	50                   	push   eax
c002931e:	e8 2d 73 fd ff       	call   c0000650 <strcpy>
c0029323:	83 c4 10             	add    esp,0x10
c0029326:	83 ec 08             	sub    esp,0x8
c0029329:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0029330:	50                   	push   eax
c0029331:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0029338:	e8 27 fd ff ff       	call   c0029064 <FAT::fixFilepath(char*)>
c002933d:	83 c4 10             	add    esp,0x10
c0029340:	83 ec 08             	sub    esp,0x8
c0029343:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0029347:	50                   	push   eax
c0029348:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002934f:	50                   	push   eax
c0029350:	e8 9d b7 fd ff       	call   c0004af2 <f_stat>
c0029355:	83 c4 10             	add    esp,0x10
c0029358:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002935f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0029366:	85 c0                	test   eax,eax
c0029368:	74 0a                	je     c0029374 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c002936a:	83 f8 04             	cmp    eax,0x4
c002936d:	74 39                	je     c00293a8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c002936f:	eb 3f                	jmp    c00293b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0029371:	8d 76 00             	lea    esi,[esi+0x0]
c0029374:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0029378:	0f b6 c0             	movzx  eax,al
c002937b:	83 e0 10             	and    eax,0x10
c002937e:	0f 95 c2             	setne  dl
c0029381:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0029388:	88 10                	mov    BYTE PTR [eax],dl
c002938a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002938e:	ba 00 00 00 00       	mov    edx,0x0
c0029393:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002939a:	89 01                	mov    DWORD PTR [ecx],eax
c002939c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002939f:	b8 00 00 00 00       	mov    eax,0x0
c00293a4:	eb 12                	jmp    c00293b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00293a6:	66 90                	xchg   ax,ax
c00293a8:	b8 02 00 00 00       	mov    eax,0x2
c00293ad:	eb 09                	jmp    c00293b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00293af:	90                   	nop
c00293b0:	b8 01 00 00 00       	mov    eax,0x1
c00293b5:	8d 76 00             	lea    esi,[esi+0x0]
c00293b8:	81 c4 2c 02 00 00    	add    esp,0x22c
c00293be:	c3                   	ret    
c00293bf:	90                   	nop

c00293c0 <FAT::unlink(char const*)>:
c00293c0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00293c6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00293ce:	75 08                	jne    c00293d8 <FAT::unlink(char const*)+0x18>
c00293d0:	b8 04 00 00 00       	mov    eax,0x4
c00293d5:	eb 61                	jmp    c0029438 <FAT::unlink(char const*)+0x78>
c00293d7:	90                   	nop
c00293d8:	83 ec 08             	sub    esp,0x8
c00293db:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00293e2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00293e6:	50                   	push   eax
c00293e7:	e8 64 72 fd ff       	call   c0000650 <strcpy>
c00293ec:	83 c4 10             	add    esp,0x10
c00293ef:	83 ec 08             	sub    esp,0x8
c00293f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00293f6:	50                   	push   eax
c00293f7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00293fe:	e8 61 fc ff ff       	call   c0029064 <FAT::fixFilepath(char*)>
c0029403:	83 c4 10             	add    esp,0x10
c0029406:	83 ec 0c             	sub    esp,0xc
c0029409:	8d 44 24 18          	lea    eax,[esp+0x18]
c002940d:	50                   	push   eax
c002940e:	e8 51 b9 fd ff       	call   c0004d64 <f_unlink>
c0029413:	83 c4 10             	add    esp,0x10
c0029416:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002941d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0029424:	85 c0                	test   eax,eax
c0029426:	75 08                	jne    c0029430 <FAT::unlink(char const*)+0x70>
c0029428:	b8 00 00 00 00       	mov    eax,0x0
c002942d:	eb 09                	jmp    c0029438 <FAT::unlink(char const*)+0x78>
c002942f:	90                   	nop
c0029430:	b8 01 00 00 00       	mov    eax,0x1
c0029435:	8d 76 00             	lea    esi,[esi+0x0]
c0029438:	81 c4 1c 01 00 00    	add    esp,0x11c
c002943e:	c3                   	ret    
c002943f:	90                   	nop

c0029440 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0029440:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0029446:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c002944d:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0029454:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0029458:	88 d0                	mov    al,dl
c002945a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002945e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0029466:	75 0c                	jne    c0029474 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0029468:	b8 04 00 00 00       	mov    eax,0x4
c002946d:	e9 7e 01 00 00       	jmp    c00295f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0029472:	66 90                	xchg   ax,ax
c0029474:	83 ec 08             	sub    esp,0x8
c0029477:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002947e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0029482:	50                   	push   eax
c0029483:	e8 c8 71 fd ff       	call   c0000650 <strcpy>
c0029488:	83 c4 10             	add    esp,0x10
c002948b:	83 ec 08             	sub    esp,0x8
c002948e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0029492:	50                   	push   eax
c0029493:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002949a:	e8 c5 fb ff ff       	call   c0029064 <FAT::fixFilepath(char*)>
c002949f:	83 c4 10             	add    esp,0x10
c00294a2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00294aa:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00294b2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00294b7:	83 e0 01             	and    eax,0x1
c00294ba:	74 14                	je     c00294d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c00294bc:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00294c3:	83 c8 01             	or     eax,0x1
c00294c6:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c00294cd:	8d 76 00             	lea    esi,[esi+0x0]
c00294d0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00294d5:	83 e0 02             	and    eax,0x2
c00294d8:	74 12                	je     c00294ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c00294da:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00294e1:	83 c8 20             	or     eax,0x20
c00294e4:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c00294eb:	90                   	nop
c00294ec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00294f1:	83 e0 04             	and    eax,0x4
c00294f4:	74 12                	je     c0029508 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00294f6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00294fd:	83 c8 04             	or     eax,0x4
c0029500:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0029507:	90                   	nop
c0029508:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002950d:	83 e0 08             	and    eax,0x8
c0029510:	74 12                	je     c0029524 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0029512:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0029519:	83 c8 02             	or     eax,0x2
c002951c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0029523:	90                   	nop
c0029524:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0029529:	83 e0 01             	and    eax,0x1
c002952c:	74 12                	je     c0029540 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c002952e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0029535:	83 c8 01             	or     eax,0x1
c0029538:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c002953f:	90                   	nop
c0029540:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0029545:	83 e0 02             	and    eax,0x2
c0029548:	74 12                	je     c002955c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c002954a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0029551:	83 c8 20             	or     eax,0x20
c0029554:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c002955b:	90                   	nop
c002955c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0029561:	83 e0 04             	and    eax,0x4
c0029564:	74 12                	je     c0029578 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c0029566:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c002956d:	83 c8 04             	or     eax,0x4
c0029570:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0029577:	90                   	nop
c0029578:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002957d:	83 e0 08             	and    eax,0x8
c0029580:	74 12                	je     c0029594 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c0029582:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0029589:	83 c8 02             	or     eax,0x2
c002958c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0029593:	90                   	nop
c0029594:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c002959b:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00295a2:	09 d0                	or     eax,edx
c00295a4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00295ab:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00295b3:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00295bb:	83 ec 04             	sub    esp,0x4
c00295be:	52                   	push   edx
c00295bf:	50                   	push   eax
c00295c0:	8d 44 24 24          	lea    eax,[esp+0x24]
c00295c4:	50                   	push   eax
c00295c5:	e8 0d bc fd ff       	call   c00051d7 <f_chmod>
c00295ca:	83 c4 10             	add    esp,0x10
c00295cd:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00295d4:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00295db:	85 c0                	test   eax,eax
c00295dd:	75 09                	jne    c00295e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c00295df:	b8 00 00 00 00       	mov    eax,0x0
c00295e4:	eb 0a                	jmp    c00295f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c00295e6:	66 90                	xchg   ax,ax
c00295e8:	b8 01 00 00 00       	mov    eax,0x1
c00295ed:	8d 76 00             	lea    esi,[esi+0x0]
c00295f0:	81 c4 2c 01 00 00    	add    esp,0x12c
c00295f6:	c3                   	ret    
c00295f7:	90                   	nop

c00295f8 <FAT::rename(char const*, char const*)>:
c00295f8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00295fe:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0029606:	74 0c                	je     c0029614 <FAT::rename(char const*, char const*)+0x1c>
c0029608:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0029610:	75 0e                	jne    c0029620 <FAT::rename(char const*, char const*)+0x28>
c0029612:	66 90                	xchg   ax,ax
c0029614:	b8 04 00 00 00       	mov    eax,0x4
c0029619:	e9 9e 00 00 00       	jmp    c00296bc <FAT::rename(char const*, char const*)+0xc4>
c002961e:	66 90                	xchg   ax,ax
c0029620:	83 ec 08             	sub    esp,0x8
c0029623:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002962a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0029631:	50                   	push   eax
c0029632:	e8 19 70 fd ff       	call   c0000650 <strcpy>
c0029637:	83 c4 10             	add    esp,0x10
c002963a:	83 ec 08             	sub    esp,0x8
c002963d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0029644:	50                   	push   eax
c0029645:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002964c:	e8 13 fa ff ff       	call   c0029064 <FAT::fixFilepath(char*)>
c0029651:	83 c4 10             	add    esp,0x10
c0029654:	83 ec 08             	sub    esp,0x8
c0029657:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002965e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0029662:	50                   	push   eax
c0029663:	e8 e8 6f fd ff       	call   c0000650 <strcpy>
c0029668:	83 c4 10             	add    esp,0x10
c002966b:	83 ec 08             	sub    esp,0x8
c002966e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0029672:	50                   	push   eax
c0029673:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002967a:	e8 e5 f9 ff ff       	call   c0029064 <FAT::fixFilepath(char*)>
c002967f:	83 c4 10             	add    esp,0x10
c0029682:	83 ec 08             	sub    esp,0x8
c0029685:	8d 44 24 14          	lea    eax,[esp+0x14]
c0029689:	50                   	push   eax
c002968a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0029691:	50                   	push   eax
c0029692:	e8 88 b9 fd ff       	call   c000501f <f_rename>
c0029697:	83 c4 10             	add    esp,0x10
c002969a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00296a1:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00296a8:	85 c0                	test   eax,eax
c00296aa:	75 08                	jne    c00296b4 <FAT::rename(char const*, char const*)+0xbc>
c00296ac:	b8 00 00 00 00       	mov    eax,0x0
c00296b1:	eb 09                	jmp    c00296bc <FAT::rename(char const*, char const*)+0xc4>
c00296b3:	90                   	nop
c00296b4:	b8 01 00 00 00       	mov    eax,0x1
c00296b9:	8d 76 00             	lea    esi,[esi+0x0]
c00296bc:	81 c4 1c 02 00 00    	add    esp,0x21c
c00296c2:	c3                   	ret    
c00296c3:	90                   	nop

c00296c4 <FAT::mkdir(char const*)>:
c00296c4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00296ca:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00296d2:	75 08                	jne    c00296dc <FAT::mkdir(char const*)+0x18>
c00296d4:	b8 04 00 00 00       	mov    eax,0x4
c00296d9:	eb 61                	jmp    c002973c <FAT::mkdir(char const*)+0x78>
c00296db:	90                   	nop
c00296dc:	83 ec 08             	sub    esp,0x8
c00296df:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00296e6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00296ea:	50                   	push   eax
c00296eb:	e8 60 6f fd ff       	call   c0000650 <strcpy>
c00296f0:	83 c4 10             	add    esp,0x10
c00296f3:	83 ec 08             	sub    esp,0x8
c00296f6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00296fa:	50                   	push   eax
c00296fb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0029702:	e8 5d f9 ff ff       	call   c0029064 <FAT::fixFilepath(char*)>
c0029707:	83 c4 10             	add    esp,0x10
c002970a:	83 ec 0c             	sub    esp,0xc
c002970d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0029711:	50                   	push   eax
c0029712:	e8 6d b7 fd ff       	call   c0004e84 <f_mkdir>
c0029717:	83 c4 10             	add    esp,0x10
c002971a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0029721:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0029728:	85 c0                	test   eax,eax
c002972a:	75 08                	jne    c0029734 <FAT::mkdir(char const*)+0x70>
c002972c:	b8 00 00 00 00       	mov    eax,0x0
c0029731:	eb 09                	jmp    c002973c <FAT::mkdir(char const*)+0x78>
c0029733:	90                   	nop
c0029734:	b8 01 00 00 00       	mov    eax,0x1
c0029739:	8d 76 00             	lea    esi,[esi+0x0]
c002973c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0029742:	c3                   	ret    
c0029743:	90                   	nop

c0029744 <FAT::exists(char const*)>:
c0029744:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002974a:	83 ec 08             	sub    esp,0x8
c002974d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0029754:	8d 44 24 10          	lea    eax,[esp+0x10]
c0029758:	50                   	push   eax
c0029759:	e8 f2 6e fd ff       	call   c0000650 <strcpy>
c002975e:	83 c4 10             	add    esp,0x10
c0029761:	83 ec 08             	sub    esp,0x8
c0029764:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0029768:	50                   	push   eax
c0029769:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0029770:	e8 ef f8 ff ff       	call   c0029064 <FAT::fixFilepath(char*)>
c0029775:	83 c4 10             	add    esp,0x10
c0029778:	83 ec 08             	sub    esp,0x8
c002977b:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0029782:	50                   	push   eax
c0029783:	8d 44 24 10          	lea    eax,[esp+0x10]
c0029787:	50                   	push   eax
c0029788:	e8 65 b3 fd ff       	call   c0004af2 <f_stat>
c002978d:	83 c4 10             	add    esp,0x10
c0029790:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0029797:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002979e:	85 c0                	test   eax,eax
c00297a0:	75 06                	jne    c00297a8 <FAT::exists(char const*)+0x64>
c00297a2:	b0 01                	mov    al,0x1
c00297a4:	eb 06                	jmp    c00297ac <FAT::exists(char const*)+0x68>
c00297a6:	66 90                	xchg   ax,ax
c00297a8:	b0 00                	mov    al,0x0
c00297aa:	66 90                	xchg   ax,ax
c00297ac:	81 c4 2c 02 00 00    	add    esp,0x22c
c00297b2:	c3                   	ret    
c00297b3:	90                   	nop

c00297b4 <isoReadDiscSectorHelper>:
c00297b4:	83 ec 2c             	sub    esp,0x2c
c00297b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00297bb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00297bf:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00297c4:	83 e8 41             	sub    eax,0x41
c00297c7:	8b 0c 85 80 03 04 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffbfc80]
c00297ce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00297d2:	ba 00 00 00 00       	mov    edx,0x0
c00297d7:	83 ec 0c             	sub    esp,0xc
c00297da:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00297de:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00297e2:	52                   	push   edx
c00297e3:	50                   	push   eax
c00297e4:	51                   	push   ecx
c00297e5:	e8 18 32 ff ff       	call   c001ca02 <LogicalDisk::read(unsigned long long, int, void*)>
c00297ea:	83 c4 20             	add    esp,0x20
c00297ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00297f1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00297f6:	74 0c                	je     c0029804 <isoReadDiscSectorHelper+0x50>
c00297f8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00297fc:	c1 e0 0b             	shl    eax,0xb
c00297ff:	eb 0b                	jmp    c002980c <isoReadDiscSectorHelper+0x58>
c0029801:	8d 76 00             	lea    esi,[esi+0x0]
c0029804:	b8 00 00 00 00       	mov    eax,0x0
c0029809:	8d 76 00             	lea    esi,[esi+0x0]
c002980c:	83 c4 2c             	add    esp,0x2c
c002980f:	c3                   	ret    

c0029810 <iso_kprintf>:
c0029810:	83 ec 0c             	sub    esp,0xc
c0029813:	83 ec 08             	sub    esp,0x8
c0029816:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002981a:	68 f2 39 03 c0       	push   0xc00339f2
c002981f:	e8 9a fc fe ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0029824:	83 c4 10             	add    esp,0x10
c0029827:	90                   	nop
c0029828:	83 c4 0c             	add    esp,0xc
c002982b:	c3                   	ret    

c002982c <iso_kprintfd>:
c002982c:	83 ec 0c             	sub    esp,0xc
c002982f:	83 ec 08             	sub    esp,0x8
c0029832:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0029836:	68 19 27 03 c0       	push   0xc0032719
c002983b:	e8 7e fc fe ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0029840:	83 c4 10             	add    esp,0x10
c0029843:	90                   	nop
c0029844:	83 c4 0c             	add    esp,0xc
c0029847:	c3                   	ret    

c0029848 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0029848:	b8 08 00 00 00       	mov    eax,0x8
c002984d:	c3                   	ret    

c002984e <ISO9660::truncate(void*, unsigned long long)>:
c002984e:	b8 01 00 00 00       	mov    eax,0x1
c0029853:	c3                   	ret    

c0029854 <ISO9660::getName()>:
c0029854:	b8 4c 3c 03 c0       	mov    eax,0xc0033c4c
c0029859:	c3                   	ret    

c002985a <ISO9660::closeDir(void*)>:
c002985a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002985e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029860:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0029863:	90                   	nop

c0029864 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0029864:	b8 01 00 00 00       	mov    eax,0x1
c0029869:	c3                   	ret    

c002986a <ISO9660::unlink(char const*)>:
c002986a:	b8 01 00 00 00       	mov    eax,0x1
c002986f:	c3                   	ret    

c0029870 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0029870:	b8 03 00 00 00       	mov    eax,0x3
c0029875:	c3                   	ret    

c0029876 <ISO9660::rename(char const*, char const*)>:
c0029876:	b8 01 00 00 00       	mov    eax,0x1
c002987b:	c3                   	ret    

c002987c <ISO9660::mkdir(char const*)>:
c002987c:	b8 01 00 00 00       	mov    eax,0x1
c0029881:	c3                   	ret    

c0029882 <ISO9660::~ISO9660()>:
c0029882:	83 ec 0c             	sub    esp,0xc
c0029885:	ba 8c 3d 03 c0       	mov    edx,0xc0033d8c
c002988a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002988e:	89 10                	mov    DWORD PTR [eax],edx
c0029890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029894:	83 ec 0c             	sub    esp,0xc
c0029897:	50                   	push   eax
c0029898:	e8 a7 0a ff ff       	call   c001a344 <Filesystem::~Filesystem()>
c002989d:	83 c4 10             	add    esp,0x10
c00298a0:	90                   	nop
c00298a1:	83 c4 0c             	add    esp,0xc
c00298a4:	c3                   	ret    
c00298a5:	90                   	nop

c00298a6 <ISO9660::~ISO9660()>:
c00298a6:	83 ec 0c             	sub    esp,0xc
c00298a9:	83 ec 0c             	sub    esp,0xc
c00298ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298b0:	e8 cd ff ff ff       	call   c0029882 <ISO9660::~ISO9660()>
c00298b5:	83 c4 10             	add    esp,0x10
c00298b8:	83 ec 08             	sub    esp,0x8
c00298bb:	6a 08                	push   0x8
c00298bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298c1:	e8 fa fa fe ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c00298c6:	83 c4 10             	add    esp,0x10
c00298c9:	83 c4 0c             	add    esp,0xc
c00298cc:	c3                   	ret    
c00298cd:	90                   	nop

c00298ce <ISO9660::exists(char const*)>:
c00298ce:	83 ec 18             	sub    esp,0x18
c00298d1:	68 67 3c 03 c0       	push   0xc0033c67
c00298d6:	e8 27 6e ff ff       	call   c0020702 <KePanic(char const*)>
c00298db:	31 c0                	xor    eax,eax
c00298dd:	83 c4 1c             	add    esp,0x1c
c00298e0:	c3                   	ret    
c00298e1:	90                   	nop

c00298e2 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00298e2:	56                   	push   esi
c00298e3:	53                   	push   ebx
c00298e4:	53                   	push   ebx
c00298e5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00298e9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00298ed:	85 db                	test   ebx,ebx
c00298ef:	0f 84 ca 00 00 00    	je     c00299bf <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c00298f5:	85 f6                	test   esi,esi
c00298f7:	0f 84 c2 00 00 00    	je     c00299bf <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c00298fd:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0029902:	b8 03 00 00 00       	mov    eax,0x3
c0029907:	0f 85 b7 00 00 00    	jne    c00299c4 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c002990d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c002990f:	38 0d 80 13 04 c0    	cmp    BYTE PTR ds:0xc0041380,cl
c0029915:	0f be 05 80 13 04 c0 	movsx  eax,BYTE PTR ds:0xc0041380
c002991c:	74 1b                	je     c0029939 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c002991e:	85 c0                	test   eax,eax
c0029920:	74 10                	je     c0029932 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0029922:	83 ec 0c             	sub    esp,0xc
c0029925:	68 85 3c 03 c0       	push   0xc0033c85
c002992a:	e8 d3 6d ff ff       	call   c0020702 <KePanic(char const*)>
c002992f:	83 c4 10             	add    esp,0x10
c0029932:	8a 03                	mov    al,BYTE PTR [ebx]
c0029934:	a2 80 13 04 c0       	mov    ds:0xc0041380,al
c0029939:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c002993c:	8b 04 85 7c 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd84]
c0029943:	85 c0                	test   eax,eax
c0029945:	74 09                	je     c0029950 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c0029947:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c002994e:	74 48                	je     c0029998 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c0029950:	83 ec 0c             	sub    esp,0xc
c0029953:	68 95 3c 03 c0       	push   0xc0033c95
c0029958:	e8 61 fb fe ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c002995d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029960:	83 c4 10             	add    esp,0x10
c0029963:	8b 04 85 7c 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd84]
c002996a:	85 c0                	test   eax,eax
c002996c:	74 17                	je     c0029985 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c002996e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0029975:	83 ec 0c             	sub    esp,0xc
c0029978:	68 b5 3c 03 c0       	push   0xc0033cb5
c002997d:	e8 3c fb fe ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0029982:	83 c4 10             	add    esp,0x10
c0029985:	0f be 05 80 13 04 c0 	movsx  eax,BYTE PTR ds:0xc0041380
c002998c:	83 ec 0c             	sub    esp,0xc
c002998f:	50                   	push   eax
c0029990:	e8 16 d4 fd ff       	call   c0006dab <init_percd>
c0029995:	83 c4 10             	add    esp,0x10
c0029998:	51                   	push   ecx
c0029999:	83 c3 03             	add    ebx,0x3
c002999c:	51                   	push   ecx
c002999d:	6a 00                	push   0x0
c002999f:	53                   	push   ebx
c00299a0:	e8 c9 ce fd ff       	call   c000686e <iso_open>
c00299a5:	83 c4 10             	add    esp,0x10
c00299a8:	89 c2                	mov    edx,eax
c00299aa:	b8 01 00 00 00       	mov    eax,0x1
c00299af:	83 fa ff             	cmp    edx,0xffffffff
c00299b2:	74 10                	je     c00299c4 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00299b4:	83 c2 32             	add    edx,0x32
c00299b7:	31 c0                	xor    eax,eax
c00299b9:	01 d2                	add    edx,edx
c00299bb:	89 16                	mov    DWORD PTR [esi],edx
c00299bd:	eb 05                	jmp    c00299c4 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00299bf:	b8 04 00 00 00       	mov    eax,0x4
c00299c4:	5a                   	pop    edx
c00299c5:	5b                   	pop    ebx
c00299c6:	5e                   	pop    esi
c00299c7:	c3                   	ret    

c00299c8 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00299c8:	53                   	push   ebx
c00299c9:	83 ec 08             	sub    esp,0x8
c00299cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00299d0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00299d4:	85 c0                	test   eax,eax
c00299d6:	74 2d                	je     c0029a05 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00299d8:	85 db                	test   ebx,ebx
c00299da:	74 29                	je     c0029a05 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00299dc:	52                   	push   edx
c00299dd:	b9 02 00 00 00       	mov    ecx,0x2
c00299e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299e6:	99                   	cdq    
c00299e7:	f7 f9                	idiv   ecx
c00299e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00299ed:	83 e8 32             	sub    eax,0x32
c00299f0:	50                   	push   eax
c00299f1:	e8 20 cf fd ff       	call   c0006916 <iso_read>
c00299f6:	83 c4 10             	add    esp,0x10
c00299f9:	89 03                	mov    DWORD PTR [ebx],eax
c00299fb:	09 d0                	or     eax,edx
c00299fd:	0f 94 c0             	sete   al
c0029a00:	0f b6 c0             	movzx  eax,al
c0029a03:	eb 05                	jmp    c0029a0a <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0029a05:	b8 04 00 00 00       	mov    eax,0x4
c0029a0a:	83 c4 08             	add    esp,0x8
c0029a0d:	5b                   	pop    ebx
c0029a0e:	c3                   	ret    
c0029a0f:	90                   	nop

c0029a10 <ISO9660::seek(void*, unsigned long long)>:
c0029a10:	57                   	push   edi
c0029a11:	b8 04 00 00 00       	mov    eax,0x4
c0029a16:	56                   	push   esi
c0029a17:	51                   	push   ecx
c0029a18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029a1c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0029a20:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029a24:	85 d2                	test   edx,edx
c0029a26:	74 26                	je     c0029a4e <ISO9660::seek(void*, unsigned long long)+0x3e>
c0029a28:	89 d0                	mov    eax,edx
c0029a2a:	b9 02 00 00 00       	mov    ecx,0x2
c0029a2f:	6a 00                	push   0x0
c0029a31:	99                   	cdq    
c0029a32:	f7 f9                	idiv   ecx
c0029a34:	57                   	push   edi
c0029a35:	56                   	push   esi
c0029a36:	83 e8 32             	sub    eax,0x32
c0029a39:	50                   	push   eax
c0029a3a:	e8 ed cf fd ff       	call   c0006a2c <iso_seek>
c0029a3f:	83 c4 10             	add    esp,0x10
c0029a42:	31 f0                	xor    eax,esi
c0029a44:	31 fa                	xor    edx,edi
c0029a46:	09 d0                	or     eax,edx
c0029a48:	0f 95 c0             	setne  al
c0029a4b:	0f b6 c0             	movzx  eax,al
c0029a4e:	5a                   	pop    edx
c0029a4f:	5e                   	pop    esi
c0029a50:	5f                   	pop    edi
c0029a51:	c3                   	ret    

c0029a52 <ISO9660::tell(void*, unsigned long long*)>:
c0029a52:	53                   	push   ebx
c0029a53:	83 ec 08             	sub    esp,0x8
c0029a56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0029a5a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0029a5e:	85 c0                	test   eax,eax
c0029a60:	74 24                	je     c0029a86 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0029a62:	85 db                	test   ebx,ebx
c0029a64:	74 20                	je     c0029a86 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0029a66:	b9 02 00 00 00       	mov    ecx,0x2
c0029a6b:	99                   	cdq    
c0029a6c:	f7 f9                	idiv   ecx
c0029a6e:	83 ec 0c             	sub    esp,0xc
c0029a71:	83 e8 32             	sub    eax,0x32
c0029a74:	50                   	push   eax
c0029a75:	e8 36 d0 fd ff       	call   c0006ab0 <iso_tell>
c0029a7a:	83 c4 10             	add    esp,0x10
c0029a7d:	89 03                	mov    DWORD PTR [ebx],eax
c0029a7f:	31 c0                	xor    eax,eax
c0029a81:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0029a84:	eb 05                	jmp    c0029a8b <ISO9660::tell(void*, unsigned long long*)+0x39>
c0029a86:	b8 04 00 00 00       	mov    eax,0x4
c0029a8b:	83 c4 08             	add    esp,0x8
c0029a8e:	5b                   	pop    ebx
c0029a8f:	c3                   	ret    

c0029a90 <ISO9660::stat(void*, unsigned long long*)>:
c0029a90:	56                   	push   esi
c0029a91:	53                   	push   ebx
c0029a92:	83 ec 10             	sub    esp,0x10
c0029a95:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0029a99:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0029a9d:	68 d9 3c 03 c0       	push   0xc0033cd9
c0029aa2:	e8 17 fa fe ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0029aa7:	83 c4 10             	add    esp,0x10
c0029aaa:	85 db                	test   ebx,ebx
c0029aac:	74 2a                	je     c0029ad8 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0029aae:	85 f6                	test   esi,esi
c0029ab0:	74 26                	je     c0029ad8 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0029ab2:	89 d8                	mov    eax,ebx
c0029ab4:	b9 02 00 00 00       	mov    ecx,0x2
c0029ab9:	99                   	cdq    
c0029aba:	83 ec 0c             	sub    esp,0xc
c0029abd:	f7 f9                	idiv   ecx
c0029abf:	83 e8 32             	sub    eax,0x32
c0029ac2:	50                   	push   eax
c0029ac3:	e8 19 d0 fd ff       	call   c0006ae1 <iso_total>
c0029ac8:	83 c4 10             	add    esp,0x10
c0029acb:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0029ad2:	89 06                	mov    DWORD PTR [esi],eax
c0029ad4:	31 c0                	xor    eax,eax
c0029ad6:	eb 05                	jmp    c0029add <ISO9660::stat(void*, unsigned long long*)+0x4d>
c0029ad8:	b8 04 00 00 00       	mov    eax,0x4
c0029add:	5a                   	pop    edx
c0029ade:	5b                   	pop    ebx
c0029adf:	5e                   	pop    esi
c0029ae0:	c3                   	ret    
c0029ae1:	90                   	nop

c0029ae2 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0029ae2:	55                   	push   ebp
c0029ae3:	57                   	push   edi
c0029ae4:	56                   	push   esi
c0029ae5:	53                   	push   ebx
c0029ae6:	83 ec 18             	sub    esp,0x18
c0029ae9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0029aed:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0029af1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0029af5:	68 e1 3c 03 c0       	push   0xc0033ce1
c0029afa:	e8 bf f9 fe ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0029aff:	83 c4 10             	add    esp,0x10
c0029b02:	85 ff                	test   edi,edi
c0029b04:	0f 94 c0             	sete   al
c0029b07:	85 f6                	test   esi,esi
c0029b09:	0f 94 c2             	sete   dl
c0029b0c:	09 d0                	or     eax,edx
c0029b0e:	a8 01                	test   al,0x1
c0029b10:	0f 85 dd 00 00 00    	jne    c0029bf3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0029b16:	85 db                	test   ebx,ebx
c0029b18:	0f 84 d5 00 00 00    	je     c0029bf3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0029b1e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0029b21:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0029b27:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0029b2e:	0f be 05 80 13 04 c0 	movsx  eax,BYTE PTR ds:0xc0041380
c0029b35:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0029b37:	38 0d 80 13 04 c0    	cmp    BYTE PTR ds:0xc0041380,cl
c0029b3d:	74 1b                	je     c0029b5a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c0029b3f:	85 c0                	test   eax,eax
c0029b41:	74 10                	je     c0029b53 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c0029b43:	83 ec 0c             	sub    esp,0xc
c0029b46:	68 85 3c 03 c0       	push   0xc0033c85
c0029b4b:	e8 b2 6b ff ff       	call   c0020702 <KePanic(char const*)>
c0029b50:	83 c4 10             	add    esp,0x10
c0029b53:	8a 03                	mov    al,BYTE PTR [ebx]
c0029b55:	a2 80 13 04 c0       	mov    ds:0xc0041380,al
c0029b5a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029b5d:	8b 04 85 7c 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd84]
c0029b64:	85 c0                	test   eax,eax
c0029b66:	74 09                	je     c0029b71 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c0029b68:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0029b6f:	74 51                	je     c0029bc2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c0029b71:	83 ec 0c             	sub    esp,0xc
c0029b74:	68 e9 3c 03 c0       	push   0xc0033ce9
c0029b79:	e8 40 f9 fe ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0029b7e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029b81:	83 c4 10             	add    esp,0x10
c0029b84:	83 3c 85 7c 02 04 c0 00 	cmp    DWORD PTR [eax*4-0x3ffbfd84],0x0
c0029b8c:	74 21                	je     c0029baf <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c0029b8e:	83 ec 0c             	sub    esp,0xc
c0029b91:	68 09 3d 03 c0       	push   0xc0033d09
c0029b96:	e8 23 f9 fe ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0029b9b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029b9e:	83 c4 10             	add    esp,0x10
c0029ba1:	8b 04 85 7c 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd84]
c0029ba8:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0029baf:	0f be 05 80 13 04 c0 	movsx  eax,BYTE PTR ds:0xc0041380
c0029bb6:	83 ec 0c             	sub    esp,0xc
c0029bb9:	50                   	push   eax
c0029bba:	e8 ec d1 fd ff       	call   c0006dab <init_percd>
c0029bbf:	83 c4 10             	add    esp,0x10
c0029bc2:	52                   	push   edx
c0029bc3:	83 c3 03             	add    ebx,0x3
c0029bc6:	52                   	push   edx
c0029bc7:	6a 00                	push   0x0
c0029bc9:	53                   	push   ebx
c0029bca:	e8 9f cc fd ff       	call   c000686e <iso_open>
c0029bcf:	83 c4 10             	add    esp,0x10
c0029bd2:	83 f8 ff             	cmp    eax,0xffffffff
c0029bd5:	89 c5                	mov    ebp,eax
c0029bd7:	75 21                	jne    c0029bfa <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c0029bd9:	50                   	push   eax
c0029bda:	50                   	push   eax
c0029bdb:	6a 01                	push   0x1
c0029bdd:	53                   	push   ebx
c0029bde:	e8 8b cc fd ff       	call   c000686e <iso_open>
c0029be3:	83 c4 10             	add    esp,0x10
c0029be6:	ba 02 00 00 00       	mov    edx,0x2
c0029beb:	40                   	inc    eax
c0029bec:	74 2b                	je     c0029c19 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0029bee:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0029bf1:	eb 24                	jmp    c0029c17 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c0029bf3:	ba 04 00 00 00       	mov    edx,0x4
c0029bf8:	eb 1f                	jmp    c0029c19 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0029bfa:	83 ec 0c             	sub    esp,0xc
c0029bfd:	50                   	push   eax
c0029bfe:	e8 de ce fd ff       	call   c0006ae1 <iso_total>
c0029c03:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0029c0a:	89 07                	mov    DWORD PTR [edi],eax
c0029c0c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0029c0f:	e8 e4 cc fd ff       	call   c00068f8 <iso_close>
c0029c14:	83 c4 10             	add    esp,0x10
c0029c17:	31 d2                	xor    edx,edx
c0029c19:	83 c4 0c             	add    esp,0xc
c0029c1c:	89 d0                	mov    eax,edx
c0029c1e:	5b                   	pop    ebx
c0029c1f:	5e                   	pop    esi
c0029c20:	5f                   	pop    edi
c0029c21:	5d                   	pop    ebp
c0029c22:	c3                   	ret    
c0029c23:	90                   	nop

c0029c24 <ISO9660::close(void*)>:
c0029c24:	83 ec 0c             	sub    esp,0xc
c0029c27:	b8 04 00 00 00       	mov    eax,0x4
c0029c2c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029c30:	85 d2                	test   edx,edx
c0029c32:	74 1b                	je     c0029c4f <ISO9660::close(void*)+0x2b>
c0029c34:	89 d0                	mov    eax,edx
c0029c36:	b9 02 00 00 00       	mov    ecx,0x2
c0029c3b:	99                   	cdq    
c0029c3c:	83 ec 0c             	sub    esp,0xc
c0029c3f:	f7 f9                	idiv   ecx
c0029c41:	83 e8 32             	sub    eax,0x32
c0029c44:	50                   	push   eax
c0029c45:	e8 ae cc fd ff       	call   c00068f8 <iso_close>
c0029c4a:	83 c4 10             	add    esp,0x10
c0029c4d:	31 c0                	xor    eax,eax
c0029c4f:	83 c4 0c             	add    esp,0xc
c0029c52:	c3                   	ret    
c0029c53:	90                   	nop

c0029c54 <ISO9660::openDir(char const*, void**)>:
c0029c54:	56                   	push   esi
c0029c55:	53                   	push   ebx
c0029c56:	50                   	push   eax
c0029c57:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0029c5b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0029c5f:	85 db                	test   ebx,ebx
c0029c61:	0f 84 bd 00 00 00    	je     c0029d24 <ISO9660::openDir(char const*, void**)+0xd0>
c0029c67:	85 f6                	test   esi,esi
c0029c69:	0f 84 b5 00 00 00    	je     c0029d24 <ISO9660::openDir(char const*, void**)+0xd0>
c0029c6f:	8a 13                	mov    dl,BYTE PTR [ebx]
c0029c71:	38 15 80 13 04 c0    	cmp    BYTE PTR ds:0xc0041380,dl
c0029c77:	0f be 05 80 13 04 c0 	movsx  eax,BYTE PTR ds:0xc0041380
c0029c7e:	74 1b                	je     c0029c9b <ISO9660::openDir(char const*, void**)+0x47>
c0029c80:	85 c0                	test   eax,eax
c0029c82:	74 10                	je     c0029c94 <ISO9660::openDir(char const*, void**)+0x40>
c0029c84:	83 ec 0c             	sub    esp,0xc
c0029c87:	68 85 3c 03 c0       	push   0xc0033c85
c0029c8c:	e8 71 6a ff ff       	call   c0020702 <KePanic(char const*)>
c0029c91:	83 c4 10             	add    esp,0x10
c0029c94:	8a 03                	mov    al,BYTE PTR [ebx]
c0029c96:	a2 80 13 04 c0       	mov    ds:0xc0041380,al
c0029c9b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029c9e:	8b 04 85 7c 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd84]
c0029ca5:	85 c0                	test   eax,eax
c0029ca7:	74 10                	je     c0029cb9 <ISO9660::openDir(char const*, void**)+0x65>
c0029ca9:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0029cb0:	74 1a                	je     c0029ccc <ISO9660::openDir(char const*, void**)+0x78>
c0029cb2:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0029cb9:	0f be 05 80 13 04 c0 	movsx  eax,BYTE PTR ds:0xc0041380
c0029cc0:	83 ec 0c             	sub    esp,0xc
c0029cc3:	50                   	push   eax
c0029cc4:	e8 e2 d0 fd ff       	call   c0006dab <init_percd>
c0029cc9:	83 c4 10             	add    esp,0x10
c0029ccc:	50                   	push   eax
c0029ccd:	83 c3 03             	add    ebx,0x3
c0029cd0:	50                   	push   eax
c0029cd1:	6a 01                	push   0x1
c0029cd3:	53                   	push   ebx
c0029cd4:	e8 95 cb fd ff       	call   c000686e <iso_open>
c0029cd9:	83 c4 10             	add    esp,0x10
c0029cdc:	83 f8 ff             	cmp    eax,0xffffffff
c0029cdf:	89 c3                	mov    ebx,eax
c0029ce1:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0029ce6:	75 1c                	jne    c0029d04 <ISO9660::openDir(char const*, void**)+0xb0>
c0029ce8:	53                   	push   ebx
c0029ce9:	53                   	push   ebx
c0029cea:	68 2d 3d 03 c0       	push   0xc0033d2d
c0029cef:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029cf5:	e8 66 d9 fe ff       	call   c0017660 <VgaText::puts(char const*)>
c0029cfa:	83 c4 10             	add    esp,0x10
c0029cfd:	b8 01 00 00 00       	mov    eax,0x1
c0029d02:	eb 25                	jmp    c0029d29 <ISO9660::openDir(char const*, void**)+0xd5>
c0029d04:	51                   	push   ecx
c0029d05:	01 db                	add    ebx,ebx
c0029d07:	51                   	push   ecx
c0029d08:	83 c3 65             	add    ebx,0x65
c0029d0b:	68 40 3d 03 c0       	push   0xc0033d40
c0029d10:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029d16:	e8 45 d9 fe ff       	call   c0017660 <VgaText::puts(char const*)>
c0029d1b:	83 c4 10             	add    esp,0x10
c0029d1e:	31 c0                	xor    eax,eax
c0029d20:	89 1e                	mov    DWORD PTR [esi],ebx
c0029d22:	eb 05                	jmp    c0029d29 <ISO9660::openDir(char const*, void**)+0xd5>
c0029d24:	b8 04 00 00 00       	mov    eax,0x4
c0029d29:	5a                   	pop    edx
c0029d2a:	5b                   	pop    ebx
c0029d2b:	5e                   	pop    esi
c0029d2c:	c3                   	ret    
c0029d2d:	90                   	nop

c0029d2e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0029d2e:	55                   	push   ebp
c0029d2f:	57                   	push   edi
c0029d30:	56                   	push   esi
c0029d31:	53                   	push   ebx
c0029d32:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0029d38:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c0029d3f:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0029d46:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c0029d4d:	85 db                	test   ebx,ebx
c0029d4f:	0f 84 e4 00 00 00    	je     c0029e39 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c0029d55:	85 ed                	test   ebp,ebp
c0029d57:	0f 84 dc 00 00 00    	je     c0029e39 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c0029d5d:	83 ec 0c             	sub    esp,0xc
c0029d60:	68 53 3d 03 c0       	push   0xc0033d53
c0029d65:	e8 54 f7 fe ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c0029d6a:	89 d8                	mov    eax,ebx
c0029d6c:	b9 02 00 00 00       	mov    ecx,0x2
c0029d71:	99                   	cdq    
c0029d72:	f7 f9                	idiv   ecx
c0029d74:	83 e8 32             	sub    eax,0x32
c0029d77:	89 04 24             	mov    DWORD PTR [esp],eax
c0029d7a:	e8 b4 cd fd ff       	call   c0006b33 <iso_readdir>
c0029d7f:	83 c4 10             	add    esp,0x10
c0029d82:	85 c0                	test   eax,eax
c0029d84:	89 c3                	mov    ebx,eax
c0029d86:	75 38                	jne    c0029dc0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0029d88:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0029d8d:	53                   	push   ebx
c0029d8e:	53                   	push   ebx
c0029d8f:	68 5e 3d 03 c0       	push   0xc0033d5e
c0029d94:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029d9a:	e8 c1 d8 fe ff       	call   c0017660 <VgaText::puts(char const*)>
c0029d9f:	83 c4 0c             	add    esp,0xc
c0029da2:	68 10 01 00 00       	push   0x110
c0029da7:	6a 00                	push   0x0
c0029da9:	57                   	push   edi
c0029daa:	e8 41 67 fd ff       	call   c00004f0 <memset>
c0029daf:	83 c4 10             	add    esp,0x10
c0029db2:	b8 01 00 00 00       	mov    eax,0x1
c0029db7:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c0029dbe:	eb 7e                	jmp    c0029e3e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c0029dc0:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0029dc6:	8d 70 08             	lea    esi,[eax+0x8]
c0029dc9:	83 ec 0c             	sub    esp,0xc
c0029dcc:	56                   	push   esi
c0029dcd:	e8 ae 67 fd ff       	call   c0000580 <strlen>
c0029dd2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0029dda:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0029dde:	83 c4 10             	add    esp,0x10
c0029de1:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c0029de5:	75 0a                	jne    c0029df1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c0029de7:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c0029dea:	b8 02 00 00 00       	mov    eax,0x2
c0029def:	74 05                	je     c0029df6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c0029df1:	b8 01 00 00 00       	mov    eax,0x1
c0029df6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0029dfa:	50                   	push   eax
c0029dfb:	50                   	push   eax
c0029dfc:	56                   	push   esi
c0029dfd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0029e01:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0029e05:	50                   	push   eax
c0029e06:	e8 45 68 fd ff       	call   c0000650 <strcpy>
c0029e0b:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0029e12:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0029e14:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c0029e1b:	5a                   	pop    edx
c0029e1c:	a1 f8 11 04 c0       	mov    eax,ds:0xc00411f8
c0029e21:	59                   	pop    ecx
c0029e22:	68 71 3d 03 c0       	push   0xc0033d71
c0029e27:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029e2d:	e8 2e d8 fe ff       	call   c0017660 <VgaText::puts(char const*)>
c0029e32:	83 c4 10             	add    esp,0x10
c0029e35:	31 c0                	xor    eax,eax
c0029e37:	eb 05                	jmp    c0029e3e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c0029e39:	b8 04 00 00 00       	mov    eax,0x4
c0029e3e:	81 c4 1c 01 00 00    	add    esp,0x11c
c0029e44:	5b                   	pop    ebx
c0029e45:	5e                   	pop    esi
c0029e46:	5f                   	pop    edi
c0029e47:	5d                   	pop    ebp
c0029e48:	c3                   	ret    

c0029e49 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0029e49:	57                   	push   edi
c0029e4a:	56                   	push   esi
c0029e4b:	53                   	push   ebx
c0029e4c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0029e50:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0029e54:	39 35 84 13 04 c0    	cmp    DWORD PTR ds:0xc0041384,esi
c0029e5a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0029e5e:	0f be cb             	movsx  ecx,bl
c0029e61:	75 0b                	jne    c0029e6e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c0029e63:	0f be 05 80 50 03 c0 	movsx  eax,BYTE PTR ds:0xc0035080
c0029e6a:	39 c8                	cmp    eax,ecx
c0029e6c:	74 47                	je     c0029eb5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0029e6e:	83 ec 0c             	sub    esp,0xc
c0029e71:	31 d2                	xor    edx,edx
c0029e73:	68 a0 13 04 c0       	push   0xc00413a0
c0029e78:	6a 01                	push   0x1
c0029e7a:	52                   	push   edx
c0029e7b:	56                   	push   esi
c0029e7c:	ff 34 8d 7c 02 04 c0 	push   DWORD PTR [ecx*4-0x3ffbfd84]
c0029e83:	e8 7a 2b ff ff       	call   c001ca02 <LogicalDisk::read(unsigned long long, int, void*)>
c0029e88:	83 c4 20             	add    esp,0x20
c0029e8b:	85 c0                	test   eax,eax
c0029e8d:	75 0e                	jne    c0029e9d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c0029e8f:	89 35 84 13 04 c0    	mov    DWORD PTR ds:0xc0041384,esi
c0029e95:	88 1d 80 50 03 c0    	mov    BYTE PTR ds:0xc0035080,bl
c0029e9b:	eb 18                	jmp    c0029eb5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0029e9d:	50                   	push   eax
c0029e9e:	68 00 08 00 00       	push   0x800
c0029ea3:	6a 00                	push   0x0
c0029ea5:	57                   	push   edi
c0029ea6:	e8 45 66 fd ff       	call   c00004f0 <memset>
c0029eab:	83 c4 10             	add    esp,0x10
c0029eae:	b8 01 00 00 00       	mov    eax,0x1
c0029eb3:	eb 0e                	jmp    c0029ec3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c0029eb5:	be a0 13 04 c0       	mov    esi,0xc00413a0
c0029eba:	b9 00 08 00 00       	mov    ecx,0x800
c0029ebf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0029ec1:	31 c0                	xor    eax,eax
c0029ec3:	5b                   	pop    ebx
c0029ec4:	5e                   	pop    esi
c0029ec5:	5f                   	pop    edi
c0029ec6:	c3                   	ret    
c0029ec7:	90                   	nop

c0029ec8 <ISO9660::tryMount(LogicalDisk*, int)>:
c0029ec8:	53                   	push   ebx
c0029ec9:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0029ecf:	c7 05 84 13 04 c0 ef be ad de 	mov    DWORD PTR ds:0xc0041384,0xdeadbeef
c0029ed9:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c0029ee0:	8d 58 41             	lea    ebx,[eax+0x41]
c0029ee3:	0f be db             	movsx  ebx,bl
c0029ee6:	53                   	push   ebx
c0029ee7:	8d 44 24 08          	lea    eax,[esp+0x8]
c0029eeb:	50                   	push   eax
c0029eec:	6a 10                	push   0x10
c0029eee:	e8 56 ff ff ff       	call   c0029e49 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0029ef3:	83 c4 10             	add    esp,0x10
c0029ef6:	31 d2                	xor    edx,edx
c0029ef8:	85 c0                	test   eax,eax
c0029efa:	75 33                	jne    c0029f2f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029efc:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0029f01:	75 2c                	jne    c0029f2f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029f03:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0029f08:	75 25                	jne    c0029f2f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029f0a:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0029f0f:	75 1e                	jne    c0029f2f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029f11:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0029f16:	75 17                	jne    c0029f2f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029f18:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0029f1d:	75 10                	jne    c0029f2f <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029f1f:	83 ec 0c             	sub    esp,0xc
c0029f22:	53                   	push   ebx
c0029f23:	e8 83 ce fd ff       	call   c0006dab <init_percd>
c0029f28:	83 c4 10             	add    esp,0x10
c0029f2b:	40                   	inc    eax
c0029f2c:	0f 95 c2             	setne  dl
c0029f2f:	81 c4 08 08 00 00    	add    esp,0x808
c0029f35:	88 d0                	mov    al,dl
c0029f37:	5b                   	pop    ebx
c0029f38:	c3                   	ret    
c0029f39:	90                   	nop

c0029f3a <ISO9660::ISO9660()>:
c0029f3a:	83 ec 0c             	sub    esp,0xc
c0029f3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f41:	83 ec 0c             	sub    esp,0xc
c0029f44:	50                   	push   eax
c0029f45:	e8 d6 03 ff ff       	call   c001a320 <Filesystem::Filesystem()>
c0029f4a:	83 c4 10             	add    esp,0x10
c0029f4d:	ba 8c 3d 03 c0       	mov    edx,0xc0033d8c
c0029f52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f56:	89 10                	mov    DWORD PTR [eax],edx
c0029f58:	e8 60 cf fd ff       	call   c0006ebd <fs_iso9660_init>
c0029f5d:	90                   	nop
c0029f5e:	83 c4 0c             	add    esp,0xc
c0029f61:	c3                   	ret    

c0029f62 <SoundCard::beginPlayback()>:
c0029f62:	c7 44 24 04 f0 3d 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033df0
c0029f6a:	e9 93 67 ff ff       	jmp    c0020702 <KePanic(char const*)>
c0029f6f:	90                   	nop

c0029f70 <SoundCard::stopPlayback()>:
c0029f70:	c7 44 24 04 f0 3d 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033df0
c0029f78:	e9 85 67 ff ff       	jmp    c0020702 <KePanic(char const*)>
c0029f7d:	90                   	nop

c0029f7e <SoundCard::SoundCard(char const*)>:
c0029f7e:	83 ec 1c             	sub    esp,0x1c
c0029f81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029f85:	83 ec 08             	sub    esp,0x8
c0029f88:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029f8c:	50                   	push   eax
c0029f8d:	e8 da 17 ff ff       	call   c001b76c <Device::Device(char const*)>
c0029f92:	83 c4 10             	add    esp,0x10
c0029f95:	ba 3c 3e 03 c0       	mov    edx,0xc0033e3c
c0029f9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029f9e:	89 10                	mov    DWORD PTR [eax],edx
c0029fa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029fa4:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0029fab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029faf:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0029fb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029fbd:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0029fc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029fcb:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0029fd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029fd9:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0029fe3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0029feb:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0029ff0:	7f 1a                	jg     c002a00c <SoundCard::SoundCard(char const*)+0x8e>
c0029ff2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029ff6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0029ffa:	83 c2 54             	add    edx,0x54
c0029ffd:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c002a005:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c002a00a:	eb df                	jmp    c0029feb <SoundCard::SoundCard(char const*)+0x6d>
c002a00c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a010:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c002a017:	90                   	nop
c002a018:	83 c4 1c             	add    esp,0x1c
c002a01b:	c3                   	ret    

c002a01c <SoundCard::~SoundCard()>:
c002a01c:	83 ec 0c             	sub    esp,0xc
c002a01f:	ba 3c 3e 03 c0       	mov    edx,0xc0033e3c
c002a024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a028:	89 10                	mov    DWORD PTR [eax],edx
c002a02a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a02e:	83 ec 0c             	sub    esp,0xc
c002a031:	50                   	push   eax
c002a032:	e8 d5 14 ff ff       	call   c001b50c <Device::~Device()>
c002a037:	83 c4 10             	add    esp,0x10
c002a03a:	90                   	nop
c002a03b:	83 c4 0c             	add    esp,0xc
c002a03e:	c3                   	ret    
c002a03f:	90                   	nop

c002a040 <SoundCard::~SoundCard()>:
c002a040:	83 ec 0c             	sub    esp,0xc
c002a043:	83 ec 0c             	sub    esp,0xc
c002a046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a04a:	e8 cd ff ff ff       	call   c002a01c <SoundCard::~SoundCard()>
c002a04f:	83 c4 10             	add    esp,0x10
c002a052:	83 ec 08             	sub    esp,0x8
c002a055:	68 e8 01 00 00       	push   0x1e8
c002a05a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a05e:	e8 5d f3 fe ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c002a063:	83 c4 10             	add    esp,0x10
c002a066:	83 c4 0c             	add    esp,0xc
c002a069:	c3                   	ret    

c002a06a <SoundCard::configureRates(int, int, int)>:
c002a06a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002a06e:	31 c0                	xor    eax,eax
c002a070:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c002a077:	75 20                	jne    c002a099 <SoundCard::configureRates(int, int, int)+0x2f>
c002a079:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002a07d:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c002a083:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a087:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c002a08d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a091:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c002a097:	b0 01                	mov    al,0x1
c002a099:	c3                   	ret    

c002a09a <SoundCard::getSamples16(int, short*)>:
c002a09a:	55                   	push   ebp
c002a09b:	57                   	push   edi
c002a09c:	31 ff                	xor    edi,edi
c002a09e:	56                   	push   esi
c002a09f:	53                   	push   ebx
c002a0a0:	31 db                	xor    ebx,ebx
c002a0a2:	83 ec 10             	sub    esp,0x10
c002a0a5:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002a0a9:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c002a0ad:	8d 04 36             	lea    eax,[esi+esi*1]
c002a0b0:	50                   	push   eax
c002a0b1:	6a 00                	push   0x0
c002a0b3:	55                   	push   ebp
c002a0b4:	e8 37 64 fd ff       	call   c00004f0 <memset>
c002a0b9:	83 c4 10             	add    esp,0x10
c002a0bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a0c0:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c002a0c7:	85 c0                	test   eax,eax
c002a0c9:	74 1a                	je     c002a0e5 <SoundCard::getSamples16(int, short*)+0x4b>
c002a0cb:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c002a0cf:	75 14                	jne    c002a0e5 <SoundCard::getSamples16(int, short*)+0x4b>
c002a0d1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002a0d5:	55                   	push   ebp
c002a0d6:	56                   	push   esi
c002a0d7:	50                   	push   eax
c002a0d8:	e8 f3 02 00 00       	call   c002a3d0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c002a0dd:	83 c4 10             	add    esp,0x10
c002a0e0:	39 c3                	cmp    ebx,eax
c002a0e2:	0f 4c d8             	cmovl  ebx,eax
c002a0e5:	47                   	inc    edi
c002a0e6:	83 ff 20             	cmp    edi,0x20
c002a0e9:	75 d1                	jne    c002a0bc <SoundCard::getSamples16(int, short*)+0x22>
c002a0eb:	83 c4 0c             	add    esp,0xc
c002a0ee:	89 d8                	mov    eax,ebx
c002a0f0:	5b                   	pop    ebx
c002a0f1:	5e                   	pop    esi
c002a0f2:	5f                   	pop    edi
c002a0f3:	5d                   	pop    ebp
c002a0f4:	c3                   	ret    
c002a0f5:	90                   	nop

c002a0f6 <SoundCard::getSamples32(int, int*)>:
c002a0f6:	55                   	push   ebp
c002a0f7:	57                   	push   edi
c002a0f8:	31 ff                	xor    edi,edi
c002a0fa:	56                   	push   esi
c002a0fb:	31 f6                	xor    esi,esi
c002a0fd:	53                   	push   ebx
c002a0fe:	83 ec 10             	sub    esp,0x10
c002a101:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002a105:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c002a109:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c002a10d:	c1 e0 02             	shl    eax,0x2
c002a110:	50                   	push   eax
c002a111:	6a 00                	push   0x0
c002a113:	55                   	push   ebp
c002a114:	e8 d7 63 fd ff       	call   c00004f0 <memset>
c002a119:	83 c4 10             	add    esp,0x10
c002a11c:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c002a123:	85 c0                	test   eax,eax
c002a125:	74 1a                	je     c002a141 <SoundCard::getSamples32(int, int*)+0x4b>
c002a127:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c002a12b:	75 14                	jne    c002a141 <SoundCard::getSamples32(int, int*)+0x4b>
c002a12d:	53                   	push   ebx
c002a12e:	55                   	push   ebp
c002a12f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a133:	50                   	push   eax
c002a134:	e8 67 03 00 00       	call   c002a4a0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c002a139:	83 c4 10             	add    esp,0x10
c002a13c:	39 c6                	cmp    esi,eax
c002a13e:	0f 4c f0             	cmovl  esi,eax
c002a141:	47                   	inc    edi
c002a142:	83 ff 20             	cmp    edi,0x20
c002a145:	75 d5                	jne    c002a11c <SoundCard::getSamples32(int, int*)+0x26>
c002a147:	85 f6                	test   esi,esi
c002a149:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c002a150:	75 0f                	jne    c002a161 <SoundCard::getSamples32(int, int*)+0x6b>
c002a152:	85 c0                	test   eax,eax
c002a154:	74 1b                	je     c002a171 <SoundCard::getSamples32(int, int*)+0x7b>
c002a156:	8b 03                	mov    eax,DWORD PTR [ebx]
c002a158:	83 ec 0c             	sub    esp,0xc
c002a15b:	53                   	push   ebx
c002a15c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c002a15f:	eb 0d                	jmp    c002a16e <SoundCard::getSamples32(int, int*)+0x78>
c002a161:	85 c0                	test   eax,eax
c002a163:	75 0c                	jne    c002a171 <SoundCard::getSamples32(int, int*)+0x7b>
c002a165:	8b 03                	mov    eax,DWORD PTR [ebx]
c002a167:	83 ec 0c             	sub    esp,0xc
c002a16a:	53                   	push   ebx
c002a16b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c002a16e:	83 c4 10             	add    esp,0x10
c002a171:	83 c4 0c             	add    esp,0xc
c002a174:	89 f0                	mov    eax,esi
c002a176:	5b                   	pop    ebx
c002a177:	5e                   	pop    esi
c002a178:	5f                   	pop    edi
c002a179:	5d                   	pop    ebp
c002a17a:	c3                   	ret    
c002a17b:	90                   	nop

c002a17c <SoundCard::addChannel(SoundPort*)>:
c002a17c:	83 ec 0c             	sub    esp,0xc
c002a17f:	31 c0                	xor    eax,eax
c002a181:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002a185:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c002a18d:	74 1b                	je     c002a1aa <SoundCard::addChannel(SoundPort*)+0x2e>
c002a18f:	40                   	inc    eax
c002a190:	83 f8 20             	cmp    eax,0x20
c002a193:	75 f0                	jne    c002a185 <SoundCard::addChannel(SoundPort*)+0x9>
c002a195:	83 ec 0c             	sub    esp,0xc
c002a198:	68 15 3e 03 c0       	push   0xc0033e15
c002a19d:	e8 60 65 ff ff       	call   c0020702 <KePanic(char const*)>
c002a1a2:	83 c4 10             	add    esp,0x10
c002a1a5:	83 c8 ff             	or     eax,0xffffffff
c002a1a8:	eb 0b                	jmp    c002a1b5 <SoundCard::addChannel(SoundPort*)+0x39>
c002a1aa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002a1ae:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c002a1b5:	83 c4 0c             	add    esp,0xc
c002a1b8:	c3                   	ret    
c002a1b9:	90                   	nop

c002a1ba <SoundCard::removeChannel(int)>:
c002a1ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a1be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a1c2:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c002a1cd:	c3                   	ret    
c002a1ce:	66 90                	xchg   ax,ax

c002a1d0 <SoundPort::SoundPort(int, int, int, int)>:
c002a1d0:	83 ec 0c             	sub    esp,0xc
c002a1d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a1d7:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c002a1de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a1e2:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c002a1e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a1ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002a1ee:	89 10                	mov    DWORD PTR [eax],edx
c002a1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a1f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a1f8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002a1fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a1ff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002a203:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002a206:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c002a20b:	75 13                	jne    c002a220 <SoundPort::SoundPort(int, int, int, int)+0x50>
c002a20d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a211:	8b 00                	mov    eax,DWORD PTR [eax]
c002a213:	05 a0 0f 00 00       	add    eax,0xfa0
c002a218:	d1 e0                	shl    eax,1
c002a21a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002a21e:	66 90                	xchg   ax,ax
c002a220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a224:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002a228:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002a22b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a22f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c002a236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a23a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002a23d:	c1 e0 02             	shl    eax,0x2
c002a240:	83 ec 0c             	sub    esp,0xc
c002a243:	50                   	push   eax
c002a244:	e8 3f c4 fe ff       	call   c0016688 <malloc>
c002a249:	83 c4 10             	add    esp,0x10
c002a24c:	89 c2                	mov    edx,eax
c002a24e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a252:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002a255:	90                   	nop
c002a256:	83 c4 0c             	add    esp,0xc
c002a259:	c3                   	ret    
c002a25a:	66 90                	xchg   ax,ax

c002a25c <SoundPort::~SoundPort()>:
c002a25c:	83 ec 0c             	sub    esp,0xc
c002a25f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a263:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002a266:	85 c0                	test   eax,eax
c002a268:	74 1e                	je     c002a288 <SoundPort::~SoundPort()+0x2c>
c002a26a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a26e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002a271:	83 ec 0c             	sub    esp,0xc
c002a274:	50                   	push   eax
c002a275:	e8 1e c4 fe ff       	call   c0016698 <free>
c002a27a:	83 c4 10             	add    esp,0x10
c002a27d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a281:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c002a288:	90                   	nop
c002a289:	83 c4 0c             	add    esp,0xc
c002a28c:	c3                   	ret    
c002a28d:	90                   	nop
c002a28e:	66 90                	xchg   ax,ax

c002a290 <SoundPort::unpause()>:
c002a290:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a294:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c002a298:	c3                   	ret    
c002a299:	90                   	nop
c002a29a:	66 90                	xchg   ax,ax

c002a29c <SoundPort::pause()>:
c002a29c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a2a0:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c002a2a4:	c3                   	ret    
c002a2a5:	90                   	nop
c002a2a6:	66 90                	xchg   ax,ax

c002a2a8 <SoundPort::getBufferUsed()>:
c002a2a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a2ac:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002a2af:	c3                   	ret    

c002a2b0 <SoundPort::getBufferSize()>:
c002a2b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002a2b4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002a2b7:	c3                   	ret    

c002a2b8 <SoundPort::buffer16(short*, int)>:
c002a2b8:	55                   	push   ebp
c002a2b9:	57                   	push   edi
c002a2ba:	56                   	push   esi
c002a2bb:	53                   	push   ebx
c002a2bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002a2c0:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002a2c4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c002a2c7:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c002a2ca:	74 68                	je     c002a334 <SoundPort::buffer16(short*, int)+0x7c>
c002a2cc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a2d0:	85 c9                	test   ecx,ecx
c002a2d2:	7e 60                	jle    c002a334 <SoundPort::buffer16(short*, int)+0x7c>
c002a2d4:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c002a2d8:	8d 70 01             	lea    esi,[eax+0x1]
c002a2db:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c002a2de:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c002a2e1:	c1 e1 0f             	shl    ecx,0xf
c002a2e4:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c002a2e7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a2ea:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a2ed:	74 4d                	je     c002a33c <SoundPort::buffer16(short*, int)+0x84>
c002a2ef:	31 f6                	xor    esi,esi
c002a2f1:	eb 21                	jmp    c002a314 <SoundPort::buffer16(short*, int)+0x5c>
c002a2f3:	90                   	nop
c002a2f4:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c002a2f9:	8d 79 01             	lea    edi,[ecx+0x1]
c002a2fc:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c002a2ff:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c002a302:	c1 e3 0f             	shl    ebx,0xf
c002a305:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c002a308:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a30b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a30e:	74 1c                	je     c002a32c <SoundPort::buffer16(short*, int)+0x74>
c002a310:	89 c6                	mov    esi,eax
c002a312:	66 90                	xchg   ax,ax
c002a314:	8d 46 01             	lea    eax,[esi+0x1]
c002a317:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c002a31b:	75 d7                	jne    c002a2f4 <SoundPort::buffer16(short*, int)+0x3c>
c002a31d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002a321:	8d 76 00             	lea    esi,[esi+0x0]
c002a324:	5b                   	pop    ebx
c002a325:	5e                   	pop    esi
c002a326:	5f                   	pop    edi
c002a327:	5d                   	pop    ebp
c002a328:	c3                   	ret    
c002a329:	8d 76 00             	lea    esi,[esi+0x0]
c002a32c:	5b                   	pop    ebx
c002a32d:	8d 46 02             	lea    eax,[esi+0x2]
c002a330:	5e                   	pop    esi
c002a331:	5f                   	pop    edi
c002a332:	5d                   	pop    ebp
c002a333:	c3                   	ret    
c002a334:	5b                   	pop    ebx
c002a335:	31 c0                	xor    eax,eax
c002a337:	5e                   	pop    esi
c002a338:	5f                   	pop    edi
c002a339:	5d                   	pop    ebp
c002a33a:	c3                   	ret    
c002a33b:	90                   	nop
c002a33c:	b8 01 00 00 00       	mov    eax,0x1
c002a341:	eb e1                	jmp    c002a324 <SoundPort::buffer16(short*, int)+0x6c>
c002a343:	90                   	nop

c002a344 <SoundPort::buffer32(int*, int)>:
c002a344:	55                   	push   ebp
c002a345:	57                   	push   edi
c002a346:	56                   	push   esi
c002a347:	53                   	push   ebx
c002a348:	83 ec 04             	sub    esp,0x4
c002a34b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a34f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a353:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002a357:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a35a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a35d:	89 04 24             	mov    DWORD PTR [esp],eax
c002a360:	74 5a                	je     c002a3bc <SoundPort::buffer32(int*, int)+0x78>
c002a362:	85 c0                	test   eax,eax
c002a364:	7e 56                	jle    c002a3bc <SoundPort::buffer32(int*, int)+0x78>
c002a366:	8d 71 01             	lea    esi,[ecx+0x1]
c002a369:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c002a36c:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c002a36f:	8b 37                	mov    esi,DWORD PTR [edi]
c002a371:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c002a374:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a377:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a37a:	74 4c                	je     c002a3c8 <SoundPort::buffer32(int*, int)+0x84>
c002a37c:	31 f6                	xor    esi,esi
c002a37e:	eb 1c                	jmp    c002a39c <SoundPort::buffer32(int*, int)+0x58>
c002a380:	8d 69 01             	lea    ebp,[ecx+0x1]
c002a383:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c002a386:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c002a389:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c002a38c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c002a390:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a393:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a396:	74 18                	je     c002a3b0 <SoundPort::buffer32(int*, int)+0x6c>
c002a398:	89 de                	mov    esi,ebx
c002a39a:	66 90                	xchg   ax,ax
c002a39c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002a39f:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c002a3a2:	75 dc                	jne    c002a380 <SoundPort::buffer32(int*, int)+0x3c>
c002a3a4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002a3a7:	90                   	nop
c002a3a8:	83 c4 04             	add    esp,0x4
c002a3ab:	5b                   	pop    ebx
c002a3ac:	5e                   	pop    esi
c002a3ad:	5f                   	pop    edi
c002a3ae:	5d                   	pop    ebp
c002a3af:	c3                   	ret    
c002a3b0:	8d 46 02             	lea    eax,[esi+0x2]
c002a3b3:	83 c4 04             	add    esp,0x4
c002a3b6:	5b                   	pop    ebx
c002a3b7:	5e                   	pop    esi
c002a3b8:	5f                   	pop    edi
c002a3b9:	5d                   	pop    ebp
c002a3ba:	c3                   	ret    
c002a3bb:	90                   	nop
c002a3bc:	83 c4 04             	add    esp,0x4
c002a3bf:	31 c0                	xor    eax,eax
c002a3c1:	5b                   	pop    ebx
c002a3c2:	5e                   	pop    esi
c002a3c3:	5f                   	pop    edi
c002a3c4:	5d                   	pop    ebp
c002a3c5:	c3                   	ret    
c002a3c6:	66 90                	xchg   ax,ax
c002a3c8:	b8 01 00 00 00       	mov    eax,0x1
c002a3cd:	eb d9                	jmp    c002a3a8 <SoundPort::buffer32(int*, int)+0x64>
c002a3cf:	90                   	nop

c002a3d0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c002a3d0:	55                   	push   ebp
c002a3d1:	57                   	push   edi
c002a3d2:	56                   	push   esi
c002a3d3:	53                   	push   ebx
c002a3d4:	83 ec 0c             	sub    esp,0xc
c002a3d7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c002a3db:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002a3df:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002a3e3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002a3e7:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c002a3ed:	39 03                	cmp    DWORD PTR [ebx],eax
c002a3ef:	74 13                	je     c002a404 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c002a3f1:	83 ec 0c             	sub    esp,0xc
c002a3f4:	68 68 3e 03 c0       	push   0xc0033e68
c002a3f9:	e8 04 63 ff ff       	call   c0020702 <KePanic(char const*)>
c002a3fe:	83 c4 10             	add    esp,0x10
c002a401:	8d 76 00             	lea    esi,[esi+0x0]
c002a404:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c002a40a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c002a40d:	74 11                	je     c002a420 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c002a40f:	83 ec 0c             	sub    esp,0xc
c002a412:	68 a7 3e 03 c0       	push   0xc0033ea7
c002a417:	e8 e6 62 ff ff       	call   c0020702 <KePanic(char const*)>
c002a41c:	83 c4 10             	add    esp,0x10
c002a41f:	90                   	nop
c002a420:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c002a426:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c002a429:	74 11                	je     c002a43c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c002a42b:	83 ec 0c             	sub    esp,0xc
c002a42e:	68 a7 3e 03 c0       	push   0xc0033ea7
c002a433:	e8 ca 62 ff ff       	call   c0020702 <KePanic(char const*)>
c002a438:	83 c4 10             	add    esp,0x10
c002a43b:	90                   	nop
c002a43c:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c002a43f:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c002a443:	85 f6                	test   esi,esi
c002a445:	7e 2d                	jle    c002a474 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c002a447:	31 c0                	xor    eax,eax
c002a449:	8d 76 00             	lea    esi,[esi+0x0]
c002a44c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c002a44f:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c002a452:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c002a458:	85 c9                	test   ecx,ecx
c002a45a:	0f 49 d1             	cmovns edx,ecx
c002a45d:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c002a461:	c1 fa 0f             	sar    edx,0xf
c002a464:	01 d1                	add    ecx,edx
c002a466:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c002a46a:	83 c0 01             	add    eax,0x1
c002a46d:	39 f0                	cmp    eax,esi
c002a46f:	75 db                	jne    c002a44c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c002a471:	8d 76 00             	lea    esi,[esi+0x0]
c002a474:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002a477:	83 ec 04             	sub    esp,0x4
c002a47a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c002a47d:	29 f0                	sub    eax,esi
c002a47f:	c1 e0 02             	shl    eax,0x2
c002a482:	50                   	push   eax
c002a483:	8d 04 b2             	lea    eax,[edx+esi*4]
c002a486:	50                   	push   eax
c002a487:	52                   	push   edx
c002a488:	e8 43 5f fd ff       	call   c00003d0 <memmove>
c002a48d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002a490:	29 f0                	sub    eax,esi
c002a492:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c002a495:	83 c4 1c             	add    esp,0x1c
c002a498:	89 f0                	mov    eax,esi
c002a49a:	5b                   	pop    ebx
c002a49b:	5e                   	pop    esi
c002a49c:	5f                   	pop    edi
c002a49d:	5d                   	pop    ebp
c002a49e:	c3                   	ret    
c002a49f:	90                   	nop

c002a4a0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c002a4a0:	55                   	push   ebp
c002a4a1:	57                   	push   edi
c002a4a2:	56                   	push   esi
c002a4a3:	53                   	push   ebx
c002a4a4:	83 ec 0c             	sub    esp,0xc
c002a4a7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c002a4ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002a4af:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c002a4b3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002a4b7:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c002a4bd:	39 03                	cmp    DWORD PTR [ebx],eax
c002a4bf:	74 13                	je     c002a4d4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c002a4c1:	83 ec 0c             	sub    esp,0xc
c002a4c4:	68 88 3e 03 c0       	push   0xc0033e88
c002a4c9:	e8 34 62 ff ff       	call   c0020702 <KePanic(char const*)>
c002a4ce:	83 c4 10             	add    esp,0x10
c002a4d1:	8d 76 00             	lea    esi,[esi+0x0]
c002a4d4:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c002a4da:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c002a4dd:	74 11                	je     c002a4f0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c002a4df:	83 ec 0c             	sub    esp,0xc
c002a4e2:	68 c3 3e 03 c0       	push   0xc0033ec3
c002a4e7:	e8 16 62 ff ff       	call   c0020702 <KePanic(char const*)>
c002a4ec:	83 c4 10             	add    esp,0x10
c002a4ef:	90                   	nop
c002a4f0:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c002a4f6:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c002a4f9:	74 11                	je     c002a50c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c002a4fb:	83 ec 0c             	sub    esp,0xc
c002a4fe:	68 c3 3e 03 c0       	push   0xc0033ec3
c002a503:	e8 fa 61 ff ff       	call   c0020702 <KePanic(char const*)>
c002a508:	83 c4 10             	add    esp,0x10
c002a50b:	90                   	nop
c002a50c:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c002a50f:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c002a513:	85 ff                	test   edi,edi
c002a515:	7e 21                	jle    c002a538 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c002a517:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c002a51e:	31 c0                	xor    eax,eax
c002a520:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c002a523:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c002a526:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c002a529:	01 d5                	add    ebp,edx
c002a52b:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c002a52e:	83 c0 04             	add    eax,0x4
c002a531:	39 c1                	cmp    ecx,eax
c002a533:	75 eb                	jne    c002a520 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c002a535:	8d 76 00             	lea    esi,[esi+0x0]
c002a538:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002a53b:	83 ec 04             	sub    esp,0x4
c002a53e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c002a541:	29 f8                	sub    eax,edi
c002a543:	c1 e0 02             	shl    eax,0x2
c002a546:	50                   	push   eax
c002a547:	8d 04 ba             	lea    eax,[edx+edi*4]
c002a54a:	50                   	push   eax
c002a54b:	52                   	push   edx
c002a54c:	e8 7f 5e fd ff       	call   c00003d0 <memmove>
c002a551:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002a554:	29 f8                	sub    eax,edi
c002a556:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c002a559:	83 c4 1c             	add    esp,0x1c
c002a55c:	89 f8                	mov    eax,edi
c002a55e:	5b                   	pop    ebx
c002a55f:	5e                   	pop    esi
c002a560:	5f                   	pop    edi
c002a561:	5d                   	pop    ebp
c002a562:	c3                   	ret    
c002a563:	90                   	nop

c002a564 <PCI::open(int, int, void*)>:
c002a564:	83 ec 18             	sub    esp,0x18
c002a567:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002a56b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002a56f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002a575:	8b 10                	mov    edx,DWORD PTR [eax]
c002a577:	50                   	push   eax
c002a578:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002a57b:	31 c0                	xor    eax,eax
c002a57d:	83 c4 1c             	add    esp,0x1c
c002a580:	c3                   	ret    
c002a581:	90                   	nop

c002a582 <PCI::close(int, int, void*)>:
c002a582:	31 c0                	xor    eax,eax
c002a584:	c3                   	ret    
c002a585:	90                   	nop

c002a586 <PCI::PCI()>:
c002a586:	83 ec 0c             	sub    esp,0xc
c002a589:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a58d:	83 ec 08             	sub    esp,0x8
c002a590:	68 df 3e 03 c0       	push   0xc0033edf
c002a595:	50                   	push   eax
c002a596:	e8 15 09 ff ff       	call   c001aeb0 <Bus::Bus(char const*)>
c002a59b:	83 c4 10             	add    esp,0x10
c002a59e:	ba ec 3f 03 c0       	mov    edx,0xc0033fec
c002a5a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a5a7:	89 10                	mov    DWORD PTR [eax],edx
c002a5a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a5ad:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c002a5b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a5bb:	a3 a0 1b 04 c0       	mov    ds:0xc0041ba0,eax
c002a5c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a5c4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a5ca:	0f b6 d0             	movzx  edx,al
c002a5cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a5d1:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002a5d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a5dc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a5e2:	0f b6 d0             	movzx  edx,al
c002a5e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a5e9:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002a5ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a5f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a5f8:	8d 50 01             	lea    edx,[eax+0x1]
c002a5fb:	88 d1                	mov    cl,dl
c002a5fd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002a601:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002a607:	0f b6 d0             	movzx  edx,al
c002a60a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a60e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002a612:	83 c9 c0             	or     ecx,0xffffffc0
c002a615:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002a619:	90                   	nop
c002a61a:	83 c4 0c             	add    esp,0xc
c002a61d:	c3                   	ret    

c002a61e <PCI::readBAR8(unsigned int, int)>:
c002a61e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a622:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a626:	f6 c2 01             	test   dl,0x1
c002a629:	74 07                	je     c002a632 <PCI::readBAR8(unsigned int, int)+0x14>
c002a62b:	83 e2 fc             	and    edx,0xfffffffc
c002a62e:	01 c2                	add    edx,eax
c002a630:	ec                   	in     al,dx
c002a631:	c3                   	ret    
c002a632:	83 e2 f0             	and    edx,0xfffffff0
c002a635:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c002a638:	c3                   	ret    
c002a639:	90                   	nop

c002a63a <PCI::readBAR16(unsigned int, int)>:
c002a63a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a63e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a642:	f6 c2 01             	test   dl,0x1
c002a645:	74 08                	je     c002a64f <PCI::readBAR16(unsigned int, int)+0x15>
c002a647:	83 e2 fc             	and    edx,0xfffffffc
c002a64a:	01 c2                	add    edx,eax
c002a64c:	66 ed                	in     ax,dx
c002a64e:	c3                   	ret    
c002a64f:	83 e2 f0             	and    edx,0xfffffff0
c002a652:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c002a656:	c3                   	ret    
c002a657:	90                   	nop

c002a658 <PCI::readBAR32(unsigned int, int)>:
c002a658:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a65c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a660:	f6 c2 01             	test   dl,0x1
c002a663:	74 07                	je     c002a66c <PCI::readBAR32(unsigned int, int)+0x14>
c002a665:	83 e2 fc             	and    edx,0xfffffffc
c002a668:	01 c2                	add    edx,eax
c002a66a:	ed                   	in     eax,dx
c002a66b:	c3                   	ret    
c002a66c:	83 e2 f0             	and    edx,0xfffffff0
c002a66f:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002a672:	c3                   	ret    
c002a673:	90                   	nop

c002a674 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c002a674:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a678:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a67c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a680:	f6 c2 01             	test   dl,0x1
c002a683:	74 07                	je     c002a68c <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c002a685:	83 e2 fc             	and    edx,0xfffffffc
c002a688:	01 ca                	add    edx,ecx
c002a68a:	ee                   	out    dx,al
c002a68b:	c3                   	ret    
c002a68c:	83 e2 f0             	and    edx,0xfffffff0
c002a68f:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c002a692:	c3                   	ret    
c002a693:	90                   	nop

c002a694 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c002a694:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a698:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a69c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a6a0:	f6 c2 01             	test   dl,0x1
c002a6a3:	74 08                	je     c002a6ad <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c002a6a5:	83 e2 fc             	and    edx,0xfffffffc
c002a6a8:	01 ca                	add    edx,ecx
c002a6aa:	66 ef                	out    dx,ax
c002a6ac:	c3                   	ret    
c002a6ad:	83 e2 f0             	and    edx,0xfffffff0
c002a6b0:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c002a6b4:	c3                   	ret    
c002a6b5:	90                   	nop

c002a6b6 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c002a6b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a6ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a6be:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a6c2:	f6 c2 01             	test   dl,0x1
c002a6c5:	74 07                	je     c002a6ce <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002a6c7:	83 e2 fc             	and    edx,0xfffffffc
c002a6ca:	01 ca                	add    edx,ecx
c002a6cc:	ef                   	out    dx,eax
c002a6cd:	c3                   	ret    
c002a6ce:	83 e2 f0             	and    edx,0xfffffff0
c002a6d1:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c002a6d4:	c3                   	ret    
c002a6d5:	90                   	nop

c002a6d6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a6d6:	55                   	push   ebp
c002a6d7:	57                   	push   edi
c002a6d8:	56                   	push   esi
c002a6d9:	53                   	push   ebx
c002a6da:	83 ec 0c             	sub    esp,0xc
c002a6dd:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c002a6e2:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c002a6e6:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002a6ea:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002a6ee:	83 fe 07             	cmp    esi,0x7
c002a6f1:	76 10                	jbe    c002a703 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c002a6f3:	83 ec 0c             	sub    esp,0xc
c002a6f6:	68 e7 3e 03 c0       	push   0xc0033ee7
c002a6fb:	e8 02 60 ff ff       	call   c0020702 <KePanic(char const*)>
c002a700:	83 c4 10             	add    esp,0x10
c002a703:	0f b6 db             	movzx  ebx,bl
c002a706:	83 fb 0f             	cmp    ebx,0xf
c002a709:	76 10                	jbe    c002a71b <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c002a70b:	83 ec 0c             	sub    esp,0xc
c002a70e:	68 17 3f 03 c0       	push   0xc0033f17
c002a713:	e8 ea 5f ff ff       	call   c0020702 <KePanic(char const*)>
c002a718:	83 c4 10             	add    esp,0x10
c002a71b:	8d 04 36             	lea    eax,[esi+esi*1]
c002a71e:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a723:	83 c8 f0             	or     eax,0xfffffff0
c002a726:	ee                   	out    dx,al
c002a727:	ba fa 0c 00 00       	mov    edx,0xcfa
c002a72c:	89 e8                	mov    eax,ebp
c002a72e:	ee                   	out    dx,al
c002a72f:	89 f9                	mov    ecx,edi
c002a731:	89 d8                	mov    eax,ebx
c002a733:	0f b6 d9             	movzx  ebx,cl
c002a736:	83 c4 0c             	add    esp,0xc
c002a739:	c1 e0 08             	shl    eax,0x8
c002a73c:	83 e3 fc             	and    ebx,0xfffffffc
c002a73f:	09 d8                	or     eax,ebx
c002a741:	5b                   	pop    ebx
c002a742:	0d 00 c0 ff ff       	or     eax,0xffffc000
c002a747:	5e                   	pop    esi
c002a748:	5f                   	pop    edi
c002a749:	5d                   	pop    ebp
c002a74a:	c3                   	ret    
c002a74b:	90                   	nop

c002a74c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a74c:	57                   	push   edi
c002a74d:	56                   	push   esi
c002a74e:	53                   	push   ebx
c002a74f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002a753:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002a757:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a75b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a75f:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c002a765:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002a769:	83 ff 01             	cmp    edi,0x1
c002a76c:	75 3f                	jne    c002a7ad <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c002a76e:	89 de                	mov    esi,ebx
c002a770:	0f b6 c0             	movzx  eax,al
c002a773:	c1 e0 10             	shl    eax,0x10
c002a776:	81 e6 fc 00 00 00    	and    esi,0xfc
c002a77c:	0f b6 c9             	movzx  ecx,cl
c002a77f:	09 f0                	or     eax,esi
c002a781:	c1 e1 08             	shl    ecx,0x8
c002a784:	0f b6 d2             	movzx  edx,dl
c002a787:	c1 e2 0b             	shl    edx,0xb
c002a78a:	09 c8                	or     eax,ecx
c002a78c:	09 d0                	or     eax,edx
c002a78e:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a793:	0d 00 00 00 80       	or     eax,0x80000000
c002a798:	ef                   	out    dx,eax
c002a799:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a79e:	ed                   	in     eax,dx
c002a79f:	83 e3 02             	and    ebx,0x2
c002a7a2:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a7a9:	d3 e8                	shr    eax,cl
c002a7ab:	eb 44                	jmp    c002a7f1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a7ad:	83 ff 02             	cmp    edi,0x2
c002a7b0:	75 2d                	jne    c002a7df <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c002a7b2:	83 ec 0c             	sub    esp,0xc
c002a7b5:	0f b6 fb             	movzx  edi,bl
c002a7b8:	57                   	push   edi
c002a7b9:	0f b6 c9             	movzx  ecx,cl
c002a7bc:	51                   	push   ecx
c002a7bd:	0f b6 d2             	movzx  edx,dl
c002a7c0:	52                   	push   edx
c002a7c1:	0f b6 c0             	movzx  eax,al
c002a7c4:	50                   	push   eax
c002a7c5:	56                   	push   esi
c002a7c6:	e8 0b ff ff ff       	call   c002a6d6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a7cb:	89 c2                	mov    edx,eax
c002a7cd:	ed                   	in     eax,dx
c002a7ce:	83 e3 02             	and    ebx,0x2
c002a7d1:	83 c4 20             	add    esp,0x20
c002a7d4:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a7db:	d3 e8                	shr    eax,cl
c002a7dd:	eb 12                	jmp    c002a7f1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a7df:	83 ec 0c             	sub    esp,0xc
c002a7e2:	68 47 3f 03 c0       	push   0xc0033f47
c002a7e7:	e8 16 5f ff ff       	call   c0020702 <KePanic(char const*)>
c002a7ec:	83 c4 10             	add    esp,0x10
c002a7ef:	31 c0                	xor    eax,eax
c002a7f1:	5b                   	pop    ebx
c002a7f2:	5e                   	pop    esi
c002a7f3:	5f                   	pop    edi
c002a7f4:	c3                   	ret    
c002a7f5:	90                   	nop

c002a7f6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002a7f6:	83 ec 18             	sub    esp,0x18
c002a7f9:	6a 00                	push   0x0
c002a7fb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a800:	50                   	push   eax
c002a801:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a806:	50                   	push   eax
c002a807:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a80c:	50                   	push   eax
c002a80d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a811:	e8 36 ff ff ff       	call   c002a74c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a816:	83 c4 2c             	add    esp,0x2c
c002a819:	c3                   	ret    

c002a81a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002a81a:	83 ec 18             	sub    esp,0x18
c002a81d:	6a 0e                	push   0xe
c002a81f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a824:	50                   	push   eax
c002a825:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a82a:	50                   	push   eax
c002a82b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a830:	50                   	push   eax
c002a831:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a835:	e8 12 ff ff ff       	call   c002a74c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a83a:	83 c4 2c             	add    esp,0x2c
c002a83d:	0f b6 c0             	movzx  eax,al
c002a840:	c3                   	ret    
c002a841:	90                   	nop

c002a842 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002a842:	55                   	push   ebp
c002a843:	57                   	push   edi
c002a844:	56                   	push   esi
c002a845:	53                   	push   ebx
c002a846:	83 ec 18             	sub    esp,0x18
c002a849:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c002a84e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c002a853:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c002a858:	6a 0a                	push   0xa
c002a85a:	56                   	push   esi
c002a85b:	55                   	push   ebp
c002a85c:	57                   	push   edi
c002a85d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a861:	e8 e6 fe ff ff       	call   c002a74c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a866:	83 c4 14             	add    esp,0x14
c002a869:	6a 0a                	push   0xa
c002a86b:	56                   	push   esi
c002a86c:	55                   	push   ebp
c002a86d:	57                   	push   edi
c002a86e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a872:	89 c3                	mov    ebx,eax
c002a874:	0f b6 db             	movzx  ebx,bl
c002a877:	e8 d0 fe ff ff       	call   c002a74c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a87c:	83 c4 2c             	add    esp,0x2c
c002a87f:	25 00 ff 00 00       	and    eax,0xff00
c002a884:	09 d8                	or     eax,ebx
c002a886:	5b                   	pop    ebx
c002a887:	5e                   	pop    esi
c002a888:	5f                   	pop    edi
c002a889:	5d                   	pop    ebp
c002a88a:	c3                   	ret    
c002a88b:	90                   	nop

c002a88c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002a88c:	83 ec 18             	sub    esp,0x18
c002a88f:	6a 08                	push   0x8
c002a891:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a896:	50                   	push   eax
c002a897:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a89c:	50                   	push   eax
c002a89d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a8a2:	50                   	push   eax
c002a8a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a8a7:	e8 a0 fe ff ff       	call   c002a74c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a8ac:	83 c4 2c             	add    esp,0x2c
c002a8af:	0f b6 c4             	movzx  eax,ah
c002a8b2:	c3                   	ret    
c002a8b3:	90                   	nop

c002a8b4 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002a8b4:	83 ec 18             	sub    esp,0x18
c002a8b7:	6a 08                	push   0x8
c002a8b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a8be:	50                   	push   eax
c002a8bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a8c4:	50                   	push   eax
c002a8c5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a8ca:	50                   	push   eax
c002a8cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a8cf:	e8 78 fe ff ff       	call   c002a74c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a8d4:	83 c4 2c             	add    esp,0x2c
c002a8d7:	c3                   	ret    

c002a8d8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002a8d8:	83 ec 18             	sub    esp,0x18
c002a8db:	6a 3c                	push   0x3c
c002a8dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a8e2:	50                   	push   eax
c002a8e3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a8e8:	50                   	push   eax
c002a8e9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a8ee:	50                   	push   eax
c002a8ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a8f3:	e8 54 fe ff ff       	call   c002a74c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a8f8:	83 c4 2c             	add    esp,0x2c
c002a8fb:	c3                   	ret    

c002a8fc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002a8fc:	83 ec 18             	sub    esp,0x18
c002a8ff:	6a 18                	push   0x18
c002a901:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a906:	50                   	push   eax
c002a907:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a90c:	50                   	push   eax
c002a90d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a912:	50                   	push   eax
c002a913:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a917:	e8 30 fe ff ff       	call   c002a74c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a91c:	83 c4 2c             	add    esp,0x2c
c002a91f:	0f b6 c4             	movzx  eax,ah
c002a922:	c3                   	ret    
c002a923:	90                   	nop

c002a924 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a924:	55                   	push   ebp
c002a925:	57                   	push   edi
c002a926:	56                   	push   esi
c002a927:	53                   	push   ebx
c002a928:	83 ec 28             	sub    esp,0x28
c002a92b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002a92f:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c002a934:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c002a939:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c002a93e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002a945:	8d 43 12             	lea    eax,[ebx+0x12]
c002a948:	83 c3 10             	add    ebx,0x10
c002a94b:	0f b6 c0             	movzx  eax,al
c002a94e:	0f b6 db             	movzx  ebx,bl
c002a951:	50                   	push   eax
c002a952:	51                   	push   ecx
c002a953:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c002a957:	57                   	push   edi
c002a958:	55                   	push   ebp
c002a959:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a95d:	e8 ea fd ff ff       	call   c002a74c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a962:	83 c4 14             	add    esp,0x14
c002a965:	53                   	push   ebx
c002a966:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a96a:	51                   	push   ecx
c002a96b:	89 c6                	mov    esi,eax
c002a96d:	57                   	push   edi
c002a96e:	55                   	push   ebp
c002a96f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a973:	c1 e6 10             	shl    esi,0x10
c002a976:	e8 d1 fd ff ff       	call   c002a74c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a97b:	83 c4 3c             	add    esp,0x3c
c002a97e:	5b                   	pop    ebx
c002a97f:	0f b7 c0             	movzx  eax,ax
c002a982:	09 f0                	or     eax,esi
c002a984:	5e                   	pop    esi
c002a985:	5f                   	pop    edi
c002a986:	5d                   	pop    ebp
c002a987:	c3                   	ret    

c002a988 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002a988:	55                   	push   ebp
c002a989:	57                   	push   edi
c002a98a:	56                   	push   esi
c002a98b:	53                   	push   ebx
c002a98c:	83 ec 0c             	sub    esp,0xc
c002a98f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002a993:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002a997:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002a99b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c002a99f:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c002a9a5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002a9a9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002a9ad:	83 f9 01             	cmp    ecx,0x1
c002a9b0:	75 5d                	jne    c002aa0f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c002a9b2:	0f b6 c8             	movzx  ecx,al
c002a9b5:	89 f0                	mov    eax,esi
c002a9b7:	25 fc 00 00 00       	and    eax,0xfc
c002a9bc:	0f b6 d2             	movzx  edx,dl
c002a9bf:	c1 e1 10             	shl    ecx,0x10
c002a9c2:	c1 e2 0b             	shl    edx,0xb
c002a9c5:	09 c1                	or     ecx,eax
c002a9c7:	89 f8                	mov    eax,edi
c002a9c9:	0f b6 f8             	movzx  edi,al
c002a9cc:	c1 e7 08             	shl    edi,0x8
c002a9cf:	09 f9                	or     ecx,edi
c002a9d1:	09 d1                	or     ecx,edx
c002a9d3:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a9d8:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002a9de:	89 c8                	mov    eax,ecx
c002a9e0:	ef                   	out    dx,eax
c002a9e1:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a9e6:	ed                   	in     eax,dx
c002a9e7:	83 e6 02             	and    esi,0x2
c002a9ea:	0f b7 db             	movzx  ebx,bx
c002a9ed:	74 0a                	je     c002a9f9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c002a9ef:	c1 e3 10             	shl    ebx,0x10
c002a9f2:	0f b7 d0             	movzx  edx,ax
c002a9f5:	09 d3                	or     ebx,edx
c002a9f7:	eb 05                	jmp    c002a9fe <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c002a9f9:	66 31 c0             	xor    ax,ax
c002a9fc:	09 c3                	or     ebx,eax
c002a9fe:	ba f8 0c 00 00       	mov    edx,0xcf8
c002aa03:	89 c8                	mov    eax,ecx
c002aa05:	ef                   	out    dx,eax
c002aa06:	ba fc 0c 00 00       	mov    edx,0xcfc
c002aa0b:	89 d8                	mov    eax,ebx
c002aa0d:	eb 41                	jmp    c002aa50 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c002aa0f:	83 f9 02             	cmp    ecx,0x2
c002aa12:	75 45                	jne    c002aa59 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c002aa14:	89 f1                	mov    ecx,esi
c002aa16:	83 ec 0c             	sub    esp,0xc
c002aa19:	0f b6 f1             	movzx  esi,cl
c002aa1c:	89 f9                	mov    ecx,edi
c002aa1e:	56                   	push   esi
c002aa1f:	0f b6 f9             	movzx  edi,cl
c002aa22:	57                   	push   edi
c002aa23:	0f b6 d2             	movzx  edx,dl
c002aa26:	52                   	push   edx
c002aa27:	0f b6 c0             	movzx  eax,al
c002aa2a:	50                   	push   eax
c002aa2b:	55                   	push   ebp
c002aa2c:	e8 a5 fc ff ff       	call   c002a6d6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002aa31:	89 c2                	mov    edx,eax
c002aa33:	ed                   	in     eax,dx
c002aa34:	83 c4 20             	add    esp,0x20
c002aa37:	f6 c2 02             	test   dl,0x2
c002aa3a:	0f b7 db             	movzx  ebx,bx
c002aa3d:	74 0c                	je     c002aa4b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c002aa3f:	0f b7 c8             	movzx  ecx,ax
c002aa42:	89 d8                	mov    eax,ebx
c002aa44:	c1 e0 10             	shl    eax,0x10
c002aa47:	09 c8                	or     eax,ecx
c002aa49:	eb 05                	jmp    c002aa50 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c002aa4b:	66 31 c0             	xor    ax,ax
c002aa4e:	09 d8                	or     eax,ebx
c002aa50:	ef                   	out    dx,eax
c002aa51:	83 c4 0c             	add    esp,0xc
c002aa54:	5b                   	pop    ebx
c002aa55:	5e                   	pop    esi
c002aa56:	5f                   	pop    edi
c002aa57:	5d                   	pop    ebp
c002aa58:	c3                   	ret    
c002aa59:	c7 44 24 20 47 3f 03 c0 	mov    DWORD PTR [esp+0x20],0xc0033f47
c002aa61:	83 c4 0c             	add    esp,0xc
c002aa64:	5b                   	pop    ebx
c002aa65:	5e                   	pop    esi
c002aa66:	5f                   	pop    edi
c002aa67:	5d                   	pop    ebp
c002aa68:	e9 95 5c ff ff       	jmp    c0020702 <KePanic(char const*)>
c002aa6d:	90                   	nop

c002aa6e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c002aa6e:	55                   	push   ebp
c002aa6f:	57                   	push   edi
c002aa70:	56                   	push   esi
c002aa71:	53                   	push   ebx
c002aa72:	81 ec 4c 01 00 00    	sub    esp,0x14c
c002aa78:	80 3d ac 1b 04 c0 00 	cmp    BYTE PTR ds:0xc0041bac,0x0
c002aa7f:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c002aa86:	0f 85 bd 00 00 00    	jne    c002ab49 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c002aa8c:	83 ec 0c             	sub    esp,0xc
c002aa8f:	68 14 01 00 00       	push   0x114
c002aa94:	e8 ef bb fe ff       	call   c0016688 <malloc>
c002aa99:	83 c4 0c             	add    esp,0xc
c002aa9c:	ff 35 f8 11 04 c0    	push   DWORD PTR ds:0xc00411f8
c002aaa2:	68 4d 3f 03 c0       	push   0xc0033f4d
c002aaa7:	50                   	push   eax
c002aaa8:	89 c3                	mov    ebx,eax
c002aaaa:	e8 27 fc fe ff       	call   c001a6d6 <File::File(char const*, Process*)>
c002aaaf:	83 c4 10             	add    esp,0x10
c002aab2:	85 db                	test   ebx,ebx
c002aab4:	0f 84 6b 02 00 00    	je     c002ad25 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002aaba:	57                   	push   edi
c002aabb:	57                   	push   edi
c002aabc:	6a 01                	push   0x1
c002aabe:	53                   	push   ebx
c002aabf:	e8 30 fc fe ff       	call   c001a6f4 <File::open(FileOpenMode)>
c002aac4:	83 c4 10             	add    esp,0x10
c002aac7:	85 c0                	test   eax,eax
c002aac9:	0f 85 56 02 00 00    	jne    c002ad25 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002aacf:	52                   	push   edx
c002aad0:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c002aad4:	50                   	push   eax
c002aad5:	8d 44 24 48          	lea    eax,[esp+0x48]
c002aad9:	50                   	push   eax
c002aada:	53                   	push   ebx
c002aadb:	e8 16 ff fe ff       	call   c001a9f6 <File::stat(unsigned long long*, bool*)>
c002aae0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002aae4:	40                   	inc    eax
c002aae5:	89 04 24             	mov    DWORD PTR [esp],eax
c002aae8:	e8 9b bb fe ff       	call   c0016688 <malloc>
c002aaed:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c002aaf1:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c002aaf5:	59                   	pop    ecx
c002aaf6:	a3 a8 1b 04 c0       	mov    ds:0xc0041ba8,eax
c002aafb:	8b 13                	mov    edx,DWORD PTR [ebx]
c002aafd:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c002ab01:	51                   	push   ecx
c002ab02:	50                   	push   eax
c002ab03:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002ab07:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002ab0b:	53                   	push   ebx
c002ab0c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002ab0f:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c002ab13:	83 c4 20             	add    esp,0x20
c002ab16:	89 c8                	mov    eax,ecx
c002ab18:	99                   	cdq    
c002ab19:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c002ab1d:	0f 85 02 02 00 00    	jne    c002ad25 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002ab23:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c002ab27:	0f 85 f8 01 00 00    	jne    c002ad25 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002ab2d:	83 ec 0c             	sub    esp,0xc
c002ab30:	53                   	push   ebx
c002ab31:	e8 1c fc fe ff       	call   c001a752 <File::close()>
c002ab36:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002ab3a:	83 c4 10             	add    esp,0x10
c002ab3d:	c6 05 ac 1b 04 c0 01 	mov    BYTE PTR ds:0xc0041bac,0x1
c002ab44:	a3 a4 1b 04 c0       	mov    ds:0xc0041ba4,eax
c002ab49:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002ab51:	31 c9                	xor    ecx,ecx
c002ab53:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c002ab5a:	8b 2d a4 1b 04 c0    	mov    ebp,DWORD PTR ds:0xc0041ba4
c002ab60:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c002ab67:	8b 15 a8 1b 04 c0    	mov    edx,DWORD PTR ds:0xc0041ba8
c002ab6d:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c002ab72:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c002ab7a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c002ab7f:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c002ab87:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002ab8b:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c002ab93:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c002ab97:	39 cd                	cmp    ebp,ecx
c002ab99:	0f 8e 86 01 00 00    	jle    c002ad25 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002ab9f:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c002aba2:	d4 40                	aam    0x40
c002aba4:	d5 39                	aad    0x39
c002aba6:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002abaa:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c002abae:	d4 40                	aam    0x40
c002abb0:	d5 39                	aad    0x39
c002abb2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002abb6:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c002abba:	d4 40                	aam    0x40
c002abbc:	d5 39                	aad    0x39
c002abbe:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c002abc2:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c002abc6:	d4 40                	aam    0x40
c002abc8:	d5 39                	aad    0x39
c002abca:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c002abce:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c002abd2:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002abd6:	3c 56                	cmp    al,0x56
c002abd8:	74 47                	je     c002ac21 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c002abda:	d4 40                	aam    0x40
c002abdc:	d5 39                	aad    0x39
c002abde:	8d 58 d0             	lea    ebx,[eax-0x30]
c002abe1:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c002abe5:	0f b6 db             	movzx  ebx,bl
c002abe8:	c1 e3 04             	shl    ebx,0x4
c002abeb:	d4 40                	aam    0x40
c002abed:	d5 39                	aad    0x39
c002abef:	83 e8 30             	sub    eax,0x30
c002abf2:	0f b6 c0             	movzx  eax,al
c002abf5:	09 c3                	or     ebx,eax
c002abf7:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c002abfb:	c1 e3 04             	shl    ebx,0x4
c002abfe:	d4 40                	aam    0x40
c002ac00:	d5 39                	aad    0x39
c002ac02:	83 e8 30             	sub    eax,0x30
c002ac05:	0f b6 c0             	movzx  eax,al
c002ac08:	09 c3                	or     ebx,eax
c002ac0a:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c002ac0e:	c1 e3 04             	shl    ebx,0x4
c002ac11:	d4 40                	aam    0x40
c002ac13:	d5 39                	aad    0x39
c002ac15:	83 e8 30             	sub    eax,0x30
c002ac18:	0f b6 c0             	movzx  eax,al
c002ac1b:	09 c3                	or     ebx,eax
c002ac1d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c002ac21:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c002ac25:	80 fb 58             	cmp    bl,0x58
c002ac28:	74 49                	je     c002ac73 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c002ac2a:	88 d8                	mov    al,bl
c002ac2c:	d4 40                	aam    0x40
c002ac2e:	d5 39                	aad    0x39
c002ac30:	83 e8 30             	sub    eax,0x30
c002ac33:	0f b6 f8             	movzx  edi,al
c002ac36:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c002ac3a:	c1 e7 04             	shl    edi,0x4
c002ac3d:	d4 40                	aam    0x40
c002ac3f:	d5 39                	aad    0x39
c002ac41:	83 e8 30             	sub    eax,0x30
c002ac44:	0f b6 c0             	movzx  eax,al
c002ac47:	09 c7                	or     edi,eax
c002ac49:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c002ac4d:	c1 e7 04             	shl    edi,0x4
c002ac50:	d4 40                	aam    0x40
c002ac52:	d5 39                	aad    0x39
c002ac54:	83 e8 30             	sub    eax,0x30
c002ac57:	0f b6 c0             	movzx  eax,al
c002ac5a:	09 c7                	or     edi,eax
c002ac5c:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c002ac60:	c1 e7 04             	shl    edi,0x4
c002ac63:	d4 40                	aam    0x40
c002ac65:	d5 39                	aad    0x39
c002ac67:	83 e8 30             	sub    eax,0x30
c002ac6a:	0f b6 c0             	movzx  eax,al
c002ac6d:	09 c7                	or     edi,eax
c002ac6f:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c002ac73:	8d 41 10             	lea    eax,[ecx+0x10]
c002ac76:	8d 7c 24 40          	lea    edi,[esp+0x40]
c002ac7a:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c002ac7e:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c002ac82:	83 f9 0a             	cmp    ecx,0xa
c002ac85:	74 07                	je     c002ac8e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c002ac87:	47                   	inc    edi
c002ac88:	39 c5                	cmp    ebp,eax
c002ac8a:	75 16                	jne    c002aca2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c002ac8c:	89 e8                	mov    eax,ebp
c002ac8e:	83 f9 0a             	cmp    ecx,0xa
c002ac91:	0f 94 c1             	sete   cl
c002ac94:	0f b6 c9             	movzx  ecx,cl
c002ac97:	01 c1                	add    ecx,eax
c002ac99:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c002ac9e:	75 0f                	jne    c002acaf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c002aca0:	eb 1c                	jmp    c002acbe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c002aca2:	c6 07 00             	mov    BYTE PTR [edi],0x0
c002aca5:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c002aca9:	40                   	inc    eax
c002acaa:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c002acad:	eb cb                	jmp    c002ac7a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c002acaf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002acb3:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c002acb8:	0f 85 d9 fe ff ff    	jne    c002ab97 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002acbe:	80 fb 58             	cmp    bl,0x58
c002acc1:	74 10                	je     c002acd3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c002acc3:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c002acc8:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c002accd:	0f 85 c4 fe ff ff    	jne    c002ab97 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002acd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002acd7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002acdb:	83 e8 30             	sub    eax,0x30
c002acde:	c1 e0 04             	shl    eax,0x4
c002ace1:	83 eb 30             	sub    ebx,0x30
c002ace4:	09 d8                	or     eax,ebx
c002ace6:	0f b6 c0             	movzx  eax,al
c002ace9:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c002aced:	0f 85 a4 fe ff ff    	jne    c002ab97 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002acf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002acf7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c002acfb:	83 e8 30             	sub    eax,0x30
c002acfe:	c1 e0 04             	shl    eax,0x4
c002ad01:	83 eb 30             	sub    ebx,0x30
c002ad04:	09 d8                	or     eax,ebx
c002ad06:	0f b6 c0             	movzx  eax,al
c002ad09:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c002ad0d:	0f 85 84 fe ff ff    	jne    c002ab97 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002ad13:	50                   	push   eax
c002ad14:	50                   	push   eax
c002ad15:	8d 44 24 48          	lea    eax,[esp+0x48]
c002ad19:	50                   	push   eax
c002ad1a:	56                   	push   esi
c002ad1b:	e8 30 59 fd ff       	call   c0000650 <strcpy>
c002ad20:	83 c4 10             	add    esp,0x10
c002ad23:	eb 05                	jmp    c002ad2a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c002ad25:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002ad28:	31 f6                	xor    esi,esi
c002ad2a:	81 c4 4c 01 00 00    	add    esp,0x14c
c002ad30:	89 f0                	mov    eax,esi
c002ad32:	5b                   	pop    ebx
c002ad33:	5e                   	pop    esi
c002ad34:	5f                   	pop    edi
c002ad35:	5d                   	pop    ebp
c002ad36:	c3                   	ret    
c002ad37:	90                   	nop

c002ad38 <PCI::checkBus(unsigned char)>:
c002ad38:	56                   	push   esi
c002ad39:	53                   	push   ebx
c002ad3a:	31 db                	xor    ebx,ebx
c002ad3c:	51                   	push   ecx
c002ad3d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002ad42:	52                   	push   edx
c002ad43:	53                   	push   ebx
c002ad44:	43                   	inc    ebx
c002ad45:	56                   	push   esi
c002ad46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ad4a:	e8 6f 03 00 00       	call   c002b0be <PCI::checkDevice(unsigned char, unsigned char)>
c002ad4f:	83 c4 10             	add    esp,0x10
c002ad52:	83 fb 20             	cmp    ebx,0x20
c002ad55:	75 eb                	jne    c002ad42 <PCI::checkBus(unsigned char)+0xa>
c002ad57:	58                   	pop    eax
c002ad58:	5b                   	pop    ebx
c002ad59:	5e                   	pop    esi
c002ad5a:	c3                   	ret    
c002ad5b:	90                   	nop

c002ad5c <PCI::foundDevice(PCIDeviceInfo)>:
c002ad5c:	55                   	push   ebp
c002ad5d:	57                   	push   edi
c002ad5e:	56                   	push   esi
c002ad5f:	53                   	push   ebx
c002ad60:	81 ec 8c 00 00 00    	sub    esp,0x8c
c002ad66:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c002ad6e:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c002ad75:	3d ff ff 00 00       	cmp    eax,0xffff
c002ad7a:	0f 84 b6 01 00 00    	je     c002af36 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c002ad80:	0f b7 ac 24 a4 00 00 00 	movzx  ebp,WORD PTR [esp+0xa4]
c002ad88:	66 81 fd 06 04       	cmp    bp,0x406
c002ad8d:	75 32                	jne    c002adc1 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c002ad8f:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c002ad97:	50                   	push   eax
c002ad98:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c002ada0:	50                   	push   eax
c002ada1:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c002ada9:	50                   	push   eax
c002adaa:	53                   	push   ebx
c002adab:	e8 4c fb ff ff       	call   c002a8fc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002adb0:	59                   	pop    ecx
c002adb1:	5e                   	pop    esi
c002adb2:	0f b6 c0             	movzx  eax,al
c002adb5:	50                   	push   eax
c002adb6:	53                   	push   ebx
c002adb7:	e8 7c ff ff ff       	call   c002ad38 <PCI::checkBus(unsigned char)>
c002adbc:	e9 15 01 00 00       	jmp    c002aed6 <PCI::foundDevice(PCIDeviceInfo)+0x17a>
c002adc1:	0f b6 94 24 c4 00 00 00 	movzx  edx,BYTE PTR [esp+0xc4]
c002adc9:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c002adcf:	8b 8c 24 a4 00 00 00 	mov    ecx,DWORD PTR [esp+0xa4]
c002add6:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c002addd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002ade1:	85 c0                	test   eax,eax
c002ade3:	74 34                	je     c002ae19 <PCI::foundDevice(PCIDeviceInfo)+0xbd>
c002ade5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c002ade8:	85 d2                	test   edx,edx
c002adea:	74 29                	je     c002ae15 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c002adec:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c002adf2:	31 cf                	xor    edi,ecx
c002adf4:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c002adfa:	75 19                	jne    c002ae15 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c002adfc:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c002ae02:	75 11                	jne    c002ae15 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c002ae04:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c002ae0b:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c002ae0f:	0f 84 21 01 00 00    	je     c002af36 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c002ae15:	8b 00                	mov    eax,DWORD PTR [eax]
c002ae17:	eb c8                	jmp    c002ade1 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c002ae19:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c002ae1d:	be 80 3f 03 c0       	mov    esi,0xc0033f80
c002ae22:	b9 07 00 00 00       	mov    ecx,0x7
c002ae27:	fc                   	cld    
c002ae28:	31 d2                	xor    edx,edx
c002ae2a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002ae2c:	b9 12 00 00 00       	mov    ecx,0x12
c002ae31:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c002ae38:	8d 7c 24 38          	lea    edi,[esp+0x38]
c002ae3c:	83 ec 0c             	sub    esp,0xc
c002ae3f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002ae41:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c002ae49:	b9 0a 00 00 00       	mov    ecx,0xa
c002ae4e:	f7 f1                	div    ecx
c002ae50:	83 c0 30             	add    eax,0x30
c002ae53:	83 c2 30             	add    edx,0x30
c002ae56:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c002ae5a:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c002ae62:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c002ae66:	31 d2                	xor    edx,edx
c002ae68:	f7 f1                	div    ecx
c002ae6a:	83 c0 30             	add    eax,0x30
c002ae6d:	83 c2 30             	add    edx,0x30
c002ae70:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c002ae74:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c002ae78:	8d 44 24 28          	lea    eax,[esp+0x28]
c002ae7c:	50                   	push   eax
c002ae7d:	e8 1b 4f ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002ae82:	83 c4 10             	add    esp,0x10
c002ae85:	81 fd 01 06 00 00    	cmp    ebp,0x601
c002ae8b:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c002ae92:	75 47                	jne    c002aedb <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c002ae94:	83 ec 0c             	sub    esp,0xc
c002ae97:	68 64 01 00 00       	push   0x164
c002ae9c:	e8 e7 b7 fe ff       	call   c0016688 <malloc>
c002aea1:	89 04 24             	mov    DWORD PTR [esp],eax
c002aea4:	89 c5                	mov    ebp,eax
c002aea6:	e8 f5 10 00 00       	call   c002bfa0 <SATABus::SATABus()>
c002aeab:	58                   	pop    eax
c002aeac:	5a                   	pop    edx
c002aead:	55                   	push   ebp
c002aeae:	53                   	push   ebx
c002aeaf:	e8 56 07 ff ff       	call   c001b60a <Device::addChild(Device*)>
c002aeb4:	83 ec 1c             	sub    esp,0x1c
c002aeb7:	b9 09 00 00 00       	mov    ecx,0x9
c002aebc:	89 e7                	mov    edi,esp
c002aebe:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002aec0:	55                   	push   ebp
c002aec1:	e8 8a 06 ff ff       	call   c001b550 <Device::preOpenPCI(PCIDeviceInfo)>
c002aec6:	83 c4 30             	add    esp,0x30
c002aec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002aecc:	6a 00                	push   0x0
c002aece:	6a 00                	push   0x0
c002aed0:	6a 00                	push   0x0
c002aed2:	55                   	push   ebp
c002aed3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002aed6:	83 c4 10             	add    esp,0x10
c002aed9:	eb 5b                	jmp    c002af36 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c002aedb:	81 fd 01 01 00 00    	cmp    ebp,0x101
c002aee1:	75 19                	jne    c002aefc <PCI::foundDevice(PCIDeviceInfo)+0x1a0>
c002aee3:	83 ec 0c             	sub    esp,0xc
c002aee6:	68 70 02 00 00       	push   0x270
c002aeeb:	e8 98 b7 fe ff       	call   c0016688 <malloc>
c002aef0:	89 04 24             	mov    DWORD PTR [esp],eax
c002aef3:	89 c5                	mov    ebp,eax
c002aef5:	e8 94 02 00 00       	call   c002b18e <IDE::IDE()>
c002aefa:	eb af                	jmp    c002aeab <PCI::foundDevice(PCIDeviceInfo)+0x14f>
c002aefc:	83 ec 0c             	sub    esp,0xc
c002aeff:	68 58 01 00 00       	push   0x158
c002af04:	e8 7f b7 fe ff       	call   c0016688 <malloc>
c002af09:	89 c5                	mov    ebp,eax
c002af0b:	58                   	pop    eax
c002af0c:	5a                   	pop    edx
c002af0d:	68 66 3f 03 c0       	push   0xc0033f66
c002af12:	55                   	push   ebp
c002af13:	e8 a6 09 ff ff       	call   c001b8be <DriverlessDevice::DriverlessDevice(char const*)>
c002af18:	59                   	pop    ecx
c002af19:	5f                   	pop    edi
c002af1a:	55                   	push   ebp
c002af1b:	53                   	push   ebx
c002af1c:	e8 e9 06 ff ff       	call   c001b60a <Device::addChild(Device*)>
c002af21:	83 ec 1c             	sub    esp,0x1c
c002af24:	b9 09 00 00 00       	mov    ecx,0x9
c002af29:	89 e7                	mov    edi,esp
c002af2b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002af2d:	55                   	push   ebp
c002af2e:	e8 1d 06 ff ff       	call   c001b550 <Device::preOpenPCI(PCIDeviceInfo)>
c002af33:	83 c4 30             	add    esp,0x30
c002af36:	81 c4 8c 00 00 00    	add    esp,0x8c
c002af3c:	5b                   	pop    ebx
c002af3d:	5e                   	pop    esi
c002af3e:	5f                   	pop    edi
c002af3f:	5d                   	pop    ebp
c002af40:	c3                   	ret    
c002af41:	90                   	nop

c002af42 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002af42:	55                   	push   ebp
c002af43:	57                   	push   edi
c002af44:	56                   	push   esi
c002af45:	53                   	push   ebx
c002af46:	83 ec 68             	sub    esp,0x68
c002af49:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c002af50:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c002af54:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002af58:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c002af5f:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c002af64:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002af68:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c002af6f:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c002af74:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002af78:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c002af7d:	6a 0c                	push   0xc
c002af7f:	57                   	push   edi
c002af80:	53                   	push   ebx
c002af81:	56                   	push   esi
c002af82:	55                   	push   ebp
c002af83:	e8 c4 f7 ff ff       	call   c002a74c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002af88:	83 c4 20             	add    esp,0x20
c002af8b:	57                   	push   edi
c002af8c:	53                   	push   ebx
c002af8d:	56                   	push   esi
c002af8e:	55                   	push   ebp
c002af8f:	e8 ae f8 ff ff       	call   c002a842 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002af94:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c002af99:	57                   	push   edi
c002af9a:	53                   	push   ebx
c002af9b:	56                   	push   esi
c002af9c:	55                   	push   ebp
c002af9d:	e8 36 f9 ff ff       	call   c002a8d8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002afa2:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c002afa6:	83 c4 14             	add    esp,0x14
c002afa9:	6a 3c                	push   0x3c
c002afab:	57                   	push   edi
c002afac:	53                   	push   ebx
c002afad:	56                   	push   esi
c002afae:	55                   	push   ebp
c002afaf:	e8 98 f7 ff ff       	call   c002a74c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002afb4:	0f b6 c4             	movzx  eax,ah
c002afb7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002afbb:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002afbf:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c002afc3:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c002afc8:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c002afce:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c002afd4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002afd8:	83 c4 20             	add    esp,0x20
c002afdb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c002afe0:	74 30                	je     c002b012 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002afe2:	31 c0                	xor    eax,eax
c002afe4:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c002afe8:	7e 28                	jle    c002b012 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002afea:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c002aff2:	39 cb                	cmp    ebx,ecx
c002aff4:	75 19                	jne    c002b00f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002aff6:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c002affe:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c002b002:	75 0b                	jne    c002b00f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002b004:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c002b00b:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c002b00f:	40                   	inc    eax
c002b010:	eb d2                	jmp    c002afe4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c002b012:	31 d2                	xor    edx,edx
c002b014:	83 ec 0c             	sub    esp,0xc
c002b017:	57                   	push   edi
c002b018:	53                   	push   ebx
c002b019:	56                   	push   esi
c002b01a:	52                   	push   edx
c002b01b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c002b01f:	55                   	push   ebp
c002b020:	e8 ff f8 ff ff       	call   c002a924 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002b025:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002b029:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002b02d:	42                   	inc    edx
c002b02e:	83 c4 20             	add    esp,0x20
c002b031:	83 fa 06             	cmp    edx,0x6
c002b034:	75 de                	jne    c002b014 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c002b036:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002b03a:	83 ec 0c             	sub    esp,0xc
c002b03d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002b041:	c1 e2 08             	shl    edx,0x8
c002b044:	0f b6 c4             	movzx  eax,ah
c002b047:	09 d0                	or     eax,edx
c002b049:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c002b04e:	6a 02                	push   0x2
c002b050:	57                   	push   edi
c002b051:	53                   	push   ebx
c002b052:	56                   	push   esi
c002b053:	55                   	push   ebp
c002b054:	e8 f3 f6 ff ff       	call   c002a74c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002b059:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c002b05e:	83 c4 20             	add    esp,0x20
c002b061:	57                   	push   edi
c002b062:	53                   	push   ebx
c002b063:	56                   	push   esi
c002b064:	55                   	push   ebp
c002b065:	e8 22 f8 ff ff       	call   c002a88c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002b06a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002b06e:	57                   	push   edi
c002b06f:	53                   	push   ebx
c002b070:	56                   	push   esi
c002b071:	55                   	push   ebp
c002b072:	e8 7f f7 ff ff       	call   c002a7f6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002b077:	b9 09 00 00 00       	mov    ecx,0x9
c002b07c:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c002b081:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c002b085:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c002b089:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c002b08d:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c002b091:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c002b095:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c002b099:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002b09d:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c002b0a1:	83 ec 0c             	sub    esp,0xc
c002b0a4:	fc                   	cld    
c002b0a5:	8d 74 24 58          	lea    esi,[esp+0x58]
c002b0a9:	89 e7                	mov    edi,esp
c002b0ab:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002b0ad:	55                   	push   ebp
c002b0ae:	e8 a9 fc ff ff       	call   c002ad5c <PCI::foundDevice(PCIDeviceInfo)>
c002b0b3:	81 c4 8c 00 00 00    	add    esp,0x8c
c002b0b9:	5b                   	pop    ebx
c002b0ba:	5e                   	pop    esi
c002b0bb:	5f                   	pop    edi
c002b0bc:	5d                   	pop    ebp
c002b0bd:	c3                   	ret    

c002b0be <PCI::checkDevice(unsigned char, unsigned char)>:
c002b0be:	55                   	push   ebp
c002b0bf:	57                   	push   edi
c002b0c0:	56                   	push   esi
c002b0c1:	53                   	push   ebx
c002b0c2:	83 ec 0c             	sub    esp,0xc
c002b0c5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002b0ca:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002b0cf:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002b0d3:	6a 00                	push   0x0
c002b0d5:	56                   	push   esi
c002b0d6:	57                   	push   edi
c002b0d7:	55                   	push   ebp
c002b0d8:	e8 19 f7 ff ff       	call   c002a7f6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002b0dd:	6a 00                	push   0x0
c002b0df:	56                   	push   esi
c002b0e0:	57                   	push   edi
c002b0e1:	55                   	push   ebp
c002b0e2:	e8 5b fe ff ff       	call   c002af42 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002b0e7:	83 c4 20             	add    esp,0x20
c002b0ea:	6a 00                	push   0x0
c002b0ec:	56                   	push   esi
c002b0ed:	57                   	push   edi
c002b0ee:	55                   	push   ebp
c002b0ef:	e8 26 f7 ff ff       	call   c002a81a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002b0f4:	83 c4 10             	add    esp,0x10
c002b0f7:	a8 80                	test   al,0x80
c002b0f9:	74 2d                	je     c002b128 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c002b0fb:	bb 01 00 00 00       	mov    ebx,0x1
c002b100:	53                   	push   ebx
c002b101:	56                   	push   esi
c002b102:	57                   	push   edi
c002b103:	55                   	push   ebp
c002b104:	e8 ed f6 ff ff       	call   c002a7f6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002b109:	83 c4 10             	add    esp,0x10
c002b10c:	0f b7 c0             	movzx  eax,ax
c002b10f:	3d ff ff 00 00       	cmp    eax,0xffff
c002b114:	74 0c                	je     c002b122 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c002b116:	53                   	push   ebx
c002b117:	56                   	push   esi
c002b118:	57                   	push   edi
c002b119:	55                   	push   ebp
c002b11a:	e8 23 fe ff ff       	call   c002af42 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002b11f:	83 c4 10             	add    esp,0x10
c002b122:	43                   	inc    ebx
c002b123:	83 fb 08             	cmp    ebx,0x8
c002b126:	75 d8                	jne    c002b100 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002b128:	83 c4 0c             	add    esp,0xc
c002b12b:	5b                   	pop    ebx
c002b12c:	5e                   	pop    esi
c002b12d:	5f                   	pop    edi
c002b12e:	5d                   	pop    ebp
c002b12f:	c3                   	ret    

c002b130 <PCI::detect()>:
c002b130:	56                   	push   esi
c002b131:	53                   	push   ebx
c002b132:	53                   	push   ebx
c002b133:	31 db                	xor    ebx,ebx
c002b135:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002b139:	6a 00                	push   0x0
c002b13b:	6a 00                	push   0x0
c002b13d:	6a 00                	push   0x0
c002b13f:	56                   	push   esi
c002b140:	e8 d5 f6 ff ff       	call   c002a81a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002b145:	83 c4 10             	add    esp,0x10
c002b148:	a8 80                	test   al,0x80
c002b14a:	75 21                	jne    c002b16d <PCI::detect()+0x3d>
c002b14c:	51                   	push   ecx
c002b14d:	51                   	push   ecx
c002b14e:	6a 00                	push   0x0
c002b150:	56                   	push   esi
c002b151:	e8 e2 fb ff ff       	call   c002ad38 <PCI::checkBus(unsigned char)>
c002b156:	83 c4 10             	add    esp,0x10
c002b159:	eb 2a                	jmp    c002b185 <PCI::detect()+0x55>
c002b15b:	52                   	push   edx
c002b15c:	52                   	push   edx
c002b15d:	53                   	push   ebx
c002b15e:	43                   	inc    ebx
c002b15f:	56                   	push   esi
c002b160:	e8 d3 fb ff ff       	call   c002ad38 <PCI::checkBus(unsigned char)>
c002b165:	83 c4 10             	add    esp,0x10
c002b168:	83 fb 08             	cmp    ebx,0x8
c002b16b:	74 18                	je     c002b185 <PCI::detect()+0x55>
c002b16d:	53                   	push   ebx
c002b16e:	6a 00                	push   0x0
c002b170:	6a 00                	push   0x0
c002b172:	56                   	push   esi
c002b173:	e8 7e f6 ff ff       	call   c002a7f6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002b178:	83 c4 10             	add    esp,0x10
c002b17b:	0f b7 c0             	movzx  eax,ax
c002b17e:	3d ff ff 00 00       	cmp    eax,0xffff
c002b183:	74 d6                	je     c002b15b <PCI::detect()+0x2b>
c002b185:	58                   	pop    eax
c002b186:	5b                   	pop    ebx
c002b187:	5e                   	pop    esi
c002b188:	c3                   	ret    
c002b189:	90                   	nop

c002b18a <IDE::close(int, int, void*)>:
c002b18a:	83 c8 ff             	or     eax,0xffffffff
c002b18d:	c3                   	ret    

c002b18e <IDE::IDE()>:
c002b18e:	83 ec 0c             	sub    esp,0xc
c002b191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b195:	83 ec 08             	sub    esp,0x8
c002b198:	68 10 40 03 c0       	push   0xc0034010
c002b19d:	50                   	push   eax
c002b19e:	e8 c1 07 ff ff       	call   c001b964 <HardDiskController::HardDiskController(char const*)>
c002b1a3:	83 c4 10             	add    esp,0x10
c002b1a6:	ba 10 41 03 c0       	mov    edx,0xc0034110
c002b1ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b1af:	89 10                	mov    DWORD PTR [eax],edx
c002b1b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b1b5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002b1bc:	90                   	nop
c002b1bd:	83 c4 0c             	add    esp,0xc
c002b1c0:	c3                   	ret    
c002b1c1:	90                   	nop

c002b1c2 <IDE::prepareInterrupt(unsigned char)>:
c002b1c2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002b1c7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002b1cb:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002b1d3:	c3                   	ret    

c002b1d4 <selectDrive(unsigned char, unsigned char)>:
c002b1d4:	c3                   	ret    
c002b1d5:	90                   	nop

c002b1d6 <IDE::getBase(unsigned char)>:
c002b1d6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002b1db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b1df:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002b1e7:	c3                   	ret    

c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002b1e8:	55                   	push   ebp
c002b1e9:	57                   	push   edi
c002b1ea:	56                   	push   esi
c002b1eb:	53                   	push   ebx
c002b1ec:	83 ec 1c             	sub    esp,0x1c
c002b1ef:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002b1f3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002b1f7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002b1fb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002b1ff:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002b202:	80 f9 03             	cmp    cl,0x3
c002b205:	77 4f                	ja     c002b256 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c002b207:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002b20b:	0f b6 f2             	movzx  esi,dl
c002b20e:	0f b6 db             	movzx  ebx,bl
c002b211:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002b214:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002b219:	80 ca 80             	or     dl,0x80
c002b21c:	52                   	push   edx
c002b21d:	6a 0c                	push   0xc
c002b21f:	56                   	push   esi
c002b220:	57                   	push   edi
c002b221:	e8 c2 ff ff ff       	call   c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b226:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002b22b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002b22f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002b233:	ee                   	out    dx,al
c002b234:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c002b239:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002b23d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002b241:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002b249:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002b24d:	83 c4 2c             	add    esp,0x2c
c002b250:	5b                   	pop    ebx
c002b251:	5e                   	pop    esi
c002b252:	5f                   	pop    edi
c002b253:	5d                   	pop    ebp
c002b254:	eb 92                	jmp    c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b256:	0f b6 cb             	movzx  ecx,bl
c002b259:	83 f9 07             	cmp    ecx,0x7
c002b25c:	77 12                	ja     c002b270 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c002b25e:	0f b6 d2             	movzx  edx,dl
c002b261:	0f b6 db             	movzx  ebx,bl
c002b264:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c002b26c:	01 da                	add    edx,ebx
c002b26e:	eb 2f                	jmp    c002b29f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002b270:	83 f9 0d             	cmp    ecx,0xd
c002b273:	77 13                	ja     c002b288 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c002b275:	0f b6 d2             	movzx  edx,dl
c002b278:	0f b6 db             	movzx  ebx,bl
c002b27b:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002b282:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002b286:	eb 17                	jmp    c002b29f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002b288:	83 f9 15             	cmp    ecx,0x15
c002b28b:	77 13                	ja     c002b2a0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c002b28d:	0f b6 d2             	movzx  edx,dl
c002b290:	0f b6 db             	movzx  ebx,bl
c002b293:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002b29b:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002b29f:	ee                   	out    dx,al
c002b2a0:	83 c4 1c             	add    esp,0x1c
c002b2a3:	5b                   	pop    ebx
c002b2a4:	5e                   	pop    esi
c002b2a5:	5f                   	pop    edi
c002b2a6:	5d                   	pop    ebp
c002b2a7:	c3                   	ret    

c002b2a8 <IDE::read(unsigned char, unsigned char)>:
c002b2a8:	57                   	push   edi
c002b2a9:	56                   	push   esi
c002b2aa:	53                   	push   ebx
c002b2ab:	83 ec 10             	sub    esp,0x10
c002b2ae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002b2b2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002b2b6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002b2ba:	8d 42 f8             	lea    eax,[edx-0x8]
c002b2bd:	3c 03                	cmp    al,0x3
c002b2bf:	77 48                	ja     c002b309 <IDE::read(unsigned char, unsigned char)+0x61>
c002b2c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002b2c5:	0f b6 f1             	movzx  esi,cl
c002b2c8:	8d 7e 2a             	lea    edi,[esi+0x2a]
c002b2cb:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c002b2d0:	0c 80                	or     al,0x80
c002b2d2:	50                   	push   eax
c002b2d3:	6a 0c                	push   0xc
c002b2d5:	56                   	push   esi
c002b2d6:	53                   	push   ebx
c002b2d7:	e8 0c ff ff ff       	call   c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b2dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002b2e0:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c002b2e5:	0f b6 d2             	movzx  edx,dl
c002b2e8:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002b2ec:	ec                   	in     al,dx
c002b2ed:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002b2f1:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c002b2f6:	52                   	push   edx
c002b2f7:	6a 0c                	push   0xc
c002b2f9:	56                   	push   esi
c002b2fa:	53                   	push   ebx
c002b2fb:	e8 e8 fe ff ff       	call   c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b300:	83 c4 20             	add    esp,0x20
c002b303:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002b307:	eb 4c                	jmp    c002b355 <IDE::read(unsigned char, unsigned char)+0xad>
c002b309:	0f b6 f2             	movzx  esi,dl
c002b30c:	83 fe 07             	cmp    esi,0x7
c002b30f:	77 12                	ja     c002b323 <IDE::read(unsigned char, unsigned char)+0x7b>
c002b311:	0f b6 c9             	movzx  ecx,cl
c002b314:	0f b6 d2             	movzx  edx,dl
c002b317:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c002b31f:	01 c2                	add    edx,eax
c002b321:	eb 31                	jmp    c002b354 <IDE::read(unsigned char, unsigned char)+0xac>
c002b323:	83 fe 0d             	cmp    esi,0xd
c002b326:	77 13                	ja     c002b33b <IDE::read(unsigned char, unsigned char)+0x93>
c002b328:	0f b6 c9             	movzx  ecx,cl
c002b32b:	0f b6 d2             	movzx  edx,dl
c002b32e:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c002b335:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002b339:	eb 19                	jmp    c002b354 <IDE::read(unsigned char, unsigned char)+0xac>
c002b33b:	31 c0                	xor    eax,eax
c002b33d:	83 fe 15             	cmp    esi,0x15
c002b340:	77 13                	ja     c002b355 <IDE::read(unsigned char, unsigned char)+0xad>
c002b342:	0f b6 c9             	movzx  ecx,cl
c002b345:	0f b6 d2             	movzx  edx,dl
c002b348:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c002b350:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002b354:	ec                   	in     al,dx
c002b355:	83 c4 10             	add    esp,0x10
c002b358:	5b                   	pop    ebx
c002b359:	5e                   	pop    esi
c002b35a:	5f                   	pop    edi
c002b35b:	c3                   	ret    

c002b35c <IDE::waitInterrupt(unsigned char)>:
c002b35c:	55                   	push   ebp
c002b35d:	57                   	push   edi
c002b35e:	56                   	push   esi
c002b35f:	53                   	push   ebx
c002b360:	31 db                	xor    ebx,ebx
c002b362:	83 ec 0c             	sub    esp,0xc
c002b365:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002b369:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002b36e:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002b376:	89 e8                	mov    eax,ebp
c002b378:	84 c0                	test   al,al
c002b37a:	75 30                	jne    c002b3ac <IDE::waitInterrupt(unsigned char)+0x50>
c002b37c:	50                   	push   eax
c002b37d:	6a 0c                	push   0xc
c002b37f:	56                   	push   esi
c002b380:	57                   	push   edi
c002b381:	e8 22 ff ff ff       	call   c002b2a8 <IDE::read(unsigned char, unsigned char)>
c002b386:	83 c4 10             	add    esp,0x10
c002b389:	a8 01                	test   al,0x1
c002b38b:	75 27                	jne    c002b3b4 <IDE::waitInterrupt(unsigned char)+0x58>
c002b38d:	f6 c3 04             	test   bl,0x4
c002b390:	75 12                	jne    c002b3a4 <IDE::waitInterrupt(unsigned char)+0x48>
c002b392:	83 fb 32             	cmp    ebx,0x32
c002b395:	7e 0d                	jle    c002b3a4 <IDE::waitInterrupt(unsigned char)+0x48>
c002b397:	83 ec 0c             	sub    esp,0xc
c002b39a:	6a 64                	push   0x64
c002b39c:	e8 8f a5 ff ff       	call   c0025930 <milliTenthSleep(unsigned int)>
c002b3a1:	83 c4 10             	add    esp,0x10
c002b3a4:	83 fb 3c             	cmp    ebx,0x3c
c002b3a7:	74 0b                	je     c002b3b4 <IDE::waitInterrupt(unsigned char)+0x58>
c002b3a9:	43                   	inc    ebx
c002b3aa:	eb c2                	jmp    c002b36e <IDE::waitInterrupt(unsigned char)+0x12>
c002b3ac:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002b3b4:	83 c4 0c             	add    esp,0xc
c002b3b7:	89 e8                	mov    eax,ebp
c002b3b9:	5b                   	pop    ebx
c002b3ba:	5e                   	pop    esi
c002b3bb:	5f                   	pop    edi
c002b3bc:	5d                   	pop    ebp
c002b3bd:	c3                   	ret    

c002b3be <ideChannel0IRQHandler(regs*, void*)>:
c002b3be:	83 ec 10             	sub    esp,0x10
c002b3c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002b3c5:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002b3cc:	6a 07                	push   0x7
c002b3ce:	6a 00                	push   0x0
c002b3d0:	50                   	push   eax
c002b3d1:	e8 d2 fe ff ff       	call   c002b2a8 <IDE::read(unsigned char, unsigned char)>
c002b3d6:	83 c4 1c             	add    esp,0x1c
c002b3d9:	c3                   	ret    

c002b3da <ideChannel1IRQHandler(regs*, void*)>:
c002b3da:	83 ec 10             	sub    esp,0x10
c002b3dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002b3e1:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002b3e8:	6a 07                	push   0x7
c002b3ea:	6a 01                	push   0x1
c002b3ec:	50                   	push   eax
c002b3ed:	e8 b6 fe ff ff       	call   c002b2a8 <IDE::read(unsigned char, unsigned char)>
c002b3f2:	83 c4 1c             	add    esp,0x1c
c002b3f5:	c3                   	ret    

c002b3f6 <IDE::enableIRQs(unsigned char, bool)>:
c002b3f6:	57                   	push   edi
c002b3f7:	b8 02 00 00 00       	mov    eax,0x2
c002b3fc:	56                   	push   esi
c002b3fd:	53                   	push   ebx
c002b3fe:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002b403:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002b407:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002b40b:	74 02                	je     c002b40f <IDE::enableIRQs(unsigned char, bool)+0x19>
c002b40d:	31 c0                	xor    eax,eax
c002b40f:	0f b6 db             	movzx  ebx,bl
c002b412:	bf 04 00 00 00       	mov    edi,0x4
c002b417:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c002b41e:	50                   	push   eax
c002b41f:	6a 0c                	push   0xc
c002b421:	53                   	push   ebx
c002b422:	56                   	push   esi
c002b423:	e8 c0 fd ff ff       	call   c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b428:	83 c4 10             	add    esp,0x10
c002b42b:	50                   	push   eax
c002b42c:	6a 0c                	push   0xc
c002b42e:	53                   	push   ebx
c002b42f:	56                   	push   esi
c002b430:	e8 73 fe ff ff       	call   c002b2a8 <IDE::read(unsigned char, unsigned char)>
c002b435:	83 c4 10             	add    esp,0x10
c002b438:	4f                   	dec    edi
c002b439:	75 f0                	jne    c002b42b <IDE::enableIRQs(unsigned char, bool)+0x35>
c002b43b:	5b                   	pop    ebx
c002b43c:	5e                   	pop    esi
c002b43d:	5f                   	pop    edi
c002b43e:	c3                   	ret    
c002b43f:	90                   	nop

c002b440 <IDE::open(int, int, void*)>:
c002b440:	55                   	push   ebp
c002b441:	57                   	push   edi
c002b442:	56                   	push   esi
c002b443:	53                   	push   ebx
c002b444:	83 ec 2c             	sub    esp,0x2c
c002b447:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002b44b:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002b452:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002b45b:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002b464:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002b46b:	0f 85 6b 02 00 00    	jne    c002b6dc <IDE::open(int, int, void*)+0x29c>
c002b471:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002b477:	83 e0 7f             	and    eax,0x7f
c002b47a:	83 f8 05             	cmp    eax,0x5
c002b47d:	74 05                	je     c002b484 <IDE::open(int, int, void*)+0x44>
c002b47f:	83 f8 0f             	cmp    eax,0xf
c002b482:	75 3a                	jne    c002b4be <IDE::open(int, int, void*)+0x7e>
c002b484:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002b48a:	83 ec 0c             	sub    esp,0xc
c002b48d:	83 e0 fc             	and    eax,0xfffffffc
c002b490:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002b497:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002b49d:	83 e0 fc             	and    eax,0xfffffffc
c002b4a0:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002b4a7:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002b4ad:	83 e0 fc             	and    eax,0xfffffffc
c002b4b0:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b4b7:	68 26 25 03 c0       	push   0xc0032526
c002b4bc:	eb 60                	jmp    c002b51e <IDE::open(int, int, void*)+0xde>
c002b4be:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002b4c8:	be 64 00 00 00       	mov    esi,0x64
c002b4cd:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002b4d7:	57                   	push   edi
c002b4d8:	57                   	push   edi
c002b4d9:	68 28 40 03 c0       	push   0xc0034028
c002b4de:	8d 7c 24 22          	lea    edi,[esp+0x22]
c002b4e2:	57                   	push   edi
c002b4e3:	e8 68 51 fd ff       	call   c0000650 <strcpy>
c002b4e8:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c002b4ef:	31 d2                	xor    edx,edx
c002b4f1:	89 3c 24             	mov    DWORD PTR [esp],edi
c002b4f4:	89 c8                	mov    eax,ecx
c002b4f6:	f7 f6                	div    esi
c002b4f8:	be 0a 00 00 00       	mov    esi,0xa
c002b4fd:	31 d2                	xor    edx,edx
c002b4ff:	83 c0 30             	add    eax,0x30
c002b502:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c002b506:	89 c8                	mov    eax,ecx
c002b508:	f7 f6                	div    esi
c002b50a:	89 d1                	mov    ecx,edx
c002b50c:	31 d2                	xor    edx,edx
c002b50e:	f7 f6                	div    esi
c002b510:	83 c1 30             	add    ecx,0x30
c002b513:	88 4c 24 2a          	mov    BYTE PTR [esp+0x2a],cl
c002b517:	83 c2 30             	add    edx,0x30
c002b51a:	88 54 24 29          	mov    BYTE PTR [esp+0x29],dl
c002b51e:	e8 7a 48 ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002b523:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002b52a:	bf f8 0c 00 00       	mov    edi,0xcf8
c002b52f:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002b536:	83 c4 10             	add    esp,0x10
c002b539:	89 fa                	mov    edx,edi
c002b53b:	c1 e1 10             	shl    ecx,0x10
c002b53e:	c1 e0 0b             	shl    eax,0xb
c002b541:	09 c1                	or     ecx,eax
c002b543:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002b54a:	c1 e0 08             	shl    eax,0x8
c002b54d:	09 c1                	or     ecx,eax
c002b54f:	89 c8                	mov    eax,ecx
c002b551:	0d 08 00 00 80       	or     eax,0x80000008
c002b556:	ef                   	out    dx,eax
c002b557:	be fc 0c 00 00       	mov    esi,0xcfc
c002b55c:	89 f2                	mov    edx,esi
c002b55e:	ed                   	in     eax,dx
c002b55f:	c1 e8 10             	shr    eax,0x10
c002b562:	3d ff ff 00 00       	cmp    eax,0xffff
c002b567:	0f 84 3a 01 00 00    	je     c002b6a7 <IDE::open(int, int, void*)+0x267>
c002b56d:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002b573:	89 fa                	mov    edx,edi
c002b575:	89 c8                	mov    eax,ecx
c002b577:	ef                   	out    dx,eax
c002b578:	b0 fe                	mov    al,0xfe
c002b57a:	89 f2                	mov    edx,esi
c002b57c:	ee                   	out    dx,al
c002b57d:	89 c8                	mov    eax,ecx
c002b57f:	89 fa                	mov    edx,edi
c002b581:	ef                   	out    dx,eax
c002b582:	89 f2                	mov    edx,esi
c002b584:	ed                   	in     eax,dx
c002b585:	3c fe                	cmp    al,0xfe
c002b587:	0f 85 dc 00 00 00    	jne    c002b669 <IDE::open(int, int, void*)+0x229>
c002b58d:	83 ec 0c             	sub    esp,0xc
c002b590:	68 71 25 03 c0       	push   0xc0032571
c002b595:	e8 03 48 ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002b59a:	8b 15 bc b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9bc
c002b5a0:	83 c4 10             	add    esp,0x10
c002b5a3:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c002b5aa:	74 48                	je     c002b5f4 <IDE::open(int, int, void*)+0x1b4>
c002b5ac:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002b5b2:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002b5b6:	83 ec 0c             	sub    esp,0xc
c002b5b9:	40                   	inc    eax
c002b5ba:	0f b6 c0             	movzx  eax,al
c002b5bd:	50                   	push   eax
c002b5be:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002b5c5:	50                   	push   eax
c002b5c6:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002b5cd:	50                   	push   eax
c002b5ce:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c002b5d4:	51                   	push   ecx
c002b5d5:	e8 96 32 ff ff       	call   c001e870 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002b5da:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002b5df:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002b5e5:	68 89 35 03 c0       	push   0xc0033589
c002b5ea:	e8 ae 47 ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002b5ef:	83 c4 20             	add    esp,0x20
c002b5f2:	eb 1a                	jmp    c002b60e <IDE::open(int, int, void*)+0x1ce>
c002b5f4:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002b5fe:	83 ec 0c             	sub    esp,0xc
c002b601:	68 cc 27 03 c0       	push   0xc00327cc
c002b606:	e8 92 47 ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002b60b:	83 c4 10             	add    esp,0x10
c002b60e:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002b615:	bd f8 0c 00 00       	mov    ebp,0xcf8
c002b61a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002b621:	89 ea                	mov    edx,ebp
c002b623:	c1 e1 10             	shl    ecx,0x10
c002b626:	c1 e0 08             	shl    eax,0x8
c002b629:	09 c1                	or     ecx,eax
c002b62b:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002b632:	c1 e0 0b             	shl    eax,0xb
c002b635:	09 c1                	or     ecx,eax
c002b637:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002b63d:	89 c8                	mov    eax,ecx
c002b63f:	ef                   	out    dx,eax
c002b640:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c002b646:	be fc 0c 00 00       	mov    esi,0xcfc
c002b64b:	89 f2                	mov    edx,esi
c002b64d:	89 f8                	mov    eax,edi
c002b64f:	ee                   	out    dx,al
c002b650:	89 c8                	mov    eax,ecx
c002b652:	89 ea                	mov    edx,ebp
c002b654:	ef                   	out    dx,eax
c002b655:	89 f2                	mov    edx,esi
c002b657:	ed                   	in     eax,dx
c002b658:	0f b6 c0             	movzx  eax,al
c002b65b:	39 f8                	cmp    eax,edi
c002b65d:	74 58                	je     c002b6b7 <IDE::open(int, int, void*)+0x277>
c002b65f:	83 ec 0c             	sub    esp,0xc
c002b662:	68 2e 40 03 c0       	push   0xc003402e
c002b667:	eb 46                	jmp    c002b6af <IDE::open(int, int, void*)+0x26f>
c002b669:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002b672:	75 29                	jne    c002b69d <IDE::open(int, int, void*)+0x25d>
c002b674:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c002b67b:	3d 8a 00 00 00       	cmp    eax,0x8a
c002b680:	74 05                	je     c002b687 <IDE::open(int, int, void*)+0x247>
c002b682:	83 c0 80             	add    eax,0xffffff80
c002b685:	75 16                	jne    c002b69d <IDE::open(int, int, void*)+0x25d>
c002b687:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b68e:	83 ec 0c             	sub    esp,0xc
c002b691:	68 21 1b 03 c0       	push   0xc0031b21
c002b696:	e8 02 47 ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002b69b:	eb 17                	jmp    c002b6b4 <IDE::open(int, int, void*)+0x274>
c002b69d:	83 ec 0c             	sub    esp,0xc
c002b6a0:	68 36 40 03 c0       	push   0xc0034036
c002b6a5:	eb 08                	jmp    c002b6af <IDE::open(int, int, void*)+0x26f>
c002b6a7:	83 ec 0c             	sub    esp,0xc
c002b6aa:	68 67 40 03 c0       	push   0xc0034067
c002b6af:	e8 4e 50 ff ff       	call   c0020702 <KePanic(char const*)>
c002b6b4:	83 c4 10             	add    esp,0x10
c002b6b7:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c002b6be:	74 56                	je     c002b716 <IDE::open(int, int, void*)+0x2d6>
c002b6c0:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002b6c6:	83 e0 fc             	and    eax,0xfffffffc
c002b6c9:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002b6d0:	83 c0 08             	add    eax,0x8
c002b6d3:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002b6da:	eb 3a                	jmp    c002b716 <IDE::open(int, int, void*)+0x2d6>
c002b6dc:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b6e3:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c002b6e9:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002b6f0:	05 06 02 00 00       	add    eax,0x206
c002b6f5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b6fc:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c002b703:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002b70a:	05 06 02 00 00       	add    eax,0x206
c002b70f:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b716:	83 ec 0c             	sub    esp,0xc
c002b719:	68 e3 26 03 c0       	push   0xc00326e3
c002b71e:	e8 7a 46 ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002b723:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002b729:	83 c4 10             	add    esp,0x10
c002b72c:	89 c2                	mov    edx,eax
c002b72e:	83 e2 0f             	and    edx,0xf
c002b731:	83 fa 08             	cmp    edx,0x8
c002b734:	75 0a                	jne    c002b740 <IDE::open(int, int, void*)+0x300>
c002b736:	83 e8 02             	sub    eax,0x2
c002b739:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b740:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002b746:	89 c2                	mov    edx,eax
c002b748:	83 e2 0f             	and    edx,0xf
c002b74b:	83 fa 08             	cmp    edx,0x8
c002b74e:	75 0a                	jne    c002b75a <IDE::open(int, int, void*)+0x31a>
c002b750:	83 e8 02             	sub    eax,0x2
c002b753:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b75a:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002b761:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002b768:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b76b:	89 d0                	mov    eax,edx
c002b76d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b771:	8d 7a 01             	lea    edi,[edx+0x1]
c002b774:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002b778:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b77c:	83 e1 3f             	and    ecx,0x3f
c002b77f:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b783:	89 f9                	mov    ecx,edi
c002b785:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002b78c:	8d 78 02             	lea    edi,[eax+0x2]
c002b78f:	0f b6 c9             	movzx  ecx,cl
c002b792:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b795:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002b799:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b79d:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b7a1:	83 e2 3f             	and    edx,0x3f
c002b7a4:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b7a8:	89 f9                	mov    ecx,edi
c002b7aa:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002b7b0:	8d 78 03             	lea    edi,[eax+0x3]
c002b7b3:	0f b6 d1             	movzx  edx,cl
c002b7b6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b7b9:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002b7bd:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b7c1:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b7c5:	83 e1 3f             	and    ecx,0x3f
c002b7c8:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b7cc:	89 fa                	mov    edx,edi
c002b7ce:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002b7d4:	8d 78 04             	lea    edi,[eax+0x4]
c002b7d7:	0f b6 ca             	movzx  ecx,dl
c002b7da:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b7dd:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002b7e1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b7e5:	89 fa                	mov    edx,edi
c002b7e7:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002b7ed:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b7f1:	83 e2 3f             	and    edx,0x3f
c002b7f4:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b7f8:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002b7ff:	66 85 f6             	test   si,si
c002b802:	74 24                	je     c002b828 <IDE::open(int, int, void*)+0x3e8>
c002b804:	89 f9                	mov    ecx,edi
c002b806:	83 c0 05             	add    eax,0x5
c002b809:	0f b6 d1             	movzx  edx,cl
c002b80c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b80f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b813:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002b817:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002b81d:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c002b821:	83 e0 3f             	and    eax,0x3f
c002b824:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c002b828:	83 ec 0c             	sub    esp,0xc
c002b82b:	68 91 40 03 c0       	push   0xc0034091
c002b830:	e8 68 45 ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002b835:	58                   	pop    eax
c002b836:	5a                   	pop    edx
c002b837:	6a 00                	push   0x0
c002b839:	53                   	push   ebx
c002b83a:	e8 83 f9 ff ff       	call   c002b1c2 <IDE::prepareInterrupt(unsigned char)>
c002b83f:	59                   	pop    ecx
c002b840:	5e                   	pop    esi
c002b841:	6a 01                	push   0x1
c002b843:	53                   	push   ebx
c002b844:	e8 79 f9 ff ff       	call   c002b1c2 <IDE::prepareInterrupt(unsigned char)>
c002b849:	c7 04 24 a9 18 03 c0 	mov    DWORD PTR [esp],0xc00318a9
c002b850:	e8 48 45 ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002b855:	83 c4 0c             	add    esp,0xc
c002b858:	6a 00                	push   0x0
c002b85a:	6a 00                	push   0x0
c002b85c:	53                   	push   ebx
c002b85d:	e8 94 fb ff ff       	call   c002b3f6 <IDE::enableIRQs(unsigned char, bool)>
c002b862:	83 c4 0c             	add    esp,0xc
c002b865:	6a 00                	push   0x0
c002b867:	6a 01                	push   0x1
c002b869:	53                   	push   ebx
c002b86a:	e8 87 fb ff ff       	call   c002b3f6 <IDE::enableIRQs(unsigned char, bool)>
c002b86f:	c7 04 24 93 40 03 c0 	mov    DWORD PTR [esp],0xc0034093
c002b876:	e8 22 45 ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002b87b:	83 c4 10             	add    esp,0x10
c002b87e:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002b885:	74 3c                	je     c002b8c3 <IDE::open(int, int, void*)+0x483>
c002b887:	83 ec 0c             	sub    esp,0xc
c002b88a:	53                   	push   ebx
c002b88b:	6a 01                	push   0x1
c002b88d:	68 be b3 02 c0       	push   0xc002b3be
c002b892:	6a 0e                	push   0xe
c002b894:	53                   	push   ebx
c002b895:	e8 1c fd fe ff       	call   c001b5b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b89a:	83 c4 14             	add    esp,0x14
c002b89d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002b8a3:	53                   	push   ebx
c002b8a4:	6a 01                	push   0x1
c002b8a6:	68 da b3 02 c0       	push   0xc002b3da
c002b8ab:	6a 0f                	push   0xf
c002b8ad:	53                   	push   ebx
c002b8ae:	e8 03 fd fe ff       	call   c001b5b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b8b3:	83 c4 14             	add    esp,0x14
c002b8b6:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002b8bc:	68 e4 0b 03 c0       	push   0xc0030be4
c002b8c1:	eb 40                	jmp    c002b903 <IDE::open(int, int, void*)+0x4c3>
c002b8c3:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002b8cd:	83 ec 0c             	sub    esp,0xc
c002b8d0:	53                   	push   ebx
c002b8d1:	6a 00                	push   0x0
c002b8d3:	68 be b3 02 c0       	push   0xc002b3be
c002b8d8:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002b8de:	53                   	push   ebx
c002b8df:	e8 d2 fc fe ff       	call   c001b5b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b8e4:	83 c4 14             	add    esp,0x14
c002b8e7:	53                   	push   ebx
c002b8e8:	6a 00                	push   0x0
c002b8ea:	68 da b3 02 c0       	push   0xc002b3da
c002b8ef:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002b8f5:	53                   	push   ebx
c002b8f6:	e8 bb fc fe ff       	call   c001b5b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b8fb:	83 c4 14             	add    esp,0x14
c002b8fe:	68 10 1b 03 c0       	push   0xc0031b10
c002b903:	e8 95 44 ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002b908:	83 c4 10             	add    esp,0x10
c002b90b:	83 ec 0c             	sub    esp,0xc
c002b90e:	68 95 40 03 c0       	push   0xc0034095
c002b913:	e8 85 44 ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002b918:	8b 03                	mov    eax,DWORD PTR [ebx]
c002b91a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002b91d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002b920:	c7 04 24 42 1f 03 c0 	mov    DWORD PTR [esp],0xc0031f42
c002b927:	e8 71 44 ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002b92c:	83 c4 0c             	add    esp,0xc
c002b92f:	6a 07                	push   0x7
c002b931:	6a 00                	push   0x0
c002b933:	53                   	push   ebx
c002b934:	e8 6f f9 ff ff       	call   c002b2a8 <IDE::read(unsigned char, unsigned char)>
c002b939:	83 c4 0c             	add    esp,0xc
c002b93c:	6a 07                	push   0x7
c002b93e:	6a 01                	push   0x1
c002b940:	53                   	push   ebx
c002b941:	e8 62 f9 ff ff       	call   c002b2a8 <IDE::read(unsigned char, unsigned char)>
c002b946:	c7 04 24 94 0b 03 c0 	mov    DWORD PTR [esp],0xc0030b94
c002b94d:	e8 4b 44 ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002b952:	83 c4 0c             	add    esp,0xc
c002b955:	6a 01                	push   0x1
c002b957:	6a 00                	push   0x0
c002b959:	53                   	push   ebx
c002b95a:	e8 97 fa ff ff       	call   c002b3f6 <IDE::enableIRQs(unsigned char, bool)>
c002b95f:	83 c4 0c             	add    esp,0xc
c002b962:	6a 01                	push   0x1
c002b964:	6a 01                	push   0x1
c002b966:	53                   	push   ebx
c002b967:	e8 8a fa ff ff       	call   c002b3f6 <IDE::enableIRQs(unsigned char, bool)>
c002b96c:	c7 04 24 98 40 03 c0 	mov    DWORD PTR [esp],0xc0034098
c002b973:	e8 25 44 ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002b978:	83 c4 3c             	add    esp,0x3c
c002b97b:	31 c0                	xor    eax,eax
c002b97d:	5b                   	pop    ebx
c002b97e:	5e                   	pop    esi
c002b97f:	5f                   	pop    edi
c002b980:	5d                   	pop    ebp
c002b981:	c3                   	ret    

c002b982 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002b982:	55                   	push   ebp
c002b983:	57                   	push   edi
c002b984:	56                   	push   esi
c002b985:	53                   	push   ebx
c002b986:	83 ec 1c             	sub    esp,0x1c
c002b989:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002b98d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002b991:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002b995:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002b999:	8d 42 f8             	lea    eax,[edx-0x8]
c002b99c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002b9a0:	3c 03                	cmp    al,0x3
c002b9a2:	77 5a                	ja     c002b9fe <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c002b9a4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002b9a8:	0f b6 db             	movzx  ebx,bl
c002b9ab:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002b9af:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002b9b2:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b9b7:	0c 80                	or     al,0x80
c002b9b9:	50                   	push   eax
c002b9ba:	6a 0c                	push   0xc
c002b9bc:	53                   	push   ebx
c002b9bd:	56                   	push   esi
c002b9be:	e8 25 f8 ff ff       	call   c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b9c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002b9c7:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c002b9cc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002b9d0:	0f b6 d2             	movzx  edx,dl
c002b9d3:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002b9d7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b9d9:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b9de:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002b9e2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002b9e6:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002b9ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002b9f2:	83 c4 2c             	add    esp,0x2c
c002b9f5:	5b                   	pop    ebx
c002b9f6:	5e                   	pop    esi
c002b9f7:	5f                   	pop    edi
c002b9f8:	5d                   	pop    ebp
c002b9f9:	e9 ea f7 ff ff       	jmp    c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b9fe:	0f b6 c2             	movzx  eax,dl
c002ba01:	83 f8 07             	cmp    eax,0x7
c002ba04:	77 12                	ja     c002ba18 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c002ba06:	0f b6 db             	movzx  ebx,bl
c002ba09:	0f b6 c2             	movzx  eax,dl
c002ba0c:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c002ba14:	01 c2                	add    edx,eax
c002ba16:	eb 2f                	jmp    c002ba47 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002ba18:	83 f8 0d             	cmp    eax,0xd
c002ba1b:	77 13                	ja     c002ba30 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c002ba1d:	0f b6 db             	movzx  ebx,bl
c002ba20:	0f b6 d2             	movzx  edx,dl
c002ba23:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c002ba2a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002ba2e:	eb 17                	jmp    c002ba47 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002ba30:	83 f8 15             	cmp    eax,0x15
c002ba33:	77 14                	ja     c002ba49 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c002ba35:	0f b6 db             	movzx  ebx,bl
c002ba38:	0f b6 d2             	movzx  edx,dl
c002ba3b:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c002ba43:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002ba47:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002ba49:	83 c4 1c             	add    esp,0x1c
c002ba4c:	5b                   	pop    ebx
c002ba4d:	5e                   	pop    esi
c002ba4e:	5f                   	pop    edi
c002ba4f:	5d                   	pop    ebp
c002ba50:	c3                   	ret    
c002ba51:	90                   	nop

c002ba52 <IDE::detect()>:
c002ba52:	55                   	push   ebp
c002ba53:	57                   	push   edi
c002ba54:	56                   	push   esi
c002ba55:	53                   	push   ebx
c002ba56:	81 ec 28 02 00 00    	sub    esp,0x228
c002ba5c:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c002ba63:	68 9a 40 03 c0       	push   0xc003409a
c002ba68:	e8 30 43 ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002ba6d:	83 c4 10             	add    esp,0x10
c002ba70:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002ba77:	0f 85 03 04 00 00    	jne    c002be80 <IDE::detect()+0x42e>
c002ba7d:	83 ec 0c             	sub    esp,0xc
c002ba80:	31 f6                	xor    esi,esi
c002ba82:	68 9d 40 03 c0       	push   0xc003409d
c002ba87:	31 ff                	xor    edi,edi
c002ba89:	e8 0f 43 ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002ba8e:	83 c4 10             	add    esp,0x10
c002ba91:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002ba98:	83 ec 0c             	sub    esp,0xc
c002ba9b:	68 a0 40 03 c0       	push   0xc00340a0
c002baa0:	e8 f8 42 ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002baa5:	83 c4 10             	add    esp,0x10
c002baa8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002bab0:	83 ec 0c             	sub    esp,0xc
c002bab3:	31 ed                	xor    ebp,ebp
c002bab5:	68 a3 40 03 c0       	push   0xc00340a3
c002baba:	e8 de 42 ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002babf:	89 f8                	mov    eax,edi
c002bac1:	c1 e0 06             	shl    eax,0x6
c002bac4:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002bacc:	c7 04 24 a6 40 03 c0 	mov    DWORD PTR [esp],0xc00340a6
c002bad3:	e8 c5 42 ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002bad8:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c002badc:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002bae0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002bae4:	c1 e0 04             	shl    eax,0x4
c002bae7:	83 c8 a0             	or     eax,0xffffffa0
c002baea:	0f b6 c0             	movzx  eax,al
c002baed:	50                   	push   eax
c002baee:	6a 06                	push   0x6
c002baf0:	56                   	push   esi
c002baf1:	53                   	push   ebx
c002baf2:	e8 f1 f6 ff ff       	call   c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002baf7:	83 c4 1c             	add    esp,0x1c
c002bafa:	6a 0c                	push   0xc
c002bafc:	56                   	push   esi
c002bafd:	53                   	push   ebx
c002bafe:	e8 a5 f7 ff ff       	call   c002b2a8 <IDE::read(unsigned char, unsigned char)>
c002bb03:	83 c4 0c             	add    esp,0xc
c002bb06:	6a 0c                	push   0xc
c002bb08:	56                   	push   esi
c002bb09:	53                   	push   ebx
c002bb0a:	e8 99 f7 ff ff       	call   c002b2a8 <IDE::read(unsigned char, unsigned char)>
c002bb0f:	83 c4 0c             	add    esp,0xc
c002bb12:	6a 0c                	push   0xc
c002bb14:	56                   	push   esi
c002bb15:	53                   	push   ebx
c002bb16:	e8 8d f7 ff ff       	call   c002b2a8 <IDE::read(unsigned char, unsigned char)>
c002bb1b:	83 c4 0c             	add    esp,0xc
c002bb1e:	6a 0c                	push   0xc
c002bb20:	56                   	push   esi
c002bb21:	53                   	push   ebx
c002bb22:	e8 81 f7 ff ff       	call   c002b2a8 <IDE::read(unsigned char, unsigned char)>
c002bb27:	c7 04 24 a9 40 03 c0 	mov    DWORD PTR [esp],0xc00340a9
c002bb2e:	e8 6a 42 ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002bb33:	68 ec 00 00 00       	push   0xec
c002bb38:	6a 07                	push   0x7
c002bb3a:	56                   	push   esi
c002bb3b:	53                   	push   ebx
c002bb3c:	e8 a7 f6 ff ff       	call   c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bb41:	83 c4 1c             	add    esp,0x1c
c002bb44:	6a 0c                	push   0xc
c002bb46:	56                   	push   esi
c002bb47:	53                   	push   ebx
c002bb48:	e8 5b f7 ff ff       	call   c002b2a8 <IDE::read(unsigned char, unsigned char)>
c002bb4d:	83 c4 0c             	add    esp,0xc
c002bb50:	6a 0c                	push   0xc
c002bb52:	56                   	push   esi
c002bb53:	53                   	push   ebx
c002bb54:	e8 4f f7 ff ff       	call   c002b2a8 <IDE::read(unsigned char, unsigned char)>
c002bb59:	83 c4 0c             	add    esp,0xc
c002bb5c:	6a 0c                	push   0xc
c002bb5e:	56                   	push   esi
c002bb5f:	53                   	push   ebx
c002bb60:	e8 43 f7 ff ff       	call   c002b2a8 <IDE::read(unsigned char, unsigned char)>
c002bb65:	83 c4 0c             	add    esp,0xc
c002bb68:	6a 0c                	push   0xc
c002bb6a:	56                   	push   esi
c002bb6b:	53                   	push   ebx
c002bb6c:	e8 37 f7 ff ff       	call   c002b2a8 <IDE::read(unsigned char, unsigned char)>
c002bb71:	c7 04 24 ac 40 03 c0 	mov    DWORD PTR [esp],0xc00340ac
c002bb78:	e8 20 42 ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002bb7d:	83 c4 0c             	add    esp,0xc
c002bb80:	6a 0c                	push   0xc
c002bb82:	56                   	push   esi
c002bb83:	53                   	push   ebx
c002bb84:	e8 1f f7 ff ff       	call   c002b2a8 <IDE::read(unsigned char, unsigned char)>
c002bb89:	83 c4 10             	add    esp,0x10
c002bb8c:	84 c0                	test   al,al
c002bb8e:	75 1f                	jne    c002bbaf <IDE::detect()+0x15d>
c002bb90:	83 ec 0c             	sub    esp,0xc
c002bb93:	68 af 40 03 c0       	push   0xc00340af
c002bb98:	e8 00 42 ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002bb9d:	e9 ba 02 00 00       	jmp    c002be5c <IDE::detect()+0x40a>
c002bba2:	a8 80                	test   al,0x80
c002bba4:	74 21                	je     c002bbc7 <IDE::detect()+0x175>
c002bba6:	45                   	inc    ebp
c002bba7:	81 fd 17 01 00 00    	cmp    ebp,0x117
c002bbad:	7f 1e                	jg     c002bbcd <IDE::detect()+0x17b>
c002bbaf:	50                   	push   eax
c002bbb0:	6a 0c                	push   0xc
c002bbb2:	56                   	push   esi
c002bbb3:	53                   	push   ebx
c002bbb4:	e8 ef f6 ff ff       	call   c002b2a8 <IDE::read(unsigned char, unsigned char)>
c002bbb9:	83 c4 10             	add    esp,0x10
c002bbbc:	a8 01                	test   al,0x1
c002bbbe:	74 e2                	je     c002bba2 <IDE::detect()+0x150>
c002bbc0:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c002bbc5:	eb 22                	jmp    c002bbe9 <IDE::detect()+0x197>
c002bbc7:	a8 08                	test   al,0x8
c002bbc9:	74 db                	je     c002bba6 <IDE::detect()+0x154>
c002bbcb:	eb 17                	jmp    c002bbe4 <IDE::detect()+0x192>
c002bbcd:	83 ec 0c             	sub    esp,0xc
c002bbd0:	6a 32                	push   0x32
c002bbd2:	e8 59 9d ff ff       	call   c0025930 <milliTenthSleep(unsigned int)>
c002bbd7:	83 c4 10             	add    esp,0x10
c002bbda:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c002bbe0:	75 cd                	jne    c002bbaf <IDE::detect()+0x15d>
c002bbe2:	eb dc                	jmp    c002bbc0 <IDE::detect()+0x16e>
c002bbe4:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c002bbe9:	83 ec 0c             	sub    esp,0xc
c002bbec:	68 b2 40 03 c0       	push   0xc00340b2
c002bbf1:	e8 a7 41 ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002bbf6:	83 c4 10             	add    esp,0x10
c002bbf9:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c002bbfe:	74 57                	je     c002bc57 <IDE::detect()+0x205>
c002bc00:	50                   	push   eax
c002bc01:	6a 04                	push   0x4
c002bc03:	56                   	push   esi
c002bc04:	53                   	push   ebx
c002bc05:	e8 9e f6 ff ff       	call   c002b2a8 <IDE::read(unsigned char, unsigned char)>
c002bc0a:	83 c4 0c             	add    esp,0xc
c002bc0d:	6a 05                	push   0x5
c002bc0f:	56                   	push   esi
c002bc10:	53                   	push   ebx
c002bc11:	89 c5                	mov    ebp,eax
c002bc13:	e8 90 f6 ff ff       	call   c002b2a8 <IDE::read(unsigned char, unsigned char)>
c002bc18:	89 e9                	mov    ecx,ebp
c002bc1a:	83 c4 10             	add    esp,0x10
c002bc1d:	0f b6 e9             	movzx  ebp,cl
c002bc20:	83 fd 14             	cmp    ebp,0x14
c002bc23:	75 04                	jne    c002bc29 <IDE::detect()+0x1d7>
c002bc25:	3c eb                	cmp    al,0xeb
c002bc27:	74 11                	je     c002bc3a <IDE::detect()+0x1e8>
c002bc29:	83 fd 69             	cmp    ebp,0x69
c002bc2c:	0f 85 2d 02 00 00    	jne    c002be5f <IDE::detect()+0x40d>
c002bc32:	3c 96                	cmp    al,0x96
c002bc34:	0f 85 25 02 00 00    	jne    c002be5f <IDE::detect()+0x40d>
c002bc3a:	68 a1 00 00 00       	push   0xa1
c002bc3f:	6a 07                	push   0x7
c002bc41:	56                   	push   esi
c002bc42:	53                   	push   ebx
c002bc43:	e8 a0 f5 ff ff       	call   c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bc48:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c002bc4f:	e8 dc 9c ff ff       	call   c0025930 <milliTenthSleep(unsigned int)>
c002bc54:	83 c4 10             	add    esp,0x10
c002bc57:	83 ec 0c             	sub    esp,0xc
c002bc5a:	89 fd                	mov    ebp,edi
c002bc5c:	68 b5 40 03 c0       	push   0xc00340b5
c002bc61:	e8 37 41 ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002bc66:	8d 54 24 20          	lea    edx,[esp+0x20]
c002bc6a:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c002bc71:	c1 e5 06             	shl    ebp,0x6
c002bc74:	52                   	push   edx
c002bc75:	01 dd                	add    ebp,ebx
c002bc77:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c002bc7b:	6a 00                	push   0x0
c002bc7d:	56                   	push   esi
c002bc7e:	53                   	push   ebx
c002bc7f:	e8 fe fc ff ff       	call   c002b982 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002bc84:	83 c4 14             	add    esp,0x14
c002bc87:	68 b9 40 03 c0       	push   0xc00340b9
c002bc8c:	e8 0c 41 ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002bc91:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c002bc96:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c002bc9d:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c002bca4:	89 f0                	mov    eax,esi
c002bca6:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c002bcac:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002bcb0:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c002bcb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002bcba:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c002bcc1:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c002bcc9:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c002bcd0:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c002bcd8:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c002bcde:	c7 04 24 bd 40 03 c0 	mov    DWORD PTR [esp],0xc00340bd
c002bce5:	e8 b3 40 ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002bcea:	83 c4 10             	add    esp,0x10
c002bced:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c002bcf4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002bcf8:	74 09                	je     c002bd03 <IDE::detect()+0x2b1>
c002bcfa:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c002bd01:	eb 07                	jmp    c002bd0a <IDE::detect()+0x2b8>
c002bd03:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c002bd0a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002bd0e:	89 f8                	mov    eax,edi
c002bd10:	83 ec 0c             	sub    esp,0xc
c002bd13:	c1 e0 06             	shl    eax,0x6
c002bd16:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c002bd19:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c002bd1f:	68 c1 40 03 c0       	push   0xc00340c1
c002bd24:	e8 74 40 ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002bd29:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002bd2d:	89 e8                	mov    eax,ebp
c002bd2f:	83 c4 10             	add    esp,0x10
c002bd32:	8d 6a 28             	lea    ebp,[edx+0x28]
c002bd35:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c002bd38:	83 c2 02             	add    edx,0x2
c002bd3b:	83 c0 02             	add    eax,0x2
c002bd3e:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c002bd44:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c002bd47:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c002bd4d:	39 d5                	cmp    ebp,edx
c002bd4f:	75 e4                	jne    c002bd35 <IDE::detect()+0x2e3>
c002bd51:	89 fd                	mov    ebp,edi
c002bd53:	83 ec 0c             	sub    esp,0xc
c002bd56:	c1 e5 06             	shl    ebp,0x6
c002bd59:	01 dd                	add    ebp,ebx
c002bd5b:	c6 85 a8 01 00 00 00 	mov    BYTE PTR [ebp+0x1a8],0x0
c002bd62:	0f b7 85 74 01 00 00 	movzx  eax,WORD PTR [ebp+0x174]
c002bd69:	c1 e8 09             	shr    eax,0x9
c002bd6c:	83 e0 01             	and    eax,0x1
c002bd6f:	88 85 a9 01 00 00    	mov    BYTE PTR [ebp+0x1a9],al
c002bd75:	68 c5 40 03 c0       	push   0xc00340c5
c002bd7a:	e8 1e 40 ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002bd7f:	83 c4 10             	add    esp,0x10
c002bd82:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c002bd87:	75 66                	jne    c002bdef <IDE::detect()+0x39d>
c002bd89:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c002bd90:	0f 84 b8 00 00 00    	je     c002be4e <IDE::detect()+0x3fc>
c002bd96:	83 ec 0c             	sub    esp,0xc
c002bd99:	68 c9 40 03 c0       	push   0xc00340c9
c002bd9e:	e8 fa 3f ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002bda3:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002bdaa:	e8 d9 a8 fe ff       	call   c0016688 <malloc>
c002bdaf:	89 04 24             	mov    DWORD PTR [esp],eax
c002bdb2:	89 c5                	mov    ebp,eax
c002bdb4:	e8 47 05 00 00       	call   c002c300 <ATA::ATA()>
c002bdb9:	c7 04 24 cd 40 03 c0 	mov    DWORD PTR [esp],0xc00340cd
c002bdc0:	e8 d8 3f ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002bdc5:	59                   	pop    ecx
c002bdc6:	58                   	pop    eax
c002bdc7:	55                   	push   ebp
c002bdc8:	53                   	push   ebx
c002bdc9:	e8 3c f8 fe ff       	call   c001b60a <Device::addChild(Device*)>
c002bdce:	c7 04 24 d2 40 03 c0 	mov    DWORD PTR [esp],0xc00340d2
c002bdd5:	e8 c3 3f ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002bdda:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002bddd:	53                   	push   ebx
c002bdde:	57                   	push   edi
c002bddf:	6a 00                	push   0x0
c002bde1:	55                   	push   ebp
c002bde2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002bde5:	83 c4 14             	add    esp,0x14
c002bde8:	68 d7 40 03 c0       	push   0xc00340d7
c002bded:	eb 57                	jmp    c002be46 <IDE::detect()+0x3f4>
c002bdef:	83 ec 0c             	sub    esp,0xc
c002bdf2:	68 dc 40 03 c0       	push   0xc00340dc
c002bdf7:	e8 a1 3f ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002bdfc:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c002be03:	e8 80 a8 fe ff       	call   c0016688 <malloc>
c002be08:	89 04 24             	mov    DWORD PTR [esp],eax
c002be0b:	89 c5                	mov    ebp,eax
c002be0d:	e8 a8 0e 00 00       	call   c002ccba <ATAPI::ATAPI()>
c002be12:	c7 04 24 e2 40 03 c0 	mov    DWORD PTR [esp],0xc00340e2
c002be19:	e8 7f 3f ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002be1e:	58                   	pop    eax
c002be1f:	5a                   	pop    edx
c002be20:	55                   	push   ebp
c002be21:	53                   	push   ebx
c002be22:	e8 e3 f7 fe ff       	call   c001b60a <Device::addChild(Device*)>
c002be27:	c7 04 24 e9 40 03 c0 	mov    DWORD PTR [esp],0xc00340e9
c002be2e:	e8 6a 3f ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002be33:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002be36:	53                   	push   ebx
c002be37:	57                   	push   edi
c002be38:	6a 00                	push   0x0
c002be3a:	55                   	push   ebp
c002be3b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002be3e:	83 c4 14             	add    esp,0x14
c002be41:	68 f0 40 03 c0       	push   0xc00340f0
c002be46:	e8 52 3f ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002be4b:	83 c4 10             	add    esp,0x10
c002be4e:	83 ec 0c             	sub    esp,0xc
c002be51:	47                   	inc    edi
c002be52:	68 f7 40 03 c0       	push   0xc00340f7
c002be57:	e8 41 3f ff ff       	call   c001fd9d <KeSetBootMessage(char const*)>
c002be5c:	83 c4 10             	add    esp,0x10
c002be5f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c002be64:	74 0d                	je     c002be73 <IDE::detect()+0x421>
c002be66:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c002be6e:	e9 3d fc ff ff       	jmp    c002bab0 <IDE::detect()+0x5e>
c002be73:	4e                   	dec    esi
c002be74:	74 0a                	je     c002be80 <IDE::detect()+0x42e>
c002be76:	be 01 00 00 00       	mov    esi,0x1
c002be7b:	e9 18 fc ff ff       	jmp    c002ba98 <IDE::detect()+0x46>
c002be80:	81 c4 1c 02 00 00    	add    esp,0x21c
c002be86:	5b                   	pop    ebx
c002be87:	5e                   	pop    esi
c002be88:	5f                   	pop    edi
c002be89:	5d                   	pop    ebp
c002be8a:	c3                   	ret    
c002be8b:	90                   	nop

c002be8c <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002be8c:	55                   	push   ebp
c002be8d:	57                   	push   edi
c002be8e:	56                   	push   esi
c002be8f:	53                   	push   ebx
c002be90:	83 ec 1c             	sub    esp,0x1c
c002be93:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002be97:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002be9b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002be9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002bea3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002bea7:	88 c3                	mov    bl,al
c002bea9:	25 ff 00 00 00       	and    eax,0xff
c002beae:	0f 84 88 00 00 00    	je     c002bf3c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002beb4:	83 ec 0c             	sub    esp,0xc
c002beb7:	89 c7                	mov    edi,eax
c002beb9:	68 fb 40 03 c0       	push   0xc00340fb
c002bebe:	e8 fb d5 fe ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c002bec3:	83 c4 10             	add    esp,0x10
c002bec6:	83 ff 01             	cmp    edi,0x1
c002bec9:	74 6b                	je     c002bf36 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c002becb:	83 ff 02             	cmp    edi,0x2
c002bece:	75 58                	jne    c002bf28 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c002bed0:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c002bed5:	50                   	push   eax
c002bed6:	6a 01                	push   0x1
c002bed8:	01 ff                	add    edi,edi
c002beda:	09 fe                	or     esi,edi
c002bedc:	89 f0                	mov    eax,esi
c002bede:	0f b6 f0             	movzx  esi,al
c002bee1:	c1 e6 06             	shl    esi,0x6
c002bee4:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c002beec:	50                   	push   eax
c002beed:	55                   	push   ebp
c002beee:	e8 b5 f3 ff ff       	call   c002b2a8 <IDE::read(unsigned char, unsigned char)>
c002bef3:	83 c4 10             	add    esp,0x10
c002bef6:	a8 01                	test   al,0x1
c002bef8:	74 02                	je     c002befc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c002befa:	b3 07                	mov    bl,0x7
c002befc:	a8 02                	test   al,0x2
c002befe:	74 02                	je     c002bf02 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c002bf00:	b3 03                	mov    bl,0x3
c002bf02:	a8 04                	test   al,0x4
c002bf04:	74 02                	je     c002bf08 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c002bf06:	b3 14                	mov    bl,0x14
c002bf08:	a8 08                	test   al,0x8
c002bf0a:	74 02                	je     c002bf0e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c002bf0c:	b3 03                	mov    bl,0x3
c002bf0e:	a8 10                	test   al,0x10
c002bf10:	74 02                	je     c002bf14 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c002bf12:	b3 15                	mov    bl,0x15
c002bf14:	a8 20                	test   al,0x20
c002bf16:	74 02                	je     c002bf1a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c002bf18:	b3 03                	mov    bl,0x3
c002bf1a:	a8 40                	test   al,0x40
c002bf1c:	74 02                	je     c002bf20 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c002bf1e:	b3 16                	mov    bl,0x16
c002bf20:	a8 80                	test   al,0x80
c002bf22:	74 18                	je     c002bf3c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002bf24:	b3 0d                	mov    bl,0xd
c002bf26:	eb 14                	jmp    c002bf3c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002bf28:	83 ff 03             	cmp    edi,0x3
c002bf2b:	74 0d                	je     c002bf3a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c002bf2d:	83 ff 04             	cmp    edi,0x4
c002bf30:	75 0a                	jne    c002bf3c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002bf32:	b3 08                	mov    bl,0x8
c002bf34:	eb 06                	jmp    c002bf3c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002bf36:	b3 13                	mov    bl,0x13
c002bf38:	eb 02                	jmp    c002bf3c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002bf3a:	b3 17                	mov    bl,0x17
c002bf3c:	83 c4 1c             	add    esp,0x1c
c002bf3f:	88 d8                	mov    al,bl
c002bf41:	5b                   	pop    ebx
c002bf42:	5e                   	pop    esi
c002bf43:	5f                   	pop    edi
c002bf44:	5d                   	pop    ebp
c002bf45:	c3                   	ret    

c002bf46 <IDE::polling(unsigned char, unsigned int)>:
c002bf46:	57                   	push   edi
c002bf47:	56                   	push   esi
c002bf48:	53                   	push   ebx
c002bf49:	bb 04 00 00 00       	mov    ebx,0x4
c002bf4e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002bf52:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002bf57:	52                   	push   edx
c002bf58:	6a 0c                	push   0xc
c002bf5a:	56                   	push   esi
c002bf5b:	57                   	push   edi
c002bf5c:	e8 47 f3 ff ff       	call   c002b2a8 <IDE::read(unsigned char, unsigned char)>
c002bf61:	83 c4 10             	add    esp,0x10
c002bf64:	4b                   	dec    ebx
c002bf65:	75 f0                	jne    c002bf57 <IDE::polling(unsigned char, unsigned int)+0x11>
c002bf67:	bb a0 86 01 00       	mov    ebx,0x186a0
c002bf6c:	50                   	push   eax
c002bf6d:	6a 0c                	push   0xc
c002bf6f:	56                   	push   esi
c002bf70:	57                   	push   edi
c002bf71:	e8 32 f3 ff ff       	call   c002b2a8 <IDE::read(unsigned char, unsigned char)>
c002bf76:	83 c4 10             	add    esp,0x10
c002bf79:	a8 01                	test   al,0x1
c002bf7b:	75 17                	jne    c002bf94 <IDE::polling(unsigned char, unsigned int)+0x4e>
c002bf7d:	a8 20                	test   al,0x20
c002bf7f:	75 0f                	jne    c002bf90 <IDE::polling(unsigned char, unsigned int)+0x4a>
c002bf81:	4b                   	dec    ebx
c002bf82:	74 10                	je     c002bf94 <IDE::polling(unsigned char, unsigned int)+0x4e>
c002bf84:	a8 80                	test   al,0x80
c002bf86:	75 e4                	jne    c002bf6c <IDE::polling(unsigned char, unsigned int)+0x26>
c002bf88:	a8 08                	test   al,0x8
c002bf8a:	74 e0                	je     c002bf6c <IDE::polling(unsigned char, unsigned int)+0x26>
c002bf8c:	31 c0                	xor    eax,eax
c002bf8e:	eb 06                	jmp    c002bf96 <IDE::polling(unsigned char, unsigned int)+0x50>
c002bf90:	b0 01                	mov    al,0x1
c002bf92:	eb 02                	jmp    c002bf96 <IDE::polling(unsigned char, unsigned int)+0x50>
c002bf94:	b0 02                	mov    al,0x2
c002bf96:	5b                   	pop    ebx
c002bf97:	5e                   	pop    esi
c002bf98:	5f                   	pop    edi
c002bf99:	c3                   	ret    

c002bf9a <SATABus::close(int, int, void*)>:
c002bf9a:	31 c0                	xor    eax,eax
c002bf9c:	c3                   	ret    
c002bf9d:	90                   	nop

c002bf9e <SATABus::detect()>:
c002bf9e:	c3                   	ret    
c002bf9f:	90                   	nop

c002bfa0 <SATABus::SATABus()>:
c002bfa0:	83 ec 0c             	sub    esp,0xc
c002bfa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bfa7:	83 ec 08             	sub    esp,0x8
c002bfaa:	68 34 41 03 c0       	push   0xc0034134
c002bfaf:	50                   	push   eax
c002bfb0:	e8 af f9 fe ff       	call   c001b964 <HardDiskController::HardDiskController(char const*)>
c002bfb5:	83 c4 10             	add    esp,0x10
c002bfb8:	ba 60 41 03 c0       	mov    edx,0xc0034160
c002bfbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bfc1:	89 10                	mov    DWORD PTR [eax],edx
c002bfc3:	83 ec 0c             	sub    esp,0xc
c002bfc6:	6a 50                	push   0x50
c002bfc8:	e8 99 aa fe ff       	call   c0016a66 <Phys::allocateContiguousPages(int)>
c002bfcd:	83 c4 10             	add    esp,0x10
c002bfd0:	89 c2                	mov    edx,eax
c002bfd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bfd6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002bfdc:	83 ec 0c             	sub    esp,0xc
c002bfdf:	6a 50                	push   0x50
c002bfe1:	e8 c3 c1 fe ff       	call   c00181a9 <Virt::allocateKernelVirtualPages(int)>
c002bfe6:	83 c4 10             	add    esp,0x10
c002bfe9:	89 c2                	mov    edx,eax
c002bfeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bfef:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002bff5:	a1 b0 ba 03 c0       	mov    eax,ds:0xc003bab0
c002bffa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002bffe:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002c004:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002c008:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002c00e:	83 ec 0c             	sub    esp,0xc
c002c011:	6a 03                	push   0x3
c002c013:	6a 50                	push   0x50
c002c015:	51                   	push   ecx
c002c016:	52                   	push   edx
c002c017:	50                   	push   eax
c002c018:	e8 9f ca fe ff       	call   c0018abc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002c01d:	83 c4 20             	add    esp,0x20
c002c020:	90                   	nop
c002c021:	83 c4 0c             	add    esp,0xc
c002c024:	c3                   	ret    
c002c025:	90                   	nop

c002c026 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002c026:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002c02a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002c02d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002c030:	09 c2                	or     edx,eax
c002c032:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002c036:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002c03c:	8b 08                	mov    ecx,DWORD PTR [eax]
c002c03e:	31 c0                	xor    eax,eax
c002c040:	c1 e9 08             	shr    ecx,0x8
c002c043:	83 e1 0f             	and    ecx,0xf
c002c046:	39 c8                	cmp    eax,ecx
c002c048:	74 0a                	je     c002c054 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c002c04a:	f6 c2 01             	test   dl,0x1
c002c04d:	74 08                	je     c002c057 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002c04f:	d1 ea                	shr    edx,1
c002c051:	40                   	inc    eax
c002c052:	eb f2                	jmp    c002c046 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c002c054:	83 c8 ff             	or     eax,0xffffffff
c002c057:	c3                   	ret    

c002c058 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c002c058:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002c05c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002c05f:	89 c2                	mov    edx,eax
c002c061:	c1 ea 08             	shr    edx,0x8
c002c064:	83 e2 0f             	and    edx,0xf
c002c067:	4a                   	dec    edx
c002c068:	75 32                	jne    c002c09c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002c06a:	83 e0 0f             	and    eax,0xf
c002c06d:	83 f8 03             	cmp    eax,0x3
c002c070:	75 2a                	jne    c002c09c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002c072:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002c075:	b8 02 00 00 00       	mov    eax,0x2
c002c07a:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002c080:	74 1c                	je     c002c09e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002c082:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002c088:	b8 04 00 00 00       	mov    eax,0x4
c002c08d:	74 0f                	je     c002c09e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002c08f:	31 c0                	xor    eax,eax
c002c091:	83 fa 03             	cmp    edx,0x3
c002c094:	0f 94 c0             	sete   al
c002c097:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002c09b:	c3                   	ret    
c002c09c:	31 c0                	xor    eax,eax
c002c09e:	c3                   	ret    
c002c09f:	90                   	nop

c002c0a0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002c0a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002c0a4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002c0a7:	0f ba e2 0f          	bt     edx,0xf
c002c0ab:	72 f7                	jb     c002c0a4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c002c0ad:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002c0b0:	83 ca 10             	or     edx,0x10
c002c0b3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002c0b6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002c0b9:	83 ca 01             	or     edx,0x1
c002c0bc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002c0bf:	c3                   	ret    

c002c0c0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002c0c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002c0c4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002c0c7:	83 e2 fe             	and    edx,0xfffffffe
c002c0ca:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002c0cd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002c0d0:	83 e2 ef             	and    edx,0xffffffef
c002c0d3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002c0d6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002c0d9:	0f ba e2 0e          	bt     edx,0xe
c002c0dd:	72 f7                	jb     c002c0d6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002c0df:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002c0e2:	0f ba e2 0f          	bt     edx,0xf
c002c0e6:	72 ee                	jb     c002c0d6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002c0e8:	c3                   	ret    
c002c0e9:	90                   	nop

c002c0ea <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002c0ea:	55                   	push   ebp
c002c0eb:	57                   	push   edi
c002c0ec:	56                   	push   esi
c002c0ed:	53                   	push   ebx
c002c0ee:	83 ec 1c             	sub    esp,0x1c
c002c0f1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002c0f5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002c0f9:	53                   	push   ebx
c002c0fa:	57                   	push   edi
c002c0fb:	e8 c0 ff ff ff       	call   c002c0c0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002c100:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002c104:	83 ec 0c             	sub    esp,0xc
c002c107:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c002c10d:	c1 e5 0a             	shl    ebp,0xa
c002c110:	01 e8                	add    eax,ebp
c002c112:	89 03                	mov    DWORD PTR [ebx],eax
c002c114:	8b 03                	mov    eax,DWORD PTR [ebx]
c002c116:	68 00 04 00 00       	push   0x400
c002c11b:	6a 00                	push   0x0
c002c11d:	50                   	push   eax
c002c11e:	e8 cd 43 fd ff       	call   c00004f0 <memset>
c002c123:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c002c129:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c002c12d:	83 c4 1c             	add    esp,0x1c
c002c130:	01 e8                	add    eax,ebp
c002c132:	89 03                	mov    DWORD PTR [ebx],eax
c002c134:	c1 e6 08             	shl    esi,0x8
c002c137:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002c13e:	81 c6 00 80 00 00    	add    esi,0x8000
c002c144:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c002c14a:	01 f0                	add    eax,esi
c002c14c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002c14f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c002c152:	68 00 01 00 00       	push   0x100
c002c157:	6a 00                	push   0x0
c002c159:	50                   	push   eax
c002c15a:	e8 91 43 fd ff       	call   c00004f0 <memset>
c002c15f:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c002c165:	31 d2                	xor    edx,edx
c002c167:	01 f0                	add    eax,esi
c002c169:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002c16c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002c173:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c002c179:	01 ee                	add    esi,ebp
c002c17b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002c17f:	83 c4 10             	add    esp,0x10
c002c182:	c1 e5 0d             	shl    ebp,0xd
c002c185:	81 c5 00 a0 00 00    	add    ebp,0xa000
c002c18b:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c002c191:	83 c6 20             	add    esi,0x20
c002c194:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002c198:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c002c19e:	01 e8                	add    eax,ebp
c002c1a0:	01 d0                	add    eax,edx
c002c1a2:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c002c1a5:	52                   	push   edx
c002c1a6:	68 00 01 00 00       	push   0x100
c002c1ab:	6a 00                	push   0x0
c002c1ad:	50                   	push   eax
c002c1ae:	e8 3d 43 fd ff       	call   c00004f0 <memset>
c002c1b3:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c002c1b9:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c002c1c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002c1c4:	83 c4 10             	add    esp,0x10
c002c1c7:	01 e8                	add    eax,ebp
c002c1c9:	01 d0                	add    eax,edx
c002c1cb:	81 c2 00 01 00 00    	add    edx,0x100
c002c1d1:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c002c1d4:	81 fa 00 20 00 00    	cmp    edx,0x2000
c002c1da:	75 af                	jne    c002c18b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c002c1dc:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002c1e3:	50                   	push   eax
c002c1e4:	50                   	push   eax
c002c1e5:	53                   	push   ebx
c002c1e6:	57                   	push   edi
c002c1e7:	e8 b4 fe ff ff       	call   c002c0a0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002c1ec:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002c1f3:	83 c4 2c             	add    esp,0x2c
c002c1f6:	5b                   	pop    ebx
c002c1f7:	5e                   	pop    esi
c002c1f8:	5f                   	pop    edi
c002c1f9:	5d                   	pop    ebp
c002c1fa:	c3                   	ret    
c002c1fb:	90                   	nop

c002c1fc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002c1fc:	55                   	push   ebp
c002c1fd:	57                   	push   edi
c002c1fe:	56                   	push   esi
c002c1ff:	53                   	push   ebx
c002c200:	31 db                	xor    ebx,ebx
c002c202:	83 ec 0c             	sub    esp,0xc
c002c205:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c209:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002c20d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002c210:	f7 c7 01 00 00 00    	test   edi,0x1
c002c216:	74 7a                	je     c002c292 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002c218:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002c21c:	89 d8                	mov    eax,ebx
c002c21e:	c1 e0 07             	shl    eax,0x7
c002c221:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c002c228:	55                   	push   ebp
c002c229:	56                   	push   esi
c002c22a:	e8 29 fe ff ff       	call   c002c058 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002c22f:	5a                   	pop    edx
c002c230:	59                   	pop    ecx
c002c231:	83 f8 01             	cmp    eax,0x1
c002c234:	75 21                	jne    c002c257 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c002c236:	50                   	push   eax
c002c237:	53                   	push   ebx
c002c238:	55                   	push   ebp
c002c239:	56                   	push   esi
c002c23a:	e8 ab fe ff ff       	call   c002c0ea <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002c23f:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002c246:	e8 3d a4 fe ff       	call   c0016688 <malloc>
c002c24b:	89 04 24             	mov    DWORD PTR [esp],eax
c002c24e:	89 c5                	mov    ebp,eax
c002c250:	e8 2b 11 00 00       	call   c002d380 <SATA::SATA()>
c002c255:	eb 24                	jmp    c002c27b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c002c257:	83 f8 04             	cmp    eax,0x4
c002c25a:	75 36                	jne    c002c292 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002c25c:	51                   	push   ecx
c002c25d:	53                   	push   ebx
c002c25e:	55                   	push   ebp
c002c25f:	56                   	push   esi
c002c260:	e8 85 fe ff ff       	call   c002c0ea <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002c265:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c002c26c:	e8 17 a4 fe ff       	call   c0016688 <malloc>
c002c271:	89 04 24             	mov    DWORD PTR [esp],eax
c002c274:	89 c5                	mov    ebp,eax
c002c276:	e8 93 18 00 00       	call   c002db0e <SATAPI::SATAPI()>
c002c27b:	58                   	pop    eax
c002c27c:	5a                   	pop    edx
c002c27d:	55                   	push   ebp
c002c27e:	56                   	push   esi
c002c27f:	e8 86 f3 fe ff       	call   c001b60a <Device::addChild(Device*)>
c002c284:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002c287:	56                   	push   esi
c002c288:	6a 00                	push   0x0
c002c28a:	53                   	push   ebx
c002c28b:	55                   	push   ebp
c002c28c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002c28f:	83 c4 20             	add    esp,0x20
c002c292:	d1 ef                	shr    edi,1
c002c294:	43                   	inc    ebx
c002c295:	83 fb 20             	cmp    ebx,0x20
c002c298:	0f 85 72 ff ff ff    	jne    c002c210 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002c29e:	83 c4 0c             	add    esp,0xc
c002c2a1:	5b                   	pop    ebx
c002c2a2:	5e                   	pop    esi
c002c2a3:	5f                   	pop    edi
c002c2a4:	5d                   	pop    ebp
c002c2a5:	c3                   	ret    

c002c2a6 <SATABus::open(int, int, void*)>:
c002c2a6:	53                   	push   ebx
c002c2a7:	83 ec 08             	sub    esp,0x8
c002c2aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002c2ae:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c002c2b4:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002c2ba:	e8 05 92 ff ff       	call   c00254c4 <KeDisablePreemption()>
c002c2bf:	52                   	push   edx
c002c2c0:	52                   	push   edx
c002c2c1:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c002c2c7:	53                   	push   ebx
c002c2c8:	e8 2f ff ff ff       	call   c002c1fc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002c2cd:	e8 1a 92 ff ff       	call   c00254ec <KeRestorePreemption()>
c002c2d2:	83 c4 18             	add    esp,0x18
c002c2d5:	31 c0                	xor    eax,eax
c002c2d7:	5b                   	pop    ebx
c002c2d8:	c3                   	ret    
c002c2d9:	90                   	nop

c002c2da <ATA::close(int, int, void*)>:
c002c2da:	83 ec 0c             	sub    esp,0xc
c002c2dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c2e1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002c2e7:	85 c0                	test   eax,eax
c002c2e9:	74 0c                	je     c002c2f7 <ATA::close(int, int, void*)+0x1d>
c002c2eb:	8b 10                	mov    edx,DWORD PTR [eax]
c002c2ed:	83 ec 0c             	sub    esp,0xc
c002c2f0:	50                   	push   eax
c002c2f1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002c2f4:	83 c4 10             	add    esp,0x10
c002c2f7:	31 c0                	xor    eax,eax
c002c2f9:	83 c4 0c             	add    esp,0xc
c002c2fc:	c3                   	ret    
c002c2fd:	90                   	nop

c002c2fe <ATA::powerSaving(PowerSavingLevel)>:
c002c2fe:	c3                   	ret    
c002c2ff:	90                   	nop

c002c300 <ATA::ATA()>:
c002c300:	83 ec 0c             	sub    esp,0xc
c002c303:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c307:	83 ec 04             	sub    esp,0x4
c002c30a:	68 00 02 00 00       	push   0x200
c002c30f:	68 39 42 03 c0       	push   0xc0034239
c002c314:	50                   	push   eax
c002c315:	e8 d4 f6 fe ff       	call   c001b9ee <PhysicalDisk::PhysicalDisk(char const*, int)>
c002c31a:	83 c4 10             	add    esp,0x10
c002c31d:	ba a0 41 03 c0       	mov    edx,0xc00341a0
c002c322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c326:	89 10                	mov    DWORD PTR [eax],edx
c002c328:	90                   	nop
c002c329:	83 c4 0c             	add    esp,0xc
c002c32c:	c3                   	ret    
c002c32d:	90                   	nop

c002c32e <ATA::flush(bool)>:
c002c32e:	53                   	push   ebx
c002c32f:	83 ec 08             	sub    esp,0x8
c002c332:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002c337:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002c33b:	83 f8 01             	cmp    eax,0x1
c002c33e:	19 c0                	sbb    eax,eax
c002c340:	83 e0 fd             	and    eax,0xfffffffd
c002c343:	05 ea 00 00 00       	add    eax,0xea
c002c348:	50                   	push   eax
c002c349:	6a 07                	push   0x7
c002c34b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c352:	50                   	push   eax
c002c353:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c359:	e8 8a ee ff ff       	call   c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c35e:	83 c4 0c             	add    esp,0xc
c002c361:	6a 00                	push   0x0
c002c363:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c36a:	50                   	push   eax
c002c36b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c371:	e8 d0 fb ff ff       	call   c002bf46 <IDE::polling(unsigned char, unsigned int)>
c002c376:	83 c4 18             	add    esp,0x18
c002c379:	5b                   	pop    ebx
c002c37a:	c3                   	ret    
c002c37b:	90                   	nop

c002c37c <ATA::readyForCommand()>:
c002c37c:	56                   	push   esi
c002c37d:	53                   	push   ebx
c002c37e:	53                   	push   ebx
c002c37f:	31 db                	xor    ebx,ebx
c002c381:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002c385:	51                   	push   ecx
c002c386:	6a 0c                	push   0xc
c002c388:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002c38f:	50                   	push   eax
c002c390:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002c396:	e8 0d ef ff ff       	call   c002b2a8 <IDE::read(unsigned char, unsigned char)>
c002c39b:	83 c4 10             	add    esp,0x10
c002c39e:	a8 88                	test   al,0x88
c002c3a0:	74 1f                	je     c002c3c1 <ATA::readyForCommand()+0x45>
c002c3a2:	43                   	inc    ebx
c002c3a3:	83 fb 63             	cmp    ebx,0x63
c002c3a6:	7e dd                	jle    c002c385 <ATA::readyForCommand()+0x9>
c002c3a8:	83 ec 0c             	sub    esp,0xc
c002c3ab:	6a 0a                	push   0xa
c002c3ad:	e8 7e 95 ff ff       	call   c0025930 <milliTenthSleep(unsigned int)>
c002c3b2:	83 c4 10             	add    esp,0x10
c002c3b5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002c3bb:	75 c8                	jne    c002c385 <ATA::readyForCommand()+0x9>
c002c3bd:	31 c0                	xor    eax,eax
c002c3bf:	eb 02                	jmp    c002c3c3 <ATA::readyForCommand()+0x47>
c002c3c1:	b0 01                	mov    al,0x1
c002c3c3:	5a                   	pop    edx
c002c3c4:	5b                   	pop    ebx
c002c3c5:	5e                   	pop    esi
c002c3c6:	c3                   	ret    
c002c3c7:	90                   	nop

c002c3c8 <ATA::access(unsigned long long, int, void*, bool)>:
c002c3c8:	55                   	push   ebp
c002c3c9:	57                   	push   edi
c002c3ca:	56                   	push   esi
c002c3cb:	53                   	push   ebx
c002c3cc:	83 ec 2c             	sub    esp,0x2c
c002c3cf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002c3d3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002c3d7:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002c3db:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002c3df:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002c3e3:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002c3e7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c002c3eb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002c3f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002c3f5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002c3fb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002c3ff:	c1 e0 06             	shl    eax,0x6
c002c402:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002c40a:	74 5b                	je     c002c467 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c002c40c:	89 fa                	mov    edx,edi
c002c40e:	89 f0                	mov    eax,esi
c002c410:	c1 ea 1c             	shr    edx,0x1c
c002c413:	0f ac f8 1c          	shrd   eax,edi,0x1c
c002c417:	89 d1                	mov    ecx,edx
c002c419:	09 c1                	or     ecx,eax
c002c41b:	74 25                	je     c002c442 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002c41d:	31 ed                	xor    ebp,ebp
c002c41f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002c426:	89 fa                	mov    edx,edi
c002c428:	89 f0                	mov    eax,esi
c002c42a:	0f ad d0             	shrd   eax,edx,cl
c002c42d:	d3 ea                	shr    edx,cl
c002c42f:	f6 c1 20             	test   cl,0x20
c002c432:	74 02                	je     c002c436 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002c434:	89 d0                	mov    eax,edx
c002c436:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002c43a:	45                   	inc    ebp
c002c43b:	83 fd 06             	cmp    ebp,0x6
c002c43e:	75 df                	jne    c002c41f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002c440:	eb 71                	jmp    c002c4b3 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c002c442:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002c447:	89 f0                	mov    eax,esi
c002c449:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002c450:	0f ac f8 10          	shrd   eax,edi,0x10
c002c454:	bf 01 00 00 00       	mov    edi,0x1
c002c459:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002c45d:	c1 ee 18             	shr    esi,0x18
c002c460:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002c465:	eb 53                	jmp    c002c4ba <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c002c467:	6a 00                	push   0x0
c002c469:	6a 3f                	push   0x3f
c002c46b:	57                   	push   edi
c002c46c:	56                   	push   esi
c002c46d:	e8 3e 2b 00 00       	call   c002efb0 <__umoddi3>
c002c472:	83 c4 10             	add    esp,0x10
c002c475:	40                   	inc    eax
c002c476:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002c47a:	6a 00                	push   0x0
c002c47c:	68 f0 03 00 00       	push   0x3f0
c002c481:	57                   	push   edi
c002c482:	56                   	push   esi
c002c483:	e8 28 2a 00 00       	call   c002eeb0 <__udivdi3>
c002c488:	83 c4 10             	add    esp,0x10
c002c48b:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002c490:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002c497:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002c49c:	6a 00                	push   0x0
c002c49e:	6a 3f                	push   0x3f
c002c4a0:	57                   	push   edi
c002c4a1:	31 ff                	xor    edi,edi
c002c4a3:	56                   	push   esi
c002c4a4:	e8 07 2a 00 00       	call   c002eeb0 <__udivdi3>
c002c4a9:	83 c4 10             	add    esp,0x10
c002c4ac:	83 e0 0f             	and    eax,0xf
c002c4af:	89 c6                	mov    esi,eax
c002c4b1:	eb 07                	jmp    c002c4ba <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c002c4b3:	31 f6                	xor    esi,esi
c002c4b5:	bf 02 00 00 00       	mov    edi,0x2
c002c4ba:	55                   	push   ebp
c002c4bb:	6a 00                	push   0x0
c002c4bd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c4c4:	50                   	push   eax
c002c4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002c4c9:	e8 28 ef ff ff       	call   c002b3f6 <IDE::enableIRQs(unsigned char, bool)>
c002c4ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c4d1:	e8 a6 fe ff ff       	call   c002c37c <ATA::readyForCommand()>
c002c4d6:	83 c4 10             	add    esp,0x10
c002c4d9:	84 c0                	test   al,al
c002c4db:	75 0a                	jne    c002c4e7 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c002c4dd:	be 01 00 00 00       	mov    esi,0x1
c002c4e2:	e9 e3 02 00 00       	jmp    c002c7ca <ATA::access(unsigned long long, int, void*, bool)+0x402>
c002c4e7:	fa                   	cli    
c002c4e8:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c002c4ee:	f7 c7 03 00 00 00    	test   edi,0x3
c002c4f4:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002c4fa:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002c500:	75 0a                	jne    c002c50c <ATA::access(unsigned long long, int, void*, bool)+0x144>
c002c502:	c1 e0 04             	shl    eax,0x4
c002c505:	09 c6                	or     esi,eax
c002c507:	83 ce a0             	or     esi,0xffffffa0
c002c50a:	eb 08                	jmp    c002c514 <ATA::access(unsigned long long, int, void*, bool)+0x14c>
c002c50c:	c1 e0 04             	shl    eax,0x4
c002c50f:	09 c6                	or     esi,eax
c002c511:	83 ce e0             	or     esi,0xffffffe0
c002c514:	89 f0                	mov    eax,esi
c002c516:	0f b6 d2             	movzx  edx,dl
c002c519:	0f b6 f0             	movzx  esi,al
c002c51c:	56                   	push   esi
c002c51d:	6a 06                	push   0x6
c002c51f:	52                   	push   edx
c002c520:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c526:	e8 bd ec ff ff       	call   c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c52b:	83 c4 10             	add    esp,0x10
c002c52e:	6a 00                	push   0x0
c002c530:	6a 01                	push   0x1
c002c532:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c539:	50                   	push   eax
c002c53a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c540:	e8 a3 ec ff ff       	call   c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c545:	89 f8                	mov    eax,edi
c002c547:	83 c4 10             	add    esp,0x10
c002c54a:	0f b6 f0             	movzx  esi,al
c002c54d:	83 fe 02             	cmp    esi,0x2
c002c550:	75 6e                	jne    c002c5c0 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c002c552:	6a 00                	push   0x0
c002c554:	6a 08                	push   0x8
c002c556:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c55d:	50                   	push   eax
c002c55e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c564:	e8 7f ec ff ff       	call   c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c569:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002c56e:	50                   	push   eax
c002c56f:	6a 09                	push   0x9
c002c571:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c578:	50                   	push   eax
c002c579:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c57f:	e8 64 ec ff ff       	call   c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c584:	83 c4 20             	add    esp,0x20
c002c587:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002c58c:	50                   	push   eax
c002c58d:	6a 0a                	push   0xa
c002c58f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c596:	50                   	push   eax
c002c597:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c59d:	e8 46 ec ff ff       	call   c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c5a2:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002c5a7:	50                   	push   eax
c002c5a8:	6a 0b                	push   0xb
c002c5aa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c5b1:	50                   	push   eax
c002c5b2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c5b8:	e8 2b ec ff ff       	call   c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c5bd:	83 c4 20             	add    esp,0x20
c002c5c0:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002c5c5:	50                   	push   eax
c002c5c6:	6a 02                	push   0x2
c002c5c8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c5cf:	50                   	push   eax
c002c5d0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c5d6:	e8 0d ec ff ff       	call   c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c5db:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002c5e0:	50                   	push   eax
c002c5e1:	6a 03                	push   0x3
c002c5e3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c5ea:	50                   	push   eax
c002c5eb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c5f1:	e8 f2 eb ff ff       	call   c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c5f6:	83 c4 20             	add    esp,0x20
c002c5f9:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002c5fe:	50                   	push   eax
c002c5ff:	6a 04                	push   0x4
c002c601:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c608:	50                   	push   eax
c002c609:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c60f:	e8 d4 eb ff ff       	call   c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c614:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002c619:	50                   	push   eax
c002c61a:	6a 05                	push   0x5
c002c61c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c623:	50                   	push   eax
c002c624:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c62a:	e8 b9 eb ff ff       	call   c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c62f:	83 c4 20             	add    esp,0x20
c002c632:	83 fe 02             	cmp    esi,0x2
c002c635:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c002c63a:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c002c63f:	85 c9                	test   ecx,ecx
c002c641:	74 07                	je     c002c64a <ATA::access(unsigned long long, int, void*, bool)+0x282>
c002c643:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002c648:	75 47                	jne    c002c691 <ATA::access(unsigned long long, int, void*, bool)+0x2c9>
c002c64a:	89 f8                	mov    eax,edi
c002c64c:	0f b6 f8             	movzx  edi,al
c002c64f:	31 c0                	xor    eax,eax
c002c651:	83 ff 02             	cmp    edi,0x2
c002c654:	0f 95 c0             	setne  al
c002c657:	89 c6                	mov    esi,eax
c002c659:	74 0c                	je     c002c667 <ATA::access(unsigned long long, int, void*, bool)+0x29f>
c002c65b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002c660:	b8 30 00 00 00       	mov    eax,0x30
c002c665:	75 2f                	jne    c002c696 <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c002c667:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002c66b:	83 f2 01             	xor    edx,0x1
c002c66e:	85 c9                	test   ecx,ecx
c002c670:	74 09                	je     c002c67b <ATA::access(unsigned long long, int, void*, bool)+0x2b3>
c002c672:	84 d2                	test   dl,dl
c002c674:	b8 24 00 00 00       	mov    eax,0x24
c002c679:	75 1b                	jne    c002c696 <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c002c67b:	85 f6                	test   esi,esi
c002c67d:	0f 84 5a fe ff ff    	je     c002c4dd <ATA::access(unsigned long long, int, void*, bool)+0x115>
c002c683:	84 d2                	test   dl,dl
c002c685:	b8 20 00 00 00       	mov    eax,0x20
c002c68a:	75 0a                	jne    c002c696 <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c002c68c:	e9 4c fe ff ff       	jmp    c002c4dd <ATA::access(unsigned long long, int, void*, bool)+0x115>
c002c691:	b8 34 00 00 00       	mov    eax,0x34
c002c696:	50                   	push   eax
c002c697:	6a 07                	push   0x7
c002c699:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c6a0:	50                   	push   eax
c002c6a1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c6a7:	e8 3c eb ff ff       	call   c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c6ac:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002c6b1:	83 c4 10             	add    esp,0x10
c002c6b4:	48                   	dec    eax
c002c6b5:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c002c6ba:	85 c0                	test   eax,eax
c002c6bc:	75 01                	jne    c002c6bf <ATA::access(unsigned long long, int, void*, bool)+0x2f7>
c002c6be:	fb                   	sti    
c002c6bf:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c002c6c3:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c002c6c8:	85 f6                	test   esi,esi
c002c6ca:	0f 84 e0 00 00 00    	je     c002c7b0 <ATA::access(unsigned long long, int, void*, bool)+0x3e8>
c002c6d0:	57                   	push   edi
c002c6d1:	6a 01                	push   0x1
c002c6d3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c6da:	50                   	push   eax
c002c6db:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c6e1:	e8 60 f8 ff ff       	call   c002bf46 <IDE::polling(unsigned char, unsigned int)>
c002c6e6:	83 c4 10             	add    esp,0x10
c002c6e9:	0f b6 c0             	movzx  eax,al
c002c6ec:	85 c0                	test   eax,eax
c002c6ee:	74 23                	je     c002c713 <ATA::access(unsigned long long, int, void*, bool)+0x34b>
c002c6f0:	50                   	push   eax
c002c6f1:	89 c6                	mov    esi,eax
c002c6f3:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002c6fa:	50                   	push   eax
c002c6fb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c702:	50                   	push   eax
c002c703:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c709:	e8 7e f7 ff ff       	call   c002be8c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002c70e:	e9 b4 00 00 00       	jmp    c002c7c7 <ATA::access(unsigned long long, int, void*, bool)+0x3ff>
c002c713:	85 ed                	test   ebp,ebp
c002c715:	74 4d                	je     c002c764 <ATA::access(unsigned long long, int, void*, bool)+0x39c>
c002c717:	fa                   	cli    
c002c718:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c002c71e:	31 ff                	xor    edi,edi
c002c720:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002c724:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c002c728:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c002c72d:	51                   	push   ecx
c002c72e:	51                   	push   ecx
c002c72f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c736:	50                   	push   eax
c002c737:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c73d:	e8 94 ea ff ff       	call   c002b1d6 <IDE::getBase(unsigned char)>
c002c742:	89 c2                	mov    edx,eax
c002c744:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c002c749:	66 ef                	out    dx,ax
c002c74b:	47                   	inc    edi
c002c74c:	83 c4 10             	add    esp,0x10
c002c74f:	81 ff 00 01 00 00    	cmp    edi,0x100
c002c755:	75 c9                	jne    c002c720 <ATA::access(unsigned long long, int, void*, bool)+0x358>
c002c757:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002c75c:	48                   	dec    eax
c002c75d:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c002c762:	eb 3b                	jmp    c002c79f <ATA::access(unsigned long long, int, void*, bool)+0x3d7>
c002c764:	fa                   	cli    
c002c765:	52                   	push   edx
c002c766:	52                   	push   edx
c002c767:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c76e:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c002c774:	50                   	push   eax
c002c775:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c77b:	e8 56 ea ff ff       	call   c002b1d6 <IDE::getBase(unsigned char)>
c002c780:	b9 00 01 00 00       	mov    ecx,0x100
c002c785:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002c789:	89 c2                	mov    edx,eax
c002c78b:	fc                   	cld    
c002c78c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002c78f:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002c794:	83 c4 10             	add    esp,0x10
c002c797:	48                   	dec    eax
c002c798:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c002c79d:	85 c0                	test   eax,eax
c002c79f:	75 01                	jne    c002c7a2 <ATA::access(unsigned long long, int, void*, bool)+0x3da>
c002c7a1:	fb                   	sti    
c002c7a2:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002c7aa:	4e                   	dec    esi
c002c7ab:	e9 18 ff ff ff       	jmp    c002c6c8 <ATA::access(unsigned long long, int, void*, bool)+0x300>
c002c7b0:	31 f6                	xor    esi,esi
c002c7b2:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002c7b7:	74 11                	je     c002c7ca <ATA::access(unsigned long long, int, void*, bool)+0x402>
c002c7b9:	50                   	push   eax
c002c7ba:	50                   	push   eax
c002c7bb:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c002c7c0:	50                   	push   eax
c002c7c1:	53                   	push   ebx
c002c7c2:	e8 67 fb ff ff       	call   c002c32e <ATA::flush(bool)>
c002c7c7:	83 c4 10             	add    esp,0x10
c002c7ca:	83 c4 2c             	add    esp,0x2c
c002c7cd:	89 f0                	mov    eax,esi
c002c7cf:	5b                   	pop    ebx
c002c7d0:	5e                   	pop    esi
c002c7d1:	5f                   	pop    edi
c002c7d2:	5d                   	pop    ebp
c002c7d3:	c3                   	ret    

c002c7d4 <ATA::detectCHS()>:
c002c7d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002c7d8:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002c7de:	c1 e0 06             	shl    eax,0x6
c002c7e1:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002c7e7:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002c7f1:	c7 44 24 04 84 41 03 c0 	mov    DWORD PTR [esp+0x4],0xc0034184
c002c7f9:	e9 04 3f ff ff       	jmp    c0020702 <KePanic(char const*)>

c002c7fe <ATA::open(int, int, void*)>:
c002c7fe:	53                   	push   ebx
c002c7ff:	83 ec 08             	sub    esp,0x8
c002c802:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002c806:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002c80a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002c80e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002c814:	c1 e0 06             	shl    eax,0x6
c002c817:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002c81d:	01 d0                	add    eax,edx
c002c81f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002c826:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002c82c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002c833:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002c83d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002c844:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002c84a:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002c851:	75 0c                	jne    c002c85f <ATA::open(int, int, void*)+0x61>
c002c853:	83 ec 0c             	sub    esp,0xc
c002c856:	53                   	push   ebx
c002c857:	e8 78 ff ff ff       	call   c002c7d4 <ATA::detectCHS()>
c002c85c:	83 c4 10             	add    esp,0x10
c002c85f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002c865:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002c86b:	c1 e0 06             	shl    eax,0x6
c002c86e:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002c875:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002c87f:	d1 e8                	shr    eax,1
c002c881:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002c887:	6a 04                	push   0x4
c002c889:	6a 0c                	push   0xc
c002c88b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c892:	50                   	push   eax
c002c893:	52                   	push   edx
c002c894:	e8 4f e9 ff ff       	call   c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c899:	90                   	nop
c002c89a:	90                   	nop
c002c89b:	6a 00                	push   0x0
c002c89d:	6a 0c                	push   0xc
c002c89f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c8a6:	50                   	push   eax
c002c8a7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c8ad:	e8 36 e9 ff ff       	call   c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c8b2:	83 c4 14             	add    esp,0x14
c002c8b5:	53                   	push   ebx
c002c8b6:	e8 9b f1 fe ff       	call   c001ba56 <PhysicalDisk::startCache()>
c002c8bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c8be:	e8 d7 03 ff ff       	call   c001cc9a <createPartitionsForDisk(PhysicalDisk*)>
c002c8c3:	83 c4 18             	add    esp,0x18
c002c8c6:	31 c0                	xor    eax,eax
c002c8c8:	5b                   	pop    ebx
c002c8c9:	c3                   	ret    

c002c8ca <combineCharAndColour(char, unsigned char)>:
c002c8ca:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002c8cf:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c002c8d5:	c1 e0 08             	shl    eax,0x8
c002c8d8:	09 d0                	or     eax,edx
c002c8da:	c3                   	ret    

c002c8db <combineColours(unsigned char, unsigned char)>:
c002c8db:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002c8e0:	c1 e0 04             	shl    eax,0x4
c002c8e3:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c002c8e7:	c3                   	ret    

c002c8e8 <ATA::read(unsigned long long, int, void*)>:
c002c8e8:	55                   	push   ebp
c002c8e9:	57                   	push   edi
c002c8ea:	56                   	push   esi
c002c8eb:	be 04 00 00 00       	mov    esi,0x4
c002c8f0:	53                   	push   ebx
c002c8f1:	83 ec 0c             	sub    esp,0xc
c002c8f4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c8f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c8fc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c900:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c904:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c907:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c90d:	0f 87 a1 01 00 00    	ja     c002cab4 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c913:	85 c9                	test   ecx,ecx
c002c915:	be 06 00 00 00       	mov    esi,0x6
c002c91a:	0f 84 94 01 00 00    	je     c002cab4 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c920:	55                   	push   ebp
c002c921:	55                   	push   ebp
c002c922:	6a 00                	push   0x0
c002c924:	51                   	push   ecx
c002c925:	53                   	push   ebx
c002c926:	52                   	push   edx
c002c927:	50                   	push   eax
c002c928:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002c92c:	e8 97 fa ff ff       	call   c002c3c8 <ATA::access(unsigned long long, int, void*, bool)>
c002c931:	83 c4 20             	add    esp,0x20
c002c934:	85 c0                	test   eax,eax
c002c936:	89 c6                	mov    esi,eax
c002c938:	0f 85 71 01 00 00    	jne    c002caaf <ATA::read(unsigned long long, int, void*)+0x1c7>
c002c93e:	50                   	push   eax
c002c93f:	bd 10 27 00 00       	mov    ebp,0x2710
c002c944:	50                   	push   eax
c002c945:	03 1d b4 1b 04 c0    	add    ebx,DWORD PTR ds:0xc0041bb4
c002c94b:	6a 0f                	push   0xf
c002c94d:	6a 00                	push   0x0
c002c94f:	89 da                	mov    edx,ebx
c002c951:	89 1d b4 1b 04 c0    	mov    DWORD PTR ds:0xc0041bb4,ebx
c002c957:	e8 7f ff ff ff       	call   c002c8db <combineColours(unsigned char, unsigned char)>
c002c95c:	59                   	pop    ecx
c002c95d:	b9 0a 00 00 00       	mov    ecx,0xa
c002c962:	5b                   	pop    ebx
c002c963:	0f b6 d8             	movzx  ebx,al
c002c966:	89 d0                	mov    eax,edx
c002c968:	53                   	push   ebx
c002c969:	99                   	cdq    
c002c96a:	f7 fd                	idiv   ebp
c002c96c:	99                   	cdq    
c002c96d:	f7 f9                	idiv   ecx
c002c96f:	83 c2 30             	add    edx,0x30
c002c972:	0f b6 d2             	movzx  edx,dl
c002c975:	52                   	push   edx
c002c976:	e8 4f ff ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002c97b:	5f                   	pop    edi
c002c97c:	bf e8 03 00 00       	mov    edi,0x3e8
c002c981:	5a                   	pop    edx
c002c982:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c988:	53                   	push   ebx
c002c989:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002c98e:	99                   	cdq    
c002c98f:	f7 ff                	idiv   edi
c002c991:	99                   	cdq    
c002c992:	f7 f9                	idiv   ecx
c002c994:	8d 42 30             	lea    eax,[edx+0x30]
c002c997:	0f b6 c0             	movzx  eax,al
c002c99a:	50                   	push   eax
c002c99b:	e8 2a ff ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002c9a0:	5f                   	pop    edi
c002c9a1:	bf 64 00 00 00       	mov    edi,0x64
c002c9a6:	5a                   	pop    edx
c002c9a7:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c9ad:	53                   	push   ebx
c002c9ae:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002c9b3:	99                   	cdq    
c002c9b4:	f7 ff                	idiv   edi
c002c9b6:	99                   	cdq    
c002c9b7:	f7 f9                	idiv   ecx
c002c9b9:	8d 42 30             	lea    eax,[edx+0x30]
c002c9bc:	0f b6 c0             	movzx  eax,al
c002c9bf:	50                   	push   eax
c002c9c0:	e8 05 ff ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002c9c5:	5a                   	pop    edx
c002c9c6:	5a                   	pop    edx
c002c9c7:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c9cd:	53                   	push   ebx
c002c9ce:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002c9d3:	99                   	cdq    
c002c9d4:	f7 f9                	idiv   ecx
c002c9d6:	99                   	cdq    
c002c9d7:	f7 f9                	idiv   ecx
c002c9d9:	8d 42 30             	lea    eax,[edx+0x30]
c002c9dc:	0f b6 c0             	movzx  eax,al
c002c9df:	50                   	push   eax
c002c9e0:	e8 e5 fe ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002c9e5:	5a                   	pop    edx
c002c9e6:	5a                   	pop    edx
c002c9e7:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c9ed:	53                   	push   ebx
c002c9ee:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002c9f3:	99                   	cdq    
c002c9f4:	f7 f9                	idiv   ecx
c002c9f6:	83 c2 30             	add    edx,0x30
c002c9f9:	0f b6 d2             	movzx  edx,dl
c002c9fc:	52                   	push   edx
c002c9fd:	e8 c8 fe ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002ca02:	5a                   	pop    edx
c002ca03:	5a                   	pop    edx
c002ca04:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002ca0a:	53                   	push   ebx
c002ca0b:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002ca10:	99                   	cdq    
c002ca11:	f7 fd                	idiv   ebp
c002ca13:	99                   	cdq    
c002ca14:	f7 f9                	idiv   ecx
c002ca16:	8d 42 30             	lea    eax,[edx+0x30]
c002ca19:	0f b6 c0             	movzx  eax,al
c002ca1c:	50                   	push   eax
c002ca1d:	e8 a8 fe ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002ca22:	5d                   	pop    ebp
c002ca23:	bd e8 03 00 00       	mov    ebp,0x3e8
c002ca28:	5a                   	pop    edx
c002ca29:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002ca2f:	53                   	push   ebx
c002ca30:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002ca35:	99                   	cdq    
c002ca36:	f7 fd                	idiv   ebp
c002ca38:	99                   	cdq    
c002ca39:	f7 f9                	idiv   ecx
c002ca3b:	8d 42 30             	lea    eax,[edx+0x30]
c002ca3e:	0f b6 c0             	movzx  eax,al
c002ca41:	50                   	push   eax
c002ca42:	e8 83 fe ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002ca47:	5d                   	pop    ebp
c002ca48:	5a                   	pop    edx
c002ca49:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002ca4f:	53                   	push   ebx
c002ca50:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002ca55:	99                   	cdq    
c002ca56:	f7 ff                	idiv   edi
c002ca58:	99                   	cdq    
c002ca59:	f7 f9                	idiv   ecx
c002ca5b:	8d 42 30             	lea    eax,[edx+0x30]
c002ca5e:	0f b6 c0             	movzx  eax,al
c002ca61:	50                   	push   eax
c002ca62:	e8 63 fe ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002ca67:	5f                   	pop    edi
c002ca68:	5d                   	pop    ebp
c002ca69:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002ca6f:	53                   	push   ebx
c002ca70:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002ca75:	99                   	cdq    
c002ca76:	f7 f9                	idiv   ecx
c002ca78:	99                   	cdq    
c002ca79:	f7 f9                	idiv   ecx
c002ca7b:	8d 42 30             	lea    eax,[edx+0x30]
c002ca7e:	0f b6 c0             	movzx  eax,al
c002ca81:	50                   	push   eax
c002ca82:	e8 43 fe ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002ca87:	5a                   	pop    edx
c002ca88:	5f                   	pop    edi
c002ca89:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002ca8f:	53                   	push   ebx
c002ca90:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002ca95:	99                   	cdq    
c002ca96:	f7 f9                	idiv   ecx
c002ca98:	83 c2 30             	add    edx,0x30
c002ca9b:	0f b6 d2             	movzx  edx,dl
c002ca9e:	52                   	push   edx
c002ca9f:	e8 26 fe ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002caa4:	83 c4 10             	add    esp,0x10
c002caa7:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002caad:	eb 05                	jmp    c002cab4 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002caaf:	be 01 00 00 00       	mov    esi,0x1
c002cab4:	83 c4 0c             	add    esp,0xc
c002cab7:	89 f0                	mov    eax,esi
c002cab9:	5b                   	pop    ebx
c002caba:	5e                   	pop    esi
c002cabb:	5f                   	pop    edi
c002cabc:	5d                   	pop    ebp
c002cabd:	c3                   	ret    

c002cabe <ATA::write(unsigned long long, int, void*)>:
c002cabe:	55                   	push   ebp
c002cabf:	57                   	push   edi
c002cac0:	56                   	push   esi
c002cac1:	be 04 00 00 00       	mov    esi,0x4
c002cac6:	53                   	push   ebx
c002cac7:	83 ec 0c             	sub    esp,0xc
c002caca:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002cace:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002cad2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002cad6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002cada:	8d 7b ff             	lea    edi,[ebx-0x1]
c002cadd:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002cae3:	0f 87 9c 01 00 00    	ja     c002cc85 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002cae9:	85 c9                	test   ecx,ecx
c002caeb:	be 06 00 00 00       	mov    esi,0x6
c002caf0:	0f 84 8f 01 00 00    	je     c002cc85 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002caf6:	55                   	push   ebp
c002caf7:	55                   	push   ebp
c002caf8:	6a 01                	push   0x1
c002cafa:	51                   	push   ecx
c002cafb:	53                   	push   ebx
c002cafc:	52                   	push   edx
c002cafd:	50                   	push   eax
c002cafe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002cb02:	e8 c1 f8 ff ff       	call   c002c3c8 <ATA::access(unsigned long long, int, void*, bool)>
c002cb07:	83 c4 20             	add    esp,0x20
c002cb0a:	85 c0                	test   eax,eax
c002cb0c:	89 c6                	mov    esi,eax
c002cb0e:	0f 85 6c 01 00 00    	jne    c002cc80 <ATA::write(unsigned long long, int, void*)+0x1c2>
c002cb14:	50                   	push   eax
c002cb15:	bd 10 27 00 00       	mov    ebp,0x2710
c002cb1a:	50                   	push   eax
c002cb1b:	6a 0f                	push   0xf
c002cb1d:	6a 00                	push   0x0
c002cb1f:	01 1d b0 1b 04 c0    	add    DWORD PTR ds:0xc0041bb0,ebx
c002cb25:	e8 b1 fd ff ff       	call   c002c8db <combineColours(unsigned char, unsigned char)>
c002cb2a:	5a                   	pop    edx
c002cb2b:	59                   	pop    ecx
c002cb2c:	b9 0a 00 00 00       	mov    ecx,0xa
c002cb31:	0f b6 d8             	movzx  ebx,al
c002cb34:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002cb39:	53                   	push   ebx
c002cb3a:	99                   	cdq    
c002cb3b:	f7 fd                	idiv   ebp
c002cb3d:	99                   	cdq    
c002cb3e:	f7 f9                	idiv   ecx
c002cb40:	8d 42 30             	lea    eax,[edx+0x30]
c002cb43:	0f b6 c0             	movzx  eax,al
c002cb46:	50                   	push   eax
c002cb47:	e8 7e fd ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002cb4c:	5f                   	pop    edi
c002cb4d:	bf e8 03 00 00       	mov    edi,0x3e8
c002cb52:	5a                   	pop    edx
c002cb53:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002cb59:	53                   	push   ebx
c002cb5a:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002cb5f:	99                   	cdq    
c002cb60:	f7 ff                	idiv   edi
c002cb62:	99                   	cdq    
c002cb63:	f7 f9                	idiv   ecx
c002cb65:	8d 42 30             	lea    eax,[edx+0x30]
c002cb68:	0f b6 c0             	movzx  eax,al
c002cb6b:	50                   	push   eax
c002cb6c:	e8 59 fd ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002cb71:	5f                   	pop    edi
c002cb72:	bf 64 00 00 00       	mov    edi,0x64
c002cb77:	5a                   	pop    edx
c002cb78:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002cb7e:	53                   	push   ebx
c002cb7f:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002cb84:	99                   	cdq    
c002cb85:	f7 ff                	idiv   edi
c002cb87:	99                   	cdq    
c002cb88:	f7 f9                	idiv   ecx
c002cb8a:	8d 42 30             	lea    eax,[edx+0x30]
c002cb8d:	0f b6 c0             	movzx  eax,al
c002cb90:	50                   	push   eax
c002cb91:	e8 34 fd ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002cb96:	5a                   	pop    edx
c002cb97:	5a                   	pop    edx
c002cb98:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002cb9e:	53                   	push   ebx
c002cb9f:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002cba4:	99                   	cdq    
c002cba5:	f7 f9                	idiv   ecx
c002cba7:	99                   	cdq    
c002cba8:	f7 f9                	idiv   ecx
c002cbaa:	8d 42 30             	lea    eax,[edx+0x30]
c002cbad:	0f b6 c0             	movzx  eax,al
c002cbb0:	50                   	push   eax
c002cbb1:	e8 14 fd ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002cbb6:	5a                   	pop    edx
c002cbb7:	5a                   	pop    edx
c002cbb8:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002cbbe:	53                   	push   ebx
c002cbbf:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002cbc4:	99                   	cdq    
c002cbc5:	f7 f9                	idiv   ecx
c002cbc7:	83 c2 30             	add    edx,0x30
c002cbca:	0f b6 d2             	movzx  edx,dl
c002cbcd:	52                   	push   edx
c002cbce:	e8 f7 fc ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002cbd3:	5a                   	pop    edx
c002cbd4:	5a                   	pop    edx
c002cbd5:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002cbdb:	53                   	push   ebx
c002cbdc:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002cbe1:	99                   	cdq    
c002cbe2:	f7 fd                	idiv   ebp
c002cbe4:	99                   	cdq    
c002cbe5:	f7 f9                	idiv   ecx
c002cbe7:	8d 42 30             	lea    eax,[edx+0x30]
c002cbea:	0f b6 c0             	movzx  eax,al
c002cbed:	50                   	push   eax
c002cbee:	e8 d7 fc ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002cbf3:	5d                   	pop    ebp
c002cbf4:	bd e8 03 00 00       	mov    ebp,0x3e8
c002cbf9:	5a                   	pop    edx
c002cbfa:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002cc00:	53                   	push   ebx
c002cc01:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002cc06:	99                   	cdq    
c002cc07:	f7 fd                	idiv   ebp
c002cc09:	99                   	cdq    
c002cc0a:	f7 f9                	idiv   ecx
c002cc0c:	8d 42 30             	lea    eax,[edx+0x30]
c002cc0f:	0f b6 c0             	movzx  eax,al
c002cc12:	50                   	push   eax
c002cc13:	e8 b2 fc ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002cc18:	5d                   	pop    ebp
c002cc19:	5a                   	pop    edx
c002cc1a:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002cc20:	53                   	push   ebx
c002cc21:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002cc26:	99                   	cdq    
c002cc27:	f7 ff                	idiv   edi
c002cc29:	99                   	cdq    
c002cc2a:	f7 f9                	idiv   ecx
c002cc2c:	8d 42 30             	lea    eax,[edx+0x30]
c002cc2f:	0f b6 c0             	movzx  eax,al
c002cc32:	50                   	push   eax
c002cc33:	e8 92 fc ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002cc38:	5f                   	pop    edi
c002cc39:	5d                   	pop    ebp
c002cc3a:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002cc40:	53                   	push   ebx
c002cc41:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002cc46:	99                   	cdq    
c002cc47:	f7 f9                	idiv   ecx
c002cc49:	99                   	cdq    
c002cc4a:	f7 f9                	idiv   ecx
c002cc4c:	8d 42 30             	lea    eax,[edx+0x30]
c002cc4f:	0f b6 c0             	movzx  eax,al
c002cc52:	50                   	push   eax
c002cc53:	e8 72 fc ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002cc58:	5a                   	pop    edx
c002cc59:	5f                   	pop    edi
c002cc5a:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002cc60:	53                   	push   ebx
c002cc61:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002cc66:	99                   	cdq    
c002cc67:	f7 f9                	idiv   ecx
c002cc69:	83 c2 30             	add    edx,0x30
c002cc6c:	0f b6 d2             	movzx  edx,dl
c002cc6f:	52                   	push   edx
c002cc70:	e8 55 fc ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002cc75:	83 c4 10             	add    esp,0x10
c002cc78:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002cc7e:	eb 05                	jmp    c002cc85 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002cc80:	be 01 00 00 00       	mov    esi,0x1
c002cc85:	83 c4 0c             	add    esp,0xc
c002cc88:	89 f0                	mov    eax,esi
c002cc8a:	5b                   	pop    ebx
c002cc8b:	5e                   	pop    esi
c002cc8c:	5f                   	pop    edi
c002cc8d:	5d                   	pop    ebp
c002cc8e:	c3                   	ret    
c002cc8f:	90                   	nop

c002cc90 <ATAPI::write(unsigned long long, int, void*)>:
c002cc90:	b8 03 00 00 00       	mov    eax,0x3
c002cc95:	c3                   	ret    

c002cc96 <ATAPI::close(int, int, void*)>:
c002cc96:	83 ec 0c             	sub    esp,0xc
c002cc99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cc9d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002cca3:	85 c0                	test   eax,eax
c002cca5:	74 0c                	je     c002ccb3 <ATAPI::close(int, int, void*)+0x1d>
c002cca7:	8b 10                	mov    edx,DWORD PTR [eax]
c002cca9:	83 ec 0c             	sub    esp,0xc
c002ccac:	50                   	push   eax
c002ccad:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002ccb0:	83 c4 10             	add    esp,0x10
c002ccb3:	31 c0                	xor    eax,eax
c002ccb5:	83 c4 0c             	add    esp,0xc
c002ccb8:	c3                   	ret    
c002ccb9:	90                   	nop

c002ccba <ATAPI::ATAPI()>:
c002ccba:	83 ec 0c             	sub    esp,0xc
c002ccbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ccc1:	83 ec 04             	sub    esp,0x4
c002ccc4:	68 00 08 00 00       	push   0x800
c002ccc9:	68 d9 42 03 c0       	push   0xc00342d9
c002ccce:	50                   	push   eax
c002cccf:	e8 1a ed fe ff       	call   c001b9ee <PhysicalDisk::PhysicalDisk(char const*, int)>
c002ccd4:	83 c4 10             	add    esp,0x10
c002ccd7:	ba e8 41 03 c0       	mov    edx,0xc00341e8
c002ccdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cce0:	89 10                	mov    DWORD PTR [eax],edx
c002cce2:	90                   	nop
c002cce3:	83 c4 0c             	add    esp,0xc
c002cce6:	c3                   	ret    
c002cce7:	90                   	nop

c002cce8 <ATAPI::readyForCommand()>:
c002cce8:	56                   	push   esi
c002cce9:	53                   	push   ebx
c002ccea:	53                   	push   ebx
c002cceb:	31 db                	xor    ebx,ebx
c002cced:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002ccf1:	51                   	push   ecx
c002ccf2:	6a 0c                	push   0xc
c002ccf4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002ccfb:	50                   	push   eax
c002ccfc:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002cd02:	e8 a1 e5 ff ff       	call   c002b2a8 <IDE::read(unsigned char, unsigned char)>
c002cd07:	83 c4 10             	add    esp,0x10
c002cd0a:	a8 88                	test   al,0x88
c002cd0c:	74 25                	je     c002cd33 <ATAPI::readyForCommand()+0x4b>
c002cd0e:	43                   	inc    ebx
c002cd0f:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c002cd15:	7e da                	jle    c002ccf1 <ATAPI::readyForCommand()+0x9>
c002cd17:	83 ec 0c             	sub    esp,0xc
c002cd1a:	68 5e 01 00 00       	push   0x15e
c002cd1f:	e8 0c 8c ff ff       	call   c0025930 <milliTenthSleep(unsigned int)>
c002cd24:	83 c4 10             	add    esp,0x10
c002cd27:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c002cd2d:	75 c2                	jne    c002ccf1 <ATAPI::readyForCommand()+0x9>
c002cd2f:	31 c0                	xor    eax,eax
c002cd31:	eb 02                	jmp    c002cd35 <ATAPI::readyForCommand()+0x4d>
c002cd33:	b0 01                	mov    al,0x1
c002cd35:	5a                   	pop    edx
c002cd36:	5b                   	pop    ebx
c002cd37:	5e                   	pop    esi
c002cd38:	c3                   	ret    
c002cd39:	90                   	nop

c002cd3a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002cd3a:	55                   	push   ebp
c002cd3b:	57                   	push   edi
c002cd3c:	56                   	push   esi
c002cd3d:	53                   	push   ebx
c002cd3e:	83 ec 20             	sub    esp,0x20
c002cd41:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002cd45:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002cd49:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002cd4d:	6a 01                	push   0x1
c002cd4f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cd56:	50                   	push   eax
c002cd57:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cd5d:	e8 94 e6 ff ff       	call   c002b3f6 <IDE::enableIRQs(unsigned char, bool)>
c002cd62:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cd69:	59                   	pop    ecx
c002cd6a:	5e                   	pop    esi
c002cd6b:	50                   	push   eax
c002cd6c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cd72:	e8 4b e4 ff ff       	call   c002b1c2 <IDE::prepareInterrupt(unsigned char)>
c002cd77:	89 3c 24             	mov    DWORD PTR [esp],edi
c002cd7a:	e8 69 ff ff ff       	call   c002cce8 <ATAPI::readyForCommand()>
c002cd7f:	83 c4 10             	add    esp,0x10
c002cd82:	84 c0                	test   al,al
c002cd84:	75 0a                	jne    c002cd90 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c002cd86:	bb 01 00 00 00       	mov    ebx,0x1
c002cd8b:	e9 5f 02 00 00       	jmp    c002cfef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002cd90:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c002cd96:	c1 e0 04             	shl    eax,0x4
c002cd99:	0f b6 c0             	movzx  eax,al
c002cd9c:	50                   	push   eax
c002cd9d:	6a 06                	push   0x6
c002cd9f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cda6:	50                   	push   eax
c002cda7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cdad:	e8 36 e4 ff ff       	call   c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002cdb2:	6a 00                	push   0x0
c002cdb4:	6a 01                	push   0x1
c002cdb6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cdbd:	50                   	push   eax
c002cdbe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cdc4:	e8 1f e4 ff ff       	call   c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002cdc9:	83 c4 20             	add    esp,0x20
c002cdcc:	0f b6 c3             	movzx  eax,bl
c002cdcf:	50                   	push   eax
c002cdd0:	0f b6 df             	movzx  ebx,bh
c002cdd3:	6a 04                	push   0x4
c002cdd5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cddc:	50                   	push   eax
c002cddd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cde3:	e8 00 e4 ff ff       	call   c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002cde8:	53                   	push   ebx
c002cde9:	6a 05                	push   0x5
c002cdeb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cdf2:	50                   	push   eax
c002cdf3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cdf9:	e8 ea e3 ff ff       	call   c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002cdfe:	83 c4 20             	add    esp,0x20
c002ce01:	68 a0 00 00 00       	push   0xa0
c002ce06:	6a 07                	push   0x7
c002ce08:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002ce0f:	50                   	push   eax
c002ce10:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002ce16:	e8 cd e3 ff ff       	call   c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ce1b:	83 c4 0c             	add    esp,0xc
c002ce1e:	6a 01                	push   0x1
c002ce20:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002ce27:	50                   	push   eax
c002ce28:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002ce2e:	e8 13 f1 ff ff       	call   c002bf46 <IDE::polling(unsigned char, unsigned int)>
c002ce33:	83 c4 10             	add    esp,0x10
c002ce36:	0f b6 d8             	movzx  ebx,al
c002ce39:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c002ce3f:	85 db                	test   ebx,ebx
c002ce41:	74 20                	je     c002ce63 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c002ce43:	53                   	push   ebx
c002ce44:	0f b6 c0             	movzx  eax,al
c002ce47:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c002ce4e:	52                   	push   edx
c002ce4f:	50                   	push   eax
c002ce50:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002ce56:	e8 31 f0 ff ff       	call   c002be8c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002ce5b:	83 c4 10             	add    esp,0x10
c002ce5e:	e9 8c 01 00 00       	jmp    c002cfef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002ce63:	52                   	push   edx
c002ce64:	0f b6 c0             	movzx  eax,al
c002ce67:	52                   	push   edx
c002ce68:	50                   	push   eax
c002ce69:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002ce6f:	e8 62 e3 ff ff       	call   c002b1d6 <IDE::getBase(unsigned char)>
c002ce74:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002ce78:	b9 06 00 00 00       	mov    ecx,0x6
c002ce7d:	89 c2                	mov    edx,eax
c002ce7f:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002ce82:	89 e8                	mov    eax,ebp
c002ce84:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002ce88:	83 c4 10             	add    esp,0x10
c002ce8b:	0f b6 c0             	movzx  eax,al
c002ce8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002ce92:	85 db                	test   ebx,ebx
c002ce94:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002ce9a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002cea1:	0f 84 eb 00 00 00    	je     c002cf92 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002cea7:	55                   	push   ebp
c002cea8:	55                   	push   ebp
c002cea9:	52                   	push   edx
c002ceaa:	50                   	push   eax
c002ceab:	e8 ac e4 ff ff       	call   c002b35c <IDE::waitInterrupt(unsigned char)>
c002ceb0:	83 c4 10             	add    esp,0x10
c002ceb3:	84 c0                	test   al,al
c002ceb5:	0f 84 cb fe ff ff    	je     c002cd86 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c002cebb:	56                   	push   esi
c002cebc:	56                   	push   esi
c002cebd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cec4:	50                   	push   eax
c002cec5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cecb:	e8 f2 e2 ff ff       	call   c002b1c2 <IDE::prepareInterrupt(unsigned char)>
c002ced0:	83 c4 0c             	add    esp,0xc
c002ced3:	6a 04                	push   0x4
c002ced5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cedc:	50                   	push   eax
c002cedd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cee3:	e8 c0 e3 ff ff       	call   c002b2a8 <IDE::read(unsigned char, unsigned char)>
c002cee8:	83 c4 0c             	add    esp,0xc
c002ceeb:	6a 05                	push   0x5
c002ceed:	89 c6                	mov    esi,eax
c002ceef:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cef6:	50                   	push   eax
c002cef7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cefd:	e8 a6 e3 ff ff       	call   c002b2a8 <IDE::read(unsigned char, unsigned char)>
c002cf02:	83 c4 10             	add    esp,0x10
c002cf05:	0f b6 e8             	movzx  ebp,al
c002cf08:	89 f0                	mov    eax,esi
c002cf0a:	c1 e5 08             	shl    ebp,0x8
c002cf0d:	0f b6 f0             	movzx  esi,al
c002cf10:	09 f5                	or     ebp,esi
c002cf12:	31 f6                	xor    esi,esi
c002cf14:	d1 fd                	sar    ebp,1
c002cf16:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002cf1b:	74 5c                	je     c002cf79 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c002cf1d:	39 ee                	cmp    esi,ebp
c002cf1f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002cf25:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002cf2c:	75 0d                	jne    c002cf3b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c002cf2e:	8d 0c 36             	lea    ecx,[esi+esi*1]
c002cf31:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c002cf35:	4b                   	dec    ebx
c002cf36:	e9 57 ff ff ff       	jmp    c002ce92 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c002cf3b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002cf3f:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c002cf43:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c002cf48:	51                   	push   ecx
c002cf49:	51                   	push   ecx
c002cf4a:	52                   	push   edx
c002cf4b:	50                   	push   eax
c002cf4c:	e8 85 e2 ff ff       	call   c002b1d6 <IDE::getBase(unsigned char)>
c002cf51:	89 c2                	mov    edx,eax
c002cf53:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c002cf58:	66 ef                	out    dx,ax
c002cf5a:	46                   	inc    esi
c002cf5b:	83 c4 10             	add    esp,0x10
c002cf5e:	eb bd                	jmp    c002cf1d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c002cf60:	51                   	push   ecx
c002cf61:	51                   	push   ecx
c002cf62:	52                   	push   edx
c002cf63:	50                   	push   eax
c002cf64:	e8 6d e2 ff ff       	call   c002b1d6 <IDE::getBase(unsigned char)>
c002cf69:	89 c2                	mov    edx,eax
c002cf6b:	66 ed                	in     ax,dx
c002cf6d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c002cf71:	83 c4 10             	add    esp,0x10
c002cf74:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c002cf78:	46                   	inc    esi
c002cf79:	39 ee                	cmp    esi,ebp
c002cf7b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002cf81:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002cf88:	75 d6                	jne    c002cf60 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c002cf8a:	01 f6                	add    esi,esi
c002cf8c:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c002cf90:	eb a3                	jmp    c002cf35 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c002cf92:	51                   	push   ecx
c002cf93:	51                   	push   ecx
c002cf94:	52                   	push   edx
c002cf95:	50                   	push   eax
c002cf96:	e8 c1 e3 ff ff       	call   c002b35c <IDE::waitInterrupt(unsigned char)>
c002cf9b:	83 c4 10             	add    esp,0x10
c002cf9e:	84 c0                	test   al,al
c002cfa0:	0f 84 e0 fd ff ff    	je     c002cd86 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c002cfa6:	52                   	push   edx
c002cfa7:	bb a0 86 01 00       	mov    ebx,0x186a0
c002cfac:	52                   	push   edx
c002cfad:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cfb4:	50                   	push   eax
c002cfb5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cfbb:	e8 02 e2 ff ff       	call   c002b1c2 <IDE::prepareInterrupt(unsigned char)>
c002cfc0:	83 c4 10             	add    esp,0x10
c002cfc3:	50                   	push   eax
c002cfc4:	50                   	push   eax
c002cfc5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002cfcc:	50                   	push   eax
c002cfcd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002cfd3:	e8 fe e1 ff ff       	call   c002b1d6 <IDE::getBase(unsigned char)>
c002cfd8:	8d 50 07             	lea    edx,[eax+0x7]
c002cfdb:	ec                   	in     al,dx
c002cfdc:	83 c4 10             	add    esp,0x10
c002cfdf:	a8 88                	test   al,0x88
c002cfe1:	74 0a                	je     c002cfed <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002cfe3:	4b                   	dec    ebx
c002cfe4:	75 dd                	jne    c002cfc3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002cfe6:	bb 02 00 00 00       	mov    ebx,0x2
c002cfeb:	eb 02                	jmp    c002cfef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002cfed:	31 db                	xor    ebx,ebx
c002cfef:	83 c4 1c             	add    esp,0x1c
c002cff2:	89 d8                	mov    eax,ebx
c002cff4:	5b                   	pop    ebx
c002cff5:	5e                   	pop    esi
c002cff6:	5f                   	pop    edi
c002cff7:	5d                   	pop    ebp
c002cff8:	c3                   	ret    
c002cff9:	90                   	nop

c002cffa <ATAPI::diskRemoved()>:
c002cffa:	53                   	push   ebx
c002cffb:	83 ec 14             	sub    esp,0x14
c002cffe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002d002:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002d009:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c002d00f:	e8 74 f9 fe ff       	call   c001c988 <LogicalDisk::unmount()>
c002d014:	58                   	pop    eax
c002d015:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002d01b:	e8 48 03 ff ff       	call   c001d368 <VCache::writeWriteBuffer()>
c002d020:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c002d026:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002d02a:	83 c4 18             	add    esp,0x18
c002d02d:	5b                   	pop    ebx
c002d02e:	e9 25 03 ff ff       	jmp    c001d358 <VCache::invalidateReadBuffer()>
c002d033:	90                   	nop

c002d034 <ATAPI::eject()>:
c002d034:	57                   	push   edi
c002d035:	b9 03 00 00 00       	mov    ecx,0x3
c002d03a:	53                   	push   ebx
c002d03b:	83 ec 14             	sub    esp,0x14
c002d03e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002d042:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002d046:	fc                   	cld    
c002d047:	31 c0                	xor    eax,eax
c002d049:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d04b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002d050:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002d055:	50                   	push   eax
c002d056:	50                   	push   eax
c002d057:	6a 00                	push   0x0
c002d059:	6a 00                	push   0x0
c002d05b:	6a 00                	push   0x0
c002d05d:	6a 02                	push   0x2
c002d05f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002d063:	50                   	push   eax
c002d064:	53                   	push   ebx
c002d065:	e8 d0 fc ff ff       	call   c002cd3a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002d06a:	83 c4 14             	add    esp,0x14
c002d06d:	53                   	push   ebx
c002d06e:	e8 87 ff ff ff       	call   c002cffa <ATAPI::diskRemoved()>
c002d073:	83 c4 24             	add    esp,0x24
c002d076:	31 c0                	xor    eax,eax
c002d078:	5b                   	pop    ebx
c002d079:	5f                   	pop    edi
c002d07a:	c3                   	ret    
c002d07b:	90                   	nop

c002d07c <ATAPI::diskInserted()>:
c002d07c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002d080:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c002d087:	c3                   	ret    

c002d088 <ATAPI::detectMedia()>:
c002d088:	56                   	push   esi
c002d089:	53                   	push   ebx
c002d08a:	83 ec 28             	sub    esp,0x28
c002d08d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002d091:	6a 0c                	push   0xc
c002d093:	6a 00                	push   0x0
c002d095:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002d099:	56                   	push   esi
c002d09a:	e8 51 34 fd ff       	call   c00004f0 <memset>
c002d09f:	58                   	pop    eax
c002d0a0:	5a                   	pop    edx
c002d0a1:	6a 00                	push   0x0
c002d0a3:	6a 00                	push   0x0
c002d0a5:	6a 00                	push   0x0
c002d0a7:	6a 00                	push   0x0
c002d0a9:	56                   	push   esi
c002d0aa:	53                   	push   ebx
c002d0ab:	e8 8a fc ff ff       	call   c002cd3a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002d0b0:	83 c4 1c             	add    esp,0x1c
c002d0b3:	6a 0c                	push   0xc
c002d0b5:	6a 00                	push   0x0
c002d0b7:	56                   	push   esi
c002d0b8:	e8 33 34 fd ff       	call   c00004f0 <memset>
c002d0bd:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002d0c2:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002d0c7:	59                   	pop    ecx
c002d0c8:	58                   	pop    eax
c002d0c9:	6a 01                	push   0x1
c002d0cb:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002d0cf:	50                   	push   eax
c002d0d0:	6a 00                	push   0x0
c002d0d2:	6a 12                	push   0x12
c002d0d4:	56                   	push   esi
c002d0d5:	53                   	push   ebx
c002d0d6:	e8 5f fc ff ff       	call   c002cd3a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002d0db:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002d0df:	83 c4 20             	add    esp,0x20
c002d0e2:	83 e0 7f             	and    eax,0x7f
c002d0e5:	83 f8 70             	cmp    eax,0x70
c002d0e8:	74 15                	je     c002d0ff <ATAPI::detectMedia()+0x77>
c002d0ea:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002d0f1:	75 0c                	jne    c002d0ff <ATAPI::detectMedia()+0x77>
c002d0f3:	83 ec 0c             	sub    esp,0xc
c002d0f6:	53                   	push   ebx
c002d0f7:	e8 80 ff ff ff       	call   c002d07c <ATAPI::diskInserted()>
c002d0fc:	83 c4 10             	add    esp,0x10
c002d0ff:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002d103:	83 e0 0f             	and    eax,0xf
c002d106:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002d10b:	0f b6 c0             	movzx  eax,al
c002d10e:	75 19                	jne    c002d129 <ATAPI::detectMedia()+0xa1>
c002d110:	83 f8 02             	cmp    eax,0x2
c002d113:	75 14                	jne    c002d129 <ATAPI::detectMedia()+0xa1>
c002d115:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002d11c:	74 24                	je     c002d142 <ATAPI::detectMedia()+0xba>
c002d11e:	83 ec 0c             	sub    esp,0xc
c002d121:	53                   	push   ebx
c002d122:	e8 d3 fe ff ff       	call   c002cffa <ATAPI::diskRemoved()>
c002d127:	eb 16                	jmp    c002d13f <ATAPI::detectMedia()+0xb7>
c002d129:	85 c0                	test   eax,eax
c002d12b:	75 15                	jne    c002d142 <ATAPI::detectMedia()+0xba>
c002d12d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002d134:	75 0c                	jne    c002d142 <ATAPI::detectMedia()+0xba>
c002d136:	83 ec 0c             	sub    esp,0xc
c002d139:	53                   	push   ebx
c002d13a:	e8 3d ff ff ff       	call   c002d07c <ATAPI::diskInserted()>
c002d13f:	83 c4 10             	add    esp,0x10
c002d142:	83 c4 24             	add    esp,0x24
c002d145:	5b                   	pop    ebx
c002d146:	5e                   	pop    esi
c002d147:	c3                   	ret    

c002d148 <ATAPI::open(int, int, void*)>:
c002d148:	56                   	push   esi
c002d149:	53                   	push   ebx
c002d14a:	50                   	push   eax
c002d14b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002d14f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002d153:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002d157:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002d15d:	c1 e0 06             	shl    eax,0x6
c002d160:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002d166:	01 d0                	add    eax,edx
c002d168:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002d16f:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002d175:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002d17c:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002d186:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002d18d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002d193:	6a 04                	push   0x4
c002d195:	6a 0c                	push   0xc
c002d197:	51                   	push   ecx
c002d198:	52                   	push   edx
c002d199:	e8 4a e0 ff ff       	call   c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002d19e:	90                   	nop
c002d19f:	90                   	nop
c002d1a0:	6a 00                	push   0x0
c002d1a2:	6a 0c                	push   0xc
c002d1a4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002d1ab:	50                   	push   eax
c002d1ac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002d1b2:	e8 31 e0 ff ff       	call   c002b1e8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002d1b7:	83 c4 14             	add    esp,0x14
c002d1ba:	68 78 01 00 00       	push   0x178
c002d1bf:	e8 c4 94 fe ff       	call   c0016688 <malloc>
c002d1c4:	83 c4 0c             	add    esp,0xc
c002d1c7:	6a 00                	push   0x0
c002d1c9:	68 ff ff ff 7f       	push   0x7fffffff
c002d1ce:	6a 00                	push   0x0
c002d1d0:	6a 00                	push   0x0
c002d1d2:	53                   	push   ebx
c002d1d3:	68 8b 43 03 c0       	push   0xc003438b
c002d1d8:	89 c6                	mov    esi,eax
c002d1da:	50                   	push   eax
c002d1db:	e8 e6 f5 fe ff       	call   c001c7c6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002d1e0:	83 c4 14             	add    esp,0x14
c002d1e3:	56                   	push   esi
c002d1e4:	e8 9d f6 fe ff       	call   c001c886 <LogicalDisk::assignDriveLetter()>
c002d1e9:	5a                   	pop    edx
c002d1ea:	59                   	pop    ecx
c002d1eb:	0f be c0             	movsx  eax,al
c002d1ee:	50                   	push   eax
c002d1ef:	68 d0 41 03 c0       	push   0xc00341d0
c002d1f4:	e8 c5 c2 fe ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c002d1f9:	58                   	pop    eax
c002d1fa:	5a                   	pop    edx
c002d1fb:	56                   	push   esi
c002d1fc:	53                   	push   ebx
c002d1fd:	e8 08 e4 fe ff       	call   c001b60a <Device::addChild(Device*)>
c002d202:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c002d208:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d20b:	e8 46 e8 fe ff       	call   c001ba56 <PhysicalDisk::startCache()>
c002d210:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002d217:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d21a:	e8 69 fe ff ff       	call   c002d088 <ATAPI::detectMedia()>
c002d21f:	83 c4 14             	add    esp,0x14
c002d222:	31 c0                	xor    eax,eax
c002d224:	5b                   	pop    ebx
c002d225:	5e                   	pop    esi
c002d226:	c3                   	ret    
c002d227:	90                   	nop

c002d228 <ATAPI::read(unsigned long long, int, void*)>:
c002d228:	55                   	push   ebp
c002d229:	57                   	push   edi
c002d22a:	56                   	push   esi
c002d22b:	53                   	push   ebx
c002d22c:	83 ec 1c             	sub    esp,0x1c
c002d22f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002d233:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002d237:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002d23b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002d242:	74 3c                	je     c002d280 <ATAPI::read(unsigned long long, int, void*)+0x58>
c002d244:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002d248:	b9 03 00 00 00       	mov    ecx,0x3
c002d24d:	fc                   	cld    
c002d24e:	31 c0                	xor    eax,eax
c002d250:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d252:	89 e8                	mov    eax,ebp
c002d254:	0f ce                	bswap  esi
c002d256:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002d25a:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002d25f:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c002d263:	50                   	push   eax
c002d264:	50                   	push   eax
c002d265:	55                   	push   ebp
c002d266:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002d26a:	c1 e5 0b             	shl    ebp,0xb
c002d26d:	6a 00                	push   0x0
c002d26f:	55                   	push   ebp
c002d270:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002d274:	50                   	push   eax
c002d275:	53                   	push   ebx
c002d276:	e8 bf fa ff ff       	call   c002cd3a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002d27b:	83 c4 20             	add    esp,0x20
c002d27e:	eb 1a                	jmp    c002d29a <ATAPI::read(unsigned long long, int, void*)+0x72>
c002d280:	83 ec 0c             	sub    esp,0xc
c002d283:	53                   	push   ebx
c002d284:	e8 ff fd ff ff       	call   c002d088 <ATAPI::detectMedia()>
c002d289:	83 c4 10             	add    esp,0x10
c002d28c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002d293:	75 af                	jne    c002d244 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002d295:	b8 02 00 00 00       	mov    eax,0x2
c002d29a:	83 c4 1c             	add    esp,0x1c
c002d29d:	5b                   	pop    ebx
c002d29e:	5e                   	pop    esi
c002d29f:	5f                   	pop    edi
c002d2a0:	5d                   	pop    ebp
c002d2a1:	c3                   	ret    

c002d2a2 <SATA::close(int, int, void*)>:
c002d2a2:	83 ec 0c             	sub    esp,0xc
c002d2a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d2a9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002d2af:	85 c0                	test   eax,eax
c002d2b1:	74 0c                	je     c002d2bf <SATA::close(int, int, void*)+0x1d>
c002d2b3:	8b 10                	mov    edx,DWORD PTR [eax]
c002d2b5:	83 ec 0c             	sub    esp,0xc
c002d2b8:	50                   	push   eax
c002d2b9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002d2bc:	83 c4 10             	add    esp,0x10
c002d2bf:	31 c0                	xor    eax,eax
c002d2c1:	83 c4 0c             	add    esp,0xc
c002d2c4:	c3                   	ret    
c002d2c5:	90                   	nop

c002d2c6 <SATA::powerSaving(PowerSavingLevel)>:
c002d2c6:	c3                   	ret    
c002d2c7:	90                   	nop

c002d2c8 <SATA::open(int, int, void*)>:
c002d2c8:	56                   	push   esi
c002d2c9:	53                   	push   ebx
c002d2ca:	83 ec 10             	sub    esp,0x10
c002d2cd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002d2d1:	68 18 42 03 c0       	push   0xc0034218
c002d2d6:	e8 e3 c1 fe ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c002d2db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002d2df:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002d2e9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002d2f3:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002d2f9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002d2fd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002d307:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002d30e:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002d314:	e8 7e 96 fe ff       	call   c0016997 <Phys::allocatePage()>
c002d319:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002d31f:	89 c6                	mov    esi,eax
c002d321:	e8 71 96 fe ff       	call   c0016997 <Phys::allocatePage()>
c002d326:	81 c6 00 10 00 00    	add    esi,0x1000
c002d32c:	83 c4 10             	add    esp,0x10
c002d32f:	39 c6                	cmp    esi,eax
c002d331:	74 10                	je     c002d343 <SATA::open(int, int, void*)+0x7b>
c002d333:	83 ec 0c             	sub    esp,0xc
c002d336:	68 24 42 03 c0       	push   0xc0034224
c002d33b:	e8 c2 33 ff ff       	call   c0020702 <KePanic(char const*)>
c002d340:	83 c4 10             	add    esp,0x10
c002d343:	83 ec 0c             	sub    esp,0xc
c002d346:	6a 02                	push   0x2
c002d348:	e8 5c ae fe ff       	call   c00181a9 <Virt::allocateKernelVirtualPages(int)>
c002d34d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002d353:	6a 03                	push   0x3
c002d355:	50                   	push   eax
c002d356:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002d35c:	ff 35 b0 ba 03 c0    	push   DWORD PTR ds:0xc003bab0
c002d362:	e8 4b b5 fe ff       	call   c00188b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c002d367:	83 c4 14             	add    esp,0x14
c002d36a:	53                   	push   ebx
c002d36b:	e8 e6 e6 fe ff       	call   c001ba56 <PhysicalDisk::startCache()>
c002d370:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d373:	e8 22 f9 fe ff       	call   c001cc9a <createPartitionsForDisk(PhysicalDisk*)>
c002d378:	83 c4 14             	add    esp,0x14
c002d37b:	31 c0                	xor    eax,eax
c002d37d:	5b                   	pop    ebx
c002d37e:	5e                   	pop    esi
c002d37f:	c3                   	ret    

c002d380 <SATA::SATA()>:
c002d380:	83 ec 0c             	sub    esp,0xc
c002d383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d387:	83 ec 04             	sub    esp,0x4
c002d38a:	68 00 02 00 00       	push   0x200
c002d38f:	68 38 42 03 c0       	push   0xc0034238
c002d394:	50                   	push   eax
c002d395:	e8 54 e6 fe ff       	call   c001b9ee <PhysicalDisk::PhysicalDisk(char const*, int)>
c002d39a:	83 c4 10             	add    esp,0x10
c002d39d:	ba a8 42 03 c0       	mov    edx,0xc00342a8
c002d3a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d3a6:	89 10                	mov    DWORD PTR [eax],edx
c002d3a8:	90                   	nop
c002d3a9:	83 c4 0c             	add    esp,0xc
c002d3ac:	c3                   	ret    
c002d3ad:	90                   	nop

c002d3ae <SATA::access(unsigned long long, int, void*, bool)>:
c002d3ae:	55                   	push   ebp
c002d3af:	57                   	push   edi
c002d3b0:	56                   	push   esi
c002d3b1:	53                   	push   ebx
c002d3b2:	83 ec 2c             	sub    esp,0x2c
c002d3b5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002d3b9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002d3bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002d3c1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002d3c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002d3c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002d3cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d3d1:	fa                   	cli    
c002d3d2:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c002d3d8:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002d3dd:	7e 10                	jle    c002d3ef <SATA::access(unsigned long long, int, void*, bool)+0x41>
c002d3df:	83 ec 0c             	sub    esp,0xc
c002d3e2:	68 48 42 03 c0       	push   0xc0034248
c002d3e7:	e8 16 33 ff ff       	call   c0020702 <KePanic(char const*)>
c002d3ec:	83 c4 10             	add    esp,0x10
c002d3ef:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002d3f5:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c002d3fb:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002d401:	89 e8                	mov    eax,ebp
c002d403:	c1 e0 07             	shl    eax,0x7
c002d406:	01 d0                	add    eax,edx
c002d408:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002d412:	8d 45 02             	lea    eax,[ebp+0x2]
c002d415:	51                   	push   ecx
c002d416:	c1 e0 07             	shl    eax,0x7
c002d419:	51                   	push   ecx
c002d41a:	01 d0                	add    eax,edx
c002d41c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c002d420:	50                   	push   eax
c002d421:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002d427:	e8 fa eb ff ff       	call   c002c026 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002d42c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002d430:	83 c4 10             	add    esp,0x10
c002d433:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c002d438:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002d43c:	0f 84 ac 01 00 00    	je     c002d5ee <SATA::access(unsigned long long, int, void*, bool)+0x240>
c002d442:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002d446:	c1 e0 09             	shl    eax,0x9
c002d449:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002d44e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002d452:	74 0e                	je     c002d462 <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c002d454:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c002d45a:	89 c1                	mov    ecx,eax
c002d45c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002d460:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d462:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002d466:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002d46c:	8d 45 02             	lea    eax,[ebp+0x2]
c002d46f:	c1 e0 07             	shl    eax,0x7
c002d472:	01 d0                	add    eax,edx
c002d474:	8b 00                	mov    eax,DWORD PTR [eax]
c002d476:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002d47c:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002d482:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002d486:	c1 e1 05             	shl    ecx,0x5
c002d489:	01 c8                	add    eax,ecx
c002d48b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002d48f:	83 e1 01             	and    ecx,0x1
c002d492:	89 ce                	mov    esi,ecx
c002d494:	8a 08                	mov    cl,BYTE PTR [eax]
c002d496:	c1 e6 06             	shl    esi,0x6
c002d499:	83 e1 bf             	and    ecx,0xffffffbf
c002d49c:	09 f1                	or     ecx,esi
c002d49e:	88 08                	mov    BYTE PTR [eax],cl
c002d4a0:	8b 08                	mov    ecx,DWORD PTR [eax]
c002d4a2:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002d4a8:	81 c9 05 00 01 00    	or     ecx,0x10005
c002d4ae:	89 08                	mov    DWORD PTR [eax],ecx
c002d4b0:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002d4b6:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002d4bc:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c002d4c2:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c002d4c5:	50                   	push   eax
c002d4c6:	68 90 00 00 00       	push   0x90
c002d4cb:	6a 00                	push   0x0
c002d4cd:	56                   	push   esi
c002d4ce:	e8 1d 30 fd ff       	call   c00004f0 <memset>
c002d4d3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002d4d9:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002d4df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d4e3:	83 c4 10             	add    esp,0x10
c002d4e6:	48                   	dec    eax
c002d4e7:	25 ff ff 3f 00       	and    eax,0x3fffff
c002d4ec:	89 c1                	mov    ecx,eax
c002d4ee:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c002d4f4:	25 00 00 c0 ff       	and    eax,0xffc00000
c002d4f9:	09 c8                	or     eax,ecx
c002d4fb:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002d501:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c002d507:	83 c8 80             	or     eax,0xffffff80
c002d50a:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c002d510:	66 8b 06             	mov    ax,WORD PTR [esi]
c002d513:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002d517:	25 00 7f 00 00       	and    eax,0x7f00
c002d51c:	0d 27 80 ff ff       	or     eax,0xffff8027
c002d521:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002d526:	66 89 06             	mov    WORD PTR [esi],ax
c002d529:	b0 35                	mov    al,0x35
c002d52b:	75 02                	jne    c002d52f <SATA::access(unsigned long long, int, void*, bool)+0x181>
c002d52d:	b0 25                	mov    al,0x25
c002d52f:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002d532:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d536:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002d53a:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c002d53e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d542:	c1 e8 10             	shr    eax,0x10
c002d545:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c002d548:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d54c:	c1 e8 18             	shr    eax,0x18
c002d54f:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002d552:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002d556:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c002d559:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002d55d:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002d560:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002d564:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c002d568:	89 ee                	mov    esi,ebp
c002d56a:	31 c0                	xor    eax,eax
c002d56c:	c1 e6 07             	shl    esi,0x7
c002d56f:	01 d6                	add    esi,edx
c002d571:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c002d577:	80 e1 88             	and    cl,0x88
c002d57a:	74 0a                	je     c002d586 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c002d57c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d581:	74 0a                	je     c002d58d <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c002d583:	40                   	inc    eax
c002d584:	eb eb                	jmp    c002d571 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c002d586:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d58b:	75 0a                	jne    c002d597 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c002d58d:	83 ec 0c             	sub    esp,0xc
c002d590:	68 81 42 03 c0       	push   0xc0034281
c002d595:	eb 34                	jmp    c002d5cb <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c002d597:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c002d59b:	c1 e5 07             	shl    ebp,0x7
c002d59e:	b8 01 00 00 00       	mov    eax,0x1
c002d5a3:	01 ea                	add    edx,ebp
c002d5a5:	d3 e0                	shl    eax,cl
c002d5a7:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002d5ad:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c002d5b3:	85 c8                	test   eax,ecx
c002d5b5:	74 2b                	je     c002d5e2 <SATA::access(unsigned long long, int, void*, bool)+0x234>
c002d5b7:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002d5bd:	0f ba e1 1e          	bt     ecx,0x1e
c002d5c1:	73 ea                	jae    c002d5ad <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c002d5c3:	83 ec 0c             	sub    esp,0xc
c002d5c6:	68 8f 42 03 c0       	push   0xc003428f
c002d5cb:	e8 ee be fe ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c002d5d0:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002d5d5:	83 c4 10             	add    esp,0x10
c002d5d8:	48                   	dec    eax
c002d5d9:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c002d5de:	85 c0                	test   eax,eax
c002d5e0:	eb 17                	jmp    c002d5f9 <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c002d5e2:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c002d5e8:	0f ba e0 1e          	bt     eax,0x1e
c002d5ec:	73 15                	jae    c002d603 <SATA::access(unsigned long long, int, void*, bool)+0x255>
c002d5ee:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002d5f3:	48                   	dec    eax
c002d5f4:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c002d5f9:	75 01                	jne    c002d5fc <SATA::access(unsigned long long, int, void*, bool)+0x24e>
c002d5fb:	fb                   	sti    
c002d5fc:	b8 01 00 00 00       	mov    eax,0x1
c002d601:	eb 29                	jmp    c002d62c <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002d603:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002d608:	75 10                	jne    c002d61a <SATA::access(unsigned long long, int, void*, bool)+0x26c>
c002d60a:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002d610:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002d614:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002d618:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d61a:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002d61f:	48                   	dec    eax
c002d620:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c002d625:	75 03                	jne    c002d62a <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c002d627:	fb                   	sti    
c002d628:	eb 02                	jmp    c002d62c <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002d62a:	31 c0                	xor    eax,eax
c002d62c:	83 c4 2c             	add    esp,0x2c
c002d62f:	5b                   	pop    ebx
c002d630:	5e                   	pop    esi
c002d631:	5f                   	pop    edi
c002d632:	5d                   	pop    ebp
c002d633:	c3                   	ret    

c002d634 <SATA::read(unsigned long long, int, void*)>:
c002d634:	55                   	push   ebp
c002d635:	57                   	push   edi
c002d636:	56                   	push   esi
c002d637:	be 04 00 00 00       	mov    esi,0x4
c002d63c:	53                   	push   ebx
c002d63d:	83 ec 0c             	sub    esp,0xc
c002d640:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002d644:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002d648:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002d64c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002d650:	8d 7b ff             	lea    edi,[ebx-0x1]
c002d653:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002d659:	0f 87 1a 02 00 00    	ja     c002d879 <SATA::read(unsigned long long, int, void*)+0x245>
c002d65f:	85 c9                	test   ecx,ecx
c002d661:	be 06 00 00 00       	mov    esi,0x6
c002d666:	0f 84 0d 02 00 00    	je     c002d879 <SATA::read(unsigned long long, int, void*)+0x245>
c002d66c:	56                   	push   esi
c002d66d:	56                   	push   esi
c002d66e:	6a 00                	push   0x0
c002d670:	51                   	push   ecx
c002d671:	53                   	push   ebx
c002d672:	52                   	push   edx
c002d673:	50                   	push   eax
c002d674:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002d678:	e8 31 fd ff ff       	call   c002d3ae <SATA::access(unsigned long long, int, void*, bool)>
c002d67d:	83 c4 20             	add    esp,0x20
c002d680:	85 c0                	test   eax,eax
c002d682:	89 c6                	mov    esi,eax
c002d684:	0f 85 ea 01 00 00    	jne    c002d874 <SATA::read(unsigned long long, int, void*)+0x240>
c002d68a:	50                   	push   eax
c002d68b:	50                   	push   eax
c002d68c:	6a 0f                	push   0xf
c002d68e:	6a 00                	push   0x0
c002d690:	01 1d b4 1b 04 c0    	add    DWORD PTR ds:0xc0041bb4,ebx
c002d696:	bb 0a 00 00 00       	mov    ebx,0xa
c002d69b:	e8 3b f2 ff ff       	call   c002c8db <combineColours(unsigned char, unsigned char)>
c002d6a0:	5a                   	pop    edx
c002d6a1:	59                   	pop    ecx
c002d6a2:	b9 10 27 00 00       	mov    ecx,0x2710
c002d6a7:	0f b6 c0             	movzx  eax,al
c002d6aa:	50                   	push   eax
c002d6ab:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002d6b0:	99                   	cdq    
c002d6b1:	f7 f9                	idiv   ecx
c002d6b3:	99                   	cdq    
c002d6b4:	f7 fb                	idiv   ebx
c002d6b6:	8d 42 30             	lea    eax,[edx+0x30]
c002d6b9:	0f b6 c0             	movzx  eax,al
c002d6bc:	50                   	push   eax
c002d6bd:	e8 08 f2 ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002d6c2:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002d6c8:	5f                   	pop    edi
c002d6c9:	5d                   	pop    ebp
c002d6ca:	bd e8 03 00 00       	mov    ebp,0x3e8
c002d6cf:	6a 0f                	push   0xf
c002d6d1:	6a 00                	push   0x0
c002d6d3:	e8 03 f2 ff ff       	call   c002c8db <combineColours(unsigned char, unsigned char)>
c002d6d8:	5a                   	pop    edx
c002d6d9:	59                   	pop    ecx
c002d6da:	0f b6 c0             	movzx  eax,al
c002d6dd:	50                   	push   eax
c002d6de:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002d6e3:	99                   	cdq    
c002d6e4:	f7 fd                	idiv   ebp
c002d6e6:	99                   	cdq    
c002d6e7:	f7 fb                	idiv   ebx
c002d6e9:	8d 42 30             	lea    eax,[edx+0x30]
c002d6ec:	0f b6 c0             	movzx  eax,al
c002d6ef:	50                   	push   eax
c002d6f0:	e8 d5 f1 ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002d6f5:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002d6fb:	5f                   	pop    edi
c002d6fc:	bf 64 00 00 00       	mov    edi,0x64
c002d701:	58                   	pop    eax
c002d702:	6a 0f                	push   0xf
c002d704:	6a 00                	push   0x0
c002d706:	e8 d0 f1 ff ff       	call   c002c8db <combineColours(unsigned char, unsigned char)>
c002d70b:	5a                   	pop    edx
c002d70c:	59                   	pop    ecx
c002d70d:	0f b6 c0             	movzx  eax,al
c002d710:	50                   	push   eax
c002d711:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002d716:	99                   	cdq    
c002d717:	f7 ff                	idiv   edi
c002d719:	99                   	cdq    
c002d71a:	f7 fb                	idiv   ebx
c002d71c:	8d 42 30             	lea    eax,[edx+0x30]
c002d71f:	0f b6 c0             	movzx  eax,al
c002d722:	50                   	push   eax
c002d723:	e8 a2 f1 ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002d728:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002d72e:	58                   	pop    eax
c002d72f:	5a                   	pop    edx
c002d730:	6a 0f                	push   0xf
c002d732:	6a 00                	push   0x0
c002d734:	e8 a2 f1 ff ff       	call   c002c8db <combineColours(unsigned char, unsigned char)>
c002d739:	59                   	pop    ecx
c002d73a:	5a                   	pop    edx
c002d73b:	0f b6 c0             	movzx  eax,al
c002d73e:	50                   	push   eax
c002d73f:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002d744:	99                   	cdq    
c002d745:	f7 fb                	idiv   ebx
c002d747:	99                   	cdq    
c002d748:	f7 fb                	idiv   ebx
c002d74a:	8d 42 30             	lea    eax,[edx+0x30]
c002d74d:	0f b6 c0             	movzx  eax,al
c002d750:	50                   	push   eax
c002d751:	e8 74 f1 ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002d756:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002d75c:	59                   	pop    ecx
c002d75d:	58                   	pop    eax
c002d75e:	6a 0f                	push   0xf
c002d760:	6a 00                	push   0x0
c002d762:	e8 74 f1 ff ff       	call   c002c8db <combineColours(unsigned char, unsigned char)>
c002d767:	5a                   	pop    edx
c002d768:	59                   	pop    ecx
c002d769:	0f b6 c0             	movzx  eax,al
c002d76c:	50                   	push   eax
c002d76d:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002d772:	99                   	cdq    
c002d773:	f7 fb                	idiv   ebx
c002d775:	83 c2 30             	add    edx,0x30
c002d778:	0f b6 d2             	movzx  edx,dl
c002d77b:	52                   	push   edx
c002d77c:	e8 49 f1 ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002d781:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002d787:	58                   	pop    eax
c002d788:	5a                   	pop    edx
c002d789:	6a 0f                	push   0xf
c002d78b:	6a 00                	push   0x0
c002d78d:	e8 49 f1 ff ff       	call   c002c8db <combineColours(unsigned char, unsigned char)>
c002d792:	59                   	pop    ecx
c002d793:	b9 10 27 00 00       	mov    ecx,0x2710
c002d798:	5a                   	pop    edx
c002d799:	0f b6 c0             	movzx  eax,al
c002d79c:	50                   	push   eax
c002d79d:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002d7a2:	99                   	cdq    
c002d7a3:	f7 f9                	idiv   ecx
c002d7a5:	99                   	cdq    
c002d7a6:	f7 fb                	idiv   ebx
c002d7a8:	8d 42 30             	lea    eax,[edx+0x30]
c002d7ab:	0f b6 c0             	movzx  eax,al
c002d7ae:	50                   	push   eax
c002d7af:	e8 16 f1 ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002d7b4:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002d7ba:	59                   	pop    ecx
c002d7bb:	58                   	pop    eax
c002d7bc:	6a 0f                	push   0xf
c002d7be:	6a 00                	push   0x0
c002d7c0:	e8 16 f1 ff ff       	call   c002c8db <combineColours(unsigned char, unsigned char)>
c002d7c5:	5a                   	pop    edx
c002d7c6:	59                   	pop    ecx
c002d7c7:	0f b6 c0             	movzx  eax,al
c002d7ca:	50                   	push   eax
c002d7cb:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002d7d0:	99                   	cdq    
c002d7d1:	f7 fd                	idiv   ebp
c002d7d3:	99                   	cdq    
c002d7d4:	f7 fb                	idiv   ebx
c002d7d6:	8d 42 30             	lea    eax,[edx+0x30]
c002d7d9:	0f b6 c0             	movzx  eax,al
c002d7dc:	50                   	push   eax
c002d7dd:	e8 e8 f0 ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002d7e2:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002d7e8:	5d                   	pop    ebp
c002d7e9:	58                   	pop    eax
c002d7ea:	6a 0f                	push   0xf
c002d7ec:	6a 00                	push   0x0
c002d7ee:	e8 e8 f0 ff ff       	call   c002c8db <combineColours(unsigned char, unsigned char)>
c002d7f3:	5a                   	pop    edx
c002d7f4:	59                   	pop    ecx
c002d7f5:	0f b6 c0             	movzx  eax,al
c002d7f8:	50                   	push   eax
c002d7f9:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002d7fe:	99                   	cdq    
c002d7ff:	f7 ff                	idiv   edi
c002d801:	99                   	cdq    
c002d802:	f7 fb                	idiv   ebx
c002d804:	8d 42 30             	lea    eax,[edx+0x30]
c002d807:	0f b6 c0             	movzx  eax,al
c002d80a:	50                   	push   eax
c002d80b:	e8 ba f0 ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002d810:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002d816:	5f                   	pop    edi
c002d817:	5d                   	pop    ebp
c002d818:	6a 0f                	push   0xf
c002d81a:	6a 00                	push   0x0
c002d81c:	e8 ba f0 ff ff       	call   c002c8db <combineColours(unsigned char, unsigned char)>
c002d821:	5a                   	pop    edx
c002d822:	59                   	pop    ecx
c002d823:	0f b6 c0             	movzx  eax,al
c002d826:	50                   	push   eax
c002d827:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002d82c:	99                   	cdq    
c002d82d:	f7 fb                	idiv   ebx
c002d82f:	99                   	cdq    
c002d830:	f7 fb                	idiv   ebx
c002d832:	8d 42 30             	lea    eax,[edx+0x30]
c002d835:	0f b6 c0             	movzx  eax,al
c002d838:	50                   	push   eax
c002d839:	e8 8c f0 ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002d83e:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002d844:	5f                   	pop    edi
c002d845:	5d                   	pop    ebp
c002d846:	6a 0f                	push   0xf
c002d848:	6a 00                	push   0x0
c002d84a:	e8 8c f0 ff ff       	call   c002c8db <combineColours(unsigned char, unsigned char)>
c002d84f:	5a                   	pop    edx
c002d850:	59                   	pop    ecx
c002d851:	0f b6 c0             	movzx  eax,al
c002d854:	50                   	push   eax
c002d855:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002d85a:	99                   	cdq    
c002d85b:	f7 fb                	idiv   ebx
c002d85d:	83 c2 30             	add    edx,0x30
c002d860:	0f b6 d2             	movzx  edx,dl
c002d863:	52                   	push   edx
c002d864:	e8 61 f0 ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002d869:	83 c4 10             	add    esp,0x10
c002d86c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002d872:	eb 05                	jmp    c002d879 <SATA::read(unsigned long long, int, void*)+0x245>
c002d874:	be 01 00 00 00       	mov    esi,0x1
c002d879:	83 c4 0c             	add    esp,0xc
c002d87c:	89 f0                	mov    eax,esi
c002d87e:	5b                   	pop    ebx
c002d87f:	5e                   	pop    esi
c002d880:	5f                   	pop    edi
c002d881:	5d                   	pop    ebp
c002d882:	c3                   	ret    
c002d883:	90                   	nop

c002d884 <SATA::write(unsigned long long, int, void*)>:
c002d884:	55                   	push   ebp
c002d885:	57                   	push   edi
c002d886:	56                   	push   esi
c002d887:	53                   	push   ebx
c002d888:	83 ec 0c             	sub    esp,0xc
c002d88b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002d88f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002d893:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002d897:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002d89b:	8d 70 ff             	lea    esi,[eax-0x1]
c002d89e:	b8 04 00 00 00       	mov    eax,0x4
c002d8a3:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002d8a9:	0f 87 2c 02 00 00    	ja     c002dadb <SATA::write(unsigned long long, int, void*)+0x257>
c002d8af:	85 db                	test   ebx,ebx
c002d8b1:	b8 06 00 00 00       	mov    eax,0x6
c002d8b6:	0f 84 1f 02 00 00    	je     c002dadb <SATA::write(unsigned long long, int, void*)+0x257>
c002d8bc:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002d8c0:	c1 e6 09             	shl    esi,0x9
c002d8c3:	01 de                	add    esi,ebx
c002d8c5:	50                   	push   eax
c002d8c6:	89 d7                	mov    edi,edx
c002d8c8:	50                   	push   eax
c002d8c9:	83 c7 01             	add    edi,0x1
c002d8cc:	6a 01                	push   0x1
c002d8ce:	89 cd                	mov    ebp,ecx
c002d8d0:	53                   	push   ebx
c002d8d1:	83 d5 00             	adc    ebp,0x0
c002d8d4:	6a 01                	push   0x1
c002d8d6:	81 c3 00 02 00 00    	add    ebx,0x200
c002d8dc:	51                   	push   ecx
c002d8dd:	52                   	push   edx
c002d8de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002d8e2:	e8 c7 fa ff ff       	call   c002d3ae <SATA::access(unsigned long long, int, void*, bool)>
c002d8e7:	83 c4 20             	add    esp,0x20
c002d8ea:	39 f3                	cmp    ebx,esi
c002d8ec:	89 fa                	mov    edx,edi
c002d8ee:	89 e9                	mov    ecx,ebp
c002d8f0:	75 d3                	jne    c002d8c5 <SATA::write(unsigned long long, int, void*)+0x41>
c002d8f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002d8f6:	bd 10 27 00 00       	mov    ebp,0x2710
c002d8fb:	bb 0a 00 00 00       	mov    ebx,0xa
c002d900:	01 05 b0 1b 04 c0    	add    DWORD PTR ds:0xc0041bb0,eax
c002d906:	50                   	push   eax
c002d907:	50                   	push   eax
c002d908:	6a 0f                	push   0xf
c002d90a:	6a 00                	push   0x0
c002d90c:	e8 ca ef ff ff       	call   c002c8db <combineColours(unsigned char, unsigned char)>
c002d911:	5a                   	pop    edx
c002d912:	59                   	pop    ecx
c002d913:	0f b6 c0             	movzx  eax,al
c002d916:	50                   	push   eax
c002d917:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002d91c:	99                   	cdq    
c002d91d:	f7 fd                	idiv   ebp
c002d91f:	99                   	cdq    
c002d920:	f7 fb                	idiv   ebx
c002d922:	8d 42 30             	lea    eax,[edx+0x30]
c002d925:	0f b6 c0             	movzx  eax,al
c002d928:	50                   	push   eax
c002d929:	e8 9c ef ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002d92e:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002d934:	5e                   	pop    esi
c002d935:	5f                   	pop    edi
c002d936:	bf e8 03 00 00       	mov    edi,0x3e8
c002d93b:	6a 0f                	push   0xf
c002d93d:	6a 00                	push   0x0
c002d93f:	e8 97 ef ff ff       	call   c002c8db <combineColours(unsigned char, unsigned char)>
c002d944:	5a                   	pop    edx
c002d945:	59                   	pop    ecx
c002d946:	0f b6 c0             	movzx  eax,al
c002d949:	50                   	push   eax
c002d94a:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002d94f:	99                   	cdq    
c002d950:	f7 ff                	idiv   edi
c002d952:	99                   	cdq    
c002d953:	f7 fb                	idiv   ebx
c002d955:	8d 42 30             	lea    eax,[edx+0x30]
c002d958:	0f b6 c0             	movzx  eax,al
c002d95b:	50                   	push   eax
c002d95c:	e8 69 ef ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002d961:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002d967:	5e                   	pop    esi
c002d968:	be 64 00 00 00       	mov    esi,0x64
c002d96d:	58                   	pop    eax
c002d96e:	6a 0f                	push   0xf
c002d970:	6a 00                	push   0x0
c002d972:	e8 64 ef ff ff       	call   c002c8db <combineColours(unsigned char, unsigned char)>
c002d977:	5a                   	pop    edx
c002d978:	59                   	pop    ecx
c002d979:	0f b6 c0             	movzx  eax,al
c002d97c:	50                   	push   eax
c002d97d:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002d982:	99                   	cdq    
c002d983:	f7 fe                	idiv   esi
c002d985:	99                   	cdq    
c002d986:	f7 fb                	idiv   ebx
c002d988:	8d 42 30             	lea    eax,[edx+0x30]
c002d98b:	0f b6 c0             	movzx  eax,al
c002d98e:	50                   	push   eax
c002d98f:	e8 36 ef ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002d994:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002d99a:	58                   	pop    eax
c002d99b:	5a                   	pop    edx
c002d99c:	6a 0f                	push   0xf
c002d99e:	6a 00                	push   0x0
c002d9a0:	e8 36 ef ff ff       	call   c002c8db <combineColours(unsigned char, unsigned char)>
c002d9a5:	59                   	pop    ecx
c002d9a6:	5a                   	pop    edx
c002d9a7:	0f b6 c0             	movzx  eax,al
c002d9aa:	50                   	push   eax
c002d9ab:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002d9b0:	99                   	cdq    
c002d9b1:	f7 fb                	idiv   ebx
c002d9b3:	99                   	cdq    
c002d9b4:	f7 fb                	idiv   ebx
c002d9b6:	8d 42 30             	lea    eax,[edx+0x30]
c002d9b9:	0f b6 c0             	movzx  eax,al
c002d9bc:	50                   	push   eax
c002d9bd:	e8 08 ef ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002d9c2:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002d9c8:	59                   	pop    ecx
c002d9c9:	58                   	pop    eax
c002d9ca:	6a 0f                	push   0xf
c002d9cc:	6a 00                	push   0x0
c002d9ce:	e8 08 ef ff ff       	call   c002c8db <combineColours(unsigned char, unsigned char)>
c002d9d3:	5a                   	pop    edx
c002d9d4:	59                   	pop    ecx
c002d9d5:	0f b6 c0             	movzx  eax,al
c002d9d8:	50                   	push   eax
c002d9d9:	a1 b4 1b 04 c0       	mov    eax,ds:0xc0041bb4
c002d9de:	99                   	cdq    
c002d9df:	f7 fb                	idiv   ebx
c002d9e1:	83 c2 30             	add    edx,0x30
c002d9e4:	0f b6 d2             	movzx  edx,dl
c002d9e7:	52                   	push   edx
c002d9e8:	e8 dd ee ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002d9ed:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002d9f3:	58                   	pop    eax
c002d9f4:	5a                   	pop    edx
c002d9f5:	6a 0f                	push   0xf
c002d9f7:	6a 00                	push   0x0
c002d9f9:	e8 dd ee ff ff       	call   c002c8db <combineColours(unsigned char, unsigned char)>
c002d9fe:	59                   	pop    ecx
c002d9ff:	5a                   	pop    edx
c002da00:	0f b6 c0             	movzx  eax,al
c002da03:	50                   	push   eax
c002da04:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002da09:	99                   	cdq    
c002da0a:	f7 fd                	idiv   ebp
c002da0c:	99                   	cdq    
c002da0d:	f7 fb                	idiv   ebx
c002da0f:	8d 42 30             	lea    eax,[edx+0x30]
c002da12:	0f b6 c0             	movzx  eax,al
c002da15:	50                   	push   eax
c002da16:	e8 af ee ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002da1b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002da21:	59                   	pop    ecx
c002da22:	5d                   	pop    ebp
c002da23:	6a 0f                	push   0xf
c002da25:	6a 00                	push   0x0
c002da27:	e8 af ee ff ff       	call   c002c8db <combineColours(unsigned char, unsigned char)>
c002da2c:	5a                   	pop    edx
c002da2d:	59                   	pop    ecx
c002da2e:	0f b6 c0             	movzx  eax,al
c002da31:	50                   	push   eax
c002da32:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002da37:	99                   	cdq    
c002da38:	f7 ff                	idiv   edi
c002da3a:	99                   	cdq    
c002da3b:	f7 fb                	idiv   ebx
c002da3d:	8d 42 30             	lea    eax,[edx+0x30]
c002da40:	0f b6 c0             	movzx  eax,al
c002da43:	50                   	push   eax
c002da44:	e8 81 ee ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002da49:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002da4f:	5f                   	pop    edi
c002da50:	5d                   	pop    ebp
c002da51:	6a 0f                	push   0xf
c002da53:	6a 00                	push   0x0
c002da55:	e8 81 ee ff ff       	call   c002c8db <combineColours(unsigned char, unsigned char)>
c002da5a:	5a                   	pop    edx
c002da5b:	59                   	pop    ecx
c002da5c:	0f b6 c0             	movzx  eax,al
c002da5f:	50                   	push   eax
c002da60:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002da65:	99                   	cdq    
c002da66:	f7 fe                	idiv   esi
c002da68:	99                   	cdq    
c002da69:	f7 fb                	idiv   ebx
c002da6b:	8d 42 30             	lea    eax,[edx+0x30]
c002da6e:	0f b6 c0             	movzx  eax,al
c002da71:	50                   	push   eax
c002da72:	e8 53 ee ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002da77:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002da7d:	5e                   	pop    esi
c002da7e:	5f                   	pop    edi
c002da7f:	6a 0f                	push   0xf
c002da81:	6a 00                	push   0x0
c002da83:	e8 53 ee ff ff       	call   c002c8db <combineColours(unsigned char, unsigned char)>
c002da88:	5d                   	pop    ebp
c002da89:	5a                   	pop    edx
c002da8a:	0f b6 c0             	movzx  eax,al
c002da8d:	50                   	push   eax
c002da8e:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002da93:	99                   	cdq    
c002da94:	f7 fb                	idiv   ebx
c002da96:	99                   	cdq    
c002da97:	f7 fb                	idiv   ebx
c002da99:	8d 42 30             	lea    eax,[edx+0x30]
c002da9c:	0f b6 c0             	movzx  eax,al
c002da9f:	50                   	push   eax
c002daa0:	e8 25 ee ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002daa5:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002daab:	59                   	pop    ecx
c002daac:	5e                   	pop    esi
c002daad:	6a 0f                	push   0xf
c002daaf:	6a 00                	push   0x0
c002dab1:	e8 25 ee ff ff       	call   c002c8db <combineColours(unsigned char, unsigned char)>
c002dab6:	5f                   	pop    edi
c002dab7:	5d                   	pop    ebp
c002dab8:	0f b6 c0             	movzx  eax,al
c002dabb:	50                   	push   eax
c002dabc:	a1 b0 1b 04 c0       	mov    eax,ds:0xc0041bb0
c002dac1:	99                   	cdq    
c002dac2:	f7 fb                	idiv   ebx
c002dac4:	83 c2 30             	add    edx,0x30
c002dac7:	0f b6 d2             	movzx  edx,dl
c002daca:	52                   	push   edx
c002dacb:	e8 fa ed ff ff       	call   c002c8ca <combineCharAndColour(char, unsigned char)>
c002dad0:	83 c4 10             	add    esp,0x10
c002dad3:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002dad9:	31 c0                	xor    eax,eax
c002dadb:	83 c4 0c             	add    esp,0xc
c002dade:	5b                   	pop    ebx
c002dadf:	5e                   	pop    esi
c002dae0:	5f                   	pop    edi
c002dae1:	5d                   	pop    ebp
c002dae2:	c3                   	ret    
c002dae3:	90                   	nop

c002dae4 <SATAPI::write(unsigned long long, int, void*)>:
c002dae4:	b8 03 00 00 00       	mov    eax,0x3
c002dae9:	c3                   	ret    

c002daea <SATAPI::close(int, int, void*)>:
c002daea:	83 ec 0c             	sub    esp,0xc
c002daed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002daf1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002daf7:	85 c0                	test   eax,eax
c002daf9:	74 0c                	je     c002db07 <SATAPI::close(int, int, void*)+0x1d>
c002dafb:	8b 10                	mov    edx,DWORD PTR [eax]
c002dafd:	83 ec 0c             	sub    esp,0xc
c002db00:	50                   	push   eax
c002db01:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002db04:	83 c4 10             	add    esp,0x10
c002db07:	31 c0                	xor    eax,eax
c002db09:	83 c4 0c             	add    esp,0xc
c002db0c:	c3                   	ret    
c002db0d:	90                   	nop

c002db0e <SATAPI::SATAPI()>:
c002db0e:	83 ec 0c             	sub    esp,0xc
c002db11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002db15:	83 ec 04             	sub    esp,0x4
c002db18:	68 00 08 00 00       	push   0x800
c002db1d:	68 d8 42 03 c0       	push   0xc00342d8
c002db22:	50                   	push   eax
c002db23:	e8 c6 de fe ff       	call   c001b9ee <PhysicalDisk::PhysicalDisk(char const*, int)>
c002db28:	83 c4 10             	add    esp,0x10
c002db2b:	ba cc 43 03 c0       	mov    edx,0xc00343cc
c002db30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002db34:	89 10                	mov    DWORD PTR [eax],edx
c002db36:	90                   	nop
c002db37:	83 c4 0c             	add    esp,0xc
c002db3a:	c3                   	ret    
c002db3b:	90                   	nop

c002db3c <SATAPI::diskRemoved()>:
c002db3c:	c3                   	ret    
c002db3d:	90                   	nop

c002db3e <SATAPI::diskInserted()>:
c002db3e:	83 ec 18             	sub    esp,0x18
c002db41:	68 e4 42 03 c0       	push   0xc00342e4
c002db46:	e8 73 b9 fe ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c002db4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002db4f:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c002db56:	83 c4 1c             	add    esp,0x1c
c002db59:	c3                   	ret    

c002db5a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002db5a:	55                   	push   ebp
c002db5b:	57                   	push   edi
c002db5c:	56                   	push   esi
c002db5d:	53                   	push   ebx
c002db5e:	83 ec 34             	sub    esp,0x34
c002db61:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002db65:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002db69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002db6d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002db71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002db75:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002db7b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002db81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002db85:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c002db8b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002db8f:	83 c0 02             	add    eax,0x2
c002db92:	c1 e0 07             	shl    eax,0x7
c002db95:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002db99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002db9d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002dba1:	c1 e0 07             	shl    eax,0x7
c002dba4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002dba8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002dbac:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002dbb6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002dbba:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002dbc0:	e8 61 e4 ff ff       	call   c002c026 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002dbc5:	83 c4 10             	add    esp,0x10
c002dbc8:	89 c2                	mov    edx,eax
c002dbca:	b8 01 00 00 00       	mov    eax,0x1
c002dbcf:	83 fa ff             	cmp    edx,0xffffffff
c002dbd2:	0f 84 5f 02 00 00    	je     c002de37 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c002dbd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002dbdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002dbe0:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002dbe6:	8b 00                	mov    eax,DWORD PTR [eax]
c002dbe8:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002dbee:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002dbf4:	89 d1                	mov    ecx,edx
c002dbf6:	c1 e1 05             	shl    ecx,0x5
c002dbf9:	01 c8                	add    eax,ecx
c002dbfb:	8b 08                	mov    ecx,DWORD PTR [eax]
c002dbfd:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002dc03:	81 c9 25 00 01 00    	or     ecx,0x10025
c002dc09:	89 08                	mov    DWORD PTR [eax],ecx
c002dc0b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002dc11:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002dc17:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002dc1d:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002dc20:	50                   	push   eax
c002dc21:	68 90 00 00 00       	push   0x90
c002dc26:	6a 00                	push   0x0
c002dc28:	53                   	push   ebx
c002dc29:	e8 c2 28 fd ff       	call   c00004f0 <memset>
c002dc2e:	8d 7b 40             	lea    edi,[ebx+0x40]
c002dc31:	b9 0c 00 00 00       	mov    ecx,0xc
c002dc36:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002dc3a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002dc3c:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c002dc42:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002dc46:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002dc4a:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002dc50:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002dc54:	48                   	dec    eax
c002dc55:	25 ff ff 3f 00       	and    eax,0x3fffff
c002dc5a:	89 c1                	mov    ecx,eax
c002dc5c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002dc62:	25 00 00 c0 ff       	and    eax,0xffc00000
c002dc67:	09 c8                	or     eax,ecx
c002dc69:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002dc6f:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c002dc75:	83 c8 80             	or     eax,0xffffff80
c002dc78:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c002dc7e:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002dc81:	25 00 7f 00 00       	and    eax,0x7f00
c002dc86:	0d 27 80 ff ff       	or     eax,0xffff8027
c002dc8b:	66 89 03             	mov    WORD PTR [ebx],ax
c002dc8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002dc92:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c002dc96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002dc9a:	c1 e8 10             	shr    eax,0x10
c002dc9d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002dca0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002dca4:	c1 e8 18             	shr    eax,0x18
c002dca7:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c002dcaa:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002dcae:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002dcb1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002dcb5:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002dcb8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002dcbc:	83 c4 10             	add    esp,0x10
c002dcbf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002dcc3:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002dcc7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002dccb:	31 c0                	xor    eax,eax
c002dccd:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c002dcd3:	80 e1 88             	and    cl,0x88
c002dcd6:	74 0a                	je     c002dce2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c002dcd8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002dcdd:	74 0a                	je     c002dce9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c002dcdf:	40                   	inc    eax
c002dce0:	eb eb                	jmp    c002dccd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c002dce2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002dce7:	75 43                	jne    c002dd2c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c002dce9:	83 ec 0c             	sub    esp,0xc
c002dcec:	68 fc 42 03 c0       	push   0xc00342fc
c002dcf1:	e8 c8 b7 fe ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c002dcf6:	58                   	pop    eax
c002dcf7:	5a                   	pop    edx
c002dcf8:	68 11 43 03 c0       	push   0xc0034311
c002dcfd:	ff 35 08 ba 03 c0    	push   DWORD PTR ds:0xc003ba08
c002dd03:	e8 58 99 fe ff       	call   c0017660 <VgaText::puts(char const*)>
c002dd08:	59                   	pop    ecx
c002dd09:	5b                   	pop    ebx
c002dd0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002dd0e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002dd14:	e8 a7 e3 ff ff       	call   c002c0c0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002dd19:	5e                   	pop    esi
c002dd1a:	5f                   	pop    edi
c002dd1b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002dd1f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002dd25:	e8 76 e3 ff ff       	call   c002c0a0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002dd2a:	eb 48                	jmp    c002dd74 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c002dd2c:	b8 01 00 00 00       	mov    eax,0x1
c002dd31:	88 d1                	mov    cl,dl
c002dd33:	d3 e0                	shl    eax,cl
c002dd35:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c002dd3a:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c002dd40:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002dd44:	89 c7                	mov    edi,eax
c002dd46:	c1 e3 07             	shl    ebx,0x7
c002dd49:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c002dd4d:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c002dd53:	85 c7                	test   edi,eax
c002dd55:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c002dd5b:	0f 84 a3 00 00 00    	je     c002de04 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c002dd61:	0f ba e0 1e          	bt     eax,0x1e
c002dd65:	73 1a                	jae    c002dd81 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c002dd67:	83 ec 0c             	sub    esp,0xc
c002dd6a:	68 23 43 03 c0       	push   0xc0034323
c002dd6f:	e8 4a b7 fe ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c002dd74:	83 c4 10             	add    esp,0x10
c002dd77:	b8 01 00 00 00       	mov    eax,0x1
c002dd7c:	e9 b6 00 00 00       	jmp    c002de37 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c002dd81:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c002dd87:	83 f8 0d             	cmp    eax,0xd
c002dd8a:	77 0a                	ja     c002dd96 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c002dd8c:	83 ec 0c             	sub    esp,0xc
c002dd8f:	68 c8 00 00 00       	push   0xc8
c002dd94:	eb 28                	jmp    c002ddbe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c002dd96:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c002dd9c:	83 f8 0d             	cmp    eax,0xd
c002dd9f:	77 0a                	ja     c002ddab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c002dda1:	83 ec 0c             	sub    esp,0xc
c002dda4:	68 58 02 00 00       	push   0x258
c002dda9:	eb 13                	jmp    c002ddbe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c002ddab:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c002ddb1:	83 f8 06             	cmp    eax,0x6
c002ddb4:	77 10                	ja     c002ddc6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c002ddb6:	83 ec 0c             	sub    esp,0xc
c002ddb9:	68 dc 05 00 00       	push   0x5dc
c002ddbe:	e8 6d 7b ff ff       	call   c0025930 <milliTenthSleep(unsigned int)>
c002ddc3:	83 c4 10             	add    esp,0x10
c002ddc6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002ddca:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c002ddcd:	75 06                	jne    c002ddd5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c002ddcf:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c002ddd3:	74 15                	je     c002ddea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c002ddd5:	83 fe 06             	cmp    esi,0x6
c002ddd8:	77 10                	ja     c002ddea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c002ddda:	83 ec 0c             	sub    esp,0xc
c002dddd:	68 c4 09 00 00       	push   0x9c4
c002dde2:	e8 49 7b ff ff       	call   c0025930 <milliTenthSleep(unsigned int)>
c002dde7:	83 c4 10             	add    esp,0x10
c002ddea:	46                   	inc    esi
c002ddeb:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c002ddf1:	0f 85 56 ff ff ff    	jne    c002dd4d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c002ddf7:	83 ec 0c             	sub    esp,0xc
c002ddfa:	68 36 43 03 c0       	push   0xc0034336
c002ddff:	e9 6b ff ff ff       	jmp    c002dd6f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c002de04:	0f ba e0 1e          	bt     eax,0x1e
c002de08:	73 0d                	jae    c002de17 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c002de0a:	83 ec 0c             	sub    esp,0xc
c002de0d:	68 4a 43 03 c0       	push   0xc003434a
c002de12:	e9 58 ff ff ff       	jmp    c002dd6f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c002de17:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002de1c:	74 17                	je     c002de35 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c002de1e:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002de23:	74 10                	je     c002de35 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c002de25:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c002de2b:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002de2f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c002de33:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002de35:	31 c0                	xor    eax,eax
c002de37:	83 c4 2c             	add    esp,0x2c
c002de3a:	5b                   	pop    ebx
c002de3b:	5e                   	pop    esi
c002de3c:	5f                   	pop    edi
c002de3d:	5d                   	pop    ebp
c002de3e:	c3                   	ret    
c002de3f:	90                   	nop

c002de40 <SATAPI::eject()>:
c002de40:	57                   	push   edi
c002de41:	b9 03 00 00 00       	mov    ecx,0x3
c002de46:	83 ec 18             	sub    esp,0x18
c002de49:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002de4d:	fc                   	cld    
c002de4e:	31 c0                	xor    eax,eax
c002de50:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002de52:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002de57:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002de5c:	50                   	push   eax
c002de5d:	6a 00                	push   0x0
c002de5f:	6a 00                	push   0x0
c002de61:	6a 00                	push   0x0
c002de63:	6a 00                	push   0x0
c002de65:	6a 02                	push   0x2
c002de67:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002de6b:	50                   	push   eax
c002de6c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002de70:	e8 e5 fc ff ff       	call   c002db5a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002de75:	83 c4 38             	add    esp,0x38
c002de78:	31 c0                	xor    eax,eax
c002de7a:	5f                   	pop    edi
c002de7b:	c3                   	ret    

c002de7c <SATAPI::detectMedia()>:
c002de7c:	53                   	push   ebx
c002de7d:	83 ec 14             	sub    esp,0x14
c002de80:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002de84:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002de8a:	e8 d9 f4 fe ff       	call   c001d368 <VCache::writeWriteBuffer()>
c002de8f:	59                   	pop    ecx
c002de90:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002de96:	e8 bd f4 fe ff       	call   c001d358 <VCache::invalidateReadBuffer()>
c002de9b:	c7 04 24 5f 43 03 c0 	mov    DWORD PTR [esp],0xc003435f
c002dea2:	e8 17 b6 fe ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c002dea7:	83 c4 10             	add    esp,0x10
c002deaa:	31 c0                	xor    eax,eax
c002deac:	8b 14 85 80 03 04 c0 	mov    edx,DWORD PTR [eax*4-0x3ffbfc80]
c002deb3:	85 d2                	test   edx,edx
c002deb5:	74 0f                	je     c002dec6 <SATAPI::detectMedia()+0x4a>
c002deb7:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c002debd:	75 07                	jne    c002dec6 <SATAPI::detectMedia()+0x4a>
c002debf:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c002dec6:	40                   	inc    eax
c002dec7:	83 f8 1a             	cmp    eax,0x1a
c002deca:	75 e0                	jne    c002deac <SATAPI::detectMedia()+0x30>
c002decc:	83 c4 08             	add    esp,0x8
c002decf:	5b                   	pop    ebx
c002ded0:	c3                   	ret    
c002ded1:	90                   	nop

c002ded2 <SATAPI::open(int, int, void*)>:
c002ded2:	56                   	push   esi
c002ded3:	53                   	push   ebx
c002ded4:	51                   	push   ecx
c002ded5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002ded9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002dedd:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002dee7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002deed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002def1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002defb:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002df05:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002df0c:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002df12:	e8 80 8a fe ff       	call   c0016997 <Phys::allocatePage()>
c002df17:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002df1d:	89 c6                	mov    esi,eax
c002df1f:	e8 73 8a fe ff       	call   c0016997 <Phys::allocatePage()>
c002df24:	81 c6 00 10 00 00    	add    esi,0x1000
c002df2a:	39 c6                	cmp    esi,eax
c002df2c:	74 10                	je     c002df3e <SATAPI::open(int, int, void*)+0x6c>
c002df2e:	83 ec 0c             	sub    esp,0xc
c002df31:	68 74 43 03 c0       	push   0xc0034374
c002df36:	e8 c7 27 ff ff       	call   c0020702 <KePanic(char const*)>
c002df3b:	83 c4 10             	add    esp,0x10
c002df3e:	83 ec 0c             	sub    esp,0xc
c002df41:	6a 02                	push   0x2
c002df43:	e8 61 a2 fe ff       	call   c00181a9 <Virt::allocateKernelVirtualPages(int)>
c002df48:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002df4e:	6a 03                	push   0x3
c002df50:	50                   	push   eax
c002df51:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002df57:	ff 35 b0 ba 03 c0    	push   DWORD PTR ds:0xc003bab0
c002df5d:	e8 50 a9 fe ff       	call   c00188b2 <VAS::mapPage(unsigned long, unsigned long, int)>
c002df62:	83 c4 14             	add    esp,0x14
c002df65:	68 78 01 00 00       	push   0x178
c002df6a:	e8 19 87 fe ff       	call   c0016688 <malloc>
c002df6f:	83 c4 0c             	add    esp,0xc
c002df72:	6a 00                	push   0x0
c002df74:	68 ff ff ff 7f       	push   0x7fffffff
c002df79:	6a 00                	push   0x0
c002df7b:	6a 00                	push   0x0
c002df7d:	53                   	push   ebx
c002df7e:	68 8a 43 03 c0       	push   0xc003438a
c002df83:	89 c6                	mov    esi,eax
c002df85:	50                   	push   eax
c002df86:	e8 3b e8 fe ff       	call   c001c7c6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002df8b:	83 c4 14             	add    esp,0x14
c002df8e:	56                   	push   esi
c002df8f:	e8 f2 e8 fe ff       	call   c001c886 <LogicalDisk::assignDriveLetter()>
c002df94:	5a                   	pop    edx
c002df95:	59                   	pop    ecx
c002df96:	0f be c0             	movsx  eax,al
c002df99:	50                   	push   eax
c002df9a:	68 d0 41 03 c0       	push   0xc00341d0
c002df9f:	e8 1a b5 fe ff       	call   c00194be <Dbg::kprintf(char const*, ...)>
c002dfa4:	58                   	pop    eax
c002dfa5:	5a                   	pop    edx
c002dfa6:	56                   	push   esi
c002dfa7:	53                   	push   ebx
c002dfa8:	e8 5d d6 fe ff       	call   c001b60a <Device::addChild(Device*)>
c002dfad:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c002dfb3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002dfb6:	e8 9b da fe ff       	call   c001ba56 <PhysicalDisk::startCache()>
c002dfbb:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002dfc2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002dfc5:	e8 b2 fe ff ff       	call   c002de7c <SATAPI::detectMedia()>
c002dfca:	83 c4 14             	add    esp,0x14
c002dfcd:	31 c0                	xor    eax,eax
c002dfcf:	5b                   	pop    ebx
c002dfd0:	5e                   	pop    esi
c002dfd1:	c3                   	ret    

c002dfd2 <SATAPI::read(unsigned long long, int, void*)>:
c002dfd2:	55                   	push   ebp
c002dfd3:	57                   	push   edi
c002dfd4:	56                   	push   esi
c002dfd5:	53                   	push   ebx
c002dfd6:	83 ec 3c             	sub    esp,0x3c
c002dfd9:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c002dfdd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002dfe1:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c002dfe5:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c002dfe9:	83 fd 04             	cmp    ebp,0x4
c002dfec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002dff0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002dff4:	7e 10                	jle    c002e006 <SATAPI::read(unsigned long long, int, void*)+0x34>
c002dff6:	83 ec 0c             	sub    esp,0xc
c002dff9:	68 98 43 03 c0       	push   0xc0034398
c002dffe:	e8 ff 26 ff ff       	call   c0020702 <KePanic(char const*)>
c002e003:	83 c4 10             	add    esp,0x10
c002e006:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002e00c:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002e012:	51                   	push   ecx
c002e013:	50                   	push   eax
c002e014:	83 c0 02             	add    eax,0x2
c002e017:	c1 e0 07             	shl    eax,0x7
c002e01a:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c002e020:	50                   	push   eax
c002e021:	52                   	push   edx
c002e022:	e8 c3 e0 ff ff       	call   c002c0ea <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002e027:	8d 7c 24 28          	lea    edi,[esp+0x28]
c002e02b:	b9 03 00 00 00       	mov    ecx,0x3
c002e030:	fc                   	cld    
c002e031:	31 c0                	xor    eax,eax
c002e033:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002e035:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c002e03a:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c002e03f:	83 c4 0c             	add    esp,0xc
c002e042:	6a 00                	push   0x0
c002e044:	6a 00                	push   0x0
c002e046:	6a 00                	push   0x0
c002e048:	6a 00                	push   0x0
c002e04a:	6a 02                	push   0x2
c002e04c:	8d 44 24 30          	lea    eax,[esp+0x30]
c002e050:	50                   	push   eax
c002e051:	53                   	push   ebx
c002e052:	e8 03 fb ff ff       	call   c002db5a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002e057:	83 c4 20             	add    esp,0x20
c002e05a:	85 c0                	test   eax,eax
c002e05c:	89 c6                	mov    esi,eax
c002e05e:	75 46                	jne    c002e0a6 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c002e060:	8d 7c 24 24          	lea    edi,[esp+0x24]
c002e064:	b9 03 00 00 00       	mov    ecx,0x3
c002e069:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002e06b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002e06f:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c002e074:	0f c8                	bswap  eax
c002e076:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c002e07a:	89 e8                	mov    eax,ebp
c002e07c:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002e080:	50                   	push   eax
c002e081:	55                   	push   ebp
c002e082:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c002e086:	c1 e5 0b             	shl    ebp,0xb
c002e089:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002e08d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002e091:	55                   	push   ebp
c002e092:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c002e096:	50                   	push   eax
c002e097:	53                   	push   ebx
c002e098:	e8 bd fa ff ff       	call   c002db5a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002e09d:	83 c4 20             	add    esp,0x20
c002e0a0:	85 c0                	test   eax,eax
c002e0a2:	89 c6                	mov    esi,eax
c002e0a4:	74 0c                	je     c002e0b2 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c002e0a6:	83 ec 0c             	sub    esp,0xc
c002e0a9:	53                   	push   ebx
c002e0aa:	e8 cd fd ff ff       	call   c002de7c <SATAPI::detectMedia()>
c002e0af:	83 c4 10             	add    esp,0x10
c002e0b2:	83 c4 3c             	add    esp,0x3c
c002e0b5:	89 f0                	mov    eax,esi
c002e0b7:	5b                   	pop    ebx
c002e0b8:	5e                   	pop    esi
c002e0b9:	5f                   	pop    edi
c002e0ba:	5d                   	pop    ebp
c002e0bb:	c3                   	ret    

c002e0bc <IOAPIC::close(int, int, void*)>:
c002e0bc:	b8 00 00 00 00       	mov    eax,0x0
c002e0c1:	c3                   	ret    

c002e0c2 <apicGetBase()>:
c002e0c2:	55                   	push   ebp
c002e0c3:	89 e5                	mov    ebp,esp
c002e0c5:	83 ec 18             	sub    esp,0x18
c002e0c8:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c002e0cd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c002e0d3:	83 e0 08             	and    eax,0x8
c002e0d6:	0f b6 c0             	movzx  eax,al
c002e0d9:	85 c0                	test   eax,eax
c002e0db:	75 07                	jne    c002e0e4 <apicGetBase()+0x22>
c002e0dd:	b8 00 00 00 00       	mov    eax,0x0
c002e0e2:	eb 21                	jmp    c002e105 <apicGetBase()+0x43>
c002e0e4:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c002e0e9:	83 ec 08             	sub    esp,0x8
c002e0ec:	6a 1b                	push   0x1b
c002e0ee:	50                   	push   eax
c002e0ef:	e8 28 7b fe ff       	call   c0015c1c <Computer::rdmsr(unsigned int)>
c002e0f4:	83 c4 10             	add    esp,0x10
c002e0f7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002e0fa:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002e0fd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002e100:	25 00 00 ff ff       	and    eax,0xffff0000
c002e105:	c9                   	leave  
c002e106:	c3                   	ret    
c002e107:	90                   	nop

c002e108 <IOAPIC::IOAPIC()>:
c002e108:	83 ec 0c             	sub    esp,0xc
c002e10b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e10f:	83 ec 08             	sub    esp,0x8
c002e112:	68 fc 43 03 c0       	push   0xc00343fc
c002e117:	50                   	push   eax
c002e118:	e8 4f d6 fe ff       	call   c001b76c <Device::Device(char const*)>
c002e11d:	83 c4 10             	add    esp,0x10
c002e120:	ba 0c 44 03 c0       	mov    edx,0xc003440c
c002e125:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e129:	89 10                	mov    DWORD PTR [eax],edx
c002e12b:	90                   	nop
c002e12c:	83 c4 0c             	add    esp,0xc
c002e12f:	c3                   	ret    

c002e130 <apicOpen()>:
c002e130:	55                   	push   ebp
c002e131:	89 e5                	mov    ebp,esp
c002e133:	53                   	push   ebx
c002e134:	83 ec 34             	sub    esp,0x34
c002e137:	a0 00 1c 04 c0       	mov    al,ds:0xc0041c00
c002e13c:	83 f0 01             	xor    eax,0x1
c002e13f:	0f b6 c0             	movzx  eax,al
c002e142:	85 c0                	test   eax,eax
c002e144:	0f 84 a3 00 00 00    	je     c002e1ed <apicOpen()+0xbd>
c002e14a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c002e14e:	a0 e0 06 04 c0       	mov    al,ds:0xc00406e0
c002e153:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002e157:	0f b6 c0             	movzx  eax,al
c002e15a:	39 c2                	cmp    edx,eax
c002e15c:	0f 83 84 00 00 00    	jae    c002e1e6 <apicOpen()+0xb6>
c002e162:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c002e169:	83 ec 0c             	sub    esp,0xc
c002e16c:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002e16f:	e8 14 85 fe ff       	call   c0016688 <malloc>
c002e174:	83 c4 10             	add    esp,0x10
c002e177:	89 c3                	mov    ebx,eax
c002e179:	83 ec 0c             	sub    esp,0xc
c002e17c:	53                   	push   ebx
c002e17d:	e8 86 ff ff ff       	call   c002e108 <IOAPIC::IOAPIC()>
c002e182:	83 c4 10             	add    esp,0x10
c002e185:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002e188:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c002e18c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002e18f:	89 14 85 e0 1b 04 c0 	mov    DWORD PTR [eax*4-0x3ffbe420],edx
c002e196:	a1 c0 1b 04 c0       	mov    eax,ds:0xc0041bc0
c002e19b:	83 c0 01             	add    eax,0x1
c002e19e:	a3 c0 1b 04 c0       	mov    ds:0xc0041bc0,eax
c002e1a3:	a1 bc b9 03 c0       	mov    eax,ds:0xc003b9bc
c002e1a8:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c002e1ae:	83 ec 08             	sub    esp,0x8
c002e1b1:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002e1b4:	50                   	push   eax
c002e1b5:	e8 50 d4 fe ff       	call   c001b60a <Device::addChild(Device*)>
c002e1ba:	83 c4 10             	add    esp,0x10
c002e1bd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002e1c0:	8b 00                	mov    eax,DWORD PTR [eax]
c002e1c2:	83 c0 08             	add    eax,0x8
c002e1c5:	8b 00                	mov    eax,DWORD PTR [eax]
c002e1c7:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002e1cb:	6a 00                	push   0x0
c002e1cd:	6a 00                	push   0x0
c002e1cf:	52                   	push   edx
c002e1d0:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002e1d3:	ff d0                	call   eax
c002e1d5:	83 c4 10             	add    esp,0x10
c002e1d8:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c002e1db:	83 c0 01             	add    eax,0x1
c002e1de:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c002e1e1:	e9 68 ff ff ff       	jmp    c002e14e <apicOpen()+0x1e>
c002e1e6:	c6 05 00 1c 04 c0 01 	mov    BYTE PTR ds:0xc0041c00,0x1
c002e1ed:	e8 d0 fe ff ff       	call   c002e0c2 <apicGetBase()>
c002e1f2:	05 f0 00 00 00       	add    eax,0xf0
c002e1f7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002e1fa:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002e1fd:	8b 00                	mov    eax,DWORD PTR [eax]
c002e1ff:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002e202:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c002e209:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c002e210:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002e213:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002e216:	89 10                	mov    DWORD PTR [eax],edx
c002e218:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c002e21f:	a1 30 06 04 c0       	mov    eax,ds:0xc0040630
c002e224:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c002e227:	7d 7c                	jge    c002e2a5 <apicOpen()+0x175>
c002e229:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002e22c:	8b 04 85 40 06 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbf9c0]
c002e233:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c002e236:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002e239:	8b 04 85 40 06 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbf9c0]
c002e240:	c1 e8 08             	shr    eax,0x8
c002e243:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c002e247:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002e24a:	8b 04 85 40 06 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbf9c0]
c002e251:	c1 e8 18             	shr    eax,0x18
c002e254:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c002e257:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c002e25b:	3d ff 00 00 00       	cmp    eax,0xff
c002e260:	75 3a                	jne    c002e29c <apicOpen()+0x16c>
c002e262:	e8 5b fe ff ff       	call   c002e0c2 <apicGetBase()>
c002e267:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c002e26b:	83 fa 01             	cmp    edx,0x1
c002e26e:	75 07                	jne    c002e277 <apicOpen()+0x147>
c002e270:	ba 60 03 00 00       	mov    edx,0x360
c002e275:	eb 05                	jmp    c002e27c <apicOpen()+0x14c>
c002e277:	ba 50 03 00 00       	mov    edx,0x350
c002e27c:	01 d0                	add    eax,edx
c002e27e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002e281:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002e284:	8b 00                	mov    eax,DWORD PTR [eax]
c002e286:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002e289:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c002e290:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c002e294:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002e297:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002e29a:	89 10                	mov    DWORD PTR [eax],edx
c002e29c:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c002e2a0:	e9 7a ff ff ff       	jmp    c002e21f <apicOpen()+0xef>
c002e2a5:	90                   	nop
c002e2a6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002e2a9:	c9                   	leave  
c002e2aa:	c3                   	ret    
c002e2ab:	90                   	nop

c002e2ac <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002e2ac:	55                   	push   ebp
c002e2ad:	89 e5                	mov    ebp,esp
c002e2af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e2b2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002e2b8:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002e2bb:	72 1d                	jb     c002e2da <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002e2bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e2c0:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002e2c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e2c9:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002e2cf:	01 d0                	add    eax,edx
c002e2d1:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002e2d4:	73 04                	jae    c002e2da <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002e2d6:	b0 01                	mov    al,0x1
c002e2d8:	eb 02                	jmp    c002e2dc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002e2da:	b0 00                	mov    al,0x0
c002e2dc:	5d                   	pop    ebp
c002e2dd:	c3                   	ret    

c002e2de <IOAPIC::read(int)>:
c002e2de:	55                   	push   ebp
c002e2df:	89 e5                	mov    ebp,esp
c002e2e1:	83 ec 10             	sub    esp,0x10
c002e2e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e2e7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002e2ed:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002e2f0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002e2f3:	0f b6 d0             	movzx  edx,al
c002e2f6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002e2f9:	89 10                	mov    DWORD PTR [eax],edx
c002e2fb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002e2fe:	83 c0 10             	add    eax,0x10
c002e301:	8b 00                	mov    eax,DWORD PTR [eax]
c002e303:	c9                   	leave  
c002e304:	c3                   	ret    
c002e305:	90                   	nop

c002e306 <IOAPIC::open(int, int, void*)>:
c002e306:	55                   	push   ebp
c002e307:	89 e5                	mov    ebp,esp
c002e309:	57                   	push   edi
c002e30a:	56                   	push   esi
c002e30b:	53                   	push   ebx
c002e30c:	83 ec 04             	sub    esp,0x4
c002e30f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e312:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002e315:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002e31b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e31e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002e324:	8b 14 85 20 07 04 c0 	mov    edx,DWORD PTR [eax*4-0x3ffbf8e0]
c002e32b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e32e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002e334:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e337:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002e33d:	8b 14 85 a0 07 04 c0 	mov    edx,DWORD PTR [eax*4-0x3ffbf860]
c002e344:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e347:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002e34d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e350:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002e356:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e359:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002e35f:	0f b6 f0             	movzx  esi,al
c002e362:	89 d0                	mov    eax,edx
c002e364:	ba 00 00 00 00       	mov    edx,0x0
c002e369:	89 c7                	mov    edi,eax
c002e36b:	83 e7 ff             	and    edi,0xffffffff
c002e36e:	89 f9                	mov    ecx,edi
c002e370:	0f b6 da             	movzx  ebx,dl
c002e373:	89 c8                	mov    eax,ecx
c002e375:	89 da                	mov    edx,ebx
c002e377:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002e37a:	8d 5e 08             	lea    ebx,[esi+0x8]
c002e37d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002e381:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002e385:	83 e0 00             	and    eax,0x0
c002e388:	09 d0                	or     eax,edx
c002e38a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002e38e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e391:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002e397:	8d 50 01             	lea    edx,[eax+0x1]
c002e39a:	88 d1                	mov    cl,dl
c002e39c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002e39f:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c002e3a5:	0f b6 d0             	movzx  edx,al
c002e3a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e3ab:	83 c2 08             	add    edx,0x8
c002e3ae:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002e3b2:	0f b6 c9             	movzx  ecx,cl
c002e3b5:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002e3bb:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002e3bf:	6a 01                	push   0x1
c002e3c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002e3c4:	e8 15 ff ff ff       	call   c002e2de <IOAPIC::read(int)>
c002e3c9:	83 c4 08             	add    esp,0x8
c002e3cc:	c1 f8 10             	sar    eax,0x10
c002e3cf:	0f b6 c0             	movzx  eax,al
c002e3d2:	8d 50 01             	lea    edx,[eax+0x1]
c002e3d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e3d8:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002e3de:	b8 00 00 00 00       	mov    eax,0x0
c002e3e3:	8d 65 f4             	lea    esp,[ebp-0xc]
c002e3e6:	5b                   	pop    ebx
c002e3e7:	5e                   	pop    esi
c002e3e8:	5f                   	pop    edi
c002e3e9:	5d                   	pop    ebp
c002e3ea:	c3                   	ret    
c002e3eb:	90                   	nop

c002e3ec <IOAPIC::write(int, int)>:
c002e3ec:	55                   	push   ebp
c002e3ed:	89 e5                	mov    ebp,esp
c002e3ef:	83 ec 10             	sub    esp,0x10
c002e3f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002e3f5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002e3fb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002e3fe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002e401:	0f b6 d0             	movzx  edx,al
c002e404:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002e407:	89 10                	mov    DWORD PTR [eax],edx
c002e409:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002e40c:	8d 50 10             	lea    edx,[eax+0x10]
c002e40f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002e412:	89 02                	mov    DWORD PTR [edx],eax
c002e414:	90                   	nop
c002e415:	c9                   	leave  
c002e416:	c3                   	ret    
c002e417:	90                   	nop

c002e418 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002e418:	55                   	push   ebp
c002e419:	89 e5                	mov    ebp,esp
c002e41b:	53                   	push   ebx
c002e41c:	83 ec 2c             	sub    esp,0x2c
c002e41f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002e422:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002e425:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002e428:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002e42b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002e42e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002e431:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002e434:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002e437:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002e43a:	88 d8                	mov    al,bl
c002e43c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002e43f:	88 c8                	mov    al,cl
c002e441:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002e444:	88 d0                	mov    al,dl
c002e446:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002e449:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002e44d:	83 c0 08             	add    eax,0x8
c002e450:	d1 e0                	shl    eax,1
c002e452:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002e455:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002e459:	83 c0 08             	add    eax,0x8
c002e45c:	d1 e0                	shl    eax,1
c002e45e:	83 c0 01             	add    eax,0x1
c002e461:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002e464:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002e467:	50                   	push   eax
c002e468:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002e46b:	e8 6e fe ff ff       	call   c002e2de <IOAPIC::read(int)>
c002e470:	83 c4 08             	add    esp,0x8
c002e473:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002e476:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002e47d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002e480:	c1 e0 18             	shl    eax,0x18
c002e483:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002e486:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002e489:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002e48c:	52                   	push   edx
c002e48d:	50                   	push   eax
c002e48e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002e491:	e8 56 ff ff ff       	call   c002e3ec <IOAPIC::write(int, int)>
c002e496:	83 c4 0c             	add    esp,0xc
c002e499:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002e49c:	50                   	push   eax
c002e49d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002e4a0:	e8 39 fe ff ff       	call   c002e2de <IOAPIC::read(int)>
c002e4a5:	83 c4 08             	add    esp,0x8
c002e4a8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002e4ab:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002e4b2:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002e4b9:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002e4c0:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c002e4c4:	85 c0                	test   eax,eax
c002e4c6:	74 09                	je     c002e4d1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c002e4c8:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002e4cf:	eb 07                	jmp    c002e4d8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c002e4d1:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002e4d8:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c002e4dc:	85 c0                	test   eax,eax
c002e4de:	74 09                	je     c002e4e9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c002e4e0:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002e4e7:	eb 07                	jmp    c002e4f0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c002e4e9:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002e4f0:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002e4f7:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002e4fb:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002e4fe:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002e501:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002e504:	52                   	push   edx
c002e505:	50                   	push   eax
c002e506:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002e509:	e8 de fe ff ff       	call   c002e3ec <IOAPIC::write(int, int)>
c002e50e:	83 c4 0c             	add    esp,0xc
c002e511:	90                   	nop
c002e512:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002e515:	c9                   	leave  
c002e516:	c3                   	ret    
c002e517:	90                   	nop

c002e518 <APICTimer::close(int, int, void*)>:
c002e518:	b8 00 00 00 00       	mov    eax,0x0
c002e51d:	c3                   	ret    
c002e51e:	66 90                	xchg   ax,ax

c002e520 <apicTimerHandler(regs*, void*)>:
c002e520:	83 ec 0c             	sub    esp,0xc
c002e523:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002e527:	8b 08                	mov    ecx,DWORD PTR [eax]
c002e529:	b8 10 27 00 00       	mov    eax,0x2710
c002e52e:	ba 00 00 00 00       	mov    edx,0x0
c002e533:	f7 f1                	div    ecx
c002e535:	83 ec 0c             	sub    esp,0xc
c002e538:	50                   	push   eax
c002e539:	e8 46 eb fe ff       	call   c001d084 <timerHandler(unsigned int)>
c002e53e:	83 c4 10             	add    esp,0x10
c002e541:	90                   	nop
c002e542:	83 c4 0c             	add    esp,0xc
c002e545:	c3                   	ret    
c002e546:	66 90                	xchg   ax,ax

c002e548 <APICTimer::open(int, int, void*)>:
c002e548:	83 ec 0c             	sub    esp,0xc
c002e54b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e54f:	8b 00                	mov    eax,DWORD PTR [eax]
c002e551:	83 c0 24             	add    eax,0x24
c002e554:	8b 00                	mov    eax,DWORD PTR [eax]
c002e556:	83 ec 08             	sub    esp,0x8
c002e559:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e55d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e561:	ff d0                	call   eax
c002e563:	83 c4 10             	add    esp,0x10
c002e566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e56a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002e56e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002e574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e578:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002e57c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002e582:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002e586:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002e58c:	83 ec 0c             	sub    esp,0xc
c002e58f:	51                   	push   ecx
c002e590:	6a 01                	push   0x1
c002e592:	68 20 e5 02 c0       	push   0xc002e520
c002e597:	52                   	push   edx
c002e598:	50                   	push   eax
c002e599:	e8 18 d0 fe ff       	call   c001b5b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002e59e:	83 c4 20             	add    esp,0x20
c002e5a1:	89 c2                	mov    edx,eax
c002e5a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e5a7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002e5ad:	b8 00 00 00 00       	mov    eax,0x0
c002e5b2:	83 c4 0c             	add    esp,0xc
c002e5b5:	c3                   	ret    
c002e5b6:	66 90                	xchg   ax,ax

c002e5b8 <APICTimer::write(int)>:
c002e5b8:	83 ec 0c             	sub    esp,0xc
c002e5bb:	83 ec 0c             	sub    esp,0xc
c002e5be:	68 30 44 03 c0       	push   0xc0034430
c002e5c3:	e8 3a 21 ff ff       	call   c0020702 <KePanic(char const*)>
c002e5c8:	83 c4 10             	add    esp,0x10
c002e5cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e5cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e5d3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002e5d9:	90                   	nop
c002e5da:	83 c4 0c             	add    esp,0xc
c002e5dd:	c3                   	ret    
c002e5de:	66 90                	xchg   ax,ax

c002e5e0 <APICTimer::APICTimer()>:
c002e5e0:	83 ec 0c             	sub    esp,0xc
c002e5e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e5e7:	83 ec 08             	sub    esp,0x8
c002e5ea:	68 40 44 03 c0       	push   0xc0034440
c002e5ef:	50                   	push   eax
c002e5f0:	e8 c3 e9 fe ff       	call   c001cfb8 <Timer::Timer(char const*)>
c002e5f5:	83 c4 10             	add    esp,0x10
c002e5f8:	ba 54 44 03 c0       	mov    edx,0xc0034454
c002e5fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e601:	89 10                	mov    DWORD PTR [eax],edx
c002e603:	90                   	nop
c002e604:	83 c4 0c             	add    esp,0xc
c002e607:	c3                   	ret    

c002e608 <PIT::write(int)>:
c002e608:	83 ec 10             	sub    esp,0x10
c002e60b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002e60f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002e613:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002e619:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002e61d:	a3 04 1c 04 c0       	mov    ds:0xc0041c04,eax
c002e622:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002e627:	89 c2                	mov    edx,eax
c002e629:	c1 fa 1f             	sar    edx,0x1f
c002e62c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002e630:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e634:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002e63b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002e640:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002e644:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002e649:	ee                   	out    dx,al
c002e64a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002e64e:	0f b6 c0             	movzx  eax,al
c002e651:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002e658:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002e65c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002e660:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002e665:	ee                   	out    dx,al
c002e666:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002e66a:	c1 f8 08             	sar    eax,0x8
c002e66d:	0f b6 c0             	movzx  eax,al
c002e670:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002e677:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002e67b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002e67f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002e684:	ee                   	out    dx,al
c002e685:	90                   	nop
c002e686:	83 c4 10             	add    esp,0x10
c002e689:	c3                   	ret    
c002e68a:	66 90                	xchg   ax,ax

c002e68c <pitHandler(regs*, void*)>:
c002e68c:	83 ec 0c             	sub    esp,0xc
c002e68f:	8b 0d 04 1c 04 c0    	mov    ecx,DWORD PTR ds:0xc0041c04
c002e695:	b8 10 27 00 00       	mov    eax,0x2710
c002e69a:	89 c2                	mov    edx,eax
c002e69c:	c1 fa 1f             	sar    edx,0x1f
c002e69f:	f7 f9                	idiv   ecx
c002e6a1:	83 ec 0c             	sub    esp,0xc
c002e6a4:	50                   	push   eax
c002e6a5:	e8 da e9 fe ff       	call   c001d084 <timerHandler(unsigned int)>
c002e6aa:	83 c4 10             	add    esp,0x10
c002e6ad:	90                   	nop
c002e6ae:	83 c4 0c             	add    esp,0xc
c002e6b1:	c3                   	ret    
c002e6b2:	66 90                	xchg   ax,ax

c002e6b4 <PIT::open(int, int, void*)>:
c002e6b4:	83 ec 0c             	sub    esp,0xc
c002e6b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e6bb:	8b 00                	mov    eax,DWORD PTR [eax]
c002e6bd:	83 c0 24             	add    eax,0x24
c002e6c0:	8b 00                	mov    eax,DWORD PTR [eax]
c002e6c2:	83 ec 08             	sub    esp,0x8
c002e6c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e6c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e6cd:	ff d0                	call   eax
c002e6cf:	83 c4 10             	add    esp,0x10
c002e6d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e6d6:	83 ec 0c             	sub    esp,0xc
c002e6d9:	6a 00                	push   0x0
c002e6db:	6a 01                	push   0x1
c002e6dd:	68 8c e6 02 c0       	push   0xc002e68c
c002e6e2:	6a 00                	push   0x0
c002e6e4:	50                   	push   eax
c002e6e5:	e8 cc ce fe ff       	call   c001b5b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002e6ea:	83 c4 20             	add    esp,0x20
c002e6ed:	89 c2                	mov    edx,eax
c002e6ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e6f3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002e6f9:	b8 00 00 00 00       	mov    eax,0x0
c002e6fe:	83 c4 0c             	add    esp,0xc
c002e701:	c3                   	ret    
c002e702:	66 90                	xchg   ax,ax

c002e704 <PIT::close(int, int, void*)>:
c002e704:	83 ec 0c             	sub    esp,0xc
c002e707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e70b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002e715:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e719:	6a 01                	push   0x1
c002e71b:	68 8c e6 02 c0       	push   0xc002e68c
c002e720:	6a 00                	push   0x0
c002e722:	50                   	push   eax
c002e723:	e8 c4 ce fe ff       	call   c001b5ec <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002e728:	83 c4 10             	add    esp,0x10
c002e72b:	b8 00 00 00 00       	mov    eax,0x0
c002e730:	83 c4 0c             	add    esp,0xc
c002e733:	c3                   	ret    

c002e734 <PIT::PIT()>:
c002e734:	83 ec 0c             	sub    esp,0xc
c002e737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e73b:	83 ec 08             	sub    esp,0x8
c002e73e:	68 7c 44 03 c0       	push   0xc003447c
c002e743:	50                   	push   eax
c002e744:	e8 6f e8 fe ff       	call   c001cfb8 <Timer::Timer(char const*)>
c002e749:	83 c4 10             	add    esp,0x10
c002e74c:	ba a4 44 03 c0       	mov    edx,0xc00344a4
c002e751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e755:	89 10                	mov    DWORD PTR [eax],edx
c002e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e75b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002e761:	0f b6 d0             	movzx  edx,al
c002e764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e768:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002e76f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e773:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002e779:	0f b6 d0             	movzx  edx,al
c002e77c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e780:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002e785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e789:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002e78f:	8d 50 01             	lea    edx,[eax+0x1]
c002e792:	88 d1                	mov    cl,dl
c002e794:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002e798:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002e79e:	0f b6 d0             	movzx  edx,al
c002e7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e7a5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002e7a9:	83 e1 3f             	and    ecx,0x3f
c002e7ac:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002e7b0:	90                   	nop
c002e7b1:	83 c4 0c             	add    esp,0xc
c002e7b4:	c3                   	ret    
c002e7b5:	66 90                	xchg   ax,ax
c002e7b7:	66 90                	xchg   ax,ax
c002e7b9:	66 90                	xchg   ax,ax
c002e7bb:	66 90                	xchg   ax,ax
c002e7bd:	66 90                	xchg   ax,ax
c002e7bf:	90                   	nop

c002e7c0 <avxDetect>:
c002e7c0:	b8 01 00 00 00       	mov    eax,0x1
c002e7c5:	0f a2                	cpuid  
c002e7c7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002e7cd:	74 15                	je     c002e7e4 <avxDetect.noAVX>
c002e7cf:	b8 01 00 00 00       	mov    eax,0x1
c002e7d4:	0f a2                	cpuid  
c002e7d6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002e7dc:	74 06                	je     c002e7e4 <avxDetect.noAVX>
c002e7de:	b8 01 00 00 00       	mov    eax,0x1
c002e7e3:	c3                   	ret    

c002e7e4 <avxDetect.noAVX>:
c002e7e4:	b8 00 00 00 00       	mov    eax,0x0
c002e7e9:	c3                   	ret    

c002e7ea <avxSave>:
c002e7ea:	53                   	push   ebx
c002e7eb:	52                   	push   edx
c002e7ec:	31 c0                	xor    eax,eax
c002e7ee:	48                   	dec    eax
c002e7ef:	89 c2                	mov    edx,eax
c002e7f1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e7f5:	0f ae 23             	xsave  [ebx]
c002e7f8:	5a                   	pop    edx
c002e7f9:	5b                   	pop    ebx
c002e7fa:	c3                   	ret    

c002e7fb <avxLoad>:
c002e7fb:	53                   	push   ebx
c002e7fc:	52                   	push   edx
c002e7fd:	31 c0                	xor    eax,eax
c002e7ff:	48                   	dec    eax
c002e800:	89 c2                	mov    edx,eax
c002e802:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e806:	0f ae 2b             	xrstor [ebx]
c002e809:	5a                   	pop    edx
c002e80a:	5b                   	pop    ebx
c002e80b:	c3                   	ret    

c002e80c <avxInit>:
c002e80c:	e8 47 03 00 00       	call   c002eb58 <sseInit>
c002e811:	50                   	push   eax
c002e812:	51                   	push   ecx
c002e813:	0f 20 e0             	mov    eax,cr4
c002e816:	0d 00 00 04 00       	or     eax,0x40000
c002e81b:	0f 22 e0             	mov    cr4,eax
c002e81e:	31 c9                	xor    ecx,ecx
c002e820:	0f 01 d0             	xgetbv 
c002e823:	0d 07 00 00 00       	or     eax,0x7
c002e828:	0f 01 d1             	xsetbv 
c002e82b:	59                   	pop    ecx
c002e82c:	58                   	pop    eax
c002e82d:	c3                   	ret    

c002e82e <avxClose>:
c002e82e:	c3                   	ret    
c002e82f:	90                   	nop

c002e830 <isr0>:
c002e830:	fa                   	cli    
c002e831:	68 00 00 00 00       	push   0x0
c002e836:	68 00 00 00 00       	push   0x0
c002e83b:	e9 56 01 00 00       	jmp    c002e996 <int_common_stub>

c002e840 <isr1>:
c002e840:	fa                   	cli    
c002e841:	6a 00                	push   0x0
c002e843:	6a 01                	push   0x1
c002e845:	e9 4c 01 00 00       	jmp    c002e996 <int_common_stub>

c002e84a <isr2>:
c002e84a:	fa                   	cli    
c002e84b:	6a 00                	push   0x0
c002e84d:	6a 02                	push   0x2
c002e84f:	e9 42 01 00 00       	jmp    c002e996 <int_common_stub>

c002e854 <isr3>:
c002e854:	fa                   	cli    
c002e855:	6a 00                	push   0x0
c002e857:	6a 03                	push   0x3
c002e859:	e9 38 01 00 00       	jmp    c002e996 <int_common_stub>

c002e85e <isr4>:
c002e85e:	fa                   	cli    
c002e85f:	6a 00                	push   0x0
c002e861:	6a 04                	push   0x4
c002e863:	e9 2e 01 00 00       	jmp    c002e996 <int_common_stub>

c002e868 <isr5>:
c002e868:	fa                   	cli    
c002e869:	6a 00                	push   0x0
c002e86b:	6a 05                	push   0x5
c002e86d:	e9 24 01 00 00       	jmp    c002e996 <int_common_stub>

c002e872 <isr6>:
c002e872:	fa                   	cli    
c002e873:	6a 00                	push   0x0
c002e875:	6a 06                	push   0x6
c002e877:	e9 1a 01 00 00       	jmp    c002e996 <int_common_stub>

c002e87c <isr7>:
c002e87c:	fa                   	cli    
c002e87d:	6a 00                	push   0x0
c002e87f:	6a 07                	push   0x7
c002e881:	e9 10 01 00 00       	jmp    c002e996 <int_common_stub>

c002e886 <isr8>:
c002e886:	fa                   	cli    
c002e887:	6a 08                	push   0x8
c002e889:	e9 08 01 00 00       	jmp    c002e996 <int_common_stub>

c002e88e <isr9>:
c002e88e:	fa                   	cli    
c002e88f:	6a 00                	push   0x0
c002e891:	6a 09                	push   0x9
c002e893:	e9 fe 00 00 00       	jmp    c002e996 <int_common_stub>

c002e898 <isr10>:
c002e898:	fa                   	cli    
c002e899:	6a 0a                	push   0xa
c002e89b:	e9 f6 00 00 00       	jmp    c002e996 <int_common_stub>

c002e8a0 <isr11>:
c002e8a0:	fa                   	cli    
c002e8a1:	6a 0b                	push   0xb
c002e8a3:	e9 ee 00 00 00       	jmp    c002e996 <int_common_stub>

c002e8a8 <isr12>:
c002e8a8:	fa                   	cli    
c002e8a9:	6a 0c                	push   0xc
c002e8ab:	e9 e6 00 00 00       	jmp    c002e996 <int_common_stub>

c002e8b0 <isr13>:
c002e8b0:	fa                   	cli    
c002e8b1:	6a 0d                	push   0xd
c002e8b3:	53                   	push   ebx
c002e8b4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e8b8:	81 fb 86 ea 02 c0    	cmp    ebx,0xc002ea86
c002e8be:	5b                   	pop    ebx
c002e8bf:	0f 84 c3 01 00 00    	je     c002ea88 <finishSignal2>
c002e8c5:	e9 cc 00 00 00       	jmp    c002e996 <int_common_stub>

c002e8ca <isr14>:
c002e8ca:	fa                   	cli    
c002e8cb:	6a 0e                	push   0xe
c002e8cd:	e9 c4 00 00 00       	jmp    c002e996 <int_common_stub>

c002e8d2 <isr15>:
c002e8d2:	fa                   	cli    
c002e8d3:	6a 00                	push   0x0
c002e8d5:	6a 0f                	push   0xf
c002e8d7:	e9 ba 00 00 00       	jmp    c002e996 <int_common_stub>

c002e8dc <isr16>:
c002e8dc:	fa                   	cli    
c002e8dd:	6a 00                	push   0x0
c002e8df:	6a 10                	push   0x10
c002e8e1:	e9 b0 00 00 00       	jmp    c002e996 <int_common_stub>

c002e8e6 <isr17>:
c002e8e6:	fa                   	cli    
c002e8e7:	6a 00                	push   0x0
c002e8e9:	6a 11                	push   0x11
c002e8eb:	e9 a6 00 00 00       	jmp    c002e996 <int_common_stub>

c002e8f0 <isr18>:
c002e8f0:	fa                   	cli    
c002e8f1:	6a 00                	push   0x0
c002e8f3:	6a 12                	push   0x12
c002e8f5:	e9 9c 00 00 00       	jmp    c002e996 <int_common_stub>

c002e8fa <irq3>:
c002e8fa:	fa                   	cli    
c002e8fb:	6a 00                	push   0x0
c002e8fd:	6a 23                	push   0x23
c002e8ff:	e9 92 00 00 00       	jmp    c002e996 <int_common_stub>

c002e904 <irq4>:
c002e904:	fa                   	cli    
c002e905:	6a 00                	push   0x0
c002e907:	6a 24                	push   0x24
c002e909:	e9 88 00 00 00       	jmp    c002e996 <int_common_stub>

c002e90e <irq5>:
c002e90e:	fa                   	cli    
c002e90f:	6a 00                	push   0x0
c002e911:	6a 25                	push   0x25
c002e913:	e9 7e 00 00 00       	jmp    c002e996 <int_common_stub>

c002e918 <irq6>:
c002e918:	fa                   	cli    
c002e919:	6a 00                	push   0x0
c002e91b:	6a 26                	push   0x26
c002e91d:	e9 74 00 00 00       	jmp    c002e996 <int_common_stub>

c002e922 <irq7>:
c002e922:	fa                   	cli    
c002e923:	6a 00                	push   0x0
c002e925:	6a 27                	push   0x27
c002e927:	e9 6a 00 00 00       	jmp    c002e996 <int_common_stub>

c002e92c <irq8>:
c002e92c:	fa                   	cli    
c002e92d:	6a 00                	push   0x0
c002e92f:	6a 28                	push   0x28
c002e931:	e9 60 00 00 00       	jmp    c002e996 <int_common_stub>

c002e936 <irq9>:
c002e936:	fa                   	cli    
c002e937:	6a 00                	push   0x0
c002e939:	6a 29                	push   0x29
c002e93b:	e9 56 00 00 00       	jmp    c002e996 <int_common_stub>

c002e940 <irq10>:
c002e940:	fa                   	cli    
c002e941:	6a 00                	push   0x0
c002e943:	6a 2a                	push   0x2a
c002e945:	e9 4c 00 00 00       	jmp    c002e996 <int_common_stub>

c002e94a <irq11>:
c002e94a:	fa                   	cli    
c002e94b:	6a 00                	push   0x0
c002e94d:	6a 2b                	push   0x2b
c002e94f:	e9 42 00 00 00       	jmp    c002e996 <int_common_stub>

c002e954 <irq12>:
c002e954:	fa                   	cli    
c002e955:	6a 00                	push   0x0
c002e957:	6a 2c                	push   0x2c
c002e959:	e9 38 00 00 00       	jmp    c002e996 <int_common_stub>

c002e95e <irq13>:
c002e95e:	fa                   	cli    
c002e95f:	6a 00                	push   0x0
c002e961:	6a 2d                	push   0x2d
c002e963:	e9 2e 00 00 00       	jmp    c002e996 <int_common_stub>

c002e968 <irq14>:
c002e968:	fa                   	cli    
c002e969:	6a 00                	push   0x0
c002e96b:	6a 2e                	push   0x2e
c002e96d:	e9 24 00 00 00       	jmp    c002e996 <int_common_stub>

c002e972 <irq15>:
c002e972:	fa                   	cli    
c002e973:	6a 00                	push   0x0
c002e975:	6a 2f                	push   0x2f
c002e977:	e9 1a 00 00 00       	jmp    c002e996 <int_common_stub>

c002e97c <irq1>:
c002e97c:	fa                   	cli    
c002e97d:	6a 00                	push   0x0
c002e97f:	6a 21                	push   0x21
c002e981:	eb 13                	jmp    c002e996 <int_common_stub>

c002e983 <irq2>:
c002e983:	fa                   	cli    
c002e984:	6a 00                	push   0x0
c002e986:	6a 22                	push   0x22
c002e988:	eb 0c                	jmp    c002e996 <int_common_stub>

c002e98a <isr96>:
c002e98a:	6a 00                	push   0x0
c002e98c:	6a 60                	push   0x60
c002e98e:	fb                   	sti    
c002e98f:	eb 37                	jmp    c002e9c8 <syscall_common_stub>

c002e991 <irq0>:
c002e991:	fa                   	cli    
c002e992:	6a 00                	push   0x0
c002e994:	6a 20                	push   0x20

c002e996 <int_common_stub>:
c002e996:	60                   	pusha  
c002e997:	1e                   	push   ds
c002e998:	06                   	push   es
c002e999:	0f a0                	push   fs
c002e99b:	0f a8                	push   gs
c002e99d:	66 b8 10 00          	mov    ax,0x10
c002e9a1:	66 8e d8             	mov    ds,ax
c002e9a4:	66 8e c0             	mov    es,ax
c002e9a7:	66 8e e0             	mov    fs,ax
c002e9aa:	66 8e e8             	mov    gs,ax
c002e9ad:	54                   	push   esp
c002e9ae:	fc                   	cld    
c002e9af:	e8 18 d1 fe ff       	call   c001bacc <int_handler>
c002e9b4:	81 c4 04 00 00 00    	add    esp,0x4
c002e9ba:	0f a9                	pop    gs
c002e9bc:	0f a1                	pop    fs
c002e9be:	07                   	pop    es
c002e9bf:	1f                   	pop    ds
c002e9c0:	61                   	popa   
c002e9c1:	81 c4 08 00 00 00    	add    esp,0x8
c002e9c7:	cf                   	iret   

c002e9c8 <syscall_common_stub>:
c002e9c8:	60                   	pusha  
c002e9c9:	1e                   	push   ds
c002e9ca:	06                   	push   es
c002e9cb:	0f a0                	push   fs
c002e9cd:	0f a8                	push   gs
c002e9cf:	66 b8 10 00          	mov    ax,0x10
c002e9d3:	66 8e d8             	mov    ds,ax
c002e9d6:	66 8e c0             	mov    es,ax
c002e9d9:	66 8e e0             	mov    fs,ax
c002e9dc:	66 8e e8             	mov    gs,ax
c002e9df:	54                   	push   esp
c002e9e0:	fc                   	cld    
c002e9e1:	e8 e6 d0 fe ff       	call   c001bacc <int_handler>
c002e9e6:	81 c4 04 00 00 00    	add    esp,0x4
c002e9ec:	0f a9                	pop    gs
c002e9ee:	0f a1                	pop    fs
c002e9f0:	07                   	pop    es
c002e9f1:	1f                   	pop    ds
c002e9f2:	e8 31 27 ff ff       	call   c0021128 <KiCheckSignalZ>
c002e9f7:	3d 00 00 00 00       	cmp    eax,0x0
c002e9fc:	0f 84 c0 00 00 00    	je     c002eac2 <skipSignals>
c002ea02:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c002ea07:	61                   	popa   
c002ea08:	53                   	push   ebx
c002ea09:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002ea0f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c002ea12:	5b                   	pop    ebx
c002ea13:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c002ea18:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002ea1b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002ea1e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002ea21:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c002ea24:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c002ea27:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c002ea2a:	81 c4 08 00 00 00    	add    esp,0x8
c002ea30:	5e                   	pop    esi
c002ea31:	5b                   	pop    ebx
c002ea32:	59                   	pop    ecx
c002ea33:	5a                   	pop    edx
c002ea34:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c002ea37:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c002ea3a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002ea3d:	52                   	push   edx
c002ea3e:	51                   	push   ecx
c002ea3f:	53                   	push   ebx
c002ea40:	56                   	push   esi
c002ea41:	81 ec 08 00 00 00    	sub    esp,0x8
c002ea47:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c002ea4a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002ea4d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c002ea50:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002ea53:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002ea56:	60                   	pusha  
c002ea57:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002ea5d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c002ea60:	89 e3                	mov    ebx,esp
c002ea62:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c002ea65:	52                   	push   edx
c002ea66:	68 86 ea 02 c0       	push   0xc002ea86
c002ea6b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002ea6e:	89 dc                	mov    esp,ebx
c002ea70:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c002ea73:	68 23 00 00 00       	push   0x23
c002ea78:	51                   	push   ecx
c002ea79:	68 02 02 00 00       	push   0x202
c002ea7e:	68 1b 00 00 00       	push   0x1b
c002ea83:	ff 36                	push   DWORD PTR [esi]
c002ea85:	cf                   	iret   

c002ea86 <finishSignal>:
c002ea86:	cd 0f                	int    0xf

c002ea88 <finishSignal2>:
c002ea88:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002ea8e:	e8 12 27 ff ff       	call   c00211a5 <KiFinishSignalZ>
c002ea93:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c002ea99:	68 23 00 00 00       	push   0x23
c002ea9e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c002eaa1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c002eaa4:	68 1b 00 00 00       	push   0x1b
c002eaa9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c002eaac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002eaaf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002eab2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002eab5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002eab8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c002eabb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c002eabe:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c002eac1:	cf                   	iret   

c002eac2 <skipSignals>:
c002eac2:	61                   	popa   
c002eac3:	81 c4 08 00 00 00    	add    esp,0x8
c002eac9:	cf                   	iret   
c002eaca:	90                   	nop
c002eacb:	90                   	nop

c002eacc <irq16>:
c002eacc:	fa                   	cli    
c002eacd:	6a 00                	push   0x0
c002eacf:	6a 30                	push   0x30
c002ead1:	e9 c0 fe ff ff       	jmp    c002e996 <int_common_stub>

c002ead6 <irq17>:
c002ead6:	fa                   	cli    
c002ead7:	6a 00                	push   0x0
c002ead9:	6a 31                	push   0x31
c002eadb:	e9 b6 fe ff ff       	jmp    c002e996 <int_common_stub>

c002eae0 <irq18>:
c002eae0:	fa                   	cli    
c002eae1:	6a 00                	push   0x0
c002eae3:	6a 32                	push   0x32
c002eae5:	e9 ac fe ff ff       	jmp    c002e996 <int_common_stub>

c002eaea <irq19>:
c002eaea:	fa                   	cli    
c002eaeb:	6a 00                	push   0x0
c002eaed:	6a 33                	push   0x33
c002eaef:	e9 a2 fe ff ff       	jmp    c002e996 <int_common_stub>

c002eaf4 <irq20>:
c002eaf4:	fa                   	cli    
c002eaf5:	6a 00                	push   0x0
c002eaf7:	6a 34                	push   0x34
c002eaf9:	e9 98 fe ff ff       	jmp    c002e996 <int_common_stub>

c002eafe <irq21>:
c002eafe:	fa                   	cli    
c002eaff:	6a 00                	push   0x0
c002eb01:	6a 35                	push   0x35
c002eb03:	e9 8e fe ff ff       	jmp    c002e996 <int_common_stub>

c002eb08 <irq22>:
c002eb08:	fa                   	cli    
c002eb09:	6a 00                	push   0x0
c002eb0b:	6a 36                	push   0x36
c002eb0d:	e9 84 fe ff ff       	jmp    c002e996 <int_common_stub>

c002eb12 <irq23>:
c002eb12:	fa                   	cli    
c002eb13:	6a 00                	push   0x0
c002eb15:	6a 37                	push   0x37
c002eb17:	e9 7a fe ff ff       	jmp    c002e996 <int_common_stub>
c002eb1c:	66 90                	xchg   ax,ax
c002eb1e:	66 90                	xchg   ax,ax

c002eb20 <i386GetRDRAND>:
c002eb20:	b9 64 00 00 00       	mov    ecx,0x64

c002eb25 <retry>:
c002eb25:	0f c7 f0             	rdrand eax
c002eb28:	72 05                	jb     c002eb2f <retry.done>
c002eb2a:	e2 f9                	loop   c002eb25 <retry>

c002eb2c <retry.fail>:
c002eb2c:	31 c0                	xor    eax,eax
c002eb2e:	c3                   	ret    

c002eb2f <retry.done>:
c002eb2f:	c3                   	ret    

c002eb30 <sseDetect>:
c002eb30:	b8 01 00 00 00       	mov    eax,0x1
c002eb35:	0f a2                	cpuid  
c002eb37:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002eb3d:	74 06                	je     c002eb45 <sseDetect.noSSE>
c002eb3f:	b8 01 00 00 00       	mov    eax,0x1
c002eb44:	c3                   	ret    

c002eb45 <sseDetect.noSSE>:
c002eb45:	31 c0                	xor    eax,eax
c002eb47:	c3                   	ret    

c002eb48 <sseSave>:
c002eb48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb4c:	0f ae 00             	fxsave [eax]
c002eb4f:	c3                   	ret    

c002eb50 <sseLoad>:
c002eb50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb54:	0f ae 08             	fxrstor [eax]
c002eb57:	c3                   	ret    

c002eb58 <sseInit>:
c002eb58:	e8 42 00 00 00       	call   c002eb9f <x87Init>
c002eb5d:	0f 20 e0             	mov    eax,cr4
c002eb60:	66 0d 00 06          	or     ax,0x600
c002eb64:	0f 22 e0             	mov    cr4,eax
c002eb67:	c3                   	ret    

c002eb68 <sseClose>:
c002eb68:	c3                   	ret    
c002eb69:	66 90                	xchg   ax,ax
c002eb6b:	66 90                	xchg   ax,ax
c002eb6d:	66 90                	xchg   ax,ax
c002eb6f:	90                   	nop

c002eb70 <value_37F>:
c002eb70:	7f 03                	jg     c002eb75 <value_37A+0x1>

c002eb72 <value_37E>:
c002eb72:	7e 03                	jle    c002eb77 <x87Detect+0x1>

c002eb74 <value_37A>:
c002eb74:	7a 03                	jp     c002eb79 <x87Detect+0x3>

c002eb76 <x87Detect>:
c002eb76:	b8 01 00 00 00       	mov    eax,0x1
c002eb7b:	0f a2                	cpuid  
c002eb7d:	f7 c2 01 00 00 00    	test   edx,0x1
c002eb83:	74 06                	je     c002eb8b <x87Detect.nox87>
c002eb85:	b8 01 00 00 00       	mov    eax,0x1
c002eb8a:	c3                   	ret    

c002eb8b <x87Detect.nox87>:
c002eb8b:	b8 00 00 00 00       	mov    eax,0x0
c002eb90:	c3                   	ret    

c002eb91 <x87Save>:
c002eb91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb95:	dd 30                	fnsave [eax]
c002eb97:	c3                   	ret    

c002eb98 <x87Load>:
c002eb98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb9c:	dd 20                	frstor [eax]
c002eb9e:	c3                   	ret    

c002eb9f <x87Init>:
c002eb9f:	0f 20 c0             	mov    eax,cr0
c002eba2:	66 25 fb ff          	and    ax,0xfffb
c002eba6:	66 0d 22 00          	or     ax,0x22
c002ebaa:	0f 22 c0             	mov    cr0,eax
c002ebad:	db e3                	fninit 
c002ebaf:	0f 06                	clts   
c002ebb1:	d9 2d 74 eb 02 c0    	fldcw  WORD PTR ds:0xc002eb74
c002ebb7:	c3                   	ret    

c002ebb8 <x87Close>:
c002ebb8:	c3                   	ret    
c002ebb9:	66 90                	xchg   ax,ax
c002ebbb:	90                   	nop

c002ebbc <__do_global_ctors_aux>:
c002ebbc:	a1 70 fb 02 c0       	mov    eax,ds:0xc002fb70
c002ebc1:	83 f8 ff             	cmp    eax,0xffffffff
c002ebc4:	74 1a                	je     c002ebe0 <__do_global_ctors_aux+0x24>
c002ebc6:	55                   	push   ebp
c002ebc7:	89 e5                	mov    ebp,esp
c002ebc9:	53                   	push   ebx
c002ebca:	52                   	push   edx
c002ebcb:	bb 70 fb 02 c0       	mov    ebx,0xc002fb70
c002ebd0:	ff d0                	call   eax
c002ebd2:	83 eb 04             	sub    ebx,0x4
c002ebd5:	8b 03                	mov    eax,DWORD PTR [ebx]
c002ebd7:	83 f8 ff             	cmp    eax,0xffffffff
c002ebda:	75 f4                	jne    c002ebd0 <__do_global_ctors_aux+0x14>
c002ebdc:	58                   	pop    eax
c002ebdd:	5b                   	pop    ebx
c002ebde:	5d                   	pop    ebp
c002ebdf:	c3                   	ret    
c002ebe0:	c3                   	ret    
c002ebe1:	66 90                	xchg   ax,ax
c002ebe3:	90                   	nop

c002ebe4 <__divdi3>:
c002ebe4:	55                   	push   ebp
c002ebe5:	57                   	push   edi
c002ebe6:	56                   	push   esi
c002ebe7:	53                   	push   ebx
c002ebe8:	83 ec 1c             	sub    esp,0x1c
c002ebeb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002ebef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002ebf3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002ebf6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002ebfa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002ebfe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002ec02:	85 db                	test   ebx,ebx
c002ec04:	0f 88 8e 00 00 00    	js     c002ec98 <__divdi3+0xb4>
c002ec0a:	89 dd                	mov    ebp,ebx
c002ec0c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002ec14:	89 d3                	mov    ebx,edx
c002ec16:	85 d2                	test   edx,edx
c002ec18:	79 0d                	jns    c002ec27 <__divdi3+0x43>
c002ec1a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002ec1e:	f7 d8                	neg    eax
c002ec20:	83 d2 00             	adc    edx,0x0
c002ec23:	f7 da                	neg    edx
c002ec25:	89 d3                	mov    ebx,edx
c002ec27:	89 c7                	mov    edi,eax
c002ec29:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002ec2c:	85 db                	test   ebx,ebx
c002ec2e:	75 48                	jne    c002ec78 <__divdi3+0x94>
c002ec30:	39 ef                	cmp    edi,ebp
c002ec32:	76 24                	jbe    c002ec58 <__divdi3+0x74>
c002ec34:	89 ea                	mov    edx,ebp
c002ec36:	f7 f7                	div    edi
c002ec38:	89 c1                	mov    ecx,eax
c002ec3a:	31 f6                	xor    esi,esi
c002ec3c:	89 c8                	mov    eax,ecx
c002ec3e:	89 f2                	mov    edx,esi
c002ec40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002ec44:	85 c9                	test   ecx,ecx
c002ec46:	74 07                	je     c002ec4f <__divdi3+0x6b>
c002ec48:	f7 d8                	neg    eax
c002ec4a:	83 d2 00             	adc    edx,0x0
c002ec4d:	f7 da                	neg    edx
c002ec4f:	83 c4 1c             	add    esp,0x1c
c002ec52:	5b                   	pop    ebx
c002ec53:	5e                   	pop    esi
c002ec54:	5f                   	pop    edi
c002ec55:	5d                   	pop    ebp
c002ec56:	c3                   	ret    
c002ec57:	90                   	nop
c002ec58:	85 ff                	test   edi,edi
c002ec5a:	75 0b                	jne    c002ec67 <__divdi3+0x83>
c002ec5c:	b8 01 00 00 00       	mov    eax,0x1
c002ec61:	31 d2                	xor    edx,edx
c002ec63:	f7 f3                	div    ebx
c002ec65:	89 c7                	mov    edi,eax
c002ec67:	31 d2                	xor    edx,edx
c002ec69:	89 e8                	mov    eax,ebp
c002ec6b:	f7 f7                	div    edi
c002ec6d:	89 c6                	mov    esi,eax
c002ec6f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002ec72:	f7 f7                	div    edi
c002ec74:	89 c1                	mov    ecx,eax
c002ec76:	eb c4                	jmp    c002ec3c <__divdi3+0x58>
c002ec78:	39 eb                	cmp    ebx,ebp
c002ec7a:	77 3c                	ja     c002ecb8 <__divdi3+0xd4>
c002ec7c:	0f bd f3             	bsr    esi,ebx
c002ec7f:	83 f6 1f             	xor    esi,0x1f
c002ec82:	75 40                	jne    c002ecc4 <__divdi3+0xe0>
c002ec84:	39 eb                	cmp    ebx,ebp
c002ec86:	72 09                	jb     c002ec91 <__divdi3+0xad>
c002ec88:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002ec8b:	0f 87 97 00 00 00    	ja     c002ed28 <__divdi3+0x144>
c002ec91:	b9 01 00 00 00       	mov    ecx,0x1
c002ec96:	eb a4                	jmp    c002ec3c <__divdi3+0x58>
c002ec98:	f7 d9                	neg    ecx
c002ec9a:	83 d3 00             	adc    ebx,0x0
c002ec9d:	f7 db                	neg    ebx
c002ec9f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002eca2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002eca6:	89 dd                	mov    ebp,ebx
c002eca8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002ecb0:	e9 5f ff ff ff       	jmp    c002ec14 <__divdi3+0x30>
c002ecb5:	8d 76 00             	lea    esi,[esi+0x0]
c002ecb8:	31 f6                	xor    esi,esi
c002ecba:	31 c9                	xor    ecx,ecx
c002ecbc:	e9 7b ff ff ff       	jmp    c002ec3c <__divdi3+0x58>
c002ecc1:	8d 76 00             	lea    esi,[esi+0x0]
c002ecc4:	b8 20 00 00 00       	mov    eax,0x20
c002ecc9:	29 f0                	sub    eax,esi
c002eccb:	89 f1                	mov    ecx,esi
c002eccd:	d3 e3                	shl    ebx,cl
c002eccf:	89 fa                	mov    edx,edi
c002ecd1:	88 c1                	mov    cl,al
c002ecd3:	d3 ea                	shr    edx,cl
c002ecd5:	09 da                	or     edx,ebx
c002ecd7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002ecdb:	89 f1                	mov    ecx,esi
c002ecdd:	d3 e7                	shl    edi,cl
c002ecdf:	89 eb                	mov    ebx,ebp
c002ece1:	88 c1                	mov    cl,al
c002ece3:	d3 eb                	shr    ebx,cl
c002ece5:	89 f1                	mov    ecx,esi
c002ece7:	d3 e5                	shl    ebp,cl
c002ece9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c002ecec:	88 c1                	mov    cl,al
c002ecee:	d3 ea                	shr    edx,cl
c002ecf0:	09 d5                	or     ebp,edx
c002ecf2:	89 e8                	mov    eax,ebp
c002ecf4:	89 da                	mov    edx,ebx
c002ecf6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002ecfa:	89 d3                	mov    ebx,edx
c002ecfc:	89 c5                	mov    ebp,eax
c002ecfe:	f7 e7                	mul    edi
c002ed00:	39 d3                	cmp    ebx,edx
c002ed02:	72 18                	jb     c002ed1c <__divdi3+0x138>
c002ed04:	74 0a                	je     c002ed10 <__divdi3+0x12c>
c002ed06:	89 e9                	mov    ecx,ebp
c002ed08:	31 f6                	xor    esi,esi
c002ed0a:	e9 2d ff ff ff       	jmp    c002ec3c <__divdi3+0x58>
c002ed0f:	90                   	nop
c002ed10:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002ed13:	89 f1                	mov    ecx,esi
c002ed15:	d3 e7                	shl    edi,cl
c002ed17:	39 c7                	cmp    edi,eax
c002ed19:	73 eb                	jae    c002ed06 <__divdi3+0x122>
c002ed1b:	90                   	nop
c002ed1c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002ed1f:	31 f6                	xor    esi,esi
c002ed21:	e9 16 ff ff ff       	jmp    c002ec3c <__divdi3+0x58>
c002ed26:	66 90                	xchg   ax,ax
c002ed28:	31 c9                	xor    ecx,ecx
c002ed2a:	e9 0d ff ff ff       	jmp    c002ec3c <__divdi3+0x58>
c002ed2f:	90                   	nop

c002ed30 <__moddi3>:
c002ed30:	55                   	push   ebp
c002ed31:	57                   	push   edi
c002ed32:	56                   	push   esi
c002ed33:	53                   	push   ebx
c002ed34:	83 ec 2c             	sub    esp,0x2c
c002ed37:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002ed3b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002ed3f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002ed43:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002ed47:	85 db                	test   ebx,ebx
c002ed49:	0f 88 85 00 00 00    	js     c002edd4 <__moddi3+0xa4>
c002ed4f:	89 de                	mov    esi,ebx
c002ed51:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002ed59:	89 d7                	mov    edi,edx
c002ed5b:	85 d2                	test   edx,edx
c002ed5d:	79 09                	jns    c002ed68 <__moddi3+0x38>
c002ed5f:	f7 d8                	neg    eax
c002ed61:	83 d2 00             	adc    edx,0x0
c002ed64:	f7 da                	neg    edx
c002ed66:	89 d7                	mov    edi,edx
c002ed68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002ed6c:	89 cd                	mov    ebp,ecx
c002ed6e:	85 ff                	test   edi,edi
c002ed70:	75 52                	jne    c002edc4 <__moddi3+0x94>
c002ed72:	89 c3                	mov    ebx,eax
c002ed74:	39 f0                	cmp    eax,esi
c002ed76:	76 24                	jbe    c002ed9c <__moddi3+0x6c>
c002ed78:	89 c8                	mov    eax,ecx
c002ed7a:	89 f2                	mov    edx,esi
c002ed7c:	f7 f3                	div    ebx
c002ed7e:	89 d6                	mov    esi,edx
c002ed80:	89 f0                	mov    eax,esi
c002ed82:	31 d2                	xor    edx,edx
c002ed84:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002ed88:	85 c9                	test   ecx,ecx
c002ed8a:	74 07                	je     c002ed93 <__moddi3+0x63>
c002ed8c:	f7 d8                	neg    eax
c002ed8e:	83 d2 00             	adc    edx,0x0
c002ed91:	f7 da                	neg    edx
c002ed93:	83 c4 2c             	add    esp,0x2c
c002ed96:	5b                   	pop    ebx
c002ed97:	5e                   	pop    esi
c002ed98:	5f                   	pop    edi
c002ed99:	5d                   	pop    ebp
c002ed9a:	c3                   	ret    
c002ed9b:	90                   	nop
c002ed9c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002eda0:	85 db                	test   ebx,ebx
c002eda2:	75 0d                	jne    c002edb1 <__moddi3+0x81>
c002eda4:	b8 01 00 00 00       	mov    eax,0x1
c002eda9:	31 d2                	xor    edx,edx
c002edab:	f7 f7                	div    edi
c002edad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002edb1:	89 f0                	mov    eax,esi
c002edb3:	31 d2                	xor    edx,edx
c002edb5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002edb9:	f7 f7                	div    edi
c002edbb:	89 e8                	mov    eax,ebp
c002edbd:	f7 f7                	div    edi
c002edbf:	89 d6                	mov    esi,edx
c002edc1:	eb bd                	jmp    c002ed80 <__moddi3+0x50>
c002edc3:	90                   	nop
c002edc4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002edc8:	39 f7                	cmp    edi,esi
c002edca:	76 20                	jbe    c002edec <__moddi3+0xbc>
c002edcc:	89 c8                	mov    eax,ecx
c002edce:	89 f2                	mov    edx,esi
c002edd0:	eb b2                	jmp    c002ed84 <__moddi3+0x54>
c002edd2:	66 90                	xchg   ax,ax
c002edd4:	f7 d9                	neg    ecx
c002edd6:	83 d3 00             	adc    ebx,0x0
c002edd9:	f7 db                	neg    ebx
c002eddb:	89 de                	mov    esi,ebx
c002eddd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c002ede5:	e9 6f ff ff ff       	jmp    c002ed59 <__moddi3+0x29>
c002edea:	66 90                	xchg   ax,ax
c002edec:	0f bd c7             	bsr    eax,edi
c002edef:	83 f0 1f             	xor    eax,0x1f
c002edf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002edf6:	75 24                	jne    c002ee1c <__moddi3+0xec>
c002edf8:	39 f7                	cmp    edi,esi
c002edfa:	72 06                	jb     c002ee02 <__moddi3+0xd2>
c002edfc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002ee00:	77 0c                	ja     c002ee0e <__moddi3+0xde>
c002ee02:	89 e9                	mov    ecx,ebp
c002ee04:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002ee08:	19 fe                	sbb    esi,edi
c002ee0a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002ee0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002ee12:	89 f2                	mov    edx,esi
c002ee14:	e9 6b ff ff ff       	jmp    c002ed84 <__moddi3+0x54>
c002ee19:	8d 76 00             	lea    esi,[esi+0x0]
c002ee1c:	b8 20 00 00 00       	mov    eax,0x20
c002ee21:	89 c2                	mov    edx,eax
c002ee23:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002ee27:	29 da                	sub    edx,ebx
c002ee29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002ee2d:	88 d9                	mov    cl,bl
c002ee2f:	d3 e7                	shl    edi,cl
c002ee31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002ee35:	88 d1                	mov    cl,dl
c002ee37:	d3 e8                	shr    eax,cl
c002ee39:	09 c7                	or     edi,eax
c002ee3b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002ee3f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002ee43:	89 d8                	mov    eax,ebx
c002ee45:	88 d9                	mov    cl,bl
c002ee47:	d3 e7                	shl    edi,cl
c002ee49:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002ee4d:	89 f3                	mov    ebx,esi
c002ee4f:	88 d1                	mov    cl,dl
c002ee51:	d3 eb                	shr    ebx,cl
c002ee53:	89 c7                	mov    edi,eax
c002ee55:	88 c1                	mov    cl,al
c002ee57:	d3 e6                	shl    esi,cl
c002ee59:	89 e8                	mov    eax,ebp
c002ee5b:	88 d1                	mov    cl,dl
c002ee5d:	d3 e8                	shr    eax,cl
c002ee5f:	09 f0                	or     eax,esi
c002ee61:	89 f9                	mov    ecx,edi
c002ee63:	d3 e5                	shl    ebp,cl
c002ee65:	89 da                	mov    edx,ebx
c002ee67:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002ee6b:	89 d3                	mov    ebx,edx
c002ee6d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002ee71:	89 c6                	mov    esi,eax
c002ee73:	89 d1                	mov    ecx,edx
c002ee75:	39 d3                	cmp    ebx,edx
c002ee77:	72 27                	jb     c002eea0 <__moddi3+0x170>
c002ee79:	74 21                	je     c002ee9c <__moddi3+0x16c>
c002ee7b:	29 f5                	sub    ebp,esi
c002ee7d:	19 cb                	sbb    ebx,ecx
c002ee7f:	89 de                	mov    esi,ebx
c002ee81:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c002ee85:	d3 e6                	shl    esi,cl
c002ee87:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002ee8b:	89 f9                	mov    ecx,edi
c002ee8d:	d3 ed                	shr    ebp,cl
c002ee8f:	09 ee                	or     esi,ebp
c002ee91:	89 f0                	mov    eax,esi
c002ee93:	d3 eb                	shr    ebx,cl
c002ee95:	89 da                	mov    edx,ebx
c002ee97:	e9 e8 fe ff ff       	jmp    c002ed84 <__moddi3+0x54>
c002ee9c:	39 c5                	cmp    ebp,eax
c002ee9e:	73 db                	jae    c002ee7b <__moddi3+0x14b>
c002eea0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002eea4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002eea8:	89 d1                	mov    ecx,edx
c002eeaa:	89 c6                	mov    esi,eax
c002eeac:	eb cd                	jmp    c002ee7b <__moddi3+0x14b>
c002eeae:	66 90                	xchg   ax,ax

c002eeb0 <__udivdi3>:
c002eeb0:	55                   	push   ebp
c002eeb1:	57                   	push   edi
c002eeb2:	56                   	push   esi
c002eeb3:	53                   	push   ebx
c002eeb4:	83 ec 1c             	sub    esp,0x1c
c002eeb7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002eebb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002eebf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002eec3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002eec7:	85 d2                	test   edx,edx
c002eec9:	75 41                	jne    c002ef0c <__udivdi3+0x5c>
c002eecb:	39 f7                	cmp    edi,esi
c002eecd:	76 15                	jbe    c002eee4 <__udivdi3+0x34>
c002eecf:	89 e8                	mov    eax,ebp
c002eed1:	89 f2                	mov    edx,esi
c002eed3:	f7 f7                	div    edi
c002eed5:	31 db                	xor    ebx,ebx
c002eed7:	89 da                	mov    edx,ebx
c002eed9:	83 c4 1c             	add    esp,0x1c
c002eedc:	5b                   	pop    ebx
c002eedd:	5e                   	pop    esi
c002eede:	5f                   	pop    edi
c002eedf:	5d                   	pop    ebp
c002eee0:	c3                   	ret    
c002eee1:	8d 76 00             	lea    esi,[esi+0x0]
c002eee4:	89 f9                	mov    ecx,edi
c002eee6:	85 ff                	test   edi,edi
c002eee8:	75 0b                	jne    c002eef5 <__udivdi3+0x45>
c002eeea:	b8 01 00 00 00       	mov    eax,0x1
c002eeef:	31 d2                	xor    edx,edx
c002eef1:	f7 f7                	div    edi
c002eef3:	89 c1                	mov    ecx,eax
c002eef5:	31 d2                	xor    edx,edx
c002eef7:	89 f0                	mov    eax,esi
c002eef9:	f7 f1                	div    ecx
c002eefb:	89 c3                	mov    ebx,eax
c002eefd:	89 e8                	mov    eax,ebp
c002eeff:	f7 f1                	div    ecx
c002ef01:	89 da                	mov    edx,ebx
c002ef03:	83 c4 1c             	add    esp,0x1c
c002ef06:	5b                   	pop    ebx
c002ef07:	5e                   	pop    esi
c002ef08:	5f                   	pop    edi
c002ef09:	5d                   	pop    ebp
c002ef0a:	c3                   	ret    
c002ef0b:	90                   	nop
c002ef0c:	39 f2                	cmp    edx,esi
c002ef0e:	77 1c                	ja     c002ef2c <__udivdi3+0x7c>
c002ef10:	0f bd da             	bsr    ebx,edx
c002ef13:	83 f3 1f             	xor    ebx,0x1f
c002ef16:	75 24                	jne    c002ef3c <__udivdi3+0x8c>
c002ef18:	39 f2                	cmp    edx,esi
c002ef1a:	72 08                	jb     c002ef24 <__udivdi3+0x74>
c002ef1c:	39 ef                	cmp    edi,ebp
c002ef1e:	0f 87 84 00 00 00    	ja     c002efa8 <__udivdi3+0xf8>
c002ef24:	b8 01 00 00 00       	mov    eax,0x1
c002ef29:	eb ac                	jmp    c002eed7 <__udivdi3+0x27>
c002ef2b:	90                   	nop
c002ef2c:	31 db                	xor    ebx,ebx
c002ef2e:	31 c0                	xor    eax,eax
c002ef30:	89 da                	mov    edx,ebx
c002ef32:	83 c4 1c             	add    esp,0x1c
c002ef35:	5b                   	pop    ebx
c002ef36:	5e                   	pop    esi
c002ef37:	5f                   	pop    edi
c002ef38:	5d                   	pop    ebp
c002ef39:	c3                   	ret    
c002ef3a:	66 90                	xchg   ax,ax
c002ef3c:	b8 20 00 00 00       	mov    eax,0x20
c002ef41:	29 d8                	sub    eax,ebx
c002ef43:	88 d9                	mov    cl,bl
c002ef45:	d3 e2                	shl    edx,cl
c002ef47:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002ef4b:	89 fa                	mov    edx,edi
c002ef4d:	88 c1                	mov    cl,al
c002ef4f:	d3 ea                	shr    edx,cl
c002ef51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002ef55:	09 d1                	or     ecx,edx
c002ef57:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002ef5b:	88 d9                	mov    cl,bl
c002ef5d:	d3 e7                	shl    edi,cl
c002ef5f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002ef63:	89 f7                	mov    edi,esi
c002ef65:	88 c1                	mov    cl,al
c002ef67:	d3 ef                	shr    edi,cl
c002ef69:	88 d9                	mov    cl,bl
c002ef6b:	d3 e6                	shl    esi,cl
c002ef6d:	89 ea                	mov    edx,ebp
c002ef6f:	88 c1                	mov    cl,al
c002ef71:	d3 ea                	shr    edx,cl
c002ef73:	09 d6                	or     esi,edx
c002ef75:	89 f0                	mov    eax,esi
c002ef77:	89 fa                	mov    edx,edi
c002ef79:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002ef7d:	89 d7                	mov    edi,edx
c002ef7f:	89 c6                	mov    esi,eax
c002ef81:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002ef85:	39 d7                	cmp    edi,edx
c002ef87:	72 13                	jb     c002ef9c <__udivdi3+0xec>
c002ef89:	74 09                	je     c002ef94 <__udivdi3+0xe4>
c002ef8b:	89 f0                	mov    eax,esi
c002ef8d:	31 db                	xor    ebx,ebx
c002ef8f:	e9 43 ff ff ff       	jmp    c002eed7 <__udivdi3+0x27>
c002ef94:	88 d9                	mov    cl,bl
c002ef96:	d3 e5                	shl    ebp,cl
c002ef98:	39 c5                	cmp    ebp,eax
c002ef9a:	73 ef                	jae    c002ef8b <__udivdi3+0xdb>
c002ef9c:	8d 46 ff             	lea    eax,[esi-0x1]
c002ef9f:	31 db                	xor    ebx,ebx
c002efa1:	e9 31 ff ff ff       	jmp    c002eed7 <__udivdi3+0x27>
c002efa6:	66 90                	xchg   ax,ax
c002efa8:	31 c0                	xor    eax,eax
c002efaa:	e9 28 ff ff ff       	jmp    c002eed7 <__udivdi3+0x27>
c002efaf:	90                   	nop

c002efb0 <__umoddi3>:
c002efb0:	55                   	push   ebp
c002efb1:	57                   	push   edi
c002efb2:	56                   	push   esi
c002efb3:	53                   	push   ebx
c002efb4:	83 ec 1c             	sub    esp,0x1c
c002efb7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002efbb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002efbf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002efc3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002efc7:	89 da                	mov    edx,ebx
c002efc9:	85 c0                	test   eax,eax
c002efcb:	75 37                	jne    c002f004 <__umoddi3+0x54>
c002efcd:	39 df                	cmp    edi,ebx
c002efcf:	76 13                	jbe    c002efe4 <__umoddi3+0x34>
c002efd1:	89 f0                	mov    eax,esi
c002efd3:	f7 f7                	div    edi
c002efd5:	89 d0                	mov    eax,edx
c002efd7:	31 d2                	xor    edx,edx
c002efd9:	83 c4 1c             	add    esp,0x1c
c002efdc:	5b                   	pop    ebx
c002efdd:	5e                   	pop    esi
c002efde:	5f                   	pop    edi
c002efdf:	5d                   	pop    ebp
c002efe0:	c3                   	ret    
c002efe1:	8d 76 00             	lea    esi,[esi+0x0]
c002efe4:	89 fd                	mov    ebp,edi
c002efe6:	85 ff                	test   edi,edi
c002efe8:	75 0b                	jne    c002eff5 <__umoddi3+0x45>
c002efea:	b8 01 00 00 00       	mov    eax,0x1
c002efef:	31 d2                	xor    edx,edx
c002eff1:	f7 f7                	div    edi
c002eff3:	89 c5                	mov    ebp,eax
c002eff5:	89 d8                	mov    eax,ebx
c002eff7:	31 d2                	xor    edx,edx
c002eff9:	f7 f5                	div    ebp
c002effb:	89 f0                	mov    eax,esi
c002effd:	f7 f5                	div    ebp
c002efff:	89 d0                	mov    eax,edx
c002f001:	eb d4                	jmp    c002efd7 <__umoddi3+0x27>
c002f003:	90                   	nop
c002f004:	89 f1                	mov    ecx,esi
c002f006:	39 d8                	cmp    eax,ebx
c002f008:	76 0a                	jbe    c002f014 <__umoddi3+0x64>
c002f00a:	89 f0                	mov    eax,esi
c002f00c:	83 c4 1c             	add    esp,0x1c
c002f00f:	5b                   	pop    ebx
c002f010:	5e                   	pop    esi
c002f011:	5f                   	pop    edi
c002f012:	5d                   	pop    ebp
c002f013:	c3                   	ret    
c002f014:	0f bd e8             	bsr    ebp,eax
c002f017:	83 f5 1f             	xor    ebp,0x1f
c002f01a:	75 1c                	jne    c002f038 <__umoddi3+0x88>
c002f01c:	39 d8                	cmp    eax,ebx
c002f01e:	72 04                	jb     c002f024 <__umoddi3+0x74>
c002f020:	39 f7                	cmp    edi,esi
c002f022:	77 08                	ja     c002f02c <__umoddi3+0x7c>
c002f024:	89 da                	mov    edx,ebx
c002f026:	29 fe                	sub    esi,edi
c002f028:	19 c2                	sbb    edx,eax
c002f02a:	89 f1                	mov    ecx,esi
c002f02c:	89 c8                	mov    eax,ecx
c002f02e:	83 c4 1c             	add    esp,0x1c
c002f031:	5b                   	pop    ebx
c002f032:	5e                   	pop    esi
c002f033:	5f                   	pop    edi
c002f034:	5d                   	pop    ebp
c002f035:	c3                   	ret    
c002f036:	66 90                	xchg   ax,ax
c002f038:	ba 20 00 00 00       	mov    edx,0x20
c002f03d:	29 ea                	sub    edx,ebp
c002f03f:	89 e9                	mov    ecx,ebp
c002f041:	d3 e0                	shl    eax,cl
c002f043:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002f047:	89 f8                	mov    eax,edi
c002f049:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002f04d:	88 d1                	mov    cl,dl
c002f04f:	d3 e8                	shr    eax,cl
c002f051:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002f055:	09 c1                	or     ecx,eax
c002f057:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002f05b:	89 e9                	mov    ecx,ebp
c002f05d:	d3 e7                	shl    edi,cl
c002f05f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002f063:	89 d8                	mov    eax,ebx
c002f065:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002f069:	88 d1                	mov    cl,dl
c002f06b:	d3 e8                	shr    eax,cl
c002f06d:	89 c7                	mov    edi,eax
c002f06f:	89 e9                	mov    ecx,ebp
c002f071:	d3 e3                	shl    ebx,cl
c002f073:	89 f0                	mov    eax,esi
c002f075:	88 d1                	mov    cl,dl
c002f077:	d3 e8                	shr    eax,cl
c002f079:	09 d8                	or     eax,ebx
c002f07b:	89 e9                	mov    ecx,ebp
c002f07d:	d3 e6                	shl    esi,cl
c002f07f:	89 f3                	mov    ebx,esi
c002f081:	89 fa                	mov    edx,edi
c002f083:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002f087:	89 d1                	mov    ecx,edx
c002f089:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002f08d:	89 c6                	mov    esi,eax
c002f08f:	89 d7                	mov    edi,edx
c002f091:	39 d1                	cmp    ecx,edx
c002f093:	72 27                	jb     c002f0bc <__umoddi3+0x10c>
c002f095:	74 21                	je     c002f0b8 <__umoddi3+0x108>
c002f097:	89 ca                	mov    edx,ecx
c002f099:	29 f3                	sub    ebx,esi
c002f09b:	19 fa                	sbb    edx,edi
c002f09d:	89 d0                	mov    eax,edx
c002f09f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002f0a3:	d3 e0                	shl    eax,cl
c002f0a5:	89 e9                	mov    ecx,ebp
c002f0a7:	d3 eb                	shr    ebx,cl
c002f0a9:	09 d8                	or     eax,ebx
c002f0ab:	d3 ea                	shr    edx,cl
c002f0ad:	83 c4 1c             	add    esp,0x1c
c002f0b0:	5b                   	pop    ebx
c002f0b1:	5e                   	pop    esi
c002f0b2:	5f                   	pop    edi
c002f0b3:	5d                   	pop    ebp
c002f0b4:	c3                   	ret    
c002f0b5:	8d 76 00             	lea    esi,[esi+0x0]
c002f0b8:	39 c3                	cmp    ebx,eax
c002f0ba:	73 db                	jae    c002f097 <__umoddi3+0xe7>
c002f0bc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002f0c0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c002f0c4:	89 d7                	mov    edi,edx
c002f0c6:	89 c6                	mov    esi,eax
c002f0c8:	eb cd                	jmp    c002f097 <__umoddi3+0xe7>

Disassembly of section .init:

c002f0ca <_init>:
c002f0ca:	55                   	push   ebp
c002f0cb:	89 e5                	mov    ebp,esp
c002f0cd:	e8 22 10 fd ff       	call   c00000f4 <frame_dummy>
c002f0d2:	e8 e5 fa ff ff       	call   c002ebbc <__do_global_ctors_aux>
c002f0d7:	5d                   	pop    ebp
c002f0d8:	c3                   	ret    

Disassembly of section .fini:

c002f0d9 <_fini>:
c002f0d9:	55                   	push   ebp
c002f0da:	89 e5                	mov    ebp,esp
c002f0dc:	e8 a3 0f fd ff       	call   c0000084 <__do_global_dtors_aux>
c002f0e1:	5d                   	pop    ebp
c002f0e2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c002f0e4 <Computer::~Computer()>:
c002f0e4:	83 ec 0c             	sub    esp,0xc
c002f0e7:	ba 34 19 03 c0       	mov    edx,0xc0031934
c002f0ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0f0:	89 10                	mov    DWORD PTR [eax],edx
c002f0f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0f6:	83 ec 0c             	sub    esp,0xc
c002f0f9:	50                   	push   eax
c002f0fa:	e8 0d c4 fe ff       	call   c001b50c <Device::~Device()>
c002f0ff:	83 c4 10             	add    esp,0x10
c002f102:	90                   	nop
c002f103:	83 c4 0c             	add    esp,0xc
c002f106:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002f108 <Computer::~Computer()>:
c002f108:	83 ec 0c             	sub    esp,0xc
c002f10b:	83 ec 0c             	sub    esp,0xc
c002f10e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f112:	e8 cd ff ff ff       	call   c002f0e4 <Computer::~Computer()>
c002f117:	83 c4 10             	add    esp,0x10
c002f11a:	83 ec 08             	sub    esp,0x8
c002f11d:	68 70 01 00 00       	push   0x170
c002f122:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f126:	e8 95 a2 fe ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c002f12b:	83 c4 10             	add    esp,0x10
c002f12e:	83 c4 0c             	add    esp,0xc
c002f131:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c002f132 <idleCommon()>:
c002f132:	83 ec 0c             	sub    esp,0xc
c002f135:	fa                   	cli    
c002f136:	ff 05 d0 11 04 c0    	inc    DWORD PTR ds:0xc00411d0
c002f13c:	e8 17 66 ff ff       	call   c0025758 <schedule()>
c002f141:	a1 d0 11 04 c0       	mov    eax,ds:0xc00411d0
c002f146:	48                   	dec    eax
c002f147:	a3 d0 11 04 c0       	mov    ds:0xc00411d0,eax
c002f14c:	75 01                	jne    c002f14f <idleCommon()+0x1d>
c002f14e:	fb                   	sti    
c002f14f:	83 c4 0c             	add    esp,0xc
c002f152:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002f154 <LinkedList<UnixFile>::~LinkedList()>:
c002f154:	90                   	nop
c002f155:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002f156 <LinkedList<UnixFile>::LinkedList()>:
c002f156:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f15a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f160:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f164:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f16b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f16f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f176:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f17a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f180:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f184:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f18b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f18f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f196:	90                   	nop
c002f197:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002f198 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002f198:	83 ec 0c             	sub    esp,0xc
c002f19b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002f1a0:	75 10                	jne    c002f1b2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002f1a2:	83 ec 0c             	sub    esp,0xc
c002f1a5:	68 4c 1b 03 c0       	push   0xc0031b4c
c002f1aa:	e8 53 15 ff ff       	call   c0020702 <KePanic(char const*)>
c002f1af:	83 c4 10             	add    esp,0x10
c002f1b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1b6:	8b 00                	mov    eax,DWORD PTR [eax]
c002f1b8:	85 c0                	test   eax,eax
c002f1ba:	74 34                	je     c002f1f0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002f1bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f1c3:	85 c0                	test   eax,eax
c002f1c5:	74 29                	je     c002f1f0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002f1c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1cb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f1ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f1d2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f1d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f1dd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002f1e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f1e7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f1ee:	eb 65                	jmp    c002f255 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002f1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1f4:	8b 00                	mov    eax,DWORD PTR [eax]
c002f1f6:	85 c0                	test   eax,eax
c002f1f8:	75 4b                	jne    c002f245 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002f1fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f201:	85 c0                	test   eax,eax
c002f203:	75 40                	jne    c002f245 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002f205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f209:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f20d:	89 10                	mov    DWORD PTR [eax],edx
c002f20f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f213:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f217:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002f21a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f21e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f221:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f22c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f22f:	85 c0                	test   eax,eax
c002f231:	74 22                	je     c002f255 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002f233:	83 ec 0c             	sub    esp,0xc
c002f236:	68 6e 1b 03 c0       	push   0xc0031b6e
c002f23b:	e8 c2 14 ff ff       	call   c0020702 <KePanic(char const*)>
c002f240:	83 c4 10             	add    esp,0x10
c002f243:	eb 10                	jmp    c002f255 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002f245:	83 ec 0c             	sub    esp,0xc
c002f248:	68 78 1b 03 c0       	push   0xc0031b78
c002f24d:	e8 b0 14 ff ff       	call   c0020702 <KePanic(char const*)>
c002f252:	83 c4 10             	add    esp,0x10
c002f255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f259:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f25c:	8d 50 01             	lea    edx,[eax+0x1]
c002f25f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f263:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f266:	90                   	nop
c002f267:	83 c4 0c             	add    esp,0xc
c002f26a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002f26c <LinkedList<UnixFile>::getFirstElement()>:
c002f26c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f270:	8b 00                	mov    eax,DWORD PTR [eax]
c002f272:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002f274 <LinkedList<UnixFile>::removeFirst()>:
c002f274:	83 ec 0c             	sub    esp,0xc
c002f277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f27b:	8b 00                	mov    eax,DWORD PTR [eax]
c002f27d:	85 c0                	test   eax,eax
c002f27f:	75 12                	jne    c002f293 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002f281:	83 ec 0c             	sub    esp,0xc
c002f284:	68 84 1b 03 c0       	push   0xc0031b84
c002f289:	e8 74 14 ff ff       	call   c0020702 <KePanic(char const*)>
c002f28e:	83 c4 10             	add    esp,0x10
c002f291:	eb 7e                	jmp    c002f311 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002f293:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f297:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f29a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f29d:	85 c0                	test   eax,eax
c002f29f:	74 10                	je     c002f2b1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c002f2a1:	83 ec 0c             	sub    esp,0xc
c002f2a4:	68 cf 1b 03 c0       	push   0xc0031bcf
c002f2a9:	e8 54 14 ff ff       	call   c0020702 <KePanic(char const*)>
c002f2ae:	83 c4 10             	add    esp,0x10
c002f2b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2b5:	8b 00                	mov    eax,DWORD PTR [eax]
c002f2b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f2ba:	85 c0                	test   eax,eax
c002f2bc:	75 33                	jne    c002f2f1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c002f2be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f2c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f2d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f2da:	83 f8 01             	cmp    eax,0x1
c002f2dd:	74 21                	je     c002f300 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002f2df:	83 ec 0c             	sub    esp,0xc
c002f2e2:	68 a8 1b 03 c0       	push   0xc0031ba8
c002f2e7:	e8 16 14 ff ff       	call   c0020702 <KePanic(char const*)>
c002f2ec:	83 c4 10             	add    esp,0x10
c002f2ef:	eb 0f                	jmp    c002f300 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002f2f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2f5:	8b 00                	mov    eax,DWORD PTR [eax]
c002f2f7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002f2fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2fe:	89 10                	mov    DWORD PTR [eax],edx
c002f300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f304:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f307:	8d 50 ff             	lea    edx,[eax-0x1]
c002f30a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f30e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f311:	83 c4 0c             	add    esp,0xc
c002f314:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002f316 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002f316:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002f31a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f31d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002f31e <DriverlessDevice::~DriverlessDevice()>:
c002f31e:	ba 48 28 03 c0       	mov    edx,0xc0032848
c002f323:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f327:	89 10                	mov    DWORD PTR [eax],edx
c002f329:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f32d:	50                   	push   eax
c002f32e:	e8 d9 c1 fe ff       	call   c001b50c <Device::~Device()>
c002f333:	83 c4 04             	add    esp,0x4
c002f336:	90                   	nop
c002f337:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002f338 <DriverlessDevice::~DriverlessDevice()>:
c002f338:	83 ec 0c             	sub    esp,0xc
c002f33b:	83 ec 0c             	sub    esp,0xc
c002f33e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f342:	e8 d7 ff ff ff       	call   c002f31e <DriverlessDevice::~DriverlessDevice()>
c002f347:	83 c4 10             	add    esp,0x10
c002f34a:	83 ec 08             	sub    esp,0x8
c002f34d:	68 58 01 00 00       	push   0x158
c002f352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f356:	e8 65 a0 fe ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c002f35b:	83 c4 10             	add    esp,0x10
c002f35e:	83 c4 0c             	add    esp,0xc
c002f361:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002f362 <LinkedList<Device>::addElement(Device*)>:
c002f362:	83 ec 0c             	sub    esp,0xc
c002f365:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002f36a:	75 10                	jne    c002f37c <LinkedList<Device>::addElement(Device*)+0x1a>
c002f36c:	83 ec 0c             	sub    esp,0xc
c002f36f:	68 4c 1b 03 c0       	push   0xc0031b4c
c002f374:	e8 89 13 ff ff       	call   c0020702 <KePanic(char const*)>
c002f379:	83 c4 10             	add    esp,0x10
c002f37c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f380:	8b 00                	mov    eax,DWORD PTR [eax]
c002f382:	85 c0                	test   eax,eax
c002f384:	74 3a                	je     c002f3c0 <LinkedList<Device>::addElement(Device*)+0x5e>
c002f386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f38a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f38d:	85 c0                	test   eax,eax
c002f38f:	74 2f                	je     c002f3c0 <LinkedList<Device>::addElement(Device*)+0x5e>
c002f391:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f395:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f398:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f39c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002f3a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f3aa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002f3ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f3b4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002f3be:	eb 68                	jmp    c002f428 <LinkedList<Device>::addElement(Device*)+0xc6>
c002f3c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3c4:	8b 00                	mov    eax,DWORD PTR [eax]
c002f3c6:	85 c0                	test   eax,eax
c002f3c8:	75 4e                	jne    c002f418 <LinkedList<Device>::addElement(Device*)+0xb6>
c002f3ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f3d1:	85 c0                	test   eax,eax
c002f3d3:	75 43                	jne    c002f418 <LinkedList<Device>::addElement(Device*)+0xb6>
c002f3d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f3dd:	89 10                	mov    DWORD PTR [eax],edx
c002f3df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f3e7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002f3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f3f1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002f3fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f402:	85 c0                	test   eax,eax
c002f404:	74 22                	je     c002f428 <LinkedList<Device>::addElement(Device*)+0xc6>
c002f406:	83 ec 0c             	sub    esp,0xc
c002f409:	68 6e 1b 03 c0       	push   0xc0031b6e
c002f40e:	e8 ef 12 ff ff       	call   c0020702 <KePanic(char const*)>
c002f413:	83 c4 10             	add    esp,0x10
c002f416:	eb 10                	jmp    c002f428 <LinkedList<Device>::addElement(Device*)+0xc6>
c002f418:	83 ec 0c             	sub    esp,0xc
c002f41b:	68 78 1b 03 c0       	push   0xc0031b78
c002f420:	e8 dd 12 ff ff       	call   c0020702 <KePanic(char const*)>
c002f425:	83 c4 10             	add    esp,0x10
c002f428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f42c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f42f:	8d 50 01             	lea    edx,[eax+0x1]
c002f432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f436:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f439:	90                   	nop
c002f43a:	83 c4 0c             	add    esp,0xc
c002f43d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002f43e <LinkedList<Device>::LinkedList()>:
c002f43e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f442:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f448:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f44c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f453:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f457:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f45e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f462:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f468:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f46c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f473:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f477:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f47e:	90                   	nop
c002f47f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002f480 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002f480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f484:	8b 00                	mov    eax,DWORD PTR [eax]
c002f486:	85 c0                	test   eax,eax
c002f488:	75 0e                	jne    c002f498 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002f48a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f48e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f491:	85 c0                	test   eax,eax
c002f493:	75 03                	jne    c002f498 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002f495:	b0 01                	mov    al,0x1
c002f497:	c3                   	ret    
c002f498:	b0 00                	mov    al,0x0
c002f49a:	90                   	nop
c002f49b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002f49c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002f49c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f4a0:	8b 00                	mov    eax,DWORD PTR [eax]
c002f4a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002f4a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002f4a4:	83 ec 0c             	sub    esp,0xc
c002f4a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f4ab:	8b 00                	mov    eax,DWORD PTR [eax]
c002f4ad:	85 c0                	test   eax,eax
c002f4af:	75 17                	jne    c002f4c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002f4b1:	83 ec 0c             	sub    esp,0xc
c002f4b4:	68 84 1b 03 c0       	push   0xc0031b84
c002f4b9:	e8 44 12 ff ff       	call   c0020702 <KePanic(char const*)>
c002f4be:	83 c4 10             	add    esp,0x10
c002f4c1:	e9 96 00 00 00       	jmp    c002f55c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c002f4c6:	66 90                	xchg   ax,ax
c002f4c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f4cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f4cf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002f4d2:	85 c0                	test   eax,eax
c002f4d4:	0f 95 c0             	setne  al
c002f4d7:	0f b6 c0             	movzx  eax,al
c002f4da:	85 c0                	test   eax,eax
c002f4dc:	74 12                	je     c002f4f0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002f4de:	83 ec 0c             	sub    esp,0xc
c002f4e1:	68 cf 1b 03 c0       	push   0xc0031bcf
c002f4e6:	e8 17 12 ff ff       	call   c0020702 <KePanic(char const*)>
c002f4eb:	83 c4 10             	add    esp,0x10
c002f4ee:	66 90                	xchg   ax,ax
c002f4f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f4f4:	8b 00                	mov    eax,DWORD PTR [eax]
c002f4f6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002f4f9:	85 c0                	test   eax,eax
c002f4fb:	0f 94 c0             	sete   al
c002f4fe:	0f b6 c0             	movzx  eax,al
c002f501:	85 c0                	test   eax,eax
c002f503:	74 33                	je     c002f538 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c002f505:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f509:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f50f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f513:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f51a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f51e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f521:	83 f8 01             	cmp    eax,0x1
c002f524:	74 22                	je     c002f548 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002f526:	83 ec 0c             	sub    esp,0xc
c002f529:	68 a8 1b 03 c0       	push   0xc0031ba8
c002f52e:	e8 cf 11 ff ff       	call   c0020702 <KePanic(char const*)>
c002f533:	83 c4 10             	add    esp,0x10
c002f536:	eb 10                	jmp    c002f548 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002f538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f53c:	8b 00                	mov    eax,DWORD PTR [eax]
c002f53e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002f541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f545:	89 10                	mov    DWORD PTR [eax],edx
c002f547:	90                   	nop
c002f548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f54c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f54f:	8d 50 ff             	lea    edx,[eax-0x1]
c002f552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f556:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f559:	8d 76 00             	lea    esi,[esi+0x0]
c002f55c:	83 c4 0c             	add    esp,0xc
c002f55f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002f560 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002f560:	83 ec 0c             	sub    esp,0xc
c002f563:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002f568:	75 12                	jne    c002f57c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c002f56a:	83 ec 0c             	sub    esp,0xc
c002f56d:	68 4c 1b 03 c0       	push   0xc0031b4c
c002f572:	e8 8b 11 ff ff       	call   c0020702 <KePanic(char const*)>
c002f577:	83 c4 10             	add    esp,0x10
c002f57a:	66 90                	xchg   ax,ax
c002f57c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f580:	8b 00                	mov    eax,DWORD PTR [eax]
c002f582:	85 c0                	test   eax,eax
c002f584:	74 36                	je     c002f5bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002f586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f58a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f58d:	85 c0                	test   eax,eax
c002f58f:	74 2b                	je     c002f5bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002f591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f595:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f598:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f59c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002f59f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f5a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f5a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002f5aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f5ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f5b1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002f5b8:	eb 6a                	jmp    c002f624 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002f5ba:	66 90                	xchg   ax,ax
c002f5bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f5c0:	8b 00                	mov    eax,DWORD PTR [eax]
c002f5c2:	85 c0                	test   eax,eax
c002f5c4:	75 4e                	jne    c002f614 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002f5c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f5ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f5cd:	85 c0                	test   eax,eax
c002f5cf:	75 43                	jne    c002f614 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002f5d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f5d5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f5d9:	89 10                	mov    DWORD PTR [eax],edx
c002f5db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f5df:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002f5e3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002f5e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f5ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f5ed:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002f5f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f5f8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f5fb:	85 c0                	test   eax,eax
c002f5fd:	74 25                	je     c002f624 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002f5ff:	83 ec 0c             	sub    esp,0xc
c002f602:	68 6e 1b 03 c0       	push   0xc0031b6e
c002f607:	e8 f6 10 ff ff       	call   c0020702 <KePanic(char const*)>
c002f60c:	83 c4 10             	add    esp,0x10
c002f60f:	eb 13                	jmp    c002f624 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002f611:	8d 76 00             	lea    esi,[esi+0x0]
c002f614:	83 ec 0c             	sub    esp,0xc
c002f617:	68 78 1b 03 c0       	push   0xc0031b78
c002f61c:	e8 e1 10 ff ff       	call   c0020702 <KePanic(char const*)>
c002f621:	83 c4 10             	add    esp,0x10
c002f624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f628:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f62b:	8d 50 01             	lea    edx,[eax+0x1]
c002f62e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f632:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f635:	90                   	nop
c002f636:	83 c4 0c             	add    esp,0xc
c002f639:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c002f63c <ACPI::~ACPI()>:
c002f63c:	83 ec 0c             	sub    esp,0xc
c002f63f:	ba 00 2f 03 c0       	mov    edx,0xc0032f00
c002f644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f648:	89 10                	mov    DWORD PTR [eax],edx
c002f64a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f64e:	83 ec 0c             	sub    esp,0xc
c002f651:	50                   	push   eax
c002f652:	e8 b5 be fe ff       	call   c001b50c <Device::~Device()>
c002f657:	83 c4 10             	add    esp,0x10
c002f65a:	90                   	nop
c002f65b:	83 c4 0c             	add    esp,0xc
c002f65e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002f660 <ACPI::~ACPI()>:
c002f660:	83 ec 0c             	sub    esp,0xc
c002f663:	83 ec 0c             	sub    esp,0xc
c002f666:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f66a:	e8 cd ff ff ff       	call   c002f63c <ACPI::~ACPI()>
c002f66f:	83 c4 10             	add    esp,0x10
c002f672:	83 ec 08             	sub    esp,0x8
c002f675:	68 64 12 00 00       	push   0x1264
c002f67a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f67e:	e8 3d 9d fe ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c002f683:	83 c4 10             	add    esp,0x10
c002f686:	83 c4 0c             	add    esp,0xc
c002f689:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002f68c <LinkedList<Device>::~LinkedList()>:
c002f68c:	90                   	nop
c002f68d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002f690 <LinkedList<Device>::isEmpty()>:
c002f690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f694:	8b 00                	mov    eax,DWORD PTR [eax]
c002f696:	85 c0                	test   eax,eax
c002f698:	75 0e                	jne    c002f6a8 <LinkedList<Device>::isEmpty()+0x18>
c002f69a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f69e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f6a1:	85 c0                	test   eax,eax
c002f6a3:	75 03                	jne    c002f6a8 <LinkedList<Device>::isEmpty()+0x18>
c002f6a5:	b0 01                	mov    al,0x1
c002f6a7:	c3                   	ret    
c002f6a8:	b0 00                	mov    al,0x0
c002f6aa:	90                   	nop
c002f6ab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002f6ac <LinkedList<Device>::getFirstElement()>:
c002f6ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f6b0:	8b 00                	mov    eax,DWORD PTR [eax]
c002f6b2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c002f6b4 <LinkedList<Device>::removeFirst()>:
c002f6b4:	83 ec 0c             	sub    esp,0xc
c002f6b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f6bb:	8b 00                	mov    eax,DWORD PTR [eax]
c002f6bd:	85 c0                	test   eax,eax
c002f6bf:	75 17                	jne    c002f6d8 <LinkedList<Device>::removeFirst()+0x24>
c002f6c1:	83 ec 0c             	sub    esp,0xc
c002f6c4:	68 84 1b 03 c0       	push   0xc0031b84
c002f6c9:	e8 34 10 ff ff       	call   c0020702 <KePanic(char const*)>
c002f6ce:	83 c4 10             	add    esp,0x10
c002f6d1:	e9 92 00 00 00       	jmp    c002f768 <LinkedList<Device>::removeFirst()+0xb4>
c002f6d6:	66 90                	xchg   ax,ax
c002f6d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f6dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f6df:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002f6e5:	85 c0                	test   eax,eax
c002f6e7:	74 13                	je     c002f6fc <LinkedList<Device>::removeFirst()+0x48>
c002f6e9:	83 ec 0c             	sub    esp,0xc
c002f6ec:	68 cf 1b 03 c0       	push   0xc0031bcf
c002f6f1:	e8 0c 10 ff ff       	call   c0020702 <KePanic(char const*)>
c002f6f6:	83 c4 10             	add    esp,0x10
c002f6f9:	8d 76 00             	lea    esi,[esi+0x0]
c002f6fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f700:	8b 00                	mov    eax,DWORD PTR [eax]
c002f702:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002f708:	85 c0                	test   eax,eax
c002f70a:	75 34                	jne    c002f740 <LinkedList<Device>::removeFirst()+0x8c>
c002f70c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f710:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f71a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f725:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f728:	83 f8 01             	cmp    eax,0x1
c002f72b:	74 27                	je     c002f754 <LinkedList<Device>::removeFirst()+0xa0>
c002f72d:	83 ec 0c             	sub    esp,0xc
c002f730:	68 a8 1b 03 c0       	push   0xc0031ba8
c002f735:	e8 c8 0f ff ff       	call   c0020702 <KePanic(char const*)>
c002f73a:	83 c4 10             	add    esp,0x10
c002f73d:	eb 15                	jmp    c002f754 <LinkedList<Device>::removeFirst()+0xa0>
c002f73f:	90                   	nop
c002f740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f744:	8b 00                	mov    eax,DWORD PTR [eax]
c002f746:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002f74c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f750:	89 10                	mov    DWORD PTR [eax],edx
c002f752:	66 90                	xchg   ax,ax
c002f754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f758:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f75b:	8d 50 ff             	lea    edx,[eax-0x1]
c002f75e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f762:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f765:	8d 76 00             	lea    esi,[esi+0x0]
c002f768:	83 c4 0c             	add    esp,0xc
c002f76b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002f76c <CPU::~CPU()>:
c002f76c:	83 ec 0c             	sub    esp,0xc
c002f76f:	ba a8 30 03 c0       	mov    edx,0xc00330a8
c002f774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f778:	89 10                	mov    DWORD PTR [eax],edx
c002f77a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f77e:	83 ec 0c             	sub    esp,0xc
c002f781:	50                   	push   eax
c002f782:	e8 85 bd fe ff       	call   c001b50c <Device::~Device()>
c002f787:	83 c4 10             	add    esp,0x10
c002f78a:	90                   	nop
c002f78b:	83 c4 0c             	add    esp,0xc
c002f78e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002f790 <CPU::~CPU()>:
c002f790:	83 ec 0c             	sub    esp,0xc
c002f793:	83 ec 0c             	sub    esp,0xc
c002f796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f79a:	e8 cd ff ff ff       	call   c002f76c <CPU::~CPU()>
c002f79f:	83 c4 10             	add    esp,0x10
c002f7a2:	83 ec 08             	sub    esp,0x8
c002f7a5:	68 94 11 00 00       	push   0x1194
c002f7aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f7ae:	e8 0d 9c fe ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c002f7b3:	83 c4 10             	add    esp,0x10
c002f7b6:	83 c4 0c             	add    esp,0xc
c002f7b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002f7bc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002f7bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002f7c0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002f7c3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002f7c4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002f7c4:	90                   	nop
c002f7c5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c002f7c8 <ThreadControlBlock::ThreadControlBlock()>:
c002f7c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f7cc:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002f7d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f7d7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002f7de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f7e2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002f7e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f7ed:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002f7f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f7f8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002f7ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f803:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002f807:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f80b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002f80f:	90                   	nop
c002f810:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002f814 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002f814:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f818:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f81e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f822:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f829:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f82d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f834:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f838:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f83e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f842:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f849:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f84d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f854:	90                   	nop
c002f855:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002f856 <PCI::~PCI()>:
c002f856:	83 ec 0c             	sub    esp,0xc
c002f859:	ba ec 3f 03 c0       	mov    edx,0xc0033fec
c002f85e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f862:	89 10                	mov    DWORD PTR [eax],edx
c002f864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f868:	83 ec 0c             	sub    esp,0xc
c002f86b:	50                   	push   eax
c002f86c:	e8 77 b6 fe ff       	call   c001aee8 <Bus::~Bus()>
c002f871:	83 c4 10             	add    esp,0x10
c002f874:	90                   	nop
c002f875:	83 c4 0c             	add    esp,0xc
c002f878:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002f87a <PCI::~PCI()>:
c002f87a:	83 ec 0c             	sub    esp,0xc
c002f87d:	83 ec 0c             	sub    esp,0xc
c002f880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f884:	e8 cd ff ff ff       	call   c002f856 <PCI::~PCI()>
c002f889:	83 c4 10             	add    esp,0x10
c002f88c:	83 ec 08             	sub    esp,0x8
c002f88f:	68 5c 01 00 00       	push   0x15c
c002f894:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f898:	e8 23 9b fe ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c002f89d:	83 c4 10             	add    esp,0x10
c002f8a0:	83 c4 0c             	add    esp,0xc
c002f8a3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002f8a4 <IDE::~IDE()>:
c002f8a4:	83 ec 0c             	sub    esp,0xc
c002f8a7:	ba 10 41 03 c0       	mov    edx,0xc0034110
c002f8ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f8b0:	89 10                	mov    DWORD PTR [eax],edx
c002f8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f8b6:	83 ec 0c             	sub    esp,0xc
c002f8b9:	50                   	push   eax
c002f8ba:	e8 dd c0 fe ff       	call   c001b99c <HardDiskController::~HardDiskController()>
c002f8bf:	83 c4 10             	add    esp,0x10
c002f8c2:	90                   	nop
c002f8c3:	83 c4 0c             	add    esp,0xc
c002f8c6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002f8c8 <IDE::~IDE()>:
c002f8c8:	83 ec 0c             	sub    esp,0xc
c002f8cb:	83 ec 0c             	sub    esp,0xc
c002f8ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f8d2:	e8 cd ff ff ff       	call   c002f8a4 <IDE::~IDE()>
c002f8d7:	83 c4 10             	add    esp,0x10
c002f8da:	83 ec 08             	sub    esp,0x8
c002f8dd:	68 70 02 00 00       	push   0x270
c002f8e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f8e6:	e8 d5 9a fe ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c002f8eb:	83 c4 10             	add    esp,0x10
c002f8ee:	83 c4 0c             	add    esp,0xc
c002f8f1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002f8f2 <SATABus::~SATABus()>:
c002f8f2:	83 ec 0c             	sub    esp,0xc
c002f8f5:	ba 60 41 03 c0       	mov    edx,0xc0034160
c002f8fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f8fe:	89 10                	mov    DWORD PTR [eax],edx
c002f900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f904:	83 ec 0c             	sub    esp,0xc
c002f907:	50                   	push   eax
c002f908:	e8 8f c0 fe ff       	call   c001b99c <HardDiskController::~HardDiskController()>
c002f90d:	83 c4 10             	add    esp,0x10
c002f910:	90                   	nop
c002f911:	83 c4 0c             	add    esp,0xc
c002f914:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002f916 <SATABus::~SATABus()>:
c002f916:	83 ec 0c             	sub    esp,0xc
c002f919:	83 ec 0c             	sub    esp,0xc
c002f91c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f920:	e8 cd ff ff ff       	call   c002f8f2 <SATABus::~SATABus()>
c002f925:	83 c4 10             	add    esp,0x10
c002f928:	83 ec 08             	sub    esp,0x8
c002f92b:	68 64 01 00 00       	push   0x164
c002f930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f934:	e8 87 9a fe ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c002f939:	83 c4 10             	add    esp,0x10
c002f93c:	83 c4 0c             	add    esp,0xc
c002f93f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c002f940 <ATA::~ATA()>:
c002f940:	83 ec 0c             	sub    esp,0xc
c002f943:	ba a0 41 03 c0       	mov    edx,0xc00341a0
c002f948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f94c:	89 10                	mov    DWORD PTR [eax],edx
c002f94e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f952:	83 ec 0c             	sub    esp,0xc
c002f955:	50                   	push   eax
c002f956:	e8 23 c1 fe ff       	call   c001ba7e <PhysicalDisk::~PhysicalDisk()>
c002f95b:	83 c4 10             	add    esp,0x10
c002f95e:	90                   	nop
c002f95f:	83 c4 0c             	add    esp,0xc
c002f962:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002f964 <ATA::~ATA()>:
c002f964:	83 ec 0c             	sub    esp,0xc
c002f967:	83 ec 0c             	sub    esp,0xc
c002f96a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f96e:	e8 cd ff ff ff       	call   c002f940 <ATA::~ATA()>
c002f973:	83 c4 10             	add    esp,0x10
c002f976:	83 ec 08             	sub    esp,0x8
c002f979:	68 7c 01 00 00       	push   0x17c
c002f97e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f982:	e8 39 9a fe ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c002f987:	83 c4 10             	add    esp,0x10
c002f98a:	83 c4 0c             	add    esp,0xc
c002f98d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002f98e <ATAPI::~ATAPI()>:
c002f98e:	83 ec 0c             	sub    esp,0xc
c002f991:	ba e8 41 03 c0       	mov    edx,0xc00341e8
c002f996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f99a:	89 10                	mov    DWORD PTR [eax],edx
c002f99c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f9a0:	83 ec 0c             	sub    esp,0xc
c002f9a3:	50                   	push   eax
c002f9a4:	e8 d5 c0 fe ff       	call   c001ba7e <PhysicalDisk::~PhysicalDisk()>
c002f9a9:	83 c4 10             	add    esp,0x10
c002f9ac:	90                   	nop
c002f9ad:	83 c4 0c             	add    esp,0xc
c002f9b0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002f9b2 <ATAPI::~ATAPI()>:
c002f9b2:	83 ec 0c             	sub    esp,0xc
c002f9b5:	83 ec 0c             	sub    esp,0xc
c002f9b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f9bc:	e8 cd ff ff ff       	call   c002f98e <ATAPI::~ATAPI()>
c002f9c1:	83 c4 10             	add    esp,0x10
c002f9c4:	83 ec 08             	sub    esp,0x8
c002f9c7:	68 84 01 00 00       	push   0x184
c002f9cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f9d0:	e8 eb 99 fe ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c002f9d5:	83 c4 10             	add    esp,0x10
c002f9d8:	83 c4 0c             	add    esp,0xc
c002f9db:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002f9dc <SATA::~SATA()>:
c002f9dc:	83 ec 0c             	sub    esp,0xc
c002f9df:	ba a8 42 03 c0       	mov    edx,0xc00342a8
c002f9e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f9e8:	89 10                	mov    DWORD PTR [eax],edx
c002f9ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f9ee:	83 ec 0c             	sub    esp,0xc
c002f9f1:	50                   	push   eax
c002f9f2:	e8 87 c0 fe ff       	call   c001ba7e <PhysicalDisk::~PhysicalDisk()>
c002f9f7:	83 c4 10             	add    esp,0x10
c002f9fa:	90                   	nop
c002f9fb:	83 c4 0c             	add    esp,0xc
c002f9fe:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c002fa00 <SATA::~SATA()>:
c002fa00:	83 ec 0c             	sub    esp,0xc
c002fa03:	83 ec 0c             	sub    esp,0xc
c002fa06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002fa0a:	e8 cd ff ff ff       	call   c002f9dc <SATA::~SATA()>
c002fa0f:	83 c4 10             	add    esp,0x10
c002fa12:	83 ec 08             	sub    esp,0x8
c002fa15:	68 7c 01 00 00       	push   0x17c
c002fa1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002fa1e:	e8 9d 99 fe ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c002fa23:	83 c4 10             	add    esp,0x10
c002fa26:	83 c4 0c             	add    esp,0xc
c002fa29:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002fa2a <SATAPI::~SATAPI()>:
c002fa2a:	83 ec 0c             	sub    esp,0xc
c002fa2d:	ba cc 43 03 c0       	mov    edx,0xc00343cc
c002fa32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002fa36:	89 10                	mov    DWORD PTR [eax],edx
c002fa38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002fa3c:	83 ec 0c             	sub    esp,0xc
c002fa3f:	50                   	push   eax
c002fa40:	e8 39 c0 fe ff       	call   c001ba7e <PhysicalDisk::~PhysicalDisk()>
c002fa45:	83 c4 10             	add    esp,0x10
c002fa48:	90                   	nop
c002fa49:	83 c4 0c             	add    esp,0xc
c002fa4c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002fa4e <SATAPI::~SATAPI()>:
c002fa4e:	83 ec 0c             	sub    esp,0xc
c002fa51:	83 ec 0c             	sub    esp,0xc
c002fa54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002fa58:	e8 cd ff ff ff       	call   c002fa2a <SATAPI::~SATAPI()>
c002fa5d:	83 c4 10             	add    esp,0x10
c002fa60:	83 ec 08             	sub    esp,0x8
c002fa63:	68 84 01 00 00       	push   0x184
c002fa68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002fa6c:	e8 4f 99 fe ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c002fa71:	83 c4 10             	add    esp,0x10
c002fa74:	83 c4 0c             	add    esp,0xc
c002fa77:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002fa78 <IOAPIC::~IOAPIC()>:
c002fa78:	83 ec 0c             	sub    esp,0xc
c002fa7b:	ba 0c 44 03 c0       	mov    edx,0xc003440c
c002fa80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002fa84:	89 10                	mov    DWORD PTR [eax],edx
c002fa86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002fa8a:	83 ec 0c             	sub    esp,0xc
c002fa8d:	50                   	push   eax
c002fa8e:	e8 79 ba fe ff       	call   c001b50c <Device::~Device()>
c002fa93:	83 c4 10             	add    esp,0x10
c002fa96:	90                   	nop
c002fa97:	83 c4 0c             	add    esp,0xc
c002fa9a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002fa9c <IOAPIC::~IOAPIC()>:
c002fa9c:	83 ec 0c             	sub    esp,0xc
c002fa9f:	83 ec 0c             	sub    esp,0xc
c002faa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002faa6:	e8 cd ff ff ff       	call   c002fa78 <IOAPIC::~IOAPIC()>
c002faab:	83 c4 10             	add    esp,0x10
c002faae:	83 ec 08             	sub    esp,0x8
c002fab1:	68 68 01 00 00       	push   0x168
c002fab6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002faba:	e8 01 99 fe ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c002fabf:	83 c4 10             	add    esp,0x10
c002fac2:	83 c4 0c             	add    esp,0xc
c002fac5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002fac8 <APICTimer::~APICTimer()>:
c002fac8:	83 ec 0c             	sub    esp,0xc
c002facb:	ba 54 44 03 c0       	mov    edx,0xc0034454
c002fad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002fad4:	89 10                	mov    DWORD PTR [eax],edx
c002fad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002fada:	83 ec 0c             	sub    esp,0xc
c002fadd:	50                   	push   eax
c002fade:	e8 0d d5 fe ff       	call   c001cff0 <Timer::~Timer()>
c002fae3:	83 c4 10             	add    esp,0x10
c002fae6:	90                   	nop
c002fae7:	83 c4 0c             	add    esp,0xc
c002faea:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002faec <APICTimer::~APICTimer()>:
c002faec:	83 ec 0c             	sub    esp,0xc
c002faef:	83 ec 0c             	sub    esp,0xc
c002faf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002faf6:	e8 cd ff ff ff       	call   c002fac8 <APICTimer::~APICTimer()>
c002fafb:	83 c4 10             	add    esp,0x10
c002fafe:	83 ec 08             	sub    esp,0x8
c002fb01:	68 60 01 00 00       	push   0x160
c002fb06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002fb0a:	e8 b1 98 fe ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c002fb0f:	83 c4 10             	add    esp,0x10
c002fb12:	83 c4 0c             	add    esp,0xc
c002fb15:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002fb18 <PIT::~PIT()>:
c002fb18:	83 ec 0c             	sub    esp,0xc
c002fb1b:	ba a4 44 03 c0       	mov    edx,0xc00344a4
c002fb20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002fb24:	89 10                	mov    DWORD PTR [eax],edx
c002fb26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002fb2a:	83 ec 0c             	sub    esp,0xc
c002fb2d:	50                   	push   eax
c002fb2e:	e8 bd d4 fe ff       	call   c001cff0 <Timer::~Timer()>
c002fb33:	83 c4 10             	add    esp,0x10
c002fb36:	90                   	nop
c002fb37:	83 c4 0c             	add    esp,0xc
c002fb3a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002fb3c <PIT::~PIT()>:
c002fb3c:	83 ec 0c             	sub    esp,0xc
c002fb3f:	83 ec 0c             	sub    esp,0xc
c002fb42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002fb46:	e8 cd ff ff ff       	call   c002fb18 <PIT::~PIT()>
c002fb4b:	83 c4 10             	add    esp,0x10
c002fb4e:	83 ec 08             	sub    esp,0x8
c002fb51:	68 5c 01 00 00       	push   0x15c
c002fb56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002fb5a:	e8 61 98 fe ff       	call   c00193c0 <operator delete(void*, unsigned long)>
c002fb5f:	83 c4 10             	add    esp,0x10
c002fb62:	83 c4 0c             	add    esp,0xc
c002fb65:	c3                   	ret    

Disassembly of section userkernel:

c0036000 <KiDefaultSignalHandlerAbort(int)>:
c0036000:	57                   	push   edi
c0036001:	b9 07 00 00 00       	mov    ecx,0x7
c0036006:	56                   	push   esi
c0036007:	be fb 31 03 c0       	mov    esi,0xc00331fb
c003600c:	83 ec 24             	sub    esp,0x24
c003600f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0036013:	fc                   	cld    
c0036014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0036016:	8d 44 24 04          	lea    eax,[esp+0x4]
c003601a:	50                   	push   eax
c003601b:	6a 00                	push   0x0
c003601d:	6a 38                	push   0x38
c003601f:	6a 01                	push   0x1
c0036021:	e8 2c 00 00 00       	call   c0036052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0036026:	83 c4 34             	add    esp,0x34
c0036029:	5e                   	pop    esi
c003602a:	5f                   	pop    edi
c003602b:	c3                   	ret    

c003602c <KiDefaultSignalHandlerTerminate(int)>:
c003602c:	57                   	push   edi
c003602d:	b9 08 00 00 00       	mov    ecx,0x8
c0036032:	56                   	push   esi
c0036033:	be 17 32 03 c0       	mov    esi,0xc0033217
c0036038:	83 ec 24             	sub    esp,0x24
c003603b:	89 e7                	mov    edi,esp
c003603d:	fc                   	cld    
c003603e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0036040:	54                   	push   esp
c0036041:	6a 00                	push   0x0
c0036043:	6a 37                	push   0x37
c0036045:	6a 01                	push   0x1
c0036047:	e8 06 00 00 00       	call   c0036052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c003604c:	83 c4 34             	add    esp,0x34
c003604f:	5e                   	pop    esi
c0036050:	5f                   	pop    edi
c0036051:	c3                   	ret    

c0036052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0036052:	53                   	push   ebx
c0036053:	83 ec 10             	sub    esp,0x10
c0036056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c003605a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c003605e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0036062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0036066:	cd 60                	int    0x60
c0036068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c003606c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0036070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0036074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0036078:	83 c4 10             	add    esp,0x10
c003607b:	5b                   	pop    ebx
c003607c:	c3                   	ret    

Disassembly of section align_previous:

c0037000 <DO_NOT_DELETE()>:
c0037000:	c3                   	ret    
